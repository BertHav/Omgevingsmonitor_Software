
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025ad4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f80  08025b98  08025b98  00026b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029b18  08029b18  0002b43c  2**0
                  CONTENTS
  4 .ARM          00000008  08029b18  08029b18  0002ab18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029b20  08029b20  0002b43c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029b20  08029b20  0002ab20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08029b24  08029b24  0002ab24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  08029b28  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003160  2000043c  08029f64  0002b43c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000359c  08029f64  0002b59c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002b43c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000357d5  00000000  00000000  0002b464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009988  00000000  00000000  00060c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c68  00000000  00000000  0006a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000020f9  00000000  00000000  0006d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002394d  00000000  00000000  0006f329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000442fd  00000000  00000000  00092c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d78  00000000  00000000  000d6f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00178ceb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b46c  00000000  00000000  00178d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00184208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00184275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001867f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08025b7c 	.word	0x08025b7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	08025b7c 	.word	0x08025b7c

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08028cac 	.word	0x08028cac
 8000e0c:	08028cec 	.word	0x08028cec
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08028d28 	.word	0x08028d28
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000630 	.word	0x20000630

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00d fdd6 	bl	801121c <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	2000062c 	.word	0x2000062c

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f003 fc0e 	bl	8006eac <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f003 fc6b 	bl	8006f70 <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000584 	.word	0x20000584
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000588 	.word	0x20000588

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f005 fe4b 	bl	8009378 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000678 	.word	0x20000678
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000684 	.word	0x20000684
 8003738:	20000688 	.word	0x20000688

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f005 fe15 	bl	8009378 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000068c 	.word	0x2000068c
 800379c:	08080090 	.word	0x08080090
 80037a0:	200006ac 	.word	0x200006ac
 80037a4:	200006b0 	.word	0x200006b0

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	2000063c 	.word	0x2000063c

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	2000063c 	.word	0x2000063c

08003800 <sethPa>:

void sethPa(float hPa) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <sethPa+0x30>)
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (hPa > MeasVal.hPaValuemax) {
 800380e:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <sethPa+0x30>)
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	1c19      	adds	r1, r3, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7fc fe9f 	bl	8000558 <__aeabi_fcmpgt>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d100      	bne.n	8003820 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 800381e:	e002      	b.n	8003826 <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8003820:	4b03      	ldr	r3, [pc, #12]	@ (8003830 <sethPa+0x30>)
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	2000063c 	.word	0x2000063c

08003834 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <setMic+0x28>)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <setMic+0x28>)
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <setMic+0x28>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b004      	add	sp, #16
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	2000063c 	.word	0x2000063c

08003860 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	0002      	movs	r2, r0
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd fead 	bl	80015d0 <__aeabi_i2f>
 8003876:	1c03      	adds	r3, r0, #0
 8003878:	490d      	ldr	r1, [pc, #52]	@ (80038b0 <setPM2p5+0x50>)
 800387a:	1c18      	adds	r0, r3, #0
 800387c:	f7fd f9aa 	bl	8000bd4 <__aeabi_fdiv>
 8003880:	1c03      	adds	r3, r0, #0
 8003882:	1c1a      	adds	r2, r3, #0
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <setPM2p5+0x54>)
 8003886:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003888:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <setPM2p5+0x54>)
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <setPM2p5+0x54>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	1c19      	adds	r1, r3, #0
 8003892:	1c10      	adds	r0, r2, #0
 8003894:	f7fc fe60 	bl	8000558 <__aeabi_fcmpgt>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d100      	bne.n	800389e <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 800389c:	e003      	b.n	80038a6 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <setPM2p5+0x54>)
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <setPM2p5+0x54>)
 80038a4:	60da      	str	r2, [r3, #12]
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	41200000 	.word	0x41200000
 80038b4:	2000063c 	.word	0x2000063c

080038b8 <setPM10>:

void setPM10(uint16_t PM10) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dbb      	adds	r3, r7, #6
 80038c2:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7fd fe81 	bl	80015d0 <__aeabi_i2f>
 80038ce:	1c03      	adds	r3, r0, #0
 80038d0:	490d      	ldr	r1, [pc, #52]	@ (8003908 <setPM10+0x50>)
 80038d2:	1c18      	adds	r0, r3, #0
 80038d4:	f7fd f97e 	bl	8000bd4 <__aeabi_fdiv>
 80038d8:	1c03      	adds	r3, r0, #0
 80038da:	1c1a      	adds	r2, r3, #0
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <setPM10+0x54>)
 80038de:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038e0:	4b0a      	ldr	r3, [pc, #40]	@ (800390c <setPM10+0x54>)
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	4b09      	ldr	r3, [pc, #36]	@ (800390c <setPM10+0x54>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	1c19      	adds	r1, r3, #0
 80038ea:	1c10      	adds	r0, r2, #0
 80038ec:	f7fc fe34 	bl	8000558 <__aeabi_fcmpgt>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d100      	bne.n	80038f6 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038f4:	e003      	b.n	80038fe <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038f6:	4b05      	ldr	r3, [pc, #20]	@ (800390c <setPM10+0x54>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <setPM10+0x54>)
 80038fc:	615a      	str	r2, [r3, #20]
}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	b002      	add	sp, #8
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	41200000 	.word	0x41200000
 800390c:	2000063c 	.word	0x2000063c

08003910 <setNOx>:

void setNOx(uint16_t nox) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <setNOx+0x30>)
 800391e:	1dba      	adds	r2, r7, #6
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <setNOx+0x30>)
 8003926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003928:	1dba      	adds	r2, r7, #6
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setNOx+0x30>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	2000063c 	.word	0x2000063c

08003944 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003948:	f007 fd3e 	bl	800b3c8 <sen5x_Get_sen5x_enable_state>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d008      	beq.n	8003962 <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003956:	4b07      	ldr	r3, [pc, #28]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 8003958:	2200      	movs	r2, #0
 800395a:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 800395e:	2200      	movs	r2, #0
 8003960:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.hPaValuemax = 0.0;
 8003962:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 8003964:	2200      	movs	r2, #0
 8003966:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.VOCIndexmax = 0;
 8003968:	4b02      	ldr	r3, [pc, #8]	@ (8003974 <resetMaxMeasurementValues+0x30>)
 800396a:	2200      	movs	r2, #0
 800396c:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	2000063c 	.word	0x2000063c

08003978 <SetConfigMode>:

void SetConfigMode(){
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <SetConfigMode+0x30>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	4053      	eors	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 800398a:	4a08      	ldr	r2, [pc, #32]	@ (80039ac <SetConfigMode+0x34>)
 800398c:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <SetConfigMode+0x38>)
 800398e:	0019      	movs	r1, r3
 8003990:	2003      	movs	r0, #3
 8003992:	f00c fff7 	bl	8010984 <CreateLine>
  }
  ReconfigSet = true;
 8003996:	4b04      	ldr	r3, [pc, #16]	@ (80039a8 <SetConfigMode+0x30>)
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <SetConfigMode+0x3c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000563 	.word	0x20000563
 80039ac:	08025b98 	.word	0x08025b98
 80039b0:	08025bb8 	.word	0x08025bb8
 80039b4:	2000020b 	.word	0x2000020b

080039b8 <GetReconfigMode>:

bool GetReconfigMode() {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  return ReconfigSet;
 80039bc:	4b02      	ldr	r3, [pc, #8]	@ (80039c8 <GetReconfigMode+0x10>)
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	20000563 	.word	0x20000563

080039cc <ESP_GetUID>:

void ESP_GetUID(){
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039d0:	f00d fc6e 	bl	80112b0 <HAL_GetUIDw0>
 80039d4:	0002      	movs	r2, r0
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <ESP_GetUID+0x28>)
 80039d8:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039da:	f00d fc73 	bl	80112c4 <HAL_GetUIDw1>
 80039de:	0002      	movs	r2, r0
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_GetUID+0x28>)
 80039e2:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039e4:	f00d fc78 	bl	80112d8 <HAL_GetUIDw2>
 80039e8:	0002      	movs	r2, r0
 80039ea:	4b02      	ldr	r3, [pc, #8]	@ (80039f4 <ESP_GetUID+0x28>)
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	2000056c 	.word	0x2000056c

080039f8 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a00:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <ESP_Init+0x2c>)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a06:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <ESP_Init+0x30>)
 8003a08:	2202      	movs	r2, #2
 8003a0a:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a0c:	f7ff ffde 	bl	80039cc <ESP_GetUID>
  beurs = checkEEprom();
 8003a10:	f7ff fe5e 	bl	80036d0 <checkEEprom>
 8003a14:	0003      	movs	r3, r0
 8003a16:	001a      	movs	r2, r3
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <ESP_Init+0x34>)
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000458 	.word	0x20000458
 8003a28:	2000002c 	.word	0x2000002c
 8003a2c:	20000566 	.word	0x20000566

08003a30 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	000a      	movs	r2, r1
 8003a3a:	1cbb      	adds	r3, r7, #2
 8003a3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <ESP_Send+0x54>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	250f      	movs	r5, #15
 8003a44:	197c      	adds	r4, r7, r5
 8003a46:	1cbb      	adds	r3, r7, #2
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	f016 f9a7 	bl	8019da0 <HAL_UART_Transmit_DMA>
 8003a52:	0003      	movs	r3, r0
 8003a54:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a56:	197b      	adds	r3, r7, r5
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <ESP_Send+0x58>)
 8003a60:	4b0a      	ldr	r3, [pc, #40]	@ (8003a8c <ESP_Send+0x5c>)
 8003a62:	0019      	movs	r1, r3
 8003a64:	2001      	movs	r0, #1
 8003a66:	f00c ff8d 	bl	8010984 <CreateLine>
    return false;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e006      	b.n	8003a7c <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <ESP_Send+0x60>)
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f01e ff0d 	bl	8022894 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a7a:	2301      	movs	r3, #1
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	20000458 	.word	0x20000458
 8003a88:	08025bbc 	.word	0x08025bbc
 8003a8c:	08025bdc 	.word	0x08025bdc
 8003a90:	08025be0 	.word	0x08025be0

08003a94 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	000a      	movs	r2, r1
 8003a9e:	1cbb      	adds	r3, r7, #2
 8003aa0:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003aa2:	4b52      	ldr	r3, [pc, #328]	@ (8003bec <ESP_Receive+0x158>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003aa8:	260f      	movs	r6, #15
 8003aaa:	19bb      	adds	r3, r7, r6
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf0 <ESP_Receive+0x15c>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	250e      	movs	r5, #14
 8003ab6:	197c      	adds	r4, r7, r5
 8003ab8:	1cbb      	adds	r3, r7, #2
 8003aba:	881a      	ldrh	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0019      	movs	r1, r3
 8003ac0:	f016 f9fe 	bl	8019ec0 <HAL_UART_Receive_DMA>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003ac8:	002c      	movs	r4, r5
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d100      	bne.n	8003ad4 <ESP_Receive+0x40>
 8003ad2:	e085      	b.n	8003be0 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ad4:	4b46      	ldr	r3, [pc, #280]	@ (8003bf0 <ESP_Receive+0x15c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2284      	movs	r2, #132	@ 0x84
 8003ada:	589b      	ldr	r3, [r3, r2]
 8003adc:	4a45      	ldr	r2, [pc, #276]	@ (8003bf4 <ESP_Receive+0x160>)
 8003ade:	4946      	ldr	r1, [pc, #280]	@ (8003bf8 <ESP_Receive+0x164>)
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f00c ff4f 	bl	8010984 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	d008      	beq.n	8003b02 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003af0:	4a42      	ldr	r2, [pc, #264]	@ (8003bfc <ESP_Receive+0x168>)
 8003af2:	4b41      	ldr	r3, [pc, #260]	@ (8003bf8 <ESP_Receive+0x164>)
 8003af4:	0019      	movs	r1, r3
 8003af6:	2001      	movs	r0, #1
 8003af8:	f00c ff44 	bl	8010984 <CreateLine>
      reset = true;
 8003afc:	19bb      	adds	r3, r7, r6
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003b02:	230e      	movs	r3, #14
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d005      	beq.n	8003b1a <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8003c00 <ESP_Receive+0x16c>)
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b12:	0019      	movs	r1, r3
 8003b14:	2001      	movs	r0, #1
 8003b16:	f00c ff35 	bl	8010984 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b1a:	230e      	movs	r3, #14
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2204      	movs	r2, #4
 8003b22:	4013      	ands	r3, r2
 8003b24:	d005      	beq.n	8003b32 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003b26:	4a37      	ldr	r2, [pc, #220]	@ (8003c04 <ESP_Receive+0x170>)
 8003b28:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f00c ff29 	bl	8010984 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b32:	230e      	movs	r3, #14
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d005      	beq.n	8003b4a <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b3e:	4a32      	ldr	r2, [pc, #200]	@ (8003c08 <ESP_Receive+0x174>)
 8003b40:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b42:	0019      	movs	r1, r3
 8003b44:	2001      	movs	r0, #1
 8003b46:	f00c ff1d 	bl	8010984 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b4a:	230e      	movs	r3, #14
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	d005      	beq.n	8003b62 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b56:	4a2d      	ldr	r2, [pc, #180]	@ (8003c0c <ESP_Receive+0x178>)
 8003b58:	4b27      	ldr	r3, [pc, #156]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f00c ff11 	bl	8010984 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b62:	230e      	movs	r3, #14
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d005      	beq.n	8003b7a <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b6e:	4a28      	ldr	r2, [pc, #160]	@ (8003c10 <ESP_Receive+0x17c>)
 8003b70:	4b21      	ldr	r3, [pc, #132]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b72:	0019      	movs	r1, r3
 8003b74:	2001      	movs	r0, #1
 8003b76:	f00c ff05 	bl	8010984 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b7a:	230e      	movs	r3, #14
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2240      	movs	r2, #64	@ 0x40
 8003b82:	4013      	ands	r3, r2
 8003b84:	d005      	beq.n	8003b92 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b86:	4a23      	ldr	r2, [pc, #140]	@ (8003c14 <ESP_Receive+0x180>)
 8003b88:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf8 <ESP_Receive+0x164>)
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	f00c fef9 	bl	8010984 <CreateLine>
    }
#endif
    if (reset) {
 8003b92:	230f      	movs	r3, #15
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01c      	beq.n	8003bd6 <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003c18 <ESP_Receive+0x184>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f00e fdcb 	bl	801273e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f00d fb41 	bl	8011230 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	481a      	ldr	r0, [pc, #104]	@ (8003c1c <ESP_Receive+0x188>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0019      	movs	r1, r3
 8003bb8:	f00e fdc1 	bl	801273e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f00d fb37 	bl	8011230 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <ESP_Receive+0x184>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f00e fdb8 	bl	801273e <HAL_GPIO_WritePin>
      SetAllREDLED();
 8003bce:	f00b fe4b 	bl	800f868 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003bd2:	f00d ffec 	bl	8011bae <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <ESP_Receive+0x158>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
    return false;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	e000      	b.n	8003be2 <ESP_Receive+0x14e>
  }
  return true;
 8003be0:	2301      	movs	r3, #1
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b005      	add	sp, #20
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	2000045c 	.word	0x2000045c
 8003bf0:	20000458 	.word	0x20000458
 8003bf4:	08025bf0 	.word	0x08025bf0
 8003bf8:	08025bdc 	.word	0x08025bdc
 8003bfc:	08025c20 	.word	0x08025c20
 8003c00:	08025c44 	.word	0x08025c44
 8003c04:	08025c68 	.word	0x08025c68
 8003c08:	08025c8c 	.word	0x08025c8c
 8003c0c:	08025cb0 	.word	0x08025cb0
 8003c10:	08025cdc 	.word	0x08025cdc
 8003c14:	08025d0c 	.word	0x08025d0c
 8003c18:	50001c00 	.word	0x50001c00
 8003c1c:	50000800 	.word	0x50000800

08003c20 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003c28:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <HAL_UART_ErrorCallback+0xf0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d16b      	bne.n	8003d0a <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2284      	movs	r2, #132	@ 0x84
 8003c36:	589b      	ldr	r3, [r3, r2]
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d065      	beq.n	8003d08 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2284      	movs	r2, #132	@ 0x84
 8003c40:	589b      	ldr	r3, [r3, r2]
 8003c42:	4a34      	ldr	r2, [pc, #208]	@ (8003d14 <HAL_UART_ErrorCallback+0xf4>)
 8003c44:	4934      	ldr	r1, [pc, #208]	@ (8003d18 <HAL_UART_ErrorCallback+0xf8>)
 8003c46:	2003      	movs	r0, #3
 8003c48:	f00c fe9c 	bl	8010984 <CreateLine>
    switch (huart->ErrorCode) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2284      	movs	r2, #132	@ 0x84
 8003c50:	589b      	ldr	r3, [r3, r2]
 8003c52:	2b0c      	cmp	r3, #12
 8003c54:	d851      	bhi.n	8003cfa <HAL_UART_ErrorCallback+0xda>
 8003c56:	009a      	lsls	r2, r3, #2
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_UART_ErrorCallback+0xfc>)
 8003c5a:	18d3      	adds	r3, r2, r3
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003c60:	4a2f      	ldr	r2, [pc, #188]	@ (8003d20 <HAL_UART_ErrorCallback+0x100>)
 8003c62:	4b30      	ldr	r3, [pc, #192]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c64:	0019      	movs	r1, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	f00c fe8c 	bl	8010984 <CreateLine>
        break;
 8003c6c:	e04d      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d28 <HAL_UART_ErrorCallback+0x108>)
 8003c70:	4b2c      	ldr	r3, [pc, #176]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00c fe85 	bl	8010984 <CreateLine>
        break;
 8003c7a:	e046      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d2c <HAL_UART_ErrorCallback+0x10c>)
 8003c7e:	4b29      	ldr	r3, [pc, #164]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	f00c fe7e 	bl	8010984 <CreateLine>
        break;
 8003c88:	e03f      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c8a:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <HAL_UART_ErrorCallback+0x110>)
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00c fe77 	bl	8010984 <CreateLine>
        break;
 8003c96:	e038      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c98:	4a26      	ldr	r2, [pc, #152]	@ (8003d34 <HAL_UART_ErrorCallback+0x114>)
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f00c fe70 	bl	8010984 <CreateLine>
        break;
 8003ca4:	e031      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003ca6:	4a24      	ldr	r2, [pc, #144]	@ (8003d38 <HAL_UART_ErrorCallback+0x118>)
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003caa:	0019      	movs	r1, r3
 8003cac:	2001      	movs	r0, #1
 8003cae:	f00c fe69 	bl	8010984 <CreateLine>
        break;
 8003cb2:	e02a      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003cb4:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <HAL_UART_ErrorCallback+0x11c>)
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cb8:	0019      	movs	r1, r3
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f00c fe62 	bl	8010984 <CreateLine>
        break;
 8003cc0:	e023      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <HAL_UART_ErrorCallback+0x120>)
 8003cc4:	4b17      	ldr	r3, [pc, #92]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f00c fe5b 	bl	8010984 <CreateLine>
        break;
 8003cce:	e01c      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <HAL_UART_ErrorCallback+0x124>)
 8003cd2:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f00c fe54 	bl	8010984 <CreateLine>
        break;
 8003cdc:	e015      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003cde:	4a1a      	ldr	r2, [pc, #104]	@ (8003d48 <HAL_UART_ErrorCallback+0x128>)
 8003ce0:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	f00c fe4d 	bl	8010984 <CreateLine>
        break;
 8003cea:	e00e      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003cec:	4a17      	ldr	r2, [pc, #92]	@ (8003d4c <HAL_UART_ErrorCallback+0x12c>)
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f00c fe46 	bl	8010984 <CreateLine>
        break;
 8003cf8:	e007      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003cfa:	4a15      	ldr	r2, [pc, #84]	@ (8003d50 <HAL_UART_ErrorCallback+0x130>)
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_UART_ErrorCallback+0x104>)
 8003cfe:	0019      	movs	r1, r3
 8003d00:	2001      	movs	r0, #1
 8003d02:	f00c fe3f 	bl	8010984 <CreateLine>
 8003d06:	e000      	b.n	8003d0a <HAL_UART_ErrorCallback+0xea>
      return;
 8003d08:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000458 	.word	0x20000458
 8003d14:	08025d3c 	.word	0x08025d3c
 8003d18:	08025bb8 	.word	0x08025bb8
 8003d1c:	08028df4 	.word	0x08028df4
 8003d20:	08025d6c 	.word	0x08025d6c
 8003d24:	08025bdc 	.word	0x08025bdc
 8003d28:	08025da0 	.word	0x08025da0
 8003d2c:	08025dcc 	.word	0x08025dcc
 8003d30:	08025e00 	.word	0x08025e00
 8003d34:	08025e2c 	.word	0x08025e2c
 8003d38:	08025e54 	.word	0x08025e54
 8003d3c:	08025e84 	.word	0x08025e84
 8003d40:	08025ebc 	.word	0x08025ebc
 8003d44:	08025ef4 	.word	0x08025ef4
 8003d48:	08025f1c 	.word	0x08025f1c
 8003d4c:	08025f44 	.word	0x08025f44
 8003d50:	08025f70 	.word	0x08025f70

08003d54 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e010      	b.n	8003d86 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	001a      	movs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1898      	adds	r0, r3, r2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	001a      	movs	r2, r3
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <uint8ArrayToString+0x44>)
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	f01e fdfa 	bl	8022974 <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b0b      	cmp	r3, #11
 8003d8a:	ddeb      	ble.n	8003d64 <uint8ArrayToString+0x10>
  }
}
 8003d8c:	46c0      	nop			@ (mov r8, r8)
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	08025f94 	.word	0x08025f94

08003d9c <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d9e:	b089      	sub	sp, #36	@ 0x24
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	6039      	str	r1, [r7, #0]
 8003da4:	0011      	movs	r1, r2
 8003da6:	1dfb      	adds	r3, r7, #7
 8003da8:	1c02      	adds	r2, r0, #0
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	1dbb      	adds	r3, r7, #6
 8003dae:	1c0a      	adds	r2, r1, #0
 8003db0:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003db2:	4b23      	ldr	r3, [pc, #140]	@ (8003e40 <CreateMessage+0xa4>)
 8003db4:	4823      	ldr	r0, [pc, #140]	@ (8003e44 <CreateMessage+0xa8>)
 8003db6:	220c      	movs	r2, #12
 8003db8:	0019      	movs	r1, r3
 8003dba:	f005 fadd 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003dbe:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <CreateMessage+0xac>)
 8003dc0:	4822      	ldr	r0, [pc, #136]	@ (8003e4c <CreateMessage+0xb0>)
 8003dc2:	220c      	movs	r2, #12
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	f005 fad7 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003dca:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <CreateMessage+0xb4>)
 8003dcc:	4821      	ldr	r0, [pc, #132]	@ (8003e54 <CreateMessage+0xb8>)
 8003dce:	220c      	movs	r2, #12
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	f005 fad1 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <CreateMessage+0xbc>)
 8003dd8:	4820      	ldr	r0, [pc, #128]	@ (8003e5c <CreateMessage+0xc0>)
 8003dda:	220c      	movs	r2, #12
 8003ddc:	0019      	movs	r1, r3
 8003dde:	f005 facb 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8003de2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <CreateMessage+0xc4>)
 8003de4:	481f      	ldr	r0, [pc, #124]	@ (8003e64 <CreateMessage+0xc8>)
 8003de6:	220c      	movs	r2, #12
 8003de8:	0019      	movs	r1, r3
 8003dea:	f005 fac5 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <CreateMessage+0xcc>)
 8003df0:	481e      	ldr	r0, [pc, #120]	@ (8003e6c <CreateMessage+0xd0>)
 8003df2:	220c      	movs	r2, #12
 8003df4:	0019      	movs	r1, r3
 8003df6:	f005 fabf 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <CreateMessage+0xd4>)
 8003dfc:	481d      	ldr	r0, [pc, #116]	@ (8003e74 <CreateMessage+0xd8>)
 8003dfe:	220c      	movs	r2, #12
 8003e00:	0019      	movs	r1, r3
 8003e02:	f005 fab9 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003e06:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <CreateMessage+0xdc>)
 8003e08:	481c      	ldr	r0, [pc, #112]	@ (8003e7c <CreateMessage+0xe0>)
 8003e0a:	220c      	movs	r2, #12
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	f005 fab3 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003e12:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <CreateMessage+0xe4>)
 8003e14:	481b      	ldr	r0, [pc, #108]	@ (8003e84 <CreateMessage+0xe8>)
 8003e16:	220c      	movs	r2, #12
 8003e18:	0019      	movs	r1, r3
 8003e1a:	f005 faad 	bl	8009378 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <CreateMessage+0xec>)
 8003e20:	481a      	ldr	r0, [pc, #104]	@ (8003e8c <CreateMessage+0xf0>)
 8003e22:	220c      	movs	r2, #12
 8003e24:	0019      	movs	r1, r3
 8003e26:	f005 faa7 	bl	8009378 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e2a:	f7ff fc87 	bl	800373c <checkName>
 8003e2e:	1e03      	subs	r3, r0, #0
 8003e30:	d032      	beq.n	8003e98 <CreateMessage+0xfc>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e32:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <CreateMessage+0xf4>)
 8003e34:	4817      	ldr	r0, [pc, #92]	@ (8003e94 <CreateMessage+0xf8>)
 8003e36:	2220      	movs	r2, #32
 8003e38:	0019      	movs	r1, r3
 8003e3a:	f005 fa9d 	bl	8009378 <ReadUint8ArrayEEprom>
 8003e3e:	e031      	b.n	8003ea4 <CreateMessage+0x108>
 8003e40:	200006b4 	.word	0x200006b4
 8003e44:	0808000c 	.word	0x0808000c
 8003e48:	200006c0 	.word	0x200006c0
 8003e4c:	08080018 	.word	0x08080018
 8003e50:	200006cc 	.word	0x200006cc
 8003e54:	08080048 	.word	0x08080048
 8003e58:	200006d8 	.word	0x200006d8
 8003e5c:	08080030 	.word	0x08080030
 8003e60:	200006e4 	.word	0x200006e4
 8003e64:	0808003c 	.word	0x0808003c
 8003e68:	200006f0 	.word	0x200006f0
 8003e6c:	0808006c 	.word	0x0808006c
 8003e70:	200006fc 	.word	0x200006fc
 8003e74:	08080078 	.word	0x08080078
 8003e78:	20000708 	.word	0x20000708
 8003e7c:	08080024 	.word	0x08080024
 8003e80:	20000714 	.word	0x20000714
 8003e84:	08080054 	.word	0x08080054
 8003e88:	20000720 	.word	0x20000720
 8003e8c:	08080060 	.word	0x08080060
 8003e90:	2000072c 	.word	0x2000072c
 8003e94:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e98:	4bed      	ldr	r3, [pc, #948]	@ (8004250 <CreateMessage+0x4b4>)
 8003e9a:	4aee      	ldr	r2, [pc, #952]	@ (8004254 <CreateMessage+0x4b8>)
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	6019      	str	r1, [r3, #0]
 8003ea0:	7912      	ldrb	r2, [r2, #4]
 8003ea2:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003ea4:	f7ff fbf0 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003ea8:	260e      	movs	r6, #14
 8003eaa:	19bb      	adds	r3, r7, r6
 8003eac:	2200      	movs	r2, #0
 8003eae:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003eb0:	19bb      	adds	r3, r7, r6
 8003eb2:	881a      	ldrh	r2, [r3, #0]
 8003eb4:	4be8      	ldr	r3, [pc, #928]	@ (8004258 <CreateMessage+0x4bc>)
 8003eb6:	18d3      	adds	r3, r2, r3
 8003eb8:	4ae8      	ldr	r2, [pc, #928]	@ (800425c <CreateMessage+0x4c0>)
 8003eba:	0011      	movs	r1, r2
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f01e fd59 	bl	8022974 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003ec2:	4ae7      	ldr	r2, [pc, #924]	@ (8004260 <CreateMessage+0x4c4>)
 8003ec4:	4be7      	ldr	r3, [pc, #924]	@ (8004264 <CreateMessage+0x4c8>)
 8003ec6:	0011      	movs	r1, r2
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7ff ff43 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003ece:	4be6      	ldr	r3, [pc, #920]	@ (8004268 <CreateMessage+0x4cc>)
 8003ed0:	689c      	ldr	r4, [r3, #8]
 8003ed2:	4be6      	ldr	r3, [pc, #920]	@ (800426c <CreateMessage+0x4d0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1c18      	adds	r0, r3, #0
 8003ed8:	f7ff fac4 	bl	8003464 <__aeabi_f2d>
 8003edc:	0002      	movs	r2, r0
 8003ede:	000b      	movs	r3, r1
 8003ee0:	4ddb      	ldr	r5, [pc, #876]	@ (8004250 <CreateMessage+0x4b4>)
 8003ee2:	49e3      	ldr	r1, [pc, #908]	@ (8004270 <CreateMessage+0x4d4>)
 8003ee4:	48e3      	ldr	r0, [pc, #908]	@ (8004274 <CreateMessage+0x4d8>)
 8003ee6:	9202      	str	r2, [sp, #8]
 8003ee8:	9303      	str	r3, [sp, #12]
 8003eea:	4bde      	ldr	r3, [pc, #888]	@ (8004264 <CreateMessage+0x4c8>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	002b      	movs	r3, r5
 8003ef0:	0022      	movs	r2, r4
 8003ef2:	f01e fd3f 	bl	8022974 <siprintf>
#endif
index = strlen(message);
 8003ef6:	4bd8      	ldr	r3, [pc, #864]	@ (8004258 <CreateMessage+0x4bc>)
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fc f937 	bl	800016c <strlen>
 8003efe:	0002      	movs	r2, r0
 8003f00:	19bb      	adds	r3, r7, r6
 8003f02:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <CreateMessage+0x1a4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f0c:	4bd2      	ldr	r3, [pc, #840]	@ (8004258 <CreateMessage+0x4bc>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc f92c 	bl	800016c <strlen>
 8003f14:	0003      	movs	r3, r0
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4bcf      	ldr	r3, [pc, #828]	@ (8004258 <CreateMessage+0x4bc>)
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fd87 	bl	8003a30 <ESP_Send>
 8003f22:	0003      	movs	r3, r0
 8003f24:	001a      	movs	r2, r3
 8003f26:	4bd4      	ldr	r3, [pc, #848]	@ (8004278 <CreateMessage+0x4dc>)
 8003f28:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f2a:	4bd4      	ldr	r3, [pc, #848]	@ (800427c <CreateMessage+0x4e0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	001a      	movs	r2, r3
 8003f30:	4bd1      	ldr	r3, [pc, #836]	@ (8004278 <CreateMessage+0x4dc>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4013      	ands	r3, r2
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	4193      	sbcs	r3, r2
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4bcf      	ldr	r3, [pc, #828]	@ (800427c <CreateMessage+0x4e0>)
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003f40:	4acf      	ldr	r2, [pc, #828]	@ (8004280 <CreateMessage+0x4e4>)
 8003f42:	4bc8      	ldr	r3, [pc, #800]	@ (8004264 <CreateMessage+0x4c8>)
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff ff04 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003f4c:	4bc6      	ldr	r3, [pc, #792]	@ (8004268 <CreateMessage+0x4cc>)
 8003f4e:	689c      	ldr	r4, [r3, #8]
 8003f50:	4bc6      	ldr	r3, [pc, #792]	@ (800426c <CreateMessage+0x4d0>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	1c18      	adds	r0, r3, #0
 8003f56:	f7ff fa85 	bl	8003464 <__aeabi_f2d>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	000b      	movs	r3, r1
 8003f5e:	4dbc      	ldr	r5, [pc, #752]	@ (8004250 <CreateMessage+0x4b4>)
 8003f60:	49c8      	ldr	r1, [pc, #800]	@ (8004284 <CreateMessage+0x4e8>)
 8003f62:	48bd      	ldr	r0, [pc, #756]	@ (8004258 <CreateMessage+0x4bc>)
 8003f64:	9202      	str	r2, [sp, #8]
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	4bbe      	ldr	r3, [pc, #760]	@ (8004264 <CreateMessage+0x4c8>)
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	002b      	movs	r3, r5
 8003f6e:	0022      	movs	r2, r4
 8003f70:	f01e fd00 	bl	8022974 <siprintf>
#endif
  index += strlen(message);
 8003f74:	4bb8      	ldr	r3, [pc, #736]	@ (8004258 <CreateMessage+0x4bc>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7fc f8f8 	bl	800016c <strlen>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	b299      	uxth	r1, r3
 8003f80:	220e      	movs	r2, #14
 8003f82:	18bb      	adds	r3, r7, r2
 8003f84:	18ba      	adds	r2, r7, r2
 8003f86:	8812      	ldrh	r2, [r2, #0]
 8003f88:	188a      	adds	r2, r1, r2
 8003f8a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f8c:	1dbb      	adds	r3, r7, #6
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d019      	beq.n	8003fc8 <CreateMessage+0x22c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f94:	4bb0      	ldr	r3, [pc, #704]	@ (8004258 <CreateMessage+0x4bc>)
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7fc f8e8 	bl	800016c <strlen>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	4bad      	ldr	r3, [pc, #692]	@ (8004258 <CreateMessage+0x4bc>)
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f7ff fd43 	bl	8003a30 <ESP_Send>
 8003faa:	0003      	movs	r3, r0
 8003fac:	001a      	movs	r2, r3
 8003fae:	4bb2      	ldr	r3, [pc, #712]	@ (8004278 <CreateMessage+0x4dc>)
 8003fb0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fb2:	4bb2      	ldr	r3, [pc, #712]	@ (800427c <CreateMessage+0x4e0>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	4baf      	ldr	r3, [pc, #700]	@ (8004278 <CreateMessage+0x4dc>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	4193      	sbcs	r3, r2
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	4bad      	ldr	r3, [pc, #692]	@ (800427c <CreateMessage+0x4e0>)
 8003fc6:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003fc8:	4aaf      	ldr	r2, [pc, #700]	@ (8004288 <CreateMessage+0x4ec>)
 8003fca:	4ba6      	ldr	r3, [pc, #664]	@ (8004264 <CreateMessage+0x4c8>)
 8003fcc:	0011      	movs	r1, r2
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff fec0 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003fd4:	4ba4      	ldr	r3, [pc, #656]	@ (8004268 <CreateMessage+0x4cc>)
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4ba4      	ldr	r3, [pc, #656]	@ (800426c <CreateMessage+0x4d0>)
 8003fda:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003fdc:	4c9c      	ldr	r4, [pc, #624]	@ (8004250 <CreateMessage+0x4b4>)
 8003fde:	49ab      	ldr	r1, [pc, #684]	@ (800428c <CreateMessage+0x4f0>)
 8003fe0:	489d      	ldr	r0, [pc, #628]	@ (8004258 <CreateMessage+0x4bc>)
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	4b9f      	ldr	r3, [pc, #636]	@ (8004264 <CreateMessage+0x4c8>)
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	0023      	movs	r3, r4
 8003fea:	f01e fcc3 	bl	8022974 <siprintf>
#endif
  index += strlen(message);
 8003fee:	4b9a      	ldr	r3, [pc, #616]	@ (8004258 <CreateMessage+0x4bc>)
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fc f8bb 	bl	800016c <strlen>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	220e      	movs	r2, #14
 8003ffc:	18bb      	adds	r3, r7, r2
 8003ffe:	18ba      	adds	r2, r7, r2
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004006:	1dbb      	adds	r3, r7, #6
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <CreateMessage+0x2a6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800400e:	4b92      	ldr	r3, [pc, #584]	@ (8004258 <CreateMessage+0x4bc>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0003      	movs	r3, r0
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b8f      	ldr	r3, [pc, #572]	@ (8004258 <CreateMessage+0x4bc>)
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff fd06 	bl	8003a30 <ESP_Send>
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	4b93      	ldr	r3, [pc, #588]	@ (8004278 <CreateMessage+0x4dc>)
 800402a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800402c:	4b93      	ldr	r3, [pc, #588]	@ (800427c <CreateMessage+0x4e0>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	001a      	movs	r2, r3
 8004032:	4b91      	ldr	r3, [pc, #580]	@ (8004278 <CreateMessage+0x4dc>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4013      	ands	r3, r2
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	4193      	sbcs	r3, r2
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b8f      	ldr	r3, [pc, #572]	@ (800427c <CreateMessage+0x4e0>)
 8004040:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 8004042:	f006 fa93 	bl	800a56c <IsBMP280SensorPresent>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d043      	beq.n	80040d2 <CreateMessage+0x336>
    uint8ArrayToString(Buffer, hPaConfig);
 800404a:	4a91      	ldr	r2, [pc, #580]	@ (8004290 <CreateMessage+0x4f4>)
 800404c:	4b85      	ldr	r3, [pc, #532]	@ (8004264 <CreateMessage+0x4c8>)
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff fe7f 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
    sprintf(&message[0], ",{\"name\":\"hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8004056:	4b84      	ldr	r3, [pc, #528]	@ (8004268 <CreateMessage+0x4cc>)
 8004058:	689c      	ldr	r4, [r3, #8]
 800405a:	4b84      	ldr	r3, [pc, #528]	@ (800426c <CreateMessage+0x4d0>)
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	1c18      	adds	r0, r3, #0
 8004060:	f7ff fa00 	bl	8003464 <__aeabi_f2d>
 8004064:	0002      	movs	r2, r0
 8004066:	000b      	movs	r3, r1
 8004068:	4d79      	ldr	r5, [pc, #484]	@ (8004250 <CreateMessage+0x4b4>)
 800406a:	498a      	ldr	r1, [pc, #552]	@ (8004294 <CreateMessage+0x4f8>)
 800406c:	487a      	ldr	r0, [pc, #488]	@ (8004258 <CreateMessage+0x4bc>)
 800406e:	9202      	str	r2, [sp, #8]
 8004070:	9303      	str	r3, [sp, #12]
 8004072:	4b7c      	ldr	r3, [pc, #496]	@ (8004264 <CreateMessage+0x4c8>)
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	002b      	movs	r3, r5
 8004078:	0022      	movs	r2, r4
 800407a:	f01e fc7b 	bl	8022974 <siprintf>
#endif
    index += strlen(message);
 800407e:	4b76      	ldr	r3, [pc, #472]	@ (8004258 <CreateMessage+0x4bc>)
 8004080:	0018      	movs	r0, r3
 8004082:	f7fc f873 	bl	800016c <strlen>
 8004086:	0003      	movs	r3, r0
 8004088:	b299      	uxth	r1, r3
 800408a:	220e      	movs	r2, #14
 800408c:	18bb      	adds	r3, r7, r2
 800408e:	18ba      	adds	r2, r7, r2
 8004090:	8812      	ldrh	r2, [r2, #0]
 8004092:	188a      	adds	r2, r1, r2
 8004094:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004096:	1dbb      	adds	r3, r7, #6
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d019      	beq.n	80040d2 <CreateMessage+0x336>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800409e:	4b6e      	ldr	r3, [pc, #440]	@ (8004258 <CreateMessage+0x4bc>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fc f863 	bl	800016c <strlen>
 80040a6:	0003      	movs	r3, r0
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004258 <CreateMessage+0x4bc>)
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fcbe 	bl	8003a30 <ESP_Send>
 80040b4:	0003      	movs	r3, r0
 80040b6:	001a      	movs	r2, r3
 80040b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <CreateMessage+0x4dc>)
 80040ba:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040bc:	4b6f      	ldr	r3, [pc, #444]	@ (800427c <CreateMessage+0x4e0>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	001a      	movs	r2, r3
 80040c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004278 <CreateMessage+0x4dc>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	4013      	ands	r3, r2
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	4193      	sbcs	r3, r2
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	4b6b      	ldr	r3, [pc, #428]	@ (800427c <CreateMessage+0x4e0>)
 80040d0:	701a      	strb	r2, [r3, #0]
    }
  }

  uint8ArrayToString(Buffer, soundConfig);
 80040d2:	4a71      	ldr	r2, [pc, #452]	@ (8004298 <CreateMessage+0x4fc>)
 80040d4:	4b63      	ldr	r3, [pc, #396]	@ (8004264 <CreateMessage+0x4c8>)
 80040d6:	0011      	movs	r1, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fe3b 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 80040de:	4b62      	ldr	r3, [pc, #392]	@ (8004268 <CreateMessage+0x4cc>)
 80040e0:	689c      	ldr	r4, [r3, #8]
 80040e2:	4b62      	ldr	r3, [pc, #392]	@ (800426c <CreateMessage+0x4d0>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	1c18      	adds	r0, r3, #0
 80040e8:	f7ff f9bc 	bl	8003464 <__aeabi_f2d>
 80040ec:	0002      	movs	r2, r0
 80040ee:	000b      	movs	r3, r1
 80040f0:	4d57      	ldr	r5, [pc, #348]	@ (8004250 <CreateMessage+0x4b4>)
 80040f2:	496a      	ldr	r1, [pc, #424]	@ (800429c <CreateMessage+0x500>)
 80040f4:	4858      	ldr	r0, [pc, #352]	@ (8004258 <CreateMessage+0x4bc>)
 80040f6:	9202      	str	r2, [sp, #8]
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	4b5a      	ldr	r3, [pc, #360]	@ (8004264 <CreateMessage+0x4c8>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	002b      	movs	r3, r5
 8004100:	0022      	movs	r2, r4
 8004102:	f01e fc37 	bl	8022974 <siprintf>
#endif
  index += strlen(message);
 8004106:	4b54      	ldr	r3, [pc, #336]	@ (8004258 <CreateMessage+0x4bc>)
 8004108:	0018      	movs	r0, r3
 800410a:	f7fc f82f 	bl	800016c <strlen>
 800410e:	0003      	movs	r3, r0
 8004110:	b299      	uxth	r1, r3
 8004112:	220e      	movs	r2, #14
 8004114:	18bb      	adds	r3, r7, r2
 8004116:	18ba      	adds	r2, r7, r2
 8004118:	8812      	ldrh	r2, [r2, #0]
 800411a:	188a      	adds	r2, r1, r2
 800411c:	801a      	strh	r2, [r3, #0]
  if (send) {
 800411e:	1dbb      	adds	r3, r7, #6
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d019      	beq.n	800415a <CreateMessage+0x3be>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004126:	4b4c      	ldr	r3, [pc, #304]	@ (8004258 <CreateMessage+0x4bc>)
 8004128:	0018      	movs	r0, r3
 800412a:	f7fc f81f 	bl	800016c <strlen>
 800412e:	0003      	movs	r3, r0
 8004130:	b29a      	uxth	r2, r3
 8004132:	4b49      	ldr	r3, [pc, #292]	@ (8004258 <CreateMessage+0x4bc>)
 8004134:	0011      	movs	r1, r2
 8004136:	0018      	movs	r0, r3
 8004138:	f7ff fc7a 	bl	8003a30 <ESP_Send>
 800413c:	0003      	movs	r3, r0
 800413e:	001a      	movs	r2, r3
 8004140:	4b4d      	ldr	r3, [pc, #308]	@ (8004278 <CreateMessage+0x4dc>)
 8004142:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004144:	4b4d      	ldr	r3, [pc, #308]	@ (800427c <CreateMessage+0x4e0>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	001a      	movs	r2, r3
 800414a:	4b4b      	ldr	r3, [pc, #300]	@ (8004278 <CreateMessage+0x4dc>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	4013      	ands	r3, r2
 8004150:	1e5a      	subs	r2, r3, #1
 8004152:	4193      	sbcs	r3, r2
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <CreateMessage+0x4e0>)
 8004158:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	4053      	eors	r3, r2
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d100      	bne.n	800416a <CreateMessage+0x3ce>
 8004168:	e14b      	b.n	8004402 <CreateMessage+0x666>
    uint8ArrayToString(Buffer, solarConfig);
 800416a:	4a4d      	ldr	r2, [pc, #308]	@ (80042a0 <CreateMessage+0x504>)
 800416c:	4b3d      	ldr	r3, [pc, #244]	@ (8004264 <CreateMessage+0x4c8>)
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff fdef 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004176:	4b3c      	ldr	r3, [pc, #240]	@ (8004268 <CreateMessage+0x4cc>)
 8004178:	689c      	ldr	r4, [r3, #8]
 800417a:	4b4a      	ldr	r3, [pc, #296]	@ (80042a4 <CreateMessage+0x508>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	1c18      	adds	r0, r3, #0
 8004180:	f7ff f970 	bl	8003464 <__aeabi_f2d>
 8004184:	0002      	movs	r2, r0
 8004186:	000b      	movs	r3, r1
 8004188:	4d31      	ldr	r5, [pc, #196]	@ (8004250 <CreateMessage+0x4b4>)
 800418a:	4947      	ldr	r1, [pc, #284]	@ (80042a8 <CreateMessage+0x50c>)
 800418c:	4832      	ldr	r0, [pc, #200]	@ (8004258 <CreateMessage+0x4bc>)
 800418e:	9202      	str	r2, [sp, #8]
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	4b34      	ldr	r3, [pc, #208]	@ (8004264 <CreateMessage+0x4c8>)
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	002b      	movs	r3, r5
 8004198:	0022      	movs	r2, r4
 800419a:	f01e fbeb 	bl	8022974 <siprintf>
#endif
    index += strlen(message);
 800419e:	4b2e      	ldr	r3, [pc, #184]	@ (8004258 <CreateMessage+0x4bc>)
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7fb ffe3 	bl	800016c <strlen>
 80041a6:	0003      	movs	r3, r0
 80041a8:	b299      	uxth	r1, r3
 80041aa:	220e      	movs	r2, #14
 80041ac:	18bb      	adds	r3, r7, r2
 80041ae:	18ba      	adds	r2, r7, r2
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	188a      	adds	r2, r1, r2
 80041b4:	801a      	strh	r2, [r3, #0]
    if (send) {
 80041b6:	1dbb      	adds	r3, r7, #6
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d019      	beq.n	80041f2 <CreateMessage+0x456>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80041be:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <CreateMessage+0x4bc>)
 80041c0:	0018      	movs	r0, r3
 80041c2:	f7fb ffd3 	bl	800016c <strlen>
 80041c6:	0003      	movs	r3, r0
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	4b23      	ldr	r3, [pc, #140]	@ (8004258 <CreateMessage+0x4bc>)
 80041cc:	0011      	movs	r1, r2
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff fc2e 	bl	8003a30 <ESP_Send>
 80041d4:	0003      	movs	r3, r0
 80041d6:	001a      	movs	r2, r3
 80041d8:	4b27      	ldr	r3, [pc, #156]	@ (8004278 <CreateMessage+0x4dc>)
 80041da:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80041dc:	4b27      	ldr	r3, [pc, #156]	@ (800427c <CreateMessage+0x4e0>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	4b25      	ldr	r3, [pc, #148]	@ (8004278 <CreateMessage+0x4dc>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4013      	ands	r3, r2
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	4193      	sbcs	r3, r2
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	4b23      	ldr	r3, [pc, #140]	@ (800427c <CreateMessage+0x4e0>)
 80041f0:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80041f2:	4b2e      	ldr	r3, [pc, #184]	@ (80042ac <CreateMessage+0x510>)
 80041f4:	791b      	ldrb	r3, [r3, #4]
 80041f6:	2b35      	cmp	r3, #53	@ 0x35
 80041f8:	d000      	beq.n	80041fc <CreateMessage+0x460>
 80041fa:	e075      	b.n	80042e8 <CreateMessage+0x54c>
 80041fc:	f002 ff0c 	bl	8007018 <Check_USB_PowerOn>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d071      	beq.n	80042e8 <CreateMessage+0x54c>
      uint8ArrayToString(Buffer, noxConfig);
 8004204:	4a2a      	ldr	r2, [pc, #168]	@ (80042b0 <CreateMessage+0x514>)
 8004206:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <CreateMessage+0x4c8>)
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff fda2 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004210:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <CreateMessage+0x4cc>)
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4b15      	ldr	r3, [pc, #84]	@ (800426c <CreateMessage+0x4d0>)
 8004216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004218:	4c0d      	ldr	r4, [pc, #52]	@ (8004250 <CreateMessage+0x4b4>)
 800421a:	4926      	ldr	r1, [pc, #152]	@ (80042b4 <CreateMessage+0x518>)
 800421c:	480e      	ldr	r0, [pc, #56]	@ (8004258 <CreateMessage+0x4bc>)
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <CreateMessage+0x4c8>)
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	0023      	movs	r3, r4
 8004226:	f01e fba5 	bl	8022974 <siprintf>
#endif
      index += strlen(message);
 800422a:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <CreateMessage+0x4bc>)
 800422c:	0018      	movs	r0, r3
 800422e:	f7fb ff9d 	bl	800016c <strlen>
 8004232:	0003      	movs	r3, r0
 8004234:	b299      	uxth	r1, r3
 8004236:	220e      	movs	r2, #14
 8004238:	18bb      	adds	r3, r7, r2
 800423a:	18ba      	adds	r2, r7, r2
 800423c:	8812      	ldrh	r2, [r2, #0]
 800423e:	188a      	adds	r2, r1, r2
 8004240:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004242:	1dbb      	adds	r3, r7, #6
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d04e      	beq.n	80042e8 <CreateMessage+0x54c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800424a:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <CreateMessage+0x4bc>)
 800424c:	0018      	movs	r0, r3
 800424e:	e033      	b.n	80042b8 <CreateMessage+0x51c>
 8004250:	2000072c 	.word	0x2000072c
 8004254:	08028d88 	.word	0x08028d88
 8004258:	2000058c 	.word	0x2000058c
 800425c:	08025f9c 	.word	0x08025f9c
 8004260:	200006b4 	.word	0x200006b4
 8004264:	2000074c 	.word	0x2000074c
 8004268:	2000056c 	.word	0x2000056c
 800426c:	2000063c 	.word	0x2000063c
 8004270:	08025fa0 	.word	0x08025fa0
 8004274:	2000058d 	.word	0x2000058d
 8004278:	20000765 	.word	0x20000765
 800427c:	2000002d 	.word	0x2000002d
 8004280:	200006c0 	.word	0x200006c0
 8004284:	08025ff4 	.word	0x08025ff4
 8004288:	200006d8 	.word	0x200006d8
 800428c:	0802604c 	.word	0x0802604c
 8004290:	200006e4 	.word	0x200006e4
 8004294:	080260a0 	.word	0x080260a0
 8004298:	200006cc 	.word	0x200006cc
 800429c:	080260f8 	.word	0x080260f8
 80042a0:	200006fc 	.word	0x200006fc
 80042a4:	20000588 	.word	0x20000588
 80042a8:	08026154 	.word	0x08026154
 80042ac:	20000e4c 	.word	0x20000e4c
 80042b0:	20000708 	.word	0x20000708
 80042b4:	080261b4 	.word	0x080261b4
 80042b8:	f7fb ff58 	bl	800016c <strlen>
 80042bc:	0003      	movs	r3, r0
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b7d      	ldr	r3, [pc, #500]	@ (80044b8 <CreateMessage+0x71c>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fbb3 	bl	8003a30 <ESP_Send>
 80042ca:	0003      	movs	r3, r0
 80042cc:	001a      	movs	r2, r3
 80042ce:	4b7b      	ldr	r3, [pc, #492]	@ (80044bc <CreateMessage+0x720>)
 80042d0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042d2:	4b7b      	ldr	r3, [pc, #492]	@ (80044c0 <CreateMessage+0x724>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	001a      	movs	r2, r3
 80042d8:	4b78      	ldr	r3, [pc, #480]	@ (80044bc <CreateMessage+0x720>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4013      	ands	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	4193      	sbcs	r3, r2
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b76      	ldr	r3, [pc, #472]	@ (80044c0 <CreateMessage+0x724>)
 80042e6:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80042e8:	f007 f86e 	bl	800b3c8 <sen5x_Get_sen5x_enable_state>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d100      	bne.n	80042f2 <CreateMessage+0x556>
 80042f0:	e087      	b.n	8004402 <CreateMessage+0x666>
      uint8ArrayToString(Buffer, PM2Config);
 80042f2:	4a74      	ldr	r2, [pc, #464]	@ (80044c4 <CreateMessage+0x728>)
 80042f4:	4b74      	ldr	r3, [pc, #464]	@ (80044c8 <CreateMessage+0x72c>)
 80042f6:	0011      	movs	r1, r2
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff fd2b 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80042fe:	4b73      	ldr	r3, [pc, #460]	@ (80044cc <CreateMessage+0x730>)
 8004300:	689c      	ldr	r4, [r3, #8]
 8004302:	4b73      	ldr	r3, [pc, #460]	@ (80044d0 <CreateMessage+0x734>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	1c18      	adds	r0, r3, #0
 8004308:	f7ff f8ac 	bl	8003464 <__aeabi_f2d>
 800430c:	0002      	movs	r2, r0
 800430e:	000b      	movs	r3, r1
 8004310:	4d70      	ldr	r5, [pc, #448]	@ (80044d4 <CreateMessage+0x738>)
 8004312:	4971      	ldr	r1, [pc, #452]	@ (80044d8 <CreateMessage+0x73c>)
 8004314:	4868      	ldr	r0, [pc, #416]	@ (80044b8 <CreateMessage+0x71c>)
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9303      	str	r3, [sp, #12]
 800431a:	4b6b      	ldr	r3, [pc, #428]	@ (80044c8 <CreateMessage+0x72c>)
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	002b      	movs	r3, r5
 8004320:	0022      	movs	r2, r4
 8004322:	f01e fb27 	bl	8022974 <siprintf>
#endif
      index += strlen(message);
 8004326:	4b64      	ldr	r3, [pc, #400]	@ (80044b8 <CreateMessage+0x71c>)
 8004328:	0018      	movs	r0, r3
 800432a:	f7fb ff1f 	bl	800016c <strlen>
 800432e:	0003      	movs	r3, r0
 8004330:	b299      	uxth	r1, r3
 8004332:	220e      	movs	r2, #14
 8004334:	18bb      	adds	r3, r7, r2
 8004336:	18ba      	adds	r2, r7, r2
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	188a      	adds	r2, r1, r2
 800433c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800433e:	1dbb      	adds	r3, r7, #6
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d019      	beq.n	800437a <CreateMessage+0x5de>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004346:	4b5c      	ldr	r3, [pc, #368]	@ (80044b8 <CreateMessage+0x71c>)
 8004348:	0018      	movs	r0, r3
 800434a:	f7fb ff0f 	bl	800016c <strlen>
 800434e:	0003      	movs	r3, r0
 8004350:	b29a      	uxth	r2, r3
 8004352:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <CreateMessage+0x71c>)
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff fb6a 	bl	8003a30 <ESP_Send>
 800435c:	0003      	movs	r3, r0
 800435e:	001a      	movs	r2, r3
 8004360:	4b56      	ldr	r3, [pc, #344]	@ (80044bc <CreateMessage+0x720>)
 8004362:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8004364:	4b56      	ldr	r3, [pc, #344]	@ (80044c0 <CreateMessage+0x724>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	001a      	movs	r2, r3
 800436a:	4b54      	ldr	r3, [pc, #336]	@ (80044bc <CreateMessage+0x720>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	4013      	ands	r3, r2
 8004370:	1e5a      	subs	r2, r3, #1
 8004372:	4193      	sbcs	r3, r2
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b52      	ldr	r3, [pc, #328]	@ (80044c0 <CreateMessage+0x724>)
 8004378:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 800437a:	4a58      	ldr	r2, [pc, #352]	@ (80044dc <CreateMessage+0x740>)
 800437c:	4b52      	ldr	r3, [pc, #328]	@ (80044c8 <CreateMessage+0x72c>)
 800437e:	0011      	movs	r1, r2
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff fce7 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8004386:	4b51      	ldr	r3, [pc, #324]	@ (80044cc <CreateMessage+0x730>)
 8004388:	689c      	ldr	r4, [r3, #8]
 800438a:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <CreateMessage+0x734>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	1c18      	adds	r0, r3, #0
 8004390:	f7ff f868 	bl	8003464 <__aeabi_f2d>
 8004394:	0002      	movs	r2, r0
 8004396:	000b      	movs	r3, r1
 8004398:	4d4e      	ldr	r5, [pc, #312]	@ (80044d4 <CreateMessage+0x738>)
 800439a:	4951      	ldr	r1, [pc, #324]	@ (80044e0 <CreateMessage+0x744>)
 800439c:	4846      	ldr	r0, [pc, #280]	@ (80044b8 <CreateMessage+0x71c>)
 800439e:	9202      	str	r2, [sp, #8]
 80043a0:	9303      	str	r3, [sp, #12]
 80043a2:	4b49      	ldr	r3, [pc, #292]	@ (80044c8 <CreateMessage+0x72c>)
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	002b      	movs	r3, r5
 80043a8:	0022      	movs	r2, r4
 80043aa:	f01e fae3 	bl	8022974 <siprintf>
#endif
      index += strlen(message);
 80043ae:	4b42      	ldr	r3, [pc, #264]	@ (80044b8 <CreateMessage+0x71c>)
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fb fedb 	bl	800016c <strlen>
 80043b6:	0003      	movs	r3, r0
 80043b8:	b299      	uxth	r1, r3
 80043ba:	220e      	movs	r2, #14
 80043bc:	18bb      	adds	r3, r7, r2
 80043be:	18ba      	adds	r2, r7, r2
 80043c0:	8812      	ldrh	r2, [r2, #0]
 80043c2:	188a      	adds	r2, r1, r2
 80043c4:	801a      	strh	r2, [r3, #0]
      if (send) {
 80043c6:	1dbb      	adds	r3, r7, #6
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d019      	beq.n	8004402 <CreateMessage+0x666>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80043ce:	4b3a      	ldr	r3, [pc, #232]	@ (80044b8 <CreateMessage+0x71c>)
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fb fecb 	bl	800016c <strlen>
 80043d6:	0003      	movs	r3, r0
 80043d8:	b29a      	uxth	r2, r3
 80043da:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <CreateMessage+0x71c>)
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f7ff fb26 	bl	8003a30 <ESP_Send>
 80043e4:	0003      	movs	r3, r0
 80043e6:	001a      	movs	r2, r3
 80043e8:	4b34      	ldr	r3, [pc, #208]	@ (80044bc <CreateMessage+0x720>)
 80043ea:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80043ec:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <CreateMessage+0x724>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	001a      	movs	r2, r3
 80043f2:	4b32      	ldr	r3, [pc, #200]	@ (80044bc <CreateMessage+0x720>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	4013      	ands	r3, r2
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	4193      	sbcs	r3, r2
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b30      	ldr	r3, [pc, #192]	@ (80044c0 <CreateMessage+0x724>)
 8004400:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 8004402:	4a38      	ldr	r2, [pc, #224]	@ (80044e4 <CreateMessage+0x748>)
 8004404:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <CreateMessage+0x72c>)
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f7ff fca3 	bl	8003d54 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 800440e:	4b2f      	ldr	r3, [pc, #188]	@ (80044cc <CreateMessage+0x730>)
 8004410:	689c      	ldr	r4, [r3, #8]
 8004412:	4b35      	ldr	r3, [pc, #212]	@ (80044e8 <CreateMessage+0x74c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	1c18      	adds	r0, r3, #0
 8004418:	f7ff f824 	bl	8003464 <__aeabi_f2d>
 800441c:	0002      	movs	r2, r0
 800441e:	000b      	movs	r3, r1
 8004420:	4d2c      	ldr	r5, [pc, #176]	@ (80044d4 <CreateMessage+0x738>)
 8004422:	4932      	ldr	r1, [pc, #200]	@ (80044ec <CreateMessage+0x750>)
 8004424:	4824      	ldr	r0, [pc, #144]	@ (80044b8 <CreateMessage+0x71c>)
 8004426:	9202      	str	r2, [sp, #8]
 8004428:	9303      	str	r3, [sp, #12]
 800442a:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <CreateMessage+0x72c>)
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	002b      	movs	r3, r5
 8004430:	0022      	movs	r2, r4
 8004432:	f01e fa9f 	bl	8022974 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 8004436:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <CreateMessage+0x71c>)
 8004438:	0018      	movs	r0, r3
 800443a:	f7fb fe97 	bl	800016c <strlen>
 800443e:	0002      	movs	r2, r0
 8004440:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <CreateMessage+0x71c>)
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	4a2a      	ldr	r2, [pc, #168]	@ (80044f0 <CreateMessage+0x754>)
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f01e fa93 	bl	8022974 <siprintf>
  index += strlen(message);
 800444e:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <CreateMessage+0x71c>)
 8004450:	0018      	movs	r0, r3
 8004452:	f7fb fe8b 	bl	800016c <strlen>
 8004456:	0003      	movs	r3, r0
 8004458:	b299      	uxth	r1, r3
 800445a:	220e      	movs	r2, #14
 800445c:	18bb      	adds	r3, r7, r2
 800445e:	18ba      	adds	r2, r7, r2
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	188a      	adds	r2, r1, r2
 8004464:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004466:	1dbb      	adds	r3, r7, #6
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <CreateMessage+0x706>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <CreateMessage+0x71c>)
 8004470:	0018      	movs	r0, r3
 8004472:	f7fb fe7b 	bl	800016c <strlen>
 8004476:	0003      	movs	r3, r0
 8004478:	b29a      	uxth	r2, r3
 800447a:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <CreateMessage+0x71c>)
 800447c:	0011      	movs	r1, r2
 800447e:	0018      	movs	r0, r3
 8004480:	f7ff fad6 	bl	8003a30 <ESP_Send>
 8004484:	0003      	movs	r3, r0
 8004486:	001a      	movs	r2, r3
 8004488:	4b0c      	ldr	r3, [pc, #48]	@ (80044bc <CreateMessage+0x720>)
 800448a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <CreateMessage+0x724>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	001a      	movs	r2, r3
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <CreateMessage+0x720>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4013      	ands	r3, r2
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	4193      	sbcs	r3, r2
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b08      	ldr	r3, [pc, #32]	@ (80044c0 <CreateMessage+0x724>)
 80044a0:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <CreateMessage+0x724>)
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
  return index;
 80044aa:	230e      	movs	r3, #14
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	881b      	ldrh	r3, [r3, #0]
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b005      	add	sp, #20
 80044b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b8:	2000058c 	.word	0x2000058c
 80044bc:	20000765 	.word	0x20000765
 80044c0:	2000002d 	.word	0x2000002d
 80044c4:	20000714 	.word	0x20000714
 80044c8:	2000074c 	.word	0x2000074c
 80044cc:	2000056c 	.word	0x2000056c
 80044d0:	2000063c 	.word	0x2000063c
 80044d4:	2000072c 	.word	0x2000072c
 80044d8:	08026208 	.word	0x08026208
 80044dc:	20000720 	.word	0x20000720
 80044e0:	08026264 	.word	0x08026264
 80044e4:	200006f0 	.word	0x200006f0
 80044e8:	20000584 	.word	0x20000584
 80044ec:	080262c0 	.word	0x080262c0
 80044f0:	08026318 	.word	0x08026318

080044f4 <StartProg>:

void StartProg(){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80044f8:	2064      	movs	r0, #100	@ 0x64
 80044fa:	f00c fe99 	bl	8011230 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80044fe:	4b15      	ldr	r3, [pc, #84]	@ (8004554 <StartProg+0x60>)
 8004500:	2200      	movs	r2, #0
 8004502:	2101      	movs	r1, #1
 8004504:	0018      	movs	r0, r3
 8004506:	f00e f91a 	bl	801273e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800450a:	2064      	movs	r0, #100	@ 0x64
 800450c:	f00c fe90 	bl	8011230 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004510:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <StartProg+0x60>)
 8004512:	2200      	movs	r2, #0
 8004514:	2102      	movs	r1, #2
 8004516:	0018      	movs	r0, r3
 8004518:	f00e f911 	bl	801273e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800451c:	23fa      	movs	r3, #250	@ 0xfa
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	0018      	movs	r0, r3
 8004522:	f00c fe85 	bl	8011230 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <StartProg+0x60>)
 8004528:	2201      	movs	r2, #1
 800452a:	2101      	movs	r1, #1
 800452c:	0018      	movs	r0, r3
 800452e:	f00e f906 	bl	801273e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004532:	23fa      	movs	r3, #250	@ 0xfa
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	0018      	movs	r0, r3
 8004538:	f00c fe7a 	bl	8011230 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <StartProg+0x60>)
 800453e:	2201      	movs	r2, #1
 8004540:	2102      	movs	r1, #2
 8004542:	0018      	movs	r0, r3
 8004544:	f00e f8fb 	bl	801273e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004548:	2028      	movs	r0, #40	@ 0x28
 800454a:	f00c fe71 	bl	8011230 <HAL_Delay>
}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	50001c00 	.word	0x50001c00

08004558 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b0d9      	sub	sp, #356	@ 0x164
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	0008      	movs	r0, r1
 8004562:	0011      	movs	r1, r2
 8004564:	4ba4      	ldr	r3, [pc, #656]	@ (80047f8 <ParseBuffer+0x2a0>)
 8004566:	24b0      	movs	r4, #176	@ 0xb0
 8004568:	0064      	lsls	r4, r4, #1
 800456a:	191b      	adds	r3, r3, r4
 800456c:	19db      	adds	r3, r3, r7
 800456e:	1c02      	adds	r2, r0, #0
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	4ba2      	ldr	r3, [pc, #648]	@ (80047fc <ParseBuffer+0x2a4>)
 8004574:	191b      	adds	r3, r3, r4
 8004576:	19db      	adds	r3, r3, r7
 8004578:	1c0a      	adds	r2, r1, #0
 800457a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800457c:	2380      	movs	r3, #128	@ 0x80
 800457e:	005a      	lsls	r2, r3, #1
 8004580:	2348      	movs	r3, #72	@ 0x48
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2100      	movs	r1, #0
 8004586:	0018      	movs	r0, r3
 8004588:	f01e fb5a 	bl	8022c40 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800458c:	2360      	movs	r3, #96	@ 0x60
 800458e:	33ff      	adds	r3, #255	@ 0xff
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2203      	movs	r2, #3
 8004594:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004596:	23ae      	movs	r3, #174	@ 0xae
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	2200      	movs	r2, #0
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	e013      	b.n	80045ca <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 80045a2:	20ae      	movs	r0, #174	@ 0xae
 80045a4:	0040      	lsls	r0, r0, #1
 80045a6:	183b      	adds	r3, r7, r0
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	18d2      	adds	r2, r2, r3
 80045ae:	183b      	adds	r3, r7, r0
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	7811      	ldrb	r1, [r2, #0]
 80045b4:	4a92      	ldr	r2, [pc, #584]	@ (8004800 <ParseBuffer+0x2a8>)
 80045b6:	24b0      	movs	r4, #176	@ 0xb0
 80045b8:	0064      	lsls	r4, r4, #1
 80045ba:	1912      	adds	r2, r2, r4
 80045bc:	19d2      	adds	r2, r2, r7
 80045be:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	183b      	adds	r3, r7, r0
 80045c6:	3201      	adds	r2, #1
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	23ae      	movs	r3, #174	@ 0xae
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	18fa      	adds	r2, r7, r3
 80045d0:	4b89      	ldr	r3, [pc, #548]	@ (80047f8 <ParseBuffer+0x2a0>)
 80045d2:	21b0      	movs	r1, #176	@ 0xb0
 80045d4:	0049      	lsls	r1, r1, #1
 80045d6:	185b      	adds	r3, r3, r1
 80045d8:	19db      	adds	r3, r3, r7
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3df      	bcc.n	80045a2 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80045e2:	4b85      	ldr	r3, [pc, #532]	@ (80047f8 <ParseBuffer+0x2a0>)
 80045e4:	185b      	adds	r3, r3, r1
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	4a85      	ldr	r2, [pc, #532]	@ (8004800 <ParseBuffer+0x2a8>)
 80045ec:	1852      	adds	r2, r2, r1
 80045ee:	19d2      	adds	r2, r2, r7
 80045f0:	2100      	movs	r1, #0
 80045f2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80045f4:	f00c fa40 	bl	8010a78 <GetVerboseLevel>
 80045f8:	0003      	movs	r3, r0
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d106      	bne.n	800460c <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80045fe:	2348      	movs	r3, #72	@ 0x48
 8004600:	18fa      	adds	r2, r7, r3
 8004602:	4b80      	ldr	r3, [pc, #512]	@ (8004804 <ParseBuffer+0x2ac>)
 8004604:	0011      	movs	r1, r2
 8004606:	0018      	movs	r0, r3
 8004608:	f01e f944 	bl	8022894 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	26ac      	movs	r6, #172	@ 0xac
 8004610:	0076      	lsls	r6, r6, #1
 8004612:	19ba      	adds	r2, r7, r6
 8004614:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004616:	4b7c      	ldr	r3, [pc, #496]	@ (8004808 <ParseBuffer+0x2b0>)
 8004618:	25b0      	movs	r5, #176	@ 0xb0
 800461a:	006d      	lsls	r5, r5, #1
 800461c:	195b      	adds	r3, r3, r5
 800461e:	19db      	adds	r3, r3, r7
 8004620:	4a7a      	ldr	r2, [pc, #488]	@ (800480c <ParseBuffer+0x2b4>)
 8004622:	8811      	ldrh	r1, [r2, #0]
 8004624:	8019      	strh	r1, [r3, #0]
 8004626:	7892      	ldrb	r2, [r2, #2]
 8004628:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800462a:	4b79      	ldr	r3, [pc, #484]	@ (8004810 <ParseBuffer+0x2b8>)
 800462c:	195b      	adds	r3, r3, r5
 800462e:	19db      	adds	r3, r3, r7
 8004630:	4a78      	ldr	r2, [pc, #480]	@ (8004814 <ParseBuffer+0x2bc>)
 8004632:	6811      	ldr	r1, [r2, #0]
 8004634:	6019      	str	r1, [r3, #0]
 8004636:	8892      	ldrh	r2, [r2, #4]
 8004638:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800463a:	4b77      	ldr	r3, [pc, #476]	@ (8004818 <ParseBuffer+0x2c0>)
 800463c:	195b      	adds	r3, r3, r5
 800463e:	19db      	adds	r3, r3, r7
 8004640:	4a76      	ldr	r2, [pc, #472]	@ (800481c <ParseBuffer+0x2c4>)
 8004642:	6811      	ldr	r1, [r2, #0]
 8004644:	6019      	str	r1, [r3, #0]
 8004646:	7912      	ldrb	r2, [r2, #4]
 8004648:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800464a:	4b75      	ldr	r3, [pc, #468]	@ (8004820 <ParseBuffer+0x2c8>)
 800464c:	195b      	adds	r3, r3, r5
 800464e:	19db      	adds	r3, r3, r7
 8004650:	4a74      	ldr	r2, [pc, #464]	@ (8004824 <ParseBuffer+0x2cc>)
 8004652:	6811      	ldr	r1, [r2, #0]
 8004654:	6019      	str	r1, [r3, #0]
 8004656:	8892      	ldrh	r2, [r2, #4]
 8004658:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <ParseBuffer+0x2d0>)
 800465c:	195b      	adds	r3, r3, r5
 800465e:	19db      	adds	r3, r3, r7
 8004660:	223e      	movs	r2, #62	@ 0x3e
 8004662:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004664:	4b71      	ldr	r3, [pc, #452]	@ (800482c <ParseBuffer+0x2d4>)
 8004666:	195b      	adds	r3, r3, r5
 8004668:	19db      	adds	r3, r3, r7
 800466a:	4a71      	ldr	r2, [pc, #452]	@ (8004830 <ParseBuffer+0x2d8>)
 800466c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800466e:	c313      	stmia	r3!, {r0, r1, r4}
 8004670:	8811      	ldrh	r1, [r2, #0]
 8004672:	8019      	strh	r1, [r3, #0]
 8004674:	7892      	ldrb	r2, [r2, #2]
 8004676:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004678:	4b6e      	ldr	r3, [pc, #440]	@ (8004834 <ParseBuffer+0x2dc>)
 800467a:	195b      	adds	r3, r3, r5
 800467c:	19db      	adds	r3, r3, r7
 800467e:	4a6e      	ldr	r2, [pc, #440]	@ (8004838 <ParseBuffer+0x2e0>)
 8004680:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004682:	c313      	stmia	r3!, {r0, r1, r4}
 8004684:	8812      	ldrh	r2, [r2, #0]
 8004686:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004688:	4b5c      	ldr	r3, [pc, #368]	@ (80047fc <ParseBuffer+0x2a4>)
 800468a:	195b      	adds	r3, r3, r5
 800468c:	19db      	adds	r3, r3, r7
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004694:	2344      	movs	r3, #68	@ 0x44
 8004696:	18fa      	adds	r2, r7, r3
 8004698:	2348      	movs	r3, #72	@ 0x48
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f01e fb09 	bl	8022cb6 <strstr>
 80046a4:	0003      	movs	r3, r0
 80046a6:	19ba      	adds	r2, r7, r6
 80046a8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ParseBuffer+0x2a4>)
 80046ac:	22b0      	movs	r2, #176	@ 0xb0
 80046ae:	0052      	lsls	r2, r2, #1
 80046b0:	189b      	adds	r3, r3, r2
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10c      	bne.n	80046d4 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 80046ba:	232c      	movs	r3, #44	@ 0x2c
 80046bc:	18fa      	adds	r2, r7, r3
 80046be:	2348      	movs	r3, #72	@ 0x48
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f01e faf6 	bl	8022cb6 <strstr>
 80046ca:	0003      	movs	r3, r0
 80046cc:	22ac      	movs	r2, #172	@ 0xac
 80046ce:	0052      	lsls	r2, r2, #1
 80046d0:	18ba      	adds	r2, r7, r2
 80046d2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80046d4:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ParseBuffer+0x2a4>)
 80046d6:	22b0      	movs	r2, #176	@ 0xb0
 80046d8:	0052      	lsls	r2, r2, #1
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	19db      	adds	r3, r3, r7
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d10c      	bne.n	80046fe <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80046e4:	2328      	movs	r3, #40	@ 0x28
 80046e6:	18fa      	adds	r2, r7, r3
 80046e8:	2348      	movs	r3, #72	@ 0x48
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	0011      	movs	r1, r2
 80046ee:	0018      	movs	r0, r3
 80046f0:	f01e fae1 	bl	8022cb6 <strstr>
 80046f4:	0003      	movs	r3, r0
 80046f6:	22ac      	movs	r2, #172	@ 0xac
 80046f8:	0052      	lsls	r2, r2, #1
 80046fa:	18ba      	adds	r2, r7, r2
 80046fc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80046fe:	4b3f      	ldr	r3, [pc, #252]	@ (80047fc <ParseBuffer+0x2a4>)
 8004700:	22b0      	movs	r2, #176	@ 0xb0
 8004702:	0052      	lsls	r2, r2, #1
 8004704:	189b      	adds	r3, r3, r2
 8004706:	19db      	adds	r3, r3, r7
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10c      	bne.n	8004728 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800470e:	2308      	movs	r3, #8
 8004710:	18fa      	adds	r2, r7, r3
 8004712:	2348      	movs	r3, #72	@ 0x48
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	0011      	movs	r1, r2
 8004718:	0018      	movs	r0, r3
 800471a:	f01e facc 	bl	8022cb6 <strstr>
 800471e:	0003      	movs	r3, r0
 8004720:	22ac      	movs	r2, #172	@ 0xac
 8004722:	0052      	lsls	r2, r2, #1
 8004724:	18ba      	adds	r2, r7, r2
 8004726:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004728:	233c      	movs	r3, #60	@ 0x3c
 800472a:	18fa      	adds	r2, r7, r3
 800472c:	2448      	movs	r4, #72	@ 0x48
 800472e:	193b      	adds	r3, r7, r4
 8004730:	0011      	movs	r1, r2
 8004732:	0018      	movs	r0, r3
 8004734:	f01e fabf 	bl	8022cb6 <strstr>
 8004738:	0003      	movs	r3, r0
 800473a:	22aa      	movs	r2, #170	@ 0xaa
 800473c:	0052      	lsls	r2, r2, #1
 800473e:	18ba      	adds	r2, r7, r2
 8004740:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004742:	2318      	movs	r3, #24
 8004744:	18fa      	adds	r2, r7, r3
 8004746:	193b      	adds	r3, r7, r4
 8004748:	0011      	movs	r1, r2
 800474a:	0018      	movs	r0, r3
 800474c:	f01e fab3 	bl	8022cb6 <strstr>
 8004750:	0003      	movs	r3, r0
 8004752:	22a8      	movs	r2, #168	@ 0xa8
 8004754:	0052      	lsls	r2, r2, #1
 8004756:	18ba      	adds	r2, r7, r2
 8004758:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800475a:	4a38      	ldr	r2, [pc, #224]	@ (800483c <ParseBuffer+0x2e4>)
 800475c:	193b      	adds	r3, r7, r4
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f01e faa8 	bl	8022cb6 <strstr>
 8004766:	0003      	movs	r3, r0
 8004768:	22a6      	movs	r2, #166	@ 0xa6
 800476a:	0052      	lsls	r2, r2, #1
 800476c:	18ba      	adds	r2, r7, r2
 800476e:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004770:	2334      	movs	r3, #52	@ 0x34
 8004772:	18fa      	adds	r2, r7, r3
 8004774:	193b      	adds	r3, r7, r4
 8004776:	0011      	movs	r1, r2
 8004778:	0018      	movs	r0, r3
 800477a:	f01e fa9c 	bl	8022cb6 <strstr>
 800477e:	0003      	movs	r3, r0
 8004780:	22a4      	movs	r2, #164	@ 0xa4
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	18ba      	adds	r2, r7, r2
 8004786:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004788:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <ParseBuffer+0x2a0>)
 800478a:	21b0      	movs	r1, #176	@ 0xb0
 800478c:	0049      	lsls	r1, r1, #1
 800478e:	185b      	adds	r3, r3, r1
 8004790:	19db      	adds	r3, r3, r7
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d800      	bhi.n	800479a <ParseBuffer+0x242>
 8004798:	e0bf      	b.n	800491a <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800479a:	22ac      	movs	r2, #172	@ 0xac
 800479c:	0052      	lsls	r2, r2, #1
 800479e:	18bb      	adds	r3, r7, r2
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d052      	beq.n	800484c <ParseBuffer+0x2f4>
 80047a6:	18bb      	adds	r3, r7, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b4f      	cmp	r3, #79	@ 0x4f
 80047ae:	d14d      	bne.n	800484c <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80047b0:	2360      	movs	r3, #96	@ 0x60
 80047b2:	33ff      	adds	r3, #255	@ 0xff
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80047ba:	4b21      	ldr	r3, [pc, #132]	@ (8004840 <ParseBuffer+0x2e8>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b12      	cmp	r3, #18
 80047c0:	d144      	bne.n	800484c <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <ParseBuffer+0x2a0>)
 80047c4:	185b      	adds	r3, r3, r1
 80047c6:	19db      	adds	r3, r3, r7
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b2b      	cmp	r3, #43	@ 0x2b
 80047cc:	d10b      	bne.n	80047e6 <ParseBuffer+0x28e>
 80047ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <ParseBuffer+0x2a8>)
 80047d0:	185b      	adds	r3, r3, r1
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	2221      	movs	r2, #33	@ 0x21
 80047d6:	5c9b      	ldrb	r3, [r3, r2]
 80047d8:	2b32      	cmp	r3, #50	@ 0x32
 80047da:	d104      	bne.n	80047e6 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80047dc:	193b      	adds	r3, r7, r4
 80047de:	0018      	movs	r0, r3
 80047e0:	f002 fd86 	bl	80072f0 <ParseTime>
 80047e4:	e032      	b.n	800484c <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80047e6:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <ParseBuffer+0x2ec>)
 80047e8:	4b17      	ldr	r3, [pc, #92]	@ (8004848 <ParseBuffer+0x2f0>)
 80047ea:	0019      	movs	r1, r3
 80047ec:	2001      	movs	r0, #1
 80047ee:	f00c f8c9 	bl	8010984 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80047f2:	2306      	movs	r3, #6
 80047f4:	e095      	b.n	8004922 <ParseBuffer+0x3ca>
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	fffffea2 	.word	0xfffffea2
 80047fc:	fffffea1 	.word	0xfffffea1
 8004800:	fffffee8 	.word	0xfffffee8
 8004804:	0802631c 	.word	0x0802631c
 8004808:	fffffee4 	.word	0xfffffee4
 800480c:	08026348 	.word	0x08026348
 8004810:	fffffedc 	.word	0xfffffedc
 8004814:	0802634c 	.word	0x0802634c
 8004818:	fffffed4 	.word	0xfffffed4
 800481c:	08026354 	.word	0x08026354
 8004820:	fffffecc 	.word	0xfffffecc
 8004824:	0802635c 	.word	0x0802635c
 8004828:	fffffec8 	.word	0xfffffec8
 800482c:	fffffeb8 	.word	0xfffffeb8
 8004830:	08026364 	.word	0x08026364
 8004834:	fffffea8 	.word	0xfffffea8
 8004838:	08026374 	.word	0x08026374
 800483c:	08028d68 	.word	0x08028d68
 8004840:	20000636 	.word	0x20000636
 8004844:	08026334 	.word	0x08026334
 8004848:	08025bdc 	.word	0x08025bdc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800484c:	22ac      	movs	r2, #172	@ 0xac
 800484e:	0052      	lsls	r2, r2, #1
 8004850:	18bb      	adds	r3, r7, r2
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <ParseBuffer+0x314>
 8004858:	18bb      	adds	r3, r7, r2
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b72      	cmp	r3, #114	@ 0x72
 8004860:	d104      	bne.n	800486c <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 8004862:	2360      	movs	r3, #96	@ 0x60
 8004864:	33ff      	adds	r3, #255	@ 0xff
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	2202      	movs	r2, #2
 800486a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800486c:	22ac      	movs	r2, #172	@ 0xac
 800486e:	0052      	lsls	r2, r2, #1
 8004870:	18bb      	adds	r3, r7, r2
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <ParseBuffer+0x334>
 8004878:	18bb      	adds	r3, r7, r2
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004880:	d104      	bne.n	800488c <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 8004882:	2360      	movs	r3, #96	@ 0x60
 8004884:	33ff      	adds	r3, #255	@ 0xff
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2205      	movs	r2, #5
 800488a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800488c:	22ac      	movs	r2, #172	@ 0xac
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	18bb      	adds	r3, r7, r2
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <ParseBuffer+0x354>
 8004898:	18bb      	adds	r3, r7, r2
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b2b      	cmp	r3, #43	@ 0x2b
 80048a0:	d104      	bne.n	80048ac <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 80048a2:	2360      	movs	r3, #96	@ 0x60
 80048a4:	33ff      	adds	r3, #255	@ 0xff
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	220b      	movs	r2, #11
 80048aa:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80048ac:	22aa      	movs	r2, #170	@ 0xaa
 80048ae:	0052      	lsls	r2, r2, #1
 80048b0:	18bb      	adds	r3, r7, r2
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d004      	beq.n	80048c2 <ParseBuffer+0x36a>
 80048b8:	18bb      	adds	r3, r7, r2
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b45      	cmp	r3, #69	@ 0x45
 80048c0:	d00a      	beq.n	80048d8 <ParseBuffer+0x380>
 80048c2:	22a4      	movs	r2, #164	@ 0xa4
 80048c4:	0052      	lsls	r2, r2, #1
 80048c6:	18bb      	adds	r3, r7, r2
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <ParseBuffer+0x38a>
 80048ce:	18bb      	adds	r3, r7, r2
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b46      	cmp	r3, #70	@ 0x46
 80048d6:	d104      	bne.n	80048e2 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80048d8:	2360      	movs	r3, #96	@ 0x60
 80048da:	33ff      	adds	r3, #255	@ 0xff
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80048e2:	22a8      	movs	r2, #168	@ 0xa8
 80048e4:	0052      	lsls	r2, r2, #1
 80048e6:	18bb      	adds	r3, r7, r2
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <ParseBuffer+0x3a6>
 80048ee:	18bb      	adds	r3, r7, r2
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b57      	cmp	r3, #87	@ 0x57
 80048f6:	d102      	bne.n	80048fe <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <ParseBuffer+0x3d4>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80048fe:	22a6      	movs	r2, #166	@ 0xa6
 8004900:	0052      	lsls	r2, r2, #1
 8004902:	18bb      	adds	r3, r7, r2
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <ParseBuffer+0x3c2>
 800490a:	18bb      	adds	r3, r7, r2
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b32      	cmp	r3, #50	@ 0x32
 8004912:	d102      	bne.n	800491a <ParseBuffer+0x3c2>
      beurs = true;
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <ParseBuffer+0x3d8>)
 8004916:	2201      	movs	r2, #1
 8004918:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800491a:	2360      	movs	r3, #96	@ 0x60
 800491c:	33ff      	adds	r3, #255	@ 0xff
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	781b      	ldrb	r3, [r3, #0]

}
 8004922:	0018      	movs	r0, r3
 8004924:	46bd      	mov	sp, r7
 8004926:	b059      	add	sp, #356	@ 0x164
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	46c0      	nop			@ (mov r8, r8)
 800492c:	20000564 	.word	0x20000564
 8004930:	20000566 	.word	0x20000566

08004934 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <PollAwake+0x34>)
 800493c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7fb fc13 	bl	800016c <strlen>
 8004946:	0003      	movs	r3, r0
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0011      	movs	r1, r2
 800494e:	0018      	movs	r0, r3
 8004950:	f7ff f86e 	bl	8003a30 <ESP_Send>
 8004954:	1e03      	subs	r3, r0, #0
 8004956:	d001      	beq.n	800495c <PollAwake+0x28>
    return true;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <PollAwake+0x2a>
  }
  else{
    return false;
 800495c:	2300      	movs	r3, #0
  }
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b002      	add	sp, #8
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	08026384 	.word	0x08026384

0800496c <RFPower>:

bool RFPower(){
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <RFPower+0x34>)
 8004974:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f7fb fbf7 	bl	800016c <strlen>
 800497e:	0003      	movs	r3, r0
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff f852 	bl	8003a30 <ESP_Send>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d001      	beq.n	8004994 <RFPower+0x28>
    return true;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <RFPower+0x2a>
  }
  else{
    return false;
 8004994:	2300      	movs	r3, #0
  }
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	0802638c 	.word	0x0802638c

080049a4 <CheckRFPower>:

bool CheckRFPower(){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <CheckRFPower+0x34>)
 80049ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fb fbdb 	bl	800016c <strlen>
 80049b6:	0003      	movs	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff f836 	bl	8003a30 <ESP_Send>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d001      	beq.n	80049cc <CheckRFPower+0x28>
    return true;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <CheckRFPower+0x2a>
  }
  else{
    return false;
 80049cc:	2300      	movs	r3, #0
  }
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	0802639c 	.word	0x0802639c

080049dc <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <ATRestore+0x34>)
 80049e4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fb fbbf 	bl	800016c <strlen>
 80049ee:	0003      	movs	r3, r0
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0011      	movs	r1, r2
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff f81a 	bl	8003a30 <ESP_Send>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d001      	beq.n	8004a04 <ATRestore+0x28>
    return true;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <ATRestore+0x2a>
  }
  else{
    return false;
 8004a04:	2300      	movs	r3, #0
  }
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b002      	add	sp, #8
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	080263ac 	.word	0x080263ac

08004a14 <CWINIT>:

bool CWINIT(){
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <CWINIT+0x34>)
 8004a1c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fb fba3 	bl	800016c <strlen>
 8004a26:	0003      	movs	r3, r0
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	0011      	movs	r1, r2
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f7fe fffe 	bl	8003a30 <ESP_Send>
 8004a34:	1e03      	subs	r3, r0, #0
 8004a36:	d001      	beq.n	8004a3c <CWINIT+0x28>
    return true;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <CWINIT+0x2a>
  }
  else{
    return false;
 8004a3c:	2300      	movs	r3, #0
  }
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b002      	add	sp, #8
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	080263bc 	.word	0x080263bc

08004a4c <CWMODE1>:

bool CWMODE1(){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <CWMODE1+0x34>)
 8004a54:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fb fb87 	bl	800016c <strlen>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0011      	movs	r1, r2
 8004a66:	0018      	movs	r0, r3
 8004a68:	f7fe ffe2 	bl	8003a30 <ESP_Send>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <CWMODE1+0x28>
    return true;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e000      	b.n	8004a76 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004a74:	2300      	movs	r3, #0
  }
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	080263cc 	.word	0x080263cc

08004a84 <CWMODE2>:

bool CWMODE2(){
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <CWMODE2+0x34>)
 8004a8c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fb fb6b 	bl	800016c <strlen>
 8004a96:	0003      	movs	r3, r0
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0011      	movs	r1, r2
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7fe ffc6 	bl	8003a30 <ESP_Send>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	d001      	beq.n	8004aac <CWMODE2+0x28>
    return true;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <CWMODE2+0x2a>
  }
  else{
    return false;
 8004aac:	2300      	movs	r3, #0
  }
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b002      	add	sp, #8
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			@ (mov r8, r8)
 8004ab8:	080263dc 	.word	0x080263dc

08004abc <CWAUTOCONN>:

bool CWAUTOCONN(){
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <CWAUTOCONN+0x34>)
 8004ac4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fb fb4f 	bl	800016c <strlen>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0011      	movs	r1, r2
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f7fe ffaa 	bl	8003a30 <ESP_Send>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d001      	beq.n	8004ae4 <CWAUTOCONN+0x28>
    return true;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004ae4:	2300      	movs	r3, #0
  }
}
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b002      	add	sp, #8
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	080263ec 	.word	0x080263ec

08004af4 <CWJAP>:

bool CWJAP(){
 8004af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004af6:	46c6      	mov	lr, r8
 8004af8:	b500      	push	{lr}
 8004afa:	b0a2      	sub	sp, #136	@ 0x88
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	466b      	mov	r3, sp
 8004b00:	4698      	mov	r8, r3
  beursTest = true;
 8004b02:	4b39      	ldr	r3, [pc, #228]	@ (8004be8 <CWJAP+0xf4>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004b08:	2618      	movs	r6, #24
 8004b0a:	19bb      	adds	r3, r7, r6
 8004b0c:	2264      	movs	r2, #100	@ 0x64
 8004b0e:	2100      	movs	r1, #0
 8004b10:	0018      	movs	r0, r3
 8004b12:	f01e f895 	bl	8022c40 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004b16:	4b35      	ldr	r3, [pc, #212]	@ (8004bec <CWJAP+0xf8>)
 8004b18:	4a35      	ldr	r2, [pc, #212]	@ (8004bf0 <CWJAP+0xfc>)
 8004b1a:	4936      	ldr	r1, [pc, #216]	@ (8004bf4 <CWJAP+0x100>)
 8004b1c:	19b8      	adds	r0, r7, r6
 8004b1e:	f01d ff29 	bl	8022974 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004b22:	19bb      	adds	r3, r7, r6
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7fb fb21 	bl	800016c <strlen>
 8004b2a:	0002      	movs	r2, r0
 8004b2c:	216f      	movs	r1, #111	@ 0x6f
 8004b2e:	0030      	movs	r0, r6
 8004b30:	180b      	adds	r3, r1, r0
 8004b32:	19db      	adds	r3, r3, r7
 8004b34:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004b36:	180b      	adds	r3, r1, r0
 8004b38:	19db      	adds	r3, r3, r7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	2180      	movs	r1, #128	@ 0x80
 8004b42:	1879      	adds	r1, r7, r1
 8004b44:	600a      	str	r2, [r1, #0]
 8004b46:	001a      	movs	r2, r3
 8004b48:	60ba      	str	r2, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	60fa      	str	r2, [r7, #12]
 8004b4e:	68b8      	ldr	r0, [r7, #8]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	0002      	movs	r2, r0
 8004b54:	0f52      	lsrs	r2, r2, #29
 8004b56:	000e      	movs	r6, r1
 8004b58:	00f6      	lsls	r6, r6, #3
 8004b5a:	617e      	str	r6, [r7, #20]
 8004b5c:	697e      	ldr	r6, [r7, #20]
 8004b5e:	4316      	orrs	r6, r2
 8004b60:	617e      	str	r6, [r7, #20]
 8004b62:	0002      	movs	r2, r0
 8004b64:	00d2      	lsls	r2, r2, #3
 8004b66:	613a      	str	r2, [r7, #16]
 8004b68:	001a      	movs	r2, r3
 8004b6a:	603a      	str	r2, [r7, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	6838      	ldr	r0, [r7, #0]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	0002      	movs	r2, r0
 8004b76:	0f52      	lsrs	r2, r2, #29
 8004b78:	000e      	movs	r6, r1
 8004b7a:	00f5      	lsls	r5, r6, #3
 8004b7c:	4315      	orrs	r5, r2
 8004b7e:	0002      	movs	r2, r0
 8004b80:	00d4      	lsls	r4, r2, #3
 8004b82:	3307      	adds	r3, #7
 8004b84:	08db      	lsrs	r3, r3, #3
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	466a      	mov	r2, sp
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	469d      	mov	sp, r3
 8004b8e:	466b      	mov	r3, sp
 8004b90:	3300      	adds	r3, #0
 8004b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004b94:	246f      	movs	r4, #111	@ 0x6f
 8004b96:	2518      	movs	r5, #24
 8004b98:	1963      	adds	r3, r4, r5
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f01e f84a 	bl	8022c40 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004bac:	1963      	adds	r3, r4, r5
 8004bae:	19db      	adds	r3, r3, r7
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	1979      	adds	r1, r7, r5
 8004bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f01e f869 	bl	8022c8e <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004bbc:	1963      	adds	r3, r4, r5
 8004bbe:	19db      	adds	r3, r3, r7
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004bc6:	0011      	movs	r1, r2
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fe ff31 	bl	8003a30 <ESP_Send>
 8004bce:	1e03      	subs	r3, r0, #0
 8004bd0:	d001      	beq.n	8004bd6 <CWJAP+0xe2>
    return true;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <CWJAP+0xe4>
  }
  else{
    return false;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	46c5      	mov	sp, r8
  }
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b022      	add	sp, #136	@ 0x88
 8004be0:	bc80      	pop	{r7}
 8004be2:	46b8      	mov	r8, r7
 8004be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	20000565 	.word	0x20000565
 8004bec:	08028d74 	.word	0x08028d74
 8004bf0:	08028d68 	.word	0x08028d68
 8004bf4:	08026400 	.word	0x08026400

08004bf8 <CWMODE3>:

bool CWMODE3(){
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <CWMODE3+0x34>)
 8004c00:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7fb fab1 	bl	800016c <strlen>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0011      	movs	r1, r2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7fe ff0c 	bl	8003a30 <ESP_Send>
 8004c18:	1e03      	subs	r3, r0, #0
 8004c1a:	d001      	beq.n	8004c20 <CWMODE3+0x28>
    return true;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004c20:	2300      	movs	r3, #0
  }
}
 8004c22:	0018      	movs	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	08026418 	.word	0x08026418

08004c30 <CWSTATE>:

bool CWSTATE(){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <CWSTATE+0x34>)
 8004c38:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fb fa95 	bl	800016c <strlen>
 8004c42:	0003      	movs	r3, r0
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fe fef0 	bl	8003a30 <ESP_Send>
 8004c50:	1e03      	subs	r3, r0, #0
 8004c52:	d001      	beq.n	8004c58 <CWSTATE+0x28>
    return true;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004c58:	2300      	movs	r3, #0
  }
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	08026428 	.word	0x08026428

08004c68 <CWSAP>:

bool CWSAP(){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c9c <CWSAP+0x34>)
 8004c70:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7fb fa79 	bl	800016c <strlen>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0011      	movs	r1, r2
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7fe fed4 	bl	8003a30 <ESP_Send>
 8004c88:	1e03      	subs	r3, r0, #0
 8004c8a:	d001      	beq.n	8004c90 <CWSAP+0x28>
    return true;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <CWSAP+0x2a>
  }
  else{
    return false;
 8004c90:	2300      	movs	r3, #0
  }
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	08026438 	.word	0x08026438

08004ca0 <CIPMUX>:

bool CIPMUX(){
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <CIPMUX+0x34>)
 8004ca8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fb fa5d 	bl	800016c <strlen>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	0011      	movs	r1, r2
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7fe feb8 	bl	8003a30 <ESP_Send>
 8004cc0:	1e03      	subs	r3, r0, #0
 8004cc2:	d001      	beq.n	8004cc8 <CIPMUX+0x28>
    return true;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <CIPMUX+0x2a>
  }
  else{
    return false;
 8004cc8:	2300      	movs	r3, #0
  }
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	0802645c 	.word	0x0802645c

08004cd8 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <WEBSERVER+0x34>)
 8004ce0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fb fa41 	bl	800016c <strlen>
 8004cea:	0003      	movs	r3, r0
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0011      	movs	r1, r2
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7fe fe9c 	bl	8003a30 <ESP_Send>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d001      	beq.n	8004d00 <WEBSERVER+0x28>
    return true;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004d00:	2300      	movs	r3, #0
  }
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	0802646c 	.word	0x0802646c

08004d10 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004d16:	1cfb      	adds	r3, r7, #3
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004d1c:	4b26      	ldr	r3, [pc, #152]	@ (8004db8 <HTTPCPOST+0xa8>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	1dbc      	adds	r4, r7, #6
 8004d22:	1cf9      	adds	r1, r7, #3
 8004d24:	2200      	movs	r2, #0
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7ff f838 	bl	8003d9c <CreateMessage>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004d30:	4b21      	ldr	r3, [pc, #132]	@ (8004db8 <HTTPCPOST+0xa8>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004d38:	1dbb      	adds	r3, r7, #6
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dbc <HTTPCPOST+0xac>)
 8004d3e:	4920      	ldr	r1, [pc, #128]	@ (8004dc0 <HTTPCPOST+0xb0>)
 8004d40:	4820      	ldr	r0, [pc, #128]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d42:	f01d fe17 	bl	8022974 <siprintf>
 8004d46:	e015      	b.n	8004d74 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004d48:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <HTTPCPOST+0xb8>)
 8004d4a:	4820      	ldr	r0, [pc, #128]	@ (8004dcc <HTTPCPOST+0xbc>)
 8004d4c:	220c      	movs	r2, #12
 8004d4e:	0019      	movs	r1, r3
 8004d50:	f004 fb12 	bl	8009378 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004d54:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <HTTPCPOST+0xb8>)
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <HTTPCPOST+0xc0>)
 8004d58:	0011      	movs	r1, r2
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fe fffa 	bl	8003d54 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	4c1a      	ldr	r4, [pc, #104]	@ (8004dd0 <HTTPCPOST+0xc0>)
 8004d66:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd4 <HTTPCPOST+0xc4>)
 8004d68:	491b      	ldr	r1, [pc, #108]	@ (8004dd8 <HTTPCPOST+0xc8>)
 8004d6a:	4816      	ldr	r0, [pc, #88]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	0023      	movs	r3, r4
 8004d70:	f01d fe00 	bl	8022974 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004d74:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fb f9f8 	bl	800016c <strlen>
 8004d7c:	0002      	movs	r2, r0
 8004d7e:	1d3b      	adds	r3, r7, #4
 8004d80:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	8818      	ldrh	r0, [r3, #0]
 8004d86:	1cfb      	adds	r3, r7, #3
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	4a14      	ldr	r2, [pc, #80]	@ (8004ddc <HTTPCPOST+0xcc>)
 8004d8c:	4914      	ldr	r1, [pc, #80]	@ (8004de0 <HTTPCPOST+0xd0>)
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	0003      	movs	r3, r0
 8004d92:	2003      	movs	r0, #3
 8004d94:	f00b fdf6 	bl	8010984 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	881a      	ldrh	r2, [r3, #0]
 8004d9c:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HTTPCPOST+0xb4>)
 8004d9e:	0011      	movs	r1, r2
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7fe fe45 	bl	8003a30 <ESP_Send>
 8004da6:	1e03      	subs	r3, r0, #0
 8004da8:	d001      	beq.n	8004dae <HTTPCPOST+0x9e>
    return true;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004dae:	2300      	movs	r3, #0
  }
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b003      	add	sp, #12
 8004db6:	bd90      	pop	{r4, r7, pc}
 8004db8:	20000566 	.word	0x20000566
 8004dbc:	08028d90 	.word	0x08028d90
 8004dc0:	08026484 	.word	0x08026484
 8004dc4:	2000058c 	.word	0x2000058c
 8004dc8:	20000768 	.word	0x20000768
 8004dcc:	08080000 	.word	0x08080000
 8004dd0:	20000774 	.word	0x20000774
 8004dd4:	08028dcc 	.word	0x08028dcc
 8004dd8:	080264bc 	.word	0x080264bc
 8004ddc:	080264fc 	.word	0x080264fc
 8004de0:	08025bb8 	.word	0x08025bb8

08004de4 <SENDDATA>:

bool SENDDATA(){
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af02      	add	r7, sp, #8
  bool result = false;
 8004dea:	1dfb      	adds	r3, r7, #7
 8004dec:	2200      	movs	r2, #0
 8004dee:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004df0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <SENDDATA+0x48>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	1df9      	adds	r1, r7, #7
 8004df6:	2201      	movs	r2, #1
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fe ffcf 	bl	8003d9c <CreateMessage>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	001a      	movs	r2, r3
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <SENDDATA+0x4c>)
 8004e04:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <SENDDATA+0x4c>)
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <SENDDATA+0x50>)
 8004e12:	4909      	ldr	r1, [pc, #36]	@ (8004e38 <SENDDATA+0x54>)
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	0003      	movs	r3, r0
 8004e18:	2003      	movs	r0, #3
 8004e1a:	f00b fdb3 	bl	8010984 <CreateLine>
  return result;
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b002      	add	sp, #8
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	20000566 	.word	0x20000566
 8004e30:	20000580 	.word	0x20000580
 8004e34:	08026558 	.word	0x08026558
 8004e38:	08025bb8 	.word	0x08025bb8

08004e3c <SLEEP>:

bool SLEEP(){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <SLEEP+0x34>)
 8004e44:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	0018      	movs	r0, r3
 8004e4a:	f7fb f98f 	bl	800016c <strlen>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0011      	movs	r1, r2
 8004e56:	0018      	movs	r0, r3
 8004e58:	f7fe fdea 	bl	8003a30 <ESP_Send>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d001      	beq.n	8004e64 <SLEEP+0x28>
    return true;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e000      	b.n	8004e66 <SLEEP+0x2a>
  }
  else{
    return false;
 8004e64:	2300      	movs	r3, #0
  }
}
 8004e66:	0018      	movs	r0, r3
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	08026594 	.word	0x08026594

08004e74 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <CIPSNTPCFG+0x3c>)
 8004e7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0018      	movs	r0, r3
 8004e82:	f7fb f973 	bl	800016c <strlen>
 8004e86:	0003      	movs	r3, r0
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f7fe fdce 	bl	8003a30 <ESP_Send>
 8004e94:	1e03      	subs	r3, r0, #0
 8004e96:	d006      	beq.n	8004ea6 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004e98:	23fa      	movs	r3, #250	@ 0xfa
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f00c f9c7 	bl	8011230 <HAL_Delay>
    return true;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004ea6:	2300      	movs	r3, #0
  }
}
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	080265a4 	.word	0x080265a4

08004eb4 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <CIPSNTPTIME+0x34>)
 8004ebc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7fb f953 	bl	800016c <strlen>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	0011      	movs	r1, r2
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7fe fdae 	bl	8003a30 <ESP_Send>
 8004ed4:	1e03      	subs	r3, r0, #0
 8004ed6:	d001      	beq.n	8004edc <CIPSNTPTIME+0x28>
    return true;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004edc:	2300      	movs	r3, #0
  }
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b002      	add	sp, #8
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	080265f4 	.word	0x080265f4

08004eec <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <CIPSNTPINTV+0x34>)
 8004ef4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7fb f937 	bl	800016c <strlen>
 8004efe:	0003      	movs	r3, r0
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0011      	movs	r1, r2
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7fe fd92 	bl	8003a30 <ESP_Send>
 8004f0c:	1e03      	subs	r3, r0, #0
 8004f0e:	d001      	beq.n	8004f14 <CIPSNTPINTV+0x28>
    return true;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004f14:	2300      	movs	r3, #0
  }
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b002      	add	sp, #8
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	08026608 	.word	0x08026608

08004f24 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004f24:	b5b0      	push	{r4, r5, r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	1dfb      	adds	r3, r7, #7
 8004f2e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004f30:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <DMA_ProcessBuffer+0x1c0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	200e      	movs	r0, #14
 8004f3a:	183b      	adds	r3, r7, r0
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	0049      	lsls	r1, r1, #1
 8004f40:	1a8a      	subs	r2, r1, r2
 8004f42:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004f44:	230d      	movs	r3, #13
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2203      	movs	r2, #3
 8004f4a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004f4c:	183b      	adds	r3, r7, r0
 8004f4e:	881a      	ldrh	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d903      	bls.n	8004f60 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004f58:	183b      	adds	r3, r7, r0
 8004f5a:	2280      	movs	r2, #128	@ 0x80
 8004f5c:	0052      	lsls	r2, r2, #1
 8004f5e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004f60:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	001a      	movs	r2, r3
 8004f68:	230e      	movs	r3, #14
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d131      	bne.n	8004fd6 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004f72:	4b5e      	ldr	r3, [pc, #376]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b14      	cmp	r3, #20
 8004f78:	d91b      	bls.n	8004fb2 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004f80:	4b5b      	ldr	r3, [pc, #364]	@ (80050f0 <DMA_ProcessBuffer+0x1cc>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d107      	bne.n	8004f98 <DMA_ProcessBuffer+0x74>
 8004f88:	4b5a      	ldr	r3, [pc, #360]	@ (80050f4 <DMA_ProcessBuffer+0x1d0>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004f90:	230d      	movs	r3, #13
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	2207      	movs	r2, #7
 8004f96:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004f98:	4b55      	ldr	r3, [pc, #340]	@ (80050f0 <DMA_ProcessBuffer+0x1cc>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d103      	bne.n	8004fa8 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004fa0:	4b55      	ldr	r3, [pc, #340]	@ (80050f8 <DMA_ProcessBuffer+0x1d4>)
 8004fa2:	220b      	movs	r2, #11
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e016      	b.n	8004fd6 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004fa8:	230d      	movs	r3, #13
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2206      	movs	r2, #6
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e011      	b.n	8004fd6 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004fb2:	4b4e      	ldr	r3, [pc, #312]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b4c      	ldr	r3, [pc, #304]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004fbc:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004fbe:	f00c f92d 	bl	801121c <HAL_GetTick>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	33f5      	adds	r3, #245	@ 0xf5
 8004fc6:	33ff      	adds	r3, #255	@ 0xff
 8004fc8:	001a      	movs	r2, r3
 8004fca:	4b4c      	ldr	r3, [pc, #304]	@ (80050fc <DMA_ProcessBuffer+0x1d8>)
 8004fcc:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004fce:	230d      	movs	r3, #13
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004fd6:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	210e      	movs	r1, #14
 8004fe0:	187b      	adds	r3, r7, r1
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d100      	bne.n	8004fea <DMA_ProcessBuffer+0xc6>
 8004fe8:	e075      	b.n	80050d6 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004fea:	4b40      	ldr	r3, [pc, #256]	@ (80050ec <DMA_ProcessBuffer+0x1c8>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004ff0:	4b43      	ldr	r3, [pc, #268]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d109      	bne.n	8005014 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8005000:	187b      	adds	r3, r7, r1
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b3e      	ldr	r3, [pc, #248]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 8005008:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800500a:	230d      	movs	r3, #13
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	220a      	movs	r2, #10
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e060      	b.n	80050d6 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8005014:	4b3a      	ldr	r3, [pc, #232]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	001a      	movs	r2, r3
 800501c:	210e      	movs	r1, #14
 800501e:	187b      	adds	r3, r7, r1
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8005026:	187b      	adds	r3, r7, r1
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	4b34      	ldr	r3, [pc, #208]	@ (8005100 <DMA_ProcessBuffer+0x1dc>)
 800502e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8005030:	230d      	movs	r3, #13
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	220a      	movs	r2, #10
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	e04d      	b.n	80050d6 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 800503a:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	001a      	movs	r2, r3
 8005042:	210e      	movs	r1, #14
 8005044:	187b      	adds	r3, r7, r1
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	4293      	cmp	r3, r2
 800504a:	d917      	bls.n	800507c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800504c:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	001a      	movs	r2, r3
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <DMA_ProcessBuffer+0x1e0>)
 8005056:	18d0      	adds	r0, r2, r3
 8005058:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	001a      	movs	r2, r3
 8005060:	187b      	adds	r3, r7, r1
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	b299      	uxth	r1, r3
 8005068:	230d      	movs	r3, #13
 800506a:	18fc      	adds	r4, r7, r3
 800506c:	1dfb      	adds	r3, r7, #7
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	001a      	movs	r2, r3
 8005072:	f7ff fa71 	bl	8004558 <ParseBuffer>
 8005076:	0003      	movs	r3, r0
 8005078:	7023      	strb	r3, [r4, #0]
 800507a:	e026      	b.n	80050ca <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 800507c:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	001a      	movs	r2, r3
 8005084:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <DMA_ProcessBuffer+0x1e0>)
 8005086:	18d0      	adds	r0, r2, r3
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	001a      	movs	r2, r3
 8005090:	2380      	movs	r3, #128	@ 0x80
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	b299      	uxth	r1, r3
 8005098:	250d      	movs	r5, #13
 800509a:	197c      	adds	r4, r7, r5
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	001a      	movs	r2, r3
 80050a2:	f7ff fa59 	bl	8004558 <ParseBuffer>
 80050a6:	0003      	movs	r3, r0
 80050a8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80050aa:	210e      	movs	r1, #14
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80050b4:	197c      	adds	r4, r7, r5
 80050b6:	1dfb      	adds	r3, r7, #7
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	187b      	adds	r3, r7, r1
 80050bc:	8819      	ldrh	r1, [r3, #0]
 80050be:	4b11      	ldr	r3, [pc, #68]	@ (8005104 <DMA_ProcessBuffer+0x1e0>)
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7ff fa49 	bl	8004558 <ParseBuffer>
 80050c6:	0003      	movs	r3, r0
 80050c8:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 80050ca:	230e      	movs	r3, #14
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4b05      	ldr	r3, [pc, #20]	@ (80050e8 <DMA_ProcessBuffer+0x1c4>)
 80050d4:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 80050d6:	230d      	movs	r3, #13
 80050d8:	18fb      	adds	r3, r7, r3
 80050da:	781b      	ldrb	r3, [r3, #0]
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bdb0      	pop	{r4, r5, r7, pc}
 80050e4:	200020e0 	.word	0x200020e0
 80050e8:	2000078d 	.word	0x2000078d
 80050ec:	20000634 	.word	0x20000634
 80050f0:	20000636 	.word	0x20000636
 80050f4:	20000000 	.word	0x20000000
 80050f8:	2000002c 	.word	0x2000002c
 80050fc:	2000062c 	.word	0x2000062c
 8005100:	2000078e 	.word	0x2000078e
 8005104:	20000460 	.word	0x20000460

08005108 <clearDMABuffer>:

void clearDMABuffer(){
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 800510c:	2380      	movs	r3, #128	@ 0x80
 800510e:	005a      	lsls	r2, r3, #1
 8005110:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <clearDMABuffer+0x18>)
 8005112:	2100      	movs	r1, #0
 8005114:	0018      	movs	r0, r3
 8005116:	f01d fd93 	bl	8022c40 <memset>
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000460 	.word	0x20000460

08005124 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	0002      	movs	r2, r0
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	1dbb      	adds	r3, r7, #6
 8005132:	1c0a      	adds	r2, r1, #0
 8005134:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005136:	210f      	movs	r1, #15
 8005138:	187b      	adds	r3, r7, r1
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800513e:	1dbb      	adds	r3, r7, #6
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d105      	bne.n	8005152 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005146:	187b      	adds	r3, r7, r1
 8005148:	1dfa      	adds	r2, r7, #7
 800514a:	7812      	ldrb	r2, [r2, #0]
 800514c:	4251      	negs	r1, r2
 800514e:	414a      	adcs	r2, r1
 8005150:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005152:	1dbb      	adds	r3, r7, #6
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800515a:	230f      	movs	r3, #15
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	1dfa      	adds	r2, r7, #7
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	3a02      	subs	r2, #2
 8005164:	4251      	negs	r1, r2
 8005166:	414a      	adcs	r2, r1
 8005168:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800516a:	1dbb      	adds	r3, r7, #6
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d107      	bne.n	8005182 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005172:	230f      	movs	r3, #15
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	1dfa      	adds	r2, r7, #7
 8005178:	7812      	ldrb	r2, [r2, #0]
 800517a:	3a05      	subs	r2, #5
 800517c:	4251      	negs	r1, r2
 800517e:	414a      	adcs	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005182:	1dbb      	adds	r3, r7, #6
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d107      	bne.n	800519a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800518a:	230f      	movs	r3, #15
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	1dfa      	adds	r2, r7, #7
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	3a0b      	subs	r2, #11
 8005194:	4251      	negs	r1, r2
 8005196:	414a      	adcs	r2, r1
 8005198:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800519a:	230f      	movs	r3, #15
 800519c:	18fb      	adds	r3, r7, r3
 800519e:	781b      	ldrb	r3, [r3, #0]
}
 80051a0:	0018      	movs	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b004      	add	sp, #16
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <AT_Send>:

bool AT_Send(AT_Commands state){
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	0002      	movs	r2, r0
 80051b0:	1dfb      	adds	r3, r7, #7
 80051b2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80051b4:	230f      	movs	r3, #15
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
  switch (state){
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b14      	cmp	r3, #20
 80051c2:	d900      	bls.n	80051c6 <AT_Send+0x1e>
 80051c4:	e19e      	b.n	8005504 <AT_Send+0x35c>
 80051c6:	009a      	lsls	r2, r3, #2
 80051c8:	4bd2      	ldr	r3, [pc, #840]	@ (8005514 <AT_Send+0x36c>)
 80051ca:	18d3      	adds	r3, r2, r3
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80051d0:	4bd1      	ldr	r3, [pc, #836]	@ (8005518 <AT_Send+0x370>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0018      	movs	r0, r3
 80051d6:	f00b fb7f 	bl	80108d8 <TimestampIsReached>
 80051da:	1e03      	subs	r3, r0, #0
 80051dc:	d100      	bne.n	80051e0 <AT_Send+0x38>
 80051de:	e190      	b.n	8005502 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80051e0:	4ace      	ldr	r2, [pc, #824]	@ (800551c <AT_Send+0x374>)
 80051e2:	4bcf      	ldr	r3, [pc, #828]	@ (8005520 <AT_Send+0x378>)
 80051e4:	0019      	movs	r1, r3
 80051e6:	2003      	movs	r0, #3
 80051e8:	f00b fbcc 	bl	8010984 <CreateLine>
    ATCommandSend = PollAwake();
 80051ec:	230f      	movs	r3, #15
 80051ee:	18fc      	adds	r4, r7, r3
 80051f0:	f7ff fba0 	bl	8004934 <PollAwake>
 80051f4:	0003      	movs	r3, r0
 80051f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80051f8:	f00c f810 	bl	801121c <HAL_GetTick>
 80051fc:	0003      	movs	r3, r0
 80051fe:	3332      	adds	r3, #50	@ 0x32
 8005200:	001a      	movs	r2, r3
 8005202:	4bc5      	ldr	r3, [pc, #788]	@ (8005518 <AT_Send+0x370>)
 8005204:	601a      	str	r2, [r3, #0]
  }
  break;
 8005206:	e17c      	b.n	8005502 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005208:	4ac6      	ldr	r2, [pc, #792]	@ (8005524 <AT_Send+0x37c>)
 800520a:	4bc5      	ldr	r3, [pc, #788]	@ (8005520 <AT_Send+0x378>)
 800520c:	0019      	movs	r1, r3
 800520e:	2003      	movs	r0, #3
 8005210:	f00b fbb8 	bl	8010984 <CreateLine>
    ATCommandSend = RFPower();
 8005214:	230f      	movs	r3, #15
 8005216:	18fc      	adds	r4, r7, r3
 8005218:	f7ff fba8 	bl	800496c <RFPower>
 800521c:	0003      	movs	r3, r0
 800521e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005220:	f00b fffc 	bl	801121c <HAL_GetTick>
 8005224:	0003      	movs	r3, r0
 8005226:	330a      	adds	r3, #10
 8005228:	001a      	movs	r2, r3
 800522a:	4bbb      	ldr	r3, [pc, #748]	@ (8005518 <AT_Send+0x370>)
 800522c:	601a      	str	r2, [r3, #0]
    break;
 800522e:	e169      	b.n	8005504 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8005230:	4abd      	ldr	r2, [pc, #756]	@ (8005528 <AT_Send+0x380>)
 8005232:	4bbb      	ldr	r3, [pc, #748]	@ (8005520 <AT_Send+0x378>)
 8005234:	0019      	movs	r1, r3
 8005236:	2003      	movs	r0, #3
 8005238:	f00b fba4 	bl	8010984 <CreateLine>
    ATCommandSend = CheckRFPower();
 800523c:	230f      	movs	r3, #15
 800523e:	18fc      	adds	r4, r7, r3
 8005240:	f7ff fbb0 	bl	80049a4 <CheckRFPower>
 8005244:	0003      	movs	r3, r0
 8005246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005248:	f00b ffe8 	bl	801121c <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	330a      	adds	r3, #10
 8005250:	001a      	movs	r2, r3
 8005252:	4bb1      	ldr	r3, [pc, #708]	@ (8005518 <AT_Send+0x370>)
 8005254:	601a      	str	r2, [r3, #0]
    break;
 8005256:	e155      	b.n	8005504 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005258:	4ab4      	ldr	r2, [pc, #720]	@ (800552c <AT_Send+0x384>)
 800525a:	4bb1      	ldr	r3, [pc, #708]	@ (8005520 <AT_Send+0x378>)
 800525c:	0019      	movs	r1, r3
 800525e:	2003      	movs	r0, #3
 8005260:	f00b fb90 	bl	8010984 <CreateLine>
    ATCommandSend = ATRestore();
 8005264:	230f      	movs	r3, #15
 8005266:	18fc      	adds	r4, r7, r3
 8005268:	f7ff fbb8 	bl	80049dc <ATRestore>
 800526c:	0003      	movs	r3, r0
 800526e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005270:	f00b ffd4 	bl	801121c <HAL_GetTick>
 8005274:	0003      	movs	r3, r0
 8005276:	3332      	adds	r3, #50	@ 0x32
 8005278:	001a      	movs	r2, r3
 800527a:	4ba7      	ldr	r3, [pc, #668]	@ (8005518 <AT_Send+0x370>)
 800527c:	601a      	str	r2, [r3, #0]
    break;
 800527e:	e141      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8005280:	4aab      	ldr	r2, [pc, #684]	@ (8005530 <AT_Send+0x388>)
 8005282:	4ba7      	ldr	r3, [pc, #668]	@ (8005520 <AT_Send+0x378>)
 8005284:	0019      	movs	r1, r3
 8005286:	2003      	movs	r0, #3
 8005288:	f00b fb7c 	bl	8010984 <CreateLine>
    ATCommandSend = CWINIT();
 800528c:	230f      	movs	r3, #15
 800528e:	18fc      	adds	r4, r7, r3
 8005290:	f7ff fbc0 	bl	8004a14 <CWINIT>
 8005294:	0003      	movs	r3, r0
 8005296:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005298:	f00b ffc0 	bl	801121c <HAL_GetTick>
 800529c:	0003      	movs	r3, r0
 800529e:	33f5      	adds	r3, #245	@ 0xf5
 80052a0:	33ff      	adds	r3, #255	@ 0xff
 80052a2:	001a      	movs	r2, r3
 80052a4:	4b9c      	ldr	r3, [pc, #624]	@ (8005518 <AT_Send+0x370>)
 80052a6:	601a      	str	r2, [r3, #0]
    break;
 80052a8:	e12c      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 80052aa:	4aa2      	ldr	r2, [pc, #648]	@ (8005534 <AT_Send+0x38c>)
 80052ac:	4b9c      	ldr	r3, [pc, #624]	@ (8005520 <AT_Send+0x378>)
 80052ae:	0019      	movs	r1, r3
 80052b0:	2003      	movs	r0, #3
 80052b2:	f00b fb67 	bl	8010984 <CreateLine>
    ATCommandSend = CWSTATE();
 80052b6:	230f      	movs	r3, #15
 80052b8:	18fc      	adds	r4, r7, r3
 80052ba:	f7ff fcb9 	bl	8004c30 <CWSTATE>
 80052be:	0003      	movs	r3, r0
 80052c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80052c2:	f00b ffab 	bl	801121c <HAL_GetTick>
 80052c6:	0003      	movs	r3, r0
 80052c8:	33f5      	adds	r3, #245	@ 0xf5
 80052ca:	33ff      	adds	r3, #255	@ 0xff
 80052cc:	001a      	movs	r2, r3
 80052ce:	4b92      	ldr	r3, [pc, #584]	@ (8005518 <AT_Send+0x370>)
 80052d0:	601a      	str	r2, [r3, #0]
    break;
 80052d2:	e117      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80052d4:	4a98      	ldr	r2, [pc, #608]	@ (8005538 <AT_Send+0x390>)
 80052d6:	4b92      	ldr	r3, [pc, #584]	@ (8005520 <AT_Send+0x378>)
 80052d8:	0019      	movs	r1, r3
 80052da:	2003      	movs	r0, #3
 80052dc:	f00b fb52 	bl	8010984 <CreateLine>
    ATCommandSend = CWMODE1();
 80052e0:	230f      	movs	r3, #15
 80052e2:	18fc      	adds	r4, r7, r3
 80052e4:	f7ff fbb2 	bl	8004a4c <CWMODE1>
 80052e8:	0003      	movs	r3, r0
 80052ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052ec:	f00b ff96 	bl	801121c <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	330a      	adds	r3, #10
 80052f4:	001a      	movs	r2, r3
 80052f6:	4b88      	ldr	r3, [pc, #544]	@ (8005518 <AT_Send+0x370>)
 80052f8:	601a      	str	r2, [r3, #0]
    break;
 80052fa:	e103      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80052fc:	4a8e      	ldr	r2, [pc, #568]	@ (8005538 <AT_Send+0x390>)
 80052fe:	4b88      	ldr	r3, [pc, #544]	@ (8005520 <AT_Send+0x378>)
 8005300:	0019      	movs	r1, r3
 8005302:	2003      	movs	r0, #3
 8005304:	f00b fb3e 	bl	8010984 <CreateLine>
    ATCommandSend = CWMODE2();
 8005308:	230f      	movs	r3, #15
 800530a:	18fc      	adds	r4, r7, r3
 800530c:	f7ff fbba 	bl	8004a84 <CWMODE2>
 8005310:	0003      	movs	r3, r0
 8005312:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005314:	f00b ff82 	bl	801121c <HAL_GetTick>
 8005318:	0003      	movs	r3, r0
 800531a:	330a      	adds	r3, #10
 800531c:	001a      	movs	r2, r3
 800531e:	4b7e      	ldr	r3, [pc, #504]	@ (8005518 <AT_Send+0x370>)
 8005320:	601a      	str	r2, [r3, #0]
    break;
 8005322:	e0ef      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005324:	4a85      	ldr	r2, [pc, #532]	@ (800553c <AT_Send+0x394>)
 8005326:	4b7e      	ldr	r3, [pc, #504]	@ (8005520 <AT_Send+0x378>)
 8005328:	0019      	movs	r1, r3
 800532a:	2003      	movs	r0, #3
 800532c:	f00b fb2a 	bl	8010984 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005330:	230f      	movs	r3, #15
 8005332:	18fc      	adds	r4, r7, r3
 8005334:	f7ff fbc2 	bl	8004abc <CWAUTOCONN>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800533c:	f00b ff6e 	bl	801121c <HAL_GetTick>
 8005340:	0003      	movs	r3, r0
 8005342:	330a      	adds	r3, #10
 8005344:	001a      	movs	r2, r3
 8005346:	4b74      	ldr	r3, [pc, #464]	@ (8005518 <AT_Send+0x370>)
 8005348:	601a      	str	r2, [r3, #0]
    break;
 800534a:	e0db      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800534c:	4a7c      	ldr	r2, [pc, #496]	@ (8005540 <AT_Send+0x398>)
 800534e:	4b74      	ldr	r3, [pc, #464]	@ (8005520 <AT_Send+0x378>)
 8005350:	0019      	movs	r1, r3
 8005352:	2003      	movs	r0, #3
 8005354:	f00b fb16 	bl	8010984 <CreateLine>
    ATCommandSend = CWJAP();
 8005358:	230f      	movs	r3, #15
 800535a:	18fc      	adds	r4, r7, r3
 800535c:	f7ff fbca 	bl	8004af4 <CWJAP>
 8005360:	0003      	movs	r3, r0
 8005362:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005364:	f00b ff5a 	bl	801121c <HAL_GetTick>
 8005368:	0003      	movs	r3, r0
 800536a:	3332      	adds	r3, #50	@ 0x32
 800536c:	001a      	movs	r2, r3
 800536e:	4b6a      	ldr	r3, [pc, #424]	@ (8005518 <AT_Send+0x370>)
 8005370:	601a      	str	r2, [r3, #0]
    break;
 8005372:	e0c7      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005374:	4a73      	ldr	r2, [pc, #460]	@ (8005544 <AT_Send+0x39c>)
 8005376:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <AT_Send+0x378>)
 8005378:	0019      	movs	r1, r3
 800537a:	2003      	movs	r0, #3
 800537c:	f00b fb02 	bl	8010984 <CreateLine>
    ATCommandSend = CWMODE3();
 8005380:	230f      	movs	r3, #15
 8005382:	18fc      	adds	r4, r7, r3
 8005384:	f7ff fc38 	bl	8004bf8 <CWMODE3>
 8005388:	0003      	movs	r3, r0
 800538a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800538c:	f00b ff46 	bl	801121c <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	330a      	adds	r3, #10
 8005394:	001a      	movs	r2, r3
 8005396:	4b60      	ldr	r3, [pc, #384]	@ (8005518 <AT_Send+0x370>)
 8005398:	601a      	str	r2, [r3, #0]
    break;
 800539a:	e0b3      	b.n	8005504 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800539c:	4a6a      	ldr	r2, [pc, #424]	@ (8005548 <AT_Send+0x3a0>)
 800539e:	4b60      	ldr	r3, [pc, #384]	@ (8005520 <AT_Send+0x378>)
 80053a0:	0019      	movs	r1, r3
 80053a2:	2003      	movs	r0, #3
 80053a4:	f00b faee 	bl	8010984 <CreateLine>
    ATCommandSend = CWSAP();
 80053a8:	230f      	movs	r3, #15
 80053aa:	18fc      	adds	r4, r7, r3
 80053ac:	f7ff fc5c 	bl	8004c68 <CWSAP>
 80053b0:	0003      	movs	r3, r0
 80053b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053b4:	f00b ff32 	bl	801121c <HAL_GetTick>
 80053b8:	0003      	movs	r3, r0
 80053ba:	330a      	adds	r3, #10
 80053bc:	001a      	movs	r2, r3
 80053be:	4b56      	ldr	r3, [pc, #344]	@ (8005518 <AT_Send+0x370>)
 80053c0:	601a      	str	r2, [r3, #0]
    break;
 80053c2:	e09f      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80053c4:	4a61      	ldr	r2, [pc, #388]	@ (800554c <AT_Send+0x3a4>)
 80053c6:	4b56      	ldr	r3, [pc, #344]	@ (8005520 <AT_Send+0x378>)
 80053c8:	0019      	movs	r1, r3
 80053ca:	2003      	movs	r0, #3
 80053cc:	f00b fada 	bl	8010984 <CreateLine>
    ATCommandSend = CIPMUX();
 80053d0:	230f      	movs	r3, #15
 80053d2:	18fc      	adds	r4, r7, r3
 80053d4:	f7ff fc64 	bl	8004ca0 <CIPMUX>
 80053d8:	0003      	movs	r3, r0
 80053da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053dc:	f00b ff1e 	bl	801121c <HAL_GetTick>
 80053e0:	0003      	movs	r3, r0
 80053e2:	330a      	adds	r3, #10
 80053e4:	001a      	movs	r2, r3
 80053e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005518 <AT_Send+0x370>)
 80053e8:	601a      	str	r2, [r3, #0]
    break;
 80053ea:	e08b      	b.n	8005504 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80053ec:	4a58      	ldr	r2, [pc, #352]	@ (8005550 <AT_Send+0x3a8>)
 80053ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005520 <AT_Send+0x378>)
 80053f0:	0019      	movs	r1, r3
 80053f2:	2003      	movs	r0, #3
 80053f4:	f00b fac6 	bl	8010984 <CreateLine>
    ATCommandSend = WEBSERVER();
 80053f8:	230f      	movs	r3, #15
 80053fa:	18fc      	adds	r4, r7, r3
 80053fc:	f7ff fc6c 	bl	8004cd8 <WEBSERVER>
 8005400:	0003      	movs	r3, r0
 8005402:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005404:	f00b ff0a 	bl	801121c <HAL_GetTick>
 8005408:	0003      	movs	r3, r0
 800540a:	330a      	adds	r3, #10
 800540c:	001a      	movs	r2, r3
 800540e:	4b42      	ldr	r3, [pc, #264]	@ (8005518 <AT_Send+0x370>)
 8005410:	601a      	str	r2, [r3, #0]
    break;
 8005412:	e077      	b.n	8005504 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8005414:	230f      	movs	r3, #15
 8005416:	18fc      	adds	r4, r7, r3
 8005418:	f7ff fc7a 	bl	8004d10 <HTTPCPOST>
 800541c:	0003      	movs	r3, r0
 800541e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005420:	f00b fefc 	bl	801121c <HAL_GetTick>
 8005424:	0003      	movs	r3, r0
 8005426:	33f5      	adds	r3, #245	@ 0xf5
 8005428:	33ff      	adds	r3, #255	@ 0xff
 800542a:	001a      	movs	r2, r3
 800542c:	4b3a      	ldr	r3, [pc, #232]	@ (8005518 <AT_Send+0x370>)
 800542e:	601a      	str	r2, [r3, #0]
    break;
 8005430:	e068      	b.n	8005504 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8005432:	4a48      	ldr	r2, [pc, #288]	@ (8005554 <AT_Send+0x3ac>)
 8005434:	4b3a      	ldr	r3, [pc, #232]	@ (8005520 <AT_Send+0x378>)
 8005436:	0019      	movs	r1, r3
 8005438:	2003      	movs	r0, #3
 800543a:	f00b faa3 	bl	8010984 <CreateLine>
    ATCommandSend = SENDDATA();
 800543e:	230f      	movs	r3, #15
 8005440:	18fc      	adds	r4, r7, r3
 8005442:	f7ff fccf 	bl	8004de4 <SENDDATA>
 8005446:	0003      	movs	r3, r0
 8005448:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800544a:	f00b fee7 	bl	801121c <HAL_GetTick>
 800544e:	0003      	movs	r3, r0
 8005450:	33f5      	adds	r3, #245	@ 0xf5
 8005452:	33ff      	adds	r3, #255	@ 0xff
 8005454:	001a      	movs	r2, r3
 8005456:	4b30      	ldr	r3, [pc, #192]	@ (8005518 <AT_Send+0x370>)
 8005458:	601a      	str	r2, [r3, #0]
    break;
 800545a:	e053      	b.n	8005504 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800545c:	4a3e      	ldr	r2, [pc, #248]	@ (8005558 <AT_Send+0x3b0>)
 800545e:	4b30      	ldr	r3, [pc, #192]	@ (8005520 <AT_Send+0x378>)
 8005460:	0019      	movs	r1, r3
 8005462:	2003      	movs	r0, #3
 8005464:	f00b fa8e 	bl	8010984 <CreateLine>
    ATCommandSend = SLEEP();
 8005468:	230f      	movs	r3, #15
 800546a:	18fc      	adds	r4, r7, r3
 800546c:	f7ff fce6 	bl	8004e3c <SLEEP>
 8005470:	0003      	movs	r3, r0
 8005472:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005474:	f00b fed2 	bl	801121c <HAL_GetTick>
 8005478:	0003      	movs	r3, r0
 800547a:	330a      	adds	r3, #10
 800547c:	001a      	movs	r2, r3
 800547e:	4b26      	ldr	r3, [pc, #152]	@ (8005518 <AT_Send+0x370>)
 8005480:	601a      	str	r2, [r3, #0]
    break;
 8005482:	e03f      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005484:	4a35      	ldr	r2, [pc, #212]	@ (800555c <AT_Send+0x3b4>)
 8005486:	4b26      	ldr	r3, [pc, #152]	@ (8005520 <AT_Send+0x378>)
 8005488:	0019      	movs	r1, r3
 800548a:	2003      	movs	r0, #3
 800548c:	f00b fa7a 	bl	8010984 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005490:	230f      	movs	r3, #15
 8005492:	18fc      	adds	r4, r7, r3
 8005494:	f7ff fcee 	bl	8004e74 <CIPSNTPCFG>
 8005498:	0003      	movs	r3, r0
 800549a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800549c:	f00b febe 	bl	801121c <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	330a      	adds	r3, #10
 80054a4:	001a      	movs	r2, r3
 80054a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005518 <AT_Send+0x370>)
 80054a8:	601a      	str	r2, [r3, #0]
    break;
 80054aa:	e02b      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80054ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005560 <AT_Send+0x3b8>)
 80054ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005520 <AT_Send+0x378>)
 80054b0:	0019      	movs	r1, r3
 80054b2:	2003      	movs	r0, #3
 80054b4:	f00b fa66 	bl	8010984 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80054b8:	230f      	movs	r3, #15
 80054ba:	18fc      	adds	r4, r7, r3
 80054bc:	f7ff fcfa 	bl	8004eb4 <CIPSNTPTIME>
 80054c0:	0003      	movs	r3, r0
 80054c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80054c4:	f00b feaa 	bl	801121c <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	33f5      	adds	r3, #245	@ 0xf5
 80054cc:	33ff      	adds	r3, #255	@ 0xff
 80054ce:	001a      	movs	r2, r3
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <AT_Send+0x370>)
 80054d2:	601a      	str	r2, [r3, #0]
    break;
 80054d4:	e016      	b.n	8005504 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80054d6:	4a23      	ldr	r2, [pc, #140]	@ (8005564 <AT_Send+0x3bc>)
 80054d8:	4b11      	ldr	r3, [pc, #68]	@ (8005520 <AT_Send+0x378>)
 80054da:	0019      	movs	r1, r3
 80054dc:	2003      	movs	r0, #3
 80054de:	f00b fa51 	bl	8010984 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80054e2:	230f      	movs	r3, #15
 80054e4:	18fc      	adds	r4, r7, r3
 80054e6:	f7ff fd01 	bl	8004eec <CIPSNTPINTV>
 80054ea:	0003      	movs	r3, r0
 80054ec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80054ee:	f00b fe95 	bl	801121c <HAL_GetTick>
 80054f2:	0003      	movs	r3, r0
 80054f4:	330a      	adds	r3, #10
 80054f6:	001a      	movs	r2, r3
 80054f8:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <AT_Send+0x370>)
 80054fa:	601a      	str	r2, [r3, #0]
    break;
 80054fc:	e002      	b.n	8005504 <AT_Send+0x35c>

  case AT_END:
    break;
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	e000      	b.n	8005504 <AT_Send+0x35c>
  break;
 8005502:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005504:	230f      	movs	r3, #15
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	781b      	ldrb	r3, [r3, #0]
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b005      	add	sp, #20
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	46c0      	nop			@ (mov r8, r8)
 8005514:	08028e28 	.word	0x08028e28
 8005518:	2000062c 	.word	0x2000062c
 800551c:	08026620 	.word	0x08026620
 8005520:	08025bb8 	.word	0x08025bb8
 8005524:	0802662c 	.word	0x0802662c
 8005528:	08026640 	.word	0x08026640
 800552c:	08026654 	.word	0x08026654
 8005530:	08026664 	.word	0x08026664
 8005534:	08026678 	.word	0x08026678
 8005538:	08026690 	.word	0x08026690
 800553c:	080266a8 	.word	0x080266a8
 8005540:	080266c0 	.word	0x080266c0
 8005544:	080266d4 	.word	0x080266d4
 8005548:	080266f0 	.word	0x080266f0
 800554c:	0802670c 	.word	0x0802670c
 8005550:	08026728 	.word	0x08026728
 8005554:	08026744 	.word	0x08026744
 8005558:	08026754 	.word	0x08026754
 800555c:	08026778 	.word	0x08026778
 8005560:	0802678c 	.word	0x0802678c
 8005564:	080267a4 	.word	0x080267a4

08005568 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800556e:	1dfb      	adds	r3, r7, #7
 8005570:	2200      	movs	r2, #0
 8005572:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005574:	4b7d      	ldr	r3, [pc, #500]	@ (800576c <ESP_WakeTest+0x204>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d900      	bls.n	800557e <ESP_WakeTest+0x16>
 800557c:	e0d9      	b.n	8005732 <ESP_WakeTest+0x1ca>
 800557e:	009a      	lsls	r2, r3, #2
 8005580:	4b7b      	ldr	r3, [pc, #492]	@ (8005770 <ESP_WakeTest+0x208>)
 8005582:	18d3      	adds	r3, r2, r3
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005588:	4b7a      	ldr	r3, [pc, #488]	@ (8005774 <ESP_WakeTest+0x20c>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	4053      	eors	r3, r2
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d036      	beq.n	8005604 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005596:	2380      	movs	r3, #128	@ 0x80
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	4877      	ldr	r0, [pc, #476]	@ (8005778 <ESP_WakeTest+0x210>)
 800559c:	2200      	movs	r2, #0
 800559e:	0019      	movs	r1, r3
 80055a0:	f00d f8cd 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80055a4:	2032      	movs	r0, #50	@ 0x32
 80055a6:	f00b fe43 	bl	8011230 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80055aa:	2380      	movs	r3, #128	@ 0x80
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	4872      	ldr	r0, [pc, #456]	@ (8005778 <ESP_WakeTest+0x210>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	0019      	movs	r1, r3
 80055b4:	f00d f8c3 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055b8:	200a      	movs	r0, #10
 80055ba:	f00b fe39 	bl	8011230 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055be:	4b6f      	ldr	r3, [pc, #444]	@ (800577c <ESP_WakeTest+0x214>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	2101      	movs	r1, #1
 80055c4:	0018      	movs	r0, r3
 80055c6:	f00d f8ba 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055ca:	200a      	movs	r0, #10
 80055cc:	f00b fe30 	bl	8011230 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80055d0:	4b6a      	ldr	r3, [pc, #424]	@ (800577c <ESP_WakeTest+0x214>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	2102      	movs	r1, #2
 80055d6:	0018      	movs	r0, r3
 80055d8:	f00d f8b1 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80055dc:	200a      	movs	r0, #10
 80055de:	f00b fe27 	bl	8011230 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80055e2:	4b66      	ldr	r3, [pc, #408]	@ (800577c <ESP_WakeTest+0x214>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	2101      	movs	r1, #1
 80055e8:	0018      	movs	r0, r3
 80055ea:	f00d f8a8 	bl	801273e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055ee:	f00b fe15 	bl	801121c <HAL_GetTick>
 80055f2:	0003      	movs	r3, r0
 80055f4:	22af      	movs	r2, #175	@ 0xaf
 80055f6:	0092      	lsls	r2, r2, #2
 80055f8:	189a      	adds	r2, r3, r2
 80055fa:	4b61      	ldr	r3, [pc, #388]	@ (8005780 <ESP_WakeTest+0x218>)
 80055fc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005774 <ESP_WakeTest+0x20c>)
 8005600:	2201      	movs	r2, #1
 8005602:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	005a      	lsls	r2, r3, #1
 8005608:	4b5e      	ldr	r3, [pc, #376]	@ (8005784 <ESP_WakeTest+0x21c>)
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f7fe fa41 	bl	8003a94 <ESP_Receive>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d100      	bne.n	8005618 <ESP_WakeTest+0xb0>
 8005616:	e09f      	b.n	8005758 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005618:	4b54      	ldr	r3, [pc, #336]	@ (800576c <ESP_WakeTest+0x204>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800561e:	e09b      	b.n	8005758 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005620:	4b57      	ldr	r3, [pc, #348]	@ (8005780 <ESP_WakeTest+0x218>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	0018      	movs	r0, r3
 8005626:	f00b f957 	bl	80108d8 <TimestampIsReached>
 800562a:	1e03      	subs	r3, r0, #0
 800562c:	d100      	bne.n	8005630 <ESP_WakeTest+0xc8>
 800562e:	e095      	b.n	800575c <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8005630:	4b55      	ldr	r3, [pc, #340]	@ (8005788 <ESP_WakeTest+0x220>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	1dfc      	adds	r4, r7, #7
 8005636:	0018      	movs	r0, r3
 8005638:	f7ff fdb6 	bl	80051a8 <AT_Send>
 800563c:	0003      	movs	r3, r0
 800563e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005640:	1dfb      	adds	r3, r7, #7
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d100      	bne.n	800564a <ESP_WakeTest+0xe2>
 8005648:	e088      	b.n	800575c <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 800564a:	4b48      	ldr	r3, [pc, #288]	@ (800576c <ESP_WakeTest+0x204>)
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005650:	e084      	b.n	800575c <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8005652:	4b4b      	ldr	r3, [pc, #300]	@ (8005780 <ESP_WakeTest+0x218>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	0018      	movs	r0, r3
 8005658:	f00b f93e 	bl	80108d8 <TimestampIsReached>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d100      	bne.n	8005662 <ESP_WakeTest+0xfa>
 8005660:	e07e      	b.n	8005760 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005662:	4b4a      	ldr	r3, [pc, #296]	@ (800578c <ESP_WakeTest+0x224>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff fc5c 	bl	8004f24 <DMA_ProcessBuffer>
 800566c:	0003      	movs	r3, r0
 800566e:	001a      	movs	r2, r3
 8005670:	4b47      	ldr	r3, [pc, #284]	@ (8005790 <ESP_WakeTest+0x228>)
 8005672:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005674:	4b46      	ldr	r3, [pc, #280]	@ (8005790 <ESP_WakeTest+0x228>)
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	4b44      	ldr	r3, [pc, #272]	@ (800578c <ESP_WakeTest+0x224>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	1dbc      	adds	r4, r7, #6
 800567e:	0019      	movs	r1, r3
 8005680:	0010      	movs	r0, r2
 8005682:	f7ff fd4f 	bl	8005124 <ATCompare>
 8005686:	0003      	movs	r3, r0
 8005688:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800568a:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <ESP_WakeTest+0x228>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d102      	bne.n	8005698 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005692:	4b36      	ldr	r3, [pc, #216]	@ (800576c <ESP_WakeTest+0x204>)
 8005694:	2201      	movs	r2, #1
 8005696:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005698:	4b3d      	ldr	r3, [pc, #244]	@ (8005790 <ESP_WakeTest+0x228>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b07      	cmp	r3, #7
 800569e:	d104      	bne.n	80056aa <ESP_WakeTest+0x142>
          StartProg();
 80056a0:	f7fe ff28 	bl	80044f4 <StartProg>
          TestState = ESP_TEST_BOOT;
 80056a4:	4b31      	ldr	r3, [pc, #196]	@ (800576c <ESP_WakeTest+0x204>)
 80056a6:	2205      	movs	r2, #5
 80056a8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80056aa:	4b39      	ldr	r3, [pc, #228]	@ (8005790 <ESP_WakeTest+0x228>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d109      	bne.n	80056c6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80056b2:	f00b fdb3 	bl	801121c <HAL_GetTick>
 80056b6:	0003      	movs	r3, r0
 80056b8:	3332      	adds	r3, #50	@ 0x32
 80056ba:	001a      	movs	r2, r3
 80056bc:	4b30      	ldr	r3, [pc, #192]	@ (8005780 <ESP_WakeTest+0x218>)
 80056be:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80056c0:	4b2a      	ldr	r3, [pc, #168]	@ (800576c <ESP_WakeTest+0x204>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80056c6:	1dbb      	adds	r3, r7, #6
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d048      	beq.n	8005760 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80056ce:	4b27      	ldr	r3, [pc, #156]	@ (800576c <ESP_WakeTest+0x204>)
 80056d0:	2203      	movs	r2, #3
 80056d2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80056d4:	e044      	b.n	8005760 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005794 <ESP_WakeTest+0x22c>)
 80056d8:	22fa      	movs	r2, #250	@ 0xfa
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80056de:	f009 fea1 	bl	800f424 <Calculate_LED_ON>
 80056e2:	0003      	movs	r3, r0
 80056e4:	001a      	movs	r2, r3
 80056e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005794 <ESP_WakeTest+0x22c>)
 80056e8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80056ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <ESP_WakeTest+0x22c>)
 80056ec:	22fa      	movs	r2, #250	@ 0xfa
 80056ee:	0112      	lsls	r2, r2, #4
 80056f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80056f2:	4b1e      	ldr	r3, [pc, #120]	@ (800576c <ESP_WakeTest+0x204>)
 80056f4:	2204      	movs	r2, #4
 80056f6:	701a      	strb	r2, [r3, #0]

      break;
 80056f8:	e033      	b.n	8005762 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80056fa:	4b27      	ldr	r3, [pc, #156]	@ (8005798 <ESP_WakeTest+0x230>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005700:	4b1c      	ldr	r3, [pc, #112]	@ (8005774 <ESP_WakeTest+0x20c>)
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005706:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <ESP_WakeTest+0x214>)
 8005708:	2200      	movs	r2, #0
 800570a:	2101      	movs	r1, #1
 800570c:	0018      	movs	r0, r3
 800570e:	f00d f816 	bl	801273e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	4818      	ldr	r0, [pc, #96]	@ (8005778 <ESP_WakeTest+0x210>)
 8005718:	2200      	movs	r2, #0
 800571a:	0019      	movs	r1, r3
 800571c:	f00d f80f 	bl	801273e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005720:	4b16      	ldr	r3, [pc, #88]	@ (800577c <ESP_WakeTest+0x214>)
 8005722:	2200      	movs	r2, #0
 8005724:	2102      	movs	r1, #2
 8005726:	0018      	movs	r0, r3
 8005728:	f00d f809 	bl	801273e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800572c:	f004 ff8c 	bl	800a648 <SetESPMeasurementDone>
      break;
 8005730:	e017      	b.n	8005762 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8005732:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <ESP_WakeTest+0x204>)
 8005734:	2200      	movs	r2, #0
 8005736:	701a      	strb	r2, [r3, #0]
      break;
 8005738:	e013      	b.n	8005762 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 800573a:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <ESP_WakeTest+0x22c>)
 800573c:	22fa      	movs	r2, #250	@ 0xfa
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8005742:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <ESP_WakeTest+0x22c>)
 8005744:	22fa      	movs	r2, #250	@ 0xfa
 8005746:	0112      	lsls	r2, r2, #4
 8005748:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 800574a:	f009 fe6b 	bl	800f424 <Calculate_LED_ON>
 800574e:	0003      	movs	r3, r0
 8005750:	001a      	movs	r2, r3
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <ESP_WakeTest+0x22c>)
 8005754:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005756:	e004      	b.n	8005762 <ESP_WakeTest+0x1fa>
      break;
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	e002      	b.n	8005762 <ESP_WakeTest+0x1fa>
      break;
 800575c:	46c0      	nop			@ (mov r8, r8)
 800575e:	e000      	b.n	8005762 <ESP_WakeTest+0x1fa>
      break;
 8005760:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	46bd      	mov	sp, r7
 8005766:	b003      	add	sp, #12
 8005768:	bd90      	pop	{r4, r7, pc}
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	20000638 	.word	0x20000638
 8005770:	08028e7c 	.word	0x08028e7c
 8005774:	20000560 	.word	0x20000560
 8005778:	50000800 	.word	0x50000800
 800577c:	50001c00 	.word	0x50001c00
 8005780:	2000062c 	.word	0x2000062c
 8005784:	20000460 	.word	0x20000460
 8005788:	20000636 	.word	0x20000636
 800578c:	20000635 	.word	0x20000635
 8005790:	2000002e 	.word	0x2000002e
 8005794:	40000400 	.word	0x40000400
 8005798:	20000000 	.word	0x20000000

0800579c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800579c:	b5b0      	push	{r4, r5, r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80057a2:	1dfb      	adds	r3, r7, #7
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80057a8:	4be2      	ldr	r3, [pc, #904]	@ (8005b34 <ESP_Upkeep+0x398>)
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	4be2      	ldr	r3, [pc, #904]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d024      	beq.n	80057fe <ESP_Upkeep+0x62>
 80057b4:	f00b f960 	bl	8010a78 <GetVerboseLevel>
 80057b8:	0003      	movs	r3, r0
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d11f      	bne.n	80057fe <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80057be:	4bdd      	ldr	r3, [pc, #884]	@ (8005b34 <ESP_Upkeep+0x398>)
 80057c0:	781a      	ldrb	r2, [r3, #0]
 80057c2:	4bdd      	ldr	r3, [pc, #884]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057c4:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80057c6:	4bdc      	ldr	r3, [pc, #880]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d103      	bne.n	80057d6 <ESP_Upkeep+0x3a>
 80057ce:	4bdb      	ldr	r3, [pc, #876]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b0e      	cmp	r3, #14
 80057d4:	d013      	beq.n	80057fe <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80057d6:	4bd8      	ldr	r3, [pc, #864]	@ (8005b38 <ESP_Upkeep+0x39c>)
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	001d      	movs	r5, r3
 80057dc:	4bd7      	ldr	r3, [pc, #860]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	0018      	movs	r0, r3
 80057e2:	4bd7      	ldr	r3, [pc, #860]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	001c      	movs	r4, r3
 80057e8:	4bd6      	ldr	r3, [pc, #856]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4ad6      	ldr	r2, [pc, #856]	@ (8005b48 <ESP_Upkeep+0x3ac>)
 80057ee:	49d7      	ldr	r1, [pc, #860]	@ (8005b4c <ESP_Upkeep+0x3b0>)
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	9401      	str	r4, [sp, #4]
 80057f4:	9000      	str	r0, [sp, #0]
 80057f6:	002b      	movs	r3, r5
 80057f8:	2003      	movs	r0, #3
 80057fa:	f00b f8c3 	bl	8010984 <CreateLine>
    }
  }
  switch (EspState) {
 80057fe:	4bcd      	ldr	r3, [pc, #820]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	d901      	bls.n	800580a <ESP_Upkeep+0x6e>
 8005806:	f000 fc32 	bl	800606e <ESP_Upkeep+0x8d2>
 800580a:	009a      	lsls	r2, r3, #2
 800580c:	4bd0      	ldr	r3, [pc, #832]	@ (8005b50 <ESP_Upkeep+0x3b4>)
 800580e:	18d3      	adds	r3, r2, r3
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005814:	4bc7      	ldr	r3, [pc, #796]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
      break;
 800581a:	f000 fc41 	bl	80060a0 <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 800581e:	f005 f9f5 	bl	800ac0c <DisableConnectedDevices>
      SetESPIndicator();
 8005822:	f009 ff91 	bl	800f748 <SetESPIndicator>
      if(!EspTurnedOn){
 8005826:	4bcb      	ldr	r3, [pc, #812]	@ (8005b54 <ESP_Upkeep+0x3b8>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2201      	movs	r2, #1
 800582c:	4053      	eors	r3, r2
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d036      	beq.n	80058a2 <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005834:	2380      	movs	r3, #128	@ 0x80
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	48c7      	ldr	r0, [pc, #796]	@ (8005b58 <ESP_Upkeep+0x3bc>)
 800583a:	2200      	movs	r2, #0
 800583c:	0019      	movs	r1, r3
 800583e:	f00c ff7e 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005842:	2001      	movs	r0, #1
 8005844:	f00b fcf4 	bl	8011230 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005848:	2380      	movs	r3, #128	@ 0x80
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	48c2      	ldr	r0, [pc, #776]	@ (8005b58 <ESP_Upkeep+0x3bc>)
 800584e:	2201      	movs	r2, #1
 8005850:	0019      	movs	r1, r3
 8005852:	f00c ff74 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005856:	2001      	movs	r0, #1
 8005858:	f00b fcea 	bl	8011230 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800585c:	4bbf      	ldr	r3, [pc, #764]	@ (8005b5c <ESP_Upkeep+0x3c0>)
 800585e:	2200      	movs	r2, #0
 8005860:	2101      	movs	r1, #1
 8005862:	0018      	movs	r0, r3
 8005864:	f00c ff6b 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005868:	2001      	movs	r0, #1
 800586a:	f00b fce1 	bl	8011230 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800586e:	4bbb      	ldr	r3, [pc, #748]	@ (8005b5c <ESP_Upkeep+0x3c0>)
 8005870:	2201      	movs	r2, #1
 8005872:	2102      	movs	r1, #2
 8005874:	0018      	movs	r0, r3
 8005876:	f00c ff62 	bl	801273e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800587a:	2001      	movs	r0, #1
 800587c:	f00b fcd8 	bl	8011230 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005880:	4bb6      	ldr	r3, [pc, #728]	@ (8005b5c <ESP_Upkeep+0x3c0>)
 8005882:	2201      	movs	r2, #1
 8005884:	2101      	movs	r1, #1
 8005886:	0018      	movs	r0, r3
 8005888:	f00c ff59 	bl	801273e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800588c:	f00b fcc6 	bl	801121c <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	22af      	movs	r2, #175	@ 0xaf
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	189a      	adds	r2, r3, r2
 8005898:	4bb1      	ldr	r3, [pc, #708]	@ (8005b60 <ESP_Upkeep+0x3c4>)
 800589a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800589c:	4bad      	ldr	r3, [pc, #692]	@ (8005b54 <ESP_Upkeep+0x3b8>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80058a2:	2380      	movs	r3, #128	@ 0x80
 80058a4:	005a      	lsls	r2, r3, #1
 80058a6:	4baf      	ldr	r3, [pc, #700]	@ (8005b64 <ESP_Upkeep+0x3c8>)
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fe f8f2 	bl	8003a94 <ESP_Receive>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d101      	bne.n	80058b8 <ESP_Upkeep+0x11c>
 80058b4:	f000 fbe7 	bl	8006086 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80058b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005b34 <ESP_Upkeep+0x398>)
 80058ba:	220f      	movs	r2, #15
 80058bc:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80058be:	f00b fcad 	bl	801121c <HAL_GetTick>
 80058c2:	0003      	movs	r3, r0
 80058c4:	22fa      	movs	r2, #250	@ 0xfa
 80058c6:	00d2      	lsls	r2, r2, #3
 80058c8:	189a      	adds	r2, r3, r2
 80058ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005b68 <ESP_Upkeep+0x3cc>)
 80058cc:	601a      	str	r2, [r3, #0]
      }
      break;
 80058ce:	f000 fbda 	bl	8006086 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80058d2:	2001      	movs	r0, #1
 80058d4:	f7ff fb26 	bl	8004f24 <DMA_ProcessBuffer>
 80058d8:	0003      	movs	r3, r0
 80058da:	001a      	movs	r2, r3
 80058dc:	4ba3      	ldr	r3, [pc, #652]	@ (8005b6c <ESP_Upkeep+0x3d0>)
 80058de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80058e0:	4ba2      	ldr	r3, [pc, #648]	@ (8005b6c <ESP_Upkeep+0x3d0>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	1dbc      	adds	r4, r7, #6
 80058e6:	2101      	movs	r1, #1
 80058e8:	0018      	movs	r0, r3
 80058ea:	f7ff fc1b 	bl	8005124 <ATCompare>
 80058ee:	0003      	movs	r3, r0
 80058f0:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80058f2:	1dbb      	adds	r3, r7, #6
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d108      	bne.n	800590c <ESP_Upkeep+0x170>
 80058fa:	4b9b      	ldr	r3, [pc, #620]	@ (8005b68 <ESP_Upkeep+0x3cc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	0018      	movs	r0, r3
 8005900:	f00a ffea 	bl	80108d8 <TimestampIsReached>
 8005904:	1e03      	subs	r3, r0, #0
 8005906:	d101      	bne.n	800590c <ESP_Upkeep+0x170>
 8005908:	f000 fbbf 	bl	800608a <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 800590c:	4b89      	ldr	r3, [pc, #548]	@ (8005b34 <ESP_Upkeep+0x398>)
 800590e:	220b      	movs	r2, #11
 8005910:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005912:	f000 fbba 	bl	800608a <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 8005916:	4b96      	ldr	r3, [pc, #600]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005918:	2209      	movs	r2, #9
 800591a:	2114      	movs	r1, #20
 800591c:	0018      	movs	r0, r3
 800591e:	f01d f98f 	bl	8022c40 <memset>
      if(!InitIsDone || WifiReset){
 8005922:	4b94      	ldr	r3, [pc, #592]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	4053      	eors	r3, r2
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <ESP_Upkeep+0x19c>
 8005930:	4b91      	ldr	r3, [pc, #580]	@ (8005b78 <ESP_Upkeep+0x3dc>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01a      	beq.n	800596e <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005938:	4b8d      	ldr	r3, [pc, #564]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 800593a:	4a90      	ldr	r2, [pc, #576]	@ (8005b7c <ESP_Upkeep+0x3e0>)
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	6019      	str	r1, [r3, #0]
 8005940:	8891      	ldrh	r1, [r2, #4]
 8005942:	8099      	strh	r1, [r3, #4]
 8005944:	7992      	ldrb	r2, [r2, #6]
 8005946:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005948:	4b7a      	ldr	r3, [pc, #488]	@ (8005b34 <ESP_Upkeep+0x398>)
 800594a:	2204      	movs	r2, #4
 800594c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800594e:	4b8c      	ldr	r3, [pc, #560]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005954:	4b7a      	ldr	r3, [pc, #488]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800595a:	4b89      	ldr	r3, [pc, #548]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	001a      	movs	r2, r3
 8005960:	4b83      	ldr	r3, [pc, #524]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005962:	5c9a      	ldrb	r2, [r3, r2]
 8005964:	4b75      	ldr	r3, [pc, #468]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005966:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005968:	4b76      	ldr	r3, [pc, #472]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800596e:	4b81      	ldr	r3, [pc, #516]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01f      	beq.n	80059b6 <ESP_Upkeep+0x21a>
 8005976:	4b83      	ldr	r3, [pc, #524]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2201      	movs	r2, #1
 800597c:	4053      	eors	r3, r2
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d018      	beq.n	80059b6 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005984:	4b7a      	ldr	r3, [pc, #488]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005986:	4a80      	ldr	r2, [pc, #512]	@ (8005b88 <ESP_Upkeep+0x3ec>)
 8005988:	6811      	ldr	r1, [r2, #0]
 800598a:	6019      	str	r1, [r3, #0]
 800598c:	8892      	ldrh	r2, [r2, #4]
 800598e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005990:	4b68      	ldr	r3, [pc, #416]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005992:	2204      	movs	r2, #4
 8005994:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005996:	4b7a      	ldr	r3, [pc, #488]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800599c:	4b68      	ldr	r3, [pc, #416]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059a2:	4b77      	ldr	r3, [pc, #476]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	001a      	movs	r2, r3
 80059a8:	4b71      	ldr	r3, [pc, #452]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 80059aa:	5c9a      	ldrb	r2, [r3, r2]
 80059ac:	4b63      	ldr	r3, [pc, #396]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80059ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059b0:	4b64      	ldr	r3, [pc, #400]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80059b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d021      	beq.n	8005a02 <ESP_Upkeep+0x266>
 80059be:	4b71      	ldr	r3, [pc, #452]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01d      	beq.n	8005a02 <ESP_Upkeep+0x266>
 80059c6:	4b71      	ldr	r3, [pc, #452]	@ (8005b8c <ESP_Upkeep+0x3f0>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4053      	eors	r3, r2
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d016      	beq.n	8005a02 <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80059d4:	4b6e      	ldr	r3, [pc, #440]	@ (8005b90 <ESP_Upkeep+0x3f4>)
 80059d6:	881a      	ldrh	r2, [r3, #0]
 80059d8:	4b65      	ldr	r3, [pc, #404]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 80059da:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059dc:	4b55      	ldr	r3, [pc, #340]	@ (8005b34 <ESP_Upkeep+0x398>)
 80059de:	2204      	movs	r2, #4
 80059e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059e2:	4b67      	ldr	r3, [pc, #412]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80059e8:	4b55      	ldr	r3, [pc, #340]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 80059ea:	2204      	movs	r2, #4
 80059ec:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059ee:	4b64      	ldr	r3, [pc, #400]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	001a      	movs	r2, r3
 80059f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 80059f6:	5c9a      	ldrb	r2, [r3, r2]
 80059f8:	4b50      	ldr	r3, [pc, #320]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 80059fa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059fc:	4b51      	ldr	r3, [pc, #324]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005a02:	4b5c      	ldr	r3, [pc, #368]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d02c      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
 8005a0a:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d028      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
 8005a12:	4b5e      	ldr	r3, [pc, #376]	@ (8005b8c <ESP_Upkeep+0x3f0>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d024      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
 8005a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8005b94 <ESP_Upkeep+0x3f8>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4053      	eors	r3, r2
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01d      	beq.n	8005a64 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005a28:	4b51      	ldr	r3, [pc, #324]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005b98 <ESP_Upkeep+0x3fc>)
 8005a2c:	8811      	ldrh	r1, [r2, #0]
 8005a2e:	8019      	strh	r1, [r3, #0]
 8005a30:	7892      	ldrb	r2, [r2, #2]
 8005a32:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005a34:	4b3f      	ldr	r3, [pc, #252]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005a36:	2204      	movs	r2, #4
 8005a38:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a3a:	4b51      	ldr	r3, [pc, #324]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005a40:	4b3f      	ldr	r3, [pc, #252]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005a42:	2202      	movs	r2, #2
 8005a44:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005a46:	f00b fbe9 	bl	801121c <HAL_GetTick>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	4b53      	ldr	r3, [pc, #332]	@ (8005b9c <ESP_Upkeep+0x400>)
 8005a4e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005a50:	4b4b      	ldr	r3, [pc, #300]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	001a      	movs	r2, r3
 8005a56:	4b46      	ldr	r3, [pc, #280]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005a58:	5c9a      	ldrb	r2, [r3, r2]
 8005a5a:	4b38      	ldr	r3, [pc, #224]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005a5c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a5e:	4b39      	ldr	r3, [pc, #228]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005a64:	4b43      	ldr	r3, [pc, #268]	@ (8005b74 <ESP_Upkeep+0x3d8>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d027      	beq.n	8005abc <ESP_Upkeep+0x320>
 8005a6c:	4b45      	ldr	r3, [pc, #276]	@ (8005b84 <ESP_Upkeep+0x3e8>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d023      	beq.n	8005abc <ESP_Upkeep+0x320>
 8005a74:	4b45      	ldr	r3, [pc, #276]	@ (8005b8c <ESP_Upkeep+0x3f0>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01f      	beq.n	8005abc <ESP_Upkeep+0x320>
 8005a7c:	4b45      	ldr	r3, [pc, #276]	@ (8005b94 <ESP_Upkeep+0x3f8>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005a84:	4b46      	ldr	r3, [pc, #280]	@ (8005ba0 <ESP_Upkeep+0x404>)
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005a8a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005a8c:	4b29      	ldr	r3, [pc, #164]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005a8e:	2204      	movs	r2, #4
 8005a90:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005a92:	4b3b      	ldr	r3, [pc, #236]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005a98:	4b29      	ldr	r3, [pc, #164]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005a9e:	f00b fbbd 	bl	801121c <HAL_GetTick>
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8005b9c <ESP_Upkeep+0x400>)
 8005aa6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005aa8:	4b35      	ldr	r3, [pc, #212]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	001a      	movs	r2, r3
 8005aae:	4b30      	ldr	r3, [pc, #192]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005ab0:	5c9a      	ldrb	r2, [r3, r2]
 8005ab2:	4b22      	ldr	r3, [pc, #136]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005ab4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005ab6:	4b23      	ldr	r3, [pc, #140]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005abc:	4b39      	ldr	r3, [pc, #228]	@ (8005ba4 <ESP_Upkeep+0x408>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d100      	bne.n	8005ac6 <ESP_Upkeep+0x32a>
 8005ac4:	e2e3      	b.n	800608e <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005ac8:	4a37      	ldr	r2, [pc, #220]	@ (8005ba8 <ESP_Upkeep+0x40c>)
 8005aca:	6811      	ldr	r1, [r2, #0]
 8005acc:	6019      	str	r1, [r3, #0]
 8005ace:	7912      	ldrb	r2, [r2, #4]
 8005ad0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8005ad2:	4a36      	ldr	r2, [pc, #216]	@ (8005bac <ESP_Upkeep+0x410>)
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b4c <ESP_Upkeep+0x3b0>)
 8005ad6:	0019      	movs	r1, r3
 8005ad8:	2003      	movs	r0, #3
 8005ada:	f00a ff53 	bl	8010984 <CreateLine>
        DisableConnectedDevices();
 8005ade:	f005 f895 	bl	800ac0c <DisableConnectedDevices>
        usblog = false;
 8005ae2:	4b33      	ldr	r3, [pc, #204]	@ (8005bb0 <ESP_Upkeep+0x414>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005ae8:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005aea:	2204      	movs	r2, #4
 8005aec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005aee:	4b24      	ldr	r3, [pc, #144]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005af4:	4b12      	ldr	r3, [pc, #72]	@ (8005b40 <ESP_Upkeep+0x3a4>)
 8005af6:	2203      	movs	r2, #3
 8005af8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005afa:	4b21      	ldr	r3, [pc, #132]	@ (8005b80 <ESP_Upkeep+0x3e4>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	001a      	movs	r2, r3
 8005b00:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <ESP_Upkeep+0x3d4>)
 8005b02:	5c9a      	ldrb	r2, [r3, r2]
 8005b04:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005b06:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005b08:	4b0e      	ldr	r3, [pc, #56]	@ (8005b44 <ESP_Upkeep+0x3a8>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005b0e:	e2be      	b.n	800608e <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8005b10:	4b0a      	ldr	r3, [pc, #40]	@ (8005b3c <ESP_Upkeep+0x3a0>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	1dfc      	adds	r4, r7, #7
 8005b16:	0018      	movs	r0, r3
 8005b18:	f7ff fb46 	bl	80051a8 <AT_Send>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005b20:	1dfb      	adds	r3, r7, #7
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d100      	bne.n	8005b2a <ESP_Upkeep+0x38e>
 8005b28:	e2b3      	b.n	8006092 <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005b2a:	4b02      	ldr	r3, [pc, #8]	@ (8005b34 <ESP_Upkeep+0x398>)
 8005b2c:	2203      	movs	r2, #3
 8005b2e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005b30:	e2af      	b.n	8006092 <ESP_Upkeep+0x8f6>
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	2000002c 	.word	0x2000002c
 8005b38:	20000002 	.word	0x20000002
 8005b3c:	20000636 	.word	0x20000636
 8005b40:	20000637 	.word	0x20000637
 8005b44:	20000635 	.word	0x20000635
 8005b48:	080267c4 	.word	0x080267c4
 8005b4c:	08025bb8 	.word	0x08025bb8
 8005b50:	08028e94 	.word	0x08028e94
 8005b54:	20000560 	.word	0x20000560
 8005b58:	50000800 	.word	0x50000800
 8005b5c:	50001c00 	.word	0x50001c00
 8005b60:	2000062c 	.word	0x2000062c
 8005b64:	20000460 	.word	0x20000460
 8005b68:	20000790 	.word	0x20000790
 8005b6c:	2000002f 	.word	0x2000002f
 8005b70:	2000061c 	.word	0x2000061c
 8005b74:	20000561 	.word	0x20000561
 8005b78:	20000562 	.word	0x20000562
 8005b7c:	20000004 	.word	0x20000004
 8005b80:	20000626 	.word	0x20000626
 8005b84:	20000564 	.word	0x20000564
 8005b88:	20000014 	.word	0x20000014
 8005b8c:	20000565 	.word	0x20000565
 8005b90:	20000010 	.word	0x20000010
 8005b94:	20000001 	.word	0x20000001
 8005b98:	2000000c 	.word	0x2000000c
 8005b9c:	20000578 	.word	0x20000578
 8005ba0:	20000024 	.word	0x20000024
 8005ba4:	20000563 	.word	0x20000563
 8005ba8:	2000001c 	.word	0x2000001c
 8005bac:	080267f0 	.word	0x080267f0
 8005bb0:	2000020b 	.word	0x2000020b

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005bb4:	4bc9      	ldr	r3, [pc, #804]	@ (8005edc <ESP_Upkeep+0x740>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <ESP_Upkeep+0x430>
 8005bbc:	4bc8      	ldr	r3, [pc, #800]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d003      	beq.n	8005bcc <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005bc4:	4bc7      	ldr	r3, [pc, #796]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005bc6:	220b      	movs	r2, #11
 8005bc8:	701a      	strb	r2, [r3, #0]
        break;
 8005bca:	e269      	b.n	80060a0 <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005bcc:	4bc6      	ldr	r3, [pc, #792]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f00a fe81 	bl	80108d8 <TimestampIsReached>
 8005bd6:	1e03      	subs	r3, r0, #0
 8005bd8:	d100      	bne.n	8005bdc <ESP_Upkeep+0x440>
 8005bda:	e25c      	b.n	8006096 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005bdc:	4bc3      	ldr	r3, [pc, #780]	@ (8005eec <ESP_Upkeep+0x750>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7ff f99f 	bl	8004f24 <DMA_ProcessBuffer>
 8005be6:	0003      	movs	r3, r0
 8005be8:	001a      	movs	r2, r3
 8005bea:	4bc1      	ldr	r3, [pc, #772]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005bec:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005bee:	4bc0      	ldr	r3, [pc, #768]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005bf0:	781a      	ldrb	r2, [r3, #0]
 8005bf2:	4bbe      	ldr	r3, [pc, #760]	@ (8005eec <ESP_Upkeep+0x750>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	1d7c      	adds	r4, r7, #5
 8005bf8:	0019      	movs	r1, r3
 8005bfa:	0010      	movs	r0, r2
 8005bfc:	f7ff fa92 	bl	8005124 <ATCompare>
 8005c00:	0003      	movs	r3, r0
 8005c02:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005c04:	4bba      	ldr	r3, [pc, #744]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d138      	bne.n	8005c7e <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005c0c:	4bb9      	ldr	r3, [pc, #740]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d108      	bne.n	8005c26 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005c14:	4bb7      	ldr	r3, [pc, #732]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005c16:	220e      	movs	r2, #14
 8005c18:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c1a:	4bb4      	ldr	r3, [pc, #720]	@ (8005eec <ESP_Upkeep+0x750>)
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005c20:	4bb5      	ldr	r3, [pc, #724]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005c26:	4baf      	ldr	r3, [pc, #700]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005c28:	2204      	movs	r2, #4
 8005c2a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005c2c:	4bb3      	ldr	r3, [pc, #716]	@ (8005efc <ESP_Upkeep+0x760>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	3301      	adds	r3, #1
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	4bb1      	ldr	r3, [pc, #708]	@ (8005efc <ESP_Upkeep+0x760>)
 8005c36:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005c38:	4bb0      	ldr	r3, [pc, #704]	@ (8005efc <ESP_Upkeep+0x760>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d91e      	bls.n	8005c7e <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005c40:	f00b faec 	bl	801121c <HAL_GetTick>
 8005c44:	0003      	movs	r3, r0
 8005c46:	4aae      	ldr	r2, [pc, #696]	@ (8005f00 <ESP_Upkeep+0x764>)
 8005c48:	189a      	adds	r2, r3, r2
 8005c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005c4c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005c4e:	4bad      	ldr	r3, [pc, #692]	@ (8005f04 <ESP_Upkeep+0x768>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005c54:	f7ff fa58 	bl	8005108 <clearDMABuffer>
            stop = HAL_GetTick();
 8005c58:	f00b fae0 	bl	801121c <HAL_GetTick>
 8005c5c:	0002      	movs	r2, r0
 8005c5e:	4baa      	ldr	r3, [pc, #680]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005c60:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005c62:	4ba9      	ldr	r3, [pc, #676]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4ba9      	ldr	r3, [pc, #676]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	4aa8      	ldr	r2, [pc, #672]	@ (8005f10 <ESP_Upkeep+0x774>)
 8005c6e:	49a9      	ldr	r1, [pc, #676]	@ (8005f14 <ESP_Upkeep+0x778>)
 8005c70:	2001      	movs	r0, #1
 8005c72:	f00a fe87 	bl	8010984 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005c76:	4b9b      	ldr	r3, [pc, #620]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005c78:	220d      	movs	r2, #13
 8005c7a:	701a      	strb	r2, [r3, #0]
            break;
 8005c7c:	e210      	b.n	80060a0 <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d106      	bne.n	8005c94 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005c86:	f00b fac9 	bl	801121c <HAL_GetTick>
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	330a      	adds	r3, #10
 8005c8e:	001a      	movs	r2, r3
 8005c90:	4b95      	ldr	r3, [pc, #596]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005c92:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005c94:	4b96      	ldr	r3, [pc, #600]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b0a      	cmp	r3, #10
 8005c9a:	d106      	bne.n	8005caa <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005c9c:	f00b fabe 	bl	801121c <HAL_GetTick>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	330a      	adds	r3, #10
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	4b90      	ldr	r3, [pc, #576]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005ca8:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005caa:	4b91      	ldr	r3, [pc, #580]	@ (8005ef0 <ESP_Upkeep+0x754>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d14b      	bne.n	8005d4a <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005cb2:	4b99      	ldr	r3, [pc, #612]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4b97      	ldr	r3, [pc, #604]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005cbc:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005cbe:	4a97      	ldr	r2, [pc, #604]	@ (8005f1c <ESP_Upkeep+0x780>)
 8005cc0:	4b94      	ldr	r3, [pc, #592]	@ (8005f14 <ESP_Upkeep+0x778>)
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	f00a fe5d 	bl	8010984 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005cca:	4b93      	ldr	r3, [pc, #588]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d924      	bls.n	8005d1c <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005cd2:	f00b faa3 	bl	801121c <HAL_GetTick>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	4a91      	ldr	r2, [pc, #580]	@ (8005f20 <ESP_Upkeep+0x784>)
 8005cda:	189a      	adds	r2, r3, r2
 8005cdc:	4b82      	ldr	r3, [pc, #520]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005cde:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005ce0:	4b88      	ldr	r3, [pc, #544]	@ (8005f04 <ESP_Upkeep+0x768>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005ce6:	f7ff fa0f 	bl	8005108 <clearDMABuffer>
            stop = HAL_GetTick();
 8005cea:	f00b fa97 	bl	801121c <HAL_GetTick>
 8005cee:	0002      	movs	r2, r0
 8005cf0:	4b85      	ldr	r3, [pc, #532]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005cf2:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005cf4:	4b84      	ldr	r3, [pc, #528]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b84      	ldr	r3, [pc, #528]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	4a89      	ldr	r2, [pc, #548]	@ (8005f24 <ESP_Upkeep+0x788>)
 8005d00:	4984      	ldr	r1, [pc, #528]	@ (8005f14 <ESP_Upkeep+0x778>)
 8005d02:	2001      	movs	r0, #1
 8005d04:	f00a fe3e 	bl	8010984 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d08:	4b76      	ldr	r3, [pc, #472]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d0a:	220d      	movs	r2, #13
 8005d0c:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005d0e:	4b79      	ldr	r3, [pc, #484]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d10:	2214      	movs	r2, #20
 8005d12:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005d14:	4b75      	ldr	r3, [pc, #468]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
            break;
 8005d1a:	e1c1      	b.n	80060a0 <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005d1c:	4b75      	ldr	r3, [pc, #468]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	d003      	beq.n	8005d2c <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005d24:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d26:	2204      	movs	r2, #4
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e00e      	b.n	8005d4a <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005d2c:	4b71      	ldr	r3, [pc, #452]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d2e:	220e      	movs	r2, #14
 8005d30:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005d32:	4b71      	ldr	r3, [pc, #452]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d3c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d40:	2202      	movs	r2, #2
 8005d42:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005d44:	4b67      	ldr	r3, [pc, #412]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d46:	2204      	movs	r2, #4
 8005d48:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005d4a:	1d7b      	adds	r3, r7, #5
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d100      	bne.n	8005d54 <ESP_Upkeep+0x5b8>
 8005d52:	e1a0      	b.n	8006096 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005d54:	4b63      	ldr	r3, [pc, #396]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005d56:	2205      	movs	r2, #5
 8005d58:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005d5a:	e19c      	b.n	8006096 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005d5c:	4b66      	ldr	r3, [pc, #408]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b64      	ldr	r3, [pc, #400]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d66:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005d68:	4b63      	ldr	r3, [pc, #396]	@ (8005ef8 <ESP_Upkeep+0x75c>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f28 <ESP_Upkeep+0x78c>)
 8005d70:	5c9a      	ldrb	r2, [r3, r2]
 8005d72:	4b60      	ldr	r3, [pc, #384]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d74:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005d76:	4b5f      	ldr	r3, [pc, #380]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d102      	bne.n	8005d84 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005d84:	4b5b      	ldr	r3, [pc, #364]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b0e      	cmp	r3, #14
 8005d8a:	d102      	bne.n	8005d92 <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005d8c:	4b57      	ldr	r3, [pc, #348]	@ (8005eec <ESP_Upkeep+0x750>)
 8005d8e:	2202      	movs	r2, #2
 8005d90:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005d92:	4b58      	ldr	r3, [pc, #352]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b0e      	cmp	r3, #14
 8005d98:	d006      	beq.n	8005da8 <ESP_Upkeep+0x60c>
 8005d9a:	4b56      	ldr	r3, [pc, #344]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d002      	beq.n	8005da8 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005da2:	4b52      	ldr	r3, [pc, #328]	@ (8005eec <ESP_Upkeep+0x750>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005da8:	4b52      	ldr	r3, [pc, #328]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b11      	cmp	r3, #17
 8005dae:	d102      	bne.n	8005db6 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005db0:	4b4e      	ldr	r3, [pc, #312]	@ (8005eec <ESP_Upkeep+0x750>)
 8005db2:	2205      	movs	r2, #5
 8005db4:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005db6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005db8:	2204      	movs	r2, #4
 8005dba:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef4 <ESP_Upkeep+0x758>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b14      	cmp	r3, #20
 8005dc2:	d000      	beq.n	8005dc6 <ESP_Upkeep+0x62a>
 8005dc4:	e169      	b.n	800609a <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005dc6:	4b46      	ldr	r3, [pc, #280]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d124      	bne.n	8005e18 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005dce:	f00b fa25 	bl	801121c <HAL_GetTick>
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005f00 <ESP_Upkeep+0x764>)
 8005dd6:	189a      	adds	r2, r3, r2
 8005dd8:	4b43      	ldr	r3, [pc, #268]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005dda:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005ddc:	f7ff f994 	bl	8005108 <clearDMABuffer>
          stop = HAL_GetTick();
 8005de0:	f00b fa1c 	bl	801121c <HAL_GetTick>
 8005de4:	0002      	movs	r2, r0
 8005de6:	4b48      	ldr	r3, [pc, #288]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005de8:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005dea:	4b47      	ldr	r3, [pc, #284]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b47      	ldr	r3, [pc, #284]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	4a4d      	ldr	r2, [pc, #308]	@ (8005f2c <ESP_Upkeep+0x790>)
 8005df6:	494e      	ldr	r1, [pc, #312]	@ (8005f30 <ESP_Upkeep+0x794>)
 8005df8:	2002      	movs	r0, #2
 8005dfa:	f00a fdc3 	bl	8010984 <CreateLine>
          ResetdBAmax();
 8005dfe:	f004 ff7b 	bl	800acf8 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005e02:	f7fd fd9f 	bl	8003944 <resetMaxMeasurementValues>
          showTime();
 8005e06:	f001 f937 	bl	8007078 <showTime>
          ESPTransmitDone = true;
 8005e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f04 <ESP_Upkeep+0x768>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005e10:	4b34      	ldr	r3, [pc, #208]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005e12:	220d      	movs	r2, #13
 8005e14:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005e16:	e140      	b.n	800609a <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005e18:	4b31      	ldr	r3, [pc, #196]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d12c      	bne.n	8005e7a <ESP_Upkeep+0x6de>
            setTime = false;
 8005e20:	4b44      	ldr	r3, [pc, #272]	@ (8005f34 <ESP_Upkeep+0x798>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005e26:	f00b f9f9 	bl	801121c <HAL_GetTick>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	4a42      	ldr	r2, [pc, #264]	@ (8005f38 <ESP_Upkeep+0x79c>)
 8005e2e:	189a      	adds	r2, r3, r2
 8005e30:	4b42      	ldr	r3, [pc, #264]	@ (8005f3c <ESP_Upkeep+0x7a0>)
 8005e32:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005e34:	4b41      	ldr	r3, [pc, #260]	@ (8005f3c <ESP_Upkeep+0x7a0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a41      	ldr	r2, [pc, #260]	@ (8005f40 <ESP_Upkeep+0x7a4>)
 8005e3a:	493d      	ldr	r1, [pc, #244]	@ (8005f30 <ESP_Upkeep+0x794>)
 8005e3c:	2002      	movs	r0, #2
 8005e3e:	f00a fda1 	bl	8010984 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005e42:	4b40      	ldr	r3, [pc, #256]	@ (8005f44 <ESP_Upkeep+0x7a8>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b28      	ldr	r3, [pc, #160]	@ (8005ee8 <ESP_Upkeep+0x74c>)
 8005e48:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005e4a:	f7ff f95d 	bl	8005108 <clearDMABuffer>
            stop = HAL_GetTick();
 8005e4e:	f00b f9e5 	bl	801121c <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	4b2c      	ldr	r3, [pc, #176]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005e56:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005e58:	4b2b      	ldr	r3, [pc, #172]	@ (8005f08 <ESP_Upkeep+0x76c>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005f0c <ESP_Upkeep+0x770>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4a39      	ldr	r2, [pc, #228]	@ (8005f48 <ESP_Upkeep+0x7ac>)
 8005e64:	4932      	ldr	r1, [pc, #200]	@ (8005f30 <ESP_Upkeep+0x794>)
 8005e66:	2002      	movs	r0, #2
 8005e68:	f00a fd8c 	bl	8010984 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005e6e:	220d      	movs	r2, #13
 8005e70:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <ESP_Upkeep+0x744>)
 8005e74:	2202      	movs	r2, #2
 8005e76:	701a      	strb	r2, [r3, #0]
    break;
 8005e78:	e10f      	b.n	800609a <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005e7c:	2209      	movs	r2, #9
 8005e7e:	701a      	strb	r2, [r3, #0]
    break;
 8005e80:	e10b      	b.n	800609a <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005e82:	4b32      	ldr	r3, [pc, #200]	@ (8005f4c <ESP_Upkeep+0x7b0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <ESP_Upkeep+0x7b4>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f00c fc55 	bl	801273e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005e94:	2001      	movs	r0, #1
 8005e96:	f00b f9cb 	bl	8011230 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005e9a:	2380      	movs	r3, #128	@ 0x80
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	482d      	ldr	r0, [pc, #180]	@ (8005f54 <ESP_Upkeep+0x7b8>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	f00c fc4b 	bl	801273e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f00b f9c1 	bl	8011230 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005eae:	4b28      	ldr	r3, [pc, #160]	@ (8005f50 <ESP_Upkeep+0x7b4>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f00c fc42 	bl	801273e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005eba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <ESP_Upkeep+0x748>)
 8005ebc:	2209      	movs	r2, #9
 8005ebe:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005ec0:	f004 fe6c 	bl	800ab9c <EnabledConnectedDevices>
      HAL_Delay(1);
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f00b f9b3 	bl	8011230 <HAL_Delay>
      ResetESPIndicator();
 8005eca:	f009 fc55 	bl	800f778 <ResetESPIndicator>
      errorcntr = 0;
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <ESP_Upkeep+0x760>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005ed4:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <ESP_Upkeep+0x77c>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
      break;
 8005eda:	e0e1      	b.n	80060a0 <ESP_Upkeep+0x904>
 8005edc:	20000563 	.word	0x20000563
 8005ee0:	20000637 	.word	0x20000637
 8005ee4:	2000002c 	.word	0x2000002c
 8005ee8:	2000062c 	.word	0x2000062c
 8005eec:	20000635 	.word	0x20000635
 8005ef0:	2000002f 	.word	0x2000002f
 8005ef4:	20000636 	.word	0x20000636
 8005ef8:	20000626 	.word	0x20000626
 8005efc:	20000627 	.word	0x20000627
 8005f00:	0003a980 	.word	0x0003a980
 8005f04:	20000568 	.word	0x20000568
 8005f08:	2000057c 	.word	0x2000057c
 8005f0c:	20000578 	.word	0x20000578
 8005f10:	08026820 	.word	0x08026820
 8005f14:	08025bdc 	.word	0x08025bdc
 8005f18:	20000628 	.word	0x20000628
 8005f1c:	08026854 	.word	0x08026854
 8005f20:	0000c350 	.word	0x0000c350
 8005f24:	08026890 	.word	0x08026890
 8005f28:	2000061c 	.word	0x2000061c
 8005f2c:	080268c0 	.word	0x080268c0
 8005f30:	080268d8 	.word	0x080268d8
 8005f34:	20000001 	.word	0x20000001
 8005f38:	047e7c4f 	.word	0x047e7c4f
 8005f3c:	20000630 	.word	0x20000630
 8005f40:	080268dc 	.word	0x080268dc
 8005f44:	20000028 	.word	0x20000028
 8005f48:	08026920 	.word	0x08026920
 8005f4c:	20000560 	.word	0x20000560
 8005f50:	50001c00 	.word	0x50001c00
 8005f54:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005f58:	4b54      	ldr	r3, [pc, #336]	@ (80060ac <ESP_Upkeep+0x910>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f00a fcbb 	bl	80108d8 <TimestampIsReached>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d103      	bne.n	8005f6e <ESP_Upkeep+0x7d2>
 8005f66:	4b52      	ldr	r3, [pc, #328]	@ (80060b0 <ESP_Upkeep+0x914>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d043      	beq.n	8005ff6 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005f6e:	4b51      	ldr	r3, [pc, #324]	@ (80060b4 <ESP_Upkeep+0x918>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005f74:	4b50      	ldr	r3, [pc, #320]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80060bc <ESP_Upkeep+0x920>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005f82:	4b4f      	ldr	r3, [pc, #316]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005f84:	220b      	movs	r2, #11
 8005f86:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005f88:	4b4b      	ldr	r3, [pc, #300]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d108      	bne.n	8005fa2 <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005f90:	4b4c      	ldr	r3, [pc, #304]	@ (80060c4 <ESP_Upkeep+0x928>)
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005f96:	4b4c      	ldr	r3, [pc, #304]	@ (80060c8 <ESP_Upkeep+0x92c>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005f9c:	4b48      	ldr	r3, [pc, #288]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005f9e:	220b      	movs	r2, #11
 8005fa0:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005fa2:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d102      	bne.n	8005fb0 <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005faa:	4b45      	ldr	r3, [pc, #276]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005fac:	2202      	movs	r2, #2
 8005fae:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005fb0:	4b41      	ldr	r3, [pc, #260]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d108      	bne.n	8005fca <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005fb8:	4b41      	ldr	r3, [pc, #260]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005fba:	220e      	movs	r2, #14
 8005fbc:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005fbe:	4a43      	ldr	r2, [pc, #268]	@ (80060cc <ESP_Upkeep+0x930>)
 8005fc0:	4b43      	ldr	r3, [pc, #268]	@ (80060d0 <ESP_Upkeep+0x934>)
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f00a fcdd 	bl	8010984 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005fca:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d105      	bne.n	8005fde <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005fd4:	220b      	movs	r2, #11
 8005fd6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80060d4 <ESP_Upkeep+0x938>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005fde:	4b34      	ldr	r3, [pc, #208]	@ (80060b0 <ESP_Upkeep+0x914>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d020      	beq.n	8006028 <ESP_Upkeep+0x88c>
 8005fe6:	4b34      	ldr	r3, [pc, #208]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d01c      	beq.n	8006028 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005fee:	4b34      	ldr	r3, [pc, #208]	@ (80060c0 <ESP_Upkeep+0x924>)
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ff4:	e018      	b.n	8006028 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ff6:	4b38      	ldr	r3, [pc, #224]	@ (80060d8 <ESP_Upkeep+0x93c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f00a fc6c 	bl	80108d8 <TimestampIsReached>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d04c      	beq.n	800609e <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8006004:	4b2c      	ldr	r3, [pc, #176]	@ (80060b8 <ESP_Upkeep+0x91c>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d148      	bne.n	800609e <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 800600c:	4b2a      	ldr	r3, [pc, #168]	@ (80060b8 <ESP_Upkeep+0x91c>)
 800600e:	2205      	movs	r2, #5
 8006010:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8006012:	4b2b      	ldr	r3, [pc, #172]	@ (80060c0 <ESP_Upkeep+0x924>)
 8006014:	2202      	movs	r2, #2
 8006016:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8006018:	4b24      	ldr	r3, [pc, #144]	@ (80060ac <ESP_Upkeep+0x910>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b2f      	ldr	r3, [pc, #188]	@ (80060dc <ESP_Upkeep+0x940>)
 800601e:	601a      	str	r2, [r3, #0]
           setTime = true;
 8006020:	4b2f      	ldr	r3, [pc, #188]	@ (80060e0 <ESP_Upkeep+0x944>)
 8006022:	2201      	movs	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006026:	e03a      	b.n	800609e <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006028:	46c0      	nop			@ (mov r8, r8)
      break;
 800602a:	e038      	b.n	800609e <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 800602c:	4b2d      	ldr	r3, [pc, #180]	@ (80060e4 <ESP_Upkeep+0x948>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2201      	movs	r2, #1
 8006032:	4053      	eors	r3, r2
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 800603a:	4a24      	ldr	r2, [pc, #144]	@ (80060cc <ESP_Upkeep+0x930>)
 800603c:	4b24      	ldr	r3, [pc, #144]	@ (80060d0 <ESP_Upkeep+0x934>)
 800603e:	0019      	movs	r1, r3
 8006040:	2002      	movs	r0, #2
 8006042:	f00a fc9f 	bl	8010984 <CreateLine>
        msgdone = true;
 8006046:	4b27      	ldr	r3, [pc, #156]	@ (80060e4 <ESP_Upkeep+0x948>)
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 800604c:	f019 fbbe 	bl	801f7cc <GetUsbRxPointer>
 8006050:	0003      	movs	r3, r0
 8006052:	0018      	movs	r0, r3
 8006054:	f000 f94a 	bl	80062ec <Process_PC_Config>
      break;
 8006058:	e022      	b.n	80060a0 <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 800605a:	4a23      	ldr	r2, [pc, #140]	@ (80060e8 <ESP_Upkeep+0x94c>)
 800605c:	4b23      	ldr	r3, [pc, #140]	@ (80060ec <ESP_Upkeep+0x950>)
 800605e:	0019      	movs	r1, r3
 8006060:	2001      	movs	r0, #1
 8006062:	f00a fc8f 	bl	8010984 <CreateLine>
      EspState = ESP_STATE_INIT;
 8006066:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <ESP_Upkeep+0x924>)
 8006068:	2202      	movs	r2, #2
 800606a:	701a      	strb	r2, [r3, #0]
      break;
 800606c:	e018      	b.n	80060a0 <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 800606e:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <ESP_Upkeep+0x954>)
 8006070:	4b1e      	ldr	r3, [pc, #120]	@ (80060ec <ESP_Upkeep+0x950>)
 8006072:	0019      	movs	r1, r3
 8006074:	2001      	movs	r0, #1
 8006076:	f00a fc85 	bl	8010984 <CreateLine>
      EspState = ESP_STATE_ERROR;
 800607a:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <ESP_Upkeep+0x924>)
 800607c:	2207      	movs	r2, #7
 800607e:	701a      	strb	r2, [r3, #0]
      break;
 8006080:	e00e      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	e00c      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	e00a      	b.n	80060a0 <ESP_Upkeep+0x904>
        break;
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	e008      	b.n	80060a0 <ESP_Upkeep+0x904>
    break;
 800608e:	46c0      	nop			@ (mov r8, r8)
 8006090:	e006      	b.n	80060a0 <ESP_Upkeep+0x904>
    break;
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	e004      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	e002      	b.n	80060a0 <ESP_Upkeep+0x904>
    break;
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	e000      	b.n	80060a0 <ESP_Upkeep+0x904>
      break;
 800609e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <ESP_Upkeep+0x924>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
}
 80060a4:	0018      	movs	r0, r3
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bdb0      	pop	{r4, r5, r7, pc}
 80060ac:	2000062c 	.word	0x2000062c
 80060b0:	20000563 	.word	0x20000563
 80060b4:	20000568 	.word	0x20000568
 80060b8:	20000637 	.word	0x20000637
 80060bc:	20000561 	.word	0x20000561
 80060c0:	2000002c 	.word	0x2000002c
 80060c4:	20000564 	.word	0x20000564
 80060c8:	20000566 	.word	0x20000566
 80060cc:	08026940 	.word	0x08026940
 80060d0:	080268d8 	.word	0x080268d8
 80060d4:	20000565 	.word	0x20000565
 80060d8:	20000630 	.word	0x20000630
 80060dc:	20000028 	.word	0x20000028
 80060e0:	20000001 	.word	0x20000001
 80060e4:	20000567 	.word	0x20000567
 80060e8:	08026958 	.word	0x08026958
 80060ec:	08025bdc 	.word	0x08025bdc
 80060f0:	0802696c 	.word	0x0802696c

080060f4 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80060fc:	4b0f      	ldr	r3, [pc, #60]	@ (800613c <I2CSensors_Init+0x48>)
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8006102:	4a0f      	ldr	r2, [pc, #60]	@ (8006140 <I2CSensors_Init+0x4c>)
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <I2CSensors_Init+0x50>)
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f00a fd9f 	bl	8010c4c <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 800610e:	4a0c      	ldr	r2, [pc, #48]	@ (8006140 <I2CSensors_Init+0x4c>)
 8006110:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <I2CSensors_Init+0x50>)
 8006112:	0011      	movs	r1, r2
 8006114:	0018      	movs	r0, r3
 8006116:	f007 fd07 	bl	800db28 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C);
 800611a:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <I2CSensors_Init+0x4c>)
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <I2CSensors_Init+0x50>)
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f001 ff01 	bl	8007f28 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006126:	4a08      	ldr	r2, [pc, #32]	@ (8006148 <I2CSensors_Init+0x54>)
 8006128:	4b08      	ldr	r3, [pc, #32]	@ (800614c <I2CSensors_Init+0x58>)
 800612a:	0011      	movs	r1, r2
 800612c:	0018      	movs	r0, r3
 800612e:	f002 fd19 	bl	8008b64 <BMP_Init>
}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	46bd      	mov	sp, r7
 8006136:	b002      	add	sp, #8
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	20000794 	.word	0x20000794
 8006140:	080061a5 	.word	0x080061a5
 8006144:	08006151 	.word	0x08006151
 8006148:	08006275 	.word	0x08006275
 800614c:	080061f9 	.word	0x080061f9

08006150 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006150:	b5b0      	push	{r4, r5, r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6039      	str	r1, [r7, #0]
 8006158:	0011      	movs	r1, r2
 800615a:	1dfb      	adds	r3, r7, #7
 800615c:	1c02      	adds	r2, r0, #0
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	1dbb      	adds	r3, r7, #6
 8006162:	1c0a      	adds	r2, r1, #0
 8006164:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006166:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <ReadI2C+0x50>)
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	1dfb      	adds	r3, r7, #7
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	18db      	adds	r3, r3, r3
 8006172:	b299      	uxth	r1, r3
 8006174:	1dbb      	adds	r3, r7, #6
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	250f      	movs	r5, #15
 800617c:	197c      	adds	r4, r7, r5
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	f00c fec2 	bl	8012f08 <HAL_I2C_Master_Receive_DMA>
 8006184:	0003      	movs	r3, r0
 8006186:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006188:	197b      	adds	r3, r7, r5
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <ReadI2C+0x44>
        return false;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <ReadI2C+0x46>
    }
    return true;
 8006194:	2301      	movs	r3, #1
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b004      	add	sp, #16
 800619c:	bdb0      	pop	{r4, r5, r7, pc}
 800619e:	46c0      	nop			@ (mov r8, r8)
 80061a0:	20000794 	.word	0x20000794

080061a4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6039      	str	r1, [r7, #0]
 80061ac:	0011      	movs	r1, r2
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	1c02      	adds	r2, r0, #0
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	1dbb      	adds	r3, r7, #6
 80061b6:	1c0a      	adds	r2, r1, #0
 80061b8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80061ba:	4b0e      	ldr	r3, [pc, #56]	@ (80061f4 <WriteI2C+0x50>)
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	18db      	adds	r3, r3, r3
 80061c6:	b299      	uxth	r1, r3
 80061c8:	1dbb      	adds	r3, r7, #6
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	250f      	movs	r5, #15
 80061d0:	197c      	adds	r4, r7, r5
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	f00c fd92 	bl	8012cfc <HAL_I2C_Master_Transmit_DMA>
 80061d8:	0003      	movs	r3, r0
 80061da:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80061dc:	197b      	adds	r3, r7, r5
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <WriteI2C+0x44>
        return false;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e000      	b.n	80061ea <WriteI2C+0x46>
    }
    return true;
 80061e8:	2301      	movs	r3, #1
}
 80061ea:	0018      	movs	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bdb0      	pop	{r4, r5, r7, pc}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	20000794 	.word	0x20000794

080061f8 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80061f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fa:	b08b      	sub	sp, #44	@ 0x2c
 80061fc:	af04      	add	r7, sp, #16
 80061fe:	0004      	movs	r4, r0
 8006200:	0008      	movs	r0, r1
 8006202:	0011      	movs	r1, r2
 8006204:	607b      	str	r3, [r7, #4]
 8006206:	250f      	movs	r5, #15
 8006208:	197b      	adds	r3, r7, r5
 800620a:	1c22      	adds	r2, r4, #0
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	260c      	movs	r6, #12
 8006210:	19bb      	adds	r3, r7, r6
 8006212:	1c02      	adds	r2, r0, #0
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	230a      	movs	r3, #10
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	1c0a      	adds	r2, r1, #0
 800621c:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 800621e:	4b14      	ldr	r3, [pc, #80]	@ (8006270 <ReadI2CMem+0x78>)
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	197b      	adds	r3, r7, r5
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	18db      	adds	r3, r3, r3
 800622a:	b299      	uxth	r1, r3
 800622c:	2217      	movs	r2, #23
 800622e:	18bc      	adds	r4, r7, r2
 8006230:	230a      	movs	r3, #10
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	881d      	ldrh	r5, [r3, #0]
 8006236:	19bb      	adds	r3, r7, r6
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	2364      	movs	r3, #100	@ 0x64
 800623c:	9302      	str	r3, [sp, #8]
 800623e:	2328      	movs	r3, #40	@ 0x28
 8006240:	2608      	movs	r6, #8
 8006242:	199b      	adds	r3, r3, r6
 8006244:	19db      	adds	r3, r3, r7
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	002b      	movs	r3, r5
 8006250:	f00c ff60 	bl	8013114 <HAL_I2C_Mem_Read>
 8006254:	0003      	movs	r3, r0
 8006256:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8006258:	2217      	movs	r2, #23
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <ReadI2CMem+0x6e>
     return false;
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <ReadI2CMem+0x70>
   }
   return true;
 8006266:	2301      	movs	r3, #1
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b007      	add	sp, #28
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	20000794 	.word	0x20000794

08006274 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8006274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006276:	b089      	sub	sp, #36	@ 0x24
 8006278:	af02      	add	r7, sp, #8
 800627a:	0004      	movs	r4, r0
 800627c:	0008      	movs	r0, r1
 800627e:	0011      	movs	r1, r2
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	250f      	movs	r5, #15
 8006284:	197b      	adds	r3, r7, r5
 8006286:	1c22      	adds	r2, r4, #0
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	260c      	movs	r6, #12
 800628c:	19bb      	adds	r3, r7, r6
 800628e:	1c02      	adds	r2, r0, #0
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	230a      	movs	r3, #10
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	1c0a      	adds	r2, r1, #0
 8006298:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <WriteI2CMem+0x74>)
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	197b      	adds	r3, r7, r5
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	18db      	adds	r3, r3, r3
 80062a6:	b299      	uxth	r1, r3
 80062a8:	2217      	movs	r2, #23
 80062aa:	18bc      	adds	r4, r7, r2
 80062ac:	230a      	movs	r3, #10
 80062ae:	18fb      	adds	r3, r7, r3
 80062b0:	881d      	ldrh	r5, [r3, #0]
 80062b2:	19bb      	adds	r3, r7, r6
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	2328      	movs	r3, #40	@ 0x28
 80062b8:	2608      	movs	r6, #8
 80062ba:	199b      	adds	r3, r3, r6
 80062bc:	19db      	adds	r3, r3, r7
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	002b      	movs	r3, r5
 80062c8:	f00d f858 	bl	801337c <HAL_I2C_Mem_Write_DMA>
 80062cc:	0003      	movs	r3, r0
 80062ce:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80062d0:	2217      	movs	r2, #23
 80062d2:	18bb      	adds	r3, r7, r2
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <WriteI2CMem+0x6a>
     return false;
 80062da:	2300      	movs	r3, #0
 80062dc:	e000      	b.n	80062e0 <WriteI2CMem+0x6c>
   }
   return true;
 80062de:	2301      	movs	r3, #1
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b007      	add	sp, #28
 80062e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e8:	20000794 	.word	0x20000794

080062ec <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b0c3      	sub	sp, #268	@ 0x10c
 80062f0:	af3e      	add	r7, sp, #248	@ 0xf8
 80062f2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80062f4:	f019 fa8a 	bl	801f80c <GetUsbRxDataSize>
 80062f8:	0003      	movs	r3, r0
 80062fa:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d971      	bls.n	80063e6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2123      	movs	r1, #35	@ 0x23
 8006306:	0018      	movs	r0, r3
 8006308:	f01c fca2 	bl	8022c50 <strchr>
 800630c:	0003      	movs	r3, r0
 800630e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d065      	beq.n	80063e2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	785a      	ldrb	r2, [r3, #1]
 800631a:	4b34      	ldr	r3, [pc, #208]	@ (80063ec <Process_PC_Config+0x100>)
 800631c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	789a      	ldrb	r2, [r3, #2]
 8006322:	4b32      	ldr	r3, [pc, #200]	@ (80063ec <Process_PC_Config+0x100>)
 8006324:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8006326:	4b31      	ldr	r3, [pc, #196]	@ (80063ec <Process_PC_Config+0x100>)
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	3305      	adds	r3, #5
 800632c:	001a      	movs	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4293      	cmp	r3, r2
 8006332:	d351      	bcc.n	80063d8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1cd9      	adds	r1, r3, #3
 8006338:	4b2c      	ldr	r3, [pc, #176]	@ (80063ec <Process_PC_Config+0x100>)
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	001a      	movs	r2, r3
 800633e:	4b2c      	ldr	r3, [pc, #176]	@ (80063f0 <Process_PC_Config+0x104>)
 8006340:	0018      	movs	r0, r3
 8006342:	f01c fd59 	bl	8022df8 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8006346:	4b29      	ldr	r3, [pc, #164]	@ (80063ec <Process_PC_Config+0x100>)
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	3303      	adds	r3, #3
 800634c:	001a      	movs	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	189b      	adds	r3, r3, r2
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	b21a      	sxth	r2, r3
 8006358:	4b24      	ldr	r3, [pc, #144]	@ (80063ec <Process_PC_Config+0x100>)
 800635a:	785b      	ldrb	r3, [r3, #1]
 800635c:	3304      	adds	r3, #4
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	18cb      	adds	r3, r1, r3
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	b21b      	sxth	r3, r3
 8006366:	4313      	orrs	r3, r2
 8006368:	b21b      	sxth	r3, r3
 800636a:	b299      	uxth	r1, r3
 800636c:	4a1f      	ldr	r2, [pc, #124]	@ (80063ec <Process_PC_Config+0x100>)
 800636e:	2381      	movs	r3, #129	@ 0x81
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006374:	4a1d      	ldr	r2, [pc, #116]	@ (80063ec <Process_PC_Config+0x100>)
 8006376:	2381      	movs	r3, #129	@ 0x81
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	5ad4      	ldrh	r4, [r2, r3]
 800637c:	4b1b      	ldr	r3, [pc, #108]	@ (80063ec <Process_PC_Config+0x100>)
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	3303      	adds	r3, #3
 8006382:	b29a      	uxth	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	0011      	movs	r1, r2
 8006388:	0018      	movs	r0, r3
 800638a:	f000 f975 	bl	8006678 <CRC16_ARC>
 800638e:	0003      	movs	r3, r0
 8006390:	429c      	cmp	r4, r3
 8006392:	d007      	beq.n	80063a4 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8006394:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <Process_PC_Config+0x100>)
 8006396:	785a      	ldrb	r2, [r3, #1]
 8006398:	4b15      	ldr	r3, [pc, #84]	@ (80063f0 <Process_PC_Config+0x104>)
 800639a:	0019      	movs	r1, r3
 800639c:	2001      	movs	r0, #1
 800639e:	f000 f919 	bl	80065d4 <Create_Message>
 80063a2:	e016      	b.n	80063d2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80063a4:	4c11      	ldr	r4, [pc, #68]	@ (80063ec <Process_PC_Config+0x100>)
 80063a6:	466b      	mov	r3, sp
 80063a8:	0018      	movs	r0, r3
 80063aa:	0023      	movs	r3, r4
 80063ac:	3310      	adds	r3, #16
 80063ae:	22f4      	movs	r2, #244	@ 0xf4
 80063b0:	0019      	movs	r1, r3
 80063b2:	f01c fd21 	bl	8022df8 <memcpy>
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	6861      	ldr	r1, [r4, #4]
 80063ba:	68a2      	ldr	r2, [r4, #8]
 80063bc:	68e3      	ldr	r3, [r4, #12]
 80063be:	f000 f819 	bl	80063f4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <Process_PC_Config+0x100>)
 80063c4:	7818      	ldrb	r0, [r3, #0]
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <Process_PC_Config+0x100>)
 80063c8:	785a      	ldrb	r2, [r3, #1]
 80063ca:	4b09      	ldr	r3, [pc, #36]	@ (80063f0 <Process_PC_Config+0x104>)
 80063cc:	0019      	movs	r1, r3
 80063ce:	f000 f901 	bl	80065d4 <Create_Message>
                }
                ResetUsbRxDataSize();
 80063d2:	f019 fa03 	bl	801f7dc <ResetUsbRxDataSize>
                return;
 80063d6:	e006      	b.n	80063e6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	0018      	movs	r0, r3
 80063dc:	f019 fa20 	bl	801f820 <GetUsbRxNextChunk>
 80063e0:	e001      	b.n	80063e6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80063e2:	f019 f9fb 	bl	801f7dc <ResetUsbRxDataSize>
        }
    }
}
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b005      	add	sp, #20
 80063ea:	bd90      	pop	{r4, r7, pc}
 80063ec:	20000798 	.word	0x20000798
 80063f0:	2000079a 	.word	0x2000079a

080063f4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80063f4:	b084      	sub	sp, #16
 80063f6:	b5b0      	push	{r4, r5, r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	2518      	movs	r5, #24
 80063fe:	197c      	adds	r4, r7, r5
 8006400:	6020      	str	r0, [r4, #0]
 8006402:	6061      	str	r1, [r4, #4]
 8006404:	60a2      	str	r2, [r4, #8]
 8006406:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8006408:	197b      	adds	r3, r7, r5
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2bfe      	cmp	r3, #254	@ 0xfe
 800640e:	d100      	bne.n	8006412 <ProcessCmd+0x1e>
 8006410:	e09c      	b.n	800654c <ProcessCmd+0x158>
 8006412:	dd00      	ble.n	8006416 <ProcessCmd+0x22>
 8006414:	e0bc      	b.n	8006590 <ProcessCmd+0x19c>
 8006416:	2b0c      	cmp	r3, #12
 8006418:	dc0a      	bgt.n	8006430 <ProcessCmd+0x3c>
 800641a:	2b00      	cmp	r3, #0
 800641c:	da00      	bge.n	8006420 <ProcessCmd+0x2c>
 800641e:	e0b7      	b.n	8006590 <ProcessCmd+0x19c>
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d900      	bls.n	8006426 <ProcessCmd+0x32>
 8006424:	e0b4      	b.n	8006590 <ProcessCmd+0x19c>
 8006426:	009a      	lsls	r2, r3, #2
 8006428:	4b5d      	ldr	r3, [pc, #372]	@ (80065a0 <ProcessCmd+0x1ac>)
 800642a:	18d3      	adds	r3, r2, r3
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	469f      	mov	pc, r3
 8006430:	2bfd      	cmp	r3, #253	@ 0xfd
 8006432:	d100      	bne.n	8006436 <ProcessCmd+0x42>
 8006434:	e084      	b.n	8006540 <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 8006436:	e0ab      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006438:	2118      	movs	r1, #24
 800643a:	187b      	adds	r3, r7, r1
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	001a      	movs	r2, r3
 8006440:	187b      	adds	r3, r7, r1
 8006442:	1c99      	adds	r1, r3, #2
 8006444:	4857      	ldr	r0, [pc, #348]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006446:	230c      	movs	r3, #12
 8006448:	f002 ff7a 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 800644c:	e0a0      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800644e:	2118      	movs	r1, #24
 8006450:	187b      	adds	r3, r7, r1
 8006452:	785b      	ldrb	r3, [r3, #1]
 8006454:	001a      	movs	r2, r3
 8006456:	187b      	adds	r3, r7, r1
 8006458:	1c99      	adds	r1, r3, #2
 800645a:	4853      	ldr	r0, [pc, #332]	@ (80065a8 <ProcessCmd+0x1b4>)
 800645c:	230c      	movs	r3, #12
 800645e:	f002 ff6f 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 8006462:	e095      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006464:	2118      	movs	r1, #24
 8006466:	187b      	adds	r3, r7, r1
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	001a      	movs	r2, r3
 800646c:	187b      	adds	r3, r7, r1
 800646e:	1c99      	adds	r1, r3, #2
 8006470:	484e      	ldr	r0, [pc, #312]	@ (80065ac <ProcessCmd+0x1b8>)
 8006472:	230c      	movs	r3, #12
 8006474:	f002 ff64 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 8006478:	e08a      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800647a:	2118      	movs	r1, #24
 800647c:	187b      	adds	r3, r7, r1
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	001a      	movs	r2, r3
 8006482:	187b      	adds	r3, r7, r1
 8006484:	1c99      	adds	r1, r3, #2
 8006486:	484a      	ldr	r0, [pc, #296]	@ (80065b0 <ProcessCmd+0x1bc>)
 8006488:	230c      	movs	r3, #12
 800648a:	f002 ff59 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 800648e:	e07f      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006490:	2118      	movs	r1, #24
 8006492:	187b      	adds	r3, r7, r1
 8006494:	785b      	ldrb	r3, [r3, #1]
 8006496:	001a      	movs	r2, r3
 8006498:	187b      	adds	r3, r7, r1
 800649a:	1c99      	adds	r1, r3, #2
 800649c:	4845      	ldr	r0, [pc, #276]	@ (80065b4 <ProcessCmd+0x1c0>)
 800649e:	230c      	movs	r3, #12
 80064a0:	f002 ff4e 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 80064a4:	e074      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064a6:	2118      	movs	r1, #24
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	001a      	movs	r2, r3
 80064ae:	187b      	adds	r3, r7, r1
 80064b0:	1c99      	adds	r1, r3, #2
 80064b2:	4841      	ldr	r0, [pc, #260]	@ (80065b8 <ProcessCmd+0x1c4>)
 80064b4:	230c      	movs	r3, #12
 80064b6:	f002 ff43 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 80064ba:	e069      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064bc:	2118      	movs	r1, #24
 80064be:	187b      	adds	r3, r7, r1
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	001a      	movs	r2, r3
 80064c4:	187b      	adds	r3, r7, r1
 80064c6:	1c99      	adds	r1, r3, #2
 80064c8:	483c      	ldr	r0, [pc, #240]	@ (80065bc <ProcessCmd+0x1c8>)
 80064ca:	230c      	movs	r3, #12
 80064cc:	f002 ff38 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 80064d0:	e05e      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80064d2:	2118      	movs	r1, #24
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	001a      	movs	r2, r3
 80064da:	187b      	adds	r3, r7, r1
 80064dc:	1c99      	adds	r1, r3, #2
 80064de:	4838      	ldr	r0, [pc, #224]	@ (80065c0 <ProcessCmd+0x1cc>)
 80064e0:	2320      	movs	r3, #32
 80064e2:	f002 ff2d 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 80064e6:	e053      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064e8:	2118      	movs	r1, #24
 80064ea:	187b      	adds	r3, r7, r1
 80064ec:	785b      	ldrb	r3, [r3, #1]
 80064ee:	001a      	movs	r2, r3
 80064f0:	187b      	adds	r3, r7, r1
 80064f2:	1c99      	adds	r1, r3, #2
 80064f4:	4833      	ldr	r0, [pc, #204]	@ (80065c4 <ProcessCmd+0x1d0>)
 80064f6:	230c      	movs	r3, #12
 80064f8:	f002 ff22 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 80064fc:	e048      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80064fe:	2118      	movs	r1, #24
 8006500:	187b      	adds	r3, r7, r1
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	001a      	movs	r2, r3
 8006506:	187b      	adds	r3, r7, r1
 8006508:	1c99      	adds	r1, r3, #2
 800650a:	482f      	ldr	r0, [pc, #188]	@ (80065c8 <ProcessCmd+0x1d4>)
 800650c:	230c      	movs	r3, #12
 800650e:	f002 ff17 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 8006512:	e03d      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006514:	2118      	movs	r1, #24
 8006516:	187b      	adds	r3, r7, r1
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	001a      	movs	r2, r3
 800651c:	187b      	adds	r3, r7, r1
 800651e:	1c99      	adds	r1, r3, #2
 8006520:	482a      	ldr	r0, [pc, #168]	@ (80065cc <ProcessCmd+0x1d8>)
 8006522:	230c      	movs	r3, #12
 8006524:	f002 ff0c 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 8006528:	e032      	b.n	8006590 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800652a:	2118      	movs	r1, #24
 800652c:	187b      	adds	r3, r7, r1
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	001a      	movs	r2, r3
 8006532:	187b      	adds	r3, r7, r1
 8006534:	1c99      	adds	r1, r3, #2
 8006536:	4826      	ldr	r0, [pc, #152]	@ (80065d0 <ProcessCmd+0x1dc>)
 8006538:	230c      	movs	r3, #12
 800653a:	f002 ff01 	bl	8009340 <WriteUint8ArrayEepromSafe>
        break;
 800653e:	e027      	b.n	8006590 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006540:	4b18      	ldr	r3, [pc, #96]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006542:	21f8      	movs	r1, #248	@ 0xf8
 8006544:	0018      	movs	r0, r3
 8006546:	f002 ff40 	bl	80093ca <ClearEEprom>
        break;
 800654a:	e021      	b.n	8006590 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800654c:	2118      	movs	r1, #24
 800654e:	187b      	adds	r3, r7, r1
 8006550:	789b      	ldrb	r3, [r3, #2]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	b21a      	sxth	r2, r3
 8006556:	187b      	adds	r3, r7, r1
 8006558:	78db      	ldrb	r3, [r3, #3]
 800655a:	b21b      	sxth	r3, r3
 800655c:	4313      	orrs	r3, r2
 800655e:	b21a      	sxth	r2, r3
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006564:	1dbb      	adds	r3, r7, #6
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	23c0      	movs	r3, #192	@ 0xc0
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	429a      	cmp	r2, r3
 800656e:	d207      	bcs.n	8006580 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006570:	1dbb      	adds	r3, r7, #6
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	4a0b      	ldr	r2, [pc, #44]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006576:	0019      	movs	r1, r3
 8006578:	0010      	movs	r0, r2
 800657a:	f002 ff26 	bl	80093ca <ClearEEprom>
            break;
 800657e:	e006      	b.n	800658e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006580:	23c0      	movs	r3, #192	@ 0xc0
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	4a07      	ldr	r2, [pc, #28]	@ (80065a4 <ProcessCmd+0x1b0>)
 8006586:	0019      	movs	r1, r3
 8006588:	0010      	movs	r0, r2
 800658a:	f002 ff1e 	bl	80093ca <ClearEEprom>
            break;
 800658e:	46c0      	nop			@ (mov r8, r8)
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bcb0      	pop	{r4, r5, r7}
 8006598:	bc08      	pop	{r3}
 800659a:	b004      	add	sp, #16
 800659c:	4718      	bx	r3
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	08028ed4 	.word	0x08028ed4
 80065a4:	08080000 	.word	0x08080000
 80065a8:	0808000c 	.word	0x0808000c
 80065ac:	08080018 	.word	0x08080018
 80065b0:	08080024 	.word	0x08080024
 80065b4:	08080030 	.word	0x08080030
 80065b8:	0808003c 	.word	0x0808003c
 80065bc:	08080048 	.word	0x08080048
 80065c0:	08080090 	.word	0x08080090
 80065c4:	08080078 	.word	0x08080078
 80065c8:	0808006c 	.word	0x0808006c
 80065cc:	08080060 	.word	0x08080060
 80065d0:	08080054 	.word	0x08080054

080065d4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80065d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6039      	str	r1, [r7, #0]
 80065dc:	0011      	movs	r1, r2
 80065de:	1dfb      	adds	r3, r7, #7
 80065e0:	1c02      	adds	r2, r0, #0
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	1dbb      	adds	r3, r7, #6
 80065e6:	1c0a      	adds	r2, r1, #0
 80065e8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80065ea:	2223      	movs	r2, #35	@ 0x23
 80065ec:	4b20      	ldr	r3, [pc, #128]	@ (8006670 <Create_Message+0x9c>)
 80065ee:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80065f0:	4b1f      	ldr	r3, [pc, #124]	@ (8006670 <Create_Message+0x9c>)
 80065f2:	1dfa      	adds	r2, r7, #7
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80065f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <Create_Message+0x9c>)
 80065fa:	1dba      	adds	r2, r7, #6
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006600:	1dbb      	adds	r3, r7, #6
 8006602:	781a      	ldrb	r2, [r3, #0]
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	4b1b      	ldr	r3, [pc, #108]	@ (8006674 <Create_Message+0xa0>)
 8006608:	0018      	movs	r0, r3
 800660a:	f01c fbf5 	bl	8022df8 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800660e:	1dbb      	adds	r3, r7, #6
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	250e      	movs	r5, #14
 8006616:	197b      	adds	r3, r7, r5
 8006618:	3203      	adds	r2, #3
 800661a:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 800661c:	260c      	movs	r6, #12
 800661e:	19bc      	adds	r4, r7, r6
 8006620:	197b      	adds	r3, r7, r5
 8006622:	881a      	ldrh	r2, [r3, #0]
 8006624:	4b12      	ldr	r3, [pc, #72]	@ (8006670 <Create_Message+0x9c>)
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f000 f825 	bl	8006678 <CRC16_ARC>
 800662e:	0003      	movs	r3, r0
 8006630:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006632:	0030      	movs	r0, r6
 8006634:	183b      	adds	r3, r7, r0
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	b29a      	uxth	r2, r3
 800663c:	197b      	adds	r3, r7, r5
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b2d1      	uxtb	r1, r2
 8006642:	4a0b      	ldr	r2, [pc, #44]	@ (8006670 <Create_Message+0x9c>)
 8006644:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006646:	197b      	adds	r3, r7, r5
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	183a      	adds	r2, r7, r0
 800664e:	8812      	ldrh	r2, [r2, #0]
 8006650:	b2d1      	uxtb	r1, r2
 8006652:	4a07      	ldr	r2, [pc, #28]	@ (8006670 <Create_Message+0x9c>)
 8006654:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006656:	197b      	adds	r3, r7, r5
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	3302      	adds	r3, #2
 800665c:	b29a      	uxth	r2, r3
 800665e:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <Create_Message+0x9c>)
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f019 f878 	bl	801f758 <CDC_Transmit_FS>
}
 8006668:	46c0      	nop			@ (mov r8, r8)
 800666a:	46bd      	mov	sp, r7
 800666c:	b005      	add	sp, #20
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006670:	200008a4 	.word	0x200008a4
 8006674:	200008a7 	.word	0x200008a7

08006678 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	000a      	movs	r2, r1
 8006682:	1cbb      	adds	r3, r7, #2
 8006684:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006686:	2316      	movs	r3, #22
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2200      	movs	r2, #0
 800668c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	e02e      	b.n	80066f2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	18d3      	adds	r3, r2, r3
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	0019      	movs	r1, r3
 800669e:	2216      	movs	r2, #22
 80066a0:	18bb      	adds	r3, r7, r2
 80066a2:	18ba      	adds	r2, r7, r2
 80066a4:	8812      	ldrh	r2, [r2, #0]
 80066a6:	404a      	eors	r2, r1
 80066a8:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e01a      	b.n	80066e6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80066b0:	2116      	movs	r1, #22
 80066b2:	187b      	adds	r3, r7, r1
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	4013      	ands	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	187a      	adds	r2, r7, r1
 80066c0:	8812      	ldrh	r2, [r2, #0]
 80066c2:	0852      	lsrs	r2, r2, #1
 80066c4:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80066c6:	187b      	adds	r3, r7, r1
 80066c8:	187a      	adds	r2, r7, r1
 80066ca:	8812      	ldrh	r2, [r2, #0]
 80066cc:	490f      	ldr	r1, [pc, #60]	@ (800670c <CRC16_ARC+0x94>)
 80066ce:	404a      	eors	r2, r1
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e005      	b.n	80066e0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80066d4:	2216      	movs	r2, #22
 80066d6:	18bb      	adds	r3, r7, r2
 80066d8:	18ba      	adds	r2, r7, r2
 80066da:	8812      	ldrh	r2, [r2, #0]
 80066dc:	0852      	lsrs	r2, r2, #1
 80066de:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3301      	adds	r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b07      	cmp	r3, #7
 80066ea:	dde1      	ble.n	80066b0 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3301      	adds	r3, #1
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	1cbb      	adds	r3, r7, #2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	dbcb      	blt.n	8006694 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80066fc:	2316      	movs	r3, #22
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	881b      	ldrh	r3, [r3, #0]
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b006      	add	sp, #24
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	ffffa001 	.word	0xffffa001

08006710 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8006710:	b40f      	push	{r0, r1, r2, r3}
 8006712:	b590      	push	{r4, r7, lr}
 8006714:	b0a9      	sub	sp, #164	@ 0xa4
 8006716:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8006718:	23ac      	movs	r3, #172	@ 0xac
 800671a:	2108      	movs	r1, #8
 800671c:	185b      	adds	r3, r3, r1
 800671e:	19db      	adds	r3, r3, r7
 8006720:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	23a8      	movs	r3, #168	@ 0xa8
 8006726:	185b      	adds	r3, r3, r1
 8006728:	19db      	adds	r3, r3, r7
 800672a:	6819      	ldr	r1, [r3, #0]
 800672c:	2408      	movs	r4, #8
 800672e:	193b      	adds	r3, r7, r4
 8006730:	0018      	movs	r0, r3
 8006732:	f01c f9d9 	bl	8022ae8 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8006736:	193b      	adds	r3, r7, r4
 8006738:	0018      	movs	r0, r3
 800673a:	f7f9 fd17 	bl	800016c <strlen>
 800673e:	0003      	movs	r3, r0
 8006740:	b29a      	uxth	r2, r3
 8006742:	193b      	adds	r3, r7, r4
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f019 f806 	bl	801f758 <CDC_Transmit_FS>
}
 800674c:	46c0      	nop			@ (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b029      	add	sp, #164	@ 0xa4
 8006752:	bc90      	pop	{r4, r7}
 8006754:	bc08      	pop	{r3}
 8006756:	b004      	add	sp, #16
 8006758:	4718      	bx	r3

0800675a <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 800675a:	b580      	push	{r7, lr}
 800675c:	b082      	sub	sp, #8
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	000a      	movs	r2, r1
 8006764:	1cfb      	adds	r3, r7, #3
 8006766:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8006768:	1cfb      	adds	r3, r7, #3
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <PC_selectout+0x1e>
    printf_USB(msg);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0018      	movs	r0, r3
 8006774:	f7ff ffcc 	bl	8006710 <printf_USB>
  }
//  else {
    printf(msg);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	0018      	movs	r0, r3
 800677c:	f01c f88a 	bl	8022894 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 8006780:	200a      	movs	r0, #10
 8006782:	f00a fd55 	bl	8011230 <HAL_Delay>
}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	46bd      	mov	sp, r7
 800678a:	b002      	add	sp, #8
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <PC_show_Keys>:

void PC_show_Keys() {
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 8006794:	f000 fc40 	bl	8007018 <Check_USB_PowerOn>
 8006798:	1e03      	subs	r3, r0, #0
 800679a:	d003      	beq.n	80067a4 <PC_show_Keys+0x14>
    usb_out = true;
 800679c:	4bcc      	ldr	r3, [pc, #816]	@ (8006ad0 <PC_show_Keys+0x340>)
 800679e:	2201      	movs	r2, #1
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	e002      	b.n	80067aa <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80067a4:	4bca      	ldr	r3, [pc, #808]	@ (8006ad0 <PC_show_Keys+0x340>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80067aa:	4aca      	ldr	r2, [pc, #808]	@ (8006ad4 <PC_show_Keys+0x344>)
 80067ac:	4bca      	ldr	r3, [pc, #808]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f01c f8df 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067b6:	4bc6      	ldr	r3, [pc, #792]	@ (8006ad0 <PC_show_Keys+0x340>)
 80067b8:	781a      	ldrb	r2, [r3, #0]
 80067ba:	4bc7      	ldr	r3, [pc, #796]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067bc:	0011      	movs	r1, r2
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff ffcb 	bl	800675a <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80067c4:	4bc5      	ldr	r3, [pc, #788]	@ (8006adc <PC_show_Keys+0x34c>)
 80067c6:	48c6      	ldr	r0, [pc, #792]	@ (8006ae0 <PC_show_Keys+0x350>)
 80067c8:	220c      	movs	r2, #12
 80067ca:	0019      	movs	r1, r3
 80067cc:	f002 fdd4 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80067d0:	4ac2      	ldr	r2, [pc, #776]	@ (8006adc <PC_show_Keys+0x34c>)
 80067d2:	4bc4      	ldr	r3, [pc, #784]	@ (8006ae4 <PC_show_Keys+0x354>)
 80067d4:	0011      	movs	r1, r2
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7fd fabc 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 80067dc:	4ac1      	ldr	r2, [pc, #772]	@ (8006ae4 <PC_show_Keys+0x354>)
 80067de:	49c2      	ldr	r1, [pc, #776]	@ (8006ae8 <PC_show_Keys+0x358>)
 80067e0:	4bbd      	ldr	r3, [pc, #756]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067e2:	0018      	movs	r0, r3
 80067e4:	f01c f8c6 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80067e8:	4bb9      	ldr	r3, [pc, #740]	@ (8006ad0 <PC_show_Keys+0x340>)
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	4bba      	ldr	r3, [pc, #744]	@ (8006ad8 <PC_show_Keys+0x348>)
 80067ee:	0011      	movs	r1, r2
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff ffb2 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80067f6:	4bbd      	ldr	r3, [pc, #756]	@ (8006aec <PC_show_Keys+0x35c>)
 80067f8:	48bd      	ldr	r0, [pc, #756]	@ (8006af0 <PC_show_Keys+0x360>)
 80067fa:	220c      	movs	r2, #12
 80067fc:	0019      	movs	r1, r3
 80067fe:	f002 fdbb 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8006802:	4aba      	ldr	r2, [pc, #744]	@ (8006aec <PC_show_Keys+0x35c>)
 8006804:	4bb7      	ldr	r3, [pc, #732]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006806:	0011      	movs	r1, r2
 8006808:	0018      	movs	r0, r3
 800680a:	f7fd faa3 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 800680e:	4ab5      	ldr	r2, [pc, #724]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006810:	49b8      	ldr	r1, [pc, #736]	@ (8006af4 <PC_show_Keys+0x364>)
 8006812:	4bb1      	ldr	r3, [pc, #708]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006814:	0018      	movs	r0, r3
 8006816:	f01c f8ad 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800681a:	4bad      	ldr	r3, [pc, #692]	@ (8006ad0 <PC_show_Keys+0x340>)
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	4bae      	ldr	r3, [pc, #696]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff ff99 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8006828:	4bb3      	ldr	r3, [pc, #716]	@ (8006af8 <PC_show_Keys+0x368>)
 800682a:	48b4      	ldr	r0, [pc, #720]	@ (8006afc <PC_show_Keys+0x36c>)
 800682c:	220c      	movs	r2, #12
 800682e:	0019      	movs	r1, r3
 8006830:	f002 fda2 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8006834:	4ab0      	ldr	r2, [pc, #704]	@ (8006af8 <PC_show_Keys+0x368>)
 8006836:	4bab      	ldr	r3, [pc, #684]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006838:	0011      	movs	r1, r2
 800683a:	0018      	movs	r0, r3
 800683c:	f7fd fa8a 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 8006840:	4aa8      	ldr	r2, [pc, #672]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006842:	49af      	ldr	r1, [pc, #700]	@ (8006b00 <PC_show_Keys+0x370>)
 8006844:	4ba4      	ldr	r3, [pc, #656]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006846:	0018      	movs	r0, r3
 8006848:	f01c f894 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800684c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ad0 <PC_show_Keys+0x340>)
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006852:	0011      	movs	r1, r2
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff ff80 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800685a:	4baa      	ldr	r3, [pc, #680]	@ (8006b04 <PC_show_Keys+0x374>)
 800685c:	48aa      	ldr	r0, [pc, #680]	@ (8006b08 <PC_show_Keys+0x378>)
 800685e:	220c      	movs	r2, #12
 8006860:	0019      	movs	r1, r3
 8006862:	f002 fd89 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8006866:	4aa7      	ldr	r2, [pc, #668]	@ (8006b04 <PC_show_Keys+0x374>)
 8006868:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae4 <PC_show_Keys+0x354>)
 800686a:	0011      	movs	r1, r2
 800686c:	0018      	movs	r0, r3
 800686e:	f7fd fa71 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 8006872:	4a9c      	ldr	r2, [pc, #624]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006874:	49a5      	ldr	r1, [pc, #660]	@ (8006b0c <PC_show_Keys+0x37c>)
 8006876:	4b98      	ldr	r3, [pc, #608]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006878:	0018      	movs	r0, r3
 800687a:	f01c f87b 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800687e:	4b94      	ldr	r3, [pc, #592]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	4b95      	ldr	r3, [pc, #596]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006884:	0011      	movs	r1, r2
 8006886:	0018      	movs	r0, r3
 8006888:	f7ff ff67 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 800688c:	4ba0      	ldr	r3, [pc, #640]	@ (8006b10 <PC_show_Keys+0x380>)
 800688e:	48a1      	ldr	r0, [pc, #644]	@ (8006b14 <PC_show_Keys+0x384>)
 8006890:	220c      	movs	r2, #12
 8006892:	0019      	movs	r1, r3
 8006894:	f002 fd70 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8006898:	4a9d      	ldr	r2, [pc, #628]	@ (8006b10 <PC_show_Keys+0x380>)
 800689a:	4b92      	ldr	r3, [pc, #584]	@ (8006ae4 <PC_show_Keys+0x354>)
 800689c:	0011      	movs	r1, r2
 800689e:	0018      	movs	r0, r3
 80068a0:	f7fd fa58 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80068a4:	4a8f      	ldr	r2, [pc, #572]	@ (8006ae4 <PC_show_Keys+0x354>)
 80068a6:	499c      	ldr	r1, [pc, #624]	@ (8006b18 <PC_show_Keys+0x388>)
 80068a8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068aa:	0018      	movs	r0, r3
 80068ac:	f01c f862 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068b0:	4b87      	ldr	r3, [pc, #540]	@ (8006ad0 <PC_show_Keys+0x340>)
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	4b88      	ldr	r3, [pc, #544]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7ff ff4e 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, soundConfig, IdSize);
 80068be:	4b97      	ldr	r3, [pc, #604]	@ (8006b1c <PC_show_Keys+0x38c>)
 80068c0:	4897      	ldr	r0, [pc, #604]	@ (8006b20 <PC_show_Keys+0x390>)
 80068c2:	220c      	movs	r2, #12
 80068c4:	0019      	movs	r1, r3
 80068c6:	f002 fd57 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80068ca:	4a94      	ldr	r2, [pc, #592]	@ (8006b1c <PC_show_Keys+0x38c>)
 80068cc:	4b85      	ldr	r3, [pc, #532]	@ (8006ae4 <PC_show_Keys+0x354>)
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fd fa3f 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 80068d6:	4a93      	ldr	r2, [pc, #588]	@ (8006b24 <PC_show_Keys+0x394>)
 80068d8:	4b7f      	ldr	r3, [pc, #508]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068da:	0011      	movs	r1, r2
 80068dc:	0018      	movs	r0, r3
 80068de:	f01c f849 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068e2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ad0 <PC_show_Keys+0x340>)
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068e8:	0011      	movs	r1, r2
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7ff ff35 	bl	800675a <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 80068f0:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae4 <PC_show_Keys+0x354>)
 80068f2:	498d      	ldr	r1, [pc, #564]	@ (8006b28 <PC_show_Keys+0x398>)
 80068f4:	4b78      	ldr	r3, [pc, #480]	@ (8006ad8 <PC_show_Keys+0x348>)
 80068f6:	0018      	movs	r0, r3
 80068f8:	f01c f83c 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80068fc:	4b74      	ldr	r3, [pc, #464]	@ (8006ad0 <PC_show_Keys+0x340>)
 80068fe:	781a      	ldrb	r2, [r3, #0]
 8006900:	4b75      	ldr	r3, [pc, #468]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006902:	0011      	movs	r1, r2
 8006904:	0018      	movs	r0, r3
 8006906:	f7ff ff28 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 800690a:	4b84      	ldr	r3, [pc, #528]	@ (8006b1c <PC_show_Keys+0x38c>)
 800690c:	4887      	ldr	r0, [pc, #540]	@ (8006b2c <PC_show_Keys+0x39c>)
 800690e:	220c      	movs	r2, #12
 8006910:	0019      	movs	r1, r3
 8006912:	f002 fd31 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8006916:	4a81      	ldr	r2, [pc, #516]	@ (8006b1c <PC_show_Keys+0x38c>)
 8006918:	4b72      	ldr	r3, [pc, #456]	@ (8006ae4 <PC_show_Keys+0x354>)
 800691a:	0011      	movs	r1, r2
 800691c:	0018      	movs	r0, r3
 800691e:	f7fd fa19 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 8006922:	4a83      	ldr	r2, [pc, #524]	@ (8006b30 <PC_show_Keys+0x3a0>)
 8006924:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006926:	0011      	movs	r1, r2
 8006928:	0018      	movs	r0, r3
 800692a:	f01c f823 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800692e:	4b68      	ldr	r3, [pc, #416]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	4b69      	ldr	r3, [pc, #420]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006934:	0011      	movs	r1, r2
 8006936:	0018      	movs	r0, r3
 8006938:	f7ff ff0f 	bl	800675a <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 800693c:	4a69      	ldr	r2, [pc, #420]	@ (8006ae4 <PC_show_Keys+0x354>)
 800693e:	497d      	ldr	r1, [pc, #500]	@ (8006b34 <PC_show_Keys+0x3a4>)
 8006940:	4b65      	ldr	r3, [pc, #404]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006942:	0018      	movs	r0, r3
 8006944:	f01c f816 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006948:	4b61      	ldr	r3, [pc, #388]	@ (8006ad0 <PC_show_Keys+0x340>)
 800694a:	781a      	ldrb	r2, [r3, #0]
 800694c:	4b62      	ldr	r3, [pc, #392]	@ (8006ad8 <PC_show_Keys+0x348>)
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f7ff ff02 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8006956:	4b78      	ldr	r3, [pc, #480]	@ (8006b38 <PC_show_Keys+0x3a8>)
 8006958:	4878      	ldr	r0, [pc, #480]	@ (8006b3c <PC_show_Keys+0x3ac>)
 800695a:	2220      	movs	r2, #32
 800695c:	0019      	movs	r1, r3
 800695e:	f002 fd0b 	bl	8009378 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 8006962:	4a77      	ldr	r2, [pc, #476]	@ (8006b40 <PC_show_Keys+0x3b0>)
 8006964:	4b5c      	ldr	r3, [pc, #368]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006966:	0011      	movs	r1, r2
 8006968:	0018      	movs	r0, r3
 800696a:	f01c f803 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800696e:	4b58      	ldr	r3, [pc, #352]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	4b59      	ldr	r3, [pc, #356]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006974:	0011      	movs	r1, r2
 8006976:	0018      	movs	r0, r3
 8006978:	f7ff feef 	bl	800675a <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 800697c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b38 <PC_show_Keys+0x3a8>)
 800697e:	4971      	ldr	r1, [pc, #452]	@ (8006b44 <PC_show_Keys+0x3b4>)
 8006980:	4b55      	ldr	r3, [pc, #340]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006982:	0018      	movs	r0, r3
 8006984:	f01b fff6 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006988:	4b51      	ldr	r3, [pc, #324]	@ (8006ad0 <PC_show_Keys+0x340>)
 800698a:	781a      	ldrb	r2, [r3, #0]
 800698c:	4b52      	ldr	r3, [pc, #328]	@ (8006ad8 <PC_show_Keys+0x348>)
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff fee2 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8006996:	4b6c      	ldr	r3, [pc, #432]	@ (8006b48 <PC_show_Keys+0x3b8>)
 8006998:	486c      	ldr	r0, [pc, #432]	@ (8006b4c <PC_show_Keys+0x3bc>)
 800699a:	220c      	movs	r2, #12
 800699c:	0019      	movs	r1, r3
 800699e:	f002 fceb 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80069a2:	4a69      	ldr	r2, [pc, #420]	@ (8006b48 <PC_show_Keys+0x3b8>)
 80069a4:	4b4f      	ldr	r3, [pc, #316]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069a6:	0011      	movs	r1, r2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f7fd f9d3 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80069ae:	4a4d      	ldr	r2, [pc, #308]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069b0:	4967      	ldr	r1, [pc, #412]	@ (8006b50 <PC_show_Keys+0x3c0>)
 80069b2:	4b49      	ldr	r3, [pc, #292]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069b4:	0018      	movs	r0, r3
 80069b6:	f01b ffdd 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80069ba:	4b45      	ldr	r3, [pc, #276]	@ (8006ad0 <PC_show_Keys+0x340>)
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	4b46      	ldr	r3, [pc, #280]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069c0:	0011      	movs	r1, r2
 80069c2:	0018      	movs	r0, r3
 80069c4:	f7ff fec9 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80069c8:	4b62      	ldr	r3, [pc, #392]	@ (8006b54 <PC_show_Keys+0x3c4>)
 80069ca:	4863      	ldr	r0, [pc, #396]	@ (8006b58 <PC_show_Keys+0x3c8>)
 80069cc:	220c      	movs	r2, #12
 80069ce:	0019      	movs	r1, r3
 80069d0:	f002 fcd2 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 80069d4:	4a5f      	ldr	r2, [pc, #380]	@ (8006b54 <PC_show_Keys+0x3c4>)
 80069d6:	4b43      	ldr	r3, [pc, #268]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069d8:	0011      	movs	r1, r2
 80069da:	0018      	movs	r0, r3
 80069dc:	f7fd f9ba 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 80069e0:	4a40      	ldr	r2, [pc, #256]	@ (8006ae4 <PC_show_Keys+0x354>)
 80069e2:	495e      	ldr	r1, [pc, #376]	@ (8006b5c <PC_show_Keys+0x3cc>)
 80069e4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069e6:	0018      	movs	r0, r3
 80069e8:	f01b ffc4 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80069ec:	4b38      	ldr	r3, [pc, #224]	@ (8006ad0 <PC_show_Keys+0x340>)
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	4b39      	ldr	r3, [pc, #228]	@ (8006ad8 <PC_show_Keys+0x348>)
 80069f2:	0011      	movs	r1, r2
 80069f4:	0018      	movs	r0, r3
 80069f6:	f7ff feb0 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 80069fa:	4b59      	ldr	r3, [pc, #356]	@ (8006b60 <PC_show_Keys+0x3d0>)
 80069fc:	4859      	ldr	r0, [pc, #356]	@ (8006b64 <PC_show_Keys+0x3d4>)
 80069fe:	220c      	movs	r2, #12
 8006a00:	0019      	movs	r1, r3
 8006a02:	f002 fcb9 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8006a06:	4a56      	ldr	r2, [pc, #344]	@ (8006b60 <PC_show_Keys+0x3d0>)
 8006a08:	4b36      	ldr	r3, [pc, #216]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a0a:	0011      	movs	r1, r2
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	f7fd f9a1 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 8006a12:	4a34      	ldr	r2, [pc, #208]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a14:	4954      	ldr	r1, [pc, #336]	@ (8006b68 <PC_show_Keys+0x3d8>)
 8006a16:	4b30      	ldr	r3, [pc, #192]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f01b ffab 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a24:	0011      	movs	r1, r2
 8006a26:	0018      	movs	r0, r3
 8006a28:	f7ff fe97 	bl	800675a <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8006a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8006b6c <PC_show_Keys+0x3dc>)
 8006a2e:	4850      	ldr	r0, [pc, #320]	@ (8006b70 <PC_show_Keys+0x3e0>)
 8006a30:	220c      	movs	r2, #12
 8006a32:	0019      	movs	r1, r3
 8006a34:	f002 fca0 	bl	8009378 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8006a38:	4a4c      	ldr	r2, [pc, #304]	@ (8006b6c <PC_show_Keys+0x3dc>)
 8006a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f7fd f988 	bl	8003d54 <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 8006a44:	4a27      	ldr	r2, [pc, #156]	@ (8006ae4 <PC_show_Keys+0x354>)
 8006a46:	494b      	ldr	r1, [pc, #300]	@ (8006b74 <PC_show_Keys+0x3e4>)
 8006a48:	4b23      	ldr	r3, [pc, #140]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f01b ff92 	bl	8022974 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8006a50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	4b20      	ldr	r3, [pc, #128]	@ (8006ad8 <PC_show_Keys+0x348>)
 8006a56:	0011      	movs	r1, r2
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f7ff fe7e 	bl	800675a <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 8006a5e:	4b46      	ldr	r3, [pc, #280]	@ (8006b78 <PC_show_Keys+0x3e8>)
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7ff fe55 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a66:	200a      	movs	r0, #10
 8006a68:	f00a fbe2 	bl	8011230 <HAL_Delay>
  printf_USB("Command example for air pressure => #5,6a\r\n");
 8006a6c:	4b43      	ldr	r3, [pc, #268]	@ (8006b7c <PC_show_Keys+0x3ec>)
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7ff fe4e 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a74:	200a      	movs	r0, #10
 8006a76:	f00a fbdb 	bl	8011230 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8006a7a:	4b41      	ldr	r3, [pc, #260]	@ (8006b80 <PC_show_Keys+0x3f0>)
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fe47 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a82:	200a      	movs	r0, #10
 8006a84:	f00a fbd4 	bl	8011230 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8006a88:	4b3e      	ldr	r3, [pc, #248]	@ (8006b84 <PC_show_Keys+0x3f4>)
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7ff fe40 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a90:	200a      	movs	r0, #10
 8006a92:	f00a fbcd 	bl	8011230 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8006a96:	4b3c      	ldr	r3, [pc, #240]	@ (8006b88 <PC_show_Keys+0x3f8>)
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f7ff fe39 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006a9e:	200a      	movs	r0, #10
 8006aa0:	f00a fbc6 	bl	8011230 <HAL_Delay>
  printf_USB(" $5,67af09374cdef30007b35055\r\n");
 8006aa4:	4b39      	ldr	r3, [pc, #228]	@ (8006b8c <PC_show_Keys+0x3fc>)
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7ff fe32 	bl	8006710 <printf_USB>
  HAL_Delay(10);
 8006aac:	200a      	movs	r0, #10
 8006aae:	f00a fbbf 	bl	8011230 <HAL_Delay>
  if (!usb_out) {
 8006ab2:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <PC_show_Keys+0x340>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	4053      	eors	r3, r2
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <PC_show_Keys+0x338>
    printf("A key can only be changed by USB input.\r\n");
 8006ac0:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <PC_show_Keys+0x400>)
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f01b ff4c 	bl	8022960 <puts>
  }
}
 8006ac8:	46c0      	nop			@ (mov r8, r8)
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	200009a9 	.word	0x200009a9
 8006ad4:	0802699c 	.word	0x0802699c
 8006ad8:	200009ac 	.word	0x200009ac
 8006adc:	200009ec 	.word	0x200009ec
 8006ae0:	08080000 	.word	0x08080000
 8006ae4:	200009f8 	.word	0x200009f8
 8006ae8:	080269b8 	.word	0x080269b8
 8006aec:	20000a14 	.word	0x20000a14
 8006af0:	0808000c 	.word	0x0808000c
 8006af4:	080269dc 	.word	0x080269dc
 8006af8:	20000a20 	.word	0x20000a20
 8006afc:	08080018 	.word	0x08080018
 8006b00:	08026a00 	.word	0x08026a00
 8006b04:	20000a2c 	.word	0x20000a2c
 8006b08:	08080024 	.word	0x08080024
 8006b0c:	08026a24 	.word	0x08026a24
 8006b10:	20000a38 	.word	0x20000a38
 8006b14:	08080030 	.word	0x08080030
 8006b18:	08026a48 	.word	0x08026a48
 8006b1c:	20000a44 	.word	0x20000a44
 8006b20:	0808003c 	.word	0x0808003c
 8006b24:	08026a6c 	.word	0x08026a6c
 8006b28:	08026a88 	.word	0x08026a88
 8006b2c:	08080048 	.word	0x08080048
 8006b30:	08026aac 	.word	0x08026aac
 8006b34:	08026ac0 	.word	0x08026ac0
 8006b38:	20000a50 	.word	0x20000a50
 8006b3c:	08080090 	.word	0x08080090
 8006b40:	08026ae4 	.word	0x08026ae4
 8006b44:	08026b04 	.word	0x08026b04
 8006b48:	20000a70 	.word	0x20000a70
 8006b4c:	08080078 	.word	0x08080078
 8006b50:	08026b0c 	.word	0x08026b0c
 8006b54:	20000a7c 	.word	0x20000a7c
 8006b58:	0808006c 	.word	0x0808006c
 8006b5c:	08026b30 	.word	0x08026b30
 8006b60:	20000a88 	.word	0x20000a88
 8006b64:	08080060 	.word	0x08080060
 8006b68:	08026b54 	.word	0x08026b54
 8006b6c:	20000a94 	.word	0x20000a94
 8006b70:	08080054 	.word	0x08080054
 8006b74:	08026b78 	.word	0x08026b78
 8006b78:	08026b9c 	.word	0x08026b9c
 8006b7c:	08026bcc 	.word	0x08026bcc
 8006b80:	08026bf8 	.word	0x08026bf8
 8006b84:	08026c34 	.word	0x08026c34
 8006b88:	08026c6c 	.word	0x08026c6c
 8006b8c:	08026ca0 	.word	0x08026ca0
 8006b90:	08026cc0 	.word	0x08026cc0

08006b94 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b0c5      	sub	sp, #276	@ 0x114
 8006b98:	af3e      	add	r7, sp, #248	@ 0xf8
 8006b9a:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint32_t len = 5;
  uint32_t length = GetUsbRxDataSize();
 8006b9c:	f018 fe36 	bl	801f80c <GetUsbRxDataSize>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	613b      	str	r3, [r7, #16]
  static uint8_t r = 0;
//  uint8_t* message;
  static char Buffer[24];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2124      	movs	r1, #36	@ 0x24
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f01c f851 	bl	8022c50 <strchr>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	60fb      	str	r3, [r7, #12]
  if ((length == 1) && (message != NULL) && (len != 27)){
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10f      	bne.n	8006bd8 <Process_USB_input+0x44>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <Process_USB_input+0x44>
 8006bbe:	4bab      	ldr	r3, [pc, #684]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b1b      	cmp	r3, #27
 8006bc4:	d008      	beq.n	8006bd8 <Process_USB_input+0x44>
      Debug("Switching to input length of 27 for full opensensemap keylength");
 8006bc6:	4aaa      	ldr	r2, [pc, #680]	@ (8006e70 <Process_USB_input+0x2dc>)
 8006bc8:	4baa      	ldr	r3, [pc, #680]	@ (8006e74 <Process_USB_input+0x2e0>)
 8006bca:	0019      	movs	r1, r3
 8006bcc:	2003      	movs	r0, #3
 8006bce:	f009 fed9 	bl	8010984 <CreateLine>
      len = 27;
 8006bd2:	4ba6      	ldr	r3, [pc, #664]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bd4:	221b      	movs	r2, #27
 8006bd6:	601a      	str	r2, [r3, #0]
  }
  if (length > len) {
 8006bd8:	4ba4      	ldr	r3, [pc, #656]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d800      	bhi.n	8006be4 <Process_USB_input+0x50>
 8006be2:	e12c      	b.n	8006e3e <Process_USB_input+0x2aa>
//    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
    printf_USB("USB input: %s\r\n", (const char*)data);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4ba4      	ldr	r3, [pc, #656]	@ (8006e78 <Process_USB_input+0x2e4>)
 8006be8:	0011      	movs	r1, r2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7ff fd90 	bl	8006710 <printf_USB>
    message = (unsigned char*)data;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
    if (message[0] == '$') {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b24      	cmp	r3, #36	@ 0x24
 8006bfa:	d102      	bne.n	8006c02 <Process_USB_input+0x6e>
      len = 27;
 8006bfc:	4b9b      	ldr	r3, [pc, #620]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006bfe:	221b      	movs	r2, #27
 8006c00:	601a      	str	r2, [r3, #0]
    }
    if((message[0] == '#') || (message[0] == '$')) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b23      	cmp	r3, #35	@ 0x23
 8006c08:	d004      	beq.n	8006c14 <Process_USB_input+0x80>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b24      	cmp	r3, #36	@ 0x24
 8006c10:	d000      	beq.n	8006c14 <Process_USB_input+0x80>
 8006c12:	e0f7      	b.n	8006e04 <Process_USB_input+0x270>
      received.Command = (message[1] & 0x0F);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	220f      	movs	r2, #15
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	4b96      	ldr	r3, [pc, #600]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006c22:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3302      	adds	r3, #2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b2c      	cmp	r3, #44	@ 0x2c
 8006c2c:	d000      	beq.n	8006c30 <Process_USB_input+0x9c>
 8006c2e:	e0e2      	b.n	8006df6 <Process_USB_input+0x262>
        for (uint8_t i=3; i < len; i++) {
 8006c30:	2317      	movs	r3, #23
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	2203      	movs	r2, #3
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e084      	b.n	8006d44 <Process_USB_input+0x1b0>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
          HAL_Delay(10);
 8006c3a:	200a      	movs	r0, #10
 8006c3c:	f00a faf8 	bl	8011230 <HAL_Delay>
          if (isxdigit(message[i])) {
 8006c40:	2117      	movs	r1, #23
 8006c42:	187b      	adds	r3, r7, r1
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	18d3      	adds	r3, r2, r3
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	4b8c      	ldr	r3, [pc, #560]	@ (8006e80 <Process_USB_input+0x2ec>)
 8006c50:	18d3      	adds	r3, r2, r3
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	001a      	movs	r2, r3
 8006c56:	2344      	movs	r3, #68	@ 0x44
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d05c      	beq.n	8006d16 <Process_USB_input+0x182>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8006c5c:	4b89      	ldr	r3, [pc, #548]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	b25a      	sxtb	r2, r3
 8006c64:	0008      	movs	r0, r1
 8006c66:	187b      	adds	r3, r7, r1
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	18cb      	adds	r3, r1, r3
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	1c59      	adds	r1, r3, #1
 8006c72:	4b83      	ldr	r3, [pc, #524]	@ (8006e80 <Process_USB_input+0x2ec>)
 8006c74:	18cb      	adds	r3, r1, r3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	0019      	movs	r1, r3
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	d008      	beq.n	8006c92 <Process_USB_input+0xfe>
 8006c80:	183b      	adds	r3, r7, r0
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	18cb      	adds	r3, r1, r3
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	3b30      	subs	r3, #48	@ 0x30
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	e01e      	b.n	8006cd0 <Process_USB_input+0x13c>
 8006c92:	2317      	movs	r3, #23
 8006c94:	18fb      	adds	r3, r7, r3
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	68f9      	ldr	r1, [r7, #12]
 8006c9a:	18c9      	adds	r1, r1, r3
 8006c9c:	200b      	movs	r0, #11
 8006c9e:	183b      	adds	r3, r7, r0
 8006ca0:	7809      	ldrb	r1, [r1, #0]
 8006ca2:	7019      	strb	r1, [r3, #0]
 8006ca4:	183b      	adds	r3, r7, r0
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	4b75      	ldr	r3, [pc, #468]	@ (8006e80 <Process_USB_input+0x2ec>)
 8006cac:	18cb      	adds	r3, r1, r3
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	0019      	movs	r1, r3
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d103      	bne.n	8006cc2 <Process_USB_input+0x12e>
 8006cba:	183b      	adds	r3, r7, r0
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	3b20      	subs	r3, #32
 8006cc0:	e002      	b.n	8006cc8 <Process_USB_input+0x134>
 8006cc2:	230b      	movs	r3, #11
 8006cc4:	18fb      	adds	r3, r7, r3
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	3b37      	subs	r3, #55	@ 0x37
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006cd8:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%2X\r\n", result);
            HAL_Delay(10);
 8006cda:	200a      	movs	r0, #10
 8006cdc:	f00a faa8 	bl	8011230 <HAL_Delay>
            if (len == 27) {
 8006ce0:	4b62      	ldr	r3, [pc, #392]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b1b      	cmp	r3, #27
 8006ce6:	d127      	bne.n	8006d38 <Process_USB_input+0x1a4>
              if ((i % 2) == 0) {
 8006ce8:	2317      	movs	r3, #23
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11f      	bne.n	8006d38 <Process_USB_input+0x1a4>
                message[r] = result;
 8006cf8:	4b63      	ldr	r3, [pc, #396]	@ (8006e88 <Process_USB_input+0x2f4>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	001a      	movs	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	189b      	adds	r3, r3, r2
 8006d02:	4a60      	ldr	r2, [pc, #384]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	701a      	strb	r2, [r3, #0]
                r++;
 8006d08:	4b5f      	ldr	r3, [pc, #380]	@ (8006e88 <Process_USB_input+0x2f4>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	4b5d      	ldr	r3, [pc, #372]	@ (8006e88 <Process_USB_input+0x2f4>)
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e010      	b.n	8006d38 <Process_USB_input+0x1a4>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 8006d16:	2017      	movs	r0, #23
 8006d18:	183b      	adds	r3, r7, r0
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	18d3      	adds	r3, r2, r3
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	0019      	movs	r1, r3
 8006d24:	183b      	adds	r3, r7, r0
 8006d26:	781a      	ldrb	r2, [r3, #0]
 8006d28:	4b58      	ldr	r3, [pc, #352]	@ (8006e8c <Process_USB_input+0x2f8>)
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f7ff fcf0 	bl	8006710 <printf_USB>
            ResetUsbRxDataSize();
 8006d30:	f018 fd54 	bl	801f7dc <ResetUsbRxDataSize>
            return false; // Of een andere foutwaarde
 8006d34:	2300      	movs	r3, #0
 8006d36:	e095      	b.n	8006e64 <Process_USB_input+0x2d0>
        for (uint8_t i=3; i < len; i++) {
 8006d38:	2117      	movs	r1, #23
 8006d3a:	187b      	adds	r3, r7, r1
 8006d3c:	781a      	ldrb	r2, [r3, #0]
 8006d3e:	187b      	adds	r3, r7, r1
 8006d40:	3201      	adds	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	2317      	movs	r3, #23
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	4b48      	ldr	r3, [pc, #288]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d200      	bcs.n	8006d54 <Process_USB_input+0x1c0>
 8006d52:	e772      	b.n	8006c3a <Process_USB_input+0xa6>
          }
        }
        if (len == 5) {
 8006d54:	4b45      	ldr	r3, [pc, #276]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b05      	cmp	r3, #5
 8006d5a:	d112      	bne.n	8006d82 <Process_USB_input+0x1ee>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006e90 <Process_USB_input+0x2fc>)
 8006d5e:	484d      	ldr	r0, [pc, #308]	@ (8006e94 <Process_USB_input+0x300>)
 8006d60:	220c      	movs	r2, #12
 8006d62:	0019      	movs	r1, r3
 8006d64:	f002 fb08 	bl	8009378 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 8006d68:	4b46      	ldr	r3, [pc, #280]	@ (8006e84 <Process_USB_input+0x2f0>)
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	4b48      	ldr	r3, [pc, #288]	@ (8006e90 <Process_USB_input+0x2fc>)
 8006d6e:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8006d70:	4b42      	ldr	r3, [pc, #264]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006d72:	2202      	movs	r2, #2
 8006d74:	4946      	ldr	r1, [pc, #280]	@ (8006e90 <Process_USB_input+0x2fc>)
 8006d76:	189b      	adds	r3, r3, r2
 8006d78:	220c      	movs	r2, #12
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f01c f83c 	bl	8022df8 <memcpy>
 8006d80:	e005      	b.n	8006d8e <Process_USB_input+0x1fa>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	4b44      	ldr	r3, [pc, #272]	@ (8006e98 <Process_USB_input+0x304>)
 8006d86:	220c      	movs	r2, #12
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f01c f835 	bl	8022df8 <memcpy>
        }
        received.PayloadLength = IdSize;
 8006d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006d90:	220c      	movs	r2, #12
 8006d92:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8006d94:	4a40      	ldr	r2, [pc, #256]	@ (8006e98 <Process_USB_input+0x304>)
 8006d96:	4b41      	ldr	r3, [pc, #260]	@ (8006e9c <Process_USB_input+0x308>)
 8006d98:	0011      	movs	r1, r2
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f7fc ffda 	bl	8003d54 <uint8ArrayToString>
        ProcessCmd(received);
 8006da0:	4c36      	ldr	r4, [pc, #216]	@ (8006e7c <Process_USB_input+0x2e8>)
 8006da2:	466b      	mov	r3, sp
 8006da4:	0018      	movs	r0, r3
 8006da6:	0023      	movs	r3, r4
 8006da8:	3310      	adds	r3, #16
 8006daa:	22f4      	movs	r2, #244	@ 0xf4
 8006dac:	0019      	movs	r1, r3
 8006dae:	f01c f823 	bl	8022df8 <memcpy>
 8006db2:	6820      	ldr	r0, [r4, #0]
 8006db4:	6861      	ldr	r1, [r4, #4]
 8006db6:	68a2      	ldr	r2, [r4, #8]
 8006db8:	68e3      	ldr	r3, [r4, #12]
 8006dba:	f7ff fb1b 	bl	80063f4 <ProcessCmd>
        ResetUsbRxDataSize();
 8006dbe:	f018 fd0d 	bl	801f7dc <ResetUsbRxDataSize>
        PC_show_Keys();
 8006dc2:	f7ff fce5 	bl	8006790 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8006dc6:	2316      	movs	r3, #22
 8006dc8:	18fb      	adds	r3, r7, r3
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e00b      	b.n	8006de8 <Process_USB_input+0x254>
          data[i] = '\0';
 8006dd0:	2116      	movs	r1, #22
 8006dd2:	187b      	adds	r3, r7, r1
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	18d3      	adds	r3, r2, r3
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	187b      	adds	r3, r7, r1
 8006de4:	3201      	adds	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	2316      	movs	r3, #22
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b1f      	cmp	r3, #31
 8006df0:	d9ee      	bls.n	8006dd0 <Process_USB_input+0x23c>
        }
        return true;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e036      	b.n	8006e64 <Process_USB_input+0x2d0>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8006df6:	4b2a      	ldr	r3, [pc, #168]	@ (8006ea0 <Process_USB_input+0x30c>)
 8006df8:	0018      	movs	r0, r3
 8006dfa:	f7ff fc89 	bl	8006710 <printf_USB>
        ResetUsbRxDataSize();
 8006dfe:	f018 fced 	bl	801f7dc <ResetUsbRxDataSize>
      if (message[2] == ',') {
 8006e02:	e006      	b.n	8006e12 <Process_USB_input+0x27e>
      }
    }
    else {
      len = 5;
 8006e04:	4b19      	ldr	r3, [pc, #100]	@ (8006e6c <Process_USB_input+0x2d8>)
 8006e06:	2205      	movs	r2, #5
 8006e08:	601a      	str	r2, [r3, #0]
      PC_show_Keys();
 8006e0a:	f7ff fcc1 	bl	8006790 <PC_show_Keys>
      ResetUsbRxDataSize();
 8006e0e:	f018 fce5 	bl	801f7dc <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 32; i++) {
 8006e12:	2315      	movs	r3, #21
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	2200      	movs	r2, #0
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e00b      	b.n	8006e34 <Process_USB_input+0x2a0>
      data[i] = '\0';
 8006e1c:	2115      	movs	r1, #21
 8006e1e:	187b      	adds	r3, r7, r1
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	18d3      	adds	r3, r2, r3
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8006e2a:	187b      	adds	r3, r7, r1
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	187b      	adds	r3, r7, r1
 8006e30:	3201      	adds	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	2315      	movs	r3, #21
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	2b1f      	cmp	r3, #31
 8006e3c:	d9ee      	bls.n	8006e1c <Process_USB_input+0x288>
    }

  }
  if (formerlength != length) {
 8006e3e:	4b19      	ldr	r3, [pc, #100]	@ (8006ea4 <Process_USB_input+0x310>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d008      	beq.n	8006e5a <Process_USB_input+0x2c6>
    printf_USB("USB input: %s\r", (const char*)data);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ea8 <Process_USB_input+0x314>)
 8006e4c:	0011      	movs	r1, r2
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7ff fc5e 	bl	8006710 <printf_USB>
    formerlength = length;
 8006e54:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <Process_USB_input+0x310>)
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f018 fcdf 	bl	801f820 <GetUsbRxNextChunk>

  return false;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b007      	add	sp, #28
 8006e6a:	bd90      	pop	{r4, r7, pc}
 8006e6c:	20000030 	.word	0x20000030
 8006e70:	08026cec 	.word	0x08026cec
 8006e74:	08026d2c 	.word	0x08026d2c
 8006e78:	08026d30 	.word	0x08026d30
 8006e7c:	20000798 	.word	0x20000798
 8006e80:	08029730 	.word	0x08029730
 8006e84:	2000089c 	.word	0x2000089c
 8006e88:	20000aa0 	.word	0x20000aa0
 8006e8c:	08026d40 	.word	0x08026d40
 8006e90:	20000aa4 	.word	0x20000aa4
 8006e94:	08080000 	.word	0x08080000
 8006e98:	2000079a 	.word	0x2000079a
 8006e9c:	20000ab0 	.word	0x20000ab0
 8006ea0:	08026d78 	.word	0x08026d78
 8006ea4:	200008a0 	.word	0x200008a0
 8006ea8:	08026da4 	.word	0x08026da4

08006eac <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006eb0:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006eb2:	4a27      	ldr	r2, [pc, #156]	@ (8006f50 <ReadBatteryVoltage+0xa4>)
 8006eb4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006eb6:	4b25      	ldr	r3, [pc, #148]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006eb8:	2280      	movs	r2, #128	@ 0x80
 8006eba:	0152      	lsls	r2, r2, #5
 8006ebc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006ebe:	4a23      	ldr	r2, [pc, #140]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006ec0:	4b24      	ldr	r3, [pc, #144]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006ec2:	0011      	movs	r1, r2
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f00a fc81 	bl	80117cc <HAL_ADC_ConfigChannel>
 8006eca:	1e03      	subs	r3, r0, #0
 8006ecc:	d001      	beq.n	8006ed2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006ece:	f003 faf3 	bl	800a4b8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006ed2:	4b20      	ldr	r3, [pc, #128]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f00a fb7d 	bl	80115d4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006eda:	4b1e      	ldr	r3, [pc, #120]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006edc:	2101      	movs	r1, #1
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f00a fbcc 	bl	801167c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f00a fc64 	bl	80117b4 <HAL_ADC_GetValue>
 8006eec:	0002      	movs	r2, r0
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <ReadBatteryVoltage+0xac>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4353      	muls	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4919      	ldr	r1, [pc, #100]	@ (8006f5c <ReadBatteryVoltage+0xb0>)
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7f9 f953 	bl	80001a4 <__udivsi3>
 8006efe:	0003      	movs	r3, r0
 8006f00:	001a      	movs	r2, r3
 8006f02:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <ReadBatteryVoltage+0xb4>)
 8006f04:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006f06:	4b16      	ldr	r3, [pc, #88]	@ (8006f60 <ReadBatteryVoltage+0xb4>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7fa fbac 	bl	8001668 <__aeabi_ui2f>
 8006f10:	1c03      	adds	r3, r0, #0
 8006f12:	4914      	ldr	r1, [pc, #80]	@ (8006f64 <ReadBatteryVoltage+0xb8>)
 8006f14:	1c18      	adds	r0, r3, #0
 8006f16:	f7f9 fe5d 	bl	8000bd4 <__aeabi_fdiv>
 8006f1a:	1c03      	adds	r3, r0, #0
 8006f1c:	1c1a      	adds	r2, r3, #0
 8006f1e:	4b12      	ldr	r3, [pc, #72]	@ (8006f68 <ReadBatteryVoltage+0xbc>)
 8006f20:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006f24:	4a0a      	ldr	r2, [pc, #40]	@ (8006f50 <ReadBatteryVoltage+0xa4>)
 8006f26:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006f28:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006f2a:	4a10      	ldr	r2, [pc, #64]	@ (8006f6c <ReadBatteryVoltage+0xc0>)
 8006f2c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006f2e:	4a07      	ldr	r2, [pc, #28]	@ (8006f4c <ReadBatteryVoltage+0xa0>)
 8006f30:	4b08      	ldr	r3, [pc, #32]	@ (8006f54 <ReadBatteryVoltage+0xa8>)
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f00a fc49 	bl	80117cc <HAL_ADC_ConfigChannel>
 8006f3a:	1e03      	subs	r3, r0, #0
 8006f3c:	d001      	beq.n	8006f42 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006f3e:	f003 fabb 	bl	800a4b8 <Error_Handler>
  }
  return trueValue;
 8006f42:	4b09      	ldr	r3, [pc, #36]	@ (8006f68 <ReadBatteryVoltage+0xbc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 }
 8006f46:	1c18      	adds	r0, r3, #0
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000ac8 	.word	0x20000ac8
 8006f50:	38004000 	.word	0x38004000
 8006f54:	20000b04 	.word	0x20000b04
 8006f58:	20000034 	.word	0x20000034
 8006f5c:	00000fff 	.word	0x00000fff
 8006f60:	20000ad0 	.word	0x20000ad0
 8006f64:	447a0000 	.word	0x447a0000
 8006f68:	20000ad4 	.word	0x20000ad4
 8006f6c:	00001001 	.word	0x00001001

08006f70 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006f74:	4b21      	ldr	r3, [pc, #132]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006f76:	4a22      	ldr	r2, [pc, #136]	@ (8007000 <ReadSolarVoltage+0x90>)
 8006f78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006f7a:	4b20      	ldr	r3, [pc, #128]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006f7c:	2280      	movs	r2, #128	@ 0x80
 8006f7e:	0152      	lsls	r2, r2, #5
 8006f80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006f82:	4a1e      	ldr	r2, [pc, #120]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006f84:	4b1f      	ldr	r3, [pc, #124]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f00a fc1f 	bl	80117cc <HAL_ADC_ConfigChannel>
 8006f8e:	1e03      	subs	r3, r0, #0
 8006f90:	d001      	beq.n	8006f96 <ReadSolarVoltage+0x26>
    Error_Handler();
 8006f92:	f003 fa91 	bl	800a4b8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006f96:	4b1b      	ldr	r3, [pc, #108]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f00a fb1b 	bl	80115d4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006f9e:	4b19      	ldr	r3, [pc, #100]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f00a fb6a 	bl	801167c <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006faa:	0018      	movs	r0, r3
 8006fac:	f00a fc02 	bl	80117b4 <HAL_ADC_GetValue>
 8006fb0:	0002      	movs	r2, r0
 8006fb2:	4b15      	ldr	r3, [pc, #84]	@ (8007008 <ReadSolarVoltage+0x98>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	435a      	muls	r2, r3
 8006fb8:	0013      	movs	r3, r2
 8006fba:	005b      	lsls	r3, r3, #1
 8006fbc:	189b      	adds	r3, r3, r2
 8006fbe:	4913      	ldr	r1, [pc, #76]	@ (800700c <ReadSolarVoltage+0x9c>)
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7f9 f8ef 	bl	80001a4 <__udivsi3>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	001a      	movs	r2, r3
 8006fca:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <ReadSolarVoltage+0xa0>)
 8006fcc:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8007000 <ReadSolarVoltage+0x90>)
 8006fd2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007014 <ReadSolarVoltage+0xa4>)
 8006fd8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006fda:	4a08      	ldr	r2, [pc, #32]	@ (8006ffc <ReadSolarVoltage+0x8c>)
 8006fdc:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <ReadSolarVoltage+0x94>)
 8006fde:	0011      	movs	r1, r2
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f00a fbf3 	bl	80117cc <HAL_ADC_ConfigChannel>
 8006fe6:	1e03      	subs	r3, r0, #0
 8006fe8:	d001      	beq.n	8006fee <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006fea:	f003 fa65 	bl	800a4b8 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006fee:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <ReadSolarVoltage+0xa0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 }
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	20000ac8 	.word	0x20000ac8
 8007000:	3c008000 	.word	0x3c008000
 8007004:	20000b04 	.word	0x20000b04
 8007008:	20000034 	.word	0x20000034
 800700c:	00000fff 	.word	0x00000fff
 8007010:	20000ad8 	.word	0x20000ad8
 8007014:	00001001 	.word	0x00001001

08007018 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800701c:	23a0      	movs	r3, #160	@ 0xa0
 800701e:	05db      	lsls	r3, r3, #23
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	0018      	movs	r0, r3
 8007024:	f00b fb6e 	bl	8012704 <HAL_GPIO_ReadPin>
 8007028:	0003      	movs	r3, r0
 800702a:	1e5a      	subs	r2, r3, #1
 800702c:	4193      	sbcs	r3, r2
 800702e:	b2db      	uxtb	r3, r3
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8007036:	b580      	push	{r7, lr}
 8007038:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800703a:	2380      	movs	r3, #128	@ 0x80
 800703c:	021a      	lsls	r2, r3, #8
 800703e:	23a0      	movs	r3, #160	@ 0xa0
 8007040:	05db      	lsls	r3, r3, #23
 8007042:	0011      	movs	r1, r2
 8007044:	0018      	movs	r0, r3
 8007046:	f00b fb5d 	bl	8012704 <HAL_GPIO_ReadPin>
 800704a:	0003      	movs	r3, r0
 800704c:	1e5a      	subs	r2, r3, #1
 800704e:	4193      	sbcs	r3, r2
 8007050:	b2db      	uxtb	r3, r3
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <UserButton_Pressed+0x1c>)
 800705e:	2104      	movs	r1, #4
 8007060:	0018      	movs	r0, r3
 8007062:	f00b fb4f 	bl	8012704 <HAL_GPIO_ReadPin>
 8007066:	0003      	movs	r3, r0
 8007068:	425a      	negs	r2, r3
 800706a:	4153      	adcs	r3, r2
 800706c:	b2db      	uxtb	r3, r3
}
 800706e:	0018      	movs	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	50000c00 	.word	0x50000c00

08007078 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8007078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707a:	46d6      	mov	lr, sl
 800707c:	464f      	mov	r7, r9
 800707e:	4646      	mov	r6, r8
 8007080:	b5c0      	push	{r6, r7, lr}
 8007082:	b08e      	sub	sp, #56	@ 0x38
 8007084:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8007086:	4b21      	ldr	r3, [pc, #132]	@ (800710c <showTime+0x94>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d036      	beq.n	80070fc <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800708e:	003a      	movs	r2, r7
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	0011      	movs	r1, r2
 8007094:	0018      	movs	r0, r3
 8007096:	f000 fa2b 	bl	80074f0 <RTC_GetTime>
  UpdateSystemUptime();
 800709a:	f000 f83f 	bl	800711c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800709e:	003b      	movs	r3, r7
 80070a0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070a2:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070a4:	003b      	movs	r3, r7
 80070a6:	785b      	ldrb	r3, [r3, #1]
 80070a8:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070aa:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <showTime+0x98>)
 80070ac:	0092      	lsls	r2, r2, #2
 80070ae:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070b0:	003b      	movs	r3, r7
 80070b2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070b4:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070ba:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80070bc:	1d3b      	adds	r3, r7, #4
 80070be:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070c0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070c2:	1d3b      	adds	r3, r7, #4
 80070c4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070c6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070c8:	4b12      	ldr	r3, [pc, #72]	@ (8007114 <showTime+0x9c>)
 80070ca:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070cc:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070ce:	4b11      	ldr	r3, [pc, #68]	@ (8007114 <showTime+0x9c>)
 80070d0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070d2:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <showTime+0x9c>)
 80070d6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070d8:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <showTime+0x9c>)
 80070dc:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80070de:	480e      	ldr	r0, [pc, #56]	@ (8007118 <showTime+0xa0>)
 80070e0:	9306      	str	r3, [sp, #24]
 80070e2:	4643      	mov	r3, r8
 80070e4:	9305      	str	r3, [sp, #20]
 80070e6:	4663      	mov	r3, ip
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	9603      	str	r6, [sp, #12]
 80070ec:	9502      	str	r5, [sp, #8]
 80070ee:	9401      	str	r4, [sp, #4]
 80070f0:	9100      	str	r1, [sp, #0]
 80070f2:	4653      	mov	r3, sl
 80070f4:	4649      	mov	r1, r9
 80070f6:	f01b fbcd 	bl	8022894 <iprintf>
 80070fa:	e000      	b.n	80070fe <showTime+0x86>
    return;
 80070fc:	46c0      	nop			@ (mov r8, r8)
}
 80070fe:	46bd      	mov	sp, r7
 8007100:	b006      	add	sp, #24
 8007102:	bce0      	pop	{r5, r6, r7}
 8007104:	46ba      	mov	sl, r7
 8007106:	46b1      	mov	r9, r6
 8007108:	46a8      	mov	r8, r5
 800710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710c:	20000ae8 	.word	0x20000ae8
 8007110:	20000054 	.word	0x20000054
 8007114:	20000adc 	.word	0x20000adc
 8007118:	08026e00 	.word	0x08026e00

0800711c <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8007122:	003a      	movs	r2, r7
 8007124:	1d3b      	adds	r3, r7, #4
 8007126:	0011      	movs	r1, r2
 8007128:	0018      	movs	r0, r3
 800712a:	f000 f9e1 	bl	80074f0 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800712e:	1d3a      	adds	r2, r7, #4
 8007130:	003b      	movs	r3, r7
 8007132:	0011      	movs	r1, r2
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fbad 	bl	8007894 <makeTime>
 800713a:	0002      	movs	r2, r0
 800713c:	4b1e      	ldr	r3, [pc, #120]	@ (80071b8 <UpdateSystemUptime+0x9c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	213c      	movs	r1, #60	@ 0x3c
 800714c:	0018      	movs	r0, r3
 800714e:	f7f9 f8af 	bl	80002b0 <__aeabi_uidivmod>
 8007152:	000b      	movs	r3, r1
 8007154:	b2da      	uxtb	r2, r3
 8007156:	4b19      	ldr	r3, [pc, #100]	@ (80071bc <UpdateSystemUptime+0xa0>)
 8007158:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	213c      	movs	r1, #60	@ 0x3c
 800715e:	0018      	movs	r0, r3
 8007160:	f7f9 f820 	bl	80001a4 <__udivsi3>
 8007164:	0003      	movs	r3, r0
 8007166:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	213c      	movs	r1, #60	@ 0x3c
 800716c:	0018      	movs	r0, r3
 800716e:	f7f9 f89f 	bl	80002b0 <__aeabi_uidivmod>
 8007172:	000b      	movs	r3, r1
 8007174:	b2da      	uxtb	r2, r3
 8007176:	4b11      	ldr	r3, [pc, #68]	@ (80071bc <UpdateSystemUptime+0xa0>)
 8007178:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	213c      	movs	r1, #60	@ 0x3c
 800717e:	0018      	movs	r0, r3
 8007180:	f7f9 f810 	bl	80001a4 <__udivsi3>
 8007184:	0003      	movs	r3, r0
 8007186:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2118      	movs	r1, #24
 800718c:	0018      	movs	r0, r3
 800718e:	f7f9 f88f 	bl	80002b0 <__aeabi_uidivmod>
 8007192:	000b      	movs	r3, r1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <UpdateSystemUptime+0xa0>)
 8007198:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2118      	movs	r1, #24
 800719e:	0018      	movs	r0, r3
 80071a0:	f7f9 f800 	bl	80001a4 <__udivsi3>
 80071a4:	0003      	movs	r3, r0
 80071a6:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	4b03      	ldr	r3, [pc, #12]	@ (80071bc <UpdateSystemUptime+0xa0>)
 80071ae:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80071b0:	46c0      	nop			@ (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b008      	add	sp, #32
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000ae8 	.word	0x20000ae8
 80071bc:	20000adc 	.word	0x20000adc

080071c0 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80071c0:	b590      	push	{r4, r7, lr}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	0008      	movs	r0, r1
 80071ca:	0011      	movs	r1, r2
 80071cc:	1cfb      	adds	r3, r7, #3
 80071ce:	1c02      	adds	r2, r0, #0
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	1cbb      	adds	r3, r7, #2
 80071d4:	1c0a      	adds	r2, r1, #0
 80071d6:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80071d8:	230e      	movs	r3, #14
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80071e0:	230f      	movs	r3, #15
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	1cfa      	adds	r2, r7, #3
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e015      	b.n	8007218 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80071ec:	200f      	movs	r0, #15
 80071ee:	183b      	adds	r3, r7, r0
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	18d2      	adds	r2, r2, r3
 80071f6:	240e      	movs	r4, #14
 80071f8:	193b      	adds	r3, r7, r4
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	7811      	ldrb	r1, [r2, #0]
 80071fe:	2208      	movs	r2, #8
 8007200:	18ba      	adds	r2, r7, r2
 8007202:	54d1      	strb	r1, [r2, r3]
    pos++;
 8007204:	193b      	adds	r3, r7, r4
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	193b      	adds	r3, r7, r4
 800720a:	3201      	adds	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800720e:	183b      	adds	r3, r7, r0
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	183b      	adds	r3, r7, r0
 8007214:	3201      	adds	r2, #1
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	200f      	movs	r0, #15
 800721a:	183a      	adds	r2, r7, r0
 800721c:	1cbb      	adds	r3, r7, #2
 800721e:	7812      	ldrb	r2, [r2, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d9e2      	bls.n	80071ec <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8007226:	230e      	movs	r3, #14
 8007228:	18fb      	adds	r3, r7, r3
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2208      	movs	r2, #8
 800722e:	18ba      	adds	r2, r7, r2
 8007230:	2100      	movs	r1, #0
 8007232:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8007234:	1cfb      	adds	r3, r7, #3
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b13      	cmp	r3, #19
 800723a:	d849      	bhi.n	80072d0 <aBuff2int+0x110>
    if (start == 17) { //month
 800723c:	1cfb      	adds	r3, r7, #3
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b11      	cmp	r3, #17
 8007242:	d122      	bne.n	800728a <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8007244:	183b      	adds	r3, r7, r0
 8007246:	2200      	movs	r2, #0
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e018      	b.n	800727e <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800724c:	240f      	movs	r4, #15
 800724e:	193b      	adds	r3, r7, r4
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	4b25      	ldr	r3, [pc, #148]	@ (80072e8 <aBuff2int+0x128>)
 8007254:	0092      	lsls	r2, r2, #2
 8007256:	58d2      	ldr	r2, [r2, r3]
 8007258:	2308      	movs	r3, #8
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	0011      	movs	r1, r2
 800725e:	0018      	movs	r0, r3
 8007260:	f7f8 ff7a 	bl	8000158 <strcmp>
 8007264:	1e03      	subs	r3, r0, #0
 8007266:	d104      	bne.n	8007272 <aBuff2int+0xb2>
          return i+1;
 8007268:	193b      	adds	r3, r7, r4
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	3301      	adds	r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	e035      	b.n	80072de <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8007272:	210f      	movs	r1, #15
 8007274:	187b      	adds	r3, r7, r1
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	187b      	adds	r3, r7, r1
 800727a:	3201      	adds	r2, #1
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	230f      	movs	r3, #15
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	2b0b      	cmp	r3, #11
 8007286:	d9e1      	bls.n	800724c <aBuff2int+0x8c>
 8007288:	e022      	b.n	80072d0 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800728a:	230f      	movs	r3, #15
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e018      	b.n	80072c6 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8007294:	240f      	movs	r4, #15
 8007296:	193b      	adds	r3, r7, r4
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	4b14      	ldr	r3, [pc, #80]	@ (80072ec <aBuff2int+0x12c>)
 800729c:	0092      	lsls	r2, r2, #2
 800729e:	58d2      	ldr	r2, [r2, r3]
 80072a0:	2308      	movs	r3, #8
 80072a2:	18fb      	adds	r3, r7, r3
 80072a4:	0011      	movs	r1, r2
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7f8 ff56 	bl	8000158 <strcmp>
 80072ac:	1e03      	subs	r3, r0, #0
 80072ae:	d104      	bne.n	80072ba <aBuff2int+0xfa>
          return i+1;
 80072b0:	193b      	adds	r3, r7, r4
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	3301      	adds	r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	e011      	b.n	80072de <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80072ba:	210f      	movs	r1, #15
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	3201      	adds	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	230f      	movs	r3, #15
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b06      	cmp	r3, #6
 80072ce:	d9e1      	bls.n	8007294 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80072d0:	2308      	movs	r3, #8
 80072d2:	18fb      	adds	r3, r7, r3
 80072d4:	0018      	movs	r0, r3
 80072d6:	f019 ff02 	bl	80210de <atoi>
 80072da:	0003      	movs	r3, r0
 80072dc:	b2db      	uxtb	r3, r3
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b005      	add	sp, #20
 80072e4:	bd90      	pop	{r4, r7, pc}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	20000054 	.word	0x20000054
 80072ec:	20000038 	.word	0x20000038

080072f0 <ParseTime>:

void ParseTime(char* buffer) {
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	b08b      	sub	sp, #44	@ 0x2c
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80072f8:	2408      	movs	r4, #8
 80072fa:	193a      	adds	r2, r7, r4
 80072fc:	260c      	movs	r6, #12
 80072fe:	19bb      	adds	r3, r7, r6
 8007300:	0011      	movs	r1, r2
 8007302:	0018      	movs	r0, r3
 8007304:	f000 f8f4 	bl	80074f0 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2219      	movs	r2, #25
 800730c:	2118      	movs	r1, #24
 800730e:	0018      	movs	r0, r3
 8007310:	f7ff ff56 	bl	80071c0 <aBuff2int>
 8007314:	0003      	movs	r3, r0
 8007316:	001a      	movs	r2, r3
 8007318:	19bb      	adds	r3, r7, r6
 800731a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	221c      	movs	r2, #28
 8007320:	211b      	movs	r1, #27
 8007322:	0018      	movs	r0, r3
 8007324:	f7ff ff4c 	bl	80071c0 <aBuff2int>
 8007328:	0003      	movs	r3, r0
 800732a:	001a      	movs	r2, r3
 800732c:	19bb      	adds	r3, r7, r6
 800732e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	221f      	movs	r2, #31
 8007334:	211e      	movs	r1, #30
 8007336:	0018      	movs	r0, r3
 8007338:	f7ff ff42 	bl	80071c0 <aBuff2int>
 800733c:	0003      	movs	r3, r0
 800733e:	001a      	movs	r2, r3
 8007340:	19bb      	adds	r3, r7, r6
 8007342:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	@ 0x24
 8007348:	2123      	movs	r1, #35	@ 0x23
 800734a:	0018      	movs	r0, r3
 800734c:	f7ff ff38 	bl	80071c0 <aBuff2int>
 8007350:	0003      	movs	r3, r0
 8007352:	001a      	movs	r2, r3
 8007354:	0025      	movs	r5, r4
 8007356:	197b      	adds	r3, r7, r5
 8007358:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2213      	movs	r2, #19
 800735e:	2111      	movs	r1, #17
 8007360:	0018      	movs	r0, r3
 8007362:	f7ff ff2d 	bl	80071c0 <aBuff2int>
 8007366:	0003      	movs	r3, r0
 8007368:	001a      	movs	r2, r3
 800736a:	197b      	adds	r3, r7, r5
 800736c:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2216      	movs	r2, #22
 8007372:	2115      	movs	r1, #21
 8007374:	0018      	movs	r0, r3
 8007376:	f7ff ff23 	bl	80071c0 <aBuff2int>
 800737a:	0003      	movs	r3, r0
 800737c:	001a      	movs	r2, r3
 800737e:	197b      	adds	r3, r7, r5
 8007380:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	220f      	movs	r2, #15
 8007386:	210d      	movs	r1, #13
 8007388:	0018      	movs	r0, r3
 800738a:	f7ff ff19 	bl	80071c0 <aBuff2int>
 800738e:	0003      	movs	r3, r0
 8007390:	001a      	movs	r2, r3
 8007392:	197b      	adds	r3, r7, r5
 8007394:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8007396:	19bb      	adds	r3, r7, r6
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	001c      	movs	r4, r3
 800739c:	19bb      	adds	r3, r7, r6
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	0018      	movs	r0, r3
 80073a2:	19bb      	adds	r3, r7, r6
 80073a4:	789b      	ldrb	r3, [r3, #2]
 80073a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007418 <ParseTime+0x128>)
 80073a8:	491c      	ldr	r1, [pc, #112]	@ (800741c <ParseTime+0x12c>)
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	9000      	str	r0, [sp, #0]
 80073ae:	0023      	movs	r3, r4
 80073b0:	2003      	movs	r0, #3
 80073b2:	f009 fae7 	bl	8010984 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80073b6:	197b      	adds	r3, r7, r5
 80073b8:	789b      	ldrb	r3, [r3, #2]
 80073ba:	001c      	movs	r4, r3
 80073bc:	197b      	adds	r3, r7, r5
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	0018      	movs	r0, r3
 80073c2:	197b      	adds	r3, r7, r5
 80073c4:	78db      	ldrb	r3, [r3, #3]
 80073c6:	4a16      	ldr	r2, [pc, #88]	@ (8007420 <ParseTime+0x130>)
 80073c8:	4914      	ldr	r1, [pc, #80]	@ (800741c <ParseTime+0x12c>)
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	9000      	str	r0, [sp, #0]
 80073ce:	0023      	movs	r3, r4
 80073d0:	2003      	movs	r0, #3
 80073d2:	f009 fad7 	bl	8010984 <CreateLine>
  RTC_SetTime(&currentTime);
 80073d6:	19bb      	adds	r3, r7, r6
 80073d8:	0018      	movs	r0, r3
 80073da:	f000 f825 	bl	8007428 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80073de:	197b      	adds	r3, r7, r5
 80073e0:	0018      	movs	r0, r3
 80073e2:	f000 f847 	bl	8007474 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80073e6:	197b      	adds	r3, r7, r5
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d101      	bne.n	80073f2 <ParseTime+0x102>
    reset_fanCleaningDone();
 80073ee:	f004 f8df 	bl	800b5b0 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80073f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007424 <ParseTime+0x134>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80073fa:	230c      	movs	r3, #12
 80073fc:	18fa      	adds	r2, r7, r3
 80073fe:	2308      	movs	r3, #8
 8007400:	18fb      	adds	r3, r7, r3
 8007402:	0011      	movs	r1, r2
 8007404:	0018      	movs	r0, r3
 8007406:	f000 fa45 	bl	8007894 <makeTime>
 800740a:	0002      	movs	r2, r0
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <ParseTime+0x134>)
 800740e:	601a      	str	r2, [r3, #0]
  }
}
 8007410:	46c0      	nop			@ (mov r8, r8)
 8007412:	46bd      	mov	sp, r7
 8007414:	b009      	add	sp, #36	@ 0x24
 8007416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007418:	08026e58 	.word	0x08026e58
 800741c:	08026e90 	.word	0x08026e90
 8007420:	08026e94 	.word	0x08026e94
 8007424:	20000ae8 	.word	0x20000ae8

08007428 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007442:	4b09      	ldr	r3, [pc, #36]	@ (8007468 <RTC_SetTime+0x40>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	0018      	movs	r0, r3
 800744c:	f011 fa9e 	bl	801898c <HAL_RTC_SetTime>
 8007450:	1e03      	subs	r3, r0, #0
 8007452:	d005      	beq.n	8007460 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8007454:	4a05      	ldr	r2, [pc, #20]	@ (800746c <RTC_SetTime+0x44>)
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <RTC_SetTime+0x48>)
 8007458:	0019      	movs	r1, r3
 800745a:	2001      	movs	r0, #1
 800745c:	f009 fa92 	bl	8010984 <CreateLine>
    }
}
 8007460:	46c0      	nop			@ (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000ae4 	.word	0x20000ae4
 800746c:	08026ec8 	.word	0x08026ec8
 8007470:	08026ee4 	.word	0x08026ee4

08007474 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800747c:	4b16      	ldr	r3, [pc, #88]	@ (80074d8 <RTC_SetDate+0x64>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	0018      	movs	r0, r3
 8007486:	f011 fb89 	bl	8018b9c <HAL_RTC_SetDate>
 800748a:	1e03      	subs	r3, r0, #0
 800748c:	d005      	beq.n	800749a <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800748e:	4a13      	ldr	r2, [pc, #76]	@ (80074dc <RTC_SetDate+0x68>)
 8007490:	4b13      	ldr	r3, [pc, #76]	@ (80074e0 <RTC_SetDate+0x6c>)
 8007492:	0019      	movs	r1, r3
 8007494:	2001      	movs	r0, #1
 8007496:	f009 fa75 	bl	8010984 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800749a:	4b0f      	ldr	r3, [pc, #60]	@ (80074d8 <RTC_SetDate+0x64>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2101      	movs	r1, #1
 80074a0:	0018      	movs	r0, r3
 80074a2:	f011 fec1 	bl	8019228 <HAL_RTCEx_BKUPRead>
 80074a6:	0003      	movs	r3, r0
 80074a8:	4a0e      	ldr	r2, [pc, #56]	@ (80074e4 <RTC_SetDate+0x70>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d010      	beq.n	80074d0 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80074ae:	4a0e      	ldr	r2, [pc, #56]	@ (80074e8 <RTC_SetDate+0x74>)
 80074b0:	4b0e      	ldr	r3, [pc, #56]	@ (80074ec <RTC_SetDate+0x78>)
 80074b2:	0019      	movs	r1, r3
 80074b4:	2003      	movs	r0, #3
 80074b6:	f009 fa65 	bl	8010984 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80074ba:	f010 f9e7 	bl	801788c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <RTC_SetDate+0x64>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a08      	ldr	r2, [pc, #32]	@ (80074e4 <RTC_SetDate+0x70>)
 80074c4:	2101      	movs	r1, #1
 80074c6:	0018      	movs	r0, r3
 80074c8:	f011 fe96 	bl	80191f8 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80074cc:	f010 f9ec 	bl	80178a8 <HAL_PWR_DisableBkUpAccess>
    }
}
 80074d0:	46c0      	nop			@ (mov r8, r8)
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b002      	add	sp, #8
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	20000ae4 	.word	0x20000ae4
 80074dc:	08026ee8 	.word	0x08026ee8
 80074e0:	08026ee4 	.word	0x08026ee4
 80074e4:	0000bebe 	.word	0x0000bebe
 80074e8:	08026f04 	.word	0x08026f04
 80074ec:	08026e90 	.word	0x08026e90

080074f0 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80074f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 80074fa:	250f      	movs	r5, #15
 80074fc:	197b      	adds	r3, r7, r5
 80074fe:	2201      	movs	r2, #1
 8007500:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8007502:	230e      	movs	r3, #14
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800750a:	260c      	movs	r6, #12
 800750c:	19bc      	adds	r4, r7, r6
 800750e:	f008 facb 	bl	800faa8 <powerCheck>
 8007512:	0003      	movs	r3, r0
 8007514:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8007516:	19bb      	adds	r3, r7, r6
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d104      	bne.n	8007528 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800751e:	197b      	adds	r3, r7, r5
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	197b      	adds	r3, r7, r5
 8007524:	3201      	adds	r2, #1
 8007526:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8007528:	230d      	movs	r3, #13
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	e039      	b.n	80075a6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007532:	4b23      	ldr	r3, [pc, #140]	@ (80075c0 <RTC_GetTime+0xd0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	0018      	movs	r0, r3
 800753c:	f011 fad0 	bl	8018ae0 <HAL_RTC_GetTime>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d005      	beq.n	8007550 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8007544:	4a1f      	ldr	r2, [pc, #124]	@ (80075c4 <RTC_GetTime+0xd4>)
 8007546:	4b20      	ldr	r3, [pc, #128]	@ (80075c8 <RTC_GetTime+0xd8>)
 8007548:	0019      	movs	r1, r3
 800754a:	2001      	movs	r0, #1
 800754c:	f009 fa1a 	bl	8010984 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007550:	4b1b      	ldr	r3, [pc, #108]	@ (80075c0 <RTC_GetTime+0xd0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	0018      	movs	r0, r3
 800755a:	f011 fbb3 	bl	8018cc4 <HAL_RTC_GetDate>
 800755e:	1e03      	subs	r3, r0, #0
 8007560:	d005      	beq.n	800756e <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8007562:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <RTC_GetTime+0xdc>)
 8007564:	4b18      	ldr	r3, [pc, #96]	@ (80075c8 <RTC_GetTime+0xd8>)
 8007566:	0019      	movs	r1, r3
 8007568:	2001      	movs	r0, #1
 800756a:	f009 fa0b 	bl	8010984 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800756e:	230c      	movs	r3, #12
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d110      	bne.n	800759a <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	210e      	movs	r1, #14
 800757e:	187a      	adds	r2, r7, r1
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d018      	beq.n	80075b8 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8007586:	187b      	adds	r3, r7, r1
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	701a      	strb	r2, [r3, #0]
        t++;
 800758e:	210f      	movs	r1, #15
 8007590:	187b      	adds	r3, r7, r1
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	187b      	adds	r3, r7, r1
 8007596:	3201      	adds	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800759a:	210d      	movs	r1, #13
 800759c:	187b      	adds	r3, r7, r1
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	187b      	adds	r3, r7, r1
 80075a2:	3201      	adds	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	230d      	movs	r3, #13
 80075a8:	18fa      	adds	r2, r7, r3
 80075aa:	230f      	movs	r3, #15
 80075ac:	18fb      	adds	r3, r7, r3
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d3bd      	bcc.n	8007532 <RTC_GetTime+0x42>
 80075b6:	e000      	b.n	80075ba <RTC_GetTime+0xca>
      }
      else {
        return;
 80075b8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b005      	add	sp, #20
 80075be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c0:	20000ae4 	.word	0x20000ae4
 80075c4:	08026f1c 	.word	0x08026f1c
 80075c8:	08026ee4 	.word	0x08026ee4
 80075cc:	08026f38 	.word	0x08026f38

080075d0 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80075d6:	003a      	movs	r2, r7
 80075d8:	1d3b      	adds	r3, r7, #4
 80075da:	0011      	movs	r1, r2
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff ff87 	bl	80074f0 <RTC_GetTime>
  return currentDate.WeekDay;
 80075e2:	003b      	movs	r3, r7
 80075e4:	781b      	ldrb	r3, [r3, #0]
}
 80075e6:	0018      	movs	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	b006      	add	sp, #24
 80075ec:	bd80      	pop	{r7, pc}

080075ee <getPosixTime>:

uint32_t getPosixTime(void) {
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80075f4:	003a      	movs	r2, r7
 80075f6:	1d3b      	adds	r3, r7, #4
 80075f8:	0011      	movs	r1, r2
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7ff ff78 	bl	80074f0 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8007600:	1d3a      	adds	r2, r7, #4
 8007602:	003b      	movs	r3, r7
 8007604:	0011      	movs	r1, r2
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f944 	bl	8007894 <makeTime>
 800760c:	0003      	movs	r3, r0
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b006      	add	sp, #24
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761a:	b08d      	sub	sp, #52	@ 0x34
 800761c:	af04      	add	r7, sp, #16
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8007622:	240c      	movs	r4, #12
 8007624:	193a      	adds	r2, r7, r4
 8007626:	2508      	movs	r5, #8
 8007628:	1979      	adds	r1, r7, r5
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f9fb 	bl	8007a28 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007632:	002a      	movs	r2, r5
 8007634:	18bb      	adds	r3, r7, r2
 8007636:	789b      	ldrb	r3, [r3, #2]
 8007638:	001e      	movs	r6, r3
 800763a:	18bb      	adds	r3, r7, r2
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	469c      	mov	ip, r3
 8007640:	18bb      	adds	r3, r7, r2
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007646:	0021      	movs	r1, r4
 8007648:	187b      	adds	r3, r7, r1
 800764a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800764c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800764e:	187b      	adds	r3, r7, r1
 8007650:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007652:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007654:	187b      	adds	r3, r7, r1
 8007656:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007658:	4906      	ldr	r1, [pc, #24]	@ (8007674 <getUTCfromPosixTime+0x5c>)
 800765a:	6838      	ldr	r0, [r7, #0]
 800765c:	9303      	str	r3, [sp, #12]
 800765e:	9502      	str	r5, [sp, #8]
 8007660:	9401      	str	r4, [sp, #4]
 8007662:	9200      	str	r2, [sp, #0]
 8007664:	4663      	mov	r3, ip
 8007666:	0032      	movs	r2, r6
 8007668:	f01b f984 	bl	8022974 <siprintf>
}
 800766c:	46c0      	nop			@ (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b009      	add	sp, #36	@ 0x24
 8007672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007674:	08026f54 	.word	0x08026f54

08007678 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8007680:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	0018      	movs	r0, r3
 8007686:	f011 fd1b 	bl	80190c0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800768a:	4b0e      	ldr	r3, [pc, #56]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	22ff      	movs	r2, #255	@ 0xff
 8007694:	401a      	ands	r2, r3
 8007696:	4b0b      	ldr	r3, [pc, #44]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	490a      	ldr	r1, [pc, #40]	@ (80076c8 <RTC_SetWakeUpTimer+0x50>)
 800769e:	430a      	orrs	r2, r1
 80076a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <RTC_SetWakeUpTimer+0x54>)
 80076a4:	2280      	movs	r2, #128	@ 0x80
 80076a6:	0352      	lsls	r2, r2, #13
 80076a8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80076aa:	4b06      	ldr	r3, [pc, #24]	@ (80076c4 <RTC_SetWakeUpTimer+0x4c>)
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	2204      	movs	r2, #4
 80076b4:	0019      	movs	r1, r3
 80076b6:	f011 fc2b 	bl	8018f10 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	b002      	add	sp, #8
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	20000ae4 	.word	0x20000ae4
 80076c8:	fffffb7f 	.word	0xfffffb7f
 80076cc:	40010400 	.word	0x40010400

080076d0 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80076d4:	4a0b      	ldr	r2, [pc, #44]	@ (8007704 <Enter_Standby_Mode+0x34>)
 80076d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <Enter_Standby_Mode+0x38>)
 80076d8:	0019      	movs	r1, r3
 80076da:	2003      	movs	r0, #3
 80076dc:	f009 f952 	bl	8010984 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80076e0:	2064      	movs	r0, #100	@ 0x64
 80076e2:	f009 fda5 	bl	8011230 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80076e6:	4b09      	ldr	r3, [pc, #36]	@ (800770c <Enter_Standby_Mode+0x3c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	0018      	movs	r0, r3
 80076ec:	f011 fce8 	bl	80190c0 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80076f0:	f002 f91c 	bl	800992c <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80076f4:	f009 fdc0 	bl	8011278 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80076f8:	f010 f942 	bl	8017980 <HAL_PWR_EnterSTANDBYMode>
}
 80076fc:	46c0      	nop			@ (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	08026fa8 	.word	0x08026fa8
 8007708:	08026e90 	.word	0x08026e90
 800770c:	20000ae4 	.word	0x20000ae4

08007710 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af02      	add	r7, sp, #8
 8007716:	0002      	movs	r2, r0
 8007718:	1dbb      	adds	r3, r7, #6
 800771a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800771c:	4b4a      	ldr	r3, [pc, #296]	@ (8007848 <Enter_Stop_Mode+0x138>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8007724:	f003 ff18 	bl	800b558 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007728:	f7ff fbc0 	bl	8006eac <ReadBatteryVoltage>
 800772c:	1c03      	adds	r3, r0, #0
 800772e:	1c18      	adds	r0, r3, #0
 8007730:	f7fb fe98 	bl	8003464 <__aeabi_f2d>
 8007734:	0002      	movs	r2, r0
 8007736:	000b      	movs	r3, r1
 8007738:	4844      	ldr	r0, [pc, #272]	@ (800784c <Enter_Stop_Mode+0x13c>)
 800773a:	4945      	ldr	r1, [pc, #276]	@ (8007850 <Enter_Stop_Mode+0x140>)
 800773c:	9200      	str	r2, [sp, #0]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	0002      	movs	r2, r0
 8007742:	2002      	movs	r0, #2
 8007744:	f009 f91e 	bl	8010984 <CreateLine>
  powerDisplay(powerCheck());
 8007748:	f008 f9ae 	bl	800faa8 <powerCheck>
 800774c:	0003      	movs	r3, r0
 800774e:	0018      	movs	r0, r3
 8007750:	f008 f9c6 	bl	800fae0 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8007754:	1dbb      	adds	r3, r7, #6
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	4a3e      	ldr	r2, [pc, #248]	@ (8007854 <Enter_Stop_Mode+0x144>)
 800775a:	493f      	ldr	r1, [pc, #252]	@ (8007858 <Enter_Stop_Mode+0x148>)
 800775c:	2003      	movs	r0, #3
 800775e:	f009 f911 	bl	8010984 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8007762:	f7ff ff44 	bl	80075ee <getPosixTime>
 8007766:	0002      	movs	r2, r0
 8007768:	1dbb      	adds	r3, r7, #6
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	18d3      	adds	r3, r2, r3
 800776e:	4a3b      	ldr	r2, [pc, #236]	@ (800785c <Enter_Stop_Mode+0x14c>)
 8007770:	0011      	movs	r1, r2
 8007772:	0018      	movs	r0, r3
 8007774:	f7ff ff50 	bl	8007618 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8007778:	4b38      	ldr	r3, [pc, #224]	@ (800785c <Enter_Stop_Mode+0x14c>)
 800777a:	4a39      	ldr	r2, [pc, #228]	@ (8007860 <Enter_Stop_Mode+0x150>)
 800777c:	4934      	ldr	r1, [pc, #208]	@ (8007850 <Enter_Stop_Mode+0x140>)
 800777e:	2002      	movs	r0, #2
 8007780:	f009 f900 	bl	8010984 <CreateLine>
  HAL_Delay(100);
 8007784:	2064      	movs	r0, #100	@ 0x64
 8007786:	f009 fd53 	bl	8011230 <HAL_Delay>
  HAL_SuspendTick();
 800778a:	f009 fd75 	bl	8011278 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800778e:	1dbb      	adds	r3, r7, #6
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	0018      	movs	r0, r3
 8007794:	f7ff ff70 	bl	8007678 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007798:	2101      	movs	r1, #1
 800779a:	2001      	movs	r0, #1
 800779c:	f010 f894 	bl	80178c8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80077a0:	f002 fd3a 	bl	800a218 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 80077a4:	f009 fd76 	bl	8011294 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 80077a8:	1dbb      	adds	r3, r7, #6
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	0018      	movs	r0, r3
 80077ae:	f003 fe47 	bl	800b440 <sen5x_enable>
 80077b2:	1e03      	subs	r3, r0, #0
 80077b4:	d01e      	beq.n	80077f4 <Enter_Stop_Mode+0xe4>
    showTime();
 80077b6:	f7ff fc5f 	bl	8007078 <showTime>
    set_light_on_state();
 80077ba:	f004 fb4f 	bl	800be5c <set_light_on_state>
    if (!userToggle) {
 80077be:	4b29      	ldr	r3, [pc, #164]	@ (8007864 <Enter_Stop_Mode+0x154>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	4053      	eors	r3, r2
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d013      	beq.n	80077f4 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 80077cc:	201c      	movs	r0, #28
 80077ce:	f7ff ff53 	bl	8007678 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80077d2:	4a20      	ldr	r2, [pc, #128]	@ (8007854 <Enter_Stop_Mode+0x144>)
 80077d4:	4920      	ldr	r1, [pc, #128]	@ (8007858 <Enter_Stop_Mode+0x148>)
 80077d6:	231c      	movs	r3, #28
 80077d8:	2003      	movs	r0, #3
 80077da:	f009 f8d3 	bl	8010984 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80077de:	2101      	movs	r1, #1
 80077e0:	2001      	movs	r0, #1
 80077e2:	f010 f871 	bl	80178c8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80077e6:	f002 fd17 	bl	800a218 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80077ea:	f009 fd53 	bl	8011294 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80077ee:	2000      	movs	r0, #0
 80077f0:	f003 fe04 	bl	800b3fc <setsen5xReadTimer>
    }
  }
  showTime();
 80077f4:	f7ff fc40 	bl	8007078 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 80077f8:	f003 fa9a 	bl	800ad30 <ResetDBACalculator>
  ResetSGP40samplecounter();
 80077fc:	f006 f98a 	bl	800db14 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8007800:	2000      	movs	r0, #0
 8007802:	f003 fe0d 	bl	800b420 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8007806:	4b18      	ldr	r3, [pc, #96]	@ (8007868 <Enter_Stop_Mode+0x158>)
 8007808:	0018      	movs	r0, r3
 800780a:	f7fb ff2b 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800780e:	201e      	movs	r0, #30
 8007810:	f006 f96e 	bl	800daf0 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8007814:	2000      	movs	r0, #0
 8007816:	f009 fa79 	bl	8010d0c <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800781a:	203c      	movs	r0, #60	@ 0x3c
 800781c:	f000 fb72 	bl	8007f04 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8007820:	205a      	movs	r0, #90	@ 0x5a
 8007822:	f000 ff6d 	bl	8008700 <setBMP280TimeStamp>
  setMICTimeStamp(0);
 8007826:	2000      	movs	r0, #0
 8007828:	f003 fa70 	bl	800ad0c <setMICTimeStamp>
  ESPTransmitDone = false;
 800782c:	4b0f      	ldr	r3, [pc, #60]	@ (800786c <Enter_Stop_Mode+0x15c>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8007832:	f009 fcf3 	bl	801121c <HAL_GetTick>
 8007836:	0003      	movs	r3, r0
 8007838:	4a0d      	ldr	r2, [pc, #52]	@ (8007870 <Enter_Stop_Mode+0x160>)
 800783a:	189a      	adds	r2, r3, r2
 800783c:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <Enter_Stop_Mode+0x164>)
 800783e:	601a      	str	r2, [r3, #0]
}
 8007840:	46c0      	nop			@ (mov r8, r8)
 8007842:	46bd      	mov	sp, r7
 8007844:	b002      	add	sp, #8
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000e49 	.word	0x20000e49
 800784c:	08026fcc 	.word	0x08026fcc
 8007850:	08026fe4 	.word	0x08026fe4
 8007854:	08026fe8 	.word	0x08026fe8
 8007858:	08026e90 	.word	0x08026e90
 800785c:	20000aec 	.word	0x20000aec
 8007860:	0802700c 	.word	0x0802700c
 8007864:	20001dda 	.word	0x20001dda
 8007868:	00001194 	.word	0x00001194
 800786c:	20000568 	.word	0x20000568
 8007870:	00000bb8 	.word	0x00000bb8
 8007874:	20000da0 	.word	0x20000da0

08007878 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8007880:	4b03      	ldr	r3, [pc, #12]	@ (8007890 <InitClock+0x18>)
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b002      	add	sp, #8
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	20000ae4 	.word	0x20000ae4

08007894 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	78db      	ldrb	r3, [r3, #3]
 80078a2:	001a      	movs	r2, r3
 80078a4:	0013      	movs	r3, r2
 80078a6:	025b      	lsls	r3, r3, #9
 80078a8:	189b      	adds	r3, r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	189b      	adds	r3, r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	011a      	lsls	r2, r3, #4
 80078b4:	1ad2      	subs	r2, r2, r3
 80078b6:	01d3      	lsls	r3, r2, #7
 80078b8:	001a      	movs	r2, r3
 80078ba:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e028      	b.n	8007914 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4a53      	ldr	r2, [pc, #332]	@ (8007a14 <makeTime+0x180>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	db21      	blt.n	800790e <makeTime+0x7a>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4a52      	ldr	r2, [pc, #328]	@ (8007a18 <makeTime+0x184>)
 80078ce:	4694      	mov	ip, r2
 80078d0:	4463      	add	r3, ip
 80078d2:	001a      	movs	r2, r3
 80078d4:	2303      	movs	r3, #3
 80078d6:	4013      	ands	r3, r2
 80078d8:	d119      	bne.n	800790e <makeTime+0x7a>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4a4e      	ldr	r2, [pc, #312]	@ (8007a18 <makeTime+0x184>)
 80078de:	4694      	mov	ip, r2
 80078e0:	4463      	add	r3, ip
 80078e2:	2164      	movs	r1, #100	@ 0x64
 80078e4:	0018      	movs	r0, r3
 80078e6:	f7f8 fdcd 	bl	8000484 <__aeabi_idivmod>
 80078ea:	1e0b      	subs	r3, r1, #0
 80078ec:	d10a      	bne.n	8007904 <makeTime+0x70>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a49      	ldr	r2, [pc, #292]	@ (8007a18 <makeTime+0x184>)
 80078f2:	4694      	mov	ip, r2
 80078f4:	4463      	add	r3, ip
 80078f6:	22c8      	movs	r2, #200	@ 0xc8
 80078f8:	0051      	lsls	r1, r2, #1
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7f8 fdc2 	bl	8000484 <__aeabi_idivmod>
 8007900:	1e0b      	subs	r3, r1, #0
 8007902:	d104      	bne.n	800790e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a45      	ldr	r2, [pc, #276]	@ (8007a1c <makeTime+0x188>)
 8007908:	4694      	mov	ip, r2
 800790a:	4463      	add	r3, ip
 800790c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3301      	adds	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	001a      	movs	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	4293      	cmp	r3, r2
 800791e:	dbd0      	blt.n	80078c2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8007920:	2301      	movs	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e03c      	b.n	80079a0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d125      	bne.n	8007978 <makeTime+0xe4>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	78db      	ldrb	r3, [r3, #3]
 8007930:	4a39      	ldr	r2, [pc, #228]	@ (8007a18 <makeTime+0x184>)
 8007932:	4694      	mov	ip, r2
 8007934:	4463      	add	r3, ip
 8007936:	001a      	movs	r2, r3
 8007938:	2303      	movs	r3, #3
 800793a:	4013      	ands	r3, r2
 800793c:	d11c      	bne.n	8007978 <makeTime+0xe4>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	78db      	ldrb	r3, [r3, #3]
 8007942:	4a35      	ldr	r2, [pc, #212]	@ (8007a18 <makeTime+0x184>)
 8007944:	4694      	mov	ip, r2
 8007946:	4463      	add	r3, ip
 8007948:	2164      	movs	r1, #100	@ 0x64
 800794a:	0018      	movs	r0, r3
 800794c:	f7f8 fd9a 	bl	8000484 <__aeabi_idivmod>
 8007950:	1e0b      	subs	r3, r1, #0
 8007952:	d10b      	bne.n	800796c <makeTime+0xd8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	78db      	ldrb	r3, [r3, #3]
 8007958:	4a2f      	ldr	r2, [pc, #188]	@ (8007a18 <makeTime+0x184>)
 800795a:	4694      	mov	ip, r2
 800795c:	4463      	add	r3, ip
 800795e:	22c8      	movs	r2, #200	@ 0xc8
 8007960:	0051      	lsls	r1, r2, #1
 8007962:	0018      	movs	r0, r3
 8007964:	f7f8 fd8e 	bl	8000484 <__aeabi_idivmod>
 8007968:	1e0b      	subs	r3, r1, #0
 800796a:	d105      	bne.n	8007978 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a20 <makeTime+0x18c>)
 8007970:	4694      	mov	ip, r2
 8007972:	4463      	add	r3, ip
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	e010      	b.n	800799a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	3b01      	subs	r3, #1
 800797c:	4a29      	ldr	r2, [pc, #164]	@ (8007a24 <makeTime+0x190>)
 800797e:	5cd3      	ldrb	r3, [r2, r3]
 8007980:	001a      	movs	r2, r3
 8007982:	0013      	movs	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	189b      	adds	r3, r3, r2
 8007988:	011a      	lsls	r2, r3, #4
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	0113      	lsls	r3, r2, #4
 800798e:	1a9b      	subs	r3, r3, r2
 8007990:	01db      	lsls	r3, r3, #7
 8007992:	001a      	movs	r2, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	189b      	adds	r3, r3, r2
 8007998:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	001a      	movs	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	dbbc      	blt.n	8007926 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	789b      	ldrb	r3, [r3, #2]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	001a      	movs	r2, r3
 80079b4:	0013      	movs	r3, r2
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	189b      	adds	r3, r3, r2
 80079ba:	011a      	lsls	r2, r3, #4
 80079bc:	1ad2      	subs	r2, r2, r3
 80079be:	0113      	lsls	r3, r2, #4
 80079c0:	1a9b      	subs	r3, r3, r2
 80079c2:	01db      	lsls	r3, r3, #7
 80079c4:	001a      	movs	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	189b      	adds	r3, r3, r2
 80079ca:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	001a      	movs	r2, r3
 80079d2:	0013      	movs	r3, r2
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	011a      	lsls	r2, r3, #4
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	0113      	lsls	r3, r2, #4
 80079de:	001a      	movs	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	001a      	movs	r2, r3
 80079ec:	0013      	movs	r3, r2
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	001a      	movs	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	189b      	adds	r3, r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	789b      	ldrb	r3, [r3, #2]
 8007a00:	001a      	movs	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	189b      	adds	r3, r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]
  return seconds;
 8007a08:	68bb      	ldr	r3, [r7, #8]
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b004      	add	sp, #16
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	46c0      	nop			@ (mov r8, r8)
 8007a14:	fffff84f 	.word	0xfffff84f
 8007a18:	000007b2 	.word	0x000007b2
 8007a1c:	00015180 	.word	0x00015180
 8007a20:	00263b80 	.word	0x00263b80
 8007a24:	08028f08 	.word	0x08028f08

08007a28 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007a28:	b590      	push	{r4, r7, lr}
 8007a2a:	b089      	sub	sp, #36	@ 0x24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	213c      	movs	r1, #60	@ 0x3c
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7f8 fc37 	bl	80002b0 <__aeabi_uidivmod>
 8007a42:	000b      	movs	r3, r1
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	213c      	movs	r1, #60	@ 0x3c
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f7f8 fba8 	bl	80001a4 <__udivsi3>
 8007a54:	0003      	movs	r3, r0
 8007a56:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	213c      	movs	r1, #60	@ 0x3c
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f7f8 fc27 	bl	80002b0 <__aeabi_uidivmod>
 8007a62:	000b      	movs	r3, r1
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	213c      	movs	r1, #60	@ 0x3c
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f7f8 fb98 	bl	80001a4 <__udivsi3>
 8007a74:	0003      	movs	r3, r0
 8007a76:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2118      	movs	r1, #24
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f7f8 fc17 	bl	80002b0 <__aeabi_uidivmod>
 8007a82:	000b      	movs	r3, r1
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	2118      	movs	r1, #24
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f7f8 fb88 	bl	80001a4 <__udivsi3>
 8007a94:	0003      	movs	r3, r0
 8007a96:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2107      	movs	r1, #7
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7f8 fc06 	bl	80002b0 <__aeabi_uidivmod>
 8007aa4:	000b      	movs	r3, r1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	701a      	strb	r2, [r3, #0]
  year = 0;
 8007ab0:	231f      	movs	r3, #31
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
  days = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007abc:	e005      	b.n	8007aca <breakPosixTime+0xa2>
    year++;
 8007abe:	211f      	movs	r1, #31
 8007ac0:	187b      	adds	r3, r7, r1
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	187b      	adds	r3, r7, r1
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007aca:	241f      	movs	r4, #31
 8007acc:	193b      	adds	r3, r7, r4
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	4a64      	ldr	r2, [pc, #400]	@ (8007c64 <breakPosixTime+0x23c>)
 8007ad2:	4694      	mov	ip, r2
 8007ad4:	4463      	add	r3, ip
 8007ad6:	001a      	movs	r2, r3
 8007ad8:	2303      	movs	r3, #3
 8007ada:	4013      	ands	r3, r2
 8007adc:	d119      	bne.n	8007b12 <breakPosixTime+0xea>
 8007ade:	193b      	adds	r3, r7, r4
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4a60      	ldr	r2, [pc, #384]	@ (8007c64 <breakPosixTime+0x23c>)
 8007ae4:	4694      	mov	ip, r2
 8007ae6:	4463      	add	r3, ip
 8007ae8:	2164      	movs	r1, #100	@ 0x64
 8007aea:	0018      	movs	r0, r3
 8007aec:	f7f8 fcca 	bl	8000484 <__aeabi_idivmod>
 8007af0:	1e0b      	subs	r3, r1, #0
 8007af2:	d10b      	bne.n	8007b0c <breakPosixTime+0xe4>
 8007af4:	193b      	adds	r3, r7, r4
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	4a5a      	ldr	r2, [pc, #360]	@ (8007c64 <breakPosixTime+0x23c>)
 8007afa:	4694      	mov	ip, r2
 8007afc:	4463      	add	r3, ip
 8007afe:	22c8      	movs	r2, #200	@ 0xc8
 8007b00:	0051      	lsls	r1, r2, #1
 8007b02:	0018      	movs	r0, r3
 8007b04:	f7f8 fcbe 	bl	8000484 <__aeabi_idivmod>
 8007b08:	1e0b      	subs	r3, r1, #0
 8007b0a:	d102      	bne.n	8007b12 <breakPosixTime+0xea>
 8007b0c:	23b7      	movs	r3, #183	@ 0xb7
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	e001      	b.n	8007b16 <breakPosixTime+0xee>
 8007b12:	236e      	movs	r3, #110	@ 0x6e
 8007b14:	33ff      	adds	r3, #255	@ 0xff
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	617b      	str	r3, [r7, #20]
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d9cc      	bls.n	8007abe <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	241f      	movs	r4, #31
 8007b28:	193a      	adds	r2, r7, r4
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8007b2e:	193b      	adds	r3, r7, r4
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4a4c      	ldr	r2, [pc, #304]	@ (8007c64 <breakPosixTime+0x23c>)
 8007b34:	4694      	mov	ip, r2
 8007b36:	4463      	add	r3, ip
 8007b38:	001a      	movs	r2, r3
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	d119      	bne.n	8007b74 <breakPosixTime+0x14c>
 8007b40:	193b      	adds	r3, r7, r4
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	4a47      	ldr	r2, [pc, #284]	@ (8007c64 <breakPosixTime+0x23c>)
 8007b46:	4694      	mov	ip, r2
 8007b48:	4463      	add	r3, ip
 8007b4a:	2164      	movs	r1, #100	@ 0x64
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f7f8 fc99 	bl	8000484 <__aeabi_idivmod>
 8007b52:	1e0b      	subs	r3, r1, #0
 8007b54:	d10b      	bne.n	8007b6e <breakPosixTime+0x146>
 8007b56:	193b      	adds	r3, r7, r4
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	4a42      	ldr	r2, [pc, #264]	@ (8007c64 <breakPosixTime+0x23c>)
 8007b5c:	4694      	mov	ip, r2
 8007b5e:	4463      	add	r3, ip
 8007b60:	22c8      	movs	r2, #200	@ 0xc8
 8007b62:	0051      	lsls	r1, r2, #1
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7f8 fc8d 	bl	8000484 <__aeabi_idivmod>
 8007b6a:	1e0b      	subs	r3, r1, #0
 8007b6c:	d102      	bne.n	8007b74 <breakPosixTime+0x14c>
 8007b6e:	23b7      	movs	r3, #183	@ 0xb7
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	e001      	b.n	8007b78 <breakPosixTime+0x150>
 8007b74:	236e      	movs	r3, #110	@ 0x6e
 8007b76:	33ff      	adds	r3, #255	@ 0xff
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	61bb      	str	r3, [r7, #24]

  days=0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  month=0;
 8007b8a:	211e      	movs	r1, #30
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007b92:	231d      	movs	r3, #29
 8007b94:	18fb      	adds	r3, r7, r3
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8007b9a:	187b      	adds	r3, r7, r1
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e048      	b.n	8007c34 <breakPosixTime+0x20c>
    if (month==1) { // february
 8007ba2:	231e      	movs	r3, #30
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d12a      	bne.n	8007c02 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8007bac:	241f      	movs	r4, #31
 8007bae:	193b      	adds	r3, r7, r4
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007c64 <breakPosixTime+0x23c>)
 8007bb4:	4694      	mov	ip, r2
 8007bb6:	4463      	add	r3, ip
 8007bb8:	001a      	movs	r2, r3
 8007bba:	2303      	movs	r3, #3
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d11b      	bne.n	8007bf8 <breakPosixTime+0x1d0>
 8007bc0:	193b      	adds	r3, r7, r4
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4a27      	ldr	r2, [pc, #156]	@ (8007c64 <breakPosixTime+0x23c>)
 8007bc6:	4694      	mov	ip, r2
 8007bc8:	4463      	add	r3, ip
 8007bca:	2164      	movs	r1, #100	@ 0x64
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f7f8 fc59 	bl	8000484 <__aeabi_idivmod>
 8007bd2:	1e0b      	subs	r3, r1, #0
 8007bd4:	d10b      	bne.n	8007bee <breakPosixTime+0x1c6>
 8007bd6:	193b      	adds	r3, r7, r4
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	4a22      	ldr	r2, [pc, #136]	@ (8007c64 <breakPosixTime+0x23c>)
 8007bdc:	4694      	mov	ip, r2
 8007bde:	4463      	add	r3, ip
 8007be0:	22c8      	movs	r2, #200	@ 0xc8
 8007be2:	0051      	lsls	r1, r2, #1
 8007be4:	0018      	movs	r0, r3
 8007be6:	f7f8 fc4d 	bl	8000484 <__aeabi_idivmod>
 8007bea:	1e0b      	subs	r3, r1, #0
 8007bec:	d104      	bne.n	8007bf8 <breakPosixTime+0x1d0>
        monthLength=29;
 8007bee:	231d      	movs	r3, #29
 8007bf0:	18fb      	adds	r3, r7, r3
 8007bf2:	221d      	movs	r2, #29
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e00c      	b.n	8007c12 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007bf8:	231d      	movs	r3, #29
 8007bfa:	18fb      	adds	r3, r7, r3
 8007bfc:	221c      	movs	r2, #28
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	e007      	b.n	8007c12 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007c02:	231e      	movs	r3, #30
 8007c04:	18fb      	adds	r3, r7, r3
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	231d      	movs	r3, #29
 8007c0a:	18fb      	adds	r3, r7, r3
 8007c0c:	4916      	ldr	r1, [pc, #88]	@ (8007c68 <breakPosixTime+0x240>)
 8007c0e:	5c8a      	ldrb	r2, [r1, r2]
 8007c10:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007c12:	211d      	movs	r1, #29
 8007c14:	187b      	adds	r3, r7, r1
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d310      	bcc.n	8007c40 <breakPosixTime+0x218>
      time -= monthLength;
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007c28:	211e      	movs	r1, #30
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	187b      	adds	r3, r7, r1
 8007c30:	3201      	adds	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	231e      	movs	r3, #30
 8007c36:	18fb      	adds	r3, r7, r3
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b0b      	cmp	r3, #11
 8007c3c:	d9b1      	bls.n	8007ba2 <breakPosixTime+0x17a>
 8007c3e:	e000      	b.n	8007c42 <breakPosixTime+0x21a>
    } else {
        break;
 8007c40:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007c42:	231e      	movs	r3, #30
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	3301      	adds	r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	709a      	strb	r2, [r3, #2]
}
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b009      	add	sp, #36	@ 0x24
 8007c62:	bd90      	pop	{r4, r7, pc}
 8007c64:	000007b2 	.word	0x000007b2
 8007c68:	08028f08 	.word	0x08028f08

08007c6c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007c72:	003b      	movs	r3, r7
 8007c74:	0018      	movs	r0, r3
 8007c76:	2308      	movs	r3, #8
 8007c78:	001a      	movs	r2, r3
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f01a ffe0 	bl	8022c40 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007c80:	4b30      	ldr	r3, [pc, #192]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c82:	4a31      	ldr	r2, [pc, #196]	@ (8007d48 <MX_ADC_Init+0xdc>)
 8007c84:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c8e:	22c0      	movs	r2, #192	@ 0xc0
 8007c90:	0612      	lsls	r2, r2, #24
 8007c92:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007c94:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007ca0:	4b28      	ldr	r3, [pc, #160]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007ca6:	4b27      	ldr	r3, [pc, #156]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007cac:	4b25      	ldr	r3, [pc, #148]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cae:	2220      	movs	r2, #32
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007cb4:	4b23      	ldr	r3, [pc, #140]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cb6:	2221      	movs	r2, #33	@ 0x21
 8007cb8:	2101      	movs	r1, #1
 8007cba:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007cbc:	4b21      	ldr	r3, [pc, #132]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007cc2:	4b20      	ldr	r3, [pc, #128]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cc4:	22c2      	movs	r2, #194	@ 0xc2
 8007cc6:	32ff      	adds	r2, #255	@ 0xff
 8007cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8007cca:	4b1e      	ldr	r3, [pc, #120]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ccc:	222c      	movs	r2, #44	@ 0x2c
 8007cce:	2100      	movs	r1, #0
 8007cd0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8007cde:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007ce4:	4b17      	ldr	r3, [pc, #92]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007cea:	4b16      	ldr	r3, [pc, #88]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007cf0:	4b14      	ldr	r3, [pc, #80]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f009 fafa 	bl	80112ec <HAL_ADC_Init>
 8007cf8:	1e03      	subs	r3, r0, #0
 8007cfa:	d001      	beq.n	8007d00 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007cfc:	f002 fbdc 	bl	800a4b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007d00:	003b      	movs	r3, r7
 8007d02:	4a12      	ldr	r2, [pc, #72]	@ (8007d4c <MX_ADC_Init+0xe0>)
 8007d04:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007d06:	003b      	movs	r3, r7
 8007d08:	2280      	movs	r2, #128	@ 0x80
 8007d0a:	0152      	lsls	r2, r2, #5
 8007d0c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007d0e:	003a      	movs	r2, r7
 8007d10:	4b0c      	ldr	r3, [pc, #48]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007d12:	0011      	movs	r1, r2
 8007d14:	0018      	movs	r0, r3
 8007d16:	f009 fd59 	bl	80117cc <HAL_ADC_ConfigChannel>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d001      	beq.n	8007d22 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007d1e:	f002 fbcb 	bl	800a4b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007d22:	003b      	movs	r3, r7
 8007d24:	4a0a      	ldr	r2, [pc, #40]	@ (8007d50 <MX_ADC_Init+0xe4>)
 8007d26:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007d28:	003a      	movs	r2, r7
 8007d2a:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <MX_ADC_Init+0xd8>)
 8007d2c:	0011      	movs	r1, r2
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f009 fd4c 	bl	80117cc <HAL_ADC_ConfigChannel>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d001      	beq.n	8007d3c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007d38:	f002 fbbe 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007d3c:	46c0      	nop			@ (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b002      	add	sp, #8
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000b04 	.word	0x20000b04
 8007d48:	40012400 	.word	0x40012400
 8007d4c:	38004000 	.word	0x38004000
 8007d50:	3c008000 	.word	0x3c008000

08007d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b089      	sub	sp, #36	@ 0x24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d5c:	240c      	movs	r4, #12
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	0018      	movs	r0, r3
 8007d62:	2314      	movs	r3, #20
 8007d64:	001a      	movs	r2, r3
 8007d66:	2100      	movs	r1, #0
 8007d68:	f01a ff6a 	bl	8022c40 <memset>
  if(adcHandle->Instance==ADC1)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a14      	ldr	r2, [pc, #80]	@ (8007dc4 <HAL_ADC_MspInit+0x70>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d121      	bne.n	8007dba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007d76:	4b14      	ldr	r3, [pc, #80]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d7c:	2180      	movs	r1, #128	@ 0x80
 8007d7e:	0089      	lsls	r1, r1, #2
 8007d80:	430a      	orrs	r2, r1
 8007d82:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d84:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d8a:	2104      	movs	r1, #4
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d90:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc8 <HAL_ADC_MspInit+0x74>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	2204      	movs	r2, #4
 8007d96:	4013      	ands	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007d9c:	193b      	adds	r3, r7, r4
 8007d9e:	2230      	movs	r2, #48	@ 0x30
 8007da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007da2:	193b      	adds	r3, r7, r4
 8007da4:	2203      	movs	r2, #3
 8007da6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da8:	193b      	adds	r3, r7, r4
 8007daa:	2200      	movs	r2, #0
 8007dac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dae:	193b      	adds	r3, r7, r4
 8007db0:	4a06      	ldr	r2, [pc, #24]	@ (8007dcc <HAL_ADC_MspInit+0x78>)
 8007db2:	0019      	movs	r1, r3
 8007db4:	0010      	movs	r0, r2
 8007db6:	f00a fb27 	bl	8012408 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007dba:	46c0      	nop			@ (mov r8, r8)
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b009      	add	sp, #36	@ 0x24
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	46c0      	nop			@ (mov r8, r8)
 8007dc4:	40012400 	.word	0x40012400
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	50000800 	.word	0x50000800

08007dd0 <ReadRegister>:
static uint8_t airtemphumraw[7];
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6039      	str	r1, [r7, #0]
 8007dd8:	0011      	movs	r1, r2
 8007dda:	1dfb      	adds	r3, r7, #7
 8007ddc:	1c02      	adds	r2, r0, #0
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	1dbb      	adds	r3, r7, #6
 8007de2:	1c0a      	adds	r2, r1, #0
 8007de4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007de6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e10 <ReadRegister+0x40>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8007dee:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <ReadRegister+0x40>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	1dba      	adds	r2, r7, #6
 8007df4:	7814      	ldrb	r4, [r2, #0]
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	1dfa      	adds	r2, r7, #7
 8007dfa:	7810      	ldrb	r0, [r2, #0]
 8007dfc:	0022      	movs	r2, r4
 8007dfe:	4798      	blx	r3
 8007e00:	0003      	movs	r3, r0
 8007e02:	e000      	b.n	8007e06 <ReadRegister+0x36>
  }
  return false;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	0018      	movs	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b003      	add	sp, #12
 8007e0c:	bd90      	pop	{r4, r7, pc}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	20000b68 	.word	0x20000b68

08007e14 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e14:	b590      	push	{r4, r7, lr}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6039      	str	r1, [r7, #0]
 8007e1c:	0011      	movs	r1, r2
 8007e1e:	1dfb      	adds	r3, r7, #7
 8007e20:	1c02      	adds	r2, r0, #0
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	1dbb      	adds	r3, r7, #6
 8007e26:	1c0a      	adds	r2, r1, #0
 8007e28:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <WriteRegister+0x40>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8007e32:	4b08      	ldr	r3, [pc, #32]	@ (8007e54 <WriteRegister+0x40>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	1dba      	adds	r2, r7, #6
 8007e38:	7814      	ldrb	r4, [r2, #0]
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	1dfa      	adds	r2, r7, #7
 8007e3e:	7810      	ldrb	r0, [r2, #0]
 8007e40:	0022      	movs	r2, r4
 8007e42:	4798      	blx	r3
 8007e44:	0003      	movs	r3, r0
 8007e46:	e000      	b.n	8007e4a <WriteRegister+0x36>
  }
  return false;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b003      	add	sp, #12
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	46c0      	nop			@ (mov r8, r8)
 8007e54:	20000b6c 	.word	0x20000b6c

08007e58 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	000a      	movs	r2, r1
 8007e62:	1cfb      	adds	r3, r7, #3
 8007e64:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8007e66:	230f      	movs	r3, #15
 8007e68:	18fb      	adds	r3, r7, r3
 8007e6a:	22ff      	movs	r2, #255	@ 0xff
 8007e6c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007e6e:	230e      	movs	r3, #14
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e037      	b.n	8007ee8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007e78:	230e      	movs	r3, #14
 8007e7a:	18fb      	adds	r3, r7, r3
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	18d3      	adds	r3, r2, r3
 8007e82:	7819      	ldrb	r1, [r3, #0]
 8007e84:	220f      	movs	r2, #15
 8007e86:	18bb      	adds	r3, r7, r2
 8007e88:	18ba      	adds	r2, r7, r2
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	404a      	eors	r2, r1
 8007e8e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007e90:	230d      	movs	r3, #13
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	e01b      	b.n	8007ed2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8007e9a:	210f      	movs	r1, #15
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da09      	bge.n	8007eba <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8007ea6:	187b      	adds	r3, r7, r1
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	b25b      	sxtb	r3, r3
 8007eae:	2231      	movs	r2, #49	@ 0x31
 8007eb0:	4053      	eors	r3, r2
 8007eb2:	b25a      	sxtb	r2, r3
 8007eb4:	187b      	adds	r3, r7, r1
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e005      	b.n	8007ec6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8007eba:	230f      	movs	r3, #15
 8007ebc:	18fa      	adds	r2, r7, r3
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	18db      	adds	r3, r3, r3
 8007ec4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007ec6:	210d      	movs	r1, #13
 8007ec8:	187b      	adds	r3, r7, r1
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	187b      	adds	r3, r7, r1
 8007ece:	3201      	adds	r2, #1
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	230d      	movs	r3, #13
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	d9de      	bls.n	8007e9a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007edc:	210e      	movs	r1, #14
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	187b      	adds	r3, r7, r1
 8007ee4:	3201      	adds	r2, #1
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	230e      	movs	r3, #14
 8007eea:	18fa      	adds	r2, r7, r3
 8007eec:	1cfb      	adds	r3, r7, #3
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3c0      	bcc.n	8007e78 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8007ef6:	230f      	movs	r3, #15
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	781b      	ldrb	r3, [r3, #0]
}
 8007efc:	0018      	movs	r0, r3
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b004      	add	sp, #16
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8007f0c:	f009 f986 	bl	801121c <HAL_GetTick>
 8007f10:	0002      	movs	r2, r0
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	18d2      	adds	r2, r2, r3
 8007f16:	4b03      	ldr	r3, [pc, #12]	@ (8007f24 <setAHT20TimeStamp+0x20>)
 8007f18:	601a      	str	r2, [r3, #0]
}
 8007f1a:	46c0      	nop			@ (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b002      	add	sp, #8
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	46c0      	nop			@ (mov r8, r8)
 8007f24:	20000b60 	.word	0x20000b60

08007f28 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <AHT_Init+0x20>)
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007f38:	4b04      	ldr	r3, [pc, #16]	@ (8007f4c <AHT_Init+0x24>)
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
  return ;
 8007f3e:	46c0      	nop			@ (mov r8, r8)
}
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b002      	add	sp, #8
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	20000b68 	.word	0x20000b68
 8007f4c:	20000b6c 	.word	0x20000b6c

08007f50 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	0002      	movs	r2, r0
 8007f58:	1dfb      	adds	r3, r7, #7
 8007f5a:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8007f5c:	4b18      	ldr	r3, [pc, #96]	@ (8007fc0 <AHT20_register_reset+0x70>)
 8007f5e:	1dfa      	adds	r2, r7, #7
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8007f64:	4b16      	ldr	r3, [pc, #88]	@ (8007fc0 <AHT20_register_reset+0x70>)
 8007f66:	2203      	movs	r2, #3
 8007f68:	0019      	movs	r1, r3
 8007f6a:	2038      	movs	r0, #56	@ 0x38
 8007f6c:	f7ff ff52 	bl	8007e14 <WriteRegister>
  HAL_Delay(10);
 8007f70:	200a      	movs	r0, #10
 8007f72:	f009 f95d 	bl	8011230 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8007f76:	4b13      	ldr	r3, [pc, #76]	@ (8007fc4 <AHT20_register_reset+0x74>)
 8007f78:	2203      	movs	r2, #3
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	2038      	movs	r0, #56	@ 0x38
 8007f7e:	f7ff ff27 	bl	8007dd0 <ReadRegister>
  HAL_Delay(10);
 8007f82:	200a      	movs	r0, #10
 8007f84:	f009 f954 	bl	8011230 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8007f88:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc4 <AHT20_register_reset+0x74>)
 8007f8a:	22b0      	movs	r2, #176	@ 0xb0
 8007f8c:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <AHT20_register_reset+0x74>)
 8007f90:	789b      	ldrb	r3, [r3, #2]
 8007f92:	0018      	movs	r0, r3
 8007f94:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc4 <AHT20_register_reset+0x74>)
 8007f96:	78db      	ldrb	r3, [r3, #3]
 8007f98:	4a0b      	ldr	r2, [pc, #44]	@ (8007fc8 <AHT20_register_reset+0x78>)
 8007f9a:	490c      	ldr	r1, [pc, #48]	@ (8007fcc <AHT20_register_reset+0x7c>)
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	2003      	movs	r0, #3
 8007fa2:	f008 fcef 	bl	8010984 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8007fa6:	4b07      	ldr	r3, [pc, #28]	@ (8007fc4 <AHT20_register_reset+0x74>)
 8007fa8:	2203      	movs	r2, #3
 8007faa:	0019      	movs	r1, r3
 8007fac:	2038      	movs	r0, #56	@ 0x38
 8007fae:	f7ff ff31 	bl	8007e14 <WriteRegister>
  HAL_Delay(10);
 8007fb2:	200a      	movs	r0, #10
 8007fb4:	f009 f93c 	bl	8011230 <HAL_Delay>
}
 8007fb8:	46c0      	nop			@ (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20000094 	.word	0x20000094
 8007fc4:	20000b70 	.word	0x20000b70
 8007fc8:	0802702c 	.word	0x0802702c
 8007fcc:	0802707c 	.word	0x0802707c

08007fd0 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8007fd4:	201b      	movs	r0, #27
 8007fd6:	f7ff ffbb 	bl	8007f50 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8007fda:	201c      	movs	r0, #28
 8007fdc:	f7ff ffb8 	bl	8007f50 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8007fe0:	201e      	movs	r0, #30
 8007fe2:	f7ff ffb5 	bl	8007f50 <AHT20_register_reset>
}
 8007fe6:	46c0      	nop			@ (mov r8, r8)
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <AHT20_init>:

bool AHT20_init(void) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
//  if (IsDeviceReady(AHT20_ADDRESS)) {
//    Debug("AHTxx device responds on address 0x%02X", AHT20_ADDRESS);
    AHT20TimeStamp = HAL_GetTick() + 50;
 8007ff0:	f009 f914 	bl	801121c <HAL_GetTick>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	3332      	adds	r3, #50	@ 0x32
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8008064 <AHT20_init+0x78>)
 8007ffc:	601a      	str	r2, [r3, #0]
    WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8007ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8008068 <AHT20_init+0x7c>)
 8008000:	2201      	movs	r2, #1
 8008002:	0019      	movs	r1, r3
 8008004:	2038      	movs	r0, #56	@ 0x38
 8008006:	f7ff ff05 	bl	8007e14 <WriteRegister>
    HAL_Delay(5);
 800800a:	2005      	movs	r0, #5
 800800c:	f009 f910 	bl	8011230 <HAL_Delay>
    airtemphumraw[0] = 0; // clear the buffer
 8008010:	4b16      	ldr	r3, [pc, #88]	@ (800806c <AHT20_init+0x80>)
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
    ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <AHT20_init+0x80>)
 8008018:	2201      	movs	r2, #1
 800801a:	0019      	movs	r1, r3
 800801c:	2038      	movs	r0, #56	@ 0x38
 800801e:	f7ff fed7 	bl	8007dd0 <ReadRegister>
    HAL_Delay(5);
 8008022:	2005      	movs	r0, #5
 8008024:	f009 f904 	bl	8011230 <HAL_Delay>
    Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8008028:	4b10      	ldr	r3, [pc, #64]	@ (800806c <AHT20_init+0x80>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4a10      	ldr	r2, [pc, #64]	@ (8008070 <AHT20_init+0x84>)
 800802e:	4911      	ldr	r1, [pc, #68]	@ (8008074 <AHT20_init+0x88>)
 8008030:	2003      	movs	r0, #3
 8008032:	f008 fca7 	bl	8010984 <CreateLine>
    if ((airtemphumraw[0] & 0x18) != 0x18) {
 8008036:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <AHT20_init+0x80>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	001a      	movs	r2, r3
 800803c:	2318      	movs	r3, #24
 800803e:	4013      	ands	r3, r2
 8008040:	2b18      	cmp	r3, #24
 8008042:	d00a      	beq.n	800805a <AHT20_init+0x6e>
      WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <AHT20_init+0x8c>)
 8008046:	2203      	movs	r2, #3
 8008048:	0019      	movs	r1, r3
 800804a:	2038      	movs	r0, #56	@ 0x38
 800804c:	f7ff fee2 	bl	8007e14 <WriteRegister>
      HAL_Delay(10);
 8008050:	200a      	movs	r0, #10
 8008052:	f009 f8ed 	bl	8011230 <HAL_Delay>
      AHT20_Start_Init();
 8008056:	f7ff ffbb 	bl	8007fd0 <AHT20_Start_Init>
    }
    return true;
 800805a:	2301      	movs	r3, #1
//  }
//  return false;
}
 800805c:	0018      	movs	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	46c0      	nop			@ (mov r8, r8)
 8008064:	20000b60 	.word	0x20000b60
 8008068:	20000090 	.word	0x20000090
 800806c:	20000b70 	.word	0x20000b70
 8008070:	08027080 	.word	0x08027080
 8008074:	0802707c 	.word	0x0802707c
 8008078:	20000084 	.word	0x20000084

0800807c <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800807c:	b580      	push	{r7, lr}
 800807e:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008080:	4b0c      	ldr	r3, [pc, #48]	@ (80080b4 <AHT20_read_status+0x38>)
 8008082:	2201      	movs	r2, #1
 8008084:	0019      	movs	r1, r3
 8008086:	2038      	movs	r0, #56	@ 0x38
 8008088:	f7ff fec4 	bl	8007e14 <WriteRegister>
  HAL_Delay(5);
 800808c:	2005      	movs	r0, #5
 800808e:	f009 f8cf 	bl	8011230 <HAL_Delay>
  airtemphumraw[0] = 0;
 8008092:	4b09      	ldr	r3, [pc, #36]	@ (80080b8 <AHT20_read_status+0x3c>)
 8008094:	2200      	movs	r2, #0
 8008096:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8008098:	4b07      	ldr	r3, [pc, #28]	@ (80080b8 <AHT20_read_status+0x3c>)
 800809a:	2201      	movs	r2, #1
 800809c:	0019      	movs	r1, r3
 800809e:	2038      	movs	r0, #56	@ 0x38
 80080a0:	f7ff fe96 	bl	8007dd0 <ReadRegister>
  HAL_Delay(5);
 80080a4:	2005      	movs	r0, #5
 80080a6:	f009 f8c3 	bl	8011230 <HAL_Delay>
  return airtemphumraw[0];
 80080aa:	4b03      	ldr	r3, [pc, #12]	@ (80080b8 <AHT20_read_status+0x3c>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
}
 80080ae:	0018      	movs	r0, r3
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000090 	.word	0x20000090
 80080b8:	20000b70 	.word	0x20000b70

080080bc <AHT20_calibration_start>:

bool AHT20_calibration_start() {
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 80080c2:	1dfc      	adds	r4, r7, #7
 80080c4:	4b10      	ldr	r3, [pc, #64]	@ (8008108 <AHT20_calibration_start+0x4c>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	0019      	movs	r1, r3
 80080ca:	2038      	movs	r0, #56	@ 0x38
 80080cc:	f7ff fea2 	bl	8007e14 <WriteRegister>
 80080d0:	0003      	movs	r3, r0
 80080d2:	7023      	strb	r3, [r4, #0]
  if (!response) {
 80080d4:	1dfb      	adds	r3, r7, #7
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2201      	movs	r2, #1
 80080da:	4053      	eors	r3, r2
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <AHT20_calibration_start+0x32>
    Error("AHT20 Write error during calibaration");
 80080e2:	4a0a      	ldr	r2, [pc, #40]	@ (800810c <AHT20_calibration_start+0x50>)
 80080e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008110 <AHT20_calibration_start+0x54>)
 80080e6:	0019      	movs	r1, r3
 80080e8:	2001      	movs	r0, #1
 80080ea:	f008 fc4b 	bl	8010984 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 80080ee:	f009 f895 	bl	801121c <HAL_GetTick>
 80080f2:	0003      	movs	r3, r0
 80080f4:	3332      	adds	r3, #50	@ 0x32
 80080f6:	001a      	movs	r2, r3
 80080f8:	4b06      	ldr	r3, [pc, #24]	@ (8008114 <AHT20_calibration_start+0x58>)
 80080fa:	601a      	str	r2, [r3, #0]
  return response;
 80080fc:	1dfb      	adds	r3, r7, #7
 80080fe:	781b      	ldrb	r3, [r3, #0]
}
 8008100:	0018      	movs	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	b003      	add	sp, #12
 8008106:	bd90      	pop	{r4, r7, pc}
 8008108:	20000090 	.word	0x20000090
 800810c:	080270a8 	.word	0x080270a8
 8008110:	080270d0 	.word	0x080270d0
 8008114:	20000b60 	.word	0x20000b60

08008118 <AHT20_calibration_complete>:

bool AHT20_calibration_complete(void) {
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  airtemphumraw[0] = 0; // clear the buffer
 800811c:	4b19      	ldr	r3, [pc, #100]	@ (8008184 <AHT20_calibration_complete+0x6c>)
 800811e:	2200      	movs	r2, #0
 8008120:	701a      	strb	r2, [r3, #0]
  if (!ReadRegister(AHT20_ADDRESS, airtemphumraw, 1)) {
 8008122:	4b18      	ldr	r3, [pc, #96]	@ (8008184 <AHT20_calibration_complete+0x6c>)
 8008124:	2201      	movs	r2, #1
 8008126:	0019      	movs	r1, r3
 8008128:	2038      	movs	r0, #56	@ 0x38
 800812a:	f7ff fe51 	bl	8007dd0 <ReadRegister>
 800812e:	0003      	movs	r3, r0
 8008130:	001a      	movs	r2, r3
 8008132:	2301      	movs	r3, #1
 8008134:	4053      	eors	r3, r2
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <AHT20_calibration_complete+0x34>
    Error("AHT20 Read error during calibaration");
 800813c:	4a12      	ldr	r2, [pc, #72]	@ (8008188 <AHT20_calibration_complete+0x70>)
 800813e:	4b13      	ldr	r3, [pc, #76]	@ (800818c <AHT20_calibration_complete+0x74>)
 8008140:	0019      	movs	r1, r3
 8008142:	2001      	movs	r0, #1
 8008144:	f008 fc1e 	bl	8010984 <CreateLine>
    return false;
 8008148:	2300      	movs	r3, #0
 800814a:	e018      	b.n	800817e <AHT20_calibration_complete+0x66>
  }
  HAL_Delay(10);  // wait to be sure for completing the DMA transfer :(
 800814c:	200a      	movs	r0, #10
 800814e:	f009 f86f 	bl	8011230 <HAL_Delay>
  if (airtemphumraw[0] ==0xff) {
 8008152:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <AHT20_calibration_complete+0x6c>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	2bff      	cmp	r3, #255	@ 0xff
 8008158:	d102      	bne.n	8008160 <AHT20_calibration_complete+0x48>
    airtemphumraw[0] = 0;
 800815a:	4b0a      	ldr	r3, [pc, #40]	@ (8008184 <AHT20_calibration_complete+0x6c>)
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
  }
//  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
 8008160:	f009 f85c 	bl	801121c <HAL_GetTick>
 8008164:	0003      	movs	r3, r0
 8008166:	33c8      	adds	r3, #200	@ 0xc8
 8008168:	001a      	movs	r2, r3
 800816a:	4b09      	ldr	r3, [pc, #36]	@ (8008190 <AHT20_calibration_complete+0x78>)
 800816c:	601a      	str	r2, [r3, #0]
  return (airtemphumraw[0] & 0x08);
 800816e:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <AHT20_calibration_complete+0x6c>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	001a      	movs	r2, r3
 8008174:	2308      	movs	r3, #8
 8008176:	4013      	ands	r3, r2
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	4193      	sbcs	r3, r2
 800817c:	b2db      	uxtb	r3, r3
}
 800817e:	0018      	movs	r0, r3
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000b70 	.word	0x20000b70
 8008188:	080270d4 	.word	0x080270d4
 800818c:	080270d0 	.word	0x080270d0
 8008190:	20000b60 	.word	0x20000b60

08008194 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 8008198:	4a0a      	ldr	r2, [pc, #40]	@ (80081c4 <AHT20_DeviceConnected+0x30>)
 800819a:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <AHT20_DeviceConnected+0x34>)
 800819c:	0019      	movs	r1, r3
 800819e:	2003      	movs	r0, #3
 80081a0:	f008 fbf0 	bl	8010984 <CreateLine>
   AHT20_init();
 80081a4:	f7ff ff22 	bl	8007fec <AHT20_init>
   HAL_Delay(10);
 80081a8:	200a      	movs	r0, #10
 80081aa:	f009 f841 	bl	8011230 <HAL_Delay>
   AHT20_calibration_start();
 80081ae:	f7ff ff85 	bl	80080bc <AHT20_calibration_start>
   HAL_Delay(10);
 80081b2:	200a      	movs	r0, #10
 80081b4:	f009 f83c 	bl	8011230 <HAL_Delay>
   return AHT20_calibration_complete();
 80081b8:	f7ff ffae 	bl	8008118 <AHT20_calibration_complete>
 80081bc:	0003      	movs	r3, r0
 }
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	080270fc 	.word	0x080270fc
 80081c8:	0802707c 	.word	0x0802707c

080081cc <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 80081d2:	1dfc      	adds	r4, r7, #7
 80081d4:	4b10      	ldr	r3, [pc, #64]	@ (8008218 <AHT20_StartMeasurement+0x4c>)
 80081d6:	2203      	movs	r2, #3
 80081d8:	0019      	movs	r1, r3
 80081da:	2038      	movs	r0, #56	@ 0x38
 80081dc:	f7ff fe1a 	bl	8007e14 <WriteRegister>
 80081e0:	0003      	movs	r3, r0
 80081e2:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2201      	movs	r2, #1
 80081ea:	4053      	eors	r3, r2
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 80081f2:	4a0a      	ldr	r2, [pc, #40]	@ (800821c <AHT20_StartMeasurement+0x50>)
 80081f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <AHT20_StartMeasurement+0x54>)
 80081f6:	0019      	movs	r1, r3
 80081f8:	2001      	movs	r0, #1
 80081fa:	f008 fbc3 	bl	8010984 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 100;
 80081fe:	f009 f80d 	bl	801121c <HAL_GetTick>
 8008202:	0003      	movs	r3, r0
 8008204:	3364      	adds	r3, #100	@ 0x64
 8008206:	001a      	movs	r2, r3
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <AHT20_StartMeasurement+0x58>)
 800820a:	601a      	str	r2, [r3, #0]
  return response;
 800820c:	1dfb      	adds	r3, r7, #7
 800820e:	781b      	ldrb	r3, [r3, #0]
}
 8008210:	0018      	movs	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	b003      	add	sp, #12
 8008216:	bd90      	pop	{r4, r7, pc}
 8008218:	2000008c 	.word	0x2000008c
 800821c:	08027114 	.word	0x08027114
 8008220:	080270d0 	.word	0x080270d0
 8008224:	20000b60 	.word	0x20000b60

08008228 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
  if ((AHT20_read_status() & 0x80)==0x80) {
 800822e:	f7ff ff25 	bl	800807c <AHT20_read_status>
 8008232:	0003      	movs	r3, r0
 8008234:	001a      	movs	r2, r3
 8008236:	2380      	movs	r3, #128	@ 0x80
 8008238:	4013      	ands	r3, r2
 800823a:	2b80      	cmp	r3, #128	@ 0x80
 800823c:	d107      	bne.n	800824e <AHT20_GetMeasurementValues+0x26>
    Debug("AHT20 Device busy, waiting for results");
 800823e:	4a0f      	ldr	r2, [pc, #60]	@ (800827c <AHT20_GetMeasurementValues+0x54>)
 8008240:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <AHT20_GetMeasurementValues+0x58>)
 8008242:	0019      	movs	r1, r3
 8008244:	2003      	movs	r0, #3
 8008246:	f008 fb9d 	bl	8010984 <CreateLine>
    return false;
 800824a:	2300      	movs	r3, #0
 800824c:	e011      	b.n	8008272 <AHT20_GetMeasurementValues+0x4a>
  }
  bool response = ReadRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800824e:	1dfc      	adds	r4, r7, #7
 8008250:	4b0c      	ldr	r3, [pc, #48]	@ (8008284 <AHT20_GetMeasurementValues+0x5c>)
 8008252:	2207      	movs	r2, #7
 8008254:	0019      	movs	r1, r3
 8008256:	2038      	movs	r0, #56	@ 0x38
 8008258:	f7ff fdba 	bl	8007dd0 <ReadRegister>
 800825c:	0003      	movs	r3, r0
 800825e:	7023      	strb	r3, [r4, #0]
  AHT20TimeStamp = HAL_GetTick() + 100;
 8008260:	f008 ffdc 	bl	801121c <HAL_GetTick>
 8008264:	0003      	movs	r3, r0
 8008266:	3364      	adds	r3, #100	@ 0x64
 8008268:	001a      	movs	r2, r3
 800826a:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <AHT20_GetMeasurementValues+0x60>)
 800826c:	601a      	str	r2, [r3, #0]
  return response;
 800826e:	1dfb      	adds	r3, r7, #7
 8008270:	781b      	ldrb	r3, [r3, #0]
}
 8008272:	0018      	movs	r0, r3
 8008274:	46bd      	mov	sp, r7
 8008276:	b003      	add	sp, #12
 8008278:	bd90      	pop	{r4, r7, pc}
 800827a:	46c0      	nop			@ (mov r8, r8)
 800827c:	08027140 	.word	0x08027140
 8008280:	0802707c 	.word	0x0802707c
 8008284:	20000b70 	.word	0x20000b70
 8008288:	20000b60 	.word	0x20000b60

0800828c <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800828c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800828e:	46c6      	mov	lr, r8
 8008290:	b500      	push	{lr}
 8008292:	b08a      	sub	sp, #40	@ 0x28
 8008294:	af06      	add	r7, sp, #24
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if (airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) {
 800829a:	4b53      	ldr	r3, [pc, #332]	@ (80083e8 <AHT20_Calculate+0x15c>)
 800829c:	799c      	ldrb	r4, [r3, #6]
 800829e:	4b52      	ldr	r3, [pc, #328]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082a0:	2106      	movs	r1, #6
 80082a2:	0018      	movs	r0, r3
 80082a4:	f7ff fdd8 	bl	8007e58 <CalculateCRC>
 80082a8:	0003      	movs	r3, r0
 80082aa:	429c      	cmp	r4, r3
 80082ac:	d038      	beq.n	8008320 <AHT20_Calculate+0x94>
    Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 80082ae:	4b4e      	ldr	r3, [pc, #312]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	4698      	mov	r8, r3
 80082b4:	4b4c      	ldr	r3, [pc, #304]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	0018      	movs	r0, r3
 80082ba:	4b4b      	ldr	r3, [pc, #300]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082bc:	789b      	ldrb	r3, [r3, #2]
 80082be:	001c      	movs	r4, r3
 80082c0:	4b49      	ldr	r3, [pc, #292]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082c2:	78db      	ldrb	r3, [r3, #3]
 80082c4:	001d      	movs	r5, r3
 80082c6:	4b48      	ldr	r3, [pc, #288]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082c8:	791b      	ldrb	r3, [r3, #4]
 80082ca:	001e      	movs	r6, r3
 80082cc:	4b46      	ldr	r3, [pc, #280]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082ce:	795b      	ldrb	r3, [r3, #5]
 80082d0:	469c      	mov	ip, r3
 80082d2:	4b45      	ldr	r3, [pc, #276]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082d4:	799b      	ldrb	r3, [r3, #6]
 80082d6:	4a45      	ldr	r2, [pc, #276]	@ (80083ec <AHT20_Calculate+0x160>)
 80082d8:	4945      	ldr	r1, [pc, #276]	@ (80083f0 <AHT20_Calculate+0x164>)
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	4663      	mov	r3, ip
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	9603      	str	r6, [sp, #12]
 80082e2:	9502      	str	r5, [sp, #8]
 80082e4:	9401      	str	r4, [sp, #4]
 80082e6:	9000      	str	r0, [sp, #0]
 80082e8:	4643      	mov	r3, r8
 80082ea:	2003      	movs	r0, #3
 80082ec:	f008 fb4a 	bl	8010984 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 80082f0:	4b3d      	ldr	r3, [pc, #244]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082f2:	799b      	ldrb	r3, [r3, #6]
 80082f4:	001c      	movs	r4, r3
 80082f6:	4b3c      	ldr	r3, [pc, #240]	@ (80083e8 <AHT20_Calculate+0x15c>)
 80082f8:	2106      	movs	r1, #6
 80082fa:	0018      	movs	r0, r3
 80082fc:	f7ff fdac 	bl	8007e58 <CalculateCRC>
 8008300:	0003      	movs	r3, r0
 8008302:	4a3c      	ldr	r2, [pc, #240]	@ (80083f4 <AHT20_Calculate+0x168>)
 8008304:	493c      	ldr	r1, [pc, #240]	@ (80083f8 <AHT20_Calculate+0x16c>)
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	0023      	movs	r3, r4
 800830a:	2001      	movs	r0, #1
 800830c:	f008 fb3a 	bl	8010984 <CreateLine>
    *airtemp = 0.0;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
    return false;
 800831c:	2300      	movs	r3, #0
 800831e:	e05c      	b.n	80083da <AHT20_Calculate+0x14e>
  }
  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 8008320:	4b31      	ldr	r3, [pc, #196]	@ (80083e8 <AHT20_Calculate+0x15c>)
 8008322:	78db      	ldrb	r3, [r3, #3]
 8008324:	041a      	lsls	r2, r3, #16
 8008326:	23f0      	movs	r3, #240	@ 0xf0
 8008328:	031b      	lsls	r3, r3, #12
 800832a:	401a      	ands	r2, r3
 800832c:	4b2e      	ldr	r3, [pc, #184]	@ (80083e8 <AHT20_Calculate+0x15c>)
 800832e:	791b      	ldrb	r3, [r3, #4]
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	18d3      	adds	r3, r2, r3
 8008334:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <AHT20_Calculate+0x15c>)
 8008336:	7952      	ldrb	r2, [r2, #5]
 8008338:	189b      	adds	r3, r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f7f9 f993 	bl	8001668 <__aeabi_ui2f>
 8008342:	1c03      	adds	r3, r0, #0
 8008344:	2193      	movs	r1, #147	@ 0x93
 8008346:	05c9      	lsls	r1, r1, #23
 8008348:	1c18      	adds	r0, r3, #0
 800834a:	f7f8 fc43 	bl	8000bd4 <__aeabi_fdiv>
 800834e:	1c03      	adds	r3, r0, #0
 8008350:	492a      	ldr	r1, [pc, #168]	@ (80083fc <AHT20_Calculate+0x170>)
 8008352:	1c18      	adds	r0, r3, #0
 8008354:	f7f8 fe24 	bl	8000fa0 <__aeabi_fmul>
 8008358:	1c03      	adds	r3, r0, #0
 800835a:	4929      	ldr	r1, [pc, #164]	@ (8008400 <AHT20_Calculate+0x174>)
 800835c:	1c18      	adds	r0, r3, #0
 800835e:	f7f8 ff5d 	bl	800121c <__aeabi_fsub>
 8008362:	1c03      	adds	r3, r0, #0
 8008364:	1c1a      	adds	r2, r3, #0
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800836a:	4b1f      	ldr	r3, [pc, #124]	@ (80083e8 <AHT20_Calculate+0x15c>)
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	031a      	lsls	r2, r3, #12
 8008370:	4b1d      	ldr	r3, [pc, #116]	@ (80083e8 <AHT20_Calculate+0x15c>)
 8008372:	789b      	ldrb	r3, [r3, #2]
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	18d3      	adds	r3, r2, r3
 8008378:	4a1b      	ldr	r2, [pc, #108]	@ (80083e8 <AHT20_Calculate+0x15c>)
 800837a:	78d2      	ldrb	r2, [r2, #3]
 800837c:	0912      	lsrs	r2, r2, #4
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	189b      	adds	r3, r3, r2
 8008382:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8008384:	68b8      	ldr	r0, [r7, #8]
 8008386:	f7f9 f96f 	bl	8001668 <__aeabi_ui2f>
 800838a:	1c03      	adds	r3, r0, #0
 800838c:	2193      	movs	r1, #147	@ 0x93
 800838e:	05c9      	lsls	r1, r1, #23
 8008390:	1c18      	adds	r0, r3, #0
 8008392:	f7f8 fc1f 	bl	8000bd4 <__aeabi_fdiv>
 8008396:	1c03      	adds	r3, r0, #0
 8008398:	491a      	ldr	r1, [pc, #104]	@ (8008404 <AHT20_Calculate+0x178>)
 800839a:	1c18      	adds	r0, r3, #0
 800839c:	f7f8 fe00 	bl	8000fa0 <__aeabi_fmul>
 80083a0:	1c03      	adds	r3, r0, #0
 80083a2:	1c1a      	adds	r2, r3, #0
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %f, temperature = %f", *airhum, *airtemp);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	1c18      	adds	r0, r3, #0
 80083ae:	f7fb f859 	bl	8003464 <__aeabi_f2d>
 80083b2:	0004      	movs	r4, r0
 80083b4:	000d      	movs	r5, r1
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	1c18      	adds	r0, r3, #0
 80083bc:	f7fb f852 	bl	8003464 <__aeabi_f2d>
 80083c0:	0002      	movs	r2, r0
 80083c2:	000b      	movs	r3, r1
 80083c4:	4810      	ldr	r0, [pc, #64]	@ (8008408 <AHT20_Calculate+0x17c>)
 80083c6:	490a      	ldr	r1, [pc, #40]	@ (80083f0 <AHT20_Calculate+0x164>)
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	9303      	str	r3, [sp, #12]
 80083cc:	9400      	str	r4, [sp, #0]
 80083ce:	9501      	str	r5, [sp, #4]
 80083d0:	0002      	movs	r2, r0
 80083d2:	2003      	movs	r0, #3
 80083d4:	f008 fad6 	bl	8010984 <CreateLine>
  return true;
 80083d8:	2301      	movs	r3, #1
}
 80083da:	0018      	movs	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	b004      	add	sp, #16
 80083e0:	bc80      	pop	{r7}
 80083e2:	46b8      	mov	r8, r7
 80083e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e6:	46c0      	nop			@ (mov r8, r8)
 80083e8:	20000b70 	.word	0x20000b70
 80083ec:	08027168 	.word	0x08027168
 80083f0:	0802707c 	.word	0x0802707c
 80083f4:	080271d4 	.word	0x080271d4
 80083f8:	080270d0 	.word	0x080270d0
 80083fc:	43480000 	.word	0x43480000
 8008400:	42480000 	.word	0x42480000
 8008404:	42c80000 	.word	0x42c80000
 8008408:	080271fc 	.word	0x080271fc

0800840c <AHT20_reset>:

bool AHT20_reset(void) {
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 8008410:	f008 ff04 	bl	801121c <HAL_GetTick>
 8008414:	0003      	movs	r3, r0
 8008416:	3332      	adds	r3, #50	@ 0x32
 8008418:	001a      	movs	r2, r3
 800841a:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <AHT20_reset+0x2c>)
 800841c:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800841e:	4b07      	ldr	r3, [pc, #28]	@ (800843c <AHT20_reset+0x30>)
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 8008424:	4b06      	ldr	r3, [pc, #24]	@ (8008440 <AHT20_reset+0x34>)
 8008426:	2201      	movs	r2, #1
 8008428:	0019      	movs	r1, r3
 800842a:	2038      	movs	r0, #56	@ 0x38
 800842c:	f7ff fcf2 	bl	8007e14 <WriteRegister>
 8008430:	0003      	movs	r3, r0
}
 8008432:	0018      	movs	r0, r3
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000b60 	.word	0x20000b60
 800843c:	20000b64 	.word	0x20000b64
 8008440:	20000088 	.word	0x20000088

08008444 <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800844a:	4b73      	ldr	r3, [pc, #460]	@ (8008618 <AHT_Upkeep+0x1d4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	0018      	movs	r0, r3
 8008450:	f008 fa42 	bl	80108d8 <TimestampIsReached>
 8008454:	0003      	movs	r3, r0
 8008456:	001a      	movs	r2, r3
 8008458:	2301      	movs	r3, #1
 800845a:	4053      	eors	r3, r2
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <AHT_Upkeep+0x24>
    return AHTState;
 8008462:	4b6e      	ldr	r3, [pc, #440]	@ (800861c <AHT_Upkeep+0x1d8>)
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	e0d2      	b.n	800860e <AHT_Upkeep+0x1ca>
  }
  switch(AHTState) {
 8008468:	4b6c      	ldr	r3, [pc, #432]	@ (800861c <AHT_Upkeep+0x1d8>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d900      	bls.n	8008472 <AHT_Upkeep+0x2e>
 8008470:	e0b4      	b.n	80085dc <AHT_Upkeep+0x198>
 8008472:	009a      	lsls	r2, r3, #2
 8008474:	4b6a      	ldr	r3, [pc, #424]	@ (8008620 <AHT_Upkeep+0x1dc>)
 8008476:	18d3      	adds	r3, r2, r3
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800847c:	4a69      	ldr	r2, [pc, #420]	@ (8008624 <AHT_Upkeep+0x1e0>)
 800847e:	4b6a      	ldr	r3, [pc, #424]	@ (8008628 <AHT_Upkeep+0x1e4>)
 8008480:	0019      	movs	r1, r3
 8008482:	2003      	movs	r0, #3
 8008484:	f008 fa7e 	bl	8010984 <CreateLine>
    break;
 8008488:	e0bf      	b.n	800860a <AHT_Upkeep+0x1c6>

  case AHT_STATE_INIT:
    if (getSensorLock() != FREE) {
 800848a:	f002 fbf3 	bl	800ac74 <getSensorLock>
 800848e:	1e03      	subs	r3, r0, #0
 8008490:	d000      	beq.n	8008494 <AHT_Upkeep+0x50>
 8008492:	e0b1      	b.n	80085f8 <AHT_Upkeep+0x1b4>
      break;
    }
    if (!AHT20_init()) {
 8008494:	f7ff fdaa 	bl	8007fec <AHT20_init>
 8008498:	0003      	movs	r3, r0
 800849a:	001a      	movs	r2, r3
 800849c:	2301      	movs	r3, #1
 800849e:	4053      	eors	r3, r2
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <AHT_Upkeep+0x74>
      Debug("AHT20 Error during initialization");
 80084a6:	4a61      	ldr	r2, [pc, #388]	@ (800862c <AHT_Upkeep+0x1e8>)
 80084a8:	4b5f      	ldr	r3, [pc, #380]	@ (8008628 <AHT_Upkeep+0x1e4>)
 80084aa:	0019      	movs	r1, r3
 80084ac:	2003      	movs	r0, #3
 80084ae:	f008 fa69 	bl	8010984 <CreateLine>
      AHTState = AHT20_ERROR;
 80084b2:	4b5a      	ldr	r3, [pc, #360]	@ (800861c <AHT_Upkeep+0x1d8>)
 80084b4:	22ff      	movs	r2, #255	@ 0xff
 80084b6:	701a      	strb	r2, [r3, #0]
    }
    if(!calibrated) {
 80084b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008630 <AHT_Upkeep+0x1ec>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2201      	movs	r2, #1
 80084be:	4053      	eors	r3, r2
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <AHT_Upkeep+0x8a>
      AHTState = AHT_START_CALIBRATION;
 80084c6:	4b55      	ldr	r3, [pc, #340]	@ (800861c <AHT_Upkeep+0x1d8>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_START_MEASUREMENTS;
    }
    break;
 80084cc:	e09d      	b.n	800860a <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 80084ce:	4b53      	ldr	r3, [pc, #332]	@ (800861c <AHT_Upkeep+0x1d8>)
 80084d0:	2203      	movs	r2, #3
 80084d2:	701a      	strb	r2, [r3, #0]
    break;
 80084d4:	e099      	b.n	800860a <AHT_Upkeep+0x1c6>

  case AHT_START_CALIBRATION:
  calibrated = false;
 80084d6:	4b56      	ldr	r3, [pc, #344]	@ (8008630 <AHT_Upkeep+0x1ec>)
 80084d8:	2200      	movs	r2, #0
 80084da:	701a      	strb	r2, [r3, #0]
  if (getSensorLock() != FREE) {
 80084dc:	f002 fbca 	bl	800ac74 <getSensorLock>
 80084e0:	1e03      	subs	r3, r0, #0
 80084e2:	d000      	beq.n	80084e6 <AHT_Upkeep+0xa2>
 80084e4:	e08a      	b.n	80085fc <AHT_Upkeep+0x1b8>
    break;
  }
  setSensorLock(AHT20);
 80084e6:	2003      	movs	r0, #3
 80084e8:	f002 fbb4 	bl	800ac54 <setSensorLock>
  if (AHT20_calibration_start()) {
 80084ec:	f7ff fde6 	bl	80080bc <AHT20_calibration_start>
 80084f0:	1e03      	subs	r3, r0, #0
 80084f2:	d100      	bne.n	80084f6 <AHT_Upkeep+0xb2>
 80084f4:	e084      	b.n	8008600 <AHT_Upkeep+0x1bc>
    AHTState = AHT_CALIBRATED;
 80084f6:	4b49      	ldr	r3, [pc, #292]	@ (800861c <AHT_Upkeep+0x1d8>)
 80084f8:	2202      	movs	r2, #2
 80084fa:	701a      	strb	r2, [r3, #0]
  }
  break;
 80084fc:	e080      	b.n	8008600 <AHT_Upkeep+0x1bc>

  case AHT_CALIBRATED:
    if (AHT20_calibration_complete()) {
 80084fe:	f7ff fe0b 	bl	8008118 <AHT20_calibration_complete>
 8008502:	1e03      	subs	r3, r0, #0
 8008504:	d00f      	beq.n	8008526 <AHT_Upkeep+0xe2>
      calibrated = true;
 8008506:	4b4a      	ldr	r3, [pc, #296]	@ (8008630 <AHT_Upkeep+0x1ec>)
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800850c:	2000      	movs	r0, #0
 800850e:	f002 fba1 	bl	800ac54 <setSensorLock>
      AHTState = AHT_STATE_START_MEASUREMENTS;
 8008512:	4b42      	ldr	r3, [pc, #264]	@ (800861c <AHT_Upkeep+0x1d8>)
 8008514:	2203      	movs	r2, #3
 8008516:	701a      	strb	r2, [r3, #0]
      Info("AHT20 Calibration success");
 8008518:	4a46      	ldr	r2, [pc, #280]	@ (8008634 <AHT_Upkeep+0x1f0>)
 800851a:	4b47      	ldr	r3, [pc, #284]	@ (8008638 <AHT_Upkeep+0x1f4>)
 800851c:	0019      	movs	r1, r3
 800851e:	2002      	movs	r0, #2
 8008520:	f008 fa30 	bl	8010984 <CreateLine>
 8008524:	e009      	b.n	800853a <AHT_Upkeep+0xf6>
    }
    else {
      AHTState = AHT_START_CALIBRATION;
 8008526:	4b3d      	ldr	r3, [pc, #244]	@ (800861c <AHT_Upkeep+0x1d8>)
 8008528:	2201      	movs	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]
      AHT20TimeStamp = HAL_GetTick() + 20;
 800852c:	f008 fe76 	bl	801121c <HAL_GetTick>
 8008530:	0003      	movs	r3, r0
 8008532:	3314      	adds	r3, #20
 8008534:	001a      	movs	r2, r3
 8008536:	4b38      	ldr	r3, [pc, #224]	@ (8008618 <AHT_Upkeep+0x1d4>)
 8008538:	601a      	str	r2, [r3, #0]
    }
    setSensorLock(FREE);
 800853a:	2000      	movs	r0, #0
 800853c:	f002 fb8a 	bl	800ac54 <setSensorLock>
    break;
 8008540:	e063      	b.n	800860a <AHT_Upkeep+0x1c6>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8008542:	f002 fb97 	bl	800ac74 <getSensorLock>
 8008546:	1e03      	subs	r3, r0, #0
 8008548:	d15c      	bne.n	8008604 <AHT_Upkeep+0x1c0>
      break;
    }
    setSensorLock(AHT20);
 800854a:	2003      	movs	r0, #3
 800854c:	f002 fb82 	bl	800ac54 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 8008550:	f7ff fe3c 	bl	80081cc <AHT20_StartMeasurement>
 8008554:	0003      	movs	r3, r0
 8008556:	001a      	movs	r2, r3
 8008558:	2301      	movs	r3, #1
 800855a:	4053      	eors	r3, r2
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <AHT_Upkeep+0x126>
      AHTState = AHT20_ERROR;
 8008562:	4b2e      	ldr	r3, [pc, #184]	@ (800861c <AHT_Upkeep+0x1d8>)
 8008564:	22ff      	movs	r2, #255	@ 0xff
 8008566:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 8008568:	e04f      	b.n	800860a <AHT_Upkeep+0x1c6>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800856a:	4b2c      	ldr	r3, [pc, #176]	@ (800861c <AHT_Upkeep+0x1d8>)
 800856c:	2204      	movs	r2, #4
 800856e:	701a      	strb	r2, [r3, #0]
    break;
 8008570:	e04b      	b.n	800860a <AHT_Upkeep+0x1c6>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 8008572:	f7ff fe59 	bl	8008228 <AHT20_GetMeasurementValues>
 8008576:	1e03      	subs	r3, r0, #0
 8008578:	d006      	beq.n	8008588 <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 800857a:	2000      	movs	r0, #0
 800857c:	f002 fb6a 	bl	800ac54 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 8008580:	4b26      	ldr	r3, [pc, #152]	@ (800861c <AHT_Upkeep+0x1d8>)
 8008582:	2205      	movs	r2, #5
 8008584:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHT20TimeStamp = HAL_GetTick() + 40;
    }
    break;
 8008586:	e040      	b.n	800860a <AHT_Upkeep+0x1c6>
      AHT20TimeStamp = HAL_GetTick() + 40;
 8008588:	f008 fe48 	bl	801121c <HAL_GetTick>
 800858c:	0003      	movs	r3, r0
 800858e:	3328      	adds	r3, #40	@ 0x28
 8008590:	001a      	movs	r2, r3
 8008592:	4b21      	ldr	r3, [pc, #132]	@ (8008618 <AHT_Upkeep+0x1d4>)
 8008594:	601a      	str	r2, [r3, #0]
    break;
 8008596:	e038      	b.n	800860a <AHT_Upkeep+0x1c6>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 8008598:	003a      	movs	r2, r7
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	0011      	movs	r1, r2
 800859e:	0018      	movs	r0, r3
 80085a0:	f7ff fe74 	bl	800828c <AHT20_Calculate>
 80085a4:	0003      	movs	r3, r0
 80085a6:	001a      	movs	r2, r3
 80085a8:	2301      	movs	r3, #1
 80085aa:	4053      	eors	r3, r2
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d005      	beq.n	80085be <AHT_Upkeep+0x17a>
      AHTState = AHT20_ERROR;
 80085b2:	4b1a      	ldr	r3, [pc, #104]	@ (800861c <AHT_Upkeep+0x1d8>)
 80085b4:	22ff      	movs	r2, #255	@ 0xff
 80085b6:	701a      	strb	r2, [r3, #0]
      return AHTState;
 80085b8:	4b18      	ldr	r3, [pc, #96]	@ (800861c <AHT_Upkeep+0x1d8>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	e027      	b.n	800860e <AHT_Upkeep+0x1ca>
    }
//    BMP280_setAirTemPHum(airtemp, airhum);
    AHTState = AHT_STATE_WAIT;
 80085be:	4b17      	ldr	r3, [pc, #92]	@ (800861c <AHT_Upkeep+0x1d8>)
 80085c0:	2208      	movs	r2, #8
 80085c2:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 80085c4:	f008 fe2a 	bl	801121c <HAL_GetTick>
 80085c8:	0003      	movs	r3, r0
 80085ca:	4a1c      	ldr	r2, [pc, #112]	@ (800863c <AHT_Upkeep+0x1f8>)
 80085cc:	189a      	adds	r2, r3, r2
 80085ce:	4b12      	ldr	r3, [pc, #72]	@ (8008618 <AHT_Upkeep+0x1d4>)
 80085d0:	601a      	str	r2, [r3, #0]
    break;
 80085d2:	e01a      	b.n	800860a <AHT_Upkeep+0x1c6>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 80085d4:	4b11      	ldr	r3, [pc, #68]	@ (800861c <AHT_Upkeep+0x1d8>)
 80085d6:	2203      	movs	r2, #3
 80085d8:	701a      	strb	r2, [r3, #0]
  break;
 80085da:	e016      	b.n	800860a <AHT_Upkeep+0x1c6>

  default:
    // Handle unexpected state
    AHT20_reset();
 80085dc:	f7ff ff16 	bl	800840c <AHT20_reset>
    AHTState = AHT_STATE_INIT;
 80085e0:	4b0e      	ldr	r3, [pc, #56]	@ (800861c <AHT_Upkeep+0x1d8>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 80085e6:	f002 fb45 	bl	800ac74 <getSensorLock>
 80085ea:	0003      	movs	r3, r0
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d10b      	bne.n	8008608 <AHT_Upkeep+0x1c4>
      setSensorLock(FREE);
 80085f0:	2000      	movs	r0, #0
 80085f2:	f002 fb2f 	bl	800ac54 <setSensorLock>
    }
    break;
 80085f6:	e007      	b.n	8008608 <AHT_Upkeep+0x1c4>
      break;
 80085f8:	46c0      	nop			@ (mov r8, r8)
 80085fa:	e006      	b.n	800860a <AHT_Upkeep+0x1c6>
    break;
 80085fc:	46c0      	nop			@ (mov r8, r8)
 80085fe:	e004      	b.n	800860a <AHT_Upkeep+0x1c6>
  break;
 8008600:	46c0      	nop			@ (mov r8, r8)
 8008602:	e002      	b.n	800860a <AHT_Upkeep+0x1c6>
      break;
 8008604:	46c0      	nop			@ (mov r8, r8)
 8008606:	e000      	b.n	800860a <AHT_Upkeep+0x1c6>
    break;
 8008608:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800860a:	4b04      	ldr	r3, [pc, #16]	@ (800861c <AHT_Upkeep+0x1d8>)
 800860c:	781b      	ldrb	r3, [r3, #0]
}
 800860e:	0018      	movs	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	b002      	add	sp, #8
 8008614:	bd80      	pop	{r7, pc}
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	20000b60 	.word	0x20000b60
 800861c:	20000097 	.word	0x20000097
 8008620:	08028f14 	.word	0x08028f14
 8008624:	08027228 	.word	0x08027228
 8008628:	0802707c 	.word	0x0802707c
 800862c:	08027250 	.word	0x08027250
 8008630:	20000b64 	.word	0x20000b64
 8008634:	08027274 	.word	0x08027274
 8008638:	08027290 	.word	0x08027290
 800863c:	0000ea60 	.word	0x0000ea60

08008640 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008642:	b087      	sub	sp, #28
 8008644:	af02      	add	r7, sp, #8
 8008646:	0004      	movs	r4, r0
 8008648:	0008      	movs	r0, r1
 800864a:	60ba      	str	r2, [r7, #8]
 800864c:	0019      	movs	r1, r3
 800864e:	260e      	movs	r6, #14
 8008650:	19bb      	adds	r3, r7, r6
 8008652:	1c22      	adds	r2, r4, #0
 8008654:	801a      	strh	r2, [r3, #0]
 8008656:	230c      	movs	r3, #12
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	1c02      	adds	r2, r0, #0
 800865c:	801a      	strh	r2, [r3, #0]
 800865e:	1dbb      	adds	r3, r7, #6
 8008660:	1c0a      	adds	r2, r1, #0
 8008662:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8008664:	4b0c      	ldr	r3, [pc, #48]	@ (8008698 <WriteMemRegister+0x58>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d010      	beq.n	800868e <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800866c:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <WriteMemRegister+0x58>)
 800866e:	681c      	ldr	r4, [r3, #0]
 8008670:	4b0a      	ldr	r3, [pc, #40]	@ (800869c <WriteMemRegister+0x5c>)
 8008672:	7818      	ldrb	r0, [r3, #0]
 8008674:	68bd      	ldr	r5, [r7, #8]
 8008676:	230c      	movs	r3, #12
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	881a      	ldrh	r2, [r3, #0]
 800867c:	19bb      	adds	r3, r7, r6
 800867e:	8819      	ldrh	r1, [r3, #0]
 8008680:	1dbb      	adds	r3, r7, #6
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	002b      	movs	r3, r5
 8008688:	47a0      	blx	r4
 800868a:	0003      	movs	r3, r0
 800868c:	e000      	b.n	8008690 <WriteMemRegister+0x50>
  }
  return false;
 800868e:	2300      	movs	r3, #0
}
 8008690:	0018      	movs	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	b005      	add	sp, #20
 8008696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008698:	20000b78 	.word	0x20000b78
 800869c:	20000098 	.word	0x20000098

080086a0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	0004      	movs	r4, r0
 80086a8:	0008      	movs	r0, r1
 80086aa:	60ba      	str	r2, [r7, #8]
 80086ac:	0019      	movs	r1, r3
 80086ae:	260e      	movs	r6, #14
 80086b0:	19bb      	adds	r3, r7, r6
 80086b2:	1c22      	adds	r2, r4, #0
 80086b4:	801a      	strh	r2, [r3, #0]
 80086b6:	230c      	movs	r3, #12
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	1c02      	adds	r2, r0, #0
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	1dbb      	adds	r3, r7, #6
 80086c0:	1c0a      	adds	r2, r1, #0
 80086c2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80086c4:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <ReadMemRegister+0x58>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d010      	beq.n	80086ee <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 80086cc:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <ReadMemRegister+0x58>)
 80086ce:	681c      	ldr	r4, [r3, #0]
 80086d0:	4b0a      	ldr	r3, [pc, #40]	@ (80086fc <ReadMemRegister+0x5c>)
 80086d2:	7818      	ldrb	r0, [r3, #0]
 80086d4:	68bd      	ldr	r5, [r7, #8]
 80086d6:	230c      	movs	r3, #12
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	881a      	ldrh	r2, [r3, #0]
 80086dc:	19bb      	adds	r3, r7, r6
 80086de:	8819      	ldrh	r1, [r3, #0]
 80086e0:	1dbb      	adds	r3, r7, #6
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	002b      	movs	r3, r5
 80086e8:	47a0      	blx	r4
 80086ea:	0003      	movs	r3, r0
 80086ec:	e000      	b.n	80086f0 <ReadMemRegister+0x50>
  }
  return false;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	0018      	movs	r0, r3
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b005      	add	sp, #20
 80086f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086f8:	20000b7c 	.word	0x20000b7c
 80086fc:	20000098 	.word	0x20000098

08008700 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 8008708:	f008 fd88 	bl	801121c <HAL_GetTick>
 800870c:	0002      	movs	r2, r0
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	18d2      	adds	r2, r2, r3
 8008712:	4b03      	ldr	r3, [pc, #12]	@ (8008720 <setBMP280TimeStamp+0x20>)
 8008714:	601a      	str	r2, [r3, #0]
}
 8008716:	46c0      	nop			@ (mov r8, r8)
 8008718:	46bd      	mov	sp, r7
 800871a:	b002      	add	sp, #8
 800871c:	bd80      	pop	{r7, pc}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	20000ba4 	.word	0x20000ba4

08008724 <BMP280_reset>:

static void BMP280_reset() {
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800872a:	1dfb      	adds	r3, r7, #7
 800872c:	22b6      	movs	r2, #182	@ 0xb6
 800872e:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 8008730:	1dfa      	adds	r2, r7, #7
 8008732:	2301      	movs	r3, #1
 8008734:	2101      	movs	r1, #1
 8008736:	20e0      	movs	r0, #224	@ 0xe0
 8008738:	f7ff ff82 	bl	8008640 <WriteMemRegister>
  Info("BMP280 has been reset");
 800873c:	4a06      	ldr	r2, [pc, #24]	@ (8008758 <BMP280_reset+0x34>)
 800873e:	4b07      	ldr	r3, [pc, #28]	@ (800875c <BMP280_reset+0x38>)
 8008740:	0019      	movs	r1, r3
 8008742:	2002      	movs	r0, #2
 8008744:	f008 f91e 	bl	8010984 <CreateLine>
  HAL_Delay(100);
 8008748:	2064      	movs	r0, #100	@ 0x64
 800874a:	f008 fd71 	bl	8011230 <HAL_Delay>
}
 800874e:	46c0      	nop			@ (mov r8, r8)
 8008750:	46bd      	mov	sp, r7
 8008752:	b002      	add	sp, #8
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			@ (mov r8, r8)
 8008758:	08027294 	.word	0x08027294
 800875c:	080272ac 	.word	0x080272ac

08008760 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b083      	sub	sp, #12
 8008764:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 8008766:	4aae      	ldr	r2, [pc, #696]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008768:	231a      	movs	r3, #26
 800876a:	2101      	movs	r1, #1
 800876c:	2088      	movs	r0, #136	@ 0x88
 800876e:	f7ff ff97 	bl	80086a0 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 8008772:	4bab      	ldr	r3, [pc, #684]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008774:	785b      	ldrb	r3, [r3, #1]
 8008776:	021b      	lsls	r3, r3, #8
 8008778:	b29b      	uxth	r3, r3
 800877a:	4aa9      	ldr	r2, [pc, #676]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	189b      	adds	r3, r3, r2
 8008780:	b29a      	uxth	r2, r3
 8008782:	4ba8      	ldr	r3, [pc, #672]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008784:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 8008786:	4ba6      	ldr	r3, [pc, #664]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008788:	78db      	ldrb	r3, [r3, #3]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	b29b      	uxth	r3, r3
 800878e:	4aa4      	ldr	r2, [pc, #656]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008790:	7892      	ldrb	r2, [r2, #2]
 8008792:	189b      	adds	r3, r3, r2
 8008794:	b29b      	uxth	r3, r3
 8008796:	b21a      	sxth	r2, r3
 8008798:	4ba2      	ldr	r3, [pc, #648]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 800879a:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800879c:	4ba0      	ldr	r3, [pc, #640]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800879e:	795b      	ldrb	r3, [r3, #5]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	4a9e      	ldr	r2, [pc, #632]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087a6:	7912      	ldrb	r2, [r2, #4]
 80087a8:	189b      	adds	r3, r3, r2
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	b21a      	sxth	r2, r3
 80087ae:	4b9d      	ldr	r3, [pc, #628]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80087b0:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 80087b2:	4b9b      	ldr	r3, [pc, #620]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087b4:	79db      	ldrb	r3, [r3, #7]
 80087b6:	021b      	lsls	r3, r3, #8
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4a99      	ldr	r2, [pc, #612]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087bc:	7992      	ldrb	r2, [r2, #6]
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	4b98      	ldr	r3, [pc, #608]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80087c4:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 80087c6:	4b96      	ldr	r3, [pc, #600]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087c8:	7a5b      	ldrb	r3, [r3, #9]
 80087ca:	021b      	lsls	r3, r3, #8
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	4a94      	ldr	r2, [pc, #592]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087d0:	7a12      	ldrb	r2, [r2, #8]
 80087d2:	189b      	adds	r3, r3, r2
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	b21a      	sxth	r2, r3
 80087d8:	4b92      	ldr	r3, [pc, #584]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80087da:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 80087dc:	4b90      	ldr	r3, [pc, #576]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087de:	7adb      	ldrb	r3, [r3, #11]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	4a8e      	ldr	r2, [pc, #568]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087e6:	7a92      	ldrb	r2, [r2, #10]
 80087e8:	189b      	adds	r3, r3, r2
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	b21a      	sxth	r2, r3
 80087ee:	4b8d      	ldr	r3, [pc, #564]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80087f0:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 80087f2:	4b8b      	ldr	r3, [pc, #556]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087f4:	7b5b      	ldrb	r3, [r3, #13]
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	4a89      	ldr	r2, [pc, #548]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80087fc:	7b12      	ldrb	r2, [r2, #12]
 80087fe:	189b      	adds	r3, r3, r2
 8008800:	b29b      	uxth	r3, r3
 8008802:	b21a      	sxth	r2, r3
 8008804:	4b87      	ldr	r3, [pc, #540]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008806:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 8008808:	4b85      	ldr	r3, [pc, #532]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800880a:	7bdb      	ldrb	r3, [r3, #15]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	b29b      	uxth	r3, r3
 8008810:	4a83      	ldr	r2, [pc, #524]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008812:	7b92      	ldrb	r2, [r2, #14]
 8008814:	189b      	adds	r3, r3, r2
 8008816:	b29b      	uxth	r3, r3
 8008818:	b21a      	sxth	r2, r3
 800881a:	4b82      	ldr	r3, [pc, #520]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 800881c:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800881e:	4b80      	ldr	r3, [pc, #512]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008820:	7c5b      	ldrb	r3, [r3, #17]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	b29b      	uxth	r3, r3
 8008826:	4a7e      	ldr	r2, [pc, #504]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008828:	7c12      	ldrb	r2, [r2, #16]
 800882a:	189b      	adds	r3, r3, r2
 800882c:	b29b      	uxth	r3, r3
 800882e:	b21a      	sxth	r2, r3
 8008830:	4b7c      	ldr	r3, [pc, #496]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008832:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 8008834:	4b7a      	ldr	r3, [pc, #488]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008836:	7cdb      	ldrb	r3, [r3, #19]
 8008838:	021b      	lsls	r3, r3, #8
 800883a:	b29b      	uxth	r3, r3
 800883c:	4a78      	ldr	r2, [pc, #480]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800883e:	7c92      	ldrb	r2, [r2, #18]
 8008840:	189b      	adds	r3, r3, r2
 8008842:	b29b      	uxth	r3, r3
 8008844:	b21a      	sxth	r2, r3
 8008846:	4b77      	ldr	r3, [pc, #476]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008848:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800884a:	4b75      	ldr	r3, [pc, #468]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800884c:	7d5b      	ldrb	r3, [r3, #21]
 800884e:	021b      	lsls	r3, r3, #8
 8008850:	b29b      	uxth	r3, r3
 8008852:	4a73      	ldr	r2, [pc, #460]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008854:	7d12      	ldrb	r2, [r2, #20]
 8008856:	189b      	adds	r3, r3, r2
 8008858:	b29b      	uxth	r3, r3
 800885a:	b21a      	sxth	r2, r3
 800885c:	4b71      	ldr	r3, [pc, #452]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 800885e:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 8008860:	4b6f      	ldr	r3, [pc, #444]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008862:	7ddb      	ldrb	r3, [r3, #23]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	b29b      	uxth	r3, r3
 8008868:	4a6d      	ldr	r2, [pc, #436]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800886a:	7d92      	ldrb	r2, [r2, #22]
 800886c:	189b      	adds	r3, r3, r2
 800886e:	b29b      	uxth	r3, r3
 8008870:	b21a      	sxth	r2, r3
 8008872:	4b6c      	ldr	r3, [pc, #432]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008874:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 8008876:	4a6c      	ldr	r2, [pc, #432]	@ (8008a28 <BMP280_get_calibration+0x2c8>)
 8008878:	4b6c      	ldr	r3, [pc, #432]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 800887a:	0019      	movs	r1, r3
 800887c:	2003      	movs	r0, #3
 800887e:	f008 f881 	bl	8010984 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 8008882:	4b67      	ldr	r3, [pc, #412]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008884:	785b      	ldrb	r3, [r3, #1]
 8008886:	001c      	movs	r4, r3
 8008888:	4b65      	ldr	r3, [pc, #404]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	0018      	movs	r0, r3
 800888e:	4b65      	ldr	r3, [pc, #404]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	4a67      	ldr	r2, [pc, #412]	@ (8008a30 <BMP280_get_calibration+0x2d0>)
 8008894:	4965      	ldr	r1, [pc, #404]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	9000      	str	r0, [sp, #0]
 800889a:	0023      	movs	r3, r4
 800889c:	2003      	movs	r0, #3
 800889e:	f008 f871 	bl	8010984 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 80088a2:	4b5f      	ldr	r3, [pc, #380]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80088a4:	78db      	ldrb	r3, [r3, #3]
 80088a6:	001c      	movs	r4, r3
 80088a8:	4b5d      	ldr	r3, [pc, #372]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80088aa:	789b      	ldrb	r3, [r3, #2]
 80088ac:	0018      	movs	r0, r3
 80088ae:	4b5d      	ldr	r3, [pc, #372]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80088b0:	2202      	movs	r2, #2
 80088b2:	5e9b      	ldrsh	r3, [r3, r2]
 80088b4:	4a5f      	ldr	r2, [pc, #380]	@ (8008a34 <BMP280_get_calibration+0x2d4>)
 80088b6:	495d      	ldr	r1, [pc, #372]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 80088b8:	9301      	str	r3, [sp, #4]
 80088ba:	9000      	str	r0, [sp, #0]
 80088bc:	0023      	movs	r3, r4
 80088be:	2003      	movs	r0, #3
 80088c0:	f008 f860 	bl	8010984 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 80088c4:	4b56      	ldr	r3, [pc, #344]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80088c6:	795b      	ldrb	r3, [r3, #5]
 80088c8:	001c      	movs	r4, r3
 80088ca:	4b55      	ldr	r3, [pc, #340]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80088cc:	791b      	ldrb	r3, [r3, #4]
 80088ce:	0018      	movs	r0, r3
 80088d0:	4b54      	ldr	r3, [pc, #336]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80088d2:	2204      	movs	r2, #4
 80088d4:	5e9b      	ldrsh	r3, [r3, r2]
 80088d6:	4a58      	ldr	r2, [pc, #352]	@ (8008a38 <BMP280_get_calibration+0x2d8>)
 80088d8:	4954      	ldr	r1, [pc, #336]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	9000      	str	r0, [sp, #0]
 80088de:	0023      	movs	r3, r4
 80088e0:	2003      	movs	r0, #3
 80088e2:	f008 f84f 	bl	8010984 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 80088e6:	4b4e      	ldr	r3, [pc, #312]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80088e8:	79db      	ldrb	r3, [r3, #7]
 80088ea:	001c      	movs	r4, r3
 80088ec:	4b4c      	ldr	r3, [pc, #304]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80088ee:	799b      	ldrb	r3, [r3, #6]
 80088f0:	0018      	movs	r0, r3
 80088f2:	4b4c      	ldr	r3, [pc, #304]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80088f4:	88db      	ldrh	r3, [r3, #6]
 80088f6:	4a51      	ldr	r2, [pc, #324]	@ (8008a3c <BMP280_get_calibration+0x2dc>)
 80088f8:	494c      	ldr	r1, [pc, #304]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	9000      	str	r0, [sp, #0]
 80088fe:	0023      	movs	r3, r4
 8008900:	2003      	movs	r0, #3
 8008902:	f008 f83f 	bl	8010984 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 8008906:	4b46      	ldr	r3, [pc, #280]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008908:	7a5b      	ldrb	r3, [r3, #9]
 800890a:	001c      	movs	r4, r3
 800890c:	4b44      	ldr	r3, [pc, #272]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800890e:	7a1b      	ldrb	r3, [r3, #8]
 8008910:	0018      	movs	r0, r3
 8008912:	4b44      	ldr	r3, [pc, #272]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008914:	2208      	movs	r2, #8
 8008916:	5e9b      	ldrsh	r3, [r3, r2]
 8008918:	4a49      	ldr	r2, [pc, #292]	@ (8008a40 <BMP280_get_calibration+0x2e0>)
 800891a:	4944      	ldr	r1, [pc, #272]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 800891c:	9301      	str	r3, [sp, #4]
 800891e:	9000      	str	r0, [sp, #0]
 8008920:	0023      	movs	r3, r4
 8008922:	2003      	movs	r0, #3
 8008924:	f008 f82e 	bl	8010984 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 8008928:	4b3d      	ldr	r3, [pc, #244]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800892a:	7adb      	ldrb	r3, [r3, #11]
 800892c:	001c      	movs	r4, r3
 800892e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008930:	7a9b      	ldrb	r3, [r3, #10]
 8008932:	0018      	movs	r0, r3
 8008934:	4b3b      	ldr	r3, [pc, #236]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008936:	220a      	movs	r2, #10
 8008938:	5e9b      	ldrsh	r3, [r3, r2]
 800893a:	4a42      	ldr	r2, [pc, #264]	@ (8008a44 <BMP280_get_calibration+0x2e4>)
 800893c:	493b      	ldr	r1, [pc, #236]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 800893e:	9301      	str	r3, [sp, #4]
 8008940:	9000      	str	r0, [sp, #0]
 8008942:	0023      	movs	r3, r4
 8008944:	2003      	movs	r0, #3
 8008946:	f008 f81d 	bl	8010984 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800894a:	4b35      	ldr	r3, [pc, #212]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800894c:	7b5b      	ldrb	r3, [r3, #13]
 800894e:	001c      	movs	r4, r3
 8008950:	4b33      	ldr	r3, [pc, #204]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008952:	7b1b      	ldrb	r3, [r3, #12]
 8008954:	0018      	movs	r0, r3
 8008956:	4b33      	ldr	r3, [pc, #204]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008958:	220c      	movs	r2, #12
 800895a:	5e9b      	ldrsh	r3, [r3, r2]
 800895c:	4a3a      	ldr	r2, [pc, #232]	@ (8008a48 <BMP280_get_calibration+0x2e8>)
 800895e:	4933      	ldr	r1, [pc, #204]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 8008960:	9301      	str	r3, [sp, #4]
 8008962:	9000      	str	r0, [sp, #0]
 8008964:	0023      	movs	r3, r4
 8008966:	2003      	movs	r0, #3
 8008968:	f008 f80c 	bl	8010984 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800896c:	4b2c      	ldr	r3, [pc, #176]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 800896e:	7bdb      	ldrb	r3, [r3, #15]
 8008970:	001c      	movs	r4, r3
 8008972:	4b2b      	ldr	r3, [pc, #172]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008974:	7b9b      	ldrb	r3, [r3, #14]
 8008976:	0018      	movs	r0, r3
 8008978:	4b2a      	ldr	r3, [pc, #168]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 800897a:	220e      	movs	r2, #14
 800897c:	5e9b      	ldrsh	r3, [r3, r2]
 800897e:	4a33      	ldr	r2, [pc, #204]	@ (8008a4c <BMP280_get_calibration+0x2ec>)
 8008980:	492a      	ldr	r1, [pc, #168]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	9000      	str	r0, [sp, #0]
 8008986:	0023      	movs	r3, r4
 8008988:	2003      	movs	r0, #3
 800898a:	f007 fffb 	bl	8010984 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800898e:	4b24      	ldr	r3, [pc, #144]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008990:	7c5b      	ldrb	r3, [r3, #17]
 8008992:	001c      	movs	r4, r3
 8008994:	4b22      	ldr	r3, [pc, #136]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 8008996:	7c1b      	ldrb	r3, [r3, #16]
 8008998:	0018      	movs	r0, r3
 800899a:	4b22      	ldr	r3, [pc, #136]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 800899c:	2210      	movs	r2, #16
 800899e:	5e9b      	ldrsh	r3, [r3, r2]
 80089a0:	4a2b      	ldr	r2, [pc, #172]	@ (8008a50 <BMP280_get_calibration+0x2f0>)
 80089a2:	4922      	ldr	r1, [pc, #136]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 80089a4:	9301      	str	r3, [sp, #4]
 80089a6:	9000      	str	r0, [sp, #0]
 80089a8:	0023      	movs	r3, r4
 80089aa:	2003      	movs	r0, #3
 80089ac:	f007 ffea 	bl	8010984 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 80089b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80089b2:	7cdb      	ldrb	r3, [r3, #19]
 80089b4:	001c      	movs	r4, r3
 80089b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80089b8:	7c9b      	ldrb	r3, [r3, #18]
 80089ba:	0018      	movs	r0, r3
 80089bc:	4b19      	ldr	r3, [pc, #100]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80089be:	2212      	movs	r2, #18
 80089c0:	5e9b      	ldrsh	r3, [r3, r2]
 80089c2:	4a24      	ldr	r2, [pc, #144]	@ (8008a54 <BMP280_get_calibration+0x2f4>)
 80089c4:	4919      	ldr	r1, [pc, #100]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	9000      	str	r0, [sp, #0]
 80089ca:	0023      	movs	r3, r4
 80089cc:	2003      	movs	r0, #3
 80089ce:	f007 ffd9 	bl	8010984 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 80089d2:	4b13      	ldr	r3, [pc, #76]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80089d4:	7d5b      	ldrb	r3, [r3, #21]
 80089d6:	001c      	movs	r4, r3
 80089d8:	4b11      	ldr	r3, [pc, #68]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80089da:	7d1b      	ldrb	r3, [r3, #20]
 80089dc:	0018      	movs	r0, r3
 80089de:	4b11      	ldr	r3, [pc, #68]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 80089e0:	2214      	movs	r2, #20
 80089e2:	5e9b      	ldrsh	r3, [r3, r2]
 80089e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <BMP280_get_calibration+0x2f8>)
 80089e6:	4911      	ldr	r1, [pc, #68]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	9000      	str	r0, [sp, #0]
 80089ec:	0023      	movs	r3, r4
 80089ee:	2003      	movs	r0, #3
 80089f0:	f007 ffc8 	bl	8010984 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 80089f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80089f6:	7ddb      	ldrb	r3, [r3, #23]
 80089f8:	001c      	movs	r4, r3
 80089fa:	4b09      	ldr	r3, [pc, #36]	@ (8008a20 <BMP280_get_calibration+0x2c0>)
 80089fc:	7d9b      	ldrb	r3, [r3, #22]
 80089fe:	0018      	movs	r0, r3
 8008a00:	4b08      	ldr	r3, [pc, #32]	@ (8008a24 <BMP280_get_calibration+0x2c4>)
 8008a02:	2216      	movs	r2, #22
 8008a04:	5e9b      	ldrsh	r3, [r3, r2]
 8008a06:	4a15      	ldr	r2, [pc, #84]	@ (8008a5c <BMP280_get_calibration+0x2fc>)
 8008a08:	4908      	ldr	r1, [pc, #32]	@ (8008a2c <BMP280_get_calibration+0x2cc>)
 8008a0a:	9301      	str	r3, [sp, #4]
 8008a0c:	9000      	str	r0, [sp, #0]
 8008a0e:	0023      	movs	r3, r4
 8008a10:	2003      	movs	r0, #3
 8008a12:	f007 ffb7 	bl	8010984 <CreateLine>
}
 8008a16:	46c0      	nop			@ (mov r8, r8)
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b001      	add	sp, #4
 8008a1c:	bd90      	pop	{r4, r7, pc}
 8008a1e:	46c0      	nop			@ (mov r8, r8)
 8008a20:	20000ba8 	.word	0x20000ba8
 8008a24:	20000b80 	.word	0x20000b80
 8008a28:	080272b0 	.word	0x080272b0
 8008a2c:	080272cc 	.word	0x080272cc
 8008a30:	080272d0 	.word	0x080272d0
 8008a34:	08027304 	.word	0x08027304
 8008a38:	08027338 	.word	0x08027338
 8008a3c:	0802736c 	.word	0x0802736c
 8008a40:	080273a0 	.word	0x080273a0
 8008a44:	080273d4 	.word	0x080273d4
 8008a48:	08027408 	.word	0x08027408
 8008a4c:	0802743c 	.word	0x0802743c
 8008a50:	08027470 	.word	0x08027470
 8008a54:	080274a4 	.word	0x080274a4
 8008a58:	080274d8 	.word	0x080274d8
 8008a5c:	0802750c 	.word	0x0802750c

08008a60 <BMP280_probe>:

static bool BMP280_probe() {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 8008a66:	4b34      	ldr	r3, [pc, #208]	@ (8008b38 <BMP280_probe+0xd8>)
 8008a68:	2276      	movs	r2, #118	@ 0x76
 8008a6a:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8008a6c:	1dba      	adds	r2, r7, #6
 8008a6e:	2301      	movs	r3, #1
 8008a70:	2101      	movs	r1, #1
 8008a72:	20d0      	movs	r0, #208	@ 0xd0
 8008a74:	f7ff fe14 	bl	80086a0 <ReadMemRegister>
 8008a78:	0003      	movs	r3, r0
 8008a7a:	001a      	movs	r2, r3
 8008a7c:	1dfb      	adds	r3, r7, #7
 8008a7e:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 8008a80:	1dfb      	adds	r3, r7, #7
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	b25b      	sxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <BMP280_probe+0x40>
 8008a8a:	1dbb      	adds	r3, r7, #6
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d006      	beq.n	8008aa0 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 8008a92:	1dbb      	adds	r3, r7, #6
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	4a29      	ldr	r2, [pc, #164]	@ (8008b3c <BMP280_probe+0xdc>)
 8008a98:	4929      	ldr	r1, [pc, #164]	@ (8008b40 <BMP280_probe+0xe0>)
 8008a9a:	2003      	movs	r0, #3
 8008a9c:	f007 ff72 	bl	8010984 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 8008aa0:	1dbb      	adds	r3, r7, #6
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b58      	cmp	r3, #88	@ 0x58
 8008aa6:	d01f      	beq.n	8008ae8 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 8008aa8:	4b23      	ldr	r3, [pc, #140]	@ (8008b38 <BMP280_probe+0xd8>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	4b21      	ldr	r3, [pc, #132]	@ (8008b38 <BMP280_probe+0xd8>)
 8008ab2:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8008ab4:	1dba      	adds	r2, r7, #6
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	2101      	movs	r1, #1
 8008aba:	20d0      	movs	r0, #208	@ 0xd0
 8008abc:	f7ff fdf0 	bl	80086a0 <ReadMemRegister>
 8008ac0:	0003      	movs	r3, r0
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	1dfb      	adds	r3, r7, #7
 8008ac6:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 8008ac8:	1dfb      	adds	r3, r7, #7
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	b25b      	sxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <BMP280_probe+0x88>
 8008ad2:	1dbb      	adds	r3, r7, #6
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d006      	beq.n	8008ae8 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 8008ada:	1dbb      	adds	r3, r7, #6
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	4a17      	ldr	r2, [pc, #92]	@ (8008b3c <BMP280_probe+0xdc>)
 8008ae0:	4917      	ldr	r1, [pc, #92]	@ (8008b40 <BMP280_probe+0xe0>)
 8008ae2:	2003      	movs	r0, #3
 8008ae4:	f007 ff4e 	bl	8010984 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 8008ae8:	1dbb      	adds	r3, r7, #6
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b58      	cmp	r3, #88	@ 0x58
 8008aee:	d110      	bne.n	8008b12 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 8008af0:	1dbb      	adds	r3, r7, #6
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	0018      	movs	r0, r3
 8008af6:	4b10      	ldr	r3, [pc, #64]	@ (8008b38 <BMP280_probe+0xd8>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	4a12      	ldr	r2, [pc, #72]	@ (8008b44 <BMP280_probe+0xe4>)
 8008afc:	4912      	ldr	r1, [pc, #72]	@ (8008b48 <BMP280_probe+0xe8>)
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	0003      	movs	r3, r0
 8008b02:	2002      	movs	r0, #2
 8008b04:	f007 ff3e 	bl	8010984 <CreateLine>
      BMP280_reset(); // get an initial state
 8008b08:	f7ff fe0c 	bl	8008724 <BMP280_reset>
      BMP280_get_calibration();
 8008b0c:	f7ff fe28 	bl	8008760 <BMP280_get_calibration>
 8008b10:	e008      	b.n	8008b24 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 8008b12:	4b09      	ldr	r3, [pc, #36]	@ (8008b38 <BMP280_probe+0xd8>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 8008b18:	4a0c      	ldr	r2, [pc, #48]	@ (8008b4c <BMP280_probe+0xec>)
 8008b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b50 <BMP280_probe+0xf0>)
 8008b1c:	0019      	movs	r1, r3
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f007 ff30 	bl	8010984 <CreateLine>
    }
    return bmp280I2Caddr;
 8008b24:	4b04      	ldr	r3, [pc, #16]	@ (8008b38 <BMP280_probe+0xd8>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	1e5a      	subs	r2, r3, #1
 8008b2a:	4193      	sbcs	r3, r2
 8008b2c:	b2db      	uxtb	r3, r3
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b002      	add	sp, #8
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	46c0      	nop			@ (mov r8, r8)
 8008b38:	20000098 	.word	0x20000098
 8008b3c:	08027540 	.word	0x08027540
 8008b40:	080272cc 	.word	0x080272cc
 8008b44:	08027570 	.word	0x08027570
 8008b48:	080272ac 	.word	0x080272ac
 8008b4c:	080275a8 	.word	0x080275a8
 8008b50:	080275bc 	.word	0x080275bc

08008b54 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  return BMP280_probe();
 8008b58:	f7ff ff82 	bl	8008a60 <BMP280_probe>
 8008b5c:	0003      	movs	r3, r0
}
 8008b5e:	0018      	movs	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 8008b6e:	4b05      	ldr	r3, [pc, #20]	@ (8008b84 <BMP_Init+0x20>)
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 8008b74:	4b04      	ldr	r3, [pc, #16]	@ (8008b88 <BMP_Init+0x24>)
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	601a      	str	r2, [r3, #0]
}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	b002      	add	sp, #8
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	46c0      	nop			@ (mov r8, r8)
 8008b84:	20000b7c 	.word	0x20000b7c
 8008b88:	20000b78 	.word	0x20000b78

08008b8c <BMP280_set_config>:


static bool BMP280_set_config() {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 8008b92:	1dbb      	adds	r3, r7, #6
 8008b94:	228c      	movs	r2, #140	@ 0x8c
 8008b96:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 8008b98:	1dba      	adds	r2, r7, #6
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	20f5      	movs	r0, #245	@ 0xf5
 8008ba0:	f7ff fd4e 	bl	8008640 <WriteMemRegister>
 8008ba4:	0003      	movs	r3, r0
 8008ba6:	001a      	movs	r2, r3
 8008ba8:	1dfb      	adds	r3, r7, #7
 8008baa:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8008bac:	f008 fb36 	bl	801121c <HAL_GetTick>
 8008bb0:	0003      	movs	r3, r0
 8008bb2:	330a      	adds	r3, #10
 8008bb4:	001a      	movs	r2, r3
 8008bb6:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <BMP280_set_config+0x44>)
 8008bb8:	601a      	str	r2, [r3, #0]
  return rslt;
 8008bba:	1dfb      	adds	r3, r7, #7
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	b25b      	sxtb	r3, r3
 8008bc0:	1e5a      	subs	r2, r3, #1
 8008bc2:	4193      	sbcs	r3, r2
 8008bc4:	b2db      	uxtb	r3, r3
}
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	b002      	add	sp, #8
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	20000ba4 	.word	0x20000ba4

08008bd4 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 8008bda:	1dbb      	adds	r3, r7, #6
 8008bdc:	2208      	movs	r2, #8
 8008bde:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 8008be0:	4b22      	ldr	r3, [pc, #136]	@ (8008c6c <BMP280_set_mode+0x98>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	224c      	movs	r2, #76	@ 0x4c
 8008be6:	4313      	orrs	r3, r2
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	1d7b      	adds	r3, r7, #5
 8008bec:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 8008bee:	1d7a      	adds	r2, r7, #5
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	20f4      	movs	r0, #244	@ 0xf4
 8008bf6:	f7ff fd23 	bl	8008640 <WriteMemRegister>
 8008bfa:	0003      	movs	r3, r0
 8008bfc:	001a      	movs	r2, r3
 8008bfe:	1dfb      	adds	r3, r7, #7
 8008c00:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 8008c02:	f008 fb0b 	bl	801121c <HAL_GetTick>
 8008c06:	0003      	movs	r3, r0
 8008c08:	22fa      	movs	r2, #250	@ 0xfa
 8008c0a:	0092      	lsls	r2, r2, #2
 8008c0c:	189a      	adds	r2, r3, r2
 8008c0e:	4b18      	ldr	r3, [pc, #96]	@ (8008c70 <BMP280_set_mode+0x9c>)
 8008c10:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 8008c12:	e016      	b.n	8008c42 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 8008c14:	1dba      	adds	r2, r7, #6
 8008c16:	2301      	movs	r3, #1
 8008c18:	2101      	movs	r1, #1
 8008c1a:	20f3      	movs	r0, #243	@ 0xf3
 8008c1c:	f7ff fd40 	bl	80086a0 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 8008c20:	4b13      	ldr	r3, [pc, #76]	@ (8008c70 <BMP280_set_mode+0x9c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	0018      	movs	r0, r3
 8008c26:	f007 fe57 	bl	80108d8 <TimestampIsReached>
 8008c2a:	1e03      	subs	r3, r0, #0
 8008c2c:	d006      	beq.n	8008c3c <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 8008c2e:	4a11      	ldr	r2, [pc, #68]	@ (8008c74 <BMP280_set_mode+0xa0>)
 8008c30:	4b11      	ldr	r3, [pc, #68]	@ (8008c78 <BMP280_set_mode+0xa4>)
 8008c32:	0019      	movs	r1, r3
 8008c34:	2001      	movs	r0, #1
 8008c36:	f007 fea5 	bl	8010984 <CreateLine>
      break;
 8008c3a:	e008      	b.n	8008c4e <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	f008 faf7 	bl	8011230 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 8008c42:	1dbb      	adds	r3, r7, #6
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	001a      	movs	r2, r3
 8008c48:	2308      	movs	r3, #8
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d1e2      	bne.n	8008c14 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 8008c4e:	f008 fae5 	bl	801121c <HAL_GetTick>
 8008c52:	0002      	movs	r2, r0
 8008c54:	4b06      	ldr	r3, [pc, #24]	@ (8008c70 <BMP280_set_mode+0x9c>)
 8008c56:	601a      	str	r2, [r3, #0]
  return rslt;
 8008c58:	1dfb      	adds	r3, r7, #7
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	b25b      	sxtb	r3, r3
 8008c5e:	1e5a      	subs	r2, r3, #1
 8008c60:	4193      	sbcs	r3, r2
 8008c62:	b2db      	uxtb	r3, r3
}
 8008c64:	0018      	movs	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b002      	add	sp, #8
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000099 	.word	0x20000099
 8008c70:	20000ba4 	.word	0x20000ba4
 8008c74:	080275c0 	.word	0x080275c0
 8008c78:	080275bc 	.word	0x080275bc

08008c7c <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 8008c82:	1dba      	adds	r2, r7, #6
 8008c84:	2301      	movs	r3, #1
 8008c86:	2101      	movs	r1, #1
 8008c88:	20f4      	movs	r0, #244	@ 0xf4
 8008c8a:	f7ff fd09 	bl	80086a0 <ReadMemRegister>
 8008c8e:	0003      	movs	r3, r0
 8008c90:	001a      	movs	r2, r3
 8008c92:	1dfb      	adds	r3, r7, #7
 8008c94:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 8008c96:	1dbb      	adds	r3, r7, #6
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	1dbb      	adds	r3, r7, #6
 8008ca2:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8008ca4:	f008 faba 	bl	801121c <HAL_GetTick>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	330a      	adds	r3, #10
 8008cac:	001a      	movs	r2, r3
 8008cae:	4b08      	ldr	r3, [pc, #32]	@ (8008cd0 <BMP280_get_mode+0x54>)
 8008cb0:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 8008cb2:	1dfb      	adds	r3, r7, #7
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	b25b      	sxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <BMP280_get_mode+0x46>
    bmpData = 255;
 8008cbc:	1dbb      	adds	r3, r7, #6
 8008cbe:	22ff      	movs	r2, #255	@ 0xff
 8008cc0:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 8008cc2:	1dbb      	adds	r3, r7, #6
 8008cc4:	781b      	ldrb	r3, [r3, #0]
}
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	b002      	add	sp, #8
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	46c0      	nop			@ (mov r8, r8)
 8008cd0:	20000ba4 	.word	0x20000ba4

08008cd4 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 8008cd4:	b5b0      	push	{r4, r5, r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 8008cda:	1d3a      	adds	r2, r7, #4
 8008cdc:	2306      	movs	r3, #6
 8008cde:	2101      	movs	r1, #1
 8008ce0:	20f7      	movs	r0, #247	@ 0xf7
 8008ce2:	f7ff fcdd 	bl	80086a0 <ReadMemRegister>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	001a      	movs	r2, r3
 8008cea:	230f      	movs	r3, #15
 8008cec:	18fb      	adds	r3, r7, r3
 8008cee:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8008cf0:	1d3b      	adds	r3, r7, #4
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b80      	cmp	r3, #128	@ 0x80
 8008cf6:	d00f      	beq.n	8008d18 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8008cf8:	1d3b      	adds	r3, r7, #4
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	031a      	lsls	r2, r3, #12
 8008cfe:	1d3b      	adds	r3, r7, #4
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	18d3      	adds	r3, r2, r3
 8008d06:	1d3a      	adds	r2, r7, #4
 8008d08:	7892      	ldrb	r2, [r2, #2]
 8008d0a:	0912      	lsrs	r2, r2, #4
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	189b      	adds	r3, r3, r2
 8008d10:	001a      	movs	r2, r3
 8008d12:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc0 <BMP280_get_measurement_values+0xec>)
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e019      	b.n	8008d4c <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8008d18:	4a2a      	ldr	r2, [pc, #168]	@ (8008dc4 <BMP280_get_measurement_values+0xf0>)
 8008d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc8 <BMP280_get_measurement_values+0xf4>)
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	2001      	movs	r0, #1
 8008d20:	f007 fe30 	bl	8010984 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	001d      	movs	r5, r3
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	785b      	ldrb	r3, [r3, #1]
 8008d2e:	0018      	movs	r0, r3
 8008d30:	1d3b      	adds	r3, r7, #4
 8008d32:	789b      	ldrb	r3, [r3, #2]
 8008d34:	001c      	movs	r4, r3
 8008d36:	4b22      	ldr	r3, [pc, #136]	@ (8008dc0 <BMP280_get_measurement_values+0xec>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a24      	ldr	r2, [pc, #144]	@ (8008dcc <BMP280_get_measurement_values+0xf8>)
 8008d3c:	4924      	ldr	r1, [pc, #144]	@ (8008dd0 <BMP280_get_measurement_values+0xfc>)
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	9401      	str	r4, [sp, #4]
 8008d42:	9000      	str	r0, [sp, #0]
 8008d44:	002b      	movs	r3, r5
 8008d46:	2003      	movs	r0, #3
 8008d48:	f007 fe1c 	bl	8010984 <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 8008d4c:	1d3b      	adds	r3, r7, #4
 8008d4e:	78db      	ldrb	r3, [r3, #3]
 8008d50:	2b80      	cmp	r3, #128	@ 0x80
 8008d52:	d00f      	beq.n	8008d74 <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8008d54:	1d3b      	adds	r3, r7, #4
 8008d56:	78db      	ldrb	r3, [r3, #3]
 8008d58:	031a      	lsls	r2, r3, #12
 8008d5a:	1d3b      	adds	r3, r7, #4
 8008d5c:	791b      	ldrb	r3, [r3, #4]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	18d3      	adds	r3, r2, r3
 8008d62:	1d3a      	adds	r2, r7, #4
 8008d64:	7952      	ldrb	r2, [r2, #5]
 8008d66:	0912      	lsrs	r2, r2, #4
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	189b      	adds	r3, r3, r2
 8008d6c:	001a      	movs	r2, r3
 8008d6e:	4b19      	ldr	r3, [pc, #100]	@ (8008dd4 <BMP280_get_measurement_values+0x100>)
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	e019      	b.n	8008da8 <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8008d74:	4a18      	ldr	r2, [pc, #96]	@ (8008dd8 <BMP280_get_measurement_values+0x104>)
 8008d76:	4b14      	ldr	r3, [pc, #80]	@ (8008dc8 <BMP280_get_measurement_values+0xf4>)
 8008d78:	0019      	movs	r1, r3
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	f007 fe02 	bl	8010984 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 8008d80:	1d3b      	adds	r3, r7, #4
 8008d82:	78db      	ldrb	r3, [r3, #3]
 8008d84:	001d      	movs	r5, r3
 8008d86:	1d3b      	adds	r3, r7, #4
 8008d88:	791b      	ldrb	r3, [r3, #4]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	1d3b      	adds	r3, r7, #4
 8008d8e:	795b      	ldrb	r3, [r3, #5]
 8008d90:	001c      	movs	r4, r3
 8008d92:	4b10      	ldr	r3, [pc, #64]	@ (8008dd4 <BMP280_get_measurement_values+0x100>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a11      	ldr	r2, [pc, #68]	@ (8008ddc <BMP280_get_measurement_values+0x108>)
 8008d98:	490d      	ldr	r1, [pc, #52]	@ (8008dd0 <BMP280_get_measurement_values+0xfc>)
 8008d9a:	9302      	str	r3, [sp, #8]
 8008d9c:	9401      	str	r4, [sp, #4]
 8008d9e:	9000      	str	r0, [sp, #0]
 8008da0:	002b      	movs	r3, r5
 8008da2:	2003      	movs	r0, #3
 8008da4:	f007 fdee 	bl	8010984 <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 8008da8:	230f      	movs	r3, #15
 8008daa:	18fb      	adds	r3, r7, r3
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b25b      	sxtb	r3, r3
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	4193      	sbcs	r3, r2
 8008db4:	b2db      	uxtb	r3, r3
}
 8008db6:	0018      	movs	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	b004      	add	sp, #16
 8008dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8008dbe:	46c0      	nop			@ (mov r8, r8)
 8008dc0:	20000ba0 	.word	0x20000ba0
 8008dc4:	080275ec 	.word	0x080275ec
 8008dc8:	080275bc 	.word	0x080275bc
 8008dcc:	08027630 	.word	0x08027630
 8008dd0:	080272cc 	.word	0x080272cc
 8008dd4:	20000b9c 	.word	0x20000b9c
 8008dd8:	08027678 	.word	0x08027678
 8008ddc:	080276b4 	.word	0x080276b4

08008de0 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8008de6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e60 <BMP280_calc_temperature+0x80>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	10da      	asrs	r2, r3, #3
 8008df0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e64 <BMP280_calc_temperature+0x84>)
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	4a1a      	ldr	r2, [pc, #104]	@ (8008e64 <BMP280_calc_temperature+0x84>)
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	5e52      	ldrsh	r2, [r2, r1]
 8008dfe:	4353      	muls	r3, r2
 8008e00:	12db      	asrs	r3, r3, #11
 8008e02:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	111b      	asrs	r3, r3, #4
 8008e08:	4a16      	ldr	r2, [pc, #88]	@ (8008e64 <BMP280_calc_temperature+0x84>)
 8008e0a:	8812      	ldrh	r2, [r2, #0]
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	1112      	asrs	r2, r2, #4
 8008e12:	4914      	ldr	r1, [pc, #80]	@ (8008e64 <BMP280_calc_temperature+0x84>)
 8008e14:	8809      	ldrh	r1, [r1, #0]
 8008e16:	1a52      	subs	r2, r2, r1
 8008e18:	4353      	muls	r3, r2
 8008e1a:	131b      	asrs	r3, r3, #12
 8008e1c:	4a11      	ldr	r2, [pc, #68]	@ (8008e64 <BMP280_calc_temperature+0x84>)
 8008e1e:	2104      	movs	r1, #4
 8008e20:	5e52      	ldrsh	r2, [r2, r1]
 8008e22:	4353      	muls	r3, r2
 8008e24:	139b      	asrs	r3, r3, #14
 8008e26:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	18d2      	adds	r2, r2, r3
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e68 <BMP280_calc_temperature+0x88>)
 8008e30:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <BMP280_calc_temperature+0x88>)
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	0013      	movs	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	3380      	adds	r3, #128	@ 0x80
 8008e3e:	121b      	asrs	r3, r3, #8
 8008e40:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8008e42:	68b8      	ldr	r0, [r7, #8]
 8008e44:	f7f8 fbc4 	bl	80015d0 <__aeabi_i2f>
 8008e48:	1c03      	adds	r3, r0, #0
 8008e4a:	4908      	ldr	r1, [pc, #32]	@ (8008e6c <BMP280_calc_temperature+0x8c>)
 8008e4c:	1c18      	adds	r0, r3, #0
 8008e4e:	f7f7 fec1 	bl	8000bd4 <__aeabi_fdiv>
 8008e52:	1c03      	adds	r3, r0, #0
 8008e54:	607b      	str	r3, [r7, #4]
  return airTemp;
 8008e56:	687b      	ldr	r3, [r7, #4]
}
 8008e58:	1c18      	adds	r0, r3, #0
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b006      	add	sp, #24
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000b9c 	.word	0x20000b9c
 8008e64:	20000b80 	.word	0x20000b80
 8008e68:	20000b98 	.word	0x20000b98
 8008e6c:	42c80000 	.word	0x42c80000

08008e70 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8008e76:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb0 <BMP280_calc_pressure+0x140>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8008e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8008fb4 <BMP280_calc_pressure+0x144>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	105b      	asrs	r3, r3, #1
 8008e82:	4a4d      	ldr	r2, [pc, #308]	@ (8008fb8 <BMP280_calc_pressure+0x148>)
 8008e84:	4694      	mov	ip, r2
 8008e86:	4463      	add	r3, ip
 8008e88:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	109b      	asrs	r3, r3, #2
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	1092      	asrs	r2, r2, #2
 8008e92:	4353      	muls	r3, r2
 8008e94:	12db      	asrs	r3, r3, #11
 8008e96:	4a49      	ldr	r2, [pc, #292]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008e98:	2110      	movs	r1, #16
 8008e9a:	5e52      	ldrsh	r2, [r2, r1]
 8008e9c:	4353      	muls	r3, r2
 8008e9e:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8008ea0:	4b46      	ldr	r3, [pc, #280]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008ea2:	220e      	movs	r2, #14
 8008ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8008ea6:	001a      	movs	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4353      	muls	r3, r2
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	18d3      	adds	r3, r2, r3
 8008eb2:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	109a      	asrs	r2, r3, #2
 8008eb8:	4b40      	ldr	r3, [pc, #256]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008eba:	210c      	movs	r1, #12
 8008ebc:	5e5b      	ldrsh	r3, [r3, r1]
 8008ebe:	041b      	lsls	r3, r3, #16
 8008ec0:	18d3      	adds	r3, r2, r3
 8008ec2:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8008ec4:	4b3d      	ldr	r3, [pc, #244]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008ec6:	220a      	movs	r2, #10
 8008ec8:	5e9b      	ldrsh	r3, [r3, r2]
 8008eca:	0019      	movs	r1, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	109b      	asrs	r3, r3, #2
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	1092      	asrs	r2, r2, #2
 8008ed4:	4353      	muls	r3, r2
 8008ed6:	135b      	asrs	r3, r3, #13
 8008ed8:	434b      	muls	r3, r1
 8008eda:	10da      	asrs	r2, r3, #3
 8008edc:	4b37      	ldr	r3, [pc, #220]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008ede:	2108      	movs	r1, #8
 8008ee0:	5e5b      	ldrsh	r3, [r3, r1]
 8008ee2:	0019      	movs	r1, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	434b      	muls	r3, r1
 8008ee8:	105b      	asrs	r3, r3, #1
 8008eea:	18d3      	adds	r3, r2, r3
 8008eec:	149b      	asrs	r3, r3, #18
 8008eee:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2280      	movs	r2, #128	@ 0x80
 8008ef4:	0212      	lsls	r2, r2, #8
 8008ef6:	4694      	mov	ip, r2
 8008ef8:	4463      	add	r3, ip
 8008efa:	4a30      	ldr	r2, [pc, #192]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008efc:	88d2      	ldrh	r2, [r2, #6]
 8008efe:	4353      	muls	r3, r2
 8008f00:	13db      	asrs	r3, r3, #15
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <BMP280_calc_pressure+0x9e>
    return 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e04b      	b.n	8008fa6 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	2280      	movs	r2, #128	@ 0x80
 8008f12:	0352      	lsls	r2, r2, #13
 8008f14:	1ad2      	subs	r2, r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	131b      	asrs	r3, r3, #12
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	001a      	movs	r2, r3
 8008f1e:	4b28      	ldr	r3, [pc, #160]	@ (8008fc0 <BMP280_calc_pressure+0x150>)
 8008f20:	4353      	muls	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	db09      	blt.n	8008f3e <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	0011      	movs	r1, r2
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7f7 f936 	bl	80001a4 <__udivsi3>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e007      	b.n	8008f4e <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	0019      	movs	r1, r3
 8008f42:	6978      	ldr	r0, [r7, #20]
 8008f44:	f7f7 f92e 	bl	80001a4 <__udivsi3>
 8008f48:	0003      	movs	r3, r0
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8008f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008f50:	2216      	movs	r2, #22
 8008f52:	5e9b      	ldrsh	r3, [r3, r2]
 8008f54:	0019      	movs	r1, r3
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	08db      	lsrs	r3, r3, #3
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	08d2      	lsrs	r2, r2, #3
 8008f5e:	4353      	muls	r3, r2
 8008f60:	0b5b      	lsrs	r3, r3, #13
 8008f62:	434b      	muls	r3, r1
 8008f64:	131b      	asrs	r3, r3, #12
 8008f66:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	089b      	lsrs	r3, r3, #2
 8008f6c:	001a      	movs	r2, r3
 8008f6e:	4b13      	ldr	r3, [pc, #76]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008f70:	2114      	movs	r1, #20
 8008f72:	5e5b      	ldrsh	r3, [r3, r1]
 8008f74:	4353      	muls	r3, r2
 8008f76:	135b      	asrs	r3, r3, #13
 8008f78:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	18d3      	adds	r3, r2, r3
 8008f80:	4a0e      	ldr	r2, [pc, #56]	@ (8008fbc <BMP280_calc_pressure+0x14c>)
 8008f82:	2112      	movs	r1, #18
 8008f84:	5e52      	ldrsh	r2, [r2, r1]
 8008f86:	189b      	adds	r3, r3, r2
 8008f88:	111a      	asrs	r2, r3, #4
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	18d3      	adds	r3, r2, r3
 8008f8e:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8008f90:	6978      	ldr	r0, [r7, #20]
 8008f92:	f7f8 fb69 	bl	8001668 <__aeabi_ui2f>
 8008f96:	1c03      	adds	r3, r0, #0
 8008f98:	490a      	ldr	r1, [pc, #40]	@ (8008fc4 <BMP280_calc_pressure+0x154>)
 8008f9a:	1c18      	adds	r0, r3, #0
 8008f9c:	f7f7 fe1a 	bl	8000bd4 <__aeabi_fdiv>
 8008fa0:	1c03      	adds	r3, r0, #0
 8008fa2:	607b      	str	r3, [r7, #4]
  return airhPa;
 8008fa4:	687b      	ldr	r3, [r7, #4]
}
 8008fa6:	1c18      	adds	r0, r3, #0
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	b006      	add	sp, #24
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	46c0      	nop			@ (mov r8, r8)
 8008fb0:	20000ba0 	.word	0x20000ba0
 8008fb4:	20000b98 	.word	0x20000b98
 8008fb8:	ffff0600 	.word	0xffff0600
 8008fbc:	20000b80 	.word	0x20000b80
 8008fc0:	00000c35 	.word	0x00000c35
 8008fc4:	42c80000 	.word	0x42c80000

08008fc8 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8008fc8:	b5b0      	push	{r4, r5, r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8008fce:	4b97      	ldr	r3, [pc, #604]	@ (800922c <BMP_Upkeep+0x264>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f007 fc80 	bl	80108d8 <TimestampIsReached>
 8008fd8:	0003      	movs	r3, r0
 8008fda:	001a      	movs	r2, r3
 8008fdc:	2301      	movs	r3, #1
 8008fde:	4053      	eors	r3, r2
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <BMP_Upkeep+0x24>
    return BMPState;
 8008fe6:	4b92      	ldr	r3, [pc, #584]	@ (8009230 <BMP_Upkeep+0x268>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	e11b      	b.n	8009224 <BMP_Upkeep+0x25c>
  }
  switch(BMPState) {
 8008fec:	4b90      	ldr	r3, [pc, #576]	@ (8009230 <BMP_Upkeep+0x268>)
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	2b09      	cmp	r3, #9
 8008ff2:	d900      	bls.n	8008ff6 <BMP_Upkeep+0x2e>
 8008ff4:	e101      	b.n	80091fa <BMP_Upkeep+0x232>
 8008ff6:	009a      	lsls	r2, r3, #2
 8008ff8:	4b8e      	ldr	r3, [pc, #568]	@ (8009234 <BMP_Upkeep+0x26c>)
 8008ffa:	18d3      	adds	r3, r2, r3
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8009000:	4a8d      	ldr	r2, [pc, #564]	@ (8009238 <BMP_Upkeep+0x270>)
 8009002:	4b8e      	ldr	r3, [pc, #568]	@ (800923c <BMP_Upkeep+0x274>)
 8009004:	0019      	movs	r1, r3
 8009006:	2003      	movs	r0, #3
 8009008:	f007 fcbc 	bl	8010984 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800900c:	f008 f906 	bl	801121c <HAL_GetTick>
 8009010:	0003      	movs	r3, r0
 8009012:	4a8b      	ldr	r2, [pc, #556]	@ (8009240 <BMP_Upkeep+0x278>)
 8009014:	189a      	adds	r2, r3, r2
 8009016:	4b85      	ldr	r3, [pc, #532]	@ (800922c <BMP_Upkeep+0x264>)
 8009018:	601a      	str	r2, [r3, #0]
    break;
 800901a:	e101      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800901c:	f001 fe2a 	bl	800ac74 <getSensorLock>
 8009020:	1e03      	subs	r3, r0, #0
 8009022:	d000      	beq.n	8009026 <BMP_Upkeep+0x5e>
 8009024:	e0f5      	b.n	8009212 <BMP_Upkeep+0x24a>
      break;
    }
    BMP280_reset();
 8009026:	f7ff fb7d 	bl	8008724 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 800902a:	4b81      	ldr	r3, [pc, #516]	@ (8009230 <BMP_Upkeep+0x268>)
 800902c:	2201      	movs	r2, #1
 800902e:	701a      	strb	r2, [r3, #0]
    break;
 8009030:	e0f6      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8009032:	f001 fe1f 	bl	800ac74 <getSensorLock>
 8009036:	1e03      	subs	r3, r0, #0
 8009038:	d000      	beq.n	800903c <BMP_Upkeep+0x74>
 800903a:	e0ec      	b.n	8009216 <BMP_Upkeep+0x24e>
      break;
    }
    setSensorLock(BMP280);
 800903c:	2004      	movs	r0, #4
 800903e:	f001 fe09 	bl	800ac54 <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8009042:	200a      	movs	r0, #10
 8009044:	f008 f8f4 	bl	8011230 <HAL_Delay>
    if (BMP280_set_config()) {
 8009048:	f7ff fda0 	bl	8008b8c <BMP280_set_config>
 800904c:	1e03      	subs	r3, r0, #0
 800904e:	d003      	beq.n	8009058 <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009050:	4b77      	ldr	r3, [pc, #476]	@ (8009230 <BMP_Upkeep+0x268>)
 8009052:	2202      	movs	r2, #2
 8009054:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8009056:	e0e3      	b.n	8009220 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009058:	4b75      	ldr	r3, [pc, #468]	@ (8009230 <BMP_Upkeep+0x268>)
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
  break;
 800905e:	e0df      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8009060:	f001 fe08 	bl	800ac74 <getSensorLock>
 8009064:	1e03      	subs	r3, r0, #0
 8009066:	d035      	beq.n	80090d4 <BMP_Upkeep+0x10c>
 8009068:	f001 fe04 	bl	800ac74 <getSensorLock>
 800906c:	0003      	movs	r3, r0
 800906e:	2b04      	cmp	r3, #4
 8009070:	d030      	beq.n	80090d4 <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 8009072:	1dfc      	adds	r4, r7, #7
 8009074:	f001 fdfe 	bl	800ac74 <getSensorLock>
 8009078:	0003      	movs	r3, r0
 800907a:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800907c:	1dfb      	adds	r3, r7, #7
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d019      	beq.n	80090b8 <BMP_Upkeep+0xf0>
 8009084:	1dfb      	adds	r3, r7, #7
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d013      	beq.n	80090b4 <BMP_Upkeep+0xec>
 800908c:	1dfb      	adds	r3, r7, #7
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d00d      	beq.n	80090b0 <BMP_Upkeep+0xe8>
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b03      	cmp	r3, #3
 800909a:	d007      	beq.n	80090ac <BMP_Upkeep+0xe4>
 800909c:	1dfb      	adds	r3, r7, #7
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d101      	bne.n	80090a8 <BMP_Upkeep+0xe0>
 80090a4:	4b67      	ldr	r3, [pc, #412]	@ (8009244 <BMP_Upkeep+0x27c>)
 80090a6:	e008      	b.n	80090ba <BMP_Upkeep+0xf2>
 80090a8:	4b67      	ldr	r3, [pc, #412]	@ (8009248 <BMP_Upkeep+0x280>)
 80090aa:	e006      	b.n	80090ba <BMP_Upkeep+0xf2>
 80090ac:	4b67      	ldr	r3, [pc, #412]	@ (800924c <BMP_Upkeep+0x284>)
 80090ae:	e004      	b.n	80090ba <BMP_Upkeep+0xf2>
 80090b0:	4b67      	ldr	r3, [pc, #412]	@ (8009250 <BMP_Upkeep+0x288>)
 80090b2:	e002      	b.n	80090ba <BMP_Upkeep+0xf2>
 80090b4:	4b67      	ldr	r3, [pc, #412]	@ (8009254 <BMP_Upkeep+0x28c>)
 80090b6:	e000      	b.n	80090ba <BMP_Upkeep+0xf2>
 80090b8:	4b67      	ldr	r3, [pc, #412]	@ (8009258 <BMP_Upkeep+0x290>)
 80090ba:	4a68      	ldr	r2, [pc, #416]	@ (800925c <BMP_Upkeep+0x294>)
 80090bc:	495f      	ldr	r1, [pc, #380]	@ (800923c <BMP_Upkeep+0x274>)
 80090be:	2003      	movs	r0, #3
 80090c0:	f007 fc60 	bl	8010984 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 80090c4:	f008 f8aa 	bl	801121c <HAL_GetTick>
 80090c8:	0003      	movs	r3, r0
 80090ca:	3361      	adds	r3, #97	@ 0x61
 80090cc:	001a      	movs	r2, r3
 80090ce:	4b57      	ldr	r3, [pc, #348]	@ (800922c <BMP_Upkeep+0x264>)
 80090d0:	601a      	str	r2, [r3, #0]
      break;
 80090d2:	e0a5      	b.n	8009220 <BMP_Upkeep+0x258>
    }
    if (getSensorLock() == FREE) {
 80090d4:	f001 fdce 	bl	800ac74 <getSensorLock>
 80090d8:	1e03      	subs	r3, r0, #0
 80090da:	d105      	bne.n	80090e8 <BMP_Upkeep+0x120>
      HAL_Delay(10);
 80090dc:	200a      	movs	r0, #10
 80090de:	f008 f8a7 	bl	8011230 <HAL_Delay>
      setSensorLock(BMP280);
 80090e2:	2004      	movs	r0, #4
 80090e4:	f001 fdb6 	bl	800ac54 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 80090e8:	f7ff fd74 	bl	8008bd4 <BMP280_set_mode>
 80090ec:	1e03      	subs	r3, r0, #0
 80090ee:	d003      	beq.n	80090f8 <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 80090f0:	4b4f      	ldr	r3, [pc, #316]	@ (8009230 <BMP_Upkeep+0x268>)
 80090f2:	2205      	movs	r2, #5
 80090f4:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 80090f6:	e093      	b.n	8009220 <BMP_Upkeep+0x258>
      Error("Error while setting BMP280 to forced mode");
 80090f8:	4a59      	ldr	r2, [pc, #356]	@ (8009260 <BMP_Upkeep+0x298>)
 80090fa:	4b5a      	ldr	r3, [pc, #360]	@ (8009264 <BMP_Upkeep+0x29c>)
 80090fc:	0019      	movs	r1, r3
 80090fe:	2001      	movs	r0, #1
 8009100:	f007 fc40 	bl	8010984 <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8009104:	4b4a      	ldr	r3, [pc, #296]	@ (8009230 <BMP_Upkeep+0x268>)
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
    break;
 800910a:	e089      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 800910c:	f7ff fde2 	bl	8008cd4 <BMP280_get_measurement_values>
 8009110:	1e03      	subs	r3, r0, #0
 8009112:	d006      	beq.n	8009122 <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 8009114:	2000      	movs	r0, #0
 8009116:	f001 fd9d 	bl	800ac54 <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800911a:	4b45      	ldr	r3, [pc, #276]	@ (8009230 <BMP_Upkeep+0x268>)
 800911c:	2203      	movs	r2, #3
 800911e:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8009120:	e07e      	b.n	8009220 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009122:	4b43      	ldr	r3, [pc, #268]	@ (8009230 <BMP_Upkeep+0x268>)
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8009128:	4a4f      	ldr	r2, [pc, #316]	@ (8009268 <BMP_Upkeep+0x2a0>)
 800912a:	4b4e      	ldr	r3, [pc, #312]	@ (8009264 <BMP_Upkeep+0x29c>)
 800912c:	0019      	movs	r1, r3
 800912e:	2001      	movs	r0, #1
 8009130:	f007 fc28 	bl	8010984 <CreateLine>
  break;
 8009134:	e074      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8009136:	f7ff fe53 	bl	8008de0 <BMP280_calc_temperature>
 800913a:	1c03      	adds	r3, r0, #0
 800913c:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800913e:	f7ff fe97 	bl	8008e70 <BMP280_calc_pressure>
 8009142:	1c03      	adds	r3, r0, #0
 8009144:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 8009146:	4949      	ldr	r1, [pc, #292]	@ (800926c <BMP_Upkeep+0x2a4>)
 8009148:	68b8      	ldr	r0, [r7, #8]
 800914a:	f7f7 fa05 	bl	8000558 <__aeabi_fcmpgt>
 800914e:	1e03      	subs	r3, r0, #0
 8009150:	d025      	beq.n	800919e <BMP_Upkeep+0x1d6>
 8009152:	4947      	ldr	r1, [pc, #284]	@ (8009270 <BMP_Upkeep+0x2a8>)
 8009154:	68b8      	ldr	r0, [r7, #8]
 8009156:	f7f7 f9eb 	bl	8000530 <__aeabi_fcmplt>
 800915a:	1e03      	subs	r3, r0, #0
 800915c:	d01f      	beq.n	800919e <BMP_Upkeep+0x1d6>
      sethPa(airhpa);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	1c18      	adds	r0, r3, #0
 8009162:	f7fa fb4d 	bl	8003800 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f7fa f97c 	bl	8003464 <__aeabi_f2d>
 800916c:	0004      	movs	r4, r0
 800916e:	000d      	movs	r5, r1
 8009170:	68b8      	ldr	r0, [r7, #8]
 8009172:	f7fa f977 	bl	8003464 <__aeabi_f2d>
 8009176:	0002      	movs	r2, r0
 8009178:	000b      	movs	r3, r1
 800917a:	483e      	ldr	r0, [pc, #248]	@ (8009274 <BMP_Upkeep+0x2ac>)
 800917c:	493e      	ldr	r1, [pc, #248]	@ (8009278 <BMP_Upkeep+0x2b0>)
 800917e:	9202      	str	r2, [sp, #8]
 8009180:	9303      	str	r3, [sp, #12]
 8009182:	9400      	str	r4, [sp, #0]
 8009184:	9501      	str	r5, [sp, #4]
 8009186:	0002      	movs	r2, r0
 8009188:	2002      	movs	r0, #2
 800918a:	f007 fbfb 	bl	8010984 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800918e:	f008 f845 	bl	801121c <HAL_GetTick>
 8009192:	0003      	movs	r3, r0
 8009194:	4a39      	ldr	r2, [pc, #228]	@ (800927c <BMP_Upkeep+0x2b4>)
 8009196:	189a      	adds	r2, r3, r2
 8009198:	4b24      	ldr	r3, [pc, #144]	@ (800922c <BMP_Upkeep+0x264>)
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e00d      	b.n	80091ba <BMP_Upkeep+0x1f2>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800919e:	4a38      	ldr	r2, [pc, #224]	@ (8009280 <BMP_Upkeep+0x2b8>)
 80091a0:	4b30      	ldr	r3, [pc, #192]	@ (8009264 <BMP_Upkeep+0x29c>)
 80091a2:	0019      	movs	r1, r3
 80091a4:	2001      	movs	r0, #1
 80091a6:	f007 fbed 	bl	8010984 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 2000;
 80091aa:	f008 f837 	bl	801121c <HAL_GetTick>
 80091ae:	0003      	movs	r3, r0
 80091b0:	22fa      	movs	r2, #250	@ 0xfa
 80091b2:	00d2      	lsls	r2, r2, #3
 80091b4:	189a      	adds	r2, r3, r2
 80091b6:	4b1d      	ldr	r3, [pc, #116]	@ (800922c <BMP_Upkeep+0x264>)
 80091b8:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009230 <BMP_Upkeep+0x268>)
 80091bc:	2208      	movs	r2, #8
 80091be:	701a      	strb	r2, [r3, #0]
    break;
 80091c0:	e02e      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 80091c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009230 <BMP_Upkeep+0x268>)
 80091c4:	2209      	movs	r2, #9
 80091c6:	701a      	strb	r2, [r3, #0]
    break;
 80091c8:	e02a      	b.n	8009220 <BMP_Upkeep+0x258>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 80091ca:	f001 fd53 	bl	800ac74 <getSensorLock>
 80091ce:	1e03      	subs	r3, r0, #0
 80091d0:	d123      	bne.n	800921a <BMP_Upkeep+0x252>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 80091d2:	f7ff fd53 	bl	8008c7c <BMP280_get_mode>
 80091d6:	0003      	movs	r3, r0
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d103      	bne.n	80091e4 <BMP_Upkeep+0x21c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 80091dc:	4b14      	ldr	r3, [pc, #80]	@ (8009230 <BMP_Upkeep+0x268>)
 80091de:	2205      	movs	r2, #5
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e002      	b.n	80091ea <BMP_Upkeep+0x222>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 80091e4:	4b12      	ldr	r3, [pc, #72]	@ (8009230 <BMP_Upkeep+0x268>)
 80091e6:	2202      	movs	r2, #2
 80091e8:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 80091ea:	f008 f817 	bl	801121c <HAL_GetTick>
 80091ee:	0003      	movs	r3, r0
 80091f0:	3317      	adds	r3, #23
 80091f2:	001a      	movs	r2, r3
 80091f4:	4b0d      	ldr	r3, [pc, #52]	@ (800922c <BMP_Upkeep+0x264>)
 80091f6:	601a      	str	r2, [r3, #0]
    break;
 80091f8:	e012      	b.n	8009220 <BMP_Upkeep+0x258>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 80091fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009230 <BMP_Upkeep+0x268>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 8009200:	f001 fd38 	bl	800ac74 <getSensorLock>
 8009204:	0003      	movs	r3, r0
 8009206:	2b04      	cmp	r3, #4
 8009208:	d009      	beq.n	800921e <BMP_Upkeep+0x256>
      setSensorLock(FREE);
 800920a:	2000      	movs	r0, #0
 800920c:	f001 fd22 	bl	800ac54 <setSensorLock>
    }
    break;
 8009210:	e005      	b.n	800921e <BMP_Upkeep+0x256>
      break;
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	e004      	b.n	8009220 <BMP_Upkeep+0x258>
      break;
 8009216:	46c0      	nop			@ (mov r8, r8)
 8009218:	e002      	b.n	8009220 <BMP_Upkeep+0x258>
      break;
 800921a:	46c0      	nop			@ (mov r8, r8)
 800921c:	e000      	b.n	8009220 <BMP_Upkeep+0x258>
    break;
 800921e:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 8009220:	4b03      	ldr	r3, [pc, #12]	@ (8009230 <BMP_Upkeep+0x268>)
 8009222:	781b      	ldrb	r3, [r3, #0]
}
 8009224:	0018      	movs	r0, r3
 8009226:	46bd      	mov	sp, r7
 8009228:	b004      	add	sp, #16
 800922a:	bdb0      	pop	{r4, r5, r7, pc}
 800922c:	20000ba4 	.word	0x20000ba4
 8009230:	2000009a 	.word	0x2000009a
 8009234:	08028f38 	.word	0x08028f38
 8009238:	080276fc 	.word	0x080276fc
 800923c:	080272cc 	.word	0x080272cc
 8009240:	002f9b80 	.word	0x002f9b80
 8009244:	08027738 	.word	0x08027738
 8009248:	08027740 	.word	0x08027740
 800924c:	08027748 	.word	0x08027748
 8009250:	08027750 	.word	0x08027750
 8009254:	08027758 	.word	0x08027758
 8009258:	08027760 	.word	0x08027760
 800925c:	08027768 	.word	0x08027768
 8009260:	08027790 	.word	0x08027790
 8009264:	080275bc 	.word	0x080275bc
 8009268:	080277bc 	.word	0x080277bc
 800926c:	44548000 	.word	0x44548000
 8009270:	44898000 	.word	0x44898000
 8009274:	080277f4 	.word	0x080277f4
 8009278:	080272ac 	.word	0x080272ac
 800927c:	0000ea60 	.word	0x0000ea60
 8009280:	0802782c 	.word	0x0802782c

08009284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800928a:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <MX_DMA_Init+0x48>)
 800928c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800928e:	4b0f      	ldr	r3, [pc, #60]	@ (80092cc <MX_DMA_Init+0x48>)
 8009290:	2101      	movs	r1, #1
 8009292:	430a      	orrs	r2, r1
 8009294:	631a      	str	r2, [r3, #48]	@ 0x30
 8009296:	4b0d      	ldr	r3, [pc, #52]	@ (80092cc <MX_DMA_Init+0x48>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929a:	2201      	movs	r2, #1
 800929c:	4013      	ands	r3, r2
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80092a2:	2200      	movs	r2, #0
 80092a4:	2100      	movs	r1, #0
 80092a6:	200a      	movs	r0, #10
 80092a8:	f008 fc5c 	bl	8011b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80092ac:	200a      	movs	r0, #10
 80092ae:	f008 fc6e 	bl	8011b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80092b2:	2200      	movs	r2, #0
 80092b4:	2103      	movs	r1, #3
 80092b6:	200b      	movs	r0, #11
 80092b8:	f008 fc54 	bl	8011b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80092bc:	200b      	movs	r0, #11
 80092be:	f008 fc66 	bl	8011b8e <HAL_NVIC_EnableIRQ>

}
 80092c2:	46c0      	nop			@ (mov r8, r8)
 80092c4:	46bd      	mov	sp, r7
 80092c6:	b002      	add	sp, #8
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	46c0      	nop			@ (mov r8, r8)
 80092cc:	40021000 	.word	0x40021000

080092d0 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80092d0:	b590      	push	{r4, r7, lr}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	1dbb      	adds	r3, r7, #6
 80092dc:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 80092de:	4b17      	ldr	r3, [pc, #92]	@ (800933c <WriteUint8ArrayEeprom+0x6c>)
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 80092e4:	f008 ffd0 	bl	8012288 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 80092e8:	2316      	movs	r3, #22
 80092ea:	18fb      	adds	r3, r7, r3
 80092ec:	2200      	movs	r2, #0
 80092ee:	801a      	strh	r2, [r3, #0]
 80092f0:	e015      	b.n	800931e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 80092f2:	4b12      	ldr	r3, [pc, #72]	@ (800933c <WriteUint8ArrayEeprom+0x6c>)
 80092f4:	6819      	ldr	r1, [r3, #0]
 80092f6:	2416      	movs	r4, #22
 80092f8:	193b      	adds	r3, r7, r4
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	18d3      	adds	r3, r2, r3
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	001a      	movs	r2, r3
 8009304:	2000      	movs	r0, #0
 8009306:	f009 f827 	bl	8012358 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800930a:	4b0c      	ldr	r3, [pc, #48]	@ (800933c <WriteUint8ArrayEeprom+0x6c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <WriteUint8ArrayEeprom+0x6c>)
 8009312:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8009314:	193b      	adds	r3, r7, r4
 8009316:	881a      	ldrh	r2, [r3, #0]
 8009318:	193b      	adds	r3, r7, r4
 800931a:	3201      	adds	r2, #1
 800931c:	801a      	strh	r2, [r3, #0]
 800931e:	2316      	movs	r3, #22
 8009320:	18fa      	adds	r2, r7, r3
 8009322:	1dbb      	adds	r3, r7, #6
 8009324:	8812      	ldrh	r2, [r2, #0]
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	429a      	cmp	r2, r3
 800932a:	d3e2      	bcc.n	80092f2 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800932c:	f008 ffda 	bl	80122e4 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 8009330:	4b02      	ldr	r3, [pc, #8]	@ (800933c <WriteUint8ArrayEeprom+0x6c>)
 8009332:	681b      	ldr	r3, [r3, #0]
}
 8009334:	0018      	movs	r0, r3
 8009336:	46bd      	mov	sp, r7
 8009338:	b007      	add	sp, #28
 800933a:	bd90      	pop	{r4, r7, pc}
 800933c:	20000bc8 	.word	0x20000bc8

08009340 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	0019      	movs	r1, r3
 800934c:	1dbb      	adds	r3, r7, #6
 800934e:	801a      	strh	r2, [r3, #0]
 8009350:	1d3b      	adds	r3, r7, #4
 8009352:	1c0a      	adds	r2, r1, #0
 8009354:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 8009356:	1dba      	adds	r2, r7, #6
 8009358:	1d3b      	adds	r3, r7, #4
 800935a:	8812      	ldrh	r2, [r2, #0]
 800935c:	881b      	ldrh	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d806      	bhi.n	8009370 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 8009362:	1dbb      	adds	r3, r7, #6
 8009364:	881a      	ldrh	r2, [r3, #0]
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	0018      	movs	r0, r3
 800936c:	f7ff ffb0 	bl	80092d0 <WriteUint8ArrayEeprom>
    }
}
 8009370:	46c0      	nop			@ (mov r8, r8)
 8009372:	46bd      	mov	sp, r7
 8009374:	b004      	add	sp, #16
 8009376:	bd80      	pop	{r7, pc}

08009378 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	1dbb      	adds	r3, r7, #6
 8009384:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8009386:	2316      	movs	r3, #22
 8009388:	18fb      	adds	r3, r7, r3
 800938a:	2200      	movs	r2, #0
 800938c:	801a      	strh	r2, [r3, #0]
 800938e:	e010      	b.n	80093b2 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8009390:	2016      	movs	r0, #22
 8009392:	183b      	adds	r3, r7, r0
 8009394:	881a      	ldrh	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	18d3      	adds	r3, r2, r3
 800939a:	0019      	movs	r1, r3
 800939c:	183b      	adds	r3, r7, r0
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	18d3      	adds	r3, r2, r3
 80093a4:	780a      	ldrb	r2, [r1, #0]
 80093a6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80093a8:	183b      	adds	r3, r7, r0
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	183b      	adds	r3, r7, r0
 80093ae:	3201      	adds	r2, #1
 80093b0:	801a      	strh	r2, [r3, #0]
 80093b2:	2316      	movs	r3, #22
 80093b4:	18fa      	adds	r2, r7, r3
 80093b6:	1dbb      	adds	r3, r7, #6
 80093b8:	8812      	ldrh	r2, [r2, #0]
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d3e7      	bcc.n	8009390 <ReadUint8ArrayEEprom+0x18>
    }
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
 80093c2:	46c0      	nop			@ (mov r8, r8)
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b006      	add	sp, #24
 80093c8:	bd80      	pop	{r7, pc}

080093ca <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 80093ca:	b590      	push	{r4, r7, lr}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	000a      	movs	r2, r1
 80093d4:	1cbb      	adds	r3, r7, #2
 80093d6:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 80093d8:	f008 ff56 	bl	8012288 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 80093dc:	230e      	movs	r3, #14
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	2200      	movs	r2, #0
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	e00c      	b.n	8009400 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 80093e6:	240e      	movs	r4, #14
 80093e8:	193b      	adds	r3, r7, r4
 80093ea:	881a      	ldrh	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	18d3      	adds	r3, r2, r3
 80093f0:	0018      	movs	r0, r3
 80093f2:	f008 ff85 	bl	8012300 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 80093f6:	193b      	adds	r3, r7, r4
 80093f8:	193a      	adds	r2, r7, r4
 80093fa:	8812      	ldrh	r2, [r2, #0]
 80093fc:	3204      	adds	r2, #4
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	230e      	movs	r3, #14
 8009402:	18fa      	adds	r2, r7, r3
 8009404:	1cbb      	adds	r3, r7, #2
 8009406:	8812      	ldrh	r2, [r2, #0]
 8009408:	881b      	ldrh	r3, [r3, #0]
 800940a:	429a      	cmp	r2, r3
 800940c:	d3eb      	bcc.n	80093e6 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800940e:	f008 ff69 	bl	80122e4 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8009412:	46c0      	nop			@ (mov r8, r8)
 8009414:	46bd      	mov	sp, r7
 8009416:	b005      	add	sp, #20
 8009418:	bd90      	pop	{r4, r7, pc}
	...

0800941c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b7f      	cmp	r3, #127	@ 0x7f
 800942c:	d901      	bls.n	8009432 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800942e:	237f      	movs	r3, #127	@ 0x7f
 8009430:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8009432:	2017      	movs	r0, #23
 8009434:	183b      	adds	r3, r7, r0
 8009436:	490d      	ldr	r1, [pc, #52]	@ (800946c <accessLUT10log10+0x50>)
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	188a      	adds	r2, r1, r2
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8009440:	0001      	movs	r1, r0
 8009442:	187b      	adds	r3, r7, r1
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2206      	movs	r2, #6
 8009448:	4113      	asrs	r3, r2
 800944a:	001a      	movs	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8009450:	187b      	adds	r3, r7, r1
 8009452:	781a      	ldrb	r2, [r3, #0]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2106      	movs	r1, #6
 800945a:	408b      	lsls	r3, r1
 800945c:	1ad2      	subs	r2, r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	601a      	str	r2, [r3, #0]
}
 8009462:	46c0      	nop			@ (mov r8, r8)
 8009464:	46bd      	mov	sp, r7
 8009466:	b006      	add	sp, #24
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			@ (mov r8, r8)
 800946c:	08028f60 	.word	0x08028f60

08009470 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8009470:	b5b0      	push	{r4, r5, r7, lr}
 8009472:	b090      	sub	sp, #64	@ 0x40
 8009474:	af00      	add	r7, sp, #0
 8009476:	6138      	str	r0, [r7, #16]
 8009478:	6179      	str	r1, [r7, #20]
 800947a:	60fa      	str	r2, [r7, #12]
 800947c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800947e:	2308      	movs	r3, #8
 8009480:	001a      	movs	r2, r3
 8009482:	3a20      	subs	r2, #32
 8009484:	2a00      	cmp	r2, #0
 8009486:	db03      	blt.n	8009490 <efficient10log10+0x20>
 8009488:	2101      	movs	r1, #1
 800948a:	4091      	lsls	r1, r2
 800948c:	000d      	movs	r5, r1
 800948e:	e008      	b.n	80094a2 <efficient10log10+0x32>
 8009490:	2220      	movs	r2, #32
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	2101      	movs	r1, #1
 8009496:	40d1      	lsrs	r1, r2
 8009498:	000a      	movs	r2, r1
 800949a:	2100      	movs	r1, #0
 800949c:	4099      	lsls	r1, r3
 800949e:	000d      	movs	r5, r1
 80094a0:	4315      	orrs	r5, r2
 80094a2:	2201      	movs	r2, #1
 80094a4:	409a      	lsls	r2, r3
 80094a6:	0014      	movs	r4, r2
 80094a8:	2201      	movs	r2, #1
 80094aa:	4252      	negs	r2, r2
 80094ac:	17d3      	asrs	r3, r2, #31
 80094ae:	1912      	adds	r2, r2, r4
 80094b0:	416b      	adcs	r3, r5
 80094b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80094b6:	2336      	movs	r3, #54	@ 0x36
 80094b8:	2208      	movs	r2, #8
 80094ba:	189b      	adds	r3, r3, r2
 80094bc:	19db      	adds	r3, r3, r7
 80094be:	2200      	movs	r2, #0
 80094c0:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80094c2:	e017      	b.n	80094f4 <efficient10log10+0x84>
    {
        P = P >> 1;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	07db      	lsls	r3, r3, #31
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	0852      	lsrs	r2, r2, #1
 80094cc:	603a      	str	r2, [r7, #0]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	431a      	orrs	r2, r3
 80094d2:	603a      	str	r2, [r7, #0]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	607b      	str	r3, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	687c      	ldr	r4, [r7, #4]
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	617c      	str	r4, [r7, #20]
        bShift++;
 80094e2:	2136      	movs	r1, #54	@ 0x36
 80094e4:	2008      	movs	r0, #8
 80094e6:	180b      	adds	r3, r1, r0
 80094e8:	19db      	adds	r3, r3, r7
 80094ea:	881a      	ldrh	r2, [r3, #0]
 80094ec:	180b      	adds	r3, r1, r0
 80094ee:	19db      	adds	r3, r3, r7
 80094f0:	3201      	adds	r2, #1
 80094f2:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d8e3      	bhi.n	80094c4 <efficient10log10+0x54>
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009500:	429a      	cmp	r2, r3
 8009502:	d103      	bne.n	800950c <efficient10log10+0x9c>
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	429a      	cmp	r2, r3
 800950a:	d8db      	bhi.n	80094c4 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	2308      	movs	r3, #8
 8009510:	3b01      	subs	r3, #1
 8009512:	2101      	movs	r1, #1
 8009514:	4099      	lsls	r1, r3
 8009516:	000b      	movs	r3, r1
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8009524:	231c      	movs	r3, #28
 8009526:	2408      	movs	r4, #8
 8009528:	191b      	adds	r3, r3, r4
 800952a:	19da      	adds	r2, r3, r7
 800952c:	2320      	movs	r3, #32
 800952e:	191b      	adds	r3, r3, r4
 8009530:	19d9      	adds	r1, r3, r7
 8009532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009534:	0018      	movs	r0, r3
 8009536:	f7ff ff71 	bl	800941c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800953a:	2215      	movs	r2, #21
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8009540:	2036      	movs	r0, #54	@ 0x36
 8009542:	1902      	adds	r2, r0, r4
 8009544:	19d2      	adds	r2, r2, r7
 8009546:	8812      	ldrh	r2, [r2, #0]
 8009548:	2103      	movs	r1, #3
 800954a:	434a      	muls	r2, r1
 800954c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800954e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8009550:	0021      	movs	r1, r4
 8009552:	1843      	adds	r3, r0, r1
 8009554:	19db      	adds	r3, r3, r7
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	2201      	movs	r2, #1
 800955a:	4353      	muls	r3, r2
 800955c:	2203      	movs	r2, #3
 800955e:	4113      	asrs	r3, r2
 8009560:	001a      	movs	r2, r3
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8009566:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8009568:	2314      	movs	r3, #20
 800956a:	185b      	adds	r3, r3, r1
 800956c:	19da      	adds	r2, r3, r7
 800956e:	2318      	movs	r3, #24
 8009570:	185b      	adds	r3, r3, r1
 8009572:	19db      	adds	r3, r3, r7
 8009574:	0011      	movs	r1, r2
 8009576:	0018      	movs	r0, r3
 8009578:	f000 f80a 	bl	8009590 <correctIntFracNumber>
    integerPart[0] = intPart;
 800957c:	6a3a      	ldr	r2, [r7, #32]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	601a      	str	r2, [r3, #0]
}
 8009588:	46c0      	nop			@ (mov r8, r8)
 800958a:	46bd      	mov	sp, r7
 800958c:	b010      	add	sp, #64	@ 0x40
 800958e:	bdb0      	pop	{r4, r5, r7, pc}

08009590 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800959a:	e00a      	b.n	80095b2 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3b0a      	subs	r3, #10
 80095ac:	001a      	movs	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b09      	cmp	r3, #9
 80095b8:	dcf0      	bgt.n	800959c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80095ba:	e00a      	b.n	80095d2 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	1e5a      	subs	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	330a      	adds	r3, #10
 80095cc:	001a      	movs	r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3309      	adds	r3, #9
 80095d8:	dbf0      	blt.n	80095bc <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da0f      	bge.n	8009602 <correctIntFracNumber+0x72>
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dd0b      	ble.n	8009602 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3b0a      	subs	r3, #10
 80095fa:	001a      	movs	r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8009600:	e012      	b.n	8009628 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	dd0e      	ble.n	8009628 <correctIntFracNumber+0x98>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	da0a      	bge.n	8009628 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	1e5a      	subs	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	330a      	adds	r3, #10
 8009622:	001a      	movs	r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	601a      	str	r2, [r3, #0]
}
 8009628:	46c0      	nop			@ (mov r8, r8)
 800962a:	46bd      	mov	sp, r7
 800962c:	b002      	add	sp, #8
 800962e:	bd80      	pop	{r7, pc}

08009630 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b08b      	sub	sp, #44	@ 0x2c
 8009634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009636:	2414      	movs	r4, #20
 8009638:	193b      	adds	r3, r7, r4
 800963a:	0018      	movs	r0, r3
 800963c:	2314      	movs	r3, #20
 800963e:	001a      	movs	r2, r3
 8009640:	2100      	movs	r1, #0
 8009642:	f019 fafd 	bl	8022c40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009646:	4b8a      	ldr	r3, [pc, #552]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964a:	4b89      	ldr	r3, [pc, #548]	@ (8009870 <MX_GPIO_Init+0x240>)
 800964c:	2104      	movs	r1, #4
 800964e:	430a      	orrs	r2, r1
 8009650:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009652:	4b87      	ldr	r3, [pc, #540]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009656:	2204      	movs	r2, #4
 8009658:	4013      	ands	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
 800965c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800965e:	4b84      	ldr	r3, [pc, #528]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009662:	4b83      	ldr	r3, [pc, #524]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009664:	2180      	movs	r1, #128	@ 0x80
 8009666:	430a      	orrs	r2, r1
 8009668:	62da      	str	r2, [r3, #44]	@ 0x2c
 800966a:	4b81      	ldr	r3, [pc, #516]	@ (8009870 <MX_GPIO_Init+0x240>)
 800966c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966e:	2280      	movs	r2, #128	@ 0x80
 8009670:	4013      	ands	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009676:	4b7e      	ldr	r3, [pc, #504]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800967a:	4b7d      	ldr	r3, [pc, #500]	@ (8009870 <MX_GPIO_Init+0x240>)
 800967c:	2101      	movs	r1, #1
 800967e:	430a      	orrs	r2, r1
 8009680:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009682:	4b7b      	ldr	r3, [pc, #492]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009686:	2201      	movs	r2, #1
 8009688:	4013      	ands	r3, r2
 800968a:	60bb      	str	r3, [r7, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800968e:	4b78      	ldr	r3, [pc, #480]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009692:	4b77      	ldr	r3, [pc, #476]	@ (8009870 <MX_GPIO_Init+0x240>)
 8009694:	2102      	movs	r1, #2
 8009696:	430a      	orrs	r2, r1
 8009698:	62da      	str	r2, [r3, #44]	@ 0x2c
 800969a:	4b75      	ldr	r3, [pc, #468]	@ (8009870 <MX_GPIO_Init+0x240>)
 800969c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969e:	2202      	movs	r2, #2
 80096a0:	4013      	ands	r3, r2
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096a6:	4b72      	ldr	r3, [pc, #456]	@ (8009870 <MX_GPIO_Init+0x240>)
 80096a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096aa:	4b71      	ldr	r3, [pc, #452]	@ (8009870 <MX_GPIO_Init+0x240>)
 80096ac:	2108      	movs	r1, #8
 80096ae:	430a      	orrs	r2, r1
 80096b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80096b2:	4b6f      	ldr	r3, [pc, #444]	@ (8009870 <MX_GPIO_Init+0x240>)
 80096b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b6:	2208      	movs	r2, #8
 80096b8:	4013      	ands	r3, r2
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80096be:	4b6d      	ldr	r3, [pc, #436]	@ (8009874 <MX_GPIO_Init+0x244>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	2101      	movs	r1, #1
 80096c4:	0018      	movs	r0, r3
 80096c6:	f009 f83a 	bl	801273e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80096ca:	4b6a      	ldr	r3, [pc, #424]	@ (8009874 <MX_GPIO_Init+0x244>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	2102      	movs	r1, #2
 80096d0:	0018      	movs	r0, r3
 80096d2:	f009 f834 	bl	801273e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80096d6:	4968      	ldr	r1, [pc, #416]	@ (8009878 <MX_GPIO_Init+0x248>)
 80096d8:	4b68      	ldr	r3, [pc, #416]	@ (800987c <MX_GPIO_Init+0x24c>)
 80096da:	2201      	movs	r2, #1
 80096dc:	0018      	movs	r0, r3
 80096de:	f009 f82e 	bl	801273e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80096e2:	2380      	movs	r3, #128	@ 0x80
 80096e4:	011b      	lsls	r3, r3, #4
 80096e6:	4866      	ldr	r0, [pc, #408]	@ (8009880 <MX_GPIO_Init+0x250>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	0019      	movs	r1, r3
 80096ec:	f009 f827 	bl	801273e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80096f0:	2380      	movs	r3, #128	@ 0x80
 80096f2:	015b      	lsls	r3, r3, #5
 80096f4:	4862      	ldr	r0, [pc, #392]	@ (8009880 <MX_GPIO_Init+0x250>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	0019      	movs	r1, r3
 80096fa:	f009 f820 	bl	801273e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80096fe:	193b      	adds	r3, r7, r4
 8009700:	4a60      	ldr	r2, [pc, #384]	@ (8009884 <MX_GPIO_Init+0x254>)
 8009702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009704:	193b      	adds	r3, r7, r4
 8009706:	2203      	movs	r2, #3
 8009708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800970a:	193b      	adds	r3, r7, r4
 800970c:	2200      	movs	r2, #0
 800970e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009710:	193b      	adds	r3, r7, r4
 8009712:	4a5b      	ldr	r2, [pc, #364]	@ (8009880 <MX_GPIO_Init+0x250>)
 8009714:	0019      	movs	r1, r3
 8009716:	0010      	movs	r0, r2
 8009718:	f008 fe76 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800971c:	193b      	adds	r3, r7, r4
 800971e:	2203      	movs	r2, #3
 8009720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009722:	193b      	adds	r3, r7, r4
 8009724:	2201      	movs	r2, #1
 8009726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009728:	193b      	adds	r3, r7, r4
 800972a:	2200      	movs	r2, #0
 800972c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800972e:	193b      	adds	r3, r7, r4
 8009730:	2200      	movs	r2, #0
 8009732:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009734:	193b      	adds	r3, r7, r4
 8009736:	4a4f      	ldr	r2, [pc, #316]	@ (8009874 <MX_GPIO_Init+0x244>)
 8009738:	0019      	movs	r1, r3
 800973a:	0010      	movs	r0, r2
 800973c:	f008 fe64 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8009740:	193b      	adds	r3, r7, r4
 8009742:	2270      	movs	r2, #112	@ 0x70
 8009744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009746:	193b      	adds	r3, r7, r4
 8009748:	2203      	movs	r2, #3
 800974a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800974c:	193b      	adds	r3, r7, r4
 800974e:	2200      	movs	r2, #0
 8009750:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009752:	193a      	adds	r2, r7, r4
 8009754:	23a0      	movs	r3, #160	@ 0xa0
 8009756:	05db      	lsls	r3, r3, #23
 8009758:	0011      	movs	r1, r2
 800975a:	0018      	movs	r0, r3
 800975c:	f008 fe54 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8009760:	193b      	adds	r3, r7, r4
 8009762:	22c0      	movs	r2, #192	@ 0xc0
 8009764:	0052      	lsls	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009768:	193b      	adds	r3, r7, r4
 800976a:	2200      	movs	r2, #0
 800976c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800976e:	193b      	adds	r3, r7, r4
 8009770:	2200      	movs	r2, #0
 8009772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009774:	193a      	adds	r2, r7, r4
 8009776:	23a0      	movs	r3, #160	@ 0xa0
 8009778:	05db      	lsls	r3, r3, #23
 800977a:	0011      	movs	r1, r2
 800977c:	0018      	movs	r0, r3
 800977e:	f008 fe43 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8009782:	193b      	adds	r3, r7, r4
 8009784:	4a3c      	ldr	r2, [pc, #240]	@ (8009878 <MX_GPIO_Init+0x248>)
 8009786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009788:	193b      	adds	r3, r7, r4
 800978a:	2201      	movs	r2, #1
 800978c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978e:	193b      	adds	r3, r7, r4
 8009790:	2200      	movs	r2, #0
 8009792:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009794:	193b      	adds	r3, r7, r4
 8009796:	2200      	movs	r2, #0
 8009798:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800979a:	193b      	adds	r3, r7, r4
 800979c:	4a37      	ldr	r2, [pc, #220]	@ (800987c <MX_GPIO_Init+0x24c>)
 800979e:	0019      	movs	r1, r3
 80097a0:	0010      	movs	r0, r2
 80097a2:	f008 fe31 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80097a6:	193b      	adds	r3, r7, r4
 80097a8:	4a37      	ldr	r2, [pc, #220]	@ (8009888 <MX_GPIO_Init+0x258>)
 80097aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097ac:	193b      	adds	r3, r7, r4
 80097ae:	2203      	movs	r2, #3
 80097b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b2:	193b      	adds	r3, r7, r4
 80097b4:	2200      	movs	r2, #0
 80097b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097b8:	193b      	adds	r3, r7, r4
 80097ba:	4a30      	ldr	r2, [pc, #192]	@ (800987c <MX_GPIO_Init+0x24c>)
 80097bc:	0019      	movs	r1, r3
 80097be:	0010      	movs	r0, r2
 80097c0:	f008 fe22 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80097c4:	0021      	movs	r1, r4
 80097c6:	187b      	adds	r3, r7, r1
 80097c8:	2280      	movs	r2, #128	@ 0x80
 80097ca:	0092      	lsls	r2, r2, #2
 80097cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097ce:	000c      	movs	r4, r1
 80097d0:	193b      	adds	r3, r7, r4
 80097d2:	2200      	movs	r2, #0
 80097d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d6:	193b      	adds	r3, r7, r4
 80097d8:	2200      	movs	r2, #0
 80097da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80097dc:	193b      	adds	r3, r7, r4
 80097de:	4a28      	ldr	r2, [pc, #160]	@ (8009880 <MX_GPIO_Init+0x250>)
 80097e0:	0019      	movs	r1, r3
 80097e2:	0010      	movs	r0, r2
 80097e4:	f008 fe10 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80097e8:	193b      	adds	r3, r7, r4
 80097ea:	2280      	movs	r2, #128	@ 0x80
 80097ec:	0212      	lsls	r2, r2, #8
 80097ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80097f0:	193b      	adds	r3, r7, r4
 80097f2:	2288      	movs	r2, #136	@ 0x88
 80097f4:	0352      	lsls	r2, r2, #13
 80097f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f8:	193b      	adds	r3, r7, r4
 80097fa:	2200      	movs	r2, #0
 80097fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80097fe:	193a      	adds	r2, r7, r4
 8009800:	23a0      	movs	r3, #160	@ 0xa0
 8009802:	05db      	lsls	r3, r3, #23
 8009804:	0011      	movs	r1, r2
 8009806:	0018      	movs	r0, r3
 8009808:	f008 fdfe 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800980c:	0021      	movs	r1, r4
 800980e:	187b      	adds	r3, r7, r1
 8009810:	22c0      	movs	r2, #192	@ 0xc0
 8009812:	0152      	lsls	r2, r2, #5
 8009814:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009816:	000c      	movs	r4, r1
 8009818:	193b      	adds	r3, r7, r4
 800981a:	2201      	movs	r2, #1
 800981c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981e:	193b      	adds	r3, r7, r4
 8009820:	2200      	movs	r2, #0
 8009822:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009824:	193b      	adds	r3, r7, r4
 8009826:	2200      	movs	r2, #0
 8009828:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800982a:	193b      	adds	r3, r7, r4
 800982c:	4a14      	ldr	r2, [pc, #80]	@ (8009880 <MX_GPIO_Init+0x250>)
 800982e:	0019      	movs	r1, r3
 8009830:	0010      	movs	r0, r2
 8009832:	f008 fde9 	bl	8012408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8009836:	0021      	movs	r1, r4
 8009838:	187b      	adds	r3, r7, r1
 800983a:	2204      	movs	r2, #4
 800983c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800983e:	187b      	adds	r3, r7, r1
 8009840:	2200      	movs	r2, #0
 8009842:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009844:	187b      	adds	r3, r7, r1
 8009846:	2201      	movs	r2, #1
 8009848:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800984a:	187b      	adds	r3, r7, r1
 800984c:	4a0f      	ldr	r2, [pc, #60]	@ (800988c <MX_GPIO_Init+0x25c>)
 800984e:	0019      	movs	r1, r3
 8009850:	0010      	movs	r0, r2
 8009852:	f008 fdd9 	bl	8012408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8009856:	2200      	movs	r2, #0
 8009858:	2100      	movs	r1, #0
 800985a:	2007      	movs	r0, #7
 800985c:	f008 f982 	bl	8011b64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8009860:	2007      	movs	r0, #7
 8009862:	f008 f994 	bl	8011b8e <HAL_NVIC_EnableIRQ>

}
 8009866:	46c0      	nop			@ (mov r8, r8)
 8009868:	46bd      	mov	sp, r7
 800986a:	b00b      	add	sp, #44	@ 0x2c
 800986c:	bd90      	pop	{r4, r7, pc}
 800986e:	46c0      	nop			@ (mov r8, r8)
 8009870:	40021000 	.word	0x40021000
 8009874:	50001c00 	.word	0x50001c00
 8009878:	00000301 	.word	0x00000301
 800987c:	50000400 	.word	0x50000400
 8009880:	50000800 	.word	0x50000800
 8009884:	0000200c 	.word	0x0000200c
 8009888:	0000403e 	.word	0x0000403e
 800988c:	50000c00 	.word	0x50000c00

08009890 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2100      	movs	r1, #0
 800989e:	0018      	movs	r0, r3
 80098a0:	f00f fdc0 	bl	8019424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2108      	movs	r1, #8
 80098a8:	0018      	movs	r0, r3
 80098aa:	f00f fdbb 	bl	8019424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	210c      	movs	r1, #12
 80098b2:	0018      	movs	r0, r3
 80098b4:	f00f fdb6 	bl	8019424 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80098b8:	2380      	movs	r3, #128	@ 0x80
 80098ba:	05db      	lsls	r3, r3, #23
 80098bc:	22fa      	movs	r2, #250	@ 0xfa
 80098be:	0112      	lsls	r2, r2, #4
 80098c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80098c2:	2380      	movs	r3, #128	@ 0x80
 80098c4:	05db      	lsls	r3, r3, #23
 80098c6:	22fa      	movs	r2, #250	@ 0xfa
 80098c8:	0112      	lsls	r2, r2, #4
 80098ca:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80098cc:	2380      	movs	r3, #128	@ 0x80
 80098ce:	05db      	lsls	r3, r3, #23
 80098d0:	22fa      	movs	r2, #250	@ 0xfa
 80098d2:	0112      	lsls	r2, r2, #4
 80098d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80098d6:	2380      	movs	r3, #128	@ 0x80
 80098d8:	05db      	lsls	r3, r3, #23
 80098da:	22fa      	movs	r2, #250	@ 0xfa
 80098dc:	0112      	lsls	r2, r2, #4
 80098de:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2100      	movs	r1, #0
 80098e4:	0018      	movs	r0, r3
 80098e6:	f00f fd9d 	bl	8019424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2104      	movs	r1, #4
 80098ee:	0018      	movs	r0, r3
 80098f0:	f00f fd98 	bl	8019424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2108      	movs	r1, #8
 80098f8:	0018      	movs	r0, r3
 80098fa:	f00f fd93 	bl	8019424 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80098fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009928 <GPIO_InitPWMLEDs+0x98>)
 8009900:	22fa      	movs	r2, #250	@ 0xfa
 8009902:	0112      	lsls	r2, r2, #4
 8009904:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8009906:	4b08      	ldr	r3, [pc, #32]	@ (8009928 <GPIO_InitPWMLEDs+0x98>)
 8009908:	22fa      	movs	r2, #250	@ 0xfa
 800990a:	0112      	lsls	r2, r2, #4
 800990c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800990e:	4b06      	ldr	r3, [pc, #24]	@ (8009928 <GPIO_InitPWMLEDs+0x98>)
 8009910:	22fa      	movs	r2, #250	@ 0xfa
 8009912:	0112      	lsls	r2, r2, #4
 8009914:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8009916:	4b04      	ldr	r3, [pc, #16]	@ (8009928 <GPIO_InitPWMLEDs+0x98>)
 8009918:	22fa      	movs	r2, #250	@ 0xfa
 800991a:	0112      	lsls	r2, r2, #4
 800991c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800991e:	46c0      	nop			@ (mov r8, r8)
 8009920:	46bd      	mov	sp, r7
 8009922:	b002      	add	sp, #8
 8009924:	bd80      	pop	{r7, pc}
 8009926:	46c0      	nop			@ (mov r8, r8)
 8009928:	40000400 	.word	0x40000400

0800992c <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	0018      	movs	r0, r3
 8009936:	2314      	movs	r3, #20
 8009938:	001a      	movs	r2, r3
 800993a:	2100      	movs	r1, #0
 800993c:	f019 f980 	bl	8022c40 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8009940:	1d3b      	adds	r3, r7, #4
 8009942:	2205      	movs	r2, #5
 8009944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009946:	1d3b      	adds	r3, r7, #4
 8009948:	2203      	movs	r2, #3
 800994a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800994c:	1d3b      	adds	r3, r7, #4
 800994e:	2200      	movs	r2, #0
 8009950:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009952:	1d3a      	adds	r2, r7, #4
 8009954:	23a0      	movs	r3, #160	@ 0xa0
 8009956:	05db      	lsls	r3, r3, #23
 8009958:	0011      	movs	r1, r2
 800995a:	0018      	movs	r0, r3
 800995c:	f008 fd54 	bl	8012408 <HAL_GPIO_Init>
}
 8009960:	46c0      	nop			@ (mov r8, r8)
 8009962:	46bd      	mov	sp, r7
 8009964:	b006      	add	sp, #24
 8009966:	bd80      	pop	{r7, pc}

08009968 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800996c:	4b1b      	ldr	r3, [pc, #108]	@ (80099dc <MX_I2C1_Init+0x74>)
 800996e:	4a1c      	ldr	r2, [pc, #112]	@ (80099e0 <MX_I2C1_Init+0x78>)
 8009970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8009972:	4b1a      	ldr	r3, [pc, #104]	@ (80099dc <MX_I2C1_Init+0x74>)
 8009974:	4a1b      	ldr	r2, [pc, #108]	@ (80099e4 <MX_I2C1_Init+0x7c>)
 8009976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009978:	4b18      	ldr	r3, [pc, #96]	@ (80099dc <MX_I2C1_Init+0x74>)
 800997a:	2200      	movs	r2, #0
 800997c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800997e:	4b17      	ldr	r3, [pc, #92]	@ (80099dc <MX_I2C1_Init+0x74>)
 8009980:	2201      	movs	r2, #1
 8009982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009984:	4b15      	ldr	r3, [pc, #84]	@ (80099dc <MX_I2C1_Init+0x74>)
 8009986:	2200      	movs	r2, #0
 8009988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800998a:	4b14      	ldr	r3, [pc, #80]	@ (80099dc <MX_I2C1_Init+0x74>)
 800998c:	2200      	movs	r2, #0
 800998e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009990:	4b12      	ldr	r3, [pc, #72]	@ (80099dc <MX_I2C1_Init+0x74>)
 8009992:	2200      	movs	r2, #0
 8009994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009996:	4b11      	ldr	r3, [pc, #68]	@ (80099dc <MX_I2C1_Init+0x74>)
 8009998:	2200      	movs	r2, #0
 800999a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800999c:	4b0f      	ldr	r3, [pc, #60]	@ (80099dc <MX_I2C1_Init+0x74>)
 800999e:	2200      	movs	r2, #0
 80099a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80099a2:	4b0e      	ldr	r3, [pc, #56]	@ (80099dc <MX_I2C1_Init+0x74>)
 80099a4:	0018      	movs	r0, r3
 80099a6:	f008 ff03 	bl	80127b0 <HAL_I2C_Init>
 80099aa:	1e03      	subs	r3, r0, #0
 80099ac:	d001      	beq.n	80099b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80099ae:	f000 fd83 	bl	800a4b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <MX_I2C1_Init+0x74>)
 80099b4:	2100      	movs	r1, #0
 80099b6:	0018      	movs	r0, r3
 80099b8:	f00b fd6c 	bl	8015494 <HAL_I2CEx_ConfigAnalogFilter>
 80099bc:	1e03      	subs	r3, r0, #0
 80099be:	d001      	beq.n	80099c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80099c0:	f000 fd7a 	bl	800a4b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80099c4:	4b05      	ldr	r3, [pc, #20]	@ (80099dc <MX_I2C1_Init+0x74>)
 80099c6:	2100      	movs	r1, #0
 80099c8:	0018      	movs	r0, r3
 80099ca:	f00b fdaf 	bl	801552c <HAL_I2CEx_ConfigDigitalFilter>
 80099ce:	1e03      	subs	r3, r0, #0
 80099d0:	d001      	beq.n	80099d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80099d2:	f000 fd71 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80099d6:	46c0      	nop			@ (mov r8, r8)
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000bcc 	.word	0x20000bcc
 80099e0:	40005400 	.word	0x40005400
 80099e4:	00503d58 	.word	0x00503d58

080099e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80099ec:	4b1b      	ldr	r3, [pc, #108]	@ (8009a5c <MX_I2C2_Init+0x74>)
 80099ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009a60 <MX_I2C2_Init+0x78>)
 80099f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80099f2:	4b1a      	ldr	r3, [pc, #104]	@ (8009a5c <MX_I2C2_Init+0x74>)
 80099f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009a64 <MX_I2C2_Init+0x7c>)
 80099f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80099f8:	4b18      	ldr	r3, [pc, #96]	@ (8009a5c <MX_I2C2_Init+0x74>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80099fe:	4b17      	ldr	r3, [pc, #92]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a00:	2201      	movs	r2, #1
 8009a02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009a04:	4b15      	ldr	r3, [pc, #84]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009a0a:	4b14      	ldr	r3, [pc, #80]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009a10:	4b12      	ldr	r3, [pc, #72]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009a16:	4b11      	ldr	r3, [pc, #68]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009a22:	4b0e      	ldr	r3, [pc, #56]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a24:	0018      	movs	r0, r3
 8009a26:	f008 fec3 	bl	80127b0 <HAL_I2C_Init>
 8009a2a:	1e03      	subs	r3, r0, #0
 8009a2c:	d001      	beq.n	8009a32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009a2e:	f000 fd43 	bl	800a4b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009a32:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a34:	2100      	movs	r1, #0
 8009a36:	0018      	movs	r0, r3
 8009a38:	f00b fd2c 	bl	8015494 <HAL_I2CEx_ConfigAnalogFilter>
 8009a3c:	1e03      	subs	r3, r0, #0
 8009a3e:	d001      	beq.n	8009a44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009a40:	f000 fd3a 	bl	800a4b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009a44:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <MX_I2C2_Init+0x74>)
 8009a46:	2100      	movs	r1, #0
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f00b fd6f 	bl	801552c <HAL_I2CEx_ConfigDigitalFilter>
 8009a4e:	1e03      	subs	r3, r0, #0
 8009a50:	d001      	beq.n	8009a56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009a52:	f000 fd31 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20000c20 	.word	0x20000c20
 8009a60:	40005800 	.word	0x40005800
 8009a64:	00503d58 	.word	0x00503d58

08009a68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b08b      	sub	sp, #44	@ 0x2c
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a70:	2414      	movs	r4, #20
 8009a72:	193b      	adds	r3, r7, r4
 8009a74:	0018      	movs	r0, r3
 8009a76:	2314      	movs	r3, #20
 8009a78:	001a      	movs	r2, r3
 8009a7a:	2100      	movs	r1, #0
 8009a7c:	f019 f8e0 	bl	8022c40 <memset>
  if(i2cHandle->Instance==I2C1)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a5d      	ldr	r2, [pc, #372]	@ (8009bfc <HAL_I2C_MspInit+0x194>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d000      	beq.n	8009a8c <HAL_I2C_MspInit+0x24>
 8009a8a:	e083      	b.n	8009b94 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a90:	4b5b      	ldr	r3, [pc, #364]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009a92:	2102      	movs	r1, #2
 8009a94:	430a      	orrs	r2, r1
 8009a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009a98:	4b59      	ldr	r3, [pc, #356]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	613b      	str	r3, [r7, #16]
 8009aa2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009aa4:	0021      	movs	r1, r4
 8009aa6:	187b      	adds	r3, r7, r1
 8009aa8:	22c0      	movs	r2, #192	@ 0xc0
 8009aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009aac:	187b      	adds	r3, r7, r1
 8009aae:	2212      	movs	r2, #18
 8009ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab2:	187b      	adds	r3, r7, r1
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab8:	187b      	adds	r3, r7, r1
 8009aba:	2203      	movs	r2, #3
 8009abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8009abe:	187b      	adds	r3, r7, r1
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ac4:	187b      	adds	r3, r7, r1
 8009ac6:	4a4f      	ldr	r2, [pc, #316]	@ (8009c04 <HAL_I2C_MspInit+0x19c>)
 8009ac8:	0019      	movs	r1, r3
 8009aca:	0010      	movs	r0, r2
 8009acc:	f008 fc9c 	bl	8012408 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009ad6:	2180      	movs	r1, #128	@ 0x80
 8009ad8:	0389      	lsls	r1, r1, #14
 8009ada:	430a      	orrs	r2, r1
 8009adc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8009ade:	4b4a      	ldr	r3, [pc, #296]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8009c0c <HAL_I2C_MspInit+0x1a4>)
 8009ae2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8009ae4:	4b48      	ldr	r3, [pc, #288]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009ae6:	2206      	movs	r2, #6
 8009ae8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009aea:	4b47      	ldr	r3, [pc, #284]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009af0:	4b45      	ldr	r3, [pc, #276]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009af6:	4b44      	ldr	r3, [pc, #272]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009af8:	2280      	movs	r2, #128	@ 0x80
 8009afa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009afc:	4b42      	ldr	r3, [pc, #264]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b02:	4b41      	ldr	r3, [pc, #260]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8009b08:	4b3f      	ldr	r3, [pc, #252]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8009b14:	4b3c      	ldr	r3, [pc, #240]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009b16:	0018      	movs	r0, r3
 8009b18:	f008 f85a 	bl	8011bd0 <HAL_DMA_Init>
 8009b1c:	1e03      	subs	r3, r0, #0
 8009b1e:	d001      	beq.n	8009b24 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8009b20:	f000 fcca 	bl	800a4b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a38      	ldr	r2, [pc, #224]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009b28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009b2a:	4b37      	ldr	r3, [pc, #220]	@ (8009c08 <HAL_I2C_MspInit+0x1a0>)
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8009b30:	4b37      	ldr	r3, [pc, #220]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b32:	4a38      	ldr	r2, [pc, #224]	@ (8009c14 <HAL_I2C_MspInit+0x1ac>)
 8009b34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8009b36:	4b36      	ldr	r3, [pc, #216]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b38:	2206      	movs	r2, #6
 8009b3a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b3c:	4b34      	ldr	r3, [pc, #208]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b3e:	2210      	movs	r2, #16
 8009b40:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b42:	4b33      	ldr	r3, [pc, #204]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009b48:	4b31      	ldr	r3, [pc, #196]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b4a:	2280      	movs	r2, #128	@ 0x80
 8009b4c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b4e:	4b30      	ldr	r3, [pc, #192]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b54:	4b2e      	ldr	r3, [pc, #184]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8009b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009b60:	4b2b      	ldr	r3, [pc, #172]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8009b66:	4b2a      	ldr	r3, [pc, #168]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f008 f831 	bl	8011bd0 <HAL_DMA_Init>
 8009b6e:	1e03      	subs	r3, r0, #0
 8009b70:	d001      	beq.n	8009b76 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8009b72:	f000 fca1 	bl	800a4b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a25      	ldr	r2, [pc, #148]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b7c:	4b24      	ldr	r3, [pc, #144]	@ (8009c10 <HAL_I2C_MspInit+0x1a8>)
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	2017      	movs	r0, #23
 8009b88:	f007 ffec 	bl	8011b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8009b8c:	2017      	movs	r0, #23
 8009b8e:	f007 fffe 	bl	8011b8e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8009b92:	e02e      	b.n	8009bf2 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1f      	ldr	r2, [pc, #124]	@ (8009c18 <HAL_I2C_MspInit+0x1b0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d129      	bne.n	8009bf2 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b9e:	4b18      	ldr	r3, [pc, #96]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba2:	4b17      	ldr	r3, [pc, #92]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009ba4:	2102      	movs	r1, #2
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009baa:	4b15      	ldr	r3, [pc, #84]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bae:	2202      	movs	r2, #2
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009bb6:	2114      	movs	r1, #20
 8009bb8:	187b      	adds	r3, r7, r1
 8009bba:	22c0      	movs	r2, #192	@ 0xc0
 8009bbc:	0112      	lsls	r2, r2, #4
 8009bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009bc0:	187b      	adds	r3, r7, r1
 8009bc2:	2212      	movs	r2, #18
 8009bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc6:	187b      	adds	r3, r7, r1
 8009bc8:	2200      	movs	r2, #0
 8009bca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bcc:	187b      	adds	r3, r7, r1
 8009bce:	2203      	movs	r2, #3
 8009bd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8009bd2:	187b      	adds	r3, r7, r1
 8009bd4:	2206      	movs	r2, #6
 8009bd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bd8:	187b      	adds	r3, r7, r1
 8009bda:	4a0a      	ldr	r2, [pc, #40]	@ (8009c04 <HAL_I2C_MspInit+0x19c>)
 8009bdc:	0019      	movs	r1, r3
 8009bde:	0010      	movs	r0, r2
 8009be0:	f008 fc12 	bl	8012408 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009be4:	4b06      	ldr	r3, [pc, #24]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009be6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009be8:	4b05      	ldr	r3, [pc, #20]	@ (8009c00 <HAL_I2C_MspInit+0x198>)
 8009bea:	2180      	movs	r1, #128	@ 0x80
 8009bec:	03c9      	lsls	r1, r1, #15
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8009bf2:	46c0      	nop			@ (mov r8, r8)
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b00b      	add	sp, #44	@ 0x2c
 8009bf8:	bd90      	pop	{r4, r7, pc}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	40005400 	.word	0x40005400
 8009c00:	40021000 	.word	0x40021000
 8009c04:	50000400 	.word	0x50000400
 8009c08:	20000c74 	.word	0x20000c74
 8009c0c:	40020030 	.word	0x40020030
 8009c10:	20000cbc 	.word	0x20000cbc
 8009c14:	4002001c 	.word	0x4002001c
 8009c18:	40005800 	.word	0x40005800

08009c1c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8009c20:	4b10      	ldr	r3, [pc, #64]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c22:	4a11      	ldr	r2, [pc, #68]	@ (8009c68 <MX_I2S2_Init+0x4c>)
 8009c24:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8009c26:	4b0f      	ldr	r3, [pc, #60]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c28:	22c0      	movs	r2, #192	@ 0xc0
 8009c2a:	0092      	lsls	r2, r2, #2
 8009c2c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8009c34:	4b0b      	ldr	r3, [pc, #44]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c36:	2203      	movs	r2, #3
 8009c38:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8009c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8009c40:	4b08      	ldr	r3, [pc, #32]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c42:	22fa      	movs	r2, #250	@ 0xfa
 8009c44:	0192      	lsls	r2, r2, #6
 8009c46:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8009c48:	4b06      	ldr	r3, [pc, #24]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8009c4e:	4b05      	ldr	r3, [pc, #20]	@ (8009c64 <MX_I2S2_Init+0x48>)
 8009c50:	0018      	movs	r0, r3
 8009c52:	f00b fcb7 	bl	80155c4 <HAL_I2S_Init>
 8009c56:	1e03      	subs	r3, r0, #0
 8009c58:	d001      	beq.n	8009c5e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8009c5a:	f000 fc2d 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8009c5e:	46c0      	nop			@ (mov r8, r8)
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	20000d04 	.word	0x20000d04
 8009c68:	40003800 	.word	0x40003800

08009c6c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8009c6c:	b590      	push	{r4, r7, lr}
 8009c6e:	b089      	sub	sp, #36	@ 0x24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c74:	240c      	movs	r4, #12
 8009c76:	193b      	adds	r3, r7, r4
 8009c78:	0018      	movs	r0, r3
 8009c7a:	2314      	movs	r3, #20
 8009c7c:	001a      	movs	r2, r3
 8009c7e:	2100      	movs	r1, #0
 8009c80:	f018 ffde 	bl	8022c40 <memset>
  if(i2sHandle->Instance==SPI2)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a2d      	ldr	r2, [pc, #180]	@ (8009d40 <HAL_I2S_MspInit+0xd4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d154      	bne.n	8009d38 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8009d44 <HAL_I2S_MspInit+0xd8>)
 8009c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c92:	4b2c      	ldr	r3, [pc, #176]	@ (8009d44 <HAL_I2S_MspInit+0xd8>)
 8009c94:	2180      	movs	r1, #128	@ 0x80
 8009c96:	01c9      	lsls	r1, r1, #7
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c9c:	4b29      	ldr	r3, [pc, #164]	@ (8009d44 <HAL_I2S_MspInit+0xd8>)
 8009c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca0:	4b28      	ldr	r3, [pc, #160]	@ (8009d44 <HAL_I2S_MspInit+0xd8>)
 8009ca2:	2102      	movs	r1, #2
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ca8:	4b26      	ldr	r3, [pc, #152]	@ (8009d44 <HAL_I2S_MspInit+0xd8>)
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	2202      	movs	r2, #2
 8009cae:	4013      	ands	r3, r2
 8009cb0:	60bb      	str	r3, [r7, #8]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8009cb4:	193b      	adds	r3, r7, r4
 8009cb6:	22b0      	movs	r2, #176	@ 0xb0
 8009cb8:	0212      	lsls	r2, r2, #8
 8009cba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cbc:	0021      	movs	r1, r4
 8009cbe:	187b      	adds	r3, r7, r1
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cc4:	187b      	adds	r3, r7, r1
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cca:	187b      	adds	r3, r7, r1
 8009ccc:	2200      	movs	r2, #0
 8009cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8009cd0:	187b      	adds	r3, r7, r1
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009cd6:	187b      	adds	r3, r7, r1
 8009cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8009d48 <HAL_I2S_MspInit+0xdc>)
 8009cda:	0019      	movs	r1, r3
 8009cdc:	0010      	movs	r0, r2
 8009cde:	f008 fb93 	bl	8012408 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8009ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8009d50 <HAL_I2S_MspInit+0xe4>)
 8009ce6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8009ce8:	4b18      	ldr	r3, [pc, #96]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009cea:	2202      	movs	r2, #2
 8009cec:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cee:	4b17      	ldr	r3, [pc, #92]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cf4:	4b15      	ldr	r3, [pc, #84]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009cfa:	4b14      	ldr	r3, [pc, #80]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009cfc:	2280      	movs	r2, #128	@ 0x80
 8009cfe:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009d00:	4b12      	ldr	r3, [pc, #72]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d02:	2280      	movs	r2, #128	@ 0x80
 8009d04:	0052      	lsls	r2, r2, #1
 8009d06:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009d08:	4b10      	ldr	r3, [pc, #64]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d0a:	2280      	movs	r2, #128	@ 0x80
 8009d0c:	00d2      	lsls	r2, r2, #3
 8009d0e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8009d10:	4b0e      	ldr	r3, [pc, #56]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d12:	2220      	movs	r2, #32
 8009d14:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009d16:	4b0d      	ldr	r3, [pc, #52]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f007 ff56 	bl	8011bd0 <HAL_DMA_Init>
 8009d24:	1e03      	subs	r3, r0, #0
 8009d26:	d001      	beq.n	8009d2c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8009d28:	f000 fbc6 	bl	800a4b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a07      	ldr	r2, [pc, #28]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d30:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d32:	4b06      	ldr	r3, [pc, #24]	@ (8009d4c <HAL_I2S_MspInit+0xe0>)
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8009d38:	46c0      	nop			@ (mov r8, r8)
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	b009      	add	sp, #36	@ 0x24
 8009d3e:	bd90      	pop	{r4, r7, pc}
 8009d40:	40003800 	.word	0x40003800
 8009d44:	40021000 	.word	0x40021000
 8009d48:	50000400 	.word	0x50000400
 8009d4c:	20000d40 	.word	0x20000d40
 8009d50:	40020044 	.word	0x40020044

08009d54 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  testDone = true;
 8009d58:	4b14      	ldr	r3, [pc, #80]	@ (8009dac <SetTestDone+0x58>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8009d5e:	23fa      	movs	r3, #250	@ 0xfa
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	0018      	movs	r0, r3
 8009d64:	f007 fa64 	bl	8011230 <HAL_Delay>
  SetDBLED(false, false, true);
 8009d68:	2201      	movs	r2, #1
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	f005 fbd5 	bl	800f51c <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009d72:	4a0f      	ldr	r2, [pc, #60]	@ (8009db0 <SetTestDone+0x5c>)
 8009d74:	23fa      	movs	r3, #250	@ 0xfa
 8009d76:	0119      	lsls	r1, r3, #4
 8009d78:	23fa      	movs	r3, #250	@ 0xfa
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f005 fb99 	bl	800f4b4 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8009d82:	4a0b      	ldr	r2, [pc, #44]	@ (8009db0 <SetTestDone+0x5c>)
 8009d84:	23fa      	movs	r3, #250	@ 0xfa
 8009d86:	0119      	lsls	r1, r3, #4
 8009d88:	23fa      	movs	r3, #250	@ 0xfa
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f005 fc0f 	bl	800f5b0 <SetVocLED>
  HAL_Delay(500);
 8009d92:	23fa      	movs	r3, #250	@ 0xfa
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	0018      	movs	r0, r3
 8009d98:	f007 fa4a 	bl	8011230 <HAL_Delay>
  SetLEDsOff();
 8009d9c:	f005 fd48 	bl	800f830 <SetLEDsOff>
  InitDone();
 8009da0:	f005 fadc 	bl	800f35c <InitDone>
}
 8009da4:	46c0      	nop			@ (mov r8, r8)
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	46c0      	nop			@ (mov r8, r8)
 8009dac:	20000d88 	.word	0x20000d88
 8009db0:	00000bb8 	.word	0x00000bb8

08009db4 <FlashLEDs>:

void FlashLEDs(){
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8009dba:	1dfb      	adds	r3, r7, #7
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	e021      	b.n	8009e06 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	f005 fba8 	bl	800f51c <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 8009dcc:	4a12      	ldr	r2, [pc, #72]	@ (8009e18 <FlashLEDs+0x64>)
 8009dce:	23fa      	movs	r3, #250	@ 0xfa
 8009dd0:	0119      	lsls	r1, r3, #4
 8009dd2:	23fa      	movs	r3, #250	@ 0xfa
 8009dd4:	011b      	lsls	r3, r3, #4
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f005 fb6c 	bl	800f4b4 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 8009ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8009e18 <FlashLEDs+0x64>)
 8009dde:	23fa      	movs	r3, #250	@ 0xfa
 8009de0:	0119      	lsls	r1, r3, #4
 8009de2:	23fa      	movs	r3, #250	@ 0xfa
 8009de4:	011b      	lsls	r3, r3, #4
 8009de6:	0018      	movs	r0, r3
 8009de8:	f005 fbe2 	bl	800f5b0 <SetVocLED>
    HAL_Delay(250);
 8009dec:	20fa      	movs	r0, #250	@ 0xfa
 8009dee:	f007 fa1f 	bl	8011230 <HAL_Delay>
    SetLEDsOff();
 8009df2:	f005 fd1d 	bl	800f830 <SetLEDsOff>
    HAL_Delay(250);
 8009df6:	20fa      	movs	r0, #250	@ 0xfa
 8009df8:	f007 fa1a 	bl	8011230 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8009dfc:	1dfb      	adds	r3, r7, #7
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	1dfb      	adds	r3, r7, #7
 8009e02:	3201      	adds	r2, #1
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	1dfb      	adds	r3, r7, #7
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d9d9      	bls.n	8009dc2 <FlashLEDs+0xe>
  }
}
 8009e0e:	46c0      	nop			@ (mov r8, r8)
 8009e10:	46c0      	nop			@ (mov r8, r8)
 8009e12:	46bd      	mov	sp, r7
 8009e14:	b002      	add	sp, #8
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	00000bb8 	.word	0x00000bb8

08009e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009e22:	f007 f995 	bl	8011150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009e26:	f000 f9f7 	bl	800a218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009e2a:	f7ff fc01 	bl	8009630 <MX_GPIO_Init>
  MX_DMA_Init();
 8009e2e:	f7ff fa29 	bl	8009284 <MX_DMA_Init>
  MX_I2C1_Init();
 8009e32:	f7ff fd99 	bl	8009968 <MX_I2C1_Init>
  MX_I2S2_Init();
 8009e36:	f7ff fef1 	bl	8009c1c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8009e3a:	f006 fbb5 	bl	80105a8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8009e3e:	f7ff fdd3 	bl	80099e8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8009e42:	f006 f9a9 	bl	8010198 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009e46:	f006 fa1b 	bl	8010280 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8009e4a:	f006 fbdd 	bl	8010608 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8009e4e:	f7fd ff0d 	bl	8007c6c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8009e52:	f015 fbe1 	bl	801f618 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8009e56:	f001 fa29 	bl	800b2ac <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8009e5a:	f006 fb6f 	bl	801053c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8009e5e:	f006 fa8d 	bl	801037c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8009e62:	4ac7      	ldr	r2, [pc, #796]	@ (800a180 <main+0x364>)
 8009e64:	4bc7      	ldr	r3, [pc, #796]	@ (800a184 <main+0x368>)
 8009e66:	0011      	movs	r1, r2
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f7ff fd11 	bl	8009890 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 8009e6e:	f006 fe0d 	bl	8010a8c <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8009e72:	f006 f819 	bl	800fea8 <Battery_Upkeep>
 8009e76:	0003      	movs	r3, r0
 8009e78:	001a      	movs	r2, r3
 8009e7a:	4bc3      	ldr	r3, [pc, #780]	@ (800a188 <main+0x36c>)
 8009e7c:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 8009e7e:	4bc2      	ldr	r3, [pc, #776]	@ (800a188 <main+0x36c>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d113      	bne.n	8009eae <main+0x92>
    SetAllREDLED();
 8009e86:	f005 fcef 	bl	800f868 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 8009e8a:	f7fd f80f 	bl	8006eac <ReadBatteryVoltage>
 8009e8e:	1c03      	adds	r3, r0, #0
 8009e90:	1c18      	adds	r0, r3, #0
 8009e92:	f7f9 fae7 	bl	8003464 <__aeabi_f2d>
 8009e96:	0002      	movs	r2, r0
 8009e98:	000b      	movs	r3, r1
 8009e9a:	48bc      	ldr	r0, [pc, #752]	@ (800a18c <main+0x370>)
 8009e9c:	49bc      	ldr	r1, [pc, #752]	@ (800a190 <main+0x374>)
 8009e9e:	9200      	str	r2, [sp, #0]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	0002      	movs	r2, r0
 8009ea4:	2002      	movs	r0, #2
 8009ea6:	f006 fd6d 	bl	8010984 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 8009eaa:	f7fd fc11 	bl	80076d0 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 8009eae:	f7fd f8d3 	bl	8007058 <UserButton_Pressed>
 8009eb2:	1e03      	subs	r3, r0, #0
 8009eb4:	d004      	beq.n	8009ec0 <main+0xa4>
    EnableESPProg();
 8009eb6:	f015 fc7f 	bl	801f7b8 <EnableESPProg>
    ESP_Programming = true;
 8009eba:	4bb6      	ldr	r3, [pc, #728]	@ (800a194 <main+0x378>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8009ec0:	2003      	movs	r0, #3
 8009ec2:	f006 fdc9 	bl	8010a58 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8009ec6:	49b4      	ldr	r1, [pc, #720]	@ (800a198 <main+0x37c>)
 8009ec8:	4bb4      	ldr	r3, [pc, #720]	@ (800a19c <main+0x380>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	0018      	movs	r0, r3
 8009ece:	f00f ff09 	bl	8019ce4 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8009ed2:	4bb3      	ldr	r3, [pc, #716]	@ (800a1a0 <main+0x384>)
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	f7fd fccf 	bl	8007878 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8009eda:	4ab2      	ldr	r2, [pc, #712]	@ (800a1a4 <main+0x388>)
 8009edc:	49b2      	ldr	r1, [pc, #712]	@ (800a1a8 <main+0x38c>)
 8009ede:	48b3      	ldr	r0, [pc, #716]	@ (800a1ac <main+0x390>)
 8009ee0:	230b      	movs	r3, #11
 8009ee2:	f004 fbb1 	bl	800e648 <soundInit>
 8009ee6:	0003      	movs	r3, r0
 8009ee8:	001a      	movs	r2, r3
 8009eea:	2301      	movs	r3, #1
 8009eec:	4053      	eors	r3, r2
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d005      	beq.n	8009f00 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8009ef4:	4aae      	ldr	r2, [pc, #696]	@ (800a1b0 <main+0x394>)
 8009ef6:	4baf      	ldr	r3, [pc, #700]	@ (800a1b4 <main+0x398>)
 8009ef8:	21f9      	movs	r1, #249	@ 0xf9
 8009efa:	0018      	movs	r0, r3
 8009efc:	f006 fdfa 	bl	8010af4 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8009f00:	4bad      	ldr	r3, [pc, #692]	@ (800a1b8 <main+0x39c>)
 8009f02:	4aae      	ldr	r2, [pc, #696]	@ (800a1bc <main+0x3a0>)
 8009f04:	49a8      	ldr	r1, [pc, #672]	@ (800a1a8 <main+0x38c>)
 8009f06:	48ae      	ldr	r0, [pc, #696]	@ (800a1c0 <main+0x3a4>)
 8009f08:	f000 fba8 	bl	800a65c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 8009f0c:	f007 f986 	bl	801121c <HAL_GetTick>
 8009f10:	0003      	movs	r3, r0
 8009f12:	4aac      	ldr	r2, [pc, #688]	@ (800a1c4 <main+0x3a8>)
 8009f14:	189a      	adds	r2, r3, r2
 8009f16:	4bac      	ldr	r3, [pc, #688]	@ (800a1c8 <main+0x3ac>)
 8009f18:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8009f1a:	f7fd f87d 	bl	8007018 <Check_USB_PowerOn>
 8009f1e:	0003      	movs	r3, r0
 8009f20:	1e5a      	subs	r2, r3, #1
 8009f22:	4193      	sbcs	r3, r2
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2201      	movs	r2, #1
 8009f28:	4053      	eors	r3, r2
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	1c1a      	adds	r2, r3, #0
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4013      	ands	r3, r2
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	4ba5      	ldr	r3, [pc, #660]	@ (800a1cc <main+0x3b0>)
 8009f36:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 8009f38:	f7fd f86e 	bl	8007018 <Check_USB_PowerOn>
 8009f3c:	1e03      	subs	r3, r0, #0
 8009f3e:	d003      	beq.n	8009f48 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 8009f40:	4ba3      	ldr	r3, [pc, #652]	@ (800a1d0 <main+0x3b4>)
 8009f42:	0018      	movs	r0, r3
 8009f44:	f7fc fbe4 	bl	8006710 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8009f48:	4ba2      	ldr	r3, [pc, #648]	@ (800a1d4 <main+0x3b8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f006 fcc3 	bl	80108d8 <TimestampIsReached>
 8009f52:	1e03      	subs	r3, r0, #0
 8009f54:	d00e      	beq.n	8009f74 <main+0x158>
      charge = Battery_Upkeep();
 8009f56:	f005 ffa7 	bl	800fea8 <Battery_Upkeep>
 8009f5a:	0003      	movs	r3, r0
 8009f5c:	001a      	movs	r2, r3
 8009f5e:	4b8a      	ldr	r3, [pc, #552]	@ (800a188 <main+0x36c>)
 8009f60:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 8009f62:	f007 f95b 	bl	801121c <HAL_GetTick>
 8009f66:	0003      	movs	r3, r0
 8009f68:	4a9b      	ldr	r2, [pc, #620]	@ (800a1d8 <main+0x3bc>)
 8009f6a:	189a      	adds	r2, r3, r2
 8009f6c:	4b99      	ldr	r3, [pc, #612]	@ (800a1d4 <main+0x3b8>)
 8009f6e:	601a      	str	r2, [r3, #0]
      showTime();
 8009f70:	f7fd f882 	bl	8007078 <showTime>

    }
    configCheck();
 8009f74:	f005 fdfc 	bl	800fb70 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8009f78:	4b98      	ldr	r3, [pc, #608]	@ (800a1dc <main+0x3c0>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8009f7e:	4b82      	ldr	r3, [pc, #520]	@ (800a188 <main+0x36c>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d003      	beq.n	8009f8e <main+0x172>
 8009f86:	4b80      	ldr	r3, [pc, #512]	@ (800a188 <main+0x36c>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d104      	bne.n	8009f98 <main+0x17c>
          FlashLEDs();
 8009f8e:	f7ff ff11 	bl	8009db4 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8009f92:	4b93      	ldr	r3, [pc, #588]	@ (800a1e0 <main+0x3c4>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8009f98:	4b7b      	ldr	r3, [pc, #492]	@ (800a188 <main+0x36c>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <main+0x198>
 8009fa0:	4b90      	ldr	r3, [pc, #576]	@ (800a1e4 <main+0x3c8>)
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b09      	cmp	r3, #9
 8009fa6:	d105      	bne.n	8009fb4 <main+0x198>
          batteryEmpty = true;
 8009fa8:	4b8f      	ldr	r3, [pc, #572]	@ (800a1e8 <main+0x3cc>)
 8009faa:	2201      	movs	r2, #1
 8009fac:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8009fae:	f7fd fb8f 	bl	80076d0 <Enter_Standby_Mode>
 8009fb2:	e002      	b.n	8009fba <main+0x19e>
        }
        else{
          batteryEmpty = false;
 8009fb4:	4b8c      	ldr	r3, [pc, #560]	@ (800a1e8 <main+0x3cc>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8009fba:	4b8c      	ldr	r3, [pc, #560]	@ (800a1ec <main+0x3d0>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d100      	bne.n	8009fc4 <main+0x1a8>
 8009fc2:	e088      	b.n	800a0d6 <main+0x2ba>
 8009fc4:	4b73      	ldr	r3, [pc, #460]	@ (800a194 <main+0x378>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	4053      	eors	r3, r2
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d100      	bne.n	8009fd4 <main+0x1b8>
 8009fd2:	e080      	b.n	800a0d6 <main+0x2ba>
 8009fd4:	4b84      	ldr	r3, [pc, #528]	@ (800a1e8 <main+0x3cc>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	4053      	eors	r3, r2
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d100      	bne.n	8009fe4 <main+0x1c8>
 8009fe2:	e078      	b.n	800a0d6 <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8009fe4:	4b79      	ldr	r3, [pc, #484]	@ (800a1cc <main+0x3b0>)
 8009fe6:	781a      	ldrb	r2, [r3, #0]
 8009fe8:	4b81      	ldr	r3, [pc, #516]	@ (800a1f0 <main+0x3d4>)
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d020      	beq.n	800a032 <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 8009ff0:	f000 fac6 	bl	800a580 <IsSGPPresent>
 8009ff4:	1e03      	subs	r3, r0, #0
 8009ff6:	d009      	beq.n	800a00c <main+0x1f0>
 8009ff8:	4b7d      	ldr	r3, [pc, #500]	@ (800a1f0 <main+0x3d4>)
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	4053      	eors	r3, r2
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d002      	beq.n	800a00c <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800a006:	2001      	movs	r0, #1
 800a008:	f000 fac4 	bl	800a594 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800a00c:	4b79      	ldr	r3, [pc, #484]	@ (800a1f4 <main+0x3d8>)
 800a00e:	791b      	ldrb	r3, [r3, #4]
 800a010:	2b34      	cmp	r3, #52	@ 0x34
 800a012:	d003      	beq.n	800a01c <main+0x200>
 800a014:	4b77      	ldr	r3, [pc, #476]	@ (800a1f4 <main+0x3d8>)
 800a016:	791b      	ldrb	r3, [r3, #4]
 800a018:	2b35      	cmp	r3, #53	@ 0x35
 800a01a:	d106      	bne.n	800a02a <main+0x20e>
 800a01c:	4b74      	ldr	r3, [pc, #464]	@ (800a1f0 <main+0x3d4>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800a024:	2000      	movs	r0, #0
 800a026:	f000 fab5 	bl	800a594 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 800a02a:	4b71      	ldr	r3, [pc, #452]	@ (800a1f0 <main+0x3d4>)
 800a02c:	781a      	ldrb	r2, [r3, #0]
 800a02e:	4b67      	ldr	r3, [pc, #412]	@ (800a1cc <main+0x3b0>)
 800a030:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800a032:	f000 fe29 	bl	800ac88 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800a036:	4b6a      	ldr	r3, [pc, #424]	@ (800a1e0 <main+0x3c4>)
 800a038:	78db      	ldrb	r3, [r3, #3]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <main+0x22e>
        MICstate = Mic_Upkeep();
 800a03e:	f001 f821 	bl	800b084 <Mic_Upkeep>
 800a042:	0003      	movs	r3, r0
 800a044:	001a      	movs	r2, r3
 800a046:	4b6c      	ldr	r3, [pc, #432]	@ (800a1f8 <main+0x3dc>)
 800a048:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800a04a:	4b4f      	ldr	r3, [pc, #316]	@ (800a188 <main+0x36c>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d803      	bhi.n	800a05a <main+0x23e>
 800a052:	4b62      	ldr	r3, [pc, #392]	@ (800a1dc <main+0x3c0>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d016      	beq.n	800a088 <main+0x26c>
 800a05a:	4b61      	ldr	r3, [pc, #388]	@ (800a1e0 <main+0x3c4>)
 800a05c:	789b      	ldrb	r3, [r3, #2]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d012      	beq.n	800a088 <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800a062:	f001 f9b1 	bl	800b3c8 <sen5x_Get_sen5x_enable_state>
 800a066:	0003      	movs	r3, r0
 800a068:	001a      	movs	r2, r3
 800a06a:	2301      	movs	r3, #1
 800a06c:	4053      	eors	r3, r2
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d006      	beq.n	800a082 <main+0x266>
 800a074:	4b5e      	ldr	r3, [pc, #376]	@ (800a1f0 <main+0x3d4>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800a07c:	2000      	movs	r0, #0
 800a07e:	f001 f9df 	bl	800b440 <sen5x_enable>
        }
        sen5x_statemachine();
 800a082:	f001 ff29 	bl	800bed8 <sen5x_statemachine>
 800a086:	e020      	b.n	800a0ca <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800a088:	4b3f      	ldr	r3, [pc, #252]	@ (800a188 <main+0x36c>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d81c      	bhi.n	800a0ca <main+0x2ae>
 800a090:	4b52      	ldr	r3, [pc, #328]	@ (800a1dc <main+0x3c0>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2201      	movs	r2, #1
 800a096:	4053      	eors	r3, r2
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d015      	beq.n	800a0ca <main+0x2ae>
 800a09e:	4b50      	ldr	r3, [pc, #320]	@ (800a1e0 <main+0x3c4>)
 800a0a0:	789b      	ldrb	r3, [r3, #2]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d011      	beq.n	800a0ca <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 800a0a6:	4a55      	ldr	r2, [pc, #340]	@ (800a1fc <main+0x3e0>)
 800a0a8:	4b39      	ldr	r3, [pc, #228]	@ (800a190 <main+0x374>)
 800a0aa:	0019      	movs	r1, r3
 800a0ac:	2002      	movs	r0, #2
 800a0ae:	f006 fc69 	bl	8010984 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800a0b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a1e0 <main+0x3c4>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800a0b8:	4b51      	ldr	r3, [pc, #324]	@ (800a200 <main+0x3e4>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800a0be:	4b51      	ldr	r3, [pc, #324]	@ (800a204 <main+0x3e8>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <main+0x2ae>
          sen5x_Power_Off();
 800a0c6:	f001 fa47 	bl	800b558 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800a0ca:	f7fb fb67 	bl	800579c <ESP_Upkeep>
 800a0ce:	0003      	movs	r3, r0
 800a0d0:	001a      	movs	r2, r3
 800a0d2:	4b44      	ldr	r3, [pc, #272]	@ (800a1e4 <main+0x3c8>)
 800a0d4:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800a0d6:	4b45      	ldr	r3, [pc, #276]	@ (800a1ec <main+0x3d0>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4053      	eors	r3, r2
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d00f      	beq.n	800a104 <main+0x2e8>
 800a0e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a194 <main+0x378>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	4053      	eors	r3, r2
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d008      	beq.n	800a104 <main+0x2e8>
 800a0f2:	4b3d      	ldr	r3, [pc, #244]	@ (800a1e8 <main+0x3cc>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	4053      	eors	r3, r2
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <main+0x2e8>
      Device_Test();  // for device with startup time
 800a100:	f000 fc54 	bl	800a9ac <Device_Test>
    }
    if (!usbPluggedIn) {
 800a104:	4b3a      	ldr	r3, [pc, #232]	@ (800a1f0 <main+0x3d4>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2201      	movs	r2, #1
 800a10a:	4053      	eors	r3, r2
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01c      	beq.n	800a14c <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800a112:	4b3d      	ldr	r3, [pc, #244]	@ (800a208 <main+0x3ec>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2201      	movs	r2, #1
 800a118:	4053      	eors	r3, r2
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d015      	beq.n	800a14c <main+0x330>
 800a120:	f000 fcc2 	bl	800aaa8 <AllDevicesReady>
 800a124:	1e03      	subs	r3, r0, #0
 800a126:	d011      	beq.n	800a14c <main+0x330>
 800a128:	4b38      	ldr	r3, [pc, #224]	@ (800a20c <main+0x3f0>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00d      	beq.n	800a14c <main+0x330>
        EnabledConnectedDevices();
 800a130:	f000 fd34 	bl	800ab9c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800a134:	4b36      	ldr	r3, [pc, #216]	@ (800a210 <main+0x3f4>)
 800a136:	791b      	ldrb	r3, [r3, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <main+0x326>
 800a13c:	23d7      	movs	r3, #215	@ 0xd7
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	e001      	b.n	800a146 <main+0x32a>
 800a142:	23dc      	movs	r3, #220	@ 0xdc
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	0018      	movs	r0, r3
 800a148:	f7fd fae2 	bl	8007710 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800a14c:	4b12      	ldr	r3, [pc, #72]	@ (800a198 <main+0x37c>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <main+0x33c>
      check_cli_command();
 800a154:	f000 f8ea 	bl	800a32c <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800a158:	f7fc ff5e 	bl	8007018 <Check_USB_PowerOn>
 800a15c:	1e03      	subs	r3, r0, #0
 800a15e:	d100      	bne.n	800a162 <main+0x346>
 800a160:	e6f2      	b.n	8009f48 <main+0x12c>
 800a162:	4b2c      	ldr	r3, [pc, #176]	@ (800a214 <main+0x3f8>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	2201      	movs	r2, #1
 800a168:	4053      	eors	r3, r2
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d100      	bne.n	800a172 <main+0x356>
 800a170:	e6ea      	b.n	8009f48 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800a172:	f015 fb2b 	bl	801f7cc <GetUsbRxPointer>
 800a176:	0003      	movs	r3, r0
 800a178:	0018      	movs	r0, r3
 800a17a:	f7fc fd0b 	bl	8006b94 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800a17e:	e6e3      	b.n	8009f48 <main+0x12c>
 800a180:	20001e38 	.word	0x20001e38
 800a184:	20001df8 	.word	0x20001df8
 800a188:	20000da4 	.word	0x20000da4
 800a18c:	08027860 	.word	0x08027860
 800a190:	08027884 	.word	0x08027884
 800a194:	20000d89 	.word	0x20000d89
 800a198:	20000d90 	.word	0x20000d90
 800a19c:	20001f70 	.word	0x20001f70
 800a1a0:	20000e24 	.word	0x20000e24
 800a1a4:	20001e78 	.word	0x20001e78
 800a1a8:	20000d04 	.word	0x20000d04
 800a1ac:	20000d40 	.word	0x20000d40
 800a1b0:	08027888 	.word	0x08027888
 800a1b4:	08029030 	.word	0x08029030
 800a1b8:	20002028 	.word	0x20002028
 800a1bc:	20000b04 	.word	0x20000b04
 800a1c0:	20000bcc 	.word	0x20000bcc
 800a1c4:	000061a8 	.word	0x000061a8
 800a1c8:	20000da0 	.word	0x20000da0
 800a1cc:	20000d8b 	.word	0x20000d8b
 800a1d0:	0802789c 	.word	0x0802789c
 800a1d4:	2000009c 	.word	0x2000009c
 800a1d8:	0000c350 	.word	0x0000c350
 800a1dc:	2000009b 	.word	0x2000009b
 800a1e0:	20000da8 	.word	0x20000da8
 800a1e4:	20000d8d 	.word	0x20000d8d
 800a1e8:	20000d8a 	.word	0x20000d8a
 800a1ec:	20000d88 	.word	0x20000d88
 800a1f0:	20001dd9 	.word	0x20001dd9
 800a1f4:	20000e4c 	.word	0x20000e4c
 800a1f8:	20000d8c 	.word	0x20000d8c
 800a1fc:	080278d0 	.word	0x080278d0
 800a200:	20000e4a 	.word	0x20000e4a
 800a204:	20000e49 	.word	0x20000e49
 800a208:	20001dda 	.word	0x20001dda
 800a20c:	20000568 	.word	0x20000568
 800a210:	20000db0 	.word	0x20000db0
 800a214:	20000563 	.word	0x20000563

0800a218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a218:	b590      	push	{r4, r7, lr}
 800a21a:	b09d      	sub	sp, #116	@ 0x74
 800a21c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a21e:	2438      	movs	r4, #56	@ 0x38
 800a220:	193b      	adds	r3, r7, r4
 800a222:	0018      	movs	r0, r3
 800a224:	2338      	movs	r3, #56	@ 0x38
 800a226:	001a      	movs	r2, r3
 800a228:	2100      	movs	r1, #0
 800a22a:	f018 fd09 	bl	8022c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a22e:	2324      	movs	r3, #36	@ 0x24
 800a230:	18fb      	adds	r3, r7, r3
 800a232:	0018      	movs	r0, r3
 800a234:	2314      	movs	r3, #20
 800a236:	001a      	movs	r2, r3
 800a238:	2100      	movs	r1, #0
 800a23a:	f018 fd01 	bl	8022c40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a23e:	003b      	movs	r3, r7
 800a240:	0018      	movs	r0, r3
 800a242:	2324      	movs	r3, #36	@ 0x24
 800a244:	001a      	movs	r2, r3
 800a246:	2100      	movs	r1, #0
 800a248:	f018 fcfa 	bl	8022c40 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a24c:	4b34      	ldr	r3, [pc, #208]	@ (800a320 <SystemClock_Config+0x108>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a34      	ldr	r2, [pc, #208]	@ (800a324 <SystemClock_Config+0x10c>)
 800a252:	401a      	ands	r2, r3
 800a254:	4b32      	ldr	r3, [pc, #200]	@ (800a320 <SystemClock_Config+0x108>)
 800a256:	2180      	movs	r1, #128	@ 0x80
 800a258:	0109      	lsls	r1, r1, #4
 800a25a:	430a      	orrs	r2, r1
 800a25c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800a25e:	f00d fb15 	bl	801788c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800a262:	4b31      	ldr	r3, [pc, #196]	@ (800a328 <SystemClock_Config+0x110>)
 800a264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a266:	4a2f      	ldr	r2, [pc, #188]	@ (800a324 <SystemClock_Config+0x10c>)
 800a268:	401a      	ands	r2, r3
 800a26a:	4b2f      	ldr	r3, [pc, #188]	@ (800a328 <SystemClock_Config+0x110>)
 800a26c:	2180      	movs	r1, #128	@ 0x80
 800a26e:	0149      	lsls	r1, r1, #5
 800a270:	430a      	orrs	r2, r1
 800a272:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800a274:	193b      	adds	r3, r7, r4
 800a276:	2226      	movs	r2, #38	@ 0x26
 800a278:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800a27a:	193b      	adds	r3, r7, r4
 800a27c:	2280      	movs	r2, #128	@ 0x80
 800a27e:	0052      	lsls	r2, r2, #1
 800a280:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a282:	0021      	movs	r1, r4
 800a284:	187b      	adds	r3, r7, r1
 800a286:	2201      	movs	r2, #1
 800a288:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a28a:	187b      	adds	r3, r7, r1
 800a28c:	2210      	movs	r2, #16
 800a28e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a290:	187b      	adds	r3, r7, r1
 800a292:	2201      	movs	r2, #1
 800a294:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a296:	187b      	adds	r3, r7, r1
 800a298:	2200      	movs	r2, #0
 800a29a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a29c:	187b      	adds	r3, r7, r1
 800a29e:	0018      	movs	r0, r3
 800a2a0:	f00d fb84 	bl	80179ac <HAL_RCC_OscConfig>
 800a2a4:	1e03      	subs	r3, r0, #0
 800a2a6:	d001      	beq.n	800a2ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 800a2a8:	f000 f906 	bl	800a4b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2ac:	2124      	movs	r1, #36	@ 0x24
 800a2ae:	187b      	adds	r3, r7, r1
 800a2b0:	220f      	movs	r2, #15
 800a2b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800a2b4:	187b      	adds	r3, r7, r1
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2ba:	187b      	adds	r3, r7, r1
 800a2bc:	2200      	movs	r2, #0
 800a2be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a2c0:	187b      	adds	r3, r7, r1
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a2c6:	187b      	adds	r3, r7, r1
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800a2cc:	187b      	adds	r3, r7, r1
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f00d ff3f 	bl	8018154 <HAL_RCC_ClockConfig>
 800a2d6:	1e03      	subs	r3, r0, #0
 800a2d8:	d001      	beq.n	800a2de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800a2da:	f000 f8ed 	bl	800a4b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800a2de:	003b      	movs	r3, r7
 800a2e0:	226d      	movs	r2, #109	@ 0x6d
 800a2e2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a2e4:	003b      	movs	r3, r7
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a2ea:	003b      	movs	r3, r7
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800a2f0:	003b      	movs	r3, r7
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a2f6:	003b      	movs	r3, r7
 800a2f8:	2280      	movs	r2, #128	@ 0x80
 800a2fa:	0252      	lsls	r2, r2, #9
 800a2fc:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a2fe:	003b      	movs	r3, r7
 800a300:	2280      	movs	r2, #128	@ 0x80
 800a302:	04d2      	lsls	r2, r2, #19
 800a304:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a306:	003b      	movs	r3, r7
 800a308:	0018      	movs	r0, r3
 800a30a:	f00e f947 	bl	801859c <HAL_RCCEx_PeriphCLKConfig>
 800a30e:	1e03      	subs	r3, r0, #0
 800a310:	d001      	beq.n	800a316 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800a312:	f000 f8d1 	bl	800a4b8 <Error_Handler>
  }
}
 800a316:	46c0      	nop			@ (mov r8, r8)
 800a318:	46bd      	mov	sp, r7
 800a31a:	b01d      	add	sp, #116	@ 0x74
 800a31c:	bd90      	pop	{r4, r7, pc}
 800a31e:	46c0      	nop			@ (mov r8, r8)
 800a320:	40007000 	.word	0x40007000
 800a324:	ffffe7ff 	.word	0xffffe7ff
 800a328:	40021000 	.word	0x40021000

0800a32c <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800a330:	4b34      	ldr	r3, [pc, #208]	@ (800a404 <check_cli_command+0xd8>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	3b61      	subs	r3, #97	@ 0x61
 800a336:	2b13      	cmp	r3, #19
 800a338:	d833      	bhi.n	800a3a2 <check_cli_command+0x76>
 800a33a:	009a      	lsls	r2, r3, #2
 800a33c:	4b32      	ldr	r3, [pc, #200]	@ (800a408 <check_cli_command+0xdc>)
 800a33e:	18d3      	adds	r3, r2, r3
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800a344:	4b31      	ldr	r3, [pc, #196]	@ (800a40c <check_cli_command+0xe0>)
 800a346:	0018      	movs	r0, r3
 800a348:	f018 fb0a 	bl	8022960 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800a34c:	2003      	movs	r0, #3
 800a34e:	f006 fb83 	bl	8010a58 <SetVerboseLevel>
      break;
 800a352:	e051      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800a354:	f7fc fa1c 	bl	8006790 <PC_show_Keys>
    break;
 800a358:	e04e      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800a35a:	f7f9 f979 	bl	8003650 <forceNTPupdate>
    break;
 800a35e:	e04b      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800a360:	4b2b      	ldr	r3, [pc, #172]	@ (800a410 <check_cli_command+0xe4>)
 800a362:	0018      	movs	r0, r3
 800a364:	f018 fafc 	bl	8022960 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800a368:	2002      	movs	r0, #2
 800a36a:	f006 fb75 	bl	8010a58 <SetVerboseLevel>
      break;
 800a36e:	e043      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800a370:	4b28      	ldr	r3, [pc, #160]	@ (800a414 <check_cli_command+0xe8>)
 800a372:	0018      	movs	r0, r3
 800a374:	f018 faf4 	bl	8022960 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800a378:	2001      	movs	r0, #1
 800a37a:	f006 fb6d 	bl	8010a58 <SetVerboseLevel>
      break;
 800a37e:	e03b      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800a380:	4b25      	ldr	r3, [pc, #148]	@ (800a418 <check_cli_command+0xec>)
 800a382:	0018      	movs	r0, r3
 800a384:	f018 faec 	bl	8022960 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800a388:	2000      	movs	r0, #0
 800a38a:	f006 fb65 	bl	8010a58 <SetVerboseLevel>
      break;
 800a38e:	e033      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800a390:	f006 ff44 	bl	801121c <HAL_GetTick>
 800a394:	0002      	movs	r2, r0
 800a396:	4b21      	ldr	r3, [pc, #132]	@ (800a41c <check_cli_command+0xf0>)
 800a398:	601a      	str	r2, [r3, #0]
      break;
 800a39a:	e02d      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800a39c:	f7fc fe6c 	bl	8007078 <showTime>
      break;
 800a3a0:	e02a      	b.n	800a3f8 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800a3a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a420 <check_cli_command+0xf4>)
 800a3a4:	4b1f      	ldr	r3, [pc, #124]	@ (800a424 <check_cli_command+0xf8>)
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f006 faeb 	bl	8010984 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800a3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a428 <check_cli_command+0xfc>)
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f018 fad5 	bl	8022960 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800a3b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a42c <check_cli_command+0x100>)
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	f018 fad1 	bl	8022960 <puts>
      printf("e - show EEPROM\r\n");
 800a3be:	4b1c      	ldr	r3, [pc, #112]	@ (800a430 <check_cli_command+0x104>)
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f018 facd 	bl	8022960 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800a3c6:	4b1b      	ldr	r3, [pc, #108]	@ (800a434 <check_cli_command+0x108>)
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f018 fac9 	bl	8022960 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800a3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a438 <check_cli_command+0x10c>)
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	f018 fac5 	bl	8022960 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800a3d6:	4b19      	ldr	r3, [pc, #100]	@ (800a43c <check_cli_command+0x110>)
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f018 fac1 	bl	8022960 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800a3de:	4b18      	ldr	r3, [pc, #96]	@ (800a440 <check_cli_command+0x114>)
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f018 fabd 	bl	8022960 <puts>
      printf("s - Start particle measurement\r\n");
 800a3e6:	4b17      	ldr	r3, [pc, #92]	@ (800a444 <check_cli_command+0x118>)
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f018 fab9 	bl	8022960 <puts>
      printf("t - Show actual systemtime\r\n");
 800a3ee:	4b16      	ldr	r3, [pc, #88]	@ (800a448 <check_cli_command+0x11c>)
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f018 fab5 	bl	8022960 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800a3f6:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800a3f8:	4b02      	ldr	r3, [pc, #8]	@ (800a404 <check_cli_command+0xd8>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	701a      	strb	r2, [r3, #0]
}
 800a3fe:	46c0      	nop			@ (mov r8, r8)
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	20000d90 	.word	0x20000d90
 800a408:	08028fe0 	.word	0x08028fe0
 800a40c:	08027900 	.word	0x08027900
 800a410:	0802791c 	.word	0x0802791c
 800a414:	08027938 	.word	0x08027938
 800a418:	08027958 	.word	0x08027958
 800a41c:	20000e58 	.word	0x20000e58
 800a420:	08027974 	.word	0x08027974
 800a424:	080279a4 	.word	0x080279a4
 800a428:	080279a8 	.word	0x080279a8
 800a42c:	080279c0 	.word	0x080279c0
 800a430:	080279e0 	.word	0x080279e0
 800a434:	080279f4 	.word	0x080279f4
 800a438:	08027a18 	.word	0x08027a18
 800a43c:	08027a38 	.word	0x08027a38
 800a440:	08027a5c 	.word	0x08027a5c
 800a444:	08027a7c 	.word	0x08027a7c
 800a448:	08027a9c 	.word	0x08027a9c

0800a44c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800a454:	4907      	ldr	r1, [pc, #28]	@ (800a474 <HAL_UART_RxCpltCallback+0x28>)
 800a456:	4b08      	ldr	r3, [pc, #32]	@ (800a478 <HAL_UART_RxCpltCallback+0x2c>)
 800a458:	2201      	movs	r2, #1
 800a45a:	0018      	movs	r0, r3
 800a45c:	f00f fc42 	bl	8019ce4 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800a460:	4904      	ldr	r1, [pc, #16]	@ (800a474 <HAL_UART_RxCpltCallback+0x28>)
 800a462:	4b05      	ldr	r3, [pc, #20]	@ (800a478 <HAL_UART_RxCpltCallback+0x2c>)
 800a464:	2201      	movs	r2, #1
 800a466:	0018      	movs	r0, r3
 800a468:	f00f fc3c 	bl	8019ce4 <HAL_UART_Receive_IT>
}
 800a46c:	46c0      	nop			@ (mov r8, r8)
 800a46e:	46bd      	mov	sp, r7
 800a470:	b002      	add	sp, #8
 800a472:	bd80      	pop	{r7, pc}
 800a474:	20000d90 	.word	0x20000d90
 800a478:	20001f70 	.word	0x20001f70

0800a47c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	0002      	movs	r2, r0
 800a484:	1dbb      	adds	r3, r7, #6
 800a486:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800a488:	1dbb      	adds	r3, r7, #6
 800a48a:	881a      	ldrh	r2, [r3, #0]
 800a48c:	2380      	movs	r3, #128	@ 0x80
 800a48e:	021b      	lsls	r3, r3, #8
 800a490:	429a      	cmp	r2, r3
 800a492:	d10b      	bne.n	800a4ac <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800a494:	f005 fd1c 	bl	800fed0 <setuserToggle>
    if (GetPMSensorPresence()) {
 800a498:	f000 f854 	bl	800a544 <GetPMSensorPresence>
 800a49c:	1e03      	subs	r3, r0, #0
 800a49e:	d005      	beq.n	800a4ac <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800a4a0:	4b04      	ldr	r3, [pc, #16]	@ (800a4b4 <HAL_GPIO_EXTI_Callback+0x38>)
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f000 ff98 	bl	800b3dc <sen5x_Set_sen5x_state>
    }
  }
}
 800a4ac:	46c0      	nop			@ (mov r8, r8)
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b002      	add	sp, #8
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20000da8 	.word	0x20000da8

0800a4b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800a4bc:	f005 f9d4 	bl	800f868 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a4c0:	b672      	cpsid	i
}
 800a4c2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800a4c4:	4a05      	ldr	r2, [pc, #20]	@ (800a4dc <Error_Handler+0x24>)
 800a4c6:	4b06      	ldr	r3, [pc, #24]	@ (800a4e0 <Error_Handler+0x28>)
 800a4c8:	0019      	movs	r1, r3
 800a4ca:	2001      	movs	r0, #1
 800a4cc:	f006 fa5a 	bl	8010984 <CreateLine>

    HAL_Delay(2500);
 800a4d0:	4b04      	ldr	r3, [pc, #16]	@ (800a4e4 <Error_Handler+0x2c>)
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	f006 feac 	bl	8011230 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800a4d8:	46c0      	nop			@ (mov r8, r8)
 800a4da:	e7f3      	b.n	800a4c4 <Error_Handler+0xc>
 800a4dc:	08027ab8 	.word	0x08027ab8
 800a4e0:	080279a4 	.word	0x080279a4
 800a4e4:	000009c4 	.word	0x000009c4

0800a4e8 <testInit>:
static uint8_t SGPstate;
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;

void testInit(){
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800a4ec:	4b13      	ldr	r3, [pc, #76]	@ (800a53c <testInit+0x54>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800a4f2:	4b12      	ldr	r3, [pc, #72]	@ (800a53c <testInit+0x54>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800a4f8:	4b10      	ldr	r3, [pc, #64]	@ (800a53c <testInit+0x54>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	709a      	strb	r2, [r3, #2]
  SensorProbe.BMP280_Present = false;
 800a4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a53c <testInit+0x54>)
 800a500:	2200      	movs	r2, #0
 800a502:	70da      	strb	r2, [r3, #3]
  SensorProbe.PM_Present = false;
 800a504:	4b0d      	ldr	r3, [pc, #52]	@ (800a53c <testInit+0x54>)
 800a506:	2200      	movs	r2, #0
 800a508:	711a      	strb	r2, [r3, #4]
  SensorProbe.MIC_Present = false;
 800a50a:	4b0c      	ldr	r3, [pc, #48]	@ (800a53c <testInit+0x54>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	715a      	strb	r2, [r3, #5]
  SensorProbe.ESP_Present = false;
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <testInit+0x54>)
 800a512:	2200      	movs	r2, #0
 800a514:	719a      	strb	r2, [r3, #6]
  SensorProbe.SGP_Enabled = false;
 800a516:	4b09      	ldr	r3, [pc, #36]	@ (800a53c <testInit+0x54>)
 800a518:	2200      	movs	r2, #0
 800a51a:	71da      	strb	r2, [r3, #7]
  Sensor.HT_measurementEnabled = true;
 800a51c:	4b08      	ldr	r3, [pc, #32]	@ (800a540 <testInit+0x58>)
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800a522:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <testInit+0x58>)
 800a524:	2201      	movs	r2, #1
 800a526:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800a528:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <testInit+0x58>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800a52e:	4b04      	ldr	r3, [pc, #16]	@ (800a540 <testInit+0x58>)
 800a530:	2201      	movs	r2, #1
 800a532:	70da      	strb	r2, [r3, #3]
}
 800a534:	46c0      	nop			@ (mov r8, r8)
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	20000db0 	.word	0x20000db0
 800a540:	20000da8 	.word	0x20000da8

0800a544 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800a548:	4b02      	ldr	r3, [pc, #8]	@ (800a554 <GetPMSensorPresence+0x10>)
 800a54a:	791b      	ldrb	r3, [r3, #4]
}
 800a54c:	0018      	movs	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	20000db0 	.word	0x20000db0

0800a558 <DisablePMSensor>:

void DisablePMSensor() {
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800a55c:	4b02      	ldr	r3, [pc, #8]	@ (800a568 <DisablePMSensor+0x10>)
 800a55e:	2200      	movs	r2, #0
 800a560:	711a      	strb	r2, [r3, #4]
}
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20000db0 	.word	0x20000db0

0800a56c <IsBMP280SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsBMP280SensorPresent() {
 800a56c:	b580      	push	{r7, lr}
 800a56e:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800a570:	4b02      	ldr	r3, [pc, #8]	@ (800a57c <IsBMP280SensorPresent+0x10>)
 800a572:	78db      	ldrb	r3, [r3, #3]
}
 800a574:	0018      	movs	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	46c0      	nop			@ (mov r8, r8)
 800a57c:	20000db0 	.word	0x20000db0

0800a580 <IsSGPPresent>:

bool IsSGPPresent() {
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800a584:	4b02      	ldr	r3, [pc, #8]	@ (800a590 <IsSGPPresent+0x10>)
 800a586:	785b      	ldrb	r3, [r3, #1]
}
 800a588:	0018      	movs	r0, r3
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	46c0      	nop			@ (mov r8, r8)
 800a590:	20000db0 	.word	0x20000db0

0800a594 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	0002      	movs	r2, r0
 800a59c:	1dfb      	adds	r3, r7, #7
 800a59e:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <SetVOCSensorDIS_ENA+0x3c>)
 800a5a2:	1dfa      	adds	r2, r7, #7
 800a5a4:	7812      	ldrb	r2, [r2, #0]
 800a5a6:	71da      	strb	r2, [r3, #7]
  Sensor.VOC_measurementEnabled = setting;
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d4 <SetVOCSensorDIS_ENA+0x40>)
 800a5aa:	1dfa      	adds	r2, r7, #7
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800a5b0:	1dfb      	adds	r3, r7, #7
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <SetVOCSensorDIS_ENA+0x28>
 800a5b8:	4b07      	ldr	r3, [pc, #28]	@ (800a5d8 <SetVOCSensorDIS_ENA+0x44>)
 800a5ba:	e000      	b.n	800a5be <SetVOCSensorDIS_ENA+0x2a>
 800a5bc:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <SetVOCSensorDIS_ENA+0x48>)
 800a5be:	4a08      	ldr	r2, [pc, #32]	@ (800a5e0 <SetVOCSensorDIS_ENA+0x4c>)
 800a5c0:	4908      	ldr	r1, [pc, #32]	@ (800a5e4 <SetVOCSensorDIS_ENA+0x50>)
 800a5c2:	2003      	movs	r0, #3
 800a5c4:	f006 f9de 	bl	8010984 <CreateLine>
}
 800a5c8:	46c0      	nop			@ (mov r8, r8)
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	20000db0 	.word	0x20000db0
 800a5d4:	20000da8 	.word	0x20000da8
 800a5d8:	08027ae4 	.word	0x08027ae4
 800a5dc:	08027aec 	.word	0x08027aec
 800a5e0:	08027af8 	.word	0x08027af8
 800a5e4:	08027b0c 	.word	0x08027b0c

0800a5e8 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800a5ec:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <IsPMSensorEnabled+0x10>)
 800a5ee:	789b      	ldrb	r3, [r3, #2]
}
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	20000da8 	.word	0x20000da8

0800a5fc <SetVOCSensorStatus>:

void SetBMP280SensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	0002      	movs	r2, r0
 800a604:	1dfb      	adds	r3, r7, #7
 800a606:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800a608:	4b05      	ldr	r3, [pc, #20]	@ (800a620 <SetVOCSensorStatus+0x24>)
 800a60a:	79db      	ldrb	r3, [r3, #7]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d003      	beq.n	800a618 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800a610:	4b04      	ldr	r3, [pc, #16]	@ (800a624 <SetVOCSensorStatus+0x28>)
 800a612:	1dfa      	adds	r2, r7, #7
 800a614:	7812      	ldrb	r2, [r2, #0]
 800a616:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800a618:	46c0      	nop			@ (mov r8, r8)
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b002      	add	sp, #8
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20000db0 	.word	0x20000db0
 800a624:	20000da8 	.word	0x20000da8

0800a628 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	0002      	movs	r2, r0
 800a630:	1dfb      	adds	r3, r7, #7
 800a632:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800a634:	4b03      	ldr	r3, [pc, #12]	@ (800a644 <SetPMSensorStatus+0x1c>)
 800a636:	1dfa      	adds	r2, r7, #7
 800a638:	7812      	ldrb	r2, [r2, #0]
 800a63a:	709a      	strb	r2, [r3, #2]
}
 800a63c:	46c0      	nop			@ (mov r8, r8)
 800a63e:	46bd      	mov	sp, r7
 800a640:	b002      	add	sp, #8
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20000da8 	.word	0x20000da8

0800a648 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800a64c:	4b02      	ldr	r3, [pc, #8]	@ (800a658 <SetESPMeasurementDone+0x10>)
 800a64e:	2201      	movs	r2, #1
 800a650:	719a      	strb	r2, [r3, #6]
}
 800a652:	46c0      	nop			@ (mov r8, r8)
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20000db0 	.word	0x20000db0

0800a65c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
  testInit();
 800a66a:	f7ff ff3d 	bl	800a4e8 <testInit>
  I2CSensors_Init(sensorI2C);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	0018      	movs	r0, r3
 800a672:	f7fb fd3f 	bl	80060f4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800a676:	f006 fbb7 	bl	8010de8 <HIDS_DeviceConnected>
 800a67a:	0003      	movs	r3, r0
 800a67c:	001a      	movs	r2, r3
 800a67e:	2301      	movs	r3, #1
 800a680:	4053      	eors	r3, r2
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00c      	beq.n	800a6a2 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800a688:	4aaa      	ldr	r2, [pc, #680]	@ (800a934 <Device_Init+0x2d8>)
 800a68a:	4bab      	ldr	r3, [pc, #684]	@ (800a938 <Device_Init+0x2dc>)
 800a68c:	0019      	movs	r1, r3
 800a68e:	2001      	movs	r0, #1
 800a690:	f006 f978 	bl	8010984 <CreateLine>
     SensorProbe.HT_Present = false;
 800a694:	4ba9      	ldr	r3, [pc, #676]	@ (800a93c <Device_Init+0x2e0>)
 800a696:	2200      	movs	r2, #0
 800a698:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800a69a:	4ba9      	ldr	r3, [pc, #676]	@ (800a940 <Device_Init+0x2e4>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	701a      	strb	r2, [r3, #0]
 800a6a0:	e008      	b.n	800a6b4 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800a6a2:	4ba6      	ldr	r3, [pc, #664]	@ (800a93c <Device_Init+0x2e0>)
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800a6a8:	4aa6      	ldr	r2, [pc, #664]	@ (800a944 <Device_Init+0x2e8>)
 800a6aa:	4ba7      	ldr	r3, [pc, #668]	@ (800a948 <Device_Init+0x2ec>)
 800a6ac:	0019      	movs	r1, r3
 800a6ae:	2003      	movs	r0, #3
 800a6b0:	f006 f968 	bl	8010984 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800a6b4:	f7fe fa4e 	bl	8008b54 <BMP280_DeviceConnected>
 800a6b8:	0003      	movs	r3, r0
 800a6ba:	001a      	movs	r2, r3
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4053      	eors	r3, r2
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00c      	beq.n	800a6e0 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800a6c6:	4aa1      	ldr	r2, [pc, #644]	@ (800a94c <Device_Init+0x2f0>)
 800a6c8:	4b9b      	ldr	r3, [pc, #620]	@ (800a938 <Device_Init+0x2dc>)
 800a6ca:	0019      	movs	r1, r3
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	f006 f959 	bl	8010984 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800a6d2:	4b9a      	ldr	r3, [pc, #616]	@ (800a93c <Device_Init+0x2e0>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	70da      	strb	r2, [r3, #3]
     Sensor.BMP280_measurementEnabled = false;
 800a6d8:	4b99      	ldr	r3, [pc, #612]	@ (800a940 <Device_Init+0x2e4>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	715a      	strb	r2, [r3, #5]
 800a6de:	e008      	b.n	800a6f2 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800a6e0:	4b96      	ldr	r3, [pc, #600]	@ (800a93c <Device_Init+0x2e0>)
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	70da      	strb	r2, [r3, #3]
    Debug("Air pressure / Temperature sensor initialised.");
 800a6e6:	4a9a      	ldr	r2, [pc, #616]	@ (800a950 <Device_Init+0x2f4>)
 800a6e8:	4b97      	ldr	r3, [pc, #604]	@ (800a948 <Device_Init+0x2ec>)
 800a6ea:	0019      	movs	r1, r3
 800a6ec:	2003      	movs	r0, #3
 800a6ee:	f006 f949 	bl	8010984 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800a6f2:	f003 fbef 	bl	800ded4 <SGP_DeviceConnected>
 800a6f6:	0003      	movs	r3, r0
 800a6f8:	001a      	movs	r2, r3
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4053      	eors	r3, r2
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00c      	beq.n	800a71e <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800a704:	4b8d      	ldr	r3, [pc, #564]	@ (800a93c <Device_Init+0x2e0>)
 800a706:	2200      	movs	r2, #0
 800a708:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800a70a:	4a92      	ldr	r2, [pc, #584]	@ (800a954 <Device_Init+0x2f8>)
 800a70c:	4b8a      	ldr	r3, [pc, #552]	@ (800a938 <Device_Init+0x2dc>)
 800a70e:	0019      	movs	r1, r3
 800a710:	2001      	movs	r0, #1
 800a712:	f006 f937 	bl	8010984 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800a716:	4b8a      	ldr	r3, [pc, #552]	@ (800a940 <Device_Init+0x2e4>)
 800a718:	2200      	movs	r2, #0
 800a71a:	705a      	strb	r2, [r3, #1]
 800a71c:	e00b      	b.n	800a736 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800a71e:	4b87      	ldr	r3, [pc, #540]	@ (800a93c <Device_Init+0x2e0>)
 800a720:	2201      	movs	r2, #1
 800a722:	71da      	strb	r2, [r3, #7]
    SensorProbe.VOC_Present = true;
 800a724:	4b85      	ldr	r3, [pc, #532]	@ (800a93c <Device_Init+0x2e0>)
 800a726:	2201      	movs	r2, #1
 800a728:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800a72a:	4a8b      	ldr	r2, [pc, #556]	@ (800a958 <Device_Init+0x2fc>)
 800a72c:	4b86      	ldr	r3, [pc, #536]	@ (800a948 <Device_Init+0x2ec>)
 800a72e:	0019      	movs	r1, r3
 800a730:	2003      	movs	r0, #3
 800a732:	f006 f927 	bl	8010984 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800a736:	f7fd fd2d 	bl	8008194 <AHT20_DeviceConnected>
 800a73a:	0003      	movs	r3, r0
 800a73c:	001a      	movs	r2, r3
 800a73e:	2301      	movs	r3, #1
 800a740:	4053      	eors	r3, r2
 800a742:	b2db      	uxtb	r3, r3
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00c      	beq.n	800a762 <Device_Init+0x106>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800a748:	4a84      	ldr	r2, [pc, #528]	@ (800a95c <Device_Init+0x300>)
 800a74a:	4b7b      	ldr	r3, [pc, #492]	@ (800a938 <Device_Init+0x2dc>)
 800a74c:	0019      	movs	r1, r3
 800a74e:	2001      	movs	r0, #1
 800a750:	f006 f918 	bl	8010984 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800a754:	4b79      	ldr	r3, [pc, #484]	@ (800a93c <Device_Init+0x2e0>)
 800a756:	2200      	movs	r2, #0
 800a758:	709a      	strb	r2, [r3, #2]
     Sensor.AHT20_measurementEnabled = false;
 800a75a:	4b79      	ldr	r3, [pc, #484]	@ (800a940 <Device_Init+0x2e4>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	711a      	strb	r2, [r3, #4]
 800a760:	e008      	b.n	800a774 <Device_Init+0x118>
  }else {
    SensorProbe.AHT20_Present = true;
 800a762:	4b76      	ldr	r3, [pc, #472]	@ (800a93c <Device_Init+0x2e0>)
 800a764:	2201      	movs	r2, #1
 800a766:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800a768:	4a7d      	ldr	r2, [pc, #500]	@ (800a960 <Device_Init+0x304>)
 800a76a:	4b77      	ldr	r3, [pc, #476]	@ (800a948 <Device_Init+0x2ec>)
 800a76c:	0019      	movs	r1, r3
 800a76e:	2003      	movs	r0, #3
 800a770:	f006 f908 	bl	8010984 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800a774:	4b71      	ldr	r3, [pc, #452]	@ (800a93c <Device_Init+0x2e0>)
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d009      	beq.n	800a790 <Device_Init+0x134>
 800a77c:	4b6f      	ldr	r3, [pc, #444]	@ (800a93c <Device_Init+0x2e0>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d005      	beq.n	800a790 <Device_Init+0x134>
    SetDBLED(false, true, false);
 800a784:	2200      	movs	r2, #0
 800a786:	2101      	movs	r1, #1
 800a788:	2000      	movs	r0, #0
 800a78a:	f004 fec7 	bl	800f51c <SetDBLED>
 800a78e:	e018      	b.n	800a7c2 <Device_Init+0x166>
  }
  else{
    SetDBLED(true, false, false);
 800a790:	2200      	movs	r2, #0
 800a792:	2100      	movs	r1, #0
 800a794:	2001      	movs	r0, #1
 800a796:	f004 fec1 	bl	800f51c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800a79a:	4b72      	ldr	r3, [pc, #456]	@ (800a964 <Device_Init+0x308>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	2101      	movs	r1, #1
 800a7a0:	0018      	movs	r0, r3
 800a7a2:	f007 ffcc 	bl	801273e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800a7a6:	2380      	movs	r3, #128	@ 0x80
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	486e      	ldr	r0, [pc, #440]	@ (800a964 <Device_Init+0x308>)
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	0019      	movs	r1, r3
 800a7b0:	f007 ffc5 	bl	801273e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800a7b4:	2380      	movs	r3, #128	@ 0x80
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	486a      	ldr	r0, [pc, #424]	@ (800a964 <Device_Init+0x308>)
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	0019      	movs	r1, r3
 800a7be:	f007 ffbe 	bl	801273e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800a7c2:	4b5f      	ldr	r3, [pc, #380]	@ (800a940 <Device_Init+0x2e4>)
 800a7c4:	78db      	ldrb	r3, [r3, #3]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d028      	beq.n	800a81c <Device_Init+0x1c0>
    Info("Device_Init calls enableMicrophone");
 800a7ca:	4a67      	ldr	r2, [pc, #412]	@ (800a968 <Device_Init+0x30c>)
 800a7cc:	4b67      	ldr	r3, [pc, #412]	@ (800a96c <Device_Init+0x310>)
 800a7ce:	0019      	movs	r1, r3
 800a7d0:	2002      	movs	r0, #2
 800a7d2:	f006 f8d7 	bl	8010984 <CreateLine>
    if (!enableMicrophone(true)) {
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	f003 ff9e 	bl	800e718 <enableMicrophone>
 800a7dc:	0003      	movs	r3, r0
 800a7de:	001a      	movs	r2, r3
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4053      	eors	r3, r2
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00c      	beq.n	800a804 <Device_Init+0x1a8>
      Error("Microphone device not connected! DMA Error.");
 800a7ea:	4a61      	ldr	r2, [pc, #388]	@ (800a970 <Device_Init+0x314>)
 800a7ec:	4b52      	ldr	r3, [pc, #328]	@ (800a938 <Device_Init+0x2dc>)
 800a7ee:	0019      	movs	r1, r3
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	f006 f8c7 	bl	8010984 <CreateLine>
      SensorProbe.MIC_Present = false;
 800a7f6:	4b51      	ldr	r3, [pc, #324]	@ (800a93c <Device_Init+0x2e0>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = false;
 800a7fc:	4b50      	ldr	r3, [pc, #320]	@ (800a940 <Device_Init+0x2e4>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	70da      	strb	r2, [r3, #3]
 800a802:	e00b      	b.n	800a81c <Device_Init+0x1c0>
    }
    else{
      SensorProbe.MIC_Present = true;
 800a804:	4b4d      	ldr	r3, [pc, #308]	@ (800a93c <Device_Init+0x2e0>)
 800a806:	2201      	movs	r2, #1
 800a808:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a80a:	4b4d      	ldr	r3, [pc, #308]	@ (800a940 <Device_Init+0x2e4>)
 800a80c:	2201      	movs	r2, #1
 800a80e:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800a810:	4a58      	ldr	r2, [pc, #352]	@ (800a974 <Device_Init+0x318>)
 800a812:	4b4d      	ldr	r3, [pc, #308]	@ (800a948 <Device_Init+0x2ec>)
 800a814:	0019      	movs	r1, r3
 800a816:	2003      	movs	r0, #3
 800a818:	f006 f8b4 	bl	8010984 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800a81c:	f000 fed2 	bl	800b5c4 <probe_sen5x>
 800a820:	1e03      	subs	r3, r0, #0
 800a822:	d122      	bne.n	800a86a <Device_Init+0x20e>
    Debug("PM sensor initialised.");
 800a824:	4a54      	ldr	r2, [pc, #336]	@ (800a978 <Device_Init+0x31c>)
 800a826:	4b48      	ldr	r3, [pc, #288]	@ (800a948 <Device_Init+0x2ec>)
 800a828:	0019      	movs	r1, r3
 800a82a:	2003      	movs	r0, #3
 800a82c:	f006 f8aa 	bl	8010984 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800a830:	4b42      	ldr	r3, [pc, #264]	@ (800a93c <Device_Init+0x2e0>)
 800a832:	2201      	movs	r2, #1
 800a834:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = true;
 800a836:	4b42      	ldr	r3, [pc, #264]	@ (800a940 <Device_Init+0x2e4>)
 800a838:	2201      	movs	r2, #1
 800a83a:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800a83c:	4b4f      	ldr	r3, [pc, #316]	@ (800a97c <Device_Init+0x320>)
 800a83e:	791b      	ldrb	r3, [r3, #4]
 800a840:	2b34      	cmp	r3, #52	@ 0x34
 800a842:	d003      	beq.n	800a84c <Device_Init+0x1f0>
 800a844:	4b4d      	ldr	r3, [pc, #308]	@ (800a97c <Device_Init+0x320>)
 800a846:	791b      	ldrb	r3, [r3, #4]
 800a848:	2b35      	cmp	r3, #53	@ 0x35
 800a84a:	d11c      	bne.n	800a886 <Device_Init+0x22a>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800a84c:	4a4c      	ldr	r2, [pc, #304]	@ (800a980 <Device_Init+0x324>)
 800a84e:	4b47      	ldr	r3, [pc, #284]	@ (800a96c <Device_Init+0x310>)
 800a850:	0019      	movs	r1, r3
 800a852:	2002      	movs	r0, #2
 800a854:	f006 f896 	bl	8010984 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800a858:	4b39      	ldr	r3, [pc, #228]	@ (800a940 <Device_Init+0x2e4>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800a85e:	4b37      	ldr	r3, [pc, #220]	@ (800a93c <Device_Init+0x2e0>)
 800a860:	2200      	movs	r2, #0
 800a862:	71da      	strb	r2, [r3, #7]
      SGP_SoftReset();
 800a864:	f003 fd1a 	bl	800e29c <SGP_SoftReset>
 800a868:	e00d      	b.n	800a886 <Device_Init+0x22a>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800a86a:	f000 fe75 	bl	800b558 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800a86e:	4a45      	ldr	r2, [pc, #276]	@ (800a984 <Device_Init+0x328>)
 800a870:	4b35      	ldr	r3, [pc, #212]	@ (800a948 <Device_Init+0x2ec>)
 800a872:	0019      	movs	r1, r3
 800a874:	2003      	movs	r0, #3
 800a876:	f006 f885 	bl	8010984 <CreateLine>
    SensorProbe.PM_Present = false;
 800a87a:	4b30      	ldr	r3, [pc, #192]	@ (800a93c <Device_Init+0x2e0>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	711a      	strb	r2, [r3, #4]
    Sensor.PM_measurementEnabled = false;
 800a880:	4b2f      	ldr	r3, [pc, #188]	@ (800a940 <Device_Init+0x2e4>)
 800a882:	2200      	movs	r2, #0
 800a884:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800a886:	4b2d      	ldr	r3, [pc, #180]	@ (800a93c <Device_Init+0x2e0>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <Device_Init+0x236>
 800a88e:	4b3e      	ldr	r3, [pc, #248]	@ (800a988 <Device_Init+0x32c>)
 800a890:	e000      	b.n	800a894 <Device_Init+0x238>
 800a892:	4b3e      	ldr	r3, [pc, #248]	@ (800a98c <Device_Init+0x330>)
 800a894:	4a3e      	ldr	r2, [pc, #248]	@ (800a990 <Device_Init+0x334>)
 800a896:	4935      	ldr	r1, [pc, #212]	@ (800a96c <Device_Init+0x310>)
 800a898:	2002      	movs	r0, #2
 800a89a:	f006 f873 	bl	8010984 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800a89e:	4b27      	ldr	r3, [pc, #156]	@ (800a93c <Device_Init+0x2e0>)
 800a8a0:	785b      	ldrb	r3, [r3, #1]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <Device_Init+0x24e>
 800a8a6:	4b38      	ldr	r3, [pc, #224]	@ (800a988 <Device_Init+0x32c>)
 800a8a8:	e000      	b.n	800a8ac <Device_Init+0x250>
 800a8aa:	4b38      	ldr	r3, [pc, #224]	@ (800a98c <Device_Init+0x330>)
 800a8ac:	4a39      	ldr	r2, [pc, #228]	@ (800a994 <Device_Init+0x338>)
 800a8ae:	492f      	ldr	r1, [pc, #188]	@ (800a96c <Device_Init+0x310>)
 800a8b0:	2002      	movs	r0, #2
 800a8b2:	f006 f867 	bl	8010984 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800a8b6:	4b21      	ldr	r3, [pc, #132]	@ (800a93c <Device_Init+0x2e0>)
 800a8b8:	789b      	ldrb	r3, [r3, #2]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <Device_Init+0x266>
 800a8be:	4b32      	ldr	r3, [pc, #200]	@ (800a988 <Device_Init+0x32c>)
 800a8c0:	e000      	b.n	800a8c4 <Device_Init+0x268>
 800a8c2:	4b32      	ldr	r3, [pc, #200]	@ (800a98c <Device_Init+0x330>)
 800a8c4:	4a34      	ldr	r2, [pc, #208]	@ (800a998 <Device_Init+0x33c>)
 800a8c6:	4929      	ldr	r1, [pc, #164]	@ (800a96c <Device_Init+0x310>)
 800a8c8:	2002      	movs	r0, #2
 800a8ca:	f006 f85b 	bl	8010984 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800a8ce:	4b1b      	ldr	r3, [pc, #108]	@ (800a93c <Device_Init+0x2e0>)
 800a8d0:	78db      	ldrb	r3, [r3, #3]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <Device_Init+0x27e>
 800a8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800a988 <Device_Init+0x32c>)
 800a8d8:	e000      	b.n	800a8dc <Device_Init+0x280>
 800a8da:	4b2c      	ldr	r3, [pc, #176]	@ (800a98c <Device_Init+0x330>)
 800a8dc:	4a2f      	ldr	r2, [pc, #188]	@ (800a99c <Device_Init+0x340>)
 800a8de:	4923      	ldr	r1, [pc, #140]	@ (800a96c <Device_Init+0x310>)
 800a8e0:	2002      	movs	r0, #2
 800a8e2:	f006 f84f 	bl	8010984 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800a8e6:	4b15      	ldr	r3, [pc, #84]	@ (800a93c <Device_Init+0x2e0>)
 800a8e8:	791b      	ldrb	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <Device_Init+0x296>
 800a8ee:	4b26      	ldr	r3, [pc, #152]	@ (800a988 <Device_Init+0x32c>)
 800a8f0:	e000      	b.n	800a8f4 <Device_Init+0x298>
 800a8f2:	4b26      	ldr	r3, [pc, #152]	@ (800a98c <Device_Init+0x330>)
 800a8f4:	4a2a      	ldr	r2, [pc, #168]	@ (800a9a0 <Device_Init+0x344>)
 800a8f6:	491d      	ldr	r1, [pc, #116]	@ (800a96c <Device_Init+0x310>)
 800a8f8:	2002      	movs	r0, #2
 800a8fa:	f006 f843 	bl	8010984 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800a8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a93c <Device_Init+0x2e0>)
 800a900:	795b      	ldrb	r3, [r3, #5]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d001      	beq.n	800a90a <Device_Init+0x2ae>
 800a906:	4b20      	ldr	r3, [pc, #128]	@ (800a988 <Device_Init+0x32c>)
 800a908:	e000      	b.n	800a90c <Device_Init+0x2b0>
 800a90a:	4b20      	ldr	r3, [pc, #128]	@ (800a98c <Device_Init+0x330>)
 800a90c:	4a25      	ldr	r2, [pc, #148]	@ (800a9a4 <Device_Init+0x348>)
 800a90e:	4917      	ldr	r1, [pc, #92]	@ (800a96c <Device_Init+0x310>)
 800a910:	2002      	movs	r0, #2
 800a912:	f006 f837 	bl	8010984 <CreateLine>
  ESP_Init(espUart);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	0018      	movs	r0, r3
 800a91a:	f7f9 f86d 	bl	80039f8 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800a91e:	4a22      	ldr	r2, [pc, #136]	@ (800a9a8 <Device_Init+0x34c>)
 800a920:	4b09      	ldr	r3, [pc, #36]	@ (800a948 <Device_Init+0x2ec>)
 800a922:	0019      	movs	r1, r3
 800a924:	2003      	movs	r0, #3
 800a926:	f006 f82d 	bl	8010984 <CreateLine>
}
 800a92a:	46c0      	nop			@ (mov r8, r8)
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b004      	add	sp, #16
 800a930:	bd80      	pop	{r7, pc}
 800a932:	46c0      	nop			@ (mov r8, r8)
 800a934:	08027b10 	.word	0x08027b10
 800a938:	08027b40 	.word	0x08027b40
 800a93c:	20000db0 	.word	0x20000db0
 800a940:	20000da8 	.word	0x20000da8
 800a944:	08027b44 	.word	0x08027b44
 800a948:	08027b0c 	.word	0x08027b0c
 800a94c:	08027b70 	.word	0x08027b70
 800a950:	08027ba4 	.word	0x08027ba4
 800a954:	08027bd4 	.word	0x08027bd4
 800a958:	08027bf0 	.word	0x08027bf0
 800a95c:	08027c08 	.word	0x08027c08
 800a960:	08027c3c 	.word	0x08027c3c
 800a964:	50000400 	.word	0x50000400
 800a968:	08027c70 	.word	0x08027c70
 800a96c:	08027c94 	.word	0x08027c94
 800a970:	08027c98 	.word	0x08027c98
 800a974:	08027cc4 	.word	0x08027cc4
 800a978:	08027cf0 	.word	0x08027cf0
 800a97c:	20000e4c 	.word	0x20000e4c
 800a980:	08027d08 	.word	0x08027d08
 800a984:	08027d58 	.word	0x08027d58
 800a988:	08027d7c 	.word	0x08027d7c
 800a98c:	08027d80 	.word	0x08027d80
 800a990:	08027d84 	.word	0x08027d84
 800a994:	08027da0 	.word	0x08027da0
 800a998:	08027dbc 	.word	0x08027dbc
 800a99c:	08027ddc 	.word	0x08027ddc
 800a9a0:	08027dfc 	.word	0x08027dfc
 800a9a4:	08027e18 	.word	0x08027e18
 800a9a8:	08027e34 	.word	0x08027e34

0800a9ac <Device_Test>:

void Device_Test(){
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800a9b0:	4b34      	ldr	r3, [pc, #208]	@ (800aa84 <Device_Test+0xd8>)
 800a9b2:	795b      	ldrb	r3, [r3, #5]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	4053      	eors	r3, r2
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d027      	beq.n	800aa0e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800a9be:	f000 fb31 	bl	800b024 <MIC_TestMeasurementDone>
 800a9c2:	1e03      	subs	r3, r0, #0
 800a9c4:	d011      	beq.n	800a9ea <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800a9c6:	4b2f      	ldr	r3, [pc, #188]	@ (800aa84 <Device_Test+0xd8>)
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	715a      	strb	r2, [r3, #5]
      Sensor.MIC_measurementEnabled = true;
 800a9cc:	4b2e      	ldr	r3, [pc, #184]	@ (800aa88 <Device_Test+0xdc>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800a9d2:	f004 fd27 	bl	800f424 <Calculate_LED_ON>
 800a9d6:	0003      	movs	r3, r0
 800a9d8:	0019      	movs	r1, r3
 800a9da:	23fa      	movs	r3, #250	@ 0xfa
 800a9dc:	011a      	lsls	r2, r3, #4
 800a9de:	23fa      	movs	r3, #250	@ 0xfa
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	f004 fd66 	bl	800f4b4 <SetStatusLED>
 800a9e8:	e011      	b.n	800aa0e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800a9ea:	f003 fe71 	bl	800e6d0 <micSettlingComplete>
 800a9ee:	1e03      	subs	r3, r0, #0
 800a9f0:	d00d      	beq.n	800aa0e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800a9f2:	4b25      	ldr	r3, [pc, #148]	@ (800aa88 <Device_Test+0xdc>)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800a9f8:	f004 fd14 	bl	800f424 <Calculate_LED_ON>
 800a9fc:	0003      	movs	r3, r0
 800a9fe:	0018      	movs	r0, r3
 800aa00:	23fa      	movs	r3, #250	@ 0xfa
 800aa02:	011a      	lsls	r2, r3, #4
 800aa04:	23fa      	movs	r3, #250	@ 0xfa
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	0019      	movs	r1, r3
 800aa0a:	f004 fd53 	bl	800f4b4 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800aa0e:	4b1d      	ldr	r3, [pc, #116]	@ (800aa84 <Device_Test+0xd8>)
 800aa10:	799b      	ldrb	r3, [r3, #6]
 800aa12:	2201      	movs	r2, #1
 800aa14:	4053      	eors	r3, r2
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800aa1c:	f7fa fda4 	bl	8005568 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800aa20:	4b18      	ldr	r3, [pc, #96]	@ (800aa84 <Device_Test+0xd8>)
 800aa22:	799b      	ldrb	r3, [r3, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d003      	beq.n	800aa30 <Device_Test+0x84>
 800aa28:	4b16      	ldr	r3, [pc, #88]	@ (800aa84 <Device_Test+0xd8>)
 800aa2a:	795b      	ldrb	r3, [r3, #5]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d106      	bne.n	800aa3e <Device_Test+0x92>
 800aa30:	4b16      	ldr	r3, [pc, #88]	@ (800aa8c <Device_Test+0xe0>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	0018      	movs	r0, r3
 800aa36:	f005 ff4f 	bl	80108d8 <TimestampIsReached>
 800aa3a:	1e03      	subs	r3, r0, #0
 800aa3c:	d01f      	beq.n	800aa7e <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800aa3e:	4b11      	ldr	r3, [pc, #68]	@ (800aa84 <Device_Test+0xd8>)
 800aa40:	799b      	ldrb	r3, [r3, #6]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <Device_Test+0x9e>
 800aa46:	4b12      	ldr	r3, [pc, #72]	@ (800aa90 <Device_Test+0xe4>)
 800aa48:	e000      	b.n	800aa4c <Device_Test+0xa0>
 800aa4a:	4b12      	ldr	r3, [pc, #72]	@ (800aa94 <Device_Test+0xe8>)
 800aa4c:	4a12      	ldr	r2, [pc, #72]	@ (800aa98 <Device_Test+0xec>)
 800aa4e:	4913      	ldr	r1, [pc, #76]	@ (800aa9c <Device_Test+0xf0>)
 800aa50:	2002      	movs	r0, #2
 800aa52:	f005 ff97 	bl	8010984 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800aa56:	4b0b      	ldr	r3, [pc, #44]	@ (800aa84 <Device_Test+0xd8>)
 800aa58:	795b      	ldrb	r3, [r3, #5]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <Device_Test+0xb6>
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa90 <Device_Test+0xe4>)
 800aa60:	e000      	b.n	800aa64 <Device_Test+0xb8>
 800aa62:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <Device_Test+0xe8>)
 800aa64:	4a0e      	ldr	r2, [pc, #56]	@ (800aaa0 <Device_Test+0xf4>)
 800aa66:	490d      	ldr	r1, [pc, #52]	@ (800aa9c <Device_Test+0xf0>)
 800aa68:	2002      	movs	r0, #2
 800aa6a:	f005 ff8b 	bl	8010984 <CreateLine>
    Info("Test completed");
 800aa6e:	4a0d      	ldr	r2, [pc, #52]	@ (800aaa4 <Device_Test+0xf8>)
 800aa70:	4b0a      	ldr	r3, [pc, #40]	@ (800aa9c <Device_Test+0xf0>)
 800aa72:	0019      	movs	r1, r3
 800aa74:	2002      	movs	r0, #2
 800aa76:	f005 ff85 	bl	8010984 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800aa7a:	f7ff f96b 	bl	8009d54 <SetTestDone>
  }
}
 800aa7e:	46c0      	nop			@ (mov r8, r8)
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20000db0 	.word	0x20000db0
 800aa88:	20000da8 	.word	0x20000da8
 800aa8c:	20000da0 	.word	0x20000da0
 800aa90:	08027e58 	.word	0x08027e58
 800aa94:	08027e60 	.word	0x08027e60
 800aa98:	08027e68 	.word	0x08027e68
 800aa9c:	08027c94 	.word	0x08027c94
 800aaa0:	08027e7c 	.word	0x08027e7c
 800aaa4:	08027e90 	.word	0x08027e90

0800aaa8 <AllDevicesReady>:

bool AllDevicesReady() {
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800aaac:	4b31      	ldr	r3, [pc, #196]	@ (800ab74 <AllDevicesReady+0xcc>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	0018      	movs	r0, r3
 800aab2:	f005 ff11 	bl	80108d8 <TimestampIsReached>
 800aab6:	1e03      	subs	r3, r0, #0
 800aab8:	d058      	beq.n	800ab6c <AllDevicesReady+0xc4>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800aaba:	4b2f      	ldr	r3, [pc, #188]	@ (800ab78 <AllDevicesReady+0xd0>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b06      	cmp	r3, #6
 800aac0:	d102      	bne.n	800aac8 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 800aac2:	4b2e      	ldr	r3, [pc, #184]	@ (800ab7c <AllDevicesReady+0xd4>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]
    }
    if (AHTstate == AHT_STATE_WAIT) {
 800aac8:	4b2d      	ldr	r3, [pc, #180]	@ (800ab80 <AllDevicesReady+0xd8>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b08      	cmp	r3, #8
 800aace:	d102      	bne.n	800aad6 <AllDevicesReady+0x2e>
      Sensor.AHT20_measurementEnabled = false;
 800aad0:	4b2a      	ldr	r3, [pc, #168]	@ (800ab7c <AllDevicesReady+0xd4>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	711a      	strb	r2, [r3, #4]
    }
    if (BMPstate == BMP_STATE_WAIT) {
 800aad6:	4b2b      	ldr	r3, [pc, #172]	@ (800ab84 <AllDevicesReady+0xdc>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b08      	cmp	r3, #8
 800aadc:	d102      	bne.n	800aae4 <AllDevicesReady+0x3c>
      Sensor.BMP280_measurementEnabled = false;
 800aade:	4b27      	ldr	r3, [pc, #156]	@ (800ab7c <AllDevicesReady+0xd4>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	715a      	strb	r2, [r3, #5]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800aae4:	4b28      	ldr	r3, [pc, #160]	@ (800ab88 <AllDevicesReady+0xe0>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b07      	cmp	r3, #7
 800aaea:	d006      	beq.n	800aafa <AllDevicesReady+0x52>
 800aaec:	4b27      	ldr	r3, [pc, #156]	@ (800ab8c <AllDevicesReady+0xe4>)
 800aaee:	79db      	ldrb	r3, [r3, #7]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	4053      	eors	r3, r2
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <AllDevicesReady+0x58>
      Sensor.VOC_measurementEnabled = false;
 800aafa:	4b20      	ldr	r3, [pc, #128]	@ (800ab7c <AllDevicesReady+0xd4>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800ab00:	4b23      	ldr	r3, [pc, #140]	@ (800ab90 <AllDevicesReady+0xe8>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d102      	bne.n	800ab0e <AllDevicesReady+0x66>
      Sensor.PM_measurementEnabled = false;
 800ab08:	4b1c      	ldr	r3, [pc, #112]	@ (800ab7c <AllDevicesReady+0xd4>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800ab0e:	4b21      	ldr	r3, [pc, #132]	@ (800ab94 <AllDevicesReady+0xec>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d102      	bne.n	800ab1c <AllDevicesReady+0x74>
      Sensor.MIC_measurementEnabled = false;
 800ab16:	4b19      	ldr	r3, [pc, #100]	@ (800ab7c <AllDevicesReady+0xd4>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800ab1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ab98 <AllDevicesReady+0xf0>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b09      	cmp	r3, #9
 800ab22:	d123      	bne.n	800ab6c <AllDevicesReady+0xc4>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800ab24:	4b15      	ldr	r3, [pc, #84]	@ (800ab7c <AllDevicesReady+0xd4>)
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	4053      	eors	r3, r2
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d016      	beq.n	800ab60 <AllDevicesReady+0xb8>
 800ab32:	4b12      	ldr	r3, [pc, #72]	@ (800ab7c <AllDevicesReady+0xd4>)
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2201      	movs	r2, #1
 800ab38:	4053      	eors	r3, r2
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00f      	beq.n	800ab60 <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800ab40:	4b0e      	ldr	r3, [pc, #56]	@ (800ab7c <AllDevicesReady+0xd4>)
 800ab42:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800ab44:	2201      	movs	r2, #1
 800ab46:	4053      	eors	r3, r2
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d008      	beq.n	800ab60 <AllDevicesReady+0xb8>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 800ab4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab7c <AllDevicesReady+0xd4>)
 800ab50:	78db      	ldrb	r3, [r3, #3]
 800ab52:	2201      	movs	r2, #1
 800ab54:	4053      	eors	r3, r2
 800ab56:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <AllDevicesReady+0xb8>
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e000      	b.n	800ab62 <AllDevicesReady+0xba>
 800ab60:	2300      	movs	r3, #0
 800ab62:	1c1a      	adds	r2, r3, #0
 800ab64:	2301      	movs	r3, #1
 800ab66:	4013      	ands	r3, r2
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	e000      	b.n	800ab6e <AllDevicesReady+0xc6>
    }
  }
  return false;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	0018      	movs	r0, r3
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}
 800ab74:	20000da0 	.word	0x20000da0
 800ab78:	20000dba 	.word	0x20000dba
 800ab7c:	20000da8 	.word	0x20000da8
 800ab80:	20000dbb 	.word	0x20000dbb
 800ab84:	20000dbc 	.word	0x20000dbc
 800ab88:	20000db9 	.word	0x20000db9
 800ab8c:	20000db0 	.word	0x20000db0
 800ab90:	200000a1 	.word	0x200000a1
 800ab94:	20000d8c 	.word	0x20000d8c
 800ab98:	20000d8d 	.word	0x20000d8d

0800ab9c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800aba0:	4b18      	ldr	r3, [pc, #96]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800aba8:	4b17      	ldr	r3, [pc, #92]	@ (800ac08 <EnabledConnectedDevices+0x6c>)
 800abaa:	2201      	movs	r2, #1
 800abac:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800abae:	4b15      	ldr	r3, [pc, #84]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800abb0:	789b      	ldrb	r3, [r3, #2]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <EnabledConnectedDevices+0x20>
    Sensor.AHT20_measurementEnabled = true;
 800abb6:	4b14      	ldr	r3, [pc, #80]	@ (800ac08 <EnabledConnectedDevices+0x6c>)
 800abb8:	2201      	movs	r2, #1
 800abba:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800abbc:	4b11      	ldr	r3, [pc, #68]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800abbe:	78db      	ldrb	r3, [r3, #3]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <EnabledConnectedDevices+0x2e>
    Sensor.BMP280_measurementEnabled = true;
 800abc4:	4b10      	ldr	r3, [pc, #64]	@ (800ac08 <EnabledConnectedDevices+0x6c>)
 800abc6:	2201      	movs	r2, #1
 800abc8:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800abca:	4b0e      	ldr	r3, [pc, #56]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800abcc:	785b      	ldrb	r3, [r3, #1]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d006      	beq.n	800abe0 <EnabledConnectedDevices+0x44>
 800abd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800abd4:	79db      	ldrb	r3, [r3, #7]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <EnabledConnectedDevices+0x44>
    Sensor.VOC_measurementEnabled = true;
 800abda:	4b0b      	ldr	r3, [pc, #44]	@ (800ac08 <EnabledConnectedDevices+0x6c>)
 800abdc:	2201      	movs	r2, #1
 800abde:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800abe0:	4b08      	ldr	r3, [pc, #32]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800abe2:	791b      	ldrb	r3, [r3, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <EnabledConnectedDevices+0x52>
    Sensor.PM_measurementEnabled = true;
 800abe8:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <EnabledConnectedDevices+0x6c>)
 800abea:	2201      	movs	r2, #1
 800abec:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800abee:	4b05      	ldr	r3, [pc, #20]	@ (800ac04 <EnabledConnectedDevices+0x68>)
 800abf0:	795b      	ldrb	r3, [r3, #5]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <EnabledConnectedDevices+0x60>
    Sensor.MIC_measurementEnabled = true;
 800abf6:	4b04      	ldr	r3, [pc, #16]	@ (800ac08 <EnabledConnectedDevices+0x6c>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	70da      	strb	r2, [r3, #3]
  }
}
 800abfc:	46c0      	nop			@ (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	46c0      	nop			@ (mov r8, r8)
 800ac04:	20000db0 	.word	0x20000db0
 800ac08:	20000da8 	.word	0x20000da8

0800ac0c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800ac10:	4a0d      	ldr	r2, [pc, #52]	@ (800ac48 <DisableConnectedDevices+0x3c>)
 800ac12:	4b0e      	ldr	r3, [pc, #56]	@ (800ac4c <DisableConnectedDevices+0x40>)
 800ac14:	0019      	movs	r1, r3
 800ac16:	2003      	movs	r0, #3
 800ac18:	f005 feb4 	bl	8010984 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800ac1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac50 <DisableConnectedDevices+0x44>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800ac22:	4b0b      	ldr	r3, [pc, #44]	@ (800ac50 <DisableConnectedDevices+0x44>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	705a      	strb	r2, [r3, #1]
  Sensor.AHT20_measurementEnabled = false;
 800ac28:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <DisableConnectedDevices+0x44>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	711a      	strb	r2, [r3, #4]
  Sensor.BMP280_measurementEnabled = false;
 800ac2e:	4b08      	ldr	r3, [pc, #32]	@ (800ac50 <DisableConnectedDevices+0x44>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	715a      	strb	r2, [r3, #5]
  Sensor.PM_measurementEnabled = false;
 800ac34:	4b06      	ldr	r3, [pc, #24]	@ (800ac50 <DisableConnectedDevices+0x44>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800ac3a:	4b05      	ldr	r3, [pc, #20]	@ (800ac50 <DisableConnectedDevices+0x44>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	70da      	strb	r2, [r3, #3]
}
 800ac40:	46c0      	nop			@ (mov r8, r8)
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	46c0      	nop			@ (mov r8, r8)
 800ac48:	08027ea0 	.word	0x08027ea0
 800ac4c:	08027b0c 	.word	0x08027b0c
 800ac50:	20000da8 	.word	0x20000da8

0800ac54 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	0002      	movs	r2, r0
 800ac5c:	1dfb      	adds	r3, r7, #7
 800ac5e:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800ac60:	4b03      	ldr	r3, [pc, #12]	@ (800ac70 <setSensorLock+0x1c>)
 800ac62:	1dfa      	adds	r2, r7, #7
 800ac64:	7812      	ldrb	r2, [r2, #0]
 800ac66:	701a      	strb	r2, [r3, #0]
}
 800ac68:	46c0      	nop			@ (mov r8, r8)
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	b002      	add	sp, #8
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000db8 	.word	0x20000db8

0800ac74 <getSensorLock>:

uint8_t getSensorLock() {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800ac78:	4b02      	ldr	r3, [pc, #8]	@ (800ac84 <getSensorLock+0x10>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
}
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	46c0      	nop			@ (mov r8, r8)
 800ac84:	20000db8 	.word	0x20000db8

0800ac88 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800ac8c:	4b15      	ldr	r3, [pc, #84]	@ (800ace4 <UpkeepI2Csensors+0x5c>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800ac94:	f006 f99a 	bl	8010fcc <HIDS_Upkeep>
 800ac98:	0003      	movs	r3, r0
 800ac9a:	001a      	movs	r2, r3
 800ac9c:	4b12      	ldr	r3, [pc, #72]	@ (800ace8 <UpkeepI2Csensors+0x60>)
 800ac9e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800aca0:	4b10      	ldr	r3, [pc, #64]	@ (800ace4 <UpkeepI2Csensors+0x5c>)
 800aca2:	785b      	ldrb	r3, [r3, #1]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d005      	beq.n	800acb4 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800aca8:	f003 fb1e 	bl	800e2e8 <SGP_Upkeep>
 800acac:	0003      	movs	r3, r0
 800acae:	001a      	movs	r2, r3
 800acb0:	4b0e      	ldr	r3, [pc, #56]	@ (800acec <UpkeepI2Csensors+0x64>)
 800acb2:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT20_measurementEnabled) {
 800acb4:	4b0b      	ldr	r3, [pc, #44]	@ (800ace4 <UpkeepI2Csensors+0x5c>)
 800acb6:	791b      	ldrb	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d005      	beq.n	800acc8 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800acbc:	f7fd fbc2 	bl	8008444 <AHT_Upkeep>
 800acc0:	0003      	movs	r3, r0
 800acc2:	001a      	movs	r2, r3
 800acc4:	4b0a      	ldr	r3, [pc, #40]	@ (800acf0 <UpkeepI2Csensors+0x68>)
 800acc6:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP280_measurementEnabled) {
 800acc8:	4b06      	ldr	r3, [pc, #24]	@ (800ace4 <UpkeepI2Csensors+0x5c>)
 800acca:	795b      	ldrb	r3, [r3, #5]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d005      	beq.n	800acdc <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800acd0:	f7fe f97a 	bl	8008fc8 <BMP_Upkeep>
 800acd4:	0003      	movs	r3, r0
 800acd6:	001a      	movs	r2, r3
 800acd8:	4b06      	ldr	r3, [pc, #24]	@ (800acf4 <UpkeepI2Csensors+0x6c>)
 800acda:	701a      	strb	r2, [r3, #0]
  }
}
 800acdc:	46c0      	nop			@ (mov r8, r8)
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	20000da8 	.word	0x20000da8
 800ace8:	20000dba 	.word	0x20000dba
 800acec:	20000db9 	.word	0x20000db9
 800acf0:	20000dbb 	.word	0x20000dbb
 800acf4:	20000dbc 	.word	0x20000dbc

0800acf8 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800acf8:	b580      	push	{r7, lr}
 800acfa:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <ResetdBAmax+0x10>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	601a      	str	r2, [r3, #0]
}
 800ad02:	46c0      	nop			@ (mov r8, r8)
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000e04 	.word	0x20000e04

0800ad0c <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800ad14:	f006 fa82 	bl	801121c <HAL_GetTick>
 800ad18:	0002      	movs	r2, r0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	18d2      	adds	r2, r2, r3
 800ad1e:	4b03      	ldr	r3, [pc, #12]	@ (800ad2c <setMICTimeStamp+0x20>)
 800ad20:	601a      	str	r2, [r3, #0]
}
 800ad22:	46c0      	nop			@ (mov r8, r8)
 800ad24:	46bd      	mov	sp, r7
 800ad26:	b002      	add	sp, #8
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	46c0      	nop			@ (mov r8, r8)
 800ad2c:	20000e0c 	.word	0x20000e0c

0800ad30 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
  counter = 0;
 800ad34:	4b05      	ldr	r3, [pc, #20]	@ (800ad4c <ResetDBACalculator+0x1c>)
 800ad36:	2200      	movs	r2, #0
 800ad38:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800ad3a:	4b05      	ldr	r3, [pc, #20]	@ (800ad50 <ResetDBACalculator+0x20>)
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800ad40:	4b04      	ldr	r3, [pc, #16]	@ (800ad54 <ResetDBACalculator+0x24>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	701a      	strb	r2, [r3, #0]
}
 800ad46:	46c0      	nop			@ (mov r8, r8)
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20000e08 	.word	0x20000e08
 800ad50:	200000a0 	.word	0x200000a0
 800ad54:	20000e09 	.word	0x20000e09

0800ad58 <MIC_Print>:

void MIC_Print(void) {
 800ad58:	b5b0      	push	{r4, r5, r7, lr}
 800ad5a:	b08a      	sub	sp, #40	@ 0x28
 800ad5c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800ad5e:	4b9f      	ldr	r3, [pc, #636]	@ (800afdc <MIC_Print+0x284>)
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	4b9f      	ldr	r3, [pc, #636]	@ (800afe0 <MIC_Print+0x288>)
 800ad64:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800ad66:	4b9f      	ldr	r3, [pc, #636]	@ (800afe4 <MIC_Print+0x28c>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	001a      	movs	r2, r3
 800ad6c:	4b9c      	ldr	r3, [pc, #624]	@ (800afe0 <MIC_Print+0x288>)
 800ad6e:	6819      	ldr	r1, [r3, #0]
 800ad70:	4b9d      	ldr	r3, [pc, #628]	@ (800afe8 <MIC_Print+0x290>)
 800ad72:	0092      	lsls	r2, r2, #2
 800ad74:	50d1      	str	r1, [r2, r3]
  counter++;
 800ad76:	4b9b      	ldr	r3, [pc, #620]	@ (800afe4 <MIC_Print+0x28c>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	4b99      	ldr	r3, [pc, #612]	@ (800afe4 <MIC_Print+0x28c>)
 800ad80:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800ad82:	4b98      	ldr	r3, [pc, #608]	@ (800afe4 <MIC_Print+0x28c>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b09      	cmp	r3, #9
 800ad88:	d80b      	bhi.n	800ada2 <MIC_Print+0x4a>
 800ad8a:	4b98      	ldr	r3, [pc, #608]	@ (800afec <MIC_Print+0x294>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4053      	eors	r3, r2
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <MIC_Print+0x4a>
    denominator = counter;
 800ad98:	4b92      	ldr	r3, [pc, #584]	@ (800afe4 <MIC_Print+0x28c>)
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	4b94      	ldr	r3, [pc, #592]	@ (800aff0 <MIC_Print+0x298>)
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	e005      	b.n	800adae <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800ada2:	4b93      	ldr	r3, [pc, #588]	@ (800aff0 <MIC_Print+0x298>)
 800ada4:	220a      	movs	r2, #10
 800ada6:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800ada8:	4b90      	ldr	r3, [pc, #576]	@ (800afec <MIC_Print+0x294>)
 800adaa:	2201      	movs	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800adae:	4b91      	ldr	r3, [pc, #580]	@ (800aff4 <MIC_Print+0x29c>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800adb4:	230f      	movs	r3, #15
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e042      	b.n	800ae44 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800adbe:	240f      	movs	r4, #15
 800adc0:	193b      	adds	r3, r7, r4
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	4b88      	ldr	r3, [pc, #544]	@ (800afe8 <MIC_Print+0x290>)
 800adc6:	0092      	lsls	r2, r2, #2
 800adc8:	58d2      	ldr	r2, [r2, r3]
 800adca:	4b8a      	ldr	r3, [pc, #552]	@ (800aff4 <MIC_Print+0x29c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	1c19      	adds	r1, r3, #0
 800add0:	1c10      	adds	r0, r2, #0
 800add2:	f7f5 fd75 	bl	80008c0 <__aeabi_fadd>
 800add6:	1c03      	adds	r3, r0, #0
 800add8:	1c1a      	adds	r2, r3, #0
 800adda:	4b86      	ldr	r3, [pc, #536]	@ (800aff4 <MIC_Print+0x29c>)
 800addc:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800adde:	193b      	adds	r3, r7, r4
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	4b81      	ldr	r3, [pc, #516]	@ (800afe8 <MIC_Print+0x290>)
 800ade4:	0092      	lsls	r2, r2, #2
 800ade6:	58d2      	ldr	r2, [r2, r3]
 800ade8:	4b83      	ldr	r3, [pc, #524]	@ (800aff8 <MIC_Print+0x2a0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	1c19      	adds	r1, r3, #0
 800adee:	1c10      	adds	r0, r2, #0
 800adf0:	f7f5 fbb2 	bl	8000558 <__aeabi_fcmpgt>
 800adf4:	1e03      	subs	r3, r0, #0
 800adf6:	d006      	beq.n	800ae06 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800adf8:	193b      	adds	r3, r7, r4
 800adfa:	781a      	ldrb	r2, [r3, #0]
 800adfc:	4b7a      	ldr	r3, [pc, #488]	@ (800afe8 <MIC_Print+0x290>)
 800adfe:	0092      	lsls	r2, r2, #2
 800ae00:	58d2      	ldr	r2, [r2, r3]
 800ae02:	4b7d      	ldr	r3, [pc, #500]	@ (800aff8 <MIC_Print+0x2a0>)
 800ae04:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800ae06:	4b7b      	ldr	r3, [pc, #492]	@ (800aff4 <MIC_Print+0x29c>)
 800ae08:	681c      	ldr	r4, [r3, #0]
 800ae0a:	4b79      	ldr	r3, [pc, #484]	@ (800aff0 <MIC_Print+0x298>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	0018      	movs	r0, r3
 800ae10:	f7f6 fc2a 	bl	8001668 <__aeabi_ui2f>
 800ae14:	1c03      	adds	r3, r0, #0
 800ae16:	1c19      	adds	r1, r3, #0
 800ae18:	1c20      	adds	r0, r4, #0
 800ae1a:	f7f5 fedb 	bl	8000bd4 <__aeabi_fdiv>
 800ae1e:	1c03      	adds	r3, r0, #0
 800ae20:	1c1a      	adds	r2, r3, #0
 800ae22:	4b76      	ldr	r3, [pc, #472]	@ (800affc <MIC_Print+0x2a4>)
 800ae24:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800ae26:	4b6e      	ldr	r3, [pc, #440]	@ (800afe0 <MIC_Print+0x288>)
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	4b73      	ldr	r3, [pc, #460]	@ (800aff8 <MIC_Print+0x2a0>)
 800ae2c:	6819      	ldr	r1, [r3, #0]
 800ae2e:	4b73      	ldr	r3, [pc, #460]	@ (800affc <MIC_Print+0x2a4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	1c1a      	adds	r2, r3, #0
 800ae34:	f7f8 fcfe 	bl	8003834 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800ae38:	210f      	movs	r1, #15
 800ae3a:	187b      	adds	r3, r7, r1
 800ae3c:	781a      	ldrb	r2, [r3, #0]
 800ae3e:	187b      	adds	r3, r7, r1
 800ae40:	3201      	adds	r2, #1
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	4b6a      	ldr	r3, [pc, #424]	@ (800aff0 <MIC_Print+0x298>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	220f      	movs	r2, #15
 800ae4a:	18ba      	adds	r2, r7, r2
 800ae4c:	7812      	ldrb	r2, [r2, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d3b5      	bcc.n	800adbe <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800ae52:	4b63      	ldr	r3, [pc, #396]	@ (800afe0 <MIC_Print+0x288>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	1c18      	adds	r0, r3, #0
 800ae58:	f7f8 fb04 	bl	8003464 <__aeabi_f2d>
 800ae5c:	6038      	str	r0, [r7, #0]
 800ae5e:	6079      	str	r1, [r7, #4]
 800ae60:	4b65      	ldr	r3, [pc, #404]	@ (800aff8 <MIC_Print+0x2a0>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	1c18      	adds	r0, r3, #0
 800ae66:	f7f8 fafd 	bl	8003464 <__aeabi_f2d>
 800ae6a:	0004      	movs	r4, r0
 800ae6c:	000d      	movs	r5, r1
 800ae6e:	4b63      	ldr	r3, [pc, #396]	@ (800affc <MIC_Print+0x2a4>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1c18      	adds	r0, r3, #0
 800ae74:	f7f8 faf6 	bl	8003464 <__aeabi_f2d>
 800ae78:	0002      	movs	r2, r0
 800ae7a:	000b      	movs	r3, r1
 800ae7c:	4960      	ldr	r1, [pc, #384]	@ (800b000 <MIC_Print+0x2a8>)
 800ae7e:	9204      	str	r2, [sp, #16]
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	9402      	str	r4, [sp, #8]
 800ae84:	9503      	str	r5, [sp, #12]
 800ae86:	4b5f      	ldr	r3, [pc, #380]	@ (800b004 <MIC_Print+0x2ac>)
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	0008      	movs	r0, r1
 800ae90:	f017 fd00 	bl	8022894 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800ae94:	4b53      	ldr	r3, [pc, #332]	@ (800afe4 <MIC_Print+0x28c>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b0a      	cmp	r3, #10
 800ae9a:	d902      	bls.n	800aea2 <MIC_Print+0x14a>
    counter = 0;
 800ae9c:	4b51      	ldr	r3, [pc, #324]	@ (800afe4 <MIC_Print+0x28c>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800aea2:	4b4f      	ldr	r3, [pc, #316]	@ (800afe0 <MIC_Print+0x288>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4958      	ldr	r1, [pc, #352]	@ (800b008 <MIC_Print+0x2b0>)
 800aea8:	1c18      	adds	r0, r3, #0
 800aeaa:	f7f5 fb5f 	bl	800056c <__aeabi_fcmpge>
 800aeae:	1e03      	subs	r3, r0, #0
 800aeb0:	d004      	beq.n	800aebc <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	f004 fb30 	bl	800f51c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800aebc:	4b48      	ldr	r3, [pc, #288]	@ (800afe0 <MIC_Print+0x288>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4952      	ldr	r1, [pc, #328]	@ (800b00c <MIC_Print+0x2b4>)
 800aec2:	1c18      	adds	r0, r3, #0
 800aec4:	f7f5 fb52 	bl	800056c <__aeabi_fcmpge>
 800aec8:	1e03      	subs	r3, r0, #0
 800aeca:	d00c      	beq.n	800aee6 <MIC_Print+0x18e>
 800aecc:	4b44      	ldr	r3, [pc, #272]	@ (800afe0 <MIC_Print+0x288>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	494d      	ldr	r1, [pc, #308]	@ (800b008 <MIC_Print+0x2b0>)
 800aed2:	1c18      	adds	r0, r3, #0
 800aed4:	f7f5 fb2c 	bl	8000530 <__aeabi_fcmplt>
 800aed8:	1e03      	subs	r3, r0, #0
 800aeda:	d004      	beq.n	800aee6 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800aedc:	2200      	movs	r2, #0
 800aede:	2100      	movs	r1, #0
 800aee0:	2001      	movs	r0, #1
 800aee2:	f004 fb1b 	bl	800f51c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800aee6:	4b3e      	ldr	r3, [pc, #248]	@ (800afe0 <MIC_Print+0x288>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4949      	ldr	r1, [pc, #292]	@ (800b010 <MIC_Print+0x2b8>)
 800aeec:	1c18      	adds	r0, r3, #0
 800aeee:	f7f5 fb3d 	bl	800056c <__aeabi_fcmpge>
 800aef2:	1e03      	subs	r3, r0, #0
 800aef4:	d00c      	beq.n	800af10 <MIC_Print+0x1b8>
 800aef6:	4b3a      	ldr	r3, [pc, #232]	@ (800afe0 <MIC_Print+0x288>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4944      	ldr	r1, [pc, #272]	@ (800b00c <MIC_Print+0x2b4>)
 800aefc:	1c18      	adds	r0, r3, #0
 800aefe:	f7f5 fb17 	bl	8000530 <__aeabi_fcmplt>
 800af02:	1e03      	subs	r3, r0, #0
 800af04:	d004      	beq.n	800af10 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800af06:	2200      	movs	r2, #0
 800af08:	2101      	movs	r1, #1
 800af0a:	2001      	movs	r0, #1
 800af0c:	f004 fb06 	bl	800f51c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800af10:	4b33      	ldr	r3, [pc, #204]	@ (800afe0 <MIC_Print+0x288>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	493f      	ldr	r1, [pc, #252]	@ (800b014 <MIC_Print+0x2bc>)
 800af16:	1c18      	adds	r0, r3, #0
 800af18:	f7f5 fb28 	bl	800056c <__aeabi_fcmpge>
 800af1c:	1e03      	subs	r3, r0, #0
 800af1e:	d00c      	beq.n	800af3a <MIC_Print+0x1e2>
 800af20:	4b2f      	ldr	r3, [pc, #188]	@ (800afe0 <MIC_Print+0x288>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	493a      	ldr	r1, [pc, #232]	@ (800b010 <MIC_Print+0x2b8>)
 800af26:	1c18      	adds	r0, r3, #0
 800af28:	f7f5 fb02 	bl	8000530 <__aeabi_fcmplt>
 800af2c:	1e03      	subs	r3, r0, #0
 800af2e:	d004      	beq.n	800af3a <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800af30:	2200      	movs	r2, #0
 800af32:	2101      	movs	r1, #1
 800af34:	2000      	movs	r0, #0
 800af36:	f004 faf1 	bl	800f51c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800af3a:	4b29      	ldr	r3, [pc, #164]	@ (800afe0 <MIC_Print+0x288>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4936      	ldr	r1, [pc, #216]	@ (800b018 <MIC_Print+0x2c0>)
 800af40:	1c18      	adds	r0, r3, #0
 800af42:	f7f5 fb13 	bl	800056c <__aeabi_fcmpge>
 800af46:	1e03      	subs	r3, r0, #0
 800af48:	d00c      	beq.n	800af64 <MIC_Print+0x20c>
 800af4a:	4b25      	ldr	r3, [pc, #148]	@ (800afe0 <MIC_Print+0x288>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4931      	ldr	r1, [pc, #196]	@ (800b014 <MIC_Print+0x2bc>)
 800af50:	1c18      	adds	r0, r3, #0
 800af52:	f7f5 faed 	bl	8000530 <__aeabi_fcmplt>
 800af56:	1e03      	subs	r3, r0, #0
 800af58:	d004      	beq.n	800af64 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800af5a:	2201      	movs	r2, #1
 800af5c:	2101      	movs	r1, #1
 800af5e:	2000      	movs	r0, #0
 800af60:	f004 fadc 	bl	800f51c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800af64:	4b1e      	ldr	r3, [pc, #120]	@ (800afe0 <MIC_Print+0x288>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	492c      	ldr	r1, [pc, #176]	@ (800b01c <MIC_Print+0x2c4>)
 800af6a:	1c18      	adds	r0, r3, #0
 800af6c:	f7f5 fafe 	bl	800056c <__aeabi_fcmpge>
 800af70:	1e03      	subs	r3, r0, #0
 800af72:	d00c      	beq.n	800af8e <MIC_Print+0x236>
 800af74:	4b1a      	ldr	r3, [pc, #104]	@ (800afe0 <MIC_Print+0x288>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4927      	ldr	r1, [pc, #156]	@ (800b018 <MIC_Print+0x2c0>)
 800af7a:	1c18      	adds	r0, r3, #0
 800af7c:	f7f5 fad8 	bl	8000530 <__aeabi_fcmplt>
 800af80:	1e03      	subs	r3, r0, #0
 800af82:	d004      	beq.n	800af8e <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800af84:	2201      	movs	r2, #1
 800af86:	2100      	movs	r1, #0
 800af88:	2000      	movs	r0, #0
 800af8a:	f004 fac7 	bl	800f51c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800af8e:	4b14      	ldr	r3, [pc, #80]	@ (800afe0 <MIC_Print+0x288>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4923      	ldr	r1, [pc, #140]	@ (800b020 <MIC_Print+0x2c8>)
 800af94:	1c18      	adds	r0, r3, #0
 800af96:	f7f5 fae9 	bl	800056c <__aeabi_fcmpge>
 800af9a:	1e03      	subs	r3, r0, #0
 800af9c:	d00c      	beq.n	800afb8 <MIC_Print+0x260>
 800af9e:	4b10      	ldr	r3, [pc, #64]	@ (800afe0 <MIC_Print+0x288>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	491e      	ldr	r1, [pc, #120]	@ (800b01c <MIC_Print+0x2c4>)
 800afa4:	1c18      	adds	r0, r3, #0
 800afa6:	f7f5 fac3 	bl	8000530 <__aeabi_fcmplt>
 800afaa:	1e03      	subs	r3, r0, #0
 800afac:	d004      	beq.n	800afb8 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800afae:	2201      	movs	r2, #1
 800afb0:	2100      	movs	r1, #0
 800afb2:	2001      	movs	r0, #1
 800afb4:	f004 fab2 	bl	800f51c <SetDBLED>
  }
  if(dBA < 35){//off
 800afb8:	4b09      	ldr	r3, [pc, #36]	@ (800afe0 <MIC_Print+0x288>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4918      	ldr	r1, [pc, #96]	@ (800b020 <MIC_Print+0x2c8>)
 800afbe:	1c18      	adds	r0, r3, #0
 800afc0:	f7f5 fab6 	bl	8000530 <__aeabi_fcmplt>
 800afc4:	1e03      	subs	r3, r0, #0
 800afc6:	d100      	bne.n	800afca <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800afc8:	e004      	b.n	800afd4 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	2000      	movs	r0, #0
 800afd0:	f004 faa4 	bl	800f51c <SetDBLED>
}
 800afd4:	46c0      	nop			@ (mov r8, r8)
 800afd6:	46bd      	mov	sp, r7
 800afd8:	b004      	add	sp, #16
 800afda:	bdb0      	pop	{r4, r5, r7, pc}
 800afdc:	20000e00 	.word	0x20000e00
 800afe0:	20000dcc 	.word	0x20000dcc
 800afe4:	20000e08 	.word	0x20000e08
 800afe8:	20000dd0 	.word	0x20000dd0
 800afec:	20000e09 	.word	0x20000e09
 800aff0:	200000a0 	.word	0x200000a0
 800aff4:	20000dfc 	.word	0x20000dfc
 800aff8:	20000e04 	.word	0x20000e04
 800affc:	20000df8 	.word	0x20000df8
 800b000:	08027eb4 	.word	0x08027eb4
 800b004:	20000dc0 	.word	0x20000dc0
 800b008:	42b40000 	.word	0x42b40000
 800b00c:	42a00000 	.word	0x42a00000
 800b010:	428c0000 	.word	0x428c0000
 800b014:	42700000 	.word	0x42700000
 800b018:	42480000 	.word	0x42480000
 800b01c:	42200000 	.word	0x42200000
 800b020:	420c0000 	.word	0x420c0000

0800b024 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800b02a:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <MIC_TestMeasurementDone+0x4c>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4a10      	ldr	r2, [pc, #64]	@ (800b074 <MIC_TestMeasurementDone+0x50>)
 800b032:	4911      	ldr	r1, [pc, #68]	@ (800b078 <MIC_TestMeasurementDone+0x54>)
 800b034:	2002      	movs	r0, #2
 800b036:	f005 fca5 	bl	8010984 <CreateLine>
  if(DataReady) {
 800b03a:	4b0d      	ldr	r3, [pc, #52]	@ (800b070 <MIC_TestMeasurementDone+0x4c>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d010      	beq.n	800b066 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800b044:	1dfb      	adds	r3, r7, #7
 800b046:	4a0d      	ldr	r2, [pc, #52]	@ (800b07c <MIC_TestMeasurementDone+0x58>)
 800b048:	7812      	ldrb	r2, [r2, #0]
 800b04a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800b04c:	4b0b      	ldr	r3, [pc, #44]	@ (800b07c <MIC_TestMeasurementDone+0x58>)
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	4a0b      	ldr	r2, [pc, #44]	@ (800b080 <MIC_TestMeasurementDone+0x5c>)
 800b054:	4908      	ldr	r1, [pc, #32]	@ (800b078 <MIC_TestMeasurementDone+0x54>)
 800b056:	2002      	movs	r0, #2
 800b058:	f005 fc94 	bl	8010984 <CreateLine>
    ResetMICIndicator();
 800b05c:	f004 fb4c 	bl	800f6f8 <ResetMICIndicator>
    return Check;
 800b060:	1dfb      	adds	r3, r7, #7
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	e000      	b.n	800b068 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800b066:	2300      	movs	r3, #0
}
 800b068:	0018      	movs	r0, r3
 800b06a:	46bd      	mov	sp, r7
 800b06c:	b002      	add	sp, #8
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20000f3d 	.word	0x20000f3d
 800b074:	08027efc 	.word	0x08027efc
 800b078:	08027f28 	.word	0x08027f28
 800b07c:	20000f3e 	.word	0x20000f3e
 800b080:	08027f2c 	.word	0x08027f2c

0800b084 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800b08a:	4b78      	ldr	r3, [pc, #480]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d100      	bne.n	800b094 <Mic_Upkeep+0x10>
 800b092:	e0b8      	b.n	800b206 <Mic_Upkeep+0x182>
 800b094:	dd00      	ble.n	800b098 <Mic_Upkeep+0x14>
 800b096:	e0d3      	b.n	800b240 <Mic_Upkeep+0x1bc>
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d037      	beq.n	800b10c <Mic_Upkeep+0x88>
 800b09c:	dd00      	ble.n	800b0a0 <Mic_Upkeep+0x1c>
 800b09e:	e0cf      	b.n	800b240 <Mic_Upkeep+0x1bc>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <Mic_Upkeep+0x26>
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d014      	beq.n	800b0d2 <Mic_Upkeep+0x4e>
 800b0a8:	e0ca      	b.n	800b240 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	f003 fb34 	bl	800e718 <enableMicrophone>
 800b0b0:	0003      	movs	r3, r0
 800b0b2:	001a      	movs	r2, r3
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	4053      	eors	r3, r2
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d005      	beq.n	800b0ca <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800b0be:	4a6c      	ldr	r2, [pc, #432]	@ (800b270 <Mic_Upkeep+0x1ec>)
 800b0c0:	4b6c      	ldr	r3, [pc, #432]	@ (800b274 <Mic_Upkeep+0x1f0>)
 800b0c2:	217f      	movs	r1, #127	@ 0x7f
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	f005 fd15 	bl	8010af4 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800b0ca:	4b68      	ldr	r3, [pc, #416]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	701a      	strb	r2, [r3, #0]
    break;
 800b0d0:	e0c5      	b.n	800b25e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800b0d2:	f003 fafd 	bl	800e6d0 <micSettlingComplete>
 800b0d6:	1e03      	subs	r3, r0, #0
 800b0d8:	d105      	bne.n	800b0e6 <Mic_Upkeep+0x62>
 800b0da:	4b67      	ldr	r3, [pc, #412]	@ (800b278 <Mic_Upkeep+0x1f4>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d100      	bne.n	800b0e6 <Mic_Upkeep+0x62>
 800b0e4:	e0b6      	b.n	800b254 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800b0e6:	f003 fb81 	bl	800e7ec <startSPLcalculation>
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4053      	eors	r3, r2
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800b0f8:	4a5d      	ldr	r2, [pc, #372]	@ (800b270 <Mic_Upkeep+0x1ec>)
 800b0fa:	4b5e      	ldr	r3, [pc, #376]	@ (800b274 <Mic_Upkeep+0x1f0>)
 800b0fc:	2188      	movs	r1, #136	@ 0x88
 800b0fe:	0018      	movs	r0, r3
 800b100:	f005 fcf8 	bl	8010af4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800b104:	4b59      	ldr	r3, [pc, #356]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b106:	2202      	movs	r2, #2
 800b108:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b10a:	e0a3      	b.n	800b254 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800b10c:	4b5b      	ldr	r3, [pc, #364]	@ (800b27c <Mic_Upkeep+0x1f8>)
 800b10e:	2201      	movs	r2, #1
 800b110:	2101      	movs	r1, #1
 800b112:	0018      	movs	r0, r3
 800b114:	f003 f9be 	bl	800e494 <getSoundData>
 800b118:	1e03      	subs	r3, r0, #0
 800b11a:	d100      	bne.n	800b11e <Mic_Upkeep+0x9a>
 800b11c:	e09c      	b.n	800b258 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800b11e:	f003 fab7 	bl	800e690 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800b122:	4b56      	ldr	r3, [pc, #344]	@ (800b27c <Mic_Upkeep+0x1f8>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	001a      	movs	r2, r3
 800b128:	4b54      	ldr	r3, [pc, #336]	@ (800b27c <Mic_Upkeep+0x1f8>)
 800b12a:	785b      	ldrb	r3, [r3, #1]
 800b12c:	4954      	ldr	r1, [pc, #336]	@ (800b280 <Mic_Upkeep+0x1fc>)
 800b12e:	0038      	movs	r0, r7
 800b130:	f017 fc20 	bl	8022974 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800b134:	4b51      	ldr	r3, [pc, #324]	@ (800b27c <Mic_Upkeep+0x1f8>)
 800b136:	89db      	ldrh	r3, [r3, #14]
 800b138:	001a      	movs	r2, r3
 800b13a:	4b50      	ldr	r3, [pc, #320]	@ (800b27c <Mic_Upkeep+0x1f8>)
 800b13c:	7c1b      	ldrb	r3, [r3, #16]
 800b13e:	4951      	ldr	r1, [pc, #324]	@ (800b284 <Mic_Upkeep+0x200>)
 800b140:	4851      	ldr	r0, [pc, #324]	@ (800b288 <Mic_Upkeep+0x204>)
 800b142:	f017 fc17 	bl	8022974 <siprintf>
      dBValue = atof(dBbuffer);
 800b146:	003b      	movs	r3, r7
 800b148:	0018      	movs	r0, r3
 800b14a:	f015 ffc3 	bl	80210d4 <atof>
 800b14e:	0002      	movs	r2, r0
 800b150:	000b      	movs	r3, r1
 800b152:	0010      	movs	r0, r2
 800b154:	0019      	movs	r1, r3
 800b156:	f7f8 f9cd 	bl	80034f4 <__aeabi_d2f>
 800b15a:	1c02      	adds	r2, r0, #0
 800b15c:	4b4b      	ldr	r3, [pc, #300]	@ (800b28c <Mic_Upkeep+0x208>)
 800b15e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800b160:	4b4a      	ldr	r3, [pc, #296]	@ (800b28c <Mic_Upkeep+0x208>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	494a      	ldr	r1, [pc, #296]	@ (800b290 <Mic_Upkeep+0x20c>)
 800b166:	1c18      	adds	r0, r3, #0
 800b168:	f7f5 ff1a 	bl	8000fa0 <__aeabi_fmul>
 800b16c:	1c03      	adds	r3, r0, #0
 800b16e:	1c18      	adds	r0, r3, #0
 800b170:	f7f8 f978 	bl	8003464 <__aeabi_f2d>
 800b174:	2200      	movs	r2, #0
 800b176:	4b47      	ldr	r3, [pc, #284]	@ (800b294 <Mic_Upkeep+0x210>)
 800b178:	f7f6 fab8 	bl	80016ec <__aeabi_dadd>
 800b17c:	0002      	movs	r2, r0
 800b17e:	000b      	movs	r3, r1
 800b180:	0010      	movs	r0, r2
 800b182:	0019      	movs	r1, r3
 800b184:	f7f8 f8e0 	bl	8003348 <__aeabi_d2iz>
 800b188:	0003      	movs	r3, r0
 800b18a:	0018      	movs	r0, r3
 800b18c:	f7f8 f918 	bl	80033c0 <__aeabi_i2d>
 800b190:	2200      	movs	r2, #0
 800b192:	4b41      	ldr	r3, [pc, #260]	@ (800b298 <Mic_Upkeep+0x214>)
 800b194:	f7f6 fe0e 	bl	8001db4 <__aeabi_ddiv>
 800b198:	0002      	movs	r2, r0
 800b19a:	000b      	movs	r3, r1
 800b19c:	0010      	movs	r0, r2
 800b19e:	0019      	movs	r1, r3
 800b1a0:	f7f8 f9a8 	bl	80034f4 <__aeabi_d2f>
 800b1a4:	1c02      	adds	r2, r0, #0
 800b1a6:	4b39      	ldr	r3, [pc, #228]	@ (800b28c <Mic_Upkeep+0x208>)
 800b1a8:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800b1aa:	f7ff fdd5 	bl	800ad58 <MIC_Print>
      if (!startSPLcalculation()) {
 800b1ae:	f003 fb1d 	bl	800e7ec <startSPLcalculation>
 800b1b2:	0003      	movs	r3, r0
 800b1b4:	001a      	movs	r2, r3
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	4053      	eors	r3, r2
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d005      	beq.n	800b1cc <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800b1c0:	4a2b      	ldr	r2, [pc, #172]	@ (800b270 <Mic_Upkeep+0x1ec>)
 800b1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800b274 <Mic_Upkeep+0x1f0>)
 800b1c4:	2198      	movs	r1, #152	@ 0x98
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f005 fc94 	bl	8010af4 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	f003 faa3 	bl	800e718 <enableMicrophone>
 800b1d2:	0003      	movs	r3, r0
 800b1d4:	001a      	movs	r2, r3
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4053      	eors	r3, r2
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d005      	beq.n	800b1ec <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800b1e0:	4a23      	ldr	r2, [pc, #140]	@ (800b270 <Mic_Upkeep+0x1ec>)
 800b1e2:	4b24      	ldr	r3, [pc, #144]	@ (800b274 <Mic_Upkeep+0x1f0>)
 800b1e4:	219b      	movs	r1, #155	@ 0x9b
 800b1e6:	0018      	movs	r0, r3
 800b1e8:	f005 fc84 	bl	8010af4 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800b1ec:	f006 f816 	bl	801121c <HAL_GetTick>
 800b1f0:	0003      	movs	r3, r0
 800b1f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b29c <Mic_Upkeep+0x218>)
 800b1f4:	189a      	adds	r2, r3, r2
 800b1f6:	4b2a      	ldr	r3, [pc, #168]	@ (800b2a0 <Mic_Upkeep+0x21c>)
 800b1f8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800b1fa:	4b1c      	ldr	r3, [pc, #112]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b1fc:	2203      	movs	r2, #3
 800b1fe:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800b200:	f004 fa7a 	bl	800f6f8 <ResetMICIndicator>
    }
    break;
 800b204:	e028      	b.n	800b258 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800b206:	4b26      	ldr	r3, [pc, #152]	@ (800b2a0 <Mic_Upkeep+0x21c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	0018      	movs	r0, r3
 800b20c:	f005 fb64 	bl	80108d8 <TimestampIsReached>
 800b210:	1e03      	subs	r3, r0, #0
 800b212:	d023      	beq.n	800b25c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800b214:	2001      	movs	r0, #1
 800b216:	f003 fa7f 	bl	800e718 <enableMicrophone>
 800b21a:	0003      	movs	r3, r0
 800b21c:	001a      	movs	r2, r3
 800b21e:	2301      	movs	r3, #1
 800b220:	4053      	eors	r3, r2
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800b228:	4a11      	ldr	r2, [pc, #68]	@ (800b270 <Mic_Upkeep+0x1ec>)
 800b22a:	4b12      	ldr	r3, [pc, #72]	@ (800b274 <Mic_Upkeep+0x1f0>)
 800b22c:	21a6      	movs	r1, #166	@ 0xa6
 800b22e:	0018      	movs	r0, r3
 800b230:	f005 fc60 	bl	8010af4 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800b234:	4b0d      	ldr	r3, [pc, #52]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b236:	2201      	movs	r2, #1
 800b238:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800b23a:	f004 fa1b 	bl	800f674 <SetMICIndicator>
    }
    break;
 800b23e:	e00d      	b.n	800b25c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800b240:	4a18      	ldr	r2, [pc, #96]	@ (800b2a4 <Mic_Upkeep+0x220>)
 800b242:	4b19      	ldr	r3, [pc, #100]	@ (800b2a8 <Mic_Upkeep+0x224>)
 800b244:	0019      	movs	r1, r3
 800b246:	2003      	movs	r0, #3
 800b248:	f005 fb9c 	bl	8010984 <CreateLine>
    MicState = MIC_STATE_INIT;
 800b24c:	4b07      	ldr	r3, [pc, #28]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
    break;
 800b252:	e004      	b.n	800b25e <Mic_Upkeep+0x1da>
    break;
 800b254:	46c0      	nop			@ (mov r8, r8)
 800b256:	e002      	b.n	800b25e <Mic_Upkeep+0x1da>
    break;
 800b258:	46c0      	nop			@ (mov r8, r8)
 800b25a:	e000      	b.n	800b25e <Mic_Upkeep+0x1da>
    break;
 800b25c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800b25e:	4b03      	ldr	r3, [pc, #12]	@ (800b26c <Mic_Upkeep+0x1e8>)
 800b260:	781b      	ldrb	r3, [r3, #0]
}
 800b262:	0018      	movs	r0, r3
 800b264:	46bd      	mov	sp, r7
 800b266:	b002      	add	sp, #8
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	46c0      	nop			@ (mov r8, r8)
 800b26c:	20000e22 	.word	0x20000e22
 800b270:	08027f44 	.word	0x08027f44
 800b274:	08029038 	.word	0x08029038
 800b278:	20000f3d 	.word	0x20000f3d
 800b27c:	20000e10 	.word	0x20000e10
 800b280:	08027f60 	.word	0x08027f60
 800b284:	08027f68 	.word	0x08027f68
 800b288:	20000dc0 	.word	0x20000dc0
 800b28c:	20000e00 	.word	0x20000e00
 800b290:	42c80000 	.word	0x42c80000
 800b294:	3fe00000 	.word	0x3fe00000
 800b298:	40590000 	.word	0x40590000
 800b29c:	000002f3 	.word	0x000002f3
 800b2a0:	20000e0c 	.word	0x20000e0c
 800b2a4:	08027f70 	.word	0x08027f70
 800b2a8:	08027f90 	.word	0x08027f90

0800b2ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800b2b2:	1d3b      	adds	r3, r7, #4
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	2314      	movs	r3, #20
 800b2b8:	001a      	movs	r2, r3
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	f017 fcc0 	bl	8022c40 <memset>
  RTC_DateTypeDef sDate = {0};
 800b2c0:	003b      	movs	r3, r7
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800b2c6:	4b2e      	ldr	r3, [pc, #184]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2c8:	4a2e      	ldr	r2, [pc, #184]	@ (800b384 <MX_RTC_Init+0xd8>)
 800b2ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800b2cc:	4b2c      	ldr	r3, [pc, #176]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800b2d2:	4b2b      	ldr	r3, [pc, #172]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2d4:	227f      	movs	r2, #127	@ 0x7f
 800b2d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800b2d8:	4b29      	ldr	r3, [pc, #164]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2da:	22ff      	movs	r2, #255	@ 0xff
 800b2dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800b2de:	4b28      	ldr	r3, [pc, #160]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800b2e4:	4b26      	ldr	r3, [pc, #152]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800b2ea:	4b25      	ldr	r3, [pc, #148]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800b2f0:	4b23      	ldr	r3, [pc, #140]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800b2f6:	4b22      	ldr	r3, [pc, #136]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f00d faab 	bl	8018854 <HAL_RTC_Init>
 800b2fe:	1e03      	subs	r3, r0, #0
 800b300:	d001      	beq.n	800b306 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800b302:	f7ff f8d9 	bl	800a4b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800b306:	1d3b      	adds	r3, r7, #4
 800b308:	220d      	movs	r2, #13
 800b30a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800b30c:	1d3b      	adds	r3, r7, #4
 800b30e:	2200      	movs	r2, #0
 800b310:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800b312:	1d3b      	adds	r3, r7, #4
 800b314:	2200      	movs	r2, #0
 800b316:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800b318:	1d3b      	adds	r3, r7, #4
 800b31a:	2200      	movs	r2, #0
 800b31c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800b31e:	1d3b      	adds	r3, r7, #4
 800b320:	2200      	movs	r2, #0
 800b322:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800b324:	1d39      	adds	r1, r7, #4
 800b326:	4b16      	ldr	r3, [pc, #88]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b328:	2200      	movs	r2, #0
 800b32a:	0018      	movs	r0, r3
 800b32c:	f00d fb2e 	bl	801898c <HAL_RTC_SetTime>
 800b330:	1e03      	subs	r3, r0, #0
 800b332:	d001      	beq.n	800b338 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800b334:	f7ff f8c0 	bl	800a4b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800b338:	003b      	movs	r3, r7
 800b33a:	2206      	movs	r2, #6
 800b33c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800b33e:	003b      	movs	r3, r7
 800b340:	2211      	movs	r2, #17
 800b342:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800b344:	003b      	movs	r3, r7
 800b346:	2217      	movs	r2, #23
 800b348:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800b34a:	003b      	movs	r3, r7
 800b34c:	2218      	movs	r2, #24
 800b34e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800b350:	0039      	movs	r1, r7
 800b352:	4b0b      	ldr	r3, [pc, #44]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b354:	2200      	movs	r2, #0
 800b356:	0018      	movs	r0, r3
 800b358:	f00d fc20 	bl	8018b9c <HAL_RTC_SetDate>
 800b35c:	1e03      	subs	r3, r0, #0
 800b35e:	d001      	beq.n	800b364 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800b360:	f7ff f8aa 	bl	800a4b8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800b364:	4b06      	ldr	r3, [pc, #24]	@ (800b380 <MX_RTC_Init+0xd4>)
 800b366:	2200      	movs	r2, #0
 800b368:	2100      	movs	r1, #0
 800b36a:	0018      	movs	r0, r3
 800b36c:	f00d fdd0 	bl	8018f10 <HAL_RTCEx_SetWakeUpTimer_IT>
 800b370:	1e03      	subs	r3, r0, #0
 800b372:	d001      	beq.n	800b378 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800b374:	f7ff f8a0 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800b378:	46c0      	nop			@ (mov r8, r8)
 800b37a:	46bd      	mov	sp, r7
 800b37c:	b006      	add	sp, #24
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	20000e24 	.word	0x20000e24
 800b384:	40002800 	.word	0x40002800

0800b388 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a0a      	ldr	r2, [pc, #40]	@ (800b3c0 <HAL_RTC_MspInit+0x38>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d10e      	bne.n	800b3b8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800b39a:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c4 <HAL_RTC_MspInit+0x3c>)
 800b39c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b39e:	4b09      	ldr	r3, [pc, #36]	@ (800b3c4 <HAL_RTC_MspInit+0x3c>)
 800b3a0:	2180      	movs	r1, #128	@ 0x80
 800b3a2:	02c9      	lsls	r1, r1, #11
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2100      	movs	r1, #0
 800b3ac:	2002      	movs	r0, #2
 800b3ae:	f006 fbd9 	bl	8011b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800b3b2:	2002      	movs	r0, #2
 800b3b4:	f006 fbeb 	bl	8011b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800b3b8:	46c0      	nop			@ (mov r8, r8)
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	b002      	add	sp, #8
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	40002800 	.word	0x40002800
 800b3c4:	40021000 	.word	0x40021000

0800b3c8 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800b3cc:	4b02      	ldr	r3, [pc, #8]	@ (800b3d8 <sen5x_Get_sen5x_enable_state+0x10>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
}
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	46c0      	nop			@ (mov r8, r8)
 800b3d8:	20000e4b 	.word	0x20000e4b

0800b3dc <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	0002      	movs	r2, r0
 800b3e4:	1dfb      	adds	r3, r7, #7
 800b3e6:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800b3e8:	4b03      	ldr	r3, [pc, #12]	@ (800b3f8 <sen5x_Set_sen5x_state+0x1c>)
 800b3ea:	1dfa      	adds	r2, r7, #7
 800b3ec:	7812      	ldrb	r2, [r2, #0]
 800b3ee:	701a      	strb	r2, [r3, #0]
}
 800b3f0:	46c0      	nop			@ (mov r8, r8)
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	b002      	add	sp, #8
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	20000e4b 	.word	0x20000e4b

0800b3fc <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800b404:	f005 ff0a 	bl	801121c <HAL_GetTick>
 800b408:	0002      	movs	r2, r0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	18d2      	adds	r2, r2, r3
 800b40e:	4b03      	ldr	r3, [pc, #12]	@ (800b41c <setsen5xReadTimer+0x20>)
 800b410:	601a      	str	r2, [r3, #0]
}
 800b412:	46c0      	nop			@ (mov r8, r8)
 800b414:	46bd      	mov	sp, r7
 800b416:	b002      	add	sp, #8
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	46c0      	nop			@ (mov r8, r8)
 800b41c:	20000e58 	.word	0x20000e58

0800b420 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	0002      	movs	r2, r0
 800b428:	1dfb      	adds	r3, r7, #7
 800b42a:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800b42c:	4b03      	ldr	r3, [pc, #12]	@ (800b43c <setsen5xSamplecounter+0x1c>)
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
}
 800b432:	46c0      	nop			@ (mov r8, r8)
 800b434:	46bd      	mov	sp, r7
 800b436:	b002      	add	sp, #8
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	46c0      	nop			@ (mov r8, r8)
 800b43c:	20000e54 	.word	0x20000e54

0800b440 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800b448:	f7ff f8ce 	bl	800a5e8 <IsPMSensorEnabled>
 800b44c:	1e03      	subs	r3, r0, #0
 800b44e:	d035      	beq.n	800b4bc <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800b450:	f003 ff8e 	bl	800f370 <batteryChargeCheck>
 800b454:	0003      	movs	r3, r0
 800b456:	2b03      	cmp	r3, #3
 800b458:	d103      	bne.n	800b462 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800b45a:	4b20      	ldr	r3, [pc, #128]	@ (800b4dc <sen5x_enable+0x9c>)
 800b45c:	2201      	movs	r2, #1
 800b45e:	701a      	strb	r2, [r3, #0]
 800b460:	e00d      	b.n	800b47e <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800b462:	4b1e      	ldr	r3, [pc, #120]	@ (800b4dc <sen5x_enable+0x9c>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	1e5a      	subs	r2, r3, #1
 800b468:	4193      	sbcs	r3, r2
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2201      	movs	r2, #1
 800b46e:	4053      	eors	r3, r2
 800b470:	b2db      	uxtb	r3, r3
 800b472:	1c1a      	adds	r2, r3, #0
 800b474:	2301      	movs	r3, #1
 800b476:	4013      	ands	r3, r2
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	4b18      	ldr	r3, [pc, #96]	@ (800b4dc <sen5x_enable+0x9c>)
 800b47c:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800b47e:	4b17      	ldr	r3, [pc, #92]	@ (800b4dc <sen5x_enable+0x9c>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800b486:	2000      	movs	r0, #0
 800b488:	f7ff ffb8 	bl	800b3fc <setsen5xReadTimer>
 800b48c:	e009      	b.n	800b4a2 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800b48e:	f005 fec5 	bl	801121c <HAL_GetTick>
 800b492:	0002      	movs	r2, r0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2164      	movs	r1, #100	@ 0x64
 800b498:	434b      	muls	r3, r1
 800b49a:	18d3      	adds	r3, r2, r3
 800b49c:	0018      	movs	r0, r3
 800b49e:	f7ff ffad 	bl	800b3fc <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b4dc <sen5x_enable+0x9c>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d001      	beq.n	800b4ae <sen5x_enable+0x6e>
 800b4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e0 <sen5x_enable+0xa0>)
 800b4ac:	e000      	b.n	800b4b0 <sen5x_enable+0x70>
 800b4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e4 <sen5x_enable+0xa4>)
 800b4b0:	4a0d      	ldr	r2, [pc, #52]	@ (800b4e8 <sen5x_enable+0xa8>)
 800b4b2:	490e      	ldr	r1, [pc, #56]	@ (800b4ec <sen5x_enable+0xac>)
 800b4b4:	2002      	movs	r0, #2
 800b4b6:	f005 fa65 	bl	8010984 <CreateLine>
 800b4ba:	e005      	b.n	800b4c8 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800b4bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f0 <sen5x_enable+0xb0>)
 800b4be:	4b0b      	ldr	r3, [pc, #44]	@ (800b4ec <sen5x_enable+0xac>)
 800b4c0:	0019      	movs	r1, r3
 800b4c2:	2002      	movs	r0, #2
 800b4c4:	f005 fa5e 	bl	8010984 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800b4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f4 <sen5x_enable+0xb4>)
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800b4ce:	4b03      	ldr	r3, [pc, #12]	@ (800b4dc <sen5x_enable+0x9c>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
}
 800b4d2:	0018      	movs	r0, r3
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	b002      	add	sp, #8
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	46c0      	nop			@ (mov r8, r8)
 800b4dc:	20000e4b 	.word	0x20000e4b
 800b4e0:	08027f94 	.word	0x08027f94
 800b4e4:	08027f9c 	.word	0x08027f9c
 800b4e8:	08027fa8 	.word	0x08027fa8
 800b4ec:	08027fc4 	.word	0x08027fc4
 800b4f0:	08027fc8 	.word	0x08027fc8
 800b4f4:	200000a1 	.word	0x200000a1

0800b4f8 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800b4fc:	2380      	movs	r3, #128	@ 0x80
 800b4fe:	015b      	lsls	r3, r3, #5
 800b500:	480f      	ldr	r0, [pc, #60]	@ (800b540 <sen5x_Power_On+0x48>)
 800b502:	2201      	movs	r2, #1
 800b504:	0019      	movs	r1, r3
 800b506:	f007 f91a 	bl	801273e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800b50a:	4a0e      	ldr	r2, [pc, #56]	@ (800b544 <sen5x_Power_On+0x4c>)
 800b50c:	4b0e      	ldr	r3, [pc, #56]	@ (800b548 <sen5x_Power_On+0x50>)
 800b50e:	0019      	movs	r1, r3
 800b510:	2003      	movs	r0, #3
 800b512:	f005 fa37 	bl	8010984 <CreateLine>
  HAL_Delay(150);
 800b516:	2096      	movs	r0, #150	@ 0x96
 800b518:	f005 fe8a 	bl	8011230 <HAL_Delay>
  if (sen5x_device_reset()) {
 800b51c:	f001 f98c 	bl	800c838 <sen5x_device_reset>
 800b520:	1e03      	subs	r3, r0, #0
 800b522:	d006      	beq.n	800b532 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800b524:	4a09      	ldr	r2, [pc, #36]	@ (800b54c <sen5x_Power_On+0x54>)
 800b526:	4b0a      	ldr	r3, [pc, #40]	@ (800b550 <sen5x_Power_On+0x58>)
 800b528:	0019      	movs	r1, r3
 800b52a:	2001      	movs	r0, #1
 800b52c:	f005 fa2a 	bl	8010984 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800b530:	e002      	b.n	800b538 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800b532:	4b08      	ldr	r3, [pc, #32]	@ (800b554 <sen5x_Power_On+0x5c>)
 800b534:	2201      	movs	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]
}
 800b538:	46c0      	nop			@ (mov r8, r8)
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	46c0      	nop			@ (mov r8, r8)
 800b540:	50000800 	.word	0x50000800
 800b544:	08027fe8 	.word	0x08027fe8
 800b548:	08028004 	.word	0x08028004
 800b54c:	08028008 	.word	0x08028008
 800b550:	08028030 	.word	0x08028030
 800b554:	20000e49 	.word	0x20000e49

0800b558 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800b55c:	4b0e      	ldr	r3, [pc, #56]	@ (800b598 <sen5x_Power_Off+0x40>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d006      	beq.n	800b572 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800b564:	4a0d      	ldr	r2, [pc, #52]	@ (800b59c <sen5x_Power_Off+0x44>)
 800b566:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a0 <sen5x_Power_Off+0x48>)
 800b568:	0019      	movs	r1, r3
 800b56a:	2003      	movs	r0, #3
 800b56c:	f005 fa0a 	bl	8010984 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800b570:	e00f      	b.n	800b592 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800b572:	4a0c      	ldr	r2, [pc, #48]	@ (800b5a4 <sen5x_Power_Off+0x4c>)
 800b574:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a0 <sen5x_Power_Off+0x48>)
 800b576:	0019      	movs	r1, r3
 800b578:	2003      	movs	r0, #3
 800b57a:	f005 fa03 	bl	8010984 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800b57e:	2380      	movs	r3, #128	@ 0x80
 800b580:	015b      	lsls	r3, r3, #5
 800b582:	4809      	ldr	r0, [pc, #36]	@ (800b5a8 <sen5x_Power_Off+0x50>)
 800b584:	2200      	movs	r2, #0
 800b586:	0019      	movs	r1, r3
 800b588:	f007 f8d9 	bl	801273e <HAL_GPIO_WritePin>
      sen5x_On = false;
 800b58c:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <sen5x_Power_Off+0x54>)
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
}
 800b592:	46c0      	nop			@ (mov r8, r8)
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20000e4a 	.word	0x20000e4a
 800b59c:	08028034 	.word	0x08028034
 800b5a0:	08028004 	.word	0x08028004
 800b5a4:	08028064 	.word	0x08028064
 800b5a8:	50000800 	.word	0x50000800
 800b5ac:	20000e49 	.word	0x20000e49

0800b5b0 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800b5b4:	4b02      	ldr	r3, [pc, #8]	@ (800b5c0 <reset_fanCleaningDone+0x10>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
}
 800b5ba:	46c0      	nop			@ (mov r8, r8)
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20000e48 	.word	0x20000e48

0800b5c4 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800b5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5c6:	b093      	sub	sp, #76	@ 0x4c
 800b5c8:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800b5ca:	2436      	movs	r4, #54	@ 0x36
 800b5cc:	193b      	adds	r3, r7, r4
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800b5d2:	2335      	movs	r3, #53	@ 0x35
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800b5da:	2334      	movs	r3, #52	@ 0x34
 800b5dc:	18fb      	adds	r3, r7, r3
 800b5de:	2220      	movs	r2, #32
 800b5e0:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800b5e2:	f7ff ff89 	bl	800b4f8 <sen5x_Power_On>
  error = sen5x_device_reset();
 800b5e6:	0025      	movs	r5, r4
 800b5e8:	193c      	adds	r4, r7, r4
 800b5ea:	f001 f925 	bl	800c838 <sen5x_device_reset>
 800b5ee:	0003      	movs	r3, r0
 800b5f0:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b5f2:	002c      	movs	r4, r5
 800b5f4:	193b      	adds	r3, r7, r4
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	5e9b      	ldrsh	r3, [r3, r2]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800b5fe:	193b      	adds	r3, r7, r4
 800b600:	2200      	movs	r2, #0
 800b602:	5e9b      	ldrsh	r3, [r3, r2]
 800b604:	4a75      	ldr	r2, [pc, #468]	@ (800b7dc <probe_sen5x+0x218>)
 800b606:	4976      	ldr	r1, [pc, #472]	@ (800b7e0 <probe_sen5x+0x21c>)
 800b608:	2001      	movs	r0, #1
 800b60a:	f005 f9bb 	bl	8010984 <CreateLine>
      return error;
 800b60e:	193b      	adds	r3, r7, r4
 800b610:	2200      	movs	r2, #0
 800b612:	5e9b      	ldrsh	r3, [r3, r2]
 800b614:	e0de      	b.n	800b7d4 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800b616:	2536      	movs	r5, #54	@ 0x36
 800b618:	197c      	adds	r4, r7, r5
 800b61a:	2335      	movs	r3, #53	@ 0x35
 800b61c:	18fb      	adds	r3, r7, r3
 800b61e:	781a      	ldrb	r2, [r3, #0]
 800b620:	230c      	movs	r3, #12
 800b622:	18fb      	adds	r3, r7, r3
 800b624:	0011      	movs	r1, r2
 800b626:	0018      	movs	r0, r3
 800b628:	f000 fff2 	bl	800c610 <sen5x_get_serial_number>
 800b62c:	0003      	movs	r3, r0
 800b62e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b630:	197b      	adds	r3, r7, r5
 800b632:	2200      	movs	r2, #0
 800b634:	5e9b      	ldrsh	r3, [r3, r2]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00b      	beq.n	800b652 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800b63a:	197b      	adds	r3, r7, r5
 800b63c:	2200      	movs	r2, #0
 800b63e:	5e9a      	ldrsh	r2, [r3, r2]
 800b640:	4b68      	ldr	r3, [pc, #416]	@ (800b7e4 <probe_sen5x+0x220>)
 800b642:	0011      	movs	r1, r2
 800b644:	0018      	movs	r0, r3
 800b646:	f017 f925 	bl	8022894 <iprintf>
      return error;
 800b64a:	197b      	adds	r3, r7, r5
 800b64c:	2200      	movs	r2, #0
 800b64e:	5e9b      	ldrsh	r3, [r3, r2]
 800b650:	e0c0      	b.n	800b7d4 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800b652:	230c      	movs	r3, #12
 800b654:	18fa      	adds	r2, r7, r3
 800b656:	4b64      	ldr	r3, [pc, #400]	@ (800b7e8 <probe_sen5x+0x224>)
 800b658:	0011      	movs	r1, r2
 800b65a:	0018      	movs	r0, r3
 800b65c:	f017 f91a 	bl	8022894 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800b660:	2536      	movs	r5, #54	@ 0x36
 800b662:	197c      	adds	r4, r7, r5
 800b664:	2334      	movs	r3, #52	@ 0x34
 800b666:	18fb      	adds	r3, r7, r3
 800b668:	781a      	ldrb	r2, [r3, #0]
 800b66a:	4b60      	ldr	r3, [pc, #384]	@ (800b7ec <probe_sen5x+0x228>)
 800b66c:	0011      	movs	r1, r2
 800b66e:	0018      	movs	r0, r3
 800b670:	f000 ff78 	bl	800c564 <sen5x_get_product_name>
 800b674:	0003      	movs	r3, r0
 800b676:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b678:	197b      	adds	r3, r7, r5
 800b67a:	2200      	movs	r2, #0
 800b67c:	5e9b      	ldrsh	r3, [r3, r2]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00b      	beq.n	800b69a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800b682:	197b      	adds	r3, r7, r5
 800b684:	2200      	movs	r2, #0
 800b686:	5e9a      	ldrsh	r2, [r3, r2]
 800b688:	4b59      	ldr	r3, [pc, #356]	@ (800b7f0 <probe_sen5x+0x22c>)
 800b68a:	0011      	movs	r1, r2
 800b68c:	0018      	movs	r0, r3
 800b68e:	f017 f901 	bl	8022894 <iprintf>
      return error;
 800b692:	197b      	adds	r3, r7, r5
 800b694:	2200      	movs	r2, #0
 800b696:	5e9b      	ldrsh	r3, [r3, r2]
 800b698:	e09c      	b.n	800b7d4 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800b69a:	4a54      	ldr	r2, [pc, #336]	@ (800b7ec <probe_sen5x+0x228>)
 800b69c:	4b55      	ldr	r3, [pc, #340]	@ (800b7f4 <probe_sen5x+0x230>)
 800b69e:	0011      	movs	r1, r2
 800b6a0:	0018      	movs	r0, r3
 800b6a2:	f017 f8f7 	bl	8022894 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800b6a6:	2636      	movs	r6, #54	@ 0x36
 800b6a8:	19bc      	adds	r4, r7, r6
 800b6aa:	2308      	movs	r3, #8
 800b6ac:	18fd      	adds	r5, r7, r3
 800b6ae:	2309      	movs	r3, #9
 800b6b0:	18fa      	adds	r2, r7, r3
 800b6b2:	230a      	movs	r3, #10
 800b6b4:	18f9      	adds	r1, r7, r3
 800b6b6:	230b      	movs	r3, #11
 800b6b8:	18f8      	adds	r0, r7, r3
 800b6ba:	1d7b      	adds	r3, r7, #5
 800b6bc:	9302      	str	r3, [sp, #8]
 800b6be:	1dbb      	adds	r3, r7, #6
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	1dfb      	adds	r3, r7, #7
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	002b      	movs	r3, r5
 800b6c8:	f000 fff8 	bl	800c6bc <sen5x_get_version>
 800b6cc:	0003      	movs	r3, r0
 800b6ce:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800b6d0:	19bb      	adds	r3, r7, r6
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	5e9b      	ldrsh	r3, [r3, r2]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00b      	beq.n	800b6f2 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800b6da:	19bb      	adds	r3, r7, r6
 800b6dc:	2200      	movs	r2, #0
 800b6de:	5e9a      	ldrsh	r2, [r3, r2]
 800b6e0:	4b45      	ldr	r3, [pc, #276]	@ (800b7f8 <probe_sen5x+0x234>)
 800b6e2:	0011      	movs	r1, r2
 800b6e4:	0018      	movs	r0, r3
 800b6e6:	f017 f8d5 	bl	8022894 <iprintf>
      return error;
 800b6ea:	19bb      	adds	r3, r7, r6
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	5e9b      	ldrsh	r3, [r3, r2]
 800b6f0:	e070      	b.n	800b7d4 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800b6f2:	230b      	movs	r3, #11
 800b6f4:	18fb      	adds	r3, r7, r3
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	0019      	movs	r1, r3
 800b6fa:	230a      	movs	r3, #10
 800b6fc:	18fb      	adds	r3, r7, r3
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	001a      	movs	r2, r3
 800b702:	2308      	movs	r3, #8
 800b704:	18fb      	adds	r3, r7, r3
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	001c      	movs	r4, r3
 800b70a:	1dfb      	adds	r3, r7, #7
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	483b      	ldr	r0, [pc, #236]	@ (800b7fc <probe_sen5x+0x238>)
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	0023      	movs	r3, r4
 800b714:	f017 f8be 	bl	8022894 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800b718:	2300      	movs	r3, #0
 800b71a:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800b71c:	262e      	movs	r6, #46	@ 0x2e
 800b71e:	19bb      	adds	r3, r7, r6
 800b720:	2200      	movs	r2, #0
 800b722:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800b724:	232c      	movs	r3, #44	@ 0x2c
 800b726:	18fb      	adds	r3, r7, r3
 800b728:	2200      	movs	r2, #0
 800b72a:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800b72c:	4934      	ldr	r1, [pc, #208]	@ (800b800 <probe_sen5x+0x23c>)
 800b72e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b730:	f7f5 fc36 	bl	8000fa0 <__aeabi_fmul>
 800b734:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800b736:	1c18      	adds	r0, r3, #0
 800b738:	f7f5 ff2a 	bl	8001590 <__aeabi_f2iz>
 800b73c:	0003      	movs	r3, r0
 800b73e:	b218      	sxth	r0, r3
 800b740:	2536      	movs	r5, #54	@ 0x36
 800b742:	197c      	adds	r4, r7, r5
 800b744:	232c      	movs	r3, #44	@ 0x2c
 800b746:	18fb      	adds	r3, r7, r3
 800b748:	881a      	ldrh	r2, [r3, #0]
 800b74a:	19bb      	adds	r3, r7, r6
 800b74c:	2100      	movs	r1, #0
 800b74e:	5e5b      	ldrsh	r3, [r3, r1]
 800b750:	0019      	movs	r1, r3
 800b752:	f000 fea3 	bl	800c49c <sen5x_set_temperature_offset_parameters>
 800b756:	0003      	movs	r3, r0
 800b758:	8023      	strh	r3, [r4, #0]
  if (error) {
 800b75a:	197b      	adds	r3, r7, r5
 800b75c:	2200      	movs	r2, #0
 800b75e:	5e9b      	ldrsh	r3, [r3, r2]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00b      	beq.n	800b77c <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800b764:	197b      	adds	r3, r7, r5
 800b766:	2200      	movs	r2, #0
 800b768:	5e9b      	ldrsh	r3, [r3, r2]
 800b76a:	4a26      	ldr	r2, [pc, #152]	@ (800b804 <probe_sen5x+0x240>)
 800b76c:	491c      	ldr	r1, [pc, #112]	@ (800b7e0 <probe_sen5x+0x21c>)
 800b76e:	2001      	movs	r0, #1
 800b770:	f005 f908 	bl	8010984 <CreateLine>
      return error;
 800b774:	197b      	adds	r3, r7, r5
 800b776:	2200      	movs	r2, #0
 800b778:	5e9b      	ldrsh	r3, [r3, r2]
 800b77a:	e02b      	b.n	800b7d4 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800b77c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b77e:	f7f7 fe71 	bl	8003464 <__aeabi_f2d>
 800b782:	0002      	movs	r2, r0
 800b784:	000b      	movs	r3, r1
 800b786:	4820      	ldr	r0, [pc, #128]	@ (800b808 <probe_sen5x+0x244>)
 800b788:	4920      	ldr	r1, [pc, #128]	@ (800b80c <probe_sen5x+0x248>)
 800b78a:	9200      	str	r2, [sp, #0]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	0002      	movs	r2, r0
 800b790:	2002      	movs	r0, #2
 800b792:	f005 f8f7 	bl	8010984 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800b796:	f7fb fc3f 	bl	8007018 <Check_USB_PowerOn>
 800b79a:	0003      	movs	r3, r0
 800b79c:	001a      	movs	r2, r3
 800b79e:	2301      	movs	r3, #1
 800b7a0:	4053      	eors	r3, r2
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00a      	beq.n	800b7be <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800b7a8:	f7ff fed6 	bl	800b558 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800b7ac:	f005 fd36 	bl	801121c <HAL_GetTick>
 800b7b0:	0003      	movs	r3, r0
 800b7b2:	22fa      	movs	r2, #250	@ 0xfa
 800b7b4:	00d2      	lsls	r2, r2, #3
 800b7b6:	189a      	adds	r2, r3, r2
 800b7b8:	4b15      	ldr	r3, [pc, #84]	@ (800b810 <probe_sen5x+0x24c>)
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	e006      	b.n	800b7cc <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800b7be:	f005 fd2d 	bl	801121c <HAL_GetTick>
 800b7c2:	0003      	movs	r3, r0
 800b7c4:	4a13      	ldr	r2, [pc, #76]	@ (800b814 <probe_sen5x+0x250>)
 800b7c6:	189a      	adds	r2, r3, r2
 800b7c8:	4b11      	ldr	r3, [pc, #68]	@ (800b810 <probe_sen5x+0x24c>)
 800b7ca:	601a      	str	r2, [r3, #0]
  }
  return error;
 800b7cc:	2336      	movs	r3, #54	@ 0x36
 800b7ce:	18fb      	adds	r3, r7, r3
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b7d4:	0018      	movs	r0, r3
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b00f      	add	sp, #60	@ 0x3c
 800b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7dc:	08028080 	.word	0x08028080
 800b7e0:	08028030 	.word	0x08028030
 800b7e4:	080280ac 	.word	0x080280ac
 800b7e8:	080280dc 	.word	0x080280dc
 800b7ec:	20000e4c 	.word	0x20000e4c
 800b7f0:	080280f0 	.word	0x080280f0
 800b7f4:	08028120 	.word	0x08028120
 800b7f8:	08028134 	.word	0x08028134
 800b7fc:	08028160 	.word	0x08028160
 800b800:	43480000 	.word	0x43480000
 800b804:	08028184 	.word	0x08028184
 800b808:	080281c4 	.word	0x080281c4
 800b80c:	08027fc4 	.word	0x08027fc4
 800b810:	20000e58 	.word	0x20000e58
 800b814:	00006d60 	.word	0x00006d60

0800b818 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800b81e:	1dbb      	adds	r3, r7, #6
 800b820:	2200      	movs	r2, #0
 800b822:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800b824:	4b1b      	ldr	r3, [pc, #108]	@ (800b894 <sen5x_lightup_measurement+0x7c>)
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00b      	beq.n	800b844 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800b82c:	4a1a      	ldr	r2, [pc, #104]	@ (800b898 <sen5x_lightup_measurement+0x80>)
 800b82e:	4b1b      	ldr	r3, [pc, #108]	@ (800b89c <sen5x_lightup_measurement+0x84>)
 800b830:	0019      	movs	r1, r3
 800b832:	2002      	movs	r0, #2
 800b834:	f005 f8a6 	bl	8010984 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b838:	1dbc      	adds	r4, r7, #6
 800b83a:	f000 fcbb 	bl	800c1b4 <sen5x_start_measurement_without_pm>
 800b83e:	0003      	movs	r3, r0
 800b840:	8023      	strh	r3, [r4, #0]
 800b842:	e00a      	b.n	800b85a <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800b844:	4a16      	ldr	r2, [pc, #88]	@ (800b8a0 <sen5x_lightup_measurement+0x88>)
 800b846:	4b15      	ldr	r3, [pc, #84]	@ (800b89c <sen5x_lightup_measurement+0x84>)
 800b848:	0019      	movs	r1, r3
 800b84a:	2002      	movs	r0, #2
 800b84c:	f005 f89a 	bl	8010984 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800b850:	1dbc      	adds	r4, r7, #6
 800b852:	f000 fc81 	bl	800c158 <sen5x_start_measurement>
 800b856:	0003      	movs	r3, r0
 800b858:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800b85a:	1dbb      	adds	r3, r7, #6
 800b85c:	2200      	movs	r2, #0
 800b85e:	5e9b      	ldrsh	r3, [r3, r2]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d008      	beq.n	800b876 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800b864:	1dbb      	adds	r3, r7, #6
 800b866:	2200      	movs	r2, #0
 800b868:	5e9b      	ldrsh	r3, [r3, r2]
 800b86a:	4a0e      	ldr	r2, [pc, #56]	@ (800b8a4 <sen5x_lightup_measurement+0x8c>)
 800b86c:	490e      	ldr	r1, [pc, #56]	@ (800b8a8 <sen5x_lightup_measurement+0x90>)
 800b86e:	2001      	movs	r0, #1
 800b870:	f005 f888 	bl	8010984 <CreateLine>
 800b874:	e007      	b.n	800b886 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800b876:	f7fb fbff 	bl	8007078 <showTime>
    Info("sen5x_start_measurement executed");
 800b87a:	4a0c      	ldr	r2, [pc, #48]	@ (800b8ac <sen5x_lightup_measurement+0x94>)
 800b87c:	4b07      	ldr	r3, [pc, #28]	@ (800b89c <sen5x_lightup_measurement+0x84>)
 800b87e:	0019      	movs	r1, r3
 800b880:	2002      	movs	r0, #2
 800b882:	f005 f87f 	bl	8010984 <CreateLine>
  }
  return error;
 800b886:	1dbb      	adds	r3, r7, #6
 800b888:	2200      	movs	r2, #0
 800b88a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b88c:	0018      	movs	r0, r3
 800b88e:	46bd      	mov	sp, r7
 800b890:	b003      	add	sp, #12
 800b892:	bd90      	pop	{r4, r7, pc}
 800b894:	20000e4a 	.word	0x20000e4a
 800b898:	080281fc 	.word	0x080281fc
 800b89c:	08027fc4 	.word	0x08027fc4
 800b8a0:	08028228 	.word	0x08028228
 800b8a4:	08028248 	.word	0x08028248
 800b8a8:	08028030 	.word	0x08028030
 800b8ac:	08028278 	.word	0x08028278

0800b8b0 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800b8b0:	b590      	push	{r4, r7, lr}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800b8b6:	1dbb      	adds	r3, r7, #6
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800b8bc:	4b21      	ldr	r3, [pc, #132]	@ (800b944 <sen5x_extinguish_measurement+0x94>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d01e      	beq.n	800b902 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800b8c4:	4a20      	ldr	r2, [pc, #128]	@ (800b948 <sen5x_extinguish_measurement+0x98>)
 800b8c6:	4b21      	ldr	r3, [pc, #132]	@ (800b94c <sen5x_extinguish_measurement+0x9c>)
 800b8c8:	0019      	movs	r1, r3
 800b8ca:	2002      	movs	r0, #2
 800b8cc:	f005 f85a 	bl	8010984 <CreateLine>
    Info("PM measurement is disabled");
 800b8d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b950 <sen5x_extinguish_measurement+0xa0>)
 800b8d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b94c <sen5x_extinguish_measurement+0x9c>)
 800b8d4:	0019      	movs	r1, r3
 800b8d6:	2002      	movs	r0, #2
 800b8d8:	f005 f854 	bl	8010984 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800b8dc:	1dbc      	adds	r4, r7, #6
 800b8de:	f000 fc69 	bl	800c1b4 <sen5x_start_measurement_without_pm>
 800b8e2:	0003      	movs	r3, r0
 800b8e4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800b8e6:	1dbb      	adds	r3, r7, #6
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	5e9b      	ldrsh	r3, [r3, r2]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d022      	beq.n	800b936 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800b8f0:	1dbb      	adds	r3, r7, #6
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	5e9b      	ldrsh	r3, [r3, r2]
 800b8f6:	4a17      	ldr	r2, [pc, #92]	@ (800b954 <sen5x_extinguish_measurement+0xa4>)
 800b8f8:	4917      	ldr	r1, [pc, #92]	@ (800b958 <sen5x_extinguish_measurement+0xa8>)
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	f005 f842 	bl	8010984 <CreateLine>
 800b900:	e019      	b.n	800b936 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800b902:	1dbc      	adds	r4, r7, #6
 800b904:	f000 fc84 	bl	800c210 <sen5x_stop_measurement>
 800b908:	0003      	movs	r3, r0
 800b90a:	8023      	strh	r3, [r4, #0]
    showTime();
 800b90c:	f7fb fbb4 	bl	8007078 <showTime>
    Info("sen5x_stop_measurement executed");
 800b910:	4a12      	ldr	r2, [pc, #72]	@ (800b95c <sen5x_extinguish_measurement+0xac>)
 800b912:	4b0e      	ldr	r3, [pc, #56]	@ (800b94c <sen5x_extinguish_measurement+0x9c>)
 800b914:	0019      	movs	r1, r3
 800b916:	2002      	movs	r0, #2
 800b918:	f005 f834 	bl	8010984 <CreateLine>
    if (error) {
 800b91c:	1dbb      	adds	r3, r7, #6
 800b91e:	2200      	movs	r2, #0
 800b920:	5e9b      	ldrsh	r3, [r3, r2]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d007      	beq.n	800b936 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800b926:	1dbb      	adds	r3, r7, #6
 800b928:	2200      	movs	r2, #0
 800b92a:	5e9b      	ldrsh	r3, [r3, r2]
 800b92c:	4a0c      	ldr	r2, [pc, #48]	@ (800b960 <sen5x_extinguish_measurement+0xb0>)
 800b92e:	490a      	ldr	r1, [pc, #40]	@ (800b958 <sen5x_extinguish_measurement+0xa8>)
 800b930:	2001      	movs	r0, #1
 800b932:	f005 f827 	bl	8010984 <CreateLine>
    }
  }
  return error;
 800b936:	1dbb      	adds	r3, r7, #6
 800b938:	2200      	movs	r2, #0
 800b93a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800b93c:	0018      	movs	r0, r3
 800b93e:	46bd      	mov	sp, r7
 800b940:	b003      	add	sp, #12
 800b942:	bd90      	pop	{r4, r7, pc}
 800b944:	20000e4a 	.word	0x20000e4a
 800b948:	0802829c 	.word	0x0802829c
 800b94c:	08027fc4 	.word	0x08027fc4
 800b950:	080282d4 	.word	0x080282d4
 800b954:	080282f0 	.word	0x080282f0
 800b958:	08028030 	.word	0x08028030
 800b95c:	08028330 	.word	0x08028330
 800b960:	08028350 	.word	0x08028350

0800b964 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800b964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b966:	b08d      	sub	sp, #52	@ 0x34
 800b968:	af04      	add	r7, sp, #16
 800b96a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800b96c:	261e      	movs	r6, #30
 800b96e:	19bb      	adds	r3, r7, r6
 800b970:	2200      	movs	r2, #0
 800b972:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800b974:	19bc      	adds	r4, r7, r6
 800b976:	2316      	movs	r3, #22
 800b978:	18fd      	adds	r5, r7, r3
 800b97a:	2318      	movs	r3, #24
 800b97c:	18fa      	adds	r2, r7, r3
 800b97e:	231a      	movs	r3, #26
 800b980:	18f9      	adds	r1, r7, r3
 800b982:	231c      	movs	r3, #28
 800b984:	18f8      	adds	r0, r7, r3
 800b986:	230e      	movs	r3, #14
 800b988:	18fb      	adds	r3, r7, r3
 800b98a:	9303      	str	r3, [sp, #12]
 800b98c:	2310      	movs	r3, #16
 800b98e:	18fb      	adds	r3, r7, r3
 800b990:	9302      	str	r3, [sp, #8]
 800b992:	2312      	movs	r3, #18
 800b994:	18fb      	adds	r3, r7, r3
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	2314      	movs	r3, #20
 800b99a:	18fb      	adds	r3, r7, r3
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	002b      	movs	r3, r5
 800b9a0:	f000 fcb8 	bl	800c314 <sen5x_read_measured_values>
 800b9a4:	0003      	movs	r3, r0
 800b9a6:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800b9a8:	19bb      	adds	r3, r7, r6
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	5e9b      	ldrsh	r3, [r3, r2]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <sen5x_read_measurement+0x56>
    return error;
 800b9b2:	19bb      	adds	r3, r7, r6
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	5e9b      	ldrsh	r3, [r3, r2]
 800b9b8:	e02c      	b.n	800ba14 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800b9ba:	231c      	movs	r3, #28
 800b9bc:	18fb      	adds	r3, r7, r3
 800b9be:	881a      	ldrh	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800b9c4:	231a      	movs	r3, #26
 800b9c6:	18fb      	adds	r3, r7, r3
 800b9c8:	881a      	ldrh	r2, [r3, #0]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800b9ce:	2318      	movs	r3, #24
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	881a      	ldrh	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800b9d8:	2316      	movs	r3, #22
 800b9da:	18fb      	adds	r3, r7, r3
 800b9dc:	881a      	ldrh	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800b9e2:	2314      	movs	r3, #20
 800b9e4:	18fb      	adds	r3, r7, r3
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	5e9a      	ldrsh	r2, [r3, r2]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800b9ee:	2312      	movs	r3, #18
 800b9f0:	18fb      	adds	r3, r7, r3
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	5e9a      	ldrsh	r2, [r3, r2]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800b9fa:	2310      	movs	r3, #16
 800b9fc:	18fb      	adds	r3, r7, r3
 800b9fe:	2200      	movs	r2, #0
 800ba00:	5e9a      	ldrsh	r2, [r3, r2]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800ba06:	230e      	movs	r3, #14
 800ba08:	18fb      	adds	r3, r7, r3
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	5e9a      	ldrsh	r2, [r3, r2]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	81da      	strh	r2, [r3, #14]
  return 0;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	0018      	movs	r0, r3
 800ba16:	46bd      	mov	sp, r7
 800ba18:	b009      	add	sp, #36	@ 0x24
 800ba1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba1c <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800ba20:	4b63      	ldr	r3, [pc, #396]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800ba22:	881b      	ldrh	r3, [r3, #0]
 800ba24:	4a63      	ldr	r2, [pc, #396]	@ (800bbb4 <sen5x_printvalues+0x198>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d013      	beq.n	800ba52 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ba2a:	4b61      	ldr	r3, [pc, #388]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	0018      	movs	r0, r3
 800ba30:	f7f5 fdce 	bl	80015d0 <__aeabi_i2f>
 800ba34:	1c03      	adds	r3, r0, #0
 800ba36:	4960      	ldr	r1, [pc, #384]	@ (800bbb8 <sen5x_printvalues+0x19c>)
 800ba38:	1c18      	adds	r0, r3, #0
 800ba3a:	f7f5 f8cb 	bl	8000bd4 <__aeabi_fdiv>
 800ba3e:	1c03      	adds	r3, r0, #0
 800ba40:	1c18      	adds	r0, r3, #0
 800ba42:	f7f7 fd0f 	bl	8003464 <__aeabi_f2d>
 800ba46:	0002      	movs	r2, r0
 800ba48:	000b      	movs	r3, r1
 800ba4a:	495c      	ldr	r1, [pc, #368]	@ (800bbbc <sen5x_printvalues+0x1a0>)
 800ba4c:	0008      	movs	r0, r1
 800ba4e:	f016 ff21 	bl	8022894 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ba52:	4b57      	ldr	r3, [pc, #348]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800ba54:	885b      	ldrh	r3, [r3, #2]
 800ba56:	4a57      	ldr	r2, [pc, #348]	@ (800bbb4 <sen5x_printvalues+0x198>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d013      	beq.n	800ba84 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ba5c:	4b54      	ldr	r3, [pc, #336]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800ba5e:	885b      	ldrh	r3, [r3, #2]
 800ba60:	0018      	movs	r0, r3
 800ba62:	f7f5 fdb5 	bl	80015d0 <__aeabi_i2f>
 800ba66:	1c03      	adds	r3, r0, #0
 800ba68:	4953      	ldr	r1, [pc, #332]	@ (800bbb8 <sen5x_printvalues+0x19c>)
 800ba6a:	1c18      	adds	r0, r3, #0
 800ba6c:	f7f5 f8b2 	bl	8000bd4 <__aeabi_fdiv>
 800ba70:	1c03      	adds	r3, r0, #0
 800ba72:	1c18      	adds	r0, r3, #0
 800ba74:	f7f7 fcf6 	bl	8003464 <__aeabi_f2d>
 800ba78:	0002      	movs	r2, r0
 800ba7a:	000b      	movs	r3, r1
 800ba7c:	4950      	ldr	r1, [pc, #320]	@ (800bbc0 <sen5x_printvalues+0x1a4>)
 800ba7e:	0008      	movs	r0, r1
 800ba80:	f016 ff08 	bl	8022894 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ba84:	4b4a      	ldr	r3, [pc, #296]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800ba86:	889b      	ldrh	r3, [r3, #4]
 800ba88:	4a4a      	ldr	r2, [pc, #296]	@ (800bbb4 <sen5x_printvalues+0x198>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d013      	beq.n	800bab6 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ba8e:	4b48      	ldr	r3, [pc, #288]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800ba90:	889b      	ldrh	r3, [r3, #4]
 800ba92:	0018      	movs	r0, r3
 800ba94:	f7f5 fd9c 	bl	80015d0 <__aeabi_i2f>
 800ba98:	1c03      	adds	r3, r0, #0
 800ba9a:	4947      	ldr	r1, [pc, #284]	@ (800bbb8 <sen5x_printvalues+0x19c>)
 800ba9c:	1c18      	adds	r0, r3, #0
 800ba9e:	f7f5 f899 	bl	8000bd4 <__aeabi_fdiv>
 800baa2:	1c03      	adds	r3, r0, #0
 800baa4:	1c18      	adds	r0, r3, #0
 800baa6:	f7f7 fcdd 	bl	8003464 <__aeabi_f2d>
 800baaa:	0002      	movs	r2, r0
 800baac:	000b      	movs	r3, r1
 800baae:	4945      	ldr	r1, [pc, #276]	@ (800bbc4 <sen5x_printvalues+0x1a8>)
 800bab0:	0008      	movs	r0, r1
 800bab2:	f016 feef 	bl	8022894 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800bab6:	4b3e      	ldr	r3, [pc, #248]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bab8:	88db      	ldrh	r3, [r3, #6]
 800baba:	4a3e      	ldr	r2, [pc, #248]	@ (800bbb4 <sen5x_printvalues+0x198>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d013      	beq.n	800bae8 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800bac0:	4b3b      	ldr	r3, [pc, #236]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bac2:	88db      	ldrh	r3, [r3, #6]
 800bac4:	0018      	movs	r0, r3
 800bac6:	f7f5 fd83 	bl	80015d0 <__aeabi_i2f>
 800baca:	1c03      	adds	r3, r0, #0
 800bacc:	493a      	ldr	r1, [pc, #232]	@ (800bbb8 <sen5x_printvalues+0x19c>)
 800bace:	1c18      	adds	r0, r3, #0
 800bad0:	f7f5 f880 	bl	8000bd4 <__aeabi_fdiv>
 800bad4:	1c03      	adds	r3, r0, #0
 800bad6:	1c18      	adds	r0, r3, #0
 800bad8:	f7f7 fcc4 	bl	8003464 <__aeabi_f2d>
 800badc:	0002      	movs	r2, r0
 800bade:	000b      	movs	r3, r1
 800bae0:	4939      	ldr	r1, [pc, #228]	@ (800bbc8 <sen5x_printvalues+0x1ac>)
 800bae2:	0008      	movs	r0, r1
 800bae4:	f016 fed6 	bl	8022894 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800bae8:	4b31      	ldr	r3, [pc, #196]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800baea:	2208      	movs	r2, #8
 800baec:	5e9b      	ldrsh	r3, [r3, r2]
 800baee:	4a37      	ldr	r2, [pc, #220]	@ (800bbcc <sen5x_printvalues+0x1b0>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d014      	beq.n	800bb1e <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800baf4:	4b2e      	ldr	r3, [pc, #184]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800baf6:	2208      	movs	r2, #8
 800baf8:	5e9b      	ldrsh	r3, [r3, r2]
 800bafa:	0018      	movs	r0, r3
 800bafc:	f7f5 fd68 	bl	80015d0 <__aeabi_i2f>
 800bb00:	1c03      	adds	r3, r0, #0
 800bb02:	4933      	ldr	r1, [pc, #204]	@ (800bbd0 <sen5x_printvalues+0x1b4>)
 800bb04:	1c18      	adds	r0, r3, #0
 800bb06:	f7f5 f865 	bl	8000bd4 <__aeabi_fdiv>
 800bb0a:	1c03      	adds	r3, r0, #0
 800bb0c:	1c18      	adds	r0, r3, #0
 800bb0e:	f7f7 fca9 	bl	8003464 <__aeabi_f2d>
 800bb12:	0002      	movs	r2, r0
 800bb14:	000b      	movs	r3, r1
 800bb16:	492f      	ldr	r1, [pc, #188]	@ (800bbd4 <sen5x_printvalues+0x1b8>)
 800bb18:	0008      	movs	r0, r1
 800bb1a:	f016 febb 	bl	8022894 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800bb1e:	4b24      	ldr	r3, [pc, #144]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bb20:	220a      	movs	r2, #10
 800bb22:	5e9b      	ldrsh	r3, [r3, r2]
 800bb24:	4a29      	ldr	r2, [pc, #164]	@ (800bbcc <sen5x_printvalues+0x1b0>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d014      	beq.n	800bb54 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800bb2a:	4b21      	ldr	r3, [pc, #132]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bb2c:	220a      	movs	r2, #10
 800bb2e:	5e9b      	ldrsh	r3, [r3, r2]
 800bb30:	0018      	movs	r0, r3
 800bb32:	f7f5 fd4d 	bl	80015d0 <__aeabi_i2f>
 800bb36:	1c03      	adds	r3, r0, #0
 800bb38:	4927      	ldr	r1, [pc, #156]	@ (800bbd8 <sen5x_printvalues+0x1bc>)
 800bb3a:	1c18      	adds	r0, r3, #0
 800bb3c:	f7f5 f84a 	bl	8000bd4 <__aeabi_fdiv>
 800bb40:	1c03      	adds	r3, r0, #0
 800bb42:	1c18      	adds	r0, r3, #0
 800bb44:	f7f7 fc8e 	bl	8003464 <__aeabi_f2d>
 800bb48:	0002      	movs	r2, r0
 800bb4a:	000b      	movs	r3, r1
 800bb4c:	4923      	ldr	r1, [pc, #140]	@ (800bbdc <sen5x_printvalues+0x1c0>)
 800bb4e:	0008      	movs	r0, r1
 800bb50:	f016 fea0 	bl	8022894 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800bb54:	4b16      	ldr	r3, [pc, #88]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bb56:	220c      	movs	r2, #12
 800bb58:	5e9b      	ldrsh	r3, [r3, r2]
 800bb5a:	4a1c      	ldr	r2, [pc, #112]	@ (800bbcc <sen5x_printvalues+0x1b0>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d00e      	beq.n	800bb7e <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800bb60:	4b13      	ldr	r3, [pc, #76]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bb62:	220c      	movs	r2, #12
 800bb64:	5e9b      	ldrsh	r3, [r3, r2]
 800bb66:	210a      	movs	r1, #10
 800bb68:	0018      	movs	r0, r3
 800bb6a:	f7f4 fba5 	bl	80002b8 <__divsi3>
 800bb6e:	0003      	movs	r3, r0
 800bb70:	b21b      	sxth	r3, r3
 800bb72:	001a      	movs	r2, r3
 800bb74:	4b1a      	ldr	r3, [pc, #104]	@ (800bbe0 <sen5x_printvalues+0x1c4>)
 800bb76:	0011      	movs	r1, r2
 800bb78:	0018      	movs	r0, r3
 800bb7a:	f016 fe8b 	bl	8022894 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800bb7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bb80:	220e      	movs	r2, #14
 800bb82:	5e9b      	ldrsh	r3, [r3, r2]
 800bb84:	4a11      	ldr	r2, [pc, #68]	@ (800bbcc <sen5x_printvalues+0x1b0>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00e      	beq.n	800bba8 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800bb8a:	4b09      	ldr	r3, [pc, #36]	@ (800bbb0 <sen5x_printvalues+0x194>)
 800bb8c:	220e      	movs	r2, #14
 800bb8e:	5e9b      	ldrsh	r3, [r3, r2]
 800bb90:	210a      	movs	r1, #10
 800bb92:	0018      	movs	r0, r3
 800bb94:	f7f4 fb90 	bl	80002b8 <__divsi3>
 800bb98:	0003      	movs	r3, r0
 800bb9a:	b21b      	sxth	r3, r3
 800bb9c:	001a      	movs	r2, r3
 800bb9e:	4b11      	ldr	r3, [pc, #68]	@ (800bbe4 <sen5x_printvalues+0x1c8>)
 800bba0:	0011      	movs	r1, r2
 800bba2:	0018      	movs	r0, r3
 800bba4:	f016 fe76 	bl	8022894 <iprintf>
  }
}
 800bba8:	46c0      	nop			@ (mov r8, r8)
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	46c0      	nop			@ (mov r8, r8)
 800bbb0:	20000e5c 	.word	0x20000e5c
 800bbb4:	0000ffff 	.word	0x0000ffff
 800bbb8:	41200000 	.word	0x41200000
 800bbbc:	08028380 	.word	0x08028380
 800bbc0:	080283ac 	.word	0x080283ac
 800bbc4:	080283d8 	.word	0x080283d8
 800bbc8:	08028404 	.word	0x08028404
 800bbcc:	00007fff 	.word	0x00007fff
 800bbd0:	42c80000 	.word	0x42c80000
 800bbd4:	08028430 	.word	0x08028430
 800bbd8:	43480000 	.word	0x43480000
 800bbdc:	08028454 	.word	0x08028454
 800bbe0:	0802847c 	.word	0x0802847c
 800bbe4:	08028494 	.word	0x08028494

0800bbe8 <sen5xStore>:

void sen5xStore() {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800bbec:	4b2e      	ldr	r3, [pc, #184]	@ (800bca8 <sen5xStore+0xc0>)
 800bbee:	885b      	ldrh	r3, [r3, #2]
 800bbf0:	4a2e      	ldr	r2, [pc, #184]	@ (800bcac <sen5xStore+0xc4>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d004      	beq.n	800bc00 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800bbf6:	4b2c      	ldr	r3, [pc, #176]	@ (800bca8 <sen5xStore+0xc0>)
 800bbf8:	885b      	ldrh	r3, [r3, #2]
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f7f7 fe30 	bl	8003860 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800bc00:	4b29      	ldr	r3, [pc, #164]	@ (800bca8 <sen5xStore+0xc0>)
 800bc02:	88db      	ldrh	r3, [r3, #6]
 800bc04:	4a29      	ldr	r2, [pc, #164]	@ (800bcac <sen5xStore+0xc4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d004      	beq.n	800bc14 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800bc0a:	4b27      	ldr	r3, [pc, #156]	@ (800bca8 <sen5xStore+0xc0>)
 800bc0c:	88db      	ldrh	r3, [r3, #6]
 800bc0e:	0018      	movs	r0, r3
 800bc10:	f7f7 fe52 	bl	80038b8 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800bc14:	4b26      	ldr	r3, [pc, #152]	@ (800bcb0 <sen5xStore+0xc8>)
 800bc16:	791b      	ldrb	r3, [r3, #4]
 800bc18:	2b34      	cmp	r3, #52	@ 0x34
 800bc1a:	d003      	beq.n	800bc24 <sen5xStore+0x3c>
 800bc1c:	4b24      	ldr	r3, [pc, #144]	@ (800bcb0 <sen5xStore+0xc8>)
 800bc1e:	791b      	ldrb	r3, [r3, #4]
 800bc20:	2b35      	cmp	r3, #53	@ 0x35
 800bc22:	d13d      	bne.n	800bca0 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800bc24:	4b23      	ldr	r3, [pc, #140]	@ (800bcb4 <sen5xStore+0xcc>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	4053      	eors	r3, r2
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d103      	bne.n	800bc3a <sen5xStore+0x52>
 800bc32:	4b21      	ldr	r3, [pc, #132]	@ (800bcb8 <sen5xStore+0xd0>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d032      	beq.n	800bca0 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800bc3a:	4b1b      	ldr	r3, [pc, #108]	@ (800bca8 <sen5xStore+0xc0>)
 800bc3c:	220c      	movs	r2, #12
 800bc3e:	5e9b      	ldrsh	r3, [r3, r2]
 800bc40:	4a1e      	ldr	r2, [pc, #120]	@ (800bcbc <sen5xStore+0xd4>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d019      	beq.n	800bc7a <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800bc46:	4b18      	ldr	r3, [pc, #96]	@ (800bca8 <sen5xStore+0xc0>)
 800bc48:	220c      	movs	r2, #12
 800bc4a:	5e9b      	ldrsh	r3, [r3, r2]
 800bc4c:	210a      	movs	r1, #10
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f7f4 fb32 	bl	80002b8 <__divsi3>
 800bc54:	0003      	movs	r3, r0
 800bc56:	b21b      	sxth	r3, r3
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	f003 fe42 	bl	800f8e4 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800bc60:	4b11      	ldr	r3, [pc, #68]	@ (800bca8 <sen5xStore+0xc0>)
 800bc62:	220c      	movs	r2, #12
 800bc64:	5e9b      	ldrsh	r3, [r3, r2]
 800bc66:	210a      	movs	r1, #10
 800bc68:	0018      	movs	r0, r3
 800bc6a:	f7f4 fb25 	bl	80002b8 <__divsi3>
 800bc6e:	0003      	movs	r3, r0
 800bc70:	b21b      	sxth	r3, r3
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	0018      	movs	r0, r3
 800bc76:	f7f7 fda9 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800bc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bca8 <sen5xStore+0xc0>)
 800bc7c:	220e      	movs	r2, #14
 800bc7e:	5e9b      	ldrsh	r3, [r3, r2]
 800bc80:	4a0e      	ldr	r2, [pc, #56]	@ (800bcbc <sen5xStore+0xd4>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d00c      	beq.n	800bca0 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800bc86:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <sen5xStore+0xc0>)
 800bc88:	220e      	movs	r2, #14
 800bc8a:	5e9b      	ldrsh	r3, [r3, r2]
 800bc8c:	210a      	movs	r1, #10
 800bc8e:	0018      	movs	r0, r3
 800bc90:	f7f4 fb12 	bl	80002b8 <__divsi3>
 800bc94:	0003      	movs	r3, r0
 800bc96:	b21b      	sxth	r3, r3
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f7f7 fe38 	bl	8003910 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800bca0:	46c0      	nop			@ (mov r8, r8)
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	46c0      	nop			@ (mov r8, r8)
 800bca8:	20000e5c 	.word	0x20000e5c
 800bcac:	0000ffff 	.word	0x0000ffff
 800bcb0:	20000e4c 	.word	0x20000e4c
 800bcb4:	20000e4a 	.word	0x20000e4a
 800bcb8:	20001dd9 	.word	0x20001dd9
 800bcbc:	00007fff 	.word	0x00007fff

0800bcc0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800bcc0:	b590      	push	{r4, r7, lr}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af02      	add	r7, sp, #8
 800bcc6:	6039      	str	r1, [r7, #0]
 800bcc8:	0011      	movs	r1, r2
 800bcca:	1dfb      	adds	r3, r7, #7
 800bccc:	1c02      	adds	r2, r0, #0
 800bcce:	701a      	strb	r2, [r3, #0]
 800bcd0:	1d3b      	adds	r3, r7, #4
 800bcd2:	1c0a      	adds	r2, r1, #0
 800bcd4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800bcd6:	1dfb      	adds	r3, r7, #7
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	18db      	adds	r3, r3, r3
 800bcde:	b299      	uxth	r1, r3
 800bce0:	1d3b      	adds	r3, r7, #4
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	4805      	ldr	r0, [pc, #20]	@ (800bcfc <sensirion_i2c_hal_read+0x3c>)
 800bce8:	2464      	movs	r4, #100	@ 0x64
 800bcea:	9400      	str	r4, [sp, #0]
 800bcec:	f006 fefe 	bl	8012aec <HAL_I2C_Master_Receive>
 800bcf0:	0003      	movs	r3, r0
 800bcf2:	b25b      	sxtb	r3, r3
}
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	b003      	add	sp, #12
 800bcfa:	bd90      	pop	{r4, r7, pc}
 800bcfc:	20000c20 	.word	0x20000c20

0800bd00 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800bd00:	b590      	push	{r4, r7, lr}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af02      	add	r7, sp, #8
 800bd06:	6039      	str	r1, [r7, #0]
 800bd08:	0011      	movs	r1, r2
 800bd0a:	1dfb      	adds	r3, r7, #7
 800bd0c:	1c02      	adds	r2, r0, #0
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	1d3b      	adds	r3, r7, #4
 800bd12:	1c0a      	adds	r2, r1, #0
 800bd14:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800bd16:	1dfb      	adds	r3, r7, #7
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	18db      	adds	r3, r3, r3
 800bd1e:	b299      	uxth	r1, r3
 800bd20:	1d3b      	adds	r3, r7, #4
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	4805      	ldr	r0, [pc, #20]	@ (800bd3c <sensirion_i2c_hal_write+0x3c>)
 800bd28:	2464      	movs	r4, #100	@ 0x64
 800bd2a:	9400      	str	r4, [sp, #0]
 800bd2c:	f006 fdd6 	bl	80128dc <HAL_I2C_Master_Transmit>
 800bd30:	0003      	movs	r3, r0
 800bd32:	b25b      	sxtb	r3, r3
}
 800bd34:	0018      	movs	r0, r3
 800bd36:	46bd      	mov	sp, r7
 800bd38:	b003      	add	sp, #12
 800bd3a:	bd90      	pop	{r4, r7, pc}
 800bd3c:	20000c20 	.word	0x20000c20

0800bd40 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	22fa      	movs	r2, #250	@ 0xfa
 800bd4c:	0091      	lsls	r1, r2, #2
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f7f4 fa28 	bl	80001a4 <__udivsi3>
 800bd54:	0003      	movs	r3, r0
 800bd56:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	22fa      	movs	r2, #250	@ 0xfa
 800bd5c:	0091      	lsls	r1, r2, #2
 800bd5e:	0018      	movs	r0, r3
 800bd60:	f7f4 faa6 	bl	80002b0 <__aeabi_uidivmod>
 800bd64:	1e0b      	subs	r3, r1, #0
 800bd66:	d002      	beq.n	800bd6e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	0018      	movs	r0, r3
 800bd72:	f005 fa5d 	bl	8011230 <HAL_Delay>
}
 800bd76:	46c0      	nop			@ (mov r8, r8)
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	b004      	add	sp, #16
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800bd8a:	1d3b      	adds	r3, r7, #4
 800bd8c:	0018      	movs	r0, r3
 800bd8e:	f000 fd01 	bl	800c794 <sen5x_read_device_status>
 800bd92:	1e03      	subs	r3, r0, #0
 800bd94:	d007      	beq.n	800bda6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800bd96:	4a28      	ldr	r2, [pc, #160]	@ (800be38 <sen5x_check_for_errors+0xb8>)
 800bd98:	4b28      	ldr	r3, [pc, #160]	@ (800be3c <sen5x_check_for_errors+0xbc>)
 800bd9a:	0019      	movs	r1, r3
 800bd9c:	2001      	movs	r0, #1
 800bd9e:	f004 fdf1 	bl	8010984 <CreateLine>
    return true;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e043      	b.n	800be2e <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <sen5x_check_for_errors+0x30>
    return false;
 800bdac:	2300      	movs	r3, #0
 800bdae:	e03e      	b.n	800be2e <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	2380      	movs	r3, #128	@ 0x80
 800bdb4:	039b      	lsls	r3, r3, #14
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	d005      	beq.n	800bdc6 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800bdba:	4a21      	ldr	r2, [pc, #132]	@ (800be40 <sen5x_check_for_errors+0xc0>)
 800bdbc:	4b21      	ldr	r3, [pc, #132]	@ (800be44 <sen5x_check_for_errors+0xc4>)
 800bdbe:	0019      	movs	r1, r3
 800bdc0:	2003      	movs	r0, #3
 800bdc2:	f004 fddf 	bl	8010984 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	2380      	movs	r3, #128	@ 0x80
 800bdca:	031b      	lsls	r3, r3, #12
 800bdcc:	4013      	ands	r3, r2
 800bdce:	d005      	beq.n	800bddc <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800bdd0:	4a1d      	ldr	r2, [pc, #116]	@ (800be48 <sen5x_check_for_errors+0xc8>)
 800bdd2:	4b1c      	ldr	r3, [pc, #112]	@ (800be44 <sen5x_check_for_errors+0xc4>)
 800bdd4:	0019      	movs	r1, r3
 800bdd6:	2003      	movs	r0, #3
 800bdd8:	f004 fdd4 	bl	8010984 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2280      	movs	r2, #128	@ 0x80
 800bde0:	4013      	ands	r3, r2
 800bde2:	d005      	beq.n	800bdf0 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800bde4:	4a19      	ldr	r2, [pc, #100]	@ (800be4c <sen5x_check_for_errors+0xcc>)
 800bde6:	4b17      	ldr	r3, [pc, #92]	@ (800be44 <sen5x_check_for_errors+0xc4>)
 800bde8:	0019      	movs	r1, r3
 800bdea:	2003      	movs	r0, #3
 800bdec:	f004 fdca 	bl	8010984 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2240      	movs	r2, #64	@ 0x40
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	d005      	beq.n	800be04 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800bdf8:	4a15      	ldr	r2, [pc, #84]	@ (800be50 <sen5x_check_for_errors+0xd0>)
 800bdfa:	4b12      	ldr	r3, [pc, #72]	@ (800be44 <sen5x_check_for_errors+0xc4>)
 800bdfc:	0019      	movs	r1, r3
 800bdfe:	2003      	movs	r0, #3
 800be00:	f004 fdc0 	bl	8010984 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2220      	movs	r2, #32
 800be08:	4013      	ands	r3, r2
 800be0a:	d005      	beq.n	800be18 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800be0c:	4a11      	ldr	r2, [pc, #68]	@ (800be54 <sen5x_check_for_errors+0xd4>)
 800be0e:	4b0d      	ldr	r3, [pc, #52]	@ (800be44 <sen5x_check_for_errors+0xc4>)
 800be10:	0019      	movs	r1, r3
 800be12:	2003      	movs	r0, #3
 800be14:	f004 fdb6 	bl	8010984 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2210      	movs	r2, #16
 800be1c:	4013      	ands	r3, r2
 800be1e:	d005      	beq.n	800be2c <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800be20:	4a0d      	ldr	r2, [pc, #52]	@ (800be58 <sen5x_check_for_errors+0xd8>)
 800be22:	4b08      	ldr	r3, [pc, #32]	@ (800be44 <sen5x_check_for_errors+0xc4>)
 800be24:	0019      	movs	r1, r3
 800be26:	2003      	movs	r0, #3
 800be28:	f004 fdac 	bl	8010984 <CreateLine>
  }
  return 1;
 800be2c:	2301      	movs	r3, #1
}
 800be2e:	0018      	movs	r0, r3
 800be30:	46bd      	mov	sp, r7
 800be32:	b002      	add	sp, #8
 800be34:	bd80      	pop	{r7, pc}
 800be36:	46c0      	nop			@ (mov r8, r8)
 800be38:	080284ac 	.word	0x080284ac
 800be3c:	08028030 	.word	0x08028030
 800be40:	080284d8 	.word	0x080284d8
 800be44:	08028004 	.word	0x08028004
 800be48:	080284f8 	.word	0x080284f8
 800be4c:	08028514 	.word	0x08028514
 800be50:	08028538 	.word	0x08028538
 800be54:	08028558 	.word	0x08028558
 800be58:	0802856c 	.word	0x0802856c

0800be5c <set_light_on_state>:

void set_light_on_state(void) {
 800be5c:	b580      	push	{r7, lr}
 800be5e:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800be60:	4b15      	ldr	r3, [pc, #84]	@ (800beb8 <set_light_on_state+0x5c>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2201      	movs	r2, #1
 800be66:	4053      	eors	r3, r2
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d008      	beq.n	800be80 <set_light_on_state+0x24>
    sen5x_Power_On();
 800be6e:	f7ff fb43 	bl	800b4f8 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800be72:	4a12      	ldr	r2, [pc, #72]	@ (800bebc <set_light_on_state+0x60>)
 800be74:	4b12      	ldr	r3, [pc, #72]	@ (800bec0 <set_light_on_state+0x64>)
 800be76:	0019      	movs	r1, r3
 800be78:	2003      	movs	r0, #3
 800be7a:	f004 fd83 	bl	8010984 <CreateLine>
 800be7e:	e00a      	b.n	800be96 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800be80:	f005 f9cc 	bl	801121c <HAL_GetTick>
 800be84:	0002      	movs	r2, r0
 800be86:	4b0f      	ldr	r3, [pc, #60]	@ (800bec4 <set_light_on_state+0x68>)
 800be88:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800be8a:	4a0f      	ldr	r2, [pc, #60]	@ (800bec8 <set_light_on_state+0x6c>)
 800be8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bec0 <set_light_on_state+0x64>)
 800be8e:	0019      	movs	r1, r3
 800be90:	2003      	movs	r0, #3
 800be92:	f004 fd77 	bl	8010984 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800be96:	f7ff fcbf 	bl	800b818 <sen5x_lightup_measurement>
 800be9a:	1e03      	subs	r3, r0, #0
 800be9c:	d005      	beq.n	800beaa <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800be9e:	4a0b      	ldr	r2, [pc, #44]	@ (800becc <set_light_on_state+0x70>)
 800bea0:	4b0b      	ldr	r3, [pc, #44]	@ (800bed0 <set_light_on_state+0x74>)
 800bea2:	0019      	movs	r1, r3
 800bea4:	2001      	movs	r0, #1
 800bea6:	f004 fd6d 	bl	8010984 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800beaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bed4 <set_light_on_state+0x78>)
 800beac:	2203      	movs	r2, #3
 800beae:	701a      	strb	r2, [r3, #0]
}
 800beb0:	46c0      	nop			@ (mov r8, r8)
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	46c0      	nop			@ (mov r8, r8)
 800beb8:	20000e49 	.word	0x20000e49
 800bebc:	080285a8 	.word	0x080285a8
 800bec0:	08028004 	.word	0x08028004
 800bec4:	20000e58 	.word	0x20000e58
 800bec8:	080285d4 	.word	0x080285d4
 800becc:	080285ec 	.word	0x080285ec
 800bed0:	08028030 	.word	0x08028030
 800bed4:	200000a1 	.word	0x200000a1

0800bed8 <sen5x_statemachine>:

void sen5x_statemachine() {
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800bede:	1dfb      	adds	r3, r7, #7
 800bee0:	2200      	movs	r2, #0
 800bee2:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800bee4:	4b86      	ldr	r3, [pc, #536]	@ (800c100 <sen5x_statemachine+0x228>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	0018      	movs	r0, r3
 800beea:	f004 fcf5 	bl	80108d8 <TimestampIsReached>
 800beee:	1e03      	subs	r3, r0, #0
 800bef0:	d100      	bne.n	800bef4 <sen5x_statemachine+0x1c>
 800bef2:	e100      	b.n	800c0f6 <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800bef4:	4b83      	ldr	r3, [pc, #524]	@ (800c104 <sen5x_statemachine+0x22c>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b05      	cmp	r3, #5
 800befa:	d900      	bls.n	800befe <sen5x_statemachine+0x26>
 800befc:	e0fb      	b.n	800c0f6 <sen5x_statemachine+0x21e>
 800befe:	009a      	lsls	r2, r3, #2
 800bf00:	4b81      	ldr	r3, [pc, #516]	@ (800c108 <sen5x_statemachine+0x230>)
 800bf02:	18d3      	adds	r3, r2, r3
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800bf08:	4a80      	ldr	r2, [pc, #512]	@ (800c10c <sen5x_statemachine+0x234>)
 800bf0a:	4b81      	ldr	r3, [pc, #516]	@ (800c110 <sen5x_statemachine+0x238>)
 800bf0c:	0019      	movs	r1, r3
 800bf0e:	2001      	movs	r0, #1
 800bf10:	f004 fd38 	bl	8010984 <CreateLine>
      SetPMSensorStatus(false);
 800bf14:	2000      	movs	r0, #0
 800bf16:	f7fe fb87 	bl	800a628 <SetPMSensorStatus>
      DisablePMSensor();
 800bf1a:	f7fe fb1d 	bl	800a558 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800bf1e:	f005 f97d 	bl	801121c <HAL_GetTick>
 800bf22:	0003      	movs	r3, r0
 800bf24:	4a7b      	ldr	r2, [pc, #492]	@ (800c114 <sen5x_statemachine+0x23c>)
 800bf26:	189a      	adds	r2, r3, r2
 800bf28:	4b75      	ldr	r3, [pc, #468]	@ (800c100 <sen5x_statemachine+0x228>)
 800bf2a:	601a      	str	r2, [r3, #0]
      break;
 800bf2c:	e0e3      	b.n	800c0f6 <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800bf2e:	f005 f975 	bl	801121c <HAL_GetTick>
 800bf32:	0003      	movs	r3, r0
 800bf34:	4a78      	ldr	r2, [pc, #480]	@ (800c118 <sen5x_statemachine+0x240>)
 800bf36:	189a      	adds	r2, r3, r2
 800bf38:	4b71      	ldr	r3, [pc, #452]	@ (800c100 <sen5x_statemachine+0x228>)
 800bf3a:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800bf3c:	f7ff ff8e 	bl	800be5c <set_light_on_state>
      break;
 800bf40:	e0d9      	b.n	800c0f6 <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800bf42:	4b70      	ldr	r3, [pc, #448]	@ (800c104 <sen5x_statemachine+0x22c>)
 800bf44:	2202      	movs	r2, #2
 800bf46:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800bf48:	4b74      	ldr	r3, [pc, #464]	@ (800c11c <sen5x_statemachine+0x244>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	2b05      	cmp	r3, #5
 800bf4e:	d905      	bls.n	800bf5c <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800bf50:	4b6c      	ldr	r3, [pc, #432]	@ (800c104 <sen5x_statemachine+0x22c>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800bf56:	f7ff faff 	bl	800b558 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800bf5a:	e0c9      	b.n	800c0f0 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800bf5c:	f7ff ff10 	bl	800bd80 <sen5x_check_for_errors>
 800bf60:	1e03      	subs	r3, r0, #0
 800bf62:	d01f      	beq.n	800bfa4 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800bf64:	f000 fc68 	bl	800c838 <sen5x_device_reset>
 800bf68:	1e03      	subs	r3, r0, #0
 800bf6a:	d00f      	beq.n	800bf8c <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800bf6c:	4a6c      	ldr	r2, [pc, #432]	@ (800c120 <sen5x_statemachine+0x248>)
 800bf6e:	4b68      	ldr	r3, [pc, #416]	@ (800c110 <sen5x_statemachine+0x238>)
 800bf70:	0019      	movs	r1, r3
 800bf72:	2001      	movs	r0, #1
 800bf74:	f004 fd06 	bl	8010984 <CreateLine>
            sen5xErrors++;
 800bf78:	4b68      	ldr	r3, [pc, #416]	@ (800c11c <sen5x_statemachine+0x244>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	4b66      	ldr	r3, [pc, #408]	@ (800c11c <sen5x_statemachine+0x244>)
 800bf82:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800bf84:	4b5f      	ldr	r3, [pc, #380]	@ (800c104 <sen5x_statemachine+0x22c>)
 800bf86:	2203      	movs	r2, #3
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	e005      	b.n	800bf98 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800bf8c:	4a65      	ldr	r2, [pc, #404]	@ (800c124 <sen5x_statemachine+0x24c>)
 800bf8e:	4b66      	ldr	r3, [pc, #408]	@ (800c128 <sen5x_statemachine+0x250>)
 800bf90:	0019      	movs	r1, r3
 800bf92:	2002      	movs	r0, #2
 800bf94:	f004 fcf6 	bl	8010984 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800bf98:	f005 f940 	bl	801121c <HAL_GetTick>
 800bf9c:	0002      	movs	r2, r0
 800bf9e:	4b58      	ldr	r3, [pc, #352]	@ (800c100 <sen5x_statemachine+0x228>)
 800bfa0:	601a      	str	r2, [r3, #0]
      break;
 800bfa2:	e0a5      	b.n	800c0f0 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800bfa4:	4b5d      	ldr	r3, [pc, #372]	@ (800c11c <sen5x_statemachine+0x244>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d100      	bne.n	800bfae <sen5x_statemachine+0xd6>
 800bfac:	e0a0      	b.n	800c0f0 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800bfae:	4b5b      	ldr	r3, [pc, #364]	@ (800c11c <sen5x_statemachine+0x244>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800bfb4:	4a5d      	ldr	r2, [pc, #372]	@ (800c12c <sen5x_statemachine+0x254>)
 800bfb6:	4b5e      	ldr	r3, [pc, #376]	@ (800c130 <sen5x_statemachine+0x258>)
 800bfb8:	0019      	movs	r1, r3
 800bfba:	2003      	movs	r0, #3
 800bfbc:	f004 fce2 	bl	8010984 <CreateLine>
      break;
 800bfc0:	e096      	b.n	800c0f0 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800bfc2:	1dfb      	adds	r3, r7, #7
 800bfc4:	0018      	movs	r0, r3
 800bfc6:	f000 f953 	bl	800c270 <sen5x_read_data_ready>
      if (data_ready) {
 800bfca:	1dfb      	adds	r3, r7, #7
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d02c      	beq.n	800c02c <sen5x_statemachine+0x154>
        SetPMIndicator();
 800bfd2:	f003 fbe7 	bl	800f7a4 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800bfd6:	4b57      	ldr	r3, [pc, #348]	@ (800c134 <sen5x_statemachine+0x25c>)
 800bfd8:	0018      	movs	r0, r3
 800bfda:	f7ff fcc3 	bl	800b964 <sen5x_read_measurement>
 800bfde:	1e03      	subs	r3, r0, #0
 800bfe0:	d00b      	beq.n	800bffa <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800bfe2:	4a55      	ldr	r2, [pc, #340]	@ (800c138 <sen5x_statemachine+0x260>)
 800bfe4:	4b4a      	ldr	r3, [pc, #296]	@ (800c110 <sen5x_statemachine+0x238>)
 800bfe6:	0019      	movs	r1, r3
 800bfe8:	2001      	movs	r0, #1
 800bfea:	f004 fccb 	bl	8010984 <CreateLine>
          sen5xErrors++;
 800bfee:	4b4b      	ldr	r3, [pc, #300]	@ (800c11c <sen5x_statemachine+0x244>)
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	3301      	adds	r3, #1
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	4b49      	ldr	r3, [pc, #292]	@ (800c11c <sen5x_statemachine+0x244>)
 800bff8:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800bffa:	4b50      	ldr	r3, [pc, #320]	@ (800c13c <sen5x_statemachine+0x264>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	3301      	adds	r3, #1
 800c000:	b2da      	uxtb	r2, r3
 800c002:	4b4e      	ldr	r3, [pc, #312]	@ (800c13c <sen5x_statemachine+0x264>)
 800c004:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800c006:	4b4d      	ldr	r3, [pc, #308]	@ (800c13c <sen5x_statemachine+0x264>)
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2b1f      	cmp	r3, #31
 800c00c:	d102      	bne.n	800c014 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800c00e:	4b4b      	ldr	r3, [pc, #300]	@ (800c13c <sen5x_statemachine+0x264>)
 800c010:	2200      	movs	r2, #0
 800c012:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800c014:	4b49      	ldr	r3, [pc, #292]	@ (800c13c <sen5x_statemachine+0x264>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d901      	bls.n	800c020 <sen5x_statemachine+0x148>
          sen5xStore();
 800c01c:	f7ff fde4 	bl	800bbe8 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800c020:	4b46      	ldr	r3, [pc, #280]	@ (800c13c <sen5x_statemachine+0x264>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d101      	bne.n	800c02c <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800c028:	f7ff fcf8 	bl	800ba1c <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800c02c:	4b44      	ldr	r3, [pc, #272]	@ (800c140 <sen5x_statemachine+0x268>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d103      	bne.n	800c03c <sen5x_statemachine+0x164>
 800c034:	4b41      	ldr	r3, [pc, #260]	@ (800c13c <sen5x_statemachine+0x264>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d95b      	bls.n	800c0f4 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800c03c:	4b31      	ldr	r3, [pc, #196]	@ (800c104 <sen5x_statemachine+0x22c>)
 800c03e:	2204      	movs	r2, #4
 800c040:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c042:	e057      	b.n	800c0f4 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800c044:	f7fb fac4 	bl	80075d0 <RTC_GetWeekday>
 800c048:	0003      	movs	r3, r0
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d11a      	bne.n	800c084 <sen5x_statemachine+0x1ac>
 800c04e:	4b3d      	ldr	r3, [pc, #244]	@ (800c144 <sen5x_statemachine+0x26c>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2201      	movs	r2, #1
 800c054:	4053      	eors	r3, r2
 800c056:	b2db      	uxtb	r3, r3
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d013      	beq.n	800c084 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800c05c:	f000 f9ee 	bl	800c43c <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800c060:	4a39      	ldr	r2, [pc, #228]	@ (800c148 <sen5x_statemachine+0x270>)
 800c062:	4b31      	ldr	r3, [pc, #196]	@ (800c128 <sen5x_statemachine+0x250>)
 800c064:	0019      	movs	r1, r3
 800c066:	2002      	movs	r0, #2
 800c068:	f004 fc8c 	bl	8010984 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800c06c:	f005 f8d6 	bl	801121c <HAL_GetTick>
 800c070:	0003      	movs	r3, r0
 800c072:	4a36      	ldr	r2, [pc, #216]	@ (800c14c <sen5x_statemachine+0x274>)
 800c074:	189a      	adds	r2, r3, r2
 800c076:	4b22      	ldr	r3, [pc, #136]	@ (800c100 <sen5x_statemachine+0x228>)
 800c078:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800c07a:	4b32      	ldr	r3, [pc, #200]	@ (800c144 <sen5x_statemachine+0x26c>)
 800c07c:	2201      	movs	r2, #1
 800c07e:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800c080:	f7ff fbca 	bl	800b818 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800c084:	4b1f      	ldr	r3, [pc, #124]	@ (800c104 <sen5x_statemachine+0x22c>)
 800c086:	2205      	movs	r2, #5
 800c088:	701a      	strb	r2, [r3, #0]
      break;
 800c08a:	e034      	b.n	800c0f6 <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800c08c:	4b2c      	ldr	r3, [pc, #176]	@ (800c140 <sen5x_statemachine+0x268>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2201      	movs	r2, #1
 800c092:	4053      	eors	r3, r2
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d01c      	beq.n	800c0d4 <sen5x_statemachine+0x1fc>
 800c09a:	4b2d      	ldr	r3, [pc, #180]	@ (800c150 <sen5x_statemachine+0x278>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	4053      	eors	r3, r2
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d015      	beq.n	800c0d4 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800c0a8:	f7ff fc02 	bl	800b8b0 <sen5x_extinguish_measurement>
 800c0ac:	1e03      	subs	r3, r0, #0
 800c0ae:	d005      	beq.n	800c0bc <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800c0b0:	4a28      	ldr	r2, [pc, #160]	@ (800c154 <sen5x_statemachine+0x27c>)
 800c0b2:	4b17      	ldr	r3, [pc, #92]	@ (800c110 <sen5x_statemachine+0x238>)
 800c0b4:	0019      	movs	r1, r3
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	f004 fc64 	bl	8010984 <CreateLine>
        }
        sen5xSamples = 0;
 800c0bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c13c <sen5x_statemachine+0x264>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800c0c2:	f7ff fa49 	bl	800b558 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f7fe faae 	bl	800a628 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800c0cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c104 <sen5x_statemachine+0x22c>)
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	e002      	b.n	800c0da <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800c0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c104 <sen5x_statemachine+0x22c>)
 800c0d6:	2203      	movs	r2, #3
 800c0d8:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800c0da:	f003 fb89 	bl	800f7f0 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800c0de:	f005 f89d 	bl	801121c <HAL_GetTick>
 800c0e2:	0003      	movs	r3, r0
 800c0e4:	22fa      	movs	r2, #250	@ 0xfa
 800c0e6:	0092      	lsls	r2, r2, #2
 800c0e8:	189a      	adds	r2, r3, r2
 800c0ea:	4b05      	ldr	r3, [pc, #20]	@ (800c100 <sen5x_statemachine+0x228>)
 800c0ec:	601a      	str	r2, [r3, #0]
    }
  }
}
 800c0ee:	e002      	b.n	800c0f6 <sen5x_statemachine+0x21e>
      break;
 800c0f0:	46c0      	nop			@ (mov r8, r8)
 800c0f2:	e000      	b.n	800c0f6 <sen5x_statemachine+0x21e>
      break;
 800c0f4:	46c0      	nop			@ (mov r8, r8)
}
 800c0f6:	46c0      	nop			@ (mov r8, r8)
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	b002      	add	sp, #8
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	46c0      	nop			@ (mov r8, r8)
 800c100:	20000e58 	.word	0x20000e58
 800c104:	200000a1 	.word	0x200000a1
 800c108:	08029044 	.word	0x08029044
 800c10c:	08028618 	.word	0x08028618
 800c110:	08028030 	.word	0x08028030
 800c114:	002fefd8 	.word	0x002fefd8
 800c118:	00005910 	.word	0x00005910
 800c11c:	20000e55 	.word	0x20000e55
 800c120:	08028648 	.word	0x08028648
 800c124:	08028660 	.word	0x08028660
 800c128:	08027fc4 	.word	0x08027fc4
 800c12c:	08028678 	.word	0x08028678
 800c130:	08028004 	.word	0x08028004
 800c134:	20000e5c 	.word	0x20000e5c
 800c138:	0802868c 	.word	0x0802868c
 800c13c:	20000e54 	.word	0x20000e54
 800c140:	20001dd9 	.word	0x20001dd9
 800c144:	20000e48 	.word	0x20000e48
 800c148:	080286bc 	.word	0x080286bc
 800c14c:	00002710 	.word	0x00002710
 800c150:	20001dda 	.word	0x20001dda
 800c154:	080286d4 	.word	0x080286d4

0800c158 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800c158:	b590      	push	{r4, r7, lr}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c15e:	1dbb      	adds	r3, r7, #6
 800c160:	2200      	movs	r2, #0
 800c162:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800c164:	1dbc      	adds	r4, r7, #6
 800c166:	1dbb      	adds	r3, r7, #6
 800c168:	8819      	ldrh	r1, [r3, #0]
 800c16a:	003b      	movs	r3, r7
 800c16c:	2221      	movs	r2, #33	@ 0x21
 800c16e:	0018      	movs	r0, r3
 800c170:	f001 fb56 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c174:	0003      	movs	r3, r0
 800c176:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c178:	1d3c      	adds	r4, r7, #4
 800c17a:	1dbb      	adds	r3, r7, #6
 800c17c:	881a      	ldrh	r2, [r3, #0]
 800c17e:	003b      	movs	r3, r7
 800c180:	0019      	movs	r1, r3
 800c182:	2069      	movs	r0, #105	@ 0x69
 800c184:	f001 fbd0 	bl	800d928 <sensirion_i2c_write_data>
 800c188:	0003      	movs	r3, r0
 800c18a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c18c:	1d3b      	adds	r3, r7, #4
 800c18e:	2200      	movs	r2, #0
 800c190:	5e9b      	ldrsh	r3, [r3, r2]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d003      	beq.n	800c19e <sen5x_start_measurement+0x46>
        return error;
 800c196:	1d3b      	adds	r3, r7, #4
 800c198:	2200      	movs	r2, #0
 800c19a:	5e9b      	ldrsh	r3, [r3, r2]
 800c19c:	e004      	b.n	800c1a8 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800c19e:	4b04      	ldr	r3, [pc, #16]	@ (800c1b0 <sen5x_start_measurement+0x58>)
 800c1a0:	0018      	movs	r0, r3
 800c1a2:	f7ff fdcd 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	0018      	movs	r0, r3
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	b003      	add	sp, #12
 800c1ae:	bd90      	pop	{r4, r7, pc}
 800c1b0:	0000c350 	.word	0x0000c350

0800c1b4 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c1ba:	1dbb      	adds	r3, r7, #6
 800c1bc:	2200      	movs	r2, #0
 800c1be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800c1c0:	1dbc      	adds	r4, r7, #6
 800c1c2:	1dbb      	adds	r3, r7, #6
 800c1c4:	8819      	ldrh	r1, [r3, #0]
 800c1c6:	003b      	movs	r3, r7
 800c1c8:	2237      	movs	r2, #55	@ 0x37
 800c1ca:	0018      	movs	r0, r3
 800c1cc:	f001 fb28 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c1d0:	0003      	movs	r3, r0
 800c1d2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c1d4:	1d3c      	adds	r4, r7, #4
 800c1d6:	1dbb      	adds	r3, r7, #6
 800c1d8:	881a      	ldrh	r2, [r3, #0]
 800c1da:	003b      	movs	r3, r7
 800c1dc:	0019      	movs	r1, r3
 800c1de:	2069      	movs	r0, #105	@ 0x69
 800c1e0:	f001 fba2 	bl	800d928 <sensirion_i2c_write_data>
 800c1e4:	0003      	movs	r3, r0
 800c1e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c1e8:	1d3b      	adds	r3, r7, #4
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	5e9b      	ldrsh	r3, [r3, r2]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d003      	beq.n	800c1fa <sen5x_start_measurement_without_pm+0x46>
        return error;
 800c1f2:	1d3b      	adds	r3, r7, #4
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	5e9b      	ldrsh	r3, [r3, r2]
 800c1f8:	e004      	b.n	800c204 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800c1fa:	4b04      	ldr	r3, [pc, #16]	@ (800c20c <sen5x_start_measurement_without_pm+0x58>)
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f7ff fd9f 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c202:	2300      	movs	r3, #0
}
 800c204:	0018      	movs	r0, r3
 800c206:	46bd      	mov	sp, r7
 800c208:	b003      	add	sp, #12
 800c20a:	bd90      	pop	{r4, r7, pc}
 800c20c:	0000c350 	.word	0x0000c350

0800c210 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800c210:	b590      	push	{r4, r7, lr}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c216:	1dbb      	adds	r3, r7, #6
 800c218:	2200      	movs	r2, #0
 800c21a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800c21c:	1dbc      	adds	r4, r7, #6
 800c21e:	2382      	movs	r3, #130	@ 0x82
 800c220:	005a      	lsls	r2, r3, #1
 800c222:	1dbb      	adds	r3, r7, #6
 800c224:	8819      	ldrh	r1, [r3, #0]
 800c226:	003b      	movs	r3, r7
 800c228:	0018      	movs	r0, r3
 800c22a:	f001 faf9 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c22e:	0003      	movs	r3, r0
 800c230:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c232:	1d3c      	adds	r4, r7, #4
 800c234:	1dbb      	adds	r3, r7, #6
 800c236:	881a      	ldrh	r2, [r3, #0]
 800c238:	003b      	movs	r3, r7
 800c23a:	0019      	movs	r1, r3
 800c23c:	2069      	movs	r0, #105	@ 0x69
 800c23e:	f001 fb73 	bl	800d928 <sensirion_i2c_write_data>
 800c242:	0003      	movs	r3, r0
 800c244:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c246:	1d3b      	adds	r3, r7, #4
 800c248:	2200      	movs	r2, #0
 800c24a:	5e9b      	ldrsh	r3, [r3, r2]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <sen5x_stop_measurement+0x48>
        return error;
 800c250:	1d3b      	adds	r3, r7, #4
 800c252:	2200      	movs	r2, #0
 800c254:	5e9b      	ldrsh	r3, [r3, r2]
 800c256:	e004      	b.n	800c262 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c258:	4b04      	ldr	r3, [pc, #16]	@ (800c26c <sen5x_stop_measurement+0x5c>)
 800c25a:	0018      	movs	r0, r3
 800c25c:	f7ff fd70 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c260:	2300      	movs	r3, #0
}
 800c262:	0018      	movs	r0, r3
 800c264:	46bd      	mov	sp, r7
 800c266:	b003      	add	sp, #12
 800c268:	bd90      	pop	{r4, r7, pc}
 800c26a:	46c0      	nop			@ (mov r8, r8)
 800c26c:	00030d40 	.word	0x00030d40

0800c270 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800c270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800c278:	250e      	movs	r5, #14
 800c27a:	197b      	adds	r3, r7, r5
 800c27c:	2200      	movs	r2, #0
 800c27e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800c280:	197c      	adds	r4, r7, r5
 800c282:	4a22      	ldr	r2, [pc, #136]	@ (800c30c <sen5x_read_data_ready+0x9c>)
 800c284:	197b      	adds	r3, r7, r5
 800c286:	8819      	ldrh	r1, [r3, #0]
 800c288:	2308      	movs	r3, #8
 800c28a:	18fb      	adds	r3, r7, r3
 800c28c:	0018      	movs	r0, r3
 800c28e:	f001 fac7 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c292:	0003      	movs	r3, r0
 800c294:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c296:	260c      	movs	r6, #12
 800c298:	19bc      	adds	r4, r7, r6
 800c29a:	197b      	adds	r3, r7, r5
 800c29c:	881a      	ldrh	r2, [r3, #0]
 800c29e:	2308      	movs	r3, #8
 800c2a0:	18fb      	adds	r3, r7, r3
 800c2a2:	0019      	movs	r1, r3
 800c2a4:	2069      	movs	r0, #105	@ 0x69
 800c2a6:	f001 fb3f 	bl	800d928 <sensirion_i2c_write_data>
 800c2aa:	0003      	movs	r3, r0
 800c2ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c2ae:	19bb      	adds	r3, r7, r6
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	5e9b      	ldrsh	r3, [r3, r2]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <sen5x_read_data_ready+0x50>
        return error;
 800c2b8:	19bb      	adds	r3, r7, r6
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	5e9b      	ldrsh	r3, [r3, r2]
 800c2be:	e020      	b.n	800c302 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c2c0:	4b13      	ldr	r3, [pc, #76]	@ (800c310 <sen5x_read_data_ready+0xa0>)
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f7ff fd3c 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800c2c8:	250c      	movs	r5, #12
 800c2ca:	197c      	adds	r4, r7, r5
 800c2cc:	2308      	movs	r3, #8
 800c2ce:	18fb      	adds	r3, r7, r3
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	0019      	movs	r1, r3
 800c2d4:	2069      	movs	r0, #105	@ 0x69
 800c2d6:	f001 fb3f 	bl	800d958 <sensirion_i2c_read_data_inplace>
 800c2da:	0003      	movs	r3, r0
 800c2dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c2de:	197b      	adds	r3, r7, r5
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	5e9b      	ldrsh	r3, [r3, r2]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d003      	beq.n	800c2f0 <sen5x_read_data_ready+0x80>
        return error;
 800c2e8:	197b      	adds	r3, r7, r5
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	5e9b      	ldrsh	r3, [r3, r2]
 800c2ee:	e008      	b.n	800c302 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800c2f0:	2308      	movs	r3, #8
 800c2f2:	18fb      	adds	r3, r7, r3
 800c2f4:	785b      	ldrb	r3, [r3, #1]
 800c2f6:	1e5a      	subs	r2, r3, #1
 800c2f8:	4193      	sbcs	r3, r2
 800c2fa:	b2da      	uxtb	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c300:	2300      	movs	r3, #0
}
 800c302:	0018      	movs	r0, r3
 800c304:	46bd      	mov	sp, r7
 800c306:	b005      	add	sp, #20
 800c308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	00000202 	.word	0x00000202
 800c310:	00004e20 	.word	0x00004e20

0800c314 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	b08d      	sub	sp, #52	@ 0x34
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800c322:	252e      	movs	r5, #46	@ 0x2e
 800c324:	197b      	adds	r3, r7, r5
 800c326:	2200      	movs	r2, #0
 800c328:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800c32a:	197c      	adds	r4, r7, r5
 800c32c:	23f1      	movs	r3, #241	@ 0xf1
 800c32e:	009a      	lsls	r2, r3, #2
 800c330:	197b      	adds	r3, r7, r5
 800c332:	8819      	ldrh	r1, [r3, #0]
 800c334:	2314      	movs	r3, #20
 800c336:	18fb      	adds	r3, r7, r3
 800c338:	0018      	movs	r0, r3
 800c33a:	f001 fa71 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c33e:	0003      	movs	r3, r0
 800c340:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c342:	262c      	movs	r6, #44	@ 0x2c
 800c344:	19bc      	adds	r4, r7, r6
 800c346:	197b      	adds	r3, r7, r5
 800c348:	881a      	ldrh	r2, [r3, #0]
 800c34a:	2314      	movs	r3, #20
 800c34c:	18fb      	adds	r3, r7, r3
 800c34e:	0019      	movs	r1, r3
 800c350:	2069      	movs	r0, #105	@ 0x69
 800c352:	f001 fae9 	bl	800d928 <sensirion_i2c_write_data>
 800c356:	0003      	movs	r3, r0
 800c358:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c35a:	19bb      	adds	r3, r7, r6
 800c35c:	2200      	movs	r2, #0
 800c35e:	5e9b      	ldrsh	r3, [r3, r2]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <sen5x_read_measured_values+0x58>
        return error;
 800c364:	19bb      	adds	r3, r7, r6
 800c366:	2200      	movs	r2, #0
 800c368:	5e9b      	ldrsh	r3, [r3, r2]
 800c36a:	e060      	b.n	800c42e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c36c:	4b32      	ldr	r3, [pc, #200]	@ (800c438 <sen5x_read_measured_values+0x124>)
 800c36e:	0018      	movs	r0, r3
 800c370:	f7ff fce6 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800c374:	252c      	movs	r5, #44	@ 0x2c
 800c376:	197c      	adds	r4, r7, r5
 800c378:	2314      	movs	r3, #20
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	2210      	movs	r2, #16
 800c37e:	0019      	movs	r1, r3
 800c380:	2069      	movs	r0, #105	@ 0x69
 800c382:	f001 fae9 	bl	800d958 <sensirion_i2c_read_data_inplace>
 800c386:	0003      	movs	r3, r0
 800c388:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c38a:	197b      	adds	r3, r7, r5
 800c38c:	2200      	movs	r2, #0
 800c38e:	5e9b      	ldrsh	r3, [r3, r2]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d003      	beq.n	800c39c <sen5x_read_measured_values+0x88>
        return error;
 800c394:	197b      	adds	r3, r7, r5
 800c396:	2200      	movs	r2, #0
 800c398:	5e9b      	ldrsh	r3, [r3, r2]
 800c39a:	e048      	b.n	800c42e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800c39c:	2414      	movs	r4, #20
 800c39e:	193b      	adds	r3, r7, r4
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	f000 fa79 	bl	800c898 <sensirion_common_bytes_to_uint16_t>
 800c3a6:	0003      	movs	r3, r0
 800c3a8:	001a      	movs	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800c3ae:	193b      	adds	r3, r7, r4
 800c3b0:	3302      	adds	r3, #2
 800c3b2:	0018      	movs	r0, r3
 800c3b4:	f000 fa70 	bl	800c898 <sensirion_common_bytes_to_uint16_t>
 800c3b8:	0003      	movs	r3, r0
 800c3ba:	001a      	movs	r2, r3
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800c3c0:	193b      	adds	r3, r7, r4
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	0018      	movs	r0, r3
 800c3c6:	f000 fa67 	bl	800c898 <sensirion_common_bytes_to_uint16_t>
 800c3ca:	0003      	movs	r3, r0
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800c3d2:	193b      	adds	r3, r7, r4
 800c3d4:	3306      	adds	r3, #6
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f000 fa5e 	bl	800c898 <sensirion_common_bytes_to_uint16_t>
 800c3dc:	0003      	movs	r3, r0
 800c3de:	001a      	movs	r2, r3
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800c3e4:	193b      	adds	r3, r7, r4
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	f000 fa81 	bl	800c8f0 <sensirion_common_bytes_to_int16_t>
 800c3ee:	0003      	movs	r3, r0
 800c3f0:	001a      	movs	r2, r3
 800c3f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3f4:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800c3f6:	193b      	adds	r3, r7, r4
 800c3f8:	330a      	adds	r3, #10
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	f000 fa78 	bl	800c8f0 <sensirion_common_bytes_to_int16_t>
 800c400:	0003      	movs	r3, r0
 800c402:	001a      	movs	r2, r3
 800c404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c406:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800c408:	193b      	adds	r3, r7, r4
 800c40a:	330c      	adds	r3, #12
 800c40c:	0018      	movs	r0, r3
 800c40e:	f000 fa6f 	bl	800c8f0 <sensirion_common_bytes_to_int16_t>
 800c412:	0003      	movs	r3, r0
 800c414:	001a      	movs	r2, r3
 800c416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c418:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800c41a:	193b      	adds	r3, r7, r4
 800c41c:	330e      	adds	r3, #14
 800c41e:	0018      	movs	r0, r3
 800c420:	f000 fa66 	bl	800c8f0 <sensirion_common_bytes_to_int16_t>
 800c424:	0003      	movs	r3, r0
 800c426:	001a      	movs	r2, r3
 800c428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c42a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	0018      	movs	r0, r3
 800c430:	46bd      	mov	sp, r7
 800c432:	b00d      	add	sp, #52	@ 0x34
 800c434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c436:	46c0      	nop			@ (mov r8, r8)
 800c438:	00004e20 	.word	0x00004e20

0800c43c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800c43c:	b590      	push	{r4, r7, lr}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c442:	1dbb      	adds	r3, r7, #6
 800c444:	2200      	movs	r2, #0
 800c446:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800c448:	1dbc      	adds	r4, r7, #6
 800c44a:	4a12      	ldr	r2, [pc, #72]	@ (800c494 <sen5x_start_fan_cleaning+0x58>)
 800c44c:	1dbb      	adds	r3, r7, #6
 800c44e:	8819      	ldrh	r1, [r3, #0]
 800c450:	003b      	movs	r3, r7
 800c452:	0018      	movs	r0, r3
 800c454:	f001 f9e4 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c458:	0003      	movs	r3, r0
 800c45a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c45c:	1d3c      	adds	r4, r7, #4
 800c45e:	1dbb      	adds	r3, r7, #6
 800c460:	881a      	ldrh	r2, [r3, #0]
 800c462:	003b      	movs	r3, r7
 800c464:	0019      	movs	r1, r3
 800c466:	2069      	movs	r0, #105	@ 0x69
 800c468:	f001 fa5e 	bl	800d928 <sensirion_i2c_write_data>
 800c46c:	0003      	movs	r3, r0
 800c46e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c470:	1d3b      	adds	r3, r7, #4
 800c472:	2200      	movs	r2, #0
 800c474:	5e9b      	ldrsh	r3, [r3, r2]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <sen5x_start_fan_cleaning+0x46>
        return error;
 800c47a:	1d3b      	adds	r3, r7, #4
 800c47c:	2200      	movs	r2, #0
 800c47e:	5e9b      	ldrsh	r3, [r3, r2]
 800c480:	e004      	b.n	800c48c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c482:	4b05      	ldr	r3, [pc, #20]	@ (800c498 <sen5x_start_fan_cleaning+0x5c>)
 800c484:	0018      	movs	r0, r3
 800c486:	f7ff fc5b 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	0018      	movs	r0, r3
 800c48e:	46bd      	mov	sp, r7
 800c490:	b003      	add	sp, #12
 800c492:	bd90      	pop	{r4, r7, pc}
 800c494:	00005607 	.word	0x00005607
 800c498:	00004e20 	.word	0x00004e20

0800c49c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800c49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	0004      	movs	r4, r0
 800c4a4:	0008      	movs	r0, r1
 800c4a6:	0011      	movs	r1, r2
 800c4a8:	1dbb      	adds	r3, r7, #6
 800c4aa:	1c22      	adds	r2, r4, #0
 800c4ac:	801a      	strh	r2, [r3, #0]
 800c4ae:	1d3b      	adds	r3, r7, #4
 800c4b0:	1c02      	adds	r2, r0, #0
 800c4b2:	801a      	strh	r2, [r3, #0]
 800c4b4:	1cbb      	adds	r3, r7, #2
 800c4b6:	1c0a      	adds	r2, r1, #0
 800c4b8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800c4ba:	2516      	movs	r5, #22
 800c4bc:	197b      	adds	r3, r7, r5
 800c4be:	2200      	movs	r2, #0
 800c4c0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800c4c2:	197c      	adds	r4, r7, r5
 800c4c4:	4a25      	ldr	r2, [pc, #148]	@ (800c55c <sen5x_set_temperature_offset_parameters+0xc0>)
 800c4c6:	197b      	adds	r3, r7, r5
 800c4c8:	8819      	ldrh	r1, [r3, #0]
 800c4ca:	2608      	movs	r6, #8
 800c4cc:	19bb      	adds	r3, r7, r6
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f001 f9a6 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c4d4:	0003      	movs	r3, r0
 800c4d6:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800c4d8:	197c      	adds	r4, r7, r5
 800c4da:	1dbb      	adds	r3, r7, #6
 800c4dc:	2200      	movs	r2, #0
 800c4de:	5e9a      	ldrsh	r2, [r3, r2]
 800c4e0:	197b      	adds	r3, r7, r5
 800c4e2:	8819      	ldrh	r1, [r3, #0]
 800c4e4:	19bb      	adds	r3, r7, r6
 800c4e6:	0018      	movs	r0, r3
 800c4e8:	f001 fa05 	bl	800d8f6 <sensirion_i2c_add_int16_t_to_buffer>
 800c4ec:	0003      	movs	r3, r0
 800c4ee:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800c4f0:	197c      	adds	r4, r7, r5
 800c4f2:	1d3b      	adds	r3, r7, #4
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	5e9a      	ldrsh	r2, [r3, r2]
 800c4f8:	197b      	adds	r3, r7, r5
 800c4fa:	8819      	ldrh	r1, [r3, #0]
 800c4fc:	19bb      	adds	r3, r7, r6
 800c4fe:	0018      	movs	r0, r3
 800c500:	f001 f9f9 	bl	800d8f6 <sensirion_i2c_add_int16_t_to_buffer>
 800c504:	0003      	movs	r3, r0
 800c506:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800c508:	197c      	adds	r4, r7, r5
 800c50a:	1cbb      	adds	r3, r7, #2
 800c50c:	881a      	ldrh	r2, [r3, #0]
 800c50e:	197b      	adds	r3, r7, r5
 800c510:	8819      	ldrh	r1, [r3, #0]
 800c512:	19bb      	adds	r3, r7, r6
 800c514:	0018      	movs	r0, r3
 800c516:	f001 f9af 	bl	800d878 <sensirion_i2c_add_uint16_t_to_buffer>
 800c51a:	0003      	movs	r3, r0
 800c51c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c51e:	2214      	movs	r2, #20
 800c520:	18bc      	adds	r4, r7, r2
 800c522:	197b      	adds	r3, r7, r5
 800c524:	881a      	ldrh	r2, [r3, #0]
 800c526:	19bb      	adds	r3, r7, r6
 800c528:	0019      	movs	r1, r3
 800c52a:	2069      	movs	r0, #105	@ 0x69
 800c52c:	f001 f9fc 	bl	800d928 <sensirion_i2c_write_data>
 800c530:	0003      	movs	r3, r0
 800c532:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c534:	2214      	movs	r2, #20
 800c536:	18bb      	adds	r3, r7, r2
 800c538:	2100      	movs	r1, #0
 800c53a:	5e5b      	ldrsh	r3, [r3, r1]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800c540:	18bb      	adds	r3, r7, r2
 800c542:	2200      	movs	r2, #0
 800c544:	5e9b      	ldrsh	r3, [r3, r2]
 800c546:	e004      	b.n	800c552 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800c548:	4b05      	ldr	r3, [pc, #20]	@ (800c560 <sen5x_set_temperature_offset_parameters+0xc4>)
 800c54a:	0018      	movs	r0, r3
 800c54c:	f7ff fbf8 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c550:	2300      	movs	r3, #0
}
 800c552:	0018      	movs	r0, r3
 800c554:	46bd      	mov	sp, r7
 800c556:	b007      	add	sp, #28
 800c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c55a:	46c0      	nop			@ (mov r8, r8)
 800c55c:	000060b2 	.word	0x000060b2
 800c560:	00004e20 	.word	0x00004e20

0800c564 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800c564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c566:	b091      	sub	sp, #68	@ 0x44
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	000a      	movs	r2, r1
 800c56e:	1cfb      	adds	r3, r7, #3
 800c570:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c572:	253e      	movs	r5, #62	@ 0x3e
 800c574:	197b      	adds	r3, r7, r5
 800c576:	2200      	movs	r2, #0
 800c578:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800c57a:	197c      	adds	r4, r7, r5
 800c57c:	4a22      	ldr	r2, [pc, #136]	@ (800c608 <sen5x_get_product_name+0xa4>)
 800c57e:	197b      	adds	r3, r7, r5
 800c580:	8819      	ldrh	r1, [r3, #0]
 800c582:	230c      	movs	r3, #12
 800c584:	18fb      	adds	r3, r7, r3
 800c586:	0018      	movs	r0, r3
 800c588:	f001 f94a 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c58c:	0003      	movs	r3, r0
 800c58e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c590:	263c      	movs	r6, #60	@ 0x3c
 800c592:	19bc      	adds	r4, r7, r6
 800c594:	197b      	adds	r3, r7, r5
 800c596:	881a      	ldrh	r2, [r3, #0]
 800c598:	230c      	movs	r3, #12
 800c59a:	18fb      	adds	r3, r7, r3
 800c59c:	0019      	movs	r1, r3
 800c59e:	2069      	movs	r0, #105	@ 0x69
 800c5a0:	f001 f9c2 	bl	800d928 <sensirion_i2c_write_data>
 800c5a4:	0003      	movs	r3, r0
 800c5a6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c5a8:	19bb      	adds	r3, r7, r6
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	5e9b      	ldrsh	r3, [r3, r2]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <sen5x_get_product_name+0x56>
        return error;
 800c5b2:	19bb      	adds	r3, r7, r6
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	5e9b      	ldrsh	r3, [r3, r2]
 800c5b8:	e021      	b.n	800c5fe <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c5ba:	4b14      	ldr	r3, [pc, #80]	@ (800c60c <sen5x_get_product_name+0xa8>)
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f7ff fbbf 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c5c2:	253c      	movs	r5, #60	@ 0x3c
 800c5c4:	197c      	adds	r4, r7, r5
 800c5c6:	230c      	movs	r3, #12
 800c5c8:	18fb      	adds	r3, r7, r3
 800c5ca:	2220      	movs	r2, #32
 800c5cc:	0019      	movs	r1, r3
 800c5ce:	2069      	movs	r0, #105	@ 0x69
 800c5d0:	f001 f9c2 	bl	800d958 <sensirion_i2c_read_data_inplace>
 800c5d4:	0003      	movs	r3, r0
 800c5d6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c5d8:	197b      	adds	r3, r7, r5
 800c5da:	2200      	movs	r2, #0
 800c5dc:	5e9b      	ldrsh	r3, [r3, r2]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d003      	beq.n	800c5ea <sen5x_get_product_name+0x86>
        return error;
 800c5e2:	197b      	adds	r3, r7, r5
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	5e9b      	ldrsh	r3, [r3, r2]
 800c5e8:	e009      	b.n	800c5fe <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800c5ea:	1cfb      	adds	r3, r7, #3
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	230c      	movs	r3, #12
 800c5f4:	18fb      	adds	r3, r7, r3
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	f000 f988 	bl	800c90c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	0018      	movs	r0, r3
 800c600:	46bd      	mov	sp, r7
 800c602:	b011      	add	sp, #68	@ 0x44
 800c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c606:	46c0      	nop			@ (mov r8, r8)
 800c608:	0000d014 	.word	0x0000d014
 800c60c:	0000c350 	.word	0x0000c350

0800c610 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800c610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c612:	b091      	sub	sp, #68	@ 0x44
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	000a      	movs	r2, r1
 800c61a:	1cfb      	adds	r3, r7, #3
 800c61c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800c61e:	253e      	movs	r5, #62	@ 0x3e
 800c620:	197b      	adds	r3, r7, r5
 800c622:	2200      	movs	r2, #0
 800c624:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800c626:	197c      	adds	r4, r7, r5
 800c628:	4a22      	ldr	r2, [pc, #136]	@ (800c6b4 <sen5x_get_serial_number+0xa4>)
 800c62a:	197b      	adds	r3, r7, r5
 800c62c:	8819      	ldrh	r1, [r3, #0]
 800c62e:	230c      	movs	r3, #12
 800c630:	18fb      	adds	r3, r7, r3
 800c632:	0018      	movs	r0, r3
 800c634:	f001 f8f4 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c638:	0003      	movs	r3, r0
 800c63a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c63c:	263c      	movs	r6, #60	@ 0x3c
 800c63e:	19bc      	adds	r4, r7, r6
 800c640:	197b      	adds	r3, r7, r5
 800c642:	881a      	ldrh	r2, [r3, #0]
 800c644:	230c      	movs	r3, #12
 800c646:	18fb      	adds	r3, r7, r3
 800c648:	0019      	movs	r1, r3
 800c64a:	2069      	movs	r0, #105	@ 0x69
 800c64c:	f001 f96c 	bl	800d928 <sensirion_i2c_write_data>
 800c650:	0003      	movs	r3, r0
 800c652:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c654:	19bb      	adds	r3, r7, r6
 800c656:	2200      	movs	r2, #0
 800c658:	5e9b      	ldrsh	r3, [r3, r2]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <sen5x_get_serial_number+0x56>
        return error;
 800c65e:	19bb      	adds	r3, r7, r6
 800c660:	2200      	movs	r2, #0
 800c662:	5e9b      	ldrsh	r3, [r3, r2]
 800c664:	e021      	b.n	800c6aa <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800c666:	4b14      	ldr	r3, [pc, #80]	@ (800c6b8 <sen5x_get_serial_number+0xa8>)
 800c668:	0018      	movs	r0, r3
 800c66a:	f7ff fb69 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800c66e:	253c      	movs	r5, #60	@ 0x3c
 800c670:	197c      	adds	r4, r7, r5
 800c672:	230c      	movs	r3, #12
 800c674:	18fb      	adds	r3, r7, r3
 800c676:	2220      	movs	r2, #32
 800c678:	0019      	movs	r1, r3
 800c67a:	2069      	movs	r0, #105	@ 0x69
 800c67c:	f001 f96c 	bl	800d958 <sensirion_i2c_read_data_inplace>
 800c680:	0003      	movs	r3, r0
 800c682:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c684:	197b      	adds	r3, r7, r5
 800c686:	2200      	movs	r2, #0
 800c688:	5e9b      	ldrsh	r3, [r3, r2]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <sen5x_get_serial_number+0x86>
        return error;
 800c68e:	197b      	adds	r3, r7, r5
 800c690:	2200      	movs	r2, #0
 800c692:	5e9b      	ldrsh	r3, [r3, r2]
 800c694:	e009      	b.n	800c6aa <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800c696:	1cfb      	adds	r3, r7, #3
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	6879      	ldr	r1, [r7, #4]
 800c69e:	230c      	movs	r3, #12
 800c6a0:	18fb      	adds	r3, r7, r3
 800c6a2:	0018      	movs	r0, r3
 800c6a4:	f000 f932 	bl	800c90c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	0018      	movs	r0, r3
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	b011      	add	sp, #68	@ 0x44
 800c6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b2:	46c0      	nop			@ (mov r8, r8)
 800c6b4:	0000d033 	.word	0x0000d033
 800c6b8:	0000c350 	.word	0x0000c350

0800c6bc <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800c6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6be:	b089      	sub	sp, #36	@ 0x24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800c6ca:	251e      	movs	r5, #30
 800c6cc:	197b      	adds	r3, r7, r5
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800c6d2:	197c      	adds	r4, r7, r5
 800c6d4:	23d1      	movs	r3, #209	@ 0xd1
 800c6d6:	021a      	lsls	r2, r3, #8
 800c6d8:	197b      	adds	r3, r7, r5
 800c6da:	8819      	ldrh	r1, [r3, #0]
 800c6dc:	2310      	movs	r3, #16
 800c6de:	18fb      	adds	r3, r7, r3
 800c6e0:	0018      	movs	r0, r3
 800c6e2:	f001 f89d 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c6e6:	0003      	movs	r3, r0
 800c6e8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c6ea:	261c      	movs	r6, #28
 800c6ec:	19bc      	adds	r4, r7, r6
 800c6ee:	197b      	adds	r3, r7, r5
 800c6f0:	881a      	ldrh	r2, [r3, #0]
 800c6f2:	2310      	movs	r3, #16
 800c6f4:	18fb      	adds	r3, r7, r3
 800c6f6:	0019      	movs	r1, r3
 800c6f8:	2069      	movs	r0, #105	@ 0x69
 800c6fa:	f001 f915 	bl	800d928 <sensirion_i2c_write_data>
 800c6fe:	0003      	movs	r3, r0
 800c700:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c702:	19bb      	adds	r3, r7, r6
 800c704:	2200      	movs	r2, #0
 800c706:	5e9b      	ldrsh	r3, [r3, r2]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <sen5x_get_version+0x58>
        return error;
 800c70c:	19bb      	adds	r3, r7, r6
 800c70e:	2200      	movs	r2, #0
 800c710:	5e9b      	ldrsh	r3, [r3, r2]
 800c712:	e038      	b.n	800c786 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c714:	4b1e      	ldr	r3, [pc, #120]	@ (800c790 <sen5x_get_version+0xd4>)
 800c716:	0018      	movs	r0, r3
 800c718:	f7ff fb12 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800c71c:	251c      	movs	r5, #28
 800c71e:	197c      	adds	r4, r7, r5
 800c720:	2310      	movs	r3, #16
 800c722:	18fb      	adds	r3, r7, r3
 800c724:	2208      	movs	r2, #8
 800c726:	0019      	movs	r1, r3
 800c728:	2069      	movs	r0, #105	@ 0x69
 800c72a:	f001 f915 	bl	800d958 <sensirion_i2c_read_data_inplace>
 800c72e:	0003      	movs	r3, r0
 800c730:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c732:	197b      	adds	r3, r7, r5
 800c734:	2200      	movs	r2, #0
 800c736:	5e9b      	ldrsh	r3, [r3, r2]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <sen5x_get_version+0x88>
        return error;
 800c73c:	197b      	adds	r3, r7, r5
 800c73e:	2200      	movs	r2, #0
 800c740:	5e9b      	ldrsh	r3, [r3, r2]
 800c742:	e020      	b.n	800c786 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800c744:	2110      	movs	r1, #16
 800c746:	187b      	adds	r3, r7, r1
 800c748:	781a      	ldrb	r2, [r3, #0]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800c74e:	187b      	adds	r3, r7, r1
 800c750:	785a      	ldrb	r2, [r3, #1]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800c756:	187b      	adds	r3, r7, r1
 800c758:	789b      	ldrb	r3, [r3, #2]
 800c75a:	1e5a      	subs	r2, r3, #1
 800c75c:	4193      	sbcs	r3, r2
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800c764:	187b      	adds	r3, r7, r1
 800c766:	78da      	ldrb	r2, [r3, #3]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800c76c:	187b      	adds	r3, r7, r1
 800c76e:	791a      	ldrb	r2, [r3, #4]
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800c774:	187b      	adds	r3, r7, r1
 800c776:	795a      	ldrb	r2, [r3, #5]
 800c778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c77a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800c77c:	187b      	adds	r3, r7, r1
 800c77e:	799a      	ldrb	r2, [r3, #6]
 800c780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c782:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800c784:	2300      	movs	r3, #0
}
 800c786:	0018      	movs	r0, r3
 800c788:	46bd      	mov	sp, r7
 800c78a:	b009      	add	sp, #36	@ 0x24
 800c78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c78e:	46c0      	nop			@ (mov r8, r8)
 800c790:	00004e20 	.word	0x00004e20

0800c794 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800c794:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c796:	b087      	sub	sp, #28
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800c79c:	2516      	movs	r5, #22
 800c79e:	197b      	adds	r3, r7, r5
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800c7a4:	197c      	adds	r4, r7, r5
 800c7a6:	4a22      	ldr	r2, [pc, #136]	@ (800c830 <sen5x_read_device_status+0x9c>)
 800c7a8:	197b      	adds	r3, r7, r5
 800c7aa:	8819      	ldrh	r1, [r3, #0]
 800c7ac:	230c      	movs	r3, #12
 800c7ae:	18fb      	adds	r3, r7, r3
 800c7b0:	0018      	movs	r0, r3
 800c7b2:	f001 f835 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c7b6:	0003      	movs	r3, r0
 800c7b8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c7ba:	2614      	movs	r6, #20
 800c7bc:	19bc      	adds	r4, r7, r6
 800c7be:	197b      	adds	r3, r7, r5
 800c7c0:	881a      	ldrh	r2, [r3, #0]
 800c7c2:	230c      	movs	r3, #12
 800c7c4:	18fb      	adds	r3, r7, r3
 800c7c6:	0019      	movs	r1, r3
 800c7c8:	2069      	movs	r0, #105	@ 0x69
 800c7ca:	f001 f8ad 	bl	800d928 <sensirion_i2c_write_data>
 800c7ce:	0003      	movs	r3, r0
 800c7d0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c7d2:	19bb      	adds	r3, r7, r6
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	5e9b      	ldrsh	r3, [r3, r2]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d003      	beq.n	800c7e4 <sen5x_read_device_status+0x50>
        return error;
 800c7dc:	19bb      	adds	r3, r7, r6
 800c7de:	2200      	movs	r2, #0
 800c7e0:	5e9b      	ldrsh	r3, [r3, r2]
 800c7e2:	e020      	b.n	800c826 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800c7e4:	4b13      	ldr	r3, [pc, #76]	@ (800c834 <sen5x_read_device_status+0xa0>)
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	f7ff faaa 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800c7ec:	2514      	movs	r5, #20
 800c7ee:	197c      	adds	r4, r7, r5
 800c7f0:	230c      	movs	r3, #12
 800c7f2:	18fb      	adds	r3, r7, r3
 800c7f4:	2204      	movs	r2, #4
 800c7f6:	0019      	movs	r1, r3
 800c7f8:	2069      	movs	r0, #105	@ 0x69
 800c7fa:	f001 f8ad 	bl	800d958 <sensirion_i2c_read_data_inplace>
 800c7fe:	0003      	movs	r3, r0
 800c800:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c802:	197b      	adds	r3, r7, r5
 800c804:	2200      	movs	r2, #0
 800c806:	5e9b      	ldrsh	r3, [r3, r2]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <sen5x_read_device_status+0x80>
        return error;
 800c80c:	197b      	adds	r3, r7, r5
 800c80e:	2200      	movs	r2, #0
 800c810:	5e9b      	ldrsh	r3, [r3, r2]
 800c812:	e008      	b.n	800c826 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800c814:	230c      	movs	r3, #12
 800c816:	18fb      	adds	r3, r7, r3
 800c818:	0018      	movs	r0, r3
 800c81a:	f000 f850 	bl	800c8be <sensirion_common_bytes_to_uint32_t>
 800c81e:	0002      	movs	r2, r0
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800c824:	2300      	movs	r3, #0
}
 800c826:	0018      	movs	r0, r3
 800c828:	46bd      	mov	sp, r7
 800c82a:	b007      	add	sp, #28
 800c82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c82e:	46c0      	nop			@ (mov r8, r8)
 800c830:	0000d206 	.word	0x0000d206
 800c834:	00004e20 	.word	0x00004e20

0800c838 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800c83e:	1dbb      	adds	r3, r7, #6
 800c840:	2200      	movs	r2, #0
 800c842:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800c844:	1dbc      	adds	r4, r7, #6
 800c846:	4a12      	ldr	r2, [pc, #72]	@ (800c890 <sen5x_device_reset+0x58>)
 800c848:	1dbb      	adds	r3, r7, #6
 800c84a:	8819      	ldrh	r1, [r3, #0]
 800c84c:	003b      	movs	r3, r7
 800c84e:	0018      	movs	r0, r3
 800c850:	f000 ffe6 	bl	800d820 <sensirion_i2c_add_command_to_buffer>
 800c854:	0003      	movs	r3, r0
 800c856:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800c858:	1d3c      	adds	r4, r7, #4
 800c85a:	1dbb      	adds	r3, r7, #6
 800c85c:	881a      	ldrh	r2, [r3, #0]
 800c85e:	003b      	movs	r3, r7
 800c860:	0019      	movs	r1, r3
 800c862:	2069      	movs	r0, #105	@ 0x69
 800c864:	f001 f860 	bl	800d928 <sensirion_i2c_write_data>
 800c868:	0003      	movs	r3, r0
 800c86a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c86c:	1d3b      	adds	r3, r7, #4
 800c86e:	2200      	movs	r2, #0
 800c870:	5e9b      	ldrsh	r3, [r3, r2]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <sen5x_device_reset+0x46>
        return error;
 800c876:	1d3b      	adds	r3, r7, #4
 800c878:	2200      	movs	r2, #0
 800c87a:	5e9b      	ldrsh	r3, [r3, r2]
 800c87c:	e004      	b.n	800c888 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800c87e:	4b05      	ldr	r3, [pc, #20]	@ (800c894 <sen5x_device_reset+0x5c>)
 800c880:	0018      	movs	r0, r3
 800c882:	f7ff fa5d 	bl	800bd40 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800c886:	2300      	movs	r3, #0
}
 800c888:	0018      	movs	r0, r3
 800c88a:	46bd      	mov	sp, r7
 800c88c:	b003      	add	sp, #12
 800c88e:	bd90      	pop	{r4, r7, pc}
 800c890:	0000d304 	.word	0x0000d304
 800c894:	00030d40 	.word	0x00030d40

0800c898 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	021b      	lsls	r3, r3, #8
 800c8a6:	b21a      	sxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b21b      	sxth	r3, r3
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	b21b      	sxth	r3, r3
 800c8b4:	b29b      	uxth	r3, r3
}
 800c8b6:	0018      	movs	r0, r3
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	b002      	add	sp, #8
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b082      	sub	sp, #8
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	061a      	lsls	r2, r3, #24
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	041b      	lsls	r3, r3, #16
 800c8d4:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3302      	adds	r3, #2
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800c8de:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	3203      	adds	r2, #3
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	4313      	orrs	r3, r2
}
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	b002      	add	sp, #8
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	f7ff ffcc 	bl	800c898 <sensirion_common_bytes_to_uint16_t>
 800c900:	0003      	movs	r3, r0
 800c902:	b21b      	sxth	r3, r3
}
 800c904:	0018      	movs	r0, r3
 800c906:	46bd      	mov	sp, r7
 800c908:	b002      	add	sp, #8
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	1dbb      	adds	r3, r7, #6
 800c918:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800c91a:	2316      	movs	r3, #22
 800c91c:	18fb      	adds	r3, r7, r3
 800c91e:	2200      	movs	r2, #0
 800c920:	801a      	strh	r2, [r3, #0]
 800c922:	e00f      	b.n	800c944 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800c924:	2016      	movs	r0, #22
 800c926:	183b      	adds	r3, r7, r0
 800c928:	881b      	ldrh	r3, [r3, #0]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	18d2      	adds	r2, r2, r3
 800c92e:	183b      	adds	r3, r7, r0
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	18cb      	adds	r3, r1, r3
 800c936:	7812      	ldrb	r2, [r2, #0]
 800c938:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800c93a:	183b      	adds	r3, r7, r0
 800c93c:	881a      	ldrh	r2, [r3, #0]
 800c93e:	183b      	adds	r3, r7, r0
 800c940:	3201      	adds	r2, #1
 800c942:	801a      	strh	r2, [r3, #0]
 800c944:	2316      	movs	r3, #22
 800c946:	18fa      	adds	r2, r7, r3
 800c948:	1dbb      	adds	r3, r7, #6
 800c94a:	8812      	ldrh	r2, [r2, #0]
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d3e8      	bcc.n	800c924 <sensirion_common_copy_bytes+0x18>
    }
}
 800c952:	46c0      	nop			@ (mov r8, r8)
 800c954:	46c0      	nop			@ (mov r8, r8)
 800c956:	46bd      	mov	sp, r7
 800c958:	b006      	add	sp, #24
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	68ba      	ldr	r2, [r7, #8]
 800c96c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d113      	bne.n	800c9a2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	22fe      	movs	r2, #254	@ 0xfe
 800c97e:	0592      	lsls	r2, r2, #22
 800c980:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4a1a      	ldr	r2, [pc, #104]	@ (800c9f0 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800c986:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	4a1a      	ldr	r2, [pc, #104]	@ (800c9f4 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800c98c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	4a19      	ldr	r2, [pc, #100]	@ (800c9f8 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800c992:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	4a19      	ldr	r2, [pc, #100]	@ (800c9fc <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800c998:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4a18      	ldr	r2, [pc, #96]	@ (800ca00 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800c99e:	61da      	str	r2, [r3, #28]
 800c9a0:	e011      	b.n	800c9c6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	4a17      	ldr	r2, [pc, #92]	@ (800ca04 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800c9a6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	4a17      	ldr	r2, [pc, #92]	@ (800ca08 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800c9ac:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	4a16      	ldr	r2, [pc, #88]	@ (800ca0c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800c9b2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4a16      	ldr	r2, [pc, #88]	@ (800ca10 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800c9b8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	4a15      	ldr	r2, [pc, #84]	@ (800ca14 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800c9be:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	4a15      	ldr	r2, [pc, #84]	@ (800ca18 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800c9c4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	4a14      	ldr	r2, [pc, #80]	@ (800ca1c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800c9ca:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4a14      	ldr	r2, [pc, #80]	@ (800ca20 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c9d0:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	4a12      	ldr	r2, [pc, #72]	@ (800ca20 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800c9d6:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4a12      	ldr	r2, [pc, #72]	@ (800ca24 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800c9dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	0018      	movs	r0, r3
 800c9e2:	f000 f833 	bl	800ca4c <GasIndexAlgorithm_reset>
}
 800c9e6:	46c0      	nop			@ (mov r8, r8)
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	b004      	add	sp, #16
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	46c0      	nop			@ (mov r8, r8)
 800c9f0:	00002710 	.word	0x00002710
 800c9f4:	44340000 	.word	0x44340000
 800c9f8:	46859800 	.word	0x46859800
 800c9fc:	46a05000 	.word	0x46a05000
 800ca00:	41f00000 	.word	0x41f00000
 800ca04:	42c80000 	.word	0x42c80000
 800ca08:	00004e20 	.word	0x00004e20
 800ca0c:	43340000 	.word	0x43340000
 800ca10:	4528c000 	.word	0x4528c000
 800ca14:	45a32000 	.word	0x45a32000
 800ca18:	43aa0000 	.word	0x43aa0000
 800ca1c:	43660000 	.word	0x43660000
 800ca20:	41400000 	.word	0x41400000
 800ca24:	42480000 	.word	0x42480000

0800ca28 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800ca32:	4a05      	ldr	r2, [pc, #20]	@ (800ca48 <GasIndexAlgorithm_init+0x20>)
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	0018      	movs	r0, r3
 800ca3a:	f7ff ff8f 	bl	800c95c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800ca3e:	46c0      	nop			@ (mov r8, r8)
 800ca40:	46bd      	mov	sp, r7
 800ca42:	b002      	add	sp, #8
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	46c0      	nop			@ (mov r8, r8)
 800ca48:	44610000 	.word	0x44610000

0800ca4c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	0018      	movs	r0, r3
 800ca6a:	f000 f805 	bl	800ca78 <GasIndexAlgorithm__init_instances>
}
 800ca6e:	46c0      	nop			@ (mov r8, r8)
 800ca70:	46bd      	mov	sp, r7
 800ca72:	b002      	add	sp, #8
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800ca78:	b590      	push	{r4, r7, lr}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	0018      	movs	r0, r3
 800ca84:	f000 f8e8 	bl	800cc58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	0018      	movs	r0, r3
 800ca8c:	f000 f9a6 	bl	800cddc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ca90:	1c04      	adds	r4, r0, #0
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	0018      	movs	r0, r3
 800ca96:	f000 f9ab 	bl	800cdf0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ca9a:	1c02      	adds	r2, r0, #0
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	1c21      	adds	r1, r4, #0
 800caa0:	0018      	movs	r0, r3
 800caa2:	f000 fc3b 	bl	800d31c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d107      	bne.n	800cabe <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800caae:	23fe      	movs	r3, #254	@ 0xfe
 800cab0:	059b      	lsls	r3, r3, #22
 800cab2:	4a0a      	ldr	r2, [pc, #40]	@ (800cadc <GasIndexAlgorithm__init_instances+0x64>)
 800cab4:	490a      	ldr	r1, [pc, #40]	@ (800cae0 <GasIndexAlgorithm__init_instances+0x68>)
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fc86 	bl	800d3c8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800cabc:	e005      	b.n	800caca <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800cabe:	4b09      	ldr	r3, [pc, #36]	@ (800cae4 <GasIndexAlgorithm__init_instances+0x6c>)
 800cac0:	4a09      	ldr	r2, [pc, #36]	@ (800cae8 <GasIndexAlgorithm__init_instances+0x70>)
 800cac2:	490a      	ldr	r1, [pc, #40]	@ (800caec <GasIndexAlgorithm__init_instances+0x74>)
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fc7f 	bl	800d3c8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	0018      	movs	r0, r3
 800cace:	f000 fd35 	bl	800d53c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800cad2:	46c0      	nop			@ (mov r8, r8)
 800cad4:	46bd      	mov	sp, r7
 800cad6:	b003      	add	sp, #12
 800cad8:	bd90      	pop	{r4, r7, pc}
 800cada:	46c0      	nop			@ (mov r8, r8)
 800cadc:	bc257a78 	.word	0xbc257a78
 800cae0:	44198000 	.word	0x44198000
 800cae4:	42c80000 	.word	0x42c80000
 800cae8:	bbd4fdf4 	.word	0xbbd4fdf4
 800caec:	43550000 	.word	0x43550000

0800caf0 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800caf0:	b590      	push	{r4, r7, lr}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb00:	4952      	ldr	r1, [pc, #328]	@ (800cc4c <GasIndexAlgorithm_process+0x15c>)
 800cb02:	1c18      	adds	r0, r3, #0
 800cb04:	f7f3 fd1e 	bl	8000544 <__aeabi_fcmple>
 800cb08:	1e03      	subs	r3, r0, #0
 800cb0a:	d00c      	beq.n	800cb26 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	1c19      	adds	r1, r3, #0
 800cb16:	1c10      	adds	r0, r2, #0
 800cb18:	f7f3 fed2 	bl	80008c0 <__aeabi_fadd>
 800cb1c:	1c03      	adds	r3, r0, #0
 800cb1e:	1c1a      	adds	r2, r3, #0
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb24:	e080      	b.n	800cc28 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dd25      	ble.n	800cb78 <GasIndexAlgorithm_process+0x88>
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	4a48      	ldr	r2, [pc, #288]	@ (800cc50 <GasIndexAlgorithm_process+0x160>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	dc21      	bgt.n	800cb78 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	68ba      	ldr	r2, [r7, #8]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	dc04      	bgt.n	800cb48 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	3301      	adds	r3, #1
 800cb44:	60bb      	str	r3, [r7, #8]
 800cb46:	e00d      	b.n	800cb64 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	4a41      	ldr	r2, [pc, #260]	@ (800cc54 <GasIndexAlgorithm_process+0x164>)
 800cb4e:	4694      	mov	ip, r2
 800cb50:	4463      	add	r3, ip
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	dd05      	ble.n	800cb64 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	4a3d      	ldr	r2, [pc, #244]	@ (800cc54 <GasIndexAlgorithm_process+0x164>)
 800cb5e:	4694      	mov	ip, r2
 800cb60:	4463      	add	r3, ip
 800cb62:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	f7f4 fd2f 	bl	80015d0 <__aeabi_i2f>
 800cb72:	1c02      	adds	r2, r0, #0
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d005      	beq.n	800cb8c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	0018      	movs	r0, r3
 800cb84:	f000 f945 	bl	800ce12 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800cb88:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800cb8a:	d014      	beq.n	800cbb6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	1c11      	adds	r1, r2, #0
 800cb94:	0018      	movs	r0, r3
 800cb96:	f000 fbd1 	bl	800d33c <GasIndexAlgorithm__mox_model__process>
 800cb9a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	1c11      	adds	r1, r2, #0
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f000 fc25 	bl	800d3f8 <GasIndexAlgorithm__sigmoid_scaled__process>
 800cbae:	1c02      	adds	r2, r0, #0
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	639a      	str	r2, [r3, #56]	@ 0x38
 800cbb4:	e003      	b.n	800cbbe <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	1c11      	adds	r1, r2, #0
 800cbc6:	0018      	movs	r0, r3
 800cbc8:	f000 fcec 	bl	800d5a4 <GasIndexAlgorithm__adaptive_lowpass__process>
 800cbcc:	1c02      	adds	r2, r0, #0
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd6:	21fc      	movs	r1, #252	@ 0xfc
 800cbd8:	0589      	lsls	r1, r1, #22
 800cbda:	1c18      	adds	r0, r3, #0
 800cbdc:	f7f3 fca8 	bl	8000530 <__aeabi_fcmplt>
 800cbe0:	1e03      	subs	r3, r0, #0
 800cbe2:	d003      	beq.n	800cbec <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	22fc      	movs	r2, #252	@ 0xfc
 800cbe8:	0592      	lsls	r2, r2, #22
 800cbea:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	1c18      	adds	r0, r3, #0
 800cbf4:	f7f3 fcb0 	bl	8000558 <__aeabi_fcmpgt>
 800cbf8:	1e03      	subs	r3, r0, #0
 800cbfa:	d015      	beq.n	800cc28 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	1c11      	adds	r1, r2, #0
 800cc04:	0018      	movs	r0, r3
 800cc06:	f000 fa4f 	bl	800d0a8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	f000 f8e5 	bl	800cddc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800cc12:	1c04      	adds	r4, r0, #0
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	0018      	movs	r0, r3
 800cc18:	f000 f8ea 	bl	800cdf0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800cc1c:	1c02      	adds	r2, r0, #0
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	1c21      	adds	r1, r4, #0
 800cc22:	0018      	movs	r0, r3
 800cc24:	f000 fb7a 	bl	800d31c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc2c:	21fc      	movs	r1, #252	@ 0xfc
 800cc2e:	0589      	lsls	r1, r1, #22
 800cc30:	1c18      	adds	r0, r3, #0
 800cc32:	f7f3 fe45 	bl	80008c0 <__aeabi_fadd>
 800cc36:	1c03      	adds	r3, r0, #0
 800cc38:	1c18      	adds	r0, r3, #0
 800cc3a:	f7f4 fca9 	bl	8001590 <__aeabi_f2iz>
 800cc3e:	0002      	movs	r2, r0
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	601a      	str	r2, [r3, #0]
    return;
 800cc44:	46c0      	nop			@ (mov r8, r8)
}
 800cc46:	46bd      	mov	sp, r7
 800cc48:	b005      	add	sp, #20
 800cc4a:	bd90      	pop	{r4, r7, pc}
 800cc4c:	42340000 	.word	0x42340000
 800cc50:	0000fde7 	.word	0x0000fde7
 800cc54:	00007fff 	.word	0x00007fff

0800cc58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800cc58:	b5b0      	push	{r4, r5, r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	223c      	movs	r2, #60	@ 0x3c
 800cc64:	2100      	movs	r1, #0
 800cc66:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	4952      	ldr	r1, [pc, #328]	@ (800cdcc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800cc82:	1c18      	adds	r0, r3, #0
 800cc84:	f7f3 ffa6 	bl	8000bd4 <__aeabi_fdiv>
 800cc88:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cc8a:	2188      	movs	r1, #136	@ 0x88
 800cc8c:	05c9      	lsls	r1, r1, #23
 800cc8e:	1c18      	adds	r0, r3, #0
 800cc90:	f7f4 f986 	bl	8000fa0 <__aeabi_fmul>
 800cc94:	1c03      	adds	r3, r0, #0
 800cc96:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	494a      	ldr	r1, [pc, #296]	@ (800cdcc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800cca2:	1c18      	adds	r0, r3, #0
 800cca4:	f7f3 ff96 	bl	8000bd4 <__aeabi_fdiv>
 800cca8:	1c03      	adds	r3, r0, #0
 800ccaa:	1c19      	adds	r1, r3, #0
 800ccac:	1c20      	adds	r0, r4, #0
 800ccae:	f7f3 fe07 	bl	80008c0 <__aeabi_fadd>
 800ccb2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ccb4:	1c19      	adds	r1, r3, #0
 800ccb6:	1c28      	adds	r0, r5, #0
 800ccb8:	f7f3 ff8c 	bl	8000bd4 <__aeabi_fdiv>
 800ccbc:	1c03      	adds	r3, r0, #0
 800ccbe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	4940      	ldr	r1, [pc, #256]	@ (800cdcc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ccca:	1c18      	adds	r0, r3, #0
 800cccc:	f7f3 ff82 	bl	8000bd4 <__aeabi_fdiv>
 800ccd0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ccd2:	2185      	movs	r1, #133	@ 0x85
 800ccd4:	05c9      	lsls	r1, r1, #23
 800ccd6:	1c18      	adds	r0, r3, #0
 800ccd8:	f7f4 f962 	bl	8000fa0 <__aeabi_fmul>
 800ccdc:	1c03      	adds	r3, r0, #0
 800ccde:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	685b      	ldr	r3, [r3, #4]
 800cce8:	4938      	ldr	r1, [pc, #224]	@ (800cdcc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ccea:	1c18      	adds	r0, r3, #0
 800ccec:	f7f3 ff72 	bl	8000bd4 <__aeabi_fdiv>
 800ccf0:	1c03      	adds	r3, r0, #0
 800ccf2:	1c19      	adds	r1, r3, #0
 800ccf4:	1c20      	adds	r0, r4, #0
 800ccf6:	f7f3 fde3 	bl	80008c0 <__aeabi_fadd>
 800ccfa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ccfc:	1c19      	adds	r1, r3, #0
 800ccfe:	1c28      	adds	r0, r5, #0
 800cd00:	f7f3 ff68 	bl	8000bd4 <__aeabi_fdiv>
 800cd04:	1c03      	adds	r3, r0, #0
 800cd06:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d118      	bne.n	800cd46 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cd18:	2188      	movs	r1, #136	@ 0x88
 800cd1a:	05c9      	lsls	r1, r1, #23
 800cd1c:	1c18      	adds	r0, r3, #0
 800cd1e:	f7f4 f93f 	bl	8000fa0 <__aeabi_fmul>
 800cd22:	1c03      	adds	r3, r0, #0
 800cd24:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800cd2a:	4929      	ldr	r1, [pc, #164]	@ (800cdd0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800cd2c:	1c18      	adds	r0, r3, #0
 800cd2e:	f7f3 fdc7 	bl	80008c0 <__aeabi_fadd>
 800cd32:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800cd34:	1c19      	adds	r1, r3, #0
 800cd36:	1c20      	adds	r0, r4, #0
 800cd38:	f7f3 ff4c 	bl	8000bd4 <__aeabi_fdiv>
 800cd3c:	1c03      	adds	r3, r0, #0
 800cd3e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	655a      	str	r2, [r3, #84]	@ 0x54
 800cd44:	e017      	b.n	800cd76 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800cd4a:	2188      	movs	r1, #136	@ 0x88
 800cd4c:	05c9      	lsls	r1, r1, #23
 800cd4e:	1c18      	adds	r0, r3, #0
 800cd50:	f7f4 f926 	bl	8000fa0 <__aeabi_fmul>
 800cd54:	1c03      	adds	r3, r0, #0
 800cd56:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800cd5c:	491d      	ldr	r1, [pc, #116]	@ (800cdd4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800cd5e:	1c18      	adds	r0, r3, #0
 800cd60:	f7f3 fdae 	bl	80008c0 <__aeabi_fadd>
 800cd64:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800cd66:	1c19      	adds	r1, r3, #0
 800cd68:	1c20      	adds	r0, r4, #0
 800cd6a:	f7f3 ff33 	bl	8000bd4 <__aeabi_fdiv>
 800cd6e:	1c03      	adds	r3, r0, #0
 800cd70:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800cd7a:	2185      	movs	r1, #133	@ 0x85
 800cd7c:	05c9      	lsls	r1, r1, #23
 800cd7e:	1c18      	adds	r0, r3, #0
 800cd80:	f7f4 f90e 	bl	8000fa0 <__aeabi_fmul>
 800cd84:	1c03      	adds	r3, r0, #0
 800cd86:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	4912      	ldr	r1, [pc, #72]	@ (800cdd8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800cd8e:	1c18      	adds	r0, r3, #0
 800cd90:	f7f3 fd96 	bl	80008c0 <__aeabi_fadd>
 800cd94:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800cd96:	1c19      	adds	r1, r3, #0
 800cd98:	1c20      	adds	r0, r4, #0
 800cd9a:	f7f3 ff1b 	bl	8000bd4 <__aeabi_fdiv>
 800cd9e:	1c03      	adds	r3, r0, #0
 800cda0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800cdc4:	46c0      	nop			@ (mov r8, r8)
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	b002      	add	sp, #8
 800cdca:	bdb0      	pop	{r4, r5, r7, pc}
 800cdcc:	45610000 	.word	0x45610000
 800cdd0:	44960000 	.word	0x44960000
 800cdd4:	41a00000 	.word	0x41a00000
 800cdd8:	451c4000 	.word	0x451c4000

0800cddc <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800cde8:	1c18      	adds	r0, r3, #0
 800cdea:	46bd      	mov	sp, r7
 800cdec:	b002      	add	sp, #8
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800ce00:	1c19      	adds	r1, r3, #0
 800ce02:	1c10      	adds	r0, r2, #0
 800ce04:	f7f3 fd5c 	bl	80008c0 <__aeabi_fadd>
 800ce08:	1c03      	adds	r3, r0, #0
}
 800ce0a:	1c18      	adds	r0, r3, #0
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	b002      	add	sp, #8
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	223c      	movs	r2, #60	@ 0x3c
 800ce1e:	5c9b      	ldrb	r3, [r3, r2]
}
 800ce20:	0018      	movs	r0, r3
 800ce22:	46bd      	mov	sp, r7
 800ce24:	b002      	add	sp, #8
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800ce28:	b5b0      	push	{r4, r5, r7, lr}
 800ce2a:	b08c      	sub	sp, #48	@ 0x30
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ce34:	1c19      	adds	r1, r3, #0
 800ce36:	4895      	ldr	r0, [pc, #596]	@ (800d08c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800ce38:	f7f4 f9f0 	bl	800121c <__aeabi_fsub>
 800ce3c:	1c03      	adds	r3, r0, #0
 800ce3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce44:	1c19      	adds	r1, r3, #0
 800ce46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce48:	f7f3 fb86 	bl	8000558 <__aeabi_fcmpgt>
 800ce4c:	1e03      	subs	r3, r0, #0
 800ce4e:	d00b      	beq.n	800ce68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ce58:	1c19      	adds	r1, r3, #0
 800ce5a:	1c10      	adds	r0, r2, #0
 800ce5c:	f7f3 fd30 	bl	80008c0 <__aeabi_fadd>
 800ce60:	1c03      	adds	r3, r0, #0
 800ce62:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce6c:	1c19      	adds	r1, r3, #0
 800ce6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce70:	f7f3 fb72 	bl	8000558 <__aeabi_fcmpgt>
 800ce74:	1e03      	subs	r3, r0, #0
 800ce76:	d00b      	beq.n	800ce90 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ce80:	1c19      	adds	r1, r3, #0
 800ce82:	1c10      	adds	r0, r2, #0
 800ce84:	f7f3 fd1c 	bl	80008c0 <__aeabi_fadd>
 800ce88:	1c03      	adds	r3, r0, #0
 800ce8a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6959      	ldr	r1, [r3, #20]
 800ce94:	4a7e      	ldr	r2, [pc, #504]	@ (800d090 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	0018      	movs	r0, r3
 800ce9a:	f000 f9f1 	bl	800d280 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	1c11      	adds	r1, r2, #0
 800cea6:	0018      	movs	r0, r3
 800cea8:	f000 f9fa 	bl	800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ceac:	1c03      	adds	r3, r0, #0
 800ceae:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800cebc:	1c19      	adds	r1, r3, #0
 800cebe:	1c10      	adds	r0, r2, #0
 800cec0:	f7f4 f9ac 	bl	800121c <__aeabi_fsub>
 800cec4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800cec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cec8:	1c18      	adds	r0, r3, #0
 800ceca:	f7f4 f869 	bl	8000fa0 <__aeabi_fmul>
 800cece:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ced0:	1c19      	adds	r1, r3, #0
 800ced2:	1c20      	adds	r0, r4, #0
 800ced4:	f7f3 fcf4 	bl	80008c0 <__aeabi_fadd>
 800ced8:	1c03      	adds	r3, r0, #0
 800ceda:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800cee4:	1c19      	adds	r1, r3, #0
 800cee6:	486b      	ldr	r0, [pc, #428]	@ (800d094 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800cee8:	f7f4 f998 	bl	800121c <__aeabi_fsub>
 800ceec:	1c03      	adds	r3, r0, #0
 800ceee:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	1c11      	adds	r1, r2, #0
 800cef8:	0018      	movs	r0, r3
 800cefa:	f000 f9d1 	bl	800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cefe:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800cf00:	1c19      	adds	r1, r3, #0
 800cf02:	1c28      	adds	r0, r5, #0
 800cf04:	f7f4 f84c 	bl	8000fa0 <__aeabi_fmul>
 800cf08:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800cf0a:	1c19      	adds	r1, r3, #0
 800cf0c:	1c20      	adds	r0, r4, #0
 800cf0e:	f7f3 fcd7 	bl	80008c0 <__aeabi_fadd>
 800cf12:	1c03      	adds	r3, r0, #0
 800cf14:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cf16:	4a60      	ldr	r2, [pc, #384]	@ (800d098 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800cf18:	6a39      	ldr	r1, [r7, #32]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	0018      	movs	r0, r3
 800cf1e:	f000 f9af 	bl	800d280 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	1c11      	adds	r1, r2, #0
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	f000 f9b8 	bl	800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cf30:	1c03      	adds	r3, r0, #0
 800cf32:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800cf34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf36:	69f8      	ldr	r0, [r7, #28]
 800cf38:	f7f4 f832 	bl	8000fa0 <__aeabi_fmul>
 800cf3c:	1c03      	adds	r3, r0, #0
 800cf3e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6999      	ldr	r1, [r3, #24]
 800cf48:	4a51      	ldr	r2, [pc, #324]	@ (800d090 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	f000 f997 	bl	800d280 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	1c11      	adds	r1, r2, #0
 800cf5a:	0018      	movs	r0, r3
 800cf5c:	f000 f9a0 	bl	800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cf60:	1c03      	adds	r3, r0, #0
 800cf62:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800cf70:	1c19      	adds	r1, r3, #0
 800cf72:	1c10      	adds	r0, r2, #0
 800cf74:	f7f4 f952 	bl	800121c <__aeabi_fsub>
 800cf78:	1c03      	adds	r3, r0, #0
 800cf7a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800cf7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf7e:	69b8      	ldr	r0, [r7, #24]
 800cf80:	f7f4 f94c 	bl	800121c <__aeabi_fsub>
 800cf84:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800cf86:	1c19      	adds	r1, r3, #0
 800cf88:	1c28      	adds	r0, r5, #0
 800cf8a:	f7f4 f809 	bl	8000fa0 <__aeabi_fmul>
 800cf8e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800cf90:	1c19      	adds	r1, r3, #0
 800cf92:	1c20      	adds	r0, r4, #0
 800cf94:	f7f3 fc94 	bl	80008c0 <__aeabi_fadd>
 800cf98:	1c03      	adds	r3, r0, #0
 800cf9a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800cfa4:	1c19      	adds	r1, r3, #0
 800cfa6:	483b      	ldr	r0, [pc, #236]	@ (800d094 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800cfa8:	f7f4 f938 	bl	800121c <__aeabi_fsub>
 800cfac:	1c03      	adds	r3, r0, #0
 800cfae:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	1c11      	adds	r1, r2, #0
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f000 f971 	bl	800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cfbe:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800cfc0:	1c19      	adds	r1, r3, #0
 800cfc2:	1c28      	adds	r0, r5, #0
 800cfc4:	f7f3 ffec 	bl	8000fa0 <__aeabi_fmul>
 800cfc8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800cfca:	1c19      	adds	r1, r3, #0
 800cfcc:	1c20      	adds	r0, r4, #0
 800cfce:	f7f3 fc77 	bl	80008c0 <__aeabi_fadd>
 800cfd2:	1c03      	adds	r3, r0, #0
 800cfd4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800cfd6:	4a30      	ldr	r2, [pc, #192]	@ (800d098 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800cfd8:	6939      	ldr	r1, [r7, #16]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	0018      	movs	r0, r3
 800cfde:	f000 f94f 	bl	800d280 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	1c11      	adds	r1, r2, #0
 800cfea:	0018      	movs	r0, r3
 800cfec:	f000 f958 	bl	800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800cff0:	1c03      	adds	r3, r0, #0
 800cff2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800cff4:	6979      	ldr	r1, [r7, #20]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7f3 ffd2 	bl	8000fa0 <__aeabi_fmul>
 800cffc:	1c03      	adds	r3, r0, #0
 800cffe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	4923      	ldr	r1, [pc, #140]	@ (800d09c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800d00e:	1c18      	adds	r0, r3, #0
 800d010:	f7f3 fde0 	bl	8000bd4 <__aeabi_fdiv>
 800d014:	1c03      	adds	r3, r0, #0
 800d016:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800d018:	69f9      	ldr	r1, [r7, #28]
 800d01a:	20fe      	movs	r0, #254	@ 0xfe
 800d01c:	0580      	lsls	r0, r0, #22
 800d01e:	f7f4 f8fd 	bl	800121c <__aeabi_fsub>
 800d022:	1c03      	adds	r3, r0, #0
 800d024:	491e      	ldr	r1, [pc, #120]	@ (800d0a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800d026:	1c18      	adds	r0, r3, #0
 800d028:	f7f3 ffba 	bl	8000fa0 <__aeabi_fmul>
 800d02c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800d02e:	491d      	ldr	r1, [pc, #116]	@ (800d0a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800d030:	1c18      	adds	r0, r3, #0
 800d032:	f7f4 f8f3 	bl	800121c <__aeabi_fsub>
 800d036:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800d038:	1c19      	adds	r1, r3, #0
 800d03a:	1c28      	adds	r0, r5, #0
 800d03c:	f7f3 ffb0 	bl	8000fa0 <__aeabi_fmul>
 800d040:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800d042:	1c19      	adds	r1, r3, #0
 800d044:	1c20      	adds	r0, r4, #0
 800d046:	f7f3 fc3b 	bl	80008c0 <__aeabi_fadd>
 800d04a:	1c03      	adds	r3, r0, #0
 800d04c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d056:	2100      	movs	r1, #0
 800d058:	1c18      	adds	r0, r3, #0
 800d05a:	f7f3 fa69 	bl	8000530 <__aeabi_fcmplt>
 800d05e:	1e03      	subs	r3, r0, #0
 800d060:	d002      	beq.n	800d068 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800d070:	1c19      	adds	r1, r3, #0
 800d072:	1c10      	adds	r0, r2, #0
 800d074:	f7f3 fa70 	bl	8000558 <__aeabi_fcmpgt>
 800d078:	1e03      	subs	r3, r0, #0
 800d07a:	d100      	bne.n	800d07e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800d07c:	e002      	b.n	800d084 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d084:	46c0      	nop			@ (mov r8, r8)
 800d086:	46bd      	mov	sp, r7
 800d088:	b00c      	add	sp, #48	@ 0x30
 800d08a:	bdb0      	pop	{r4, r5, r7, pc}
 800d08c:	46fffe00 	.word	0x46fffe00
 800d090:	3c23d70a 	.word	0x3c23d70a
 800d094:	43ff0000 	.word	0x43ff0000
 800d098:	3db851ec 	.word	0x3db851ec
 800d09c:	42700000 	.word	0x42700000
 800d0a0:	3fa66666 	.word	0x3fa66666
 800d0a4:	3e99999a 	.word	0x3e99999a

0800d0a8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800d0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	223c      	movs	r2, #60	@ 0x3c
 800d0b6:	5c9b      	ldrb	r3, [r3, r2]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	4053      	eors	r3, r2
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00a      	beq.n	800d0d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	223c      	movs	r2, #60	@ 0x3c
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800d0d6:	e0c8      	b.n	800d26a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0dc:	4965      	ldr	r1, [pc, #404]	@ (800d274 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800d0de:	1c18      	adds	r0, r3, #0
 800d0e0:	f7f3 fa44 	bl	800056c <__aeabi_fcmpge>
 800d0e4:	1e03      	subs	r3, r0, #0
 800d0e6:	d107      	bne.n	800d0f8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800d0ec:	4962      	ldr	r1, [pc, #392]	@ (800d278 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800d0ee:	1c18      	adds	r0, r3, #0
 800d0f0:	f7f3 fa28 	bl	8000544 <__aeabi_fcmple>
 800d0f4:	1e03      	subs	r3, r0, #0
 800d0f6:	d00e      	beq.n	800d116 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800d100:	1c19      	adds	r1, r3, #0
 800d102:	1c10      	adds	r0, r2, #0
 800d104:	f7f3 fbdc 	bl	80008c0 <__aeabi_fadd>
 800d108:	1c03      	adds	r3, r0, #0
 800d10a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d11a:	1c19      	adds	r1, r3, #0
 800d11c:	6838      	ldr	r0, [r7, #0]
 800d11e:	f7f4 f87d 	bl	800121c <__aeabi_fsub>
 800d122:	1c03      	adds	r3, r0, #0
 800d124:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	0018      	movs	r0, r3
 800d12a:	f7ff fe7d 	bl	800ce28 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d132:	1c19      	adds	r1, r3, #0
 800d134:	6838      	ldr	r0, [r7, #0]
 800d136:	f7f4 f871 	bl	800121c <__aeabi_fsub>
 800d13a:	1c03      	adds	r3, r0, #0
 800d13c:	2185      	movs	r1, #133	@ 0x85
 800d13e:	05c9      	lsls	r1, r1, #23
 800d140:	1c18      	adds	r0, r3, #0
 800d142:	f7f3 fd47 	bl	8000bd4 <__aeabi_fdiv>
 800d146:	1c03      	adds	r3, r0, #0
 800d148:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800d14a:	2100      	movs	r1, #0
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f7f3 f9ef 	bl	8000530 <__aeabi_fcmplt>
 800d152:	1e03      	subs	r3, r0, #0
 800d154:	d008      	beq.n	800d168 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	1c18      	adds	r0, r3, #0
 800d15e:	f7f4 f85d 	bl	800121c <__aeabi_fsub>
 800d162:	1c03      	adds	r3, r0, #0
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	e007      	b.n	800d178 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d16c:	1c19      	adds	r1, r3, #0
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	f7f3 fba6 	bl	80008c0 <__aeabi_fadd>
 800d174:	1c03      	adds	r3, r0, #0
 800d176:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800d178:	23fe      	movs	r3, #254	@ 0xfe
 800d17a:	059b      	lsls	r3, r3, #22
 800d17c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800d17e:	493f      	ldr	r1, [pc, #252]	@ (800d27c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800d180:	6978      	ldr	r0, [r7, #20]
 800d182:	f7f3 f9e9 	bl	8000558 <__aeabi_fcmpgt>
 800d186:	1e03      	subs	r3, r0, #0
 800d188:	d010      	beq.n	800d1ac <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800d18a:	493c      	ldr	r1, [pc, #240]	@ (800d27c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800d18c:	6978      	ldr	r0, [r7, #20]
 800d18e:	f7f3 fd21 	bl	8000bd4 <__aeabi_fdiv>
 800d192:	1c03      	adds	r3, r0, #0
 800d194:	1c1c      	adds	r4, r3, #0
 800d196:	4939      	ldr	r1, [pc, #228]	@ (800d27c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800d198:	6978      	ldr	r0, [r7, #20]
 800d19a:	f7f3 fd1b 	bl	8000bd4 <__aeabi_fdiv>
 800d19e:	1c03      	adds	r3, r0, #0
 800d1a0:	1c19      	adds	r1, r3, #0
 800d1a2:	1c20      	adds	r0, r4, #0
 800d1a4:	f7f3 fefc 	bl	8000fa0 <__aeabi_fmul>
 800d1a8:	1c03      	adds	r3, r0, #0
 800d1aa:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800d1b0:	1c19      	adds	r1, r3, #0
 800d1b2:	2085      	movs	r0, #133	@ 0x85
 800d1b4:	05c0      	lsls	r0, r0, #23
 800d1b6:	f7f4 f831 	bl	800121c <__aeabi_fsub>
 800d1ba:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800d1bc:	6939      	ldr	r1, [r7, #16]
 800d1be:	1c18      	adds	r0, r3, #0
 800d1c0:	f7f3 feee 	bl	8000fa0 <__aeabi_fmul>
 800d1c4:	1c03      	adds	r3, r0, #0
 800d1c6:	1c18      	adds	r0, r3, #0
 800d1c8:	f018 fb04 	bl	80257d4 <sqrtf>
 800d1cc:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800d1d6:	2185      	movs	r1, #133	@ 0x85
 800d1d8:	05c9      	lsls	r1, r1, #23
 800d1da:	6938      	ldr	r0, [r7, #16]
 800d1dc:	f7f3 fee0 	bl	8000fa0 <__aeabi_fmul>
 800d1e0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800d1e2:	1c19      	adds	r1, r3, #0
 800d1e4:	1c28      	adds	r0, r5, #0
 800d1e6:	f7f3 fcf5 	bl	8000bd4 <__aeabi_fdiv>
 800d1ea:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800d1ec:	1c19      	adds	r1, r3, #0
 800d1ee:	1c20      	adds	r0, r4, #0
 800d1f0:	f7f3 fed6 	bl	8000fa0 <__aeabi_fmul>
 800d1f4:	1c03      	adds	r3, r0, #0
 800d1f6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1fc:	68f9      	ldr	r1, [r7, #12]
 800d1fe:	1c18      	adds	r0, r3, #0
 800d200:	f7f3 fece 	bl	8000fa0 <__aeabi_fmul>
 800d204:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800d206:	6939      	ldr	r1, [r7, #16]
 800d208:	1c18      	adds	r0, r3, #0
 800d20a:	f7f3 fce3 	bl	8000bd4 <__aeabi_fdiv>
 800d20e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800d210:	68f9      	ldr	r1, [r7, #12]
 800d212:	1c18      	adds	r0, r3, #0
 800d214:	f7f3 fec4 	bl	8000fa0 <__aeabi_fmul>
 800d218:	1c03      	adds	r3, r0, #0
             sqrtf(
 800d21a:	1c19      	adds	r1, r3, #0
 800d21c:	1c20      	adds	r0, r4, #0
 800d21e:	f7f3 fb4f 	bl	80008c0 <__aeabi_fadd>
 800d222:	1c03      	adds	r3, r0, #0
 800d224:	1c18      	adds	r0, r3, #0
 800d226:	f018 fad5 	bl	80257d4 <sqrtf>
 800d22a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800d22c:	1c19      	adds	r1, r3, #0
 800d22e:	1c30      	adds	r0, r6, #0
 800d230:	f7f3 feb6 	bl	8000fa0 <__aeabi_fmul>
 800d234:	1c03      	adds	r3, r0, #0
 800d236:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d244:	68f9      	ldr	r1, [r7, #12]
 800d246:	1c18      	adds	r0, r3, #0
 800d248:	f7f3 feaa 	bl	8000fa0 <__aeabi_fmul>
 800d24c:	1c03      	adds	r3, r0, #0
 800d24e:	2182      	movs	r1, #130	@ 0x82
 800d250:	05c9      	lsls	r1, r1, #23
 800d252:	1c18      	adds	r0, r3, #0
 800d254:	f7f3 fcbe 	bl	8000bd4 <__aeabi_fdiv>
 800d258:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800d25a:	1c19      	adds	r1, r3, #0
 800d25c:	1c20      	adds	r0, r4, #0
 800d25e:	f7f3 fb2f 	bl	80008c0 <__aeabi_fadd>
 800d262:	1c03      	adds	r3, r0, #0
 800d264:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800d26a:	46c0      	nop			@ (mov r8, r8)
 800d26c:	46bd      	mov	sp, r7
 800d26e:	b007      	add	sp, #28
 800d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d272:	46c0      	nop			@ (mov r8, r8)
 800d274:	42c80000 	.word	0x42c80000
 800d278:	c2c80000 	.word	0xc2c80000
 800d27c:	44b40000 	.word	0x44b40000

0800d280 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d298:	46c0      	nop			@ (mov r8, r8)
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b004      	add	sp, #16
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2b2:	1c19      	adds	r1, r3, #0
 800d2b4:	6838      	ldr	r0, [r7, #0]
 800d2b6:	f7f3 ffb1 	bl	800121c <__aeabi_fsub>
 800d2ba:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800d2bc:	1c19      	adds	r1, r3, #0
 800d2be:	1c20      	adds	r0, r4, #0
 800d2c0:	f7f3 fe6e 	bl	8000fa0 <__aeabi_fmul>
 800d2c4:	1c03      	adds	r3, r0, #0
 800d2c6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800d2c8:	4912      	ldr	r1, [pc, #72]	@ (800d314 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7f3 f930 	bl	8000530 <__aeabi_fcmplt>
 800d2d0:	1e03      	subs	r3, r0, #0
 800d2d2:	d002      	beq.n	800d2da <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800d2d4:	23fe      	movs	r3, #254	@ 0xfe
 800d2d6:	059b      	lsls	r3, r3, #22
 800d2d8:	e018      	b.n	800d30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800d2da:	490f      	ldr	r1, [pc, #60]	@ (800d318 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f7f3 f93b 	bl	8000558 <__aeabi_fcmpgt>
 800d2e2:	1e03      	subs	r3, r0, #0
 800d2e4:	d001      	beq.n	800d2ea <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	e010      	b.n	800d30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1c18      	adds	r0, r3, #0
 800d2ee:	f018 fa49 	bl	8025784 <expf>
 800d2f2:	1c03      	adds	r3, r0, #0
 800d2f4:	21fe      	movs	r1, #254	@ 0xfe
 800d2f6:	0589      	lsls	r1, r1, #22
 800d2f8:	1c18      	adds	r0, r3, #0
 800d2fa:	f7f3 fae1 	bl	80008c0 <__aeabi_fadd>
 800d2fe:	1c03      	adds	r3, r0, #0
 800d300:	1c19      	adds	r1, r3, #0
 800d302:	20fe      	movs	r0, #254	@ 0xfe
 800d304:	0580      	lsls	r0, r0, #22
 800d306:	f7f3 fc65 	bl	8000bd4 <__aeabi_fdiv>
 800d30a:	1c03      	adds	r3, r0, #0
    }
}
 800d30c:	1c18      	adds	r0, r3, #0
 800d30e:	46bd      	mov	sp, r7
 800d310:	b005      	add	sp, #20
 800d312:	bd90      	pop	{r4, r7, pc}
 800d314:	c2480000 	.word	0xc2480000
 800d318:	42480000 	.word	0x42480000

0800d31c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68ba      	ldr	r2, [r7, #8]
 800d32c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d334:	46c0      	nop			@ (mov r8, r8)
 800d336:	46bd      	mov	sp, r7
 800d338:	b004      	add	sp, #16
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d114      	bne.n	800d378 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d352:	1c19      	adds	r1, r3, #0
 800d354:	6838      	ldr	r0, [r7, #0]
 800d356:	f7f3 ff61 	bl	800121c <__aeabi_fsub>
 800d35a:	1c03      	adds	r3, r0, #0
 800d35c:	4918      	ldr	r1, [pc, #96]	@ (800d3c0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800d35e:	1c18      	adds	r0, r3, #0
 800d360:	f7f3 fc38 	bl	8000bd4 <__aeabi_fdiv>
 800d364:	1c03      	adds	r3, r0, #0
 800d366:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800d36c:	1c19      	adds	r1, r3, #0
 800d36e:	1c10      	adds	r0, r2, #0
 800d370:	f7f3 fe16 	bl	8000fa0 <__aeabi_fmul>
 800d374:	1c03      	adds	r3, r0, #0
 800d376:	e01f      	b.n	800d3b8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d37c:	1c19      	adds	r1, r3, #0
 800d37e:	6838      	ldr	r0, [r7, #0]
 800d380:	f7f3 ff4c 	bl	800121c <__aeabi_fsub>
 800d384:	1c03      	adds	r3, r0, #0
 800d386:	1c1a      	adds	r2, r3, #0
 800d388:	2380      	movs	r3, #128	@ 0x80
 800d38a:	061b      	lsls	r3, r3, #24
 800d38c:	4053      	eors	r3, r2
 800d38e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d394:	490b      	ldr	r1, [pc, #44]	@ (800d3c4 <GasIndexAlgorithm__mox_model__process+0x88>)
 800d396:	1c18      	adds	r0, r3, #0
 800d398:	f7f3 fa92 	bl	80008c0 <__aeabi_fadd>
 800d39c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800d39e:	1c19      	adds	r1, r3, #0
 800d3a0:	1c20      	adds	r0, r4, #0
 800d3a2:	f7f3 fc17 	bl	8000bd4 <__aeabi_fdiv>
 800d3a6:	1c03      	adds	r3, r0, #0
 800d3a8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800d3ae:	1c19      	adds	r1, r3, #0
 800d3b0:	1c10      	adds	r0, r2, #0
 800d3b2:	f7f3 fdf5 	bl	8000fa0 <__aeabi_fmul>
 800d3b6:	1c03      	adds	r3, r0, #0
    }
}
 800d3b8:	1c18      	adds	r0, r3, #0
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	b003      	add	sp, #12
 800d3be:	bd90      	pop	{r4, r7, pc}
 800d3c0:	44fa0000 	.word	0x44fa0000
 800d3c4:	435c0000 	.word	0x435c0000

0800d3c8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2180      	movs	r1, #128	@ 0x80
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2184      	movs	r1, #132	@ 0x84
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2188      	movs	r1, #136	@ 0x88
 800d3ea:	683a      	ldr	r2, [r7, #0]
 800d3ec:	505a      	str	r2, [r3, r1]
}
 800d3ee:	46c0      	nop			@ (mov r8, r8)
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	b004      	add	sp, #16
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2280      	movs	r2, #128	@ 0x80
 800d406:	589c      	ldr	r4, [r3, r2]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2284      	movs	r2, #132	@ 0x84
 800d40c:	589b      	ldr	r3, [r3, r2]
 800d40e:	1c19      	adds	r1, r3, #0
 800d410:	6838      	ldr	r0, [r7, #0]
 800d412:	f7f3 ff03 	bl	800121c <__aeabi_fsub>
 800d416:	1c03      	adds	r3, r0, #0
 800d418:	1c19      	adds	r1, r3, #0
 800d41a:	1c20      	adds	r0, r4, #0
 800d41c:	f7f3 fdc0 	bl	8000fa0 <__aeabi_fmul>
 800d420:	1c03      	adds	r3, r0, #0
 800d422:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800d424:	4940      	ldr	r1, [pc, #256]	@ (800d528 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800d426:	68b8      	ldr	r0, [r7, #8]
 800d428:	f7f3 f882 	bl	8000530 <__aeabi_fcmplt>
 800d42c:	1e03      	subs	r3, r0, #0
 800d42e:	d001      	beq.n	800d434 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800d430:	4b3e      	ldr	r3, [pc, #248]	@ (800d52c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d432:	e075      	b.n	800d520 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800d434:	493e      	ldr	r1, [pc, #248]	@ (800d530 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800d436:	68b8      	ldr	r0, [r7, #8]
 800d438:	f7f3 f88e 	bl	8000558 <__aeabi_fcmpgt>
 800d43c:	1e03      	subs	r3, r0, #0
 800d43e:	d001      	beq.n	800d444 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800d440:	2300      	movs	r3, #0
 800d442:	e06d      	b.n	800d520 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800d444:	2100      	movs	r1, #0
 800d446:	6838      	ldr	r0, [r7, #0]
 800d448:	f7f3 f890 	bl	800056c <__aeabi_fcmpge>
 800d44c:	1e03      	subs	r3, r0, #0
 800d44e:	d047      	beq.n	800d4e0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2288      	movs	r2, #136	@ 0x88
 800d454:	589b      	ldr	r3, [r3, r2]
 800d456:	21fe      	movs	r1, #254	@ 0xfe
 800d458:	0589      	lsls	r1, r1, #22
 800d45a:	1c18      	adds	r0, r3, #0
 800d45c:	f7f3 f862 	bl	8000524 <__aeabi_fcmpeq>
 800d460:	1e03      	subs	r3, r0, #0
 800d462:	d00e      	beq.n	800d482 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	1c19      	adds	r1, r3, #0
 800d46a:	20fe      	movs	r0, #254	@ 0xfe
 800d46c:	0580      	lsls	r0, r0, #22
 800d46e:	f7f3 fed5 	bl	800121c <__aeabi_fsub>
 800d472:	1c03      	adds	r3, r0, #0
 800d474:	492f      	ldr	r1, [pc, #188]	@ (800d534 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800d476:	1c18      	adds	r0, r3, #0
 800d478:	f7f3 fd92 	bl	8000fa0 <__aeabi_fmul>
 800d47c:	1c03      	adds	r3, r0, #0
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e012      	b.n	800d4a8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	492c      	ldr	r1, [pc, #176]	@ (800d538 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800d488:	1c18      	adds	r0, r3, #0
 800d48a:	f7f3 fd89 	bl	8000fa0 <__aeabi_fmul>
 800d48e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800d490:	1c19      	adds	r1, r3, #0
 800d492:	4826      	ldr	r0, [pc, #152]	@ (800d52c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d494:	f7f3 fec2 	bl	800121c <__aeabi_fsub>
 800d498:	1c03      	adds	r3, r0, #0
 800d49a:	2181      	movs	r1, #129	@ 0x81
 800d49c:	05c9      	lsls	r1, r1, #23
 800d49e:	1c18      	adds	r0, r3, #0
 800d4a0:	f7f3 fb98 	bl	8000bd4 <__aeabi_fdiv>
 800d4a4:	1c03      	adds	r3, r0, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800d4a8:	4920      	ldr	r1, [pc, #128]	@ (800d52c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f7f3 fa08 	bl	80008c0 <__aeabi_fadd>
 800d4b0:	1c03      	adds	r3, r0, #0
 800d4b2:	1c1c      	adds	r4, r3, #0
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	1c18      	adds	r0, r3, #0
 800d4b8:	f018 f964 	bl	8025784 <expf>
 800d4bc:	1c03      	adds	r3, r0, #0
 800d4be:	21fe      	movs	r1, #254	@ 0xfe
 800d4c0:	0589      	lsls	r1, r1, #22
 800d4c2:	1c18      	adds	r0, r3, #0
 800d4c4:	f7f3 f9fc 	bl	80008c0 <__aeabi_fadd>
 800d4c8:	1c03      	adds	r3, r0, #0
 800d4ca:	1c19      	adds	r1, r3, #0
 800d4cc:	1c20      	adds	r0, r4, #0
 800d4ce:	f7f3 fb81 	bl	8000bd4 <__aeabi_fdiv>
 800d4d2:	1c03      	adds	r3, r0, #0
 800d4d4:	68f9      	ldr	r1, [r7, #12]
 800d4d6:	1c18      	adds	r0, r3, #0
 800d4d8:	f7f3 fea0 	bl	800121c <__aeabi_fsub>
 800d4dc:	1c03      	adds	r3, r0, #0
 800d4de:	e01f      	b.n	800d520 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2188      	movs	r1, #136	@ 0x88
 800d4e8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800d4ea:	1c19      	adds	r1, r3, #0
 800d4ec:	1c10      	adds	r0, r2, #0
 800d4ee:	f7f3 fb71 	bl	8000bd4 <__aeabi_fdiv>
 800d4f2:	1c03      	adds	r3, r0, #0
 800d4f4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	1c18      	adds	r0, r3, #0
 800d4fa:	f018 f943 	bl	8025784 <expf>
 800d4fe:	1c03      	adds	r3, r0, #0
 800d500:	21fe      	movs	r1, #254	@ 0xfe
 800d502:	0589      	lsls	r1, r1, #22
 800d504:	1c18      	adds	r0, r3, #0
 800d506:	f7f3 f9db 	bl	80008c0 <__aeabi_fadd>
 800d50a:	1c03      	adds	r3, r0, #0
 800d50c:	1c19      	adds	r1, r3, #0
 800d50e:	4807      	ldr	r0, [pc, #28]	@ (800d52c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800d510:	f7f3 fb60 	bl	8000bd4 <__aeabi_fdiv>
 800d514:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800d516:	1c19      	adds	r1, r3, #0
 800d518:	1c20      	adds	r0, r4, #0
 800d51a:	f7f3 fd41 	bl	8000fa0 <__aeabi_fmul>
 800d51e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800d520:	1c18      	adds	r0, r3, #0
 800d522:	46bd      	mov	sp, r7
 800d524:	b005      	add	sp, #20
 800d526:	bd90      	pop	{r4, r7, pc}
 800d528:	c2480000 	.word	0xc2480000
 800d52c:	43fa0000 	.word	0x43fa0000
 800d530:	42480000 	.word	0x42480000
 800d534:	3f8041ab 	.word	0x3f8041ab
 800d538:	40a00000 	.word	0x40a00000

0800d53c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800d53c:	b590      	push	{r4, r7, lr}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	4913      	ldr	r1, [pc, #76]	@ (800d59c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800d54e:	1c18      	adds	r0, r3, #0
 800d550:	f7f3 f9b6 	bl	80008c0 <__aeabi_fadd>
 800d554:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d556:	1c19      	adds	r1, r3, #0
 800d558:	1c20      	adds	r0, r4, #0
 800d55a:	f7f3 fb3b 	bl	8000bd4 <__aeabi_fdiv>
 800d55e:	1c03      	adds	r3, r0, #0
 800d560:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	228c      	movs	r2, #140	@ 0x8c
 800d566:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	490b      	ldr	r1, [pc, #44]	@ (800d5a0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800d572:	1c18      	adds	r0, r3, #0
 800d574:	f7f3 f9a4 	bl	80008c0 <__aeabi_fadd>
 800d578:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800d57a:	1c19      	adds	r1, r3, #0
 800d57c:	1c20      	adds	r0, r4, #0
 800d57e:	f7f3 fb29 	bl	8000bd4 <__aeabi_fdiv>
 800d582:	1c03      	adds	r3, r0, #0
 800d584:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2290      	movs	r2, #144	@ 0x90
 800d58a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2294      	movs	r2, #148	@ 0x94
 800d590:	2100      	movs	r1, #0
 800d592:	5499      	strb	r1, [r3, r2]
}
 800d594:	46c0      	nop			@ (mov r8, r8)
 800d596:	46bd      	mov	sp, r7
 800d598:	b003      	add	sp, #12
 800d59a:	bd90      	pop	{r4, r7, pc}
 800d59c:	41a00000 	.word	0x41a00000
 800d5a0:	43fa0000 	.word	0x43fa0000

0800d5a4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800d5a4:	b590      	push	{r4, r7, lr}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2294      	movs	r2, #148	@ 0x94
 800d5b2:	5c9b      	ldrb	r3, [r3, r2]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	4053      	eors	r3, r2
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00f      	beq.n	800d5de <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2198      	movs	r1, #152	@ 0x98
 800d5c2:	683a      	ldr	r2, [r7, #0]
 800d5c4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	219c      	movs	r1, #156	@ 0x9c
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	21a0      	movs	r1, #160	@ 0xa0
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2294      	movs	r2, #148	@ 0x94
 800d5da:	2101      	movs	r1, #1
 800d5dc:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	228c      	movs	r2, #140	@ 0x8c
 800d5e2:	589b      	ldr	r3, [r3, r2]
 800d5e4:	1c19      	adds	r1, r3, #0
 800d5e6:	20fe      	movs	r0, #254	@ 0xfe
 800d5e8:	0580      	lsls	r0, r0, #22
 800d5ea:	f7f3 fe17 	bl	800121c <__aeabi_fsub>
 800d5ee:	1c03      	adds	r3, r0, #0
 800d5f0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2298      	movs	r2, #152	@ 0x98
 800d5f6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800d5f8:	1c19      	adds	r1, r3, #0
 800d5fa:	f7f3 fcd1 	bl	8000fa0 <__aeabi_fmul>
 800d5fe:	1c03      	adds	r3, r0, #0
 800d600:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	228c      	movs	r2, #140	@ 0x8c
 800d606:	589b      	ldr	r3, [r3, r2]
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	1c18      	adds	r0, r3, #0
 800d60c:	f7f3 fcc8 	bl	8000fa0 <__aeabi_fmul>
 800d610:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800d612:	1c19      	adds	r1, r3, #0
 800d614:	1c20      	adds	r0, r4, #0
 800d616:	f7f3 f953 	bl	80008c0 <__aeabi_fadd>
 800d61a:	1c03      	adds	r3, r0, #0
 800d61c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2298      	movs	r2, #152	@ 0x98
 800d622:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2290      	movs	r2, #144	@ 0x90
 800d628:	589b      	ldr	r3, [r3, r2]
 800d62a:	1c19      	adds	r1, r3, #0
 800d62c:	20fe      	movs	r0, #254	@ 0xfe
 800d62e:	0580      	lsls	r0, r0, #22
 800d630:	f7f3 fdf4 	bl	800121c <__aeabi_fsub>
 800d634:	1c03      	adds	r3, r0, #0
 800d636:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	229c      	movs	r2, #156	@ 0x9c
 800d63c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800d63e:	1c19      	adds	r1, r3, #0
 800d640:	f7f3 fcae 	bl	8000fa0 <__aeabi_fmul>
 800d644:	1c03      	adds	r3, r0, #0
 800d646:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2290      	movs	r2, #144	@ 0x90
 800d64c:	589b      	ldr	r3, [r3, r2]
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	1c18      	adds	r0, r3, #0
 800d652:	f7f3 fca5 	bl	8000fa0 <__aeabi_fmul>
 800d656:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800d658:	1c19      	adds	r1, r3, #0
 800d65a:	1c20      	adds	r0, r4, #0
 800d65c:	f7f3 f930 	bl	80008c0 <__aeabi_fadd>
 800d660:	1c03      	adds	r3, r0, #0
 800d662:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	229c      	movs	r2, #156	@ 0x9c
 800d668:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2298      	movs	r2, #152	@ 0x98
 800d66e:	589a      	ldr	r2, [r3, r2]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	219c      	movs	r1, #156	@ 0x9c
 800d674:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800d676:	1c19      	adds	r1, r3, #0
 800d678:	1c10      	adds	r0, r2, #0
 800d67a:	f7f3 fdcf 	bl	800121c <__aeabi_fsub>
 800d67e:	1c03      	adds	r3, r0, #0
 800d680:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800d682:	2100      	movs	r1, #0
 800d684:	6978      	ldr	r0, [r7, #20]
 800d686:	f7f2 ff53 	bl	8000530 <__aeabi_fcmplt>
 800d68a:	1e03      	subs	r3, r0, #0
 800d68c:	d004      	beq.n	800d698 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2280      	movs	r2, #128	@ 0x80
 800d692:	0612      	lsls	r2, r2, #24
 800d694:	4053      	eors	r3, r2
 800d696:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800d698:	4923      	ldr	r1, [pc, #140]	@ (800d728 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800d69a:	6978      	ldr	r0, [r7, #20]
 800d69c:	f7f3 fc80 	bl	8000fa0 <__aeabi_fmul>
 800d6a0:	1c03      	adds	r3, r0, #0
 800d6a2:	1c18      	adds	r0, r3, #0
 800d6a4:	f018 f86e 	bl	8025784 <expf>
 800d6a8:	1c03      	adds	r3, r0, #0
 800d6aa:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800d6ac:	491f      	ldr	r1, [pc, #124]	@ (800d72c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800d6ae:	6938      	ldr	r0, [r7, #16]
 800d6b0:	f7f3 fc76 	bl	8000fa0 <__aeabi_fmul>
 800d6b4:	1c03      	adds	r3, r0, #0
 800d6b6:	491e      	ldr	r1, [pc, #120]	@ (800d730 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800d6b8:	1c18      	adds	r0, r3, #0
 800d6ba:	f7f3 f901 	bl	80008c0 <__aeabi_fadd>
 800d6be:	1c03      	adds	r3, r0, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	685c      	ldr	r4, [r3, #4]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	68f9      	ldr	r1, [r7, #12]
 800d6cc:	1c18      	adds	r0, r3, #0
 800d6ce:	f7f3 f8f7 	bl	80008c0 <__aeabi_fadd>
 800d6d2:	1c03      	adds	r3, r0, #0
 800d6d4:	1c19      	adds	r1, r3, #0
 800d6d6:	1c20      	adds	r0, r4, #0
 800d6d8:	f7f3 fa7c 	bl	8000bd4 <__aeabi_fdiv>
 800d6dc:	1c03      	adds	r3, r0, #0
 800d6de:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800d6e0:	68b9      	ldr	r1, [r7, #8]
 800d6e2:	20fe      	movs	r0, #254	@ 0xfe
 800d6e4:	0580      	lsls	r0, r0, #22
 800d6e6:	f7f3 fd99 	bl	800121c <__aeabi_fsub>
 800d6ea:	1c03      	adds	r3, r0, #0
 800d6ec:	1c18      	adds	r0, r3, #0
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	22a0      	movs	r2, #160	@ 0xa0
 800d6f2:	589b      	ldr	r3, [r3, r2]
 800d6f4:	1c19      	adds	r1, r3, #0
 800d6f6:	f7f3 fc53 	bl	8000fa0 <__aeabi_fmul>
 800d6fa:	1c03      	adds	r3, r0, #0
 800d6fc:	1c1c      	adds	r4, r3, #0
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	68b8      	ldr	r0, [r7, #8]
 800d702:	f7f3 fc4d 	bl	8000fa0 <__aeabi_fmul>
 800d706:	1c03      	adds	r3, r0, #0
 800d708:	1c19      	adds	r1, r3, #0
 800d70a:	1c20      	adds	r0, r4, #0
 800d70c:	f7f3 f8d8 	bl	80008c0 <__aeabi_fadd>
 800d710:	1c03      	adds	r3, r0, #0
 800d712:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	22a0      	movs	r2, #160	@ 0xa0
 800d718:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	22a0      	movs	r2, #160	@ 0xa0
 800d71e:	589b      	ldr	r3, [r3, r2]
}
 800d720:	1c18      	adds	r0, r3, #0
 800d722:	46bd      	mov	sp, r7
 800d724:	b007      	add	sp, #28
 800d726:	bd90      	pop	{r4, r7, pc}
 800d728:	be4ccccd 	.word	0xbe4ccccd
 800d72c:	43f00000 	.word	0x43f00000
 800d730:	41a00000 	.word	0x41a00000

0800d734 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	000a      	movs	r2, r1
 800d73e:	1cbb      	adds	r3, r7, #2
 800d740:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800d742:	230d      	movs	r3, #13
 800d744:	18fb      	adds	r3, r7, r3
 800d746:	22ff      	movs	r2, #255	@ 0xff
 800d748:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d74a:	230e      	movs	r3, #14
 800d74c:	18fb      	adds	r3, r7, r3
 800d74e:	2200      	movs	r2, #0
 800d750:	801a      	strh	r2, [r3, #0]
 800d752:	e037      	b.n	800d7c4 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800d754:	230e      	movs	r3, #14
 800d756:	18fb      	adds	r3, r7, r3
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	18d3      	adds	r3, r2, r3
 800d75e:	7819      	ldrb	r1, [r3, #0]
 800d760:	220d      	movs	r2, #13
 800d762:	18bb      	adds	r3, r7, r2
 800d764:	18ba      	adds	r2, r7, r2
 800d766:	7812      	ldrb	r2, [r2, #0]
 800d768:	404a      	eors	r2, r1
 800d76a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d76c:	230c      	movs	r3, #12
 800d76e:	18fb      	adds	r3, r7, r3
 800d770:	2208      	movs	r2, #8
 800d772:	701a      	strb	r2, [r3, #0]
 800d774:	e01b      	b.n	800d7ae <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800d776:	210d      	movs	r1, #13
 800d778:	187b      	adds	r3, r7, r1
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	b25b      	sxtb	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	da09      	bge.n	800d796 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800d782:	187b      	adds	r3, r7, r1
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	005b      	lsls	r3, r3, #1
 800d788:	b25b      	sxtb	r3, r3
 800d78a:	2231      	movs	r2, #49	@ 0x31
 800d78c:	4053      	eors	r3, r2
 800d78e:	b25a      	sxtb	r2, r3
 800d790:	187b      	adds	r3, r7, r1
 800d792:	701a      	strb	r2, [r3, #0]
 800d794:	e005      	b.n	800d7a2 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800d796:	230d      	movs	r3, #13
 800d798:	18fa      	adds	r2, r7, r3
 800d79a:	18fb      	adds	r3, r7, r3
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	18db      	adds	r3, r3, r3
 800d7a0:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800d7a2:	220c      	movs	r2, #12
 800d7a4:	18bb      	adds	r3, r7, r2
 800d7a6:	18ba      	adds	r2, r7, r2
 800d7a8:	7812      	ldrb	r2, [r2, #0]
 800d7aa:	3a01      	subs	r2, #1
 800d7ac:	701a      	strb	r2, [r3, #0]
 800d7ae:	230c      	movs	r3, #12
 800d7b0:	18fb      	adds	r3, r7, r3
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d1de      	bne.n	800d776 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800d7b8:	220e      	movs	r2, #14
 800d7ba:	18bb      	adds	r3, r7, r2
 800d7bc:	18ba      	adds	r2, r7, r2
 800d7be:	8812      	ldrh	r2, [r2, #0]
 800d7c0:	3201      	adds	r2, #1
 800d7c2:	801a      	strh	r2, [r3, #0]
 800d7c4:	230e      	movs	r3, #14
 800d7c6:	18fa      	adds	r2, r7, r3
 800d7c8:	1cbb      	adds	r3, r7, #2
 800d7ca:	8812      	ldrh	r2, [r2, #0]
 800d7cc:	881b      	ldrh	r3, [r3, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d3c0      	bcc.n	800d754 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800d7d2:	230d      	movs	r3, #13
 800d7d4:	18fb      	adds	r3, r7, r3
 800d7d6:	781b      	ldrb	r3, [r3, #0]
}
 800d7d8:	0018      	movs	r0, r3
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	b004      	add	sp, #16
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	0008      	movs	r0, r1
 800d7ea:	0011      	movs	r1, r2
 800d7ec:	1cbb      	adds	r3, r7, #2
 800d7ee:	1c02      	adds	r2, r0, #0
 800d7f0:	801a      	strh	r2, [r3, #0]
 800d7f2:	1c7b      	adds	r3, r7, #1
 800d7f4:	1c0a      	adds	r2, r1, #0
 800d7f6:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800d7f8:	1cbb      	adds	r3, r7, #2
 800d7fa:	881a      	ldrh	r2, [r3, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	0011      	movs	r1, r2
 800d800:	0018      	movs	r0, r3
 800d802:	f7ff ff97 	bl	800d734 <sensirion_i2c_generate_crc>
 800d806:	0003      	movs	r3, r0
 800d808:	001a      	movs	r2, r3
 800d80a:	1c7b      	adds	r3, r7, #1
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	4293      	cmp	r3, r2
 800d810:	d001      	beq.n	800d816 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	e000      	b.n	800d818 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800d816:	2300      	movs	r3, #0
}
 800d818:	0018      	movs	r0, r3
 800d81a:	46bd      	mov	sp, r7
 800d81c:	b002      	add	sp, #8
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	0008      	movs	r0, r1
 800d82a:	0011      	movs	r1, r2
 800d82c:	1cbb      	adds	r3, r7, #2
 800d82e:	1c02      	adds	r2, r0, #0
 800d830:	801a      	strh	r2, [r3, #0]
 800d832:	003b      	movs	r3, r7
 800d834:	1c0a      	adds	r2, r1, #0
 800d836:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800d838:	003b      	movs	r3, r7
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	0a1b      	lsrs	r3, r3, #8
 800d83e:	b299      	uxth	r1, r3
 800d840:	1cbb      	adds	r3, r7, #2
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	1cba      	adds	r2, r7, #2
 800d846:	1c58      	adds	r0, r3, #1
 800d848:	8010      	strh	r0, [r2, #0]
 800d84a:	001a      	movs	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	189b      	adds	r3, r3, r2
 800d850:	b2ca      	uxtb	r2, r1
 800d852:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800d854:	1cbb      	adds	r3, r7, #2
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	1cba      	adds	r2, r7, #2
 800d85a:	1c59      	adds	r1, r3, #1
 800d85c:	8011      	strh	r1, [r2, #0]
 800d85e:	001a      	movs	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	189b      	adds	r3, r3, r2
 800d864:	003a      	movs	r2, r7
 800d866:	8812      	ldrh	r2, [r2, #0]
 800d868:	b2d2      	uxtb	r2, r2
 800d86a:	701a      	strb	r2, [r3, #0]
    return offset;
 800d86c:	1cbb      	adds	r3, r7, #2
 800d86e:	881b      	ldrh	r3, [r3, #0]
}
 800d870:	0018      	movs	r0, r3
 800d872:	46bd      	mov	sp, r7
 800d874:	b002      	add	sp, #8
 800d876:	bd80      	pop	{r7, pc}

0800d878 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800d878:	b590      	push	{r4, r7, lr}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	0008      	movs	r0, r1
 800d882:	0011      	movs	r1, r2
 800d884:	1cbb      	adds	r3, r7, #2
 800d886:	1c02      	adds	r2, r0, #0
 800d888:	801a      	strh	r2, [r3, #0]
 800d88a:	003b      	movs	r3, r7
 800d88c:	1c0a      	adds	r2, r1, #0
 800d88e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800d890:	003b      	movs	r3, r7
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	0a1b      	lsrs	r3, r3, #8
 800d896:	b299      	uxth	r1, r3
 800d898:	1cbb      	adds	r3, r7, #2
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	1cba      	adds	r2, r7, #2
 800d89e:	1c58      	adds	r0, r3, #1
 800d8a0:	8010      	strh	r0, [r2, #0]
 800d8a2:	001a      	movs	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	189b      	adds	r3, r3, r2
 800d8a8:	b2ca      	uxtb	r2, r1
 800d8aa:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800d8ac:	1cbb      	adds	r3, r7, #2
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	1cba      	adds	r2, r7, #2
 800d8b2:	1c59      	adds	r1, r3, #1
 800d8b4:	8011      	strh	r1, [r2, #0]
 800d8b6:	001a      	movs	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	189b      	adds	r3, r3, r2
 800d8bc:	003a      	movs	r2, r7
 800d8be:	8812      	ldrh	r2, [r2, #0]
 800d8c0:	b2d2      	uxtb	r2, r2
 800d8c2:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800d8c4:	1cbb      	adds	r3, r7, #2
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	3b02      	subs	r3, #2
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800d8ce:	1cbb      	adds	r3, r7, #2
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	18d4      	adds	r4, r2, r3
 800d8d6:	2102      	movs	r1, #2
 800d8d8:	f7ff ff2c 	bl	800d734 <sensirion_i2c_generate_crc>
 800d8dc:	0003      	movs	r3, r0
 800d8de:	7023      	strb	r3, [r4, #0]
    offset++;
 800d8e0:	1cbb      	adds	r3, r7, #2
 800d8e2:	881a      	ldrh	r2, [r3, #0]
 800d8e4:	1cbb      	adds	r3, r7, #2
 800d8e6:	3201      	adds	r2, #1
 800d8e8:	801a      	strh	r2, [r3, #0]

    return offset;
 800d8ea:	1cbb      	adds	r3, r7, #2
 800d8ec:	881b      	ldrh	r3, [r3, #0]
}
 800d8ee:	0018      	movs	r0, r3
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	b003      	add	sp, #12
 800d8f4:	bd90      	pop	{r4, r7, pc}

0800d8f6 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
 800d8fe:	0008      	movs	r0, r1
 800d900:	0011      	movs	r1, r2
 800d902:	1cbb      	adds	r3, r7, #2
 800d904:	1c02      	adds	r2, r0, #0
 800d906:	801a      	strh	r2, [r3, #0]
 800d908:	003b      	movs	r3, r7
 800d90a:	1c0a      	adds	r2, r1, #0
 800d90c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800d90e:	003b      	movs	r3, r7
 800d910:	881a      	ldrh	r2, [r3, #0]
 800d912:	1cbb      	adds	r3, r7, #2
 800d914:	8819      	ldrh	r1, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	0018      	movs	r0, r3
 800d91a:	f7ff ffad 	bl	800d878 <sensirion_i2c_add_uint16_t_to_buffer>
 800d91e:	0003      	movs	r3, r0
}
 800d920:	0018      	movs	r0, r3
 800d922:	46bd      	mov	sp, r7
 800d924:	b002      	add	sp, #8
 800d926:	bd80      	pop	{r7, pc}

0800d928 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6039      	str	r1, [r7, #0]
 800d930:	0011      	movs	r1, r2
 800d932:	1dfb      	adds	r3, r7, #7
 800d934:	1c02      	adds	r2, r0, #0
 800d936:	701a      	strb	r2, [r3, #0]
 800d938:	1d3b      	adds	r3, r7, #4
 800d93a:	1c0a      	adds	r2, r1, #0
 800d93c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800d93e:	1d3b      	adds	r3, r7, #4
 800d940:	881a      	ldrh	r2, [r3, #0]
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	1dfb      	adds	r3, r7, #7
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	0018      	movs	r0, r3
 800d94a:	f7fe f9d9 	bl	800bd00 <sensirion_i2c_hal_write>
 800d94e:	0003      	movs	r3, r0
}
 800d950:	0018      	movs	r0, r3
 800d952:	46bd      	mov	sp, r7
 800d954:	b002      	add	sp, #8
 800d956:	bd80      	pop	{r7, pc}

0800d958 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800d958:	b5b0      	push	{r4, r5, r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6039      	str	r1, [r7, #0]
 800d960:	0011      	movs	r1, r2
 800d962:	1dfb      	adds	r3, r7, #7
 800d964:	1c02      	adds	r2, r0, #0
 800d966:	701a      	strb	r2, [r3, #0]
 800d968:	1d3b      	adds	r3, r7, #4
 800d96a:	1c0a      	adds	r2, r1, #0
 800d96c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800d96e:	1d3b      	adds	r3, r7, #4
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	085b      	lsrs	r3, r3, #1
 800d974:	b29b      	uxth	r3, r3
 800d976:	220a      	movs	r2, #10
 800d978:	18ba      	adds	r2, r7, r2
 800d97a:	1c19      	adds	r1, r3, #0
 800d97c:	1c0b      	adds	r3, r1, #0
 800d97e:	18db      	adds	r3, r3, r3
 800d980:	185b      	adds	r3, r3, r1
 800d982:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800d984:	1d3b      	adds	r3, r7, #4
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	2201      	movs	r2, #1
 800d98a:	4013      	ands	r3, r2
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800d992:	2304      	movs	r3, #4
 800d994:	e06b      	b.n	800da6e <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800d996:	230a      	movs	r3, #10
 800d998:	18fb      	adds	r3, r7, r3
 800d99a:	881a      	ldrh	r2, [r3, #0]
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	1dfb      	adds	r3, r7, #7
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	0018      	movs	r0, r3
 800d9a4:	f7fe f98c 	bl	800bcc0 <sensirion_i2c_hal_read>
 800d9a8:	0003      	movs	r3, r0
 800d9aa:	001a      	movs	r2, r3
 800d9ac:	2108      	movs	r1, #8
 800d9ae:	187b      	adds	r3, r7, r1
 800d9b0:	801a      	strh	r2, [r3, #0]
    if (error) {
 800d9b2:	000a      	movs	r2, r1
 800d9b4:	18bb      	adds	r3, r7, r2
 800d9b6:	2100      	movs	r1, #0
 800d9b8:	5e5b      	ldrsh	r3, [r3, r1]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800d9be:	18bb      	adds	r3, r7, r2
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	5e9b      	ldrsh	r3, [r3, r2]
 800d9c4:	e053      	b.n	800da6e <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800d9c6:	230e      	movs	r3, #14
 800d9c8:	18fb      	adds	r3, r7, r3
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	801a      	strh	r2, [r3, #0]
 800d9ce:	230c      	movs	r3, #12
 800d9d0:	18fb      	adds	r3, r7, r3
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	801a      	strh	r2, [r3, #0]
 800d9d6:	e041      	b.n	800da5c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d9d8:	210e      	movs	r1, #14
 800d9da:	187b      	adds	r3, r7, r1
 800d9dc:	881b      	ldrh	r3, [r3, #0]
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800d9e2:	187b      	adds	r3, r7, r1
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	001a      	movs	r2, r3
 800d9f0:	2102      	movs	r1, #2
 800d9f2:	f7ff fef5 	bl	800d7e0 <sensirion_i2c_check_crc>
 800d9f6:	0003      	movs	r3, r0
 800d9f8:	001a      	movs	r2, r3
 800d9fa:	2108      	movs	r1, #8
 800d9fc:	187b      	adds	r3, r7, r1
 800d9fe:	801a      	strh	r2, [r3, #0]
        if (error) {
 800da00:	000a      	movs	r2, r1
 800da02:	18bb      	adds	r3, r7, r2
 800da04:	2100      	movs	r1, #0
 800da06:	5e5b      	ldrsh	r3, [r3, r1]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d003      	beq.n	800da14 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800da0c:	18bb      	adds	r3, r7, r2
 800da0e:	2200      	movs	r2, #0
 800da10:	5e9b      	ldrsh	r3, [r3, r2]
 800da12:	e02c      	b.n	800da6e <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800da14:	240e      	movs	r4, #14
 800da16:	193b      	adds	r3, r7, r4
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	18d2      	adds	r2, r2, r3
 800da1e:	250c      	movs	r5, #12
 800da20:	197b      	adds	r3, r7, r5
 800da22:	881b      	ldrh	r3, [r3, #0]
 800da24:	1979      	adds	r1, r7, r5
 800da26:	1c58      	adds	r0, r3, #1
 800da28:	8008      	strh	r0, [r1, #0]
 800da2a:	0019      	movs	r1, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	185b      	adds	r3, r3, r1
 800da30:	7812      	ldrb	r2, [r2, #0]
 800da32:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800da34:	193b      	adds	r3, r7, r4
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	3301      	adds	r3, #1
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	18d2      	adds	r2, r2, r3
 800da3e:	197b      	adds	r3, r7, r5
 800da40:	881b      	ldrh	r3, [r3, #0]
 800da42:	1979      	adds	r1, r7, r5
 800da44:	1c58      	adds	r0, r3, #1
 800da46:	8008      	strh	r0, [r1, #0]
 800da48:	0019      	movs	r1, r3
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	185b      	adds	r3, r3, r1
 800da4e:	7812      	ldrb	r2, [r2, #0]
 800da50:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800da52:	193b      	adds	r3, r7, r4
 800da54:	193a      	adds	r2, r7, r4
 800da56:	8812      	ldrh	r2, [r2, #0]
 800da58:	3203      	adds	r2, #3
 800da5a:	801a      	strh	r2, [r3, #0]
 800da5c:	230e      	movs	r3, #14
 800da5e:	18fa      	adds	r2, r7, r3
 800da60:	230a      	movs	r3, #10
 800da62:	18fb      	adds	r3, r7, r3
 800da64:	8812      	ldrh	r2, [r2, #0]
 800da66:	881b      	ldrh	r3, [r3, #0]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d3b5      	bcc.n	800d9d8 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	0018      	movs	r0, r3
 800da70:	46bd      	mov	sp, r7
 800da72:	b004      	add	sp, #16
 800da74:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800da78 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6039      	str	r1, [r7, #0]
 800da80:	0011      	movs	r1, r2
 800da82:	1dfb      	adds	r3, r7, #7
 800da84:	1c02      	adds	r2, r0, #0
 800da86:	701a      	strb	r2, [r3, #0]
 800da88:	1dbb      	adds	r3, r7, #6
 800da8a:	1c0a      	adds	r2, r1, #0
 800da8c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800da8e:	4b08      	ldr	r3, [pc, #32]	@ (800dab0 <ReadRegister+0x38>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d008      	beq.n	800daa8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800da96:	4b06      	ldr	r3, [pc, #24]	@ (800dab0 <ReadRegister+0x38>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	1dba      	adds	r2, r7, #6
 800da9c:	7814      	ldrb	r4, [r2, #0]
 800da9e:	6839      	ldr	r1, [r7, #0]
 800daa0:	1dfa      	adds	r2, r7, #7
 800daa2:	7810      	ldrb	r0, [r2, #0]
 800daa4:	0022      	movs	r2, r4
 800daa6:	4798      	blx	r3
  }
}
 800daa8:	46c0      	nop			@ (mov r8, r8)
 800daaa:	46bd      	mov	sp, r7
 800daac:	b003      	add	sp, #12
 800daae:	bd90      	pop	{r4, r7, pc}
 800dab0:	20000e70 	.word	0x20000e70

0800dab4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800dab4:	b590      	push	{r4, r7, lr}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6039      	str	r1, [r7, #0]
 800dabc:	0011      	movs	r1, r2
 800dabe:	1dfb      	adds	r3, r7, #7
 800dac0:	1c02      	adds	r2, r0, #0
 800dac2:	701a      	strb	r2, [r3, #0]
 800dac4:	1dbb      	adds	r3, r7, #6
 800dac6:	1c0a      	adds	r2, r1, #0
 800dac8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800daca:	4b08      	ldr	r3, [pc, #32]	@ (800daec <WriteRegister+0x38>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d008      	beq.n	800dae4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800dad2:	4b06      	ldr	r3, [pc, #24]	@ (800daec <WriteRegister+0x38>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	1dba      	adds	r2, r7, #6
 800dad8:	7814      	ldrb	r4, [r2, #0]
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	1dfa      	adds	r2, r7, #7
 800dade:	7810      	ldrb	r0, [r2, #0]
 800dae0:	0022      	movs	r2, r4
 800dae2:	4798      	blx	r3
  }
}
 800dae4:	46c0      	nop			@ (mov r8, r8)
 800dae6:	46bd      	mov	sp, r7
 800dae8:	b003      	add	sp, #12
 800daea:	bd90      	pop	{r4, r7, pc}
 800daec:	20000e74 	.word	0x20000e74

0800daf0 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800daf8:	f003 fb90 	bl	801121c <HAL_GetTick>
 800dafc:	0002      	movs	r2, r0
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	18d2      	adds	r2, r2, r3
 800db02:	4b03      	ldr	r3, [pc, #12]	@ (800db10 <setSGP40TimeStamp+0x20>)
 800db04:	601a      	str	r2, [r3, #0]
}
 800db06:	46c0      	nop			@ (mov r8, r8)
 800db08:	46bd      	mov	sp, r7
 800db0a:	b002      	add	sp, #8
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	46c0      	nop			@ (mov r8, r8)
 800db10:	20000e84 	.word	0x20000e84

0800db14 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800db18:	4b02      	ldr	r3, [pc, #8]	@ (800db24 <ResetSGP40samplecounter+0x10>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	701a      	strb	r2, [r3, #0]
}
 800db1e:	46c0      	nop			@ (mov r8, r8)
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	20000e82 	.word	0x20000e82

0800db28 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800db32:	4b07      	ldr	r3, [pc, #28]	@ (800db50 <SGP_Init+0x28>)
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800db38:	4b06      	ldr	r3, [pc, #24]	@ (800db54 <SGP_Init+0x2c>)
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800db3e:	4b06      	ldr	r3, [pc, #24]	@ (800db58 <SGP_Init+0x30>)
 800db40:	2100      	movs	r1, #0
 800db42:	0018      	movs	r0, r3
 800db44:	f7fe ff70 	bl	800ca28 <GasIndexAlgorithm_init>
}
 800db48:	46c0      	nop			@ (mov r8, r8)
 800db4a:	46bd      	mov	sp, r7
 800db4c:	b002      	add	sp, #8
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20000e70 	.word	0x20000e70
 800db54:	20000e74 	.word	0x20000e74
 800db58:	20000e8c 	.word	0x20000e8c

0800db5c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800db60:	4b07      	ldr	r3, [pc, #28]	@ (800db80 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d004      	beq.n	800db72 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800db68:	4b06      	ldr	r3, [pc, #24]	@ (800db84 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800db6a:	22fe      	movs	r2, #254	@ 0xfe
 800db6c:	0592      	lsls	r2, r2, #22
 800db6e:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800db70:	e002      	b.n	800db78 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800db72:	4b04      	ldr	r3, [pc, #16]	@ (800db84 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800db74:	4a04      	ldr	r2, [pc, #16]	@ (800db88 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800db76:	605a      	str	r2, [r3, #4]
}
 800db78:	46c0      	nop			@ (mov r8, r8)
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	46c0      	nop			@ (mov r8, r8)
 800db80:	20001dd9 	.word	0x20001dd9
 800db84:	20000e8c 	.word	0x20000e8c
 800db88:	44610000 	.word	0x44610000

0800db8c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800db8c:	b580      	push	{r7, lr}
 800db8e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800db90:	4b13      	ldr	r3, [pc, #76]	@ (800dbe0 <SGP_StartMeasurement+0x54>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00d      	beq.n	800dbb4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800db98:	4b12      	ldr	r3, [pc, #72]	@ (800dbe4 <SGP_StartMeasurement+0x58>)
 800db9a:	2208      	movs	r2, #8
 800db9c:	0019      	movs	r1, r3
 800db9e:	2059      	movs	r0, #89	@ 0x59
 800dba0:	f7ff ff88 	bl	800dab4 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800dba4:	f003 fb3a 	bl	801121c <HAL_GetTick>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	331e      	adds	r3, #30
 800dbac:	001a      	movs	r2, r3
 800dbae:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe8 <SGP_StartMeasurement+0x5c>)
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	e00c      	b.n	800dbce <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800dbb4:	4b0d      	ldr	r3, [pc, #52]	@ (800dbec <SGP_StartMeasurement+0x60>)
 800dbb6:	2208      	movs	r2, #8
 800dbb8:	0019      	movs	r1, r3
 800dbba:	2059      	movs	r0, #89	@ 0x59
 800dbbc:	f7ff ff7a 	bl	800dab4 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800dbc0:	f003 fb2c 	bl	801121c <HAL_GetTick>
 800dbc4:	0003      	movs	r3, r0
 800dbc6:	33aa      	adds	r3, #170	@ 0xaa
 800dbc8:	001a      	movs	r2, r3
 800dbca:	4b09      	ldr	r3, [pc, #36]	@ (800dbf0 <SGP_StartMeasurement+0x64>)
 800dbcc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800dbce:	4b09      	ldr	r3, [pc, #36]	@ (800dbf4 <SGP_StartMeasurement+0x68>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800dbd4:	4b08      	ldr	r3, [pc, #32]	@ (800dbf8 <SGP_StartMeasurement+0x6c>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	701a      	strb	r2, [r3, #0]
}
 800dbda:	46c0      	nop			@ (mov r8, r8)
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20000f34 	.word	0x20000f34
 800dbe4:	200000b4 	.word	0x200000b4
 800dbe8:	200000c8 	.word	0x200000c8
 800dbec:	200000ac 	.word	0x200000ac
 800dbf0:	200000c0 	.word	0x200000c0
 800dbf4:	20000e88 	.word	0x20000e88
 800dbf8:	20000e89 	.word	0x20000e89

0800dbfc <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800dc00:	4b04      	ldr	r3, [pc, #16]	@ (800dc14 <SGP_HeatedUp+0x18>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	0018      	movs	r0, r3
 800dc06:	f002 fe67 	bl	80108d8 <TimestampIsReached>
 800dc0a:	0003      	movs	r3, r0
}
 800dc0c:	0018      	movs	r0, r3
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	46c0      	nop			@ (mov r8, r8)
 800dc14:	200000c0 	.word	0x200000c0

0800dc18 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800dc1c:	4b04      	ldr	r3, [pc, #16]	@ (800dc30 <SGP_MeasurementReady+0x18>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	0018      	movs	r0, r3
 800dc22:	f002 fe59 	bl	80108d8 <TimestampIsReached>
 800dc26:	0003      	movs	r3, r0
}
 800dc28:	0018      	movs	r0, r3
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	46c0      	nop			@ (mov r8, r8)
 800dc30:	200000c8 	.word	0x200000c8

0800dc34 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800dc38:	4b04      	ldr	r3, [pc, #16]	@ (800dc4c <SGP_MeasurementDone+0x18>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f002 fe4b 	bl	80108d8 <TimestampIsReached>
 800dc42:	0003      	movs	r3, r0
}
 800dc44:	0018      	movs	r0, r3
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	46c0      	nop			@ (mov r8, r8)
 800dc4c:	200000c4 	.word	0x200000c4

0800dc50 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800dc54:	4b04      	ldr	r3, [pc, #16]	@ (800dc68 <SGP_TurnHeaterOff+0x18>)
 800dc56:	2202      	movs	r2, #2
 800dc58:	0019      	movs	r1, r3
 800dc5a:	2059      	movs	r0, #89	@ 0x59
 800dc5c:	f7ff ff2a 	bl	800dab4 <WriteRegister>
}
 800dc60:	46c0      	nop			@ (mov r8, r8)
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	46c0      	nop			@ (mov r8, r8)
 800dc68:	200000a4 	.word	0x200000a4

0800dc6c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800dc6c:	b590      	push	{r4, r7, lr}
 800dc6e:	b087      	sub	sp, #28
 800dc70:	af02      	add	r7, sp, #8
 800dc72:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800dc74:	f7ff ffc2 	bl	800dbfc <SGP_HeatedUp>
 800dc78:	1e03      	subs	r3, r0, #0
 800dc7a:	d032      	beq.n	800dce2 <SGP_GetMeasurementValues+0x76>
 800dc7c:	4b7f      	ldr	r3, [pc, #508]	@ (800de7c <SGP_GetMeasurementValues+0x210>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2201      	movs	r2, #1
 800dc82:	4053      	eors	r3, r2
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d02b      	beq.n	800dce2 <SGP_GetMeasurementValues+0x76>
 800dc8a:	4b7d      	ldr	r3, [pc, #500]	@ (800de80 <SGP_GetMeasurementValues+0x214>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	4053      	eors	r3, r2
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d024      	beq.n	800dce2 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800dc98:	4b78      	ldr	r3, [pc, #480]	@ (800de7c <SGP_GetMeasurementValues+0x210>)
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800dc9e:	4b79      	ldr	r3, [pc, #484]	@ (800de84 <SGP_GetMeasurementValues+0x218>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00d      	beq.n	800dcc2 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800dca6:	4b78      	ldr	r3, [pc, #480]	@ (800de88 <SGP_GetMeasurementValues+0x21c>)
 800dca8:	2208      	movs	r2, #8
 800dcaa:	0019      	movs	r1, r3
 800dcac:	2059      	movs	r0, #89	@ 0x59
 800dcae:	f7ff ff01 	bl	800dab4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800dcb2:	f003 fab3 	bl	801121c <HAL_GetTick>
 800dcb6:	0003      	movs	r3, r0
 800dcb8:	331e      	adds	r3, #30
 800dcba:	001a      	movs	r2, r3
 800dcbc:	4b73      	ldr	r3, [pc, #460]	@ (800de8c <SGP_GetMeasurementValues+0x220>)
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	e00c      	b.n	800dcdc <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800dcc2:	4b73      	ldr	r3, [pc, #460]	@ (800de90 <SGP_GetMeasurementValues+0x224>)
 800dcc4:	2208      	movs	r2, #8
 800dcc6:	0019      	movs	r1, r3
 800dcc8:	2059      	movs	r0, #89	@ 0x59
 800dcca:	f7ff fef3 	bl	800dab4 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800dcce:	f003 faa5 	bl	801121c <HAL_GetTick>
 800dcd2:	0003      	movs	r3, r0
 800dcd4:	331e      	adds	r3, #30
 800dcd6:	001a      	movs	r2, r3
 800dcd8:	4b6c      	ldr	r3, [pc, #432]	@ (800de8c <SGP_GetMeasurementValues+0x220>)
 800dcda:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800dcdc:	4b68      	ldr	r3, [pc, #416]	@ (800de80 <SGP_GetMeasurementValues+0x214>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800dce2:	4b66      	ldr	r3, [pc, #408]	@ (800de7c <SGP_GetMeasurementValues+0x210>)
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d100      	bne.n	800dcec <SGP_GetMeasurementValues+0x80>
 800dcea:	e0ab      	b.n	800de44 <SGP_GetMeasurementValues+0x1d8>
 800dcec:	f7ff ff94 	bl	800dc18 <SGP_MeasurementReady>
 800dcf0:	1e03      	subs	r3, r0, #0
 800dcf2:	d100      	bne.n	800dcf6 <SGP_GetMeasurementValues+0x8a>
 800dcf4:	e0a6      	b.n	800de44 <SGP_GetMeasurementValues+0x1d8>
 800dcf6:	4b67      	ldr	r3, [pc, #412]	@ (800de94 <SGP_GetMeasurementValues+0x228>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	4053      	eors	r3, r2
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d100      	bne.n	800dd06 <SGP_GetMeasurementValues+0x9a>
 800dd04:	e09e      	b.n	800de44 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800dd06:	4b63      	ldr	r3, [pc, #396]	@ (800de94 <SGP_GetMeasurementValues+0x228>)
 800dd08:	2201      	movs	r2, #1
 800dd0a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800dd0c:	4b62      	ldr	r3, [pc, #392]	@ (800de98 <SGP_GetMeasurementValues+0x22c>)
 800dd0e:	2203      	movs	r2, #3
 800dd10:	0019      	movs	r1, r3
 800dd12:	2059      	movs	r0, #89	@ 0x59
 800dd14:	f7ff feb0 	bl	800da78 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800dd18:	4b5f      	ldr	r3, [pc, #380]	@ (800de98 <SGP_GetMeasurementValues+0x22c>)
 800dd1a:	2203      	movs	r2, #3
 800dd1c:	2103      	movs	r1, #3
 800dd1e:	0018      	movs	r0, r3
 800dd20:	f000 f918 	bl	800df54 <CheckCRC>
 800dd24:	0003      	movs	r3, r0
 800dd26:	001a      	movs	r2, r3
 800dd28:	2301      	movs	r3, #1
 800dd2a:	4053      	eors	r3, r2
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d02a      	beq.n	800dd88 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800dd32:	4a5a      	ldr	r2, [pc, #360]	@ (800de9c <SGP_GetMeasurementValues+0x230>)
 800dd34:	4b5a      	ldr	r3, [pc, #360]	@ (800dea0 <SGP_GetMeasurementValues+0x234>)
 800dd36:	0019      	movs	r1, r3
 800dd38:	2001      	movs	r0, #1
 800dd3a:	f002 fe23 	bl	8010984 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800dd3e:	4a59      	ldr	r2, [pc, #356]	@ (800dea4 <SGP_GetMeasurementValues+0x238>)
 800dd40:	4b59      	ldr	r3, [pc, #356]	@ (800dea8 <SGP_GetMeasurementValues+0x23c>)
 800dd42:	0019      	movs	r1, r3
 800dd44:	2002      	movs	r0, #2
 800dd46:	f002 fe1d 	bl	8010984 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800dd4a:	230f      	movs	r3, #15
 800dd4c:	18fb      	adds	r3, r7, r3
 800dd4e:	2200      	movs	r2, #0
 800dd50:	701a      	strb	r2, [r3, #0]
 800dd52:	e012      	b.n	800dd7a <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800dd54:	240f      	movs	r4, #15
 800dd56:	193b      	adds	r3, r7, r4
 800dd58:	7818      	ldrb	r0, [r3, #0]
 800dd5a:	193b      	adds	r3, r7, r4
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	4a4e      	ldr	r2, [pc, #312]	@ (800de98 <SGP_GetMeasurementValues+0x22c>)
 800dd60:	5cd3      	ldrb	r3, [r2, r3]
 800dd62:	4a52      	ldr	r2, [pc, #328]	@ (800deac <SGP_GetMeasurementValues+0x240>)
 800dd64:	4952      	ldr	r1, [pc, #328]	@ (800deb0 <SGP_GetMeasurementValues+0x244>)
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	0003      	movs	r3, r0
 800dd6a:	2003      	movs	r0, #3
 800dd6c:	f002 fe0a 	bl	8010984 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800dd70:	193b      	adds	r3, r7, r4
 800dd72:	781a      	ldrb	r2, [r3, #0]
 800dd74:	193b      	adds	r3, r7, r4
 800dd76:	3201      	adds	r2, #1
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	230f      	movs	r3, #15
 800dd7c:	18fb      	adds	r3, r7, r3
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	d9e7      	bls.n	800dd54 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800dd84:	2300      	movs	r3, #0
 800dd86:	e075      	b.n	800de74 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800dd88:	f003 fa48 	bl	801121c <HAL_GetTick>
 800dd8c:	0003      	movs	r3, r0
 800dd8e:	22fa      	movs	r2, #250	@ 0xfa
 800dd90:	0092      	lsls	r2, r2, #2
 800dd92:	189a      	adds	r2, r3, r2
 800dd94:	4b47      	ldr	r3, [pc, #284]	@ (800deb4 <SGP_GetMeasurementValues+0x248>)
 800dd96:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800dd98:	f7ff ff5a 	bl	800dc50 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800dd9c:	4b46      	ldr	r3, [pc, #280]	@ (800deb8 <SGP_GetMeasurementValues+0x24c>)
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	3301      	adds	r3, #1
 800dda2:	b2da      	uxtb	r2, r3
 800dda4:	4b44      	ldr	r3, [pc, #272]	@ (800deb8 <SGP_GetMeasurementValues+0x24c>)
 800dda6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800dda8:	4b43      	ldr	r3, [pc, #268]	@ (800deb8 <SGP_GetMeasurementValues+0x24c>)
 800ddaa:	781a      	ldrb	r2, [r3, #0]
 800ddac:	4b43      	ldr	r3, [pc, #268]	@ (800debc <SGP_GetMeasurementValues+0x250>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d347      	bcc.n	800de44 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800ddb4:	4b38      	ldr	r3, [pc, #224]	@ (800de98 <SGP_GetMeasurementValues+0x22c>)
 800ddb6:	785b      	ldrb	r3, [r3, #1]
 800ddb8:	021b      	lsls	r3, r3, #8
 800ddba:	b21a      	sxth	r2, r3
 800ddbc:	4b36      	ldr	r3, [pc, #216]	@ (800de98 <SGP_GetMeasurementValues+0x22c>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	b21b      	sxth	r3, r3
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	b21a      	sxth	r2, r3
 800ddc6:	240c      	movs	r4, #12
 800ddc8:	193b      	adds	r3, r7, r4
 800ddca:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800ddd0:	193b      	adds	r3, r7, r4
 800ddd2:	8819      	ldrh	r1, [r3, #0]
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	18fa      	adds	r2, r7, r3
 800ddd8:	4b39      	ldr	r3, [pc, #228]	@ (800dec0 <SGP_GetMeasurementValues+0x254>)
 800ddda:	0018      	movs	r0, r3
 800dddc:	f7fe fe88 	bl	800caf0 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800dde6:	4b37      	ldr	r3, [pc, #220]	@ (800dec4 <SGP_GetMeasurementValues+0x258>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	3301      	adds	r3, #1
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	4b35      	ldr	r3, [pc, #212]	@ (800dec4 <SGP_GetMeasurementValues+0x258>)
 800ddf0:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800ddf2:	4b34      	ldr	r3, [pc, #208]	@ (800dec4 <SGP_GetMeasurementValues+0x258>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d10d      	bne.n	800de16 <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800ddfa:	193b      	adds	r3, r7, r4
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	4a32      	ldr	r2, [pc, #200]	@ (800dec8 <SGP_GetMeasurementValues+0x25c>)
 800de00:	492b      	ldr	r1, [pc, #172]	@ (800deb0 <SGP_GetMeasurementValues+0x244>)
 800de02:	2003      	movs	r0, #3
 800de04:	f002 fdbe 	bl	8010984 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	4a30      	ldr	r2, [pc, #192]	@ (800decc <SGP_GetMeasurementValues+0x260>)
 800de0c:	4928      	ldr	r1, [pc, #160]	@ (800deb0 <SGP_GetMeasurementValues+0x244>)
 800de0e:	2003      	movs	r0, #3
 800de10:	f002 fdb8 	bl	8010984 <CreateLine>
 800de14:	e006      	b.n	800de24 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800de16:	4b2b      	ldr	r3, [pc, #172]	@ (800dec4 <SGP_GetMeasurementValues+0x258>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	2b0b      	cmp	r3, #11
 800de1c:	d102      	bne.n	800de24 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800de1e:	4b29      	ldr	r3, [pc, #164]	@ (800dec4 <SGP_GetMeasurementValues+0x258>)
 800de20:	2200      	movs	r2, #0
 800de22:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	b29b      	uxth	r3, r3
 800de28:	0018      	movs	r0, r3
 800de2a:	f001 fd5b 	bl	800f8e4 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800de2e:	4b22      	ldr	r3, [pc, #136]	@ (800deb8 <SGP_GetMeasurementValues+0x24c>)
 800de30:	2200      	movs	r2, #0
 800de32:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800de34:	4b13      	ldr	r3, [pc, #76]	@ (800de84 <SGP_GetMeasurementValues+0x218>)
 800de36:	2200      	movs	r2, #0
 800de38:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800de3a:	4b11      	ldr	r3, [pc, #68]	@ (800de80 <SGP_GetMeasurementValues+0x214>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	701a      	strb	r2, [r3, #0]
      return true;
 800de40:	2301      	movs	r3, #1
 800de42:	e017      	b.n	800de74 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800de44:	f7ff fef6 	bl	800dc34 <SGP_MeasurementDone>
 800de48:	1e03      	subs	r3, r0, #0
 800de4a:	d012      	beq.n	800de72 <SGP_GetMeasurementValues+0x206>
 800de4c:	4b0b      	ldr	r3, [pc, #44]	@ (800de7c <SGP_GetMeasurementValues+0x210>)
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00e      	beq.n	800de72 <SGP_GetMeasurementValues+0x206>
 800de54:	4b0f      	ldr	r3, [pc, #60]	@ (800de94 <SGP_GetMeasurementValues+0x228>)
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00a      	beq.n	800de72 <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800de5c:	4a1c      	ldr	r2, [pc, #112]	@ (800ded0 <SGP_GetMeasurementValues+0x264>)
 800de5e:	4b14      	ldr	r3, [pc, #80]	@ (800deb0 <SGP_GetMeasurementValues+0x244>)
 800de60:	0019      	movs	r1, r3
 800de62:	2003      	movs	r0, #3
 800de64:	f002 fd8e 	bl	8010984 <CreateLine>
    SGP_StartMeasurement();
 800de68:	f7ff fe90 	bl	800db8c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800de6c:	4b04      	ldr	r3, [pc, #16]	@ (800de80 <SGP_GetMeasurementValues+0x214>)
 800de6e:	2200      	movs	r2, #0
 800de70:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800de72:	2300      	movs	r3, #0
}
 800de74:	0018      	movs	r0, r3
 800de76:	46bd      	mov	sp, r7
 800de78:	b005      	add	sp, #20
 800de7a:	bd90      	pop	{r4, r7, pc}
 800de7c:	20000e88 	.word	0x20000e88
 800de80:	20000f35 	.word	0x20000f35
 800de84:	20000f34 	.word	0x20000f34
 800de88:	200000b4 	.word	0x200000b4
 800de8c:	200000c8 	.word	0x200000c8
 800de90:	200000ac 	.word	0x200000ac
 800de94:	20000e89 	.word	0x20000e89
 800de98:	20000e78 	.word	0x20000e78
 800de9c:	08028704 	.word	0x08028704
 800dea0:	0802872c 	.word	0x0802872c
 800dea4:	08028730 	.word	0x08028730
 800dea8:	08028750 	.word	0x08028750
 800deac:	08028754 	.word	0x08028754
 800deb0:	08028774 	.word	0x08028774
 800deb4:	200000c4 	.word	0x200000c4
 800deb8:	20000e81 	.word	0x20000e81
 800debc:	200000be 	.word	0x200000be
 800dec0:	20000e8c 	.word	0x20000e8c
 800dec4:	20000e82 	.word	0x20000e82
 800dec8:	08028778 	.word	0x08028778
 800decc:	08028794 	.word	0x08028794
 800ded0:	080287b0 	.word	0x080287b0

0800ded4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800deda:	4b1a      	ldr	r3, [pc, #104]	@ (800df44 <SGP_DeviceConnected+0x70>)
 800dedc:	2202      	movs	r2, #2
 800dede:	0019      	movs	r1, r3
 800dee0:	2059      	movs	r0, #89	@ 0x59
 800dee2:	f7ff fde7 	bl	800dab4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800dee6:	2001      	movs	r0, #1
 800dee8:	f003 f9a2 	bl	8011230 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800deec:	4b16      	ldr	r3, [pc, #88]	@ (800df48 <SGP_DeviceConnected+0x74>)
 800deee:	2209      	movs	r2, #9
 800def0:	0019      	movs	r1, r3
 800def2:	2059      	movs	r0, #89	@ 0x59
 800def4:	f7ff fdc0 	bl	800da78 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800def8:	1dfb      	adds	r3, r7, #7
 800defa:	2200      	movs	r2, #0
 800defc:	701a      	strb	r2, [r3, #0]
 800defe:	e011      	b.n	800df24 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800df00:	1dfb      	adds	r3, r7, #7
 800df02:	7818      	ldrb	r0, [r3, #0]
 800df04:	1dfb      	adds	r3, r7, #7
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	4a0f      	ldr	r2, [pc, #60]	@ (800df48 <SGP_DeviceConnected+0x74>)
 800df0a:	5cd3      	ldrb	r3, [r2, r3]
 800df0c:	4a0f      	ldr	r2, [pc, #60]	@ (800df4c <SGP_DeviceConnected+0x78>)
 800df0e:	4910      	ldr	r1, [pc, #64]	@ (800df50 <SGP_DeviceConnected+0x7c>)
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	0003      	movs	r3, r0
 800df14:	2002      	movs	r0, #2
 800df16:	f002 fd35 	bl	8010984 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800df1a:	1dfb      	adds	r3, r7, #7
 800df1c:	781a      	ldrb	r2, [r3, #0]
 800df1e:	1dfb      	adds	r3, r7, #7
 800df20:	3201      	adds	r2, #1
 800df22:	701a      	strb	r2, [r3, #0]
 800df24:	1dfb      	adds	r3, r7, #7
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b08      	cmp	r3, #8
 800df2a:	d9e9      	bls.n	800df00 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800df2c:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <SGP_DeviceConnected+0x74>)
 800df2e:	2203      	movs	r2, #3
 800df30:	2109      	movs	r1, #9
 800df32:	0018      	movs	r0, r3
 800df34:	f000 f80e 	bl	800df54 <CheckCRC>
 800df38:	0003      	movs	r3, r0
}
 800df3a:	0018      	movs	r0, r3
 800df3c:	46bd      	mov	sp, r7
 800df3e:	b002      	add	sp, #8
 800df40:	bd80      	pop	{r7, pc}
 800df42:	46c0      	nop			@ (mov r8, r8)
 800df44:	200000a8 	.word	0x200000a8
 800df48:	20000e78 	.word	0x20000e78
 800df4c:	080287d0 	.word	0x080287d0
 800df50:	08028750 	.word	0x08028750

0800df54 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b08f      	sub	sp, #60	@ 0x3c
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6278      	str	r0, [r7, #36]	@ 0x24
 800df5c:	0008      	movs	r0, r1
 800df5e:	0011      	movs	r1, r2
 800df60:	2323      	movs	r3, #35	@ 0x23
 800df62:	18fb      	adds	r3, r7, r3
 800df64:	1c02      	adds	r2, r0, #0
 800df66:	701a      	strb	r2, [r3, #0]
 800df68:	2322      	movs	r3, #34	@ 0x22
 800df6a:	18fb      	adds	r3, r7, r3
 800df6c:	1c0a      	adds	r2, r1, #0
 800df6e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800df70:	2317      	movs	r3, #23
 800df72:	2220      	movs	r2, #32
 800df74:	189b      	adds	r3, r3, r2
 800df76:	19db      	adds	r3, r3, r7
 800df78:	2200      	movs	r2, #0
 800df7a:	701a      	strb	r2, [r3, #0]
 800df7c:	e09f      	b.n	800e0be <CheckCRC+0x16a>
 800df7e:	466b      	mov	r3, sp
 800df80:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800df82:	2322      	movs	r3, #34	@ 0x22
 800df84:	18fb      	adds	r3, r7, r3
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	001a      	movs	r2, r3
 800df8a:	3a01      	subs	r2, #1
 800df8c:	633a      	str	r2, [r7, #48]	@ 0x30
 800df8e:	60bb      	str	r3, [r7, #8]
 800df90:	2200      	movs	r2, #0
 800df92:	60fa      	str	r2, [r7, #12]
 800df94:	68b8      	ldr	r0, [r7, #8]
 800df96:	68f9      	ldr	r1, [r7, #12]
 800df98:	0002      	movs	r2, r0
 800df9a:	0f52      	lsrs	r2, r2, #29
 800df9c:	000c      	movs	r4, r1
 800df9e:	00e4      	lsls	r4, r4, #3
 800dfa0:	61fc      	str	r4, [r7, #28]
 800dfa2:	69fc      	ldr	r4, [r7, #28]
 800dfa4:	4314      	orrs	r4, r2
 800dfa6:	61fc      	str	r4, [r7, #28]
 800dfa8:	0002      	movs	r2, r0
 800dfaa:	00d2      	lsls	r2, r2, #3
 800dfac:	61ba      	str	r2, [r7, #24]
 800dfae:	603b      	str	r3, [r7, #0]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	607a      	str	r2, [r7, #4]
 800dfb4:	6838      	ldr	r0, [r7, #0]
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	0002      	movs	r2, r0
 800dfba:	0f52      	lsrs	r2, r2, #29
 800dfbc:	000c      	movs	r4, r1
 800dfbe:	00e4      	lsls	r4, r4, #3
 800dfc0:	617c      	str	r4, [r7, #20]
 800dfc2:	697c      	ldr	r4, [r7, #20]
 800dfc4:	4314      	orrs	r4, r2
 800dfc6:	617c      	str	r4, [r7, #20]
 800dfc8:	0002      	movs	r2, r0
 800dfca:	00d2      	lsls	r2, r2, #3
 800dfcc:	613a      	str	r2, [r7, #16]
 800dfce:	3307      	adds	r3, #7
 800dfd0:	08db      	lsrs	r3, r3, #3
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	466a      	mov	r2, sp
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	469d      	mov	sp, r3
 800dfda:	466b      	mov	r3, sp
 800dfdc:	3300      	adds	r3, #0
 800dfde:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800dfe0:	2316      	movs	r3, #22
 800dfe2:	2220      	movs	r2, #32
 800dfe4:	189b      	adds	r3, r3, r2
 800dfe6:	19db      	adds	r3, r3, r7
 800dfe8:	2200      	movs	r2, #0
 800dfea:	701a      	strb	r2, [r3, #0]
 800dfec:	e01e      	b.n	800e02c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800dfee:	2317      	movs	r3, #23
 800dff0:	2220      	movs	r2, #32
 800dff2:	189b      	adds	r3, r3, r2
 800dff4:	19db      	adds	r3, r3, r7
 800dff6:	781a      	ldrb	r2, [r3, #0]
 800dff8:	2116      	movs	r1, #22
 800dffa:	2320      	movs	r3, #32
 800dffc:	18cb      	adds	r3, r1, r3
 800dffe:	19db      	adds	r3, r3, r7
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	18d3      	adds	r3, r2, r3
 800e004:	001a      	movs	r2, r3
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	189a      	adds	r2, r3, r2
 800e00a:	0008      	movs	r0, r1
 800e00c:	2320      	movs	r3, #32
 800e00e:	18cb      	adds	r3, r1, r3
 800e010:	19db      	adds	r3, r3, r7
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	7811      	ldrb	r1, [r2, #0]
 800e016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e018:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800e01a:	2320      	movs	r3, #32
 800e01c:	18c3      	adds	r3, r0, r3
 800e01e:	19db      	adds	r3, r3, r7
 800e020:	781a      	ldrb	r2, [r3, #0]
 800e022:	2320      	movs	r3, #32
 800e024:	18c3      	adds	r3, r0, r3
 800e026:	19db      	adds	r3, r3, r7
 800e028:	3201      	adds	r2, #1
 800e02a:	701a      	strb	r2, [r3, #0]
 800e02c:	2316      	movs	r3, #22
 800e02e:	2220      	movs	r2, #32
 800e030:	189b      	adds	r3, r3, r2
 800e032:	19da      	adds	r2, r3, r7
 800e034:	2322      	movs	r3, #34	@ 0x22
 800e036:	18fb      	adds	r3, r7, r3
 800e038:	7812      	ldrb	r2, [r2, #0]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d3d6      	bcc.n	800dfee <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800e040:	2417      	movs	r4, #23
 800e042:	2320      	movs	r3, #32
 800e044:	18e3      	adds	r3, r4, r3
 800e046:	19db      	adds	r3, r3, r7
 800e048:	781a      	ldrb	r2, [r3, #0]
 800e04a:	2322      	movs	r3, #34	@ 0x22
 800e04c:	18fb      	adds	r3, r7, r3
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	18d3      	adds	r3, r2, r3
 800e052:	3b01      	subs	r3, #1
 800e054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e056:	18d2      	adds	r2, r2, r3
 800e058:	250b      	movs	r5, #11
 800e05a:	2320      	movs	r3, #32
 800e05c:	18eb      	adds	r3, r5, r3
 800e05e:	19db      	adds	r3, r3, r7
 800e060:	7812      	ldrb	r2, [r2, #0]
 800e062:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800e064:	2322      	movs	r3, #34	@ 0x22
 800e066:	18fb      	adds	r3, r7, r3
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e070:	0011      	movs	r1, r2
 800e072:	0018      	movs	r0, r3
 800e074:	f000 f838 	bl	800e0e8 <CalculateCRC>
 800e078:	0003      	movs	r3, r0
 800e07a:	001a      	movs	r2, r3
 800e07c:	2320      	movs	r3, #32
 800e07e:	18eb      	adds	r3, r5, r3
 800e080:	19db      	adds	r3, r3, r7
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	4293      	cmp	r3, r2
 800e086:	d00c      	beq.n	800e0a2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800e088:	2320      	movs	r3, #32
 800e08a:	18e3      	adds	r3, r4, r3
 800e08c:	19db      	adds	r3, r3, r7
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	3301      	adds	r3, #1
 800e092:	4a13      	ldr	r2, [pc, #76]	@ (800e0e0 <CheckCRC+0x18c>)
 800e094:	4913      	ldr	r1, [pc, #76]	@ (800e0e4 <CheckCRC+0x190>)
 800e096:	2001      	movs	r0, #1
 800e098:	f002 fc74 	bl	8010984 <CreateLine>
      return false;
 800e09c:	2300      	movs	r3, #0
 800e09e:	46b5      	mov	sp, r6
 800e0a0:	e019      	b.n	800e0d6 <CheckCRC+0x182>
 800e0a2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800e0a4:	2217      	movs	r2, #23
 800e0a6:	2320      	movs	r3, #32
 800e0a8:	18d3      	adds	r3, r2, r3
 800e0aa:	19db      	adds	r3, r3, r7
 800e0ac:	2120      	movs	r1, #32
 800e0ae:	1852      	adds	r2, r2, r1
 800e0b0:	19d1      	adds	r1, r2, r7
 800e0b2:	2222      	movs	r2, #34	@ 0x22
 800e0b4:	18ba      	adds	r2, r7, r2
 800e0b6:	7809      	ldrb	r1, [r1, #0]
 800e0b8:	7812      	ldrb	r2, [r2, #0]
 800e0ba:	188a      	adds	r2, r1, r2
 800e0bc:	701a      	strb	r2, [r3, #0]
 800e0be:	2317      	movs	r3, #23
 800e0c0:	2220      	movs	r2, #32
 800e0c2:	189b      	adds	r3, r3, r2
 800e0c4:	19da      	adds	r2, r3, r7
 800e0c6:	2323      	movs	r3, #35	@ 0x23
 800e0c8:	18fb      	adds	r3, r7, r3
 800e0ca:	7812      	ldrb	r2, [r2, #0]
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d200      	bcs.n	800e0d4 <CheckCRC+0x180>
 800e0d2:	e754      	b.n	800df7e <CheckCRC+0x2a>
    }
  }
  return true;
 800e0d4:	2301      	movs	r3, #1
}
 800e0d6:	0018      	movs	r0, r3
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	b00f      	add	sp, #60	@ 0x3c
 800e0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0de:	46c0      	nop			@ (mov r8, r8)
 800e0e0:	080287f0 	.word	0x080287f0
 800e0e4:	0802872c 	.word	0x0802872c

0800e0e8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b084      	sub	sp, #16
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	000a      	movs	r2, r1
 800e0f2:	1cfb      	adds	r3, r7, #3
 800e0f4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800e0f6:	230f      	movs	r3, #15
 800e0f8:	18fb      	adds	r3, r7, r3
 800e0fa:	22ff      	movs	r2, #255	@ 0xff
 800e0fc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e0fe:	230e      	movs	r3, #14
 800e100:	18fb      	adds	r3, r7, r3
 800e102:	2200      	movs	r2, #0
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	e037      	b.n	800e178 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e108:	230e      	movs	r3, #14
 800e10a:	18fb      	adds	r3, r7, r3
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	18d3      	adds	r3, r2, r3
 800e112:	7819      	ldrb	r1, [r3, #0]
 800e114:	220f      	movs	r2, #15
 800e116:	18bb      	adds	r3, r7, r2
 800e118:	18ba      	adds	r2, r7, r2
 800e11a:	7812      	ldrb	r2, [r2, #0]
 800e11c:	404a      	eors	r2, r1
 800e11e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e120:	230d      	movs	r3, #13
 800e122:	18fb      	adds	r3, r7, r3
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
 800e128:	e01b      	b.n	800e162 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800e12a:	210f      	movs	r1, #15
 800e12c:	187b      	adds	r3, r7, r1
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	b25b      	sxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	da09      	bge.n	800e14a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800e136:	187b      	adds	r3, r7, r1
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	b25b      	sxtb	r3, r3
 800e13e:	2231      	movs	r2, #49	@ 0x31
 800e140:	4053      	eors	r3, r2
 800e142:	b25a      	sxtb	r2, r3
 800e144:	187b      	adds	r3, r7, r1
 800e146:	701a      	strb	r2, [r3, #0]
 800e148:	e005      	b.n	800e156 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800e14a:	230f      	movs	r3, #15
 800e14c:	18fa      	adds	r2, r7, r3
 800e14e:	18fb      	adds	r3, r7, r3
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	18db      	adds	r3, r3, r3
 800e154:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e156:	210d      	movs	r1, #13
 800e158:	187b      	adds	r3, r7, r1
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	187b      	adds	r3, r7, r1
 800e15e:	3201      	adds	r2, #1
 800e160:	701a      	strb	r2, [r3, #0]
 800e162:	230d      	movs	r3, #13
 800e164:	18fb      	adds	r3, r7, r3
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	2b07      	cmp	r3, #7
 800e16a:	d9de      	bls.n	800e12a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e16c:	210e      	movs	r1, #14
 800e16e:	187b      	adds	r3, r7, r1
 800e170:	781a      	ldrb	r2, [r3, #0]
 800e172:	187b      	adds	r3, r7, r1
 800e174:	3201      	adds	r2, #1
 800e176:	701a      	strb	r2, [r3, #0]
 800e178:	230e      	movs	r3, #14
 800e17a:	18fa      	adds	r2, r7, r3
 800e17c:	1cfb      	adds	r3, r7, #3
 800e17e:	7812      	ldrb	r2, [r2, #0]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	429a      	cmp	r2, r3
 800e184:	d3c0      	bcc.n	800e108 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800e186:	230f      	movs	r3, #15
 800e188:	18fb      	adds	r3, r7, r3
 800e18a:	781b      	ldrb	r3, [r3, #0]
}
 800e18c:	0018      	movs	r0, r3
 800e18e:	46bd      	mov	sp, r7
 800e190:	b004      	add	sp, #16
 800e192:	bd80      	pop	{r7, pc}

0800e194 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4936      	ldr	r1, [pc, #216]	@ (800e27c <SGP_SetHT+0xe8>)
 800e1a4:	1c18      	adds	r0, r3, #0
 800e1a6:	f7f2 fb8b 	bl	80008c0 <__aeabi_fadd>
 800e1aa:	1c03      	adds	r3, r0, #0
 800e1ac:	4934      	ldr	r1, [pc, #208]	@ (800e280 <SGP_SetHT+0xec>)
 800e1ae:	1c18      	adds	r0, r3, #0
 800e1b0:	f7f2 fd10 	bl	8000bd4 <__aeabi_fdiv>
 800e1b4:	1c03      	adds	r3, r0, #0
 800e1b6:	4933      	ldr	r1, [pc, #204]	@ (800e284 <SGP_SetHT+0xf0>)
 800e1b8:	1c18      	adds	r0, r3, #0
 800e1ba:	f7f2 fef1 	bl	8000fa0 <__aeabi_fmul>
 800e1be:	1c03      	adds	r3, r0, #0
 800e1c0:	1c18      	adds	r0, r3, #0
 800e1c2:	f7f2 fa2b 	bl	800061c <__aeabi_f2uiz>
 800e1c6:	0003      	movs	r3, r0
 800e1c8:	b29a      	uxth	r2, r3
 800e1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800e288 <SGP_SetHT+0xf4>)
 800e1cc:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	492e      	ldr	r1, [pc, #184]	@ (800e28c <SGP_SetHT+0xf8>)
 800e1d4:	1c18      	adds	r0, r3, #0
 800e1d6:	f7f2 fcfd 	bl	8000bd4 <__aeabi_fdiv>
 800e1da:	1c03      	adds	r3, r0, #0
 800e1dc:	4929      	ldr	r1, [pc, #164]	@ (800e284 <SGP_SetHT+0xf0>)
 800e1de:	1c18      	adds	r0, r3, #0
 800e1e0:	f7f2 fede 	bl	8000fa0 <__aeabi_fmul>
 800e1e4:	1c03      	adds	r3, r0, #0
 800e1e6:	1c18      	adds	r0, r3, #0
 800e1e8:	f7f2 fa18 	bl	800061c <__aeabi_f2uiz>
 800e1ec:	0003      	movs	r3, r0
 800e1ee:	b29a      	uxth	r2, r3
 800e1f0:	4b27      	ldr	r3, [pc, #156]	@ (800e290 <SGP_SetHT+0xfc>)
 800e1f2:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800e1f4:	4b26      	ldr	r3, [pc, #152]	@ (800e290 <SGP_SetHT+0xfc>)
 800e1f6:	881b      	ldrh	r3, [r3, #0]
 800e1f8:	0a1b      	lsrs	r3, r3, #8
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	4b25      	ldr	r3, [pc, #148]	@ (800e294 <SGP_SetHT+0x100>)
 800e200:	709a      	strb	r2, [r3, #2]
 800e202:	4b24      	ldr	r3, [pc, #144]	@ (800e294 <SGP_SetHT+0x100>)
 800e204:	789a      	ldrb	r2, [r3, #2]
 800e206:	210c      	movs	r1, #12
 800e208:	187b      	adds	r3, r7, r1
 800e20a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800e20c:	4b20      	ldr	r3, [pc, #128]	@ (800e290 <SGP_SetHT+0xfc>)
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	b2da      	uxtb	r2, r3
 800e212:	4b20      	ldr	r3, [pc, #128]	@ (800e294 <SGP_SetHT+0x100>)
 800e214:	70da      	strb	r2, [r3, #3]
 800e216:	4b1f      	ldr	r3, [pc, #124]	@ (800e294 <SGP_SetHT+0x100>)
 800e218:	78da      	ldrb	r2, [r3, #3]
 800e21a:	187b      	adds	r3, r7, r1
 800e21c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800e21e:	187b      	adds	r3, r7, r1
 800e220:	2102      	movs	r1, #2
 800e222:	0018      	movs	r0, r3
 800e224:	f7ff ff60 	bl	800e0e8 <CalculateCRC>
 800e228:	0003      	movs	r3, r0
 800e22a:	001a      	movs	r2, r3
 800e22c:	4b19      	ldr	r3, [pc, #100]	@ (800e294 <SGP_SetHT+0x100>)
 800e22e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800e230:	4b15      	ldr	r3, [pc, #84]	@ (800e288 <SGP_SetHT+0xf4>)
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	0a1b      	lsrs	r3, r3, #8
 800e236:	b29b      	uxth	r3, r3
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	4b16      	ldr	r3, [pc, #88]	@ (800e294 <SGP_SetHT+0x100>)
 800e23c:	715a      	strb	r2, [r3, #5]
 800e23e:	4b15      	ldr	r3, [pc, #84]	@ (800e294 <SGP_SetHT+0x100>)
 800e240:	795a      	ldrb	r2, [r3, #5]
 800e242:	2108      	movs	r1, #8
 800e244:	187b      	adds	r3, r7, r1
 800e246:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800e248:	4b0f      	ldr	r3, [pc, #60]	@ (800e288 <SGP_SetHT+0xf4>)
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	4b11      	ldr	r3, [pc, #68]	@ (800e294 <SGP_SetHT+0x100>)
 800e250:	719a      	strb	r2, [r3, #6]
 800e252:	4b10      	ldr	r3, [pc, #64]	@ (800e294 <SGP_SetHT+0x100>)
 800e254:	799a      	ldrb	r2, [r3, #6]
 800e256:	187b      	adds	r3, r7, r1
 800e258:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800e25a:	187b      	adds	r3, r7, r1
 800e25c:	2102      	movs	r1, #2
 800e25e:	0018      	movs	r0, r3
 800e260:	f7ff ff42 	bl	800e0e8 <CalculateCRC>
 800e264:	0003      	movs	r3, r0
 800e266:	001a      	movs	r2, r3
 800e268:	4b0a      	ldr	r3, [pc, #40]	@ (800e294 <SGP_SetHT+0x100>)
 800e26a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800e26c:	4b0a      	ldr	r3, [pc, #40]	@ (800e298 <SGP_SetHT+0x104>)
 800e26e:	2201      	movs	r2, #1
 800e270:	701a      	strb	r2, [r3, #0]
}
 800e272:	46c0      	nop			@ (mov r8, r8)
 800e274:	46bd      	mov	sp, r7
 800e276:	b004      	add	sp, #16
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	46c0      	nop			@ (mov r8, r8)
 800e27c:	42340000 	.word	0x42340000
 800e280:	432f0000 	.word	0x432f0000
 800e284:	477fff00 	.word	0x477fff00
 800e288:	20000f32 	.word	0x20000f32
 800e28c:	42c80000 	.word	0x42c80000
 800e290:	20000f30 	.word	0x20000f30
 800e294:	200000b4 	.word	0x200000b4
 800e298:	20000f34 	.word	0x20000f34

0800e29c <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800e2a0:	4a09      	ldr	r2, [pc, #36]	@ (800e2c8 <SGP_SoftReset+0x2c>)
 800e2a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e2cc <SGP_SoftReset+0x30>)
 800e2a4:	0019      	movs	r1, r3
 800e2a6:	2003      	movs	r0, #3
 800e2a8:	f002 fb6c 	bl	8010984 <CreateLine>
  SGP_TurnHeaterOff();
 800e2ac:	f7ff fcd0 	bl	800dc50 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800e2b0:	200a      	movs	r0, #10
 800e2b2:	f002 ffbd 	bl	8011230 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800e2b6:	4b06      	ldr	r3, [pc, #24]	@ (800e2d0 <SGP_SoftReset+0x34>)
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	0019      	movs	r1, r3
 800e2bc:	2059      	movs	r0, #89	@ 0x59
 800e2be:	f7ff fbf9 	bl	800dab4 <WriteRegister>
}
 800e2c2:	46c0      	nop			@ (mov r8, r8)
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	08028898 	.word	0x08028898
 800e2cc:	08028774 	.word	0x08028774
 800e2d0:	200000bc 	.word	0x200000bc

0800e2d4 <ResetVOCresult>:

void ResetVOCresult(void) {
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800e2d8:	4b02      	ldr	r3, [pc, #8]	@ (800e2e4 <ResetVOCresult+0x10>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	601a      	str	r2, [r3, #0]
}
 800e2de:	46c0      	nop			@ (mov r8, r8)
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20000f38 	.word	0x20000f38

0800e2e8 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800e2ec:	4b42      	ldr	r3, [pc, #264]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	2b07      	cmp	r3, #7
 800e2f2:	d869      	bhi.n	800e3c8 <SGP_Upkeep+0xe0>
 800e2f4:	009a      	lsls	r2, r3, #2
 800e2f6:	4b41      	ldr	r3, [pc, #260]	@ (800e3fc <SGP_Upkeep+0x114>)
 800e2f8:	18d3      	adds	r3, r2, r3
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800e2fe:	4a40      	ldr	r2, [pc, #256]	@ (800e400 <SGP_Upkeep+0x118>)
 800e300:	4b40      	ldr	r3, [pc, #256]	@ (800e404 <SGP_Upkeep+0x11c>)
 800e302:	0019      	movs	r1, r3
 800e304:	2003      	movs	r0, #3
 800e306:	f002 fb3d 	bl	8010984 <CreateLine>
    break;
 800e30a:	e070      	b.n	800e3ee <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800e30c:	f7ff ffe2 	bl	800e2d4 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800e310:	4b39      	ldr	r3, [pc, #228]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e312:	2201      	movs	r2, #1
 800e314:	701a      	strb	r2, [r3, #0]
    break;
 800e316:	e06a      	b.n	800e3ee <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800e318:	f7fc fcac 	bl	800ac74 <getSensorLock>
 800e31c:	1e03      	subs	r3, r0, #0
 800e31e:	d15f      	bne.n	800e3e0 <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800e320:	2002      	movs	r0, #2
 800e322:	f7fc fc97 	bl	800ac54 <setSensorLock>
    SetMeasurementIndicator();
 800e326:	f001 f977 	bl	800f618 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800e32a:	f7ff fc2f 	bl	800db8c <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800e32e:	4b32      	ldr	r3, [pc, #200]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e330:	2202      	movs	r2, #2
 800e332:	701a      	strb	r2, [r3, #0]
    break;
 800e334:	e05b      	b.n	800e3ee <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800e336:	4b34      	ldr	r3, [pc, #208]	@ (800e408 <SGP_Upkeep+0x120>)
 800e338:	0018      	movs	r0, r3
 800e33a:	f7ff fc97 	bl	800dc6c <SGP_GetMeasurementValues>
 800e33e:	1e03      	subs	r3, r0, #0
 800e340:	d050      	beq.n	800e3e4 <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800e342:	4b2d      	ldr	r3, [pc, #180]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e344:	2203      	movs	r2, #3
 800e346:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800e348:	2000      	movs	r0, #0
 800e34a:	f7fc fc83 	bl	800ac54 <setSensorLock>
    }
    break;
 800e34e:	e049      	b.n	800e3e4 <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800e350:	4b2d      	ldr	r3, [pc, #180]	@ (800e408 <SGP_Upkeep+0x120>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	b29b      	uxth	r3, r3
 800e356:	0018      	movs	r0, r3
 800e358:	f7f5 fa38 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800e35c:	4b26      	ldr	r3, [pc, #152]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e35e:	2206      	movs	r2, #6
 800e360:	701a      	strb	r2, [r3, #0]
    break;
 800e362:	e044      	b.n	800e3ee <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800e364:	4b24      	ldr	r3, [pc, #144]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e366:	2207      	movs	r2, #7
 800e368:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800e36a:	4b28      	ldr	r3, [pc, #160]	@ (800e40c <SGP_Upkeep+0x124>)
 800e36c:	781b      	ldrb	r3, [r3, #0]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d112      	bne.n	800e398 <SGP_Upkeep+0xb0>
 800e372:	4b27      	ldr	r3, [pc, #156]	@ (800e410 <SGP_Upkeep+0x128>)
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2201      	movs	r2, #1
 800e378:	4053      	eors	r3, r2
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00b      	beq.n	800e398 <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800e380:	4b24      	ldr	r3, [pc, #144]	@ (800e414 <SGP_Upkeep+0x12c>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d004      	beq.n	800e392 <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800e388:	f7ff ff88 	bl	800e29c <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800e38c:	2000      	movs	r0, #0
 800e38e:	f7fc f935 	bl	800a5fc <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800e392:	4b20      	ldr	r3, [pc, #128]	@ (800e414 <SGP_Upkeep+0x12c>)
 800e394:	2201      	movs	r2, #1
 800e396:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800e398:	f002 ff40 	bl	801121c <HAL_GetTick>
 800e39c:	0003      	movs	r3, r0
 800e39e:	22c8      	movs	r2, #200	@ 0xc8
 800e3a0:	0092      	lsls	r2, r2, #2
 800e3a2:	189a      	adds	r2, r3, r2
 800e3a4:	4b1c      	ldr	r3, [pc, #112]	@ (800e418 <SGP_Upkeep+0x130>)
 800e3a6:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800e3a8:	f001 f94e 	bl	800f648 <ResetMeasurementIndicator>
  break;
 800e3ac:	e01f      	b.n	800e3ee <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800e3ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e418 <SGP_Upkeep+0x130>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	f002 fa90 	bl	80108d8 <TimestampIsReached>
 800e3b8:	1e03      	subs	r3, r0, #0
 800e3ba:	d015      	beq.n	800e3e8 <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800e3bc:	f7ff fbce 	bl	800db5c <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800e3c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e3c6:	e00f      	b.n	800e3e8 <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800e3c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800e3ce:	f7fc fc51 	bl	800ac74 <getSensorLock>
 800e3d2:	0003      	movs	r3, r0
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d109      	bne.n	800e3ec <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f7fc fc3b 	bl	800ac54 <setSensorLock>
    }
    break;
 800e3de:	e005      	b.n	800e3ec <SGP_Upkeep+0x104>
      break;
 800e3e0:	46c0      	nop			@ (mov r8, r8)
 800e3e2:	e004      	b.n	800e3ee <SGP_Upkeep+0x106>
    break;
 800e3e4:	46c0      	nop			@ (mov r8, r8)
 800e3e6:	e002      	b.n	800e3ee <SGP_Upkeep+0x106>
    break;
 800e3e8:	46c0      	nop			@ (mov r8, r8)
 800e3ea:	e000      	b.n	800e3ee <SGP_Upkeep+0x106>
    break;
 800e3ec:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800e3ee:	4b02      	ldr	r3, [pc, #8]	@ (800e3f8 <SGP_Upkeep+0x110>)
 800e3f0:	781b      	ldrb	r3, [r3, #0]
}
 800e3f2:	0018      	movs	r0, r3
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	20000f3c 	.word	0x20000f3c
 800e3fc:	0802905c 	.word	0x0802905c
 800e400:	080288b0 	.word	0x080288b0
 800e404:	08028774 	.word	0x08028774
 800e408:	20000f38 	.word	0x20000f38
 800e40c:	20000e82 	.word	0x20000e82
 800e410:	20001dd9 	.word	0x20001dd9
 800e414:	20000e6c 	.word	0x20000e6c
 800e418:	20000e84 	.word	0x20000e84

0800e41c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	0002      	movs	r2, r0
 800e424:	1dfb      	adds	r3, r7, #7
 800e426:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e428:	1dfb      	adds	r3, r7, #7
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e42e:	d809      	bhi.n	800e444 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e430:	1dfb      	adds	r3, r7, #7
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	001a      	movs	r2, r3
 800e436:	231f      	movs	r3, #31
 800e438:	401a      	ands	r2, r3
 800e43a:	4b04      	ldr	r3, [pc, #16]	@ (800e44c <__NVIC_EnableIRQ+0x30>)
 800e43c:	2101      	movs	r1, #1
 800e43e:	4091      	lsls	r1, r2
 800e440:	000a      	movs	r2, r1
 800e442:	601a      	str	r2, [r3, #0]
  }
}
 800e444:	46c0      	nop			@ (mov r8, r8)
 800e446:	46bd      	mov	sp, r7
 800e448:	b002      	add	sp, #8
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	e000e100 	.word	0xe000e100

0800e450 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	0002      	movs	r2, r0
 800e458:	1dfb      	adds	r3, r7, #7
 800e45a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e45c:	1dfb      	adds	r3, r7, #7
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	2b7f      	cmp	r3, #127	@ 0x7f
 800e462:	d810      	bhi.n	800e486 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e464:	1dfb      	adds	r3, r7, #7
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	001a      	movs	r2, r3
 800e46a:	231f      	movs	r3, #31
 800e46c:	4013      	ands	r3, r2
 800e46e:	4908      	ldr	r1, [pc, #32]	@ (800e490 <__NVIC_DisableIRQ+0x40>)
 800e470:	2201      	movs	r2, #1
 800e472:	409a      	lsls	r2, r3
 800e474:	0013      	movs	r3, r2
 800e476:	2280      	movs	r2, #128	@ 0x80
 800e478:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e47a:	f3bf 8f4f 	dsb	sy
}
 800e47e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e480:	f3bf 8f6f 	isb	sy
}
 800e484:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800e486:	46c0      	nop			@ (mov r8, r8)
 800e488:	46bd      	mov	sp, r7
 800e48a:	b002      	add	sp, #8
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	46c0      	nop			@ (mov r8, r8)
 800e490:	e000e100 	.word	0xe000e100

0800e494 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800e494:	b5b0      	push	{r4, r5, r7, lr}
 800e496:	b088      	sub	sp, #32
 800e498:	af02      	add	r7, sp, #8
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	0008      	movs	r0, r1
 800e49e:	0011      	movs	r1, r2
 800e4a0:	1cfb      	adds	r3, r7, #3
 800e4a2:	1c02      	adds	r2, r0, #0
 800e4a4:	701a      	strb	r2, [r3, #0]
 800e4a6:	1cbb      	adds	r3, r7, #2
 800e4a8:	1c0a      	adds	r2, r1, #0
 800e4aa:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800e4ac:	4b5b      	ldr	r3, [pc, #364]	@ (800e61c <getSoundData+0x188>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	4053      	eors	r3, r2
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d107      	bne.n	800e4cc <getSoundData+0x38>
 800e4bc:	4b58      	ldr	r3, [pc, #352]	@ (800e620 <getSoundData+0x18c>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	4053      	eors	r3, r2
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <getSoundData+0x3c>
    {
        return false;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e0a0      	b.n	800e612 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800e4d0:	4b54      	ldr	r3, [pc, #336]	@ (800e624 <getSoundData+0x190>)
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d005      	beq.n	800e4e6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e4da:	4b53      	ldr	r3, [pc, #332]	@ (800e628 <getSoundData+0x194>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b25b      	sxtb	r3, r3
 800e4e0:	0018      	movs	r0, r3
 800e4e2:	f7ff ffb5 	bl	800e450 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800e4e6:	f3bf 8f4f 	dsb	sy
}
 800e4ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800e4ec:	f3bf 8f6f 	isb	sy
}
 800e4f0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800e4f2:	1cfb      	adds	r3, r7, #3
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d04c      	beq.n	800e594 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800e4fa:	4b4c      	ldr	r3, [pc, #304]	@ (800e62c <getSoundData+0x198>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d11b      	bne.n	800e53a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
 800e512:	e00e      	b.n	800e532 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	18d3      	adds	r3, r2, r3
 800e51a:	3302      	adds	r3, #2
 800e51c:	2200      	movs	r2, #0
 800e51e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	18d3      	adds	r3, r2, r3
 800e526:	3308      	adds	r3, #8
 800e528:	2200      	movs	r2, #0
 800e52a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	3301      	adds	r3, #1
 800e530:	617b      	str	r3, [r7, #20]
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	2b05      	cmp	r3, #5
 800e536:	d9ed      	bls.n	800e514 <getSoundData+0x80>
 800e538:	e02c      	b.n	800e594 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	1c59      	adds	r1, r3, #1
 800e540:	4b3b      	ldr	r3, [pc, #236]	@ (800e630 <getSoundData+0x19c>)
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	4b3b      	ldr	r3, [pc, #236]	@ (800e634 <getSoundData+0x1a0>)
 800e546:	681c      	ldr	r4, [r3, #0]
 800e548:	4b38      	ldr	r3, [pc, #224]	@ (800e62c <getSoundData+0x198>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	9300      	str	r3, [sp, #0]
 800e54e:	0023      	movs	r3, r4
 800e550:	f000 fde8 	bl	800f124 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e554:	2300      	movs	r3, #0
 800e556:	613b      	str	r3, [r7, #16]
 800e558:	e019      	b.n	800e58e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	18d3      	adds	r3, r2, r3
 800e560:	1c98      	adds	r0, r3, #2
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	3308      	adds	r3, #8
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800e56a:	4b33      	ldr	r3, [pc, #204]	@ (800e638 <getSoundData+0x1a4>)
 800e56c:	693a      	ldr	r2, [r7, #16]
 800e56e:	0092      	lsls	r2, r2, #2
 800e570:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800e572:	4b32      	ldr	r3, [pc, #200]	@ (800e63c <getSoundData+0x1a8>)
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	0092      	lsls	r2, r2, #2
 800e578:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800e57a:	4b2c      	ldr	r3, [pc, #176]	@ (800e62c <getSoundData+0x198>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	9300      	str	r3, [sp, #0]
 800e580:	0013      	movs	r3, r2
 800e582:	0022      	movs	r2, r4
 800e584:	f000 fdce 	bl	800f124 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	3301      	adds	r3, #1
 800e58c:	613b      	str	r3, [r7, #16]
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	2b05      	cmp	r3, #5
 800e592:	d9e2      	bls.n	800e55a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800e594:	1cbb      	adds	r3, r7, #2
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d028      	beq.n	800e5ee <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800e59c:	240e      	movs	r4, #14
 800e59e:	193b      	adds	r3, r7, r4
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800e5a4:	250d      	movs	r5, #13
 800e5a6:	197b      	adds	r3, r7, r5
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800e5ac:	4b24      	ldr	r3, [pc, #144]	@ (800e640 <getSoundData+0x1ac>)
 800e5ae:	6818      	ldr	r0, [r3, #0]
 800e5b0:	4924      	ldr	r1, [pc, #144]	@ (800e644 <getSoundData+0x1b0>)
 800e5b2:	197b      	adds	r3, r7, r5
 800e5b4:	193a      	adds	r2, r7, r4
 800e5b6:	f000 fe59 	bl	800f26c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800e5ba:	193b      	adds	r3, r7, r4
 800e5bc:	881a      	ldrh	r2, [r3, #0]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	21ff      	movs	r1, #255	@ 0xff
 800e5c2:	4011      	ands	r1, r2
 800e5c4:	000c      	movs	r4, r1
 800e5c6:	7b99      	ldrb	r1, [r3, #14]
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	4001      	ands	r1, r0
 800e5cc:	1c08      	adds	r0, r1, #0
 800e5ce:	1c21      	adds	r1, r4, #0
 800e5d0:	4301      	orrs	r1, r0
 800e5d2:	7399      	strb	r1, [r3, #14]
 800e5d4:	0a12      	lsrs	r2, r2, #8
 800e5d6:	b290      	uxth	r0, r2
 800e5d8:	7bda      	ldrb	r2, [r3, #15]
 800e5da:	2100      	movs	r1, #0
 800e5dc:	400a      	ands	r2, r1
 800e5de:	1c11      	adds	r1, r2, #0
 800e5e0:	1c02      	adds	r2, r0, #0
 800e5e2:	430a      	orrs	r2, r1
 800e5e4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800e5e6:	197b      	adds	r3, r7, r5
 800e5e8:	781a      	ldrb	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800e5ee:	f000 f86f 	bl	800e6d0 <micSettlingComplete>
 800e5f2:	0003      	movs	r3, r0
 800e5f4:	001a      	movs	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e624 <getSoundData+0x190>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	d005      	beq.n	800e610 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e604:	4b08      	ldr	r3, [pc, #32]	@ (800e628 <getSoundData+0x194>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	b25b      	sxtb	r3, r3
 800e60a:	0018      	movs	r0, r3
 800e60c:	f7ff ff06 	bl	800e41c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800e610:	2301      	movs	r3, #1
}
 800e612:	0018      	movs	r0, r3
 800e614:	46bd      	mov	sp, r7
 800e616:	b006      	add	sp, #24
 800e618:	bdb0      	pop	{r4, r5, r7, pc}
 800e61a:	46c0      	nop			@ (mov r8, r8)
 800e61c:	20000f3e 	.word	0x20000f3e
 800e620:	20000f41 	.word	0x20000f41
 800e624:	20000f40 	.word	0x20000f40
 800e628:	20001990 	.word	0x20001990
 800e62c:	200019cc 	.word	0x200019cc
 800e630:	20001994 	.word	0x20001994
 800e634:	20001998 	.word	0x20001998
 800e638:	2000199c 	.word	0x2000199c
 800e63c:	200019b4 	.word	0x200019b4
 800e640:	20000f48 	.word	0x20000f48
 800e644:	3b5c7333 	.word	0x3b5c7333

0800e648 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	001a      	movs	r2, r3
 800e656:	1cfb      	adds	r3, r7, #3
 800e658:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800e65a:	4b09      	ldr	r3, [pc, #36]	@ (800e680 <soundInit+0x38>)
 800e65c:	68ba      	ldr	r2, [r7, #8]
 800e65e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800e660:	4b08      	ldr	r3, [pc, #32]	@ (800e684 <soundInit+0x3c>)
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800e666:	4b08      	ldr	r3, [pc, #32]	@ (800e688 <soundInit+0x40>)
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800e66c:	4b07      	ldr	r3, [pc, #28]	@ (800e68c <soundInit+0x44>)
 800e66e:	2200      	movs	r2, #0
 800e670:	569a      	ldrsb	r2, [r3, r2]
 800e672:	4b06      	ldr	r3, [pc, #24]	@ (800e68c <soundInit+0x44>)
 800e674:	701a      	strb	r2, [r3, #0]

    return true;
 800e676:	2301      	movs	r3, #1
}
 800e678:	0018      	movs	r0, r3
 800e67a:	46bd      	mov	sp, r7
 800e67c:	b004      	add	sp, #16
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20001988 	.word	0x20001988
 800e684:	20001984 	.word	0x20001984
 800e688:	2000198c 	.word	0x2000198c
 800e68c:	20001990 	.word	0x20001990

0800e690 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800e694:	4b02      	ldr	r3, [pc, #8]	@ (800e6a0 <clearMaximumAmplitude+0x10>)
 800e696:	2200      	movs	r2, #0
 800e698:	601a      	str	r2, [r3, #0]
}
 800e69a:	46c0      	nop			@ (mov r8, r8)
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	20000f48 	.word	0x20000f48

0800e6a4 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800e6a8:	4b08      	ldr	r3, [pc, #32]	@ (800e6cc <startMicSettlingPeriod+0x28>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800e6b2:	4b06      	ldr	r3, [pc, #24]	@ (800e6cc <startMicSettlingPeriod+0x28>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	0018      	movs	r0, r3
 800e6b8:	f00a fe0c 	bl	80192d4 <HAL_TIM_Base_Start>
 800e6bc:	1e03      	subs	r3, r0, #0
 800e6be:	d001      	beq.n	800e6c4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	e000      	b.n	800e6c6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800e6c4:	2301      	movs	r3, #1
}
 800e6c6:	0018      	movs	r0, r3
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	20001984 	.word	0x20001984

0800e6d0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800e6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800e710 <micSettlingComplete+0x40>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	401a      	ands	r2, r3
 800e6e2:	1dfb      	adds	r3, r7, #7
 800e6e4:	3a01      	subs	r2, #1
 800e6e6:	4251      	negs	r1, r2
 800e6e8:	414a      	adcs	r2, r1
 800e6ea:	701a      	strb	r2, [r3, #0]
    if (complete)
 800e6ec:	1dfb      	adds	r3, r7, #7
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d007      	beq.n	800e704 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800e6f4:	4b06      	ldr	r3, [pc, #24]	@ (800e710 <micSettlingComplete+0x40>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	0018      	movs	r0, r3
 800e6fa:	f00a fe35 	bl	8019368 <HAL_TIM_Base_Stop>
      DataReady = true;
 800e6fe:	4b05      	ldr	r3, [pc, #20]	@ (800e714 <micSettlingComplete+0x44>)
 800e700:	2201      	movs	r2, #1
 800e702:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800e704:	1dfb      	adds	r3, r7, #7
 800e706:	781b      	ldrb	r3, [r3, #0]
}
 800e708:	0018      	movs	r0, r3
 800e70a:	46bd      	mov	sp, r7
 800e70c:	b002      	add	sp, #8
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20001984 	.word	0x20001984
 800e714:	20000f3d 	.word	0x20000f3d

0800e718 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	0002      	movs	r2, r0
 800e720:	1dfb      	adds	r3, r7, #7
 800e722:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800e724:	4b29      	ldr	r3, [pc, #164]	@ (800e7cc <enableMicrophone+0xb4>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	1dfa      	adds	r2, r7, #7
 800e72c:	7812      	ldrb	r2, [r2, #0]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d101      	bne.n	800e736 <enableMicrophone+0x1e>
    {
        return true;
 800e732:	2301      	movs	r3, #1
 800e734:	e045      	b.n	800e7c2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800e736:	1dfb      	adds	r3, r7, #7
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d025      	beq.n	800e78a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800e73e:	f7ff ffb1 	bl	800e6a4 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800e742:	4b23      	ldr	r3, [pc, #140]	@ (800e7d0 <enableMicrophone+0xb8>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2280      	movs	r2, #128	@ 0x80
 800e748:	0092      	lsls	r2, r2, #2
 800e74a:	4922      	ldr	r1, [pc, #136]	@ (800e7d4 <enableMicrophone+0xbc>)
 800e74c:	0018      	movs	r0, r3
 800e74e:	f007 f82b 	bl	80157a8 <HAL_I2S_Receive_DMA>
 800e752:	1e03      	subs	r3, r0, #0
 800e754:	d001      	beq.n	800e75a <enableMicrophone+0x42>
        {
            return false;
 800e756:	2300      	movs	r3, #0
 800e758:	e033      	b.n	800e7c2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800e75a:	f7ff ff99 	bl	800e690 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800e75e:	4b1e      	ldr	r3, [pc, #120]	@ (800e7d8 <enableMicrophone+0xc0>)
 800e760:	2200      	movs	r2, #0
 800e762:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800e764:	4b1d      	ldr	r3, [pc, #116]	@ (800e7dc <enableMicrophone+0xc4>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	b25b      	sxtb	r3, r3
 800e76a:	0018      	movs	r0, r3
 800e76c:	f7ff fe56 	bl	800e41c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800e770:	4b1b      	ldr	r3, [pc, #108]	@ (800e7e0 <enableMicrophone+0xc8>)
 800e772:	2201      	movs	r2, #1
 800e774:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800e776:	4b15      	ldr	r3, [pc, #84]	@ (800e7cc <enableMicrophone+0xb4>)
 800e778:	2201      	movs	r2, #1
 800e77a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e77c:	4b19      	ldr	r3, [pc, #100]	@ (800e7e4 <enableMicrophone+0xcc>)
 800e77e:	2200      	movs	r2, #0
 800e780:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e782:	4b19      	ldr	r3, [pc, #100]	@ (800e7e8 <enableMicrophone+0xd0>)
 800e784:	2200      	movs	r2, #0
 800e786:	701a      	strb	r2, [r3, #0]
 800e788:	e01a      	b.n	800e7c0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800e78a:	4b14      	ldr	r3, [pc, #80]	@ (800e7dc <enableMicrophone+0xc4>)
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	b25b      	sxtb	r3, r3
 800e790:	0018      	movs	r0, r3
 800e792:	f7ff fe5d 	bl	800e450 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800e796:	4b12      	ldr	r3, [pc, #72]	@ (800e7e0 <enableMicrophone+0xc8>)
 800e798:	2200      	movs	r2, #0
 800e79a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800e79c:	4b11      	ldr	r3, [pc, #68]	@ (800e7e4 <enableMicrophone+0xcc>)
 800e79e:	2200      	movs	r2, #0
 800e7a0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800e7a2:	4b11      	ldr	r3, [pc, #68]	@ (800e7e8 <enableMicrophone+0xd0>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800e7a8:	4b09      	ldr	r3, [pc, #36]	@ (800e7d0 <enableMicrophone+0xb8>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	0018      	movs	r0, r3
 800e7ae:	f007 f8bd 	bl	801592c <HAL_I2S_DMAStop>
 800e7b2:	1e03      	subs	r3, r0, #0
 800e7b4:	d001      	beq.n	800e7ba <enableMicrophone+0xa2>
        {
            return false;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	e003      	b.n	800e7c2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800e7ba:	4b04      	ldr	r3, [pc, #16]	@ (800e7cc <enableMicrophone+0xb4>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800e7c0:	2301      	movs	r3, #1
}
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	b002      	add	sp, #8
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	46c0      	nop			@ (mov r8, r8)
 800e7cc:	20000f3e 	.word	0x20000f3e
 800e7d0:	20001988 	.word	0x20001988
 800e7d4:	20000f84 	.word	0x20000f84
 800e7d8:	20000f44 	.word	0x20000f44
 800e7dc:	20001990 	.word	0x20001990
 800e7e0:	20000f40 	.word	0x20000f40
 800e7e4:	20000f3f 	.word	0x20000f3f
 800e7e8:	20000f41 	.word	0x20000f41

0800e7ec <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800e7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e824 <startSPLcalculation+0x38>)
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	4053      	eors	r3, r2
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <startSPLcalculation+0x18>
    {
        return false;
 800e800:	2300      	movs	r3, #0
 800e802:	e00c      	b.n	800e81e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800e804:	4b08      	ldr	r3, [pc, #32]	@ (800e828 <startSPLcalculation+0x3c>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d001      	beq.n	800e812 <startSPLcalculation+0x26>
    {
        return true;
 800e80e:	2301      	movs	r3, #1
 800e810:	e005      	b.n	800e81e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800e812:	f000 fb63 	bl	800eedc <resetSPLstate>
    SPLcalcEnabled = true;
 800e816:	4b04      	ldr	r3, [pc, #16]	@ (800e828 <startSPLcalculation+0x3c>)
 800e818:	2201      	movs	r2, #1
 800e81a:	701a      	strb	r2, [r3, #0]
    return true;
 800e81c:	2301      	movs	r3, #1
}
 800e81e:	0018      	movs	r0, r3
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}
 800e824:	20000f3e 	.word	0x20000f3e
 800e828:	20000f3f 	.word	0x20000f3f

0800e82c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e834:	4b05      	ldr	r3, [pc, #20]	@ (800e84c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d102      	bne.n	800e844 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800e83e:	2000      	movs	r0, #0
 800e840:	f000 f81a 	bl	800e878 <processHalfDMAbuffer>
  }
}
 800e844:	46c0      	nop			@ (mov r8, r8)
 800e846:	46bd      	mov	sp, r7
 800e848:	b002      	add	sp, #8
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	20001988 	.word	0x20001988

0800e850 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e858:	4b06      	ldr	r3, [pc, #24]	@ (800e874 <HAL_I2S_RxCpltCallback+0x24>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d104      	bne.n	800e86c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800e862:	2380      	movs	r3, #128	@ 0x80
 800e864:	009b      	lsls	r3, r3, #2
 800e866:	0018      	movs	r0, r3
 800e868:	f000 f806 	bl	800e878 <processHalfDMAbuffer>
  }
}
 800e86c:	46c0      	nop			@ (mov r8, r8)
 800e86e:	46bd      	mov	sp, r7
 800e870:	b002      	add	sp, #8
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20001988 	.word	0x20001988

0800e878 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	005a      	lsls	r2, r3, #1
 800e884:	4b15      	ldr	r3, [pc, #84]	@ (800e8dc <processHalfDMAbuffer+0x64>)
 800e886:	18d3      	adds	r3, r2, r3
 800e888:	4a15      	ldr	r2, [pc, #84]	@ (800e8e0 <processHalfDMAbuffer+0x68>)
 800e88a:	2180      	movs	r1, #128	@ 0x80
 800e88c:	0089      	lsls	r1, r1, #2
 800e88e:	0018      	movs	r0, r3
 800e890:	f000 fd35 	bl	800f2fe <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800e894:	4b13      	ldr	r3, [pc, #76]	@ (800e8e4 <processHalfDMAbuffer+0x6c>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	425a      	negs	r2, r3
 800e89a:	4153      	adcs	r3, r2
 800e89c:	b2da      	uxtb	r2, r3
 800e89e:	4b11      	ldr	r3, [pc, #68]	@ (800e8e4 <processHalfDMAbuffer+0x6c>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2109      	movs	r1, #9
 800e8a4:	4299      	cmp	r1, r3
 800e8a6:	419b      	sbcs	r3, r3
 800e8a8:	425b      	negs	r3, r3
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	480c      	ldr	r0, [pc, #48]	@ (800e8e0 <processHalfDMAbuffer+0x68>)
 800e8ae:	2180      	movs	r1, #128	@ 0x80
 800e8b0:	f000 fb46 	bl	800ef40 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800e8b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e4 <processHalfDMAbuffer+0x6c>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b09      	cmp	r3, #9
 800e8ba:	d804      	bhi.n	800e8c6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800e8bc:	4b09      	ldr	r3, [pc, #36]	@ (800e8e4 <processHalfDMAbuffer+0x6c>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	4b08      	ldr	r3, [pc, #32]	@ (800e8e4 <processHalfDMAbuffer+0x6c>)
 800e8c4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800e8c6:	4b08      	ldr	r3, [pc, #32]	@ (800e8e8 <processHalfDMAbuffer+0x70>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800e8d0:	f000 f826 	bl	800e920 <calculateSPLQ31>
    }
}
 800e8d4:	46c0      	nop			@ (mov r8, r8)
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	b002      	add	sp, #8
 800e8da:	bd80      	pop	{r7, pc}
 800e8dc:	20000f84 	.word	0x20000f84
 800e8e0:	20001784 	.word	0x20001784
 800e8e4:	20000f44 	.word	0x20000f44
 800e8e8:	20000f3f 	.word	0x20000f3f

0800e8ec <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800e8f4:	4b07      	ldr	r3, [pc, #28]	@ (800e914 <HAL_I2S_ErrorCallback+0x28>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d106      	bne.n	800e90c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800e8fe:	4a06      	ldr	r2, [pc, #24]	@ (800e918 <HAL_I2S_ErrorCallback+0x2c>)
 800e900:	239e      	movs	r3, #158	@ 0x9e
 800e902:	0059      	lsls	r1, r3, #1
 800e904:	4b05      	ldr	r3, [pc, #20]	@ (800e91c <HAL_I2S_ErrorCallback+0x30>)
 800e906:	0018      	movs	r0, r3
 800e908:	f002 f8f4 	bl	8010af4 <errorHandler>
  }
}
 800e90c:	46c0      	nop			@ (mov r8, r8)
 800e90e:	46bd      	mov	sp, r7
 800e910:	b002      	add	sp, #8
 800e912:	bd80      	pop	{r7, pc}
 800e914:	20001988 	.word	0x20001988
 800e918:	080288d8 	.word	0x080288d8
 800e91c:	0802914c 	.word	0x0802914c

0800e920 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800e920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e922:	b0b3      	sub	sp, #204	@ 0xcc
 800e924:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800e926:	4ae2      	ldr	r2, [pc, #904]	@ (800ecb0 <calculateSPLQ31+0x390>)
 800e928:	2338      	movs	r3, #56	@ 0x38
 800e92a:	2030      	movs	r0, #48	@ 0x30
 800e92c:	181b      	adds	r3, r3, r0
 800e92e:	19d9      	adds	r1, r3, r7
 800e930:	2334      	movs	r3, #52	@ 0x34
 800e932:	181b      	adds	r3, r3, r0
 800e934:	19d8      	adds	r0, r3, r7
 800e936:	2380      	movs	r3, #128	@ 0x80
 800e938:	f000 fc36 	bl	800f1a8 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800e93c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e93e:	2b00      	cmp	r3, #0
 800e940:	da00      	bge.n	800e944 <calculateSPLQ31+0x24>
 800e942:	3301      	adds	r3, #1
 800e944:	105b      	asrs	r3, r3, #1
 800e946:	001a      	movs	r2, r3
 800e948:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	da00      	bge.n	800e950 <calculateSPLQ31+0x30>
 800e94e:	3301      	adds	r3, #1
 800e950:	105b      	asrs	r3, r3, #1
 800e952:	18d3      	adds	r3, r2, r3
 800e954:	2188      	movs	r1, #136	@ 0x88
 800e956:	187a      	adds	r2, r7, r1
 800e958:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800e95a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e95c:	187b      	adds	r3, r7, r1
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	3304      	adds	r3, #4
 800e964:	2284      	movs	r2, #132	@ 0x84
 800e966:	18b9      	adds	r1, r7, r2
 800e968:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800e96a:	18bb      	adds	r3, r7, r2
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4ad1      	ldr	r2, [pc, #836]	@ (800ecb4 <calculateSPLQ31+0x394>)
 800e970:	0019      	movs	r1, r3
 800e972:	0010      	movs	r0, r2
 800e974:	f000 fc58 	bl	800f228 <getPo2factor>
 800e978:	0003      	movs	r3, r0
 800e97a:	2280      	movs	r2, #128	@ 0x80
 800e97c:	18ba      	adds	r2, r7, r2
 800e97e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800e980:	2300      	movs	r3, #0
 800e982:	2284      	movs	r2, #132	@ 0x84
 800e984:	2130      	movs	r1, #48	@ 0x30
 800e986:	1852      	adds	r2, r2, r1
 800e988:	19d2      	adds	r2, r2, r7
 800e98a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e98c:	2300      	movs	r3, #0
 800e98e:	2280      	movs	r2, #128	@ 0x80
 800e990:	1852      	adds	r2, r2, r1
 800e992:	19d2      	adds	r2, r2, r7
 800e994:	6013      	str	r3, [r2, #0]
 800e996:	e032      	b.n	800e9fe <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800e998:	4ac5      	ldr	r2, [pc, #788]	@ (800ecb0 <calculateSPLQ31+0x390>)
 800e99a:	2680      	movs	r6, #128	@ 0x80
 800e99c:	2330      	movs	r3, #48	@ 0x30
 800e99e:	18f1      	adds	r1, r6, r3
 800e9a0:	19cb      	adds	r3, r1, r7
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	589a      	ldr	r2, [r3, r2]
 800e9a8:	2188      	movs	r1, #136	@ 0x88
 800e9aa:	1879      	adds	r1, r7, r1
 800e9ac:	680b      	ldr	r3, [r1, #0]
 800e9ae:	1ad2      	subs	r2, r2, r3
 800e9b0:	2180      	movs	r1, #128	@ 0x80
 800e9b2:	1879      	adds	r1, r7, r1
 800e9b4:	680b      	ldr	r3, [r1, #0]
 800e9b6:	409a      	lsls	r2, r3
 800e9b8:	0011      	movs	r1, r2
 800e9ba:	4abf      	ldr	r2, [pc, #764]	@ (800ecb8 <calculateSPLQ31+0x398>)
 800e9bc:	2084      	movs	r0, #132	@ 0x84
 800e9be:	2330      	movs	r3, #48	@ 0x30
 800e9c0:	18c3      	adds	r3, r0, r3
 800e9c2:	19db      	adds	r3, r3, r7
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	009b      	lsls	r3, r3, #2
 800e9c8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800e9ca:	2230      	movs	r2, #48	@ 0x30
 800e9cc:	1883      	adds	r3, r0, r2
 800e9ce:	19db      	adds	r3, r3, r7
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	49b8      	ldr	r1, [pc, #736]	@ (800ecb8 <calculateSPLQ31+0x398>)
 800e9d6:	009a      	lsls	r2, r3, #2
 800e9d8:	2300      	movs	r3, #0
 800e9da:	5053      	str	r3, [r2, r1]
        count += 2;
 800e9dc:	2230      	movs	r2, #48	@ 0x30
 800e9de:	1883      	adds	r3, r0, r2
 800e9e0:	19db      	adds	r3, r3, r7
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	3302      	adds	r3, #2
 800e9e6:	0011      	movs	r1, r2
 800e9e8:	1882      	adds	r2, r0, r2
 800e9ea:	19d2      	adds	r2, r2, r7
 800e9ec:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800e9ee:	000a      	movs	r2, r1
 800e9f0:	18b3      	adds	r3, r6, r2
 800e9f2:	19db      	adds	r3, r3, r7
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	18b2      	adds	r2, r6, r2
 800e9fa:	19d2      	adds	r2, r2, r7
 800e9fc:	6013      	str	r3, [r2, #0]
 800e9fe:	2380      	movs	r3, #128	@ 0x80
 800ea00:	2630      	movs	r6, #48	@ 0x30
 800ea02:	199b      	adds	r3, r3, r6
 800ea04:	19db      	adds	r3, r3, r7
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b7f      	cmp	r3, #127	@ 0x7f
 800ea0a:	d9c5      	bls.n	800e998 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800ea0c:	4bab      	ldr	r3, [pc, #684]	@ (800ecbc <calculateSPLQ31+0x39c>)
 800ea0e:	6818      	ldr	r0, [r3, #0]
 800ea10:	49a9      	ldr	r1, [pc, #676]	@ (800ecb8 <calculateSPLQ31+0x398>)
 800ea12:	2301      	movs	r3, #1
 800ea14:	2200      	movs	r2, #0
 800ea16:	f011 fd23 	bl	8020460 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800ea1a:	4aa9      	ldr	r2, [pc, #676]	@ (800ecc0 <calculateSPLQ31+0x3a0>)
 800ea1c:	2338      	movs	r3, #56	@ 0x38
 800ea1e:	199b      	adds	r3, r3, r6
 800ea20:	19d9      	adds	r1, r3, r7
 800ea22:	2334      	movs	r3, #52	@ 0x34
 800ea24:	199b      	adds	r3, r3, r6
 800ea26:	19d8      	adds	r0, r3, r7
 800ea28:	237e      	movs	r3, #126	@ 0x7e
 800ea2a:	f000 fbbd 	bl	800f1a8 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800ea2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea30:	2380      	movs	r3, #128	@ 0x80
 800ea32:	061b      	lsls	r3, r3, #24
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d101      	bne.n	800ea3c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800ea38:	4b9e      	ldr	r3, [pc, #632]	@ (800ecb4 <calculateSPLQ31+0x394>)
 800ea3a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800ea3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ea3e:	2380      	movs	r3, #128	@ 0x80
 800ea40:	061b      	lsls	r3, r3, #24
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d101      	bne.n	800ea4a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800ea46:	4b9b      	ldr	r3, [pc, #620]	@ (800ecb4 <calculateSPLQ31+0x394>)
 800ea48:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800ea4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea4c:	17da      	asrs	r2, r3, #31
 800ea4e:	189b      	adds	r3, r3, r2
 800ea50:	4053      	eors	r3, r2
 800ea52:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800ea54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea56:	17da      	asrs	r2, r3, #31
 800ea58:	189b      	adds	r3, r3, r2
 800ea5a:	4053      	eors	r3, r2
 800ea5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800ea5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea62:	429a      	cmp	r2, r3
 800ea64:	dd01      	ble.n	800ea6a <calculateSPLQ31+0x14a>
    {
        max = min;
 800ea66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea68:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800ea6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea6c:	3304      	adds	r3, #4
 800ea6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800ea70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ea72:	4a90      	ldr	r2, [pc, #576]	@ (800ecb4 <calculateSPLQ31+0x394>)
 800ea74:	0019      	movs	r1, r3
 800ea76:	0010      	movs	r0, r2
 800ea78:	f000 fbd6 	bl	800f228 <getPo2factor>
 800ea7c:	0003      	movs	r3, r0
 800ea7e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800ea80:	2302      	movs	r3, #2
 800ea82:	22ac      	movs	r2, #172	@ 0xac
 800ea84:	18ba      	adds	r2, r7, r2
 800ea86:	6013      	str	r3, [r2, #0]
 800ea88:	e012      	b.n	800eab0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800ea8a:	4a8b      	ldr	r2, [pc, #556]	@ (800ecb8 <calculateSPLQ31+0x398>)
 800ea8c:	20ac      	movs	r0, #172	@ 0xac
 800ea8e:	183b      	adds	r3, r7, r0
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	589a      	ldr	r2, [r3, r2]
 800ea96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ea98:	409a      	lsls	r2, r3
 800ea9a:	0011      	movs	r1, r2
 800ea9c:	4a86      	ldr	r2, [pc, #536]	@ (800ecb8 <calculateSPLQ31+0x398>)
 800ea9e:	183b      	adds	r3, r7, r0
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800eaa6:	183b      	adds	r3, r7, r0
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	183a      	adds	r2, r7, r0
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	23ac      	movs	r3, #172	@ 0xac
 800eab2:	18fb      	adds	r3, r7, r3
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2b7f      	cmp	r3, #127	@ 0x7f
 800eab8:	d9e7      	bls.n	800ea8a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800eaba:	4b7d      	ldr	r3, [pc, #500]	@ (800ecb0 <calculateSPLQ31+0x390>)
 800eabc:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800eabe:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800eac0:	4b7d      	ldr	r3, [pc, #500]	@ (800ecb8 <calculateSPLQ31+0x398>)
 800eac2:	2240      	movs	r2, #64	@ 0x40
 800eac4:	0018      	movs	r0, r3
 800eac6:	f012 fa75 	bl	8020fb4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800eaca:	2330      	movs	r3, #48	@ 0x30
 800eacc:	18fb      	adds	r3, r7, r3
 800eace:	0018      	movs	r0, r3
 800ead0:	2330      	movs	r3, #48	@ 0x30
 800ead2:	001a      	movs	r2, r3
 800ead4:	2100      	movs	r1, #0
 800ead6:	f014 f8b3 	bl	8022c40 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800eada:	2200      	movs	r2, #0
 800eadc:	2300      	movs	r3, #0
 800eade:	21a0      	movs	r1, #160	@ 0xa0
 800eae0:	1879      	adds	r1, r7, r1
 800eae2:	600a      	str	r2, [r1, #0]
 800eae4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800eae6:	2301      	movs	r3, #1
 800eae8:	229c      	movs	r2, #156	@ 0x9c
 800eaea:	18ba      	adds	r2, r7, r2
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	e05b      	b.n	800eba8 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800eaf0:	269c      	movs	r6, #156	@ 0x9c
 800eaf2:	19bb      	adds	r3, r7, r6
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	009a      	lsls	r2, r3, #2
 800eaf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eafa:	189b      	adds	r3, r3, r2
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	613b      	str	r3, [r7, #16]
 800eb00:	17db      	asrs	r3, r3, #31
 800eb02:	617b      	str	r3, [r7, #20]
 800eb04:	4b6f      	ldr	r3, [pc, #444]	@ (800ecc4 <calculateSPLQ31+0x3a4>)
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	19bb      	adds	r3, r7, r6
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	005b      	lsls	r3, r3, #1
 800eb0e:	18d3      	adds	r3, r2, r3
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	60bb      	str	r3, [r7, #8]
 800eb14:	2300      	movs	r3, #0
 800eb16:	60fb      	str	r3, [r7, #12]
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6938      	ldr	r0, [r7, #16]
 800eb1e:	6979      	ldr	r1, [r7, #20]
 800eb20:	f7f1 fd4e 	bl	80005c0 <__aeabi_lmul>
 800eb24:	0002      	movs	r2, r0
 800eb26:	000b      	movs	r3, r1
 800eb28:	0010      	movs	r0, r2
 800eb2a:	0019      	movs	r1, r3
 800eb2c:	23a0      	movs	r3, #160	@ 0xa0
 800eb2e:	18fa      	adds	r2, r7, r3
 800eb30:	6853      	ldr	r3, [r2, #4]
 800eb32:	6812      	ldr	r2, [r2, #0]
 800eb34:	1812      	adds	r2, r2, r0
 800eb36:	414b      	adcs	r3, r1
 800eb38:	21a0      	movs	r1, #160	@ 0xa0
 800eb3a:	1879      	adds	r1, r7, r1
 800eb3c:	600a      	str	r2, [r1, #0]
 800eb3e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800eb40:	4b61      	ldr	r3, [pc, #388]	@ (800ecc8 <calculateSPLQ31+0x3a8>)
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	19bb      	adds	r3, r7, r6
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	18d3      	adds	r3, r2, r3
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	2b06      	cmp	r3, #6
 800eb4e:	d025      	beq.n	800eb9c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800eb50:	4b5d      	ldr	r3, [pc, #372]	@ (800ecc8 <calculateSPLQ31+0x3a8>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	19bb      	adds	r3, r7, r6
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	18d3      	adds	r3, r2, r3
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2230      	movs	r2, #48	@ 0x30
 800eb5e:	18ba      	adds	r2, r7, r2
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	18d3      	adds	r3, r2, r3
 800eb64:	6818      	ldr	r0, [r3, #0]
 800eb66:	6859      	ldr	r1, [r3, #4]
 800eb68:	19bb      	adds	r3, r7, r6
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	009a      	lsls	r2, r3, #2
 800eb6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb70:	189b      	adds	r3, r3, r2
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	603b      	str	r3, [r7, #0]
 800eb76:	17db      	asrs	r3, r3, #31
 800eb78:	607b      	str	r3, [r7, #4]
 800eb7a:	4b53      	ldr	r3, [pc, #332]	@ (800ecc8 <calculateSPLQ31+0x3a8>)
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	19be      	adds	r6, r7, r6
 800eb80:	6833      	ldr	r3, [r6, #0]
 800eb82:	18d3      	adds	r3, r2, r3
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	001e      	movs	r6, r3
 800eb88:	683a      	ldr	r2, [r7, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	1880      	adds	r0, r0, r2
 800eb8e:	4159      	adcs	r1, r3
 800eb90:	2330      	movs	r3, #48	@ 0x30
 800eb92:	18fa      	adds	r2, r7, r3
 800eb94:	00f3      	lsls	r3, r6, #3
 800eb96:	18d3      	adds	r3, r2, r3
 800eb98:	6018      	str	r0, [r3, #0]
 800eb9a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800eb9c:	229c      	movs	r2, #156	@ 0x9c
 800eb9e:	18bb      	adds	r3, r7, r2
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3301      	adds	r3, #1
 800eba4:	18ba      	adds	r2, r7, r2
 800eba6:	6013      	str	r3, [r2, #0]
 800eba8:	239c      	movs	r3, #156	@ 0x9c
 800ebaa:	18fb      	adds	r3, r7, r3
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b3f      	cmp	r3, #63	@ 0x3f
 800ebb0:	d99e      	bls.n	800eaf0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800ebb2:	2380      	movs	r3, #128	@ 0x80
 800ebb4:	18fb      	adds	r3, r7, r3
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	005b      	lsls	r3, r3, #1
 800ebba:	001a      	movs	r2, r3
 800ebbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	18d3      	adds	r3, r2, r3
 800ebc2:	3b22      	subs	r3, #34	@ 0x22
 800ebc4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800ebc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ebc8:	17da      	asrs	r2, r3, #31
 800ebca:	189b      	adds	r3, r3, r2
 800ebcc:	4053      	eors	r3, r2
 800ebce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800ebd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	da62      	bge.n	800ec9c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800ebd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebd8:	3b20      	subs	r3, #32
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	db05      	blt.n	800ebea <calculateSPLQ31+0x2ca>
 800ebde:	22a0      	movs	r2, #160	@ 0xa0
 800ebe0:	18ba      	adds	r2, r7, r2
 800ebe2:	6812      	ldr	r2, [r2, #0]
 800ebe4:	409a      	lsls	r2, r3
 800ebe6:	627a      	str	r2, [r7, #36]	@ 0x24
 800ebe8:	e010      	b.n	800ec0c <calculateSPLQ31+0x2ec>
 800ebea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ebec:	2220      	movs	r2, #32
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	22a0      	movs	r2, #160	@ 0xa0
 800ebf2:	18ba      	adds	r2, r7, r2
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	40da      	lsrs	r2, r3
 800ebf8:	0013      	movs	r3, r2
 800ebfa:	22a4      	movs	r2, #164	@ 0xa4
 800ebfc:	18ba      	adds	r2, r7, r2
 800ebfe:	6811      	ldr	r1, [r2, #0]
 800ec00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec02:	4091      	lsls	r1, r2
 800ec04:	6279      	str	r1, [r7, #36]	@ 0x24
 800ec06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ec0c:	21a0      	movs	r1, #160	@ 0xa0
 800ec0e:	187b      	adds	r3, r7, r1
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec14:	409a      	lsls	r2, r3
 800ec16:	623a      	str	r2, [r7, #32]
 800ec18:	6a3b      	ldr	r3, [r7, #32]
 800ec1a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800ec1c:	187a      	adds	r2, r7, r1
 800ec1e:	6013      	str	r3, [r2, #0]
 800ec20:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ec22:	2300      	movs	r3, #0
 800ec24:	2298      	movs	r2, #152	@ 0x98
 800ec26:	18ba      	adds	r2, r7, r2
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	e031      	b.n	800ec90 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800ec2c:	2330      	movs	r3, #48	@ 0x30
 800ec2e:	18fa      	adds	r2, r7, r3
 800ec30:	2398      	movs	r3, #152	@ 0x98
 800ec32:	18fb      	adds	r3, r7, r3
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	18d3      	adds	r3, r2, r3
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ec40:	3920      	subs	r1, #32
 800ec42:	2900      	cmp	r1, #0
 800ec44:	db03      	blt.n	800ec4e <calculateSPLQ31+0x32e>
 800ec46:	0010      	movs	r0, r2
 800ec48:	4088      	lsls	r0, r1
 800ec4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ec4c:	e00c      	b.n	800ec68 <calculateSPLQ31+0x348>
 800ec4e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ec50:	2020      	movs	r0, #32
 800ec52:	1a41      	subs	r1, r0, r1
 800ec54:	0010      	movs	r0, r2
 800ec56:	40c8      	lsrs	r0, r1
 800ec58:	0001      	movs	r1, r0
 800ec5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec5c:	001c      	movs	r4, r3
 800ec5e:	4084      	lsls	r4, r0
 800ec60:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800ec62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec64:	4308      	orrs	r0, r1
 800ec66:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ec68:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ec6a:	0013      	movs	r3, r2
 800ec6c:	408b      	lsls	r3, r1
 800ec6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec70:	2330      	movs	r3, #48	@ 0x30
 800ec72:	18fa      	adds	r2, r7, r3
 800ec74:	2098      	movs	r0, #152	@ 0x98
 800ec76:	183b      	adds	r3, r7, r0
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	00db      	lsls	r3, r3, #3
 800ec7c:	18d3      	adds	r3, r2, r3
 800ec7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec82:	6019      	str	r1, [r3, #0]
 800ec84:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ec86:	183b      	adds	r3, r7, r0
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	183a      	adds	r2, r7, r0
 800ec8e:	6013      	str	r3, [r2, #0]
 800ec90:	2398      	movs	r3, #152	@ 0x98
 800ec92:	18fb      	adds	r3, r7, r3
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b05      	cmp	r3, #5
 800ec98:	d9c8      	bls.n	800ec2c <calculateSPLQ31+0x30c>
 800ec9a:	e06b      	b.n	800ed74 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800ec9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec9e:	3b20      	subs	r3, #32
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	db13      	blt.n	800eccc <calculateSPLQ31+0x3ac>
 800eca4:	22a4      	movs	r2, #164	@ 0xa4
 800eca6:	18ba      	adds	r2, r7, r2
 800eca8:	6812      	ldr	r2, [r2, #0]
 800ecaa:	40da      	lsrs	r2, r3
 800ecac:	61ba      	str	r2, [r7, #24]
 800ecae:	e01e      	b.n	800ecee <calculateSPLQ31+0x3ce>
 800ecb0:	20001784 	.word	0x20001784
 800ecb4:	7fffffff 	.word	0x7fffffff
 800ecb8:	200019d0 	.word	0x200019d0
 800ecbc:	200000cc 	.word	0x200000cc
 800ecc0:	200019d8 	.word	0x200019d8
 800ecc4:	200000d0 	.word	0x200000d0
 800ecc8:	200000dc 	.word	0x200000dc
 800eccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecce:	2220      	movs	r2, #32
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	22a4      	movs	r2, #164	@ 0xa4
 800ecd4:	18ba      	adds	r2, r7, r2
 800ecd6:	6812      	ldr	r2, [r2, #0]
 800ecd8:	409a      	lsls	r2, r3
 800ecda:	0013      	movs	r3, r2
 800ecdc:	22a0      	movs	r2, #160	@ 0xa0
 800ecde:	18ba      	adds	r2, r7, r2
 800ece0:	6811      	ldr	r1, [r2, #0]
 800ece2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ece4:	40d1      	lsrs	r1, r2
 800ece6:	61b9      	str	r1, [r7, #24]
 800ece8:	69ba      	ldr	r2, [r7, #24]
 800ecea:	431a      	orrs	r2, r3
 800ecec:	61ba      	str	r2, [r7, #24]
 800ecee:	23a4      	movs	r3, #164	@ 0xa4
 800ecf0:	18fb      	adds	r3, r7, r3
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecf6:	40da      	lsrs	r2, r3
 800ecf8:	61fa      	str	r2, [r7, #28]
 800ecfa:	69ba      	ldr	r2, [r7, #24]
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	21a0      	movs	r1, #160	@ 0xa0
 800ed00:	1879      	adds	r1, r7, r1
 800ed02:	600a      	str	r2, [r1, #0]
 800ed04:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ed06:	2300      	movs	r3, #0
 800ed08:	2294      	movs	r2, #148	@ 0x94
 800ed0a:	18ba      	adds	r2, r7, r2
 800ed0c:	6013      	str	r3, [r2, #0]
 800ed0e:	e02c      	b.n	800ed6a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ed10:	2330      	movs	r3, #48	@ 0x30
 800ed12:	18fa      	adds	r2, r7, r3
 800ed14:	2394      	movs	r3, #148	@ 0x94
 800ed16:	18fb      	adds	r3, r7, r3
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	00db      	lsls	r3, r3, #3
 800ed1c:	18d3      	adds	r3, r2, r3
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ed24:	3920      	subs	r1, #32
 800ed26:	2900      	cmp	r1, #0
 800ed28:	db03      	blt.n	800ed32 <calculateSPLQ31+0x412>
 800ed2a:	0018      	movs	r0, r3
 800ed2c:	40c8      	lsrs	r0, r1
 800ed2e:	0004      	movs	r4, r0
 800ed30:	e00a      	b.n	800ed48 <calculateSPLQ31+0x428>
 800ed32:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ed34:	2020      	movs	r0, #32
 800ed36:	1a41      	subs	r1, r0, r1
 800ed38:	0018      	movs	r0, r3
 800ed3a:	4088      	lsls	r0, r1
 800ed3c:	0001      	movs	r1, r0
 800ed3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ed40:	0016      	movs	r6, r2
 800ed42:	40c6      	lsrs	r6, r0
 800ed44:	0034      	movs	r4, r6
 800ed46:	430c      	orrs	r4, r1
 800ed48:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ed4a:	40cb      	lsrs	r3, r1
 800ed4c:	001d      	movs	r5, r3
 800ed4e:	2330      	movs	r3, #48	@ 0x30
 800ed50:	18fa      	adds	r2, r7, r3
 800ed52:	2194      	movs	r1, #148	@ 0x94
 800ed54:	187b      	adds	r3, r7, r1
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	00db      	lsls	r3, r3, #3
 800ed5a:	18d3      	adds	r3, r2, r3
 800ed5c:	601c      	str	r4, [r3, #0]
 800ed5e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ed60:	187b      	adds	r3, r7, r1
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	3301      	adds	r3, #1
 800ed66:	187a      	adds	r2, r7, r1
 800ed68:	6013      	str	r3, [r2, #0]
 800ed6a:	2394      	movs	r3, #148	@ 0x94
 800ed6c:	18fb      	adds	r3, r7, r3
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b05      	cmp	r3, #5
 800ed72:	d9cd      	bls.n	800ed10 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ed74:	230f      	movs	r3, #15
 800ed76:	425d      	negs	r5, r3
 800ed78:	2305      	movs	r3, #5
 800ed7a:	425e      	negs	r6, r3
 800ed7c:	4b4a      	ldr	r3, [pc, #296]	@ (800eea8 <calculateSPLQ31+0x588>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	4b4a      	ldr	r3, [pc, #296]	@ (800eeac <calculateSPLQ31+0x58c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	21a0      	movs	r1, #160	@ 0xa0
 800ed8a:	1879      	adds	r1, r7, r1
 800ed8c:	6808      	ldr	r0, [r1, #0]
 800ed8e:	6849      	ldr	r1, [r1, #4]
 800ed90:	4c47      	ldr	r4, [pc, #284]	@ (800eeb0 <calculateSPLQ31+0x590>)
 800ed92:	9403      	str	r4, [sp, #12]
 800ed94:	4c47      	ldr	r4, [pc, #284]	@ (800eeb4 <calculateSPLQ31+0x594>)
 800ed96:	9402      	str	r4, [sp, #8]
 800ed98:	9301      	str	r3, [sp, #4]
 800ed9a:	9200      	str	r2, [sp, #0]
 800ed9c:	0033      	movs	r3, r6
 800ed9e:	002a      	movs	r2, r5
 800eda0:	f000 fa86 	bl	800f2b0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800eda4:	2300      	movs	r3, #0
 800eda6:	2290      	movs	r2, #144	@ 0x90
 800eda8:	18ba      	adds	r2, r7, r2
 800edaa:	6013      	str	r3, [r2, #0]
 800edac:	e026      	b.n	800edfc <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800edae:	2330      	movs	r3, #48	@ 0x30
 800edb0:	18fa      	adds	r2, r7, r3
 800edb2:	2490      	movs	r4, #144	@ 0x90
 800edb4:	193b      	adds	r3, r7, r4
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	00db      	lsls	r3, r3, #3
 800edba:	18d3      	adds	r3, r2, r3
 800edbc:	6818      	ldr	r0, [r3, #0]
 800edbe:	6859      	ldr	r1, [r3, #4]
 800edc0:	230f      	movs	r3, #15
 800edc2:	425d      	negs	r5, r3
 800edc4:	2305      	movs	r3, #5
 800edc6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800edc8:	193b      	adds	r3, r7, r4
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	009a      	lsls	r2, r3, #2
 800edce:	4b3a      	ldr	r3, [pc, #232]	@ (800eeb8 <calculateSPLQ31+0x598>)
 800edd0:	18d3      	adds	r3, r2, r3
 800edd2:	193a      	adds	r2, r7, r4
 800edd4:	6812      	ldr	r2, [r2, #0]
 800edd6:	0094      	lsls	r4, r2, #2
 800edd8:	4a38      	ldr	r2, [pc, #224]	@ (800eebc <calculateSPLQ31+0x59c>)
 800edda:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800eddc:	9203      	str	r2, [sp, #12]
 800edde:	9302      	str	r3, [sp, #8]
 800ede0:	2300      	movs	r3, #0
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	2300      	movs	r3, #0
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	0033      	movs	r3, r6
 800edea:	002a      	movs	r2, r5
 800edec:	f000 fa60 	bl	800f2b0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800edf0:	2490      	movs	r4, #144	@ 0x90
 800edf2:	193b      	adds	r3, r7, r4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	3301      	adds	r3, #1
 800edf8:	193a      	adds	r2, r7, r4
 800edfa:	6013      	str	r3, [r2, #0]
 800edfc:	2390      	movs	r3, #144	@ 0x90
 800edfe:	18fb      	adds	r3, r7, r3
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b05      	cmp	r3, #5
 800ee04:	d9d3      	bls.n	800edae <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800ee06:	4b2b      	ldr	r3, [pc, #172]	@ (800eeb4 <calculateSPLQ31+0x594>)
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	4b2d      	ldr	r3, [pc, #180]	@ (800eec0 <calculateSPLQ31+0x5a0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	18d2      	adds	r2, r2, r3
 800ee10:	4b2b      	ldr	r3, [pc, #172]	@ (800eec0 <calculateSPLQ31+0x5a0>)
 800ee12:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800ee14:	4b26      	ldr	r3, [pc, #152]	@ (800eeb0 <calculateSPLQ31+0x590>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	4b2a      	ldr	r3, [pc, #168]	@ (800eec4 <calculateSPLQ31+0x5a4>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	18d2      	adds	r2, r2, r3
 800ee1e:	4b29      	ldr	r3, [pc, #164]	@ (800eec4 <calculateSPLQ31+0x5a4>)
 800ee20:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ee22:	2300      	movs	r3, #0
 800ee24:	228c      	movs	r2, #140	@ 0x8c
 800ee26:	18ba      	adds	r2, r7, r2
 800ee28:	6013      	str	r3, [r2, #0]
 800ee2a:	e025      	b.n	800ee78 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800ee2c:	4b22      	ldr	r3, [pc, #136]	@ (800eeb8 <calculateSPLQ31+0x598>)
 800ee2e:	208c      	movs	r0, #140	@ 0x8c
 800ee30:	183a      	adds	r2, r7, r0
 800ee32:	6812      	ldr	r2, [r2, #0]
 800ee34:	0092      	lsls	r2, r2, #2
 800ee36:	58d2      	ldr	r2, [r2, r3]
 800ee38:	4b23      	ldr	r3, [pc, #140]	@ (800eec8 <calculateSPLQ31+0x5a8>)
 800ee3a:	1839      	adds	r1, r7, r0
 800ee3c:	6809      	ldr	r1, [r1, #0]
 800ee3e:	0089      	lsls	r1, r1, #2
 800ee40:	58cb      	ldr	r3, [r1, r3]
 800ee42:	18d1      	adds	r1, r2, r3
 800ee44:	4b20      	ldr	r3, [pc, #128]	@ (800eec8 <calculateSPLQ31+0x5a8>)
 800ee46:	183a      	adds	r2, r7, r0
 800ee48:	6812      	ldr	r2, [r2, #0]
 800ee4a:	0092      	lsls	r2, r2, #2
 800ee4c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800ee4e:	4b1b      	ldr	r3, [pc, #108]	@ (800eebc <calculateSPLQ31+0x59c>)
 800ee50:	183a      	adds	r2, r7, r0
 800ee52:	6812      	ldr	r2, [r2, #0]
 800ee54:	0092      	lsls	r2, r2, #2
 800ee56:	58d2      	ldr	r2, [r2, r3]
 800ee58:	4b1c      	ldr	r3, [pc, #112]	@ (800eecc <calculateSPLQ31+0x5ac>)
 800ee5a:	1839      	adds	r1, r7, r0
 800ee5c:	6809      	ldr	r1, [r1, #0]
 800ee5e:	0089      	lsls	r1, r1, #2
 800ee60:	58cb      	ldr	r3, [r1, r3]
 800ee62:	18d1      	adds	r1, r2, r3
 800ee64:	4b19      	ldr	r3, [pc, #100]	@ (800eecc <calculateSPLQ31+0x5ac>)
 800ee66:	183a      	adds	r2, r7, r0
 800ee68:	6812      	ldr	r2, [r2, #0]
 800ee6a:	0092      	lsls	r2, r2, #2
 800ee6c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ee6e:	183b      	adds	r3, r7, r0
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	3301      	adds	r3, #1
 800ee74:	183a      	adds	r2, r7, r0
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	238c      	movs	r3, #140	@ 0x8c
 800ee7a:	18fb      	adds	r3, r7, r3
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	d9d4      	bls.n	800ee2c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ee82:	4b13      	ldr	r3, [pc, #76]	@ (800eed0 <calculateSPLQ31+0x5b0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	4b11      	ldr	r3, [pc, #68]	@ (800eed0 <calculateSPLQ31+0x5b0>)
 800ee8a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ee8c:	4b10      	ldr	r3, [pc, #64]	@ (800eed0 <calculateSPLQ31+0x5b0>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2b0f      	cmp	r3, #15
 800ee92:	d905      	bls.n	800eea0 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ee94:	4b0f      	ldr	r3, [pc, #60]	@ (800eed4 <calculateSPLQ31+0x5b4>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ee9a:	4b0f      	ldr	r3, [pc, #60]	@ (800eed8 <calculateSPLQ31+0x5b8>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	701a      	strb	r2, [r3, #0]
    }
}
 800eea0:	46c0      	nop			@ (mov r8, r8)
 800eea2:	46bd      	mov	sp, r7
 800eea4:	b02f      	add	sp, #188	@ 0xbc
 800eea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eea8:	200000d4 	.word	0x200000d4
 800eeac:	200000d8 	.word	0x200000d8
 800eeb0:	20000f50 	.word	0x20000f50
 800eeb4:	20000f4c 	.word	0x20000f4c
 800eeb8:	20000f54 	.word	0x20000f54
 800eebc:	20000f6c 	.word	0x20000f6c
 800eec0:	20001994 	.word	0x20001994
 800eec4:	20001998 	.word	0x20001998
 800eec8:	2000199c 	.word	0x2000199c
 800eecc:	200019b4 	.word	0x200019b4
 800eed0:	200019cc 	.word	0x200019cc
 800eed4:	20000f41 	.word	0x20000f41
 800eed8:	20000f3f 	.word	0x20000f3f

0800eedc <resetSPLstate>:

static void resetSPLstate(void)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800eee2:	4b11      	ldr	r3, [pc, #68]	@ (800ef28 <resetSPLstate+0x4c>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800eee8:	4b10      	ldr	r3, [pc, #64]	@ (800ef2c <resetSPLstate+0x50>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800eeee:	4b10      	ldr	r3, [pc, #64]	@ (800ef30 <resetSPLstate+0x54>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800eef4:	2300      	movs	r3, #0
 800eef6:	607b      	str	r3, [r7, #4]
 800eef8:	e00c      	b.n	800ef14 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800eefa:	4b0e      	ldr	r3, [pc, #56]	@ (800ef34 <resetSPLstate+0x58>)
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	0092      	lsls	r2, r2, #2
 800ef00:	2100      	movs	r1, #0
 800ef02:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800ef04:	4b0c      	ldr	r3, [pc, #48]	@ (800ef38 <resetSPLstate+0x5c>)
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	0092      	lsls	r2, r2, #2
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3301      	adds	r3, #1
 800ef12:	607b      	str	r3, [r7, #4]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b05      	cmp	r3, #5
 800ef18:	d9ef      	bls.n	800eefa <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800ef1a:	4b08      	ldr	r3, [pc, #32]	@ (800ef3c <resetSPLstate+0x60>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	701a      	strb	r2, [r3, #0]
}
 800ef20:	46c0      	nop			@ (mov r8, r8)
 800ef22:	46bd      	mov	sp, r7
 800ef24:	b002      	add	sp, #8
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20001994 	.word	0x20001994
 800ef2c:	20001998 	.word	0x20001998
 800ef30:	200019cc 	.word	0x200019cc
 800ef34:	2000199c 	.word	0x2000199c
 800ef38:	200019b4 	.word	0x200019b4
 800ef3c:	20000f41 	.word	0x20000f41

0800ef40 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800ef40:	b5b0      	push	{r4, r5, r7, lr}
 800ef42:	b090      	sub	sp, #64	@ 0x40
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	0019      	movs	r1, r3
 800ef4c:	1dfb      	adds	r3, r7, #7
 800ef4e:	701a      	strb	r2, [r3, #0]
 800ef50:	1dbb      	adds	r3, r7, #6
 800ef52:	1c0a      	adds	r2, r1, #0
 800ef54:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800ef56:	1dfb      	adds	r3, r7, #7
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d005      	beq.n	800ef6a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800ef5e:	4b3b      	ldr	r3, [pc, #236]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800ef64:	4b3a      	ldr	r3, [pc, #232]	@ (800f050 <getFilteredMaxAmplitudeQ31+0x110>)
 800ef66:	2200      	movs	r2, #0
 800ef68:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800ef72:	2305      	movs	r3, #5
 800ef74:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800ef76:	2300      	movs	r3, #0
 800ef78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef7a:	e040      	b.n	800effe <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800ef7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	18d3      	adds	r3, r2, r3
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef88:	409a      	lsls	r2, r3
 800ef8a:	0013      	movs	r3, r2
 800ef8c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800ef8e:	4b30      	ldr	r3, [pc, #192]	@ (800f050 <getFilteredMaxAmplitudeQ31+0x110>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	425a      	negs	r2, r3
 800ef94:	4b2e      	ldr	r3, [pc, #184]	@ (800f050 <getFilteredMaxAmplitudeQ31+0x110>)
 800ef96:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800ef98:	2418      	movs	r4, #24
 800ef9a:	193a      	adds	r2, r7, r4
 800ef9c:	492c      	ldr	r1, [pc, #176]	@ (800f050 <getFilteredMaxAmplitudeQ31+0x110>)
 800ef9e:	231c      	movs	r3, #28
 800efa0:	18f8      	adds	r0, r7, r3
 800efa2:	2301      	movs	r3, #1
 800efa4:	f012 f85e 	bl	8021064 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800efa8:	2514      	movs	r5, #20
 800efaa:	197a      	adds	r2, r7, r5
 800efac:	1939      	adds	r1, r7, r4
 800efae:	4829      	ldr	r0, [pc, #164]	@ (800f054 <getFilteredMaxAmplitudeQ31+0x114>)
 800efb0:	2301      	movs	r3, #1
 800efb2:	f012 f825 	bl	8021000 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800efb6:	2410      	movs	r4, #16
 800efb8:	193a      	adds	r2, r7, r4
 800efba:	4924      	ldr	r1, [pc, #144]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800efbc:	4826      	ldr	r0, [pc, #152]	@ (800f058 <getFilteredMaxAmplitudeQ31+0x118>)
 800efbe:	2301      	movs	r3, #1
 800efc0:	f012 f81e 	bl	8021000 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800efc4:	4a21      	ldr	r2, [pc, #132]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800efc6:	1939      	adds	r1, r7, r4
 800efc8:	1978      	adds	r0, r7, r5
 800efca:	2301      	movs	r3, #1
 800efcc:	f012 f84a 	bl	8021064 <arm_add_q31>

        lastData = fx;
 800efd0:	69fa      	ldr	r2, [r7, #28]
 800efd2:	4b1f      	ldr	r3, [pc, #124]	@ (800f050 <getFilteredMaxAmplitudeQ31+0x110>)
 800efd4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800efd6:	4b1d      	ldr	r3, [pc, #116]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efdc:	429a      	cmp	r2, r3
 800efde:	da03      	bge.n	800efe8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800efe0:	4b1a      	ldr	r3, [pc, #104]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efe6:	e007      	b.n	800eff8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800efe8:	4b18      	ldr	r3, [pc, #96]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800efee:	429a      	cmp	r2, r3
 800eff0:	dd02      	ble.n	800eff8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800eff2:	4b16      	ldr	r3, [pc, #88]	@ (800f04c <getFilteredMaxAmplitudeQ31+0x10c>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800eff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800effa:	3301      	adds	r3, #1
 800effc:	637b      	str	r3, [r7, #52]	@ 0x34
 800effe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	429a      	cmp	r2, r3
 800f004:	d3ba      	bcc.n	800ef7c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800f006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f008:	17da      	asrs	r2, r3, #31
 800f00a:	189b      	adds	r3, r3, r2
 800f00c:	4053      	eors	r3, r2
 800f00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800f010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f012:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800f014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f018:	4293      	cmp	r3, r2
 800f01a:	d200      	bcs.n	800f01e <getFilteredMaxAmplitudeQ31+0xde>
 800f01c:	0013      	movs	r3, r2
 800f01e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800f020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f024:	40da      	lsrs	r2, r3
 800f026:	0013      	movs	r3, r2
 800f028:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800f02a:	1dbb      	adds	r3, r7, #6
 800f02c:	781b      	ldrb	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d007      	beq.n	800f042 <getFilteredMaxAmplitudeQ31+0x102>
 800f032:	4b0a      	ldr	r3, [pc, #40]	@ (800f05c <getFilteredMaxAmplitudeQ31+0x11c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6a3a      	ldr	r2, [r7, #32]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d902      	bls.n	800f042 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800f03c:	4b07      	ldr	r3, [pc, #28]	@ (800f05c <getFilteredMaxAmplitudeQ31+0x11c>)
 800f03e:	6a3a      	ldr	r2, [r7, #32]
 800f040:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800f042:	6a3b      	ldr	r3, [r7, #32]
}
 800f044:	0018      	movs	r0, r3
 800f046:	46bd      	mov	sp, r7
 800f048:	b010      	add	sp, #64	@ 0x40
 800f04a:	bdb0      	pop	{r4, r5, r7, pc}
 800f04c:	20001dd0 	.word	0x20001dd0
 800f050:	20001dd4 	.word	0x20001dd4
 800f054:	08029144 	.word	0x08029144
 800f058:	08029148 	.word	0x08029148
 800f05c:	20000f48 	.word	0x20000f48

0800f060 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800f06c:	4913      	ldr	r1, [pc, #76]	@ (800f0bc <floatToIntAndFrac2dp+0x5c>)
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7f1 ff96 	bl	8000fa0 <__aeabi_fmul>
 800f074:	1c03      	adds	r3, r0, #0
 800f076:	1c18      	adds	r0, r3, #0
 800f078:	f016 fc4a 	bl	8025910 <roundf>
 800f07c:	1c03      	adds	r3, r0, #0
 800f07e:	1c18      	adds	r0, r3, #0
 800f080:	f7f1 facc 	bl	800061c <__aeabi_f2uiz>
 800f084:	0003      	movs	r3, r0
 800f086:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	2164      	movs	r1, #100	@ 0x64
 800f08c:	0018      	movs	r0, r3
 800f08e:	f7f1 f889 	bl	80001a4 <__udivsi3>
 800f092:	0003      	movs	r3, r0
 800f094:	001a      	movs	r2, r3
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	2164      	movs	r1, #100	@ 0x64
 800f0a6:	434b      	muls	r3, r1
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	1ad3      	subs	r3, r2, r3
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	701a      	strb	r2, [r3, #0]
}
 800f0b2:	46c0      	nop			@ (mov r8, r8)
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	b006      	add	sp, #24
 800f0b8:	bd80      	pop	{r7, pc}
 800f0ba:	46c0      	nop			@ (mov r8, r8)
 800f0bc:	42c80000 	.word	0x42c80000

0800f0c0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800f0cc:	4914      	ldr	r1, [pc, #80]	@ (800f120 <floatToIntAndFrac1dp+0x60>)
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7f1 ff66 	bl	8000fa0 <__aeabi_fmul>
 800f0d4:	1c03      	adds	r3, r0, #0
 800f0d6:	1c18      	adds	r0, r3, #0
 800f0d8:	f016 fc1a 	bl	8025910 <roundf>
 800f0dc:	1c03      	adds	r3, r0, #0
 800f0de:	1c18      	adds	r0, r3, #0
 800f0e0:	f7f1 fa9c 	bl	800061c <__aeabi_f2uiz>
 800f0e4:	0003      	movs	r3, r0
 800f0e6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	210a      	movs	r1, #10
 800f0ec:	0018      	movs	r0, r3
 800f0ee:	f7f1 f859 	bl	80001a4 <__udivsi3>
 800f0f2:	0003      	movs	r3, r0
 800f0f4:	001a      	movs	r2, r3
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	b2da      	uxtb	r2, r3
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	b2db      	uxtb	r3, r3
 800f104:	1c19      	adds	r1, r3, #0
 800f106:	0089      	lsls	r1, r1, #2
 800f108:	18cb      	adds	r3, r1, r3
 800f10a:	18db      	adds	r3, r3, r3
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	b2da      	uxtb	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	701a      	strb	r2, [r3, #0]
}
 800f116:	46c0      	nop			@ (mov r8, r8)
 800f118:	46bd      	mov	sp, r7
 800f11a:	b006      	add	sp, #24
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	46c0      	nop			@ (mov r8, r8)
 800f120:	41200000 	.word	0x41200000

0800f124 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800f124:	b590      	push	{r4, r7, lr}
 800f126:	b087      	sub	sp, #28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7f2 fa4c 	bl	80015d0 <__aeabi_i2f>
 800f138:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800f13a:	6838      	ldr	r0, [r7, #0]
 800f13c:	f7f2 fa48 	bl	80015d0 <__aeabi_i2f>
 800f140:	1c03      	adds	r3, r0, #0
 800f142:	4918      	ldr	r1, [pc, #96]	@ (800f1a4 <sumToIntAverage+0x80>)
 800f144:	1c18      	adds	r0, r3, #0
 800f146:	f7f1 fd45 	bl	8000bd4 <__aeabi_fdiv>
 800f14a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800f14c:	1c19      	adds	r1, r3, #0
 800f14e:	1c20      	adds	r0, r4, #0
 800f150:	f7f1 fbb6 	bl	80008c0 <__aeabi_fadd>
 800f154:	1c03      	adds	r3, r0, #0
 800f156:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800f158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f15a:	f7f2 fa85 	bl	8001668 <__aeabi_ui2f>
 800f15e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800f160:	1c19      	adds	r1, r3, #0
 800f162:	1c20      	adds	r0, r4, #0
 800f164:	f7f1 fd36 	bl	8000bd4 <__aeabi_fdiv>
 800f168:	1c03      	adds	r3, r0, #0
 800f16a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800f16c:	2300      	movs	r3, #0
 800f16e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	2310      	movs	r3, #16
 800f174:	18f9      	adds	r1, r7, r3
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	1c18      	adds	r0, r3, #0
 800f17a:	f7ff ffa1 	bl	800f0c0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2bff      	cmp	r3, #255	@ 0xff
 800f182:	d906      	bls.n	800f192 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	22ff      	movs	r2, #255	@ 0xff
 800f188:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2209      	movs	r2, #9
 800f18e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800f190:	e003      	b.n	800f19a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	b2da      	uxtb	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	701a      	strb	r2, [r3, #0]
}
 800f19a:	46c0      	nop			@ (mov r8, r8)
 800f19c:	46bd      	mov	sp, r7
 800f19e:	b007      	add	sp, #28
 800f1a0:	bd90      	pop	{r4, r7, pc}
 800f1a2:	46c0      	nop			@ (mov r8, r8)
 800f1a4:	41200000 	.word	0x41200000

0800f1a8 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	2280      	movs	r2, #128	@ 0x80
 800f1ba:	0612      	lsls	r2, r2, #24
 800f1bc:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	4a18      	ldr	r2, [pc, #96]	@ (800f224 <findMinMax+0x7c>)
 800f1c2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	617b      	str	r3, [r7, #20]
 800f1c8:	e022      	b.n	800f210 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	18d3      	adds	r3, r2, r3
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	da06      	bge.n	800f1ea <findMinMax+0x42>
        {
            min[0] = array[i];
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	18d3      	adds	r3, r2, r3
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	18d3      	adds	r3, r2, r3
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	dd06      	ble.n	800f20a <findMinMax+0x62>
        {
            max[0] = array[i];
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	18d3      	adds	r3, r2, r3
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	3301      	adds	r3, #1
 800f20e:	617b      	str	r3, [r7, #20]
 800f210:	697a      	ldr	r2, [r7, #20]
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	429a      	cmp	r2, r3
 800f216:	d3d8      	bcc.n	800f1ca <findMinMax+0x22>
        }
    }
}
 800f218:	46c0      	nop			@ (mov r8, r8)
 800f21a:	46c0      	nop			@ (mov r8, r8)
 800f21c:	46bd      	mov	sp, r7
 800f21e:	b006      	add	sp, #24
 800f220:	bd80      	pop	{r7, pc}
 800f222:	46c0      	nop			@ (mov r8, r8)
 800f224:	7fffffff 	.word	0x7fffffff

0800f228 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d302      	bcc.n	800f244 <getPo2factor+0x1c>
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d107      	bne.n	800f254 <getPo2factor+0x2c>
    {
        return 0;
 800f244:	2300      	movs	r3, #0
 800f246:	e00d      	b.n	800f264 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	085b      	lsrs	r3, r3, #1
 800f24c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3301      	adds	r3, #1
 800f252:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d2f5      	bcs.n	800f248 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	3b01      	subs	r3, #1
 800f260:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800f262:	68fb      	ldr	r3, [r7, #12]
}
 800f264:	0018      	movs	r0, r3
 800f266:	46bd      	mov	sp, r7
 800f268:	b004      	add	sp, #16
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b086      	sub	sp, #24
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	f7f2 f9f4 	bl	8001668 <__aeabi_ui2f>
 800f280:	1c03      	adds	r3, r0, #0
 800f282:	1c19      	adds	r1, r3, #0
 800f284:	68b8      	ldr	r0, [r7, #8]
 800f286:	f7f1 fe8b 	bl	8000fa0 <__aeabi_fmul>
 800f28a:	1c03      	adds	r3, r0, #0
 800f28c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800f28e:	2300      	movs	r3, #0
 800f290:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	2310      	movs	r3, #16
 800f296:	18f9      	adds	r1, r7, r3
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	1c18      	adds	r0, r3, #0
 800f29c:	f7ff fee0 	bl	800f060 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	801a      	strh	r2, [r3, #0]
}
 800f2a8:	46c0      	nop			@ (mov r8, r8)
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	b006      	add	sp, #24
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60b8      	str	r0, [r7, #8]
 800f2b8:	60f9      	str	r1, [r7, #12]
 800f2ba:	607a      	str	r2, [r7, #4]
 800f2bc:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800f2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c0:	6a3a      	ldr	r2, [r7, #32]
 800f2c2:	68b8      	ldr	r0, [r7, #8]
 800f2c4:	68f9      	ldr	r1, [r7, #12]
 800f2c6:	f7fa f8d3 	bl	8009470 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800f2ca:	6a3b      	ldr	r3, [r7, #32]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	18d2      	adds	r2, r2, r3
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	18d2      	adds	r2, r2, r3
 800f2d6:	6a3b      	ldr	r3, [r7, #32]
 800f2d8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	681a      	ldr	r2, [r3, #0]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	18d2      	adds	r2, r2, r3
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	18d2      	adds	r2, r2, r3
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800f2ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2ec:	6a3b      	ldr	r3, [r7, #32]
 800f2ee:	0011      	movs	r1, r2
 800f2f0:	0018      	movs	r0, r3
 800f2f2:	f7fa f94d 	bl	8009590 <correctIntFracNumber>
}
 800f2f6:	46c0      	nop			@ (mov r8, r8)
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	b004      	add	sp, #16
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b086      	sub	sp, #24
 800f302:	af00      	add	r7, sp, #0
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800f30e:	2300      	movs	r3, #0
 800f310:	613b      	str	r3, [r7, #16]
 800f312:	e019      	b.n	800f348 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	18d3      	adds	r3, r2, r3
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800f320:	693a      	ldr	r2, [r7, #16]
 800f322:	3201      	adds	r2, #1
 800f324:	0052      	lsls	r2, r2, #1
 800f326:	68f9      	ldr	r1, [r7, #12]
 800f328:	188a      	adds	r2, r1, r2
 800f32a:	8812      	ldrh	r2, [r2, #0]
 800f32c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f32e:	0019      	movs	r1, r3
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800f338:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800f33a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	3301      	adds	r3, #1
 800f340:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	3304      	adds	r3, #4
 800f346:	613b      	str	r3, [r7, #16]
 800f348:	693a      	ldr	r2, [r7, #16]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d3e1      	bcc.n	800f314 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800f350:	46c0      	nop			@ (mov r8, r8)
 800f352:	46c0      	nop			@ (mov r8, r8)
 800f354:	46bd      	mov	sp, r7
 800f356:	b006      	add	sp, #24
 800f358:	bd80      	pop	{r7, pc}
	...

0800f35c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800f35c:	b580      	push	{r7, lr}
 800f35e:	af00      	add	r7, sp, #0
  init = false;
 800f360:	4b02      	ldr	r3, [pc, #8]	@ (800f36c <InitDone+0x10>)
 800f362:	2200      	movs	r2, #0
 800f364:	701a      	strb	r2, [r3, #0]
}
 800f366:	46c0      	nop			@ (mov r8, r8)
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	200000e0 	.word	0x200000e0

0800f370 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800f376:	f7f7 fd99 	bl	8006eac <ReadBatteryVoltage>
 800f37a:	1c02      	adds	r2, r0, #0
 800f37c:	4b25      	ldr	r3, [pc, #148]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f37e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800f380:	4b24      	ldr	r3, [pc, #144]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4924      	ldr	r1, [pc, #144]	@ (800f418 <batteryChargeCheck+0xa8>)
 800f386:	1c18      	adds	r0, r3, #0
 800f388:	f7f1 f8d2 	bl	8000530 <__aeabi_fcmplt>
 800f38c:	1e03      	subs	r3, r0, #0
 800f38e:	d002      	beq.n	800f396 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800f390:	1dfb      	adds	r3, r7, #7
 800f392:	2200      	movs	r2, #0
 800f394:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800f396:	4b1f      	ldr	r3, [pc, #124]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	491f      	ldr	r1, [pc, #124]	@ (800f418 <batteryChargeCheck+0xa8>)
 800f39c:	1c18      	adds	r0, r3, #0
 800f39e:	f7f1 f8e5 	bl	800056c <__aeabi_fcmpge>
 800f3a2:	1e03      	subs	r3, r0, #0
 800f3a4:	d00d      	beq.n	800f3c2 <batteryChargeCheck+0x52>
 800f3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	1c18      	adds	r0, r3, #0
 800f3ac:	f7f4 f85a 	bl	8003464 <__aeabi_f2d>
 800f3b0:	4a1a      	ldr	r2, [pc, #104]	@ (800f41c <batteryChargeCheck+0xac>)
 800f3b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f420 <batteryChargeCheck+0xb0>)
 800f3b4:	f7f1 f882 	bl	80004bc <__aeabi_dcmplt>
 800f3b8:	1e03      	subs	r3, r0, #0
 800f3ba:	d002      	beq.n	800f3c2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800f3bc:	1dfb      	adds	r3, r7, #7
 800f3be:	2201      	movs	r2, #1
 800f3c0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800f3c2:	4b14      	ldr	r3, [pc, #80]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	1c18      	adds	r0, r3, #0
 800f3c8:	f7f4 f84c 	bl	8003464 <__aeabi_f2d>
 800f3cc:	4a13      	ldr	r2, [pc, #76]	@ (800f41c <batteryChargeCheck+0xac>)
 800f3ce:	4b14      	ldr	r3, [pc, #80]	@ (800f420 <batteryChargeCheck+0xb0>)
 800f3d0:	f7f1 f892 	bl	80004f8 <__aeabi_dcmpge>
 800f3d4:	1e03      	subs	r3, r0, #0
 800f3d6:	d00b      	beq.n	800f3f0 <batteryChargeCheck+0x80>
 800f3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	2181      	movs	r1, #129	@ 0x81
 800f3de:	05c9      	lsls	r1, r1, #23
 800f3e0:	1c18      	adds	r0, r3, #0
 800f3e2:	f7f1 f8a5 	bl	8000530 <__aeabi_fcmplt>
 800f3e6:	1e03      	subs	r3, r0, #0
 800f3e8:	d002      	beq.n	800f3f0 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800f3ea:	1dfb      	adds	r3, r7, #7
 800f3ec:	2202      	movs	r2, #2
 800f3ee:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800f3f0:	4b08      	ldr	r3, [pc, #32]	@ (800f414 <batteryChargeCheck+0xa4>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2181      	movs	r1, #129	@ 0x81
 800f3f6:	05c9      	lsls	r1, r1, #23
 800f3f8:	1c18      	adds	r0, r3, #0
 800f3fa:	f7f1 f8b7 	bl	800056c <__aeabi_fcmpge>
 800f3fe:	1e03      	subs	r3, r0, #0
 800f400:	d002      	beq.n	800f408 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800f402:	1dfb      	adds	r3, r7, #7
 800f404:	2203      	movs	r2, #3
 800f406:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800f408:	1dfb      	adds	r3, r7, #7
 800f40a:	781b      	ldrb	r3, [r3, #0]
}
 800f40c:	0018      	movs	r0, r3
 800f40e:	46bd      	mov	sp, r7
 800f410:	b002      	add	sp, #8
 800f412:	bd80      	pop	{r7, pc}
 800f414:	20001de8 	.word	0x20001de8
 800f418:	40600000 	.word	0x40600000
 800f41c:	9999999a 	.word	0x9999999a
 800f420:	400d9999 	.word	0x400d9999

0800f424 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800f424:	b5b0      	push	{r4, r5, r7, lr}
 800f426:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800f428:	f7f7 fda2 	bl	8006f70 <ReadSolarVoltage>
 800f42c:	0003      	movs	r3, r0
 800f42e:	001a      	movs	r2, r3
 800f430:	4b1a      	ldr	r3, [pc, #104]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f432:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800f434:	4b19      	ldr	r3, [pc, #100]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	4a19      	ldr	r2, [pc, #100]	@ (800f4a0 <Calculate_LED_ON+0x7c>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d802      	bhi.n	800f444 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800f43e:	4b17      	ldr	r3, [pc, #92]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f440:	4a18      	ldr	r2, [pc, #96]	@ (800f4a4 <Calculate_LED_ON+0x80>)
 800f442:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800f444:	4b15      	ldr	r3, [pc, #84]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	4a17      	ldr	r2, [pc, #92]	@ (800f4a8 <Calculate_LED_ON+0x84>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	d902      	bls.n	800f454 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800f44e:	4b13      	ldr	r3, [pc, #76]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f450:	4a15      	ldr	r2, [pc, #84]	@ (800f4a8 <Calculate_LED_ON+0x84>)
 800f452:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800f454:	4b11      	ldr	r3, [pc, #68]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	0018      	movs	r0, r3
 800f45a:	f7f3 ffb1 	bl	80033c0 <__aeabi_i2d>
 800f45e:	0004      	movs	r4, r0
 800f460:	000d      	movs	r5, r1
 800f462:	4b0e      	ldr	r3, [pc, #56]	@ (800f49c <Calculate_LED_ON+0x78>)
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	001a      	movs	r2, r3
 800f468:	4b10      	ldr	r3, [pc, #64]	@ (800f4ac <Calculate_LED_ON+0x88>)
 800f46a:	1a9b      	subs	r3, r3, r2
 800f46c:	0018      	movs	r0, r3
 800f46e:	f7f3 ffa7 	bl	80033c0 <__aeabi_i2d>
 800f472:	2200      	movs	r2, #0
 800f474:	4b0e      	ldr	r3, [pc, #56]	@ (800f4b0 <Calculate_LED_ON+0x8c>)
 800f476:	f7f3 f8e1 	bl	800263c <__aeabi_dmul>
 800f47a:	0002      	movs	r2, r0
 800f47c:	000b      	movs	r3, r1
 800f47e:	0020      	movs	r0, r4
 800f480:	0029      	movs	r1, r5
 800f482:	f7f2 f933 	bl	80016ec <__aeabi_dadd>
 800f486:	0002      	movs	r2, r0
 800f488:	000b      	movs	r3, r1
 800f48a:	0010      	movs	r0, r2
 800f48c:	0019      	movs	r1, r3
 800f48e:	f7f1 f8dd 	bl	800064c <__aeabi_d2uiz>
 800f492:	0003      	movs	r3, r0
 800f494:	b29b      	uxth	r3, r3
}
 800f496:	0018      	movs	r0, r3
 800f498:	46bd      	mov	sp, r7
 800f49a:	bdb0      	pop	{r4, r5, r7, pc}
 800f49c:	20001dec 	.word	0x20001dec
 800f4a0:	00000b53 	.word	0x00000b53
 800f4a4:	00000b54 	.word	0x00000b54
 800f4a8:	0000125c 	.word	0x0000125c
 800f4ac:	00000dee 	.word	0x00000dee
 800f4b0:	3ff80000 	.word	0x3ff80000

0800f4b4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800f4b4:	b590      	push	{r4, r7, lr}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	0004      	movs	r4, r0
 800f4bc:	0008      	movs	r0, r1
 800f4be:	0011      	movs	r1, r2
 800f4c0:	1dbb      	adds	r3, r7, #6
 800f4c2:	1c22      	adds	r2, r4, #0
 800f4c4:	801a      	strh	r2, [r3, #0]
 800f4c6:	1d3b      	adds	r3, r7, #4
 800f4c8:	1c02      	adds	r2, r0, #0
 800f4ca:	801a      	strh	r2, [r3, #0]
 800f4cc:	1cbb      	adds	r3, r7, #2
 800f4ce:	1c0a      	adds	r2, r1, #0
 800f4d0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f510 <SetStatusLED+0x5c>)
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d107      	bne.n	800f4ea <SetStatusLED+0x36>
 800f4da:	4b0e      	ldr	r3, [pc, #56]	@ (800f514 <SetStatusLED+0x60>)
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d103      	bne.n	800f4ea <SetStatusLED+0x36>
 800f4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f518 <SetStatusLED+0x64>)
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00e      	beq.n	800f508 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800f4ea:	2380      	movs	r3, #128	@ 0x80
 800f4ec:	05db      	lsls	r3, r3, #23
 800f4ee:	1dba      	adds	r2, r7, #6
 800f4f0:	8812      	ldrh	r2, [r2, #0]
 800f4f2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800f4f4:	2380      	movs	r3, #128	@ 0x80
 800f4f6:	05db      	lsls	r3, r3, #23
 800f4f8:	1d3a      	adds	r2, r7, #4
 800f4fa:	8812      	ldrh	r2, [r2, #0]
 800f4fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800f4fe:	2380      	movs	r3, #128	@ 0x80
 800f500:	05db      	lsls	r3, r3, #23
 800f502:	1cba      	adds	r2, r7, #2
 800f504:	8812      	ldrh	r2, [r2, #0]
 800f506:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f508:	46c0      	nop			@ (mov r8, r8)
 800f50a:	46bd      	mov	sp, r7
 800f50c:	b003      	add	sp, #12
 800f50e:	bd90      	pop	{r4, r7, pc}
 800f510:	20001dd9 	.word	0x20001dd9
 800f514:	200000e0 	.word	0x200000e0
 800f518:	20001dda 	.word	0x20001dda

0800f51c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	0004      	movs	r4, r0
 800f524:	0008      	movs	r0, r1
 800f526:	0011      	movs	r1, r2
 800f528:	1dfb      	adds	r3, r7, #7
 800f52a:	1c22      	adds	r2, r4, #0
 800f52c:	701a      	strb	r2, [r3, #0]
 800f52e:	1dbb      	adds	r3, r7, #6
 800f530:	1c02      	adds	r2, r0, #0
 800f532:	701a      	strb	r2, [r3, #0]
 800f534:	1d7b      	adds	r3, r7, #5
 800f536:	1c0a      	adds	r2, r1, #0
 800f538:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800f53a:	4b19      	ldr	r3, [pc, #100]	@ (800f5a0 <SetDBLED+0x84>)
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d107      	bne.n	800f552 <SetDBLED+0x36>
 800f542:	4b18      	ldr	r3, [pc, #96]	@ (800f5a4 <SetDBLED+0x88>)
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d103      	bne.n	800f552 <SetDBLED+0x36>
 800f54a:	4b17      	ldr	r3, [pc, #92]	@ (800f5a8 <SetDBLED+0x8c>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d022      	beq.n	800f598 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800f552:	1dfb      	adds	r3, r7, #7
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	2201      	movs	r2, #1
 800f558:	4053      	eors	r3, r2
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	001a      	movs	r2, r3
 800f55e:	4b13      	ldr	r3, [pc, #76]	@ (800f5ac <SetDBLED+0x90>)
 800f560:	2101      	movs	r1, #1
 800f562:	0018      	movs	r0, r3
 800f564:	f003 f8eb 	bl	801273e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800f568:	1dbb      	adds	r3, r7, #6
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2201      	movs	r2, #1
 800f56e:	4053      	eors	r3, r2
 800f570:	b2db      	uxtb	r3, r3
 800f572:	001a      	movs	r2, r3
 800f574:	2380      	movs	r3, #128	@ 0x80
 800f576:	005b      	lsls	r3, r3, #1
 800f578:	480c      	ldr	r0, [pc, #48]	@ (800f5ac <SetDBLED+0x90>)
 800f57a:	0019      	movs	r1, r3
 800f57c:	f003 f8df 	bl	801273e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800f580:	1d7b      	adds	r3, r7, #5
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2201      	movs	r2, #1
 800f586:	4053      	eors	r3, r2
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	001a      	movs	r2, r3
 800f58c:	2380      	movs	r3, #128	@ 0x80
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4806      	ldr	r0, [pc, #24]	@ (800f5ac <SetDBLED+0x90>)
 800f592:	0019      	movs	r1, r3
 800f594:	f003 f8d3 	bl	801273e <HAL_GPIO_WritePin>
  }
}
 800f598:	46c0      	nop			@ (mov r8, r8)
 800f59a:	46bd      	mov	sp, r7
 800f59c:	b003      	add	sp, #12
 800f59e:	bd90      	pop	{r4, r7, pc}
 800f5a0:	20001dd9 	.word	0x20001dd9
 800f5a4:	200000e0 	.word	0x200000e0
 800f5a8:	20001dda 	.word	0x20001dda
 800f5ac:	50000400 	.word	0x50000400

0800f5b0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800f5b0:	b590      	push	{r4, r7, lr}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	0004      	movs	r4, r0
 800f5b8:	0008      	movs	r0, r1
 800f5ba:	0011      	movs	r1, r2
 800f5bc:	1dbb      	adds	r3, r7, #6
 800f5be:	1c22      	adds	r2, r4, #0
 800f5c0:	801a      	strh	r2, [r3, #0]
 800f5c2:	1d3b      	adds	r3, r7, #4
 800f5c4:	1c02      	adds	r2, r0, #0
 800f5c6:	801a      	strh	r2, [r3, #0]
 800f5c8:	1cbb      	adds	r3, r7, #2
 800f5ca:	1c0a      	adds	r2, r1, #0
 800f5cc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800f5ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f608 <SetVocLED+0x58>)
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d107      	bne.n	800f5e6 <SetVocLED+0x36>
 800f5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f60c <SetVocLED+0x5c>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d103      	bne.n	800f5e6 <SetVocLED+0x36>
 800f5de:	4b0c      	ldr	r3, [pc, #48]	@ (800f610 <SetVocLED+0x60>)
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00b      	beq.n	800f5fe <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800f5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f614 <SetVocLED+0x64>)
 800f5e8:	1dba      	adds	r2, r7, #6
 800f5ea:	8812      	ldrh	r2, [r2, #0]
 800f5ec:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800f5ee:	4b09      	ldr	r3, [pc, #36]	@ (800f614 <SetVocLED+0x64>)
 800f5f0:	1d3a      	adds	r2, r7, #4
 800f5f2:	8812      	ldrh	r2, [r2, #0]
 800f5f4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800f5f6:	4b07      	ldr	r3, [pc, #28]	@ (800f614 <SetVocLED+0x64>)
 800f5f8:	1cba      	adds	r2, r7, #2
 800f5fa:	8812      	ldrh	r2, [r2, #0]
 800f5fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f5fe:	46c0      	nop			@ (mov r8, r8)
 800f600:	46bd      	mov	sp, r7
 800f602:	b003      	add	sp, #12
 800f604:	bd90      	pop	{r4, r7, pc}
 800f606:	46c0      	nop			@ (mov r8, r8)
 800f608:	20001dd9 	.word	0x20001dd9
 800f60c:	200000e0 	.word	0x200000e0
 800f610:	20001dda 	.word	0x20001dda
 800f614:	40000400 	.word	0x40000400

0800f618 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800f618:	b580      	push	{r7, lr}
 800f61a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f61c:	4b08      	ldr	r3, [pc, #32]	@ (800f640 <SetMeasurementIndicator+0x28>)
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d103      	bne.n	800f62c <SetMeasurementIndicator+0x14>
 800f624:	4b07      	ldr	r3, [pc, #28]	@ (800f644 <SetMeasurementIndicator+0x2c>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d006      	beq.n	800f63a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f62c:	f7ff fefa 	bl	800f424 <Calculate_LED_ON>
 800f630:	0003      	movs	r3, r0
 800f632:	001a      	movs	r2, r3
 800f634:	2380      	movs	r3, #128	@ 0x80
 800f636:	05db      	lsls	r3, r3, #23
 800f638:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f63a:	46c0      	nop			@ (mov r8, r8)
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	20001dd9 	.word	0x20001dd9
 800f644:	20001dda 	.word	0x20001dda

0800f648 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f64c:	4b07      	ldr	r3, [pc, #28]	@ (800f66c <ResetMeasurementIndicator+0x24>)
 800f64e:	781b      	ldrb	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d103      	bne.n	800f65c <ResetMeasurementIndicator+0x14>
 800f654:	4b06      	ldr	r3, [pc, #24]	@ (800f670 <ResetMeasurementIndicator+0x28>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d004      	beq.n	800f666 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800f65c:	2380      	movs	r3, #128	@ 0x80
 800f65e:	05db      	lsls	r3, r3, #23
 800f660:	22fa      	movs	r2, #250	@ 0xfa
 800f662:	0112      	lsls	r2, r2, #4
 800f664:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f666:	46c0      	nop			@ (mov r8, r8)
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	20001dd9 	.word	0x20001dd9
 800f670:	20001dda 	.word	0x20001dda

0800f674 <SetMICIndicator>:
void SetMICIndicator(){
 800f674:	b580      	push	{r7, lr}
 800f676:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f678:	4b19      	ldr	r3, [pc, #100]	@ (800f6e0 <SetMICIndicator+0x6c>)
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d103      	bne.n	800f688 <SetMICIndicator+0x14>
 800f680:	4b18      	ldr	r3, [pc, #96]	@ (800f6e4 <SetMICIndicator+0x70>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d007      	beq.n	800f698 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f688:	f7ff fecc 	bl	800f424 <Calculate_LED_ON>
 800f68c:	0003      	movs	r3, r0
 800f68e:	001a      	movs	r2, r3
 800f690:	2380      	movs	r3, #128	@ 0x80
 800f692:	05db      	lsls	r3, r3, #23
 800f694:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800f696:	e01f      	b.n	800f6d8 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800f698:	4b13      	ldr	r3, [pc, #76]	@ (800f6e8 <SetMICIndicator+0x74>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	1c18      	adds	r0, r3, #0
 800f69e:	f7f3 fee1 	bl	8003464 <__aeabi_f2d>
 800f6a2:	4a12      	ldr	r2, [pc, #72]	@ (800f6ec <SetMICIndicator+0x78>)
 800f6a4:	4b12      	ldr	r3, [pc, #72]	@ (800f6f0 <SetMICIndicator+0x7c>)
 800f6a6:	f7f0 ff1d 	bl	80004e4 <__aeabi_dcmpgt>
 800f6aa:	1e03      	subs	r3, r0, #0
 800f6ac:	d00a      	beq.n	800f6c4 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800f6ae:	f7ff feb9 	bl	800f424 <Calculate_LED_ON>
 800f6b2:	0003      	movs	r3, r0
 800f6b4:	001a      	movs	r2, r3
 800f6b6:	2380      	movs	r3, #128	@ 0x80
 800f6b8:	05db      	lsls	r3, r3, #23
 800f6ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800f6bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f4 <SetMICIndicator+0x80>)
 800f6be:	2202      	movs	r2, #2
 800f6c0:	701a      	strb	r2, [r3, #0]
}
 800f6c2:	e009      	b.n	800f6d8 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800f6c4:	f7ff feae 	bl	800f424 <Calculate_LED_ON>
 800f6c8:	0003      	movs	r3, r0
 800f6ca:	001a      	movs	r2, r3
 800f6cc:	2380      	movs	r3, #128	@ 0x80
 800f6ce:	05db      	lsls	r3, r3, #23
 800f6d0:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800f6d2:	4b08      	ldr	r3, [pc, #32]	@ (800f6f4 <SetMICIndicator+0x80>)
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	701a      	strb	r2, [r3, #0]
}
 800f6d8:	46c0      	nop			@ (mov r8, r8)
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	46c0      	nop			@ (mov r8, r8)
 800f6e0:	20001dd9 	.word	0x20001dd9
 800f6e4:	20001dda 	.word	0x20001dda
 800f6e8:	20001de8 	.word	0x20001de8
 800f6ec:	9999999a 	.word	0x9999999a
 800f6f0:	400d9999 	.word	0x400d9999
 800f6f4:	20001ddc 	.word	0x20001ddc

0800f6f8 <ResetMICIndicator>:
void ResetMICIndicator(){
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f73c <ResetMICIndicator+0x44>)
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d103      	bne.n	800f70c <ResetMICIndicator+0x14>
 800f704:	4b0e      	ldr	r3, [pc, #56]	@ (800f740 <ResetMICIndicator+0x48>)
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d005      	beq.n	800f718 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800f70c:	2380      	movs	r3, #128	@ 0x80
 800f70e:	05db      	lsls	r3, r3, #23
 800f710:	22fa      	movs	r2, #250	@ 0xfa
 800f712:	0112      	lsls	r2, r2, #4
 800f714:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800f716:	e00e      	b.n	800f736 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800f718:	4b0a      	ldr	r3, [pc, #40]	@ (800f744 <ResetMICIndicator+0x4c>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d105      	bne.n	800f72c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800f720:	2380      	movs	r3, #128	@ 0x80
 800f722:	05db      	lsls	r3, r3, #23
 800f724:	22fa      	movs	r2, #250	@ 0xfa
 800f726:	0112      	lsls	r2, r2, #4
 800f728:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800f72a:	e004      	b.n	800f736 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800f72c:	2380      	movs	r3, #128	@ 0x80
 800f72e:	05db      	lsls	r3, r3, #23
 800f730:	22fa      	movs	r2, #250	@ 0xfa
 800f732:	0112      	lsls	r2, r2, #4
 800f734:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800f736:	46c0      	nop			@ (mov r8, r8)
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	20001dd9 	.word	0x20001dd9
 800f740:	20001dda 	.word	0x20001dda
 800f744:	20001ddc 	.word	0x20001ddc

0800f748 <SetESPIndicator>:
void SetESPIndicator(){
 800f748:	b580      	push	{r7, lr}
 800f74a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f74c:	4b08      	ldr	r3, [pc, #32]	@ (800f770 <SetESPIndicator+0x28>)
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d103      	bne.n	800f75c <SetESPIndicator+0x14>
 800f754:	4b07      	ldr	r3, [pc, #28]	@ (800f774 <SetESPIndicator+0x2c>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d006      	beq.n	800f76a <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f75c:	f7ff fe62 	bl	800f424 <Calculate_LED_ON>
 800f760:	0003      	movs	r3, r0
 800f762:	001a      	movs	r2, r3
 800f764:	2380      	movs	r3, #128	@ 0x80
 800f766:	05db      	lsls	r3, r3, #23
 800f768:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f76a:	46c0      	nop			@ (mov r8, r8)
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	20001dd9 	.word	0x20001dd9
 800f774:	20001dda 	.word	0x20001dda

0800f778 <ResetESPIndicator>:
void ResetESPIndicator(){
 800f778:	b580      	push	{r7, lr}
 800f77a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f77c:	4b07      	ldr	r3, [pc, #28]	@ (800f79c <ResetESPIndicator+0x24>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d103      	bne.n	800f78c <ResetESPIndicator+0x14>
 800f784:	4b06      	ldr	r3, [pc, #24]	@ (800f7a0 <ResetESPIndicator+0x28>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d004      	beq.n	800f796 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800f78c:	2380      	movs	r3, #128	@ 0x80
 800f78e:	05db      	lsls	r3, r3, #23
 800f790:	22fa      	movs	r2, #250	@ 0xfa
 800f792:	0112      	lsls	r2, r2, #4
 800f794:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800f796:	46c0      	nop			@ (mov r8, r8)
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	20001dd9 	.word	0x20001dd9
 800f7a0:	20001dda 	.word	0x20001dda

0800f7a4 <SetPMIndicator>:

void SetPMIndicator() {
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f7a8:	4b0f      	ldr	r3, [pc, #60]	@ (800f7e8 <SetPMIndicator+0x44>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d103      	bne.n	800f7b8 <SetPMIndicator+0x14>
 800f7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800f7ec <SetPMIndicator+0x48>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d014      	beq.n	800f7e2 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800f7b8:	f7ff fe34 	bl	800f424 <Calculate_LED_ON>
 800f7bc:	0003      	movs	r3, r0
 800f7be:	001a      	movs	r2, r3
 800f7c0:	2380      	movs	r3, #128	@ 0x80
 800f7c2:	05db      	lsls	r3, r3, #23
 800f7c4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800f7c6:	f7ff fe2d 	bl	800f424 <Calculate_LED_ON>
 800f7ca:	0003      	movs	r3, r0
 800f7cc:	001a      	movs	r2, r3
 800f7ce:	2380      	movs	r3, #128	@ 0x80
 800f7d0:	05db      	lsls	r3, r3, #23
 800f7d2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800f7d4:	f7ff fe26 	bl	800f424 <Calculate_LED_ON>
 800f7d8:	0003      	movs	r3, r0
 800f7da:	001a      	movs	r2, r3
 800f7dc:	2380      	movs	r3, #128	@ 0x80
 800f7de:	05db      	lsls	r3, r3, #23
 800f7e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f7e2:	46c0      	nop			@ (mov r8, r8)
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	20001dd9 	.word	0x20001dd9
 800f7ec:	20001dda 	.word	0x20001dda

0800f7f0 <ResetPMIndicator>:

void ResetPMIndicator() {
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800f7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f828 <ResetPMIndicator+0x38>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d103      	bne.n	800f804 <ResetPMIndicator+0x14>
 800f7fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f82c <ResetPMIndicator+0x3c>)
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00e      	beq.n	800f822 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800f804:	2380      	movs	r3, #128	@ 0x80
 800f806:	05db      	lsls	r3, r3, #23
 800f808:	22fa      	movs	r2, #250	@ 0xfa
 800f80a:	0112      	lsls	r2, r2, #4
 800f80c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800f80e:	2380      	movs	r3, #128	@ 0x80
 800f810:	05db      	lsls	r3, r3, #23
 800f812:	22fa      	movs	r2, #250	@ 0xfa
 800f814:	0112      	lsls	r2, r2, #4
 800f816:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800f818:	2380      	movs	r3, #128	@ 0x80
 800f81a:	05db      	lsls	r3, r3, #23
 800f81c:	22fa      	movs	r2, #250	@ 0xfa
 800f81e:	0112      	lsls	r2, r2, #4
 800f820:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800f822:	46c0      	nop			@ (mov r8, r8)
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	20001dd9 	.word	0x20001dd9
 800f82c:	20001dda 	.word	0x20001dda

0800f830 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800f830:	b580      	push	{r7, lr}
 800f832:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800f834:	23fa      	movs	r3, #250	@ 0xfa
 800f836:	011a      	lsls	r2, r3, #4
 800f838:	23fa      	movs	r3, #250	@ 0xfa
 800f83a:	0119      	lsls	r1, r3, #4
 800f83c:	23fa      	movs	r3, #250	@ 0xfa
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	0018      	movs	r0, r3
 800f842:	f7ff fe37 	bl	800f4b4 <SetStatusLED>
  SetDBLED(false,false,false);
 800f846:	2200      	movs	r2, #0
 800f848:	2100      	movs	r1, #0
 800f84a:	2000      	movs	r0, #0
 800f84c:	f7ff fe66 	bl	800f51c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800f850:	23fa      	movs	r3, #250	@ 0xfa
 800f852:	011a      	lsls	r2, r3, #4
 800f854:	23fa      	movs	r3, #250	@ 0xfa
 800f856:	0119      	lsls	r1, r3, #4
 800f858:	23fa      	movs	r3, #250	@ 0xfa
 800f85a:	011b      	lsls	r3, r3, #4
 800f85c:	0018      	movs	r0, r3
 800f85e:	f7ff fea7 	bl	800f5b0 <SetVocLED>
return;
 800f862:	46c0      	nop			@ (mov r8, r8)
}
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <SetAllREDLED>:

void SetAllREDLED() {
 800f868:	b580      	push	{r7, lr}
 800f86a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 800f86c:	2380      	movs	r3, #128	@ 0x80
 800f86e:	05db      	lsls	r3, r3, #23
 800f870:	4a19      	ldr	r2, [pc, #100]	@ (800f8d8 <SetAllREDLED+0x70>)
 800f872:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 800f874:	2380      	movs	r3, #128	@ 0x80
 800f876:	05db      	lsls	r3, r3, #23
 800f878:	22fa      	movs	r2, #250	@ 0xfa
 800f87a:	0112      	lsls	r2, r2, #4
 800f87c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 800f87e:	2380      	movs	r3, #128	@ 0x80
 800f880:	05db      	lsls	r3, r3, #23
 800f882:	22fa      	movs	r2, #250	@ 0xfa
 800f884:	0112      	lsls	r2, r2, #4
 800f886:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 800f888:	4b14      	ldr	r3, [pc, #80]	@ (800f8dc <SetAllREDLED+0x74>)
 800f88a:	4a13      	ldr	r2, [pc, #76]	@ (800f8d8 <SetAllREDLED+0x70>)
 800f88c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 800f88e:	4b13      	ldr	r3, [pc, #76]	@ (800f8dc <SetAllREDLED+0x74>)
 800f890:	22fa      	movs	r2, #250	@ 0xfa
 800f892:	0112      	lsls	r2, r2, #4
 800f894:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 800f896:	4b11      	ldr	r3, [pc, #68]	@ (800f8dc <SetAllREDLED+0x74>)
 800f898:	22fa      	movs	r2, #250	@ 0xfa
 800f89a:	0112      	lsls	r2, r2, #4
 800f89c:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 800f89e:	4b10      	ldr	r3, [pc, #64]	@ (800f8e0 <SetAllREDLED+0x78>)
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	0018      	movs	r0, r3
 800f8a6:	f002 ff4a 	bl	801273e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 800f8aa:	2380      	movs	r3, #128	@ 0x80
 800f8ac:	005b      	lsls	r3, r3, #1
 800f8ae:	480c      	ldr	r0, [pc, #48]	@ (800f8e0 <SetAllREDLED+0x78>)
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	0019      	movs	r1, r3
 800f8b4:	f002 ff43 	bl	801273e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 800f8b8:	2380      	movs	r3, #128	@ 0x80
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4808      	ldr	r0, [pc, #32]	@ (800f8e0 <SetAllREDLED+0x78>)
 800f8be:	2201      	movs	r2, #1
 800f8c0:	0019      	movs	r1, r3
 800f8c2:	f002 ff3c 	bl	801273e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800f8c6:	23fa      	movs	r3, #250	@ 0xfa
 800f8c8:	009b      	lsls	r3, r3, #2
 800f8ca:	0018      	movs	r0, r3
 800f8cc:	f001 fcb0 	bl	8011230 <HAL_Delay>
}
 800f8d0:	46c0      	nop			@ (mov r8, r8)
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	46c0      	nop			@ (mov r8, r8)
 800f8d8:	00000bb8 	.word	0x00000bb8
 800f8dc:	40000400 	.word	0x40000400
 800f8e0:	50000400 	.word	0x50000400

0800f8e4 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800f8e4:	b5b0      	push	{r4, r5, r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	0002      	movs	r2, r0
 800f8ec:	1dbb      	adds	r3, r7, #6
 800f8ee:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800f8f0:	1dbb      	adds	r3, r7, #6
 800f8f2:	881b      	ldrh	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d05a      	beq.n	800f9ae <SetVOCindicator+0xca>
 800f8f8:	1dbb      	adds	r3, r7, #6
 800f8fa:	881b      	ldrh	r3, [r3, #0]
 800f8fc:	2b64      	cmp	r3, #100	@ 0x64
 800f8fe:	d856      	bhi.n	800f9ae <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800f900:	1dbb      	adds	r3, r7, #6
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	0018      	movs	r0, r3
 800f906:	f7f3 fd5b 	bl	80033c0 <__aeabi_i2d>
 800f90a:	2200      	movs	r2, #0
 800f90c:	4b5f      	ldr	r3, [pc, #380]	@ (800fa8c <SetVOCindicator+0x1a8>)
 800f90e:	f7f2 fa51 	bl	8001db4 <__aeabi_ddiv>
 800f912:	0002      	movs	r2, r0
 800f914:	000b      	movs	r3, r1
 800f916:	2000      	movs	r0, #0
 800f918:	495d      	ldr	r1, [pc, #372]	@ (800fa90 <SetVOCindicator+0x1ac>)
 800f91a:	f7f3 f957 	bl	8002bcc <__aeabi_dsub>
 800f91e:	0002      	movs	r2, r0
 800f920:	000b      	movs	r3, r1
 800f922:	0014      	movs	r4, r2
 800f924:	001d      	movs	r5, r3
 800f926:	4b5b      	ldr	r3, [pc, #364]	@ (800fa94 <SetVOCindicator+0x1b0>)
 800f928:	881b      	ldrh	r3, [r3, #0]
 800f92a:	0018      	movs	r0, r3
 800f92c:	f7f3 fd48 	bl	80033c0 <__aeabi_i2d>
 800f930:	0002      	movs	r2, r0
 800f932:	000b      	movs	r3, r1
 800f934:	0020      	movs	r0, r4
 800f936:	0029      	movs	r1, r5
 800f938:	f7f2 fe80 	bl	800263c <__aeabi_dmul>
 800f93c:	0002      	movs	r2, r0
 800f93e:	000b      	movs	r3, r1
 800f940:	0010      	movs	r0, r2
 800f942:	0019      	movs	r1, r3
 800f944:	f7f0 fe82 	bl	800064c <__aeabi_d2uiz>
 800f948:	0003      	movs	r3, r0
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	4b52      	ldr	r3, [pc, #328]	@ (800fa98 <SetVOCindicator+0x1b4>)
 800f94e:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800f950:	1dbb      	adds	r3, r7, #6
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	0018      	movs	r0, r3
 800f956:	f7f3 fd33 	bl	80033c0 <__aeabi_i2d>
 800f95a:	2200      	movs	r2, #0
 800f95c:	4b4b      	ldr	r3, [pc, #300]	@ (800fa8c <SetVOCindicator+0x1a8>)
 800f95e:	f7f2 fa29 	bl	8001db4 <__aeabi_ddiv>
 800f962:	0002      	movs	r2, r0
 800f964:	000b      	movs	r3, r1
 800f966:	0014      	movs	r4, r2
 800f968:	001d      	movs	r5, r3
 800f96a:	4b4a      	ldr	r3, [pc, #296]	@ (800fa94 <SetVOCindicator+0x1b0>)
 800f96c:	881b      	ldrh	r3, [r3, #0]
 800f96e:	0018      	movs	r0, r3
 800f970:	f7f3 fd26 	bl	80033c0 <__aeabi_i2d>
 800f974:	0002      	movs	r2, r0
 800f976:	000b      	movs	r3, r1
 800f978:	0020      	movs	r0, r4
 800f97a:	0029      	movs	r1, r5
 800f97c:	f7f2 fe5e 	bl	800263c <__aeabi_dmul>
 800f980:	0002      	movs	r2, r0
 800f982:	000b      	movs	r3, r1
 800f984:	0010      	movs	r0, r2
 800f986:	0019      	movs	r1, r3
 800f988:	f7f0 fe60 	bl	800064c <__aeabi_d2uiz>
 800f98c:	0003      	movs	r3, r0
 800f98e:	b29a      	uxth	r2, r3
 800f990:	4b42      	ldr	r3, [pc, #264]	@ (800fa9c <SetVOCindicator+0x1b8>)
 800f992:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800f994:	4b3f      	ldr	r3, [pc, #252]	@ (800fa94 <SetVOCindicator+0x1b0>)
 800f996:	881a      	ldrh	r2, [r3, #0]
 800f998:	4b41      	ldr	r3, [pc, #260]	@ (800faa0 <SetVOCindicator+0x1bc>)
 800f99a:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800f99c:	4b40      	ldr	r3, [pc, #256]	@ (800faa0 <SetVOCindicator+0x1bc>)
 800f99e:	8818      	ldrh	r0, [r3, #0]
 800f9a0:	4b3d      	ldr	r3, [pc, #244]	@ (800fa98 <SetVOCindicator+0x1b4>)
 800f9a2:	8819      	ldrh	r1, [r3, #0]
 800f9a4:	4b3d      	ldr	r3, [pc, #244]	@ (800fa9c <SetVOCindicator+0x1b8>)
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	001a      	movs	r2, r3
 800f9aa:	f7ff fe01 	bl	800f5b0 <SetVocLED>
  }
  if(VOCi > 100){
 800f9ae:	1dbb      	adds	r3, r7, #6
 800f9b0:	881b      	ldrh	r3, [r3, #0]
 800f9b2:	2b64      	cmp	r3, #100	@ 0x64
 800f9b4:	d966      	bls.n	800fa84 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800f9b6:	1dbb      	adds	r3, r7, #6
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	f7f3 fd00 	bl	80033c0 <__aeabi_i2d>
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	4b32      	ldr	r3, [pc, #200]	@ (800fa8c <SetVOCindicator+0x1a8>)
 800f9c4:	f7f3 f902 	bl	8002bcc <__aeabi_dsub>
 800f9c8:	0002      	movs	r2, r0
 800f9ca:	000b      	movs	r3, r1
 800f9cc:	0010      	movs	r0, r2
 800f9ce:	0019      	movs	r1, r3
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	4b34      	ldr	r3, [pc, #208]	@ (800faa4 <SetVOCindicator+0x1c0>)
 800f9d4:	f7f2 f9ee 	bl	8001db4 <__aeabi_ddiv>
 800f9d8:	0002      	movs	r2, r0
 800f9da:	000b      	movs	r3, r1
 800f9dc:	0014      	movs	r4, r2
 800f9de:	001d      	movs	r5, r3
 800f9e0:	4b2c      	ldr	r3, [pc, #176]	@ (800fa94 <SetVOCindicator+0x1b0>)
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	0018      	movs	r0, r3
 800f9e6:	f7f3 fceb 	bl	80033c0 <__aeabi_i2d>
 800f9ea:	0002      	movs	r2, r0
 800f9ec:	000b      	movs	r3, r1
 800f9ee:	0020      	movs	r0, r4
 800f9f0:	0029      	movs	r1, r5
 800f9f2:	f7f2 fe23 	bl	800263c <__aeabi_dmul>
 800f9f6:	0002      	movs	r2, r0
 800f9f8:	000b      	movs	r3, r1
 800f9fa:	0010      	movs	r0, r2
 800f9fc:	0019      	movs	r1, r3
 800f9fe:	f7f0 fe25 	bl	800064c <__aeabi_d2uiz>
 800fa02:	0003      	movs	r3, r0
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	4b24      	ldr	r3, [pc, #144]	@ (800fa98 <SetVOCindicator+0x1b4>)
 800fa08:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800fa0a:	1dbb      	adds	r3, r7, #6
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	0018      	movs	r0, r3
 800fa10:	f7f3 fcd6 	bl	80033c0 <__aeabi_i2d>
 800fa14:	2200      	movs	r2, #0
 800fa16:	4b1d      	ldr	r3, [pc, #116]	@ (800fa8c <SetVOCindicator+0x1a8>)
 800fa18:	f7f3 f8d8 	bl	8002bcc <__aeabi_dsub>
 800fa1c:	0002      	movs	r2, r0
 800fa1e:	000b      	movs	r3, r1
 800fa20:	0010      	movs	r0, r2
 800fa22:	0019      	movs	r1, r3
 800fa24:	2200      	movs	r2, #0
 800fa26:	4b1f      	ldr	r3, [pc, #124]	@ (800faa4 <SetVOCindicator+0x1c0>)
 800fa28:	f7f2 f9c4 	bl	8001db4 <__aeabi_ddiv>
 800fa2c:	0002      	movs	r2, r0
 800fa2e:	000b      	movs	r3, r1
 800fa30:	2000      	movs	r0, #0
 800fa32:	4917      	ldr	r1, [pc, #92]	@ (800fa90 <SetVOCindicator+0x1ac>)
 800fa34:	f7f3 f8ca 	bl	8002bcc <__aeabi_dsub>
 800fa38:	0002      	movs	r2, r0
 800fa3a:	000b      	movs	r3, r1
 800fa3c:	0014      	movs	r4, r2
 800fa3e:	001d      	movs	r5, r3
 800fa40:	4b14      	ldr	r3, [pc, #80]	@ (800fa94 <SetVOCindicator+0x1b0>)
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	0018      	movs	r0, r3
 800fa46:	f7f3 fcbb 	bl	80033c0 <__aeabi_i2d>
 800fa4a:	0002      	movs	r2, r0
 800fa4c:	000b      	movs	r3, r1
 800fa4e:	0020      	movs	r0, r4
 800fa50:	0029      	movs	r1, r5
 800fa52:	f7f2 fdf3 	bl	800263c <__aeabi_dmul>
 800fa56:	0002      	movs	r2, r0
 800fa58:	000b      	movs	r3, r1
 800fa5a:	0010      	movs	r0, r2
 800fa5c:	0019      	movs	r1, r3
 800fa5e:	f7f0 fdf5 	bl	800064c <__aeabi_d2uiz>
 800fa62:	0003      	movs	r3, r0
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	4b0e      	ldr	r3, [pc, #56]	@ (800faa0 <SetVOCindicator+0x1bc>)
 800fa68:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800fa6a:	4b0a      	ldr	r3, [pc, #40]	@ (800fa94 <SetVOCindicator+0x1b0>)
 800fa6c:	881a      	ldrh	r2, [r3, #0]
 800fa6e:	4b0b      	ldr	r3, [pc, #44]	@ (800fa9c <SetVOCindicator+0x1b8>)
 800fa70:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800fa72:	4b0b      	ldr	r3, [pc, #44]	@ (800faa0 <SetVOCindicator+0x1bc>)
 800fa74:	8818      	ldrh	r0, [r3, #0]
 800fa76:	4b08      	ldr	r3, [pc, #32]	@ (800fa98 <SetVOCindicator+0x1b4>)
 800fa78:	8819      	ldrh	r1, [r3, #0]
 800fa7a:	4b08      	ldr	r3, [pc, #32]	@ (800fa9c <SetVOCindicator+0x1b8>)
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	001a      	movs	r2, r3
 800fa80:	f7ff fd96 	bl	800f5b0 <SetVocLED>
  }

}
 800fa84:	46c0      	nop			@ (mov r8, r8)
 800fa86:	46bd      	mov	sp, r7
 800fa88:	b002      	add	sp, #8
 800fa8a:	bdb0      	pop	{r4, r5, r7, pc}
 800fa8c:	40590000 	.word	0x40590000
 800fa90:	3ff00000 	.word	0x3ff00000
 800fa94:	200000e2 	.word	0x200000e2
 800fa98:	20001dee 	.word	0x20001dee
 800fa9c:	20001df0 	.word	0x20001df0
 800faa0:	20001df2 	.word	0x20001df2
 800faa4:	40790000 	.word	0x40790000

0800faa8 <powerCheck>:

Battery_Status powerCheck(){
 800faa8:	b590      	push	{r4, r7, lr}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800faae:	f7f7 fab3 	bl	8007018 <Check_USB_PowerOn>
 800fab2:	0003      	movs	r3, r0
 800fab4:	001a      	movs	r2, r3
 800fab6:	2301      	movs	r3, #1
 800fab8:	4053      	eors	r3, r2
 800faba:	b2db      	uxtb	r3, r3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d005      	beq.n	800facc <powerCheck+0x24>
    status = batteryChargeCheck();
 800fac0:	1dfc      	adds	r4, r7, #7
 800fac2:	f7ff fc55 	bl	800f370 <batteryChargeCheck>
 800fac6:	0003      	movs	r3, r0
 800fac8:	7023      	strb	r3, [r4, #0]
 800faca:	e002      	b.n	800fad2 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800facc:	1dfb      	adds	r3, r7, #7
 800face:	2204      	movs	r2, #4
 800fad0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800fad2:	1dfb      	adds	r3, r7, #7
 800fad4:	781b      	ldrb	r3, [r3, #0]
}
 800fad6:	0018      	movs	r0, r3
 800fad8:	46bd      	mov	sp, r7
 800fada:	b003      	add	sp, #12
 800fadc:	bd90      	pop	{r4, r7, pc}
	...

0800fae0 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	0002      	movs	r2, r0
 800fae8:	1dfb      	adds	r3, r7, #7
 800faea:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800faec:	1dfb      	adds	r3, r7, #7
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b04      	cmp	r3, #4
 800faf2:	d105      	bne.n	800fb00 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800faf4:	4a18      	ldr	r2, [pc, #96]	@ (800fb58 <powerDisplay+0x78>)
 800faf6:	4b19      	ldr	r3, [pc, #100]	@ (800fb5c <powerDisplay+0x7c>)
 800faf8:	0019      	movs	r1, r3
 800fafa:	2003      	movs	r0, #3
 800fafc:	f000 ff42 	bl	8010984 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800fb00:	1dfb      	adds	r3, r7, #7
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b03      	cmp	r3, #3
 800fb06:	d105      	bne.n	800fb14 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800fb08:	4a15      	ldr	r2, [pc, #84]	@ (800fb60 <powerDisplay+0x80>)
 800fb0a:	4b14      	ldr	r3, [pc, #80]	@ (800fb5c <powerDisplay+0x7c>)
 800fb0c:	0019      	movs	r1, r3
 800fb0e:	2003      	movs	r0, #3
 800fb10:	f000 ff38 	bl	8010984 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800fb14:	1dfb      	adds	r3, r7, #7
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	2b02      	cmp	r3, #2
 800fb1a:	d105      	bne.n	800fb28 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800fb1c:	4a11      	ldr	r2, [pc, #68]	@ (800fb64 <powerDisplay+0x84>)
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb5c <powerDisplay+0x7c>)
 800fb20:	0019      	movs	r1, r3
 800fb22:	2003      	movs	r0, #3
 800fb24:	f000 ff2e 	bl	8010984 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800fb28:	1dfb      	adds	r3, r7, #7
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d105      	bne.n	800fb3c <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800fb30:	4a0d      	ldr	r2, [pc, #52]	@ (800fb68 <powerDisplay+0x88>)
 800fb32:	4b0a      	ldr	r3, [pc, #40]	@ (800fb5c <powerDisplay+0x7c>)
 800fb34:	0019      	movs	r1, r3
 800fb36:	2003      	movs	r0, #3
 800fb38:	f000 ff24 	bl	8010984 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800fb3c:	1dfb      	adds	r3, r7, #7
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d105      	bne.n	800fb50 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800fb44:	4a09      	ldr	r2, [pc, #36]	@ (800fb6c <powerDisplay+0x8c>)
 800fb46:	4b05      	ldr	r3, [pc, #20]	@ (800fb5c <powerDisplay+0x7c>)
 800fb48:	0019      	movs	r1, r3
 800fb4a:	2003      	movs	r0, #3
 800fb4c:	f000 ff1a 	bl	8010984 <CreateLine>
  }
}
 800fb50:	46c0      	nop			@ (mov r8, r8)
 800fb52:	46bd      	mov	sp, r7
 800fb54:	b002      	add	sp, #8
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	080288f8 	.word	0x080288f8
 800fb5c:	0802891c 	.word	0x0802891c
 800fb60:	08028920 	.word	0x08028920
 800fb64:	08028938 	.word	0x08028938
 800fb68:	08028958 	.word	0x08028958
 800fb6c:	08028970 	.word	0x08028970

0800fb70 <configCheck>:

void configCheck(){
 800fb70:	b590      	push	{r4, r7, lr}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800fb76:	f7f7 fa5e 	bl	8007036 <BootButton_Pressed>
 800fb7a:	1e03      	subs	r3, r0, #0
 800fb7c:	d007      	beq.n	800fb8e <configCheck+0x1e>
 800fb7e:	f7f7 fa6b 	bl	8007058 <UserButton_Pressed>
 800fb82:	1e03      	subs	r3, r0, #0
 800fb84:	d003      	beq.n	800fb8e <configCheck+0x1e>
    configSet = true;
 800fb86:	4bb2      	ldr	r3, [pc, #712]	@ (800fe50 <configCheck+0x2e0>)
 800fb88:	2201      	movs	r2, #1
 800fb8a:	701a      	strb	r2, [r3, #0]
 800fb8c:	e00a      	b.n	800fba4 <configCheck+0x34>
  }
  else{
    configSet = false;
 800fb8e:	4bb0      	ldr	r3, [pc, #704]	@ (800fe50 <configCheck+0x2e0>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800fb94:	f001 fb42 	bl	801121c <HAL_GetTick>
 800fb98:	0003      	movs	r3, r0
 800fb9a:	22fa      	movs	r2, #250	@ 0xfa
 800fb9c:	00d2      	lsls	r2, r2, #3
 800fb9e:	189a      	adds	r2, r3, r2
 800fba0:	4bac      	ldr	r3, [pc, #688]	@ (800fe54 <configCheck+0x2e4>)
 800fba2:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800fba4:	4baa      	ldr	r3, [pc, #680]	@ (800fe50 <configCheck+0x2e0>)
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d00d      	beq.n	800fbc8 <configCheck+0x58>
 800fbac:	4ba9      	ldr	r3, [pc, #676]	@ (800fe54 <configCheck+0x2e4>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	0018      	movs	r0, r3
 800fbb2:	f000 fe91 	bl	80108d8 <TimestampIsReached>
 800fbb6:	1e03      	subs	r3, r0, #0
 800fbb8:	d006      	beq.n	800fbc8 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800fbba:	f7f3 fedd 	bl	8003978 <SetConfigMode>
    SetDBLED(true, true, true);
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	2101      	movs	r1, #1
 800fbc2:	2001      	movs	r0, #1
 800fbc4:	f7ff fcaa 	bl	800f51c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800fbc8:	f7f7 fa35 	bl	8007036 <BootButton_Pressed>
 800fbcc:	0003      	movs	r3, r0
 800fbce:	001a      	movs	r2, r3
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	4053      	eors	r3, r2
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d054      	beq.n	800fc84 <configCheck+0x114>
 800fbda:	f7f7 fa3d 	bl	8007058 <UserButton_Pressed>
 800fbde:	1e03      	subs	r3, r0, #0
 800fbe0:	d050      	beq.n	800fc84 <configCheck+0x114>
 800fbe2:	4b9d      	ldr	r3, [pc, #628]	@ (800fe58 <configCheck+0x2e8>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	4053      	eors	r3, r2
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d049      	beq.n	800fc84 <configCheck+0x114>
 800fbf0:	f7f3 fee2 	bl	80039b8 <GetReconfigMode>
 800fbf4:	0003      	movs	r3, r0
 800fbf6:	001a      	movs	r2, r3
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	4053      	eors	r3, r2
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d040      	beq.n	800fc84 <configCheck+0x114>
    SetLEDsOff();
 800fc02:	f7ff fe15 	bl	800f830 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800fc06:	4a95      	ldr	r2, [pc, #596]	@ (800fe5c <configCheck+0x2ec>)
 800fc08:	4994      	ldr	r1, [pc, #592]	@ (800fe5c <configCheck+0x2ec>)
 800fc0a:	4b94      	ldr	r3, [pc, #592]	@ (800fe5c <configCheck+0x2ec>)
 800fc0c:	0018      	movs	r0, r3
 800fc0e:	f7ff fccf 	bl	800f5b0 <SetVocLED>
    HAL_Delay(1500);
 800fc12:	4b93      	ldr	r3, [pc, #588]	@ (800fe60 <configCheck+0x2f0>)
 800fc14:	0018      	movs	r0, r3
 800fc16:	f001 fb0b 	bl	8011230 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800fc1a:	23fa      	movs	r3, #250	@ 0xfa
 800fc1c:	011a      	lsls	r2, r3, #4
 800fc1e:	23fa      	movs	r3, #250	@ 0xfa
 800fc20:	0119      	lsls	r1, r3, #4
 800fc22:	23fa      	movs	r3, #250	@ 0xfa
 800fc24:	011b      	lsls	r3, r3, #4
 800fc26:	0018      	movs	r0, r3
 800fc28:	f7ff fcc2 	bl	800f5b0 <SetVocLED>
    userToggle = !userToggle;
 800fc2c:	4b8d      	ldr	r3, [pc, #564]	@ (800fe64 <configCheck+0x2f4>)
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	1e5a      	subs	r2, r3, #1
 800fc32:	4193      	sbcs	r3, r2
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2201      	movs	r2, #1
 800fc38:	4053      	eors	r3, r2
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	1c1a      	adds	r2, r3, #0
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4013      	ands	r3, r2
 800fc42:	b2da      	uxtb	r2, r3
 800fc44:	4b87      	ldr	r3, [pc, #540]	@ (800fe64 <configCheck+0x2f4>)
 800fc46:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800fc48:	4b86      	ldr	r3, [pc, #536]	@ (800fe64 <configCheck+0x2f4>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d001      	beq.n	800fc54 <configCheck+0xe4>
      EnabledConnectedDevices();
 800fc50:	f7fa ffa4 	bl	800ab9c <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800fc54:	4b83      	ldr	r3, [pc, #524]	@ (800fe64 <configCheck+0x2f4>)
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d001      	beq.n	800fc60 <configCheck+0xf0>
 800fc5c:	4b82      	ldr	r3, [pc, #520]	@ (800fe68 <configCheck+0x2f8>)
 800fc5e:	e000      	b.n	800fc62 <configCheck+0xf2>
 800fc60:	4b82      	ldr	r3, [pc, #520]	@ (800fe6c <configCheck+0x2fc>)
 800fc62:	4a83      	ldr	r2, [pc, #524]	@ (800fe70 <configCheck+0x300>)
 800fc64:	4983      	ldr	r1, [pc, #524]	@ (800fe74 <configCheck+0x304>)
 800fc66:	2003      	movs	r0, #3
 800fc68:	f000 fe8c 	bl	8010984 <CreateLine>
    userbuttonHeld = true;
 800fc6c:	4b7a      	ldr	r3, [pc, #488]	@ (800fe58 <configCheck+0x2e8>)
 800fc6e:	2201      	movs	r2, #1
 800fc70:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800fc72:	f001 fad3 	bl	801121c <HAL_GetTick>
 800fc76:	0003      	movs	r3, r0
 800fc78:	22fa      	movs	r2, #250	@ 0xfa
 800fc7a:	00d2      	lsls	r2, r2, #3
 800fc7c:	189a      	adds	r2, r3, r2
 800fc7e:	4b7e      	ldr	r3, [pc, #504]	@ (800fe78 <configCheck+0x308>)
 800fc80:	601a      	str	r2, [r3, #0]
 800fc82:	e002      	b.n	800fc8a <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800fc84:	4b74      	ldr	r3, [pc, #464]	@ (800fe58 <configCheck+0x2e8>)
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800fc8a:	f7f7 f9d4 	bl	8007036 <BootButton_Pressed>
 800fc8e:	0003      	movs	r3, r0
 800fc90:	001a      	movs	r2, r3
 800fc92:	2301      	movs	r3, #1
 800fc94:	4053      	eors	r3, r2
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d100      	bne.n	800fc9e <configCheck+0x12e>
 800fc9c:	e0a4      	b.n	800fde8 <configCheck+0x278>
 800fc9e:	4b6e      	ldr	r3, [pc, #440]	@ (800fe58 <configCheck+0x2e8>)
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d100      	bne.n	800fca8 <configCheck+0x138>
 800fca6:	e09f      	b.n	800fde8 <configCheck+0x278>
 800fca8:	4b73      	ldr	r3, [pc, #460]	@ (800fe78 <configCheck+0x308>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	0018      	movs	r0, r3
 800fcae:	f000 fe13 	bl	80108d8 <TimestampIsReached>
 800fcb2:	1e03      	subs	r3, r0, #0
 800fcb4:	d100      	bne.n	800fcb8 <configCheck+0x148>
 800fcb6:	e097      	b.n	800fde8 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fcb8:	f7fa fc44 	bl	800a544 <GetPMSensorPresence>
 800fcbc:	1e03      	subs	r3, r0, #0
 800fcbe:	d100      	bne.n	800fcc2 <configCheck+0x152>
 800fcc0:	e082      	b.n	800fdc8 <configCheck+0x258>
 800fcc2:	4b6e      	ldr	r3, [pc, #440]	@ (800fe7c <configCheck+0x30c>)
 800fcc4:	791b      	ldrb	r3, [r3, #4]
 800fcc6:	2b34      	cmp	r3, #52	@ 0x34
 800fcc8:	d004      	beq.n	800fcd4 <configCheck+0x164>
 800fcca:	4b6c      	ldr	r3, [pc, #432]	@ (800fe7c <configCheck+0x30c>)
 800fccc:	791b      	ldrb	r3, [r3, #4]
 800fcce:	2b35      	cmp	r3, #53	@ 0x35
 800fcd0:	d000      	beq.n	800fcd4 <configCheck+0x164>
 800fcd2:	e079      	b.n	800fdc8 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800fcd4:	4b6a      	ldr	r3, [pc, #424]	@ (800fe80 <configCheck+0x310>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	1e5a      	subs	r2, r3, #1
 800fcda:	4193      	sbcs	r3, r2
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	2201      	movs	r2, #1
 800fce0:	4053      	eors	r3, r2
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	1c1a      	adds	r2, r3, #0
 800fce6:	2301      	movs	r3, #1
 800fce8:	4013      	ands	r3, r2
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	4b64      	ldr	r3, [pc, #400]	@ (800fe80 <configCheck+0x310>)
 800fcee:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800fcf0:	4b63      	ldr	r3, [pc, #396]	@ (800fe80 <configCheck+0x310>)
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d005      	beq.n	800fd04 <configCheck+0x194>
 800fcf8:	1dbc      	adds	r4, r7, #6
 800fcfa:	f7ff fb93 	bl	800f424 <Calculate_LED_ON>
 800fcfe:	0003      	movs	r3, r0
 800fd00:	8023      	strh	r3, [r4, #0]
 800fd02:	e003      	b.n	800fd0c <configCheck+0x19c>
        else color = 4000;
 800fd04:	1dbb      	adds	r3, r7, #6
 800fd06:	22fa      	movs	r2, #250	@ 0xfa
 800fd08:	0112      	lsls	r2, r2, #4
 800fd0a:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800fd0c:	4b5c      	ldr	r3, [pc, #368]	@ (800fe80 <configCheck+0x310>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <configCheck+0x1a8>
 800fd14:	4b5b      	ldr	r3, [pc, #364]	@ (800fe84 <configCheck+0x314>)
 800fd16:	e000      	b.n	800fd1a <configCheck+0x1aa>
 800fd18:	4b5b      	ldr	r3, [pc, #364]	@ (800fe88 <configCheck+0x318>)
 800fd1a:	4a5c      	ldr	r2, [pc, #368]	@ (800fe8c <configCheck+0x31c>)
 800fd1c:	495c      	ldr	r1, [pc, #368]	@ (800fe90 <configCheck+0x320>)
 800fd1e:	2002      	movs	r0, #2
 800fd20:	f000 fe30 	bl	8010984 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800fd24:	1d7b      	adds	r3, r7, #5
 800fd26:	2200      	movs	r2, #0
 800fd28:	701a      	strb	r2, [r3, #0]
 800fd2a:	e028      	b.n	800fd7e <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800fd2c:	f7ff fb7a 	bl	800f424 <Calculate_LED_ON>
 800fd30:	0003      	movs	r3, r0
 800fd32:	001a      	movs	r2, r3
 800fd34:	4b57      	ldr	r3, [pc, #348]	@ (800fe94 <configCheck+0x324>)
 800fd36:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800fd38:	4b56      	ldr	r3, [pc, #344]	@ (800fe94 <configCheck+0x324>)
 800fd3a:	1dba      	adds	r2, r7, #6
 800fd3c:	8812      	ldrh	r2, [r2, #0]
 800fd3e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800fd40:	4b54      	ldr	r3, [pc, #336]	@ (800fe94 <configCheck+0x324>)
 800fd42:	1dba      	adds	r2, r7, #6
 800fd44:	8812      	ldrh	r2, [r2, #0]
 800fd46:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800fd48:	23c8      	movs	r3, #200	@ 0xc8
 800fd4a:	005b      	lsls	r3, r3, #1
 800fd4c:	0018      	movs	r0, r3
 800fd4e:	f001 fa6f 	bl	8011230 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800fd52:	4b50      	ldr	r3, [pc, #320]	@ (800fe94 <configCheck+0x324>)
 800fd54:	22fa      	movs	r2, #250	@ 0xfa
 800fd56:	0112      	lsls	r2, r2, #4
 800fd58:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800fd5a:	4b4e      	ldr	r3, [pc, #312]	@ (800fe94 <configCheck+0x324>)
 800fd5c:	22fa      	movs	r2, #250	@ 0xfa
 800fd5e:	0112      	lsls	r2, r2, #4
 800fd60:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800fd62:	4b4c      	ldr	r3, [pc, #304]	@ (800fe94 <configCheck+0x324>)
 800fd64:	22fa      	movs	r2, #250	@ 0xfa
 800fd66:	0112      	lsls	r2, r2, #4
 800fd68:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800fd6a:	23c8      	movs	r3, #200	@ 0xc8
 800fd6c:	005b      	lsls	r3, r3, #1
 800fd6e:	0018      	movs	r0, r3
 800fd70:	f001 fa5e 	bl	8011230 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800fd74:	1d7b      	adds	r3, r7, #5
 800fd76:	781a      	ldrb	r2, [r3, #0]
 800fd78:	1d7b      	adds	r3, r7, #5
 800fd7a:	3201      	adds	r2, #1
 800fd7c:	701a      	strb	r2, [r3, #0]
 800fd7e:	1d7b      	adds	r3, r7, #5
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d9d2      	bls.n	800fd2c <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800fd86:	4b37      	ldr	r3, [pc, #220]	@ (800fe64 <configCheck+0x2f4>)
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	1e5a      	subs	r2, r3, #1
 800fd8c:	4193      	sbcs	r3, r2
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	2201      	movs	r2, #1
 800fd92:	4053      	eors	r3, r2
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	1c1a      	adds	r2, r3, #0
 800fd98:	2301      	movs	r3, #1
 800fd9a:	4013      	ands	r3, r2
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	4b31      	ldr	r3, [pc, #196]	@ (800fe64 <configCheck+0x2f4>)
 800fda0:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800fda2:	4b30      	ldr	r3, [pc, #192]	@ (800fe64 <configCheck+0x2f4>)
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d001      	beq.n	800fdae <configCheck+0x23e>
 800fdaa:	4b36      	ldr	r3, [pc, #216]	@ (800fe84 <configCheck+0x314>)
 800fdac:	e000      	b.n	800fdb0 <configCheck+0x240>
 800fdae:	4b36      	ldr	r3, [pc, #216]	@ (800fe88 <configCheck+0x318>)
 800fdb0:	4a39      	ldr	r2, [pc, #228]	@ (800fe98 <configCheck+0x328>)
 800fdb2:	4937      	ldr	r1, [pc, #220]	@ (800fe90 <configCheck+0x320>)
 800fdb4:	2002      	movs	r0, #2
 800fdb6:	f000 fde5 	bl	8010984 <CreateLine>
      if (usbPluggedIn) {
 800fdba:	4b38      	ldr	r3, [pc, #224]	@ (800fe9c <configCheck+0x32c>)
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d009      	beq.n	800fdd6 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800fdc2:	f7fc f84b 	bl	800be5c <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fdc6:	e006      	b.n	800fdd6 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800fdc8:	4a35      	ldr	r2, [pc, #212]	@ (800fea0 <configCheck+0x330>)
 800fdca:	4b31      	ldr	r3, [pc, #196]	@ (800fe90 <configCheck+0x320>)
 800fdcc:	0019      	movs	r1, r3
 800fdce:	2002      	movs	r0, #2
 800fdd0:	f000 fdd8 	bl	8010984 <CreateLine>
 800fdd4:	e000      	b.n	800fdd8 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800fdd6:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800fdd8:	46c0      	nop			@ (mov r8, r8)
 800fdda:	f7f7 f93d 	bl	8007058 <UserButton_Pressed>
 800fdde:	1e03      	subs	r3, r0, #0
 800fde0:	d1fb      	bne.n	800fdda <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800fde2:	4b1d      	ldr	r3, [pc, #116]	@ (800fe58 <configCheck+0x2e8>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800fde8:	f7f7 f925 	bl	8007036 <BootButton_Pressed>
 800fdec:	0003      	movs	r3, r0
 800fdee:	001a      	movs	r2, r3
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	4053      	eors	r3, r2
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00b      	beq.n	800fe12 <configCheck+0x2a2>
 800fdfa:	f7f7 f92d 	bl	8007058 <UserButton_Pressed>
 800fdfe:	0003      	movs	r3, r0
 800fe00:	001a      	movs	r2, r3
 800fe02:	2301      	movs	r3, #1
 800fe04:	4053      	eors	r3, r2
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d002      	beq.n	800fe12 <configCheck+0x2a2>
    userbuttonHeld = false;
 800fe0c:	4b12      	ldr	r3, [pc, #72]	@ (800fe58 <configCheck+0x2e8>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800fe12:	f7f7 f901 	bl	8007018 <Check_USB_PowerOn>
 800fe16:	1e03      	subs	r3, r0, #0
 800fe18:	d003      	beq.n	800fe22 <configCheck+0x2b2>
    usbPluggedIn = true;
 800fe1a:	4b20      	ldr	r3, [pc, #128]	@ (800fe9c <configCheck+0x32c>)
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800fe20:	e012      	b.n	800fe48 <configCheck+0x2d8>
    if(!userToggle && !init){
 800fe22:	4b10      	ldr	r3, [pc, #64]	@ (800fe64 <configCheck+0x2f4>)
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2201      	movs	r2, #1
 800fe28:	4053      	eors	r3, r2
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d008      	beq.n	800fe42 <configCheck+0x2d2>
 800fe30:	4b1c      	ldr	r3, [pc, #112]	@ (800fea4 <configCheck+0x334>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2201      	movs	r2, #1
 800fe36:	4053      	eors	r3, r2
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <configCheck+0x2d2>
      SetLEDsOff();
 800fe3e:	f7ff fcf7 	bl	800f830 <SetLEDsOff>
    usbPluggedIn = false;
 800fe42:	4b16      	ldr	r3, [pc, #88]	@ (800fe9c <configCheck+0x32c>)
 800fe44:	2200      	movs	r2, #0
 800fe46:	701a      	strb	r2, [r3, #0]
}
 800fe48:	46c0      	nop			@ (mov r8, r8)
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	b003      	add	sp, #12
 800fe4e:	bd90      	pop	{r4, r7, pc}
 800fe50:	20001dd8 	.word	0x20001dd8
 800fe54:	20001de0 	.word	0x20001de0
 800fe58:	20001ddb 	.word	0x20001ddb
 800fe5c:	00000bb8 	.word	0x00000bb8
 800fe60:	000005dc 	.word	0x000005dc
 800fe64:	20001dda 	.word	0x20001dda
 800fe68:	08028994 	.word	0x08028994
 800fe6c:	08028998 	.word	0x08028998
 800fe70:	0802899c 	.word	0x0802899c
 800fe74:	0802891c 	.word	0x0802891c
 800fe78:	20001de4 	.word	0x20001de4
 800fe7c:	20000e4c 	.word	0x20000e4c
 800fe80:	20000e4a 	.word	0x20000e4a
 800fe84:	080289bc 	.word	0x080289bc
 800fe88:	080289c4 	.word	0x080289c4
 800fe8c:	080289d0 	.word	0x080289d0
 800fe90:	080289f0 	.word	0x080289f0
 800fe94:	40000400 	.word	0x40000400
 800fe98:	080289f4 	.word	0x080289f4
 800fe9c:	20001dd9 	.word	0x20001dd9
 800fea0:	08028a0c 	.word	0x08028a0c
 800fea4:	200000e0 	.word	0x200000e0

0800fea8 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800fea8:	b590      	push	{r4, r7, lr}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800feae:	1dfc      	adds	r4, r7, #7
 800feb0:	f7ff fdfa 	bl	800faa8 <powerCheck>
 800feb4:	0003      	movs	r3, r0
 800feb6:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800feb8:	1dfb      	adds	r3, r7, #7
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	0018      	movs	r0, r3
 800febe:	f7ff fe0f 	bl	800fae0 <powerDisplay>
  return status;
 800fec2:	1dfb      	adds	r3, r7, #7
 800fec4:	781b      	ldrb	r3, [r3, #0]
}
 800fec6:	0018      	movs	r0, r3
 800fec8:	46bd      	mov	sp, r7
 800feca:	b003      	add	sp, #12
 800fecc:	bd90      	pop	{r4, r7, pc}
	...

0800fed0 <setuserToggle>:

void setuserToggle(void) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800fed4:	f7ff fde8 	bl	800faa8 <powerCheck>
 800fed8:	0003      	movs	r3, r0
 800feda:	2b04      	cmp	r3, #4
 800fedc:	d004      	beq.n	800fee8 <setuserToggle+0x18>
    userToggle = true;
 800fede:	4b04      	ldr	r3, [pc, #16]	@ (800fef0 <setuserToggle+0x20>)
 800fee0:	2201      	movs	r2, #1
 800fee2:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800fee4:	f7fa fe5a 	bl	800ab9c <EnabledConnectedDevices>
  }
}
 800fee8:	46c0      	nop			@ (mov r8, r8)
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	46c0      	nop			@ (mov r8, r8)
 800fef0:	20001dda 	.word	0x20001dda

0800fef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fef8:	4b07      	ldr	r3, [pc, #28]	@ (800ff18 <HAL_MspInit+0x24>)
 800fefa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fefc:	4b06      	ldr	r3, [pc, #24]	@ (800ff18 <HAL_MspInit+0x24>)
 800fefe:	2101      	movs	r1, #1
 800ff00:	430a      	orrs	r2, r1
 800ff02:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800ff04:	4b04      	ldr	r3, [pc, #16]	@ (800ff18 <HAL_MspInit+0x24>)
 800ff06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff08:	4b03      	ldr	r3, [pc, #12]	@ (800ff18 <HAL_MspInit+0x24>)
 800ff0a:	2180      	movs	r1, #128	@ 0x80
 800ff0c:	0549      	lsls	r1, r1, #21
 800ff0e:	430a      	orrs	r2, r1
 800ff10:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ff12:	46c0      	nop			@ (mov r8, r8)
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	40021000 	.word	0x40021000

0800ff1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ff20:	46c0      	nop			@ (mov r8, r8)
 800ff22:	e7fd      	b.n	800ff20 <NMI_Handler+0x4>

0800ff24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ff28:	46c0      	nop			@ (mov r8, r8)
 800ff2a:	e7fd      	b.n	800ff28 <HardFault_Handler+0x4>

0800ff2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ff30:	46c0      	nop			@ (mov r8, r8)
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ff3a:	46c0      	nop			@ (mov r8, r8)
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ff44:	f001 f958 	bl	80111f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800ff48:	46c0      	nop			@ (mov r8, r8)
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800ff54:	4b03      	ldr	r3, [pc, #12]	@ (800ff64 <RTC_IRQHandler+0x14>)
 800ff56:	0018      	movs	r0, r3
 800ff58:	f009 f916 	bl	8019188 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800ff5c:	46c0      	nop			@ (mov r8, r8)
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	46c0      	nop			@ (mov r8, r8)
 800ff64:	20000e24 	.word	0x20000e24

0800ff68 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800ff6c:	2380      	movs	r3, #128	@ 0x80
 800ff6e:	021b      	lsls	r3, r3, #8
 800ff70:	0018      	movs	r0, r3
 800ff72:	f002 fc01 	bl	8012778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800ff76:	46c0      	nop			@ (mov r8, r8)
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ff80:	4b05      	ldr	r3, [pc, #20]	@ (800ff98 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800ff82:	0018      	movs	r0, r3
 800ff84:	f001 ff89 	bl	8011e9a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800ff88:	4b04      	ldr	r3, [pc, #16]	@ (800ff9c <DMA1_Channel2_3_IRQHandler+0x20>)
 800ff8a:	0018      	movs	r0, r3
 800ff8c:	f001 ff85 	bl	8011e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ff90:	46c0      	nop			@ (mov r8, r8)
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	46c0      	nop			@ (mov r8, r8)
 800ff98:	20000cbc 	.word	0x20000cbc
 800ff9c:	20000c74 	.word	0x20000c74

0800ffa0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ffa4:	4b07      	ldr	r3, [pc, #28]	@ (800ffc4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	f001 ff77 	bl	8011e9a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ffac:	4b06      	ldr	r3, [pc, #24]	@ (800ffc8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ffae:	0018      	movs	r0, r3
 800ffb0:	f001 ff73 	bl	8011e9a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ffb4:	4b05      	ldr	r3, [pc, #20]	@ (800ffcc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ffb6:	0018      	movs	r0, r3
 800ffb8:	f001 ff6f 	bl	8011e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ffbc:	46c0      	nop			@ (mov r8, r8)
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	46c0      	nop			@ (mov r8, r8)
 800ffc4:	20000d40 	.word	0x20000d40
 800ffc8:	200020e0 	.word	0x200020e0
 800ffcc:	20002128 	.word	0x20002128

0800ffd0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ffd4:	4b03      	ldr	r3, [pc, #12]	@ (800ffe4 <USART4_5_IRQHandler+0x14>)
 800ffd6:	0018      	movs	r0, r3
 800ffd8:	f009 ffd0 	bl	8019f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ffdc:	46c0      	nop			@ (mov r8, r8)
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	46c0      	nop			@ (mov r8, r8)
 800ffe4:	20002028 	.word	0x20002028

0800ffe8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800ffec:	4b09      	ldr	r3, [pc, #36]	@ (8010014 <I2C1_IRQHandler+0x2c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	699a      	ldr	r2, [r3, #24]
 800fff2:	23e0      	movs	r3, #224	@ 0xe0
 800fff4:	00db      	lsls	r3, r3, #3
 800fff6:	4013      	ands	r3, r2
 800fff8:	d004      	beq.n	8010004 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800fffa:	4b06      	ldr	r3, [pc, #24]	@ (8010014 <I2C1_IRQHandler+0x2c>)
 800fffc:	0018      	movs	r0, r3
 800fffe:	f003 fad9 	bl	80135b4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8010002:	e003      	b.n	801000c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8010004:	4b03      	ldr	r3, [pc, #12]	@ (8010014 <I2C1_IRQHandler+0x2c>)
 8010006:	0018      	movs	r0, r3
 8010008:	f003 faba 	bl	8013580 <HAL_I2C_EV_IRQHandler>
}
 801000c:	46c0      	nop			@ (mov r8, r8)
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	46c0      	nop			@ (mov r8, r8)
 8010014:	20000bcc 	.word	0x20000bcc

08010018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801001c:	4b03      	ldr	r3, [pc, #12]	@ (801002c <USART1_IRQHandler+0x14>)
 801001e:	0018      	movs	r0, r3
 8010020:	f009 ffac 	bl	8019f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010024:	46c0      	nop			@ (mov r8, r8)
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	46c0      	nop			@ (mov r8, r8)
 801002c:	20001f70 	.word	0x20001f70

08010030 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8010030:	b580      	push	{r7, lr}
 8010032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8010034:	4b03      	ldr	r3, [pc, #12]	@ (8010044 <USB_IRQHandler+0x14>)
 8010036:	0018      	movs	r0, r3
 8010038:	f005 fefc 	bl	8015e34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 801003c:	46c0      	nop			@ (mov r8, r8)
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	46c0      	nop			@ (mov r8, r8)
 8010044:	20002f3c 	.word	0x20002f3c

08010048 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	af00      	add	r7, sp, #0
  return 1;
 801004c:	2301      	movs	r3, #1
}
 801004e:	0018      	movs	r0, r3
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <_kill>:

int _kill(int pid, int sig)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801005e:	f012 fe93 	bl	8022d88 <__errno>
 8010062:	0003      	movs	r3, r0
 8010064:	2216      	movs	r2, #22
 8010066:	601a      	str	r2, [r3, #0]
  return -1;
 8010068:	2301      	movs	r3, #1
 801006a:	425b      	negs	r3, r3
}
 801006c:	0018      	movs	r0, r3
 801006e:	46bd      	mov	sp, r7
 8010070:	b002      	add	sp, #8
 8010072:	bd80      	pop	{r7, pc}

08010074 <_exit>:

void _exit (int status)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801007c:	2301      	movs	r3, #1
 801007e:	425a      	negs	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	0011      	movs	r1, r2
 8010084:	0018      	movs	r0, r3
 8010086:	f7ff ffe5 	bl	8010054 <_kill>
  while (1) {}    /* Make sure we hang here */
 801008a:	46c0      	nop			@ (mov r8, r8)
 801008c:	e7fd      	b.n	801008a <_exit+0x16>

0801008e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801008e:	b580      	push	{r7, lr}
 8010090:	b086      	sub	sp, #24
 8010092:	af00      	add	r7, sp, #0
 8010094:	60f8      	str	r0, [r7, #12]
 8010096:	60b9      	str	r1, [r7, #8]
 8010098:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801009a:	2300      	movs	r3, #0
 801009c:	617b      	str	r3, [r7, #20]
 801009e:	e00a      	b.n	80100b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80100a0:	e000      	b.n	80100a4 <_read+0x16>
 80100a2:	bf00      	nop
 80100a4:	0001      	movs	r1, r0
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	1c5a      	adds	r2, r3, #1
 80100aa:	60ba      	str	r2, [r7, #8]
 80100ac:	b2ca      	uxtb	r2, r1
 80100ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	3301      	adds	r3, #1
 80100b4:	617b      	str	r3, [r7, #20]
 80100b6:	697a      	ldr	r2, [r7, #20]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	dbf0      	blt.n	80100a0 <_read+0x12>
  }

  return len;
 80100be:	687b      	ldr	r3, [r7, #4]
}
 80100c0:	0018      	movs	r0, r3
 80100c2:	46bd      	mov	sp, r7
 80100c4:	b006      	add	sp, #24
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80100d0:	2301      	movs	r3, #1
 80100d2:	425b      	negs	r3, r3
}
 80100d4:	0018      	movs	r0, r3
 80100d6:	46bd      	mov	sp, r7
 80100d8:	b002      	add	sp, #8
 80100da:	bd80      	pop	{r7, pc}

080100dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	2280      	movs	r2, #128	@ 0x80
 80100ea:	0192      	lsls	r2, r2, #6
 80100ec:	605a      	str	r2, [r3, #4]
  return 0;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	0018      	movs	r0, r3
 80100f2:	46bd      	mov	sp, r7
 80100f4:	b002      	add	sp, #8
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <_isatty>:

int _isatty(int file)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010100:	2301      	movs	r3, #1
}
 8010102:	0018      	movs	r0, r3
 8010104:	46bd      	mov	sp, r7
 8010106:	b002      	add	sp, #8
 8010108:	bd80      	pop	{r7, pc}

0801010a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b084      	sub	sp, #16
 801010e:	af00      	add	r7, sp, #0
 8010110:	60f8      	str	r0, [r7, #12]
 8010112:	60b9      	str	r1, [r7, #8]
 8010114:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010116:	2300      	movs	r3, #0
}
 8010118:	0018      	movs	r0, r3
 801011a:	46bd      	mov	sp, r7
 801011c:	b004      	add	sp, #16
 801011e:	bd80      	pop	{r7, pc}

08010120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010128:	4a14      	ldr	r2, [pc, #80]	@ (801017c <_sbrk+0x5c>)
 801012a:	4b15      	ldr	r3, [pc, #84]	@ (8010180 <_sbrk+0x60>)
 801012c:	1ad3      	subs	r3, r2, r3
 801012e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010134:	4b13      	ldr	r3, [pc, #76]	@ (8010184 <_sbrk+0x64>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d102      	bne.n	8010142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801013c:	4b11      	ldr	r3, [pc, #68]	@ (8010184 <_sbrk+0x64>)
 801013e:	4a12      	ldr	r2, [pc, #72]	@ (8010188 <_sbrk+0x68>)
 8010140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010142:	4b10      	ldr	r3, [pc, #64]	@ (8010184 <_sbrk+0x64>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	18d3      	adds	r3, r2, r3
 801014a:	693a      	ldr	r2, [r7, #16]
 801014c:	429a      	cmp	r2, r3
 801014e:	d207      	bcs.n	8010160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8010150:	f012 fe1a 	bl	8022d88 <__errno>
 8010154:	0003      	movs	r3, r0
 8010156:	220c      	movs	r2, #12
 8010158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801015a:	2301      	movs	r3, #1
 801015c:	425b      	negs	r3, r3
 801015e:	e009      	b.n	8010174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8010160:	4b08      	ldr	r3, [pc, #32]	@ (8010184 <_sbrk+0x64>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8010166:	4b07      	ldr	r3, [pc, #28]	@ (8010184 <_sbrk+0x64>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	18d2      	adds	r2, r2, r3
 801016e:	4b05      	ldr	r3, [pc, #20]	@ (8010184 <_sbrk+0x64>)
 8010170:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8010172:	68fb      	ldr	r3, [r7, #12]
}
 8010174:	0018      	movs	r0, r3
 8010176:	46bd      	mov	sp, r7
 8010178:	b006      	add	sp, #24
 801017a:	bd80      	pop	{r7, pc}
 801017c:	20005000 	.word	0x20005000
 8010180:	00000400 	.word	0x00000400
 8010184:	20001df4 	.word	0x20001df4
 8010188:	200035a0 	.word	0x200035a0

0801018c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010190:	46c0      	nop			@ (mov r8, r8)
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
	...

08010198 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b086      	sub	sp, #24
 801019c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801019e:	2310      	movs	r3, #16
 80101a0:	18fb      	adds	r3, r7, r3
 80101a2:	0018      	movs	r0, r3
 80101a4:	2308      	movs	r3, #8
 80101a6:	001a      	movs	r2, r3
 80101a8:	2100      	movs	r1, #0
 80101aa:	f012 fd49 	bl	8022c40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80101ae:	003b      	movs	r3, r7
 80101b0:	0018      	movs	r0, r3
 80101b2:	2310      	movs	r3, #16
 80101b4:	001a      	movs	r2, r3
 80101b6:	2100      	movs	r1, #0
 80101b8:	f012 fd42 	bl	8022c40 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80101bc:	4b2e      	ldr	r3, [pc, #184]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101be:	2280      	movs	r2, #128	@ 0x80
 80101c0:	05d2      	lsls	r2, r2, #23
 80101c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80101c4:	4b2c      	ldr	r3, [pc, #176]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101c6:	2200      	movs	r2, #0
 80101c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80101ca:	4b2b      	ldr	r3, [pc, #172]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101cc:	2200      	movs	r2, #0
 80101ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80101d0:	4b29      	ldr	r3, [pc, #164]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101d2:	4a2a      	ldr	r2, [pc, #168]	@ (801027c <MX_TIM2_Init+0xe4>)
 80101d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80101d6:	4b28      	ldr	r3, [pc, #160]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101d8:	2200      	movs	r2, #0
 80101da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80101dc:	4b26      	ldr	r3, [pc, #152]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101de:	2200      	movs	r2, #0
 80101e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80101e2:	4b25      	ldr	r3, [pc, #148]	@ (8010278 <MX_TIM2_Init+0xe0>)
 80101e4:	0018      	movs	r0, r3
 80101e6:	f009 f8dd 	bl	80193a4 <HAL_TIM_PWM_Init>
 80101ea:	1e03      	subs	r3, r0, #0
 80101ec:	d001      	beq.n	80101f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80101ee:	f7fa f963 	bl	800a4b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80101f2:	2110      	movs	r1, #16
 80101f4:	187b      	adds	r3, r7, r1
 80101f6:	2200      	movs	r2, #0
 80101f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80101fa:	187b      	adds	r3, r7, r1
 80101fc:	2200      	movs	r2, #0
 80101fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8010200:	187a      	adds	r2, r7, r1
 8010202:	4b1d      	ldr	r3, [pc, #116]	@ (8010278 <MX_TIM2_Init+0xe0>)
 8010204:	0011      	movs	r1, r2
 8010206:	0018      	movs	r0, r3
 8010208:	f009 fbea 	bl	80199e0 <HAL_TIMEx_MasterConfigSynchronization>
 801020c:	1e03      	subs	r3, r0, #0
 801020e:	d001      	beq.n	8010214 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8010210:	f7fa f952 	bl	800a4b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010214:	003b      	movs	r3, r7
 8010216:	2260      	movs	r2, #96	@ 0x60
 8010218:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801021a:	003b      	movs	r3, r7
 801021c:	2200      	movs	r2, #0
 801021e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010220:	003b      	movs	r3, r7
 8010222:	2200      	movs	r2, #0
 8010224:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010226:	003b      	movs	r3, r7
 8010228:	2200      	movs	r2, #0
 801022a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801022c:	0039      	movs	r1, r7
 801022e:	4b12      	ldr	r3, [pc, #72]	@ (8010278 <MX_TIM2_Init+0xe0>)
 8010230:	2200      	movs	r2, #0
 8010232:	0018      	movs	r0, r3
 8010234:	f009 f988 	bl	8019548 <HAL_TIM_PWM_ConfigChannel>
 8010238:	1e03      	subs	r3, r0, #0
 801023a:	d001      	beq.n	8010240 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 801023c:	f7fa f93c 	bl	800a4b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8010240:	0039      	movs	r1, r7
 8010242:	4b0d      	ldr	r3, [pc, #52]	@ (8010278 <MX_TIM2_Init+0xe0>)
 8010244:	2208      	movs	r2, #8
 8010246:	0018      	movs	r0, r3
 8010248:	f009 f97e 	bl	8019548 <HAL_TIM_PWM_ConfigChannel>
 801024c:	1e03      	subs	r3, r0, #0
 801024e:	d001      	beq.n	8010254 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8010250:	f7fa f932 	bl	800a4b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8010254:	0039      	movs	r1, r7
 8010256:	4b08      	ldr	r3, [pc, #32]	@ (8010278 <MX_TIM2_Init+0xe0>)
 8010258:	220c      	movs	r2, #12
 801025a:	0018      	movs	r0, r3
 801025c:	f009 f974 	bl	8019548 <HAL_TIM_PWM_ConfigChannel>
 8010260:	1e03      	subs	r3, r0, #0
 8010262:	d001      	beq.n	8010268 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8010264:	f7fa f928 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8010268:	4b03      	ldr	r3, [pc, #12]	@ (8010278 <MX_TIM2_Init+0xe0>)
 801026a:	0018      	movs	r0, r3
 801026c:	f000 f8fe 	bl	801046c <HAL_TIM_MspPostInit>

}
 8010270:	46c0      	nop			@ (mov r8, r8)
 8010272:	46bd      	mov	sp, r7
 8010274:	b006      	add	sp, #24
 8010276:	bd80      	pop	{r7, pc}
 8010278:	20001df8 	.word	0x20001df8
 801027c:	0000ffff 	.word	0x0000ffff

08010280 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b086      	sub	sp, #24
 8010284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010286:	2310      	movs	r3, #16
 8010288:	18fb      	adds	r3, r7, r3
 801028a:	0018      	movs	r0, r3
 801028c:	2308      	movs	r3, #8
 801028e:	001a      	movs	r2, r3
 8010290:	2100      	movs	r1, #0
 8010292:	f012 fcd5 	bl	8022c40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010296:	003b      	movs	r3, r7
 8010298:	0018      	movs	r0, r3
 801029a:	2310      	movs	r3, #16
 801029c:	001a      	movs	r2, r3
 801029e:	2100      	movs	r1, #0
 80102a0:	f012 fcce 	bl	8022c40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80102a4:	4b32      	ldr	r3, [pc, #200]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102a6:	4a33      	ldr	r2, [pc, #204]	@ (8010374 <MX_TIM3_Init+0xf4>)
 80102a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80102aa:	4b31      	ldr	r3, [pc, #196]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102ac:	2200      	movs	r2, #0
 80102ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80102b0:	4b2f      	ldr	r3, [pc, #188]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80102b6:	4b2e      	ldr	r3, [pc, #184]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102b8:	4a2f      	ldr	r2, [pc, #188]	@ (8010378 <MX_TIM3_Init+0xf8>)
 80102ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80102bc:	4b2c      	ldr	r3, [pc, #176]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102be:	2200      	movs	r2, #0
 80102c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80102c2:	4b2b      	ldr	r3, [pc, #172]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102c4:	2200      	movs	r2, #0
 80102c6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80102c8:	4b29      	ldr	r3, [pc, #164]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102ca:	0018      	movs	r0, r3
 80102cc:	f009 f86a 	bl	80193a4 <HAL_TIM_PWM_Init>
 80102d0:	1e03      	subs	r3, r0, #0
 80102d2:	d001      	beq.n	80102d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80102d4:	f7fa f8f0 	bl	800a4b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80102d8:	2110      	movs	r1, #16
 80102da:	187b      	adds	r3, r7, r1
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80102e0:	187b      	adds	r3, r7, r1
 80102e2:	2200      	movs	r2, #0
 80102e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80102e6:	187a      	adds	r2, r7, r1
 80102e8:	4b21      	ldr	r3, [pc, #132]	@ (8010370 <MX_TIM3_Init+0xf0>)
 80102ea:	0011      	movs	r1, r2
 80102ec:	0018      	movs	r0, r3
 80102ee:	f009 fb77 	bl	80199e0 <HAL_TIMEx_MasterConfigSynchronization>
 80102f2:	1e03      	subs	r3, r0, #0
 80102f4:	d001      	beq.n	80102fa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80102f6:	f7fa f8df 	bl	800a4b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80102fa:	003b      	movs	r3, r7
 80102fc:	2260      	movs	r2, #96	@ 0x60
 80102fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8010300:	003b      	movs	r3, r7
 8010302:	2200      	movs	r2, #0
 8010304:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010306:	003b      	movs	r3, r7
 8010308:	2200      	movs	r2, #0
 801030a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801030c:	003b      	movs	r3, r7
 801030e:	2200      	movs	r2, #0
 8010310:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010312:	0039      	movs	r1, r7
 8010314:	4b16      	ldr	r3, [pc, #88]	@ (8010370 <MX_TIM3_Init+0xf0>)
 8010316:	2200      	movs	r2, #0
 8010318:	0018      	movs	r0, r3
 801031a:	f009 f915 	bl	8019548 <HAL_TIM_PWM_ConfigChannel>
 801031e:	1e03      	subs	r3, r0, #0
 8010320:	d001      	beq.n	8010326 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8010322:	f7fa f8c9 	bl	800a4b8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8010326:	4b12      	ldr	r3, [pc, #72]	@ (8010370 <MX_TIM3_Init+0xf0>)
 8010328:	2104      	movs	r1, #4
 801032a:	0018      	movs	r0, r3
 801032c:	f009 fbb6 	bl	8019a9c <HAL_TIMEx_RemapConfig>
 8010330:	1e03      	subs	r3, r0, #0
 8010332:	d001      	beq.n	8010338 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8010334:	f7fa f8c0 	bl	800a4b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8010338:	0039      	movs	r1, r7
 801033a:	4b0d      	ldr	r3, [pc, #52]	@ (8010370 <MX_TIM3_Init+0xf0>)
 801033c:	2204      	movs	r2, #4
 801033e:	0018      	movs	r0, r3
 8010340:	f009 f902 	bl	8019548 <HAL_TIM_PWM_ConfigChannel>
 8010344:	1e03      	subs	r3, r0, #0
 8010346:	d001      	beq.n	801034c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8010348:	f7fa f8b6 	bl	800a4b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801034c:	0039      	movs	r1, r7
 801034e:	4b08      	ldr	r3, [pc, #32]	@ (8010370 <MX_TIM3_Init+0xf0>)
 8010350:	2208      	movs	r2, #8
 8010352:	0018      	movs	r0, r3
 8010354:	f009 f8f8 	bl	8019548 <HAL_TIM_PWM_ConfigChannel>
 8010358:	1e03      	subs	r3, r0, #0
 801035a:	d001      	beq.n	8010360 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 801035c:	f7fa f8ac 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8010360:	4b03      	ldr	r3, [pc, #12]	@ (8010370 <MX_TIM3_Init+0xf0>)
 8010362:	0018      	movs	r0, r3
 8010364:	f000 f882 	bl	801046c <HAL_TIM_MspPostInit>

}
 8010368:	46c0      	nop			@ (mov r8, r8)
 801036a:	46bd      	mov	sp, r7
 801036c:	b006      	add	sp, #24
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20001e38 	.word	0x20001e38
 8010374:	40000400 	.word	0x40000400
 8010378:	0000ffff 	.word	0x0000ffff

0801037c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010382:	003b      	movs	r3, r7
 8010384:	0018      	movs	r0, r3
 8010386:	2308      	movs	r3, #8
 8010388:	001a      	movs	r2, r3
 801038a:	2100      	movs	r1, #0
 801038c:	f012 fc58 	bl	8022c40 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8010390:	4b15      	ldr	r3, [pc, #84]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 8010392:	4a16      	ldr	r2, [pc, #88]	@ (80103ec <MX_TIM6_Init+0x70>)
 8010394:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8010396:	4b14      	ldr	r3, [pc, #80]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 8010398:	220a      	movs	r2, #10
 801039a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801039c:	4b12      	ldr	r3, [pc, #72]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 801039e:	2200      	movs	r2, #0
 80103a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80103a2:	4b11      	ldr	r3, [pc, #68]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 80103a4:	4a12      	ldr	r2, [pc, #72]	@ (80103f0 <MX_TIM6_Init+0x74>)
 80103a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80103a8:	4b0f      	ldr	r3, [pc, #60]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80103ae:	4b0e      	ldr	r3, [pc, #56]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 80103b0:	0018      	movs	r0, r3
 80103b2:	f008 ff4f 	bl	8019254 <HAL_TIM_Base_Init>
 80103b6:	1e03      	subs	r3, r0, #0
 80103b8:	d001      	beq.n	80103be <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80103ba:	f7fa f87d 	bl	800a4b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80103be:	003b      	movs	r3, r7
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80103c4:	003b      	movs	r3, r7
 80103c6:	2200      	movs	r2, #0
 80103c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80103ca:	003a      	movs	r2, r7
 80103cc:	4b06      	ldr	r3, [pc, #24]	@ (80103e8 <MX_TIM6_Init+0x6c>)
 80103ce:	0011      	movs	r1, r2
 80103d0:	0018      	movs	r0, r3
 80103d2:	f009 fb05 	bl	80199e0 <HAL_TIMEx_MasterConfigSynchronization>
 80103d6:	1e03      	subs	r3, r0, #0
 80103d8:	d001      	beq.n	80103de <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80103da:	f7fa f86d 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80103de:	46c0      	nop			@ (mov r8, r8)
 80103e0:	46bd      	mov	sp, r7
 80103e2:	b002      	add	sp, #8
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	46c0      	nop			@ (mov r8, r8)
 80103e8:	20001e78 	.word	0x20001e78
 80103ec:	40001000 	.word	0x40001000
 80103f0:	0000ffff 	.word	0x0000ffff

080103f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b082      	sub	sp, #8
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681a      	ldr	r2, [r3, #0]
 8010400:	2380      	movs	r3, #128	@ 0x80
 8010402:	05db      	lsls	r3, r3, #23
 8010404:	429a      	cmp	r2, r3
 8010406:	d106      	bne.n	8010416 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8010408:	4b0a      	ldr	r3, [pc, #40]	@ (8010434 <HAL_TIM_PWM_MspInit+0x40>)
 801040a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801040c:	4b09      	ldr	r3, [pc, #36]	@ (8010434 <HAL_TIM_PWM_MspInit+0x40>)
 801040e:	2101      	movs	r1, #1
 8010410:	430a      	orrs	r2, r1
 8010412:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8010414:	e00a      	b.n	801042c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4a07      	ldr	r2, [pc, #28]	@ (8010438 <HAL_TIM_PWM_MspInit+0x44>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d105      	bne.n	801042c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8010420:	4b04      	ldr	r3, [pc, #16]	@ (8010434 <HAL_TIM_PWM_MspInit+0x40>)
 8010422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010424:	4b03      	ldr	r3, [pc, #12]	@ (8010434 <HAL_TIM_PWM_MspInit+0x40>)
 8010426:	2102      	movs	r1, #2
 8010428:	430a      	orrs	r2, r1
 801042a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 801042c:	46c0      	nop			@ (mov r8, r8)
 801042e:	46bd      	mov	sp, r7
 8010430:	b002      	add	sp, #8
 8010432:	bd80      	pop	{r7, pc}
 8010434:	40021000 	.word	0x40021000
 8010438:	40000400 	.word	0x40000400

0801043c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	4a06      	ldr	r2, [pc, #24]	@ (8010464 <HAL_TIM_Base_MspInit+0x28>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d105      	bne.n	801045a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801044e:	4b06      	ldr	r3, [pc, #24]	@ (8010468 <HAL_TIM_Base_MspInit+0x2c>)
 8010450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010452:	4b05      	ldr	r3, [pc, #20]	@ (8010468 <HAL_TIM_Base_MspInit+0x2c>)
 8010454:	2110      	movs	r1, #16
 8010456:	430a      	orrs	r2, r1
 8010458:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 801045a:	46c0      	nop			@ (mov r8, r8)
 801045c:	46bd      	mov	sp, r7
 801045e:	b002      	add	sp, #8
 8010460:	bd80      	pop	{r7, pc}
 8010462:	46c0      	nop			@ (mov r8, r8)
 8010464:	40001000 	.word	0x40001000
 8010468:	40021000 	.word	0x40021000

0801046c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801046c:	b590      	push	{r4, r7, lr}
 801046e:	b08b      	sub	sp, #44	@ 0x2c
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010474:	2414      	movs	r4, #20
 8010476:	193b      	adds	r3, r7, r4
 8010478:	0018      	movs	r0, r3
 801047a:	2314      	movs	r3, #20
 801047c:	001a      	movs	r2, r3
 801047e:	2100      	movs	r1, #0
 8010480:	f012 fbde 	bl	8022c40 <memset>
  if(timHandle->Instance==TIM2)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	2380      	movs	r3, #128	@ 0x80
 801048a:	05db      	lsls	r3, r3, #23
 801048c:	429a      	cmp	r2, r3
 801048e:	d123      	bne.n	80104d8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010490:	4b27      	ldr	r3, [pc, #156]	@ (8010530 <HAL_TIM_MspPostInit+0xc4>)
 8010492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010494:	4b26      	ldr	r3, [pc, #152]	@ (8010530 <HAL_TIM_MspPostInit+0xc4>)
 8010496:	2101      	movs	r1, #1
 8010498:	430a      	orrs	r2, r1
 801049a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801049c:	4b24      	ldr	r3, [pc, #144]	@ (8010530 <HAL_TIM_MspPostInit+0xc4>)
 801049e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a0:	2201      	movs	r2, #1
 80104a2:	4013      	ands	r3, r2
 80104a4:	613b      	str	r3, [r7, #16]
 80104a6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80104a8:	0021      	movs	r1, r4
 80104aa:	187b      	adds	r3, r7, r1
 80104ac:	220d      	movs	r2, #13
 80104ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104b0:	187b      	adds	r3, r7, r1
 80104b2:	2202      	movs	r2, #2
 80104b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104b6:	187b      	adds	r3, r7, r1
 80104b8:	2200      	movs	r2, #0
 80104ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80104bc:	187b      	adds	r3, r7, r1
 80104be:	2200      	movs	r2, #0
 80104c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80104c2:	187b      	adds	r3, r7, r1
 80104c4:	2202      	movs	r2, #2
 80104c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104c8:	187a      	adds	r2, r7, r1
 80104ca:	23a0      	movs	r3, #160	@ 0xa0
 80104cc:	05db      	lsls	r3, r3, #23
 80104ce:	0011      	movs	r1, r2
 80104d0:	0018      	movs	r0, r3
 80104d2:	f001 ff99 	bl	8012408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80104d6:	e027      	b.n	8010528 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a15      	ldr	r2, [pc, #84]	@ (8010534 <HAL_TIM_MspPostInit+0xc8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d122      	bne.n	8010528 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80104e2:	4b13      	ldr	r3, [pc, #76]	@ (8010530 <HAL_TIM_MspPostInit+0xc4>)
 80104e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104e6:	4b12      	ldr	r3, [pc, #72]	@ (8010530 <HAL_TIM_MspPostInit+0xc4>)
 80104e8:	2104      	movs	r1, #4
 80104ea:	430a      	orrs	r2, r1
 80104ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80104ee:	4b10      	ldr	r3, [pc, #64]	@ (8010530 <HAL_TIM_MspPostInit+0xc4>)
 80104f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f2:	2204      	movs	r2, #4
 80104f4:	4013      	ands	r3, r2
 80104f6:	60fb      	str	r3, [r7, #12]
 80104f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80104fa:	2114      	movs	r1, #20
 80104fc:	187b      	adds	r3, r7, r1
 80104fe:	22e0      	movs	r2, #224	@ 0xe0
 8010500:	0052      	lsls	r2, r2, #1
 8010502:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010504:	187b      	adds	r3, r7, r1
 8010506:	2202      	movs	r2, #2
 8010508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801050a:	187b      	adds	r3, r7, r1
 801050c:	2200      	movs	r2, #0
 801050e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010510:	187b      	adds	r3, r7, r1
 8010512:	2200      	movs	r2, #0
 8010514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8010516:	187b      	adds	r3, r7, r1
 8010518:	2202      	movs	r2, #2
 801051a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801051c:	187b      	adds	r3, r7, r1
 801051e:	4a06      	ldr	r2, [pc, #24]	@ (8010538 <HAL_TIM_MspPostInit+0xcc>)
 8010520:	0019      	movs	r1, r3
 8010522:	0010      	movs	r0, r2
 8010524:	f001 ff70 	bl	8012408 <HAL_GPIO_Init>
}
 8010528:	46c0      	nop			@ (mov r8, r8)
 801052a:	46bd      	mov	sp, r7
 801052c:	b00b      	add	sp, #44	@ 0x2c
 801052e:	bd90      	pop	{r4, r7, pc}
 8010530:	40021000 	.word	0x40021000
 8010534:	40000400 	.word	0x40000400
 8010538:	50000800 	.word	0x50000800

0801053c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8010540:	4b17      	ldr	r3, [pc, #92]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010542:	4a18      	ldr	r2, [pc, #96]	@ (80105a4 <MX_LPUART1_UART_Init+0x68>)
 8010544:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8010546:	4b16      	ldr	r3, [pc, #88]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010548:	22e1      	movs	r2, #225	@ 0xe1
 801054a:	0252      	lsls	r2, r2, #9
 801054c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 801054e:	4b14      	ldr	r3, [pc, #80]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010550:	2200      	movs	r2, #0
 8010552:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8010554:	4b12      	ldr	r3, [pc, #72]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010556:	2200      	movs	r2, #0
 8010558:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801055a:	4b11      	ldr	r3, [pc, #68]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 801055c:	2200      	movs	r2, #0
 801055e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8010560:	4b0f      	ldr	r3, [pc, #60]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010562:	220c      	movs	r2, #12
 8010564:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010566:	4b0e      	ldr	r3, [pc, #56]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010568:	2200      	movs	r2, #0
 801056a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801056c:	4b0c      	ldr	r3, [pc, #48]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 801056e:	2200      	movs	r2, #0
 8010570:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8010572:	4b0b      	ldr	r3, [pc, #44]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010574:	2218      	movs	r2, #24
 8010576:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8010578:	4b09      	ldr	r3, [pc, #36]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 801057a:	2280      	movs	r2, #128	@ 0x80
 801057c:	0212      	lsls	r2, r2, #8
 801057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8010580:	4b07      	ldr	r3, [pc, #28]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 8010582:	2280      	movs	r2, #128	@ 0x80
 8010584:	0152      	lsls	r2, r2, #5
 8010586:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8010588:	4b05      	ldr	r3, [pc, #20]	@ (80105a0 <MX_LPUART1_UART_Init+0x64>)
 801058a:	0018      	movs	r0, r3
 801058c:	f009 faa4 	bl	8019ad8 <HAL_UART_Init>
 8010590:	1e03      	subs	r3, r0, #0
 8010592:	d001      	beq.n	8010598 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8010594:	f7f9 ff90 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8010598:	46c0      	nop			@ (mov r8, r8)
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	46c0      	nop			@ (mov r8, r8)
 80105a0:	20001eb8 	.word	0x20001eb8
 80105a4:	40004800 	.word	0x40004800

080105a8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80105ac:	4b14      	ldr	r3, [pc, #80]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105ae:	4a15      	ldr	r2, [pc, #84]	@ (8010604 <MX_USART1_UART_Init+0x5c>)
 80105b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80105b2:	4b13      	ldr	r3, [pc, #76]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105b4:	22e1      	movs	r2, #225	@ 0xe1
 80105b6:	0252      	lsls	r2, r2, #9
 80105b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80105ba:	4b11      	ldr	r3, [pc, #68]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105bc:	2200      	movs	r2, #0
 80105be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80105c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105c2:	2200      	movs	r2, #0
 80105c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80105c6:	4b0e      	ldr	r3, [pc, #56]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105c8:	2200      	movs	r2, #0
 80105ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80105cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105ce:	220c      	movs	r2, #12
 80105d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80105d2:	4b0b      	ldr	r3, [pc, #44]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105d4:	2200      	movs	r2, #0
 80105d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80105d8:	4b09      	ldr	r3, [pc, #36]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105da:	2200      	movs	r2, #0
 80105dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80105de:	4b08      	ldr	r3, [pc, #32]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80105e4:	4b06      	ldr	r3, [pc, #24]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80105ea:	4b05      	ldr	r3, [pc, #20]	@ (8010600 <MX_USART1_UART_Init+0x58>)
 80105ec:	0018      	movs	r0, r3
 80105ee:	f009 fa73 	bl	8019ad8 <HAL_UART_Init>
 80105f2:	1e03      	subs	r3, r0, #0
 80105f4:	d001      	beq.n	80105fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80105f6:	f7f9 ff5f 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80105fa:	46c0      	nop			@ (mov r8, r8)
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	20001f70 	.word	0x20001f70
 8010604:	40013800 	.word	0x40013800

08010608 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 801060c:	4b14      	ldr	r3, [pc, #80]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 801060e:	4a15      	ldr	r2, [pc, #84]	@ (8010664 <MX_USART4_UART_Init+0x5c>)
 8010610:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8010612:	4b13      	ldr	r3, [pc, #76]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 8010614:	22e1      	movs	r2, #225	@ 0xe1
 8010616:	0252      	lsls	r2, r2, #9
 8010618:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801061a:	4b11      	ldr	r3, [pc, #68]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 801061c:	2200      	movs	r2, #0
 801061e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8010620:	4b0f      	ldr	r3, [pc, #60]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 8010622:	2200      	movs	r2, #0
 8010624:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8010626:	4b0e      	ldr	r3, [pc, #56]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 8010628:	2200      	movs	r2, #0
 801062a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 801062c:	4b0c      	ldr	r3, [pc, #48]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 801062e:	220c      	movs	r2, #12
 8010630:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010632:	4b0b      	ldr	r3, [pc, #44]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 8010634:	2200      	movs	r2, #0
 8010636:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8010638:	4b09      	ldr	r3, [pc, #36]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 801063a:	2200      	movs	r2, #0
 801063c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801063e:	4b08      	ldr	r3, [pc, #32]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 8010640:	2200      	movs	r2, #0
 8010642:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010644:	4b06      	ldr	r3, [pc, #24]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 8010646:	2200      	movs	r2, #0
 8010648:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801064a:	4b05      	ldr	r3, [pc, #20]	@ (8010660 <MX_USART4_UART_Init+0x58>)
 801064c:	0018      	movs	r0, r3
 801064e:	f009 fa43 	bl	8019ad8 <HAL_UART_Init>
 8010652:	1e03      	subs	r3, r0, #0
 8010654:	d001      	beq.n	801065a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8010656:	f7f9 ff2f 	bl	800a4b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 801065a:	46c0      	nop			@ (mov r8, r8)
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	20002028 	.word	0x20002028
 8010664:	40004c00 	.word	0x40004c00

08010668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010668:	b590      	push	{r4, r7, lr}
 801066a:	b08d      	sub	sp, #52	@ 0x34
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010670:	241c      	movs	r4, #28
 8010672:	193b      	adds	r3, r7, r4
 8010674:	0018      	movs	r0, r3
 8010676:	2314      	movs	r3, #20
 8010678:	001a      	movs	r2, r3
 801067a:	2100      	movs	r1, #0
 801067c:	f012 fae0 	bl	8022c40 <memset>
  if(uartHandle->Instance==LPUART1)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a8b      	ldr	r2, [pc, #556]	@ (80108b4 <HAL_UART_MspInit+0x24c>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d129      	bne.n	80106de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801068a:	4b8b      	ldr	r3, [pc, #556]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 801068c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801068e:	4b8a      	ldr	r3, [pc, #552]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010690:	2180      	movs	r1, #128	@ 0x80
 8010692:	02c9      	lsls	r1, r1, #11
 8010694:	430a      	orrs	r2, r1
 8010696:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010698:	4b87      	ldr	r3, [pc, #540]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 801069a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069c:	4b86      	ldr	r3, [pc, #536]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 801069e:	2104      	movs	r1, #4
 80106a0:	430a      	orrs	r2, r1
 80106a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80106a4:	4b84      	ldr	r3, [pc, #528]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 80106a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a8:	2204      	movs	r2, #4
 80106aa:	4013      	ands	r3, r2
 80106ac:	61bb      	str	r3, [r7, #24]
 80106ae:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80106b0:	0021      	movs	r1, r4
 80106b2:	187b      	adds	r3, r7, r1
 80106b4:	2203      	movs	r2, #3
 80106b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106b8:	187b      	adds	r3, r7, r1
 80106ba:	2202      	movs	r2, #2
 80106bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106be:	187b      	adds	r3, r7, r1
 80106c0:	2200      	movs	r2, #0
 80106c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80106c4:	187b      	adds	r3, r7, r1
 80106c6:	2203      	movs	r2, #3
 80106c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80106ca:	187b      	adds	r3, r7, r1
 80106cc:	2206      	movs	r2, #6
 80106ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80106d0:	187b      	adds	r3, r7, r1
 80106d2:	4a7a      	ldr	r2, [pc, #488]	@ (80108bc <HAL_UART_MspInit+0x254>)
 80106d4:	0019      	movs	r1, r3
 80106d6:	0010      	movs	r0, r2
 80106d8:	f001 fe96 	bl	8012408 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80106dc:	e0e5      	b.n	80108aa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	4a77      	ldr	r2, [pc, #476]	@ (80108c0 <HAL_UART_MspInit+0x258>)
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d133      	bne.n	8010750 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80106e8:	4b73      	ldr	r3, [pc, #460]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 80106ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106ec:	4b72      	ldr	r3, [pc, #456]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 80106ee:	2180      	movs	r1, #128	@ 0x80
 80106f0:	01c9      	lsls	r1, r1, #7
 80106f2:	430a      	orrs	r2, r1
 80106f4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80106f6:	4b70      	ldr	r3, [pc, #448]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 80106f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106fa:	4b6f      	ldr	r3, [pc, #444]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 80106fc:	2101      	movs	r1, #1
 80106fe:	430a      	orrs	r2, r1
 8010700:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010702:	4b6d      	ldr	r3, [pc, #436]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010706:	2201      	movs	r2, #1
 8010708:	4013      	ands	r3, r2
 801070a:	617b      	str	r3, [r7, #20]
 801070c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801070e:	211c      	movs	r1, #28
 8010710:	187b      	adds	r3, r7, r1
 8010712:	22c0      	movs	r2, #192	@ 0xc0
 8010714:	00d2      	lsls	r2, r2, #3
 8010716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010718:	187b      	adds	r3, r7, r1
 801071a:	2202      	movs	r2, #2
 801071c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801071e:	187b      	adds	r3, r7, r1
 8010720:	2200      	movs	r2, #0
 8010722:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010724:	187b      	adds	r3, r7, r1
 8010726:	2203      	movs	r2, #3
 8010728:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 801072a:	187b      	adds	r3, r7, r1
 801072c:	2204      	movs	r2, #4
 801072e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010730:	187a      	adds	r2, r7, r1
 8010732:	23a0      	movs	r3, #160	@ 0xa0
 8010734:	05db      	lsls	r3, r3, #23
 8010736:	0011      	movs	r1, r2
 8010738:	0018      	movs	r0, r3
 801073a:	f001 fe65 	bl	8012408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 801073e:	2200      	movs	r2, #0
 8010740:	2100      	movs	r1, #0
 8010742:	201b      	movs	r0, #27
 8010744:	f001 fa0e 	bl	8011b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8010748:	201b      	movs	r0, #27
 801074a:	f001 fa20 	bl	8011b8e <HAL_NVIC_EnableIRQ>
}
 801074e:	e0ac      	b.n	80108aa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a5b      	ldr	r2, [pc, #364]	@ (80108c4 <HAL_UART_MspInit+0x25c>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d000      	beq.n	801075c <HAL_UART_MspInit+0xf4>
 801075a:	e0a6      	b.n	80108aa <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 801075c:	4b56      	ldr	r3, [pc, #344]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 801075e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010760:	4b55      	ldr	r3, [pc, #340]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010762:	2180      	movs	r1, #128	@ 0x80
 8010764:	0309      	lsls	r1, r1, #12
 8010766:	430a      	orrs	r2, r1
 8010768:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801076a:	4b53      	ldr	r3, [pc, #332]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 801076c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801076e:	4b52      	ldr	r3, [pc, #328]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010770:	2101      	movs	r1, #1
 8010772:	430a      	orrs	r2, r1
 8010774:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010776:	4b50      	ldr	r3, [pc, #320]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801077a:	2201      	movs	r2, #1
 801077c:	4013      	ands	r3, r2
 801077e:	613b      	str	r3, [r7, #16]
 8010780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010782:	4b4d      	ldr	r3, [pc, #308]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010786:	4b4c      	ldr	r3, [pc, #304]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010788:	2104      	movs	r1, #4
 801078a:	430a      	orrs	r2, r1
 801078c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801078e:	4b4a      	ldr	r3, [pc, #296]	@ (80108b8 <HAL_UART_MspInit+0x250>)
 8010790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010792:	2204      	movs	r2, #4
 8010794:	4013      	ands	r3, r2
 8010796:	60fb      	str	r3, [r7, #12]
 8010798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801079a:	241c      	movs	r4, #28
 801079c:	193b      	adds	r3, r7, r4
 801079e:	2202      	movs	r2, #2
 80107a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107a2:	193b      	adds	r3, r7, r4
 80107a4:	2202      	movs	r2, #2
 80107a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107a8:	193b      	adds	r3, r7, r4
 80107aa:	2200      	movs	r2, #0
 80107ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107ae:	193b      	adds	r3, r7, r4
 80107b0:	2203      	movs	r2, #3
 80107b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80107b4:	193b      	adds	r3, r7, r4
 80107b6:	2206      	movs	r2, #6
 80107b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80107ba:	193a      	adds	r2, r7, r4
 80107bc:	23a0      	movs	r3, #160	@ 0xa0
 80107be:	05db      	lsls	r3, r3, #23
 80107c0:	0011      	movs	r1, r2
 80107c2:	0018      	movs	r0, r3
 80107c4:	f001 fe20 	bl	8012408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80107c8:	0021      	movs	r1, r4
 80107ca:	187b      	adds	r3, r7, r1
 80107cc:	2280      	movs	r2, #128	@ 0x80
 80107ce:	00d2      	lsls	r2, r2, #3
 80107d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80107d2:	187b      	adds	r3, r7, r1
 80107d4:	2202      	movs	r2, #2
 80107d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80107d8:	187b      	adds	r3, r7, r1
 80107da:	2200      	movs	r2, #0
 80107dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80107de:	187b      	adds	r3, r7, r1
 80107e0:	2203      	movs	r2, #3
 80107e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80107e4:	187b      	adds	r3, r7, r1
 80107e6:	2206      	movs	r2, #6
 80107e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80107ea:	187b      	adds	r3, r7, r1
 80107ec:	4a33      	ldr	r2, [pc, #204]	@ (80108bc <HAL_UART_MspInit+0x254>)
 80107ee:	0019      	movs	r1, r3
 80107f0:	0010      	movs	r0, r2
 80107f2:	f001 fe09 	bl	8012408 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80107f6:	4b34      	ldr	r3, [pc, #208]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 80107f8:	4a34      	ldr	r2, [pc, #208]	@ (80108cc <HAL_UART_MspInit+0x264>)
 80107fa:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80107fc:	4b32      	ldr	r3, [pc, #200]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 80107fe:	220c      	movs	r2, #12
 8010800:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010802:	4b31      	ldr	r3, [pc, #196]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010804:	2200      	movs	r2, #0
 8010806:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8010808:	4b2f      	ldr	r3, [pc, #188]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 801080a:	2200      	movs	r2, #0
 801080c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 801080e:	4b2e      	ldr	r3, [pc, #184]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010810:	2280      	movs	r2, #128	@ 0x80
 8010812:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010814:	4b2c      	ldr	r3, [pc, #176]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010816:	2200      	movs	r2, #0
 8010818:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801081a:	4b2b      	ldr	r3, [pc, #172]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 801081c:	2200      	movs	r2, #0
 801081e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8010820:	4b29      	ldr	r3, [pc, #164]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010822:	2220      	movs	r2, #32
 8010824:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8010826:	4b28      	ldr	r3, [pc, #160]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010828:	2200      	movs	r2, #0
 801082a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 801082c:	4b26      	ldr	r3, [pc, #152]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 801082e:	0018      	movs	r0, r3
 8010830:	f001 f9ce 	bl	8011bd0 <HAL_DMA_Init>
 8010834:	1e03      	subs	r3, r0, #0
 8010836:	d001      	beq.n	801083c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8010838:	f7f9 fe3e 	bl	800a4b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	4a22      	ldr	r2, [pc, #136]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010840:	675a      	str	r2, [r3, #116]	@ 0x74
 8010842:	4b21      	ldr	r3, [pc, #132]	@ (80108c8 <HAL_UART_MspInit+0x260>)
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8010848:	4b21      	ldr	r3, [pc, #132]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 801084a:	4a22      	ldr	r2, [pc, #136]	@ (80108d4 <HAL_UART_MspInit+0x26c>)
 801084c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 801084e:	4b20      	ldr	r3, [pc, #128]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010850:	220c      	movs	r2, #12
 8010852:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010854:	4b1e      	ldr	r3, [pc, #120]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010856:	2210      	movs	r2, #16
 8010858:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801085a:	4b1d      	ldr	r3, [pc, #116]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 801085c:	2200      	movs	r2, #0
 801085e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8010860:	4b1b      	ldr	r3, [pc, #108]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010862:	2280      	movs	r2, #128	@ 0x80
 8010864:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010866:	4b1a      	ldr	r3, [pc, #104]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010868:	2200      	movs	r2, #0
 801086a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801086c:	4b18      	ldr	r3, [pc, #96]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 801086e:	2200      	movs	r2, #0
 8010870:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8010872:	4b17      	ldr	r3, [pc, #92]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010874:	2200      	movs	r2, #0
 8010876:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8010878:	4b15      	ldr	r3, [pc, #84]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 801087a:	2200      	movs	r2, #0
 801087c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 801087e:	4b14      	ldr	r3, [pc, #80]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010880:	0018      	movs	r0, r3
 8010882:	f001 f9a5 	bl	8011bd0 <HAL_DMA_Init>
 8010886:	1e03      	subs	r3, r0, #0
 8010888:	d001      	beq.n	801088e <HAL_UART_MspInit+0x226>
      Error_Handler();
 801088a:	f7f9 fe15 	bl	800a4b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4a0f      	ldr	r2, [pc, #60]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010892:	671a      	str	r2, [r3, #112]	@ 0x70
 8010894:	4b0e      	ldr	r3, [pc, #56]	@ (80108d0 <HAL_UART_MspInit+0x268>)
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 801089a:	2200      	movs	r2, #0
 801089c:	2100      	movs	r1, #0
 801089e:	200e      	movs	r0, #14
 80108a0:	f001 f960 	bl	8011b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80108a4:	200e      	movs	r0, #14
 80108a6:	f001 f972 	bl	8011b8e <HAL_NVIC_EnableIRQ>
}
 80108aa:	46c0      	nop			@ (mov r8, r8)
 80108ac:	46bd      	mov	sp, r7
 80108ae:	b00d      	add	sp, #52	@ 0x34
 80108b0:	bd90      	pop	{r4, r7, pc}
 80108b2:	46c0      	nop			@ (mov r8, r8)
 80108b4:	40004800 	.word	0x40004800
 80108b8:	40021000 	.word	0x40021000
 80108bc:	50000800 	.word	0x50000800
 80108c0:	40013800 	.word	0x40013800
 80108c4:	40004c00 	.word	0x40004c00
 80108c8:	200020e0 	.word	0x200020e0
 80108cc:	4002006c 	.word	0x4002006c
 80108d0:	20002128 	.word	0x20002128
 80108d4:	40020080 	.word	0x40020080

080108d8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80108d8:	b580      	push	{r7, lr}
 80108da:	b086      	sub	sp, #24
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80108e0:	f000 fc9c 	bl	801121c <HAL_GetTick>
 80108e4:	0003      	movs	r3, r0
 80108e6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80108e8:	4b1c      	ldr	r3, [pc, #112]	@ (801095c <TimestampIsReached+0x84>)
 80108ea:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80108ec:	697a      	ldr	r2, [r7, #20]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d307      	bcc.n	8010904 <TimestampIsReached+0x2c>
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	693a      	ldr	r2, [r7, #16]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d901      	bls.n	8010904 <TimestampIsReached+0x2c>
 8010900:	2201      	movs	r2, #1
 8010902:	e000      	b.n	8010906 <TimestampIsReached+0x2e>
 8010904:	2200      	movs	r2, #0
 8010906:	230f      	movs	r3, #15
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	701a      	strb	r2, [r3, #0]
 801090c:	781a      	ldrb	r2, [r3, #0]
 801090e:	2101      	movs	r1, #1
 8010910:	400a      	ands	r2, r1
 8010912:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8010914:	697a      	ldr	r2, [r7, #20]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	429a      	cmp	r2, r3
 801091a:	d207      	bcs.n	801092c <TimestampIsReached+0x54>
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	1ad3      	subs	r3, r2, r3
 8010922:	693a      	ldr	r2, [r7, #16]
 8010924:	429a      	cmp	r2, r3
 8010926:	d201      	bcs.n	801092c <TimestampIsReached+0x54>
 8010928:	2201      	movs	r2, #1
 801092a:	e000      	b.n	801092e <TimestampIsReached+0x56>
 801092c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 801092e:	200e      	movs	r0, #14
 8010930:	183b      	adds	r3, r7, r0
 8010932:	701a      	strb	r2, [r3, #0]
 8010934:	781a      	ldrb	r2, [r3, #0]
 8010936:	2101      	movs	r1, #1
 8010938:	400a      	ands	r2, r1
 801093a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 801093c:	230f      	movs	r3, #15
 801093e:	18fb      	adds	r3, r7, r3
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d103      	bne.n	801094e <TimestampIsReached+0x76>
 8010946:	183b      	adds	r3, r7, r0
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d001      	beq.n	8010952 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 801094e:	2301      	movs	r3, #1
 8010950:	e000      	b.n	8010954 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8010952:	2300      	movs	r3, #0
}
 8010954:	0018      	movs	r0, r3
 8010956:	46bd      	mov	sp, r7
 8010958:	b006      	add	sp, #24
 801095a:	bd80      	pop	{r7, pc}
 801095c:	7fffffff 	.word	0x7fffffff

08010960 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8010968:	f000 fc58 	bl	801121c <HAL_GetTick>
 801096c:	0002      	movs	r2, r0
 801096e:	4904      	ldr	r1, [pc, #16]	@ (8010980 <AddTimestamp+0x20>)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	0018      	movs	r0, r3
 8010974:	f011 fffe 	bl	8022974 <siprintf>
}
 8010978:	46c0      	nop			@ (mov r8, r8)
 801097a:	46bd      	mov	sp, r7
 801097c:	b002      	add	sp, #8
 801097e:	bd80      	pop	{r7, pc}
 8010980:	08028a40 	.word	0x08028a40

08010984 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8010984:	b40c      	push	{r2, r3}
 8010986:	b5b0      	push	{r4, r5, r7, lr}
 8010988:	b0a4      	sub	sp, #144	@ 0x90
 801098a:	af00      	add	r7, sp, #0
 801098c:	0002      	movs	r2, r0
 801098e:	6039      	str	r1, [r7, #0]
 8010990:	1dfb      	adds	r3, r7, #7
 8010992:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8010994:	4b23      	ldr	r3, [pc, #140]	@ (8010a24 <CreateLine+0xa0>)
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	1dfa      	adds	r2, r7, #7
 801099a:	7812      	ldrb	r2, [r2, #0]
 801099c:	429a      	cmp	r2, r3
 801099e:	d839      	bhi.n	8010a14 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80109a0:	683a      	ldr	r2, [r7, #0]
 80109a2:	4921      	ldr	r1, [pc, #132]	@ (8010a28 <CreateLine+0xa4>)
 80109a4:	240c      	movs	r4, #12
 80109a6:	193b      	adds	r3, r7, r4
 80109a8:	0018      	movs	r0, r3
 80109aa:	f011 ffe3 	bl	8022974 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80109ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010a24 <CreateLine+0xa0>)
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d909      	bls.n	80109ca <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80109b6:	193b      	adds	r3, r7, r4
 80109b8:	0018      	movs	r0, r3
 80109ba:	f7ef fbd7 	bl	800016c <strlen>
 80109be:	0002      	movs	r2, r0
 80109c0:	193b      	adds	r3, r7, r4
 80109c2:	189b      	adds	r3, r3, r2
 80109c4:	0018      	movs	r0, r3
 80109c6:	f7ff ffcb 	bl	8010960 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80109ca:	240c      	movs	r4, #12
 80109cc:	193b      	adds	r3, r7, r4
 80109ce:	0018      	movs	r0, r3
 80109d0:	f7ef fbcc 	bl	800016c <strlen>
 80109d4:	0003      	movs	r3, r0
 80109d6:	218c      	movs	r1, #140	@ 0x8c
 80109d8:	187a      	adds	r2, r7, r1
 80109da:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80109dc:	239c      	movs	r3, #156	@ 0x9c
 80109de:	2508      	movs	r5, #8
 80109e0:	195b      	adds	r3, r3, r5
 80109e2:	19db      	adds	r3, r3, r7
 80109e4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80109e6:	193a      	adds	r2, r7, r4
 80109e8:	187b      	adds	r3, r7, r1
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	18d0      	adds	r0, r2, r3
 80109ee:	187b      	adds	r3, r7, r1
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2280      	movs	r2, #128	@ 0x80
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	0019      	movs	r1, r3
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	2298      	movs	r2, #152	@ 0x98
 80109fc:	1952      	adds	r2, r2, r5
 80109fe:	19d2      	adds	r2, r2, r7
 8010a00:	6812      	ldr	r2, [r2, #0]
 8010a02:	f012 f84f 	bl	8022aa4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8010a06:	193a      	adds	r2, r7, r4
 8010a08:	4b08      	ldr	r3, [pc, #32]	@ (8010a2c <CreateLine+0xa8>)
 8010a0a:	0011      	movs	r1, r2
 8010a0c:	0018      	movs	r0, r3
 8010a0e:	f011 ff41 	bl	8022894 <iprintf>
 8010a12:	e000      	b.n	8010a16 <CreateLine+0x92>
    return;
 8010a14:	46c0      	nop			@ (mov r8, r8)
}
 8010a16:	46bd      	mov	sp, r7
 8010a18:	b024      	add	sp, #144	@ 0x90
 8010a1a:	bcb0      	pop	{r4, r5, r7}
 8010a1c:	bc08      	pop	{r3}
 8010a1e:	b002      	add	sp, #8
 8010a20:	4718      	bx	r3
 8010a22:	46c0      	nop			@ (mov r8, r8)
 8010a24:	200000e8 	.word	0x200000e8
 8010a28:	08028a4c 	.word	0x08028a4c
 8010a2c:	08028a50 	.word	0x08028a50

08010a30 <_write>:

int _write(int fd, void *buf, size_t count) {
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	68b9      	ldr	r1, [r7, #8]
 8010a42:	4804      	ldr	r0, [pc, #16]	@ (8010a54 <_write+0x24>)
 8010a44:	2364      	movs	r3, #100	@ 0x64
 8010a46:	f009 f8ad 	bl	8019ba4 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8010a4a:	687b      	ldr	r3, [r7, #4]
}
 8010a4c:	0018      	movs	r0, r3
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	b004      	add	sp, #16
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	20001f70 	.word	0x20001f70

08010a58 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	0002      	movs	r2, r0
 8010a60:	1dfb      	adds	r3, r7, #7
 8010a62:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8010a64:	4b03      	ldr	r3, [pc, #12]	@ (8010a74 <SetVerboseLevel+0x1c>)
 8010a66:	1dfa      	adds	r2, r7, #7
 8010a68:	7812      	ldrb	r2, [r2, #0]
 8010a6a:	701a      	strb	r2, [r3, #0]
}
 8010a6c:	46c0      	nop			@ (mov r8, r8)
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	b002      	add	sp, #8
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	200000e8 	.word	0x200000e8

08010a78 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8010a7c:	4b02      	ldr	r3, [pc, #8]	@ (8010a88 <GetVerboseLevel+0x10>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	0018      	movs	r0, r3
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	46c0      	nop			@ (mov r8, r8)
 8010a88:	200000e8 	.word	0x200000e8

08010a8c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8010a92:	4a0f      	ldr	r2, [pc, #60]	@ (8010ad0 <BinaryReleaseInfo+0x44>)
 8010a94:	4b0f      	ldr	r3, [pc, #60]	@ (8010ad4 <BinaryReleaseInfo+0x48>)
 8010a96:	0019      	movs	r1, r3
 8010a98:	2002      	movs	r0, #2
 8010a9a:	f7ff ff73 	bl	8010984 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8010a9e:	480e      	ldr	r0, [pc, #56]	@ (8010ad8 <BinaryReleaseInfo+0x4c>)
 8010aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8010adc <BinaryReleaseInfo+0x50>)
 8010aa2:	490c      	ldr	r1, [pc, #48]	@ (8010ad4 <BinaryReleaseInfo+0x48>)
 8010aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8010ae0 <BinaryReleaseInfo+0x54>)
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	0003      	movs	r3, r0
 8010aaa:	2002      	movs	r0, #2
 8010aac:	f7ff ff6a 	bl	8010984 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8010ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8010ae4 <BinaryReleaseInfo+0x58>)
 8010ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8010ae8 <BinaryReleaseInfo+0x5c>)
 8010ab4:	4907      	ldr	r1, [pc, #28]	@ (8010ad4 <BinaryReleaseInfo+0x48>)
 8010ab6:	2002      	movs	r0, #2
 8010ab8:	f7ff ff64 	bl	8010984 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8010abc:	4b0b      	ldr	r3, [pc, #44]	@ (8010aec <BinaryReleaseInfo+0x60>)
 8010abe:	4a0c      	ldr	r2, [pc, #48]	@ (8010af0 <BinaryReleaseInfo+0x64>)
 8010ac0:	4904      	ldr	r1, [pc, #16]	@ (8010ad4 <BinaryReleaseInfo+0x48>)
 8010ac2:	2002      	movs	r0, #2
 8010ac4:	f7ff ff5e 	bl	8010984 <CreateLine>
}
 8010ac8:	46c0      	nop			@ (mov r8, r8)
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	46c0      	nop			@ (mov r8, r8)
 8010ad0:	08028a58 	.word	0x08028a58
 8010ad4:	08028a84 	.word	0x08028a84
 8010ad8:	08028a88 	.word	0x08028a88
 8010adc:	08028a94 	.word	0x08028a94
 8010ae0:	08028aa8 	.word	0x08028aa8
 8010ae4:	08028ab4 	.word	0x08028ab4
 8010ae8:	08028ac0 	.word	0x08028ac0
 8010aec:	08028ac8 	.word	0x08028ac8
 8010af0:	08028ad0 	.word	0x08028ad0

08010af4 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	68ba      	ldr	r2, [r7, #8]
 8010b04:	68f9      	ldr	r1, [r7, #12]
 8010b06:	4803      	ldr	r0, [pc, #12]	@ (8010b14 <errorHandler+0x20>)
 8010b08:	f011 fec4 	bl	8022894 <iprintf>
//    while (true)
//    {
//    }
}
 8010b0c:	46c0      	nop			@ (mov r8, r8)
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	b004      	add	sp, #16
 8010b12:	bd80      	pop	{r7, pc}
 8010b14:	08028ae8 	.word	0x08028ae8

08010b18 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8010b18:	b590      	push	{r4, r7, lr}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6039      	str	r1, [r7, #0]
 8010b20:	0011      	movs	r1, r2
 8010b22:	1dfb      	adds	r3, r7, #7
 8010b24:	1c02      	adds	r2, r0, #0
 8010b26:	701a      	strb	r2, [r3, #0]
 8010b28:	1dbb      	adds	r3, r7, #6
 8010b2a:	1c0a      	adds	r2, r1, #0
 8010b2c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8010b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8010b58 <ReadRegister+0x40>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00a      	beq.n	8010b4c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8010b36:	4b08      	ldr	r3, [pc, #32]	@ (8010b58 <ReadRegister+0x40>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	1dba      	adds	r2, r7, #6
 8010b3c:	7814      	ldrb	r4, [r2, #0]
 8010b3e:	6839      	ldr	r1, [r7, #0]
 8010b40:	1dfa      	adds	r2, r7, #7
 8010b42:	7810      	ldrb	r0, [r2, #0]
 8010b44:	0022      	movs	r2, r4
 8010b46:	4798      	blx	r3
 8010b48:	0003      	movs	r3, r0
 8010b4a:	e000      	b.n	8010b4e <ReadRegister+0x36>
	}
	return false;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	0018      	movs	r0, r3
 8010b50:	46bd      	mov	sp, r7
 8010b52:	b003      	add	sp, #12
 8010b54:	bd90      	pop	{r4, r7, pc}
 8010b56:	46c0      	nop			@ (mov r8, r8)
 8010b58:	20002178 	.word	0x20002178

08010b5c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8010b5c:	b590      	push	{r4, r7, lr}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6039      	str	r1, [r7, #0]
 8010b64:	0011      	movs	r1, r2
 8010b66:	1dfb      	adds	r3, r7, #7
 8010b68:	1c02      	adds	r2, r0, #0
 8010b6a:	701a      	strb	r2, [r3, #0]
 8010b6c:	1dbb      	adds	r3, r7, #6
 8010b6e:	1c0a      	adds	r2, r1, #0
 8010b70:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010b72:	4b0a      	ldr	r3, [pc, #40]	@ (8010b9c <WriteRegister+0x40>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00a      	beq.n	8010b90 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8010b7a:	4b08      	ldr	r3, [pc, #32]	@ (8010b9c <WriteRegister+0x40>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	1dba      	adds	r2, r7, #6
 8010b80:	7814      	ldrb	r4, [r2, #0]
 8010b82:	6839      	ldr	r1, [r7, #0]
 8010b84:	1dfa      	adds	r2, r7, #7
 8010b86:	7810      	ldrb	r0, [r2, #0]
 8010b88:	0022      	movs	r2, r4
 8010b8a:	4798      	blx	r3
 8010b8c:	0003      	movs	r3, r0
 8010b8e:	e000      	b.n	8010b92 <WriteRegister+0x36>
  }
  return false;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	0018      	movs	r0, r3
 8010b94:	46bd      	mov	sp, r7
 8010b96:	b003      	add	sp, #12
 8010b98:	bd90      	pop	{r4, r7, pc}
 8010b9a:	46c0      	nop			@ (mov r8, r8)
 8010b9c:	2000217c 	.word	0x2000217c

08010ba0 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	000a      	movs	r2, r1
 8010baa:	1cfb      	adds	r3, r7, #3
 8010bac:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8010bae:	230f      	movs	r3, #15
 8010bb0:	18fb      	adds	r3, r7, r3
 8010bb2:	22ff      	movs	r2, #255	@ 0xff
 8010bb4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8010bb6:	230e      	movs	r3, #14
 8010bb8:	18fb      	adds	r3, r7, r3
 8010bba:	2200      	movs	r2, #0
 8010bbc:	701a      	strb	r2, [r3, #0]
 8010bbe:	e037      	b.n	8010c30 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010bc0:	230e      	movs	r3, #14
 8010bc2:	18fb      	adds	r3, r7, r3
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	18d3      	adds	r3, r2, r3
 8010bca:	7819      	ldrb	r1, [r3, #0]
 8010bcc:	220f      	movs	r2, #15
 8010bce:	18bb      	adds	r3, r7, r2
 8010bd0:	18ba      	adds	r2, r7, r2
 8010bd2:	7812      	ldrb	r2, [r2, #0]
 8010bd4:	404a      	eors	r2, r1
 8010bd6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010bd8:	230d      	movs	r3, #13
 8010bda:	18fb      	adds	r3, r7, r3
 8010bdc:	2200      	movs	r2, #0
 8010bde:	701a      	strb	r2, [r3, #0]
 8010be0:	e01b      	b.n	8010c1a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8010be2:	210f      	movs	r1, #15
 8010be4:	187b      	adds	r3, r7, r1
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	b25b      	sxtb	r3, r3
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	da09      	bge.n	8010c02 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8010bee:	187b      	adds	r3, r7, r1
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	b25b      	sxtb	r3, r3
 8010bf6:	2231      	movs	r2, #49	@ 0x31
 8010bf8:	4053      	eors	r3, r2
 8010bfa:	b25a      	sxtb	r2, r3
 8010bfc:	187b      	adds	r3, r7, r1
 8010bfe:	701a      	strb	r2, [r3, #0]
 8010c00:	e005      	b.n	8010c0e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8010c02:	230f      	movs	r3, #15
 8010c04:	18fa      	adds	r2, r7, r3
 8010c06:	18fb      	adds	r3, r7, r3
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	18db      	adds	r3, r3, r3
 8010c0c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8010c0e:	210d      	movs	r1, #13
 8010c10:	187b      	adds	r3, r7, r1
 8010c12:	781a      	ldrb	r2, [r3, #0]
 8010c14:	187b      	adds	r3, r7, r1
 8010c16:	3201      	adds	r2, #1
 8010c18:	701a      	strb	r2, [r3, #0]
 8010c1a:	230d      	movs	r3, #13
 8010c1c:	18fb      	adds	r3, r7, r3
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	2b07      	cmp	r3, #7
 8010c22:	d9de      	bls.n	8010be2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8010c24:	210e      	movs	r1, #14
 8010c26:	187b      	adds	r3, r7, r1
 8010c28:	781a      	ldrb	r2, [r3, #0]
 8010c2a:	187b      	adds	r3, r7, r1
 8010c2c:	3201      	adds	r2, #1
 8010c2e:	701a      	strb	r2, [r3, #0]
 8010c30:	230e      	movs	r3, #14
 8010c32:	18fa      	adds	r2, r7, r3
 8010c34:	1cfb      	adds	r3, r7, #3
 8010c36:	7812      	ldrb	r2, [r2, #0]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d3c0      	bcc.n	8010bc0 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8010c3e:	230f      	movs	r3, #15
 8010c40:	18fb      	adds	r3, r7, r3
 8010c42:	781b      	ldrb	r3, [r3, #0]
}
 8010c44:	0018      	movs	r0, r3
 8010c46:	46bd      	mov	sp, r7
 8010c48:	b004      	add	sp, #16
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8010c56:	4b0a      	ldr	r3, [pc, #40]	@ (8010c80 <HIDS_Init+0x34>)
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8010c5c:	4b09      	ldr	r3, [pc, #36]	@ (8010c84 <HIDS_Init+0x38>)
 8010c5e:	683a      	ldr	r2, [r7, #0]
 8010c60:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8010c62:	4b09      	ldr	r3, [pc, #36]	@ (8010c88 <HIDS_Init+0x3c>)
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	0018      	movs	r0, r3
 8010c68:	f000 f840 	bl	8010cec <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8010c6c:	4b07      	ldr	r3, [pc, #28]	@ (8010c8c <HIDS_Init+0x40>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	0018      	movs	r0, r3
 8010c72:	f000 f82b 	bl	8010ccc <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8010c76:	46c0      	nop			@ (mov r8, r8)
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	b002      	add	sp, #8
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	46c0      	nop			@ (mov r8, r8)
 8010c80:	20002178 	.word	0x20002178
 8010c84:	2000217c 	.word	0x2000217c
 8010c88:	200000ea 	.word	0x200000ea
 8010c8c:	200000e9 	.word	0x200000e9

08010c90 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8010c90:	b580      	push	{r7, lr}
 8010c92:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8010c94:	f000 fac2 	bl	801121c <HAL_GetTick>
 8010c98:	0002      	movs	r2, r0
 8010c9a:	4b08      	ldr	r3, [pc, #32]	@ (8010cbc <HIDS_StartMeasurement+0x2c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	18d2      	adds	r2, r2, r3
 8010ca0:	4b07      	ldr	r3, [pc, #28]	@ (8010cc0 <HIDS_StartMeasurement+0x30>)
 8010ca2:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8010ca4:	4b07      	ldr	r3, [pc, #28]	@ (8010cc4 <HIDS_StartMeasurement+0x34>)
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	0019      	movs	r1, r3
 8010caa:	2044      	movs	r0, #68	@ 0x44
 8010cac:	f7ff ff56 	bl	8010b5c <WriteRegister>
  MeasurementDone = false;
 8010cb0:	4b05      	ldr	r3, [pc, #20]	@ (8010cc8 <HIDS_StartMeasurement+0x38>)
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	701a      	strb	r2, [r3, #0]
}
 8010cb6:	46c0      	nop			@ (mov r8, r8)
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	200000f0 	.word	0x200000f0
 8010cc0:	200000ec 	.word	0x200000ec
 8010cc4:	200000ea 	.word	0x200000ea
 8010cc8:	2000218e 	.word	0x2000218e

08010ccc <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	0002      	movs	r2, r0
 8010cd4:	1dfb      	adds	r3, r7, #7
 8010cd6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8010cd8:	4b03      	ldr	r3, [pc, #12]	@ (8010ce8 <HIDS_SetHeaterMode+0x1c>)
 8010cda:	1dfa      	adds	r2, r7, #7
 8010cdc:	7812      	ldrb	r2, [r2, #0]
 8010cde:	701a      	strb	r2, [r3, #0]
}
 8010ce0:	46c0      	nop			@ (mov r8, r8)
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	b002      	add	sp, #8
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	200000e9 	.word	0x200000e9

08010cec <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	0002      	movs	r2, r0
 8010cf4:	1dfb      	adds	r3, r7, #7
 8010cf6:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8010cf8:	4b03      	ldr	r3, [pc, #12]	@ (8010d08 <HIDS_SetMeasurementMode+0x1c>)
 8010cfa:	1dfa      	adds	r2, r7, #7
 8010cfc:	7812      	ldrb	r2, [r2, #0]
 8010cfe:	701a      	strb	r2, [r3, #0]
}
 8010d00:	46c0      	nop			@ (mov r8, r8)
 8010d02:	46bd      	mov	sp, r7
 8010d04:	b002      	add	sp, #8
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	200000ea 	.word	0x200000ea

08010d0c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8010d14:	f000 fa82 	bl	801121c <HAL_GetTick>
 8010d18:	0002      	movs	r2, r0
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	18d2      	adds	r2, r2, r3
 8010d1e:	4b03      	ldr	r3, [pc, #12]	@ (8010d2c <setHIDSTimeStamp+0x20>)
 8010d20:	601a      	str	r2, [r3, #0]
}
 8010d22:	46c0      	nop			@ (mov r8, r8)
 8010d24:	46bd      	mov	sp, r7
 8010d26:	b002      	add	sp, #8
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	46c0      	nop			@ (mov r8, r8)
 8010d2c:	20002190 	.word	0x20002190

08010d30 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8010d30:	b590      	push	{r4, r7, lr}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	781a      	ldrb	r2, [r3, #0]
 8010d3c:	210c      	movs	r1, #12
 8010d3e:	187b      	adds	r3, r7, r1
 8010d40:	701a      	strb	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	785a      	ldrb	r2, [r3, #1]
 8010d46:	187b      	adds	r3, r7, r1
 8010d48:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8010d4a:	240f      	movs	r4, #15
 8010d4c:	193b      	adds	r3, r7, r4
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	7892      	ldrb	r2, [r2, #2]
 8010d52:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8010d54:	187b      	adds	r3, r7, r1
 8010d56:	2102      	movs	r1, #2
 8010d58:	0018      	movs	r0, r3
 8010d5a:	f7ff ff21 	bl	8010ba0 <CalculateCRC>
 8010d5e:	0003      	movs	r3, r0
 8010d60:	001a      	movs	r2, r3
 8010d62:	193b      	adds	r3, r7, r4
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d007      	beq.n	8010d7a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8010d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8010dd4 <CheckCRC+0xa4>)
 8010d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8010dd8 <CheckCRC+0xa8>)
 8010d6e:	0019      	movs	r1, r3
 8010d70:	2001      	movs	r0, #1
 8010d72:	f7ff fe07 	bl	8010984 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8010d76:	2300      	movs	r3, #0
 8010d78:	e027      	b.n	8010dca <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	78da      	ldrb	r2, [r3, #3]
 8010d7e:	2108      	movs	r1, #8
 8010d80:	187b      	adds	r3, r7, r1
 8010d82:	701a      	strb	r2, [r3, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	791a      	ldrb	r2, [r3, #4]
 8010d88:	187b      	adds	r3, r7, r1
 8010d8a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8010d8c:	240e      	movs	r4, #14
 8010d8e:	193b      	adds	r3, r7, r4
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	7952      	ldrb	r2, [r2, #5]
 8010d94:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8010d96:	187b      	adds	r3, r7, r1
 8010d98:	2102      	movs	r1, #2
 8010d9a:	0018      	movs	r0, r3
 8010d9c:	f7ff ff00 	bl	8010ba0 <CalculateCRC>
 8010da0:	0003      	movs	r3, r0
 8010da2:	001a      	movs	r2, r3
 8010da4:	193b      	adds	r3, r7, r4
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d00d      	beq.n	8010dc8 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8010dac:	4a0b      	ldr	r2, [pc, #44]	@ (8010ddc <CheckCRC+0xac>)
 8010dae:	4b0a      	ldr	r3, [pc, #40]	@ (8010dd8 <CheckCRC+0xa8>)
 8010db0:	0019      	movs	r1, r3
 8010db2:	2001      	movs	r0, #1
 8010db4:	f7ff fde6 	bl	8010984 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8010db8:	4a09      	ldr	r2, [pc, #36]	@ (8010de0 <CheckCRC+0xb0>)
 8010dba:	4b0a      	ldr	r3, [pc, #40]	@ (8010de4 <CheckCRC+0xb4>)
 8010dbc:	217d      	movs	r1, #125	@ 0x7d
 8010dbe:	0018      	movs	r0, r3
 8010dc0:	f7ff fe98 	bl	8010af4 <errorHandler>
		return false;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	e000      	b.n	8010dca <CheckCRC+0x9a>
	}
	return true;
 8010dc8:	2301      	movs	r3, #1
}
 8010dca:	0018      	movs	r0, r3
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	b005      	add	sp, #20
 8010dd0:	bd90      	pop	{r4, r7, pc}
 8010dd2:	46c0      	nop			@ (mov r8, r8)
 8010dd4:	08028b34 	.word	0x08028b34
 8010dd8:	08028b5c 	.word	0x08028b5c
 8010ddc:	08028b60 	.word	0x08028b60
 8010de0:	08028b8c 	.word	0x08028b8c
 8010de4:	080291a4 	.word	0x080291a4

08010de8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b084      	sub	sp, #16
 8010dec:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8010dee:	1dbb      	adds	r3, r7, #6
 8010df0:	2289      	movs	r2, #137	@ 0x89
 8010df2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8010df4:	1dbb      	adds	r3, r7, #6
 8010df6:	2201      	movs	r2, #1
 8010df8:	0019      	movs	r1, r3
 8010dfa:	2044      	movs	r0, #68	@ 0x44
 8010dfc:	f7ff feae 	bl	8010b5c <WriteRegister>
	HAL_Delay(30);
 8010e00:	201e      	movs	r0, #30
 8010e02:	f000 fa15 	bl	8011230 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8010e06:	4b14      	ldr	r3, [pc, #80]	@ (8010e58 <HIDS_DeviceConnected+0x70>)
 8010e08:	2206      	movs	r2, #6
 8010e0a:	0019      	movs	r1, r3
 8010e0c:	2044      	movs	r0, #68	@ 0x44
 8010e0e:	f7ff fe83 	bl	8010b18 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8010e12:	1dfb      	adds	r3, r7, #7
 8010e14:	2200      	movs	r2, #0
 8010e16:	701a      	strb	r2, [r3, #0]
 8010e18:	e011      	b.n	8010e3e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8010e1a:	1dfb      	adds	r3, r7, #7
 8010e1c:	7818      	ldrb	r0, [r3, #0]
 8010e1e:	1dfb      	adds	r3, r7, #7
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	4a0d      	ldr	r2, [pc, #52]	@ (8010e58 <HIDS_DeviceConnected+0x70>)
 8010e24:	5cd3      	ldrb	r3, [r2, r3]
 8010e26:	4a0d      	ldr	r2, [pc, #52]	@ (8010e5c <HIDS_DeviceConnected+0x74>)
 8010e28:	490d      	ldr	r1, [pc, #52]	@ (8010e60 <HIDS_DeviceConnected+0x78>)
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	0003      	movs	r3, r0
 8010e2e:	2002      	movs	r0, #2
 8010e30:	f7ff fda8 	bl	8010984 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8010e34:	1dfb      	adds	r3, r7, #7
 8010e36:	781a      	ldrb	r2, [r3, #0]
 8010e38:	1dfb      	adds	r3, r7, #7
 8010e3a:	3201      	adds	r2, #1
 8010e3c:	701a      	strb	r2, [r3, #0]
 8010e3e:	1dfb      	adds	r3, r7, #7
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	2b05      	cmp	r3, #5
 8010e44:	d9e9      	bls.n	8010e1a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8010e46:	4b04      	ldr	r3, [pc, #16]	@ (8010e58 <HIDS_DeviceConnected+0x70>)
 8010e48:	0018      	movs	r0, r3
 8010e4a:	f7ff ff71 	bl	8010d30 <CheckCRC>
 8010e4e:	0003      	movs	r3, r0
}
 8010e50:	0018      	movs	r0, r3
 8010e52:	46bd      	mov	sp, r7
 8010e54:	b002      	add	sp, #8
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	20002180 	.word	0x20002180
 8010e5c:	08028ba4 	.word	0x08028ba4
 8010e60:	08028b30 	.word	0x08028b30

08010e64 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8010e64:	b580      	push	{r7, lr}
 8010e66:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8010e68:	4b04      	ldr	r3, [pc, #16]	@ (8010e7c <HIDS_MeasurementReady+0x18>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	0018      	movs	r0, r3
 8010e6e:	f7ff fd33 	bl	80108d8 <TimestampIsReached>
 8010e72:	0003      	movs	r3, r0
}
 8010e74:	0018      	movs	r0, r3
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	46c0      	nop			@ (mov r8, r8)
 8010e7c:	200000ec 	.word	0x200000ec

08010e80 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8010e8a:	4b41      	ldr	r3, [pc, #260]	@ (8010f90 <HIDS_GetMeasurementValues+0x110>)
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d001      	beq.n	8010e96 <HIDS_GetMeasurementValues+0x16>
 8010e92:	2301      	movs	r3, #1
 8010e94:	e077      	b.n	8010f86 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8010e96:	f7ff ffe5 	bl	8010e64 <HIDS_MeasurementReady>
 8010e9a:	0003      	movs	r3, r0
 8010e9c:	001a      	movs	r2, r3
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	4053      	eors	r3, r2
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d001      	beq.n	8010eac <HIDS_GetMeasurementValues+0x2c>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	e06c      	b.n	8010f86 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8010eac:	4b39      	ldr	r3, [pc, #228]	@ (8010f94 <HIDS_GetMeasurementValues+0x114>)
 8010eae:	2206      	movs	r2, #6
 8010eb0:	0019      	movs	r1, r3
 8010eb2:	2044      	movs	r0, #68	@ 0x44
 8010eb4:	f7ff fe30 	bl	8010b18 <ReadRegister>
 8010eb8:	0003      	movs	r3, r0
 8010eba:	001a      	movs	r2, r3
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	4053      	eors	r3, r2
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d005      	beq.n	8010ed2 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8010ec6:	4a34      	ldr	r2, [pc, #208]	@ (8010f98 <HIDS_GetMeasurementValues+0x118>)
 8010ec8:	4b34      	ldr	r3, [pc, #208]	@ (8010f9c <HIDS_GetMeasurementValues+0x11c>)
 8010eca:	0019      	movs	r1, r3
 8010ecc:	2001      	movs	r0, #1
 8010ece:	f7ff fd59 	bl	8010984 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8010ed2:	4b30      	ldr	r3, [pc, #192]	@ (8010f94 <HIDS_GetMeasurementValues+0x114>)
 8010ed4:	0018      	movs	r0, r3
 8010ed6:	f7ff ff2b 	bl	8010d30 <CheckCRC>
 8010eda:	0003      	movs	r3, r0
 8010edc:	001a      	movs	r2, r3
 8010ede:	2301      	movs	r3, #1
 8010ee0:	4053      	eors	r3, r2
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d001      	beq.n	8010eec <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	e04c      	b.n	8010f86 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8010eec:	4b29      	ldr	r3, [pc, #164]	@ (8010f94 <HIDS_GetMeasurementValues+0x114>)
 8010eee:	781b      	ldrb	r3, [r3, #0]
 8010ef0:	021b      	lsls	r3, r3, #8
 8010ef2:	4a28      	ldr	r2, [pc, #160]	@ (8010f94 <HIDS_GetMeasurementValues+0x114>)
 8010ef4:	7852      	ldrb	r2, [r2, #1]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	22af      	movs	r2, #175	@ 0xaf
 8010efa:	4353      	muls	r3, r2
 8010efc:	0018      	movs	r0, r3
 8010efe:	f7f2 fa5f 	bl	80033c0 <__aeabi_i2d>
 8010f02:	2200      	movs	r2, #0
 8010f04:	4b26      	ldr	r3, [pc, #152]	@ (8010fa0 <HIDS_GetMeasurementValues+0x120>)
 8010f06:	f7f0 ff55 	bl	8001db4 <__aeabi_ddiv>
 8010f0a:	0002      	movs	r2, r0
 8010f0c:	000b      	movs	r3, r1
 8010f0e:	0010      	movs	r0, r2
 8010f10:	0019      	movs	r1, r3
 8010f12:	f7f2 faef 	bl	80034f4 <__aeabi_d2f>
 8010f16:	1c03      	adds	r3, r0, #0
 8010f18:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8010f1a:	4922      	ldr	r1, [pc, #136]	@ (8010fa4 <HIDS_GetMeasurementValues+0x124>)
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f7f0 f97d 	bl	800121c <__aeabi_fsub>
 8010f22:	1c03      	adds	r3, r0, #0
 8010f24:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8010f26:	4b1b      	ldr	r3, [pc, #108]	@ (8010f94 <HIDS_GetMeasurementValues+0x114>)
 8010f28:	78db      	ldrb	r3, [r3, #3]
 8010f2a:	021b      	lsls	r3, r3, #8
 8010f2c:	4a19      	ldr	r2, [pc, #100]	@ (8010f94 <HIDS_GetMeasurementValues+0x114>)
 8010f2e:	7912      	ldrb	r2, [r2, #4]
 8010f30:	431a      	orrs	r2, r3
 8010f32:	0013      	movs	r3, r2
 8010f34:	015b      	lsls	r3, r3, #5
 8010f36:	1a9b      	subs	r3, r3, r2
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	189b      	adds	r3, r3, r2
 8010f3c:	0018      	movs	r0, r3
 8010f3e:	f7f2 fa3f 	bl	80033c0 <__aeabi_i2d>
 8010f42:	2200      	movs	r2, #0
 8010f44:	4b16      	ldr	r3, [pc, #88]	@ (8010fa0 <HIDS_GetMeasurementValues+0x120>)
 8010f46:	f7f0 ff35 	bl	8001db4 <__aeabi_ddiv>
 8010f4a:	0002      	movs	r2, r0
 8010f4c:	000b      	movs	r3, r1
 8010f4e:	0010      	movs	r0, r2
 8010f50:	0019      	movs	r1, r3
 8010f52:	f7f2 facf 	bl	80034f4 <__aeabi_d2f>
 8010f56:	1c03      	adds	r3, r0, #0
 8010f58:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8010f5a:	4913      	ldr	r1, [pc, #76]	@ (8010fa8 <HIDS_GetMeasurementValues+0x128>)
 8010f5c:	68b8      	ldr	r0, [r7, #8]
 8010f5e:	f7f0 f95d 	bl	800121c <__aeabi_fsub>
 8010f62:	1c03      	adds	r3, r0, #0
 8010f64:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	68ba      	ldr	r2, [r7, #8]
 8010f70:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	0011      	movs	r1, r2
 8010f78:	0018      	movs	r0, r3
 8010f7a:	f7fd f90b 	bl	800e194 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8010f7e:	4b04      	ldr	r3, [pc, #16]	@ (8010f90 <HIDS_GetMeasurementValues+0x110>)
 8010f80:	2201      	movs	r2, #1
 8010f82:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8010f84:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8010f86:	0018      	movs	r0, r3
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	b004      	add	sp, #16
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	46c0      	nop			@ (mov r8, r8)
 8010f90:	2000218e 	.word	0x2000218e
 8010f94:	20002188 	.word	0x20002188
 8010f98:	08028bc4 	.word	0x08028bc4
 8010f9c:	08028b5c 	.word	0x08028b5c
 8010fa0:	40efffe0 	.word	0x40efffe0
 8010fa4:	42340000 	.word	0x42340000
 8010fa8:	40c00000 	.word	0x40c00000

08010fac <ResetHIDSresults>:

void ResetHIDSresults() {
 8010fac:	b580      	push	{r7, lr}
 8010fae:	af00      	add	r7, sp, #0
  humid = 0.0;
 8010fb0:	4b04      	ldr	r3, [pc, #16]	@ (8010fc4 <ResetHIDSresults+0x18>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8010fb6:	4b04      	ldr	r3, [pc, #16]	@ (8010fc8 <ResetHIDSresults+0x1c>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	601a      	str	r2, [r3, #0]
}
 8010fbc:	46c0      	nop			@ (mov r8, r8)
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	46c0      	nop			@ (mov r8, r8)
 8010fc4:	20002170 	.word	0x20002170
 8010fc8:	20002174 	.word	0x20002174

08010fcc <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8010fcc:	b5b0      	push	{r4, r5, r7, lr}
 8010fce:	b084      	sub	sp, #16
 8010fd0:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8010fd2:	4b40      	ldr	r3, [pc, #256]	@ (80110d4 <HIDS_Upkeep+0x108>)
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2b06      	cmp	r3, #6
 8010fd8:	d900      	bls.n	8010fdc <HIDS_Upkeep+0x10>
 8010fda:	e06e      	b.n	80110ba <HIDS_Upkeep+0xee>
 8010fdc:	009a      	lsls	r2, r3, #2
 8010fde:	4b3e      	ldr	r3, [pc, #248]	@ (80110d8 <HIDS_Upkeep+0x10c>)
 8010fe0:	18d3      	adds	r3, r2, r3
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8010fe6:	4a3d      	ldr	r2, [pc, #244]	@ (80110dc <HIDS_Upkeep+0x110>)
 8010fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80110e0 <HIDS_Upkeep+0x114>)
 8010fea:	0019      	movs	r1, r3
 8010fec:	2003      	movs	r0, #3
 8010fee:	f7ff fcc9 	bl	8010984 <CreateLine>
      break;
 8010ff2:	e069      	b.n	80110c8 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8010ff4:	f7ff ffda 	bl	8010fac <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8010ff8:	4b36      	ldr	r3, [pc, #216]	@ (80110d4 <HIDS_Upkeep+0x108>)
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	701a      	strb	r2, [r3, #0]
      break;
 8010ffe:	e063      	b.n	80110c8 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8011000:	f7fe fb0a 	bl	800f618 <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8011004:	2001      	movs	r0, #1
 8011006:	f7f9 fe25 	bl	800ac54 <setSensorLock>
      HIDS_StartMeasurement();
 801100a:	f7ff fe41 	bl	8010c90 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 801100e:	4b31      	ldr	r3, [pc, #196]	@ (80110d4 <HIDS_Upkeep+0x108>)
 8011010:	2202      	movs	r2, #2
 8011012:	701a      	strb	r2, [r3, #0]
      break;
 8011014:	e058      	b.n	80110c8 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8011016:	4a33      	ldr	r2, [pc, #204]	@ (80110e4 <HIDS_Upkeep+0x118>)
 8011018:	4b33      	ldr	r3, [pc, #204]	@ (80110e8 <HIDS_Upkeep+0x11c>)
 801101a:	0011      	movs	r1, r2
 801101c:	0018      	movs	r0, r3
 801101e:	f7ff ff2f 	bl	8010e80 <HIDS_GetMeasurementValues>
 8011022:	1e03      	subs	r3, r0, #0
 8011024:	d04d      	beq.n	80110c2 <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8011026:	4b2b      	ldr	r3, [pc, #172]	@ (80110d4 <HIDS_Upkeep+0x108>)
 8011028:	2203      	movs	r2, #3
 801102a:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 801102c:	2000      	movs	r0, #0
 801102e:	f7f9 fe11 	bl	800ac54 <setSensorLock>
      }
      break;
 8011032:	e046      	b.n	80110c2 <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8011034:	4b2c      	ldr	r3, [pc, #176]	@ (80110e8 <HIDS_Upkeep+0x11c>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	1c18      	adds	r0, r3, #0
 801103a:	f7f2 fa13 	bl	8003464 <__aeabi_f2d>
 801103e:	0004      	movs	r4, r0
 8011040:	000d      	movs	r5, r1
 8011042:	4b28      	ldr	r3, [pc, #160]	@ (80110e4 <HIDS_Upkeep+0x118>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	1c18      	adds	r0, r3, #0
 8011048:	f7f2 fa0c 	bl	8003464 <__aeabi_f2d>
 801104c:	0002      	movs	r2, r0
 801104e:	000b      	movs	r3, r1
 8011050:	4826      	ldr	r0, [pc, #152]	@ (80110ec <HIDS_Upkeep+0x120>)
 8011052:	4923      	ldr	r1, [pc, #140]	@ (80110e0 <HIDS_Upkeep+0x114>)
 8011054:	9202      	str	r2, [sp, #8]
 8011056:	9303      	str	r3, [sp, #12]
 8011058:	9400      	str	r4, [sp, #0]
 801105a:	9501      	str	r5, [sp, #4]
 801105c:	0002      	movs	r2, r0
 801105e:	2003      	movs	r0, #3
 8011060:	f7ff fc90 	bl	8010984 <CreateLine>
      setHIDS(temp, humid);
 8011064:	4b1f      	ldr	r3, [pc, #124]	@ (80110e4 <HIDS_Upkeep+0x118>)
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	4b1f      	ldr	r3, [pc, #124]	@ (80110e8 <HIDS_Upkeep+0x11c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	1c19      	adds	r1, r3, #0
 801106e:	1c10      	adds	r0, r2, #0
 8011070:	f7f2 fb9a 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 8011074:	f7fe fae8 	bl	800f648 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8011078:	f000 f8d0 	bl	801121c <HAL_GetTick>
 801107c:	0004      	movs	r4, r0
 801107e:	f7f5 ffcb 	bl	8007018 <Check_USB_PowerOn>
 8011082:	1e03      	subs	r3, r0, #0
 8011084:	d103      	bne.n	801108e <HIDS_Upkeep+0xc2>
 8011086:	4b1a      	ldr	r3, [pc, #104]	@ (80110f0 <HIDS_Upkeep+0x124>)
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <HIDS_Upkeep+0xc6>
 801108e:	4b19      	ldr	r3, [pc, #100]	@ (80110f4 <HIDS_Upkeep+0x128>)
 8011090:	e001      	b.n	8011096 <HIDS_Upkeep+0xca>
 8011092:	23fa      	movs	r3, #250	@ 0xfa
 8011094:	009b      	lsls	r3, r3, #2
 8011096:	191a      	adds	r2, r3, r4
 8011098:	4b17      	ldr	r3, [pc, #92]	@ (80110f8 <HIDS_Upkeep+0x12c>)
 801109a:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 801109c:	4b0d      	ldr	r3, [pc, #52]	@ (80110d4 <HIDS_Upkeep+0x108>)
 801109e:	2206      	movs	r2, #6
 80110a0:	701a      	strb	r2, [r3, #0]
      break;
 80110a2:	e011      	b.n	80110c8 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 80110a4:	4b14      	ldr	r3, [pc, #80]	@ (80110f8 <HIDS_Upkeep+0x12c>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	0018      	movs	r0, r3
 80110aa:	f7ff fc15 	bl	80108d8 <TimestampIsReached>
 80110ae:	1e03      	subs	r3, r0, #0
 80110b0:	d009      	beq.n	80110c6 <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 80110b2:	4b08      	ldr	r3, [pc, #32]	@ (80110d4 <HIDS_Upkeep+0x108>)
 80110b4:	2200      	movs	r2, #0
 80110b6:	701a      	strb	r2, [r3, #0]
      }
      break;
 80110b8:	e005      	b.n	80110c6 <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80110ba:	4b06      	ldr	r3, [pc, #24]	@ (80110d4 <HIDS_Upkeep+0x108>)
 80110bc:	2200      	movs	r2, #0
 80110be:	701a      	strb	r2, [r3, #0]
      break;
 80110c0:	e002      	b.n	80110c8 <HIDS_Upkeep+0xfc>
      break;
 80110c2:	46c0      	nop			@ (mov r8, r8)
 80110c4:	e000      	b.n	80110c8 <HIDS_Upkeep+0xfc>
      break;
 80110c6:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80110c8:	4b02      	ldr	r3, [pc, #8]	@ (80110d4 <HIDS_Upkeep+0x108>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
}
 80110cc:	0018      	movs	r0, r3
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bdb0      	pop	{r4, r5, r7, pc}
 80110d2:	46c0      	nop			@ (mov r8, r8)
 80110d4:	20002194 	.word	0x20002194
 80110d8:	08029188 	.word	0x08029188
 80110dc:	08028bf8 	.word	0x08028bf8
 80110e0:	08028c2c 	.word	0x08028c2c
 80110e4:	20002174 	.word	0x20002174
 80110e8:	20002170 	.word	0x20002170
 80110ec:	08028c30 	.word	0x08028c30
 80110f0:	20001dda 	.word	0x20001dda
 80110f4:	00002710 	.word	0x00002710
 80110f8:	20002190 	.word	0x20002190

080110fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80110fc:	480d      	ldr	r0, [pc, #52]	@ (8011134 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80110fe:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011100:	f7ff f844 	bl	801018c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011104:	480c      	ldr	r0, [pc, #48]	@ (8011138 <LoopForever+0x6>)
  ldr r1, =_edata
 8011106:	490d      	ldr	r1, [pc, #52]	@ (801113c <LoopForever+0xa>)
  ldr r2, =_sidata
 8011108:	4a0d      	ldr	r2, [pc, #52]	@ (8011140 <LoopForever+0xe>)
  movs r3, #0
 801110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801110c:	e002      	b.n	8011114 <LoopCopyDataInit>

0801110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011112:	3304      	adds	r3, #4

08011114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011118:	d3f9      	bcc.n	801110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801111a:	4a0a      	ldr	r2, [pc, #40]	@ (8011144 <LoopForever+0x12>)
  ldr r4, =_ebss
 801111c:	4c0a      	ldr	r4, [pc, #40]	@ (8011148 <LoopForever+0x16>)
  movs r3, #0
 801111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011120:	e001      	b.n	8011126 <LoopFillZerobss>

08011122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011124:	3204      	adds	r2, #4

08011126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011128:	d3fb      	bcc.n	8011122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801112a:	f011 fe33 	bl	8022d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801112e:	f7f8 fe75 	bl	8009e1c <main>

08011132 <LoopForever>:

LoopForever:
    b LoopForever
 8011132:	e7fe      	b.n	8011132 <LoopForever>
   ldr   r0, =_estack
 8011134:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8011138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801113c:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8011140:	08029b28 	.word	0x08029b28
  ldr r2, =_sbss
 8011144:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8011148:	2000359c 	.word	0x2000359c

0801114c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801114c:	e7fe      	b.n	801114c <ADC1_COMP_IRQHandler>
	...

08011150 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8011156:	1dfb      	adds	r3, r7, #7
 8011158:	2200      	movs	r2, #0
 801115a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 801115c:	4b0b      	ldr	r3, [pc, #44]	@ (801118c <HAL_Init+0x3c>)
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	4b0a      	ldr	r3, [pc, #40]	@ (801118c <HAL_Init+0x3c>)
 8011162:	2140      	movs	r1, #64	@ 0x40
 8011164:	430a      	orrs	r2, r1
 8011166:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011168:	2003      	movs	r0, #3
 801116a:	f000 f811 	bl	8011190 <HAL_InitTick>
 801116e:	1e03      	subs	r3, r0, #0
 8011170:	d003      	beq.n	801117a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8011172:	1dfb      	adds	r3, r7, #7
 8011174:	2201      	movs	r2, #1
 8011176:	701a      	strb	r2, [r3, #0]
 8011178:	e001      	b.n	801117e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801117a:	f7fe febb 	bl	800fef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801117e:	1dfb      	adds	r3, r7, #7
 8011180:	781b      	ldrb	r3, [r3, #0]
}
 8011182:	0018      	movs	r0, r3
 8011184:	46bd      	mov	sp, r7
 8011186:	b002      	add	sp, #8
 8011188:	bd80      	pop	{r7, pc}
 801118a:	46c0      	nop			@ (mov r8, r8)
 801118c:	40022000 	.word	0x40022000

08011190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8011190:	b590      	push	{r4, r7, lr}
 8011192:	b083      	sub	sp, #12
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8011198:	4b14      	ldr	r3, [pc, #80]	@ (80111ec <HAL_InitTick+0x5c>)
 801119a:	681c      	ldr	r4, [r3, #0]
 801119c:	4b14      	ldr	r3, [pc, #80]	@ (80111f0 <HAL_InitTick+0x60>)
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	0019      	movs	r1, r3
 80111a2:	23fa      	movs	r3, #250	@ 0xfa
 80111a4:	0098      	lsls	r0, r3, #2
 80111a6:	f7ee fffd 	bl	80001a4 <__udivsi3>
 80111aa:	0003      	movs	r3, r0
 80111ac:	0019      	movs	r1, r3
 80111ae:	0020      	movs	r0, r4
 80111b0:	f7ee fff8 	bl	80001a4 <__udivsi3>
 80111b4:	0003      	movs	r3, r0
 80111b6:	0018      	movs	r0, r3
 80111b8:	f000 fcfd 	bl	8011bb6 <HAL_SYSTICK_Config>
 80111bc:	1e03      	subs	r3, r0, #0
 80111be:	d001      	beq.n	80111c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80111c0:	2301      	movs	r3, #1
 80111c2:	e00f      	b.n	80111e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b03      	cmp	r3, #3
 80111c8:	d80b      	bhi.n	80111e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80111ca:	6879      	ldr	r1, [r7, #4]
 80111cc:	2301      	movs	r3, #1
 80111ce:	425b      	negs	r3, r3
 80111d0:	2200      	movs	r2, #0
 80111d2:	0018      	movs	r0, r3
 80111d4:	f000 fcc6 	bl	8011b64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80111d8:	4b06      	ldr	r3, [pc, #24]	@ (80111f4 <HAL_InitTick+0x64>)
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80111de:	2300      	movs	r3, #0
 80111e0:	e000      	b.n	80111e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80111e2:	2301      	movs	r3, #1
}
 80111e4:	0018      	movs	r0, r3
 80111e6:	46bd      	mov	sp, r7
 80111e8:	b003      	add	sp, #12
 80111ea:	bd90      	pop	{r4, r7, pc}
 80111ec:	200000e4 	.word	0x200000e4
 80111f0:	200000f8 	.word	0x200000f8
 80111f4:	200000f4 	.word	0x200000f4

080111f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80111fc:	4b05      	ldr	r3, [pc, #20]	@ (8011214 <HAL_IncTick+0x1c>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	001a      	movs	r2, r3
 8011202:	4b05      	ldr	r3, [pc, #20]	@ (8011218 <HAL_IncTick+0x20>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	18d2      	adds	r2, r2, r3
 8011208:	4b03      	ldr	r3, [pc, #12]	@ (8011218 <HAL_IncTick+0x20>)
 801120a:	601a      	str	r2, [r3, #0]
}
 801120c:	46c0      	nop			@ (mov r8, r8)
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	46c0      	nop			@ (mov r8, r8)
 8011214:	200000f8 	.word	0x200000f8
 8011218:	20002198 	.word	0x20002198

0801121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	af00      	add	r7, sp, #0
  return uwTick;
 8011220:	4b02      	ldr	r3, [pc, #8]	@ (801122c <HAL_GetTick+0x10>)
 8011222:	681b      	ldr	r3, [r3, #0]
}
 8011224:	0018      	movs	r0, r3
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	46c0      	nop			@ (mov r8, r8)
 801122c:	20002198 	.word	0x20002198

08011230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011238:	f7ff fff0 	bl	801121c <HAL_GetTick>
 801123c:	0003      	movs	r3, r0
 801123e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3301      	adds	r3, #1
 8011248:	d005      	beq.n	8011256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801124a:	4b0a      	ldr	r3, [pc, #40]	@ (8011274 <HAL_Delay+0x44>)
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	001a      	movs	r2, r3
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	189b      	adds	r3, r3, r2
 8011254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8011256:	46c0      	nop			@ (mov r8, r8)
 8011258:	f7ff ffe0 	bl	801121c <HAL_GetTick>
 801125c:	0002      	movs	r2, r0
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	1ad3      	subs	r3, r2, r3
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	429a      	cmp	r2, r3
 8011266:	d8f7      	bhi.n	8011258 <HAL_Delay+0x28>
  {
  }
}
 8011268:	46c0      	nop			@ (mov r8, r8)
 801126a:	46c0      	nop			@ (mov r8, r8)
 801126c:	46bd      	mov	sp, r7
 801126e:	b004      	add	sp, #16
 8011270:	bd80      	pop	{r7, pc}
 8011272:	46c0      	nop			@ (mov r8, r8)
 8011274:	200000f8 	.word	0x200000f8

08011278 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 801127c:	4b04      	ldr	r3, [pc, #16]	@ (8011290 <HAL_SuspendTick+0x18>)
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	4b03      	ldr	r3, [pc, #12]	@ (8011290 <HAL_SuspendTick+0x18>)
 8011282:	2102      	movs	r1, #2
 8011284:	438a      	bics	r2, r1
 8011286:	601a      	str	r2, [r3, #0]
}
 8011288:	46c0      	nop			@ (mov r8, r8)
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	46c0      	nop			@ (mov r8, r8)
 8011290:	e000e010 	.word	0xe000e010

08011294 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8011298:	4b04      	ldr	r3, [pc, #16]	@ (80112ac <HAL_ResumeTick+0x18>)
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	4b03      	ldr	r3, [pc, #12]	@ (80112ac <HAL_ResumeTick+0x18>)
 801129e:	2102      	movs	r1, #2
 80112a0:	430a      	orrs	r2, r1
 80112a2:	601a      	str	r2, [r3, #0]
}
 80112a4:	46c0      	nop			@ (mov r8, r8)
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	46c0      	nop			@ (mov r8, r8)
 80112ac:	e000e010 	.word	0xe000e010

080112b0 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80112b4:	4b02      	ldr	r3, [pc, #8]	@ (80112c0 <HAL_GetUIDw0+0x10>)
 80112b6:	681b      	ldr	r3, [r3, #0]
}
 80112b8:	0018      	movs	r0, r3
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	46c0      	nop			@ (mov r8, r8)
 80112c0:	1ff80050 	.word	0x1ff80050

080112c4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80112c8:	4b02      	ldr	r3, [pc, #8]	@ (80112d4 <HAL_GetUIDw1+0x10>)
 80112ca:	681b      	ldr	r3, [r3, #0]
}
 80112cc:	0018      	movs	r0, r3
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	46c0      	nop			@ (mov r8, r8)
 80112d4:	1ff80054 	.word	0x1ff80054

080112d8 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80112dc:	4b02      	ldr	r3, [pc, #8]	@ (80112e8 <HAL_GetUIDw2+0x10>)
 80112de:	681b      	ldr	r3, [r3, #0]
}
 80112e0:	0018      	movs	r0, r3
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	46c0      	nop			@ (mov r8, r8)
 80112e8:	1ff80064 	.word	0x1ff80064

080112ec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80112fa:	2301      	movs	r3, #1
 80112fc:	e159      	b.n	80115b2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011302:	2b00      	cmp	r3, #0
 8011304:	d10a      	bne.n	801131c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2250      	movs	r2, #80	@ 0x50
 8011310:	2100      	movs	r1, #0
 8011312:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	0018      	movs	r0, r3
 8011318:	f7f6 fd1c 	bl	8007d54 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011320:	2210      	movs	r2, #16
 8011322:	4013      	ands	r3, r2
 8011324:	2b10      	cmp	r3, #16
 8011326:	d005      	beq.n	8011334 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	689b      	ldr	r3, [r3, #8]
 801132e:	2204      	movs	r2, #4
 8011330:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8011332:	d00b      	beq.n	801134c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011338:	2210      	movs	r2, #16
 801133a:	431a      	orrs	r2, r3
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2250      	movs	r2, #80	@ 0x50
 8011344:	2100      	movs	r1, #0
 8011346:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8011348:	2301      	movs	r3, #1
 801134a:	e132      	b.n	80115b2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011350:	4a9a      	ldr	r2, [pc, #616]	@ (80115bc <HAL_ADC_Init+0x2d0>)
 8011352:	4013      	ands	r3, r2
 8011354:	2202      	movs	r2, #2
 8011356:	431a      	orrs	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	689b      	ldr	r3, [r3, #8]
 8011362:	2203      	movs	r2, #3
 8011364:	4013      	ands	r3, r2
 8011366:	2b01      	cmp	r3, #1
 8011368:	d108      	bne.n	801137c <HAL_ADC_Init+0x90>
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2201      	movs	r2, #1
 8011372:	4013      	ands	r3, r2
 8011374:	2b01      	cmp	r3, #1
 8011376:	d101      	bne.n	801137c <HAL_ADC_Init+0x90>
 8011378:	2301      	movs	r3, #1
 801137a:	e000      	b.n	801137e <HAL_ADC_Init+0x92>
 801137c:	2300      	movs	r3, #0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d149      	bne.n	8011416 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685a      	ldr	r2, [r3, #4]
 8011386:	23c0      	movs	r3, #192	@ 0xc0
 8011388:	061b      	lsls	r3, r3, #24
 801138a:	429a      	cmp	r2, r3
 801138c:	d00b      	beq.n	80113a6 <HAL_ADC_Init+0xba>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	2380      	movs	r3, #128	@ 0x80
 8011394:	05db      	lsls	r3, r3, #23
 8011396:	429a      	cmp	r2, r3
 8011398:	d005      	beq.n	80113a6 <HAL_ADC_Init+0xba>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	2380      	movs	r3, #128	@ 0x80
 80113a0:	061b      	lsls	r3, r3, #24
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d111      	bne.n	80113ca <HAL_ADC_Init+0xde>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	691a      	ldr	r2, [r3, #16]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	0092      	lsls	r2, r2, #2
 80113b2:	0892      	lsrs	r2, r2, #2
 80113b4:	611a      	str	r2, [r3, #16]
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	6919      	ldr	r1, [r3, #16]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685a      	ldr	r2, [r3, #4]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	430a      	orrs	r2, r1
 80113c6:	611a      	str	r2, [r3, #16]
 80113c8:	e014      	b.n	80113f4 <HAL_ADC_Init+0x108>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	691a      	ldr	r2, [r3, #16]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	0092      	lsls	r2, r2, #2
 80113d6:	0892      	lsrs	r2, r2, #2
 80113d8:	611a      	str	r2, [r3, #16]
 80113da:	4b79      	ldr	r3, [pc, #484]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 80113dc:	681a      	ldr	r2, [r3, #0]
 80113de:	4b78      	ldr	r3, [pc, #480]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 80113e0:	4978      	ldr	r1, [pc, #480]	@ (80115c4 <HAL_ADC_Init+0x2d8>)
 80113e2:	400a      	ands	r2, r1
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	4b76      	ldr	r3, [pc, #472]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 80113e8:	6819      	ldr	r1, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	685a      	ldr	r2, [r3, #4]
 80113ee:	4b74      	ldr	r3, [pc, #464]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 80113f0:	430a      	orrs	r2, r1
 80113f2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	68da      	ldr	r2, [r3, #12]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	2118      	movs	r1, #24
 8011400:	438a      	bics	r2, r1
 8011402:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	68d9      	ldr	r1, [r3, #12]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	689a      	ldr	r2, [r3, #8]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	430a      	orrs	r2, r1
 8011414:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8011416:	4b6a      	ldr	r3, [pc, #424]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	4b69      	ldr	r3, [pc, #420]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 801141c:	496a      	ldr	r1, [pc, #424]	@ (80115c8 <HAL_ADC_Init+0x2dc>)
 801141e:	400a      	ands	r2, r1
 8011420:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8011422:	4b67      	ldr	r3, [pc, #412]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 8011424:	6819      	ldr	r1, [r3, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801142a:	065a      	lsls	r2, r3, #25
 801142c:	4b64      	ldr	r3, [pc, #400]	@ (80115c0 <HAL_ADC_Init+0x2d4>)
 801142e:	430a      	orrs	r2, r1
 8011430:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	689a      	ldr	r2, [r3, #8]
 8011438:	2380      	movs	r3, #128	@ 0x80
 801143a:	055b      	lsls	r3, r3, #21
 801143c:	4013      	ands	r3, r2
 801143e:	d108      	bne.n	8011452 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	689a      	ldr	r2, [r3, #8]
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2180      	movs	r1, #128	@ 0x80
 801144c:	0549      	lsls	r1, r1, #21
 801144e:	430a      	orrs	r2, r1
 8011450:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	68da      	ldr	r2, [r3, #12]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	495b      	ldr	r1, [pc, #364]	@ (80115cc <HAL_ADC_Init+0x2e0>)
 801145e:	400a      	ands	r2, r1
 8011460:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	68d9      	ldr	r1, [r3, #12]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	2b02      	cmp	r3, #2
 8011472:	d101      	bne.n	8011478 <HAL_ADC_Init+0x18c>
 8011474:	2304      	movs	r3, #4
 8011476:	e000      	b.n	801147a <HAL_ADC_Init+0x18e>
 8011478:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801147a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2020      	movs	r0, #32
 8011480:	5c1b      	ldrb	r3, [r3, r0]
 8011482:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8011484:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	202c      	movs	r0, #44	@ 0x2c
 801148a:	5c1b      	ldrb	r3, [r3, r0]
 801148c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 801148e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8011494:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	699b      	ldr	r3, [r3, #24]
 801149a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 801149c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	69db      	ldr	r3, [r3, #28]
 80114a2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80114a4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	430a      	orrs	r2, r1
 80114ac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114b2:	23c2      	movs	r3, #194	@ 0xc2
 80114b4:	33ff      	adds	r3, #255	@ 0xff
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d00b      	beq.n	80114d2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	68d9      	ldr	r1, [r3, #12]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80114c8:	431a      	orrs	r2, r3
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	430a      	orrs	r2, r1
 80114d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2221      	movs	r2, #33	@ 0x21
 80114d6:	5c9b      	ldrb	r3, [r3, r2]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d11a      	bne.n	8011512 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2220      	movs	r2, #32
 80114e0:	5c9b      	ldrb	r3, [r3, r2]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d109      	bne.n	80114fa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	68da      	ldr	r2, [r3, #12]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2180      	movs	r1, #128	@ 0x80
 80114f2:	0249      	lsls	r1, r1, #9
 80114f4:	430a      	orrs	r2, r1
 80114f6:	60da      	str	r2, [r3, #12]
 80114f8:	e00b      	b.n	8011512 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114fe:	2220      	movs	r2, #32
 8011500:	431a      	orrs	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801150a:	2201      	movs	r2, #1
 801150c:	431a      	orrs	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011516:	2b01      	cmp	r3, #1
 8011518:	d11f      	bne.n	801155a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	691a      	ldr	r2, [r3, #16]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	492a      	ldr	r1, [pc, #168]	@ (80115d0 <HAL_ADC_Init+0x2e4>)
 8011526:	400a      	ands	r2, r1
 8011528:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	6919      	ldr	r1, [r3, #16]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8011538:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 801153e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	430a      	orrs	r2, r1
 8011546:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	691a      	ldr	r2, [r3, #16]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2101      	movs	r1, #1
 8011554:	430a      	orrs	r2, r1
 8011556:	611a      	str	r2, [r3, #16]
 8011558:	e00e      	b.n	8011578 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	691b      	ldr	r3, [r3, #16]
 8011560:	2201      	movs	r2, #1
 8011562:	4013      	ands	r3, r2
 8011564:	2b01      	cmp	r3, #1
 8011566:	d107      	bne.n	8011578 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	691a      	ldr	r2, [r3, #16]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2101      	movs	r1, #1
 8011574:	438a      	bics	r2, r1
 8011576:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	695a      	ldr	r2, [r3, #20]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2107      	movs	r1, #7
 8011584:	438a      	bics	r2, r1
 8011586:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	6959      	ldr	r1, [r3, #20]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	430a      	orrs	r2, r1
 8011598:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2200      	movs	r2, #0
 801159e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80115a4:	2203      	movs	r2, #3
 80115a6:	4393      	bics	r3, r2
 80115a8:	2201      	movs	r2, #1
 80115aa:	431a      	orrs	r2, r3
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80115b0:	2300      	movs	r3, #0
}
 80115b2:	0018      	movs	r0, r3
 80115b4:	46bd      	mov	sp, r7
 80115b6:	b002      	add	sp, #8
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	46c0      	nop			@ (mov r8, r8)
 80115bc:	fffffefd 	.word	0xfffffefd
 80115c0:	40012708 	.word	0x40012708
 80115c4:	ffc3ffff 	.word	0xffc3ffff
 80115c8:	fdffffff 	.word	0xfdffffff
 80115cc:	fffe0219 	.word	0xfffe0219
 80115d0:	fffffc03 	.word	0xfffffc03

080115d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80115dc:	230f      	movs	r3, #15
 80115de:	18fb      	adds	r3, r7, r3
 80115e0:	2200      	movs	r2, #0
 80115e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	689b      	ldr	r3, [r3, #8]
 80115ea:	2204      	movs	r2, #4
 80115ec:	4013      	ands	r3, r2
 80115ee:	d138      	bne.n	8011662 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2250      	movs	r2, #80	@ 0x50
 80115f4:	5c9b      	ldrb	r3, [r3, r2]
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d101      	bne.n	80115fe <HAL_ADC_Start+0x2a>
 80115fa:	2302      	movs	r3, #2
 80115fc:	e038      	b.n	8011670 <HAL_ADC_Start+0x9c>
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2250      	movs	r2, #80	@ 0x50
 8011602:	2101      	movs	r1, #1
 8011604:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	69db      	ldr	r3, [r3, #28]
 801160a:	2b01      	cmp	r3, #1
 801160c:	d007      	beq.n	801161e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 801160e:	230f      	movs	r3, #15
 8011610:	18fc      	adds	r4, r7, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	0018      	movs	r0, r3
 8011616:	f000 f95f 	bl	80118d8 <ADC_Enable>
 801161a:	0003      	movs	r3, r0
 801161c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801161e:	230f      	movs	r3, #15
 8011620:	18fb      	adds	r3, r7, r3
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d120      	bne.n	801166a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801162c:	4a12      	ldr	r2, [pc, #72]	@ (8011678 <HAL_ADC_Start+0xa4>)
 801162e:	4013      	ands	r3, r2
 8011630:	2280      	movs	r2, #128	@ 0x80
 8011632:	0052      	lsls	r2, r2, #1
 8011634:	431a      	orrs	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2250      	movs	r2, #80	@ 0x50
 8011644:	2100      	movs	r1, #0
 8011646:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	221c      	movs	r2, #28
 801164e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	689a      	ldr	r2, [r3, #8]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2104      	movs	r1, #4
 801165c:	430a      	orrs	r2, r1
 801165e:	609a      	str	r2, [r3, #8]
 8011660:	e003      	b.n	801166a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8011662:	230f      	movs	r3, #15
 8011664:	18fb      	adds	r3, r7, r3
 8011666:	2202      	movs	r2, #2
 8011668:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 801166a:	230f      	movs	r3, #15
 801166c:	18fb      	adds	r3, r7, r3
 801166e:	781b      	ldrb	r3, [r3, #0]
}
 8011670:	0018      	movs	r0, r3
 8011672:	46bd      	mov	sp, r7
 8011674:	b005      	add	sp, #20
 8011676:	bd90      	pop	{r4, r7, pc}
 8011678:	fffff0fe 	.word	0xfffff0fe

0801167c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 801168a:	2300      	movs	r3, #0
 801168c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	2b08      	cmp	r3, #8
 8011694:	d102      	bne.n	801169c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8011696:	2308      	movs	r3, #8
 8011698:	60fb      	str	r3, [r7, #12]
 801169a:	e014      	b.n	80116c6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	2201      	movs	r2, #1
 80116a4:	4013      	ands	r3, r2
 80116a6:	2b01      	cmp	r3, #1
 80116a8:	d10b      	bne.n	80116c2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116ae:	2220      	movs	r2, #32
 80116b0:	431a      	orrs	r2, r3
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2250      	movs	r2, #80	@ 0x50
 80116ba:	2100      	movs	r1, #0
 80116bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	e072      	b.n	80117a8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80116c2:	230c      	movs	r3, #12
 80116c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80116c6:	f7ff fda9 	bl	801121c <HAL_GetTick>
 80116ca:	0003      	movs	r3, r0
 80116cc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80116ce:	e01f      	b.n	8011710 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	3301      	adds	r3, #1
 80116d4:	d01c      	beq.n	8011710 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d007      	beq.n	80116ec <HAL_ADC_PollForConversion+0x70>
 80116dc:	f7ff fd9e 	bl	801121c <HAL_GetTick>
 80116e0:	0002      	movs	r2, r0
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	1ad3      	subs	r3, r2, r3
 80116e6:	683a      	ldr	r2, [r7, #0]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d211      	bcs.n	8011710 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	4013      	ands	r3, r2
 80116f6:	d10b      	bne.n	8011710 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116fc:	2204      	movs	r2, #4
 80116fe:	431a      	orrs	r2, r3
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2250      	movs	r2, #80	@ 0x50
 8011708:	2100      	movs	r1, #0
 801170a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801170c:	2303      	movs	r3, #3
 801170e:	e04b      	b.n	80117a8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	4013      	ands	r3, r2
 801171a:	d0d9      	beq.n	80116d0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011720:	2280      	movs	r2, #128	@ 0x80
 8011722:	0092      	lsls	r2, r2, #2
 8011724:	431a      	orrs	r2, r3
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	68da      	ldr	r2, [r3, #12]
 8011730:	23c0      	movs	r3, #192	@ 0xc0
 8011732:	011b      	lsls	r3, r3, #4
 8011734:	4013      	ands	r3, r2
 8011736:	d12e      	bne.n	8011796 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2220      	movs	r2, #32
 801173c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801173e:	2b00      	cmp	r3, #0
 8011740:	d129      	bne.n	8011796 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2208      	movs	r2, #8
 801174a:	4013      	ands	r3, r2
 801174c:	2b08      	cmp	r3, #8
 801174e:	d122      	bne.n	8011796 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	2204      	movs	r2, #4
 8011758:	4013      	ands	r3, r2
 801175a:	d110      	bne.n	801177e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	210c      	movs	r1, #12
 8011768:	438a      	bics	r2, r1
 801176a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011770:	4a0f      	ldr	r2, [pc, #60]	@ (80117b0 <HAL_ADC_PollForConversion+0x134>)
 8011772:	4013      	ands	r3, r2
 8011774:	2201      	movs	r2, #1
 8011776:	431a      	orrs	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	655a      	str	r2, [r3, #84]	@ 0x54
 801177c:	e00b      	b.n	8011796 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011782:	2220      	movs	r2, #32
 8011784:	431a      	orrs	r2, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801178e:	2201      	movs	r2, #1
 8011790:	431a      	orrs	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	699b      	ldr	r3, [r3, #24]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d103      	bne.n	80117a6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	220c      	movs	r2, #12
 80117a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80117a6:	2300      	movs	r3, #0
}
 80117a8:	0018      	movs	r0, r3
 80117aa:	46bd      	mov	sp, r7
 80117ac:	b004      	add	sp, #16
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	fffffefe 	.word	0xfffffefe

080117b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80117c2:	0018      	movs	r0, r3
 80117c4:	46bd      	mov	sp, r7
 80117c6:	b002      	add	sp, #8
 80117c8:	bd80      	pop	{r7, pc}
	...

080117cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2250      	movs	r2, #80	@ 0x50
 80117da:	5c9b      	ldrb	r3, [r3, r2]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d101      	bne.n	80117e4 <HAL_ADC_ConfigChannel+0x18>
 80117e0:	2302      	movs	r3, #2
 80117e2:	e06c      	b.n	80118be <HAL_ADC_ConfigChannel+0xf2>
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2250      	movs	r2, #80	@ 0x50
 80117e8:	2101      	movs	r1, #1
 80117ea:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	689b      	ldr	r3, [r3, #8]
 80117f2:	2204      	movs	r2, #4
 80117f4:	4013      	ands	r3, r2
 80117f6:	d00b      	beq.n	8011810 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117fc:	2220      	movs	r2, #32
 80117fe:	431a      	orrs	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2250      	movs	r2, #80	@ 0x50
 8011808:	2100      	movs	r1, #0
 801180a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801180c:	2301      	movs	r3, #1
 801180e:	e056      	b.n	80118be <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	685b      	ldr	r3, [r3, #4]
 8011814:	4a2c      	ldr	r2, [pc, #176]	@ (80118c8 <HAL_ADC_ConfigChannel+0xfc>)
 8011816:	4293      	cmp	r3, r2
 8011818:	d028      	beq.n	801186c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	035b      	lsls	r3, r3, #13
 8011826:	0b5a      	lsrs	r2, r3, #13
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	430a      	orrs	r2, r1
 801182e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	2380      	movs	r3, #128	@ 0x80
 8011836:	02db      	lsls	r3, r3, #11
 8011838:	4013      	ands	r3, r2
 801183a:	d009      	beq.n	8011850 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 801183c:	4b23      	ldr	r3, [pc, #140]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	4b22      	ldr	r3, [pc, #136]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 8011842:	2180      	movs	r1, #128	@ 0x80
 8011844:	0409      	lsls	r1, r1, #16
 8011846:	430a      	orrs	r2, r1
 8011848:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 801184a:	200a      	movs	r0, #10
 801184c:	f000 f8ac 	bl	80119a8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	2380      	movs	r3, #128	@ 0x80
 8011856:	029b      	lsls	r3, r3, #10
 8011858:	4013      	ands	r3, r2
 801185a:	d02b      	beq.n	80118b4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 801185c:	4b1b      	ldr	r3, [pc, #108]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	4b1a      	ldr	r3, [pc, #104]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 8011862:	2180      	movs	r1, #128	@ 0x80
 8011864:	03c9      	lsls	r1, r1, #15
 8011866:	430a      	orrs	r2, r1
 8011868:	601a      	str	r2, [r3, #0]
 801186a:	e023      	b.n	80118b4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	035b      	lsls	r3, r3, #13
 8011878:	0b5b      	lsrs	r3, r3, #13
 801187a:	43d9      	mvns	r1, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	400a      	ands	r2, r1
 8011882:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	2380      	movs	r3, #128	@ 0x80
 801188a:	02db      	lsls	r3, r3, #11
 801188c:	4013      	ands	r3, r2
 801188e:	d005      	beq.n	801189c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8011890:	4b0e      	ldr	r3, [pc, #56]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	4b0d      	ldr	r3, [pc, #52]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 8011896:	490e      	ldr	r1, [pc, #56]	@ (80118d0 <HAL_ADC_ConfigChannel+0x104>)
 8011898:	400a      	ands	r2, r1
 801189a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	2380      	movs	r3, #128	@ 0x80
 80118a2:	029b      	lsls	r3, r3, #10
 80118a4:	4013      	ands	r3, r2
 80118a6:	d005      	beq.n	80118b4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80118a8:	4b08      	ldr	r3, [pc, #32]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	4b07      	ldr	r3, [pc, #28]	@ (80118cc <HAL_ADC_ConfigChannel+0x100>)
 80118ae:	4909      	ldr	r1, [pc, #36]	@ (80118d4 <HAL_ADC_ConfigChannel+0x108>)
 80118b0:	400a      	ands	r2, r1
 80118b2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2250      	movs	r2, #80	@ 0x50
 80118b8:	2100      	movs	r1, #0
 80118ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80118bc:	2300      	movs	r3, #0
}
 80118be:	0018      	movs	r0, r3
 80118c0:	46bd      	mov	sp, r7
 80118c2:	b002      	add	sp, #8
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	46c0      	nop			@ (mov r8, r8)
 80118c8:	00001001 	.word	0x00001001
 80118cc:	40012708 	.word	0x40012708
 80118d0:	ff7fffff 	.word	0xff7fffff
 80118d4:	ffbfffff 	.word	0xffbfffff

080118d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80118e0:	2300      	movs	r3, #0
 80118e2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	2203      	movs	r2, #3
 80118ec:	4013      	ands	r3, r2
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d108      	bne.n	8011904 <ADC_Enable+0x2c>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2201      	movs	r2, #1
 80118fa:	4013      	ands	r3, r2
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	d101      	bne.n	8011904 <ADC_Enable+0x2c>
 8011900:	2301      	movs	r3, #1
 8011902:	e000      	b.n	8011906 <ADC_Enable+0x2e>
 8011904:	2300      	movs	r3, #0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d146      	bne.n	8011998 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	689b      	ldr	r3, [r3, #8]
 8011910:	4a24      	ldr	r2, [pc, #144]	@ (80119a4 <ADC_Enable+0xcc>)
 8011912:	4013      	ands	r3, r2
 8011914:	d00d      	beq.n	8011932 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801191a:	2210      	movs	r2, #16
 801191c:	431a      	orrs	r2, r3
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011926:	2201      	movs	r2, #1
 8011928:	431a      	orrs	r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801192e:	2301      	movs	r3, #1
 8011930:	e033      	b.n	801199a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	689a      	ldr	r2, [r3, #8]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2101      	movs	r1, #1
 801193e:	430a      	orrs	r2, r1
 8011940:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8011942:	2001      	movs	r0, #1
 8011944:	f000 f830 	bl	80119a8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8011948:	f7ff fc68 	bl	801121c <HAL_GetTick>
 801194c:	0003      	movs	r3, r0
 801194e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011950:	e01b      	b.n	801198a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8011952:	f7ff fc63 	bl	801121c <HAL_GetTick>
 8011956:	0002      	movs	r2, r0
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	2b0a      	cmp	r3, #10
 801195e:	d914      	bls.n	801198a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	2201      	movs	r2, #1
 8011968:	4013      	ands	r3, r2
 801196a:	2b01      	cmp	r3, #1
 801196c:	d00d      	beq.n	801198a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011972:	2210      	movs	r2, #16
 8011974:	431a      	orrs	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801197e:	2201      	movs	r2, #1
 8011980:	431a      	orrs	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8011986:	2301      	movs	r3, #1
 8011988:	e007      	b.n	801199a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2201      	movs	r2, #1
 8011992:	4013      	ands	r3, r2
 8011994:	2b01      	cmp	r3, #1
 8011996:	d1dc      	bne.n	8011952 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8011998:	2300      	movs	r3, #0
}
 801199a:	0018      	movs	r0, r3
 801199c:	46bd      	mov	sp, r7
 801199e:	b004      	add	sp, #16
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	46c0      	nop			@ (mov r8, r8)
 80119a4:	80000017 	.word	0x80000017

080119a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80119b0:	4b0b      	ldr	r3, [pc, #44]	@ (80119e0 <ADC_DelayMicroSecond+0x38>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	490b      	ldr	r1, [pc, #44]	@ (80119e4 <ADC_DelayMicroSecond+0x3c>)
 80119b6:	0018      	movs	r0, r3
 80119b8:	f7ee fbf4 	bl	80001a4 <__udivsi3>
 80119bc:	0003      	movs	r3, r0
 80119be:	001a      	movs	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4353      	muls	r3, r2
 80119c4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80119c6:	e002      	b.n	80119ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	3b01      	subs	r3, #1
 80119cc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d1f9      	bne.n	80119c8 <ADC_DelayMicroSecond+0x20>
  }
}
 80119d4:	46c0      	nop			@ (mov r8, r8)
 80119d6:	46c0      	nop			@ (mov r8, r8)
 80119d8:	46bd      	mov	sp, r7
 80119da:	b004      	add	sp, #16
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	46c0      	nop			@ (mov r8, r8)
 80119e0:	200000e4 	.word	0x200000e4
 80119e4:	000f4240 	.word	0x000f4240

080119e8 <__NVIC_EnableIRQ>:
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	0002      	movs	r2, r0
 80119f0:	1dfb      	adds	r3, r7, #7
 80119f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80119f4:	1dfb      	adds	r3, r7, #7
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80119fa:	d809      	bhi.n	8011a10 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80119fc:	1dfb      	adds	r3, r7, #7
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	001a      	movs	r2, r3
 8011a02:	231f      	movs	r3, #31
 8011a04:	401a      	ands	r2, r3
 8011a06:	4b04      	ldr	r3, [pc, #16]	@ (8011a18 <__NVIC_EnableIRQ+0x30>)
 8011a08:	2101      	movs	r1, #1
 8011a0a:	4091      	lsls	r1, r2
 8011a0c:	000a      	movs	r2, r1
 8011a0e:	601a      	str	r2, [r3, #0]
}
 8011a10:	46c0      	nop			@ (mov r8, r8)
 8011a12:	46bd      	mov	sp, r7
 8011a14:	b002      	add	sp, #8
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	e000e100 	.word	0xe000e100

08011a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8011a1c:	b590      	push	{r4, r7, lr}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	0002      	movs	r2, r0
 8011a24:	6039      	str	r1, [r7, #0]
 8011a26:	1dfb      	adds	r3, r7, #7
 8011a28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8011a2a:	1dfb      	adds	r3, r7, #7
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8011a30:	d828      	bhi.n	8011a84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011a32:	4a2f      	ldr	r2, [pc, #188]	@ (8011af0 <__NVIC_SetPriority+0xd4>)
 8011a34:	1dfb      	adds	r3, r7, #7
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	b25b      	sxtb	r3, r3
 8011a3a:	089b      	lsrs	r3, r3, #2
 8011a3c:	33c0      	adds	r3, #192	@ 0xc0
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	589b      	ldr	r3, [r3, r2]
 8011a42:	1dfa      	adds	r2, r7, #7
 8011a44:	7812      	ldrb	r2, [r2, #0]
 8011a46:	0011      	movs	r1, r2
 8011a48:	2203      	movs	r2, #3
 8011a4a:	400a      	ands	r2, r1
 8011a4c:	00d2      	lsls	r2, r2, #3
 8011a4e:	21ff      	movs	r1, #255	@ 0xff
 8011a50:	4091      	lsls	r1, r2
 8011a52:	000a      	movs	r2, r1
 8011a54:	43d2      	mvns	r2, r2
 8011a56:	401a      	ands	r2, r3
 8011a58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	019b      	lsls	r3, r3, #6
 8011a5e:	22ff      	movs	r2, #255	@ 0xff
 8011a60:	401a      	ands	r2, r3
 8011a62:	1dfb      	adds	r3, r7, #7
 8011a64:	781b      	ldrb	r3, [r3, #0]
 8011a66:	0018      	movs	r0, r3
 8011a68:	2303      	movs	r3, #3
 8011a6a:	4003      	ands	r3, r0
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011a70:	481f      	ldr	r0, [pc, #124]	@ (8011af0 <__NVIC_SetPriority+0xd4>)
 8011a72:	1dfb      	adds	r3, r7, #7
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	b25b      	sxtb	r3, r3
 8011a78:	089b      	lsrs	r3, r3, #2
 8011a7a:	430a      	orrs	r2, r1
 8011a7c:	33c0      	adds	r3, #192	@ 0xc0
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8011a82:	e031      	b.n	8011ae8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011a84:	4a1b      	ldr	r2, [pc, #108]	@ (8011af4 <__NVIC_SetPriority+0xd8>)
 8011a86:	1dfb      	adds	r3, r7, #7
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	0019      	movs	r1, r3
 8011a8c:	230f      	movs	r3, #15
 8011a8e:	400b      	ands	r3, r1
 8011a90:	3b08      	subs	r3, #8
 8011a92:	089b      	lsrs	r3, r3, #2
 8011a94:	3306      	adds	r3, #6
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	18d3      	adds	r3, r2, r3
 8011a9a:	3304      	adds	r3, #4
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	1dfa      	adds	r2, r7, #7
 8011aa0:	7812      	ldrb	r2, [r2, #0]
 8011aa2:	0011      	movs	r1, r2
 8011aa4:	2203      	movs	r2, #3
 8011aa6:	400a      	ands	r2, r1
 8011aa8:	00d2      	lsls	r2, r2, #3
 8011aaa:	21ff      	movs	r1, #255	@ 0xff
 8011aac:	4091      	lsls	r1, r2
 8011aae:	000a      	movs	r2, r1
 8011ab0:	43d2      	mvns	r2, r2
 8011ab2:	401a      	ands	r2, r3
 8011ab4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	019b      	lsls	r3, r3, #6
 8011aba:	22ff      	movs	r2, #255	@ 0xff
 8011abc:	401a      	ands	r2, r3
 8011abe:	1dfb      	adds	r3, r7, #7
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	0018      	movs	r0, r3
 8011ac4:	2303      	movs	r3, #3
 8011ac6:	4003      	ands	r3, r0
 8011ac8:	00db      	lsls	r3, r3, #3
 8011aca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011acc:	4809      	ldr	r0, [pc, #36]	@ (8011af4 <__NVIC_SetPriority+0xd8>)
 8011ace:	1dfb      	adds	r3, r7, #7
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	001c      	movs	r4, r3
 8011ad4:	230f      	movs	r3, #15
 8011ad6:	4023      	ands	r3, r4
 8011ad8:	3b08      	subs	r3, #8
 8011ada:	089b      	lsrs	r3, r3, #2
 8011adc:	430a      	orrs	r2, r1
 8011ade:	3306      	adds	r3, #6
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	18c3      	adds	r3, r0, r3
 8011ae4:	3304      	adds	r3, #4
 8011ae6:	601a      	str	r2, [r3, #0]
}
 8011ae8:	46c0      	nop			@ (mov r8, r8)
 8011aea:	46bd      	mov	sp, r7
 8011aec:	b003      	add	sp, #12
 8011aee:	bd90      	pop	{r4, r7, pc}
 8011af0:	e000e100 	.word	0xe000e100
 8011af4:	e000ed00 	.word	0xe000ed00

08011af8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011afc:	f3bf 8f4f 	dsb	sy
}
 8011b00:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011b02:	4b04      	ldr	r3, [pc, #16]	@ (8011b14 <__NVIC_SystemReset+0x1c>)
 8011b04:	4a04      	ldr	r2, [pc, #16]	@ (8011b18 <__NVIC_SystemReset+0x20>)
 8011b06:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011b08:	f3bf 8f4f 	dsb	sy
}
 8011b0c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8011b0e:	46c0      	nop			@ (mov r8, r8)
 8011b10:	e7fd      	b.n	8011b0e <__NVIC_SystemReset+0x16>
 8011b12:	46c0      	nop			@ (mov r8, r8)
 8011b14:	e000ed00 	.word	0xe000ed00
 8011b18:	05fa0004 	.word	0x05fa0004

08011b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	1e5a      	subs	r2, r3, #1
 8011b28:	2380      	movs	r3, #128	@ 0x80
 8011b2a:	045b      	lsls	r3, r3, #17
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d301      	bcc.n	8011b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011b30:	2301      	movs	r3, #1
 8011b32:	e010      	b.n	8011b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011b34:	4b0a      	ldr	r3, [pc, #40]	@ (8011b60 <SysTick_Config+0x44>)
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	3a01      	subs	r2, #1
 8011b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	425b      	negs	r3, r3
 8011b40:	2103      	movs	r1, #3
 8011b42:	0018      	movs	r0, r3
 8011b44:	f7ff ff6a 	bl	8011a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011b48:	4b05      	ldr	r3, [pc, #20]	@ (8011b60 <SysTick_Config+0x44>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011b4e:	4b04      	ldr	r3, [pc, #16]	@ (8011b60 <SysTick_Config+0x44>)
 8011b50:	2207      	movs	r2, #7
 8011b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011b54:	2300      	movs	r3, #0
}
 8011b56:	0018      	movs	r0, r3
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	b002      	add	sp, #8
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	46c0      	nop			@ (mov r8, r8)
 8011b60:	e000e010 	.word	0xe000e010

08011b64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60b9      	str	r1, [r7, #8]
 8011b6c:	607a      	str	r2, [r7, #4]
 8011b6e:	210f      	movs	r1, #15
 8011b70:	187b      	adds	r3, r7, r1
 8011b72:	1c02      	adds	r2, r0, #0
 8011b74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	187b      	adds	r3, r7, r1
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	b25b      	sxtb	r3, r3
 8011b7e:	0011      	movs	r1, r2
 8011b80:	0018      	movs	r0, r3
 8011b82:	f7ff ff4b 	bl	8011a1c <__NVIC_SetPriority>
}
 8011b86:	46c0      	nop			@ (mov r8, r8)
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	b004      	add	sp, #16
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011b8e:	b580      	push	{r7, lr}
 8011b90:	b082      	sub	sp, #8
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	0002      	movs	r2, r0
 8011b96:	1dfb      	adds	r3, r7, #7
 8011b98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011b9a:	1dfb      	adds	r3, r7, #7
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	b25b      	sxtb	r3, r3
 8011ba0:	0018      	movs	r0, r3
 8011ba2:	f7ff ff21 	bl	80119e8 <__NVIC_EnableIRQ>
}
 8011ba6:	46c0      	nop			@ (mov r8, r8)
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	b002      	add	sp, #8
 8011bac:	bd80      	pop	{r7, pc}

08011bae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8011bb2:	f7ff ffa1 	bl	8011af8 <__NVIC_SystemReset>

08011bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b082      	sub	sp, #8
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	0018      	movs	r0, r3
 8011bc2:	f7ff ffab 	bl	8011b1c <SysTick_Config>
 8011bc6:	0003      	movs	r3, r0
}
 8011bc8:	0018      	movs	r0, r3
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	b002      	add	sp, #8
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b084      	sub	sp, #16
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d101      	bne.n	8011be2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8011bde:	2301      	movs	r3, #1
 8011be0:	e061      	b.n	8011ca6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	4a32      	ldr	r2, [pc, #200]	@ (8011cb0 <HAL_DMA_Init+0xe0>)
 8011be8:	4694      	mov	ip, r2
 8011bea:	4463      	add	r3, ip
 8011bec:	2114      	movs	r1, #20
 8011bee:	0018      	movs	r0, r3
 8011bf0:	f7ee fad8 	bl	80001a4 <__udivsi3>
 8011bf4:	0003      	movs	r3, r0
 8011bf6:	009a      	lsls	r2, r3, #2
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4a2d      	ldr	r2, [pc, #180]	@ (8011cb4 <HAL_DMA_Init+0xe4>)
 8011c00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2225      	movs	r2, #37	@ 0x25
 8011c06:	2102      	movs	r1, #2
 8011c08:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	4a28      	ldr	r2, [pc, #160]	@ (8011cb8 <HAL_DMA_Init+0xe8>)
 8011c16:	4013      	ands	r3, r2
 8011c18:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8011c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	691b      	ldr	r3, [r3, #16]
 8011c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	699b      	ldr	r3, [r3, #24]
 8011c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6a1b      	ldr	r3, [r3, #32]
 8011c40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	4313      	orrs	r3, r2
 8011c46:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	689a      	ldr	r2, [r3, #8]
 8011c54:	2380      	movs	r3, #128	@ 0x80
 8011c56:	01db      	lsls	r3, r3, #7
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d018      	beq.n	8011c8e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8011c5c:	4b17      	ldr	r3, [pc, #92]	@ (8011cbc <HAL_DMA_Init+0xec>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c64:	211c      	movs	r1, #28
 8011c66:	400b      	ands	r3, r1
 8011c68:	210f      	movs	r1, #15
 8011c6a:	4099      	lsls	r1, r3
 8011c6c:	000b      	movs	r3, r1
 8011c6e:	43d9      	mvns	r1, r3
 8011c70:	4b12      	ldr	r3, [pc, #72]	@ (8011cbc <HAL_DMA_Init+0xec>)
 8011c72:	400a      	ands	r2, r1
 8011c74:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8011c76:	4b11      	ldr	r3, [pc, #68]	@ (8011cbc <HAL_DMA_Init+0xec>)
 8011c78:	6819      	ldr	r1, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c82:	201c      	movs	r0, #28
 8011c84:	4003      	ands	r3, r0
 8011c86:	409a      	lsls	r2, r3
 8011c88:	4b0c      	ldr	r3, [pc, #48]	@ (8011cbc <HAL_DMA_Init+0xec>)
 8011c8a:	430a      	orrs	r2, r1
 8011c8c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2200      	movs	r2, #0
 8011c92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2225      	movs	r2, #37	@ 0x25
 8011c98:	2101      	movs	r1, #1
 8011c9a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2224      	movs	r2, #36	@ 0x24
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011ca4:	2300      	movs	r3, #0
}
 8011ca6:	0018      	movs	r0, r3
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	b004      	add	sp, #16
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	46c0      	nop			@ (mov r8, r8)
 8011cb0:	bffdfff8 	.word	0xbffdfff8
 8011cb4:	40020000 	.word	0x40020000
 8011cb8:	ffff800f 	.word	0xffff800f
 8011cbc:	400200a8 	.word	0x400200a8

08011cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
 8011ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011cce:	2317      	movs	r3, #23
 8011cd0:	18fb      	adds	r3, r7, r3
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2224      	movs	r2, #36	@ 0x24
 8011cda:	5c9b      	ldrb	r3, [r3, r2]
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d101      	bne.n	8011ce4 <HAL_DMA_Start_IT+0x24>
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	e04f      	b.n	8011d84 <HAL_DMA_Start_IT+0xc4>
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2224      	movs	r2, #36	@ 0x24
 8011ce8:	2101      	movs	r1, #1
 8011cea:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2225      	movs	r2, #37	@ 0x25
 8011cf0:	5c9b      	ldrb	r3, [r3, r2]
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d13a      	bne.n	8011d6e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2225      	movs	r2, #37	@ 0x25
 8011cfc:	2102      	movs	r1, #2
 8011cfe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2200      	movs	r2, #0
 8011d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	681a      	ldr	r2, [r3, #0]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2101      	movs	r1, #1
 8011d12:	438a      	bics	r2, r1
 8011d14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	68b9      	ldr	r1, [r7, #8]
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f000 f976 	bl	801200e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d008      	beq.n	8011d3c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	210e      	movs	r1, #14
 8011d36:	430a      	orrs	r2, r1
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	e00f      	b.n	8011d5c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681a      	ldr	r2, [r3, #0]
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2104      	movs	r1, #4
 8011d48:	438a      	bics	r2, r1
 8011d4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	210a      	movs	r1, #10
 8011d58:	430a      	orrs	r2, r1
 8011d5a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2101      	movs	r1, #1
 8011d68:	430a      	orrs	r2, r1
 8011d6a:	601a      	str	r2, [r3, #0]
 8011d6c:	e007      	b.n	8011d7e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2224      	movs	r2, #36	@ 0x24
 8011d72:	2100      	movs	r1, #0
 8011d74:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8011d76:	2317      	movs	r3, #23
 8011d78:	18fb      	adds	r3, r7, r3
 8011d7a:	2202      	movs	r2, #2
 8011d7c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8011d7e:	2317      	movs	r3, #23
 8011d80:	18fb      	adds	r3, r7, r3
 8011d82:	781b      	ldrb	r3, [r3, #0]
}
 8011d84:	0018      	movs	r0, r3
 8011d86:	46bd      	mov	sp, r7
 8011d88:	b006      	add	sp, #24
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011d94:	230f      	movs	r3, #15
 8011d96:	18fb      	adds	r3, r7, r3
 8011d98:	2200      	movs	r2, #0
 8011d9a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2225      	movs	r2, #37	@ 0x25
 8011da0:	5c9b      	ldrb	r3, [r3, r2]
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	2b02      	cmp	r3, #2
 8011da6:	d008      	beq.n	8011dba <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2204      	movs	r2, #4
 8011dac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2224      	movs	r2, #36	@ 0x24
 8011db2:	2100      	movs	r1, #0
 8011db4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8011db6:	2301      	movs	r3, #1
 8011db8:	e024      	b.n	8011e04 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	210e      	movs	r1, #14
 8011dc6:	438a      	bics	r2, r1
 8011dc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	438a      	bics	r2, r1
 8011dd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011dde:	221c      	movs	r2, #28
 8011de0:	401a      	ands	r2, r3
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011de6:	2101      	movs	r1, #1
 8011de8:	4091      	lsls	r1, r2
 8011dea:	000a      	movs	r2, r1
 8011dec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2225      	movs	r2, #37	@ 0x25
 8011df2:	2101      	movs	r1, #1
 8011df4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2224      	movs	r2, #36	@ 0x24
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	5499      	strb	r1, [r3, r2]

    return status;
 8011dfe:	230f      	movs	r3, #15
 8011e00:	18fb      	adds	r3, r7, r3
 8011e02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e04:	0018      	movs	r0, r3
 8011e06:	46bd      	mov	sp, r7
 8011e08:	b004      	add	sp, #16
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011e14:	210f      	movs	r1, #15
 8011e16:	187b      	adds	r3, r7, r1
 8011e18:	2200      	movs	r2, #0
 8011e1a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2225      	movs	r2, #37	@ 0x25
 8011e20:	5c9b      	ldrb	r3, [r3, r2]
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	2b02      	cmp	r3, #2
 8011e26:	d006      	beq.n	8011e36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2204      	movs	r2, #4
 8011e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8011e2e:	187b      	adds	r3, r7, r1
 8011e30:	2201      	movs	r2, #1
 8011e32:	701a      	strb	r2, [r3, #0]
 8011e34:	e02a      	b.n	8011e8c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	210e      	movs	r1, #14
 8011e42:	438a      	bics	r2, r1
 8011e44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2101      	movs	r1, #1
 8011e52:	438a      	bics	r2, r1
 8011e54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e5a:	221c      	movs	r2, #28
 8011e5c:	401a      	ands	r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e62:	2101      	movs	r1, #1
 8011e64:	4091      	lsls	r1, r2
 8011e66:	000a      	movs	r2, r1
 8011e68:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2225      	movs	r2, #37	@ 0x25
 8011e6e:	2101      	movs	r1, #1
 8011e70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2224      	movs	r2, #36	@ 0x24
 8011e76:	2100      	movs	r1, #0
 8011e78:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d004      	beq.n	8011e8c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	0010      	movs	r0, r2
 8011e8a:	4798      	blx	r3
    }
  }
  return status;
 8011e8c:	230f      	movs	r3, #15
 8011e8e:	18fb      	adds	r3, r7, r3
 8011e90:	781b      	ldrb	r3, [r3, #0]
}
 8011e92:	0018      	movs	r0, r3
 8011e94:	46bd      	mov	sp, r7
 8011e96:	b004      	add	sp, #16
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b084      	sub	sp, #16
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011eb6:	221c      	movs	r2, #28
 8011eb8:	4013      	ands	r3, r2
 8011eba:	2204      	movs	r2, #4
 8011ebc:	409a      	lsls	r2, r3
 8011ebe:	0013      	movs	r3, r2
 8011ec0:	68fa      	ldr	r2, [r7, #12]
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	d026      	beq.n	8011f14 <HAL_DMA_IRQHandler+0x7a>
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	2204      	movs	r2, #4
 8011eca:	4013      	ands	r3, r2
 8011ecc:	d022      	beq.n	8011f14 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2220      	movs	r2, #32
 8011ed6:	4013      	ands	r3, r2
 8011ed8:	d107      	bne.n	8011eea <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2104      	movs	r1, #4
 8011ee6:	438a      	bics	r2, r1
 8011ee8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011eee:	221c      	movs	r2, #28
 8011ef0:	401a      	ands	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ef6:	2104      	movs	r1, #4
 8011ef8:	4091      	lsls	r1, r2
 8011efa:	000a      	movs	r2, r1
 8011efc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d100      	bne.n	8011f08 <HAL_DMA_IRQHandler+0x6e>
 8011f06:	e071      	b.n	8011fec <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	0010      	movs	r0, r2
 8011f10:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8011f12:	e06b      	b.n	8011fec <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f18:	221c      	movs	r2, #28
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	2202      	movs	r2, #2
 8011f1e:	409a      	lsls	r2, r3
 8011f20:	0013      	movs	r3, r2
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	4013      	ands	r3, r2
 8011f26:	d02d      	beq.n	8011f84 <HAL_DMA_IRQHandler+0xea>
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	d029      	beq.n	8011f84 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2220      	movs	r2, #32
 8011f38:	4013      	ands	r3, r2
 8011f3a:	d10b      	bne.n	8011f54 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	210a      	movs	r1, #10
 8011f48:	438a      	bics	r2, r1
 8011f4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2225      	movs	r2, #37	@ 0x25
 8011f50:	2101      	movs	r1, #1
 8011f52:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f58:	221c      	movs	r2, #28
 8011f5a:	401a      	ands	r2, r3
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011f60:	2102      	movs	r1, #2
 8011f62:	4091      	lsls	r1, r2
 8011f64:	000a      	movs	r2, r1
 8011f66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2224      	movs	r2, #36	@ 0x24
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d039      	beq.n	8011fec <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	0010      	movs	r0, r2
 8011f80:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8011f82:	e033      	b.n	8011fec <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f88:	221c      	movs	r2, #28
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	2208      	movs	r2, #8
 8011f8e:	409a      	lsls	r2, r3
 8011f90:	0013      	movs	r3, r2
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	4013      	ands	r3, r2
 8011f96:	d02a      	beq.n	8011fee <HAL_DMA_IRQHandler+0x154>
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2208      	movs	r2, #8
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	d026      	beq.n	8011fee <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	210e      	movs	r1, #14
 8011fac:	438a      	bics	r2, r1
 8011fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fb4:	221c      	movs	r2, #28
 8011fb6:	401a      	ands	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	4091      	lsls	r1, r2
 8011fc0:	000a      	movs	r2, r1
 8011fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2225      	movs	r2, #37	@ 0x25
 8011fce:	2101      	movs	r1, #1
 8011fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2224      	movs	r2, #36	@ 0x24
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d005      	beq.n	8011fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	0010      	movs	r0, r2
 8011fea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8011fec:	46c0      	nop			@ (mov r8, r8)
 8011fee:	46c0      	nop			@ (mov r8, r8)
}
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	b004      	add	sp, #16
 8011ff4:	bd80      	pop	{r7, pc}

08011ff6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8011ff6:	b580      	push	{r7, lr}
 8011ff8:	b082      	sub	sp, #8
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2225      	movs	r2, #37	@ 0x25
 8012002:	5c9b      	ldrb	r3, [r3, r2]
 8012004:	b2db      	uxtb	r3, r3
}
 8012006:	0018      	movs	r0, r3
 8012008:	46bd      	mov	sp, r7
 801200a:	b002      	add	sp, #8
 801200c:	bd80      	pop	{r7, pc}

0801200e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801200e:	b580      	push	{r7, lr}
 8012010:	b084      	sub	sp, #16
 8012012:	af00      	add	r7, sp, #0
 8012014:	60f8      	str	r0, [r7, #12]
 8012016:	60b9      	str	r1, [r7, #8]
 8012018:	607a      	str	r2, [r7, #4]
 801201a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012020:	221c      	movs	r2, #28
 8012022:	401a      	ands	r2, r3
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012028:	2101      	movs	r1, #1
 801202a:	4091      	lsls	r1, r2
 801202c:	000a      	movs	r2, r1
 801202e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	683a      	ldr	r2, [r7, #0]
 8012036:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	2b10      	cmp	r3, #16
 801203e:	d108      	bne.n	8012052 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012050:	e007      	b.n	8012062 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	68ba      	ldr	r2, [r7, #8]
 8012058:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	60da      	str	r2, [r3, #12]
}
 8012062:	46c0      	nop			@ (mov r8, r8)
 8012064:	46bd      	mov	sp, r7
 8012066:	b004      	add	sp, #16
 8012068:	bd80      	pop	{r7, pc}
	...

0801206c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8012074:	f7ff f8d2 	bl	801121c <HAL_GetTick>
 8012078:	0003      	movs	r3, r0
 801207a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801207c:	e00f      	b.n	801209e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	3301      	adds	r3, #1
 8012082:	d00c      	beq.n	801209e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d007      	beq.n	801209a <FLASH_WaitForLastOperation+0x2e>
 801208a:	f7ff f8c7 	bl	801121c <HAL_GetTick>
 801208e:	0002      	movs	r2, r0
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	429a      	cmp	r2, r3
 8012098:	d201      	bcs.n	801209e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 801209a:	2303      	movs	r3, #3
 801209c:	e052      	b.n	8012144 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801209e:	4b2b      	ldr	r3, [pc, #172]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120a0:	699b      	ldr	r3, [r3, #24]
 80120a2:	2201      	movs	r2, #1
 80120a4:	4013      	ands	r3, r2
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	d0e9      	beq.n	801207e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80120aa:	4b28      	ldr	r3, [pc, #160]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120ac:	699b      	ldr	r3, [r3, #24]
 80120ae:	2202      	movs	r2, #2
 80120b0:	4013      	ands	r3, r2
 80120b2:	2b02      	cmp	r3, #2
 80120b4:	d102      	bne.n	80120bc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80120b6:	4b25      	ldr	r3, [pc, #148]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120b8:	2202      	movs	r2, #2
 80120ba:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80120bc:	4b23      	ldr	r3, [pc, #140]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120be:	699a      	ldr	r2, [r3, #24]
 80120c0:	2380      	movs	r3, #128	@ 0x80
 80120c2:	005b      	lsls	r3, r3, #1
 80120c4:	401a      	ands	r2, r3
 80120c6:	2380      	movs	r3, #128	@ 0x80
 80120c8:	005b      	lsls	r3, r3, #1
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d035      	beq.n	801213a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80120ce:	4b1f      	ldr	r3, [pc, #124]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120d0:	699a      	ldr	r2, [r3, #24]
 80120d2:	2380      	movs	r3, #128	@ 0x80
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80120d8:	2380      	movs	r3, #128	@ 0x80
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	429a      	cmp	r2, r3
 80120de:	d02c      	beq.n	801213a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80120e0:	4b1a      	ldr	r3, [pc, #104]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120e2:	699a      	ldr	r2, [r3, #24]
 80120e4:	2380      	movs	r3, #128	@ 0x80
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80120ea:	2380      	movs	r3, #128	@ 0x80
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d023      	beq.n	801213a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80120f2:	4b16      	ldr	r3, [pc, #88]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 80120f4:	699a      	ldr	r2, [r3, #24]
 80120f6:	2380      	movs	r3, #128	@ 0x80
 80120f8:	011b      	lsls	r3, r3, #4
 80120fa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80120fc:	2380      	movs	r3, #128	@ 0x80
 80120fe:	011b      	lsls	r3, r3, #4
 8012100:	429a      	cmp	r2, r3
 8012102:	d01a      	beq.n	801213a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012104:	4b11      	ldr	r3, [pc, #68]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 8012106:	699a      	ldr	r2, [r3, #24]
 8012108:	2380      	movs	r3, #128	@ 0x80
 801210a:	019b      	lsls	r3, r3, #6
 801210c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801210e:	2380      	movs	r3, #128	@ 0x80
 8012110:	019b      	lsls	r3, r3, #6
 8012112:	429a      	cmp	r2, r3
 8012114:	d011      	beq.n	801213a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8012116:	4b0d      	ldr	r3, [pc, #52]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 8012118:	699a      	ldr	r2, [r3, #24]
 801211a:	2380      	movs	r3, #128	@ 0x80
 801211c:	029b      	lsls	r3, r3, #10
 801211e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012120:	2380      	movs	r3, #128	@ 0x80
 8012122:	029b      	lsls	r3, r3, #10
 8012124:	429a      	cmp	r2, r3
 8012126:	d008      	beq.n	801213a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8012128:	4b08      	ldr	r3, [pc, #32]	@ (801214c <FLASH_WaitForLastOperation+0xe0>)
 801212a:	699a      	ldr	r2, [r3, #24]
 801212c:	2380      	movs	r3, #128	@ 0x80
 801212e:	025b      	lsls	r3, r3, #9
 8012130:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8012132:	2380      	movs	r3, #128	@ 0x80
 8012134:	025b      	lsls	r3, r3, #9
 8012136:	429a      	cmp	r2, r3
 8012138:	d103      	bne.n	8012142 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801213a:	f000 f809 	bl	8012150 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801213e:	2301      	movs	r3, #1
 8012140:	e000      	b.n	8012144 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8012142:	2300      	movs	r3, #0
}
 8012144:	0018      	movs	r0, r3
 8012146:	46bd      	mov	sp, r7
 8012148:	b004      	add	sp, #16
 801214a:	bd80      	pop	{r7, pc}
 801214c:	40022000 	.word	0x40022000

08012150 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8012156:	2300      	movs	r3, #0
 8012158:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801215a:	4b49      	ldr	r3, [pc, #292]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 801215c:	699a      	ldr	r2, [r3, #24]
 801215e:	2380      	movs	r3, #128	@ 0x80
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	401a      	ands	r2, r3
 8012164:	2380      	movs	r3, #128	@ 0x80
 8012166:	005b      	lsls	r3, r3, #1
 8012168:	429a      	cmp	r2, r3
 801216a:	d10a      	bne.n	8012182 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801216c:	4b45      	ldr	r3, [pc, #276]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	2202      	movs	r2, #2
 8012172:	431a      	orrs	r2, r3
 8012174:	4b43      	ldr	r3, [pc, #268]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 8012176:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2280      	movs	r2, #128	@ 0x80
 801217c:	0052      	lsls	r2, r2, #1
 801217e:	4313      	orrs	r3, r2
 8012180:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8012182:	4b3f      	ldr	r3, [pc, #252]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 8012184:	699a      	ldr	r2, [r3, #24]
 8012186:	2380      	movs	r3, #128	@ 0x80
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	401a      	ands	r2, r3
 801218c:	2380      	movs	r3, #128	@ 0x80
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	429a      	cmp	r2, r3
 8012192:	d10a      	bne.n	80121aa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8012194:	4b3b      	ldr	r3, [pc, #236]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 8012196:	695b      	ldr	r3, [r3, #20]
 8012198:	2201      	movs	r2, #1
 801219a:	431a      	orrs	r2, r3
 801219c:	4b39      	ldr	r3, [pc, #228]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 801219e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2280      	movs	r2, #128	@ 0x80
 80121a4:	0092      	lsls	r2, r2, #2
 80121a6:	4313      	orrs	r3, r2
 80121a8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80121aa:	4b35      	ldr	r3, [pc, #212]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 80121ac:	699a      	ldr	r2, [r3, #24]
 80121ae:	2380      	movs	r3, #128	@ 0x80
 80121b0:	00db      	lsls	r3, r3, #3
 80121b2:	401a      	ands	r2, r3
 80121b4:	2380      	movs	r3, #128	@ 0x80
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d10a      	bne.n	80121d2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80121bc:	4b31      	ldr	r3, [pc, #196]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 80121be:	695b      	ldr	r3, [r3, #20]
 80121c0:	2208      	movs	r2, #8
 80121c2:	431a      	orrs	r2, r3
 80121c4:	4b2f      	ldr	r3, [pc, #188]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 80121c6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2280      	movs	r2, #128	@ 0x80
 80121cc:	00d2      	lsls	r2, r2, #3
 80121ce:	4313      	orrs	r3, r2
 80121d0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80121d2:	4b2b      	ldr	r3, [pc, #172]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 80121d4:	699a      	ldr	r2, [r3, #24]
 80121d6:	2380      	movs	r3, #128	@ 0x80
 80121d8:	011b      	lsls	r3, r3, #4
 80121da:	401a      	ands	r2, r3
 80121dc:	2380      	movs	r3, #128	@ 0x80
 80121de:	011b      	lsls	r3, r3, #4
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d10a      	bne.n	80121fa <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80121e4:	4b27      	ldr	r3, [pc, #156]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 80121e6:	695b      	ldr	r3, [r3, #20]
 80121e8:	2204      	movs	r2, #4
 80121ea:	431a      	orrs	r2, r3
 80121ec:	4b25      	ldr	r3, [pc, #148]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 80121ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2280      	movs	r2, #128	@ 0x80
 80121f4:	0112      	lsls	r2, r2, #4
 80121f6:	4313      	orrs	r3, r2
 80121f8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80121fa:	4b21      	ldr	r3, [pc, #132]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 80121fc:	699a      	ldr	r2, [r3, #24]
 80121fe:	2380      	movs	r3, #128	@ 0x80
 8012200:	019b      	lsls	r3, r3, #6
 8012202:	401a      	ands	r2, r3
 8012204:	2380      	movs	r3, #128	@ 0x80
 8012206:	019b      	lsls	r3, r3, #6
 8012208:	429a      	cmp	r2, r3
 801220a:	d10a      	bne.n	8012222 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801220c:	4b1d      	ldr	r3, [pc, #116]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 801220e:	695b      	ldr	r3, [r3, #20]
 8012210:	2210      	movs	r2, #16
 8012212:	431a      	orrs	r2, r3
 8012214:	4b1b      	ldr	r3, [pc, #108]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 8012216:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2280      	movs	r2, #128	@ 0x80
 801221c:	0192      	lsls	r2, r2, #6
 801221e:	4313      	orrs	r3, r2
 8012220:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8012222:	4b17      	ldr	r3, [pc, #92]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 8012224:	699a      	ldr	r2, [r3, #24]
 8012226:	2380      	movs	r3, #128	@ 0x80
 8012228:	029b      	lsls	r3, r3, #10
 801222a:	401a      	ands	r2, r3
 801222c:	2380      	movs	r3, #128	@ 0x80
 801222e:	029b      	lsls	r3, r3, #10
 8012230:	429a      	cmp	r2, r3
 8012232:	d109      	bne.n	8012248 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8012234:	4b13      	ldr	r3, [pc, #76]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 8012236:	695b      	ldr	r3, [r3, #20]
 8012238:	2220      	movs	r2, #32
 801223a:	431a      	orrs	r2, r3
 801223c:	4b11      	ldr	r3, [pc, #68]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 801223e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2220      	movs	r2, #32
 8012244:	4313      	orrs	r3, r2
 8012246:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8012248:	4b0d      	ldr	r3, [pc, #52]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 801224a:	699a      	ldr	r2, [r3, #24]
 801224c:	2380      	movs	r3, #128	@ 0x80
 801224e:	025b      	lsls	r3, r3, #9
 8012250:	401a      	ands	r2, r3
 8012252:	2380      	movs	r3, #128	@ 0x80
 8012254:	025b      	lsls	r3, r3, #9
 8012256:	429a      	cmp	r2, r3
 8012258:	d10a      	bne.n	8012270 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801225a:	4b0a      	ldr	r3, [pc, #40]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 801225c:	695b      	ldr	r3, [r3, #20]
 801225e:	2240      	movs	r2, #64	@ 0x40
 8012260:	431a      	orrs	r2, r3
 8012262:	4b08      	ldr	r3, [pc, #32]	@ (8012284 <FLASH_SetErrorCode+0x134>)
 8012264:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2280      	movs	r2, #128	@ 0x80
 801226a:	0252      	lsls	r2, r2, #9
 801226c:	4313      	orrs	r3, r2
 801226e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8012270:	4b03      	ldr	r3, [pc, #12]	@ (8012280 <FLASH_SetErrorCode+0x130>)
 8012272:	687a      	ldr	r2, [r7, #4]
 8012274:	619a      	str	r2, [r3, #24]
}  
 8012276:	46c0      	nop			@ (mov r8, r8)
 8012278:	46bd      	mov	sp, r7
 801227a:	b002      	add	sp, #8
 801227c:	bd80      	pop	{r7, pc}
 801227e:	46c0      	nop			@ (mov r8, r8)
 8012280:	40022000 	.word	0x40022000
 8012284:	2000219c 	.word	0x2000219c

08012288 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801228e:	4b12      	ldr	r3, [pc, #72]	@ (80122d8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	2201      	movs	r2, #1
 8012294:	4013      	ands	r3, r2
 8012296:	d019      	beq.n	80122cc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012298:	f3ef 8310 	mrs	r3, PRIMASK
 801229c:	607b      	str	r3, [r7, #4]
  return(result);
 801229e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80122a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80122a2:	b672      	cpsid	i
}
 80122a4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80122a6:	4b0c      	ldr	r3, [pc, #48]	@ (80122d8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80122a8:	4a0c      	ldr	r2, [pc, #48]	@ (80122dc <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80122aa:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80122ac:	4b0a      	ldr	r3, [pc, #40]	@ (80122d8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80122ae:	4a0c      	ldr	r2, [pc, #48]	@ (80122e0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80122b0:	60da      	str	r2, [r3, #12]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	f383 8810 	msr	PRIMASK, r3
}
 80122bc:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80122be:	4b06      	ldr	r3, [pc, #24]	@ (80122d8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	2201      	movs	r2, #1
 80122c4:	4013      	ands	r3, r2
 80122c6:	d001      	beq.n	80122cc <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80122c8:	2301      	movs	r3, #1
 80122ca:	e000      	b.n	80122ce <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	0018      	movs	r0, r3
 80122d0:	46bd      	mov	sp, r7
 80122d2:	b004      	add	sp, #16
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	46c0      	nop			@ (mov r8, r8)
 80122d8:	40022000 	.word	0x40022000
 80122dc:	89abcdef 	.word	0x89abcdef
 80122e0:	02030405 	.word	0x02030405

080122e4 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80122e8:	4b04      	ldr	r3, [pc, #16]	@ (80122fc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80122ea:	685a      	ldr	r2, [r3, #4]
 80122ec:	4b03      	ldr	r3, [pc, #12]	@ (80122fc <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80122ee:	2101      	movs	r1, #1
 80122f0:	430a      	orrs	r2, r1
 80122f2:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	0018      	movs	r0, r3
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	40022000 	.word	0x40022000

08012300 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8012300:	b5b0      	push	{r4, r5, r7, lr}
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012308:	250f      	movs	r5, #15
 801230a:	197b      	adds	r3, r7, r5
 801230c:	2200      	movs	r2, #0
 801230e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012310:	197c      	adds	r4, r7, r5
 8012312:	4b0f      	ldr	r3, [pc, #60]	@ (8012350 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8012314:	0018      	movs	r0, r3
 8012316:	f7ff fea9 	bl	801206c <FLASH_WaitForLastOperation>
 801231a:	0003      	movs	r3, r0
 801231c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801231e:	0029      	movs	r1, r5
 8012320:	187b      	adds	r3, r7, r1
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10c      	bne.n	8012342 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012328:	4b0a      	ldr	r3, [pc, #40]	@ (8012354 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801232a:	2200      	movs	r2, #0
 801232c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2200      	movs	r2, #0
 8012332:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012334:	187c      	adds	r4, r7, r1
 8012336:	4b06      	ldr	r3, [pc, #24]	@ (8012350 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8012338:	0018      	movs	r0, r3
 801233a:	f7ff fe97 	bl	801206c <FLASH_WaitForLastOperation>
 801233e:	0003      	movs	r3, r0
 8012340:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8012342:	230f      	movs	r3, #15
 8012344:	18fb      	adds	r3, r7, r3
 8012346:	781b      	ldrb	r3, [r3, #0]
}  
 8012348:	0018      	movs	r0, r3
 801234a:	46bd      	mov	sp, r7
 801234c:	b004      	add	sp, #16
 801234e:	bdb0      	pop	{r4, r5, r7, pc}
 8012350:	0000c350 	.word	0x0000c350
 8012354:	2000219c 	.word	0x2000219c

08012358 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8012358:	b5b0      	push	{r4, r5, r7, lr}
 801235a:	b086      	sub	sp, #24
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012364:	2317      	movs	r3, #23
 8012366:	18fb      	adds	r3, r7, r3
 8012368:	2201      	movs	r2, #1
 801236a:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801236c:	4b24      	ldr	r3, [pc, #144]	@ (8012400 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801236e:	7c1b      	ldrb	r3, [r3, #16]
 8012370:	2b01      	cmp	r3, #1
 8012372:	d101      	bne.n	8012378 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8012374:	2302      	movs	r3, #2
 8012376:	e03e      	b.n	80123f6 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8012378:	4b21      	ldr	r3, [pc, #132]	@ (8012400 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801237a:	2201      	movs	r2, #1
 801237c:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801237e:	2517      	movs	r5, #23
 8012380:	197c      	adds	r4, r7, r5
 8012382:	4b20      	ldr	r3, [pc, #128]	@ (8012404 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8012384:	0018      	movs	r0, r3
 8012386:	f7ff fe71 	bl	801206c <FLASH_WaitForLastOperation>
 801238a:	0003      	movs	r3, r0
 801238c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801238e:	197b      	adds	r3, r7, r5
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d129      	bne.n	80123ea <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012396:	4b1a      	ldr	r3, [pc, #104]	@ (8012400 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8012398:	2200      	movs	r2, #0
 801239a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	2b02      	cmp	r3, #2
 80123a0:	d103      	bne.n	80123aa <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	601a      	str	r2, [r3, #0]
 80123a8:	e013      	b.n	80123d2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d104      	bne.n	80123ba <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	b292      	uxth	r2, r2
 80123b6:	801a      	strh	r2, [r3, #0]
 80123b8:	e00b      	b.n	80123d2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d104      	bne.n	80123ca <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	b2d2      	uxtb	r2, r2
 80123c6:	701a      	strb	r2, [r3, #0]
 80123c8:	e003      	b.n	80123d2 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80123ca:	2317      	movs	r3, #23
 80123cc:	18fb      	adds	r3, r7, r3
 80123ce:	2201      	movs	r2, #1
 80123d0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80123d2:	2217      	movs	r2, #23
 80123d4:	18bb      	adds	r3, r7, r2
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d106      	bne.n	80123ea <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80123dc:	18bc      	adds	r4, r7, r2
 80123de:	4b09      	ldr	r3, [pc, #36]	@ (8012404 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80123e0:	0018      	movs	r0, r3
 80123e2:	f7ff fe43 	bl	801206c <FLASH_WaitForLastOperation>
 80123e6:	0003      	movs	r3, r0
 80123e8:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80123ea:	4b05      	ldr	r3, [pc, #20]	@ (8012400 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80123ec:	2200      	movs	r2, #0
 80123ee:	741a      	strb	r2, [r3, #16]

  return status;
 80123f0:	2317      	movs	r3, #23
 80123f2:	18fb      	adds	r3, r7, r3
 80123f4:	781b      	ldrb	r3, [r3, #0]
}
 80123f6:	0018      	movs	r0, r3
 80123f8:	46bd      	mov	sp, r7
 80123fa:	b006      	add	sp, #24
 80123fc:	bdb0      	pop	{r4, r5, r7, pc}
 80123fe:	46c0      	nop			@ (mov r8, r8)
 8012400:	2000219c 	.word	0x2000219c
 8012404:	0000c350 	.word	0x0000c350

08012408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b086      	sub	sp, #24
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8012412:	2300      	movs	r3, #0
 8012414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8012416:	2300      	movs	r3, #0
 8012418:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801241a:	2300      	movs	r3, #0
 801241c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801241e:	e155      	b.n	80126cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2101      	movs	r1, #1
 8012426:	697a      	ldr	r2, [r7, #20]
 8012428:	4091      	lsls	r1, r2
 801242a:	000a      	movs	r2, r1
 801242c:	4013      	ands	r3, r2
 801242e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d100      	bne.n	8012438 <HAL_GPIO_Init+0x30>
 8012436:	e146      	b.n	80126c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	685b      	ldr	r3, [r3, #4]
 801243c:	2203      	movs	r2, #3
 801243e:	4013      	ands	r3, r2
 8012440:	2b01      	cmp	r3, #1
 8012442:	d005      	beq.n	8012450 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	2203      	movs	r2, #3
 801244a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801244c:	2b02      	cmp	r3, #2
 801244e:	d130      	bne.n	80124b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	689b      	ldr	r3, [r3, #8]
 8012454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	005b      	lsls	r3, r3, #1
 801245a:	2203      	movs	r2, #3
 801245c:	409a      	lsls	r2, r3
 801245e:	0013      	movs	r3, r2
 8012460:	43da      	mvns	r2, r3
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	4013      	ands	r3, r2
 8012466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	68da      	ldr	r2, [r3, #12]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	005b      	lsls	r3, r3, #1
 8012470:	409a      	lsls	r2, r3
 8012472:	0013      	movs	r3, r2
 8012474:	693a      	ldr	r2, [r7, #16]
 8012476:	4313      	orrs	r3, r2
 8012478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	693a      	ldr	r2, [r7, #16]
 801247e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012486:	2201      	movs	r2, #1
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	409a      	lsls	r2, r3
 801248c:	0013      	movs	r3, r2
 801248e:	43da      	mvns	r2, r3
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	4013      	ands	r3, r2
 8012494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	091b      	lsrs	r3, r3, #4
 801249c:	2201      	movs	r2, #1
 801249e:	401a      	ands	r2, r3
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	409a      	lsls	r2, r3
 80124a4:	0013      	movs	r3, r2
 80124a6:	693a      	ldr	r2, [r7, #16]
 80124a8:	4313      	orrs	r3, r2
 80124aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	2203      	movs	r2, #3
 80124b8:	4013      	ands	r3, r2
 80124ba:	2b03      	cmp	r3, #3
 80124bc:	d017      	beq.n	80124ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	68db      	ldr	r3, [r3, #12]
 80124c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	005b      	lsls	r3, r3, #1
 80124c8:	2203      	movs	r2, #3
 80124ca:	409a      	lsls	r2, r3
 80124cc:	0013      	movs	r3, r2
 80124ce:	43da      	mvns	r2, r3
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	4013      	ands	r3, r2
 80124d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	689a      	ldr	r2, [r3, #8]
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	005b      	lsls	r3, r3, #1
 80124de:	409a      	lsls	r2, r3
 80124e0:	0013      	movs	r3, r2
 80124e2:	693a      	ldr	r2, [r7, #16]
 80124e4:	4313      	orrs	r3, r2
 80124e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	693a      	ldr	r2, [r7, #16]
 80124ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	2203      	movs	r2, #3
 80124f4:	4013      	ands	r3, r2
 80124f6:	2b02      	cmp	r3, #2
 80124f8:	d123      	bne.n	8012542 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	08da      	lsrs	r2, r3, #3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	3208      	adds	r2, #8
 8012502:	0092      	lsls	r2, r2, #2
 8012504:	58d3      	ldr	r3, [r2, r3]
 8012506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	2207      	movs	r2, #7
 801250c:	4013      	ands	r3, r2
 801250e:	009b      	lsls	r3, r3, #2
 8012510:	220f      	movs	r2, #15
 8012512:	409a      	lsls	r2, r3
 8012514:	0013      	movs	r3, r2
 8012516:	43da      	mvns	r2, r3
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	4013      	ands	r3, r2
 801251c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	691a      	ldr	r2, [r3, #16]
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	2107      	movs	r1, #7
 8012526:	400b      	ands	r3, r1
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	409a      	lsls	r2, r3
 801252c:	0013      	movs	r3, r2
 801252e:	693a      	ldr	r2, [r7, #16]
 8012530:	4313      	orrs	r3, r2
 8012532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	08da      	lsrs	r2, r3, #3
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	3208      	adds	r2, #8
 801253c:	0092      	lsls	r2, r2, #2
 801253e:	6939      	ldr	r1, [r7, #16]
 8012540:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	2203      	movs	r2, #3
 801254e:	409a      	lsls	r2, r3
 8012550:	0013      	movs	r3, r2
 8012552:	43da      	mvns	r2, r3
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	4013      	ands	r3, r2
 8012558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	2203      	movs	r2, #3
 8012560:	401a      	ands	r2, r3
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	005b      	lsls	r3, r3, #1
 8012566:	409a      	lsls	r2, r3
 8012568:	0013      	movs	r3, r2
 801256a:	693a      	ldr	r2, [r7, #16]
 801256c:	4313      	orrs	r3, r2
 801256e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	693a      	ldr	r2, [r7, #16]
 8012574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	685a      	ldr	r2, [r3, #4]
 801257a:	23c0      	movs	r3, #192	@ 0xc0
 801257c:	029b      	lsls	r3, r3, #10
 801257e:	4013      	ands	r3, r2
 8012580:	d100      	bne.n	8012584 <HAL_GPIO_Init+0x17c>
 8012582:	e0a0      	b.n	80126c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012584:	4b57      	ldr	r3, [pc, #348]	@ (80126e4 <HAL_GPIO_Init+0x2dc>)
 8012586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012588:	4b56      	ldr	r3, [pc, #344]	@ (80126e4 <HAL_GPIO_Init+0x2dc>)
 801258a:	2101      	movs	r1, #1
 801258c:	430a      	orrs	r2, r1
 801258e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8012590:	4a55      	ldr	r2, [pc, #340]	@ (80126e8 <HAL_GPIO_Init+0x2e0>)
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	089b      	lsrs	r3, r3, #2
 8012596:	3302      	adds	r3, #2
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	589b      	ldr	r3, [r3, r2]
 801259c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	2203      	movs	r2, #3
 80125a2:	4013      	ands	r3, r2
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	220f      	movs	r2, #15
 80125a8:	409a      	lsls	r2, r3
 80125aa:	0013      	movs	r3, r2
 80125ac:	43da      	mvns	r2, r3
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	4013      	ands	r3, r2
 80125b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	23a0      	movs	r3, #160	@ 0xa0
 80125b8:	05db      	lsls	r3, r3, #23
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d01f      	beq.n	80125fe <HAL_GPIO_Init+0x1f6>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4a4a      	ldr	r2, [pc, #296]	@ (80126ec <HAL_GPIO_Init+0x2e4>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d019      	beq.n	80125fa <HAL_GPIO_Init+0x1f2>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4a49      	ldr	r2, [pc, #292]	@ (80126f0 <HAL_GPIO_Init+0x2e8>)
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d013      	beq.n	80125f6 <HAL_GPIO_Init+0x1ee>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4a48      	ldr	r2, [pc, #288]	@ (80126f4 <HAL_GPIO_Init+0x2ec>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d00d      	beq.n	80125f2 <HAL_GPIO_Init+0x1ea>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	4a47      	ldr	r2, [pc, #284]	@ (80126f8 <HAL_GPIO_Init+0x2f0>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d007      	beq.n	80125ee <HAL_GPIO_Init+0x1e6>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a46      	ldr	r2, [pc, #280]	@ (80126fc <HAL_GPIO_Init+0x2f4>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d101      	bne.n	80125ea <HAL_GPIO_Init+0x1e2>
 80125e6:	2305      	movs	r3, #5
 80125e8:	e00a      	b.n	8012600 <HAL_GPIO_Init+0x1f8>
 80125ea:	2306      	movs	r3, #6
 80125ec:	e008      	b.n	8012600 <HAL_GPIO_Init+0x1f8>
 80125ee:	2304      	movs	r3, #4
 80125f0:	e006      	b.n	8012600 <HAL_GPIO_Init+0x1f8>
 80125f2:	2303      	movs	r3, #3
 80125f4:	e004      	b.n	8012600 <HAL_GPIO_Init+0x1f8>
 80125f6:	2302      	movs	r3, #2
 80125f8:	e002      	b.n	8012600 <HAL_GPIO_Init+0x1f8>
 80125fa:	2301      	movs	r3, #1
 80125fc:	e000      	b.n	8012600 <HAL_GPIO_Init+0x1f8>
 80125fe:	2300      	movs	r3, #0
 8012600:	697a      	ldr	r2, [r7, #20]
 8012602:	2103      	movs	r1, #3
 8012604:	400a      	ands	r2, r1
 8012606:	0092      	lsls	r2, r2, #2
 8012608:	4093      	lsls	r3, r2
 801260a:	693a      	ldr	r2, [r7, #16]
 801260c:	4313      	orrs	r3, r2
 801260e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012610:	4935      	ldr	r1, [pc, #212]	@ (80126e8 <HAL_GPIO_Init+0x2e0>)
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	089b      	lsrs	r3, r3, #2
 8012616:	3302      	adds	r3, #2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	693a      	ldr	r2, [r7, #16]
 801261c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801261e:	4b38      	ldr	r3, [pc, #224]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	43da      	mvns	r2, r3
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	4013      	ands	r3, r2
 801262c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	685a      	ldr	r2, [r3, #4]
 8012632:	2380      	movs	r3, #128	@ 0x80
 8012634:	035b      	lsls	r3, r3, #13
 8012636:	4013      	ands	r3, r2
 8012638:	d003      	beq.n	8012642 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801263a:	693a      	ldr	r2, [r7, #16]
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	4313      	orrs	r3, r2
 8012640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8012642:	4b2f      	ldr	r3, [pc, #188]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 8012644:	693a      	ldr	r2, [r7, #16]
 8012646:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8012648:	4b2d      	ldr	r3, [pc, #180]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 801264a:	68db      	ldr	r3, [r3, #12]
 801264c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	43da      	mvns	r2, r3
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	4013      	ands	r3, r2
 8012656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	685a      	ldr	r2, [r3, #4]
 801265c:	2380      	movs	r3, #128	@ 0x80
 801265e:	039b      	lsls	r3, r3, #14
 8012660:	4013      	ands	r3, r2
 8012662:	d003      	beq.n	801266c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8012664:	693a      	ldr	r2, [r7, #16]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	4313      	orrs	r3, r2
 801266a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 801266c:	4b24      	ldr	r3, [pc, #144]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 801266e:	693a      	ldr	r2, [r7, #16]
 8012670:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8012672:	4b23      	ldr	r3, [pc, #140]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	43da      	mvns	r2, r3
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	4013      	ands	r3, r2
 8012680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	685a      	ldr	r2, [r3, #4]
 8012686:	2380      	movs	r3, #128	@ 0x80
 8012688:	029b      	lsls	r3, r3, #10
 801268a:	4013      	ands	r3, r2
 801268c:	d003      	beq.n	8012696 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 801268e:	693a      	ldr	r2, [r7, #16]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	4313      	orrs	r3, r2
 8012694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8012696:	4b1a      	ldr	r3, [pc, #104]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801269c:	4b18      	ldr	r3, [pc, #96]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	43da      	mvns	r2, r3
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	4013      	ands	r3, r2
 80126aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	685a      	ldr	r2, [r3, #4]
 80126b0:	2380      	movs	r3, #128	@ 0x80
 80126b2:	025b      	lsls	r3, r3, #9
 80126b4:	4013      	ands	r3, r2
 80126b6:	d003      	beq.n	80126c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80126b8:	693a      	ldr	r2, [r7, #16]
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	4313      	orrs	r3, r2
 80126be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80126c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012700 <HAL_GPIO_Init+0x2f8>)
 80126c2:	693a      	ldr	r2, [r7, #16]
 80126c4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	3301      	adds	r3, #1
 80126ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	40da      	lsrs	r2, r3
 80126d4:	1e13      	subs	r3, r2, #0
 80126d6:	d000      	beq.n	80126da <HAL_GPIO_Init+0x2d2>
 80126d8:	e6a2      	b.n	8012420 <HAL_GPIO_Init+0x18>
  }
}
 80126da:	46c0      	nop			@ (mov r8, r8)
 80126dc:	46c0      	nop			@ (mov r8, r8)
 80126de:	46bd      	mov	sp, r7
 80126e0:	b006      	add	sp, #24
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	40021000 	.word	0x40021000
 80126e8:	40010000 	.word	0x40010000
 80126ec:	50000400 	.word	0x50000400
 80126f0:	50000800 	.word	0x50000800
 80126f4:	50000c00 	.word	0x50000c00
 80126f8:	50001000 	.word	0x50001000
 80126fc:	50001c00 	.word	0x50001c00
 8012700:	40010400 	.word	0x40010400

08012704 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
 801270c:	000a      	movs	r2, r1
 801270e:	1cbb      	adds	r3, r7, #2
 8012710:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	691b      	ldr	r3, [r3, #16]
 8012716:	1cba      	adds	r2, r7, #2
 8012718:	8812      	ldrh	r2, [r2, #0]
 801271a:	4013      	ands	r3, r2
 801271c:	d004      	beq.n	8012728 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801271e:	230f      	movs	r3, #15
 8012720:	18fb      	adds	r3, r7, r3
 8012722:	2201      	movs	r2, #1
 8012724:	701a      	strb	r2, [r3, #0]
 8012726:	e003      	b.n	8012730 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012728:	230f      	movs	r3, #15
 801272a:	18fb      	adds	r3, r7, r3
 801272c:	2200      	movs	r2, #0
 801272e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8012730:	230f      	movs	r3, #15
 8012732:	18fb      	adds	r3, r7, r3
 8012734:	781b      	ldrb	r3, [r3, #0]
}
 8012736:	0018      	movs	r0, r3
 8012738:	46bd      	mov	sp, r7
 801273a:	b004      	add	sp, #16
 801273c:	bd80      	pop	{r7, pc}

0801273e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b082      	sub	sp, #8
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	0008      	movs	r0, r1
 8012748:	0011      	movs	r1, r2
 801274a:	1cbb      	adds	r3, r7, #2
 801274c:	1c02      	adds	r2, r0, #0
 801274e:	801a      	strh	r2, [r3, #0]
 8012750:	1c7b      	adds	r3, r7, #1
 8012752:	1c0a      	adds	r2, r1, #0
 8012754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012756:	1c7b      	adds	r3, r7, #1
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d004      	beq.n	8012768 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 801275e:	1cbb      	adds	r3, r7, #2
 8012760:	881a      	ldrh	r2, [r3, #0]
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8012766:	e003      	b.n	8012770 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8012768:	1cbb      	adds	r3, r7, #2
 801276a:	881a      	ldrh	r2, [r3, #0]
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8012770:	46c0      	nop			@ (mov r8, r8)
 8012772:	46bd      	mov	sp, r7
 8012774:	b002      	add	sp, #8
 8012776:	bd80      	pop	{r7, pc}

08012778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	0002      	movs	r2, r0
 8012780:	1dbb      	adds	r3, r7, #6
 8012782:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8012784:	4b09      	ldr	r3, [pc, #36]	@ (80127ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8012786:	695b      	ldr	r3, [r3, #20]
 8012788:	1dba      	adds	r2, r7, #6
 801278a:	8812      	ldrh	r2, [r2, #0]
 801278c:	4013      	ands	r3, r2
 801278e:	d008      	beq.n	80127a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8012790:	4b06      	ldr	r3, [pc, #24]	@ (80127ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8012792:	1dba      	adds	r2, r7, #6
 8012794:	8812      	ldrh	r2, [r2, #0]
 8012796:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8012798:	1dbb      	adds	r3, r7, #6
 801279a:	881b      	ldrh	r3, [r3, #0]
 801279c:	0018      	movs	r0, r3
 801279e:	f7f7 fe6d 	bl	800a47c <HAL_GPIO_EXTI_Callback>
  }
}
 80127a2:	46c0      	nop			@ (mov r8, r8)
 80127a4:	46bd      	mov	sp, r7
 80127a6:	b002      	add	sp, #8
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	46c0      	nop			@ (mov r8, r8)
 80127ac:	40010400 	.word	0x40010400

080127b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d101      	bne.n	80127c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	e082      	b.n	80128c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2241      	movs	r2, #65	@ 0x41
 80127c6:	5c9b      	ldrb	r3, [r3, r2]
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d107      	bne.n	80127de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2240      	movs	r2, #64	@ 0x40
 80127d2:	2100      	movs	r1, #0
 80127d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	0018      	movs	r0, r3
 80127da:	f7f7 f945 	bl	8009a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2241      	movs	r2, #65	@ 0x41
 80127e2:	2124      	movs	r1, #36	@ 0x24
 80127e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2101      	movs	r1, #1
 80127f2:	438a      	bics	r2, r1
 80127f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	685a      	ldr	r2, [r3, #4]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4934      	ldr	r1, [pc, #208]	@ (80128d0 <HAL_I2C_Init+0x120>)
 8012800:	400a      	ands	r2, r1
 8012802:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	689a      	ldr	r2, [r3, #8]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4931      	ldr	r1, [pc, #196]	@ (80128d4 <HAL_I2C_Init+0x124>)
 8012810:	400a      	ands	r2, r1
 8012812:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	2b01      	cmp	r3, #1
 801281a:	d108      	bne.n	801282e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	689a      	ldr	r2, [r3, #8]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2180      	movs	r1, #128	@ 0x80
 8012826:	0209      	lsls	r1, r1, #8
 8012828:	430a      	orrs	r2, r1
 801282a:	609a      	str	r2, [r3, #8]
 801282c:	e007      	b.n	801283e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	689a      	ldr	r2, [r3, #8]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2184      	movs	r1, #132	@ 0x84
 8012838:	0209      	lsls	r1, r1, #8
 801283a:	430a      	orrs	r2, r1
 801283c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	68db      	ldr	r3, [r3, #12]
 8012842:	2b02      	cmp	r3, #2
 8012844:	d104      	bne.n	8012850 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2280      	movs	r2, #128	@ 0x80
 801284c:	0112      	lsls	r2, r2, #4
 801284e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	685a      	ldr	r2, [r3, #4]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	491f      	ldr	r1, [pc, #124]	@ (80128d8 <HAL_I2C_Init+0x128>)
 801285c:	430a      	orrs	r2, r1
 801285e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	68da      	ldr	r2, [r3, #12]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	491a      	ldr	r1, [pc, #104]	@ (80128d4 <HAL_I2C_Init+0x124>)
 801286c:	400a      	ands	r2, r1
 801286e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	691a      	ldr	r2, [r3, #16]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	695b      	ldr	r3, [r3, #20]
 8012878:	431a      	orrs	r2, r3
 801287a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	699b      	ldr	r3, [r3, #24]
 8012880:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	430a      	orrs	r2, r1
 8012888:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	69d9      	ldr	r1, [r3, #28]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6a1a      	ldr	r2, [r3, #32]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	430a      	orrs	r2, r1
 8012898:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2101      	movs	r1, #1
 80128a6:	430a      	orrs	r2, r1
 80128a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2241      	movs	r2, #65	@ 0x41
 80128b4:	2120      	movs	r1, #32
 80128b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2200      	movs	r2, #0
 80128bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2242      	movs	r2, #66	@ 0x42
 80128c2:	2100      	movs	r1, #0
 80128c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80128c6:	2300      	movs	r3, #0
}
 80128c8:	0018      	movs	r0, r3
 80128ca:	46bd      	mov	sp, r7
 80128cc:	b002      	add	sp, #8
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	f0ffffff 	.word	0xf0ffffff
 80128d4:	ffff7fff 	.word	0xffff7fff
 80128d8:	02008000 	.word	0x02008000

080128dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80128dc:	b590      	push	{r4, r7, lr}
 80128de:	b089      	sub	sp, #36	@ 0x24
 80128e0:	af02      	add	r7, sp, #8
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	0008      	movs	r0, r1
 80128e6:	607a      	str	r2, [r7, #4]
 80128e8:	0019      	movs	r1, r3
 80128ea:	230a      	movs	r3, #10
 80128ec:	18fb      	adds	r3, r7, r3
 80128ee:	1c02      	adds	r2, r0, #0
 80128f0:	801a      	strh	r2, [r3, #0]
 80128f2:	2308      	movs	r3, #8
 80128f4:	18fb      	adds	r3, r7, r3
 80128f6:	1c0a      	adds	r2, r1, #0
 80128f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2241      	movs	r2, #65	@ 0x41
 80128fe:	5c9b      	ldrb	r3, [r3, r2]
 8012900:	b2db      	uxtb	r3, r3
 8012902:	2b20      	cmp	r3, #32
 8012904:	d000      	beq.n	8012908 <HAL_I2C_Master_Transmit+0x2c>
 8012906:	e0e7      	b.n	8012ad8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2240      	movs	r2, #64	@ 0x40
 801290c:	5c9b      	ldrb	r3, [r3, r2]
 801290e:	2b01      	cmp	r3, #1
 8012910:	d101      	bne.n	8012916 <HAL_I2C_Master_Transmit+0x3a>
 8012912:	2302      	movs	r3, #2
 8012914:	e0e1      	b.n	8012ada <HAL_I2C_Master_Transmit+0x1fe>
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2240      	movs	r2, #64	@ 0x40
 801291a:	2101      	movs	r1, #1
 801291c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801291e:	f7fe fc7d 	bl	801121c <HAL_GetTick>
 8012922:	0003      	movs	r3, r0
 8012924:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012926:	2380      	movs	r3, #128	@ 0x80
 8012928:	0219      	lsls	r1, r3, #8
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	2319      	movs	r3, #25
 8012932:	2201      	movs	r2, #1
 8012934:	f002 fa30 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 8012938:	1e03      	subs	r3, r0, #0
 801293a:	d001      	beq.n	8012940 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 801293c:	2301      	movs	r3, #1
 801293e:	e0cc      	b.n	8012ada <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2241      	movs	r2, #65	@ 0x41
 8012944:	2121      	movs	r1, #33	@ 0x21
 8012946:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2242      	movs	r2, #66	@ 0x42
 801294c:	2110      	movs	r1, #16
 801294e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	2200      	movs	r2, #0
 8012954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2208      	movs	r2, #8
 8012960:	18ba      	adds	r2, r7, r2
 8012962:	8812      	ldrh	r2, [r2, #0]
 8012964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012970:	b29b      	uxth	r3, r3
 8012972:	2bff      	cmp	r3, #255	@ 0xff
 8012974:	d911      	bls.n	801299a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	22ff      	movs	r2, #255	@ 0xff
 801297a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012980:	b2da      	uxtb	r2, r3
 8012982:	2380      	movs	r3, #128	@ 0x80
 8012984:	045c      	lsls	r4, r3, #17
 8012986:	230a      	movs	r3, #10
 8012988:	18fb      	adds	r3, r7, r3
 801298a:	8819      	ldrh	r1, [r3, #0]
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	4b55      	ldr	r3, [pc, #340]	@ (8012ae4 <HAL_I2C_Master_Transmit+0x208>)
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	0023      	movs	r3, r4
 8012994:	f002 fc52 	bl	801523c <I2C_TransferConfig>
 8012998:	e075      	b.n	8012a86 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801299e:	b29a      	uxth	r2, r3
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129a8:	b2da      	uxtb	r2, r3
 80129aa:	2380      	movs	r3, #128	@ 0x80
 80129ac:	049c      	lsls	r4, r3, #18
 80129ae:	230a      	movs	r3, #10
 80129b0:	18fb      	adds	r3, r7, r3
 80129b2:	8819      	ldrh	r1, [r3, #0]
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	4b4b      	ldr	r3, [pc, #300]	@ (8012ae4 <HAL_I2C_Master_Transmit+0x208>)
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	0023      	movs	r3, r4
 80129bc:	f002 fc3e 	bl	801523c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80129c0:	e061      	b.n	8012a86 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80129c2:	697a      	ldr	r2, [r7, #20]
 80129c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	0018      	movs	r0, r3
 80129ca:	f002 fa33 	bl	8014e34 <I2C_WaitOnTXISFlagUntilTimeout>
 80129ce:	1e03      	subs	r3, r0, #0
 80129d0:	d001      	beq.n	80129d6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80129d2:	2301      	movs	r3, #1
 80129d4:	e081      	b.n	8012ada <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129da:	781a      	ldrb	r2, [r3, #0]
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	3b01      	subs	r3, #1
 80129f4:	b29a      	uxth	r2, r3
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129fe:	3b01      	subs	r3, #1
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d03a      	beq.n	8012a86 <HAL_I2C_Master_Transmit+0x1aa>
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d136      	bne.n	8012a86 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a1a:	68f8      	ldr	r0, [r7, #12]
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	0013      	movs	r3, r2
 8012a22:	2200      	movs	r2, #0
 8012a24:	2180      	movs	r1, #128	@ 0x80
 8012a26:	f002 f9b7 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 8012a2a:	1e03      	subs	r3, r0, #0
 8012a2c:	d001      	beq.n	8012a32 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e053      	b.n	8012ada <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	2bff      	cmp	r3, #255	@ 0xff
 8012a3a:	d911      	bls.n	8012a60 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	22ff      	movs	r2, #255	@ 0xff
 8012a40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a46:	b2da      	uxtb	r2, r3
 8012a48:	2380      	movs	r3, #128	@ 0x80
 8012a4a:	045c      	lsls	r4, r3, #17
 8012a4c:	230a      	movs	r3, #10
 8012a4e:	18fb      	adds	r3, r7, r3
 8012a50:	8819      	ldrh	r1, [r3, #0]
 8012a52:	68f8      	ldr	r0, [r7, #12]
 8012a54:	2300      	movs	r3, #0
 8012a56:	9300      	str	r3, [sp, #0]
 8012a58:	0023      	movs	r3, r4
 8012a5a:	f002 fbef 	bl	801523c <I2C_TransferConfig>
 8012a5e:	e012      	b.n	8012a86 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012a6e:	b2da      	uxtb	r2, r3
 8012a70:	2380      	movs	r3, #128	@ 0x80
 8012a72:	049c      	lsls	r4, r3, #18
 8012a74:	230a      	movs	r3, #10
 8012a76:	18fb      	adds	r3, r7, r3
 8012a78:	8819      	ldrh	r1, [r3, #0]
 8012a7a:	68f8      	ldr	r0, [r7, #12]
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	0023      	movs	r3, r4
 8012a82:	f002 fbdb 	bl	801523c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d198      	bne.n	80129c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012a90:	697a      	ldr	r2, [r7, #20]
 8012a92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	0018      	movs	r0, r3
 8012a98:	f002 fa12 	bl	8014ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012a9c:	1e03      	subs	r3, r0, #0
 8012a9e:	d001      	beq.n	8012aa4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	e01a      	b.n	8012ada <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2220      	movs	r2, #32
 8012aaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	685a      	ldr	r2, [r3, #4]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	490c      	ldr	r1, [pc, #48]	@ (8012ae8 <HAL_I2C_Master_Transmit+0x20c>)
 8012ab8:	400a      	ands	r2, r1
 8012aba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2241      	movs	r2, #65	@ 0x41
 8012ac0:	2120      	movs	r1, #32
 8012ac2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	2242      	movs	r2, #66	@ 0x42
 8012ac8:	2100      	movs	r1, #0
 8012aca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2240      	movs	r2, #64	@ 0x40
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	e000      	b.n	8012ada <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8012ad8:	2302      	movs	r3, #2
  }
}
 8012ada:	0018      	movs	r0, r3
 8012adc:	46bd      	mov	sp, r7
 8012ade:	b007      	add	sp, #28
 8012ae0:	bd90      	pop	{r4, r7, pc}
 8012ae2:	46c0      	nop			@ (mov r8, r8)
 8012ae4:	80002000 	.word	0x80002000
 8012ae8:	fe00e800 	.word	0xfe00e800

08012aec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8012aec:	b590      	push	{r4, r7, lr}
 8012aee:	b089      	sub	sp, #36	@ 0x24
 8012af0:	af02      	add	r7, sp, #8
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	0008      	movs	r0, r1
 8012af6:	607a      	str	r2, [r7, #4]
 8012af8:	0019      	movs	r1, r3
 8012afa:	230a      	movs	r3, #10
 8012afc:	18fb      	adds	r3, r7, r3
 8012afe:	1c02      	adds	r2, r0, #0
 8012b00:	801a      	strh	r2, [r3, #0]
 8012b02:	2308      	movs	r3, #8
 8012b04:	18fb      	adds	r3, r7, r3
 8012b06:	1c0a      	adds	r2, r1, #0
 8012b08:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2241      	movs	r2, #65	@ 0x41
 8012b0e:	5c9b      	ldrb	r3, [r3, r2]
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	2b20      	cmp	r3, #32
 8012b14:	d000      	beq.n	8012b18 <HAL_I2C_Master_Receive+0x2c>
 8012b16:	e0e8      	b.n	8012cea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	2240      	movs	r2, #64	@ 0x40
 8012b1c:	5c9b      	ldrb	r3, [r3, r2]
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	d101      	bne.n	8012b26 <HAL_I2C_Master_Receive+0x3a>
 8012b22:	2302      	movs	r3, #2
 8012b24:	e0e2      	b.n	8012cec <HAL_I2C_Master_Receive+0x200>
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2240      	movs	r2, #64	@ 0x40
 8012b2a:	2101      	movs	r1, #1
 8012b2c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012b2e:	f7fe fb75 	bl	801121c <HAL_GetTick>
 8012b32:	0003      	movs	r3, r0
 8012b34:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012b36:	2380      	movs	r3, #128	@ 0x80
 8012b38:	0219      	lsls	r1, r3, #8
 8012b3a:	68f8      	ldr	r0, [r7, #12]
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	9300      	str	r3, [sp, #0]
 8012b40:	2319      	movs	r3, #25
 8012b42:	2201      	movs	r2, #1
 8012b44:	f002 f928 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 8012b48:	1e03      	subs	r3, r0, #0
 8012b4a:	d001      	beq.n	8012b50 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e0cd      	b.n	8012cec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2241      	movs	r2, #65	@ 0x41
 8012b54:	2122      	movs	r1, #34	@ 0x22
 8012b56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2242      	movs	r2, #66	@ 0x42
 8012b5c:	2110      	movs	r1, #16
 8012b5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2200      	movs	r2, #0
 8012b64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2208      	movs	r2, #8
 8012b70:	18ba      	adds	r2, r7, r2
 8012b72:	8812      	ldrh	r2, [r2, #0]
 8012b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	2bff      	cmp	r3, #255	@ 0xff
 8012b84:	d911      	bls.n	8012baa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	22ff      	movs	r2, #255	@ 0xff
 8012b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	2380      	movs	r3, #128	@ 0x80
 8012b94:	045c      	lsls	r4, r3, #17
 8012b96:	230a      	movs	r3, #10
 8012b98:	18fb      	adds	r3, r7, r3
 8012b9a:	8819      	ldrh	r1, [r3, #0]
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	4b55      	ldr	r3, [pc, #340]	@ (8012cf4 <HAL_I2C_Master_Receive+0x208>)
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	0023      	movs	r3, r4
 8012ba4:	f002 fb4a 	bl	801523c <I2C_TransferConfig>
 8012ba8:	e076      	b.n	8012c98 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012bae:	b29a      	uxth	r2, r3
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012bb8:	b2da      	uxtb	r2, r3
 8012bba:	2380      	movs	r3, #128	@ 0x80
 8012bbc:	049c      	lsls	r4, r3, #18
 8012bbe:	230a      	movs	r3, #10
 8012bc0:	18fb      	adds	r3, r7, r3
 8012bc2:	8819      	ldrh	r1, [r3, #0]
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8012cf4 <HAL_I2C_Master_Receive+0x208>)
 8012bc8:	9300      	str	r3, [sp, #0]
 8012bca:	0023      	movs	r3, r4
 8012bcc:	f002 fb36 	bl	801523c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8012bd0:	e062      	b.n	8012c98 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012bd2:	697a      	ldr	r2, [r7, #20]
 8012bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	0018      	movs	r0, r3
 8012bda:	f002 f9b5 	bl	8014f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8012bde:	1e03      	subs	r3, r0, #0
 8012be0:	d001      	beq.n	8012be6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e082      	b.n	8012cec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bf0:	b2d2      	uxtb	r2, r2
 8012bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bf8:	1c5a      	adds	r2, r3, #1
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c02:	3b01      	subs	r3, #1
 8012c04:	b29a      	uxth	r2, r3
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	3b01      	subs	r3, #1
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d03a      	beq.n	8012c98 <HAL_I2C_Master_Receive+0x1ac>
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d136      	bne.n	8012c98 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8012c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c2c:	68f8      	ldr	r0, [r7, #12]
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	0013      	movs	r3, r2
 8012c34:	2200      	movs	r2, #0
 8012c36:	2180      	movs	r1, #128	@ 0x80
 8012c38:	f002 f8ae 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 8012c3c:	1e03      	subs	r3, r0, #0
 8012c3e:	d001      	beq.n	8012c44 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8012c40:	2301      	movs	r3, #1
 8012c42:	e053      	b.n	8012cec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	2bff      	cmp	r3, #255	@ 0xff
 8012c4c:	d911      	bls.n	8012c72 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	22ff      	movs	r2, #255	@ 0xff
 8012c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	2380      	movs	r3, #128	@ 0x80
 8012c5c:	045c      	lsls	r4, r3, #17
 8012c5e:	230a      	movs	r3, #10
 8012c60:	18fb      	adds	r3, r7, r3
 8012c62:	8819      	ldrh	r1, [r3, #0]
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	2300      	movs	r3, #0
 8012c68:	9300      	str	r3, [sp, #0]
 8012c6a:	0023      	movs	r3, r4
 8012c6c:	f002 fae6 	bl	801523c <I2C_TransferConfig>
 8012c70:	e012      	b.n	8012c98 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c80:	b2da      	uxtb	r2, r3
 8012c82:	2380      	movs	r3, #128	@ 0x80
 8012c84:	049c      	lsls	r4, r3, #18
 8012c86:	230a      	movs	r3, #10
 8012c88:	18fb      	adds	r3, r7, r3
 8012c8a:	8819      	ldrh	r1, [r3, #0]
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	2300      	movs	r3, #0
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	0023      	movs	r3, r4
 8012c94:	f002 fad2 	bl	801523c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d197      	bne.n	8012bd2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012ca2:	697a      	ldr	r2, [r7, #20]
 8012ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	0018      	movs	r0, r3
 8012caa:	f002 f909 	bl	8014ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012cae:	1e03      	subs	r3, r0, #0
 8012cb0:	d001      	beq.n	8012cb6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e01a      	b.n	8012cec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2220      	movs	r2, #32
 8012cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	685a      	ldr	r2, [r3, #4]
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	490b      	ldr	r1, [pc, #44]	@ (8012cf8 <HAL_I2C_Master_Receive+0x20c>)
 8012cca:	400a      	ands	r2, r1
 8012ccc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2241      	movs	r2, #65	@ 0x41
 8012cd2:	2120      	movs	r1, #32
 8012cd4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2242      	movs	r2, #66	@ 0x42
 8012cda:	2100      	movs	r1, #0
 8012cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2240      	movs	r2, #64	@ 0x40
 8012ce2:	2100      	movs	r1, #0
 8012ce4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	e000      	b.n	8012cec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8012cea:	2302      	movs	r3, #2
  }
}
 8012cec:	0018      	movs	r0, r3
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	b007      	add	sp, #28
 8012cf2:	bd90      	pop	{r4, r7, pc}
 8012cf4:	80002400 	.word	0x80002400
 8012cf8:	fe00e800 	.word	0xfe00e800

08012cfc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8012cfc:	b5b0      	push	{r4, r5, r7, lr}
 8012cfe:	b088      	sub	sp, #32
 8012d00:	af02      	add	r7, sp, #8
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	0008      	movs	r0, r1
 8012d06:	607a      	str	r2, [r7, #4]
 8012d08:	0019      	movs	r1, r3
 8012d0a:	230a      	movs	r3, #10
 8012d0c:	18fb      	adds	r3, r7, r3
 8012d0e:	1c02      	adds	r2, r0, #0
 8012d10:	801a      	strh	r2, [r3, #0]
 8012d12:	2308      	movs	r3, #8
 8012d14:	18fb      	adds	r3, r7, r3
 8012d16:	1c0a      	adds	r2, r1, #0
 8012d18:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2241      	movs	r2, #65	@ 0x41
 8012d1e:	5c9b      	ldrb	r3, [r3, r2]
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	2b20      	cmp	r3, #32
 8012d24:	d000      	beq.n	8012d28 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8012d26:	e0dd      	b.n	8012ee4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	699a      	ldr	r2, [r3, #24]
 8012d2e:	2380      	movs	r3, #128	@ 0x80
 8012d30:	021b      	lsls	r3, r3, #8
 8012d32:	401a      	ands	r2, r3
 8012d34:	2380      	movs	r3, #128	@ 0x80
 8012d36:	021b      	lsls	r3, r3, #8
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d101      	bne.n	8012d40 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8012d3c:	2302      	movs	r3, #2
 8012d3e:	e0d2      	b.n	8012ee6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2240      	movs	r2, #64	@ 0x40
 8012d44:	5c9b      	ldrb	r3, [r3, r2]
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d101      	bne.n	8012d4e <HAL_I2C_Master_Transmit_DMA+0x52>
 8012d4a:	2302      	movs	r3, #2
 8012d4c:	e0cb      	b.n	8012ee6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2240      	movs	r2, #64	@ 0x40
 8012d52:	2101      	movs	r1, #1
 8012d54:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2241      	movs	r2, #65	@ 0x41
 8012d5a:	2121      	movs	r1, #33	@ 0x21
 8012d5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2242      	movs	r2, #66	@ 0x42
 8012d62:	2110      	movs	r1, #16
 8012d64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2208      	movs	r2, #8
 8012d76:	18ba      	adds	r2, r7, r2
 8012d78:	8812      	ldrh	r2, [r2, #0]
 8012d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8012ef0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8012d80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	4a5b      	ldr	r2, [pc, #364]	@ (8012ef4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8012d86:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	2bff      	cmp	r3, #255	@ 0xff
 8012d90:	d906      	bls.n	8012da0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	22ff      	movs	r2, #255	@ 0xff
 8012d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012d98:	2380      	movs	r3, #128	@ 0x80
 8012d9a:	045b      	lsls	r3, r3, #17
 8012d9c:	617b      	str	r3, [r7, #20]
 8012d9e:	e007      	b.n	8012db0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012daa:	2380      	movs	r3, #128	@ 0x80
 8012dac:	049b      	lsls	r3, r3, #18
 8012dae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d100      	bne.n	8012dba <HAL_I2C_Master_Transmit_DMA+0xbe>
 8012db8:	e078      	b.n	8012eac <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d023      	beq.n	8012e0a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dc6:	4a4c      	ldr	r2, [pc, #304]	@ (8012ef8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8012dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dce:	4a4b      	ldr	r2, [pc, #300]	@ (8012efc <HAL_I2C_Master_Transmit_DMA+0x200>)
 8012dd0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dde:	2200      	movs	r2, #0
 8012de0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012de6:	6879      	ldr	r1, [r7, #4]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	3328      	adds	r3, #40	@ 0x28
 8012dee:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8012df4:	2513      	movs	r5, #19
 8012df6:	197c      	adds	r4, r7, r5
 8012df8:	f7fe ff62 	bl	8011cc0 <HAL_DMA_Start_IT>
 8012dfc:	0003      	movs	r3, r0
 8012dfe:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8012e00:	197b      	adds	r3, r7, r5
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d13d      	bne.n	8012e84 <HAL_I2C_Master_Transmit_DMA+0x188>
 8012e08:	e013      	b.n	8012e32 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	2241      	movs	r2, #65	@ 0x41
 8012e0e:	2120      	movs	r1, #32
 8012e10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	2242      	movs	r2, #66	@ 0x42
 8012e16:	2100      	movs	r1, #0
 8012e18:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e1e:	2280      	movs	r2, #128	@ 0x80
 8012e20:	431a      	orrs	r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2240      	movs	r2, #64	@ 0x40
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e059      	b.n	8012ee6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e36:	b2da      	uxtb	r2, r3
 8012e38:	697c      	ldr	r4, [r7, #20]
 8012e3a:	230a      	movs	r3, #10
 8012e3c:	18fb      	adds	r3, r7, r3
 8012e3e:	8819      	ldrh	r1, [r3, #0]
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	4b2f      	ldr	r3, [pc, #188]	@ (8012f00 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012e44:	9300      	str	r3, [sp, #0]
 8012e46:	0023      	movs	r3, r4
 8012e48:	f002 f9f8 	bl	801523c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	b29a      	uxth	r2, r3
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	2240      	movs	r2, #64	@ 0x40
 8012e62:	2100      	movs	r1, #0
 8012e64:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2110      	movs	r1, #16
 8012e6a:	0018      	movs	r0, r3
 8012e6c:	f002 fa20 	bl	80152b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2180      	movs	r1, #128	@ 0x80
 8012e7c:	01c9      	lsls	r1, r1, #7
 8012e7e:	430a      	orrs	r2, r1
 8012e80:	601a      	str	r2, [r3, #0]
 8012e82:	e02d      	b.n	8012ee0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2241      	movs	r2, #65	@ 0x41
 8012e88:	2120      	movs	r1, #32
 8012e8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	2242      	movs	r2, #66	@ 0x42
 8012e90:	2100      	movs	r1, #0
 8012e92:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e98:	2210      	movs	r2, #16
 8012e9a:	431a      	orrs	r2, r3
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2240      	movs	r2, #64	@ 0x40
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	e01c      	b.n	8012ee6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	4a15      	ldr	r2, [pc, #84]	@ (8012f04 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8012eb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012eb6:	b2da      	uxtb	r2, r3
 8012eb8:	2380      	movs	r3, #128	@ 0x80
 8012eba:	049c      	lsls	r4, r3, #18
 8012ebc:	230a      	movs	r3, #10
 8012ebe:	18fb      	adds	r3, r7, r3
 8012ec0:	8819      	ldrh	r1, [r3, #0]
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8012f00 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	0023      	movs	r3, r4
 8012eca:	f002 f9b7 	bl	801523c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2240      	movs	r2, #64	@ 0x40
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2101      	movs	r1, #1
 8012eda:	0018      	movs	r0, r3
 8012edc:	f002 f9e8 	bl	80152b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	e000      	b.n	8012ee6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8012ee4:	2302      	movs	r3, #2
  }
}
 8012ee6:	0018      	movs	r0, r3
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	b006      	add	sp, #24
 8012eec:	bdb0      	pop	{r4, r5, r7, pc}
 8012eee:	46c0      	nop			@ (mov r8, r8)
 8012ef0:	ffff0000 	.word	0xffff0000
 8012ef4:	08013b6d 	.word	0x08013b6d
 8012ef8:	08014be9 	.word	0x08014be9
 8012efc:	08014d29 	.word	0x08014d29
 8012f00:	80002000 	.word	0x80002000
 8012f04:	08013719 	.word	0x08013719

08012f08 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8012f08:	b5b0      	push	{r4, r5, r7, lr}
 8012f0a:	b088      	sub	sp, #32
 8012f0c:	af02      	add	r7, sp, #8
 8012f0e:	60f8      	str	r0, [r7, #12]
 8012f10:	0008      	movs	r0, r1
 8012f12:	607a      	str	r2, [r7, #4]
 8012f14:	0019      	movs	r1, r3
 8012f16:	230a      	movs	r3, #10
 8012f18:	18fb      	adds	r3, r7, r3
 8012f1a:	1c02      	adds	r2, r0, #0
 8012f1c:	801a      	strh	r2, [r3, #0]
 8012f1e:	2308      	movs	r3, #8
 8012f20:	18fb      	adds	r3, r7, r3
 8012f22:	1c0a      	adds	r2, r1, #0
 8012f24:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2241      	movs	r2, #65	@ 0x41
 8012f2a:	5c9b      	ldrb	r3, [r3, r2]
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	2b20      	cmp	r3, #32
 8012f30:	d000      	beq.n	8012f34 <HAL_I2C_Master_Receive_DMA+0x2c>
 8012f32:	e0dd      	b.n	80130f0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	699a      	ldr	r2, [r3, #24]
 8012f3a:	2380      	movs	r3, #128	@ 0x80
 8012f3c:	021b      	lsls	r3, r3, #8
 8012f3e:	401a      	ands	r2, r3
 8012f40:	2380      	movs	r3, #128	@ 0x80
 8012f42:	021b      	lsls	r3, r3, #8
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d101      	bne.n	8012f4c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8012f48:	2302      	movs	r3, #2
 8012f4a:	e0d2      	b.n	80130f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2240      	movs	r2, #64	@ 0x40
 8012f50:	5c9b      	ldrb	r3, [r3, r2]
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d101      	bne.n	8012f5a <HAL_I2C_Master_Receive_DMA+0x52>
 8012f56:	2302      	movs	r3, #2
 8012f58:	e0cb      	b.n	80130f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	2240      	movs	r2, #64	@ 0x40
 8012f5e:	2101      	movs	r1, #1
 8012f60:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	2241      	movs	r2, #65	@ 0x41
 8012f66:	2122      	movs	r1, #34	@ 0x22
 8012f68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2242      	movs	r2, #66	@ 0x42
 8012f6e:	2110      	movs	r1, #16
 8012f70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2200      	movs	r2, #0
 8012f76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2208      	movs	r2, #8
 8012f82:	18ba      	adds	r2, r7, r2
 8012f84:	8812      	ldrh	r2, [r2, #0]
 8012f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	4a5c      	ldr	r2, [pc, #368]	@ (80130fc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8012f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	4a5b      	ldr	r2, [pc, #364]	@ (8013100 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8012f92:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	2bff      	cmp	r3, #255	@ 0xff
 8012f9c:	d906      	bls.n	8012fac <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	22ff      	movs	r2, #255	@ 0xff
 8012fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8012fa4:	2380      	movs	r3, #128	@ 0x80
 8012fa6:	045b      	lsls	r3, r3, #17
 8012fa8:	617b      	str	r3, [r7, #20]
 8012faa:	e007      	b.n	8012fbc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012fb0:	b29a      	uxth	r2, r3
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8012fb6:	2380      	movs	r3, #128	@ 0x80
 8012fb8:	049b      	lsls	r3, r3, #18
 8012fba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d100      	bne.n	8012fc6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8012fc4:	e078      	b.n	80130b8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d023      	beq.n	8013016 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8013104 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8012fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fda:	4a4b      	ldr	r2, [pc, #300]	@ (8013108 <HAL_I2C_Master_Receive_DMA+0x200>)
 8012fdc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fea:	2200      	movs	r2, #0
 8012fec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	3324      	adds	r3, #36	@ 0x24
 8012ff8:	0019      	movs	r1, r3
 8012ffa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013000:	2513      	movs	r5, #19
 8013002:	197c      	adds	r4, r7, r5
 8013004:	f7fe fe5c 	bl	8011cc0 <HAL_DMA_Start_IT>
 8013008:	0003      	movs	r3, r0
 801300a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801300c:	197b      	adds	r3, r7, r5
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d13d      	bne.n	8013090 <HAL_I2C_Master_Receive_DMA+0x188>
 8013014:	e013      	b.n	801303e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2241      	movs	r2, #65	@ 0x41
 801301a:	2120      	movs	r1, #32
 801301c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2242      	movs	r2, #66	@ 0x42
 8013022:	2100      	movs	r1, #0
 8013024:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801302a:	2280      	movs	r2, #128	@ 0x80
 801302c:	431a      	orrs	r2, r3
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	2240      	movs	r2, #64	@ 0x40
 8013036:	2100      	movs	r1, #0
 8013038:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801303a:	2301      	movs	r3, #1
 801303c:	e059      	b.n	80130f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013042:	b2da      	uxtb	r2, r3
 8013044:	697c      	ldr	r4, [r7, #20]
 8013046:	230a      	movs	r3, #10
 8013048:	18fb      	adds	r3, r7, r3
 801304a:	8819      	ldrh	r1, [r3, #0]
 801304c:	68f8      	ldr	r0, [r7, #12]
 801304e:	4b2f      	ldr	r3, [pc, #188]	@ (801310c <HAL_I2C_Master_Receive_DMA+0x204>)
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	0023      	movs	r3, r4
 8013054:	f002 f8f2 	bl	801523c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801305c:	b29a      	uxth	r2, r3
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	b29a      	uxth	r2, r3
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2240      	movs	r2, #64	@ 0x40
 801306e:	2100      	movs	r1, #0
 8013070:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	2110      	movs	r1, #16
 8013076:	0018      	movs	r0, r3
 8013078:	f002 f91a 	bl	80152b0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	2180      	movs	r1, #128	@ 0x80
 8013088:	0209      	lsls	r1, r1, #8
 801308a:	430a      	orrs	r2, r1
 801308c:	601a      	str	r2, [r3, #0]
 801308e:	e02d      	b.n	80130ec <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2241      	movs	r2, #65	@ 0x41
 8013094:	2120      	movs	r1, #32
 8013096:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2242      	movs	r2, #66	@ 0x42
 801309c:	2100      	movs	r1, #0
 801309e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130a4:	2210      	movs	r2, #16
 80130a6:	431a      	orrs	r2, r3
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2240      	movs	r2, #64	@ 0x40
 80130b0:	2100      	movs	r1, #0
 80130b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80130b4:	2301      	movs	r3, #1
 80130b6:	e01c      	b.n	80130f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	4a15      	ldr	r2, [pc, #84]	@ (8013110 <HAL_I2C_Master_Receive_DMA+0x208>)
 80130bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80130c2:	b2da      	uxtb	r2, r3
 80130c4:	2380      	movs	r3, #128	@ 0x80
 80130c6:	049c      	lsls	r4, r3, #18
 80130c8:	230a      	movs	r3, #10
 80130ca:	18fb      	adds	r3, r7, r3
 80130cc:	8819      	ldrh	r1, [r3, #0]
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	4b0e      	ldr	r3, [pc, #56]	@ (801310c <HAL_I2C_Master_Receive_DMA+0x204>)
 80130d2:	9300      	str	r3, [sp, #0]
 80130d4:	0023      	movs	r3, r4
 80130d6:	f002 f8b1 	bl	801523c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2240      	movs	r2, #64	@ 0x40
 80130de:	2100      	movs	r1, #0
 80130e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2101      	movs	r1, #1
 80130e6:	0018      	movs	r0, r3
 80130e8:	f002 f8e2 	bl	80152b0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	e000      	b.n	80130f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80130f0:	2302      	movs	r3, #2
  }
}
 80130f2:	0018      	movs	r0, r3
 80130f4:	46bd      	mov	sp, r7
 80130f6:	b006      	add	sp, #24
 80130f8:	bdb0      	pop	{r4, r5, r7, pc}
 80130fa:	46c0      	nop			@ (mov r8, r8)
 80130fc:	ffff0000 	.word	0xffff0000
 8013100:	08013b6d 	.word	0x08013b6d
 8013104:	08014c89 	.word	0x08014c89
 8013108:	08014d29 	.word	0x08014d29
 801310c:	80002400 	.word	0x80002400
 8013110:	08013719 	.word	0x08013719

08013114 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013114:	b590      	push	{r4, r7, lr}
 8013116:	b089      	sub	sp, #36	@ 0x24
 8013118:	af02      	add	r7, sp, #8
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	000c      	movs	r4, r1
 801311e:	0010      	movs	r0, r2
 8013120:	0019      	movs	r1, r3
 8013122:	230a      	movs	r3, #10
 8013124:	18fb      	adds	r3, r7, r3
 8013126:	1c22      	adds	r2, r4, #0
 8013128:	801a      	strh	r2, [r3, #0]
 801312a:	2308      	movs	r3, #8
 801312c:	18fb      	adds	r3, r7, r3
 801312e:	1c02      	adds	r2, r0, #0
 8013130:	801a      	strh	r2, [r3, #0]
 8013132:	1dbb      	adds	r3, r7, #6
 8013134:	1c0a      	adds	r2, r1, #0
 8013136:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2241      	movs	r2, #65	@ 0x41
 801313c:	5c9b      	ldrb	r3, [r3, r2]
 801313e:	b2db      	uxtb	r3, r3
 8013140:	2b20      	cmp	r3, #32
 8013142:	d000      	beq.n	8013146 <HAL_I2C_Mem_Read+0x32>
 8013144:	e110      	b.n	8013368 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8013146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013148:	2b00      	cmp	r3, #0
 801314a:	d004      	beq.n	8013156 <HAL_I2C_Mem_Read+0x42>
 801314c:	232c      	movs	r3, #44	@ 0x2c
 801314e:	18fb      	adds	r3, r7, r3
 8013150:	881b      	ldrh	r3, [r3, #0]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d105      	bne.n	8013162 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	2280      	movs	r2, #128	@ 0x80
 801315a:	0092      	lsls	r2, r2, #2
 801315c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801315e:	2301      	movs	r3, #1
 8013160:	e103      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2240      	movs	r2, #64	@ 0x40
 8013166:	5c9b      	ldrb	r3, [r3, r2]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d101      	bne.n	8013170 <HAL_I2C_Mem_Read+0x5c>
 801316c:	2302      	movs	r3, #2
 801316e:	e0fc      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2240      	movs	r2, #64	@ 0x40
 8013174:	2101      	movs	r1, #1
 8013176:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013178:	f7fe f850 	bl	801121c <HAL_GetTick>
 801317c:	0003      	movs	r3, r0
 801317e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013180:	2380      	movs	r3, #128	@ 0x80
 8013182:	0219      	lsls	r1, r3, #8
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	2319      	movs	r3, #25
 801318c:	2201      	movs	r2, #1
 801318e:	f001 fe03 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 8013192:	1e03      	subs	r3, r0, #0
 8013194:	d001      	beq.n	801319a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8013196:	2301      	movs	r3, #1
 8013198:	e0e7      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2241      	movs	r2, #65	@ 0x41
 801319e:	2122      	movs	r1, #34	@ 0x22
 80131a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2242      	movs	r2, #66	@ 0x42
 80131a6:	2140      	movs	r1, #64	@ 0x40
 80131a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2200      	movs	r2, #0
 80131ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	222c      	movs	r2, #44	@ 0x2c
 80131ba:	18ba      	adds	r2, r7, r2
 80131bc:	8812      	ldrh	r2, [r2, #0]
 80131be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2200      	movs	r2, #0
 80131c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80131c6:	1dbb      	adds	r3, r7, #6
 80131c8:	881c      	ldrh	r4, [r3, #0]
 80131ca:	2308      	movs	r3, #8
 80131cc:	18fb      	adds	r3, r7, r3
 80131ce:	881a      	ldrh	r2, [r3, #0]
 80131d0:	230a      	movs	r3, #10
 80131d2:	18fb      	adds	r3, r7, r3
 80131d4:	8819      	ldrh	r1, [r3, #0]
 80131d6:	68f8      	ldr	r0, [r7, #12]
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	9301      	str	r3, [sp, #4]
 80131dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131de:	9300      	str	r3, [sp, #0]
 80131e0:	0023      	movs	r3, r4
 80131e2:	f000 ffc1 	bl	8014168 <I2C_RequestMemoryRead>
 80131e6:	1e03      	subs	r3, r0, #0
 80131e8:	d005      	beq.n	80131f6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	2240      	movs	r2, #64	@ 0x40
 80131ee:	2100      	movs	r1, #0
 80131f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80131f2:	2301      	movs	r3, #1
 80131f4:	e0b9      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	2bff      	cmp	r3, #255	@ 0xff
 80131fe:	d911      	bls.n	8013224 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	22ff      	movs	r2, #255	@ 0xff
 8013204:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801320a:	b2da      	uxtb	r2, r3
 801320c:	2380      	movs	r3, #128	@ 0x80
 801320e:	045c      	lsls	r4, r3, #17
 8013210:	230a      	movs	r3, #10
 8013212:	18fb      	adds	r3, r7, r3
 8013214:	8819      	ldrh	r1, [r3, #0]
 8013216:	68f8      	ldr	r0, [r7, #12]
 8013218:	4b56      	ldr	r3, [pc, #344]	@ (8013374 <HAL_I2C_Mem_Read+0x260>)
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	0023      	movs	r3, r4
 801321e:	f002 f80d 	bl	801523c <I2C_TransferConfig>
 8013222:	e012      	b.n	801324a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013228:	b29a      	uxth	r2, r3
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013232:	b2da      	uxtb	r2, r3
 8013234:	2380      	movs	r3, #128	@ 0x80
 8013236:	049c      	lsls	r4, r3, #18
 8013238:	230a      	movs	r3, #10
 801323a:	18fb      	adds	r3, r7, r3
 801323c:	8819      	ldrh	r1, [r3, #0]
 801323e:	68f8      	ldr	r0, [r7, #12]
 8013240:	4b4c      	ldr	r3, [pc, #304]	@ (8013374 <HAL_I2C_Mem_Read+0x260>)
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	0023      	movs	r3, r4
 8013246:	f001 fff9 	bl	801523c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801324a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801324c:	68f8      	ldr	r0, [r7, #12]
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	0013      	movs	r3, r2
 8013254:	2200      	movs	r2, #0
 8013256:	2104      	movs	r1, #4
 8013258:	f001 fd9e 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 801325c:	1e03      	subs	r3, r0, #0
 801325e:	d001      	beq.n	8013264 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8013260:	2301      	movs	r3, #1
 8013262:	e082      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801326e:	b2d2      	uxtb	r2, r2
 8013270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013276:	1c5a      	adds	r2, r3, #1
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013280:	3b01      	subs	r3, #1
 8013282:	b29a      	uxth	r2, r3
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801328c:	b29b      	uxth	r3, r3
 801328e:	3b01      	subs	r3, #1
 8013290:	b29a      	uxth	r2, r3
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801329a:	b29b      	uxth	r3, r3
 801329c:	2b00      	cmp	r3, #0
 801329e:	d03a      	beq.n	8013316 <HAL_I2C_Mem_Read+0x202>
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d136      	bne.n	8013316 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80132a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	9300      	str	r3, [sp, #0]
 80132b0:	0013      	movs	r3, r2
 80132b2:	2200      	movs	r2, #0
 80132b4:	2180      	movs	r1, #128	@ 0x80
 80132b6:	f001 fd6f 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 80132ba:	1e03      	subs	r3, r0, #0
 80132bc:	d001      	beq.n	80132c2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80132be:	2301      	movs	r3, #1
 80132c0:	e053      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	2bff      	cmp	r3, #255	@ 0xff
 80132ca:	d911      	bls.n	80132f0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	22ff      	movs	r2, #255	@ 0xff
 80132d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132d6:	b2da      	uxtb	r2, r3
 80132d8:	2380      	movs	r3, #128	@ 0x80
 80132da:	045c      	lsls	r4, r3, #17
 80132dc:	230a      	movs	r3, #10
 80132de:	18fb      	adds	r3, r7, r3
 80132e0:	8819      	ldrh	r1, [r3, #0]
 80132e2:	68f8      	ldr	r0, [r7, #12]
 80132e4:	2300      	movs	r3, #0
 80132e6:	9300      	str	r3, [sp, #0]
 80132e8:	0023      	movs	r3, r4
 80132ea:	f001 ffa7 	bl	801523c <I2C_TransferConfig>
 80132ee:	e012      	b.n	8013316 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	2380      	movs	r3, #128	@ 0x80
 8013302:	049c      	lsls	r4, r3, #18
 8013304:	230a      	movs	r3, #10
 8013306:	18fb      	adds	r3, r7, r3
 8013308:	8819      	ldrh	r1, [r3, #0]
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	2300      	movs	r3, #0
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	0023      	movs	r3, r4
 8013312:	f001 ff93 	bl	801523c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801331a:	b29b      	uxth	r3, r3
 801331c:	2b00      	cmp	r3, #0
 801331e:	d194      	bne.n	801324a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013320:	697a      	ldr	r2, [r7, #20]
 8013322:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	0018      	movs	r0, r3
 8013328:	f001 fdca 	bl	8014ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 801332c:	1e03      	subs	r3, r0, #0
 801332e:	d001      	beq.n	8013334 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8013330:	2301      	movs	r3, #1
 8013332:	e01a      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	2220      	movs	r2, #32
 801333a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	685a      	ldr	r2, [r3, #4]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	490c      	ldr	r1, [pc, #48]	@ (8013378 <HAL_I2C_Mem_Read+0x264>)
 8013348:	400a      	ands	r2, r1
 801334a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2241      	movs	r2, #65	@ 0x41
 8013350:	2120      	movs	r1, #32
 8013352:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2242      	movs	r2, #66	@ 0x42
 8013358:	2100      	movs	r1, #0
 801335a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2240      	movs	r2, #64	@ 0x40
 8013360:	2100      	movs	r1, #0
 8013362:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013364:	2300      	movs	r3, #0
 8013366:	e000      	b.n	801336a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8013368:	2302      	movs	r3, #2
  }
}
 801336a:	0018      	movs	r0, r3
 801336c:	46bd      	mov	sp, r7
 801336e:	b007      	add	sp, #28
 8013370:	bd90      	pop	{r4, r7, pc}
 8013372:	46c0      	nop			@ (mov r8, r8)
 8013374:	80002400 	.word	0x80002400
 8013378:	fe00e800 	.word	0xfe00e800

0801337c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 801337c:	b5b0      	push	{r4, r5, r7, lr}
 801337e:	b088      	sub	sp, #32
 8013380:	af02      	add	r7, sp, #8
 8013382:	60f8      	str	r0, [r7, #12]
 8013384:	000c      	movs	r4, r1
 8013386:	0010      	movs	r0, r2
 8013388:	0019      	movs	r1, r3
 801338a:	230a      	movs	r3, #10
 801338c:	18fb      	adds	r3, r7, r3
 801338e:	1c22      	adds	r2, r4, #0
 8013390:	801a      	strh	r2, [r3, #0]
 8013392:	2308      	movs	r3, #8
 8013394:	18fb      	adds	r3, r7, r3
 8013396:	1c02      	adds	r2, r0, #0
 8013398:	801a      	strh	r2, [r3, #0]
 801339a:	1dbb      	adds	r3, r7, #6
 801339c:	1c0a      	adds	r2, r1, #0
 801339e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2241      	movs	r2, #65	@ 0x41
 80133a4:	5c9b      	ldrb	r3, [r3, r2]
 80133a6:	b2db      	uxtb	r3, r3
 80133a8:	2b20      	cmp	r3, #32
 80133aa:	d000      	beq.n	80133ae <HAL_I2C_Mem_Write_DMA+0x32>
 80133ac:	e0d8      	b.n	8013560 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 80133ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <HAL_I2C_Mem_Write_DMA+0x42>
 80133b4:	232c      	movs	r3, #44	@ 0x2c
 80133b6:	18fb      	adds	r3, r7, r3
 80133b8:	881b      	ldrh	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d105      	bne.n	80133ca <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2280      	movs	r2, #128	@ 0x80
 80133c2:	0092      	lsls	r2, r2, #2
 80133c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80133c6:	2301      	movs	r3, #1
 80133c8:	e0cb      	b.n	8013562 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	699a      	ldr	r2, [r3, #24]
 80133d0:	2380      	movs	r3, #128	@ 0x80
 80133d2:	021b      	lsls	r3, r3, #8
 80133d4:	401a      	ands	r2, r3
 80133d6:	2380      	movs	r3, #128	@ 0x80
 80133d8:	021b      	lsls	r3, r3, #8
 80133da:	429a      	cmp	r2, r3
 80133dc:	d101      	bne.n	80133e2 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80133de:	2302      	movs	r3, #2
 80133e0:	e0bf      	b.n	8013562 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2240      	movs	r2, #64	@ 0x40
 80133e6:	5c9b      	ldrb	r3, [r3, r2]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d101      	bne.n	80133f0 <HAL_I2C_Mem_Write_DMA+0x74>
 80133ec:	2302      	movs	r3, #2
 80133ee:	e0b8      	b.n	8013562 <HAL_I2C_Mem_Write_DMA+0x1e6>
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2240      	movs	r2, #64	@ 0x40
 80133f4:	2101      	movs	r1, #1
 80133f6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2241      	movs	r2, #65	@ 0x41
 80133fc:	2121      	movs	r1, #33	@ 0x21
 80133fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2242      	movs	r2, #66	@ 0x42
 8013404:	2140      	movs	r1, #64	@ 0x40
 8013406:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013412:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	222c      	movs	r2, #44	@ 0x2c
 8013418:	18ba      	adds	r2, r7, r2
 801341a:	8812      	ldrh	r2, [r2, #0]
 801341c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	4a52      	ldr	r2, [pc, #328]	@ (801356c <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8013422:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	4a52      	ldr	r2, [pc, #328]	@ (8013570 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8013428:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 801342a:	230a      	movs	r3, #10
 801342c:	18fb      	adds	r3, r7, r3
 801342e:	881a      	ldrh	r2, [r3, #0]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013438:	b29b      	uxth	r3, r3
 801343a:	2bff      	cmp	r3, #255	@ 0xff
 801343c:	d903      	bls.n	8013446 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	22ff      	movs	r2, #255	@ 0xff
 8013442:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013444:	e004      	b.n	8013450 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801344a:	b29a      	uxth	r2, r3
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8013450:	1dbb      	adds	r3, r7, #6
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	2b01      	cmp	r3, #1
 8013456:	d10b      	bne.n	8013470 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8013458:	2308      	movs	r3, #8
 801345a:	18fb      	adds	r3, r7, r3
 801345c:	881b      	ldrh	r3, [r3, #0]
 801345e:	b2da      	uxtb	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2201      	movs	r2, #1
 801346a:	4252      	negs	r2, r2
 801346c:	651a      	str	r2, [r3, #80]	@ 0x50
 801346e:	e00e      	b.n	801348e <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8013470:	2108      	movs	r1, #8
 8013472:	187b      	adds	r3, r7, r1
 8013474:	881b      	ldrh	r3, [r3, #0]
 8013476:	0a1b      	lsrs	r3, r3, #8
 8013478:	b29b      	uxth	r3, r3
 801347a:	b2da      	uxtb	r2, r3
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8013482:	187b      	adds	r3, r7, r1
 8013484:	881b      	ldrh	r3, [r3, #0]
 8013486:	b2db      	uxtb	r3, r3
 8013488:	001a      	movs	r2, r3
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013492:	2b00      	cmp	r3, #0
 8013494:	d023      	beq.n	80134de <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801349a:	4a36      	ldr	r2, [pc, #216]	@ (8013574 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 801349c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134a2:	4a35      	ldr	r2, [pc, #212]	@ (8013578 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 80134a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134aa:	2200      	movs	r2, #0
 80134ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134b2:	2200      	movs	r2, #0
 80134b4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80134ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	3328      	adds	r3, #40	@ 0x28
 80134c2:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80134c8:	2517      	movs	r5, #23
 80134ca:	197c      	adds	r4, r7, r5
 80134cc:	f7fe fbf8 	bl	8011cc0 <HAL_DMA_Start_IT>
 80134d0:	0003      	movs	r3, r0
 80134d2:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80134d4:	197b      	adds	r3, r7, r5
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d12d      	bne.n	8013538 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80134dc:	e013      	b.n	8013506 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	2241      	movs	r2, #65	@ 0x41
 80134e2:	2120      	movs	r1, #32
 80134e4:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	2242      	movs	r2, #66	@ 0x42
 80134ea:	2100      	movs	r1, #0
 80134ec:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134f2:	2280      	movs	r2, #128	@ 0x80
 80134f4:	431a      	orrs	r2, r3
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2240      	movs	r2, #64	@ 0x40
 80134fe:	2100      	movs	r1, #0
 8013500:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8013502:	2301      	movs	r3, #1
 8013504:	e02d      	b.n	8013562 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8013506:	1dbb      	adds	r3, r7, #6
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	b2da      	uxtb	r2, r3
 801350c:	2380      	movs	r3, #128	@ 0x80
 801350e:	045c      	lsls	r4, r3, #17
 8013510:	230a      	movs	r3, #10
 8013512:	18fb      	adds	r3, r7, r3
 8013514:	8819      	ldrh	r1, [r3, #0]
 8013516:	68f8      	ldr	r0, [r7, #12]
 8013518:	4b18      	ldr	r3, [pc, #96]	@ (801357c <HAL_I2C_Mem_Write_DMA+0x200>)
 801351a:	9300      	str	r3, [sp, #0]
 801351c:	0023      	movs	r3, r4
 801351e:	f001 fe8d 	bl	801523c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2240      	movs	r2, #64	@ 0x40
 8013526:	2100      	movs	r1, #0
 8013528:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2101      	movs	r1, #1
 801352e:	0018      	movs	r0, r3
 8013530:	f001 febe 	bl	80152b0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	e014      	b.n	8013562 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2241      	movs	r2, #65	@ 0x41
 801353c:	2120      	movs	r1, #32
 801353e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2242      	movs	r2, #66	@ 0x42
 8013544:	2100      	movs	r1, #0
 8013546:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801354c:	2210      	movs	r2, #16
 801354e:	431a      	orrs	r2, r3
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	2240      	movs	r2, #64	@ 0x40
 8013558:	2100      	movs	r1, #0
 801355a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 801355c:	2301      	movs	r3, #1
 801355e:	e000      	b.n	8013562 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8013560:	2302      	movs	r3, #2
  }
}
 8013562:	0018      	movs	r0, r3
 8013564:	46bd      	mov	sp, r7
 8013566:	b006      	add	sp, #24
 8013568:	bdb0      	pop	{r4, r5, r7, pc}
 801356a:	46c0      	nop			@ (mov r8, r8)
 801356c:	ffff0000 	.word	0xffff0000
 8013570:	08013d65 	.word	0x08013d65
 8013574:	08014be9 	.word	0x08014be9
 8013578:	08014d29 	.word	0x08014d29
 801357c:	80002000 	.word	0x80002000

08013580 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b084      	sub	sp, #16
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	699b      	ldr	r3, [r3, #24]
 801358e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801359c:	2b00      	cmp	r3, #0
 801359e:	d005      	beq.n	80135ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80135a4:	68ba      	ldr	r2, [r7, #8]
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	6878      	ldr	r0, [r7, #4]
 80135aa:	4798      	blx	r3
  }
}
 80135ac:	46c0      	nop			@ (mov r8, r8)
 80135ae:	46bd      	mov	sp, r7
 80135b0:	b004      	add	sp, #16
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	699b      	ldr	r3, [r3, #24]
 80135c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80135cc:	697a      	ldr	r2, [r7, #20]
 80135ce:	2380      	movs	r3, #128	@ 0x80
 80135d0:	005b      	lsls	r3, r3, #1
 80135d2:	4013      	ands	r3, r2
 80135d4:	d00e      	beq.n	80135f4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	2280      	movs	r2, #128	@ 0x80
 80135da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80135dc:	d00a      	beq.n	80135f4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135e2:	2201      	movs	r2, #1
 80135e4:	431a      	orrs	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2280      	movs	r2, #128	@ 0x80
 80135f0:	0052      	lsls	r2, r2, #1
 80135f2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80135f4:	697a      	ldr	r2, [r7, #20]
 80135f6:	2380      	movs	r3, #128	@ 0x80
 80135f8:	00db      	lsls	r3, r3, #3
 80135fa:	4013      	ands	r3, r2
 80135fc:	d00e      	beq.n	801361c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	2280      	movs	r2, #128	@ 0x80
 8013602:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8013604:	d00a      	beq.n	801361c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801360a:	2208      	movs	r2, #8
 801360c:	431a      	orrs	r2, r3
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2280      	movs	r2, #128	@ 0x80
 8013618:	00d2      	lsls	r2, r2, #3
 801361a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801361c:	697a      	ldr	r2, [r7, #20]
 801361e:	2380      	movs	r3, #128	@ 0x80
 8013620:	009b      	lsls	r3, r3, #2
 8013622:	4013      	ands	r3, r2
 8013624:	d00e      	beq.n	8013644 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	2280      	movs	r2, #128	@ 0x80
 801362a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 801362c:	d00a      	beq.n	8013644 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013632:	2202      	movs	r2, #2
 8013634:	431a      	orrs	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2280      	movs	r2, #128	@ 0x80
 8013640:	0092      	lsls	r2, r2, #2
 8013642:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013648:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	220b      	movs	r2, #11
 801364e:	4013      	ands	r3, r2
 8013650:	d005      	beq.n	801365e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	0011      	movs	r1, r2
 8013658:	0018      	movs	r0, r3
 801365a:	f001 f977 	bl	801494c <I2C_ITError>
  }
}
 801365e:	46c0      	nop			@ (mov r8, r8)
 8013660:	46bd      	mov	sp, r7
 8013662:	b006      	add	sp, #24
 8013664:	bd80      	pop	{r7, pc}

08013666 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013666:	b580      	push	{r7, lr}
 8013668:	b082      	sub	sp, #8
 801366a:	af00      	add	r7, sp, #0
 801366c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801366e:	46c0      	nop			@ (mov r8, r8)
 8013670:	46bd      	mov	sp, r7
 8013672:	b002      	add	sp, #8
 8013674:	bd80      	pop	{r7, pc}

08013676 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013676:	b580      	push	{r7, lr}
 8013678:	b082      	sub	sp, #8
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801367e:	46c0      	nop			@ (mov r8, r8)
 8013680:	46bd      	mov	sp, r7
 8013682:	b002      	add	sp, #8
 8013684:	bd80      	pop	{r7, pc}

08013686 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013686:	b580      	push	{r7, lr}
 8013688:	b082      	sub	sp, #8
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801368e:	46c0      	nop			@ (mov r8, r8)
 8013690:	46bd      	mov	sp, r7
 8013692:	b002      	add	sp, #8
 8013694:	bd80      	pop	{r7, pc}

08013696 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013696:	b580      	push	{r7, lr}
 8013698:	b082      	sub	sp, #8
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801369e:	46c0      	nop			@ (mov r8, r8)
 80136a0:	46bd      	mov	sp, r7
 80136a2:	b002      	add	sp, #8
 80136a4:	bd80      	pop	{r7, pc}

080136a6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b082      	sub	sp, #8
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	6078      	str	r0, [r7, #4]
 80136ae:	0008      	movs	r0, r1
 80136b0:	0011      	movs	r1, r2
 80136b2:	1cfb      	adds	r3, r7, #3
 80136b4:	1c02      	adds	r2, r0, #0
 80136b6:	701a      	strb	r2, [r3, #0]
 80136b8:	003b      	movs	r3, r7
 80136ba:	1c0a      	adds	r2, r1, #0
 80136bc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80136be:	46c0      	nop			@ (mov r8, r8)
 80136c0:	46bd      	mov	sp, r7
 80136c2:	b002      	add	sp, #8
 80136c4:	bd80      	pop	{r7, pc}

080136c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80136c6:	b580      	push	{r7, lr}
 80136c8:	b082      	sub	sp, #8
 80136ca:	af00      	add	r7, sp, #0
 80136cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80136ce:	46c0      	nop			@ (mov r8, r8)
 80136d0:	46bd      	mov	sp, r7
 80136d2:	b002      	add	sp, #8
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b082      	sub	sp, #8
 80136da:	af00      	add	r7, sp, #0
 80136dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80136de:	46c0      	nop			@ (mov r8, r8)
 80136e0:	46bd      	mov	sp, r7
 80136e2:	b002      	add	sp, #8
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b082      	sub	sp, #8
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80136ee:	46c0      	nop			@ (mov r8, r8)
 80136f0:	46bd      	mov	sp, r7
 80136f2:	b002      	add	sp, #8
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b082      	sub	sp, #8
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80136fe:	46c0      	nop			@ (mov r8, r8)
 8013700:	46bd      	mov	sp, r7
 8013702:	b002      	add	sp, #8
 8013704:	bd80      	pop	{r7, pc}

08013706 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8013706:	b580      	push	{r7, lr}
 8013708:	b082      	sub	sp, #8
 801370a:	af00      	add	r7, sp, #0
 801370c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801370e:	46c0      	nop			@ (mov r8, r8)
 8013710:	46bd      	mov	sp, r7
 8013712:	b002      	add	sp, #8
 8013714:	bd80      	pop	{r7, pc}
	...

08013718 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013718:	b590      	push	{r4, r7, lr}
 801371a:	b089      	sub	sp, #36	@ 0x24
 801371c:	af02      	add	r7, sp, #8
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	2240      	movs	r2, #64	@ 0x40
 801372c:	5c9b      	ldrb	r3, [r3, r2]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d101      	bne.n	8013736 <I2C_Master_ISR_IT+0x1e>
 8013732:	2302      	movs	r3, #2
 8013734:	e113      	b.n	801395e <I2C_Master_ISR_IT+0x246>
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2240      	movs	r2, #64	@ 0x40
 801373a:	2101      	movs	r1, #1
 801373c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	2210      	movs	r2, #16
 8013742:	4013      	ands	r3, r2
 8013744:	d012      	beq.n	801376c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2210      	movs	r2, #16
 801374a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801374c:	d00e      	beq.n	801376c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	2210      	movs	r2, #16
 8013754:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801375a:	2204      	movs	r2, #4
 801375c:	431a      	orrs	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	0018      	movs	r0, r3
 8013766:	f001 fa1c 	bl	8014ba2 <I2C_Flush_TXDR>
 801376a:	e0e5      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	2204      	movs	r2, #4
 8013770:	4013      	ands	r3, r2
 8013772:	d021      	beq.n	80137b8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2204      	movs	r2, #4
 8013778:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801377a:	d01d      	beq.n	80137b8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	2204      	movs	r2, #4
 8013780:	4393      	bics	r3, r2
 8013782:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801378e:	b2d2      	uxtb	r2, r2
 8013790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013796:	1c5a      	adds	r2, r3, #1
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137a0:	3b01      	subs	r3, #1
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	3b01      	subs	r3, #1
 80137b0:	b29a      	uxth	r2, r3
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80137b6:	e0bf      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	2202      	movs	r2, #2
 80137bc:	4013      	ands	r3, r2
 80137be:	d01c      	beq.n	80137fa <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2202      	movs	r2, #2
 80137c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80137c6:	d018      	beq.n	80137fa <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137cc:	781a      	ldrb	r2, [r3, #0]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137d8:	1c5a      	adds	r2, r3, #1
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80137e2:	3b01      	subs	r3, #1
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	3b01      	subs	r3, #1
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80137f8:	e09e      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	2280      	movs	r2, #128	@ 0x80
 80137fe:	4013      	ands	r3, r2
 8013800:	d100      	bne.n	8013804 <I2C_Master_ISR_IT+0xec>
 8013802:	e069      	b.n	80138d8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2240      	movs	r2, #64	@ 0x40
 8013808:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801380a:	d065      	beq.n	80138d8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013810:	b29b      	uxth	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d04a      	beq.n	80138ac <I2C_Master_ISR_IT+0x194>
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801381a:	2b00      	cmp	r3, #0
 801381c:	d146      	bne.n	80138ac <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	b29a      	uxth	r2, r3
 8013826:	2112      	movs	r1, #18
 8013828:	187b      	adds	r3, r7, r1
 801382a:	0592      	lsls	r2, r2, #22
 801382c:	0d92      	lsrs	r2, r2, #22
 801382e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013834:	b29b      	uxth	r3, r3
 8013836:	2bff      	cmp	r3, #255	@ 0xff
 8013838:	d910      	bls.n	801385c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	22ff      	movs	r2, #255	@ 0xff
 801383e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013844:	b2da      	uxtb	r2, r3
 8013846:	2380      	movs	r3, #128	@ 0x80
 8013848:	045c      	lsls	r4, r3, #17
 801384a:	187b      	adds	r3, r7, r1
 801384c:	8819      	ldrh	r1, [r3, #0]
 801384e:	68f8      	ldr	r0, [r7, #12]
 8013850:	2300      	movs	r3, #0
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	0023      	movs	r3, r4
 8013856:	f001 fcf1 	bl	801523c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801385a:	e03c      	b.n	80138d6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013860:	b29a      	uxth	r2, r3
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801386a:	4a3f      	ldr	r2, [pc, #252]	@ (8013968 <I2C_Master_ISR_IT+0x250>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d00e      	beq.n	801388e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013874:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801387a:	2312      	movs	r3, #18
 801387c:	18fb      	adds	r3, r7, r3
 801387e:	8819      	ldrh	r1, [r3, #0]
 8013880:	68f8      	ldr	r0, [r7, #12]
 8013882:	2300      	movs	r3, #0
 8013884:	9300      	str	r3, [sp, #0]
 8013886:	0023      	movs	r3, r4
 8013888:	f001 fcd8 	bl	801523c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801388c:	e023      	b.n	80138d6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013892:	b2da      	uxtb	r2, r3
 8013894:	2380      	movs	r3, #128	@ 0x80
 8013896:	049c      	lsls	r4, r3, #18
 8013898:	2312      	movs	r3, #18
 801389a:	18fb      	adds	r3, r7, r3
 801389c:	8819      	ldrh	r1, [r3, #0]
 801389e:	68f8      	ldr	r0, [r7, #12]
 80138a0:	2300      	movs	r3, #0
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	0023      	movs	r3, r4
 80138a6:	f001 fcc9 	bl	801523c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80138aa:	e014      	b.n	80138d6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	685a      	ldr	r2, [r3, #4]
 80138b2:	2380      	movs	r3, #128	@ 0x80
 80138b4:	049b      	lsls	r3, r3, #18
 80138b6:	401a      	ands	r2, r3
 80138b8:	2380      	movs	r3, #128	@ 0x80
 80138ba:	049b      	lsls	r3, r3, #18
 80138bc:	429a      	cmp	r2, r3
 80138be:	d004      	beq.n	80138ca <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	0018      	movs	r0, r3
 80138c4:	f000 fd56 	bl	8014374 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80138c8:	e036      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2140      	movs	r1, #64	@ 0x40
 80138ce:	0018      	movs	r0, r3
 80138d0:	f001 f83c 	bl	801494c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80138d4:	e030      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
 80138d6:	e02f      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	2240      	movs	r2, #64	@ 0x40
 80138dc:	4013      	ands	r3, r2
 80138de:	d02b      	beq.n	8013938 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2240      	movs	r2, #64	@ 0x40
 80138e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80138e6:	d027      	beq.n	8013938 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138ec:	b29b      	uxth	r3, r3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d11d      	bne.n	801392e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	685a      	ldr	r2, [r3, #4]
 80138f8:	2380      	movs	r3, #128	@ 0x80
 80138fa:	049b      	lsls	r3, r3, #18
 80138fc:	401a      	ands	r2, r3
 80138fe:	2380      	movs	r3, #128	@ 0x80
 8013900:	049b      	lsls	r3, r3, #18
 8013902:	429a      	cmp	r2, r3
 8013904:	d018      	beq.n	8013938 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801390a:	4a17      	ldr	r2, [pc, #92]	@ (8013968 <I2C_Master_ISR_IT+0x250>)
 801390c:	4293      	cmp	r3, r2
 801390e:	d109      	bne.n	8013924 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	685a      	ldr	r2, [r3, #4]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2180      	movs	r1, #128	@ 0x80
 801391c:	01c9      	lsls	r1, r1, #7
 801391e:	430a      	orrs	r2, r1
 8013920:	605a      	str	r2, [r3, #4]
 8013922:	e009      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	0018      	movs	r0, r3
 8013928:	f000 fd24 	bl	8014374 <I2C_ITMasterSeqCplt>
 801392c:	e004      	b.n	8013938 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2140      	movs	r1, #64	@ 0x40
 8013932:	0018      	movs	r0, r3
 8013934:	f001 f80a 	bl	801494c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2220      	movs	r2, #32
 801393c:	4013      	ands	r3, r2
 801393e:	d009      	beq.n	8013954 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	2220      	movs	r2, #32
 8013944:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013946:	d005      	beq.n	8013954 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8013948:	697a      	ldr	r2, [r7, #20]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	0011      	movs	r1, r2
 801394e:	0018      	movs	r0, r3
 8013950:	f000 fdb6 	bl	80144c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	2240      	movs	r2, #64	@ 0x40
 8013958:	2100      	movs	r1, #0
 801395a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801395c:	2300      	movs	r3, #0
}
 801395e:	0018      	movs	r0, r3
 8013960:	46bd      	mov	sp, r7
 8013962:	b007      	add	sp, #28
 8013964:	bd90      	pop	{r4, r7, pc}
 8013966:	46c0      	nop			@ (mov r8, r8)
 8013968:	ffff0000 	.word	0xffff0000

0801396c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b086      	sub	sp, #24
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801397c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2240      	movs	r2, #64	@ 0x40
 8013986:	5c9b      	ldrb	r3, [r3, r2]
 8013988:	2b01      	cmp	r3, #1
 801398a:	d101      	bne.n	8013990 <I2C_Slave_ISR_IT+0x24>
 801398c:	2302      	movs	r3, #2
 801398e:	e0e6      	b.n	8013b5e <I2C_Slave_ISR_IT+0x1f2>
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2240      	movs	r2, #64	@ 0x40
 8013994:	2101      	movs	r1, #1
 8013996:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	2220      	movs	r2, #32
 801399c:	4013      	ands	r3, r2
 801399e:	d009      	beq.n	80139b4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2220      	movs	r2, #32
 80139a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80139a6:	d005      	beq.n	80139b4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80139a8:	693a      	ldr	r2, [r7, #16]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	0011      	movs	r1, r2
 80139ae:	0018      	movs	r0, r3
 80139b0:	f000 fe54 	bl	801465c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	2210      	movs	r2, #16
 80139b8:	4013      	ands	r3, r2
 80139ba:	d052      	beq.n	8013a62 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2210      	movs	r2, #16
 80139c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80139c2:	d04e      	beq.n	8013a62 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d12d      	bne.n	8013a2a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2241      	movs	r2, #65	@ 0x41
 80139d2:	5c9b      	ldrb	r3, [r3, r2]
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	2b28      	cmp	r3, #40	@ 0x28
 80139d8:	d10b      	bne.n	80139f2 <I2C_Slave_ISR_IT+0x86>
 80139da:	697a      	ldr	r2, [r7, #20]
 80139dc:	2380      	movs	r3, #128	@ 0x80
 80139de:	049b      	lsls	r3, r3, #18
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d106      	bne.n	80139f2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80139e4:	693a      	ldr	r2, [r7, #16]
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	0011      	movs	r1, r2
 80139ea:	0018      	movs	r0, r3
 80139ec:	f000 ff56 	bl	801489c <I2C_ITListenCplt>
 80139f0:	e036      	b.n	8013a60 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2241      	movs	r2, #65	@ 0x41
 80139f6:	5c9b      	ldrb	r3, [r3, r2]
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	2b29      	cmp	r3, #41	@ 0x29
 80139fc:	d110      	bne.n	8013a20 <I2C_Slave_ISR_IT+0xb4>
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	4a59      	ldr	r2, [pc, #356]	@ (8013b68 <I2C_Slave_ISR_IT+0x1fc>)
 8013a02:	4293      	cmp	r3, r2
 8013a04:	d00c      	beq.n	8013a20 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2210      	movs	r2, #16
 8013a0c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	0018      	movs	r0, r3
 8013a12:	f001 f8c6 	bl	8014ba2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	0018      	movs	r0, r3
 8013a1a:	f000 fced 	bl	80143f8 <I2C_ITSlaveSeqCplt>
 8013a1e:	e01f      	b.n	8013a60 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2210      	movs	r2, #16
 8013a26:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8013a28:	e091      	b.n	8013b4e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2210      	movs	r2, #16
 8013a30:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a36:	2204      	movs	r2, #4
 8013a38:	431a      	orrs	r2, r3
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d005      	beq.n	8013a50 <I2C_Slave_ISR_IT+0xe4>
 8013a44:	697a      	ldr	r2, [r7, #20]
 8013a46:	2380      	movs	r3, #128	@ 0x80
 8013a48:	045b      	lsls	r3, r3, #17
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d000      	beq.n	8013a50 <I2C_Slave_ISR_IT+0xe4>
 8013a4e:	e07e      	b.n	8013b4e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	0011      	movs	r1, r2
 8013a58:	0018      	movs	r0, r3
 8013a5a:	f000 ff77 	bl	801494c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013a5e:	e076      	b.n	8013b4e <I2C_Slave_ISR_IT+0x1e2>
 8013a60:	e075      	b.n	8013b4e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	2204      	movs	r2, #4
 8013a66:	4013      	ands	r3, r2
 8013a68:	d02f      	beq.n	8013aca <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2204      	movs	r2, #4
 8013a6e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8013a70:	d02b      	beq.n	8013aca <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d018      	beq.n	8013aae <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a86:	b2d2      	uxtb	r2, r2
 8013a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	b29a      	uxth	r2, r3
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	3b01      	subs	r3, #1
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d14c      	bne.n	8013b52 <I2C_Slave_ISR_IT+0x1e6>
 8013ab8:	697b      	ldr	r3, [r7, #20]
 8013aba:	4a2b      	ldr	r2, [pc, #172]	@ (8013b68 <I2C_Slave_ISR_IT+0x1fc>)
 8013abc:	4293      	cmp	r3, r2
 8013abe:	d048      	beq.n	8013b52 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	0018      	movs	r0, r3
 8013ac4:	f000 fc98 	bl	80143f8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8013ac8:	e043      	b.n	8013b52 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	2208      	movs	r2, #8
 8013ace:	4013      	ands	r3, r2
 8013ad0:	d00a      	beq.n	8013ae8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2208      	movs	r2, #8
 8013ad6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8013ad8:	d006      	beq.n	8013ae8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8013ada:	693a      	ldr	r2, [r7, #16]
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	0011      	movs	r1, r2
 8013ae0:	0018      	movs	r0, r3
 8013ae2:	f000 fba3 	bl	801422c <I2C_ITAddrCplt>
 8013ae6:	e035      	b.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013ae8:	693b      	ldr	r3, [r7, #16]
 8013aea:	2202      	movs	r2, #2
 8013aec:	4013      	ands	r3, r2
 8013aee:	d031      	beq.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2202      	movs	r2, #2
 8013af4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013af6:	d02d      	beq.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013afc:	b29b      	uxth	r3, r3
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d018      	beq.n	8013b34 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b06:	781a      	ldrb	r2, [r3, #0]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b12:	1c5a      	adds	r2, r3, #1
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	3b01      	subs	r3, #1
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b2a:	3b01      	subs	r3, #1
 8013b2c:	b29a      	uxth	r2, r3
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013b32:	e00f      	b.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8013b34:	697a      	ldr	r2, [r7, #20]
 8013b36:	2380      	movs	r3, #128	@ 0x80
 8013b38:	045b      	lsls	r3, r3, #17
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d002      	beq.n	8013b44 <I2C_Slave_ISR_IT+0x1d8>
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d107      	bne.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	0018      	movs	r0, r3
 8013b48:	f000 fc56 	bl	80143f8 <I2C_ITSlaveSeqCplt>
 8013b4c:	e002      	b.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8013b4e:	46c0      	nop			@ (mov r8, r8)
 8013b50:	e000      	b.n	8013b54 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8013b52:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2240      	movs	r2, #64	@ 0x40
 8013b58:	2100      	movs	r1, #0
 8013b5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013b5c:	2300      	movs	r3, #0
}
 8013b5e:	0018      	movs	r0, r3
 8013b60:	46bd      	mov	sp, r7
 8013b62:	b006      	add	sp, #24
 8013b64:	bd80      	pop	{r7, pc}
 8013b66:	46c0      	nop			@ (mov r8, r8)
 8013b68:	ffff0000 	.word	0xffff0000

08013b6c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8013b6c:	b590      	push	{r4, r7, lr}
 8013b6e:	b089      	sub	sp, #36	@ 0x24
 8013b70:	af02      	add	r7, sp, #8
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2240      	movs	r2, #64	@ 0x40
 8013b7c:	5c9b      	ldrb	r3, [r3, r2]
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	d101      	bne.n	8013b86 <I2C_Master_ISR_DMA+0x1a>
 8013b82:	2302      	movs	r3, #2
 8013b84:	e0e7      	b.n	8013d56 <I2C_Master_ISR_DMA+0x1ea>
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2240      	movs	r2, #64	@ 0x40
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	2210      	movs	r2, #16
 8013b92:	4013      	ands	r3, r2
 8013b94:	d017      	beq.n	8013bc6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2210      	movs	r2, #16
 8013b9a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013b9c:	d013      	beq.n	8013bc6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	2210      	movs	r2, #16
 8013ba4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013baa:	2204      	movs	r2, #4
 8013bac:	431a      	orrs	r2, r3
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2120      	movs	r1, #32
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	f001 fb7a 	bl	80152b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	0018      	movs	r0, r3
 8013bc0:	f000 ffef 	bl	8014ba2 <I2C_Flush_TXDR>
 8013bc4:	e0c2      	b.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	2280      	movs	r2, #128	@ 0x80
 8013bca:	4013      	ands	r3, r2
 8013bcc:	d100      	bne.n	8013bd0 <I2C_Master_ISR_DMA+0x64>
 8013bce:	e07c      	b.n	8013cca <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2240      	movs	r2, #64	@ 0x40
 8013bd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013bd6:	d100      	bne.n	8013bda <I2C_Master_ISR_DMA+0x6e>
 8013bd8:	e077      	b.n	8013cca <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	681a      	ldr	r2, [r3, #0]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2140      	movs	r1, #64	@ 0x40
 8013be6:	438a      	bics	r2, r1
 8013be8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d055      	beq.n	8013ca0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	2312      	movs	r3, #18
 8013bfe:	18fb      	adds	r3, r7, r3
 8013c00:	0592      	lsls	r2, r2, #22
 8013c02:	0d92      	lsrs	r2, r2, #22
 8013c04:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c0a:	b29b      	uxth	r3, r3
 8013c0c:	2bff      	cmp	r3, #255	@ 0xff
 8013c0e:	d906      	bls.n	8013c1e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	22ff      	movs	r2, #255	@ 0xff
 8013c14:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8013c16:	2380      	movs	r3, #128	@ 0x80
 8013c18:	045b      	lsls	r3, r3, #17
 8013c1a:	617b      	str	r3, [r7, #20]
 8013c1c:	e010      	b.n	8013c40 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8013d60 <I2C_Master_ISR_DMA+0x1f4>)
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d003      	beq.n	8013c3a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c36:	617b      	str	r3, [r7, #20]
 8013c38:	e002      	b.n	8013c40 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8013c3a:	2380      	movs	r3, #128	@ 0x80
 8013c3c:	049b      	lsls	r3, r3, #18
 8013c3e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c44:	b2da      	uxtb	r2, r3
 8013c46:	697c      	ldr	r4, [r7, #20]
 8013c48:	2312      	movs	r3, #18
 8013c4a:	18fb      	adds	r3, r7, r3
 8013c4c:	8819      	ldrh	r1, [r3, #0]
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	2300      	movs	r3, #0
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	0023      	movs	r3, r4
 8013c56:	f001 faf1 	bl	801523c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c5e:	b29a      	uxth	r2, r3
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c64:	1ad3      	subs	r3, r2, r3
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2241      	movs	r2, #65	@ 0x41
 8013c70:	5c9b      	ldrb	r3, [r3, r2]
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	2b22      	cmp	r3, #34	@ 0x22
 8013c76:	d109      	bne.n	8013c8c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2180      	movs	r1, #128	@ 0x80
 8013c84:	0209      	lsls	r1, r1, #8
 8013c86:	430a      	orrs	r2, r1
 8013c88:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013c8a:	e05f      	b.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2180      	movs	r1, #128	@ 0x80
 8013c98:	01c9      	lsls	r1, r1, #7
 8013c9a:	430a      	orrs	r2, r1
 8013c9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013c9e:	e055      	b.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	685a      	ldr	r2, [r3, #4]
 8013ca6:	2380      	movs	r3, #128	@ 0x80
 8013ca8:	049b      	lsls	r3, r3, #18
 8013caa:	401a      	ands	r2, r3
 8013cac:	2380      	movs	r3, #128	@ 0x80
 8013cae:	049b      	lsls	r3, r3, #18
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d004      	beq.n	8013cbe <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	0018      	movs	r0, r3
 8013cb8:	f000 fb5c 	bl	8014374 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8013cbc:	e046      	b.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	2140      	movs	r1, #64	@ 0x40
 8013cc2:	0018      	movs	r0, r3
 8013cc4:	f000 fe42 	bl	801494c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013cc8:	e040      	b.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	2240      	movs	r2, #64	@ 0x40
 8013cce:	4013      	ands	r3, r2
 8013cd0:	d02c      	beq.n	8013d2c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2240      	movs	r2, #64	@ 0x40
 8013cd6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013cd8:	d028      	beq.n	8013d2c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d11d      	bne.n	8013d20 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	685a      	ldr	r2, [r3, #4]
 8013cea:	2380      	movs	r3, #128	@ 0x80
 8013cec:	049b      	lsls	r3, r3, #18
 8013cee:	401a      	ands	r2, r3
 8013cf0:	2380      	movs	r3, #128	@ 0x80
 8013cf2:	049b      	lsls	r3, r3, #18
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d028      	beq.n	8013d4a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cfc:	4a18      	ldr	r2, [pc, #96]	@ (8013d60 <I2C_Master_ISR_DMA+0x1f4>)
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d109      	bne.n	8013d16 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	685a      	ldr	r2, [r3, #4]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	2180      	movs	r1, #128	@ 0x80
 8013d0e:	01c9      	lsls	r1, r1, #7
 8013d10:	430a      	orrs	r2, r1
 8013d12:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8013d14:	e019      	b.n	8013d4a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	0018      	movs	r0, r3
 8013d1a:	f000 fb2b 	bl	8014374 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8013d1e:	e014      	b.n	8013d4a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	2140      	movs	r1, #64	@ 0x40
 8013d24:	0018      	movs	r0, r3
 8013d26:	f000 fe11 	bl	801494c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8013d2a:	e00e      	b.n	8013d4a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	2220      	movs	r2, #32
 8013d30:	4013      	ands	r3, r2
 8013d32:	d00b      	beq.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2220      	movs	r2, #32
 8013d38:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013d3a:	d007      	beq.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013d3c:	68ba      	ldr	r2, [r7, #8]
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	0011      	movs	r1, r2
 8013d42:	0018      	movs	r0, r3
 8013d44:	f000 fbbc 	bl	80144c0 <I2C_ITMasterCplt>
 8013d48:	e000      	b.n	8013d4c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8013d4a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	2240      	movs	r2, #64	@ 0x40
 8013d50:	2100      	movs	r1, #0
 8013d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013d54:	2300      	movs	r3, #0
}
 8013d56:	0018      	movs	r0, r3
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	b007      	add	sp, #28
 8013d5c:	bd90      	pop	{r4, r7, pc}
 8013d5e:	46c0      	nop			@ (mov r8, r8)
 8013d60:	ffff0000 	.word	0xffff0000

08013d64 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8013d64:	b590      	push	{r4, r7, lr}
 8013d66:	b089      	sub	sp, #36	@ 0x24
 8013d68:	af02      	add	r7, sp, #8
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8013d70:	4b88      	ldr	r3, [pc, #544]	@ (8013f94 <I2C_Mem_ISR_DMA+0x230>)
 8013d72:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2240      	movs	r2, #64	@ 0x40
 8013d78:	5c9b      	ldrb	r3, [r3, r2]
 8013d7a:	2b01      	cmp	r3, #1
 8013d7c:	d101      	bne.n	8013d82 <I2C_Mem_ISR_DMA+0x1e>
 8013d7e:	2302      	movs	r3, #2
 8013d80:	e104      	b.n	8013f8c <I2C_Mem_ISR_DMA+0x228>
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2240      	movs	r2, #64	@ 0x40
 8013d86:	2101      	movs	r1, #1
 8013d88:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	2210      	movs	r2, #16
 8013d8e:	4013      	ands	r3, r2
 8013d90:	d017      	beq.n	8013dc2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2210      	movs	r2, #16
 8013d96:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013d98:	d013      	beq.n	8013dc2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2210      	movs	r2, #16
 8013da0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013da6:	2204      	movs	r2, #4
 8013da8:	431a      	orrs	r2, r3
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2120      	movs	r1, #32
 8013db2:	0018      	movs	r0, r3
 8013db4:	f001 fa7c 	bl	80152b0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	0018      	movs	r0, r3
 8013dbc:	f000 fef1 	bl	8014ba2 <I2C_Flush_TXDR>
 8013dc0:	e0df      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	2202      	movs	r2, #2
 8013dc6:	4013      	ands	r3, r2
 8013dc8:	d00d      	beq.n	8013de6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2202      	movs	r2, #2
 8013dce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8013dd0:	d009      	beq.n	8013de6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	68fa      	ldr	r2, [r7, #12]
 8013dd8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013dda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2201      	movs	r2, #1
 8013de0:	4252      	negs	r2, r2
 8013de2:	651a      	str	r2, [r3, #80]	@ 0x50
 8013de4:	e0cd      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	2280      	movs	r2, #128	@ 0x80
 8013dea:	4013      	ands	r3, r2
 8013dec:	d05e      	beq.n	8013eac <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2240      	movs	r2, #64	@ 0x40
 8013df2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8013df4:	d05a      	beq.n	8013eac <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2110      	movs	r1, #16
 8013dfa:	0018      	movs	r0, r3
 8013dfc:	f001 fa58 	bl	80152b0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d04a      	beq.n	8013ea0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	2bff      	cmp	r3, #255	@ 0xff
 8013e12:	d910      	bls.n	8013e36 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	22ff      	movs	r2, #255	@ 0xff
 8013e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013e1e:	b299      	uxth	r1, r3
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e24:	b2da      	uxtb	r2, r3
 8013e26:	2380      	movs	r3, #128	@ 0x80
 8013e28:	045b      	lsls	r3, r3, #17
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	2400      	movs	r4, #0
 8013e2e:	9400      	str	r4, [sp, #0]
 8013e30:	f001 fa04 	bl	801523c <I2C_TransferConfig>
 8013e34:	e011      	b.n	8013e5a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013e44:	b299      	uxth	r1, r3
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	2380      	movs	r3, #128	@ 0x80
 8013e4e:	049b      	lsls	r3, r3, #18
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	2400      	movs	r4, #0
 8013e54:	9400      	str	r4, [sp, #0]
 8013e56:	f001 f9f1 	bl	801523c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	2241      	movs	r2, #65	@ 0x41
 8013e70:	5c9b      	ldrb	r3, [r3, r2]
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	2b22      	cmp	r3, #34	@ 0x22
 8013e76:	d109      	bne.n	8013e8c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	681a      	ldr	r2, [r3, #0]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2180      	movs	r1, #128	@ 0x80
 8013e84:	0209      	lsls	r1, r1, #8
 8013e86:	430a      	orrs	r2, r1
 8013e88:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013e8a:	e07a      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	2180      	movs	r1, #128	@ 0x80
 8013e98:	01c9      	lsls	r1, r1, #7
 8013e9a:	430a      	orrs	r2, r1
 8013e9c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8013e9e:	e070      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2140      	movs	r1, #64	@ 0x40
 8013ea4:	0018      	movs	r0, r3
 8013ea6:	f000 fd51 	bl	801494c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8013eaa:	e06a      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	2240      	movs	r2, #64	@ 0x40
 8013eb0:	4013      	ands	r3, r2
 8013eb2:	d058      	beq.n	8013f66 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2240      	movs	r2, #64	@ 0x40
 8013eb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8013eba:	d054      	beq.n	8013f66 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	2241      	movs	r2, #65	@ 0x41
 8013ec0:	5c9b      	ldrb	r3, [r3, r2]
 8013ec2:	b2db      	uxtb	r3, r3
 8013ec4:	2b22      	cmp	r3, #34	@ 0x22
 8013ec6:	d101      	bne.n	8013ecc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8013ec8:	4b33      	ldr	r3, [pc, #204]	@ (8013f98 <I2C_Mem_ISR_DMA+0x234>)
 8013eca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	2bff      	cmp	r3, #255	@ 0xff
 8013ed4:	d911      	bls.n	8013efa <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	22ff      	movs	r2, #255	@ 0xff
 8013eda:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ee0:	b299      	uxth	r1, r3
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ee6:	b2da      	uxtb	r2, r3
 8013ee8:	2380      	movs	r3, #128	@ 0x80
 8013eea:	045c      	lsls	r4, r3, #17
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	9300      	str	r3, [sp, #0]
 8013ef2:	0023      	movs	r3, r4
 8013ef4:	f001 f9a2 	bl	801523c <I2C_TransferConfig>
 8013ef8:	e012      	b.n	8013f20 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013f08:	b299      	uxth	r1, r3
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f0e:	b2da      	uxtb	r2, r3
 8013f10:	2380      	movs	r3, #128	@ 0x80
 8013f12:	049c      	lsls	r4, r3, #18
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	0023      	movs	r3, r4
 8013f1c:	f001 f98e 	bl	801523c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	b29a      	uxth	r2, r3
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2241      	movs	r2, #65	@ 0x41
 8013f36:	5c9b      	ldrb	r3, [r3, r2]
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	2b22      	cmp	r3, #34	@ 0x22
 8013f3c:	d109      	bne.n	8013f52 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2180      	movs	r1, #128	@ 0x80
 8013f4a:	0209      	lsls	r1, r1, #8
 8013f4c:	430a      	orrs	r2, r1
 8013f4e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013f50:	e017      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	681a      	ldr	r2, [r3, #0]
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2180      	movs	r1, #128	@ 0x80
 8013f5e:	01c9      	lsls	r1, r1, #7
 8013f60:	430a      	orrs	r2, r1
 8013f62:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8013f64:	e00d      	b.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	2220      	movs	r2, #32
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	d009      	beq.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2220      	movs	r2, #32
 8013f72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013f74:	d005      	beq.n	8013f82 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8013f76:	68ba      	ldr	r2, [r7, #8]
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	0011      	movs	r1, r2
 8013f7c:	0018      	movs	r0, r3
 8013f7e:	f000 fa9f 	bl	80144c0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	2240      	movs	r2, #64	@ 0x40
 8013f86:	2100      	movs	r1, #0
 8013f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	0018      	movs	r0, r3
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	b007      	add	sp, #28
 8013f92:	bd90      	pop	{r4, r7, pc}
 8013f94:	80002000 	.word	0x80002000
 8013f98:	80002400 	.word	0x80002400

08013f9c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b088      	sub	sp, #32
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	60f8      	str	r0, [r7, #12]
 8013fa4:	60b9      	str	r1, [r7, #8]
 8013fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2240      	movs	r2, #64	@ 0x40
 8013fb6:	5c9b      	ldrb	r3, [r3, r2]
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d101      	bne.n	8013fc0 <I2C_Slave_ISR_DMA+0x24>
 8013fbc:	2302      	movs	r3, #2
 8013fbe:	e0cd      	b.n	801415c <I2C_Slave_ISR_DMA+0x1c0>
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2240      	movs	r2, #64	@ 0x40
 8013fc4:	2101      	movs	r1, #1
 8013fc6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	2220      	movs	r2, #32
 8013fcc:	4013      	ands	r3, r2
 8013fce:	d009      	beq.n	8013fe4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2220      	movs	r2, #32
 8013fd4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8013fd6:	d005      	beq.n	8013fe4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	0011      	movs	r1, r2
 8013fde:	0018      	movs	r0, r3
 8013fe0:	f000 fb3c 	bl	801465c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	2210      	movs	r2, #16
 8013fe8:	4013      	ands	r3, r2
 8013fea:	d100      	bne.n	8013fee <I2C_Slave_ISR_DMA+0x52>
 8013fec:	e0a3      	b.n	8014136 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2210      	movs	r2, #16
 8013ff2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8013ff4:	d100      	bne.n	8013ff8 <I2C_Slave_ISR_DMA+0x5c>
 8013ff6:	e09e      	b.n	8014136 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	2380      	movs	r3, #128	@ 0x80
 8013ffc:	01db      	lsls	r3, r3, #7
 8013ffe:	4013      	ands	r3, r2
 8014000:	d105      	bne.n	801400e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	2380      	movs	r3, #128	@ 0x80
 8014006:	021b      	lsls	r3, r3, #8
 8014008:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801400a:	d100      	bne.n	801400e <I2C_Slave_ISR_DMA+0x72>
 801400c:	e08c      	b.n	8014128 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014012:	2b00      	cmp	r3, #0
 8014014:	d00c      	beq.n	8014030 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8014016:	687a      	ldr	r2, [r7, #4]
 8014018:	2380      	movs	r3, #128	@ 0x80
 801401a:	021b      	lsls	r3, r3, #8
 801401c:	4013      	ands	r3, r2
 801401e:	d007      	beq.n	8014030 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d101      	bne.n	8014030 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 801402c:	2301      	movs	r3, #1
 801402e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00c      	beq.n	8014052 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	2380      	movs	r3, #128	@ 0x80
 801403c:	01db      	lsls	r3, r3, #7
 801403e:	4013      	ands	r3, r2
 8014040:	d007      	beq.n	8014052 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d101      	bne.n	8014052 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801404e:	2301      	movs	r3, #1
 8014050:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	2b01      	cmp	r3, #1
 8014056:	d12d      	bne.n	80140b4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2241      	movs	r2, #65	@ 0x41
 801405c:	5c9b      	ldrb	r3, [r3, r2]
 801405e:	b2db      	uxtb	r3, r3
 8014060:	2b28      	cmp	r3, #40	@ 0x28
 8014062:	d10b      	bne.n	801407c <I2C_Slave_ISR_DMA+0xe0>
 8014064:	69ba      	ldr	r2, [r7, #24]
 8014066:	2380      	movs	r3, #128	@ 0x80
 8014068:	049b      	lsls	r3, r3, #18
 801406a:	429a      	cmp	r2, r3
 801406c:	d106      	bne.n	801407c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801406e:	68ba      	ldr	r2, [r7, #8]
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	0011      	movs	r1, r2
 8014074:	0018      	movs	r0, r3
 8014076:	f000 fc11 	bl	801489c <I2C_ITListenCplt>
 801407a:	e054      	b.n	8014126 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2241      	movs	r2, #65	@ 0x41
 8014080:	5c9b      	ldrb	r3, [r3, r2]
 8014082:	b2db      	uxtb	r3, r3
 8014084:	2b29      	cmp	r3, #41	@ 0x29
 8014086:	d110      	bne.n	80140aa <I2C_Slave_ISR_DMA+0x10e>
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	4a36      	ldr	r2, [pc, #216]	@ (8014164 <I2C_Slave_ISR_DMA+0x1c8>)
 801408c:	4293      	cmp	r3, r2
 801408e:	d00c      	beq.n	80140aa <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2210      	movs	r2, #16
 8014096:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	0018      	movs	r0, r3
 801409c:	f000 fd81 	bl	8014ba2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	0018      	movs	r0, r3
 80140a4:	f000 f9a8 	bl	80143f8 <I2C_ITSlaveSeqCplt>
 80140a8:	e03d      	b.n	8014126 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2210      	movs	r2, #16
 80140b0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80140b2:	e03e      	b.n	8014132 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2210      	movs	r2, #16
 80140ba:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140c0:	2204      	movs	r2, #4
 80140c2:	431a      	orrs	r2, r3
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80140c8:	2317      	movs	r3, #23
 80140ca:	18fb      	adds	r3, r7, r3
 80140cc:	68fa      	ldr	r2, [r7, #12]
 80140ce:	2141      	movs	r1, #65	@ 0x41
 80140d0:	5c52      	ldrb	r2, [r2, r1]
 80140d2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d004      	beq.n	80140e4 <I2C_Slave_ISR_DMA+0x148>
 80140da:	69ba      	ldr	r2, [r7, #24]
 80140dc:	2380      	movs	r3, #128	@ 0x80
 80140de:	045b      	lsls	r3, r3, #17
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d126      	bne.n	8014132 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80140e4:	2217      	movs	r2, #23
 80140e6:	18bb      	adds	r3, r7, r2
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	2b21      	cmp	r3, #33	@ 0x21
 80140ec:	d003      	beq.n	80140f6 <I2C_Slave_ISR_DMA+0x15a>
 80140ee:	18bb      	adds	r3, r7, r2
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	2b29      	cmp	r3, #41	@ 0x29
 80140f4:	d103      	bne.n	80140fe <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2221      	movs	r2, #33	@ 0x21
 80140fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80140fc:	e00b      	b.n	8014116 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80140fe:	2217      	movs	r2, #23
 8014100:	18bb      	adds	r3, r7, r2
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	2b22      	cmp	r3, #34	@ 0x22
 8014106:	d003      	beq.n	8014110 <I2C_Slave_ISR_DMA+0x174>
 8014108:	18bb      	adds	r3, r7, r2
 801410a:	781b      	ldrb	r3, [r3, #0]
 801410c:	2b2a      	cmp	r3, #42	@ 0x2a
 801410e:	d102      	bne.n	8014116 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	2222      	movs	r2, #34	@ 0x22
 8014114:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	0011      	movs	r1, r2
 801411e:	0018      	movs	r0, r3
 8014120:	f000 fc14 	bl	801494c <I2C_ITError>
      if (treatdmanack == 1U)
 8014124:	e005      	b.n	8014132 <I2C_Slave_ISR_DMA+0x196>
 8014126:	e004      	b.n	8014132 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2210      	movs	r2, #16
 801412e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014130:	e00f      	b.n	8014152 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8014132:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014134:	e00d      	b.n	8014152 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	2208      	movs	r2, #8
 801413a:	4013      	ands	r3, r2
 801413c:	d009      	beq.n	8014152 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2208      	movs	r2, #8
 8014142:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8014144:	d005      	beq.n	8014152 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8014146:	68ba      	ldr	r2, [r7, #8]
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	0011      	movs	r1, r2
 801414c:	0018      	movs	r0, r3
 801414e:	f000 f86d 	bl	801422c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	2240      	movs	r2, #64	@ 0x40
 8014156:	2100      	movs	r1, #0
 8014158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801415a:	2300      	movs	r3, #0
}
 801415c:	0018      	movs	r0, r3
 801415e:	46bd      	mov	sp, r7
 8014160:	b008      	add	sp, #32
 8014162:	bd80      	pop	{r7, pc}
 8014164:	ffff0000 	.word	0xffff0000

08014168 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8014168:	b5b0      	push	{r4, r5, r7, lr}
 801416a:	b086      	sub	sp, #24
 801416c:	af02      	add	r7, sp, #8
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	000c      	movs	r4, r1
 8014172:	0010      	movs	r0, r2
 8014174:	0019      	movs	r1, r3
 8014176:	250a      	movs	r5, #10
 8014178:	197b      	adds	r3, r7, r5
 801417a:	1c22      	adds	r2, r4, #0
 801417c:	801a      	strh	r2, [r3, #0]
 801417e:	2308      	movs	r3, #8
 8014180:	18fb      	adds	r3, r7, r3
 8014182:	1c02      	adds	r2, r0, #0
 8014184:	801a      	strh	r2, [r3, #0]
 8014186:	1dbb      	adds	r3, r7, #6
 8014188:	1c0a      	adds	r2, r1, #0
 801418a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801418c:	1dbb      	adds	r3, r7, #6
 801418e:	881b      	ldrh	r3, [r3, #0]
 8014190:	b2da      	uxtb	r2, r3
 8014192:	197b      	adds	r3, r7, r5
 8014194:	8819      	ldrh	r1, [r3, #0]
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	4b23      	ldr	r3, [pc, #140]	@ (8014228 <I2C_RequestMemoryRead+0xc0>)
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	2300      	movs	r3, #0
 801419e:	f001 f84d 	bl	801523c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80141a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141a4:	6a39      	ldr	r1, [r7, #32]
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	0018      	movs	r0, r3
 80141aa:	f000 fe43 	bl	8014e34 <I2C_WaitOnTXISFlagUntilTimeout>
 80141ae:	1e03      	subs	r3, r0, #0
 80141b0:	d001      	beq.n	80141b6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80141b2:	2301      	movs	r3, #1
 80141b4:	e033      	b.n	801421e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80141b6:	1dbb      	adds	r3, r7, #6
 80141b8:	881b      	ldrh	r3, [r3, #0]
 80141ba:	2b01      	cmp	r3, #1
 80141bc:	d107      	bne.n	80141ce <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80141be:	2308      	movs	r3, #8
 80141c0:	18fb      	adds	r3, r7, r3
 80141c2:	881b      	ldrh	r3, [r3, #0]
 80141c4:	b2da      	uxtb	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80141cc:	e019      	b.n	8014202 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80141ce:	2308      	movs	r3, #8
 80141d0:	18fb      	adds	r3, r7, r3
 80141d2:	881b      	ldrh	r3, [r3, #0]
 80141d4:	0a1b      	lsrs	r3, r3, #8
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	b2da      	uxtb	r2, r3
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80141e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141e2:	6a39      	ldr	r1, [r7, #32]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	0018      	movs	r0, r3
 80141e8:	f000 fe24 	bl	8014e34 <I2C_WaitOnTXISFlagUntilTimeout>
 80141ec:	1e03      	subs	r3, r0, #0
 80141ee:	d001      	beq.n	80141f4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80141f0:	2301      	movs	r3, #1
 80141f2:	e014      	b.n	801421e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80141f4:	2308      	movs	r3, #8
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	881b      	ldrh	r3, [r3, #0]
 80141fa:	b2da      	uxtb	r2, r3
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8014202:	6a3a      	ldr	r2, [r7, #32]
 8014204:	68f8      	ldr	r0, [r7, #12]
 8014206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014208:	9300      	str	r3, [sp, #0]
 801420a:	0013      	movs	r3, r2
 801420c:	2200      	movs	r2, #0
 801420e:	2140      	movs	r1, #64	@ 0x40
 8014210:	f000 fdc2 	bl	8014d98 <I2C_WaitOnFlagUntilTimeout>
 8014214:	1e03      	subs	r3, r0, #0
 8014216:	d001      	beq.n	801421c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8014218:	2301      	movs	r3, #1
 801421a:	e000      	b.n	801421e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 801421c:	2300      	movs	r3, #0
}
 801421e:	0018      	movs	r0, r3
 8014220:	46bd      	mov	sp, r7
 8014222:	b004      	add	sp, #16
 8014224:	bdb0      	pop	{r4, r5, r7, pc}
 8014226:	46c0      	nop			@ (mov r8, r8)
 8014228:	80002000 	.word	0x80002000

0801422c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801422c:	b5b0      	push	{r4, r5, r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2241      	movs	r2, #65	@ 0x41
 801423a:	5c9b      	ldrb	r3, [r3, r2]
 801423c:	b2db      	uxtb	r3, r3
 801423e:	001a      	movs	r2, r3
 8014240:	2328      	movs	r3, #40	@ 0x28
 8014242:	4013      	ands	r3, r2
 8014244:	2b28      	cmp	r3, #40	@ 0x28
 8014246:	d000      	beq.n	801424a <I2C_ITAddrCplt+0x1e>
 8014248:	e088      	b.n	801435c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	699b      	ldr	r3, [r3, #24]
 8014250:	0c1b      	lsrs	r3, r3, #16
 8014252:	b2da      	uxtb	r2, r3
 8014254:	250f      	movs	r5, #15
 8014256:	197b      	adds	r3, r7, r5
 8014258:	2101      	movs	r1, #1
 801425a:	400a      	ands	r2, r1
 801425c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	699b      	ldr	r3, [r3, #24]
 8014264:	0c1b      	lsrs	r3, r3, #16
 8014266:	b29a      	uxth	r2, r3
 8014268:	200c      	movs	r0, #12
 801426a:	183b      	adds	r3, r7, r0
 801426c:	21fe      	movs	r1, #254	@ 0xfe
 801426e:	400a      	ands	r2, r1
 8014270:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	b29a      	uxth	r2, r3
 801427a:	240a      	movs	r4, #10
 801427c:	193b      	adds	r3, r7, r4
 801427e:	0592      	lsls	r2, r2, #22
 8014280:	0d92      	lsrs	r2, r2, #22
 8014282:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	68db      	ldr	r3, [r3, #12]
 801428a:	b29a      	uxth	r2, r3
 801428c:	2308      	movs	r3, #8
 801428e:	18fb      	adds	r3, r7, r3
 8014290:	21fe      	movs	r1, #254	@ 0xfe
 8014292:	400a      	ands	r2, r1
 8014294:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	68db      	ldr	r3, [r3, #12]
 801429a:	2b02      	cmp	r3, #2
 801429c:	d148      	bne.n	8014330 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801429e:	0021      	movs	r1, r4
 80142a0:	187b      	adds	r3, r7, r1
 80142a2:	881b      	ldrh	r3, [r3, #0]
 80142a4:	09db      	lsrs	r3, r3, #7
 80142a6:	b29a      	uxth	r2, r3
 80142a8:	183b      	adds	r3, r7, r0
 80142aa:	881b      	ldrh	r3, [r3, #0]
 80142ac:	4053      	eors	r3, r2
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	001a      	movs	r2, r3
 80142b2:	2306      	movs	r3, #6
 80142b4:	4013      	ands	r3, r2
 80142b6:	d120      	bne.n	80142fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80142b8:	183b      	adds	r3, r7, r0
 80142ba:	187a      	adds	r2, r7, r1
 80142bc:	8812      	ldrh	r2, [r2, #0]
 80142be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80142c4:	1c5a      	adds	r2, r3, #1
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80142ce:	2b02      	cmp	r3, #2
 80142d0:	d14c      	bne.n	801436c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2200      	movs	r2, #0
 80142d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2208      	movs	r2, #8
 80142de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2240      	movs	r2, #64	@ 0x40
 80142e4:	2100      	movs	r1, #0
 80142e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80142e8:	183b      	adds	r3, r7, r0
 80142ea:	881a      	ldrh	r2, [r3, #0]
 80142ec:	197b      	adds	r3, r7, r5
 80142ee:	7819      	ldrb	r1, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	0018      	movs	r0, r3
 80142f4:	f7ff f9d7 	bl	80136a6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80142f8:	e038      	b.n	801436c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80142fa:	240c      	movs	r4, #12
 80142fc:	193b      	adds	r3, r7, r4
 80142fe:	2208      	movs	r2, #8
 8014300:	18ba      	adds	r2, r7, r2
 8014302:	8812      	ldrh	r2, [r2, #0]
 8014304:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014306:	2380      	movs	r3, #128	@ 0x80
 8014308:	021a      	lsls	r2, r3, #8
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	0011      	movs	r1, r2
 801430e:	0018      	movs	r0, r3
 8014310:	f001 f85c 	bl	80153cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2240      	movs	r2, #64	@ 0x40
 8014318:	2100      	movs	r1, #0
 801431a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801431c:	193b      	adds	r3, r7, r4
 801431e:	881a      	ldrh	r2, [r3, #0]
 8014320:	230f      	movs	r3, #15
 8014322:	18fb      	adds	r3, r7, r3
 8014324:	7819      	ldrb	r1, [r3, #0]
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	0018      	movs	r0, r3
 801432a:	f7ff f9bc 	bl	80136a6 <HAL_I2C_AddrCallback>
}
 801432e:	e01d      	b.n	801436c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8014330:	2380      	movs	r3, #128	@ 0x80
 8014332:	021a      	lsls	r2, r3, #8
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	0011      	movs	r1, r2
 8014338:	0018      	movs	r0, r3
 801433a:	f001 f847 	bl	80153cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2240      	movs	r2, #64	@ 0x40
 8014342:	2100      	movs	r1, #0
 8014344:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8014346:	230c      	movs	r3, #12
 8014348:	18fb      	adds	r3, r7, r3
 801434a:	881a      	ldrh	r2, [r3, #0]
 801434c:	230f      	movs	r3, #15
 801434e:	18fb      	adds	r3, r7, r3
 8014350:	7819      	ldrb	r1, [r3, #0]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	0018      	movs	r0, r3
 8014356:	f7ff f9a6 	bl	80136a6 <HAL_I2C_AddrCallback>
}
 801435a:	e007      	b.n	801436c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2208      	movs	r2, #8
 8014362:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2240      	movs	r2, #64	@ 0x40
 8014368:	2100      	movs	r1, #0
 801436a:	5499      	strb	r1, [r3, r2]
}
 801436c:	46c0      	nop			@ (mov r8, r8)
 801436e:	46bd      	mov	sp, r7
 8014370:	b004      	add	sp, #16
 8014372:	bdb0      	pop	{r4, r5, r7, pc}

08014374 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	2242      	movs	r2, #66	@ 0x42
 8014380:	2100      	movs	r1, #0
 8014382:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	2241      	movs	r2, #65	@ 0x41
 8014388:	5c9b      	ldrb	r3, [r3, r2]
 801438a:	b2db      	uxtb	r3, r3
 801438c:	2b21      	cmp	r3, #33	@ 0x21
 801438e:	d117      	bne.n	80143c0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2241      	movs	r2, #65	@ 0x41
 8014394:	2120      	movs	r1, #32
 8014396:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2211      	movs	r2, #17
 801439c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2200      	movs	r2, #0
 80143a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2101      	movs	r1, #1
 80143a8:	0018      	movs	r0, r3
 80143aa:	f001 f80f 	bl	80153cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	2240      	movs	r2, #64	@ 0x40
 80143b2:	2100      	movs	r1, #0
 80143b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	0018      	movs	r0, r3
 80143ba:	f7ff f954 	bl	8013666 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80143be:	e016      	b.n	80143ee <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2241      	movs	r2, #65	@ 0x41
 80143c4:	2120      	movs	r1, #32
 80143c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2212      	movs	r2, #18
 80143cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2200      	movs	r2, #0
 80143d2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2102      	movs	r1, #2
 80143d8:	0018      	movs	r0, r3
 80143da:	f000 fff7 	bl	80153cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2240      	movs	r2, #64	@ 0x40
 80143e2:	2100      	movs	r1, #0
 80143e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	0018      	movs	r0, r3
 80143ea:	f7ff f944 	bl	8013676 <HAL_I2C_MasterRxCpltCallback>
}
 80143ee:	46c0      	nop			@ (mov r8, r8)
 80143f0:	46bd      	mov	sp, r7
 80143f2:	b002      	add	sp, #8
 80143f4:	bd80      	pop	{r7, pc}
	...

080143f8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2242      	movs	r2, #66	@ 0x42
 801440c:	2100      	movs	r1, #0
 801440e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8014410:	68fa      	ldr	r2, [r7, #12]
 8014412:	2380      	movs	r3, #128	@ 0x80
 8014414:	01db      	lsls	r3, r3, #7
 8014416:	4013      	ands	r3, r2
 8014418:	d008      	beq.n	801442c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	681a      	ldr	r2, [r3, #0]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	4924      	ldr	r1, [pc, #144]	@ (80144b8 <I2C_ITSlaveSeqCplt+0xc0>)
 8014426:	400a      	ands	r2, r1
 8014428:	601a      	str	r2, [r3, #0]
 801442a:	e00c      	b.n	8014446 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	2380      	movs	r3, #128	@ 0x80
 8014430:	021b      	lsls	r3, r3, #8
 8014432:	4013      	ands	r3, r2
 8014434:	d007      	beq.n	8014446 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	491e      	ldr	r1, [pc, #120]	@ (80144bc <I2C_ITSlaveSeqCplt+0xc4>)
 8014442:	400a      	ands	r2, r1
 8014444:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2241      	movs	r2, #65	@ 0x41
 801444a:	5c9b      	ldrb	r3, [r3, r2]
 801444c:	b2db      	uxtb	r3, r3
 801444e:	2b29      	cmp	r3, #41	@ 0x29
 8014450:	d114      	bne.n	801447c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2241      	movs	r2, #65	@ 0x41
 8014456:	2128      	movs	r1, #40	@ 0x28
 8014458:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2221      	movs	r2, #33	@ 0x21
 801445e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	2101      	movs	r1, #1
 8014464:	0018      	movs	r0, r3
 8014466:	f000 ffb1 	bl	80153cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2240      	movs	r2, #64	@ 0x40
 801446e:	2100      	movs	r1, #0
 8014470:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	0018      	movs	r0, r3
 8014476:	f7ff f906 	bl	8013686 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801447a:	e019      	b.n	80144b0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2241      	movs	r2, #65	@ 0x41
 8014480:	5c9b      	ldrb	r3, [r3, r2]
 8014482:	b2db      	uxtb	r3, r3
 8014484:	2b2a      	cmp	r3, #42	@ 0x2a
 8014486:	d113      	bne.n	80144b0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2241      	movs	r2, #65	@ 0x41
 801448c:	2128      	movs	r1, #40	@ 0x28
 801448e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2222      	movs	r2, #34	@ 0x22
 8014494:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	2102      	movs	r1, #2
 801449a:	0018      	movs	r0, r3
 801449c:	f000 ff96 	bl	80153cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2240      	movs	r2, #64	@ 0x40
 80144a4:	2100      	movs	r1, #0
 80144a6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	0018      	movs	r0, r3
 80144ac:	f7ff f8f3 	bl	8013696 <HAL_I2C_SlaveRxCpltCallback>
}
 80144b0:	46c0      	nop			@ (mov r8, r8)
 80144b2:	46bd      	mov	sp, r7
 80144b4:	b004      	add	sp, #16
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	ffffbfff 	.word	0xffffbfff
 80144bc:	ffff7fff 	.word	0xffff7fff

080144c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b086      	sub	sp, #24
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2220      	movs	r2, #32
 80144d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2241      	movs	r2, #65	@ 0x41
 80144da:	5c9b      	ldrb	r3, [r3, r2]
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	2b21      	cmp	r3, #33	@ 0x21
 80144e0:	d108      	bne.n	80144f4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	2101      	movs	r1, #1
 80144e6:	0018      	movs	r0, r3
 80144e8:	f000 ff70 	bl	80153cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2211      	movs	r2, #17
 80144f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80144f2:	e00d      	b.n	8014510 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2241      	movs	r2, #65	@ 0x41
 80144f8:	5c9b      	ldrb	r3, [r3, r2]
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	2b22      	cmp	r3, #34	@ 0x22
 80144fe:	d107      	bne.n	8014510 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2102      	movs	r1, #2
 8014504:	0018      	movs	r0, r3
 8014506:	f000 ff61 	bl	80153cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2212      	movs	r2, #18
 801450e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	685a      	ldr	r2, [r3, #4]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	494e      	ldr	r1, [pc, #312]	@ (8014654 <I2C_ITMasterCplt+0x194>)
 801451c:	400a      	ands	r2, r1
 801451e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	4a4b      	ldr	r2, [pc, #300]	@ (8014658 <I2C_ITMasterCplt+0x198>)
 801452a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	2210      	movs	r2, #16
 8014530:	4013      	ands	r3, r2
 8014532:	d009      	beq.n	8014548 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	2210      	movs	r2, #16
 801453a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014540:	2204      	movs	r2, #4
 8014542:	431a      	orrs	r2, r3
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2241      	movs	r2, #65	@ 0x41
 801454c:	5c9b      	ldrb	r3, [r3, r2]
 801454e:	b2db      	uxtb	r3, r3
 8014550:	2b60      	cmp	r3, #96	@ 0x60
 8014552:	d109      	bne.n	8014568 <I2C_ITMasterCplt+0xa8>
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	2204      	movs	r2, #4
 8014558:	4013      	ands	r3, r2
 801455a:	d005      	beq.n	8014568 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014562:	b2db      	uxtb	r3, r3
 8014564:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8014566:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	0018      	movs	r0, r3
 801456c:	f000 fb19 	bl	8014ba2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014574:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2241      	movs	r2, #65	@ 0x41
 801457a:	5c9b      	ldrb	r3, [r3, r2]
 801457c:	b2db      	uxtb	r3, r3
 801457e:	2b60      	cmp	r3, #96	@ 0x60
 8014580:	d002      	beq.n	8014588 <I2C_ITMasterCplt+0xc8>
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d007      	beq.n	8014598 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	0011      	movs	r1, r2
 8014590:	0018      	movs	r0, r3
 8014592:	f000 f9db 	bl	801494c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014596:	e058      	b.n	801464a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2241      	movs	r2, #65	@ 0x41
 801459c:	5c9b      	ldrb	r3, [r3, r2]
 801459e:	b2db      	uxtb	r3, r3
 80145a0:	2b21      	cmp	r3, #33	@ 0x21
 80145a2:	d126      	bne.n	80145f2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2241      	movs	r2, #65	@ 0x41
 80145a8:	2120      	movs	r1, #32
 80145aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2200      	movs	r2, #0
 80145b0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2242      	movs	r2, #66	@ 0x42
 80145b6:	5c9b      	ldrb	r3, [r3, r2]
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	2b40      	cmp	r3, #64	@ 0x40
 80145bc:	d10c      	bne.n	80145d8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2242      	movs	r2, #66	@ 0x42
 80145c2:	2100      	movs	r1, #0
 80145c4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2240      	movs	r2, #64	@ 0x40
 80145ca:	2100      	movs	r1, #0
 80145cc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	0018      	movs	r0, r3
 80145d2:	f7ff f880 	bl	80136d6 <HAL_I2C_MemTxCpltCallback>
}
 80145d6:	e038      	b.n	801464a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2242      	movs	r2, #66	@ 0x42
 80145dc:	2100      	movs	r1, #0
 80145de:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	2240      	movs	r2, #64	@ 0x40
 80145e4:	2100      	movs	r1, #0
 80145e6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	0018      	movs	r0, r3
 80145ec:	f7ff f83b 	bl	8013666 <HAL_I2C_MasterTxCpltCallback>
}
 80145f0:	e02b      	b.n	801464a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2241      	movs	r2, #65	@ 0x41
 80145f6:	5c9b      	ldrb	r3, [r3, r2]
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	2b22      	cmp	r3, #34	@ 0x22
 80145fc:	d125      	bne.n	801464a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2241      	movs	r2, #65	@ 0x41
 8014602:	2120      	movs	r1, #32
 8014604:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2242      	movs	r2, #66	@ 0x42
 8014610:	5c9b      	ldrb	r3, [r3, r2]
 8014612:	b2db      	uxtb	r3, r3
 8014614:	2b40      	cmp	r3, #64	@ 0x40
 8014616:	d10c      	bne.n	8014632 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2242      	movs	r2, #66	@ 0x42
 801461c:	2100      	movs	r1, #0
 801461e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2240      	movs	r2, #64	@ 0x40
 8014624:	2100      	movs	r1, #0
 8014626:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	0018      	movs	r0, r3
 801462c:	f7ff f85b 	bl	80136e6 <HAL_I2C_MemRxCpltCallback>
}
 8014630:	e00b      	b.n	801464a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2242      	movs	r2, #66	@ 0x42
 8014636:	2100      	movs	r1, #0
 8014638:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2240      	movs	r2, #64	@ 0x40
 801463e:	2100      	movs	r1, #0
 8014640:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	0018      	movs	r0, r3
 8014646:	f7ff f816 	bl	8013676 <HAL_I2C_MasterRxCpltCallback>
}
 801464a:	46c0      	nop			@ (mov r8, r8)
 801464c:	46bd      	mov	sp, r7
 801464e:	b006      	add	sp, #24
 8014650:	bd80      	pop	{r7, pc}
 8014652:	46c0      	nop			@ (mov r8, r8)
 8014654:	fe00e800 	.word	0xfe00e800
 8014658:	ffff0000 	.word	0xffff0000

0801465c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b086      	sub	sp, #24
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8014672:	200f      	movs	r0, #15
 8014674:	183b      	adds	r3, r7, r0
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	2141      	movs	r1, #65	@ 0x41
 801467a:	5c52      	ldrb	r2, [r2, r1]
 801467c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	2220      	movs	r2, #32
 8014684:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014686:	183b      	adds	r3, r7, r0
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	2b21      	cmp	r3, #33	@ 0x21
 801468c:	d003      	beq.n	8014696 <I2C_ITSlaveCplt+0x3a>
 801468e:	183b      	adds	r3, r7, r0
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	2b29      	cmp	r3, #41	@ 0x29
 8014694:	d109      	bne.n	80146aa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8014696:	4a7b      	ldr	r2, [pc, #492]	@ (8014884 <I2C_ITSlaveCplt+0x228>)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	0011      	movs	r1, r2
 801469c:	0018      	movs	r0, r3
 801469e:	f000 fe95 	bl	80153cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2221      	movs	r2, #33	@ 0x21
 80146a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80146a8:	e011      	b.n	80146ce <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80146aa:	220f      	movs	r2, #15
 80146ac:	18bb      	adds	r3, r7, r2
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	2b22      	cmp	r3, #34	@ 0x22
 80146b2:	d003      	beq.n	80146bc <I2C_ITSlaveCplt+0x60>
 80146b4:	18bb      	adds	r3, r7, r2
 80146b6:	781b      	ldrb	r3, [r3, #0]
 80146b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80146ba:	d108      	bne.n	80146ce <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80146bc:	4a72      	ldr	r2, [pc, #456]	@ (8014888 <I2C_ITSlaveCplt+0x22c>)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	0011      	movs	r1, r2
 80146c2:	0018      	movs	r0, r3
 80146c4:	f000 fe82 	bl	80153cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2222      	movs	r2, #34	@ 0x22
 80146cc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	685a      	ldr	r2, [r3, #4]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2180      	movs	r1, #128	@ 0x80
 80146da:	0209      	lsls	r1, r1, #8
 80146dc:	430a      	orrs	r2, r1
 80146de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	685a      	ldr	r2, [r3, #4]
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	4968      	ldr	r1, [pc, #416]	@ (801488c <I2C_ITSlaveCplt+0x230>)
 80146ec:	400a      	ands	r2, r1
 80146ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	0018      	movs	r0, r3
 80146f4:	f000 fa55 	bl	8014ba2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80146f8:	693a      	ldr	r2, [r7, #16]
 80146fa:	2380      	movs	r3, #128	@ 0x80
 80146fc:	01db      	lsls	r3, r3, #7
 80146fe:	4013      	ands	r3, r2
 8014700:	d013      	beq.n	801472a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4960      	ldr	r1, [pc, #384]	@ (8014890 <I2C_ITSlaveCplt+0x234>)
 801470e:	400a      	ands	r2, r1
 8014710:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014716:	2b00      	cmp	r3, #0
 8014718:	d01f      	beq.n	801475a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	b29a      	uxth	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014728:	e017      	b.n	801475a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801472a:	693a      	ldr	r2, [r7, #16]
 801472c:	2380      	movs	r3, #128	@ 0x80
 801472e:	021b      	lsls	r3, r3, #8
 8014730:	4013      	ands	r3, r2
 8014732:	d012      	beq.n	801475a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	4955      	ldr	r1, [pc, #340]	@ (8014894 <I2C_ITSlaveCplt+0x238>)
 8014740:	400a      	ands	r2, r1
 8014742:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014748:	2b00      	cmp	r3, #0
 801474a:	d006      	beq.n	801475a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	b29a      	uxth	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	2204      	movs	r2, #4
 801475e:	4013      	ands	r3, r2
 8014760:	d020      	beq.n	80147a4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	2204      	movs	r2, #4
 8014766:	4393      	bics	r3, r2
 8014768:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014774:	b2d2      	uxtb	r2, r2
 8014776:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801477c:	1c5a      	adds	r2, r3, #1
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00c      	beq.n	80147a4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801478e:	3b01      	subs	r3, #1
 8014790:	b29a      	uxth	r2, r3
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801479a:	b29b      	uxth	r3, r3
 801479c:	3b01      	subs	r3, #1
 801479e:	b29a      	uxth	r2, r3
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147a8:	b29b      	uxth	r3, r3
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d005      	beq.n	80147ba <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147b2:	2204      	movs	r2, #4
 80147b4:	431a      	orrs	r2, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	2242      	movs	r2, #66	@ 0x42
 80147be:	2100      	movs	r1, #0
 80147c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2200      	movs	r2, #0
 80147c6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d013      	beq.n	80147f8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	0011      	movs	r1, r2
 80147d8:	0018      	movs	r0, r3
 80147da:	f000 f8b7 	bl	801494c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	2241      	movs	r2, #65	@ 0x41
 80147e2:	5c9b      	ldrb	r3, [r3, r2]
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	2b28      	cmp	r3, #40	@ 0x28
 80147e8:	d147      	bne.n	801487a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	0011      	movs	r1, r2
 80147f0:	0018      	movs	r0, r3
 80147f2:	f000 f853 	bl	801489c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80147f6:	e040      	b.n	801487a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147fc:	4a26      	ldr	r2, [pc, #152]	@ (8014898 <I2C_ITSlaveCplt+0x23c>)
 80147fe:	4293      	cmp	r3, r2
 8014800:	d016      	beq.n	8014830 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	0018      	movs	r0, r3
 8014806:	f7ff fdf7 	bl	80143f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4a22      	ldr	r2, [pc, #136]	@ (8014898 <I2C_ITSlaveCplt+0x23c>)
 801480e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2241      	movs	r2, #65	@ 0x41
 8014814:	2120      	movs	r1, #32
 8014816:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2200      	movs	r2, #0
 801481c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2240      	movs	r2, #64	@ 0x40
 8014822:	2100      	movs	r1, #0
 8014824:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	0018      	movs	r0, r3
 801482a:	f7fe ff4c 	bl	80136c6 <HAL_I2C_ListenCpltCallback>
}
 801482e:	e024      	b.n	801487a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2241      	movs	r2, #65	@ 0x41
 8014834:	5c9b      	ldrb	r3, [r3, r2]
 8014836:	b2db      	uxtb	r3, r3
 8014838:	2b22      	cmp	r3, #34	@ 0x22
 801483a:	d10f      	bne.n	801485c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2241      	movs	r2, #65	@ 0x41
 8014840:	2120      	movs	r1, #32
 8014842:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2200      	movs	r2, #0
 8014848:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2240      	movs	r2, #64	@ 0x40
 801484e:	2100      	movs	r1, #0
 8014850:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	0018      	movs	r0, r3
 8014856:	f7fe ff1e 	bl	8013696 <HAL_I2C_SlaveRxCpltCallback>
}
 801485a:	e00e      	b.n	801487a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2241      	movs	r2, #65	@ 0x41
 8014860:	2120      	movs	r1, #32
 8014862:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2240      	movs	r2, #64	@ 0x40
 801486e:	2100      	movs	r1, #0
 8014870:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	0018      	movs	r0, r3
 8014876:	f7fe ff06 	bl	8013686 <HAL_I2C_SlaveTxCpltCallback>
}
 801487a:	46c0      	nop			@ (mov r8, r8)
 801487c:	46bd      	mov	sp, r7
 801487e:	b006      	add	sp, #24
 8014880:	bd80      	pop	{r7, pc}
 8014882:	46c0      	nop			@ (mov r8, r8)
 8014884:	00008001 	.word	0x00008001
 8014888:	00008002 	.word	0x00008002
 801488c:	fe00e800 	.word	0xfe00e800
 8014890:	ffffbfff 	.word	0xffffbfff
 8014894:	ffff7fff 	.word	0xffff7fff
 8014898:	ffff0000 	.word	0xffff0000

0801489c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	4a26      	ldr	r2, [pc, #152]	@ (8014944 <I2C_ITListenCplt+0xa8>)
 80148aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2200      	movs	r2, #0
 80148b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2241      	movs	r2, #65	@ 0x41
 80148b6:	2120      	movs	r1, #32
 80148b8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2242      	movs	r2, #66	@ 0x42
 80148be:	2100      	movs	r1, #0
 80148c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	2200      	movs	r2, #0
 80148c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	2204      	movs	r2, #4
 80148cc:	4013      	ands	r3, r2
 80148ce:	d022      	beq.n	8014916 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148da:	b2d2      	uxtb	r2, r2
 80148dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148e2:	1c5a      	adds	r2, r3, #1
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d012      	beq.n	8014916 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148f4:	3b01      	subs	r3, #1
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014900:	b29b      	uxth	r3, r3
 8014902:	3b01      	subs	r3, #1
 8014904:	b29a      	uxth	r2, r3
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801490e:	2204      	movs	r2, #4
 8014910:	431a      	orrs	r2, r3
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8014916:	4a0c      	ldr	r2, [pc, #48]	@ (8014948 <I2C_ITListenCplt+0xac>)
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	0011      	movs	r1, r2
 801491c:	0018      	movs	r0, r3
 801491e:	f000 fd55 	bl	80153cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	2210      	movs	r2, #16
 8014928:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2240      	movs	r2, #64	@ 0x40
 801492e:	2100      	movs	r1, #0
 8014930:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	0018      	movs	r0, r3
 8014936:	f7fe fec6 	bl	80136c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801493a:	46c0      	nop			@ (mov r8, r8)
 801493c:	46bd      	mov	sp, r7
 801493e:	b002      	add	sp, #8
 8014940:	bd80      	pop	{r7, pc}
 8014942:	46c0      	nop			@ (mov r8, r8)
 8014944:	ffff0000 	.word	0xffff0000
 8014948:	00008003 	.word	0x00008003

0801494c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8014956:	200f      	movs	r0, #15
 8014958:	183b      	adds	r3, r7, r0
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	2141      	movs	r1, #65	@ 0x41
 801495e:	5c52      	ldrb	r2, [r2, r1]
 8014960:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	2242      	movs	r2, #66	@ 0x42
 8014966:	2100      	movs	r1, #0
 8014968:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	4a72      	ldr	r2, [pc, #456]	@ (8014b38 <I2C_ITError+0x1ec>)
 801496e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2200      	movs	r2, #0
 8014974:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	431a      	orrs	r2, r3
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8014982:	183b      	adds	r3, r7, r0
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	2b28      	cmp	r3, #40	@ 0x28
 8014988:	d007      	beq.n	801499a <I2C_ITError+0x4e>
 801498a:	183b      	adds	r3, r7, r0
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	2b29      	cmp	r3, #41	@ 0x29
 8014990:	d003      	beq.n	801499a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8014992:	183b      	adds	r3, r7, r0
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	2b2a      	cmp	r3, #42	@ 0x2a
 8014998:	d10c      	bne.n	80149b4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2103      	movs	r1, #3
 801499e:	0018      	movs	r0, r3
 80149a0:	f000 fd14 	bl	80153cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2241      	movs	r2, #65	@ 0x41
 80149a8:	2128      	movs	r1, #40	@ 0x28
 80149aa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	4a63      	ldr	r2, [pc, #396]	@ (8014b3c <I2C_ITError+0x1f0>)
 80149b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80149b2:	e032      	b.n	8014a1a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80149b4:	4a62      	ldr	r2, [pc, #392]	@ (8014b40 <I2C_ITError+0x1f4>)
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	0011      	movs	r1, r2
 80149ba:	0018      	movs	r0, r3
 80149bc:	f000 fd06 	bl	80153cc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	0018      	movs	r0, r3
 80149c4:	f000 f8ed 	bl	8014ba2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2241      	movs	r2, #65	@ 0x41
 80149cc:	5c9b      	ldrb	r3, [r3, r2]
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	2b60      	cmp	r3, #96	@ 0x60
 80149d2:	d01f      	beq.n	8014a14 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2241      	movs	r2, #65	@ 0x41
 80149d8:	2120      	movs	r1, #32
 80149da:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	699b      	ldr	r3, [r3, #24]
 80149e2:	2220      	movs	r2, #32
 80149e4:	4013      	ands	r3, r2
 80149e6:	2b20      	cmp	r3, #32
 80149e8:	d114      	bne.n	8014a14 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	699b      	ldr	r3, [r3, #24]
 80149f0:	2210      	movs	r2, #16
 80149f2:	4013      	ands	r3, r2
 80149f4:	2b10      	cmp	r3, #16
 80149f6:	d109      	bne.n	8014a0c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2210      	movs	r2, #16
 80149fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a04:	2204      	movs	r2, #4
 8014a06:	431a      	orrs	r2, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	2220      	movs	r2, #32
 8014a12:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d03b      	beq.n	8014aa0 <I2C_ITError+0x154>
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	2b11      	cmp	r3, #17
 8014a2c:	d002      	beq.n	8014a34 <I2C_ITError+0xe8>
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	2b21      	cmp	r3, #33	@ 0x21
 8014a32:	d135      	bne.n	8014aa0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	681a      	ldr	r2, [r3, #0]
 8014a3a:	2380      	movs	r3, #128	@ 0x80
 8014a3c:	01db      	lsls	r3, r3, #7
 8014a3e:	401a      	ands	r2, r3
 8014a40:	2380      	movs	r3, #128	@ 0x80
 8014a42:	01db      	lsls	r3, r3, #7
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d107      	bne.n	8014a58 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	493c      	ldr	r1, [pc, #240]	@ (8014b44 <I2C_ITError+0x1f8>)
 8014a54:	400a      	ands	r2, r1
 8014a56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a5c:	0018      	movs	r0, r3
 8014a5e:	f7fd faca 	bl	8011ff6 <HAL_DMA_GetState>
 8014a62:	0003      	movs	r3, r0
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d016      	beq.n	8014a96 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a6c:	4a36      	ldr	r2, [pc, #216]	@ (8014b48 <I2C_ITError+0x1fc>)
 8014a6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2240      	movs	r2, #64	@ 0x40
 8014a74:	2100      	movs	r1, #0
 8014a76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a7c:	0018      	movs	r0, r3
 8014a7e:	f7fd f9c5 	bl	8011e0c <HAL_DMA_Abort_IT>
 8014a82:	1e03      	subs	r3, r0, #0
 8014a84:	d051      	beq.n	8014b2a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a90:	0018      	movs	r0, r3
 8014a92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014a94:	e049      	b.n	8014b2a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	0018      	movs	r0, r3
 8014a9a:	f000 f859 	bl	8014b50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014a9e:	e044      	b.n	8014b2a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d03b      	beq.n	8014b20 <I2C_ITError+0x1d4>
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	2b12      	cmp	r3, #18
 8014aac:	d002      	beq.n	8014ab4 <I2C_ITError+0x168>
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	2b22      	cmp	r3, #34	@ 0x22
 8014ab2:	d135      	bne.n	8014b20 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	2380      	movs	r3, #128	@ 0x80
 8014abc:	021b      	lsls	r3, r3, #8
 8014abe:	401a      	ands	r2, r3
 8014ac0:	2380      	movs	r3, #128	@ 0x80
 8014ac2:	021b      	lsls	r3, r3, #8
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d107      	bne.n	8014ad8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	491e      	ldr	r1, [pc, #120]	@ (8014b4c <I2C_ITError+0x200>)
 8014ad4:	400a      	ands	r2, r1
 8014ad6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014adc:	0018      	movs	r0, r3
 8014ade:	f7fd fa8a 	bl	8011ff6 <HAL_DMA_GetState>
 8014ae2:	0003      	movs	r3, r0
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d016      	beq.n	8014b16 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014aec:	4a16      	ldr	r2, [pc, #88]	@ (8014b48 <I2C_ITError+0x1fc>)
 8014aee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2240      	movs	r2, #64	@ 0x40
 8014af4:	2100      	movs	r1, #0
 8014af6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014afc:	0018      	movs	r0, r3
 8014afe:	f7fd f985 	bl	8011e0c <HAL_DMA_Abort_IT>
 8014b02:	1e03      	subs	r3, r0, #0
 8014b04:	d013      	beq.n	8014b2e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b10:	0018      	movs	r0, r3
 8014b12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014b14:	e00b      	b.n	8014b2e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	0018      	movs	r0, r3
 8014b1a:	f000 f819 	bl	8014b50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014b1e:	e006      	b.n	8014b2e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	0018      	movs	r0, r3
 8014b24:	f000 f814 	bl	8014b50 <I2C_TreatErrorCallback>
  }
}
 8014b28:	e002      	b.n	8014b30 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8014b2a:	46c0      	nop			@ (mov r8, r8)
 8014b2c:	e000      	b.n	8014b30 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8014b2e:	46c0      	nop			@ (mov r8, r8)
}
 8014b30:	46c0      	nop			@ (mov r8, r8)
 8014b32:	46bd      	mov	sp, r7
 8014b34:	b004      	add	sp, #16
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	ffff0000 	.word	0xffff0000
 8014b3c:	0801396d 	.word	0x0801396d
 8014b40:	00008003 	.word	0x00008003
 8014b44:	ffffbfff 	.word	0xffffbfff
 8014b48:	08014d5b 	.word	0x08014d5b
 8014b4c:	ffff7fff 	.word	0xffff7fff

08014b50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b082      	sub	sp, #8
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2241      	movs	r2, #65	@ 0x41
 8014b5c:	5c9b      	ldrb	r3, [r3, r2]
 8014b5e:	b2db      	uxtb	r3, r3
 8014b60:	2b60      	cmp	r3, #96	@ 0x60
 8014b62:	d10f      	bne.n	8014b84 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2241      	movs	r2, #65	@ 0x41
 8014b68:	2120      	movs	r1, #32
 8014b6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2240      	movs	r2, #64	@ 0x40
 8014b76:	2100      	movs	r1, #0
 8014b78:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	0018      	movs	r0, r3
 8014b7e:	f7fe fdc2 	bl	8013706 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8014b82:	e00a      	b.n	8014b9a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2200      	movs	r2, #0
 8014b88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2240      	movs	r2, #64	@ 0x40
 8014b8e:	2100      	movs	r1, #0
 8014b90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	0018      	movs	r0, r3
 8014b96:	f7fe fdae 	bl	80136f6 <HAL_I2C_ErrorCallback>
}
 8014b9a:	46c0      	nop			@ (mov r8, r8)
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	b002      	add	sp, #8
 8014ba0:	bd80      	pop	{r7, pc}

08014ba2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8014ba2:	b580      	push	{r7, lr}
 8014ba4:	b082      	sub	sp, #8
 8014ba6:	af00      	add	r7, sp, #0
 8014ba8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	699b      	ldr	r3, [r3, #24]
 8014bb0:	2202      	movs	r2, #2
 8014bb2:	4013      	ands	r3, r2
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d103      	bne.n	8014bc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	699b      	ldr	r3, [r3, #24]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	4013      	ands	r3, r2
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d007      	beq.n	8014bde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	699a      	ldr	r2, [r3, #24]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	2101      	movs	r1, #1
 8014bda:	430a      	orrs	r2, r1
 8014bdc:	619a      	str	r2, [r3, #24]
  }
}
 8014bde:	46c0      	nop			@ (mov r8, r8)
 8014be0:	46bd      	mov	sp, r7
 8014be2:	b002      	add	sp, #8
 8014be4:	bd80      	pop	{r7, pc}
	...

08014be8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bf4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	681a      	ldr	r2, [r3, #0]
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4920      	ldr	r1, [pc, #128]	@ (8014c84 <I2C_DMAMasterTransmitCplt+0x9c>)
 8014c02:	400a      	ands	r2, r1
 8014c04:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d105      	bne.n	8014c1c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2120      	movs	r1, #32
 8014c14:	0018      	movs	r0, r3
 8014c16:	f000 fb4b 	bl	80152b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8014c1a:	e02e      	b.n	8014c7a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c20:	68fa      	ldr	r2, [r7, #12]
 8014c22:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014c24:	189a      	adds	r2, r3, r2
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	2bff      	cmp	r3, #255	@ 0xff
 8014c32:	d903      	bls.n	8014c3c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	22ff      	movs	r2, #255	@ 0xff
 8014c38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014c3a:	e004      	b.n	8014c46 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c4e:	0019      	movs	r1, r3
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	3328      	adds	r3, #40	@ 0x28
 8014c56:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8014c5c:	f7fd f830 	bl	8011cc0 <HAL_DMA_Start_IT>
 8014c60:	1e03      	subs	r3, r0, #0
 8014c62:	d005      	beq.n	8014c70 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2110      	movs	r1, #16
 8014c68:	0018      	movs	r0, r3
 8014c6a:	f7ff fe6f 	bl	801494c <I2C_ITError>
}
 8014c6e:	e004      	b.n	8014c7a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	2140      	movs	r1, #64	@ 0x40
 8014c74:	0018      	movs	r0, r3
 8014c76:	f000 fb1b 	bl	80152b0 <I2C_Enable_IRQ>
}
 8014c7a:	46c0      	nop			@ (mov r8, r8)
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	b004      	add	sp, #16
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	46c0      	nop			@ (mov r8, r8)
 8014c84:	ffffbfff 	.word	0xffffbfff

08014c88 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b084      	sub	sp, #16
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c94:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	4920      	ldr	r1, [pc, #128]	@ (8014d24 <I2C_DMAMasterReceiveCplt+0x9c>)
 8014ca2:	400a      	ands	r2, r1
 8014ca4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014caa:	b29b      	uxth	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d105      	bne.n	8014cbc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2120      	movs	r1, #32
 8014cb4:	0018      	movs	r0, r3
 8014cb6:	f000 fafb 	bl	80152b0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8014cba:	e02e      	b.n	8014d1a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cc0:	68fa      	ldr	r2, [r7, #12]
 8014cc2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014cc4:	189a      	adds	r2, r3, r2
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	2bff      	cmp	r3, #255	@ 0xff
 8014cd2:	d903      	bls.n	8014cdc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	22ff      	movs	r2, #255	@ 0xff
 8014cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014cda:	e004      	b.n	8014ce6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	3324      	adds	r3, #36	@ 0x24
 8014cf0:	0019      	movs	r1, r3
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cf6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8014cfc:	f7fc ffe0 	bl	8011cc0 <HAL_DMA_Start_IT>
 8014d00:	1e03      	subs	r3, r0, #0
 8014d02:	d005      	beq.n	8014d10 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	2110      	movs	r1, #16
 8014d08:	0018      	movs	r0, r3
 8014d0a:	f7ff fe1f 	bl	801494c <I2C_ITError>
}
 8014d0e:	e004      	b.n	8014d1a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2140      	movs	r1, #64	@ 0x40
 8014d14:	0018      	movs	r0, r3
 8014d16:	f000 facb 	bl	80152b0 <I2C_Enable_IRQ>
}
 8014d1a:	46c0      	nop			@ (mov r8, r8)
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	b004      	add	sp, #16
 8014d20:	bd80      	pop	{r7, pc}
 8014d22:	46c0      	nop			@ (mov r8, r8)
 8014d24:	ffff7fff 	.word	0xffff7fff

08014d28 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b084      	sub	sp, #16
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d34:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	685a      	ldr	r2, [r3, #4]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	2180      	movs	r1, #128	@ 0x80
 8014d42:	0209      	lsls	r1, r1, #8
 8014d44:	430a      	orrs	r2, r1
 8014d46:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	2110      	movs	r1, #16
 8014d4c:	0018      	movs	r0, r3
 8014d4e:	f7ff fdfd 	bl	801494c <I2C_ITError>
}
 8014d52:	46c0      	nop			@ (mov r8, r8)
 8014d54:	46bd      	mov	sp, r7
 8014d56:	b004      	add	sp, #16
 8014d58:	bd80      	pop	{r7, pc}

08014d5a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b084      	sub	sp, #16
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d66:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d003      	beq.n	8014d78 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014d74:	2200      	movs	r2, #0
 8014d76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d003      	beq.n	8014d88 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014d84:	2200      	movs	r2, #0
 8014d86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	0018      	movs	r0, r3
 8014d8c:	f7ff fee0 	bl	8014b50 <I2C_TreatErrorCallback>
}
 8014d90:	46c0      	nop			@ (mov r8, r8)
 8014d92:	46bd      	mov	sp, r7
 8014d94:	b004      	add	sp, #16
 8014d96:	bd80      	pop	{r7, pc}

08014d98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b084      	sub	sp, #16
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	603b      	str	r3, [r7, #0]
 8014da4:	1dfb      	adds	r3, r7, #7
 8014da6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014da8:	e030      	b.n	8014e0c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	3301      	adds	r3, #1
 8014dae:	d02d      	beq.n	8014e0c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014db0:	f7fc fa34 	bl	801121c <HAL_GetTick>
 8014db4:	0002      	movs	r2, r0
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	1ad3      	subs	r3, r2, r3
 8014dba:	683a      	ldr	r2, [r7, #0]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d302      	bcc.n	8014dc6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d122      	bne.n	8014e0c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	699b      	ldr	r3, [r3, #24]
 8014dcc:	68ba      	ldr	r2, [r7, #8]
 8014dce:	4013      	ands	r3, r2
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	1ad3      	subs	r3, r2, r3
 8014dd4:	425a      	negs	r2, r3
 8014dd6:	4153      	adcs	r3, r2
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	001a      	movs	r2, r3
 8014ddc:	1dfb      	adds	r3, r7, #7
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d113      	bne.n	8014e0c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014de8:	2220      	movs	r2, #32
 8014dea:	431a      	orrs	r2, r3
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2241      	movs	r2, #65	@ 0x41
 8014df4:	2120      	movs	r1, #32
 8014df6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	2242      	movs	r2, #66	@ 0x42
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	2240      	movs	r2, #64	@ 0x40
 8014e04:	2100      	movs	r1, #0
 8014e06:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8014e08:	2301      	movs	r3, #1
 8014e0a:	e00f      	b.n	8014e2c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	699b      	ldr	r3, [r3, #24]
 8014e12:	68ba      	ldr	r2, [r7, #8]
 8014e14:	4013      	ands	r3, r2
 8014e16:	68ba      	ldr	r2, [r7, #8]
 8014e18:	1ad3      	subs	r3, r2, r3
 8014e1a:	425a      	negs	r2, r3
 8014e1c:	4153      	adcs	r3, r2
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	001a      	movs	r2, r3
 8014e22:	1dfb      	adds	r3, r7, #7
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d0bf      	beq.n	8014daa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014e2a:	2300      	movs	r3, #0
}
 8014e2c:	0018      	movs	r0, r3
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	b004      	add	sp, #16
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	60f8      	str	r0, [r7, #12]
 8014e3c:	60b9      	str	r1, [r7, #8]
 8014e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014e40:	e032      	b.n	8014ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	0018      	movs	r0, r3
 8014e4a:	f000 f8ff 	bl	801504c <I2C_IsErrorOccurred>
 8014e4e:	1e03      	subs	r3, r0, #0
 8014e50:	d001      	beq.n	8014e56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014e52:	2301      	movs	r3, #1
 8014e54:	e030      	b.n	8014eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	3301      	adds	r3, #1
 8014e5a:	d025      	beq.n	8014ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014e5c:	f7fc f9de 	bl	801121c <HAL_GetTick>
 8014e60:	0002      	movs	r2, r0
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	1ad3      	subs	r3, r2, r3
 8014e66:	68ba      	ldr	r2, [r7, #8]
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d302      	bcc.n	8014e72 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d11a      	bne.n	8014ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	699b      	ldr	r3, [r3, #24]
 8014e78:	2202      	movs	r2, #2
 8014e7a:	4013      	ands	r3, r2
 8014e7c:	2b02      	cmp	r3, #2
 8014e7e:	d013      	beq.n	8014ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e84:	2220      	movs	r2, #32
 8014e86:	431a      	orrs	r2, r3
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2241      	movs	r2, #65	@ 0x41
 8014e90:	2120      	movs	r1, #32
 8014e92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2242      	movs	r2, #66	@ 0x42
 8014e98:	2100      	movs	r1, #0
 8014e9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2240      	movs	r2, #64	@ 0x40
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	e007      	b.n	8014eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	699b      	ldr	r3, [r3, #24]
 8014eae:	2202      	movs	r2, #2
 8014eb0:	4013      	ands	r3, r2
 8014eb2:	2b02      	cmp	r3, #2
 8014eb4:	d1c5      	bne.n	8014e42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8014eb6:	2300      	movs	r3, #0
}
 8014eb8:	0018      	movs	r0, r3
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	b004      	add	sp, #16
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	60b9      	str	r1, [r7, #8]
 8014eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014ecc:	e02f      	b.n	8014f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014ece:	687a      	ldr	r2, [r7, #4]
 8014ed0:	68b9      	ldr	r1, [r7, #8]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	0018      	movs	r0, r3
 8014ed6:	f000 f8b9 	bl	801504c <I2C_IsErrorOccurred>
 8014eda:	1e03      	subs	r3, r0, #0
 8014edc:	d001      	beq.n	8014ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014ede:	2301      	movs	r3, #1
 8014ee0:	e02d      	b.n	8014f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ee2:	f7fc f99b 	bl	801121c <HAL_GetTick>
 8014ee6:	0002      	movs	r2, r0
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	1ad3      	subs	r3, r2, r3
 8014eec:	68ba      	ldr	r2, [r7, #8]
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	d302      	bcc.n	8014ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8014ef2:	68bb      	ldr	r3, [r7, #8]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d11a      	bne.n	8014f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	699b      	ldr	r3, [r3, #24]
 8014efe:	2220      	movs	r2, #32
 8014f00:	4013      	ands	r3, r2
 8014f02:	2b20      	cmp	r3, #32
 8014f04:	d013      	beq.n	8014f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f0a:	2220      	movs	r2, #32
 8014f0c:	431a      	orrs	r2, r3
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	2241      	movs	r2, #65	@ 0x41
 8014f16:	2120      	movs	r1, #32
 8014f18:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2242      	movs	r2, #66	@ 0x42
 8014f1e:	2100      	movs	r1, #0
 8014f20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2240      	movs	r2, #64	@ 0x40
 8014f26:	2100      	movs	r1, #0
 8014f28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	e007      	b.n	8014f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	699b      	ldr	r3, [r3, #24]
 8014f34:	2220      	movs	r2, #32
 8014f36:	4013      	ands	r3, r2
 8014f38:	2b20      	cmp	r3, #32
 8014f3a:	d1c8      	bne.n	8014ece <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8014f3c:	2300      	movs	r3, #0
}
 8014f3e:	0018      	movs	r0, r3
 8014f40:	46bd      	mov	sp, r7
 8014f42:	b004      	add	sp, #16
 8014f44:	bd80      	pop	{r7, pc}
	...

08014f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8014f54:	e06b      	b.n	801502e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014f56:	687a      	ldr	r2, [r7, #4]
 8014f58:	68b9      	ldr	r1, [r7, #8]
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	0018      	movs	r0, r3
 8014f5e:	f000 f875 	bl	801504c <I2C_IsErrorOccurred>
 8014f62:	1e03      	subs	r3, r0, #0
 8014f64:	d001      	beq.n	8014f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8014f66:	2301      	movs	r3, #1
 8014f68:	e069      	b.n	801503e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	699b      	ldr	r3, [r3, #24]
 8014f70:	2220      	movs	r2, #32
 8014f72:	4013      	ands	r3, r2
 8014f74:	2b20      	cmp	r3, #32
 8014f76:	d138      	bne.n	8014fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	699b      	ldr	r3, [r3, #24]
 8014f7e:	2204      	movs	r2, #4
 8014f80:	4013      	ands	r3, r2
 8014f82:	2b04      	cmp	r3, #4
 8014f84:	d105      	bne.n	8014f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d001      	beq.n	8014f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	e055      	b.n	801503e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	2210      	movs	r2, #16
 8014f9a:	4013      	ands	r3, r2
 8014f9c:	2b10      	cmp	r3, #16
 8014f9e:	d107      	bne.n	8014fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2210      	movs	r2, #16
 8014fa6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2204      	movs	r2, #4
 8014fac:	645a      	str	r2, [r3, #68]	@ 0x44
 8014fae:	e002      	b.n	8014fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	2220      	movs	r2, #32
 8014fbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	685a      	ldr	r2, [r3, #4]
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	491f      	ldr	r1, [pc, #124]	@ (8015048 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8014fca:	400a      	ands	r2, r1
 8014fcc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2241      	movs	r2, #65	@ 0x41
 8014fd2:	2120      	movs	r1, #32
 8014fd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2242      	movs	r2, #66	@ 0x42
 8014fda:	2100      	movs	r1, #0
 8014fdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	2240      	movs	r2, #64	@ 0x40
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e029      	b.n	801503e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014fea:	f7fc f917 	bl	801121c <HAL_GetTick>
 8014fee:	0002      	movs	r2, r0
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	1ad3      	subs	r3, r2, r3
 8014ff4:	68ba      	ldr	r2, [r7, #8]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d302      	bcc.n	8015000 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8014ffa:	68bb      	ldr	r3, [r7, #8]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d116      	bne.n	801502e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	699b      	ldr	r3, [r3, #24]
 8015006:	2204      	movs	r2, #4
 8015008:	4013      	ands	r3, r2
 801500a:	2b04      	cmp	r3, #4
 801500c:	d00f      	beq.n	801502e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015012:	2220      	movs	r2, #32
 8015014:	431a      	orrs	r2, r3
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2241      	movs	r2, #65	@ 0x41
 801501e:	2120      	movs	r1, #32
 8015020:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	2240      	movs	r2, #64	@ 0x40
 8015026:	2100      	movs	r1, #0
 8015028:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801502a:	2301      	movs	r3, #1
 801502c:	e007      	b.n	801503e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	699b      	ldr	r3, [r3, #24]
 8015034:	2204      	movs	r2, #4
 8015036:	4013      	ands	r3, r2
 8015038:	2b04      	cmp	r3, #4
 801503a:	d18c      	bne.n	8014f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801503c:	2300      	movs	r3, #0
}
 801503e:	0018      	movs	r0, r3
 8015040:	46bd      	mov	sp, r7
 8015042:	b004      	add	sp, #16
 8015044:	bd80      	pop	{r7, pc}
 8015046:	46c0      	nop			@ (mov r8, r8)
 8015048:	fe00e800 	.word	0xfe00e800

0801504c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b08a      	sub	sp, #40	@ 0x28
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	60b9      	str	r1, [r7, #8]
 8015056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015058:	2327      	movs	r3, #39	@ 0x27
 801505a:	18fb      	adds	r3, r7, r3
 801505c:	2200      	movs	r2, #0
 801505e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	699b      	ldr	r3, [r3, #24]
 8015066:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8015068:	2300      	movs	r3, #0
 801506a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8015070:	69bb      	ldr	r3, [r7, #24]
 8015072:	2210      	movs	r2, #16
 8015074:	4013      	ands	r3, r2
 8015076:	d100      	bne.n	801507a <I2C_IsErrorOccurred+0x2e>
 8015078:	e079      	b.n	801516e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	2210      	movs	r2, #16
 8015080:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015082:	e057      	b.n	8015134 <I2C_IsErrorOccurred+0xe8>
 8015084:	2227      	movs	r2, #39	@ 0x27
 8015086:	18bb      	adds	r3, r7, r2
 8015088:	18ba      	adds	r2, r7, r2
 801508a:	7812      	ldrb	r2, [r2, #0]
 801508c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	3301      	adds	r3, #1
 8015092:	d04f      	beq.n	8015134 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015094:	f7fc f8c2 	bl	801121c <HAL_GetTick>
 8015098:	0002      	movs	r2, r0
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	68ba      	ldr	r2, [r7, #8]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d302      	bcc.n	80150aa <I2C_IsErrorOccurred+0x5e>
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d144      	bne.n	8015134 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	685a      	ldr	r2, [r3, #4]
 80150b0:	2380      	movs	r3, #128	@ 0x80
 80150b2:	01db      	lsls	r3, r3, #7
 80150b4:	4013      	ands	r3, r2
 80150b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80150b8:	2013      	movs	r0, #19
 80150ba:	183b      	adds	r3, r7, r0
 80150bc:	68fa      	ldr	r2, [r7, #12]
 80150be:	2142      	movs	r1, #66	@ 0x42
 80150c0:	5c52      	ldrb	r2, [r2, r1]
 80150c2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	699a      	ldr	r2, [r3, #24]
 80150ca:	2380      	movs	r3, #128	@ 0x80
 80150cc:	021b      	lsls	r3, r3, #8
 80150ce:	401a      	ands	r2, r3
 80150d0:	2380      	movs	r3, #128	@ 0x80
 80150d2:	021b      	lsls	r3, r3, #8
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d126      	bne.n	8015126 <I2C_IsErrorOccurred+0xda>
 80150d8:	697a      	ldr	r2, [r7, #20]
 80150da:	2380      	movs	r3, #128	@ 0x80
 80150dc:	01db      	lsls	r3, r3, #7
 80150de:	429a      	cmp	r2, r3
 80150e0:	d021      	beq.n	8015126 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80150e2:	183b      	adds	r3, r7, r0
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	2b20      	cmp	r3, #32
 80150e8:	d01d      	beq.n	8015126 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	685a      	ldr	r2, [r3, #4]
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	2180      	movs	r1, #128	@ 0x80
 80150f6:	01c9      	lsls	r1, r1, #7
 80150f8:	430a      	orrs	r2, r1
 80150fa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80150fc:	f7fc f88e 	bl	801121c <HAL_GetTick>
 8015100:	0003      	movs	r3, r0
 8015102:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015104:	e00f      	b.n	8015126 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8015106:	f7fc f889 	bl	801121c <HAL_GetTick>
 801510a:	0002      	movs	r2, r0
 801510c:	69fb      	ldr	r3, [r7, #28]
 801510e:	1ad3      	subs	r3, r2, r3
 8015110:	2b19      	cmp	r3, #25
 8015112:	d908      	bls.n	8015126 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8015114:	6a3b      	ldr	r3, [r7, #32]
 8015116:	2220      	movs	r2, #32
 8015118:	4313      	orrs	r3, r2
 801511a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801511c:	2327      	movs	r3, #39	@ 0x27
 801511e:	18fb      	adds	r3, r7, r3
 8015120:	2201      	movs	r2, #1
 8015122:	701a      	strb	r2, [r3, #0]

              break;
 8015124:	e006      	b.n	8015134 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	699b      	ldr	r3, [r3, #24]
 801512c:	2220      	movs	r2, #32
 801512e:	4013      	ands	r3, r2
 8015130:	2b20      	cmp	r3, #32
 8015132:	d1e8      	bne.n	8015106 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	699b      	ldr	r3, [r3, #24]
 801513a:	2220      	movs	r2, #32
 801513c:	4013      	ands	r3, r2
 801513e:	2b20      	cmp	r3, #32
 8015140:	d004      	beq.n	801514c <I2C_IsErrorOccurred+0x100>
 8015142:	2327      	movs	r3, #39	@ 0x27
 8015144:	18fb      	adds	r3, r7, r3
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d09b      	beq.n	8015084 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801514c:	2327      	movs	r3, #39	@ 0x27
 801514e:	18fb      	adds	r3, r7, r3
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d103      	bne.n	801515e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	2220      	movs	r2, #32
 801515c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801515e:	6a3b      	ldr	r3, [r7, #32]
 8015160:	2204      	movs	r2, #4
 8015162:	4313      	orrs	r3, r2
 8015164:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8015166:	2327      	movs	r3, #39	@ 0x27
 8015168:	18fb      	adds	r3, r7, r3
 801516a:	2201      	movs	r2, #1
 801516c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	699b      	ldr	r3, [r3, #24]
 8015174:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8015176:	69ba      	ldr	r2, [r7, #24]
 8015178:	2380      	movs	r3, #128	@ 0x80
 801517a:	005b      	lsls	r3, r3, #1
 801517c:	4013      	ands	r3, r2
 801517e:	d00c      	beq.n	801519a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8015180:	6a3b      	ldr	r3, [r7, #32]
 8015182:	2201      	movs	r2, #1
 8015184:	4313      	orrs	r3, r2
 8015186:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	2280      	movs	r2, #128	@ 0x80
 801518e:	0052      	lsls	r2, r2, #1
 8015190:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8015192:	2327      	movs	r3, #39	@ 0x27
 8015194:	18fb      	adds	r3, r7, r3
 8015196:	2201      	movs	r2, #1
 8015198:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801519a:	69ba      	ldr	r2, [r7, #24]
 801519c:	2380      	movs	r3, #128	@ 0x80
 801519e:	00db      	lsls	r3, r3, #3
 80151a0:	4013      	ands	r3, r2
 80151a2:	d00c      	beq.n	80151be <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80151a4:	6a3b      	ldr	r3, [r7, #32]
 80151a6:	2208      	movs	r2, #8
 80151a8:	4313      	orrs	r3, r2
 80151aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2280      	movs	r2, #128	@ 0x80
 80151b2:	00d2      	lsls	r2, r2, #3
 80151b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80151b6:	2327      	movs	r3, #39	@ 0x27
 80151b8:	18fb      	adds	r3, r7, r3
 80151ba:	2201      	movs	r2, #1
 80151bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80151be:	69ba      	ldr	r2, [r7, #24]
 80151c0:	2380      	movs	r3, #128	@ 0x80
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	4013      	ands	r3, r2
 80151c6:	d00c      	beq.n	80151e2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80151c8:	6a3b      	ldr	r3, [r7, #32]
 80151ca:	2202      	movs	r2, #2
 80151cc:	4313      	orrs	r3, r2
 80151ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2280      	movs	r2, #128	@ 0x80
 80151d6:	0092      	lsls	r2, r2, #2
 80151d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80151da:	2327      	movs	r3, #39	@ 0x27
 80151dc:	18fb      	adds	r3, r7, r3
 80151de:	2201      	movs	r2, #1
 80151e0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80151e2:	2327      	movs	r3, #39	@ 0x27
 80151e4:	18fb      	adds	r3, r7, r3
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d01d      	beq.n	8015228 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	0018      	movs	r0, r3
 80151f0:	f7ff fcd7 	bl	8014ba2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	685a      	ldr	r2, [r3, #4]
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	490e      	ldr	r1, [pc, #56]	@ (8015238 <I2C_IsErrorOccurred+0x1ec>)
 8015200:	400a      	ands	r2, r1
 8015202:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015208:	6a3b      	ldr	r3, [r7, #32]
 801520a:	431a      	orrs	r2, r3
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2241      	movs	r2, #65	@ 0x41
 8015214:	2120      	movs	r1, #32
 8015216:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2242      	movs	r2, #66	@ 0x42
 801521c:	2100      	movs	r1, #0
 801521e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	2240      	movs	r2, #64	@ 0x40
 8015224:	2100      	movs	r1, #0
 8015226:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015228:	2327      	movs	r3, #39	@ 0x27
 801522a:	18fb      	adds	r3, r7, r3
 801522c:	781b      	ldrb	r3, [r3, #0]
}
 801522e:	0018      	movs	r0, r3
 8015230:	46bd      	mov	sp, r7
 8015232:	b00a      	add	sp, #40	@ 0x28
 8015234:	bd80      	pop	{r7, pc}
 8015236:	46c0      	nop			@ (mov r8, r8)
 8015238:	fe00e800 	.word	0xfe00e800

0801523c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801523c:	b590      	push	{r4, r7, lr}
 801523e:	b087      	sub	sp, #28
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	0008      	movs	r0, r1
 8015246:	0011      	movs	r1, r2
 8015248:	607b      	str	r3, [r7, #4]
 801524a:	240a      	movs	r4, #10
 801524c:	193b      	adds	r3, r7, r4
 801524e:	1c02      	adds	r2, r0, #0
 8015250:	801a      	strh	r2, [r3, #0]
 8015252:	2009      	movs	r0, #9
 8015254:	183b      	adds	r3, r7, r0
 8015256:	1c0a      	adds	r2, r1, #0
 8015258:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801525a:	193b      	adds	r3, r7, r4
 801525c:	881b      	ldrh	r3, [r3, #0]
 801525e:	059b      	lsls	r3, r3, #22
 8015260:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015262:	183b      	adds	r3, r7, r0
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	0419      	lsls	r1, r3, #16
 8015268:	23ff      	movs	r3, #255	@ 0xff
 801526a:	041b      	lsls	r3, r3, #16
 801526c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801526e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015276:	4313      	orrs	r3, r2
 8015278:	005b      	lsls	r3, r3, #1
 801527a:	085b      	lsrs	r3, r3, #1
 801527c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015286:	0d51      	lsrs	r1, r2, #21
 8015288:	2280      	movs	r2, #128	@ 0x80
 801528a:	00d2      	lsls	r2, r2, #3
 801528c:	400a      	ands	r2, r1
 801528e:	4907      	ldr	r1, [pc, #28]	@ (80152ac <I2C_TransferConfig+0x70>)
 8015290:	430a      	orrs	r2, r1
 8015292:	43d2      	mvns	r2, r2
 8015294:	401a      	ands	r2, r3
 8015296:	0011      	movs	r1, r2
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	697a      	ldr	r2, [r7, #20]
 801529e:	430a      	orrs	r2, r1
 80152a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80152a2:	46c0      	nop			@ (mov r8, r8)
 80152a4:	46bd      	mov	sp, r7
 80152a6:	b007      	add	sp, #28
 80152a8:	bd90      	pop	{r4, r7, pc}
 80152aa:	46c0      	nop			@ (mov r8, r8)
 80152ac:	03ff63ff 	.word	0x03ff63ff

080152b0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	000a      	movs	r2, r1
 80152ba:	1cbb      	adds	r3, r7, #2
 80152bc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80152be:	2300      	movs	r3, #0
 80152c0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80152c6:	4b3e      	ldr	r3, [pc, #248]	@ (80153c0 <I2C_Enable_IRQ+0x110>)
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d035      	beq.n	8015338 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80152d0:	4b3c      	ldr	r3, [pc, #240]	@ (80153c4 <I2C_Enable_IRQ+0x114>)
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d030      	beq.n	8015338 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80152da:	4b3b      	ldr	r3, [pc, #236]	@ (80153c8 <I2C_Enable_IRQ+0x118>)
 80152dc:	429a      	cmp	r2, r3
 80152de:	d02b      	beq.n	8015338 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80152e0:	1cbb      	adds	r3, r7, #2
 80152e2:	2200      	movs	r2, #0
 80152e4:	5e9b      	ldrsh	r3, [r3, r2]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	da03      	bge.n	80152f2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	22b8      	movs	r2, #184	@ 0xb8
 80152ee:	4313      	orrs	r3, r2
 80152f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80152f2:	1cbb      	adds	r3, r7, #2
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	2201      	movs	r2, #1
 80152f8:	4013      	ands	r3, r2
 80152fa:	d003      	beq.n	8015304 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	22f2      	movs	r2, #242	@ 0xf2
 8015300:	4313      	orrs	r3, r2
 8015302:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8015304:	1cbb      	adds	r3, r7, #2
 8015306:	881b      	ldrh	r3, [r3, #0]
 8015308:	2202      	movs	r2, #2
 801530a:	4013      	ands	r3, r2
 801530c:	d003      	beq.n	8015316 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	22f4      	movs	r2, #244	@ 0xf4
 8015312:	4313      	orrs	r3, r2
 8015314:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015316:	1cbb      	adds	r3, r7, #2
 8015318:	881b      	ldrh	r3, [r3, #0]
 801531a:	2b10      	cmp	r3, #16
 801531c:	d103      	bne.n	8015326 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	2290      	movs	r2, #144	@ 0x90
 8015322:	4313      	orrs	r3, r2
 8015324:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015326:	1cbb      	adds	r3, r7, #2
 8015328:	881b      	ldrh	r3, [r3, #0]
 801532a:	2b20      	cmp	r3, #32
 801532c:	d13c      	bne.n	80153a8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2220      	movs	r2, #32
 8015332:	4313      	orrs	r3, r2
 8015334:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015336:	e037      	b.n	80153a8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8015338:	1cbb      	adds	r3, r7, #2
 801533a:	2200      	movs	r2, #0
 801533c:	5e9b      	ldrsh	r3, [r3, r2]
 801533e:	2b00      	cmp	r3, #0
 8015340:	da03      	bge.n	801534a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	22b8      	movs	r2, #184	@ 0xb8
 8015346:	4313      	orrs	r3, r2
 8015348:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801534a:	1cbb      	adds	r3, r7, #2
 801534c:	881b      	ldrh	r3, [r3, #0]
 801534e:	2201      	movs	r2, #1
 8015350:	4013      	ands	r3, r2
 8015352:	d003      	beq.n	801535c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	22f2      	movs	r2, #242	@ 0xf2
 8015358:	4313      	orrs	r3, r2
 801535a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801535c:	1cbb      	adds	r3, r7, #2
 801535e:	881b      	ldrh	r3, [r3, #0]
 8015360:	2202      	movs	r2, #2
 8015362:	4013      	ands	r3, r2
 8015364:	d003      	beq.n	801536e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	22f4      	movs	r2, #244	@ 0xf4
 801536a:	4313      	orrs	r3, r2
 801536c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801536e:	1cbb      	adds	r3, r7, #2
 8015370:	881b      	ldrh	r3, [r3, #0]
 8015372:	2b10      	cmp	r3, #16
 8015374:	d103      	bne.n	801537e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2290      	movs	r2, #144	@ 0x90
 801537a:	4313      	orrs	r3, r2
 801537c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801537e:	1cbb      	adds	r3, r7, #2
 8015380:	881b      	ldrh	r3, [r3, #0]
 8015382:	2b20      	cmp	r3, #32
 8015384:	d103      	bne.n	801538e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2260      	movs	r2, #96	@ 0x60
 801538a:	4313      	orrs	r3, r2
 801538c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015392:	4b0d      	ldr	r3, [pc, #52]	@ (80153c8 <I2C_Enable_IRQ+0x118>)
 8015394:	429a      	cmp	r2, r3
 8015396:	d007      	beq.n	80153a8 <I2C_Enable_IRQ+0xf8>
 8015398:	1cbb      	adds	r3, r7, #2
 801539a:	881b      	ldrh	r3, [r3, #0]
 801539c:	2b40      	cmp	r3, #64	@ 0x40
 801539e:	d103      	bne.n	80153a8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	2240      	movs	r2, #64	@ 0x40
 80153a4:	4313      	orrs	r3, r2
 80153a6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	6819      	ldr	r1, [r3, #0]
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	430a      	orrs	r2, r1
 80153b6:	601a      	str	r2, [r3, #0]
}
 80153b8:	46c0      	nop			@ (mov r8, r8)
 80153ba:	46bd      	mov	sp, r7
 80153bc:	b004      	add	sp, #16
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	08013b6d 	.word	0x08013b6d
 80153c4:	08013f9d 	.word	0x08013f9d
 80153c8:	08013d65 	.word	0x08013d65

080153cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b084      	sub	sp, #16
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	000a      	movs	r2, r1
 80153d6:	1cbb      	adds	r3, r7, #2
 80153d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80153da:	2300      	movs	r3, #0
 80153dc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80153de:	1cbb      	adds	r3, r7, #2
 80153e0:	881b      	ldrh	r3, [r3, #0]
 80153e2:	2201      	movs	r2, #1
 80153e4:	4013      	ands	r3, r2
 80153e6:	d010      	beq.n	801540a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2242      	movs	r2, #66	@ 0x42
 80153ec:	4313      	orrs	r3, r2
 80153ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2241      	movs	r2, #65	@ 0x41
 80153f4:	5c9b      	ldrb	r3, [r3, r2]
 80153f6:	b2db      	uxtb	r3, r3
 80153f8:	001a      	movs	r2, r3
 80153fa:	2328      	movs	r3, #40	@ 0x28
 80153fc:	4013      	ands	r3, r2
 80153fe:	2b28      	cmp	r3, #40	@ 0x28
 8015400:	d003      	beq.n	801540a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	22b0      	movs	r2, #176	@ 0xb0
 8015406:	4313      	orrs	r3, r2
 8015408:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801540a:	1cbb      	adds	r3, r7, #2
 801540c:	881b      	ldrh	r3, [r3, #0]
 801540e:	2202      	movs	r2, #2
 8015410:	4013      	ands	r3, r2
 8015412:	d010      	beq.n	8015436 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2244      	movs	r2, #68	@ 0x44
 8015418:	4313      	orrs	r3, r2
 801541a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2241      	movs	r2, #65	@ 0x41
 8015420:	5c9b      	ldrb	r3, [r3, r2]
 8015422:	b2db      	uxtb	r3, r3
 8015424:	001a      	movs	r2, r3
 8015426:	2328      	movs	r3, #40	@ 0x28
 8015428:	4013      	ands	r3, r2
 801542a:	2b28      	cmp	r3, #40	@ 0x28
 801542c:	d003      	beq.n	8015436 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	22b0      	movs	r2, #176	@ 0xb0
 8015432:	4313      	orrs	r3, r2
 8015434:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8015436:	1cbb      	adds	r3, r7, #2
 8015438:	2200      	movs	r2, #0
 801543a:	5e9b      	ldrsh	r3, [r3, r2]
 801543c:	2b00      	cmp	r3, #0
 801543e:	da03      	bge.n	8015448 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	22b8      	movs	r2, #184	@ 0xb8
 8015444:	4313      	orrs	r3, r2
 8015446:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8015448:	1cbb      	adds	r3, r7, #2
 801544a:	881b      	ldrh	r3, [r3, #0]
 801544c:	2b10      	cmp	r3, #16
 801544e:	d103      	bne.n	8015458 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2290      	movs	r2, #144	@ 0x90
 8015454:	4313      	orrs	r3, r2
 8015456:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8015458:	1cbb      	adds	r3, r7, #2
 801545a:	881b      	ldrh	r3, [r3, #0]
 801545c:	2b20      	cmp	r3, #32
 801545e:	d103      	bne.n	8015468 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	2220      	movs	r2, #32
 8015464:	4313      	orrs	r3, r2
 8015466:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8015468:	1cbb      	adds	r3, r7, #2
 801546a:	881b      	ldrh	r3, [r3, #0]
 801546c:	2b40      	cmp	r3, #64	@ 0x40
 801546e:	d103      	bne.n	8015478 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2240      	movs	r2, #64	@ 0x40
 8015474:	4313      	orrs	r3, r2
 8015476:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	43d9      	mvns	r1, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	400a      	ands	r2, r1
 8015488:	601a      	str	r2, [r3, #0]
}
 801548a:	46c0      	nop			@ (mov r8, r8)
 801548c:	46bd      	mov	sp, r7
 801548e:	b004      	add	sp, #16
 8015490:	bd80      	pop	{r7, pc}
	...

08015494 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
 801549c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2241      	movs	r2, #65	@ 0x41
 80154a2:	5c9b      	ldrb	r3, [r3, r2]
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	2b20      	cmp	r3, #32
 80154a8:	d138      	bne.n	801551c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2240      	movs	r2, #64	@ 0x40
 80154ae:	5c9b      	ldrb	r3, [r3, r2]
 80154b0:	2b01      	cmp	r3, #1
 80154b2:	d101      	bne.n	80154b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80154b4:	2302      	movs	r3, #2
 80154b6:	e032      	b.n	801551e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2240      	movs	r2, #64	@ 0x40
 80154bc:	2101      	movs	r1, #1
 80154be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2241      	movs	r2, #65	@ 0x41
 80154c4:	2124      	movs	r1, #36	@ 0x24
 80154c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	2101      	movs	r1, #1
 80154d4:	438a      	bics	r2, r1
 80154d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	4911      	ldr	r1, [pc, #68]	@ (8015528 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80154e4:	400a      	ands	r2, r1
 80154e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	6819      	ldr	r1, [r3, #0]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	683a      	ldr	r2, [r7, #0]
 80154f4:	430a      	orrs	r2, r1
 80154f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2101      	movs	r1, #1
 8015504:	430a      	orrs	r2, r1
 8015506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2241      	movs	r2, #65	@ 0x41
 801550c:	2120      	movs	r1, #32
 801550e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2240      	movs	r2, #64	@ 0x40
 8015514:	2100      	movs	r1, #0
 8015516:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015518:	2300      	movs	r3, #0
 801551a:	e000      	b.n	801551e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801551c:	2302      	movs	r3, #2
  }
}
 801551e:	0018      	movs	r0, r3
 8015520:	46bd      	mov	sp, r7
 8015522:	b002      	add	sp, #8
 8015524:	bd80      	pop	{r7, pc}
 8015526:	46c0      	nop			@ (mov r8, r8)
 8015528:	ffffefff 	.word	0xffffefff

0801552c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2241      	movs	r2, #65	@ 0x41
 801553a:	5c9b      	ldrb	r3, [r3, r2]
 801553c:	b2db      	uxtb	r3, r3
 801553e:	2b20      	cmp	r3, #32
 8015540:	d139      	bne.n	80155b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2240      	movs	r2, #64	@ 0x40
 8015546:	5c9b      	ldrb	r3, [r3, r2]
 8015548:	2b01      	cmp	r3, #1
 801554a:	d101      	bne.n	8015550 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801554c:	2302      	movs	r3, #2
 801554e:	e033      	b.n	80155b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2240      	movs	r2, #64	@ 0x40
 8015554:	2101      	movs	r1, #1
 8015556:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2241      	movs	r2, #65	@ 0x41
 801555c:	2124      	movs	r1, #36	@ 0x24
 801555e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	2101      	movs	r1, #1
 801556c:	438a      	bics	r2, r1
 801556e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	4a11      	ldr	r2, [pc, #68]	@ (80155c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801557c:	4013      	ands	r3, r2
 801557e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	021b      	lsls	r3, r3, #8
 8015584:	68fa      	ldr	r2, [r7, #12]
 8015586:	4313      	orrs	r3, r2
 8015588:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	68fa      	ldr	r2, [r7, #12]
 8015590:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2101      	movs	r1, #1
 801559e:	430a      	orrs	r2, r1
 80155a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2241      	movs	r2, #65	@ 0x41
 80155a6:	2120      	movs	r1, #32
 80155a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2240      	movs	r2, #64	@ 0x40
 80155ae:	2100      	movs	r1, #0
 80155b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80155b2:	2300      	movs	r3, #0
 80155b4:	e000      	b.n	80155b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80155b6:	2302      	movs	r3, #2
  }
}
 80155b8:	0018      	movs	r0, r3
 80155ba:	46bd      	mov	sp, r7
 80155bc:	b004      	add	sp, #16
 80155be:	bd80      	pop	{r7, pc}
 80155c0:	fffff0ff 	.word	0xfffff0ff

080155c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b088      	sub	sp, #32
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d101      	bne.n	80155d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80155d2:	2301      	movs	r3, #1
 80155d4:	e0e1      	b.n	801579a <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2235      	movs	r2, #53	@ 0x35
 80155da:	5c9b      	ldrb	r3, [r3, r2]
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d107      	bne.n	80155f2 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2234      	movs	r2, #52	@ 0x34
 80155e6:	2100      	movs	r1, #0
 80155e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	0018      	movs	r0, r3
 80155ee:	f7f4 fb3d 	bl	8009c6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2235      	movs	r2, #53	@ 0x35
 80155f6:	2102      	movs	r1, #2
 80155f8:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	69da      	ldr	r2, [r3, #28]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	4967      	ldr	r1, [pc, #412]	@ (80157a4 <HAL_I2S_Init+0x1e0>)
 8015606:	400a      	ands	r2, r1
 8015608:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2202      	movs	r2, #2
 8015610:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	695b      	ldr	r3, [r3, #20]
 8015616:	2b02      	cmp	r3, #2
 8015618:	d073      	beq.n	8015702 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	68db      	ldr	r3, [r3, #12]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d102      	bne.n	8015628 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8015622:	2310      	movs	r3, #16
 8015624:	617b      	str	r3, [r7, #20]
 8015626:	e001      	b.n	801562c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8015628:	2320      	movs	r3, #32
 801562a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	689b      	ldr	r3, [r3, #8]
 8015630:	2b20      	cmp	r3, #32
 8015632:	d802      	bhi.n	801563a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	005b      	lsls	r3, r3, #1
 8015638:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801563a:	f002 fed3 	bl	80183e4 <HAL_RCC_GetSysClockFreq>
 801563e:	0003      	movs	r3, r0
 8015640:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	691a      	ldr	r2, [r3, #16]
 8015646:	2380      	movs	r3, #128	@ 0x80
 8015648:	009b      	lsls	r3, r3, #2
 801564a:	429a      	cmp	r2, r3
 801564c:	d131      	bne.n	80156b2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d016      	beq.n	8015684 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	009b      	lsls	r3, r3, #2
 801565a:	0019      	movs	r1, r3
 801565c:	68f8      	ldr	r0, [r7, #12]
 801565e:	f7ea fda1 	bl	80001a4 <__udivsi3>
 8015662:	0003      	movs	r3, r0
 8015664:	001a      	movs	r2, r3
 8015666:	0013      	movs	r3, r2
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	189b      	adds	r3, r3, r2
 801566c:	005b      	lsls	r3, r3, #1
 801566e:	001a      	movs	r2, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	695b      	ldr	r3, [r3, #20]
 8015674:	0019      	movs	r1, r3
 8015676:	0010      	movs	r0, r2
 8015678:	f7ea fd94 	bl	80001a4 <__udivsi3>
 801567c:	0003      	movs	r3, r0
 801567e:	3305      	adds	r3, #5
 8015680:	613b      	str	r3, [r7, #16]
 8015682:	e02a      	b.n	80156da <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	00db      	lsls	r3, r3, #3
 8015688:	0019      	movs	r1, r3
 801568a:	68f8      	ldr	r0, [r7, #12]
 801568c:	f7ea fd8a 	bl	80001a4 <__udivsi3>
 8015690:	0003      	movs	r3, r0
 8015692:	001a      	movs	r2, r3
 8015694:	0013      	movs	r3, r2
 8015696:	009b      	lsls	r3, r3, #2
 8015698:	189b      	adds	r3, r3, r2
 801569a:	005b      	lsls	r3, r3, #1
 801569c:	001a      	movs	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	695b      	ldr	r3, [r3, #20]
 80156a2:	0019      	movs	r1, r3
 80156a4:	0010      	movs	r0, r2
 80156a6:	f7ea fd7d 	bl	80001a4 <__udivsi3>
 80156aa:	0003      	movs	r3, r0
 80156ac:	3305      	adds	r3, #5
 80156ae:	613b      	str	r3, [r7, #16]
 80156b0:	e013      	b.n	80156da <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80156b2:	6979      	ldr	r1, [r7, #20]
 80156b4:	68f8      	ldr	r0, [r7, #12]
 80156b6:	f7ea fd75 	bl	80001a4 <__udivsi3>
 80156ba:	0003      	movs	r3, r0
 80156bc:	001a      	movs	r2, r3
 80156be:	0013      	movs	r3, r2
 80156c0:	009b      	lsls	r3, r3, #2
 80156c2:	189b      	adds	r3, r3, r2
 80156c4:	005b      	lsls	r3, r3, #1
 80156c6:	001a      	movs	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	695b      	ldr	r3, [r3, #20]
 80156cc:	0019      	movs	r1, r3
 80156ce:	0010      	movs	r0, r2
 80156d0:	f7ea fd68 	bl	80001a4 <__udivsi3>
 80156d4:	0003      	movs	r3, r0
 80156d6:	3305      	adds	r3, #5
 80156d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	210a      	movs	r1, #10
 80156de:	0018      	movs	r0, r3
 80156e0:	f7ea fd60 	bl	80001a4 <__udivsi3>
 80156e4:	0003      	movs	r3, r0
 80156e6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	2201      	movs	r2, #1
 80156ec:	4013      	ands	r3, r2
 80156ee:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80156f0:	693a      	ldr	r2, [r7, #16]
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	1ad3      	subs	r3, r2, r3
 80156f6:	085b      	lsrs	r3, r3, #1
 80156f8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80156fa:	69bb      	ldr	r3, [r7, #24]
 80156fc:	021b      	lsls	r3, r3, #8
 80156fe:	61bb      	str	r3, [r7, #24]
 8015700:	e003      	b.n	801570a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8015702:	2302      	movs	r3, #2
 8015704:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8015706:	2300      	movs	r3, #0
 8015708:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	2b01      	cmp	r3, #1
 801570e:	d902      	bls.n	8015716 <HAL_I2S_Init+0x152>
 8015710:	69fb      	ldr	r3, [r7, #28]
 8015712:	2bff      	cmp	r3, #255	@ 0xff
 8015714:	d907      	bls.n	8015726 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801571a:	2210      	movs	r2, #16
 801571c:	431a      	orrs	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8015722:	2301      	movs	r3, #1
 8015724:	e039      	b.n	801579a <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	691a      	ldr	r2, [r3, #16]
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	431a      	orrs	r2, r3
 801572e:	0011      	movs	r1, r2
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	69fa      	ldr	r2, [r7, #28]
 8015736:	430a      	orrs	r2, r1
 8015738:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	69db      	ldr	r3, [r3, #28]
 8015740:	4a18      	ldr	r2, [pc, #96]	@ (80157a4 <HAL_I2S_Init+0x1e0>)
 8015742:	401a      	ands	r2, r3
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6859      	ldr	r1, [r3, #4]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	689b      	ldr	r3, [r3, #8]
 801574c:	4319      	orrs	r1, r3
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	68db      	ldr	r3, [r3, #12]
 8015752:	4319      	orrs	r1, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	699b      	ldr	r3, [r3, #24]
 8015758:	430b      	orrs	r3, r1
 801575a:	431a      	orrs	r2, r3
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	2180      	movs	r1, #128	@ 0x80
 8015762:	0109      	lsls	r1, r1, #4
 8015764:	430a      	orrs	r2, r1
 8015766:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	689b      	ldr	r3, [r3, #8]
 801576c:	2b30      	cmp	r3, #48	@ 0x30
 801576e:	d003      	beq.n	8015778 <HAL_I2S_Init+0x1b4>
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	2bb0      	cmp	r3, #176	@ 0xb0
 8015776:	d108      	bne.n	801578a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	69da      	ldr	r2, [r3, #28]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2180      	movs	r1, #128	@ 0x80
 8015784:	0149      	lsls	r1, r1, #5
 8015786:	430a      	orrs	r2, r1
 8015788:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2200      	movs	r2, #0
 801578e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2235      	movs	r2, #53	@ 0x35
 8015794:	2101      	movs	r1, #1
 8015796:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015798:	2300      	movs	r3, #0
}
 801579a:	0018      	movs	r0, r3
 801579c:	46bd      	mov	sp, r7
 801579e:	b008      	add	sp, #32
 80157a0:	bd80      	pop	{r7, pc}
 80157a2:	46c0      	nop			@ (mov r8, r8)
 80157a4:	fffff040 	.word	0xfffff040

080157a8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b086      	sub	sp, #24
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	1dbb      	adds	r3, r7, #6
 80157b4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d003      	beq.n	80157c4 <HAL_I2S_Receive_DMA+0x1c>
 80157bc:	1dbb      	adds	r3, r7, #6
 80157be:	881b      	ldrh	r3, [r3, #0]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d101      	bne.n	80157c8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80157c4:	2301      	movs	r3, #1
 80157c6:	e0a6      	b.n	8015916 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2234      	movs	r2, #52	@ 0x34
 80157cc:	5c9b      	ldrb	r3, [r3, r2]
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	2b01      	cmp	r3, #1
 80157d2:	d101      	bne.n	80157d8 <HAL_I2S_Receive_DMA+0x30>
 80157d4:	2302      	movs	r3, #2
 80157d6:	e09e      	b.n	8015916 <HAL_I2S_Receive_DMA+0x16e>
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	2234      	movs	r2, #52	@ 0x34
 80157dc:	2101      	movs	r1, #1
 80157de:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2235      	movs	r2, #53	@ 0x35
 80157e4:	5c9b      	ldrb	r3, [r3, r2]
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	2b01      	cmp	r3, #1
 80157ea:	d005      	beq.n	80157f8 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2234      	movs	r2, #52	@ 0x34
 80157f0:	2100      	movs	r1, #0
 80157f2:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80157f4:	2302      	movs	r3, #2
 80157f6:	e08e      	b.n	8015916 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2235      	movs	r2, #53	@ 0x35
 80157fc:	2104      	movs	r1, #4
 80157fe:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	2200      	movs	r2, #0
 8015804:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	68ba      	ldr	r2, [r7, #8]
 801580a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	69db      	ldr	r3, [r3, #28]
 8015812:	2207      	movs	r2, #7
 8015814:	4013      	ands	r3, r2
 8015816:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	2b03      	cmp	r3, #3
 801581c:	d002      	beq.n	8015824 <HAL_I2S_Receive_DMA+0x7c>
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	2b05      	cmp	r3, #5
 8015822:	d10c      	bne.n	801583e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8015824:	1dbb      	adds	r3, r7, #6
 8015826:	881b      	ldrh	r3, [r3, #0]
 8015828:	18db      	adds	r3, r3, r3
 801582a:	b29a      	uxth	r2, r3
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8015830:	1dbb      	adds	r3, r7, #6
 8015832:	881b      	ldrh	r3, [r3, #0]
 8015834:	18db      	adds	r3, r3, r3
 8015836:	b29a      	uxth	r2, r3
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801583c:	e007      	b.n	801584e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	1dba      	adds	r2, r7, #6
 8015842:	8812      	ldrh	r2, [r2, #0]
 8015844:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	1dba      	adds	r2, r7, #6
 801584a:	8812      	ldrh	r2, [r2, #0]
 801584c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015852:	4a33      	ldr	r2, [pc, #204]	@ (8015920 <HAL_I2S_Receive_DMA+0x178>)
 8015854:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801585a:	4a32      	ldr	r2, [pc, #200]	@ (8015924 <HAL_I2S_Receive_DMA+0x17c>)
 801585c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015862:	4a31      	ldr	r2, [pc, #196]	@ (8015928 <HAL_I2S_Receive_DMA+0x180>)
 8015864:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	69da      	ldr	r2, [r3, #28]
 801586c:	23c0      	movs	r3, #192	@ 0xc0
 801586e:	009b      	lsls	r3, r3, #2
 8015870:	401a      	ands	r2, r3
 8015872:	23c0      	movs	r3, #192	@ 0xc0
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	429a      	cmp	r2, r3
 8015878:	d10a      	bne.n	8015890 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801587a:	2300      	movs	r3, #0
 801587c:	613b      	str	r3, [r7, #16]
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	68db      	ldr	r3, [r3, #12]
 8015884:	613b      	str	r3, [r7, #16]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	613b      	str	r3, [r7, #16]
 801588e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	330c      	adds	r3, #12
 801589a:	0019      	movs	r1, r3
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158a0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80158a8:	f7fc fa0a 	bl	8011cc0 <HAL_DMA_Start_IT>
 80158ac:	1e03      	subs	r3, r0, #0
 80158ae:	d00f      	beq.n	80158d0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158b4:	2208      	movs	r2, #8
 80158b6:	431a      	orrs	r2, r3
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	2235      	movs	r2, #53	@ 0x35
 80158c0:	2101      	movs	r1, #1
 80158c2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2234      	movs	r2, #52	@ 0x34
 80158c8:	2100      	movs	r1, #0
 80158ca:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80158cc:	2301      	movs	r3, #1
 80158ce:	e022      	b.n	8015916 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	69da      	ldr	r2, [r3, #28]
 80158d6:	2380      	movs	r3, #128	@ 0x80
 80158d8:	00db      	lsls	r3, r3, #3
 80158da:	4013      	ands	r3, r2
 80158dc:	d108      	bne.n	80158f0 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	69da      	ldr	r2, [r3, #28]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	2180      	movs	r1, #128	@ 0x80
 80158ea:	00c9      	lsls	r1, r1, #3
 80158ec:	430a      	orrs	r2, r1
 80158ee:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	2201      	movs	r2, #1
 80158f8:	4013      	ands	r3, r2
 80158fa:	d107      	bne.n	801590c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	685a      	ldr	r2, [r3, #4]
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	2101      	movs	r1, #1
 8015908:	430a      	orrs	r2, r1
 801590a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	2234      	movs	r2, #52	@ 0x34
 8015910:	2100      	movs	r1, #0
 8015912:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8015914:	2300      	movs	r3, #0
}
 8015916:	0018      	movs	r0, r3
 8015918:	46bd      	mov	sp, r7
 801591a:	b006      	add	sp, #24
 801591c:	bd80      	pop	{r7, pc}
 801591e:	46c0      	nop			@ (mov r8, r8)
 8015920:	08015b09 	.word	0x08015b09
 8015924:	08015ac5 	.word	0x08015ac5
 8015928:	08015b27 	.word	0x08015b27

0801592c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b086      	sub	sp, #24
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8015934:	2317      	movs	r3, #23
 8015936:	18fb      	adds	r3, r7, r3
 8015938:	2200      	movs	r2, #0
 801593a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	685a      	ldr	r2, [r3, #4]
 8015940:	2380      	movs	r3, #128	@ 0x80
 8015942:	009b      	lsls	r3, r3, #2
 8015944:	429a      	cmp	r2, r3
 8015946:	d003      	beq.n	8015950 <HAL_I2S_DMAStop+0x24>
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d158      	bne.n	8015a02 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015954:	2b00      	cmp	r3, #0
 8015956:	d010      	beq.n	801597a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801595c:	0018      	movs	r0, r3
 801595e:	f7fc fa15 	bl	8011d8c <HAL_DMA_Abort>
 8015962:	1e03      	subs	r3, r0, #0
 8015964:	d009      	beq.n	801597a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801596a:	2208      	movs	r2, #8
 801596c:	431a      	orrs	r2, r3
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8015972:	2317      	movs	r3, #23
 8015974:	18fb      	adds	r3, r7, r3
 8015976:	2201      	movs	r2, #1
 8015978:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	2364      	movs	r3, #100	@ 0x64
 801597e:	2201      	movs	r2, #1
 8015980:	2102      	movs	r1, #2
 8015982:	f000 f8f7 	bl	8015b74 <I2S_WaitFlagStateUntilTimeout>
 8015986:	1e03      	subs	r3, r0, #0
 8015988:	d00d      	beq.n	80159a6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801598e:	2201      	movs	r2, #1
 8015990:	431a      	orrs	r2, r3
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2235      	movs	r2, #53	@ 0x35
 801599a:	2101      	movs	r1, #1
 801599c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801599e:	2317      	movs	r3, #23
 80159a0:	18fb      	adds	r3, r7, r3
 80159a2:	2201      	movs	r2, #1
 80159a4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	2364      	movs	r3, #100	@ 0x64
 80159aa:	2200      	movs	r2, #0
 80159ac:	2180      	movs	r1, #128	@ 0x80
 80159ae:	f000 f8e1 	bl	8015b74 <I2S_WaitFlagStateUntilTimeout>
 80159b2:	1e03      	subs	r3, r0, #0
 80159b4:	d00d      	beq.n	80159d2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159ba:	2201      	movs	r2, #1
 80159bc:	431a      	orrs	r2, r3
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	2235      	movs	r2, #53	@ 0x35
 80159c6:	2101      	movs	r1, #1
 80159c8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80159ca:	2317      	movs	r3, #23
 80159cc:	18fb      	adds	r3, r7, r3
 80159ce:	2201      	movs	r2, #1
 80159d0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	69da      	ldr	r2, [r3, #28]
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	4938      	ldr	r1, [pc, #224]	@ (8015ac0 <HAL_I2S_DMAStop+0x194>)
 80159de:	400a      	ands	r2, r1
 80159e0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80159e2:	2300      	movs	r3, #0
 80159e4:	613b      	str	r3, [r7, #16]
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	689b      	ldr	r3, [r3, #8]
 80159ec:	613b      	str	r3, [r7, #16]
 80159ee:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	685a      	ldr	r2, [r3, #4]
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	2102      	movs	r1, #2
 80159fc:	438a      	bics	r2, r1
 80159fe:	605a      	str	r2, [r3, #4]
 8015a00:	e053      	b.n	8015aaa <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	685a      	ldr	r2, [r3, #4]
 8015a06:	23c0      	movs	r3, #192	@ 0xc0
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d005      	beq.n	8015a1a <HAL_I2S_DMAStop+0xee>
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	685a      	ldr	r2, [r3, #4]
 8015a12:	2380      	movs	r3, #128	@ 0x80
 8015a14:	005b      	lsls	r3, r3, #1
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d147      	bne.n	8015aaa <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d010      	beq.n	8015a44 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a26:	0018      	movs	r0, r3
 8015a28:	f7fc f9b0 	bl	8011d8c <HAL_DMA_Abort>
 8015a2c:	1e03      	subs	r3, r0, #0
 8015a2e:	d009      	beq.n	8015a44 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a34:	2208      	movs	r2, #8
 8015a36:	431a      	orrs	r2, r3
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8015a3c:	2317      	movs	r3, #23
 8015a3e:	18fb      	adds	r3, r7, r3
 8015a40:	2201      	movs	r2, #1
 8015a42:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	69da      	ldr	r2, [r3, #28]
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	491c      	ldr	r1, [pc, #112]	@ (8015ac0 <HAL_I2S_DMAStop+0x194>)
 8015a50:	400a      	ands	r2, r1
 8015a52:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8015a54:	2300      	movs	r3, #0
 8015a56:	60fb      	str	r3, [r7, #12]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	60fb      	str	r3, [r7, #12]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	689b      	ldr	r3, [r3, #8]
 8015a66:	60fb      	str	r3, [r7, #12]
 8015a68:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	685a      	ldr	r2, [r3, #4]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	2101      	movs	r1, #1
 8015a76:	438a      	bics	r2, r1
 8015a78:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	685a      	ldr	r2, [r3, #4]
 8015a7e:	2380      	movs	r3, #128	@ 0x80
 8015a80:	005b      	lsls	r3, r3, #1
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d10e      	bne.n	8015aa4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a8a:	2240      	movs	r2, #64	@ 0x40
 8015a8c:	431a      	orrs	r2, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2235      	movs	r2, #53	@ 0x35
 8015a96:	2101      	movs	r1, #1
 8015a98:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8015a9a:	2317      	movs	r3, #23
 8015a9c:	18fb      	adds	r3, r7, r3
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	701a      	strb	r2, [r3, #0]
 8015aa2:	e002      	b.n	8015aaa <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2235      	movs	r2, #53	@ 0x35
 8015aae:	2101      	movs	r1, #1
 8015ab0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8015ab2:	2317      	movs	r3, #23
 8015ab4:	18fb      	adds	r3, r7, r3
 8015ab6:	781b      	ldrb	r3, [r3, #0]
}
 8015ab8:	0018      	movs	r0, r3
 8015aba:	46bd      	mov	sp, r7
 8015abc:	b006      	add	sp, #24
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	fffffbff 	.word	0xfffffbff

08015ac4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b084      	sub	sp, #16
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ad0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	69db      	ldr	r3, [r3, #28]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d10e      	bne.n	8015af8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	685a      	ldr	r2, [r3, #4]
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	2101      	movs	r1, #1
 8015ae6:	438a      	bics	r2, r1
 8015ae8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2200      	movs	r2, #0
 8015aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2235      	movs	r2, #53	@ 0x35
 8015af4:	2101      	movs	r1, #1
 8015af6:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	0018      	movs	r0, r3
 8015afc:	f7f8 fea8 	bl	800e850 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015b00:	46c0      	nop			@ (mov r8, r8)
 8015b02:	46bd      	mov	sp, r7
 8015b04:	b004      	add	sp, #16
 8015b06:	bd80      	pop	{r7, pc}

08015b08 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	0018      	movs	r0, r3
 8015b1a:	f7f8 fe87 	bl	800e82c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015b1e:	46c0      	nop			@ (mov r8, r8)
 8015b20:	46bd      	mov	sp, r7
 8015b22:	b004      	add	sp, #16
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b084      	sub	sp, #16
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b32:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	685a      	ldr	r2, [r3, #4]
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2103      	movs	r1, #3
 8015b40:	438a      	bics	r2, r1
 8015b42:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2200      	movs	r2, #0
 8015b48:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2235      	movs	r2, #53	@ 0x35
 8015b54:	2101      	movs	r1, #1
 8015b56:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b5c:	2208      	movs	r2, #8
 8015b5e:	431a      	orrs	r2, r3
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	0018      	movs	r0, r3
 8015b68:	f7f8 fec0 	bl	800e8ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8015b6c:	46c0      	nop			@ (mov r8, r8)
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	b004      	add	sp, #16
 8015b72:	bd80      	pop	{r7, pc}

08015b74 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b086      	sub	sp, #24
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	60f8      	str	r0, [r7, #12]
 8015b7c:	60b9      	str	r1, [r7, #8]
 8015b7e:	603b      	str	r3, [r7, #0]
 8015b80:	1dfb      	adds	r3, r7, #7
 8015b82:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8015b84:	f7fb fb4a 	bl	801121c <HAL_GetTick>
 8015b88:	0003      	movs	r3, r0
 8015b8a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015b8c:	e017      	b.n	8015bbe <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	3301      	adds	r3, #1
 8015b92:	d014      	beq.n	8015bbe <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8015b94:	f7fb fb42 	bl	801121c <HAL_GetTick>
 8015b98:	0002      	movs	r2, r0
 8015b9a:	697b      	ldr	r3, [r7, #20]
 8015b9c:	1ad3      	subs	r3, r2, r3
 8015b9e:	683a      	ldr	r2, [r7, #0]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d902      	bls.n	8015baa <I2S_WaitFlagStateUntilTimeout+0x36>
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d109      	bne.n	8015bbe <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	2235      	movs	r2, #53	@ 0x35
 8015bae:	2101      	movs	r1, #1
 8015bb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2234      	movs	r2, #52	@ 0x34
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015bba:	2303      	movs	r3, #3
 8015bbc:	e00f      	b.n	8015bde <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	689b      	ldr	r3, [r3, #8]
 8015bc4:	68ba      	ldr	r2, [r7, #8]
 8015bc6:	4013      	ands	r3, r2
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	1ad3      	subs	r3, r2, r3
 8015bcc:	425a      	negs	r2, r3
 8015bce:	4153      	adcs	r3, r2
 8015bd0:	b2db      	uxtb	r3, r3
 8015bd2:	001a      	movs	r2, r3
 8015bd4:	1dfb      	adds	r3, r7, #7
 8015bd6:	781b      	ldrb	r3, [r3, #0]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d1d8      	bne.n	8015b8e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8015bdc:	2300      	movs	r3, #0
}
 8015bde:	0018      	movs	r0, r3
 8015be0:	46bd      	mov	sp, r7
 8015be2:	b006      	add	sp, #24
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8015be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bea:	b08b      	sub	sp, #44	@ 0x2c
 8015bec:	af06      	add	r7, sp, #24
 8015bee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d101      	bne.n	8015bfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	e0f0      	b.n	8015ddc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	4a79      	ldr	r2, [pc, #484]	@ (8015de4 <HAL_PCD_Init+0x1fc>)
 8015bfe:	5c9b      	ldrb	r3, [r3, r2]
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d108      	bne.n	8015c18 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8015c06:	687a      	ldr	r2, [r7, #4]
 8015c08:	23aa      	movs	r3, #170	@ 0xaa
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	2100      	movs	r1, #0
 8015c0e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	0018      	movs	r0, r3
 8015c14:	f009 ff4a 	bl	801faac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	4a72      	ldr	r2, [pc, #456]	@ (8015de4 <HAL_PCD_Init+0x1fc>)
 8015c1c:	2103      	movs	r1, #3
 8015c1e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	0018      	movs	r0, r3
 8015c26:	f005 fefd 	bl	801ba24 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015c2a:	230f      	movs	r3, #15
 8015c2c:	18fb      	adds	r3, r7, r3
 8015c2e:	2200      	movs	r2, #0
 8015c30:	701a      	strb	r2, [r3, #0]
 8015c32:	e049      	b.n	8015cc8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8015c34:	200f      	movs	r0, #15
 8015c36:	183b      	adds	r3, r7, r0
 8015c38:	781b      	ldrb	r3, [r3, #0]
 8015c3a:	6879      	ldr	r1, [r7, #4]
 8015c3c:	1c5a      	adds	r2, r3, #1
 8015c3e:	0013      	movs	r3, r2
 8015c40:	009b      	lsls	r3, r3, #2
 8015c42:	189b      	adds	r3, r3, r2
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	18cb      	adds	r3, r1, r3
 8015c48:	3301      	adds	r3, #1
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8015c4e:	183b      	adds	r3, r7, r0
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	6879      	ldr	r1, [r7, #4]
 8015c54:	1c5a      	adds	r2, r3, #1
 8015c56:	0013      	movs	r3, r2
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	189b      	adds	r3, r3, r2
 8015c5c:	00db      	lsls	r3, r3, #3
 8015c5e:	183a      	adds	r2, r7, r0
 8015c60:	7812      	ldrb	r2, [r2, #0]
 8015c62:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8015c64:	183b      	adds	r3, r7, r0
 8015c66:	781b      	ldrb	r3, [r3, #0]
 8015c68:	6879      	ldr	r1, [r7, #4]
 8015c6a:	1c5a      	adds	r2, r3, #1
 8015c6c:	0013      	movs	r3, r2
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	189b      	adds	r3, r3, r2
 8015c72:	00db      	lsls	r3, r3, #3
 8015c74:	18cb      	adds	r3, r1, r3
 8015c76:	3303      	adds	r3, #3
 8015c78:	2200      	movs	r2, #0
 8015c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8015c7c:	183b      	adds	r3, r7, r0
 8015c7e:	781a      	ldrb	r2, [r3, #0]
 8015c80:	6879      	ldr	r1, [r7, #4]
 8015c82:	0013      	movs	r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	189b      	adds	r3, r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	18cb      	adds	r3, r1, r3
 8015c8c:	3338      	adds	r3, #56	@ 0x38
 8015c8e:	2200      	movs	r2, #0
 8015c90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8015c92:	183b      	adds	r3, r7, r0
 8015c94:	781a      	ldrb	r2, [r3, #0]
 8015c96:	6879      	ldr	r1, [r7, #4]
 8015c98:	0013      	movs	r3, r2
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	189b      	adds	r3, r3, r2
 8015c9e:	00db      	lsls	r3, r3, #3
 8015ca0:	18cb      	adds	r3, r1, r3
 8015ca2:	333c      	adds	r3, #60	@ 0x3c
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8015ca8:	183b      	adds	r3, r7, r0
 8015caa:	781a      	ldrb	r2, [r3, #0]
 8015cac:	6879      	ldr	r1, [r7, #4]
 8015cae:	0013      	movs	r3, r2
 8015cb0:	009b      	lsls	r3, r3, #2
 8015cb2:	189b      	adds	r3, r3, r2
 8015cb4:	00db      	lsls	r3, r3, #3
 8015cb6:	18cb      	adds	r3, r1, r3
 8015cb8:	3340      	adds	r3, #64	@ 0x40
 8015cba:	2200      	movs	r2, #0
 8015cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015cbe:	183b      	adds	r3, r7, r0
 8015cc0:	781a      	ldrb	r2, [r3, #0]
 8015cc2:	183b      	adds	r3, r7, r0
 8015cc4:	3201      	adds	r2, #1
 8015cc6:	701a      	strb	r2, [r3, #0]
 8015cc8:	210f      	movs	r1, #15
 8015cca:	187b      	adds	r3, r7, r1
 8015ccc:	781a      	ldrb	r2, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d3ae      	bcc.n	8015c34 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015cd6:	187b      	adds	r3, r7, r1
 8015cd8:	2200      	movs	r2, #0
 8015cda:	701a      	strb	r2, [r3, #0]
 8015cdc:	e056      	b.n	8015d8c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8015cde:	240f      	movs	r4, #15
 8015ce0:	193b      	adds	r3, r7, r4
 8015ce2:	781a      	ldrb	r2, [r3, #0]
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	236a      	movs	r3, #106	@ 0x6a
 8015ce8:	33ff      	adds	r3, #255	@ 0xff
 8015cea:	0019      	movs	r1, r3
 8015cec:	0013      	movs	r3, r2
 8015cee:	009b      	lsls	r3, r3, #2
 8015cf0:	189b      	adds	r3, r3, r2
 8015cf2:	00db      	lsls	r3, r3, #3
 8015cf4:	18c3      	adds	r3, r0, r3
 8015cf6:	185b      	adds	r3, r3, r1
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8015cfc:	193b      	adds	r3, r7, r4
 8015cfe:	781a      	ldrb	r2, [r3, #0]
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	23b4      	movs	r3, #180	@ 0xb4
 8015d04:	0059      	lsls	r1, r3, #1
 8015d06:	0013      	movs	r3, r2
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	189b      	adds	r3, r3, r2
 8015d0c:	00db      	lsls	r3, r3, #3
 8015d0e:	18c3      	adds	r3, r0, r3
 8015d10:	185b      	adds	r3, r3, r1
 8015d12:	193a      	adds	r2, r7, r4
 8015d14:	7812      	ldrb	r2, [r2, #0]
 8015d16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8015d18:	193b      	adds	r3, r7, r4
 8015d1a:	781a      	ldrb	r2, [r3, #0]
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	236c      	movs	r3, #108	@ 0x6c
 8015d20:	33ff      	adds	r3, #255	@ 0xff
 8015d22:	0019      	movs	r1, r3
 8015d24:	0013      	movs	r3, r2
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	189b      	adds	r3, r3, r2
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	18c3      	adds	r3, r0, r3
 8015d2e:	185b      	adds	r3, r3, r1
 8015d30:	2200      	movs	r2, #0
 8015d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8015d34:	193b      	adds	r3, r7, r4
 8015d36:	781a      	ldrb	r2, [r3, #0]
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	23bc      	movs	r3, #188	@ 0xbc
 8015d3c:	0059      	lsls	r1, r3, #1
 8015d3e:	0013      	movs	r3, r2
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	189b      	adds	r3, r3, r2
 8015d44:	00db      	lsls	r3, r3, #3
 8015d46:	18c3      	adds	r3, r0, r3
 8015d48:	185b      	adds	r3, r3, r1
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8015d4e:	193b      	adds	r3, r7, r4
 8015d50:	781a      	ldrb	r2, [r3, #0]
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	23be      	movs	r3, #190	@ 0xbe
 8015d56:	0059      	lsls	r1, r3, #1
 8015d58:	0013      	movs	r3, r2
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	189b      	adds	r3, r3, r2
 8015d5e:	00db      	lsls	r3, r3, #3
 8015d60:	18c3      	adds	r3, r0, r3
 8015d62:	185b      	adds	r3, r3, r1
 8015d64:	2200      	movs	r2, #0
 8015d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8015d68:	193b      	adds	r3, r7, r4
 8015d6a:	781a      	ldrb	r2, [r3, #0]
 8015d6c:	6878      	ldr	r0, [r7, #4]
 8015d6e:	23c0      	movs	r3, #192	@ 0xc0
 8015d70:	0059      	lsls	r1, r3, #1
 8015d72:	0013      	movs	r3, r2
 8015d74:	009b      	lsls	r3, r3, #2
 8015d76:	189b      	adds	r3, r3, r2
 8015d78:	00db      	lsls	r3, r3, #3
 8015d7a:	18c3      	adds	r3, r0, r3
 8015d7c:	185b      	adds	r3, r3, r1
 8015d7e:	2200      	movs	r2, #0
 8015d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8015d82:	193b      	adds	r3, r7, r4
 8015d84:	781a      	ldrb	r2, [r3, #0]
 8015d86:	193b      	adds	r3, r7, r4
 8015d88:	3201      	adds	r2, #1
 8015d8a:	701a      	strb	r2, [r3, #0]
 8015d8c:	230f      	movs	r3, #15
 8015d8e:	18fb      	adds	r3, r7, r3
 8015d90:	781a      	ldrb	r2, [r3, #0]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d3a1      	bcc.n	8015cde <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6818      	ldr	r0, [r3, #0]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	466a      	mov	r2, sp
 8015da2:	0011      	movs	r1, r2
 8015da4:	001a      	movs	r2, r3
 8015da6:	3210      	adds	r2, #16
 8015da8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8015daa:	c170      	stmia	r1!, {r4, r5, r6}
 8015dac:	ca30      	ldmia	r2!, {r4, r5}
 8015dae:	c130      	stmia	r1!, {r4, r5}
 8015db0:	6859      	ldr	r1, [r3, #4]
 8015db2:	689a      	ldr	r2, [r3, #8]
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	f005 fe4f 	bl	801ba58 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2224      	movs	r2, #36	@ 0x24
 8015dbe:	2100      	movs	r1, #0
 8015dc0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	4a07      	ldr	r2, [pc, #28]	@ (8015de4 <HAL_PCD_Init+0x1fc>)
 8015dc6:	2101      	movs	r1, #1
 8015dc8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	69db      	ldr	r3, [r3, #28]
 8015dce:	2b01      	cmp	r3, #1
 8015dd0:	d103      	bne.n	8015dda <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	0018      	movs	r0, r3
 8015dd6:	f001 fd23 	bl	8017820 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8015dda:	2300      	movs	r3, #0
}
 8015ddc:	0018      	movs	r0, r3
 8015dde:	46bd      	mov	sp, r7
 8015de0:	b005      	add	sp, #20
 8015de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015de4:	000002a9 	.word	0x000002a9

08015de8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b082      	sub	sp, #8
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8015df0:	687a      	ldr	r2, [r7, #4]
 8015df2:	23aa      	movs	r3, #170	@ 0xaa
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	5cd3      	ldrb	r3, [r2, r3]
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d101      	bne.n	8015e00 <HAL_PCD_Start+0x18>
 8015dfc:	2302      	movs	r3, #2
 8015dfe:	e014      	b.n	8015e2a <HAL_PCD_Start+0x42>
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	23aa      	movs	r3, #170	@ 0xaa
 8015e04:	009b      	lsls	r3, r3, #2
 8015e06:	2101      	movs	r1, #1
 8015e08:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	0018      	movs	r0, r3
 8015e10:	f005 fdf2 	bl	801b9f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	0018      	movs	r0, r3
 8015e1a:	f007 fdf5 	bl	801da08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8015e1e:	687a      	ldr	r2, [r7, #4]
 8015e20:	23aa      	movs	r3, #170	@ 0xaa
 8015e22:	009b      	lsls	r3, r3, #2
 8015e24:	2100      	movs	r1, #0
 8015e26:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8015e28:	2300      	movs	r3, #0
}
 8015e2a:	0018      	movs	r0, r3
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	b002      	add	sp, #8
 8015e30:	bd80      	pop	{r7, pc}
	...

08015e34 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b084      	sub	sp, #16
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	0018      	movs	r0, r3
 8015e42:	f007 fdf7 	bl	801da34 <USB_ReadInterrupts>
 8015e46:	0003      	movs	r3, r0
 8015e48:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8015e4a:	68fa      	ldr	r2, [r7, #12]
 8015e4c:	2380      	movs	r3, #128	@ 0x80
 8015e4e:	021b      	lsls	r3, r3, #8
 8015e50:	4013      	ands	r3, r2
 8015e52:	d004      	beq.n	8015e5e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	0018      	movs	r0, r3
 8015e58:	f000 fb62 	bl	8016520 <PCD_EP_ISR_Handler>

    return;
 8015e5c:	e11d      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8015e5e:	68fa      	ldr	r2, [r7, #12]
 8015e60:	2380      	movs	r3, #128	@ 0x80
 8015e62:	00db      	lsls	r3, r3, #3
 8015e64:	4013      	ands	r3, r2
 8015e66:	d015      	beq.n	8015e94 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	2244      	movs	r2, #68	@ 0x44
 8015e6e:	5a9b      	ldrh	r3, [r3, r2]
 8015e70:	b29a      	uxth	r2, r3
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	498a      	ldr	r1, [pc, #552]	@ (80160a0 <HAL_PCD_IRQHandler+0x26c>)
 8015e78:	400a      	ands	r2, r1
 8015e7a:	b291      	uxth	r1, r2
 8015e7c:	2244      	movs	r2, #68	@ 0x44
 8015e7e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	0018      	movs	r0, r3
 8015e84:	f009 fe95 	bl	801fbb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2100      	movs	r1, #0
 8015e8c:	0018      	movs	r0, r3
 8015e8e:	f000 f915 	bl	80160bc <HAL_PCD_SetAddress>

    return;
 8015e92:	e102      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8015e94:	68fa      	ldr	r2, [r7, #12]
 8015e96:	2380      	movs	r3, #128	@ 0x80
 8015e98:	01db      	lsls	r3, r3, #7
 8015e9a:	4013      	ands	r3, r2
 8015e9c:	d00c      	beq.n	8015eb8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	2244      	movs	r2, #68	@ 0x44
 8015ea4:	5a9b      	ldrh	r3, [r3, r2]
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	497d      	ldr	r1, [pc, #500]	@ (80160a4 <HAL_PCD_IRQHandler+0x270>)
 8015eae:	400a      	ands	r2, r1
 8015eb0:	b291      	uxth	r1, r2
 8015eb2:	2244      	movs	r2, #68	@ 0x44
 8015eb4:	5299      	strh	r1, [r3, r2]

    return;
 8015eb6:	e0f0      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8015eb8:	68fa      	ldr	r2, [r7, #12]
 8015eba:	2380      	movs	r3, #128	@ 0x80
 8015ebc:	019b      	lsls	r3, r3, #6
 8015ebe:	4013      	ands	r3, r2
 8015ec0:	d00c      	beq.n	8015edc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2244      	movs	r2, #68	@ 0x44
 8015ec8:	5a9b      	ldrh	r3, [r3, r2]
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4975      	ldr	r1, [pc, #468]	@ (80160a8 <HAL_PCD_IRQHandler+0x274>)
 8015ed2:	400a      	ands	r2, r1
 8015ed4:	b291      	uxth	r1, r2
 8015ed6:	2244      	movs	r2, #68	@ 0x44
 8015ed8:	5299      	strh	r1, [r3, r2]

    return;
 8015eda:	e0de      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8015edc:	68fa      	ldr	r2, [r7, #12]
 8015ede:	2380      	movs	r3, #128	@ 0x80
 8015ee0:	015b      	lsls	r3, r3, #5
 8015ee2:	4013      	ands	r3, r2
 8015ee4:	d038      	beq.n	8015f58 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2240      	movs	r2, #64	@ 0x40
 8015eec:	5a9b      	ldrh	r3, [r3, r2]
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	2104      	movs	r1, #4
 8015ef6:	438a      	bics	r2, r1
 8015ef8:	b291      	uxth	r1, r2
 8015efa:	2240      	movs	r2, #64	@ 0x40
 8015efc:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2240      	movs	r2, #64	@ 0x40
 8015f04:	5a9b      	ldrh	r3, [r3, r2]
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2108      	movs	r1, #8
 8015f0e:	438a      	bics	r2, r1
 8015f10:	b291      	uxth	r1, r2
 8015f12:	2240      	movs	r2, #64	@ 0x40
 8015f14:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8015f16:	687a      	ldr	r2, [r7, #4]
 8015f18:	23b8      	movs	r3, #184	@ 0xb8
 8015f1a:	009b      	lsls	r3, r3, #2
 8015f1c:	5cd3      	ldrb	r3, [r2, r3]
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d109      	bne.n	8015f36 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	23b8      	movs	r3, #184	@ 0xb8
 8015f26:	009b      	lsls	r3, r3, #2
 8015f28:	2100      	movs	r1, #0
 8015f2a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2100      	movs	r1, #0
 8015f30:	0018      	movs	r0, r3
 8015f32:	f001 fc9f 	bl	8017874 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	0018      	movs	r0, r3
 8015f3a:	f009 fe7b 	bl	801fc34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2244      	movs	r2, #68	@ 0x44
 8015f44:	5a9b      	ldrh	r3, [r3, r2]
 8015f46:	b29a      	uxth	r2, r3
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	4957      	ldr	r1, [pc, #348]	@ (80160ac <HAL_PCD_IRQHandler+0x278>)
 8015f4e:	400a      	ands	r2, r1
 8015f50:	b291      	uxth	r1, r2
 8015f52:	2244      	movs	r2, #68	@ 0x44
 8015f54:	5299      	strh	r1, [r3, r2]

    return;
 8015f56:	e0a0      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8015f58:	68fa      	ldr	r2, [r7, #12]
 8015f5a:	2380      	movs	r3, #128	@ 0x80
 8015f5c:	011b      	lsls	r3, r3, #4
 8015f5e:	4013      	ands	r3, r2
 8015f60:	d028      	beq.n	8015fb4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2240      	movs	r2, #64	@ 0x40
 8015f68:	5a9b      	ldrh	r3, [r3, r2]
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	2108      	movs	r1, #8
 8015f72:	430a      	orrs	r2, r1
 8015f74:	b291      	uxth	r1, r2
 8015f76:	2240      	movs	r2, #64	@ 0x40
 8015f78:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	2244      	movs	r2, #68	@ 0x44
 8015f80:	5a9b      	ldrh	r3, [r3, r2]
 8015f82:	b29a      	uxth	r2, r3
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4949      	ldr	r1, [pc, #292]	@ (80160b0 <HAL_PCD_IRQHandler+0x27c>)
 8015f8a:	400a      	ands	r2, r1
 8015f8c:	b291      	uxth	r1, r2
 8015f8e:	2244      	movs	r2, #68	@ 0x44
 8015f90:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	2240      	movs	r2, #64	@ 0x40
 8015f98:	5a9b      	ldrh	r3, [r3, r2]
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2104      	movs	r1, #4
 8015fa2:	430a      	orrs	r2, r1
 8015fa4:	b291      	uxth	r1, r2
 8015fa6:	2240      	movs	r2, #64	@ 0x40
 8015fa8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	0018      	movs	r0, r3
 8015fae:	f009 fe25 	bl	801fbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8015fb2:	e072      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	2280      	movs	r2, #128	@ 0x80
 8015fb8:	4013      	ands	r3, r2
 8015fba:	d046      	beq.n	801604a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	2244      	movs	r2, #68	@ 0x44
 8015fc2:	5a9b      	ldrh	r3, [r3, r2]
 8015fc4:	b29a      	uxth	r2, r3
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	2180      	movs	r1, #128	@ 0x80
 8015fcc:	438a      	bics	r2, r1
 8015fce:	b291      	uxth	r1, r2
 8015fd0:	2244      	movs	r2, #68	@ 0x44
 8015fd2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8015fd4:	687a      	ldr	r2, [r7, #4]
 8015fd6:	23b8      	movs	r3, #184	@ 0xb8
 8015fd8:	009b      	lsls	r3, r3, #2
 8015fda:	5cd3      	ldrb	r3, [r2, r3]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d12f      	bne.n	8016040 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2240      	movs	r2, #64	@ 0x40
 8015fe6:	5a9b      	ldrh	r3, [r3, r2]
 8015fe8:	b29a      	uxth	r2, r3
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	2104      	movs	r1, #4
 8015ff0:	430a      	orrs	r2, r1
 8015ff2:	b291      	uxth	r1, r2
 8015ff4:	2240      	movs	r2, #64	@ 0x40
 8015ff6:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	2240      	movs	r2, #64	@ 0x40
 8015ffe:	5a9b      	ldrh	r3, [r3, r2]
 8016000:	b29a      	uxth	r2, r3
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2108      	movs	r1, #8
 8016008:	430a      	orrs	r2, r1
 801600a:	b291      	uxth	r1, r2
 801600c:	2240      	movs	r2, #64	@ 0x40
 801600e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8016010:	687a      	ldr	r2, [r7, #4]
 8016012:	23b8      	movs	r3, #184	@ 0xb8
 8016014:	009b      	lsls	r3, r3, #2
 8016016:	2101      	movs	r1, #1
 8016018:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	2254      	movs	r2, #84	@ 0x54
 8016020:	5a9b      	ldrh	r3, [r3, r2]
 8016022:	b29b      	uxth	r3, r3
 8016024:	089b      	lsrs	r3, r3, #2
 8016026:	223c      	movs	r2, #60	@ 0x3c
 8016028:	4013      	ands	r3, r2
 801602a:	0019      	movs	r1, r3
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	23b9      	movs	r3, #185	@ 0xb9
 8016030:	009b      	lsls	r3, r3, #2
 8016032:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2101      	movs	r1, #1
 8016038:	0018      	movs	r0, r3
 801603a:	f001 fc1b 	bl	8017874 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801603e:	e02c      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	0018      	movs	r0, r3
 8016044:	f009 fdda 	bl	801fbfc <HAL_PCD_SuspendCallback>
    return;
 8016048:	e027      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801604a:	68fa      	ldr	r2, [r7, #12]
 801604c:	2380      	movs	r3, #128	@ 0x80
 801604e:	009b      	lsls	r3, r3, #2
 8016050:	4013      	ands	r3, r2
 8016052:	d010      	beq.n	8016076 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2244      	movs	r2, #68	@ 0x44
 801605a:	5a9b      	ldrh	r3, [r3, r2]
 801605c:	b29a      	uxth	r2, r3
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	4914      	ldr	r1, [pc, #80]	@ (80160b4 <HAL_PCD_IRQHandler+0x280>)
 8016064:	400a      	ands	r2, r1
 8016066:	b291      	uxth	r1, r2
 8016068:	2244      	movs	r2, #68	@ 0x44
 801606a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	0018      	movs	r0, r3
 8016070:	f009 fd90 	bl	801fb94 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016074:	e011      	b.n	801609a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8016076:	68fa      	ldr	r2, [r7, #12]
 8016078:	2380      	movs	r3, #128	@ 0x80
 801607a:	005b      	lsls	r3, r3, #1
 801607c:	4013      	ands	r3, r2
 801607e:	d00c      	beq.n	801609a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2244      	movs	r2, #68	@ 0x44
 8016086:	5a9b      	ldrh	r3, [r3, r2]
 8016088:	b29a      	uxth	r2, r3
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	490a      	ldr	r1, [pc, #40]	@ (80160b8 <HAL_PCD_IRQHandler+0x284>)
 8016090:	400a      	ands	r2, r1
 8016092:	b291      	uxth	r1, r2
 8016094:	2244      	movs	r2, #68	@ 0x44
 8016096:	5299      	strh	r1, [r3, r2]

    return;
 8016098:	46c0      	nop			@ (mov r8, r8)
  }
}
 801609a:	46bd      	mov	sp, r7
 801609c:	b004      	add	sp, #16
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	fffffbff 	.word	0xfffffbff
 80160a4:	ffffbfff 	.word	0xffffbfff
 80160a8:	ffffdfff 	.word	0xffffdfff
 80160ac:	ffffefff 	.word	0xffffefff
 80160b0:	fffff7ff 	.word	0xfffff7ff
 80160b4:	fffffdff 	.word	0xfffffdff
 80160b8:	fffffeff 	.word	0xfffffeff

080160bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	000a      	movs	r2, r1
 80160c6:	1cfb      	adds	r3, r7, #3
 80160c8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80160ca:	687a      	ldr	r2, [r7, #4]
 80160cc:	23aa      	movs	r3, #170	@ 0xaa
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	5cd3      	ldrb	r3, [r2, r3]
 80160d2:	2b01      	cmp	r3, #1
 80160d4:	d101      	bne.n	80160da <HAL_PCD_SetAddress+0x1e>
 80160d6:	2302      	movs	r3, #2
 80160d8:	e017      	b.n	801610a <HAL_PCD_SetAddress+0x4e>
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	23aa      	movs	r3, #170	@ 0xaa
 80160de:	009b      	lsls	r3, r3, #2
 80160e0:	2101      	movs	r1, #1
 80160e2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	1cfa      	adds	r2, r7, #3
 80160e8:	2124      	movs	r1, #36	@ 0x24
 80160ea:	7812      	ldrb	r2, [r2, #0]
 80160ec:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681a      	ldr	r2, [r3, #0]
 80160f2:	1cfb      	adds	r3, r7, #3
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	0019      	movs	r1, r3
 80160f8:	0010      	movs	r0, r2
 80160fa:	f007 fc71 	bl	801d9e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80160fe:	687a      	ldr	r2, [r7, #4]
 8016100:	23aa      	movs	r3, #170	@ 0xaa
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	2100      	movs	r1, #0
 8016106:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016108:	2300      	movs	r3, #0
}
 801610a:	0018      	movs	r0, r3
 801610c:	46bd      	mov	sp, r7
 801610e:	b002      	add	sp, #8
 8016110:	bd80      	pop	{r7, pc}

08016112 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8016112:	b590      	push	{r4, r7, lr}
 8016114:	b085      	sub	sp, #20
 8016116:	af00      	add	r7, sp, #0
 8016118:	6078      	str	r0, [r7, #4]
 801611a:	000c      	movs	r4, r1
 801611c:	0010      	movs	r0, r2
 801611e:	0019      	movs	r1, r3
 8016120:	1cfb      	adds	r3, r7, #3
 8016122:	1c22      	adds	r2, r4, #0
 8016124:	701a      	strb	r2, [r3, #0]
 8016126:	003b      	movs	r3, r7
 8016128:	1c02      	adds	r2, r0, #0
 801612a:	801a      	strh	r2, [r3, #0]
 801612c:	1cbb      	adds	r3, r7, #2
 801612e:	1c0a      	adds	r2, r1, #0
 8016130:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8016132:	230b      	movs	r3, #11
 8016134:	18fb      	adds	r3, r7, r3
 8016136:	2200      	movs	r2, #0
 8016138:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801613a:	1cfb      	adds	r3, r7, #3
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	b25b      	sxtb	r3, r3
 8016140:	2b00      	cmp	r3, #0
 8016142:	da0f      	bge.n	8016164 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016144:	1cfb      	adds	r3, r7, #3
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	2207      	movs	r2, #7
 801614a:	4013      	ands	r3, r2
 801614c:	1c5a      	adds	r2, r3, #1
 801614e:	0013      	movs	r3, r2
 8016150:	009b      	lsls	r3, r3, #2
 8016152:	189b      	adds	r3, r3, r2
 8016154:	00db      	lsls	r3, r3, #3
 8016156:	687a      	ldr	r2, [r7, #4]
 8016158:	18d3      	adds	r3, r2, r3
 801615a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	2201      	movs	r2, #1
 8016160:	705a      	strb	r2, [r3, #1]
 8016162:	e00f      	b.n	8016184 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016164:	1cfb      	adds	r3, r7, #3
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	2207      	movs	r2, #7
 801616a:	401a      	ands	r2, r3
 801616c:	0013      	movs	r3, r2
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	189b      	adds	r3, r3, r2
 8016172:	00db      	lsls	r3, r3, #3
 8016174:	3369      	adds	r3, #105	@ 0x69
 8016176:	33ff      	adds	r3, #255	@ 0xff
 8016178:	687a      	ldr	r2, [r7, #4]
 801617a:	18d3      	adds	r3, r2, r3
 801617c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	2200      	movs	r2, #0
 8016182:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8016184:	1cfb      	adds	r3, r7, #3
 8016186:	781b      	ldrb	r3, [r3, #0]
 8016188:	2207      	movs	r2, #7
 801618a:	4013      	ands	r3, r2
 801618c:	b2da      	uxtb	r2, r3
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8016192:	003b      	movs	r3, r7
 8016194:	881a      	ldrh	r2, [r3, #0]
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	1cba      	adds	r2, r7, #2
 801619e:	7812      	ldrb	r2, [r2, #0]
 80161a0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80161a2:	1cbb      	adds	r3, r7, #2
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	2b02      	cmp	r3, #2
 80161a8:	d102      	bne.n	80161b0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	2200      	movs	r2, #0
 80161ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	23aa      	movs	r3, #170	@ 0xaa
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	5cd3      	ldrb	r3, [r2, r3]
 80161b8:	2b01      	cmp	r3, #1
 80161ba:	d101      	bne.n	80161c0 <HAL_PCD_EP_Open+0xae>
 80161bc:	2302      	movs	r3, #2
 80161be:	e013      	b.n	80161e8 <HAL_PCD_EP_Open+0xd6>
 80161c0:	687a      	ldr	r2, [r7, #4]
 80161c2:	23aa      	movs	r3, #170	@ 0xaa
 80161c4:	009b      	lsls	r3, r3, #2
 80161c6:	2101      	movs	r1, #1
 80161c8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	68fa      	ldr	r2, [r7, #12]
 80161d0:	0011      	movs	r1, r2
 80161d2:	0018      	movs	r0, r3
 80161d4:	f005 fc68 	bl	801baa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	23aa      	movs	r3, #170	@ 0xaa
 80161dc:	009b      	lsls	r3, r3, #2
 80161de:	2100      	movs	r1, #0
 80161e0:	54d1      	strb	r1, [r2, r3]

  return ret;
 80161e2:	230b      	movs	r3, #11
 80161e4:	18fb      	adds	r3, r7, r3
 80161e6:	781b      	ldrb	r3, [r3, #0]
}
 80161e8:	0018      	movs	r0, r3
 80161ea:	46bd      	mov	sp, r7
 80161ec:	b005      	add	sp, #20
 80161ee:	bd90      	pop	{r4, r7, pc}

080161f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b084      	sub	sp, #16
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	000a      	movs	r2, r1
 80161fa:	1cfb      	adds	r3, r7, #3
 80161fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80161fe:	1cfb      	adds	r3, r7, #3
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	b25b      	sxtb	r3, r3
 8016204:	2b00      	cmp	r3, #0
 8016206:	da0f      	bge.n	8016228 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016208:	1cfb      	adds	r3, r7, #3
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	2207      	movs	r2, #7
 801620e:	4013      	ands	r3, r2
 8016210:	1c5a      	adds	r2, r3, #1
 8016212:	0013      	movs	r3, r2
 8016214:	009b      	lsls	r3, r3, #2
 8016216:	189b      	adds	r3, r3, r2
 8016218:	00db      	lsls	r3, r3, #3
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	18d3      	adds	r3, r2, r3
 801621e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2201      	movs	r2, #1
 8016224:	705a      	strb	r2, [r3, #1]
 8016226:	e00f      	b.n	8016248 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8016228:	1cfb      	adds	r3, r7, #3
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	2207      	movs	r2, #7
 801622e:	401a      	ands	r2, r3
 8016230:	0013      	movs	r3, r2
 8016232:	009b      	lsls	r3, r3, #2
 8016234:	189b      	adds	r3, r3, r2
 8016236:	00db      	lsls	r3, r3, #3
 8016238:	3369      	adds	r3, #105	@ 0x69
 801623a:	33ff      	adds	r3, #255	@ 0xff
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	18d3      	adds	r3, r2, r3
 8016240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	2200      	movs	r2, #0
 8016246:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8016248:	1cfb      	adds	r3, r7, #3
 801624a:	781b      	ldrb	r3, [r3, #0]
 801624c:	2207      	movs	r2, #7
 801624e:	4013      	ands	r3, r2
 8016250:	b2da      	uxtb	r2, r3
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016256:	687a      	ldr	r2, [r7, #4]
 8016258:	23aa      	movs	r3, #170	@ 0xaa
 801625a:	009b      	lsls	r3, r3, #2
 801625c:	5cd3      	ldrb	r3, [r2, r3]
 801625e:	2b01      	cmp	r3, #1
 8016260:	d101      	bne.n	8016266 <HAL_PCD_EP_Close+0x76>
 8016262:	2302      	movs	r3, #2
 8016264:	e011      	b.n	801628a <HAL_PCD_EP_Close+0x9a>
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	23aa      	movs	r3, #170	@ 0xaa
 801626a:	009b      	lsls	r3, r3, #2
 801626c:	2101      	movs	r1, #1
 801626e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	68fa      	ldr	r2, [r7, #12]
 8016276:	0011      	movs	r1, r2
 8016278:	0018      	movs	r0, r3
 801627a:	f005 ffb7 	bl	801c1ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	23aa      	movs	r3, #170	@ 0xaa
 8016282:	009b      	lsls	r3, r3, #2
 8016284:	2100      	movs	r1, #0
 8016286:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8016288:	2300      	movs	r3, #0
}
 801628a:	0018      	movs	r0, r3
 801628c:	46bd      	mov	sp, r7
 801628e:	b004      	add	sp, #16
 8016290:	bd80      	pop	{r7, pc}

08016292 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016292:	b580      	push	{r7, lr}
 8016294:	b086      	sub	sp, #24
 8016296:	af00      	add	r7, sp, #0
 8016298:	60f8      	str	r0, [r7, #12]
 801629a:	607a      	str	r2, [r7, #4]
 801629c:	603b      	str	r3, [r7, #0]
 801629e:	200b      	movs	r0, #11
 80162a0:	183b      	adds	r3, r7, r0
 80162a2:	1c0a      	adds	r2, r1, #0
 80162a4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80162a6:	0001      	movs	r1, r0
 80162a8:	187b      	adds	r3, r7, r1
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	2207      	movs	r2, #7
 80162ae:	401a      	ands	r2, r3
 80162b0:	0013      	movs	r3, r2
 80162b2:	009b      	lsls	r3, r3, #2
 80162b4:	189b      	adds	r3, r3, r2
 80162b6:	00db      	lsls	r3, r3, #3
 80162b8:	3369      	adds	r3, #105	@ 0x69
 80162ba:	33ff      	adds	r3, #255	@ 0xff
 80162bc:	68fa      	ldr	r2, [r7, #12]
 80162be:	18d3      	adds	r3, r2, r3
 80162c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80162c2:	697b      	ldr	r3, [r7, #20]
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80162c8:	697b      	ldr	r3, [r7, #20]
 80162ca:	683a      	ldr	r2, [r7, #0]
 80162cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	2200      	movs	r2, #0
 80162d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80162d4:	697b      	ldr	r3, [r7, #20]
 80162d6:	2200      	movs	r2, #0
 80162d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80162da:	187b      	adds	r3, r7, r1
 80162dc:	781b      	ldrb	r3, [r3, #0]
 80162de:	2207      	movs	r2, #7
 80162e0:	4013      	ands	r3, r2
 80162e2:	b2da      	uxtb	r2, r3
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	697a      	ldr	r2, [r7, #20]
 80162ee:	0011      	movs	r1, r2
 80162f0:	0018      	movs	r0, r3
 80162f2:	f006 f93b 	bl	801c56c <USB_EPStartXfer>

  return HAL_OK;
 80162f6:	2300      	movs	r3, #0
}
 80162f8:	0018      	movs	r0, r3
 80162fa:	46bd      	mov	sp, r7
 80162fc:	b006      	add	sp, #24
 80162fe:	bd80      	pop	{r7, pc}

08016300 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	000a      	movs	r2, r1
 801630a:	1cfb      	adds	r3, r7, #3
 801630c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801630e:	1cfb      	adds	r3, r7, #3
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	2207      	movs	r2, #7
 8016314:	401a      	ands	r2, r3
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	23c2      	movs	r3, #194	@ 0xc2
 801631a:	0059      	lsls	r1, r3, #1
 801631c:	0013      	movs	r3, r2
 801631e:	009b      	lsls	r3, r3, #2
 8016320:	189b      	adds	r3, r3, r2
 8016322:	00db      	lsls	r3, r3, #3
 8016324:	18c3      	adds	r3, r0, r3
 8016326:	185b      	adds	r3, r3, r1
 8016328:	681b      	ldr	r3, [r3, #0]
}
 801632a:	0018      	movs	r0, r3
 801632c:	46bd      	mov	sp, r7
 801632e:	b002      	add	sp, #8
 8016330:	bd80      	pop	{r7, pc}

08016332 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8016332:	b580      	push	{r7, lr}
 8016334:	b086      	sub	sp, #24
 8016336:	af00      	add	r7, sp, #0
 8016338:	60f8      	str	r0, [r7, #12]
 801633a:	607a      	str	r2, [r7, #4]
 801633c:	603b      	str	r3, [r7, #0]
 801633e:	200b      	movs	r0, #11
 8016340:	183b      	adds	r3, r7, r0
 8016342:	1c0a      	adds	r2, r1, #0
 8016344:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8016346:	183b      	adds	r3, r7, r0
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2207      	movs	r2, #7
 801634c:	4013      	ands	r3, r2
 801634e:	1c5a      	adds	r2, r3, #1
 8016350:	0013      	movs	r3, r2
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	189b      	adds	r3, r3, r2
 8016356:	00db      	lsls	r3, r3, #3
 8016358:	68fa      	ldr	r2, [r7, #12]
 801635a:	18d3      	adds	r3, r2, r3
 801635c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	687a      	ldr	r2, [r7, #4]
 8016362:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	683a      	ldr	r2, [r7, #0]
 8016368:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	2224      	movs	r2, #36	@ 0x24
 801636e:	2101      	movs	r1, #1
 8016370:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	683a      	ldr	r2, [r7, #0]
 8016376:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	2200      	movs	r2, #0
 801637c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	2201      	movs	r2, #1
 8016382:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016384:	183b      	adds	r3, r7, r0
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	2207      	movs	r2, #7
 801638a:	4013      	ands	r3, r2
 801638c:	b2da      	uxtb	r2, r3
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	697a      	ldr	r2, [r7, #20]
 8016398:	0011      	movs	r1, r2
 801639a:	0018      	movs	r0, r3
 801639c:	f006 f8e6 	bl	801c56c <USB_EPStartXfer>

  return HAL_OK;
 80163a0:	2300      	movs	r3, #0
}
 80163a2:	0018      	movs	r0, r3
 80163a4:	46bd      	mov	sp, r7
 80163a6:	b006      	add	sp, #24
 80163a8:	bd80      	pop	{r7, pc}

080163aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80163aa:	b580      	push	{r7, lr}
 80163ac:	b084      	sub	sp, #16
 80163ae:	af00      	add	r7, sp, #0
 80163b0:	6078      	str	r0, [r7, #4]
 80163b2:	000a      	movs	r2, r1
 80163b4:	1cfb      	adds	r3, r7, #3
 80163b6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80163b8:	1cfb      	adds	r3, r7, #3
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	2207      	movs	r2, #7
 80163be:	401a      	ands	r2, r3
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d901      	bls.n	80163cc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80163c8:	2301      	movs	r3, #1
 80163ca:	e046      	b.n	801645a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80163cc:	1cfb      	adds	r3, r7, #3
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	b25b      	sxtb	r3, r3
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	da0f      	bge.n	80163f6 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80163d6:	1cfb      	adds	r3, r7, #3
 80163d8:	781b      	ldrb	r3, [r3, #0]
 80163da:	2207      	movs	r2, #7
 80163dc:	4013      	ands	r3, r2
 80163de:	1c5a      	adds	r2, r3, #1
 80163e0:	0013      	movs	r3, r2
 80163e2:	009b      	lsls	r3, r3, #2
 80163e4:	189b      	adds	r3, r3, r2
 80163e6:	00db      	lsls	r3, r3, #3
 80163e8:	687a      	ldr	r2, [r7, #4]
 80163ea:	18d3      	adds	r3, r2, r3
 80163ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2201      	movs	r2, #1
 80163f2:	705a      	strb	r2, [r3, #1]
 80163f4:	e00d      	b.n	8016412 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80163f6:	1cfb      	adds	r3, r7, #3
 80163f8:	781a      	ldrb	r2, [r3, #0]
 80163fa:	0013      	movs	r3, r2
 80163fc:	009b      	lsls	r3, r3, #2
 80163fe:	189b      	adds	r3, r3, r2
 8016400:	00db      	lsls	r3, r3, #3
 8016402:	3369      	adds	r3, #105	@ 0x69
 8016404:	33ff      	adds	r3, #255	@ 0xff
 8016406:	687a      	ldr	r2, [r7, #4]
 8016408:	18d3      	adds	r3, r2, r3
 801640a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2200      	movs	r2, #0
 8016410:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	2201      	movs	r2, #1
 8016416:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8016418:	1cfb      	adds	r3, r7, #3
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	2207      	movs	r2, #7
 801641e:	4013      	ands	r3, r2
 8016420:	b2da      	uxtb	r2, r3
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8016426:	687a      	ldr	r2, [r7, #4]
 8016428:	23aa      	movs	r3, #170	@ 0xaa
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	5cd3      	ldrb	r3, [r2, r3]
 801642e:	2b01      	cmp	r3, #1
 8016430:	d101      	bne.n	8016436 <HAL_PCD_EP_SetStall+0x8c>
 8016432:	2302      	movs	r3, #2
 8016434:	e011      	b.n	801645a <HAL_PCD_EP_SetStall+0xb0>
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	23aa      	movs	r3, #170	@ 0xaa
 801643a:	009b      	lsls	r3, r3, #2
 801643c:	2101      	movs	r1, #1
 801643e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	68fa      	ldr	r2, [r7, #12]
 8016446:	0011      	movs	r1, r2
 8016448:	0018      	movs	r0, r3
 801644a:	f007 f9c7 	bl	801d7dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	23aa      	movs	r3, #170	@ 0xaa
 8016452:	009b      	lsls	r3, r3, #2
 8016454:	2100      	movs	r1, #0
 8016456:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016458:	2300      	movs	r3, #0
}
 801645a:	0018      	movs	r0, r3
 801645c:	46bd      	mov	sp, r7
 801645e:	b004      	add	sp, #16
 8016460:	bd80      	pop	{r7, pc}

08016462 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8016462:	b580      	push	{r7, lr}
 8016464:	b084      	sub	sp, #16
 8016466:	af00      	add	r7, sp, #0
 8016468:	6078      	str	r0, [r7, #4]
 801646a:	000a      	movs	r2, r1
 801646c:	1cfb      	adds	r3, r7, #3
 801646e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8016470:	1cfb      	adds	r3, r7, #3
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	220f      	movs	r2, #15
 8016476:	401a      	ands	r2, r3
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	429a      	cmp	r2, r3
 801647e:	d901      	bls.n	8016484 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8016480:	2301      	movs	r3, #1
 8016482:	e048      	b.n	8016516 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8016484:	1cfb      	adds	r3, r7, #3
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	b25b      	sxtb	r3, r3
 801648a:	2b00      	cmp	r3, #0
 801648c:	da0f      	bge.n	80164ae <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801648e:	1cfb      	adds	r3, r7, #3
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	2207      	movs	r2, #7
 8016494:	4013      	ands	r3, r2
 8016496:	1c5a      	adds	r2, r3, #1
 8016498:	0013      	movs	r3, r2
 801649a:	009b      	lsls	r3, r3, #2
 801649c:	189b      	adds	r3, r3, r2
 801649e:	00db      	lsls	r3, r3, #3
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	18d3      	adds	r3, r2, r3
 80164a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	2201      	movs	r2, #1
 80164aa:	705a      	strb	r2, [r3, #1]
 80164ac:	e00f      	b.n	80164ce <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80164ae:	1cfb      	adds	r3, r7, #3
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	2207      	movs	r2, #7
 80164b4:	401a      	ands	r2, r3
 80164b6:	0013      	movs	r3, r2
 80164b8:	009b      	lsls	r3, r3, #2
 80164ba:	189b      	adds	r3, r3, r2
 80164bc:	00db      	lsls	r3, r3, #3
 80164be:	3369      	adds	r3, #105	@ 0x69
 80164c0:	33ff      	adds	r3, #255	@ 0xff
 80164c2:	687a      	ldr	r2, [r7, #4]
 80164c4:	18d3      	adds	r3, r2, r3
 80164c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	2200      	movs	r2, #0
 80164cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	2200      	movs	r2, #0
 80164d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80164d4:	1cfb      	adds	r3, r7, #3
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	2207      	movs	r2, #7
 80164da:	4013      	ands	r3, r2
 80164dc:	b2da      	uxtb	r2, r3
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	23aa      	movs	r3, #170	@ 0xaa
 80164e6:	009b      	lsls	r3, r3, #2
 80164e8:	5cd3      	ldrb	r3, [r2, r3]
 80164ea:	2b01      	cmp	r3, #1
 80164ec:	d101      	bne.n	80164f2 <HAL_PCD_EP_ClrStall+0x90>
 80164ee:	2302      	movs	r3, #2
 80164f0:	e011      	b.n	8016516 <HAL_PCD_EP_ClrStall+0xb4>
 80164f2:	687a      	ldr	r2, [r7, #4]
 80164f4:	23aa      	movs	r3, #170	@ 0xaa
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	2101      	movs	r1, #1
 80164fa:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	68fa      	ldr	r2, [r7, #12]
 8016502:	0011      	movs	r1, r2
 8016504:	0018      	movs	r0, r3
 8016506:	f007 f9b9 	bl	801d87c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	23aa      	movs	r3, #170	@ 0xaa
 801650e:	009b      	lsls	r3, r3, #2
 8016510:	2100      	movs	r1, #0
 8016512:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016514:	2300      	movs	r3, #0
}
 8016516:	0018      	movs	r0, r3
 8016518:	46bd      	mov	sp, r7
 801651a:	b004      	add	sp, #16
 801651c:	bd80      	pop	{r7, pc}
	...

08016520 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8016520:	b5b0      	push	{r4, r5, r7, lr}
 8016522:	b096      	sub	sp, #88	@ 0x58
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8016528:	f000 fbec 	bl	8016d04 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681a      	ldr	r2, [r3, #0]
 8016530:	204e      	movs	r0, #78	@ 0x4e
 8016532:	183b      	adds	r3, r7, r0
 8016534:	2144      	movs	r1, #68	@ 0x44
 8016536:	5a52      	ldrh	r2, [r2, r1]
 8016538:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801653a:	183b      	adds	r3, r7, r0
 801653c:	881b      	ldrh	r3, [r3, #0]
 801653e:	b2da      	uxtb	r2, r3
 8016540:	244d      	movs	r4, #77	@ 0x4d
 8016542:	193b      	adds	r3, r7, r4
 8016544:	210f      	movs	r1, #15
 8016546:	400a      	ands	r2, r1
 8016548:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801654a:	193b      	adds	r3, r7, r4
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d000      	beq.n	8016554 <PCD_EP_ISR_Handler+0x34>
 8016552:	e18f      	b.n	8016874 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8016554:	183b      	adds	r3, r7, r0
 8016556:	881b      	ldrh	r3, [r3, #0]
 8016558:	2210      	movs	r2, #16
 801655a:	4013      	ands	r3, r2
 801655c:	d155      	bne.n	801660a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	881b      	ldrh	r3, [r3, #0]
 8016564:	b29a      	uxth	r2, r3
 8016566:	200e      	movs	r0, #14
 8016568:	183b      	adds	r3, r7, r0
 801656a:	49bb      	ldr	r1, [pc, #748]	@ (8016858 <PCD_EP_ISR_Handler+0x338>)
 801656c:	400a      	ands	r2, r1
 801656e:	801a      	strh	r2, [r3, #0]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	183a      	adds	r2, r7, r0
 8016576:	8812      	ldrh	r2, [r2, #0]
 8016578:	49b8      	ldr	r1, [pc, #736]	@ (801685c <PCD_EP_ISR_Handler+0x33c>)
 801657a:	430a      	orrs	r2, r1
 801657c:	b292      	uxth	r2, r2
 801657e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	3328      	adds	r3, #40	@ 0x28
 8016584:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2250      	movs	r2, #80	@ 0x50
 801658c:	5a9b      	ldrh	r3, [r3, r2]
 801658e:	b29b      	uxth	r3, r3
 8016590:	001a      	movs	r2, r3
 8016592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016594:	781b      	ldrb	r3, [r3, #0]
 8016596:	00db      	lsls	r3, r3, #3
 8016598:	18d2      	adds	r2, r2, r3
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	18d3      	adds	r3, r2, r3
 80165a0:	4aaf      	ldr	r2, [pc, #700]	@ (8016860 <PCD_EP_ISR_Handler+0x340>)
 80165a2:	4694      	mov	ip, r2
 80165a4:	4463      	add	r3, ip
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	059b      	lsls	r3, r3, #22
 80165aa:	0d9a      	lsrs	r2, r3, #22
 80165ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80165b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165b2:	695a      	ldr	r2, [r3, #20]
 80165b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165b6:	69db      	ldr	r3, [r3, #28]
 80165b8:	18d2      	adds	r2, r2, r3
 80165ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2100      	movs	r1, #0
 80165c2:	0018      	movs	r0, r3
 80165c4:	f009 fac8 	bl	801fb58 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2224      	movs	r2, #36	@ 0x24
 80165cc:	5c9b      	ldrb	r3, [r3, r2]
 80165ce:	b2db      	uxtb	r3, r3
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d101      	bne.n	80165d8 <PCD_EP_ISR_Handler+0xb8>
 80165d4:	f000 fb96 	bl	8016d04 <PCD_EP_ISR_Handler+0x7e4>
 80165d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165da:	699b      	ldr	r3, [r3, #24]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d001      	beq.n	80165e4 <PCD_EP_ISR_Handler+0xc4>
 80165e0:	f000 fb90 	bl	8016d04 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2224      	movs	r2, #36	@ 0x24
 80165e8:	5c9b      	ldrb	r3, [r3, r2]
 80165ea:	b2db      	uxtb	r3, r3
 80165ec:	2280      	movs	r2, #128	@ 0x80
 80165ee:	4252      	negs	r2, r2
 80165f0:	4313      	orrs	r3, r2
 80165f2:	b2da      	uxtb	r2, r3
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	0011      	movs	r1, r2
 80165fa:	224c      	movs	r2, #76	@ 0x4c
 80165fc:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	2224      	movs	r2, #36	@ 0x24
 8016602:	2100      	movs	r1, #0
 8016604:	5499      	strb	r1, [r3, r2]
 8016606:	f000 fb7d 	bl	8016d04 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	3369      	adds	r3, #105	@ 0x69
 801660e:	33ff      	adds	r3, #255	@ 0xff
 8016610:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	214a      	movs	r1, #74	@ 0x4a
 8016618:	187b      	adds	r3, r7, r1
 801661a:	8812      	ldrh	r2, [r2, #0]
 801661c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801661e:	187b      	adds	r3, r7, r1
 8016620:	881a      	ldrh	r2, [r3, #0]
 8016622:	2380      	movs	r3, #128	@ 0x80
 8016624:	011b      	lsls	r3, r3, #4
 8016626:	4013      	ands	r3, r2
 8016628:	d037      	beq.n	801669a <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2250      	movs	r2, #80	@ 0x50
 8016630:	5a9b      	ldrh	r3, [r3, r2]
 8016632:	b29b      	uxth	r3, r3
 8016634:	001a      	movs	r2, r3
 8016636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	00db      	lsls	r3, r3, #3
 801663c:	18d2      	adds	r2, r2, r3
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	18d3      	adds	r3, r2, r3
 8016644:	4a87      	ldr	r2, [pc, #540]	@ (8016864 <PCD_EP_ISR_Handler+0x344>)
 8016646:	4694      	mov	ip, r2
 8016648:	4463      	add	r3, ip
 801664a:	881b      	ldrh	r3, [r3, #0]
 801664c:	059b      	lsls	r3, r3, #22
 801664e:	0d9a      	lsrs	r2, r3, #22
 8016650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016652:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6818      	ldr	r0, [r3, #0]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	22ac      	movs	r2, #172	@ 0xac
 801665c:	0092      	lsls	r2, r2, #2
 801665e:	1899      	adds	r1, r3, r2
 8016660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016662:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8016664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016666:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8016668:	b29b      	uxth	r3, r3
 801666a:	f007 fa3a 	bl	801dae2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	881b      	ldrh	r3, [r3, #0]
 8016674:	b29a      	uxth	r2, r3
 8016676:	2010      	movs	r0, #16
 8016678:	183b      	adds	r3, r7, r0
 801667a:	497b      	ldr	r1, [pc, #492]	@ (8016868 <PCD_EP_ISR_Handler+0x348>)
 801667c:	400a      	ands	r2, r1
 801667e:	801a      	strh	r2, [r3, #0]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	183a      	adds	r2, r7, r0
 8016686:	8812      	ldrh	r2, [r2, #0]
 8016688:	2180      	movs	r1, #128	@ 0x80
 801668a:	430a      	orrs	r2, r1
 801668c:	b292      	uxth	r2, r2
 801668e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	0018      	movs	r0, r3
 8016694:	f009 fa2a 	bl	801faec <HAL_PCD_SetupStageCallback>
 8016698:	e334      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801669a:	234a      	movs	r3, #74	@ 0x4a
 801669c:	18fb      	adds	r3, r7, r3
 801669e:	2200      	movs	r2, #0
 80166a0:	5e9b      	ldrsh	r3, [r3, r2]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	db00      	blt.n	80166a8 <PCD_EP_ISR_Handler+0x188>
 80166a6:	e32d      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	881b      	ldrh	r3, [r3, #0]
 80166ae:	b29a      	uxth	r2, r3
 80166b0:	201e      	movs	r0, #30
 80166b2:	183b      	adds	r3, r7, r0
 80166b4:	496c      	ldr	r1, [pc, #432]	@ (8016868 <PCD_EP_ISR_Handler+0x348>)
 80166b6:	400a      	ands	r2, r1
 80166b8:	801a      	strh	r2, [r3, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	183a      	adds	r2, r7, r0
 80166c0:	8812      	ldrh	r2, [r2, #0]
 80166c2:	2180      	movs	r1, #128	@ 0x80
 80166c4:	430a      	orrs	r2, r1
 80166c6:	b292      	uxth	r2, r2
 80166c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2250      	movs	r2, #80	@ 0x50
 80166d0:	5a9b      	ldrh	r3, [r3, r2]
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	001a      	movs	r2, r3
 80166d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166d8:	781b      	ldrb	r3, [r3, #0]
 80166da:	00db      	lsls	r3, r3, #3
 80166dc:	18d2      	adds	r2, r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	18d3      	adds	r3, r2, r3
 80166e4:	4a5f      	ldr	r2, [pc, #380]	@ (8016864 <PCD_EP_ISR_Handler+0x344>)
 80166e6:	4694      	mov	ip, r2
 80166e8:	4463      	add	r3, ip
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	059b      	lsls	r3, r3, #22
 80166ee:	0d9a      	lsrs	r2, r3, #22
 80166f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80166f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166f6:	69db      	ldr	r3, [r3, #28]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d01a      	beq.n	8016732 <PCD_EP_ISR_Handler+0x212>
 80166fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80166fe:	695b      	ldr	r3, [r3, #20]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d016      	beq.n	8016732 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6818      	ldr	r0, [r3, #0]
 8016708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801670a:	6959      	ldr	r1, [r3, #20]
 801670c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801670e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8016710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016712:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8016714:	b29b      	uxth	r3, r3
 8016716:	f007 f9e4 	bl	801dae2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801671a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801671c:	695a      	ldr	r2, [r3, #20]
 801671e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016720:	69db      	ldr	r3, [r3, #28]
 8016722:	18d2      	adds	r2, r2, r3
 8016724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016726:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2100      	movs	r1, #0
 801672c:	0018      	movs	r0, r3
 801672e:	f009 f9f2 	bl	801fb16 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	214a      	movs	r1, #74	@ 0x4a
 8016738:	187b      	adds	r3, r7, r1
 801673a:	8812      	ldrh	r2, [r2, #0]
 801673c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801673e:	187b      	adds	r3, r7, r1
 8016740:	881a      	ldrh	r2, [r3, #0]
 8016742:	2380      	movs	r3, #128	@ 0x80
 8016744:	011b      	lsls	r3, r3, #4
 8016746:	4013      	ands	r3, r2
 8016748:	d000      	beq.n	801674c <PCD_EP_ISR_Handler+0x22c>
 801674a:	e2db      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
 801674c:	187b      	adds	r3, r7, r1
 801674e:	881a      	ldrh	r2, [r3, #0]
 8016750:	23c0      	movs	r3, #192	@ 0xc0
 8016752:	019b      	lsls	r3, r3, #6
 8016754:	401a      	ands	r2, r3
 8016756:	23c0      	movs	r3, #192	@ 0xc0
 8016758:	019b      	lsls	r3, r3, #6
 801675a:	429a      	cmp	r2, r3
 801675c:	d100      	bne.n	8016760 <PCD_EP_ISR_Handler+0x240>
 801675e:	e2d1      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	61bb      	str	r3, [r7, #24]
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2250      	movs	r2, #80	@ 0x50
 801676c:	5a9b      	ldrh	r3, [r3, r2]
 801676e:	b29b      	uxth	r3, r3
 8016770:	001a      	movs	r2, r3
 8016772:	69bb      	ldr	r3, [r7, #24]
 8016774:	189b      	adds	r3, r3, r2
 8016776:	61bb      	str	r3, [r7, #24]
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	4a3a      	ldr	r2, [pc, #232]	@ (8016864 <PCD_EP_ISR_Handler+0x344>)
 801677c:	4694      	mov	ip, r2
 801677e:	4463      	add	r3, ip
 8016780:	617b      	str	r3, [r7, #20]
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	881b      	ldrh	r3, [r3, #0]
 8016786:	b29b      	uxth	r3, r3
 8016788:	059b      	lsls	r3, r3, #22
 801678a:	0d9b      	lsrs	r3, r3, #22
 801678c:	b29a      	uxth	r2, r3
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	801a      	strh	r2, [r3, #0]
 8016792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016794:	691b      	ldr	r3, [r3, #16]
 8016796:	2b3e      	cmp	r3, #62	@ 0x3e
 8016798:	d91a      	bls.n	80167d0 <PCD_EP_ISR_Handler+0x2b0>
 801679a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801679c:	691b      	ldr	r3, [r3, #16]
 801679e:	095b      	lsrs	r3, r3, #5
 80167a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80167a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167a4:	691b      	ldr	r3, [r3, #16]
 80167a6:	221f      	movs	r2, #31
 80167a8:	4013      	ands	r3, r2
 80167aa:	d102      	bne.n	80167b2 <PCD_EP_ISR_Handler+0x292>
 80167ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80167ae:	3b01      	subs	r3, #1
 80167b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	881b      	ldrh	r3, [r3, #0]
 80167b6:	b29a      	uxth	r2, r3
 80167b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	029b      	lsls	r3, r3, #10
 80167be:	b29b      	uxth	r3, r3
 80167c0:	4313      	orrs	r3, r2
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	4a25      	ldr	r2, [pc, #148]	@ (801685c <PCD_EP_ISR_Handler+0x33c>)
 80167c6:	4313      	orrs	r3, r2
 80167c8:	b29a      	uxth	r2, r3
 80167ca:	697b      	ldr	r3, [r7, #20]
 80167cc:	801a      	strh	r2, [r3, #0]
 80167ce:	e023      	b.n	8016818 <PCD_EP_ISR_Handler+0x2f8>
 80167d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167d2:	691b      	ldr	r3, [r3, #16]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d108      	bne.n	80167ea <PCD_EP_ISR_Handler+0x2ca>
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	b29b      	uxth	r3, r3
 80167de:	4a1f      	ldr	r2, [pc, #124]	@ (801685c <PCD_EP_ISR_Handler+0x33c>)
 80167e0:	4313      	orrs	r3, r2
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	801a      	strh	r2, [r3, #0]
 80167e8:	e016      	b.n	8016818 <PCD_EP_ISR_Handler+0x2f8>
 80167ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167ec:	691b      	ldr	r3, [r3, #16]
 80167ee:	085b      	lsrs	r3, r3, #1
 80167f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80167f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80167f4:	691b      	ldr	r3, [r3, #16]
 80167f6:	2201      	movs	r2, #1
 80167f8:	4013      	ands	r3, r2
 80167fa:	d002      	beq.n	8016802 <PCD_EP_ISR_Handler+0x2e2>
 80167fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80167fe:	3301      	adds	r3, #1
 8016800:	647b      	str	r3, [r7, #68]	@ 0x44
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	881b      	ldrh	r3, [r3, #0]
 8016806:	b29a      	uxth	r2, r3
 8016808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801680a:	b29b      	uxth	r3, r3
 801680c:	029b      	lsls	r3, r3, #10
 801680e:	b29b      	uxth	r3, r3
 8016810:	4313      	orrs	r3, r2
 8016812:	b29a      	uxth	r2, r3
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	881b      	ldrh	r3, [r3, #0]
 801681e:	b29a      	uxth	r2, r3
 8016820:	2012      	movs	r0, #18
 8016822:	183b      	adds	r3, r7, r0
 8016824:	4911      	ldr	r1, [pc, #68]	@ (801686c <PCD_EP_ISR_Handler+0x34c>)
 8016826:	400a      	ands	r2, r1
 8016828:	801a      	strh	r2, [r3, #0]
 801682a:	183b      	adds	r3, r7, r0
 801682c:	183a      	adds	r2, r7, r0
 801682e:	8812      	ldrh	r2, [r2, #0]
 8016830:	2180      	movs	r1, #128	@ 0x80
 8016832:	0149      	lsls	r1, r1, #5
 8016834:	404a      	eors	r2, r1
 8016836:	801a      	strh	r2, [r3, #0]
 8016838:	183b      	adds	r3, r7, r0
 801683a:	183a      	adds	r2, r7, r0
 801683c:	8812      	ldrh	r2, [r2, #0]
 801683e:	2180      	movs	r1, #128	@ 0x80
 8016840:	0189      	lsls	r1, r1, #6
 8016842:	404a      	eors	r2, r1
 8016844:	801a      	strh	r2, [r3, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	183a      	adds	r2, r7, r0
 801684c:	8812      	ldrh	r2, [r2, #0]
 801684e:	4908      	ldr	r1, [pc, #32]	@ (8016870 <PCD_EP_ISR_Handler+0x350>)
 8016850:	430a      	orrs	r2, r1
 8016852:	b292      	uxth	r2, r2
 8016854:	801a      	strh	r2, [r3, #0]
 8016856:	e255      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
 8016858:	ffff8f0f 	.word	0xffff8f0f
 801685c:	ffff8000 	.word	0xffff8000
 8016860:	00000402 	.word	0x00000402
 8016864:	00000406 	.word	0x00000406
 8016868:	00000f8f 	.word	0x00000f8f
 801686c:	ffffbf8f 	.word	0xffffbf8f
 8016870:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	001a      	movs	r2, r3
 801687a:	204d      	movs	r0, #77	@ 0x4d
 801687c:	183b      	adds	r3, r7, r0
 801687e:	781b      	ldrb	r3, [r3, #0]
 8016880:	009b      	lsls	r3, r3, #2
 8016882:	18d2      	adds	r2, r2, r3
 8016884:	214a      	movs	r1, #74	@ 0x4a
 8016886:	187b      	adds	r3, r7, r1
 8016888:	8812      	ldrh	r2, [r2, #0]
 801688a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801688c:	187b      	adds	r3, r7, r1
 801688e:	2200      	movs	r2, #0
 8016890:	5e9b      	ldrsh	r3, [r3, r2]
 8016892:	2b00      	cmp	r3, #0
 8016894:	db00      	blt.n	8016898 <PCD_EP_ISR_Handler+0x378>
 8016896:	e0fa      	b.n	8016a8e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	001a      	movs	r2, r3
 801689e:	183b      	adds	r3, r7, r0
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	009b      	lsls	r3, r3, #2
 80168a4:	18d3      	adds	r3, r2, r3
 80168a6:	881b      	ldrh	r3, [r3, #0]
 80168a8:	b29a      	uxth	r2, r3
 80168aa:	2448      	movs	r4, #72	@ 0x48
 80168ac:	193b      	adds	r3, r7, r4
 80168ae:	49d1      	ldr	r1, [pc, #836]	@ (8016bf4 <PCD_EP_ISR_Handler+0x6d4>)
 80168b0:	400a      	ands	r2, r1
 80168b2:	801a      	strh	r2, [r3, #0]
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	001a      	movs	r2, r3
 80168ba:	183b      	adds	r3, r7, r0
 80168bc:	781b      	ldrb	r3, [r3, #0]
 80168be:	009b      	lsls	r3, r3, #2
 80168c0:	18d3      	adds	r3, r2, r3
 80168c2:	193a      	adds	r2, r7, r4
 80168c4:	8812      	ldrh	r2, [r2, #0]
 80168c6:	2180      	movs	r1, #128	@ 0x80
 80168c8:	430a      	orrs	r2, r1
 80168ca:	b292      	uxth	r2, r2
 80168cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80168ce:	183b      	adds	r3, r7, r0
 80168d0:	781a      	ldrb	r2, [r3, #0]
 80168d2:	0013      	movs	r3, r2
 80168d4:	009b      	lsls	r3, r3, #2
 80168d6:	189b      	adds	r3, r3, r2
 80168d8:	00db      	lsls	r3, r3, #3
 80168da:	3369      	adds	r3, #105	@ 0x69
 80168dc:	33ff      	adds	r3, #255	@ 0xff
 80168de:	687a      	ldr	r2, [r7, #4]
 80168e0:	18d3      	adds	r3, r2, r3
 80168e2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80168e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168e6:	7b1b      	ldrb	r3, [r3, #12]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d125      	bne.n	8016938 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2250      	movs	r2, #80	@ 0x50
 80168f2:	5a9b      	ldrh	r3, [r3, r2]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	001a      	movs	r2, r3
 80168f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168fa:	781b      	ldrb	r3, [r3, #0]
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	18d2      	adds	r2, r2, r3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	18d3      	adds	r3, r2, r3
 8016906:	4abc      	ldr	r2, [pc, #752]	@ (8016bf8 <PCD_EP_ISR_Handler+0x6d8>)
 8016908:	4694      	mov	ip, r2
 801690a:	4463      	add	r3, ip
 801690c:	881a      	ldrh	r2, [r3, #0]
 801690e:	2450      	movs	r4, #80	@ 0x50
 8016910:	193b      	adds	r3, r7, r4
 8016912:	0592      	lsls	r2, r2, #22
 8016914:	0d92      	lsrs	r2, r2, #22
 8016916:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8016918:	193b      	adds	r3, r7, r4
 801691a:	881b      	ldrh	r3, [r3, #0]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d100      	bne.n	8016922 <PCD_EP_ISR_Handler+0x402>
 8016920:	e08d      	b.n	8016a3e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	6818      	ldr	r0, [r3, #0]
 8016926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016928:	6959      	ldr	r1, [r3, #20]
 801692a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801692c:	88da      	ldrh	r2, [r3, #6]
 801692e:	193b      	adds	r3, r7, r4
 8016930:	881b      	ldrh	r3, [r3, #0]
 8016932:	f007 f8d6 	bl	801dae2 <USB_ReadPMA>
 8016936:	e082      	b.n	8016a3e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8016938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801693a:	78db      	ldrb	r3, [r3, #3]
 801693c:	2b02      	cmp	r3, #2
 801693e:	d10c      	bne.n	801695a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8016940:	2350      	movs	r3, #80	@ 0x50
 8016942:	18fc      	adds	r4, r7, r3
 8016944:	234a      	movs	r3, #74	@ 0x4a
 8016946:	18fb      	adds	r3, r7, r3
 8016948:	881a      	ldrh	r2, [r3, #0]
 801694a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	0018      	movs	r0, r3
 8016950:	f000 f9ec 	bl	8016d2c <HAL_PCD_EP_DB_Receive>
 8016954:	0003      	movs	r3, r0
 8016956:	8023      	strh	r3, [r4, #0]
 8016958:	e071      	b.n	8016a3e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	001a      	movs	r2, r3
 8016960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	009b      	lsls	r3, r3, #2
 8016966:	18d3      	adds	r3, r2, r3
 8016968:	881b      	ldrh	r3, [r3, #0]
 801696a:	b29a      	uxth	r2, r3
 801696c:	2052      	movs	r0, #82	@ 0x52
 801696e:	183b      	adds	r3, r7, r0
 8016970:	49a2      	ldr	r1, [pc, #648]	@ (8016bfc <PCD_EP_ISR_Handler+0x6dc>)
 8016972:	400a      	ands	r2, r1
 8016974:	801a      	strh	r2, [r3, #0]
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	001a      	movs	r2, r3
 801697c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	009b      	lsls	r3, r3, #2
 8016982:	18d3      	adds	r3, r2, r3
 8016984:	183a      	adds	r2, r7, r0
 8016986:	8812      	ldrh	r2, [r2, #0]
 8016988:	499d      	ldr	r1, [pc, #628]	@ (8016c00 <PCD_EP_ISR_Handler+0x6e0>)
 801698a:	430a      	orrs	r2, r1
 801698c:	b292      	uxth	r2, r2
 801698e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	001a      	movs	r2, r3
 8016996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	18d3      	adds	r3, r2, r3
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	b29b      	uxth	r3, r3
 80169a2:	001a      	movs	r2, r3
 80169a4:	2380      	movs	r3, #128	@ 0x80
 80169a6:	01db      	lsls	r3, r3, #7
 80169a8:	4013      	ands	r3, r2
 80169aa:	d024      	beq.n	80169f6 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2250      	movs	r2, #80	@ 0x50
 80169b2:	5a9b      	ldrh	r3, [r3, r2]
 80169b4:	b29b      	uxth	r3, r3
 80169b6:	001a      	movs	r2, r3
 80169b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	00db      	lsls	r3, r3, #3
 80169be:	18d2      	adds	r2, r2, r3
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	18d3      	adds	r3, r2, r3
 80169c6:	4a8f      	ldr	r2, [pc, #572]	@ (8016c04 <PCD_EP_ISR_Handler+0x6e4>)
 80169c8:	4694      	mov	ip, r2
 80169ca:	4463      	add	r3, ip
 80169cc:	881a      	ldrh	r2, [r3, #0]
 80169ce:	2450      	movs	r4, #80	@ 0x50
 80169d0:	193b      	adds	r3, r7, r4
 80169d2:	0592      	lsls	r2, r2, #22
 80169d4:	0d92      	lsrs	r2, r2, #22
 80169d6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80169d8:	193b      	adds	r3, r7, r4
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d02e      	beq.n	8016a3e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6818      	ldr	r0, [r3, #0]
 80169e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169e6:	6959      	ldr	r1, [r3, #20]
 80169e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169ea:	891a      	ldrh	r2, [r3, #8]
 80169ec:	193b      	adds	r3, r7, r4
 80169ee:	881b      	ldrh	r3, [r3, #0]
 80169f0:	f007 f877 	bl	801dae2 <USB_ReadPMA>
 80169f4:	e023      	b.n	8016a3e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2250      	movs	r2, #80	@ 0x50
 80169fc:	5a9b      	ldrh	r3, [r3, r2]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	001a      	movs	r2, r3
 8016a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a04:	781b      	ldrb	r3, [r3, #0]
 8016a06:	00db      	lsls	r3, r3, #3
 8016a08:	18d2      	adds	r2, r2, r3
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	18d3      	adds	r3, r2, r3
 8016a10:	4a79      	ldr	r2, [pc, #484]	@ (8016bf8 <PCD_EP_ISR_Handler+0x6d8>)
 8016a12:	4694      	mov	ip, r2
 8016a14:	4463      	add	r3, ip
 8016a16:	881a      	ldrh	r2, [r3, #0]
 8016a18:	2450      	movs	r4, #80	@ 0x50
 8016a1a:	193b      	adds	r3, r7, r4
 8016a1c:	0592      	lsls	r2, r2, #22
 8016a1e:	0d92      	lsrs	r2, r2, #22
 8016a20:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8016a22:	193b      	adds	r3, r7, r4
 8016a24:	881b      	ldrh	r3, [r3, #0]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d009      	beq.n	8016a3e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	6818      	ldr	r0, [r3, #0]
 8016a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a30:	6959      	ldr	r1, [r3, #20]
 8016a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a34:	895a      	ldrh	r2, [r3, #10]
 8016a36:	193b      	adds	r3, r7, r4
 8016a38:	881b      	ldrh	r3, [r3, #0]
 8016a3a:	f007 f852 	bl	801dae2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8016a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a40:	69da      	ldr	r2, [r3, #28]
 8016a42:	2150      	movs	r1, #80	@ 0x50
 8016a44:	187b      	adds	r3, r7, r1
 8016a46:	881b      	ldrh	r3, [r3, #0]
 8016a48:	18d2      	adds	r2, r2, r3
 8016a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8016a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a50:	695a      	ldr	r2, [r3, #20]
 8016a52:	187b      	adds	r3, r7, r1
 8016a54:	881b      	ldrh	r3, [r3, #0]
 8016a56:	18d2      	adds	r2, r2, r3
 8016a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a5a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8016a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a5e:	699b      	ldr	r3, [r3, #24]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d005      	beq.n	8016a70 <PCD_EP_ISR_Handler+0x550>
 8016a64:	187b      	adds	r3, r7, r1
 8016a66:	881a      	ldrh	r2, [r3, #0]
 8016a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a6a:	691b      	ldr	r3, [r3, #16]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d207      	bcs.n	8016a80 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8016a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a72:	781a      	ldrb	r2, [r3, #0]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	0011      	movs	r1, r2
 8016a78:	0018      	movs	r0, r3
 8016a7a:	f009 f84c 	bl	801fb16 <HAL_PCD_DataOutStageCallback>
 8016a7e:	e006      	b.n	8016a8e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016a86:	0011      	movs	r1, r2
 8016a88:	0018      	movs	r0, r3
 8016a8a:	f005 fd6f 	bl	801c56c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8016a8e:	244a      	movs	r4, #74	@ 0x4a
 8016a90:	193b      	adds	r3, r7, r4
 8016a92:	881b      	ldrh	r3, [r3, #0]
 8016a94:	2280      	movs	r2, #128	@ 0x80
 8016a96:	4013      	ands	r3, r2
 8016a98:	d100      	bne.n	8016a9c <PCD_EP_ISR_Handler+0x57c>
 8016a9a:	e133      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8016a9c:	204d      	movs	r0, #77	@ 0x4d
 8016a9e:	183b      	adds	r3, r7, r0
 8016aa0:	781b      	ldrb	r3, [r3, #0]
 8016aa2:	1c5a      	adds	r2, r3, #1
 8016aa4:	0013      	movs	r3, r2
 8016aa6:	009b      	lsls	r3, r3, #2
 8016aa8:	189b      	adds	r3, r3, r2
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	687a      	ldr	r2, [r7, #4]
 8016aae:	18d3      	adds	r3, r2, r3
 8016ab0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	001a      	movs	r2, r3
 8016ab8:	183b      	adds	r3, r7, r0
 8016aba:	781b      	ldrb	r3, [r3, #0]
 8016abc:	009b      	lsls	r3, r3, #2
 8016abe:	18d3      	adds	r3, r2, r3
 8016ac0:	881b      	ldrh	r3, [r3, #0]
 8016ac2:	b29a      	uxth	r2, r3
 8016ac4:	2542      	movs	r5, #66	@ 0x42
 8016ac6:	197b      	adds	r3, r7, r5
 8016ac8:	494f      	ldr	r1, [pc, #316]	@ (8016c08 <PCD_EP_ISR_Handler+0x6e8>)
 8016aca:	400a      	ands	r2, r1
 8016acc:	801a      	strh	r2, [r3, #0]
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	001a      	movs	r2, r3
 8016ad4:	183b      	adds	r3, r7, r0
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	009b      	lsls	r3, r3, #2
 8016ada:	18d3      	adds	r3, r2, r3
 8016adc:	197a      	adds	r2, r7, r5
 8016ade:	8812      	ldrh	r2, [r2, #0]
 8016ae0:	494a      	ldr	r1, [pc, #296]	@ (8016c0c <PCD_EP_ISR_Handler+0x6ec>)
 8016ae2:	430a      	orrs	r2, r1
 8016ae4:	b292      	uxth	r2, r2
 8016ae6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8016ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016aea:	78db      	ldrb	r3, [r3, #3]
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	d000      	beq.n	8016af2 <PCD_EP_ISR_Handler+0x5d2>
 8016af0:	e0af      	b.n	8016c52 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8016af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016af4:	2200      	movs	r2, #0
 8016af6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8016af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016afa:	7b1b      	ldrb	r3, [r3, #12]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d100      	bne.n	8016b02 <PCD_EP_ISR_Handler+0x5e2>
 8016b00:	e09f      	b.n	8016c42 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016b02:	193b      	adds	r3, r7, r4
 8016b04:	881b      	ldrh	r3, [r3, #0]
 8016b06:	2240      	movs	r2, #64	@ 0x40
 8016b08:	4013      	ands	r3, r2
 8016b0a:	d046      	beq.n	8016b9a <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b0e:	785b      	ldrb	r3, [r3, #1]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d125      	bne.n	8016b60 <PCD_EP_ISR_Handler+0x640>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2250      	movs	r2, #80	@ 0x50
 8016b20:	5a9b      	ldrh	r3, [r3, r2]
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	001a      	movs	r2, r3
 8016b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b28:	189b      	adds	r3, r3, r2
 8016b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8016b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	00da      	lsls	r2, r3, #3
 8016b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b34:	18d3      	adds	r3, r2, r3
 8016b36:	4a33      	ldr	r2, [pc, #204]	@ (8016c04 <PCD_EP_ISR_Handler+0x6e4>)
 8016b38:	4694      	mov	ip, r2
 8016b3a:	4463      	add	r3, ip
 8016b3c:	623b      	str	r3, [r7, #32]
 8016b3e:	6a3b      	ldr	r3, [r7, #32]
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	059b      	lsls	r3, r3, #22
 8016b46:	0d9b      	lsrs	r3, r3, #22
 8016b48:	b29a      	uxth	r2, r3
 8016b4a:	6a3b      	ldr	r3, [r7, #32]
 8016b4c:	801a      	strh	r2, [r3, #0]
 8016b4e:	6a3b      	ldr	r3, [r7, #32]
 8016b50:	881b      	ldrh	r3, [r3, #0]
 8016b52:	b29b      	uxth	r3, r3
 8016b54:	4a2d      	ldr	r2, [pc, #180]	@ (8016c0c <PCD_EP_ISR_Handler+0x6ec>)
 8016b56:	4313      	orrs	r3, r2
 8016b58:	b29a      	uxth	r2, r3
 8016b5a:	6a3b      	ldr	r3, [r7, #32]
 8016b5c:	801a      	strh	r2, [r3, #0]
 8016b5e:	e070      	b.n	8016c42 <PCD_EP_ISR_Handler+0x722>
 8016b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b62:	785b      	ldrb	r3, [r3, #1]
 8016b64:	2b01      	cmp	r3, #1
 8016b66:	d16c      	bne.n	8016c42 <PCD_EP_ISR_Handler+0x722>
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2250      	movs	r2, #80	@ 0x50
 8016b74:	5a9b      	ldrh	r3, [r3, r2]
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	001a      	movs	r2, r3
 8016b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b7c:	189b      	adds	r3, r3, r2
 8016b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	00da      	lsls	r2, r3, #3
 8016b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b88:	18d3      	adds	r3, r2, r3
 8016b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8016c04 <PCD_EP_ISR_Handler+0x6e4>)
 8016b8c:	4694      	mov	ip, r2
 8016b8e:	4463      	add	r3, ip
 8016b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b94:	2200      	movs	r2, #0
 8016b96:	801a      	strh	r2, [r3, #0]
 8016b98:	e053      	b.n	8016c42 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ba2:	785b      	ldrb	r3, [r3, #1]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d133      	bne.n	8016c10 <PCD_EP_ISR_Handler+0x6f0>
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2250      	movs	r2, #80	@ 0x50
 8016bb4:	5a9b      	ldrh	r3, [r3, r2]
 8016bb6:	b29b      	uxth	r3, r3
 8016bb8:	001a      	movs	r2, r3
 8016bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016bbc:	189b      	adds	r3, r3, r2
 8016bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8016bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	00da      	lsls	r2, r3, #3
 8016bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016bc8:	18d3      	adds	r3, r2, r3
 8016bca:	4a0b      	ldr	r2, [pc, #44]	@ (8016bf8 <PCD_EP_ISR_Handler+0x6d8>)
 8016bcc:	4694      	mov	ip, r2
 8016bce:	4463      	add	r3, ip
 8016bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8016bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bd4:	881b      	ldrh	r3, [r3, #0]
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	059b      	lsls	r3, r3, #22
 8016bda:	0d9b      	lsrs	r3, r3, #22
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016be0:	801a      	strh	r2, [r3, #0]
 8016be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016be4:	881b      	ldrh	r3, [r3, #0]
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	4a08      	ldr	r2, [pc, #32]	@ (8016c0c <PCD_EP_ISR_Handler+0x6ec>)
 8016bea:	4313      	orrs	r3, r2
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016bf0:	801a      	strh	r2, [r3, #0]
 8016bf2:	e026      	b.n	8016c42 <PCD_EP_ISR_Handler+0x722>
 8016bf4:	00000f8f 	.word	0x00000f8f
 8016bf8:	00000406 	.word	0x00000406
 8016bfc:	ffff8f8f 	.word	0xffff8f8f
 8016c00:	ffff80c0 	.word	0xffff80c0
 8016c04:	00000402 	.word	0x00000402
 8016c08:	ffff8f0f 	.word	0xffff8f0f
 8016c0c:	ffff8000 	.word	0xffff8000
 8016c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c12:	785b      	ldrb	r3, [r3, #1]
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d114      	bne.n	8016c42 <PCD_EP_ISR_Handler+0x722>
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	2250      	movs	r2, #80	@ 0x50
 8016c1e:	5a9b      	ldrh	r3, [r3, r2]
 8016c20:	b29b      	uxth	r3, r3
 8016c22:	001a      	movs	r2, r3
 8016c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c26:	189b      	adds	r3, r3, r2
 8016c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	00da      	lsls	r2, r3, #3
 8016c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c32:	18d3      	adds	r3, r2, r3
 8016c34:	4a3b      	ldr	r2, [pc, #236]	@ (8016d24 <PCD_EP_ISR_Handler+0x804>)
 8016c36:	4694      	mov	ip, r2
 8016c38:	4463      	add	r3, ip
 8016c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c3e:	2200      	movs	r2, #0
 8016c40:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c44:	781a      	ldrb	r2, [r3, #0]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	0011      	movs	r1, r2
 8016c4a:	0018      	movs	r0, r3
 8016c4c:	f008 ff84 	bl	801fb58 <HAL_PCD_DataInStageCallback>
 8016c50:	e058      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8016c52:	234a      	movs	r3, #74	@ 0x4a
 8016c54:	18fb      	adds	r3, r7, r3
 8016c56:	881a      	ldrh	r2, [r3, #0]
 8016c58:	2380      	movs	r3, #128	@ 0x80
 8016c5a:	005b      	lsls	r3, r3, #1
 8016c5c:	4013      	ands	r3, r2
 8016c5e:	d149      	bne.n	8016cf4 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	2250      	movs	r2, #80	@ 0x50
 8016c66:	5a9b      	ldrh	r3, [r3, r2]
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	001a      	movs	r2, r3
 8016c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	00db      	lsls	r3, r3, #3
 8016c72:	18d2      	adds	r2, r2, r3
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	18d3      	adds	r3, r2, r3
 8016c7a:	4a2b      	ldr	r2, [pc, #172]	@ (8016d28 <PCD_EP_ISR_Handler+0x808>)
 8016c7c:	4694      	mov	ip, r2
 8016c7e:	4463      	add	r3, ip
 8016c80:	881a      	ldrh	r2, [r3, #0]
 8016c82:	2140      	movs	r1, #64	@ 0x40
 8016c84:	187b      	adds	r3, r7, r1
 8016c86:	0592      	lsls	r2, r2, #22
 8016c88:	0d92      	lsrs	r2, r2, #22
 8016c8a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8016c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c8e:	699a      	ldr	r2, [r3, #24]
 8016c90:	187b      	adds	r3, r7, r1
 8016c92:	881b      	ldrh	r3, [r3, #0]
 8016c94:	429a      	cmp	r2, r3
 8016c96:	d907      	bls.n	8016ca8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8016c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016c9a:	699a      	ldr	r2, [r3, #24]
 8016c9c:	187b      	adds	r3, r7, r1
 8016c9e:	881b      	ldrh	r3, [r3, #0]
 8016ca0:	1ad2      	subs	r2, r2, r3
 8016ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ca4:	619a      	str	r2, [r3, #24]
 8016ca6:	e002      	b.n	8016cae <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8016ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016caa:	2200      	movs	r2, #0
 8016cac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8016cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016cb0:	699b      	ldr	r3, [r3, #24]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d107      	bne.n	8016cc6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8016cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016cb8:	781a      	ldrb	r2, [r3, #0]
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	0011      	movs	r1, r2
 8016cbe:	0018      	movs	r0, r3
 8016cc0:	f008 ff4a 	bl	801fb58 <HAL_PCD_DataInStageCallback>
 8016cc4:	e01e      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8016cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016cc8:	695a      	ldr	r2, [r3, #20]
 8016cca:	2140      	movs	r1, #64	@ 0x40
 8016ccc:	187b      	adds	r3, r7, r1
 8016cce:	881b      	ldrh	r3, [r3, #0]
 8016cd0:	18d2      	adds	r2, r2, r3
 8016cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016cd4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8016cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016cd8:	69da      	ldr	r2, [r3, #28]
 8016cda:	187b      	adds	r3, r7, r1
 8016cdc:	881b      	ldrh	r3, [r3, #0]
 8016cde:	18d2      	adds	r2, r2, r3
 8016ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ce2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8016cea:	0011      	movs	r1, r2
 8016cec:	0018      	movs	r0, r3
 8016cee:	f005 fc3d 	bl	801c56c <USB_EPStartXfer>
 8016cf2:	e007      	b.n	8016d04 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8016cf4:	234a      	movs	r3, #74	@ 0x4a
 8016cf6:	18fb      	adds	r3, r7, r3
 8016cf8:	881a      	ldrh	r2, [r3, #0]
 8016cfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	0018      	movs	r0, r3
 8016d00:	f000 f930 	bl	8016f64 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	2244      	movs	r2, #68	@ 0x44
 8016d0a:	5a9b      	ldrh	r3, [r3, r2]
 8016d0c:	b29b      	uxth	r3, r3
 8016d0e:	b21b      	sxth	r3, r3
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	da01      	bge.n	8016d18 <PCD_EP_ISR_Handler+0x7f8>
 8016d14:	f7ff fc0a 	bl	801652c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8016d18:	2300      	movs	r3, #0
}
 8016d1a:	0018      	movs	r0, r3
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	b016      	add	sp, #88	@ 0x58
 8016d20:	bdb0      	pop	{r4, r5, r7, pc}
 8016d22:	46c0      	nop			@ (mov r8, r8)
 8016d24:	00000406 	.word	0x00000406
 8016d28:	00000402 	.word	0x00000402

08016d2c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016d2c:	b590      	push	{r4, r7, lr}
 8016d2e:	b089      	sub	sp, #36	@ 0x24
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	60f8      	str	r0, [r7, #12]
 8016d34:	60b9      	str	r1, [r7, #8]
 8016d36:	1dbb      	adds	r3, r7, #6
 8016d38:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8016d3a:	1dbb      	adds	r3, r7, #6
 8016d3c:	881a      	ldrh	r2, [r3, #0]
 8016d3e:	2380      	movs	r3, #128	@ 0x80
 8016d40:	01db      	lsls	r3, r3, #7
 8016d42:	4013      	ands	r3, r2
 8016d44:	d100      	bne.n	8016d48 <HAL_PCD_EP_DB_Receive+0x1c>
 8016d46:	e07d      	b.n	8016e44 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	2250      	movs	r2, #80	@ 0x50
 8016d4e:	5a9b      	ldrh	r3, [r3, r2]
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	001a      	movs	r2, r3
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	00db      	lsls	r3, r3, #3
 8016d5a:	18d2      	adds	r2, r2, r3
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	18d3      	adds	r3, r2, r3
 8016d62:	4a7a      	ldr	r2, [pc, #488]	@ (8016f4c <HAL_PCD_EP_DB_Receive+0x220>)
 8016d64:	4694      	mov	ip, r2
 8016d66:	4463      	add	r3, ip
 8016d68:	881a      	ldrh	r2, [r3, #0]
 8016d6a:	211a      	movs	r1, #26
 8016d6c:	187b      	adds	r3, r7, r1
 8016d6e:	0592      	lsls	r2, r2, #22
 8016d70:	0d92      	lsrs	r2, r2, #22
 8016d72:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	699a      	ldr	r2, [r3, #24]
 8016d78:	187b      	adds	r3, r7, r1
 8016d7a:	881b      	ldrh	r3, [r3, #0]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d307      	bcc.n	8016d90 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	699a      	ldr	r2, [r3, #24]
 8016d84:	187b      	adds	r3, r7, r1
 8016d86:	881b      	ldrh	r3, [r3, #0]
 8016d88:	1ad2      	subs	r2, r2, r3
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	619a      	str	r2, [r3, #24]
 8016d8e:	e002      	b.n	8016d96 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	2200      	movs	r2, #0
 8016d94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016d96:	68bb      	ldr	r3, [r7, #8]
 8016d98:	699b      	ldr	r3, [r3, #24]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d121      	bne.n	8016de2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	001a      	movs	r2, r3
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	009b      	lsls	r3, r3, #2
 8016daa:	18d3      	adds	r3, r2, r3
 8016dac:	881b      	ldrh	r3, [r3, #0]
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	2018      	movs	r0, #24
 8016db2:	183b      	adds	r3, r7, r0
 8016db4:	4966      	ldr	r1, [pc, #408]	@ (8016f50 <HAL_PCD_EP_DB_Receive+0x224>)
 8016db6:	400a      	ands	r2, r1
 8016db8:	801a      	strh	r2, [r3, #0]
 8016dba:	183b      	adds	r3, r7, r0
 8016dbc:	183a      	adds	r2, r7, r0
 8016dbe:	8812      	ldrh	r2, [r2, #0]
 8016dc0:	2180      	movs	r1, #128	@ 0x80
 8016dc2:	0189      	lsls	r1, r1, #6
 8016dc4:	404a      	eors	r2, r1
 8016dc6:	801a      	strh	r2, [r3, #0]
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	001a      	movs	r2, r3
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	009b      	lsls	r3, r3, #2
 8016dd4:	18d3      	adds	r3, r2, r3
 8016dd6:	183a      	adds	r2, r7, r0
 8016dd8:	8812      	ldrh	r2, [r2, #0]
 8016dda:	495e      	ldr	r1, [pc, #376]	@ (8016f54 <HAL_PCD_EP_DB_Receive+0x228>)
 8016ddc:	430a      	orrs	r2, r1
 8016dde:	b292      	uxth	r2, r2
 8016de0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016de2:	1dbb      	adds	r3, r7, #6
 8016de4:	881b      	ldrh	r3, [r3, #0]
 8016de6:	2240      	movs	r2, #64	@ 0x40
 8016de8:	4013      	ands	r3, r2
 8016dea:	d01a      	beq.n	8016e22 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	001a      	movs	r2, r3
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	781b      	ldrb	r3, [r3, #0]
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	18d3      	adds	r3, r2, r3
 8016dfa:	881b      	ldrh	r3, [r3, #0]
 8016dfc:	b29a      	uxth	r2, r3
 8016dfe:	2016      	movs	r0, #22
 8016e00:	183b      	adds	r3, r7, r0
 8016e02:	4955      	ldr	r1, [pc, #340]	@ (8016f58 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016e04:	400a      	ands	r2, r1
 8016e06:	801a      	strh	r2, [r3, #0]
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	001a      	movs	r2, r3
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	781b      	ldrb	r3, [r3, #0]
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	18d3      	adds	r3, r2, r3
 8016e16:	183a      	adds	r2, r7, r0
 8016e18:	8812      	ldrh	r2, [r2, #0]
 8016e1a:	4950      	ldr	r1, [pc, #320]	@ (8016f5c <HAL_PCD_EP_DB_Receive+0x230>)
 8016e1c:	430a      	orrs	r2, r1
 8016e1e:	b292      	uxth	r2, r2
 8016e20:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016e22:	241a      	movs	r4, #26
 8016e24:	193b      	adds	r3, r7, r4
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d100      	bne.n	8016e2e <HAL_PCD_EP_DB_Receive+0x102>
 8016e2c:	e086      	b.n	8016f3c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	6818      	ldr	r0, [r3, #0]
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	6959      	ldr	r1, [r3, #20]
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	891a      	ldrh	r2, [r3, #8]
 8016e3a:	193b      	adds	r3, r7, r4
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	f006 fe50 	bl	801dae2 <USB_ReadPMA>
 8016e42:	e07b      	b.n	8016f3c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2250      	movs	r2, #80	@ 0x50
 8016e4a:	5a9b      	ldrh	r3, [r3, r2]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	001a      	movs	r2, r3
 8016e50:	68bb      	ldr	r3, [r7, #8]
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	00db      	lsls	r3, r3, #3
 8016e56:	18d2      	adds	r2, r2, r3
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	18d3      	adds	r3, r2, r3
 8016e5e:	4a40      	ldr	r2, [pc, #256]	@ (8016f60 <HAL_PCD_EP_DB_Receive+0x234>)
 8016e60:	4694      	mov	ip, r2
 8016e62:	4463      	add	r3, ip
 8016e64:	881a      	ldrh	r2, [r3, #0]
 8016e66:	211a      	movs	r1, #26
 8016e68:	187b      	adds	r3, r7, r1
 8016e6a:	0592      	lsls	r2, r2, #22
 8016e6c:	0d92      	lsrs	r2, r2, #22
 8016e6e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	699a      	ldr	r2, [r3, #24]
 8016e74:	187b      	adds	r3, r7, r1
 8016e76:	881b      	ldrh	r3, [r3, #0]
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d307      	bcc.n	8016e8c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	699a      	ldr	r2, [r3, #24]
 8016e80:	187b      	adds	r3, r7, r1
 8016e82:	881b      	ldrh	r3, [r3, #0]
 8016e84:	1ad2      	subs	r2, r2, r3
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	619a      	str	r2, [r3, #24]
 8016e8a:	e002      	b.n	8016e92 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8016e92:	68bb      	ldr	r3, [r7, #8]
 8016e94:	699b      	ldr	r3, [r3, #24]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d121      	bne.n	8016ede <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	001a      	movs	r2, r3
 8016ea0:	68bb      	ldr	r3, [r7, #8]
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	009b      	lsls	r3, r3, #2
 8016ea6:	18d3      	adds	r3, r2, r3
 8016ea8:	881b      	ldrh	r3, [r3, #0]
 8016eaa:	b29a      	uxth	r2, r3
 8016eac:	201e      	movs	r0, #30
 8016eae:	183b      	adds	r3, r7, r0
 8016eb0:	4927      	ldr	r1, [pc, #156]	@ (8016f50 <HAL_PCD_EP_DB_Receive+0x224>)
 8016eb2:	400a      	ands	r2, r1
 8016eb4:	801a      	strh	r2, [r3, #0]
 8016eb6:	183b      	adds	r3, r7, r0
 8016eb8:	183a      	adds	r2, r7, r0
 8016eba:	8812      	ldrh	r2, [r2, #0]
 8016ebc:	2180      	movs	r1, #128	@ 0x80
 8016ebe:	0189      	lsls	r1, r1, #6
 8016ec0:	404a      	eors	r2, r1
 8016ec2:	801a      	strh	r2, [r3, #0]
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	001a      	movs	r2, r3
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	009b      	lsls	r3, r3, #2
 8016ed0:	18d3      	adds	r3, r2, r3
 8016ed2:	183a      	adds	r2, r7, r0
 8016ed4:	8812      	ldrh	r2, [r2, #0]
 8016ed6:	491f      	ldr	r1, [pc, #124]	@ (8016f54 <HAL_PCD_EP_DB_Receive+0x228>)
 8016ed8:	430a      	orrs	r2, r1
 8016eda:	b292      	uxth	r2, r2
 8016edc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8016ede:	1dbb      	adds	r3, r7, #6
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	2240      	movs	r2, #64	@ 0x40
 8016ee4:	4013      	ands	r3, r2
 8016ee6:	d11a      	bne.n	8016f1e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	001a      	movs	r2, r3
 8016eee:	68bb      	ldr	r3, [r7, #8]
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	009b      	lsls	r3, r3, #2
 8016ef4:	18d3      	adds	r3, r2, r3
 8016ef6:	881b      	ldrh	r3, [r3, #0]
 8016ef8:	b29a      	uxth	r2, r3
 8016efa:	201c      	movs	r0, #28
 8016efc:	183b      	adds	r3, r7, r0
 8016efe:	4916      	ldr	r1, [pc, #88]	@ (8016f58 <HAL_PCD_EP_DB_Receive+0x22c>)
 8016f00:	400a      	ands	r2, r1
 8016f02:	801a      	strh	r2, [r3, #0]
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	001a      	movs	r2, r3
 8016f0a:	68bb      	ldr	r3, [r7, #8]
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	18d3      	adds	r3, r2, r3
 8016f12:	183a      	adds	r2, r7, r0
 8016f14:	8812      	ldrh	r2, [r2, #0]
 8016f16:	4911      	ldr	r1, [pc, #68]	@ (8016f5c <HAL_PCD_EP_DB_Receive+0x230>)
 8016f18:	430a      	orrs	r2, r1
 8016f1a:	b292      	uxth	r2, r2
 8016f1c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8016f1e:	241a      	movs	r4, #26
 8016f20:	193b      	adds	r3, r7, r4
 8016f22:	881b      	ldrh	r3, [r3, #0]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d009      	beq.n	8016f3c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	6818      	ldr	r0, [r3, #0]
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	6959      	ldr	r1, [r3, #20]
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	895a      	ldrh	r2, [r3, #10]
 8016f34:	193b      	adds	r3, r7, r4
 8016f36:	881b      	ldrh	r3, [r3, #0]
 8016f38:	f006 fdd3 	bl	801dae2 <USB_ReadPMA>
    }
  }

  return count;
 8016f3c:	231a      	movs	r3, #26
 8016f3e:	18fb      	adds	r3, r7, r3
 8016f40:	881b      	ldrh	r3, [r3, #0]
}
 8016f42:	0018      	movs	r0, r3
 8016f44:	46bd      	mov	sp, r7
 8016f46:	b009      	add	sp, #36	@ 0x24
 8016f48:	bd90      	pop	{r4, r7, pc}
 8016f4a:	46c0      	nop			@ (mov r8, r8)
 8016f4c:	00000402 	.word	0x00000402
 8016f50:	ffffbf8f 	.word	0xffffbf8f
 8016f54:	ffff8080 	.word	0xffff8080
 8016f58:	ffff8f8f 	.word	0xffff8f8f
 8016f5c:	ffff80c0 	.word	0xffff80c0
 8016f60:	00000406 	.word	0x00000406

08016f64 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b0a4      	sub	sp, #144	@ 0x90
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	1dbb      	adds	r3, r7, #6
 8016f70:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8016f72:	1dbb      	adds	r3, r7, #6
 8016f74:	881b      	ldrh	r3, [r3, #0]
 8016f76:	2240      	movs	r2, #64	@ 0x40
 8016f78:	4013      	ands	r3, r2
 8016f7a:	d100      	bne.n	8016f7e <HAL_PCD_EP_DB_Transmit+0x1a>
 8016f7c:	e1e4      	b.n	8017348 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	2250      	movs	r2, #80	@ 0x50
 8016f84:	5a9b      	ldrh	r3, [r3, r2]
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	001a      	movs	r2, r3
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	781b      	ldrb	r3, [r3, #0]
 8016f8e:	00db      	lsls	r3, r3, #3
 8016f90:	18d2      	adds	r2, r2, r3
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	18d3      	adds	r3, r2, r3
 8016f98:	4ad0      	ldr	r2, [pc, #832]	@ (80172dc <HAL_PCD_EP_DB_Transmit+0x378>)
 8016f9a:	4694      	mov	ip, r2
 8016f9c:	4463      	add	r3, ip
 8016f9e:	881a      	ldrh	r2, [r3, #0]
 8016fa0:	2186      	movs	r1, #134	@ 0x86
 8016fa2:	187b      	adds	r3, r7, r1
 8016fa4:	0592      	lsls	r2, r2, #22
 8016fa6:	0d92      	lsrs	r2, r2, #22
 8016fa8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	699a      	ldr	r2, [r3, #24]
 8016fae:	187b      	adds	r3, r7, r1
 8016fb0:	881b      	ldrh	r3, [r3, #0]
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d907      	bls.n	8016fc6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	699a      	ldr	r2, [r3, #24]
 8016fba:	187b      	adds	r3, r7, r1
 8016fbc:	881b      	ldrh	r3, [r3, #0]
 8016fbe:	1ad2      	subs	r2, r2, r3
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	619a      	str	r2, [r3, #24]
 8016fc4:	e002      	b.n	8016fcc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8016fc6:	68bb      	ldr	r3, [r7, #8]
 8016fc8:	2200      	movs	r2, #0
 8016fca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8016fcc:	68bb      	ldr	r3, [r7, #8]
 8016fce:	699b      	ldr	r3, [r3, #24]
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d000      	beq.n	8016fd6 <HAL_PCD_EP_DB_Transmit+0x72>
 8016fd4:	e0b5      	b.n	8017142 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	785b      	ldrb	r3, [r3, #1]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d125      	bne.n	801702a <HAL_PCD_EP_DB_Transmit+0xc6>
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	2250      	movs	r2, #80	@ 0x50
 8016fea:	5a9b      	ldrh	r3, [r3, r2]
 8016fec:	b29b      	uxth	r3, r3
 8016fee:	001a      	movs	r2, r3
 8016ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ff2:	189b      	adds	r3, r3, r2
 8016ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016ff6:	68bb      	ldr	r3, [r7, #8]
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	00da      	lsls	r2, r3, #3
 8016ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ffe:	18d3      	adds	r3, r2, r3
 8017000:	4ab6      	ldr	r2, [pc, #728]	@ (80172dc <HAL_PCD_EP_DB_Transmit+0x378>)
 8017002:	4694      	mov	ip, r2
 8017004:	4463      	add	r3, ip
 8017006:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801700a:	881b      	ldrh	r3, [r3, #0]
 801700c:	b29b      	uxth	r3, r3
 801700e:	059b      	lsls	r3, r3, #22
 8017010:	0d9b      	lsrs	r3, r3, #22
 8017012:	b29a      	uxth	r2, r3
 8017014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017016:	801a      	strh	r2, [r3, #0]
 8017018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801701a:	881b      	ldrh	r3, [r3, #0]
 801701c:	b29b      	uxth	r3, r3
 801701e:	4ab0      	ldr	r2, [pc, #704]	@ (80172e0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017020:	4313      	orrs	r3, r2
 8017022:	b29a      	uxth	r2, r3
 8017024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017026:	801a      	strh	r2, [r3, #0]
 8017028:	e01b      	b.n	8017062 <HAL_PCD_EP_DB_Transmit+0xfe>
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	785b      	ldrb	r3, [r3, #1]
 801702e:	2b01      	cmp	r3, #1
 8017030:	d117      	bne.n	8017062 <HAL_PCD_EP_DB_Transmit+0xfe>
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	637b      	str	r3, [r7, #52]	@ 0x34
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	2250      	movs	r2, #80	@ 0x50
 801703e:	5a9b      	ldrh	r3, [r3, r2]
 8017040:	b29b      	uxth	r3, r3
 8017042:	001a      	movs	r2, r3
 8017044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017046:	189b      	adds	r3, r3, r2
 8017048:	637b      	str	r3, [r7, #52]	@ 0x34
 801704a:	68bb      	ldr	r3, [r7, #8]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	00da      	lsls	r2, r3, #3
 8017050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017052:	18d3      	adds	r3, r2, r3
 8017054:	4aa1      	ldr	r2, [pc, #644]	@ (80172dc <HAL_PCD_EP_DB_Transmit+0x378>)
 8017056:	4694      	mov	ip, r2
 8017058:	4463      	add	r3, ip
 801705a:	633b      	str	r3, [r7, #48]	@ 0x30
 801705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705e:	2200      	movs	r2, #0
 8017060:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	627b      	str	r3, [r7, #36]	@ 0x24
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	785b      	ldrb	r3, [r3, #1]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d125      	bne.n	80170bc <HAL_PCD_EP_DB_Transmit+0x158>
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	61fb      	str	r3, [r7, #28]
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2250      	movs	r2, #80	@ 0x50
 801707c:	5a9b      	ldrh	r3, [r3, r2]
 801707e:	b29b      	uxth	r3, r3
 8017080:	001a      	movs	r2, r3
 8017082:	69fb      	ldr	r3, [r7, #28]
 8017084:	189b      	adds	r3, r3, r2
 8017086:	61fb      	str	r3, [r7, #28]
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	781b      	ldrb	r3, [r3, #0]
 801708c:	00da      	lsls	r2, r3, #3
 801708e:	69fb      	ldr	r3, [r7, #28]
 8017090:	18d3      	adds	r3, r2, r3
 8017092:	4a94      	ldr	r2, [pc, #592]	@ (80172e4 <HAL_PCD_EP_DB_Transmit+0x380>)
 8017094:	4694      	mov	ip, r2
 8017096:	4463      	add	r3, ip
 8017098:	61bb      	str	r3, [r7, #24]
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	881b      	ldrh	r3, [r3, #0]
 801709e:	b29b      	uxth	r3, r3
 80170a0:	059b      	lsls	r3, r3, #22
 80170a2:	0d9b      	lsrs	r3, r3, #22
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	69bb      	ldr	r3, [r7, #24]
 80170a8:	801a      	strh	r2, [r3, #0]
 80170aa:	69bb      	ldr	r3, [r7, #24]
 80170ac:	881b      	ldrh	r3, [r3, #0]
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	4a8b      	ldr	r2, [pc, #556]	@ (80172e0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80170b2:	4313      	orrs	r3, r2
 80170b4:	b29a      	uxth	r2, r3
 80170b6:	69bb      	ldr	r3, [r7, #24]
 80170b8:	801a      	strh	r2, [r3, #0]
 80170ba:	e018      	b.n	80170ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	785b      	ldrb	r3, [r3, #1]
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d114      	bne.n	80170ee <HAL_PCD_EP_DB_Transmit+0x18a>
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	2250      	movs	r2, #80	@ 0x50
 80170ca:	5a9b      	ldrh	r3, [r3, r2]
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	001a      	movs	r2, r3
 80170d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d2:	189b      	adds	r3, r3, r2
 80170d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	00da      	lsls	r2, r3, #3
 80170dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170de:	18d3      	adds	r3, r2, r3
 80170e0:	4a80      	ldr	r2, [pc, #512]	@ (80172e4 <HAL_PCD_EP_DB_Transmit+0x380>)
 80170e2:	4694      	mov	ip, r2
 80170e4:	4463      	add	r3, ip
 80170e6:	623b      	str	r3, [r7, #32]
 80170e8:	6a3b      	ldr	r3, [r7, #32]
 80170ea:	2200      	movs	r2, #0
 80170ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	781a      	ldrb	r2, [r3, #0]
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	0011      	movs	r1, r2
 80170f6:	0018      	movs	r0, r3
 80170f8:	f008 fd2e 	bl	801fb58 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80170fc:	1dbb      	adds	r3, r7, #6
 80170fe:	881a      	ldrh	r2, [r3, #0]
 8017100:	2380      	movs	r3, #128	@ 0x80
 8017102:	01db      	lsls	r3, r3, #7
 8017104:	4013      	ands	r3, r2
 8017106:	d100      	bne.n	801710a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8017108:	e309      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	001a      	movs	r2, r3
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	009b      	lsls	r3, r3, #2
 8017116:	18d3      	adds	r3, r2, r3
 8017118:	881b      	ldrh	r3, [r3, #0]
 801711a:	b29a      	uxth	r2, r3
 801711c:	2016      	movs	r0, #22
 801711e:	183b      	adds	r3, r7, r0
 8017120:	4971      	ldr	r1, [pc, #452]	@ (80172e8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8017122:	400a      	ands	r2, r1
 8017124:	801a      	strh	r2, [r3, #0]
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	001a      	movs	r2, r3
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	009b      	lsls	r3, r3, #2
 8017132:	18d3      	adds	r3, r2, r3
 8017134:	183a      	adds	r2, r7, r0
 8017136:	8812      	ldrh	r2, [r2, #0]
 8017138:	496c      	ldr	r1, [pc, #432]	@ (80172ec <HAL_PCD_EP_DB_Transmit+0x388>)
 801713a:	430a      	orrs	r2, r1
 801713c:	b292      	uxth	r2, r2
 801713e:	801a      	strh	r2, [r3, #0]
 8017140:	e2ed      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017142:	1dbb      	adds	r3, r7, #6
 8017144:	881a      	ldrh	r2, [r3, #0]
 8017146:	2380      	movs	r3, #128	@ 0x80
 8017148:	01db      	lsls	r3, r3, #7
 801714a:	4013      	ands	r3, r2
 801714c:	d01a      	beq.n	8017184 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	001a      	movs	r2, r3
 8017154:	68bb      	ldr	r3, [r7, #8]
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	009b      	lsls	r3, r3, #2
 801715a:	18d3      	adds	r3, r2, r3
 801715c:	881b      	ldrh	r3, [r3, #0]
 801715e:	b29a      	uxth	r2, r3
 8017160:	208a      	movs	r0, #138	@ 0x8a
 8017162:	183b      	adds	r3, r7, r0
 8017164:	4960      	ldr	r1, [pc, #384]	@ (80172e8 <HAL_PCD_EP_DB_Transmit+0x384>)
 8017166:	400a      	ands	r2, r1
 8017168:	801a      	strh	r2, [r3, #0]
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	001a      	movs	r2, r3
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	009b      	lsls	r3, r3, #2
 8017176:	18d3      	adds	r3, r2, r3
 8017178:	183a      	adds	r2, r7, r0
 801717a:	8812      	ldrh	r2, [r2, #0]
 801717c:	495b      	ldr	r1, [pc, #364]	@ (80172ec <HAL_PCD_EP_DB_Transmit+0x388>)
 801717e:	430a      	orrs	r2, r1
 8017180:	b292      	uxth	r2, r2
 8017182:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	2224      	movs	r2, #36	@ 0x24
 8017188:	5c9b      	ldrb	r3, [r3, r2]
 801718a:	2b01      	cmp	r3, #1
 801718c:	d000      	beq.n	8017190 <HAL_PCD_EP_DB_Transmit+0x22c>
 801718e:	e2c6      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	695a      	ldr	r2, [r3, #20]
 8017194:	2186      	movs	r1, #134	@ 0x86
 8017196:	187b      	adds	r3, r7, r1
 8017198:	881b      	ldrh	r3, [r3, #0]
 801719a:	18d2      	adds	r2, r2, r3
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	69da      	ldr	r2, [r3, #28]
 80171a4:	187b      	adds	r3, r7, r1
 80171a6:	881b      	ldrh	r3, [r3, #0]
 80171a8:	18d2      	adds	r2, r2, r3
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	6a1a      	ldr	r2, [r3, #32]
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	691b      	ldr	r3, [r3, #16]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d30c      	bcc.n	80171d4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	691b      	ldr	r3, [r3, #16]
 80171be:	218c      	movs	r1, #140	@ 0x8c
 80171c0:	187a      	adds	r2, r7, r1
 80171c2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80171c4:	68bb      	ldr	r3, [r7, #8]
 80171c6:	6a1a      	ldr	r2, [r3, #32]
 80171c8:	187b      	adds	r3, r7, r1
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	1ad2      	subs	r2, r2, r3
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	621a      	str	r2, [r3, #32]
 80171d2:	e01a      	b.n	801720a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80171d4:	68bb      	ldr	r3, [r7, #8]
 80171d6:	6a1b      	ldr	r3, [r3, #32]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d10a      	bne.n	80171f2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80171dc:	2386      	movs	r3, #134	@ 0x86
 80171de:	18fb      	adds	r3, r7, r3
 80171e0:	881b      	ldrh	r3, [r3, #0]
 80171e2:	228c      	movs	r2, #140	@ 0x8c
 80171e4:	18ba      	adds	r2, r7, r2
 80171e6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	2224      	movs	r2, #36	@ 0x24
 80171ec:	2100      	movs	r1, #0
 80171ee:	5499      	strb	r1, [r3, r2]
 80171f0:	e00b      	b.n	801720a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	2224      	movs	r2, #36	@ 0x24
 80171f6:	2100      	movs	r1, #0
 80171f8:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	6a1b      	ldr	r3, [r3, #32]
 80171fe:	228c      	movs	r2, #140	@ 0x8c
 8017200:	18ba      	adds	r2, r7, r2
 8017202:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	2200      	movs	r2, #0
 8017208:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	785b      	ldrb	r3, [r3, #1]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d000      	beq.n	8017214 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8017212:	e06d      	b.n	80172f0 <HAL_PCD_EP_DB_Transmit+0x38c>
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	2250      	movs	r2, #80	@ 0x50
 8017220:	5a9b      	ldrh	r3, [r3, r2]
 8017222:	b29b      	uxth	r3, r3
 8017224:	001a      	movs	r2, r3
 8017226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017228:	189b      	adds	r3, r3, r2
 801722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	00da      	lsls	r2, r3, #3
 8017232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017234:	18d3      	adds	r3, r2, r3
 8017236:	4a29      	ldr	r2, [pc, #164]	@ (80172dc <HAL_PCD_EP_DB_Transmit+0x378>)
 8017238:	4694      	mov	ip, r2
 801723a:	4463      	add	r3, ip
 801723c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801723e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017240:	881b      	ldrh	r3, [r3, #0]
 8017242:	b29b      	uxth	r3, r3
 8017244:	059b      	lsls	r3, r3, #22
 8017246:	0d9b      	lsrs	r3, r3, #22
 8017248:	b29a      	uxth	r2, r3
 801724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801724c:	801a      	strh	r2, [r3, #0]
 801724e:	228c      	movs	r2, #140	@ 0x8c
 8017250:	18bb      	adds	r3, r7, r2
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	2b3e      	cmp	r3, #62	@ 0x3e
 8017256:	d91a      	bls.n	801728e <HAL_PCD_EP_DB_Transmit+0x32a>
 8017258:	18bb      	adds	r3, r7, r2
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	095b      	lsrs	r3, r3, #5
 801725e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017260:	18bb      	adds	r3, r7, r2
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	221f      	movs	r2, #31
 8017266:	4013      	ands	r3, r2
 8017268:	d102      	bne.n	8017270 <HAL_PCD_EP_DB_Transmit+0x30c>
 801726a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801726c:	3b01      	subs	r3, #1
 801726e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017272:	881b      	ldrh	r3, [r3, #0]
 8017274:	b29a      	uxth	r2, r3
 8017276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017278:	b29b      	uxth	r3, r3
 801727a:	029b      	lsls	r3, r3, #10
 801727c:	b29b      	uxth	r3, r3
 801727e:	4313      	orrs	r3, r2
 8017280:	b29b      	uxth	r3, r3
 8017282:	4a17      	ldr	r2, [pc, #92]	@ (80172e0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017284:	4313      	orrs	r3, r2
 8017286:	b29a      	uxth	r2, r3
 8017288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801728a:	801a      	strh	r2, [r3, #0]
 801728c:	e04f      	b.n	801732e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801728e:	238c      	movs	r3, #140	@ 0x8c
 8017290:	18fb      	adds	r3, r7, r3
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d108      	bne.n	80172aa <HAL_PCD_EP_DB_Transmit+0x346>
 8017298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801729a:	881b      	ldrh	r3, [r3, #0]
 801729c:	b29b      	uxth	r3, r3
 801729e:	4a10      	ldr	r2, [pc, #64]	@ (80172e0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80172a0:	4313      	orrs	r3, r2
 80172a2:	b29a      	uxth	r2, r3
 80172a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172a6:	801a      	strh	r2, [r3, #0]
 80172a8:	e041      	b.n	801732e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80172aa:	228c      	movs	r2, #140	@ 0x8c
 80172ac:	18bb      	adds	r3, r7, r2
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	085b      	lsrs	r3, r3, #1
 80172b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80172b4:	18bb      	adds	r3, r7, r2
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	2201      	movs	r2, #1
 80172ba:	4013      	ands	r3, r2
 80172bc:	d002      	beq.n	80172c4 <HAL_PCD_EP_DB_Transmit+0x360>
 80172be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80172c0:	3301      	adds	r3, #1
 80172c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80172c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172c6:	881b      	ldrh	r3, [r3, #0]
 80172c8:	b29a      	uxth	r2, r3
 80172ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80172cc:	b29b      	uxth	r3, r3
 80172ce:	029b      	lsls	r3, r3, #10
 80172d0:	b29b      	uxth	r3, r3
 80172d2:	4313      	orrs	r3, r2
 80172d4:	b29a      	uxth	r2, r3
 80172d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d8:	801a      	strh	r2, [r3, #0]
 80172da:	e028      	b.n	801732e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80172dc:	00000402 	.word	0x00000402
 80172e0:	ffff8000 	.word	0xffff8000
 80172e4:	00000406 	.word	0x00000406
 80172e8:	ffff8f8f 	.word	0xffff8f8f
 80172ec:	ffffc080 	.word	0xffffc080
 80172f0:	68bb      	ldr	r3, [r7, #8]
 80172f2:	785b      	ldrb	r3, [r3, #1]
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	d11a      	bne.n	801732e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2250      	movs	r2, #80	@ 0x50
 8017304:	5a9b      	ldrh	r3, [r3, r2]
 8017306:	b29b      	uxth	r3, r3
 8017308:	001a      	movs	r2, r3
 801730a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801730c:	189b      	adds	r3, r3, r2
 801730e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	00da      	lsls	r2, r3, #3
 8017316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017318:	18d3      	adds	r3, r2, r3
 801731a:	4adb      	ldr	r2, [pc, #876]	@ (8017688 <HAL_PCD_EP_DB_Transmit+0x724>)
 801731c:	4694      	mov	ip, r2
 801731e:	4463      	add	r3, ip
 8017320:	643b      	str	r3, [r7, #64]	@ 0x40
 8017322:	238c      	movs	r3, #140	@ 0x8c
 8017324:	18fb      	adds	r3, r7, r3
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	b29a      	uxth	r2, r3
 801732a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801732c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	6818      	ldr	r0, [r3, #0]
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	6959      	ldr	r1, [r3, #20]
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	891a      	ldrh	r2, [r3, #8]
 801733a:	238c      	movs	r3, #140	@ 0x8c
 801733c:	18fb      	adds	r3, r7, r3
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	b29b      	uxth	r3, r3
 8017342:	f006 fb85 	bl	801da50 <USB_WritePMA>
 8017346:	e1ea      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	2250      	movs	r2, #80	@ 0x50
 801734e:	5a9b      	ldrh	r3, [r3, r2]
 8017350:	b29b      	uxth	r3, r3
 8017352:	001a      	movs	r2, r3
 8017354:	68bb      	ldr	r3, [r7, #8]
 8017356:	781b      	ldrb	r3, [r3, #0]
 8017358:	00db      	lsls	r3, r3, #3
 801735a:	18d2      	adds	r2, r2, r3
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	18d3      	adds	r3, r2, r3
 8017362:	4aca      	ldr	r2, [pc, #808]	@ (801768c <HAL_PCD_EP_DB_Transmit+0x728>)
 8017364:	4694      	mov	ip, r2
 8017366:	4463      	add	r3, ip
 8017368:	881a      	ldrh	r2, [r3, #0]
 801736a:	2186      	movs	r1, #134	@ 0x86
 801736c:	187b      	adds	r3, r7, r1
 801736e:	0592      	lsls	r2, r2, #22
 8017370:	0d92      	lsrs	r2, r2, #22
 8017372:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	699a      	ldr	r2, [r3, #24]
 8017378:	187b      	adds	r3, r7, r1
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	429a      	cmp	r2, r3
 801737e:	d307      	bcc.n	8017390 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	699a      	ldr	r2, [r3, #24]
 8017384:	187b      	adds	r3, r7, r1
 8017386:	881b      	ldrh	r3, [r3, #0]
 8017388:	1ad2      	subs	r2, r2, r3
 801738a:	68bb      	ldr	r3, [r7, #8]
 801738c:	619a      	str	r2, [r3, #24]
 801738e:	e002      	b.n	8017396 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	2200      	movs	r2, #0
 8017394:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	699b      	ldr	r3, [r3, #24]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d000      	beq.n	80173a0 <HAL_PCD_EP_DB_Transmit+0x43c>
 801739e:	e0bb      	b.n	8017518 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80173a0:	68bb      	ldr	r3, [r7, #8]
 80173a2:	785b      	ldrb	r3, [r3, #1]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d125      	bne.n	80173f4 <HAL_PCD_EP_DB_Transmit+0x490>
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	2250      	movs	r2, #80	@ 0x50
 80173b4:	5a9b      	ldrh	r3, [r3, r2]
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	001a      	movs	r2, r3
 80173ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80173bc:	189b      	adds	r3, r3, r2
 80173be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	00da      	lsls	r2, r3, #3
 80173c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80173c8:	18d3      	adds	r3, r2, r3
 80173ca:	4aaf      	ldr	r2, [pc, #700]	@ (8017688 <HAL_PCD_EP_DB_Transmit+0x724>)
 80173cc:	4694      	mov	ip, r2
 80173ce:	4463      	add	r3, ip
 80173d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80173d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80173d4:	881b      	ldrh	r3, [r3, #0]
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	059b      	lsls	r3, r3, #22
 80173da:	0d9b      	lsrs	r3, r3, #22
 80173dc:	b29a      	uxth	r2, r3
 80173de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80173e0:	801a      	strh	r2, [r3, #0]
 80173e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80173e4:	881b      	ldrh	r3, [r3, #0]
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	4aa9      	ldr	r2, [pc, #676]	@ (8017690 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80173ea:	4313      	orrs	r3, r2
 80173ec:	b29a      	uxth	r2, r3
 80173ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80173f0:	801a      	strh	r2, [r3, #0]
 80173f2:	e01b      	b.n	801742c <HAL_PCD_EP_DB_Transmit+0x4c8>
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	785b      	ldrb	r3, [r3, #1]
 80173f8:	2b01      	cmp	r3, #1
 80173fa:	d117      	bne.n	801742c <HAL_PCD_EP_DB_Transmit+0x4c8>
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	667b      	str	r3, [r7, #100]	@ 0x64
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	2250      	movs	r2, #80	@ 0x50
 8017408:	5a9b      	ldrh	r3, [r3, r2]
 801740a:	b29b      	uxth	r3, r3
 801740c:	001a      	movs	r2, r3
 801740e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017410:	189b      	adds	r3, r3, r2
 8017412:	667b      	str	r3, [r7, #100]	@ 0x64
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	781b      	ldrb	r3, [r3, #0]
 8017418:	00da      	lsls	r2, r3, #3
 801741a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801741c:	18d3      	adds	r3, r2, r3
 801741e:	4a9a      	ldr	r2, [pc, #616]	@ (8017688 <HAL_PCD_EP_DB_Transmit+0x724>)
 8017420:	4694      	mov	ip, r2
 8017422:	4463      	add	r3, ip
 8017424:	663b      	str	r3, [r7, #96]	@ 0x60
 8017426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017428:	2200      	movs	r2, #0
 801742a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	677b      	str	r3, [r7, #116]	@ 0x74
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	785b      	ldrb	r3, [r3, #1]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d12b      	bne.n	8017492 <HAL_PCD_EP_DB_Transmit+0x52e>
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	2250      	movs	r2, #80	@ 0x50
 8017446:	5a9b      	ldrh	r3, [r3, r2]
 8017448:	b29b      	uxth	r3, r3
 801744a:	001a      	movs	r2, r3
 801744c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801744e:	189b      	adds	r3, r3, r2
 8017450:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	00da      	lsls	r2, r3, #3
 8017458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801745a:	18d3      	adds	r3, r2, r3
 801745c:	4a8b      	ldr	r2, [pc, #556]	@ (801768c <HAL_PCD_EP_DB_Transmit+0x728>)
 801745e:	4694      	mov	ip, r2
 8017460:	4463      	add	r3, ip
 8017462:	2180      	movs	r1, #128	@ 0x80
 8017464:	187a      	adds	r2, r7, r1
 8017466:	6013      	str	r3, [r2, #0]
 8017468:	187b      	adds	r3, r7, r1
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	881b      	ldrh	r3, [r3, #0]
 801746e:	b29b      	uxth	r3, r3
 8017470:	059b      	lsls	r3, r3, #22
 8017472:	0d9b      	lsrs	r3, r3, #22
 8017474:	b29a      	uxth	r2, r3
 8017476:	187b      	adds	r3, r7, r1
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	801a      	strh	r2, [r3, #0]
 801747c:	187b      	adds	r3, r7, r1
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	881b      	ldrh	r3, [r3, #0]
 8017482:	b29b      	uxth	r3, r3
 8017484:	4a82      	ldr	r2, [pc, #520]	@ (8017690 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017486:	4313      	orrs	r3, r2
 8017488:	b29a      	uxth	r2, r3
 801748a:	187b      	adds	r3, r7, r1
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	801a      	strh	r2, [r3, #0]
 8017490:	e018      	b.n	80174c4 <HAL_PCD_EP_DB_Transmit+0x560>
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	785b      	ldrb	r3, [r3, #1]
 8017496:	2b01      	cmp	r3, #1
 8017498:	d114      	bne.n	80174c4 <HAL_PCD_EP_DB_Transmit+0x560>
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	2250      	movs	r2, #80	@ 0x50
 80174a0:	5a9b      	ldrh	r3, [r3, r2]
 80174a2:	b29b      	uxth	r3, r3
 80174a4:	001a      	movs	r2, r3
 80174a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80174a8:	189b      	adds	r3, r3, r2
 80174aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	00da      	lsls	r2, r3, #3
 80174b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80174b4:	18d3      	adds	r3, r2, r3
 80174b6:	4a75      	ldr	r2, [pc, #468]	@ (801768c <HAL_PCD_EP_DB_Transmit+0x728>)
 80174b8:	4694      	mov	ip, r2
 80174ba:	4463      	add	r3, ip
 80174bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80174be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80174c0:	2200      	movs	r2, #0
 80174c2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80174c4:	68bb      	ldr	r3, [r7, #8]
 80174c6:	781a      	ldrb	r2, [r3, #0]
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	0011      	movs	r1, r2
 80174cc:	0018      	movs	r0, r3
 80174ce:	f008 fb43 	bl	801fb58 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80174d2:	1dbb      	adds	r3, r7, #6
 80174d4:	881a      	ldrh	r2, [r3, #0]
 80174d6:	2380      	movs	r3, #128	@ 0x80
 80174d8:	01db      	lsls	r3, r3, #7
 80174da:	4013      	ands	r3, r2
 80174dc:	d000      	beq.n	80174e0 <HAL_PCD_EP_DB_Transmit+0x57c>
 80174de:	e11e      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	001a      	movs	r2, r3
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	009b      	lsls	r3, r3, #2
 80174ec:	18d3      	adds	r3, r2, r3
 80174ee:	881b      	ldrh	r3, [r3, #0]
 80174f0:	b29a      	uxth	r2, r3
 80174f2:	2088      	movs	r0, #136	@ 0x88
 80174f4:	183b      	adds	r3, r7, r0
 80174f6:	4967      	ldr	r1, [pc, #412]	@ (8017694 <HAL_PCD_EP_DB_Transmit+0x730>)
 80174f8:	400a      	ands	r2, r1
 80174fa:	801a      	strh	r2, [r3, #0]
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	001a      	movs	r2, r3
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	781b      	ldrb	r3, [r3, #0]
 8017506:	009b      	lsls	r3, r3, #2
 8017508:	18d3      	adds	r3, r2, r3
 801750a:	183a      	adds	r2, r7, r0
 801750c:	8812      	ldrh	r2, [r2, #0]
 801750e:	4962      	ldr	r1, [pc, #392]	@ (8017698 <HAL_PCD_EP_DB_Transmit+0x734>)
 8017510:	430a      	orrs	r2, r1
 8017512:	b292      	uxth	r2, r2
 8017514:	801a      	strh	r2, [r3, #0]
 8017516:	e102      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8017518:	1dbb      	adds	r3, r7, #6
 801751a:	881a      	ldrh	r2, [r3, #0]
 801751c:	2380      	movs	r3, #128	@ 0x80
 801751e:	01db      	lsls	r3, r3, #7
 8017520:	4013      	ands	r3, r2
 8017522:	d11a      	bne.n	801755a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	001a      	movs	r2, r3
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	781b      	ldrb	r3, [r3, #0]
 801752e:	009b      	lsls	r3, r3, #2
 8017530:	18d3      	adds	r3, r2, r3
 8017532:	881b      	ldrh	r3, [r3, #0]
 8017534:	b29a      	uxth	r2, r3
 8017536:	204e      	movs	r0, #78	@ 0x4e
 8017538:	183b      	adds	r3, r7, r0
 801753a:	4956      	ldr	r1, [pc, #344]	@ (8017694 <HAL_PCD_EP_DB_Transmit+0x730>)
 801753c:	400a      	ands	r2, r1
 801753e:	801a      	strh	r2, [r3, #0]
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	001a      	movs	r2, r3
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	781b      	ldrb	r3, [r3, #0]
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	18d3      	adds	r3, r2, r3
 801754e:	183a      	adds	r2, r7, r0
 8017550:	8812      	ldrh	r2, [r2, #0]
 8017552:	4951      	ldr	r1, [pc, #324]	@ (8017698 <HAL_PCD_EP_DB_Transmit+0x734>)
 8017554:	430a      	orrs	r2, r1
 8017556:	b292      	uxth	r2, r2
 8017558:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801755a:	68bb      	ldr	r3, [r7, #8]
 801755c:	2224      	movs	r2, #36	@ 0x24
 801755e:	5c9b      	ldrb	r3, [r3, r2]
 8017560:	2b01      	cmp	r3, #1
 8017562:	d000      	beq.n	8017566 <HAL_PCD_EP_DB_Transmit+0x602>
 8017564:	e0db      	b.n	801771e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	695a      	ldr	r2, [r3, #20]
 801756a:	2186      	movs	r1, #134	@ 0x86
 801756c:	187b      	adds	r3, r7, r1
 801756e:	881b      	ldrh	r3, [r3, #0]
 8017570:	18d2      	adds	r2, r2, r3
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	69da      	ldr	r2, [r3, #28]
 801757a:	187b      	adds	r3, r7, r1
 801757c:	881b      	ldrh	r3, [r3, #0]
 801757e:	18d2      	adds	r2, r2, r3
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	6a1a      	ldr	r2, [r3, #32]
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	691b      	ldr	r3, [r3, #16]
 801758c:	429a      	cmp	r2, r3
 801758e:	d30c      	bcc.n	80175aa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8017590:	68bb      	ldr	r3, [r7, #8]
 8017592:	691b      	ldr	r3, [r3, #16]
 8017594:	218c      	movs	r1, #140	@ 0x8c
 8017596:	187a      	adds	r2, r7, r1
 8017598:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	6a1a      	ldr	r2, [r3, #32]
 801759e:	187b      	adds	r3, r7, r1
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	1ad2      	subs	r2, r2, r3
 80175a4:	68bb      	ldr	r3, [r7, #8]
 80175a6:	621a      	str	r2, [r3, #32]
 80175a8:	e01a      	b.n	80175e0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80175aa:	68bb      	ldr	r3, [r7, #8]
 80175ac:	6a1b      	ldr	r3, [r3, #32]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d10a      	bne.n	80175c8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80175b2:	2386      	movs	r3, #134	@ 0x86
 80175b4:	18fb      	adds	r3, r7, r3
 80175b6:	881b      	ldrh	r3, [r3, #0]
 80175b8:	228c      	movs	r2, #140	@ 0x8c
 80175ba:	18ba      	adds	r2, r7, r2
 80175bc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80175be:	68bb      	ldr	r3, [r7, #8]
 80175c0:	2224      	movs	r2, #36	@ 0x24
 80175c2:	2100      	movs	r1, #0
 80175c4:	5499      	strb	r1, [r3, r2]
 80175c6:	e00b      	b.n	80175e0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	6a1b      	ldr	r3, [r3, #32]
 80175cc:	228c      	movs	r2, #140	@ 0x8c
 80175ce:	18ba      	adds	r2, r7, r2
 80175d0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	2200      	movs	r2, #0
 80175d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	2224      	movs	r2, #36	@ 0x24
 80175dc:	2100      	movs	r1, #0
 80175de:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	785b      	ldrb	r3, [r3, #1]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d000      	beq.n	80175f0 <HAL_PCD_EP_DB_Transmit+0x68c>
 80175ee:	e06e      	b.n	80176ce <HAL_PCD_EP_DB_Transmit+0x76a>
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2250      	movs	r2, #80	@ 0x50
 80175fc:	5a9b      	ldrh	r3, [r3, r2]
 80175fe:	b29b      	uxth	r3, r3
 8017600:	001a      	movs	r2, r3
 8017602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017604:	189b      	adds	r3, r3, r2
 8017606:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017608:	68bb      	ldr	r3, [r7, #8]
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	00da      	lsls	r2, r3, #3
 801760e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017610:	18d3      	adds	r3, r2, r3
 8017612:	4a1e      	ldr	r2, [pc, #120]	@ (801768c <HAL_PCD_EP_DB_Transmit+0x728>)
 8017614:	4694      	mov	ip, r2
 8017616:	4463      	add	r3, ip
 8017618:	65bb      	str	r3, [r7, #88]	@ 0x58
 801761a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801761c:	881b      	ldrh	r3, [r3, #0]
 801761e:	b29b      	uxth	r3, r3
 8017620:	059b      	lsls	r3, r3, #22
 8017622:	0d9b      	lsrs	r3, r3, #22
 8017624:	b29a      	uxth	r2, r3
 8017626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017628:	801a      	strh	r2, [r3, #0]
 801762a:	228c      	movs	r2, #140	@ 0x8c
 801762c:	18bb      	adds	r3, r7, r2
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	2b3e      	cmp	r3, #62	@ 0x3e
 8017632:	d91a      	bls.n	801766a <HAL_PCD_EP_DB_Transmit+0x706>
 8017634:	18bb      	adds	r3, r7, r2
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	095b      	lsrs	r3, r3, #5
 801763a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801763c:	18bb      	adds	r3, r7, r2
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	221f      	movs	r2, #31
 8017642:	4013      	ands	r3, r2
 8017644:	d102      	bne.n	801764c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8017646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017648:	3b01      	subs	r3, #1
 801764a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801764c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801764e:	881b      	ldrh	r3, [r3, #0]
 8017650:	b29a      	uxth	r2, r3
 8017652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017654:	b29b      	uxth	r3, r3
 8017656:	029b      	lsls	r3, r3, #10
 8017658:	b29b      	uxth	r3, r3
 801765a:	4313      	orrs	r3, r2
 801765c:	b29b      	uxth	r3, r3
 801765e:	4a0c      	ldr	r2, [pc, #48]	@ (8017690 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8017660:	4313      	orrs	r3, r2
 8017662:	b29a      	uxth	r2, r3
 8017664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017666:	801a      	strh	r2, [r3, #0]
 8017668:	e04d      	b.n	8017706 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801766a:	238c      	movs	r3, #140	@ 0x8c
 801766c:	18fb      	adds	r3, r7, r3
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d113      	bne.n	801769c <HAL_PCD_EP_DB_Transmit+0x738>
 8017674:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017676:	881b      	ldrh	r3, [r3, #0]
 8017678:	b29b      	uxth	r3, r3
 801767a:	4a05      	ldr	r2, [pc, #20]	@ (8017690 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801767c:	4313      	orrs	r3, r2
 801767e:	b29a      	uxth	r2, r3
 8017680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017682:	801a      	strh	r2, [r3, #0]
 8017684:	e03f      	b.n	8017706 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8017686:	46c0      	nop			@ (mov r8, r8)
 8017688:	00000402 	.word	0x00000402
 801768c:	00000406 	.word	0x00000406
 8017690:	ffff8000 	.word	0xffff8000
 8017694:	ffff8f8f 	.word	0xffff8f8f
 8017698:	ffffc080 	.word	0xffffc080
 801769c:	228c      	movs	r2, #140	@ 0x8c
 801769e:	18bb      	adds	r3, r7, r2
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	085b      	lsrs	r3, r3, #1
 80176a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80176a6:	18bb      	adds	r3, r7, r2
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	2201      	movs	r2, #1
 80176ac:	4013      	ands	r3, r2
 80176ae:	d002      	beq.n	80176b6 <HAL_PCD_EP_DB_Transmit+0x752>
 80176b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80176b2:	3301      	adds	r3, #1
 80176b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80176b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176b8:	881b      	ldrh	r3, [r3, #0]
 80176ba:	b29a      	uxth	r2, r3
 80176bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80176be:	b29b      	uxth	r3, r3
 80176c0:	029b      	lsls	r3, r3, #10
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	4313      	orrs	r3, r2
 80176c6:	b29a      	uxth	r2, r3
 80176c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176ca:	801a      	strh	r2, [r3, #0]
 80176cc:	e01b      	b.n	8017706 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	785b      	ldrb	r3, [r3, #1]
 80176d2:	2b01      	cmp	r3, #1
 80176d4:	d117      	bne.n	8017706 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2250      	movs	r2, #80	@ 0x50
 80176dc:	5a9b      	ldrh	r3, [r3, r2]
 80176de:	b29b      	uxth	r3, r3
 80176e0:	001a      	movs	r2, r3
 80176e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176e4:	189b      	adds	r3, r3, r2
 80176e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80176e8:	68bb      	ldr	r3, [r7, #8]
 80176ea:	781b      	ldrb	r3, [r3, #0]
 80176ec:	00da      	lsls	r2, r3, #3
 80176ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176f0:	18d3      	adds	r3, r2, r3
 80176f2:	4a21      	ldr	r2, [pc, #132]	@ (8017778 <HAL_PCD_EP_DB_Transmit+0x814>)
 80176f4:	4694      	mov	ip, r2
 80176f6:	4463      	add	r3, ip
 80176f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80176fa:	238c      	movs	r3, #140	@ 0x8c
 80176fc:	18fb      	adds	r3, r7, r3
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	b29a      	uxth	r2, r3
 8017702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017704:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	6818      	ldr	r0, [r3, #0]
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	6959      	ldr	r1, [r3, #20]
 801770e:	68bb      	ldr	r3, [r7, #8]
 8017710:	895a      	ldrh	r2, [r3, #10]
 8017712:	238c      	movs	r3, #140	@ 0x8c
 8017714:	18fb      	adds	r3, r7, r3
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	b29b      	uxth	r3, r3
 801771a:	f006 f999 	bl	801da50 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	001a      	movs	r2, r3
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	009b      	lsls	r3, r3, #2
 801772a:	18d3      	adds	r3, r2, r3
 801772c:	881b      	ldrh	r3, [r3, #0]
 801772e:	b29a      	uxth	r2, r3
 8017730:	2014      	movs	r0, #20
 8017732:	183b      	adds	r3, r7, r0
 8017734:	4911      	ldr	r1, [pc, #68]	@ (801777c <HAL_PCD_EP_DB_Transmit+0x818>)
 8017736:	400a      	ands	r2, r1
 8017738:	801a      	strh	r2, [r3, #0]
 801773a:	183b      	adds	r3, r7, r0
 801773c:	183a      	adds	r2, r7, r0
 801773e:	8812      	ldrh	r2, [r2, #0]
 8017740:	2110      	movs	r1, #16
 8017742:	404a      	eors	r2, r1
 8017744:	801a      	strh	r2, [r3, #0]
 8017746:	183b      	adds	r3, r7, r0
 8017748:	183a      	adds	r2, r7, r0
 801774a:	8812      	ldrh	r2, [r2, #0]
 801774c:	2120      	movs	r1, #32
 801774e:	404a      	eors	r2, r1
 8017750:	801a      	strh	r2, [r3, #0]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	001a      	movs	r2, r3
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	009b      	lsls	r3, r3, #2
 801775e:	18d3      	adds	r3, r2, r3
 8017760:	183a      	adds	r2, r7, r0
 8017762:	8812      	ldrh	r2, [r2, #0]
 8017764:	4906      	ldr	r1, [pc, #24]	@ (8017780 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8017766:	430a      	orrs	r2, r1
 8017768:	b292      	uxth	r2, r2
 801776a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801776c:	2300      	movs	r3, #0
}
 801776e:	0018      	movs	r0, r3
 8017770:	46bd      	mov	sp, r7
 8017772:	b024      	add	sp, #144	@ 0x90
 8017774:	bd80      	pop	{r7, pc}
 8017776:	46c0      	nop			@ (mov r8, r8)
 8017778:	00000406 	.word	0x00000406
 801777c:	ffff8fbf 	.word	0xffff8fbf
 8017780:	ffff8080 	.word	0xffff8080

08017784 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8017784:	b590      	push	{r4, r7, lr}
 8017786:	b087      	sub	sp, #28
 8017788:	af00      	add	r7, sp, #0
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	0008      	movs	r0, r1
 801778e:	0011      	movs	r1, r2
 8017790:	607b      	str	r3, [r7, #4]
 8017792:	240a      	movs	r4, #10
 8017794:	193b      	adds	r3, r7, r4
 8017796:	1c02      	adds	r2, r0, #0
 8017798:	801a      	strh	r2, [r3, #0]
 801779a:	2308      	movs	r3, #8
 801779c:	18fb      	adds	r3, r7, r3
 801779e:	1c0a      	adds	r2, r1, #0
 80177a0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80177a2:	0021      	movs	r1, r4
 80177a4:	187b      	adds	r3, r7, r1
 80177a6:	881b      	ldrh	r3, [r3, #0]
 80177a8:	2280      	movs	r2, #128	@ 0x80
 80177aa:	4013      	ands	r3, r2
 80177ac:	b29b      	uxth	r3, r3
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d00c      	beq.n	80177cc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80177b2:	187b      	adds	r3, r7, r1
 80177b4:	881b      	ldrh	r3, [r3, #0]
 80177b6:	2207      	movs	r2, #7
 80177b8:	4013      	ands	r3, r2
 80177ba:	1c5a      	adds	r2, r3, #1
 80177bc:	0013      	movs	r3, r2
 80177be:	009b      	lsls	r3, r3, #2
 80177c0:	189b      	adds	r3, r3, r2
 80177c2:	00db      	lsls	r3, r3, #3
 80177c4:	68fa      	ldr	r2, [r7, #12]
 80177c6:	18d3      	adds	r3, r2, r3
 80177c8:	617b      	str	r3, [r7, #20]
 80177ca:	e00b      	b.n	80177e4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80177cc:	230a      	movs	r3, #10
 80177ce:	18fb      	adds	r3, r7, r3
 80177d0:	881a      	ldrh	r2, [r3, #0]
 80177d2:	0013      	movs	r3, r2
 80177d4:	009b      	lsls	r3, r3, #2
 80177d6:	189b      	adds	r3, r3, r2
 80177d8:	00db      	lsls	r3, r3, #3
 80177da:	3369      	adds	r3, #105	@ 0x69
 80177dc:	33ff      	adds	r3, #255	@ 0xff
 80177de:	68fa      	ldr	r2, [r7, #12]
 80177e0:	18d3      	adds	r3, r2, r3
 80177e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80177e4:	2308      	movs	r3, #8
 80177e6:	18fb      	adds	r3, r7, r3
 80177e8:	881b      	ldrh	r3, [r3, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d107      	bne.n	80177fe <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	2200      	movs	r2, #0
 80177f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	b29a      	uxth	r2, r3
 80177f8:	697b      	ldr	r3, [r7, #20]
 80177fa:	80da      	strh	r2, [r3, #6]
 80177fc:	e00b      	b.n	8017816 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	2201      	movs	r2, #1
 8017802:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	b29a      	uxth	r2, r3
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	0c1b      	lsrs	r3, r3, #16
 8017810:	b29a      	uxth	r2, r3
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8017816:	2300      	movs	r3, #0
}
 8017818:	0018      	movs	r0, r3
 801781a:	46bd      	mov	sp, r7
 801781c:	b007      	add	sp, #28
 801781e:	bd90      	pop	{r4, r7, pc}

08017820 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b084      	sub	sp, #16
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	23ba      	movs	r3, #186	@ 0xba
 8017832:	009b      	lsls	r3, r3, #2
 8017834:	2101      	movs	r1, #1
 8017836:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8017838:	687a      	ldr	r2, [r7, #4]
 801783a:	23b8      	movs	r3, #184	@ 0xb8
 801783c:	009b      	lsls	r3, r3, #2
 801783e:	2100      	movs	r1, #0
 8017840:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	2254      	movs	r2, #84	@ 0x54
 8017846:	5a9b      	ldrh	r3, [r3, r2]
 8017848:	b29b      	uxth	r3, r3
 801784a:	2201      	movs	r2, #1
 801784c:	4313      	orrs	r3, r2
 801784e:	b299      	uxth	r1, r3
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2254      	movs	r2, #84	@ 0x54
 8017854:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	2254      	movs	r2, #84	@ 0x54
 801785a:	5a9b      	ldrh	r3, [r3, r2]
 801785c:	b29b      	uxth	r3, r3
 801785e:	2202      	movs	r2, #2
 8017860:	4313      	orrs	r3, r2
 8017862:	b299      	uxth	r1, r3
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	2254      	movs	r2, #84	@ 0x54
 8017868:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801786a:	2300      	movs	r3, #0
}
 801786c:	0018      	movs	r0, r3
 801786e:	46bd      	mov	sp, r7
 8017870:	b004      	add	sp, #16
 8017872:	bd80      	pop	{r7, pc}

08017874 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	000a      	movs	r2, r1
 801787e:	1cfb      	adds	r3, r7, #3
 8017880:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8017882:	46c0      	nop			@ (mov r8, r8)
 8017884:	46bd      	mov	sp, r7
 8017886:	b002      	add	sp, #8
 8017888:	bd80      	pop	{r7, pc}
	...

0801788c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8017890:	4b04      	ldr	r3, [pc, #16]	@ (80178a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8017892:	681a      	ldr	r2, [r3, #0]
 8017894:	4b03      	ldr	r3, [pc, #12]	@ (80178a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8017896:	2180      	movs	r1, #128	@ 0x80
 8017898:	0049      	lsls	r1, r1, #1
 801789a:	430a      	orrs	r2, r1
 801789c:	601a      	str	r2, [r3, #0]
}
 801789e:	46c0      	nop			@ (mov r8, r8)
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bd80      	pop	{r7, pc}
 80178a4:	40007000 	.word	0x40007000

080178a8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80178ac:	4b04      	ldr	r3, [pc, #16]	@ (80178c0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	4b03      	ldr	r3, [pc, #12]	@ (80178c0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80178b2:	4904      	ldr	r1, [pc, #16]	@ (80178c4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80178b4:	400a      	ands	r2, r1
 80178b6:	601a      	str	r2, [r3, #0]
}
 80178b8:	46c0      	nop			@ (mov r8, r8)
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}
 80178be:	46c0      	nop			@ (mov r8, r8)
 80178c0:	40007000 	.word	0x40007000
 80178c4:	fffffeff 	.word	0xfffffeff

080178c8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b086      	sub	sp, #24
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	000a      	movs	r2, r1
 80178d2:	1cfb      	adds	r3, r7, #3
 80178d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80178d6:	2300      	movs	r3, #0
 80178d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80178da:	4b25      	ldr	r3, [pc, #148]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 80178dc:	681a      	ldr	r2, [r3, #0]
 80178de:	2380      	movs	r3, #128	@ 0x80
 80178e0:	009b      	lsls	r3, r3, #2
 80178e2:	4013      	ands	r3, r2
 80178e4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80178e6:	4b23      	ldr	r3, [pc, #140]	@ (8017974 <HAL_PWR_EnterSTOPMode+0xac>)
 80178e8:	6a1b      	ldr	r3, [r3, #32]
 80178ea:	2201      	movs	r2, #1
 80178ec:	4013      	ands	r3, r2
 80178ee:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d008      	beq.n	8017908 <HAL_PWR_EnterSTOPMode+0x40>
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d005      	beq.n	8017908 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80178fc:	4b1c      	ldr	r3, [pc, #112]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 80178fe:	681a      	ldr	r2, [r3, #0]
 8017900:	4b1b      	ldr	r3, [pc, #108]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017902:	491d      	ldr	r1, [pc, #116]	@ (8017978 <HAL_PWR_EnterSTOPMode+0xb0>)
 8017904:	400a      	ands	r2, r1
 8017906:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8017908:	4b19      	ldr	r3, [pc, #100]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	2203      	movs	r2, #3
 8017912:	4393      	bics	r3, r2
 8017914:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8017916:	697a      	ldr	r2, [r7, #20]
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	4313      	orrs	r3, r2
 801791c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801791e:	4b14      	ldr	r3, [pc, #80]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017920:	697a      	ldr	r2, [r7, #20]
 8017922:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8017924:	4b15      	ldr	r3, [pc, #84]	@ (801797c <HAL_PWR_EnterSTOPMode+0xb4>)
 8017926:	691a      	ldr	r2, [r3, #16]
 8017928:	4b14      	ldr	r3, [pc, #80]	@ (801797c <HAL_PWR_EnterSTOPMode+0xb4>)
 801792a:	2104      	movs	r1, #4
 801792c:	430a      	orrs	r2, r1
 801792e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8017930:	1cfb      	adds	r3, r7, #3
 8017932:	781b      	ldrb	r3, [r3, #0]
 8017934:	2b01      	cmp	r3, #1
 8017936:	d101      	bne.n	801793c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8017938:	bf30      	wfi
 801793a:	e002      	b.n	8017942 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801793c:	bf40      	sev
    __WFE();
 801793e:	bf20      	wfe
    __WFE();
 8017940:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8017942:	4b0e      	ldr	r3, [pc, #56]	@ (801797c <HAL_PWR_EnterSTOPMode+0xb4>)
 8017944:	691a      	ldr	r2, [r3, #16]
 8017946:	4b0d      	ldr	r3, [pc, #52]	@ (801797c <HAL_PWR_EnterSTOPMode+0xb4>)
 8017948:	2104      	movs	r1, #4
 801794a:	438a      	bics	r2, r1
 801794c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801794e:	693b      	ldr	r3, [r7, #16]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d009      	beq.n	8017968 <HAL_PWR_EnterSTOPMode+0xa0>
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d006      	beq.n	8017968 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801795a:	4b05      	ldr	r3, [pc, #20]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	4b04      	ldr	r3, [pc, #16]	@ (8017970 <HAL_PWR_EnterSTOPMode+0xa8>)
 8017960:	2180      	movs	r1, #128	@ 0x80
 8017962:	0089      	lsls	r1, r1, #2
 8017964:	430a      	orrs	r2, r1
 8017966:	601a      	str	r2, [r3, #0]
  }
}
 8017968:	46c0      	nop			@ (mov r8, r8)
 801796a:	46bd      	mov	sp, r7
 801796c:	b006      	add	sp, #24
 801796e:	bd80      	pop	{r7, pc}
 8017970:	40007000 	.word	0x40007000
 8017974:	40010000 	.word	0x40010000
 8017978:	fffffdff 	.word	0xfffffdff
 801797c:	e000ed00 	.word	0xe000ed00

08017980 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8017980:	b580      	push	{r7, lr}
 8017982:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8017984:	4b07      	ldr	r3, [pc, #28]	@ (80179a4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8017986:	681a      	ldr	r2, [r3, #0]
 8017988:	4b06      	ldr	r3, [pc, #24]	@ (80179a4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801798a:	2102      	movs	r1, #2
 801798c:	430a      	orrs	r2, r1
 801798e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8017990:	4b05      	ldr	r3, [pc, #20]	@ (80179a8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8017992:	691a      	ldr	r2, [r3, #16]
 8017994:	4b04      	ldr	r3, [pc, #16]	@ (80179a8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8017996:	2104      	movs	r1, #4
 8017998:	430a      	orrs	r2, r1
 801799a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801799c:	bf30      	wfi
}
 801799e:	46c0      	nop			@ (mov r8, r8)
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	40007000 	.word	0x40007000
 80179a8:	e000ed00 	.word	0xe000ed00

080179ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80179ac:	b5b0      	push	{r4, r5, r7, lr}
 80179ae:	b08a      	sub	sp, #40	@ 0x28
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d102      	bne.n	80179c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80179ba:	2301      	movs	r3, #1
 80179bc:	f000 fbbf 	bl	801813e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80179c0:	4bc9      	ldr	r3, [pc, #804]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 80179c2:	68db      	ldr	r3, [r3, #12]
 80179c4:	220c      	movs	r2, #12
 80179c6:	4013      	ands	r3, r2
 80179c8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80179ca:	4bc7      	ldr	r3, [pc, #796]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 80179cc:	68da      	ldr	r2, [r3, #12]
 80179ce:	2380      	movs	r3, #128	@ 0x80
 80179d0:	025b      	lsls	r3, r3, #9
 80179d2:	4013      	ands	r3, r2
 80179d4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	2201      	movs	r2, #1
 80179dc:	4013      	ands	r3, r2
 80179de:	d100      	bne.n	80179e2 <HAL_RCC_OscConfig+0x36>
 80179e0:	e07e      	b.n	8017ae0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80179e2:	69fb      	ldr	r3, [r7, #28]
 80179e4:	2b08      	cmp	r3, #8
 80179e6:	d007      	beq.n	80179f8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80179e8:	69fb      	ldr	r3, [r7, #28]
 80179ea:	2b0c      	cmp	r3, #12
 80179ec:	d112      	bne.n	8017a14 <HAL_RCC_OscConfig+0x68>
 80179ee:	69ba      	ldr	r2, [r7, #24]
 80179f0:	2380      	movs	r3, #128	@ 0x80
 80179f2:	025b      	lsls	r3, r3, #9
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d10d      	bne.n	8017a14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80179f8:	4bbb      	ldr	r3, [pc, #748]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 80179fa:	681a      	ldr	r2, [r3, #0]
 80179fc:	2380      	movs	r3, #128	@ 0x80
 80179fe:	029b      	lsls	r3, r3, #10
 8017a00:	4013      	ands	r3, r2
 8017a02:	d100      	bne.n	8017a06 <HAL_RCC_OscConfig+0x5a>
 8017a04:	e06b      	b.n	8017ade <HAL_RCC_OscConfig+0x132>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	685b      	ldr	r3, [r3, #4]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d167      	bne.n	8017ade <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8017a0e:	2301      	movs	r3, #1
 8017a10:	f000 fb95 	bl	801813e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	685a      	ldr	r2, [r3, #4]
 8017a18:	2380      	movs	r3, #128	@ 0x80
 8017a1a:	025b      	lsls	r3, r3, #9
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d107      	bne.n	8017a30 <HAL_RCC_OscConfig+0x84>
 8017a20:	4bb1      	ldr	r3, [pc, #708]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a22:	681a      	ldr	r2, [r3, #0]
 8017a24:	4bb0      	ldr	r3, [pc, #704]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a26:	2180      	movs	r1, #128	@ 0x80
 8017a28:	0249      	lsls	r1, r1, #9
 8017a2a:	430a      	orrs	r2, r1
 8017a2c:	601a      	str	r2, [r3, #0]
 8017a2e:	e027      	b.n	8017a80 <HAL_RCC_OscConfig+0xd4>
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	685a      	ldr	r2, [r3, #4]
 8017a34:	23a0      	movs	r3, #160	@ 0xa0
 8017a36:	02db      	lsls	r3, r3, #11
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d10e      	bne.n	8017a5a <HAL_RCC_OscConfig+0xae>
 8017a3c:	4baa      	ldr	r3, [pc, #680]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	4ba9      	ldr	r3, [pc, #676]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a42:	2180      	movs	r1, #128	@ 0x80
 8017a44:	02c9      	lsls	r1, r1, #11
 8017a46:	430a      	orrs	r2, r1
 8017a48:	601a      	str	r2, [r3, #0]
 8017a4a:	4ba7      	ldr	r3, [pc, #668]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	4ba6      	ldr	r3, [pc, #664]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a50:	2180      	movs	r1, #128	@ 0x80
 8017a52:	0249      	lsls	r1, r1, #9
 8017a54:	430a      	orrs	r2, r1
 8017a56:	601a      	str	r2, [r3, #0]
 8017a58:	e012      	b.n	8017a80 <HAL_RCC_OscConfig+0xd4>
 8017a5a:	4ba3      	ldr	r3, [pc, #652]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a5c:	681a      	ldr	r2, [r3, #0]
 8017a5e:	4ba2      	ldr	r3, [pc, #648]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a60:	49a2      	ldr	r1, [pc, #648]	@ (8017cec <HAL_RCC_OscConfig+0x340>)
 8017a62:	400a      	ands	r2, r1
 8017a64:	601a      	str	r2, [r3, #0]
 8017a66:	4ba0      	ldr	r3, [pc, #640]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a68:	681a      	ldr	r2, [r3, #0]
 8017a6a:	2380      	movs	r3, #128	@ 0x80
 8017a6c:	025b      	lsls	r3, r3, #9
 8017a6e:	4013      	ands	r3, r2
 8017a70:	60fb      	str	r3, [r7, #12]
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	4b9c      	ldr	r3, [pc, #624]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a76:	681a      	ldr	r2, [r3, #0]
 8017a78:	4b9b      	ldr	r3, [pc, #620]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017a7a:	499d      	ldr	r1, [pc, #628]	@ (8017cf0 <HAL_RCC_OscConfig+0x344>)
 8017a7c:	400a      	ands	r2, r1
 8017a7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d015      	beq.n	8017ab4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017a88:	f7f9 fbc8 	bl	801121c <HAL_GetTick>
 8017a8c:	0003      	movs	r3, r0
 8017a8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017a90:	e009      	b.n	8017aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017a92:	f7f9 fbc3 	bl	801121c <HAL_GetTick>
 8017a96:	0002      	movs	r2, r0
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	1ad3      	subs	r3, r2, r3
 8017a9c:	2b64      	cmp	r3, #100	@ 0x64
 8017a9e:	d902      	bls.n	8017aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017aa0:	2303      	movs	r3, #3
 8017aa2:	f000 fb4c 	bl	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8017aa6:	4b90      	ldr	r3, [pc, #576]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017aa8:	681a      	ldr	r2, [r3, #0]
 8017aaa:	2380      	movs	r3, #128	@ 0x80
 8017aac:	029b      	lsls	r3, r3, #10
 8017aae:	4013      	ands	r3, r2
 8017ab0:	d0ef      	beq.n	8017a92 <HAL_RCC_OscConfig+0xe6>
 8017ab2:	e015      	b.n	8017ae0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017ab4:	f7f9 fbb2 	bl	801121c <HAL_GetTick>
 8017ab8:	0003      	movs	r3, r0
 8017aba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017abc:	e008      	b.n	8017ad0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017abe:	f7f9 fbad 	bl	801121c <HAL_GetTick>
 8017ac2:	0002      	movs	r2, r0
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	1ad3      	subs	r3, r2, r3
 8017ac8:	2b64      	cmp	r3, #100	@ 0x64
 8017aca:	d901      	bls.n	8017ad0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8017acc:	2303      	movs	r3, #3
 8017ace:	e336      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8017ad0:	4b85      	ldr	r3, [pc, #532]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017ad2:	681a      	ldr	r2, [r3, #0]
 8017ad4:	2380      	movs	r3, #128	@ 0x80
 8017ad6:	029b      	lsls	r3, r3, #10
 8017ad8:	4013      	ands	r3, r2
 8017ada:	d1f0      	bne.n	8017abe <HAL_RCC_OscConfig+0x112>
 8017adc:	e000      	b.n	8017ae0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017ade:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2202      	movs	r2, #2
 8017ae6:	4013      	ands	r3, r2
 8017ae8:	d100      	bne.n	8017aec <HAL_RCC_OscConfig+0x140>
 8017aea:	e099      	b.n	8017c20 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	68db      	ldr	r3, [r3, #12]
 8017af0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8017af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017af4:	2220      	movs	r2, #32
 8017af6:	4013      	ands	r3, r2
 8017af8:	d009      	beq.n	8017b0e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8017afa:	4b7b      	ldr	r3, [pc, #492]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017afc:	681a      	ldr	r2, [r3, #0]
 8017afe:	4b7a      	ldr	r3, [pc, #488]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b00:	2120      	movs	r1, #32
 8017b02:	430a      	orrs	r2, r1
 8017b04:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8017b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b08:	2220      	movs	r2, #32
 8017b0a:	4393      	bics	r3, r2
 8017b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	2b04      	cmp	r3, #4
 8017b12:	d005      	beq.n	8017b20 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	2b0c      	cmp	r3, #12
 8017b18:	d13e      	bne.n	8017b98 <HAL_RCC_OscConfig+0x1ec>
 8017b1a:	69bb      	ldr	r3, [r7, #24]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d13b      	bne.n	8017b98 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8017b20:	4b71      	ldr	r3, [pc, #452]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	2204      	movs	r2, #4
 8017b26:	4013      	ands	r3, r2
 8017b28:	d004      	beq.n	8017b34 <HAL_RCC_OscConfig+0x188>
 8017b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d101      	bne.n	8017b34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8017b30:	2301      	movs	r3, #1
 8017b32:	e304      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017b34:	4b6c      	ldr	r3, [pc, #432]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b36:	685b      	ldr	r3, [r3, #4]
 8017b38:	4a6e      	ldr	r2, [pc, #440]	@ (8017cf4 <HAL_RCC_OscConfig+0x348>)
 8017b3a:	4013      	ands	r3, r2
 8017b3c:	0019      	movs	r1, r3
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	691b      	ldr	r3, [r3, #16]
 8017b42:	021a      	lsls	r2, r3, #8
 8017b44:	4b68      	ldr	r3, [pc, #416]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b46:	430a      	orrs	r2, r1
 8017b48:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017b4a:	4b67      	ldr	r3, [pc, #412]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	2209      	movs	r2, #9
 8017b50:	4393      	bics	r3, r2
 8017b52:	0019      	movs	r1, r3
 8017b54:	4b64      	ldr	r3, [pc, #400]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b58:	430a      	orrs	r2, r1
 8017b5a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8017b5c:	f000 fc42 	bl	80183e4 <HAL_RCC_GetSysClockFreq>
 8017b60:	0001      	movs	r1, r0
 8017b62:	4b61      	ldr	r3, [pc, #388]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017b64:	68db      	ldr	r3, [r3, #12]
 8017b66:	091b      	lsrs	r3, r3, #4
 8017b68:	220f      	movs	r2, #15
 8017b6a:	4013      	ands	r3, r2
 8017b6c:	4a62      	ldr	r2, [pc, #392]	@ (8017cf8 <HAL_RCC_OscConfig+0x34c>)
 8017b6e:	5cd3      	ldrb	r3, [r2, r3]
 8017b70:	000a      	movs	r2, r1
 8017b72:	40da      	lsrs	r2, r3
 8017b74:	4b61      	ldr	r3, [pc, #388]	@ (8017cfc <HAL_RCC_OscConfig+0x350>)
 8017b76:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8017b78:	4b61      	ldr	r3, [pc, #388]	@ (8017d00 <HAL_RCC_OscConfig+0x354>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	2513      	movs	r5, #19
 8017b7e:	197c      	adds	r4, r7, r5
 8017b80:	0018      	movs	r0, r3
 8017b82:	f7f9 fb05 	bl	8011190 <HAL_InitTick>
 8017b86:	0003      	movs	r3, r0
 8017b88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8017b8a:	197b      	adds	r3, r7, r5
 8017b8c:	781b      	ldrb	r3, [r3, #0]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d046      	beq.n	8017c20 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8017b92:	197b      	adds	r3, r7, r5
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	e2d2      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8017b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d027      	beq.n	8017bee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8017b9e:	4b52      	ldr	r3, [pc, #328]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	2209      	movs	r2, #9
 8017ba4:	4393      	bics	r3, r2
 8017ba6:	0019      	movs	r1, r3
 8017ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bac:	430a      	orrs	r2, r1
 8017bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017bb0:	f7f9 fb34 	bl	801121c <HAL_GetTick>
 8017bb4:	0003      	movs	r3, r0
 8017bb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017bb8:	e008      	b.n	8017bcc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017bba:	f7f9 fb2f 	bl	801121c <HAL_GetTick>
 8017bbe:	0002      	movs	r2, r0
 8017bc0:	697b      	ldr	r3, [r7, #20]
 8017bc2:	1ad3      	subs	r3, r2, r3
 8017bc4:	2b02      	cmp	r3, #2
 8017bc6:	d901      	bls.n	8017bcc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8017bc8:	2303      	movs	r3, #3
 8017bca:	e2b8      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8017bcc:	4b46      	ldr	r3, [pc, #280]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	2204      	movs	r2, #4
 8017bd2:	4013      	ands	r3, r2
 8017bd4:	d0f1      	beq.n	8017bba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017bd6:	4b44      	ldr	r3, [pc, #272]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017bd8:	685b      	ldr	r3, [r3, #4]
 8017bda:	4a46      	ldr	r2, [pc, #280]	@ (8017cf4 <HAL_RCC_OscConfig+0x348>)
 8017bdc:	4013      	ands	r3, r2
 8017bde:	0019      	movs	r1, r3
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	691b      	ldr	r3, [r3, #16]
 8017be4:	021a      	lsls	r2, r3, #8
 8017be6:	4b40      	ldr	r3, [pc, #256]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017be8:	430a      	orrs	r2, r1
 8017bea:	605a      	str	r2, [r3, #4]
 8017bec:	e018      	b.n	8017c20 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017bee:	4b3e      	ldr	r3, [pc, #248]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017bf4:	2101      	movs	r1, #1
 8017bf6:	438a      	bics	r2, r1
 8017bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017bfa:	f7f9 fb0f 	bl	801121c <HAL_GetTick>
 8017bfe:	0003      	movs	r3, r0
 8017c00:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8017c02:	e008      	b.n	8017c16 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017c04:	f7f9 fb0a 	bl	801121c <HAL_GetTick>
 8017c08:	0002      	movs	r2, r0
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	1ad3      	subs	r3, r2, r3
 8017c0e:	2b02      	cmp	r3, #2
 8017c10:	d901      	bls.n	8017c16 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8017c12:	2303      	movs	r3, #3
 8017c14:	e293      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8017c16:	4b34      	ldr	r3, [pc, #208]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	2204      	movs	r2, #4
 8017c1c:	4013      	ands	r3, r2
 8017c1e:	d1f1      	bne.n	8017c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2210      	movs	r2, #16
 8017c26:	4013      	ands	r3, r2
 8017c28:	d100      	bne.n	8017c2c <HAL_RCC_OscConfig+0x280>
 8017c2a:	e0a2      	b.n	8017d72 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d140      	bne.n	8017cb4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8017c32:	4b2d      	ldr	r3, [pc, #180]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c34:	681a      	ldr	r2, [r3, #0]
 8017c36:	2380      	movs	r3, #128	@ 0x80
 8017c38:	009b      	lsls	r3, r3, #2
 8017c3a:	4013      	ands	r3, r2
 8017c3c:	d005      	beq.n	8017c4a <HAL_RCC_OscConfig+0x29e>
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	69db      	ldr	r3, [r3, #28]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d101      	bne.n	8017c4a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8017c46:	2301      	movs	r3, #1
 8017c48:	e279      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017c4a:	4b27      	ldr	r3, [pc, #156]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8017d04 <HAL_RCC_OscConfig+0x358>)
 8017c50:	4013      	ands	r3, r2
 8017c52:	0019      	movs	r1, r3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c58:	4b23      	ldr	r3, [pc, #140]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c5a:	430a      	orrs	r2, r1
 8017c5c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017c5e:	4b22      	ldr	r3, [pc, #136]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	021b      	lsls	r3, r3, #8
 8017c64:	0a19      	lsrs	r1, r3, #8
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	6a1b      	ldr	r3, [r3, #32]
 8017c6a:	061a      	lsls	r2, r3, #24
 8017c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c6e:	430a      	orrs	r2, r1
 8017c70:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c76:	0b5b      	lsrs	r3, r3, #13
 8017c78:	3301      	adds	r3, #1
 8017c7a:	2280      	movs	r2, #128	@ 0x80
 8017c7c:	0212      	lsls	r2, r2, #8
 8017c7e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8017c80:	4b19      	ldr	r3, [pc, #100]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017c82:	68db      	ldr	r3, [r3, #12]
 8017c84:	091b      	lsrs	r3, r3, #4
 8017c86:	210f      	movs	r1, #15
 8017c88:	400b      	ands	r3, r1
 8017c8a:	491b      	ldr	r1, [pc, #108]	@ (8017cf8 <HAL_RCC_OscConfig+0x34c>)
 8017c8c:	5ccb      	ldrb	r3, [r1, r3]
 8017c8e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8017c90:	4b1a      	ldr	r3, [pc, #104]	@ (8017cfc <HAL_RCC_OscConfig+0x350>)
 8017c92:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8017c94:	4b1a      	ldr	r3, [pc, #104]	@ (8017d00 <HAL_RCC_OscConfig+0x354>)
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	2513      	movs	r5, #19
 8017c9a:	197c      	adds	r4, r7, r5
 8017c9c:	0018      	movs	r0, r3
 8017c9e:	f7f9 fa77 	bl	8011190 <HAL_InitTick>
 8017ca2:	0003      	movs	r3, r0
 8017ca4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8017ca6:	197b      	adds	r3, r7, r5
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d061      	beq.n	8017d72 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8017cae:	197b      	adds	r3, r7, r5
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	e244      	b.n	801813e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	69db      	ldr	r3, [r3, #28]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d040      	beq.n	8017d3e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8017cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017cbe:	681a      	ldr	r2, [r3, #0]
 8017cc0:	4b09      	ldr	r3, [pc, #36]	@ (8017ce8 <HAL_RCC_OscConfig+0x33c>)
 8017cc2:	2180      	movs	r1, #128	@ 0x80
 8017cc4:	0049      	lsls	r1, r1, #1
 8017cc6:	430a      	orrs	r2, r1
 8017cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017cca:	f7f9 faa7 	bl	801121c <HAL_GetTick>
 8017cce:	0003      	movs	r3, r0
 8017cd0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017cd2:	e019      	b.n	8017d08 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017cd4:	f7f9 faa2 	bl	801121c <HAL_GetTick>
 8017cd8:	0002      	movs	r2, r0
 8017cda:	697b      	ldr	r3, [r7, #20]
 8017cdc:	1ad3      	subs	r3, r2, r3
 8017cde:	2b02      	cmp	r3, #2
 8017ce0:	d912      	bls.n	8017d08 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8017ce2:	2303      	movs	r3, #3
 8017ce4:	e22b      	b.n	801813e <HAL_RCC_OscConfig+0x792>
 8017ce6:	46c0      	nop			@ (mov r8, r8)
 8017ce8:	40021000 	.word	0x40021000
 8017cec:	fffeffff 	.word	0xfffeffff
 8017cf0:	fffbffff 	.word	0xfffbffff
 8017cf4:	ffffe0ff 	.word	0xffffe0ff
 8017cf8:	08029164 	.word	0x08029164
 8017cfc:	200000e4 	.word	0x200000e4
 8017d00:	200000f4 	.word	0x200000f4
 8017d04:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8017d08:	4bca      	ldr	r3, [pc, #808]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	2380      	movs	r3, #128	@ 0x80
 8017d0e:	009b      	lsls	r3, r3, #2
 8017d10:	4013      	ands	r3, r2
 8017d12:	d0df      	beq.n	8017cd4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8017d14:	4bc7      	ldr	r3, [pc, #796]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	4ac7      	ldr	r2, [pc, #796]	@ (8018038 <HAL_RCC_OscConfig+0x68c>)
 8017d1a:	4013      	ands	r3, r2
 8017d1c:	0019      	movs	r1, r3
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d22:	4bc4      	ldr	r3, [pc, #784]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d24:	430a      	orrs	r2, r1
 8017d26:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8017d28:	4bc2      	ldr	r3, [pc, #776]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d2a:	685b      	ldr	r3, [r3, #4]
 8017d2c:	021b      	lsls	r3, r3, #8
 8017d2e:	0a19      	lsrs	r1, r3, #8
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	6a1b      	ldr	r3, [r3, #32]
 8017d34:	061a      	lsls	r2, r3, #24
 8017d36:	4bbf      	ldr	r3, [pc, #764]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d38:	430a      	orrs	r2, r1
 8017d3a:	605a      	str	r2, [r3, #4]
 8017d3c:	e019      	b.n	8017d72 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8017d3e:	4bbd      	ldr	r3, [pc, #756]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d40:	681a      	ldr	r2, [r3, #0]
 8017d42:	4bbc      	ldr	r3, [pc, #752]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d44:	49bd      	ldr	r1, [pc, #756]	@ (801803c <HAL_RCC_OscConfig+0x690>)
 8017d46:	400a      	ands	r2, r1
 8017d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017d4a:	f7f9 fa67 	bl	801121c <HAL_GetTick>
 8017d4e:	0003      	movs	r3, r0
 8017d50:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017d52:	e008      	b.n	8017d66 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8017d54:	f7f9 fa62 	bl	801121c <HAL_GetTick>
 8017d58:	0002      	movs	r2, r0
 8017d5a:	697b      	ldr	r3, [r7, #20]
 8017d5c:	1ad3      	subs	r3, r2, r3
 8017d5e:	2b02      	cmp	r3, #2
 8017d60:	d901      	bls.n	8017d66 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8017d62:	2303      	movs	r3, #3
 8017d64:	e1eb      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8017d66:	4bb3      	ldr	r3, [pc, #716]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d68:	681a      	ldr	r2, [r3, #0]
 8017d6a:	2380      	movs	r3, #128	@ 0x80
 8017d6c:	009b      	lsls	r3, r3, #2
 8017d6e:	4013      	ands	r3, r2
 8017d70:	d1f0      	bne.n	8017d54 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	2208      	movs	r2, #8
 8017d78:	4013      	ands	r3, r2
 8017d7a:	d036      	beq.n	8017dea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	695b      	ldr	r3, [r3, #20]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d019      	beq.n	8017db8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017d84:	4bab      	ldr	r3, [pc, #684]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017d88:	4baa      	ldr	r3, [pc, #680]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017d8a:	2101      	movs	r1, #1
 8017d8c:	430a      	orrs	r2, r1
 8017d8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017d90:	f7f9 fa44 	bl	801121c <HAL_GetTick>
 8017d94:	0003      	movs	r3, r0
 8017d96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017d98:	e008      	b.n	8017dac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017d9a:	f7f9 fa3f 	bl	801121c <HAL_GetTick>
 8017d9e:	0002      	movs	r2, r0
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	1ad3      	subs	r3, r2, r3
 8017da4:	2b02      	cmp	r3, #2
 8017da6:	d901      	bls.n	8017dac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8017da8:	2303      	movs	r3, #3
 8017daa:	e1c8      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8017dac:	4ba1      	ldr	r3, [pc, #644]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017db0:	2202      	movs	r2, #2
 8017db2:	4013      	ands	r3, r2
 8017db4:	d0f1      	beq.n	8017d9a <HAL_RCC_OscConfig+0x3ee>
 8017db6:	e018      	b.n	8017dea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017db8:	4b9e      	ldr	r3, [pc, #632]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017dba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017dbc:	4b9d      	ldr	r3, [pc, #628]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017dbe:	2101      	movs	r1, #1
 8017dc0:	438a      	bics	r2, r1
 8017dc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017dc4:	f7f9 fa2a 	bl	801121c <HAL_GetTick>
 8017dc8:	0003      	movs	r3, r0
 8017dca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017dcc:	e008      	b.n	8017de0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017dce:	f7f9 fa25 	bl	801121c <HAL_GetTick>
 8017dd2:	0002      	movs	r2, r0
 8017dd4:	697b      	ldr	r3, [r7, #20]
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	2b02      	cmp	r3, #2
 8017dda:	d901      	bls.n	8017de0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8017ddc:	2303      	movs	r3, #3
 8017dde:	e1ae      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8017de0:	4b94      	ldr	r3, [pc, #592]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017de4:	2202      	movs	r2, #2
 8017de6:	4013      	ands	r3, r2
 8017de8:	d1f1      	bne.n	8017dce <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	2204      	movs	r2, #4
 8017df0:	4013      	ands	r3, r2
 8017df2:	d100      	bne.n	8017df6 <HAL_RCC_OscConfig+0x44a>
 8017df4:	e0ae      	b.n	8017f54 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017df6:	2023      	movs	r0, #35	@ 0x23
 8017df8:	183b      	adds	r3, r7, r0
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017dfe:	4b8d      	ldr	r3, [pc, #564]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017e02:	2380      	movs	r3, #128	@ 0x80
 8017e04:	055b      	lsls	r3, r3, #21
 8017e06:	4013      	ands	r3, r2
 8017e08:	d109      	bne.n	8017e1e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017e0a:	4b8a      	ldr	r3, [pc, #552]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017e0e:	4b89      	ldr	r3, [pc, #548]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e10:	2180      	movs	r1, #128	@ 0x80
 8017e12:	0549      	lsls	r1, r1, #21
 8017e14:	430a      	orrs	r2, r1
 8017e16:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8017e18:	183b      	adds	r3, r7, r0
 8017e1a:	2201      	movs	r2, #1
 8017e1c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017e1e:	4b88      	ldr	r3, [pc, #544]	@ (8018040 <HAL_RCC_OscConfig+0x694>)
 8017e20:	681a      	ldr	r2, [r3, #0]
 8017e22:	2380      	movs	r3, #128	@ 0x80
 8017e24:	005b      	lsls	r3, r3, #1
 8017e26:	4013      	ands	r3, r2
 8017e28:	d11a      	bne.n	8017e60 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017e2a:	4b85      	ldr	r3, [pc, #532]	@ (8018040 <HAL_RCC_OscConfig+0x694>)
 8017e2c:	681a      	ldr	r2, [r3, #0]
 8017e2e:	4b84      	ldr	r3, [pc, #528]	@ (8018040 <HAL_RCC_OscConfig+0x694>)
 8017e30:	2180      	movs	r1, #128	@ 0x80
 8017e32:	0049      	lsls	r1, r1, #1
 8017e34:	430a      	orrs	r2, r1
 8017e36:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017e38:	f7f9 f9f0 	bl	801121c <HAL_GetTick>
 8017e3c:	0003      	movs	r3, r0
 8017e3e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017e40:	e008      	b.n	8017e54 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017e42:	f7f9 f9eb 	bl	801121c <HAL_GetTick>
 8017e46:	0002      	movs	r2, r0
 8017e48:	697b      	ldr	r3, [r7, #20]
 8017e4a:	1ad3      	subs	r3, r2, r3
 8017e4c:	2b64      	cmp	r3, #100	@ 0x64
 8017e4e:	d901      	bls.n	8017e54 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8017e50:	2303      	movs	r3, #3
 8017e52:	e174      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017e54:	4b7a      	ldr	r3, [pc, #488]	@ (8018040 <HAL_RCC_OscConfig+0x694>)
 8017e56:	681a      	ldr	r2, [r3, #0]
 8017e58:	2380      	movs	r3, #128	@ 0x80
 8017e5a:	005b      	lsls	r3, r3, #1
 8017e5c:	4013      	ands	r3, r2
 8017e5e:	d0f0      	beq.n	8017e42 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	689a      	ldr	r2, [r3, #8]
 8017e64:	2380      	movs	r3, #128	@ 0x80
 8017e66:	005b      	lsls	r3, r3, #1
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d107      	bne.n	8017e7c <HAL_RCC_OscConfig+0x4d0>
 8017e6c:	4b71      	ldr	r3, [pc, #452]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e70:	4b70      	ldr	r3, [pc, #448]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e72:	2180      	movs	r1, #128	@ 0x80
 8017e74:	0049      	lsls	r1, r1, #1
 8017e76:	430a      	orrs	r2, r1
 8017e78:	651a      	str	r2, [r3, #80]	@ 0x50
 8017e7a:	e031      	b.n	8017ee0 <HAL_RCC_OscConfig+0x534>
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	689b      	ldr	r3, [r3, #8]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d10c      	bne.n	8017e9e <HAL_RCC_OscConfig+0x4f2>
 8017e84:	4b6b      	ldr	r3, [pc, #428]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e88:	4b6a      	ldr	r3, [pc, #424]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e8a:	496c      	ldr	r1, [pc, #432]	@ (801803c <HAL_RCC_OscConfig+0x690>)
 8017e8c:	400a      	ands	r2, r1
 8017e8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8017e90:	4b68      	ldr	r3, [pc, #416]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017e94:	4b67      	ldr	r3, [pc, #412]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017e96:	496b      	ldr	r1, [pc, #428]	@ (8018044 <HAL_RCC_OscConfig+0x698>)
 8017e98:	400a      	ands	r2, r1
 8017e9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8017e9c:	e020      	b.n	8017ee0 <HAL_RCC_OscConfig+0x534>
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	689a      	ldr	r2, [r3, #8]
 8017ea2:	23a0      	movs	r3, #160	@ 0xa0
 8017ea4:	00db      	lsls	r3, r3, #3
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d10e      	bne.n	8017ec8 <HAL_RCC_OscConfig+0x51c>
 8017eaa:	4b62      	ldr	r3, [pc, #392]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017eac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017eae:	4b61      	ldr	r3, [pc, #388]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017eb0:	2180      	movs	r1, #128	@ 0x80
 8017eb2:	00c9      	lsls	r1, r1, #3
 8017eb4:	430a      	orrs	r2, r1
 8017eb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8017eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017eba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ebc:	4b5d      	ldr	r3, [pc, #372]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017ebe:	2180      	movs	r1, #128	@ 0x80
 8017ec0:	0049      	lsls	r1, r1, #1
 8017ec2:	430a      	orrs	r2, r1
 8017ec4:	651a      	str	r2, [r3, #80]	@ 0x50
 8017ec6:	e00b      	b.n	8017ee0 <HAL_RCC_OscConfig+0x534>
 8017ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017eca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ecc:	4b59      	ldr	r3, [pc, #356]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017ece:	495b      	ldr	r1, [pc, #364]	@ (801803c <HAL_RCC_OscConfig+0x690>)
 8017ed0:	400a      	ands	r2, r1
 8017ed2:	651a      	str	r2, [r3, #80]	@ 0x50
 8017ed4:	4b57      	ldr	r3, [pc, #348]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017ed6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ed8:	4b56      	ldr	r3, [pc, #344]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017eda:	495a      	ldr	r1, [pc, #360]	@ (8018044 <HAL_RCC_OscConfig+0x698>)
 8017edc:	400a      	ands	r2, r1
 8017ede:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	689b      	ldr	r3, [r3, #8]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d015      	beq.n	8017f14 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017ee8:	f7f9 f998 	bl	801121c <HAL_GetTick>
 8017eec:	0003      	movs	r3, r0
 8017eee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017ef0:	e009      	b.n	8017f06 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017ef2:	f7f9 f993 	bl	801121c <HAL_GetTick>
 8017ef6:	0002      	movs	r2, r0
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	1ad3      	subs	r3, r2, r3
 8017efc:	4a52      	ldr	r2, [pc, #328]	@ (8018048 <HAL_RCC_OscConfig+0x69c>)
 8017efe:	4293      	cmp	r3, r2
 8017f00:	d901      	bls.n	8017f06 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8017f02:	2303      	movs	r3, #3
 8017f04:	e11b      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8017f06:	4b4b      	ldr	r3, [pc, #300]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f0a:	2380      	movs	r3, #128	@ 0x80
 8017f0c:	009b      	lsls	r3, r3, #2
 8017f0e:	4013      	ands	r3, r2
 8017f10:	d0ef      	beq.n	8017ef2 <HAL_RCC_OscConfig+0x546>
 8017f12:	e014      	b.n	8017f3e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017f14:	f7f9 f982 	bl	801121c <HAL_GetTick>
 8017f18:	0003      	movs	r3, r0
 8017f1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017f1c:	e009      	b.n	8017f32 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017f1e:	f7f9 f97d 	bl	801121c <HAL_GetTick>
 8017f22:	0002      	movs	r2, r0
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	4a47      	ldr	r2, [pc, #284]	@ (8018048 <HAL_RCC_OscConfig+0x69c>)
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	d901      	bls.n	8017f32 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8017f2e:	2303      	movs	r3, #3
 8017f30:	e105      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8017f32:	4b40      	ldr	r3, [pc, #256]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017f36:	2380      	movs	r3, #128	@ 0x80
 8017f38:	009b      	lsls	r3, r3, #2
 8017f3a:	4013      	ands	r3, r2
 8017f3c:	d1ef      	bne.n	8017f1e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8017f3e:	2323      	movs	r3, #35	@ 0x23
 8017f40:	18fb      	adds	r3, r7, r3
 8017f42:	781b      	ldrb	r3, [r3, #0]
 8017f44:	2b01      	cmp	r3, #1
 8017f46:	d105      	bne.n	8017f54 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017f48:	4b3a      	ldr	r3, [pc, #232]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017f4c:	4b39      	ldr	r3, [pc, #228]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f4e:	493f      	ldr	r1, [pc, #252]	@ (801804c <HAL_RCC_OscConfig+0x6a0>)
 8017f50:	400a      	ands	r2, r1
 8017f52:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	2220      	movs	r2, #32
 8017f5a:	4013      	ands	r3, r2
 8017f5c:	d049      	beq.n	8017ff2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	699b      	ldr	r3, [r3, #24]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d026      	beq.n	8017fb4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8017f66:	4b33      	ldr	r3, [pc, #204]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f68:	689a      	ldr	r2, [r3, #8]
 8017f6a:	4b32      	ldr	r3, [pc, #200]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f6c:	2101      	movs	r1, #1
 8017f6e:	430a      	orrs	r2, r1
 8017f70:	609a      	str	r2, [r3, #8]
 8017f72:	4b30      	ldr	r3, [pc, #192]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017f76:	4b2f      	ldr	r3, [pc, #188]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017f78:	2101      	movs	r1, #1
 8017f7a:	430a      	orrs	r2, r1
 8017f7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8017f7e:	4b34      	ldr	r3, [pc, #208]	@ (8018050 <HAL_RCC_OscConfig+0x6a4>)
 8017f80:	6a1a      	ldr	r2, [r3, #32]
 8017f82:	4b33      	ldr	r3, [pc, #204]	@ (8018050 <HAL_RCC_OscConfig+0x6a4>)
 8017f84:	2180      	movs	r1, #128	@ 0x80
 8017f86:	0189      	lsls	r1, r1, #6
 8017f88:	430a      	orrs	r2, r1
 8017f8a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f8c:	f7f9 f946 	bl	801121c <HAL_GetTick>
 8017f90:	0003      	movs	r3, r0
 8017f92:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017f94:	e008      	b.n	8017fa8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017f96:	f7f9 f941 	bl	801121c <HAL_GetTick>
 8017f9a:	0002      	movs	r2, r0
 8017f9c:	697b      	ldr	r3, [r7, #20]
 8017f9e:	1ad3      	subs	r3, r2, r3
 8017fa0:	2b02      	cmp	r3, #2
 8017fa2:	d901      	bls.n	8017fa8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8017fa4:	2303      	movs	r3, #3
 8017fa6:	e0ca      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8017fa8:	4b22      	ldr	r3, [pc, #136]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017faa:	689b      	ldr	r3, [r3, #8]
 8017fac:	2202      	movs	r2, #2
 8017fae:	4013      	ands	r3, r2
 8017fb0:	d0f1      	beq.n	8017f96 <HAL_RCC_OscConfig+0x5ea>
 8017fb2:	e01e      	b.n	8017ff2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8017fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017fb6:	689a      	ldr	r2, [r3, #8]
 8017fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017fba:	2101      	movs	r1, #1
 8017fbc:	438a      	bics	r2, r1
 8017fbe:	609a      	str	r2, [r3, #8]
 8017fc0:	4b23      	ldr	r3, [pc, #140]	@ (8018050 <HAL_RCC_OscConfig+0x6a4>)
 8017fc2:	6a1a      	ldr	r2, [r3, #32]
 8017fc4:	4b22      	ldr	r3, [pc, #136]	@ (8018050 <HAL_RCC_OscConfig+0x6a4>)
 8017fc6:	4923      	ldr	r1, [pc, #140]	@ (8018054 <HAL_RCC_OscConfig+0x6a8>)
 8017fc8:	400a      	ands	r2, r1
 8017fca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017fcc:	f7f9 f926 	bl	801121c <HAL_GetTick>
 8017fd0:	0003      	movs	r3, r0
 8017fd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017fd4:	e008      	b.n	8017fe8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8017fd6:	f7f9 f921 	bl	801121c <HAL_GetTick>
 8017fda:	0002      	movs	r2, r0
 8017fdc:	697b      	ldr	r3, [r7, #20]
 8017fde:	1ad3      	subs	r3, r2, r3
 8017fe0:	2b02      	cmp	r3, #2
 8017fe2:	d901      	bls.n	8017fe8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8017fe4:	2303      	movs	r3, #3
 8017fe6:	e0aa      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8017fe8:	4b12      	ldr	r3, [pc, #72]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8017fea:	689b      	ldr	r3, [r3, #8]
 8017fec:	2202      	movs	r2, #2
 8017fee:	4013      	ands	r3, r2
 8017ff0:	d1f1      	bne.n	8017fd6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d100      	bne.n	8017ffc <HAL_RCC_OscConfig+0x650>
 8017ffa:	e09f      	b.n	801813c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	2b0c      	cmp	r3, #12
 8018000:	d100      	bne.n	8018004 <HAL_RCC_OscConfig+0x658>
 8018002:	e078      	b.n	80180f6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018008:	2b02      	cmp	r3, #2
 801800a:	d159      	bne.n	80180c0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801800c:	4b09      	ldr	r3, [pc, #36]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	4b08      	ldr	r3, [pc, #32]	@ (8018034 <HAL_RCC_OscConfig+0x688>)
 8018012:	4911      	ldr	r1, [pc, #68]	@ (8018058 <HAL_RCC_OscConfig+0x6ac>)
 8018014:	400a      	ands	r2, r1
 8018016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018018:	f7f9 f900 	bl	801121c <HAL_GetTick>
 801801c:	0003      	movs	r3, r0
 801801e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018020:	e01c      	b.n	801805c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018022:	f7f9 f8fb 	bl	801121c <HAL_GetTick>
 8018026:	0002      	movs	r2, r0
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	1ad3      	subs	r3, r2, r3
 801802c:	2b02      	cmp	r3, #2
 801802e:	d915      	bls.n	801805c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8018030:	2303      	movs	r3, #3
 8018032:	e084      	b.n	801813e <HAL_RCC_OscConfig+0x792>
 8018034:	40021000 	.word	0x40021000
 8018038:	ffff1fff 	.word	0xffff1fff
 801803c:	fffffeff 	.word	0xfffffeff
 8018040:	40007000 	.word	0x40007000
 8018044:	fffffbff 	.word	0xfffffbff
 8018048:	00001388 	.word	0x00001388
 801804c:	efffffff 	.word	0xefffffff
 8018050:	40010000 	.word	0x40010000
 8018054:	ffffdfff 	.word	0xffffdfff
 8018058:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801805c:	4b3a      	ldr	r3, [pc, #232]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 801805e:	681a      	ldr	r2, [r3, #0]
 8018060:	2380      	movs	r3, #128	@ 0x80
 8018062:	049b      	lsls	r3, r3, #18
 8018064:	4013      	ands	r3, r2
 8018066:	d1dc      	bne.n	8018022 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018068:	4b37      	ldr	r3, [pc, #220]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 801806a:	68db      	ldr	r3, [r3, #12]
 801806c:	4a37      	ldr	r2, [pc, #220]	@ (801814c <HAL_RCC_OscConfig+0x7a0>)
 801806e:	4013      	ands	r3, r2
 8018070:	0019      	movs	r1, r3
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801807a:	431a      	orrs	r2, r3
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018080:	431a      	orrs	r2, r3
 8018082:	4b31      	ldr	r3, [pc, #196]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 8018084:	430a      	orrs	r2, r1
 8018086:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018088:	4b2f      	ldr	r3, [pc, #188]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 801808a:	681a      	ldr	r2, [r3, #0]
 801808c:	4b2e      	ldr	r3, [pc, #184]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 801808e:	2180      	movs	r1, #128	@ 0x80
 8018090:	0449      	lsls	r1, r1, #17
 8018092:	430a      	orrs	r2, r1
 8018094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018096:	f7f9 f8c1 	bl	801121c <HAL_GetTick>
 801809a:	0003      	movs	r3, r0
 801809c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801809e:	e008      	b.n	80180b2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80180a0:	f7f9 f8bc 	bl	801121c <HAL_GetTick>
 80180a4:	0002      	movs	r2, r0
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	1ad3      	subs	r3, r2, r3
 80180aa:	2b02      	cmp	r3, #2
 80180ac:	d901      	bls.n	80180b2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80180ae:	2303      	movs	r3, #3
 80180b0:	e045      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80180b2:	4b25      	ldr	r3, [pc, #148]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 80180b4:	681a      	ldr	r2, [r3, #0]
 80180b6:	2380      	movs	r3, #128	@ 0x80
 80180b8:	049b      	lsls	r3, r3, #18
 80180ba:	4013      	ands	r3, r2
 80180bc:	d0f0      	beq.n	80180a0 <HAL_RCC_OscConfig+0x6f4>
 80180be:	e03d      	b.n	801813c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80180c0:	4b21      	ldr	r3, [pc, #132]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	4b20      	ldr	r3, [pc, #128]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 80180c6:	4922      	ldr	r1, [pc, #136]	@ (8018150 <HAL_RCC_OscConfig+0x7a4>)
 80180c8:	400a      	ands	r2, r1
 80180ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80180cc:	f7f9 f8a6 	bl	801121c <HAL_GetTick>
 80180d0:	0003      	movs	r3, r0
 80180d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80180d4:	e008      	b.n	80180e8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80180d6:	f7f9 f8a1 	bl	801121c <HAL_GetTick>
 80180da:	0002      	movs	r2, r0
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	1ad3      	subs	r3, r2, r3
 80180e0:	2b02      	cmp	r3, #2
 80180e2:	d901      	bls.n	80180e8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80180e4:	2303      	movs	r3, #3
 80180e6:	e02a      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80180e8:	4b17      	ldr	r3, [pc, #92]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 80180ea:	681a      	ldr	r2, [r3, #0]
 80180ec:	2380      	movs	r3, #128	@ 0x80
 80180ee:	049b      	lsls	r3, r3, #18
 80180f0:	4013      	ands	r3, r2
 80180f2:	d1f0      	bne.n	80180d6 <HAL_RCC_OscConfig+0x72a>
 80180f4:	e022      	b.n	801813c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d101      	bne.n	8018102 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80180fe:	2301      	movs	r3, #1
 8018100:	e01d      	b.n	801813e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8018102:	4b11      	ldr	r3, [pc, #68]	@ (8018148 <HAL_RCC_OscConfig+0x79c>)
 8018104:	68db      	ldr	r3, [r3, #12]
 8018106:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018108:	69ba      	ldr	r2, [r7, #24]
 801810a:	2380      	movs	r3, #128	@ 0x80
 801810c:	025b      	lsls	r3, r3, #9
 801810e:	401a      	ands	r2, r3
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018114:	429a      	cmp	r2, r3
 8018116:	d10f      	bne.n	8018138 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8018118:	69ba      	ldr	r2, [r7, #24]
 801811a:	23f0      	movs	r3, #240	@ 0xf0
 801811c:	039b      	lsls	r3, r3, #14
 801811e:	401a      	ands	r2, r3
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018124:	429a      	cmp	r2, r3
 8018126:	d107      	bne.n	8018138 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8018128:	69ba      	ldr	r2, [r7, #24]
 801812a:	23c0      	movs	r3, #192	@ 0xc0
 801812c:	041b      	lsls	r3, r3, #16
 801812e:	401a      	ands	r2, r3
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8018134:	429a      	cmp	r2, r3
 8018136:	d001      	beq.n	801813c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8018138:	2301      	movs	r3, #1
 801813a:	e000      	b.n	801813e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801813c:	2300      	movs	r3, #0
}
 801813e:	0018      	movs	r0, r3
 8018140:	46bd      	mov	sp, r7
 8018142:	b00a      	add	sp, #40	@ 0x28
 8018144:	bdb0      	pop	{r4, r5, r7, pc}
 8018146:	46c0      	nop			@ (mov r8, r8)
 8018148:	40021000 	.word	0x40021000
 801814c:	ff02ffff 	.word	0xff02ffff
 8018150:	feffffff 	.word	0xfeffffff

08018154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018154:	b5b0      	push	{r4, r5, r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d101      	bne.n	8018168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018164:	2301      	movs	r3, #1
 8018166:	e128      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018168:	4b96      	ldr	r3, [pc, #600]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2201      	movs	r2, #1
 801816e:	4013      	ands	r3, r2
 8018170:	683a      	ldr	r2, [r7, #0]
 8018172:	429a      	cmp	r2, r3
 8018174:	d91e      	bls.n	80181b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018176:	4b93      	ldr	r3, [pc, #588]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	2201      	movs	r2, #1
 801817c:	4393      	bics	r3, r2
 801817e:	0019      	movs	r1, r3
 8018180:	4b90      	ldr	r3, [pc, #576]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 8018182:	683a      	ldr	r2, [r7, #0]
 8018184:	430a      	orrs	r2, r1
 8018186:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8018188:	f7f9 f848 	bl	801121c <HAL_GetTick>
 801818c:	0003      	movs	r3, r0
 801818e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018190:	e009      	b.n	80181a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018192:	f7f9 f843 	bl	801121c <HAL_GetTick>
 8018196:	0002      	movs	r2, r0
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	1ad3      	subs	r3, r2, r3
 801819c:	4a8a      	ldr	r2, [pc, #552]	@ (80183c8 <HAL_RCC_ClockConfig+0x274>)
 801819e:	4293      	cmp	r3, r2
 80181a0:	d901      	bls.n	80181a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80181a2:	2303      	movs	r3, #3
 80181a4:	e109      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80181a6:	4b87      	ldr	r3, [pc, #540]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2201      	movs	r2, #1
 80181ac:	4013      	ands	r3, r2
 80181ae:	683a      	ldr	r2, [r7, #0]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	d1ee      	bne.n	8018192 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	2202      	movs	r2, #2
 80181ba:	4013      	ands	r3, r2
 80181bc:	d009      	beq.n	80181d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80181be:	4b83      	ldr	r3, [pc, #524]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 80181c0:	68db      	ldr	r3, [r3, #12]
 80181c2:	22f0      	movs	r2, #240	@ 0xf0
 80181c4:	4393      	bics	r3, r2
 80181c6:	0019      	movs	r1, r3
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	689a      	ldr	r2, [r3, #8]
 80181cc:	4b7f      	ldr	r3, [pc, #508]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 80181ce:	430a      	orrs	r2, r1
 80181d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	2201      	movs	r2, #1
 80181d8:	4013      	ands	r3, r2
 80181da:	d100      	bne.n	80181de <HAL_RCC_ClockConfig+0x8a>
 80181dc:	e089      	b.n	80182f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	2b02      	cmp	r3, #2
 80181e4:	d107      	bne.n	80181f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80181e6:	4b79      	ldr	r3, [pc, #484]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 80181e8:	681a      	ldr	r2, [r3, #0]
 80181ea:	2380      	movs	r3, #128	@ 0x80
 80181ec:	029b      	lsls	r3, r3, #10
 80181ee:	4013      	ands	r3, r2
 80181f0:	d120      	bne.n	8018234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80181f2:	2301      	movs	r3, #1
 80181f4:	e0e1      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	2b03      	cmp	r3, #3
 80181fc:	d107      	bne.n	801820e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80181fe:	4b73      	ldr	r3, [pc, #460]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018200:	681a      	ldr	r2, [r3, #0]
 8018202:	2380      	movs	r3, #128	@ 0x80
 8018204:	049b      	lsls	r3, r3, #18
 8018206:	4013      	ands	r3, r2
 8018208:	d114      	bne.n	8018234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801820a:	2301      	movs	r3, #1
 801820c:	e0d5      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	685b      	ldr	r3, [r3, #4]
 8018212:	2b01      	cmp	r3, #1
 8018214:	d106      	bne.n	8018224 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018216:	4b6d      	ldr	r3, [pc, #436]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	2204      	movs	r2, #4
 801821c:	4013      	ands	r3, r2
 801821e:	d109      	bne.n	8018234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8018220:	2301      	movs	r3, #1
 8018222:	e0ca      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018224:	4b69      	ldr	r3, [pc, #420]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018226:	681a      	ldr	r2, [r3, #0]
 8018228:	2380      	movs	r3, #128	@ 0x80
 801822a:	009b      	lsls	r3, r3, #2
 801822c:	4013      	ands	r3, r2
 801822e:	d101      	bne.n	8018234 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8018230:	2301      	movs	r3, #1
 8018232:	e0c2      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018234:	4b65      	ldr	r3, [pc, #404]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018236:	68db      	ldr	r3, [r3, #12]
 8018238:	2203      	movs	r2, #3
 801823a:	4393      	bics	r3, r2
 801823c:	0019      	movs	r1, r3
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	685a      	ldr	r2, [r3, #4]
 8018242:	4b62      	ldr	r3, [pc, #392]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018244:	430a      	orrs	r2, r1
 8018246:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018248:	f7f8 ffe8 	bl	801121c <HAL_GetTick>
 801824c:	0003      	movs	r3, r0
 801824e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	685b      	ldr	r3, [r3, #4]
 8018254:	2b02      	cmp	r3, #2
 8018256:	d111      	bne.n	801827c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8018258:	e009      	b.n	801826e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801825a:	f7f8 ffdf 	bl	801121c <HAL_GetTick>
 801825e:	0002      	movs	r2, r0
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	1ad3      	subs	r3, r2, r3
 8018264:	4a58      	ldr	r2, [pc, #352]	@ (80183c8 <HAL_RCC_ClockConfig+0x274>)
 8018266:	4293      	cmp	r3, r2
 8018268:	d901      	bls.n	801826e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801826a:	2303      	movs	r3, #3
 801826c:	e0a5      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801826e:	4b57      	ldr	r3, [pc, #348]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018270:	68db      	ldr	r3, [r3, #12]
 8018272:	220c      	movs	r2, #12
 8018274:	4013      	ands	r3, r2
 8018276:	2b08      	cmp	r3, #8
 8018278:	d1ef      	bne.n	801825a <HAL_RCC_ClockConfig+0x106>
 801827a:	e03a      	b.n	80182f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	685b      	ldr	r3, [r3, #4]
 8018280:	2b03      	cmp	r3, #3
 8018282:	d111      	bne.n	80182a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018284:	e009      	b.n	801829a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018286:	f7f8 ffc9 	bl	801121c <HAL_GetTick>
 801828a:	0002      	movs	r2, r0
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	1ad3      	subs	r3, r2, r3
 8018290:	4a4d      	ldr	r2, [pc, #308]	@ (80183c8 <HAL_RCC_ClockConfig+0x274>)
 8018292:	4293      	cmp	r3, r2
 8018294:	d901      	bls.n	801829a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8018296:	2303      	movs	r3, #3
 8018298:	e08f      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801829a:	4b4c      	ldr	r3, [pc, #304]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	220c      	movs	r2, #12
 80182a0:	4013      	ands	r3, r2
 80182a2:	2b0c      	cmp	r3, #12
 80182a4:	d1ef      	bne.n	8018286 <HAL_RCC_ClockConfig+0x132>
 80182a6:	e024      	b.n	80182f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	2b01      	cmp	r3, #1
 80182ae:	d11b      	bne.n	80182e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80182b0:	e009      	b.n	80182c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80182b2:	f7f8 ffb3 	bl	801121c <HAL_GetTick>
 80182b6:	0002      	movs	r2, r0
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	1ad3      	subs	r3, r2, r3
 80182bc:	4a42      	ldr	r2, [pc, #264]	@ (80183c8 <HAL_RCC_ClockConfig+0x274>)
 80182be:	4293      	cmp	r3, r2
 80182c0:	d901      	bls.n	80182c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80182c2:	2303      	movs	r3, #3
 80182c4:	e079      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80182c6:	4b41      	ldr	r3, [pc, #260]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 80182c8:	68db      	ldr	r3, [r3, #12]
 80182ca:	220c      	movs	r2, #12
 80182cc:	4013      	ands	r3, r2
 80182ce:	2b04      	cmp	r3, #4
 80182d0:	d1ef      	bne.n	80182b2 <HAL_RCC_ClockConfig+0x15e>
 80182d2:	e00e      	b.n	80182f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80182d4:	f7f8 ffa2 	bl	801121c <HAL_GetTick>
 80182d8:	0002      	movs	r2, r0
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	1ad3      	subs	r3, r2, r3
 80182de:	4a3a      	ldr	r2, [pc, #232]	@ (80183c8 <HAL_RCC_ClockConfig+0x274>)
 80182e0:	4293      	cmp	r3, r2
 80182e2:	d901      	bls.n	80182e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80182e4:	2303      	movs	r3, #3
 80182e6:	e068      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80182e8:	4b38      	ldr	r3, [pc, #224]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	220c      	movs	r2, #12
 80182ee:	4013      	ands	r3, r2
 80182f0:	d1f0      	bne.n	80182d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80182f2:	4b34      	ldr	r3, [pc, #208]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	2201      	movs	r2, #1
 80182f8:	4013      	ands	r3, r2
 80182fa:	683a      	ldr	r2, [r7, #0]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d21e      	bcs.n	801833e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018300:	4b30      	ldr	r3, [pc, #192]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2201      	movs	r2, #1
 8018306:	4393      	bics	r3, r2
 8018308:	0019      	movs	r1, r3
 801830a:	4b2e      	ldr	r3, [pc, #184]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 801830c:	683a      	ldr	r2, [r7, #0]
 801830e:	430a      	orrs	r2, r1
 8018310:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8018312:	f7f8 ff83 	bl	801121c <HAL_GetTick>
 8018316:	0003      	movs	r3, r0
 8018318:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801831a:	e009      	b.n	8018330 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801831c:	f7f8 ff7e 	bl	801121c <HAL_GetTick>
 8018320:	0002      	movs	r2, r0
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	1ad3      	subs	r3, r2, r3
 8018326:	4a28      	ldr	r2, [pc, #160]	@ (80183c8 <HAL_RCC_ClockConfig+0x274>)
 8018328:	4293      	cmp	r3, r2
 801832a:	d901      	bls.n	8018330 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801832c:	2303      	movs	r3, #3
 801832e:	e044      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018330:	4b24      	ldr	r3, [pc, #144]	@ (80183c4 <HAL_RCC_ClockConfig+0x270>)
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2201      	movs	r2, #1
 8018336:	4013      	ands	r3, r2
 8018338:	683a      	ldr	r2, [r7, #0]
 801833a:	429a      	cmp	r2, r3
 801833c:	d1ee      	bne.n	801831c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	2204      	movs	r2, #4
 8018344:	4013      	ands	r3, r2
 8018346:	d009      	beq.n	801835c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018348:	4b20      	ldr	r3, [pc, #128]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	4a20      	ldr	r2, [pc, #128]	@ (80183d0 <HAL_RCC_ClockConfig+0x27c>)
 801834e:	4013      	ands	r3, r2
 8018350:	0019      	movs	r1, r3
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	68da      	ldr	r2, [r3, #12]
 8018356:	4b1d      	ldr	r3, [pc, #116]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018358:	430a      	orrs	r2, r1
 801835a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	2208      	movs	r2, #8
 8018362:	4013      	ands	r3, r2
 8018364:	d00a      	beq.n	801837c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8018366:	4b19      	ldr	r3, [pc, #100]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018368:	68db      	ldr	r3, [r3, #12]
 801836a:	4a1a      	ldr	r2, [pc, #104]	@ (80183d4 <HAL_RCC_ClockConfig+0x280>)
 801836c:	4013      	ands	r3, r2
 801836e:	0019      	movs	r1, r3
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	691b      	ldr	r3, [r3, #16]
 8018374:	00da      	lsls	r2, r3, #3
 8018376:	4b15      	ldr	r3, [pc, #84]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018378:	430a      	orrs	r2, r1
 801837a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801837c:	f000 f832 	bl	80183e4 <HAL_RCC_GetSysClockFreq>
 8018380:	0001      	movs	r1, r0
 8018382:	4b12      	ldr	r3, [pc, #72]	@ (80183cc <HAL_RCC_ClockConfig+0x278>)
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	091b      	lsrs	r3, r3, #4
 8018388:	220f      	movs	r2, #15
 801838a:	4013      	ands	r3, r2
 801838c:	4a12      	ldr	r2, [pc, #72]	@ (80183d8 <HAL_RCC_ClockConfig+0x284>)
 801838e:	5cd3      	ldrb	r3, [r2, r3]
 8018390:	000a      	movs	r2, r1
 8018392:	40da      	lsrs	r2, r3
 8018394:	4b11      	ldr	r3, [pc, #68]	@ (80183dc <HAL_RCC_ClockConfig+0x288>)
 8018396:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8018398:	4b11      	ldr	r3, [pc, #68]	@ (80183e0 <HAL_RCC_ClockConfig+0x28c>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	250b      	movs	r5, #11
 801839e:	197c      	adds	r4, r7, r5
 80183a0:	0018      	movs	r0, r3
 80183a2:	f7f8 fef5 	bl	8011190 <HAL_InitTick>
 80183a6:	0003      	movs	r3, r0
 80183a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80183aa:	197b      	adds	r3, r7, r5
 80183ac:	781b      	ldrb	r3, [r3, #0]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d002      	beq.n	80183b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80183b2:	197b      	adds	r3, r7, r5
 80183b4:	781b      	ldrb	r3, [r3, #0]
 80183b6:	e000      	b.n	80183ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80183b8:	2300      	movs	r3, #0
}
 80183ba:	0018      	movs	r0, r3
 80183bc:	46bd      	mov	sp, r7
 80183be:	b004      	add	sp, #16
 80183c0:	bdb0      	pop	{r4, r5, r7, pc}
 80183c2:	46c0      	nop			@ (mov r8, r8)
 80183c4:	40022000 	.word	0x40022000
 80183c8:	00001388 	.word	0x00001388
 80183cc:	40021000 	.word	0x40021000
 80183d0:	fffff8ff 	.word	0xfffff8ff
 80183d4:	ffffc7ff 	.word	0xffffc7ff
 80183d8:	08029164 	.word	0x08029164
 80183dc:	200000e4 	.word	0x200000e4
 80183e0:	200000f4 	.word	0x200000f4

080183e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80183e4:	b5b0      	push	{r4, r5, r7, lr}
 80183e6:	b08e      	sub	sp, #56	@ 0x38
 80183e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80183ea:	4b4c      	ldr	r3, [pc, #304]	@ (801851c <HAL_RCC_GetSysClockFreq+0x138>)
 80183ec:	68db      	ldr	r3, [r3, #12]
 80183ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80183f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80183f2:	230c      	movs	r3, #12
 80183f4:	4013      	ands	r3, r2
 80183f6:	2b0c      	cmp	r3, #12
 80183f8:	d014      	beq.n	8018424 <HAL_RCC_GetSysClockFreq+0x40>
 80183fa:	d900      	bls.n	80183fe <HAL_RCC_GetSysClockFreq+0x1a>
 80183fc:	e07b      	b.n	80184f6 <HAL_RCC_GetSysClockFreq+0x112>
 80183fe:	2b04      	cmp	r3, #4
 8018400:	d002      	beq.n	8018408 <HAL_RCC_GetSysClockFreq+0x24>
 8018402:	2b08      	cmp	r3, #8
 8018404:	d00b      	beq.n	801841e <HAL_RCC_GetSysClockFreq+0x3a>
 8018406:	e076      	b.n	80184f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8018408:	4b44      	ldr	r3, [pc, #272]	@ (801851c <HAL_RCC_GetSysClockFreq+0x138>)
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2210      	movs	r2, #16
 801840e:	4013      	ands	r3, r2
 8018410:	d002      	beq.n	8018418 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8018412:	4b43      	ldr	r3, [pc, #268]	@ (8018520 <HAL_RCC_GetSysClockFreq+0x13c>)
 8018414:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8018416:	e07c      	b.n	8018512 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8018418:	4b42      	ldr	r3, [pc, #264]	@ (8018524 <HAL_RCC_GetSysClockFreq+0x140>)
 801841a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801841c:	e079      	b.n	8018512 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801841e:	4b42      	ldr	r3, [pc, #264]	@ (8018528 <HAL_RCC_GetSysClockFreq+0x144>)
 8018420:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8018422:	e076      	b.n	8018512 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8018424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018426:	0c9a      	lsrs	r2, r3, #18
 8018428:	230f      	movs	r3, #15
 801842a:	401a      	ands	r2, r3
 801842c:	4b3f      	ldr	r3, [pc, #252]	@ (801852c <HAL_RCC_GetSysClockFreq+0x148>)
 801842e:	5c9b      	ldrb	r3, [r3, r2]
 8018430:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8018432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018434:	0d9a      	lsrs	r2, r3, #22
 8018436:	2303      	movs	r3, #3
 8018438:	4013      	ands	r3, r2
 801843a:	3301      	adds	r3, #1
 801843c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801843e:	4b37      	ldr	r3, [pc, #220]	@ (801851c <HAL_RCC_GetSysClockFreq+0x138>)
 8018440:	68da      	ldr	r2, [r3, #12]
 8018442:	2380      	movs	r3, #128	@ 0x80
 8018444:	025b      	lsls	r3, r3, #9
 8018446:	4013      	ands	r3, r2
 8018448:	d01a      	beq.n	8018480 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801844c:	61bb      	str	r3, [r7, #24]
 801844e:	2300      	movs	r3, #0
 8018450:	61fb      	str	r3, [r7, #28]
 8018452:	4a35      	ldr	r2, [pc, #212]	@ (8018528 <HAL_RCC_GetSysClockFreq+0x144>)
 8018454:	2300      	movs	r3, #0
 8018456:	69b8      	ldr	r0, [r7, #24]
 8018458:	69f9      	ldr	r1, [r7, #28]
 801845a:	f7e8 f8b1 	bl	80005c0 <__aeabi_lmul>
 801845e:	0002      	movs	r2, r0
 8018460:	000b      	movs	r3, r1
 8018462:	0010      	movs	r0, r2
 8018464:	0019      	movs	r1, r3
 8018466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018468:	613b      	str	r3, [r7, #16]
 801846a:	2300      	movs	r3, #0
 801846c:	617b      	str	r3, [r7, #20]
 801846e:	693a      	ldr	r2, [r7, #16]
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	f7e8 f885 	bl	8000580 <__aeabi_uldivmod>
 8018476:	0002      	movs	r2, r0
 8018478:	000b      	movs	r3, r1
 801847a:	0013      	movs	r3, r2
 801847c:	637b      	str	r3, [r7, #52]	@ 0x34
 801847e:	e037      	b.n	80184f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8018480:	4b26      	ldr	r3, [pc, #152]	@ (801851c <HAL_RCC_GetSysClockFreq+0x138>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	2210      	movs	r2, #16
 8018486:	4013      	ands	r3, r2
 8018488:	d01a      	beq.n	80184c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801848c:	60bb      	str	r3, [r7, #8]
 801848e:	2300      	movs	r3, #0
 8018490:	60fb      	str	r3, [r7, #12]
 8018492:	4a23      	ldr	r2, [pc, #140]	@ (8018520 <HAL_RCC_GetSysClockFreq+0x13c>)
 8018494:	2300      	movs	r3, #0
 8018496:	68b8      	ldr	r0, [r7, #8]
 8018498:	68f9      	ldr	r1, [r7, #12]
 801849a:	f7e8 f891 	bl	80005c0 <__aeabi_lmul>
 801849e:	0002      	movs	r2, r0
 80184a0:	000b      	movs	r3, r1
 80184a2:	0010      	movs	r0, r2
 80184a4:	0019      	movs	r1, r3
 80184a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184a8:	603b      	str	r3, [r7, #0]
 80184aa:	2300      	movs	r3, #0
 80184ac:	607b      	str	r3, [r7, #4]
 80184ae:	683a      	ldr	r2, [r7, #0]
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f7e8 f865 	bl	8000580 <__aeabi_uldivmod>
 80184b6:	0002      	movs	r2, r0
 80184b8:	000b      	movs	r3, r1
 80184ba:	0013      	movs	r3, r2
 80184bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80184be:	e017      	b.n	80184f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80184c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184c2:	0018      	movs	r0, r3
 80184c4:	2300      	movs	r3, #0
 80184c6:	0019      	movs	r1, r3
 80184c8:	4a16      	ldr	r2, [pc, #88]	@ (8018524 <HAL_RCC_GetSysClockFreq+0x140>)
 80184ca:	2300      	movs	r3, #0
 80184cc:	f7e8 f878 	bl	80005c0 <__aeabi_lmul>
 80184d0:	0002      	movs	r2, r0
 80184d2:	000b      	movs	r3, r1
 80184d4:	0010      	movs	r0, r2
 80184d6:	0019      	movs	r1, r3
 80184d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184da:	001c      	movs	r4, r3
 80184dc:	2300      	movs	r3, #0
 80184de:	001d      	movs	r5, r3
 80184e0:	0022      	movs	r2, r4
 80184e2:	002b      	movs	r3, r5
 80184e4:	f7e8 f84c 	bl	8000580 <__aeabi_uldivmod>
 80184e8:	0002      	movs	r2, r0
 80184ea:	000b      	movs	r3, r1
 80184ec:	0013      	movs	r3, r2
 80184ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80184f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80184f4:	e00d      	b.n	8018512 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80184f6:	4b09      	ldr	r3, [pc, #36]	@ (801851c <HAL_RCC_GetSysClockFreq+0x138>)
 80184f8:	685b      	ldr	r3, [r3, #4]
 80184fa:	0b5b      	lsrs	r3, r3, #13
 80184fc:	2207      	movs	r2, #7
 80184fe:	4013      	ands	r3, r2
 8018500:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8018502:	6a3b      	ldr	r3, [r7, #32]
 8018504:	3301      	adds	r3, #1
 8018506:	2280      	movs	r2, #128	@ 0x80
 8018508:	0212      	lsls	r2, r2, #8
 801850a:	409a      	lsls	r2, r3
 801850c:	0013      	movs	r3, r2
 801850e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8018510:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8018512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8018514:	0018      	movs	r0, r3
 8018516:	46bd      	mov	sp, r7
 8018518:	b00e      	add	sp, #56	@ 0x38
 801851a:	bdb0      	pop	{r4, r5, r7, pc}
 801851c:	40021000 	.word	0x40021000
 8018520:	003d0900 	.word	0x003d0900
 8018524:	00f42400 	.word	0x00f42400
 8018528:	007a1200 	.word	0x007a1200
 801852c:	0802917c 	.word	0x0802917c

08018530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8018534:	4b02      	ldr	r3, [pc, #8]	@ (8018540 <HAL_RCC_GetHCLKFreq+0x10>)
 8018536:	681b      	ldr	r3, [r3, #0]
}
 8018538:	0018      	movs	r0, r3
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}
 801853e:	46c0      	nop			@ (mov r8, r8)
 8018540:	200000e4 	.word	0x200000e4

08018544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8018548:	f7ff fff2 	bl	8018530 <HAL_RCC_GetHCLKFreq>
 801854c:	0001      	movs	r1, r0
 801854e:	4b06      	ldr	r3, [pc, #24]	@ (8018568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	0a1b      	lsrs	r3, r3, #8
 8018554:	2207      	movs	r2, #7
 8018556:	4013      	ands	r3, r2
 8018558:	4a04      	ldr	r2, [pc, #16]	@ (801856c <HAL_RCC_GetPCLK1Freq+0x28>)
 801855a:	5cd3      	ldrb	r3, [r2, r3]
 801855c:	40d9      	lsrs	r1, r3
 801855e:	000b      	movs	r3, r1
}
 8018560:	0018      	movs	r0, r3
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}
 8018566:	46c0      	nop			@ (mov r8, r8)
 8018568:	40021000 	.word	0x40021000
 801856c:	08029174 	.word	0x08029174

08018570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8018574:	f7ff ffdc 	bl	8018530 <HAL_RCC_GetHCLKFreq>
 8018578:	0001      	movs	r1, r0
 801857a:	4b06      	ldr	r3, [pc, #24]	@ (8018594 <HAL_RCC_GetPCLK2Freq+0x24>)
 801857c:	68db      	ldr	r3, [r3, #12]
 801857e:	0adb      	lsrs	r3, r3, #11
 8018580:	2207      	movs	r2, #7
 8018582:	4013      	ands	r3, r2
 8018584:	4a04      	ldr	r2, [pc, #16]	@ (8018598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8018586:	5cd3      	ldrb	r3, [r2, r3]
 8018588:	40d9      	lsrs	r1, r3
 801858a:	000b      	movs	r3, r1
}
 801858c:	0018      	movs	r0, r3
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}
 8018592:	46c0      	nop			@ (mov r8, r8)
 8018594:	40021000 	.word	0x40021000
 8018598:	08029174 	.word	0x08029174

0801859c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b086      	sub	sp, #24
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80185a4:	2017      	movs	r0, #23
 80185a6:	183b      	adds	r3, r7, r0
 80185a8:	2200      	movs	r2, #0
 80185aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2220      	movs	r2, #32
 80185b2:	4013      	ands	r3, r2
 80185b4:	d100      	bne.n	80185b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80185b6:	e0c7      	b.n	8018748 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80185b8:	4b9b      	ldr	r3, [pc, #620]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80185bc:	2380      	movs	r3, #128	@ 0x80
 80185be:	055b      	lsls	r3, r3, #21
 80185c0:	4013      	ands	r3, r2
 80185c2:	d109      	bne.n	80185d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80185c4:	4b98      	ldr	r3, [pc, #608]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80185c8:	4b97      	ldr	r3, [pc, #604]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80185ca:	2180      	movs	r1, #128	@ 0x80
 80185cc:	0549      	lsls	r1, r1, #21
 80185ce:	430a      	orrs	r2, r1
 80185d0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80185d2:	183b      	adds	r3, r7, r0
 80185d4:	2201      	movs	r2, #1
 80185d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80185d8:	4b94      	ldr	r3, [pc, #592]	@ (801882c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80185da:	681a      	ldr	r2, [r3, #0]
 80185dc:	2380      	movs	r3, #128	@ 0x80
 80185de:	005b      	lsls	r3, r3, #1
 80185e0:	4013      	ands	r3, r2
 80185e2:	d11a      	bne.n	801861a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80185e4:	4b91      	ldr	r3, [pc, #580]	@ (801882c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80185e6:	681a      	ldr	r2, [r3, #0]
 80185e8:	4b90      	ldr	r3, [pc, #576]	@ (801882c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80185ea:	2180      	movs	r1, #128	@ 0x80
 80185ec:	0049      	lsls	r1, r1, #1
 80185ee:	430a      	orrs	r2, r1
 80185f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80185f2:	f7f8 fe13 	bl	801121c <HAL_GetTick>
 80185f6:	0003      	movs	r3, r0
 80185f8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80185fa:	e008      	b.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80185fc:	f7f8 fe0e 	bl	801121c <HAL_GetTick>
 8018600:	0002      	movs	r2, r0
 8018602:	693b      	ldr	r3, [r7, #16]
 8018604:	1ad3      	subs	r3, r2, r3
 8018606:	2b64      	cmp	r3, #100	@ 0x64
 8018608:	d901      	bls.n	801860e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801860a:	2303      	movs	r3, #3
 801860c:	e107      	b.n	801881e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801860e:	4b87      	ldr	r3, [pc, #540]	@ (801882c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8018610:	681a      	ldr	r2, [r3, #0]
 8018612:	2380      	movs	r3, #128	@ 0x80
 8018614:	005b      	lsls	r3, r3, #1
 8018616:	4013      	ands	r3, r2
 8018618:	d0f0      	beq.n	80185fc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801861a:	4b83      	ldr	r3, [pc, #524]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801861c:	681a      	ldr	r2, [r3, #0]
 801861e:	23c0      	movs	r3, #192	@ 0xc0
 8018620:	039b      	lsls	r3, r3, #14
 8018622:	4013      	ands	r3, r2
 8018624:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	685a      	ldr	r2, [r3, #4]
 801862a:	23c0      	movs	r3, #192	@ 0xc0
 801862c:	039b      	lsls	r3, r3, #14
 801862e:	4013      	ands	r3, r2
 8018630:	68fa      	ldr	r2, [r7, #12]
 8018632:	429a      	cmp	r2, r3
 8018634:	d013      	beq.n	801865e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	685a      	ldr	r2, [r3, #4]
 801863a:	23c0      	movs	r3, #192	@ 0xc0
 801863c:	029b      	lsls	r3, r3, #10
 801863e:	401a      	ands	r2, r3
 8018640:	23c0      	movs	r3, #192	@ 0xc0
 8018642:	029b      	lsls	r3, r3, #10
 8018644:	429a      	cmp	r2, r3
 8018646:	d10a      	bne.n	801865e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8018648:	4b77      	ldr	r3, [pc, #476]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801864a:	681a      	ldr	r2, [r3, #0]
 801864c:	2380      	movs	r3, #128	@ 0x80
 801864e:	029b      	lsls	r3, r3, #10
 8018650:	401a      	ands	r2, r3
 8018652:	2380      	movs	r3, #128	@ 0x80
 8018654:	029b      	lsls	r3, r3, #10
 8018656:	429a      	cmp	r2, r3
 8018658:	d101      	bne.n	801865e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801865a:	2301      	movs	r3, #1
 801865c:	e0df      	b.n	801881e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801865e:	4b72      	ldr	r3, [pc, #456]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018660:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018662:	23c0      	movs	r3, #192	@ 0xc0
 8018664:	029b      	lsls	r3, r3, #10
 8018666:	4013      	ands	r3, r2
 8018668:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d03b      	beq.n	80186e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	685a      	ldr	r2, [r3, #4]
 8018674:	23c0      	movs	r3, #192	@ 0xc0
 8018676:	029b      	lsls	r3, r3, #10
 8018678:	4013      	ands	r3, r2
 801867a:	68fa      	ldr	r2, [r7, #12]
 801867c:	429a      	cmp	r2, r3
 801867e:	d033      	beq.n	80186e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2220      	movs	r2, #32
 8018686:	4013      	ands	r3, r2
 8018688:	d02e      	beq.n	80186e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801868a:	4b67      	ldr	r3, [pc, #412]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801868c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801868e:	4a68      	ldr	r2, [pc, #416]	@ (8018830 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8018690:	4013      	ands	r3, r2
 8018692:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8018694:	4b64      	ldr	r3, [pc, #400]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018698:	4b63      	ldr	r3, [pc, #396]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801869a:	2180      	movs	r1, #128	@ 0x80
 801869c:	0309      	lsls	r1, r1, #12
 801869e:	430a      	orrs	r2, r1
 80186a0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80186a2:	4b61      	ldr	r3, [pc, #388]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80186a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80186a6:	4b60      	ldr	r3, [pc, #384]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80186a8:	4962      	ldr	r1, [pc, #392]	@ (8018834 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80186aa:	400a      	ands	r2, r1
 80186ac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80186ae:	4b5e      	ldr	r3, [pc, #376]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80186b0:	68fa      	ldr	r2, [r7, #12]
 80186b2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80186b4:	68fa      	ldr	r2, [r7, #12]
 80186b6:	2380      	movs	r3, #128	@ 0x80
 80186b8:	005b      	lsls	r3, r3, #1
 80186ba:	4013      	ands	r3, r2
 80186bc:	d014      	beq.n	80186e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80186be:	f7f8 fdad 	bl	801121c <HAL_GetTick>
 80186c2:	0003      	movs	r3, r0
 80186c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80186c6:	e009      	b.n	80186dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80186c8:	f7f8 fda8 	bl	801121c <HAL_GetTick>
 80186cc:	0002      	movs	r2, r0
 80186ce:	693b      	ldr	r3, [r7, #16]
 80186d0:	1ad3      	subs	r3, r2, r3
 80186d2:	4a59      	ldr	r2, [pc, #356]	@ (8018838 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80186d4:	4293      	cmp	r3, r2
 80186d6:	d901      	bls.n	80186dc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80186d8:	2303      	movs	r3, #3
 80186da:	e0a0      	b.n	801881e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80186dc:	4b52      	ldr	r3, [pc, #328]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80186de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80186e0:	2380      	movs	r3, #128	@ 0x80
 80186e2:	009b      	lsls	r3, r3, #2
 80186e4:	4013      	ands	r3, r2
 80186e6:	d0ef      	beq.n	80186c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	2220      	movs	r2, #32
 80186ee:	4013      	ands	r3, r2
 80186f0:	d01f      	beq.n	8018732 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	685a      	ldr	r2, [r3, #4]
 80186f6:	23c0      	movs	r3, #192	@ 0xc0
 80186f8:	029b      	lsls	r3, r3, #10
 80186fa:	401a      	ands	r2, r3
 80186fc:	23c0      	movs	r3, #192	@ 0xc0
 80186fe:	029b      	lsls	r3, r3, #10
 8018700:	429a      	cmp	r2, r3
 8018702:	d10c      	bne.n	801871e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8018704:	4b48      	ldr	r3, [pc, #288]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	4a4c      	ldr	r2, [pc, #304]	@ (801883c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801870a:	4013      	ands	r3, r2
 801870c:	0019      	movs	r1, r3
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	685a      	ldr	r2, [r3, #4]
 8018712:	23c0      	movs	r3, #192	@ 0xc0
 8018714:	039b      	lsls	r3, r3, #14
 8018716:	401a      	ands	r2, r3
 8018718:	4b43      	ldr	r3, [pc, #268]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801871a:	430a      	orrs	r2, r1
 801871c:	601a      	str	r2, [r3, #0]
 801871e:	4b42      	ldr	r3, [pc, #264]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018720:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	685a      	ldr	r2, [r3, #4]
 8018726:	23c0      	movs	r3, #192	@ 0xc0
 8018728:	029b      	lsls	r3, r3, #10
 801872a:	401a      	ands	r2, r3
 801872c:	4b3e      	ldr	r3, [pc, #248]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801872e:	430a      	orrs	r2, r1
 8018730:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8018732:	2317      	movs	r3, #23
 8018734:	18fb      	adds	r3, r7, r3
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	2b01      	cmp	r3, #1
 801873a:	d105      	bne.n	8018748 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801873c:	4b3a      	ldr	r3, [pc, #232]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801873e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018740:	4b39      	ldr	r3, [pc, #228]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018742:	493f      	ldr	r1, [pc, #252]	@ (8018840 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8018744:	400a      	ands	r2, r1
 8018746:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	2201      	movs	r2, #1
 801874e:	4013      	ands	r3, r2
 8018750:	d009      	beq.n	8018766 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8018752:	4b35      	ldr	r3, [pc, #212]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018756:	2203      	movs	r2, #3
 8018758:	4393      	bics	r3, r2
 801875a:	0019      	movs	r1, r3
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	689a      	ldr	r2, [r3, #8]
 8018760:	4b31      	ldr	r3, [pc, #196]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018762:	430a      	orrs	r2, r1
 8018764:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	2202      	movs	r2, #2
 801876c:	4013      	ands	r3, r2
 801876e:	d009      	beq.n	8018784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8018770:	4b2d      	ldr	r3, [pc, #180]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018774:	220c      	movs	r2, #12
 8018776:	4393      	bics	r3, r2
 8018778:	0019      	movs	r1, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	68da      	ldr	r2, [r3, #12]
 801877e:	4b2a      	ldr	r3, [pc, #168]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018780:	430a      	orrs	r2, r1
 8018782:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	2204      	movs	r2, #4
 801878a:	4013      	ands	r3, r2
 801878c:	d009      	beq.n	80187a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801878e:	4b26      	ldr	r3, [pc, #152]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018792:	4a2c      	ldr	r2, [pc, #176]	@ (8018844 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8018794:	4013      	ands	r3, r2
 8018796:	0019      	movs	r1, r3
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	691a      	ldr	r2, [r3, #16]
 801879c:	4b22      	ldr	r3, [pc, #136]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801879e:	430a      	orrs	r2, r1
 80187a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	2208      	movs	r2, #8
 80187a8:	4013      	ands	r3, r2
 80187aa:	d009      	beq.n	80187c0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80187ac:	4b1e      	ldr	r3, [pc, #120]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80187ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80187b0:	4a25      	ldr	r2, [pc, #148]	@ (8018848 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80187b2:	4013      	ands	r3, r2
 80187b4:	0019      	movs	r1, r3
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	695a      	ldr	r2, [r3, #20]
 80187ba:	4b1b      	ldr	r3, [pc, #108]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80187bc:	430a      	orrs	r2, r1
 80187be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	681a      	ldr	r2, [r3, #0]
 80187c4:	2380      	movs	r3, #128	@ 0x80
 80187c6:	005b      	lsls	r3, r3, #1
 80187c8:	4013      	ands	r3, r2
 80187ca:	d009      	beq.n	80187e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80187cc:	4b16      	ldr	r3, [pc, #88]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80187ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80187d0:	4a17      	ldr	r2, [pc, #92]	@ (8018830 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80187d2:	4013      	ands	r3, r2
 80187d4:	0019      	movs	r1, r3
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	699a      	ldr	r2, [r3, #24]
 80187da:	4b13      	ldr	r3, [pc, #76]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80187dc:	430a      	orrs	r2, r1
 80187de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	2240      	movs	r2, #64	@ 0x40
 80187e6:	4013      	ands	r3, r2
 80187e8:	d009      	beq.n	80187fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80187ea:	4b0f      	ldr	r3, [pc, #60]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80187ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80187ee:	4a17      	ldr	r2, [pc, #92]	@ (801884c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80187f0:	4013      	ands	r3, r2
 80187f2:	0019      	movs	r1, r3
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6a1a      	ldr	r2, [r3, #32]
 80187f8:	4b0b      	ldr	r3, [pc, #44]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80187fa:	430a      	orrs	r2, r1
 80187fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	2280      	movs	r2, #128	@ 0x80
 8018804:	4013      	ands	r3, r2
 8018806:	d009      	beq.n	801881c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8018808:	4b07      	ldr	r3, [pc, #28]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801880a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801880c:	4a10      	ldr	r2, [pc, #64]	@ (8018850 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801880e:	4013      	ands	r3, r2
 8018810:	0019      	movs	r1, r3
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	69da      	ldr	r2, [r3, #28]
 8018816:	4b04      	ldr	r3, [pc, #16]	@ (8018828 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8018818:	430a      	orrs	r2, r1
 801881a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801881c:	2300      	movs	r3, #0
}
 801881e:	0018      	movs	r0, r3
 8018820:	46bd      	mov	sp, r7
 8018822:	b006      	add	sp, #24
 8018824:	bd80      	pop	{r7, pc}
 8018826:	46c0      	nop			@ (mov r8, r8)
 8018828:	40021000 	.word	0x40021000
 801882c:	40007000 	.word	0x40007000
 8018830:	fffcffff 	.word	0xfffcffff
 8018834:	fff7ffff 	.word	0xfff7ffff
 8018838:	00001388 	.word	0x00001388
 801883c:	ffcfffff 	.word	0xffcfffff
 8018840:	efffffff 	.word	0xefffffff
 8018844:	fffff3ff 	.word	0xfffff3ff
 8018848:	ffffcfff 	.word	0xffffcfff
 801884c:	fbffffff 	.word	0xfbffffff
 8018850:	fff3ffff 	.word	0xfff3ffff

08018854 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8018854:	b5b0      	push	{r4, r5, r7, lr}
 8018856:	b084      	sub	sp, #16
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801885c:	230f      	movs	r3, #15
 801885e:	18fb      	adds	r3, r7, r3
 8018860:	2201      	movs	r2, #1
 8018862:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d101      	bne.n	801886e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801886a:	2301      	movs	r3, #1
 801886c:	e088      	b.n	8018980 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	2221      	movs	r2, #33	@ 0x21
 8018872:	5c9b      	ldrb	r3, [r3, r2]
 8018874:	b2db      	uxtb	r3, r3
 8018876:	2b00      	cmp	r3, #0
 8018878:	d107      	bne.n	801888a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	2220      	movs	r2, #32
 801887e:	2100      	movs	r1, #0
 8018880:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	0018      	movs	r0, r3
 8018886:	f7f2 fd7f 	bl	800b388 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	2221      	movs	r2, #33	@ 0x21
 801888e:	2102      	movs	r1, #2
 8018890:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	68db      	ldr	r3, [r3, #12]
 8018898:	2210      	movs	r2, #16
 801889a:	4013      	ands	r3, r2
 801889c:	2b10      	cmp	r3, #16
 801889e:	d05f      	beq.n	8018960 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	22ca      	movs	r2, #202	@ 0xca
 80188a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	2253      	movs	r2, #83	@ 0x53
 80188ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80188b0:	250f      	movs	r5, #15
 80188b2:	197c      	adds	r4, r7, r5
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	0018      	movs	r0, r3
 80188b8:	f000 fa7c 	bl	8018db4 <RTC_EnterInitMode>
 80188bc:	0003      	movs	r3, r0
 80188be:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80188c0:	0028      	movs	r0, r5
 80188c2:	183b      	adds	r3, r7, r0
 80188c4:	781b      	ldrb	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d12c      	bne.n	8018924 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	689a      	ldr	r2, [r3, #8]
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	492c      	ldr	r1, [pc, #176]	@ (8018988 <HAL_RTC_Init+0x134>)
 80188d6:	400a      	ands	r2, r1
 80188d8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	6899      	ldr	r1, [r3, #8]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	685a      	ldr	r2, [r3, #4]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	691b      	ldr	r3, [r3, #16]
 80188e8:	431a      	orrs	r2, r3
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	699b      	ldr	r3, [r3, #24]
 80188ee:	431a      	orrs	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	430a      	orrs	r2, r1
 80188f6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	68d2      	ldr	r2, [r2, #12]
 8018900:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	6919      	ldr	r1, [r3, #16]
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	689b      	ldr	r3, [r3, #8]
 801890c:	041a      	lsls	r2, r3, #16
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	430a      	orrs	r2, r1
 8018914:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8018916:	183c      	adds	r4, r7, r0
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	0018      	movs	r0, r3
 801891c:	f000 fa8e 	bl	8018e3c <RTC_ExitInitMode>
 8018920:	0003      	movs	r3, r0
 8018922:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8018924:	230f      	movs	r3, #15
 8018926:	18fb      	adds	r3, r7, r3
 8018928:	781b      	ldrb	r3, [r3, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d113      	bne.n	8018956 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	2103      	movs	r1, #3
 801893a:	438a      	bics	r2, r1
 801893c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	69da      	ldr	r2, [r3, #28]
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	695b      	ldr	r3, [r3, #20]
 801894c:	431a      	orrs	r2, r3
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	430a      	orrs	r2, r1
 8018954:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	22ff      	movs	r2, #255	@ 0xff
 801895c:	625a      	str	r2, [r3, #36]	@ 0x24
 801895e:	e003      	b.n	8018968 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8018960:	230f      	movs	r3, #15
 8018962:	18fb      	adds	r3, r7, r3
 8018964:	2200      	movs	r2, #0
 8018966:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8018968:	230f      	movs	r3, #15
 801896a:	18fb      	adds	r3, r7, r3
 801896c:	781b      	ldrb	r3, [r3, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d103      	bne.n	801897a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	2221      	movs	r2, #33	@ 0x21
 8018976:	2101      	movs	r1, #1
 8018978:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801897a:	230f      	movs	r3, #15
 801897c:	18fb      	adds	r3, r7, r3
 801897e:	781b      	ldrb	r3, [r3, #0]
}
 8018980:	0018      	movs	r0, r3
 8018982:	46bd      	mov	sp, r7
 8018984:	b004      	add	sp, #16
 8018986:	bdb0      	pop	{r4, r5, r7, pc}
 8018988:	ff8fffbf 	.word	0xff8fffbf

0801898c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801898c:	b5b0      	push	{r4, r5, r7, lr}
 801898e:	b086      	sub	sp, #24
 8018990:	af00      	add	r7, sp, #0
 8018992:	60f8      	str	r0, [r7, #12]
 8018994:	60b9      	str	r1, [r7, #8]
 8018996:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8018998:	2300      	movs	r3, #0
 801899a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	2220      	movs	r2, #32
 80189a0:	5c9b      	ldrb	r3, [r3, r2]
 80189a2:	2b01      	cmp	r3, #1
 80189a4:	d101      	bne.n	80189aa <HAL_RTC_SetTime+0x1e>
 80189a6:	2302      	movs	r3, #2
 80189a8:	e092      	b.n	8018ad0 <HAL_RTC_SetTime+0x144>
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	2220      	movs	r2, #32
 80189ae:	2101      	movs	r1, #1
 80189b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	2221      	movs	r2, #33	@ 0x21
 80189b6:	2102      	movs	r1, #2
 80189b8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d125      	bne.n	8018a0c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	689b      	ldr	r3, [r3, #8]
 80189c6:	2240      	movs	r2, #64	@ 0x40
 80189c8:	4013      	ands	r3, r2
 80189ca:	d102      	bne.n	80189d2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	2200      	movs	r2, #0
 80189d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80189d2:	68bb      	ldr	r3, [r7, #8]
 80189d4:	781b      	ldrb	r3, [r3, #0]
 80189d6:	0018      	movs	r0, r3
 80189d8:	f000 fa5a 	bl	8018e90 <RTC_ByteToBcd2>
 80189dc:	0003      	movs	r3, r0
 80189de:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	785b      	ldrb	r3, [r3, #1]
 80189e4:	0018      	movs	r0, r3
 80189e6:	f000 fa53 	bl	8018e90 <RTC_ByteToBcd2>
 80189ea:	0003      	movs	r3, r0
 80189ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80189ee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	789b      	ldrb	r3, [r3, #2]
 80189f4:	0018      	movs	r0, r3
 80189f6:	f000 fa4b 	bl	8018e90 <RTC_ByteToBcd2>
 80189fa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80189fc:	0022      	movs	r2, r4
 80189fe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	78db      	ldrb	r3, [r3, #3]
 8018a04:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8018a06:	4313      	orrs	r3, r2
 8018a08:	617b      	str	r3, [r7, #20]
 8018a0a:	e017      	b.n	8018a3c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	689b      	ldr	r3, [r3, #8]
 8018a12:	2240      	movs	r2, #64	@ 0x40
 8018a14:	4013      	ands	r3, r2
 8018a16:	d102      	bne.n	8018a1e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8018a18:	68bb      	ldr	r3, [r7, #8]
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	781b      	ldrb	r3, [r3, #0]
 8018a22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8018a24:	68bb      	ldr	r3, [r7, #8]
 8018a26:	785b      	ldrb	r3, [r3, #1]
 8018a28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018a2a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8018a2c:	68ba      	ldr	r2, [r7, #8]
 8018a2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8018a30:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8018a32:	68bb      	ldr	r3, [r7, #8]
 8018a34:	78db      	ldrb	r3, [r3, #3]
 8018a36:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8018a38:	4313      	orrs	r3, r2
 8018a3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	22ca      	movs	r2, #202	@ 0xca
 8018a42:	625a      	str	r2, [r3, #36]	@ 0x24
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	2253      	movs	r2, #83	@ 0x53
 8018a4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018a4c:	2513      	movs	r5, #19
 8018a4e:	197c      	adds	r4, r7, r5
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	0018      	movs	r0, r3
 8018a54:	f000 f9ae 	bl	8018db4 <RTC_EnterInitMode>
 8018a58:	0003      	movs	r3, r0
 8018a5a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018a5c:	0028      	movs	r0, r5
 8018a5e:	183b      	adds	r3, r7, r0
 8018a60:	781b      	ldrb	r3, [r3, #0]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d120      	bne.n	8018aa8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	697a      	ldr	r2, [r7, #20]
 8018a6c:	491a      	ldr	r1, [pc, #104]	@ (8018ad8 <HAL_RTC_SetTime+0x14c>)
 8018a6e:	400a      	ands	r2, r1
 8018a70:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	689a      	ldr	r2, [r3, #8]
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	4917      	ldr	r1, [pc, #92]	@ (8018adc <HAL_RTC_SetTime+0x150>)
 8018a7e:	400a      	ands	r2, r1
 8018a80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	6899      	ldr	r1, [r3, #8]
 8018a88:	68bb      	ldr	r3, [r7, #8]
 8018a8a:	68da      	ldr	r2, [r3, #12]
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	691b      	ldr	r3, [r3, #16]
 8018a90:	431a      	orrs	r2, r3
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	430a      	orrs	r2, r1
 8018a98:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018a9a:	183c      	adds	r4, r7, r0
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	0018      	movs	r0, r3
 8018aa0:	f000 f9cc 	bl	8018e3c <RTC_ExitInitMode>
 8018aa4:	0003      	movs	r3, r0
 8018aa6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018aa8:	2313      	movs	r3, #19
 8018aaa:	18fb      	adds	r3, r7, r3
 8018aac:	781b      	ldrb	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d103      	bne.n	8018aba <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2221      	movs	r2, #33	@ 0x21
 8018ab6:	2101      	movs	r1, #1
 8018ab8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	22ff      	movs	r2, #255	@ 0xff
 8018ac0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2220      	movs	r2, #32
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	5499      	strb	r1, [r3, r2]

  return status;
 8018aca:	2313      	movs	r3, #19
 8018acc:	18fb      	adds	r3, r7, r3
 8018ace:	781b      	ldrb	r3, [r3, #0]
}
 8018ad0:	0018      	movs	r0, r3
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	b006      	add	sp, #24
 8018ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8018ad8:	007f7f7f 	.word	0x007f7f7f
 8018adc:	fffbffff 	.word	0xfffbffff

08018ae0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b086      	sub	sp, #24
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	60f8      	str	r0, [r7, #12]
 8018ae8:	60b9      	str	r1, [r7, #8]
 8018aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8018aec:	2300      	movs	r3, #0
 8018aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018af6:	68bb      	ldr	r3, [r7, #8]
 8018af8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	691b      	ldr	r3, [r3, #16]
 8018b00:	045b      	lsls	r3, r3, #17
 8018b02:	0c5a      	lsrs	r2, r3, #17
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	4a22      	ldr	r2, [pc, #136]	@ (8018b98 <HAL_RTC_GetTime+0xb8>)
 8018b10:	4013      	ands	r3, r2
 8018b12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	0c1b      	lsrs	r3, r3, #16
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	223f      	movs	r2, #63	@ 0x3f
 8018b1c:	4013      	ands	r3, r2
 8018b1e:	b2da      	uxtb	r2, r3
 8018b20:	68bb      	ldr	r3, [r7, #8]
 8018b22:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	0a1b      	lsrs	r3, r3, #8
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	227f      	movs	r2, #127	@ 0x7f
 8018b2c:	4013      	ands	r3, r2
 8018b2e:	b2da      	uxtb	r2, r3
 8018b30:	68bb      	ldr	r3, [r7, #8]
 8018b32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	227f      	movs	r2, #127	@ 0x7f
 8018b3a:	4013      	ands	r3, r2
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	0d9b      	lsrs	r3, r3, #22
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	2201      	movs	r2, #1
 8018b4a:	4013      	ands	r3, r2
 8018b4c:	b2da      	uxtb	r2, r3
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d11a      	bne.n	8018b8e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	0018      	movs	r0, r3
 8018b5e:	f000 f9b8 	bl	8018ed2 <RTC_Bcd2ToByte>
 8018b62:	0003      	movs	r3, r0
 8018b64:	001a      	movs	r2, r3
 8018b66:	68bb      	ldr	r3, [r7, #8]
 8018b68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	785b      	ldrb	r3, [r3, #1]
 8018b6e:	0018      	movs	r0, r3
 8018b70:	f000 f9af 	bl	8018ed2 <RTC_Bcd2ToByte>
 8018b74:	0003      	movs	r3, r0
 8018b76:	001a      	movs	r2, r3
 8018b78:	68bb      	ldr	r3, [r7, #8]
 8018b7a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8018b7c:	68bb      	ldr	r3, [r7, #8]
 8018b7e:	789b      	ldrb	r3, [r3, #2]
 8018b80:	0018      	movs	r0, r3
 8018b82:	f000 f9a6 	bl	8018ed2 <RTC_Bcd2ToByte>
 8018b86:	0003      	movs	r3, r0
 8018b88:	001a      	movs	r2, r3
 8018b8a:	68bb      	ldr	r3, [r7, #8]
 8018b8c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8018b8e:	2300      	movs	r3, #0
}
 8018b90:	0018      	movs	r0, r3
 8018b92:	46bd      	mov	sp, r7
 8018b94:	b006      	add	sp, #24
 8018b96:	bd80      	pop	{r7, pc}
 8018b98:	007f7f7f 	.word	0x007f7f7f

08018b9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018b9c:	b5b0      	push	{r4, r5, r7, lr}
 8018b9e:	b086      	sub	sp, #24
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018ba8:	2300      	movs	r3, #0
 8018baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	2220      	movs	r2, #32
 8018bb0:	5c9b      	ldrb	r3, [r3, r2]
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d101      	bne.n	8018bba <HAL_RTC_SetDate+0x1e>
 8018bb6:	2302      	movs	r3, #2
 8018bb8:	e07e      	b.n	8018cb8 <HAL_RTC_SetDate+0x11c>
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	2220      	movs	r2, #32
 8018bbe:	2101      	movs	r1, #1
 8018bc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	2221      	movs	r2, #33	@ 0x21
 8018bc6:	2102      	movs	r1, #2
 8018bc8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d10e      	bne.n	8018bee <HAL_RTC_SetDate+0x52>
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	785b      	ldrb	r3, [r3, #1]
 8018bd4:	001a      	movs	r2, r3
 8018bd6:	2310      	movs	r3, #16
 8018bd8:	4013      	ands	r3, r2
 8018bda:	d008      	beq.n	8018bee <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8018bdc:	68bb      	ldr	r3, [r7, #8]
 8018bde:	785b      	ldrb	r3, [r3, #1]
 8018be0:	2210      	movs	r2, #16
 8018be2:	4393      	bics	r3, r2
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	330a      	adds	r3, #10
 8018be8:	b2da      	uxtb	r2, r3
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d11c      	bne.n	8018c2e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	78db      	ldrb	r3, [r3, #3]
 8018bf8:	0018      	movs	r0, r3
 8018bfa:	f000 f949 	bl	8018e90 <RTC_ByteToBcd2>
 8018bfe:	0003      	movs	r3, r0
 8018c00:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018c02:	68bb      	ldr	r3, [r7, #8]
 8018c04:	785b      	ldrb	r3, [r3, #1]
 8018c06:	0018      	movs	r0, r3
 8018c08:	f000 f942 	bl	8018e90 <RTC_ByteToBcd2>
 8018c0c:	0003      	movs	r3, r0
 8018c0e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018c10:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	789b      	ldrb	r3, [r3, #2]
 8018c16:	0018      	movs	r0, r3
 8018c18:	f000 f93a 	bl	8018e90 <RTC_ByteToBcd2>
 8018c1c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8018c1e:	0022      	movs	r2, r4
 8018c20:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8018c28:	4313      	orrs	r3, r2
 8018c2a:	617b      	str	r3, [r7, #20]
 8018c2c:	e00e      	b.n	8018c4c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	78db      	ldrb	r3, [r3, #3]
 8018c32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8018c34:	68bb      	ldr	r3, [r7, #8]
 8018c36:	785b      	ldrb	r3, [r3, #1]
 8018c38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018c3a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8018c3c:	68ba      	ldr	r2, [r7, #8]
 8018c3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8018c40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	781b      	ldrb	r3, [r3, #0]
 8018c46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8018c48:	4313      	orrs	r3, r2
 8018c4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018c4c:	68fb      	ldr	r3, [r7, #12]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	22ca      	movs	r2, #202	@ 0xca
 8018c52:	625a      	str	r2, [r3, #36]	@ 0x24
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2253      	movs	r2, #83	@ 0x53
 8018c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8018c5c:	2513      	movs	r5, #19
 8018c5e:	197c      	adds	r4, r7, r5
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	0018      	movs	r0, r3
 8018c64:	f000 f8a6 	bl	8018db4 <RTC_EnterInitMode>
 8018c68:	0003      	movs	r3, r0
 8018c6a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8018c6c:	0028      	movs	r0, r5
 8018c6e:	183b      	adds	r3, r7, r0
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d10c      	bne.n	8018c90 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	697a      	ldr	r2, [r7, #20]
 8018c7c:	4910      	ldr	r1, [pc, #64]	@ (8018cc0 <HAL_RTC_SetDate+0x124>)
 8018c7e:	400a      	ands	r2, r1
 8018c80:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8018c82:	183c      	adds	r4, r7, r0
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	0018      	movs	r0, r3
 8018c88:	f000 f8d8 	bl	8018e3c <RTC_ExitInitMode>
 8018c8c:	0003      	movs	r3, r0
 8018c8e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8018c90:	2313      	movs	r3, #19
 8018c92:	18fb      	adds	r3, r7, r3
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d103      	bne.n	8018ca2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	2221      	movs	r2, #33	@ 0x21
 8018c9e:	2101      	movs	r1, #1
 8018ca0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	22ff      	movs	r2, #255	@ 0xff
 8018ca8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	2220      	movs	r2, #32
 8018cae:	2100      	movs	r1, #0
 8018cb0:	5499      	strb	r1, [r3, r2]

  return status;
 8018cb2:	2313      	movs	r3, #19
 8018cb4:	18fb      	adds	r3, r7, r3
 8018cb6:	781b      	ldrb	r3, [r3, #0]
}
 8018cb8:	0018      	movs	r0, r3
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	b006      	add	sp, #24
 8018cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8018cc0:	00ffff3f 	.word	0x00ffff3f

08018cc4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b086      	sub	sp, #24
 8018cc8:	af00      	add	r7, sp, #0
 8018cca:	60f8      	str	r0, [r7, #12]
 8018ccc:	60b9      	str	r1, [r7, #8]
 8018cce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	685b      	ldr	r3, [r3, #4]
 8018cda:	4a21      	ldr	r2, [pc, #132]	@ (8018d60 <HAL_RTC_GetDate+0x9c>)
 8018cdc:	4013      	ands	r3, r2
 8018cde:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	0c1b      	lsrs	r3, r3, #16
 8018ce4:	b2da      	uxtb	r2, r3
 8018ce6:	68bb      	ldr	r3, [r7, #8]
 8018ce8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8018cea:	697b      	ldr	r3, [r7, #20]
 8018cec:	0a1b      	lsrs	r3, r3, #8
 8018cee:	b2db      	uxtb	r3, r3
 8018cf0:	221f      	movs	r2, #31
 8018cf2:	4013      	ands	r3, r2
 8018cf4:	b2da      	uxtb	r2, r3
 8018cf6:	68bb      	ldr	r3, [r7, #8]
 8018cf8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	b2db      	uxtb	r3, r3
 8018cfe:	223f      	movs	r2, #63	@ 0x3f
 8018d00:	4013      	ands	r3, r2
 8018d02:	b2da      	uxtb	r2, r3
 8018d04:	68bb      	ldr	r3, [r7, #8]
 8018d06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8018d08:	697b      	ldr	r3, [r7, #20]
 8018d0a:	0b5b      	lsrs	r3, r3, #13
 8018d0c:	b2db      	uxtb	r3, r3
 8018d0e:	2207      	movs	r2, #7
 8018d10:	4013      	ands	r3, r2
 8018d12:	b2da      	uxtb	r2, r3
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d11a      	bne.n	8018d54 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8018d1e:	68bb      	ldr	r3, [r7, #8]
 8018d20:	78db      	ldrb	r3, [r3, #3]
 8018d22:	0018      	movs	r0, r3
 8018d24:	f000 f8d5 	bl	8018ed2 <RTC_Bcd2ToByte>
 8018d28:	0003      	movs	r3, r0
 8018d2a:	001a      	movs	r2, r3
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	785b      	ldrb	r3, [r3, #1]
 8018d34:	0018      	movs	r0, r3
 8018d36:	f000 f8cc 	bl	8018ed2 <RTC_Bcd2ToByte>
 8018d3a:	0003      	movs	r3, r0
 8018d3c:	001a      	movs	r2, r3
 8018d3e:	68bb      	ldr	r3, [r7, #8]
 8018d40:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8018d42:	68bb      	ldr	r3, [r7, #8]
 8018d44:	789b      	ldrb	r3, [r3, #2]
 8018d46:	0018      	movs	r0, r3
 8018d48:	f000 f8c3 	bl	8018ed2 <RTC_Bcd2ToByte>
 8018d4c:	0003      	movs	r3, r0
 8018d4e:	001a      	movs	r2, r3
 8018d50:	68bb      	ldr	r3, [r7, #8]
 8018d52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8018d54:	2300      	movs	r3, #0
}
 8018d56:	0018      	movs	r0, r3
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	b006      	add	sp, #24
 8018d5c:	bd80      	pop	{r7, pc}
 8018d5e:	46c0      	nop			@ (mov r8, r8)
 8018d60:	00ffff3f 	.word	0x00ffff3f

08018d64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	4a0e      	ldr	r2, [pc, #56]	@ (8018db0 <HAL_RTC_WaitForSynchro+0x4c>)
 8018d76:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018d78:	f7f8 fa50 	bl	801121c <HAL_GetTick>
 8018d7c:	0003      	movs	r3, r0
 8018d7e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018d80:	e00a      	b.n	8018d98 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018d82:	f7f8 fa4b 	bl	801121c <HAL_GetTick>
 8018d86:	0002      	movs	r2, r0
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	1ad2      	subs	r2, r2, r3
 8018d8c:	23fa      	movs	r3, #250	@ 0xfa
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	429a      	cmp	r2, r3
 8018d92:	d901      	bls.n	8018d98 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8018d94:	2303      	movs	r3, #3
 8018d96:	e006      	b.n	8018da6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	68db      	ldr	r3, [r3, #12]
 8018d9e:	2220      	movs	r2, #32
 8018da0:	4013      	ands	r3, r2
 8018da2:	d0ee      	beq.n	8018d82 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8018da4:	2300      	movs	r3, #0
}
 8018da6:	0018      	movs	r0, r3
 8018da8:	46bd      	mov	sp, r7
 8018daa:	b004      	add	sp, #16
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	46c0      	nop			@ (mov r8, r8)
 8018db0:	0001ff5f 	.word	0x0001ff5f

08018db4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b084      	sub	sp, #16
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8018dc0:	230f      	movs	r3, #15
 8018dc2:	18fb      	adds	r3, r7, r3
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	68db      	ldr	r3, [r3, #12]
 8018dce:	2240      	movs	r2, #64	@ 0x40
 8018dd0:	4013      	ands	r3, r2
 8018dd2:	d12c      	bne.n	8018e2e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	68da      	ldr	r2, [r3, #12]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	2180      	movs	r1, #128	@ 0x80
 8018de0:	430a      	orrs	r2, r1
 8018de2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8018de4:	f7f8 fa1a 	bl	801121c <HAL_GetTick>
 8018de8:	0003      	movs	r3, r0
 8018dea:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8018dec:	e014      	b.n	8018e18 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8018dee:	f7f8 fa15 	bl	801121c <HAL_GetTick>
 8018df2:	0002      	movs	r2, r0
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	1ad2      	subs	r2, r2, r3
 8018df8:	200f      	movs	r0, #15
 8018dfa:	183b      	adds	r3, r7, r0
 8018dfc:	1839      	adds	r1, r7, r0
 8018dfe:	7809      	ldrb	r1, [r1, #0]
 8018e00:	7019      	strb	r1, [r3, #0]
 8018e02:	23fa      	movs	r3, #250	@ 0xfa
 8018e04:	009b      	lsls	r3, r3, #2
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d906      	bls.n	8018e18 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	2221      	movs	r2, #33	@ 0x21
 8018e0e:	2104      	movs	r1, #4
 8018e10:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8018e12:	183b      	adds	r3, r7, r0
 8018e14:	2201      	movs	r2, #1
 8018e16:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	68db      	ldr	r3, [r3, #12]
 8018e1e:	2240      	movs	r2, #64	@ 0x40
 8018e20:	4013      	ands	r3, r2
 8018e22:	d104      	bne.n	8018e2e <RTC_EnterInitMode+0x7a>
 8018e24:	230f      	movs	r3, #15
 8018e26:	18fb      	adds	r3, r7, r3
 8018e28:	781b      	ldrb	r3, [r3, #0]
 8018e2a:	2b01      	cmp	r3, #1
 8018e2c:	d1df      	bne.n	8018dee <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8018e2e:	230f      	movs	r3, #15
 8018e30:	18fb      	adds	r3, r7, r3
 8018e32:	781b      	ldrb	r3, [r3, #0]
}
 8018e34:	0018      	movs	r0, r3
 8018e36:	46bd      	mov	sp, r7
 8018e38:	b004      	add	sp, #16
 8018e3a:	bd80      	pop	{r7, pc}

08018e3c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8018e3c:	b590      	push	{r4, r7, lr}
 8018e3e:	b085      	sub	sp, #20
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018e44:	240f      	movs	r4, #15
 8018e46:	193b      	adds	r3, r7, r4
 8018e48:	2200      	movs	r2, #0
 8018e4a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	68da      	ldr	r2, [r3, #12]
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	2180      	movs	r1, #128	@ 0x80
 8018e58:	438a      	bics	r2, r1
 8018e5a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	689b      	ldr	r3, [r3, #8]
 8018e62:	2220      	movs	r2, #32
 8018e64:	4013      	ands	r3, r2
 8018e66:	d10c      	bne.n	8018e82 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	0018      	movs	r0, r3
 8018e6c:	f7ff ff7a 	bl	8018d64 <HAL_RTC_WaitForSynchro>
 8018e70:	1e03      	subs	r3, r0, #0
 8018e72:	d006      	beq.n	8018e82 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2221      	movs	r2, #33	@ 0x21
 8018e78:	2104      	movs	r1, #4
 8018e7a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8018e7c:	193b      	adds	r3, r7, r4
 8018e7e:	2201      	movs	r2, #1
 8018e80:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8018e82:	230f      	movs	r3, #15
 8018e84:	18fb      	adds	r3, r7, r3
 8018e86:	781b      	ldrb	r3, [r3, #0]
}
 8018e88:	0018      	movs	r0, r3
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	b005      	add	sp, #20
 8018e8e:	bd90      	pop	{r4, r7, pc}

08018e90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b084      	sub	sp, #16
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	0002      	movs	r2, r0
 8018e98:	1dfb      	adds	r3, r7, #7
 8018e9a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8018ea0:	e007      	b.n	8018eb2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	3301      	adds	r3, #1
 8018ea6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8018ea8:	1dfb      	adds	r3, r7, #7
 8018eaa:	1dfa      	adds	r2, r7, #7
 8018eac:	7812      	ldrb	r2, [r2, #0]
 8018eae:	3a0a      	subs	r2, #10
 8018eb0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8018eb2:	1dfb      	adds	r3, r7, #7
 8018eb4:	781b      	ldrb	r3, [r3, #0]
 8018eb6:	2b09      	cmp	r3, #9
 8018eb8:	d8f3      	bhi.n	8018ea2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	b2db      	uxtb	r3, r3
 8018ebe:	011b      	lsls	r3, r3, #4
 8018ec0:	b2da      	uxtb	r2, r3
 8018ec2:	1dfb      	adds	r3, r7, #7
 8018ec4:	781b      	ldrb	r3, [r3, #0]
 8018ec6:	4313      	orrs	r3, r2
 8018ec8:	b2db      	uxtb	r3, r3
}
 8018eca:	0018      	movs	r0, r3
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	b004      	add	sp, #16
 8018ed0:	bd80      	pop	{r7, pc}

08018ed2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8018ed2:	b580      	push	{r7, lr}
 8018ed4:	b084      	sub	sp, #16
 8018ed6:	af00      	add	r7, sp, #0
 8018ed8:	0002      	movs	r2, r0
 8018eda:	1dfb      	adds	r3, r7, #7
 8018edc:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8018ede:	2300      	movs	r3, #0
 8018ee0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8018ee2:	1dfb      	adds	r3, r7, #7
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	091b      	lsrs	r3, r3, #4
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	001a      	movs	r2, r3
 8018eec:	0013      	movs	r3, r2
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	189b      	adds	r3, r3, r2
 8018ef2:	005b      	lsls	r3, r3, #1
 8018ef4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	b2da      	uxtb	r2, r3
 8018efa:	1dfb      	adds	r3, r7, #7
 8018efc:	781b      	ldrb	r3, [r3, #0]
 8018efe:	210f      	movs	r1, #15
 8018f00:	400b      	ands	r3, r1
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	18d3      	adds	r3, r2, r3
 8018f06:	b2db      	uxtb	r3, r3
}
 8018f08:	0018      	movs	r0, r3
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	b004      	add	sp, #16
 8018f0e:	bd80      	pop	{r7, pc}

08018f10 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b086      	sub	sp, #24
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	60f8      	str	r0, [r7, #12]
 8018f18:	60b9      	str	r1, [r7, #8]
 8018f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018f1c:	4b64      	ldr	r3, [pc, #400]	@ (80190b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	22fa      	movs	r2, #250	@ 0xfa
 8018f22:	01d1      	lsls	r1, r2, #7
 8018f24:	0018      	movs	r0, r3
 8018f26:	f7e7 f93d 	bl	80001a4 <__udivsi3>
 8018f2a:	0003      	movs	r3, r0
 8018f2c:	001a      	movs	r2, r3
 8018f2e:	0013      	movs	r3, r2
 8018f30:	015b      	lsls	r3, r3, #5
 8018f32:	1a9b      	subs	r3, r3, r2
 8018f34:	009b      	lsls	r3, r3, #2
 8018f36:	189b      	adds	r3, r3, r2
 8018f38:	00db      	lsls	r3, r3, #3
 8018f3a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	2220      	movs	r2, #32
 8018f40:	5c9b      	ldrb	r3, [r3, r2]
 8018f42:	2b01      	cmp	r3, #1
 8018f44:	d101      	bne.n	8018f4a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8018f46:	2302      	movs	r3, #2
 8018f48:	e0ad      	b.n	80190a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	2220      	movs	r2, #32
 8018f4e:	2101      	movs	r1, #1
 8018f50:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	2221      	movs	r2, #33	@ 0x21
 8018f56:	2102      	movs	r1, #2
 8018f58:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	22ca      	movs	r2, #202	@ 0xca
 8018f60:	625a      	str	r2, [r3, #36]	@ 0x24
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	2253      	movs	r2, #83	@ 0x53
 8018f68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	689a      	ldr	r2, [r3, #8]
 8018f70:	2380      	movs	r3, #128	@ 0x80
 8018f72:	00db      	lsls	r3, r3, #3
 8018f74:	4013      	ands	r3, r2
 8018f76:	d019      	beq.n	8018fac <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	3b01      	subs	r3, #1
 8018f7c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d10d      	bne.n	8018fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	22ff      	movs	r2, #255	@ 0xff
 8018f8a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	2221      	movs	r2, #33	@ 0x21
 8018f90:	2103      	movs	r1, #3
 8018f92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	2220      	movs	r2, #32
 8018f98:	2100      	movs	r1, #0
 8018f9a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8018f9c:	2303      	movs	r3, #3
 8018f9e:	e082      	b.n	80190a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	68db      	ldr	r3, [r3, #12]
 8018fa6:	2204      	movs	r2, #4
 8018fa8:	4013      	ands	r3, r2
 8018faa:	d1e5      	bne.n	8018f78 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	689a      	ldr	r2, [r3, #8]
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	493f      	ldr	r1, [pc, #252]	@ (80190b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8018fb8:	400a      	ands	r2, r1
 8018fba:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	22ff      	movs	r2, #255	@ 0xff
 8018fc4:	401a      	ands	r2, r3
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	493b      	ldr	r1, [pc, #236]	@ (80190b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8018fcc:	430a      	orrs	r2, r1
 8018fce:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8018fd0:	4b37      	ldr	r3, [pc, #220]	@ (80190b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	22fa      	movs	r2, #250	@ 0xfa
 8018fd6:	01d1      	lsls	r1, r2, #7
 8018fd8:	0018      	movs	r0, r3
 8018fda:	f7e7 f8e3 	bl	80001a4 <__udivsi3>
 8018fde:	0003      	movs	r3, r0
 8018fe0:	001a      	movs	r2, r3
 8018fe2:	0013      	movs	r3, r2
 8018fe4:	015b      	lsls	r3, r3, #5
 8018fe6:	1a9b      	subs	r3, r3, r2
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	189b      	adds	r3, r3, r2
 8018fec:	00db      	lsls	r3, r3, #3
 8018fee:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8018ff0:	697b      	ldr	r3, [r7, #20]
 8018ff2:	3b01      	subs	r3, #1
 8018ff4:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d10d      	bne.n	8019018 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	22ff      	movs	r2, #255	@ 0xff
 8019002:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	2221      	movs	r2, #33	@ 0x21
 8019008:	2103      	movs	r1, #3
 801900a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	2220      	movs	r2, #32
 8019010:	2100      	movs	r1, #0
 8019012:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8019014:	2303      	movs	r3, #3
 8019016:	e046      	b.n	80190a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	68db      	ldr	r3, [r3, #12]
 801901e:	2204      	movs	r2, #4
 8019020:	4013      	ands	r3, r2
 8019022:	d0e5      	beq.n	8018ff0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	689a      	ldr	r2, [r3, #8]
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	2107      	movs	r1, #7
 8019030:	438a      	bics	r2, r1
 8019032:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	6899      	ldr	r1, [r3, #8]
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	687a      	ldr	r2, [r7, #4]
 8019040:	430a      	orrs	r2, r1
 8019042:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	68ba      	ldr	r2, [r7, #8]
 801904a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801904c:	4b1b      	ldr	r3, [pc, #108]	@ (80190bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801904e:	681a      	ldr	r2, [r3, #0]
 8019050:	4b1a      	ldr	r3, [pc, #104]	@ (80190bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019052:	2180      	movs	r1, #128	@ 0x80
 8019054:	0349      	lsls	r1, r1, #13
 8019056:	430a      	orrs	r2, r1
 8019058:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801905a:	4b18      	ldr	r3, [pc, #96]	@ (80190bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801905c:	689a      	ldr	r2, [r3, #8]
 801905e:	4b17      	ldr	r3, [pc, #92]	@ (80190bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019060:	2180      	movs	r1, #128	@ 0x80
 8019062:	0349      	lsls	r1, r1, #13
 8019064:	430a      	orrs	r2, r1
 8019066:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	689a      	ldr	r2, [r3, #8]
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	2180      	movs	r1, #128	@ 0x80
 8019074:	01c9      	lsls	r1, r1, #7
 8019076:	430a      	orrs	r2, r1
 8019078:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	689a      	ldr	r2, [r3, #8]
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	2180      	movs	r1, #128	@ 0x80
 8019086:	00c9      	lsls	r1, r1, #3
 8019088:	430a      	orrs	r2, r1
 801908a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	22ff      	movs	r2, #255	@ 0xff
 8019092:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	2221      	movs	r2, #33	@ 0x21
 8019098:	2101      	movs	r1, #1
 801909a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	2220      	movs	r2, #32
 80190a0:	2100      	movs	r1, #0
 80190a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80190a4:	2300      	movs	r3, #0
}
 80190a6:	0018      	movs	r0, r3
 80190a8:	46bd      	mov	sp, r7
 80190aa:	b006      	add	sp, #24
 80190ac:	bd80      	pop	{r7, pc}
 80190ae:	46c0      	nop			@ (mov r8, r8)
 80190b0:	200000e4 	.word	0x200000e4
 80190b4:	fffffbff 	.word	0xfffffbff
 80190b8:	fffffb7f 	.word	0xfffffb7f
 80190bc:	40010400 	.word	0x40010400

080190c0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b084      	sub	sp, #16
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80190c8:	2300      	movs	r3, #0
 80190ca:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2220      	movs	r2, #32
 80190d0:	5c9b      	ldrb	r3, [r3, r2]
 80190d2:	2b01      	cmp	r3, #1
 80190d4:	d101      	bne.n	80190da <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80190d6:	2302      	movs	r3, #2
 80190d8:	e04e      	b.n	8019178 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2220      	movs	r2, #32
 80190de:	2101      	movs	r1, #1
 80190e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	2221      	movs	r2, #33	@ 0x21
 80190e6:	2102      	movs	r1, #2
 80190e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	22ca      	movs	r2, #202	@ 0xca
 80190f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	2253      	movs	r2, #83	@ 0x53
 80190f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	689a      	ldr	r2, [r3, #8]
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	491e      	ldr	r1, [pc, #120]	@ (8019180 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8019106:	400a      	ands	r2, r1
 8019108:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	689a      	ldr	r2, [r3, #8]
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	491b      	ldr	r1, [pc, #108]	@ (8019184 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8019116:	400a      	ands	r2, r1
 8019118:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801911a:	f7f8 f87f 	bl	801121c <HAL_GetTick>
 801911e:	0003      	movs	r3, r0
 8019120:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8019122:	e016      	b.n	8019152 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019124:	f7f8 f87a 	bl	801121c <HAL_GetTick>
 8019128:	0002      	movs	r2, r0
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	1ad2      	subs	r2, r2, r3
 801912e:	23fa      	movs	r3, #250	@ 0xfa
 8019130:	009b      	lsls	r3, r3, #2
 8019132:	429a      	cmp	r2, r3
 8019134:	d90d      	bls.n	8019152 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	22ff      	movs	r2, #255	@ 0xff
 801913c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	2221      	movs	r2, #33	@ 0x21
 8019142:	2103      	movs	r1, #3
 8019144:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2220      	movs	r2, #32
 801914a:	2100      	movs	r1, #0
 801914c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801914e:	2303      	movs	r3, #3
 8019150:	e012      	b.n	8019178 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	68db      	ldr	r3, [r3, #12]
 8019158:	2204      	movs	r2, #4
 801915a:	4013      	ands	r3, r2
 801915c:	d0e2      	beq.n	8019124 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	22ff      	movs	r2, #255	@ 0xff
 8019164:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	2221      	movs	r2, #33	@ 0x21
 801916a:	2101      	movs	r1, #1
 801916c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2220      	movs	r2, #32
 8019172:	2100      	movs	r1, #0
 8019174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019176:	2300      	movs	r3, #0
}
 8019178:	0018      	movs	r0, r3
 801917a:	46bd      	mov	sp, r7
 801917c:	b004      	add	sp, #16
 801917e:	bd80      	pop	{r7, pc}
 8019180:	fffffbff 	.word	0xfffffbff
 8019184:	ffffbfff 	.word	0xffffbfff

08019188 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b082      	sub	sp, #8
 801918c:	af00      	add	r7, sp, #0
 801918e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8019190:	4b13      	ldr	r3, [pc, #76]	@ (80191e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8019192:	2280      	movs	r2, #128	@ 0x80
 8019194:	0352      	lsls	r2, r2, #13
 8019196:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	689a      	ldr	r2, [r3, #8]
 801919e:	2380      	movs	r3, #128	@ 0x80
 80191a0:	01db      	lsls	r3, r3, #7
 80191a2:	4013      	ands	r3, r2
 80191a4:	d014      	beq.n	80191d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	68da      	ldr	r2, [r3, #12]
 80191ac:	2380      	movs	r3, #128	@ 0x80
 80191ae:	00db      	lsls	r3, r3, #3
 80191b0:	4013      	ands	r3, r2
 80191b2:	d00d      	beq.n	80191d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	68db      	ldr	r3, [r3, #12]
 80191ba:	22ff      	movs	r2, #255	@ 0xff
 80191bc:	401a      	ands	r2, r3
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	4908      	ldr	r1, [pc, #32]	@ (80191e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80191c4:	430a      	orrs	r2, r1
 80191c6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	0018      	movs	r0, r3
 80191cc:	f000 f80c 	bl	80191e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	2221      	movs	r2, #33	@ 0x21
 80191d4:	2101      	movs	r1, #1
 80191d6:	5499      	strb	r1, [r3, r2]
}
 80191d8:	46c0      	nop			@ (mov r8, r8)
 80191da:	46bd      	mov	sp, r7
 80191dc:	b002      	add	sp, #8
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	40010400 	.word	0x40010400
 80191e4:	fffffb7f 	.word	0xfffffb7f

080191e8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b082      	sub	sp, #8
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80191f0:	46c0      	nop			@ (mov r8, r8)
 80191f2:	46bd      	mov	sp, r7
 80191f4:	b002      	add	sp, #8
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b086      	sub	sp, #24
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	60f8      	str	r0, [r7, #12]
 8019200:	60b9      	str	r1, [r7, #8]
 8019202:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8019204:	2300      	movs	r3, #0
 8019206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	3350      	adds	r3, #80	@ 0x50
 801920e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8019210:	68bb      	ldr	r3, [r7, #8]
 8019212:	009b      	lsls	r3, r3, #2
 8019214:	697a      	ldr	r2, [r7, #20]
 8019216:	18d3      	adds	r3, r2, r3
 8019218:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	687a      	ldr	r2, [r7, #4]
 801921e:	601a      	str	r2, [r3, #0]
}
 8019220:	46c0      	nop			@ (mov r8, r8)
 8019222:	46bd      	mov	sp, r7
 8019224:	b006      	add	sp, #24
 8019226:	bd80      	pop	{r7, pc}

08019228 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b084      	sub	sp, #16
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8019232:	2300      	movs	r3, #0
 8019234:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	3350      	adds	r3, #80	@ 0x50
 801923c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	009b      	lsls	r3, r3, #2
 8019242:	68fa      	ldr	r2, [r7, #12]
 8019244:	18d3      	adds	r3, r2, r3
 8019246:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	681b      	ldr	r3, [r3, #0]
}
 801924c:	0018      	movs	r0, r3
 801924e:	46bd      	mov	sp, r7
 8019250:	b004      	add	sp, #16
 8019252:	bd80      	pop	{r7, pc}

08019254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b082      	sub	sp, #8
 8019258:	af00      	add	r7, sp, #0
 801925a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d101      	bne.n	8019266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8019262:	2301      	movs	r3, #1
 8019264:	e032      	b.n	80192cc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	2239      	movs	r2, #57	@ 0x39
 801926a:	5c9b      	ldrb	r3, [r3, r2]
 801926c:	b2db      	uxtb	r3, r3
 801926e:	2b00      	cmp	r3, #0
 8019270:	d107      	bne.n	8019282 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	2238      	movs	r2, #56	@ 0x38
 8019276:	2100      	movs	r1, #0
 8019278:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	0018      	movs	r0, r3
 801927e:	f7f7 f8dd 	bl	801043c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2239      	movs	r2, #57	@ 0x39
 8019286:	2102      	movs	r1, #2
 8019288:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681a      	ldr	r2, [r3, #0]
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	3304      	adds	r3, #4
 8019292:	0019      	movs	r1, r3
 8019294:	0010      	movs	r0, r2
 8019296:	f000 fa1d 	bl	80196d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	223e      	movs	r2, #62	@ 0x3e
 801929e:	2101      	movs	r1, #1
 80192a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	223a      	movs	r2, #58	@ 0x3a
 80192a6:	2101      	movs	r1, #1
 80192a8:	5499      	strb	r1, [r3, r2]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	223b      	movs	r2, #59	@ 0x3b
 80192ae:	2101      	movs	r1, #1
 80192b0:	5499      	strb	r1, [r3, r2]
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	223c      	movs	r2, #60	@ 0x3c
 80192b6:	2101      	movs	r1, #1
 80192b8:	5499      	strb	r1, [r3, r2]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	223d      	movs	r2, #61	@ 0x3d
 80192be:	2101      	movs	r1, #1
 80192c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	2239      	movs	r2, #57	@ 0x39
 80192c6:	2101      	movs	r1, #1
 80192c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80192ca:	2300      	movs	r3, #0
}
 80192cc:	0018      	movs	r0, r3
 80192ce:	46bd      	mov	sp, r7
 80192d0:	b002      	add	sp, #8
 80192d2:	bd80      	pop	{r7, pc}

080192d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b084      	sub	sp, #16
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	2239      	movs	r2, #57	@ 0x39
 80192e0:	5c9b      	ldrb	r3, [r3, r2]
 80192e2:	b2db      	uxtb	r3, r3
 80192e4:	2b01      	cmp	r3, #1
 80192e6:	d001      	beq.n	80192ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80192e8:	2301      	movs	r3, #1
 80192ea:	e033      	b.n	8019354 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	2239      	movs	r2, #57	@ 0x39
 80192f0:	2102      	movs	r1, #2
 80192f2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	681a      	ldr	r2, [r3, #0]
 80192f8:	2380      	movs	r3, #128	@ 0x80
 80192fa:	05db      	lsls	r3, r3, #23
 80192fc:	429a      	cmp	r2, r3
 80192fe:	d00e      	beq.n	801931e <HAL_TIM_Base_Start+0x4a>
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	4a15      	ldr	r2, [pc, #84]	@ (801935c <HAL_TIM_Base_Start+0x88>)
 8019306:	4293      	cmp	r3, r2
 8019308:	d009      	beq.n	801931e <HAL_TIM_Base_Start+0x4a>
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	4a14      	ldr	r2, [pc, #80]	@ (8019360 <HAL_TIM_Base_Start+0x8c>)
 8019310:	4293      	cmp	r3, r2
 8019312:	d004      	beq.n	801931e <HAL_TIM_Base_Start+0x4a>
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	4a12      	ldr	r2, [pc, #72]	@ (8019364 <HAL_TIM_Base_Start+0x90>)
 801931a:	4293      	cmp	r3, r2
 801931c:	d111      	bne.n	8019342 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	689b      	ldr	r3, [r3, #8]
 8019324:	2207      	movs	r2, #7
 8019326:	4013      	ands	r3, r2
 8019328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	2b06      	cmp	r3, #6
 801932e:	d010      	beq.n	8019352 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	681a      	ldr	r2, [r3, #0]
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	2101      	movs	r1, #1
 801933c:	430a      	orrs	r2, r1
 801933e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019340:	e007      	b.n	8019352 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	681a      	ldr	r2, [r3, #0]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	2101      	movs	r1, #1
 801934e:	430a      	orrs	r2, r1
 8019350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019352:	2300      	movs	r3, #0
}
 8019354:	0018      	movs	r0, r3
 8019356:	46bd      	mov	sp, r7
 8019358:	b004      	add	sp, #16
 801935a:	bd80      	pop	{r7, pc}
 801935c:	40000400 	.word	0x40000400
 8019360:	40010800 	.word	0x40010800
 8019364:	40011400 	.word	0x40011400

08019368 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b082      	sub	sp, #8
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	6a1b      	ldr	r3, [r3, #32]
 8019376:	4a0a      	ldr	r2, [pc, #40]	@ (80193a0 <HAL_TIM_Base_Stop+0x38>)
 8019378:	4013      	ands	r3, r2
 801937a:	d107      	bne.n	801938c <HAL_TIM_Base_Stop+0x24>
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	681a      	ldr	r2, [r3, #0]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	2101      	movs	r1, #1
 8019388:	438a      	bics	r2, r1
 801938a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	2239      	movs	r2, #57	@ 0x39
 8019390:	2101      	movs	r1, #1
 8019392:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8019394:	2300      	movs	r3, #0
}
 8019396:	0018      	movs	r0, r3
 8019398:	46bd      	mov	sp, r7
 801939a:	b002      	add	sp, #8
 801939c:	bd80      	pop	{r7, pc}
 801939e:	46c0      	nop			@ (mov r8, r8)
 80193a0:	00001111 	.word	0x00001111

080193a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b082      	sub	sp, #8
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d101      	bne.n	80193b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80193b2:	2301      	movs	r3, #1
 80193b4:	e032      	b.n	801941c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	2239      	movs	r2, #57	@ 0x39
 80193ba:	5c9b      	ldrb	r3, [r3, r2]
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d107      	bne.n	80193d2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	2238      	movs	r2, #56	@ 0x38
 80193c6:	2100      	movs	r1, #0
 80193c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	0018      	movs	r0, r3
 80193ce:	f7f7 f811 	bl	80103f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	2239      	movs	r2, #57	@ 0x39
 80193d6:	2102      	movs	r1, #2
 80193d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681a      	ldr	r2, [r3, #0]
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	3304      	adds	r3, #4
 80193e2:	0019      	movs	r1, r3
 80193e4:	0010      	movs	r0, r2
 80193e6:	f000 f975 	bl	80196d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	223e      	movs	r2, #62	@ 0x3e
 80193ee:	2101      	movs	r1, #1
 80193f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	223a      	movs	r2, #58	@ 0x3a
 80193f6:	2101      	movs	r1, #1
 80193f8:	5499      	strb	r1, [r3, r2]
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	223b      	movs	r2, #59	@ 0x3b
 80193fe:	2101      	movs	r1, #1
 8019400:	5499      	strb	r1, [r3, r2]
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	223c      	movs	r2, #60	@ 0x3c
 8019406:	2101      	movs	r1, #1
 8019408:	5499      	strb	r1, [r3, r2]
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	223d      	movs	r2, #61	@ 0x3d
 801940e:	2101      	movs	r1, #1
 8019410:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2239      	movs	r2, #57	@ 0x39
 8019416:	2101      	movs	r1, #1
 8019418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801941a:	2300      	movs	r3, #0
}
 801941c:	0018      	movs	r0, r3
 801941e:	46bd      	mov	sp, r7
 8019420:	b002      	add	sp, #8
 8019422:	bd80      	pop	{r7, pc}

08019424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b084      	sub	sp, #16
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
 801942c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801942e:	683b      	ldr	r3, [r7, #0]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d108      	bne.n	8019446 <HAL_TIM_PWM_Start+0x22>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	223a      	movs	r2, #58	@ 0x3a
 8019438:	5c9b      	ldrb	r3, [r3, r2]
 801943a:	b2db      	uxtb	r3, r3
 801943c:	3b01      	subs	r3, #1
 801943e:	1e5a      	subs	r2, r3, #1
 8019440:	4193      	sbcs	r3, r2
 8019442:	b2db      	uxtb	r3, r3
 8019444:	e01f      	b.n	8019486 <HAL_TIM_PWM_Start+0x62>
 8019446:	683b      	ldr	r3, [r7, #0]
 8019448:	2b04      	cmp	r3, #4
 801944a:	d108      	bne.n	801945e <HAL_TIM_PWM_Start+0x3a>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	223b      	movs	r2, #59	@ 0x3b
 8019450:	5c9b      	ldrb	r3, [r3, r2]
 8019452:	b2db      	uxtb	r3, r3
 8019454:	3b01      	subs	r3, #1
 8019456:	1e5a      	subs	r2, r3, #1
 8019458:	4193      	sbcs	r3, r2
 801945a:	b2db      	uxtb	r3, r3
 801945c:	e013      	b.n	8019486 <HAL_TIM_PWM_Start+0x62>
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	2b08      	cmp	r3, #8
 8019462:	d108      	bne.n	8019476 <HAL_TIM_PWM_Start+0x52>
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	223c      	movs	r2, #60	@ 0x3c
 8019468:	5c9b      	ldrb	r3, [r3, r2]
 801946a:	b2db      	uxtb	r3, r3
 801946c:	3b01      	subs	r3, #1
 801946e:	1e5a      	subs	r2, r3, #1
 8019470:	4193      	sbcs	r3, r2
 8019472:	b2db      	uxtb	r3, r3
 8019474:	e007      	b.n	8019486 <HAL_TIM_PWM_Start+0x62>
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	223d      	movs	r2, #61	@ 0x3d
 801947a:	5c9b      	ldrb	r3, [r3, r2]
 801947c:	b2db      	uxtb	r3, r3
 801947e:	3b01      	subs	r3, #1
 8019480:	1e5a      	subs	r2, r3, #1
 8019482:	4193      	sbcs	r3, r2
 8019484:	b2db      	uxtb	r3, r3
 8019486:	2b00      	cmp	r3, #0
 8019488:	d001      	beq.n	801948e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801948a:	2301      	movs	r3, #1
 801948c:	e052      	b.n	8019534 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801948e:	683b      	ldr	r3, [r7, #0]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d104      	bne.n	801949e <HAL_TIM_PWM_Start+0x7a>
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	223a      	movs	r2, #58	@ 0x3a
 8019498:	2102      	movs	r1, #2
 801949a:	5499      	strb	r1, [r3, r2]
 801949c:	e013      	b.n	80194c6 <HAL_TIM_PWM_Start+0xa2>
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	2b04      	cmp	r3, #4
 80194a2:	d104      	bne.n	80194ae <HAL_TIM_PWM_Start+0x8a>
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	223b      	movs	r2, #59	@ 0x3b
 80194a8:	2102      	movs	r1, #2
 80194aa:	5499      	strb	r1, [r3, r2]
 80194ac:	e00b      	b.n	80194c6 <HAL_TIM_PWM_Start+0xa2>
 80194ae:	683b      	ldr	r3, [r7, #0]
 80194b0:	2b08      	cmp	r3, #8
 80194b2:	d104      	bne.n	80194be <HAL_TIM_PWM_Start+0x9a>
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	223c      	movs	r2, #60	@ 0x3c
 80194b8:	2102      	movs	r1, #2
 80194ba:	5499      	strb	r1, [r3, r2]
 80194bc:	e003      	b.n	80194c6 <HAL_TIM_PWM_Start+0xa2>
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	223d      	movs	r2, #61	@ 0x3d
 80194c2:	2102      	movs	r1, #2
 80194c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	6839      	ldr	r1, [r7, #0]
 80194cc:	2201      	movs	r2, #1
 80194ce:	0018      	movs	r0, r3
 80194d0:	f000 fa62 	bl	8019998 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	2380      	movs	r3, #128	@ 0x80
 80194da:	05db      	lsls	r3, r3, #23
 80194dc:	429a      	cmp	r2, r3
 80194de:	d00e      	beq.n	80194fe <HAL_TIM_PWM_Start+0xda>
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a15      	ldr	r2, [pc, #84]	@ (801953c <HAL_TIM_PWM_Start+0x118>)
 80194e6:	4293      	cmp	r3, r2
 80194e8:	d009      	beq.n	80194fe <HAL_TIM_PWM_Start+0xda>
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	4a14      	ldr	r2, [pc, #80]	@ (8019540 <HAL_TIM_PWM_Start+0x11c>)
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d004      	beq.n	80194fe <HAL_TIM_PWM_Start+0xda>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	4a12      	ldr	r2, [pc, #72]	@ (8019544 <HAL_TIM_PWM_Start+0x120>)
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d111      	bne.n	8019522 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	689b      	ldr	r3, [r3, #8]
 8019504:	2207      	movs	r2, #7
 8019506:	4013      	ands	r3, r2
 8019508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	2b06      	cmp	r3, #6
 801950e:	d010      	beq.n	8019532 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	2101      	movs	r1, #1
 801951c:	430a      	orrs	r2, r1
 801951e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8019520:	e007      	b.n	8019532 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	681a      	ldr	r2, [r3, #0]
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2101      	movs	r1, #1
 801952e:	430a      	orrs	r2, r1
 8019530:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019532:	2300      	movs	r3, #0
}
 8019534:	0018      	movs	r0, r3
 8019536:	46bd      	mov	sp, r7
 8019538:	b004      	add	sp, #16
 801953a:	bd80      	pop	{r7, pc}
 801953c:	40000400 	.word	0x40000400
 8019540:	40010800 	.word	0x40010800
 8019544:	40011400 	.word	0x40011400

08019548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b086      	sub	sp, #24
 801954c:	af00      	add	r7, sp, #0
 801954e:	60f8      	str	r0, [r7, #12]
 8019550:	60b9      	str	r1, [r7, #8]
 8019552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019554:	2317      	movs	r3, #23
 8019556:	18fb      	adds	r3, r7, r3
 8019558:	2200      	movs	r2, #0
 801955a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	2238      	movs	r2, #56	@ 0x38
 8019560:	5c9b      	ldrb	r3, [r3, r2]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d101      	bne.n	801956a <HAL_TIM_PWM_ConfigChannel+0x22>
 8019566:	2302      	movs	r3, #2
 8019568:	e0ad      	b.n	80196c6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	2238      	movs	r2, #56	@ 0x38
 801956e:	2101      	movs	r1, #1
 8019570:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	2b0c      	cmp	r3, #12
 8019576:	d100      	bne.n	801957a <HAL_TIM_PWM_ConfigChannel+0x32>
 8019578:	e076      	b.n	8019668 <HAL_TIM_PWM_ConfigChannel+0x120>
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2b0c      	cmp	r3, #12
 801957e:	d900      	bls.n	8019582 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8019580:	e095      	b.n	80196ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	2b08      	cmp	r3, #8
 8019586:	d04e      	beq.n	8019626 <HAL_TIM_PWM_ConfigChannel+0xde>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	2b08      	cmp	r3, #8
 801958c:	d900      	bls.n	8019590 <HAL_TIM_PWM_ConfigChannel+0x48>
 801958e:	e08e      	b.n	80196ae <HAL_TIM_PWM_ConfigChannel+0x166>
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d003      	beq.n	801959e <HAL_TIM_PWM_ConfigChannel+0x56>
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	2b04      	cmp	r3, #4
 801959a:	d021      	beq.n	80195e0 <HAL_TIM_PWM_ConfigChannel+0x98>
 801959c:	e087      	b.n	80196ae <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	68ba      	ldr	r2, [r7, #8]
 80195a4:	0011      	movs	r1, r2
 80195a6:	0018      	movs	r0, r3
 80195a8:	f000 f8f2 	bl	8019790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	699a      	ldr	r2, [r3, #24]
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	2108      	movs	r1, #8
 80195b8:	430a      	orrs	r2, r1
 80195ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	699a      	ldr	r2, [r3, #24]
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	2104      	movs	r1, #4
 80195c8:	438a      	bics	r2, r1
 80195ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	6999      	ldr	r1, [r3, #24]
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	68da      	ldr	r2, [r3, #12]
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	430a      	orrs	r2, r1
 80195dc:	619a      	str	r2, [r3, #24]
      break;
 80195de:	e06b      	b.n	80196b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	68ba      	ldr	r2, [r7, #8]
 80195e6:	0011      	movs	r1, r2
 80195e8:	0018      	movs	r0, r3
 80195ea:	f000 f90d 	bl	8019808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	699a      	ldr	r2, [r3, #24]
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	2180      	movs	r1, #128	@ 0x80
 80195fa:	0109      	lsls	r1, r1, #4
 80195fc:	430a      	orrs	r2, r1
 80195fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	699a      	ldr	r2, [r3, #24]
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	4931      	ldr	r1, [pc, #196]	@ (80196d0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801960c:	400a      	ands	r2, r1
 801960e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	6999      	ldr	r1, [r3, #24]
 8019616:	68bb      	ldr	r3, [r7, #8]
 8019618:	68db      	ldr	r3, [r3, #12]
 801961a:	021a      	lsls	r2, r3, #8
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	430a      	orrs	r2, r1
 8019622:	619a      	str	r2, [r3, #24]
      break;
 8019624:	e048      	b.n	80196b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	68ba      	ldr	r2, [r7, #8]
 801962c:	0011      	movs	r1, r2
 801962e:	0018      	movs	r0, r3
 8019630:	f000 f92c 	bl	801988c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	69da      	ldr	r2, [r3, #28]
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	2108      	movs	r1, #8
 8019640:	430a      	orrs	r2, r1
 8019642:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	69da      	ldr	r2, [r3, #28]
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	2104      	movs	r1, #4
 8019650:	438a      	bics	r2, r1
 8019652:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	69d9      	ldr	r1, [r3, #28]
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	68da      	ldr	r2, [r3, #12]
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	430a      	orrs	r2, r1
 8019664:	61da      	str	r2, [r3, #28]
      break;
 8019666:	e027      	b.n	80196b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	68ba      	ldr	r2, [r7, #8]
 801966e:	0011      	movs	r1, r2
 8019670:	0018      	movs	r0, r3
 8019672:	f000 f94b 	bl	801990c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	69da      	ldr	r2, [r3, #28]
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	2180      	movs	r1, #128	@ 0x80
 8019682:	0109      	lsls	r1, r1, #4
 8019684:	430a      	orrs	r2, r1
 8019686:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	69da      	ldr	r2, [r3, #28]
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	490f      	ldr	r1, [pc, #60]	@ (80196d0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8019694:	400a      	ands	r2, r1
 8019696:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	69d9      	ldr	r1, [r3, #28]
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	68db      	ldr	r3, [r3, #12]
 80196a2:	021a      	lsls	r2, r3, #8
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	430a      	orrs	r2, r1
 80196aa:	61da      	str	r2, [r3, #28]
      break;
 80196ac:	e004      	b.n	80196b8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80196ae:	2317      	movs	r3, #23
 80196b0:	18fb      	adds	r3, r7, r3
 80196b2:	2201      	movs	r2, #1
 80196b4:	701a      	strb	r2, [r3, #0]
      break;
 80196b6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	2238      	movs	r2, #56	@ 0x38
 80196bc:	2100      	movs	r1, #0
 80196be:	5499      	strb	r1, [r3, r2]

  return status;
 80196c0:	2317      	movs	r3, #23
 80196c2:	18fb      	adds	r3, r7, r3
 80196c4:	781b      	ldrb	r3, [r3, #0]
}
 80196c6:	0018      	movs	r0, r3
 80196c8:	46bd      	mov	sp, r7
 80196ca:	b006      	add	sp, #24
 80196cc:	bd80      	pop	{r7, pc}
 80196ce:	46c0      	nop			@ (mov r8, r8)
 80196d0:	fffffbff 	.word	0xfffffbff

080196d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b084      	sub	sp, #16
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
 80196dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80196e4:	687a      	ldr	r2, [r7, #4]
 80196e6:	2380      	movs	r3, #128	@ 0x80
 80196e8:	05db      	lsls	r3, r3, #23
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d00b      	beq.n	8019706 <TIM_Base_SetConfig+0x32>
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	4a23      	ldr	r2, [pc, #140]	@ (8019780 <TIM_Base_SetConfig+0xac>)
 80196f2:	4293      	cmp	r3, r2
 80196f4:	d007      	beq.n	8019706 <TIM_Base_SetConfig+0x32>
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	4a22      	ldr	r2, [pc, #136]	@ (8019784 <TIM_Base_SetConfig+0xb0>)
 80196fa:	4293      	cmp	r3, r2
 80196fc:	d003      	beq.n	8019706 <TIM_Base_SetConfig+0x32>
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	4a21      	ldr	r2, [pc, #132]	@ (8019788 <TIM_Base_SetConfig+0xb4>)
 8019702:	4293      	cmp	r3, r2
 8019704:	d108      	bne.n	8019718 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	2270      	movs	r2, #112	@ 0x70
 801970a:	4393      	bics	r3, r2
 801970c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	68fa      	ldr	r2, [r7, #12]
 8019714:	4313      	orrs	r3, r2
 8019716:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019718:	687a      	ldr	r2, [r7, #4]
 801971a:	2380      	movs	r3, #128	@ 0x80
 801971c:	05db      	lsls	r3, r3, #23
 801971e:	429a      	cmp	r2, r3
 8019720:	d00b      	beq.n	801973a <TIM_Base_SetConfig+0x66>
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	4a16      	ldr	r2, [pc, #88]	@ (8019780 <TIM_Base_SetConfig+0xac>)
 8019726:	4293      	cmp	r3, r2
 8019728:	d007      	beq.n	801973a <TIM_Base_SetConfig+0x66>
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	4a15      	ldr	r2, [pc, #84]	@ (8019784 <TIM_Base_SetConfig+0xb0>)
 801972e:	4293      	cmp	r3, r2
 8019730:	d003      	beq.n	801973a <TIM_Base_SetConfig+0x66>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	4a14      	ldr	r2, [pc, #80]	@ (8019788 <TIM_Base_SetConfig+0xb4>)
 8019736:	4293      	cmp	r3, r2
 8019738:	d108      	bne.n	801974c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	4a13      	ldr	r2, [pc, #76]	@ (801978c <TIM_Base_SetConfig+0xb8>)
 801973e:	4013      	ands	r3, r2
 8019740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	68db      	ldr	r3, [r3, #12]
 8019746:	68fa      	ldr	r2, [r7, #12]
 8019748:	4313      	orrs	r3, r2
 801974a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	2280      	movs	r2, #128	@ 0x80
 8019750:	4393      	bics	r3, r2
 8019752:	001a      	movs	r2, r3
 8019754:	683b      	ldr	r3, [r7, #0]
 8019756:	691b      	ldr	r3, [r3, #16]
 8019758:	4313      	orrs	r3, r2
 801975a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	68fa      	ldr	r2, [r7, #12]
 8019760:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	689a      	ldr	r2, [r3, #8]
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	681a      	ldr	r2, [r3, #0]
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	2201      	movs	r2, #1
 8019776:	615a      	str	r2, [r3, #20]
}
 8019778:	46c0      	nop			@ (mov r8, r8)
 801977a:	46bd      	mov	sp, r7
 801977c:	b004      	add	sp, #16
 801977e:	bd80      	pop	{r7, pc}
 8019780:	40000400 	.word	0x40000400
 8019784:	40010800 	.word	0x40010800
 8019788:	40011400 	.word	0x40011400
 801978c:	fffffcff 	.word	0xfffffcff

08019790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b086      	sub	sp, #24
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
 8019798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6a1b      	ldr	r3, [r3, #32]
 801979e:	2201      	movs	r2, #1
 80197a0:	4393      	bics	r3, r2
 80197a2:	001a      	movs	r2, r3
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	6a1b      	ldr	r3, [r3, #32]
 80197ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	685b      	ldr	r3, [r3, #4]
 80197b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	699b      	ldr	r3, [r3, #24]
 80197b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	2270      	movs	r2, #112	@ 0x70
 80197be:	4393      	bics	r3, r2
 80197c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	2203      	movs	r2, #3
 80197c6:	4393      	bics	r3, r2
 80197c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80197ca:	683b      	ldr	r3, [r7, #0]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	68fa      	ldr	r2, [r7, #12]
 80197d0:	4313      	orrs	r3, r2
 80197d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	2202      	movs	r2, #2
 80197d8:	4393      	bics	r3, r2
 80197da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	689b      	ldr	r3, [r3, #8]
 80197e0:	697a      	ldr	r2, [r7, #20]
 80197e2:	4313      	orrs	r3, r2
 80197e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	693a      	ldr	r2, [r7, #16]
 80197ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	68fa      	ldr	r2, [r7, #12]
 80197f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80197f2:	683b      	ldr	r3, [r7, #0]
 80197f4:	685a      	ldr	r2, [r3, #4]
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	697a      	ldr	r2, [r7, #20]
 80197fe:	621a      	str	r2, [r3, #32]
}
 8019800:	46c0      	nop			@ (mov r8, r8)
 8019802:	46bd      	mov	sp, r7
 8019804:	b006      	add	sp, #24
 8019806:	bd80      	pop	{r7, pc}

08019808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b086      	sub	sp, #24
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
 8019810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	6a1b      	ldr	r3, [r3, #32]
 8019816:	2210      	movs	r2, #16
 8019818:	4393      	bics	r3, r2
 801981a:	001a      	movs	r2, r3
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6a1b      	ldr	r3, [r3, #32]
 8019824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	685b      	ldr	r3, [r3, #4]
 801982a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	699b      	ldr	r3, [r3, #24]
 8019830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	4a13      	ldr	r2, [pc, #76]	@ (8019884 <TIM_OC2_SetConfig+0x7c>)
 8019836:	4013      	ands	r3, r2
 8019838:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	4a12      	ldr	r2, [pc, #72]	@ (8019888 <TIM_OC2_SetConfig+0x80>)
 801983e:	4013      	ands	r3, r2
 8019840:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	021b      	lsls	r3, r3, #8
 8019848:	68fa      	ldr	r2, [r7, #12]
 801984a:	4313      	orrs	r3, r2
 801984c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801984e:	697b      	ldr	r3, [r7, #20]
 8019850:	2220      	movs	r2, #32
 8019852:	4393      	bics	r3, r2
 8019854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	689b      	ldr	r3, [r3, #8]
 801985a:	011b      	lsls	r3, r3, #4
 801985c:	697a      	ldr	r2, [r7, #20]
 801985e:	4313      	orrs	r3, r2
 8019860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	693a      	ldr	r2, [r7, #16]
 8019866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	68fa      	ldr	r2, [r7, #12]
 801986c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801986e:	683b      	ldr	r3, [r7, #0]
 8019870:	685a      	ldr	r2, [r3, #4]
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	697a      	ldr	r2, [r7, #20]
 801987a:	621a      	str	r2, [r3, #32]
}
 801987c:	46c0      	nop			@ (mov r8, r8)
 801987e:	46bd      	mov	sp, r7
 8019880:	b006      	add	sp, #24
 8019882:	bd80      	pop	{r7, pc}
 8019884:	ffff8fff 	.word	0xffff8fff
 8019888:	fffffcff 	.word	0xfffffcff

0801988c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b086      	sub	sp, #24
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
 8019894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	6a1b      	ldr	r3, [r3, #32]
 801989a:	4a1a      	ldr	r2, [pc, #104]	@ (8019904 <TIM_OC3_SetConfig+0x78>)
 801989c:	401a      	ands	r2, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	6a1b      	ldr	r3, [r3, #32]
 80198a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	69db      	ldr	r3, [r3, #28]
 80198b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	2270      	movs	r2, #112	@ 0x70
 80198b8:	4393      	bics	r3, r2
 80198ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	2203      	movs	r2, #3
 80198c0:	4393      	bics	r3, r2
 80198c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80198c4:	683b      	ldr	r3, [r7, #0]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	68fa      	ldr	r2, [r7, #12]
 80198ca:	4313      	orrs	r3, r2
 80198cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80198ce:	697b      	ldr	r3, [r7, #20]
 80198d0:	4a0d      	ldr	r2, [pc, #52]	@ (8019908 <TIM_OC3_SetConfig+0x7c>)
 80198d2:	4013      	ands	r3, r2
 80198d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80198d6:	683b      	ldr	r3, [r7, #0]
 80198d8:	689b      	ldr	r3, [r3, #8]
 80198da:	021b      	lsls	r3, r3, #8
 80198dc:	697a      	ldr	r2, [r7, #20]
 80198de:	4313      	orrs	r3, r2
 80198e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	693a      	ldr	r2, [r7, #16]
 80198e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	68fa      	ldr	r2, [r7, #12]
 80198ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80198ee:	683b      	ldr	r3, [r7, #0]
 80198f0:	685a      	ldr	r2, [r3, #4]
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	697a      	ldr	r2, [r7, #20]
 80198fa:	621a      	str	r2, [r3, #32]
}
 80198fc:	46c0      	nop			@ (mov r8, r8)
 80198fe:	46bd      	mov	sp, r7
 8019900:	b006      	add	sp, #24
 8019902:	bd80      	pop	{r7, pc}
 8019904:	fffffeff 	.word	0xfffffeff
 8019908:	fffffdff 	.word	0xfffffdff

0801990c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b086      	sub	sp, #24
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
 8019914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	6a1b      	ldr	r3, [r3, #32]
 801991a:	4a1b      	ldr	r2, [pc, #108]	@ (8019988 <TIM_OC4_SetConfig+0x7c>)
 801991c:	401a      	ands	r2, r3
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	6a1b      	ldr	r3, [r3, #32]
 8019926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	69db      	ldr	r3, [r3, #28]
 8019932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8019934:	68fb      	ldr	r3, [r7, #12]
 8019936:	4a15      	ldr	r2, [pc, #84]	@ (801998c <TIM_OC4_SetConfig+0x80>)
 8019938:	4013      	ands	r3, r2
 801993a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	4a14      	ldr	r2, [pc, #80]	@ (8019990 <TIM_OC4_SetConfig+0x84>)
 8019940:	4013      	ands	r3, r2
 8019942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019944:	683b      	ldr	r3, [r7, #0]
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	021b      	lsls	r3, r3, #8
 801994a:	68fa      	ldr	r2, [r7, #12]
 801994c:	4313      	orrs	r3, r2
 801994e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8019950:	697b      	ldr	r3, [r7, #20]
 8019952:	4a10      	ldr	r2, [pc, #64]	@ (8019994 <TIM_OC4_SetConfig+0x88>)
 8019954:	4013      	ands	r3, r2
 8019956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8019958:	683b      	ldr	r3, [r7, #0]
 801995a:	689b      	ldr	r3, [r3, #8]
 801995c:	031b      	lsls	r3, r3, #12
 801995e:	697a      	ldr	r2, [r7, #20]
 8019960:	4313      	orrs	r3, r2
 8019962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	693a      	ldr	r2, [r7, #16]
 8019968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	68fa      	ldr	r2, [r7, #12]
 801996e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8019970:	683b      	ldr	r3, [r7, #0]
 8019972:	685a      	ldr	r2, [r3, #4]
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	697a      	ldr	r2, [r7, #20]
 801997c:	621a      	str	r2, [r3, #32]
}
 801997e:	46c0      	nop			@ (mov r8, r8)
 8019980:	46bd      	mov	sp, r7
 8019982:	b006      	add	sp, #24
 8019984:	bd80      	pop	{r7, pc}
 8019986:	46c0      	nop			@ (mov r8, r8)
 8019988:	ffffefff 	.word	0xffffefff
 801998c:	ffff8fff 	.word	0xffff8fff
 8019990:	fffffcff 	.word	0xfffffcff
 8019994:	ffffdfff 	.word	0xffffdfff

08019998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8019998:	b580      	push	{r7, lr}
 801999a:	b086      	sub	sp, #24
 801999c:	af00      	add	r7, sp, #0
 801999e:	60f8      	str	r0, [r7, #12]
 80199a0:	60b9      	str	r1, [r7, #8]
 80199a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	221f      	movs	r2, #31
 80199a8:	4013      	ands	r3, r2
 80199aa:	2201      	movs	r2, #1
 80199ac:	409a      	lsls	r2, r3
 80199ae:	0013      	movs	r3, r2
 80199b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	6a1b      	ldr	r3, [r3, #32]
 80199b6:	697a      	ldr	r2, [r7, #20]
 80199b8:	43d2      	mvns	r2, r2
 80199ba:	401a      	ands	r2, r3
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	6a1a      	ldr	r2, [r3, #32]
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	211f      	movs	r1, #31
 80199c8:	400b      	ands	r3, r1
 80199ca:	6879      	ldr	r1, [r7, #4]
 80199cc:	4099      	lsls	r1, r3
 80199ce:	000b      	movs	r3, r1
 80199d0:	431a      	orrs	r2, r3
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	621a      	str	r2, [r3, #32]
}
 80199d6:	46c0      	nop			@ (mov r8, r8)
 80199d8:	46bd      	mov	sp, r7
 80199da:	b006      	add	sp, #24
 80199dc:	bd80      	pop	{r7, pc}
	...

080199e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b084      	sub	sp, #16
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
 80199e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	2238      	movs	r2, #56	@ 0x38
 80199ee:	5c9b      	ldrb	r3, [r3, r2]
 80199f0:	2b01      	cmp	r3, #1
 80199f2:	d101      	bne.n	80199f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80199f4:	2302      	movs	r3, #2
 80199f6:	e047      	b.n	8019a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	2238      	movs	r2, #56	@ 0x38
 80199fc:	2101      	movs	r1, #1
 80199fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	2239      	movs	r2, #57	@ 0x39
 8019a04:	2102      	movs	r1, #2
 8019a06:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	685b      	ldr	r3, [r3, #4]
 8019a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	689b      	ldr	r3, [r3, #8]
 8019a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	2270      	movs	r2, #112	@ 0x70
 8019a1c:	4393      	bics	r3, r2
 8019a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8019a20:	683b      	ldr	r3, [r7, #0]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	68fa      	ldr	r2, [r7, #12]
 8019a26:	4313      	orrs	r3, r2
 8019a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	68fa      	ldr	r2, [r7, #12]
 8019a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	681a      	ldr	r2, [r3, #0]
 8019a36:	2380      	movs	r3, #128	@ 0x80
 8019a38:	05db      	lsls	r3, r3, #23
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d00e      	beq.n	8019a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	4a13      	ldr	r2, [pc, #76]	@ (8019a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8019a44:	4293      	cmp	r3, r2
 8019a46:	d009      	beq.n	8019a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	4a11      	ldr	r2, [pc, #68]	@ (8019a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8019a4e:	4293      	cmp	r3, r2
 8019a50:	d004      	beq.n	8019a5c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	4a10      	ldr	r2, [pc, #64]	@ (8019a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8019a58:	4293      	cmp	r3, r2
 8019a5a:	d10c      	bne.n	8019a76 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8019a5c:	68bb      	ldr	r3, [r7, #8]
 8019a5e:	2280      	movs	r2, #128	@ 0x80
 8019a60:	4393      	bics	r3, r2
 8019a62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	685b      	ldr	r3, [r3, #4]
 8019a68:	68ba      	ldr	r2, [r7, #8]
 8019a6a:	4313      	orrs	r3, r2
 8019a6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	68ba      	ldr	r2, [r7, #8]
 8019a74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2239      	movs	r2, #57	@ 0x39
 8019a7a:	2101      	movs	r1, #1
 8019a7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	2238      	movs	r2, #56	@ 0x38
 8019a82:	2100      	movs	r1, #0
 8019a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019a86:	2300      	movs	r3, #0
}
 8019a88:	0018      	movs	r0, r3
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	b004      	add	sp, #16
 8019a8e:	bd80      	pop	{r7, pc}
 8019a90:	40000400 	.word	0x40000400
 8019a94:	40010800 	.word	0x40010800
 8019a98:	40011400 	.word	0x40011400

08019a9c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b082      	sub	sp, #8
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
 8019aa4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	2238      	movs	r2, #56	@ 0x38
 8019aaa:	5c9b      	ldrb	r3, [r3, r2]
 8019aac:	2b01      	cmp	r3, #1
 8019aae:	d101      	bne.n	8019ab4 <HAL_TIMEx_RemapConfig+0x18>
 8019ab0:	2302      	movs	r3, #2
 8019ab2:	e00c      	b.n	8019ace <HAL_TIMEx_RemapConfig+0x32>
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	2238      	movs	r2, #56	@ 0x38
 8019ab8:	2101      	movs	r1, #1
 8019aba:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	683a      	ldr	r2, [r7, #0]
 8019ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	2238      	movs	r2, #56	@ 0x38
 8019ac8:	2100      	movs	r1, #0
 8019aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019acc:	2300      	movs	r3, #0
}
 8019ace:	0018      	movs	r0, r3
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	b002      	add	sp, #8
 8019ad4:	bd80      	pop	{r7, pc}
	...

08019ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b082      	sub	sp, #8
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d101      	bne.n	8019aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	e053      	b.n	8019b92 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d116      	bne.n	8019b20 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	2278      	movs	r2, #120	@ 0x78
 8019af6:	2100      	movs	r1, #0
 8019af8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	0018      	movs	r0, r3
 8019afe:	f000 fd65 	bl	801a5cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	22b0      	movs	r2, #176	@ 0xb0
 8019b06:	589b      	ldr	r3, [r3, r2]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d103      	bne.n	8019b14 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	21b0      	movs	r1, #176	@ 0xb0
 8019b10:	4a22      	ldr	r2, [pc, #136]	@ (8019b9c <HAL_UART_Init+0xc4>)
 8019b12:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	22b0      	movs	r2, #176	@ 0xb0
 8019b18:	589b      	ldr	r3, [r3, r2]
 8019b1a:	687a      	ldr	r2, [r7, #4]
 8019b1c:	0010      	movs	r0, r2
 8019b1e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	2224      	movs	r2, #36	@ 0x24
 8019b24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	681a      	ldr	r2, [r3, #0]
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2101      	movs	r1, #1
 8019b32:	438a      	bics	r2, r1
 8019b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	0018      	movs	r0, r3
 8019b3a:	f000 fd8b 	bl	801a654 <UART_SetConfig>
 8019b3e:	0003      	movs	r3, r0
 8019b40:	2b01      	cmp	r3, #1
 8019b42:	d101      	bne.n	8019b48 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8019b44:	2301      	movs	r3, #1
 8019b46:	e024      	b.n	8019b92 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d003      	beq.n	8019b58 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	0018      	movs	r0, r3
 8019b54:	f001 f81c 	bl	801ab90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	685a      	ldr	r2, [r3, #4]
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	490f      	ldr	r1, [pc, #60]	@ (8019ba0 <HAL_UART_Init+0xc8>)
 8019b64:	400a      	ands	r2, r1
 8019b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	689a      	ldr	r2, [r3, #8]
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	212a      	movs	r1, #42	@ 0x2a
 8019b74:	438a      	bics	r2, r1
 8019b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	681a      	ldr	r2, [r3, #0]
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2101      	movs	r1, #1
 8019b84:	430a      	orrs	r2, r1
 8019b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	0018      	movs	r0, r3
 8019b8c:	f001 f8b4 	bl	801acf8 <UART_CheckIdleState>
 8019b90:	0003      	movs	r3, r0
}
 8019b92:	0018      	movs	r0, r3
 8019b94:	46bd      	mov	sp, r7
 8019b96:	b002      	add	sp, #8
 8019b98:	bd80      	pop	{r7, pc}
 8019b9a:	46c0      	nop			@ (mov r8, r8)
 8019b9c:	08010669 	.word	0x08010669
 8019ba0:	ffffb7ff 	.word	0xffffb7ff

08019ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b08a      	sub	sp, #40	@ 0x28
 8019ba8:	af02      	add	r7, sp, #8
 8019baa:	60f8      	str	r0, [r7, #12]
 8019bac:	60b9      	str	r1, [r7, #8]
 8019bae:	603b      	str	r3, [r7, #0]
 8019bb0:	1dbb      	adds	r3, r7, #6
 8019bb2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019bb8:	2b20      	cmp	r3, #32
 8019bba:	d000      	beq.n	8019bbe <HAL_UART_Transmit+0x1a>
 8019bbc:	e08c      	b.n	8019cd8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d003      	beq.n	8019bcc <HAL_UART_Transmit+0x28>
 8019bc4:	1dbb      	adds	r3, r7, #6
 8019bc6:	881b      	ldrh	r3, [r3, #0]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d101      	bne.n	8019bd0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8019bcc:	2301      	movs	r3, #1
 8019bce:	e084      	b.n	8019cda <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	689a      	ldr	r2, [r3, #8]
 8019bd4:	2380      	movs	r3, #128	@ 0x80
 8019bd6:	015b      	lsls	r3, r3, #5
 8019bd8:	429a      	cmp	r2, r3
 8019bda:	d109      	bne.n	8019bf0 <HAL_UART_Transmit+0x4c>
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	691b      	ldr	r3, [r3, #16]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d105      	bne.n	8019bf0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	2201      	movs	r2, #1
 8019be8:	4013      	ands	r3, r2
 8019bea:	d001      	beq.n	8019bf0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8019bec:	2301      	movs	r3, #1
 8019bee:	e074      	b.n	8019cda <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	2284      	movs	r2, #132	@ 0x84
 8019bf4:	2100      	movs	r1, #0
 8019bf6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	2221      	movs	r2, #33	@ 0x21
 8019bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019bfe:	f7f7 fb0d 	bl	801121c <HAL_GetTick>
 8019c02:	0003      	movs	r3, r0
 8019c04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	1dba      	adds	r2, r7, #6
 8019c0a:	2150      	movs	r1, #80	@ 0x50
 8019c0c:	8812      	ldrh	r2, [r2, #0]
 8019c0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	1dba      	adds	r2, r7, #6
 8019c14:	2152      	movs	r1, #82	@ 0x52
 8019c16:	8812      	ldrh	r2, [r2, #0]
 8019c18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	689a      	ldr	r2, [r3, #8]
 8019c1e:	2380      	movs	r3, #128	@ 0x80
 8019c20:	015b      	lsls	r3, r3, #5
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d108      	bne.n	8019c38 <HAL_UART_Transmit+0x94>
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	691b      	ldr	r3, [r3, #16]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d104      	bne.n	8019c38 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8019c2e:	2300      	movs	r3, #0
 8019c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019c32:	68bb      	ldr	r3, [r7, #8]
 8019c34:	61bb      	str	r3, [r7, #24]
 8019c36:	e003      	b.n	8019c40 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8019c38:	68bb      	ldr	r3, [r7, #8]
 8019c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8019c40:	e02f      	b.n	8019ca2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019c42:	697a      	ldr	r2, [r7, #20]
 8019c44:	68f8      	ldr	r0, [r7, #12]
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	9300      	str	r3, [sp, #0]
 8019c4a:	0013      	movs	r3, r2
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	2180      	movs	r1, #128	@ 0x80
 8019c50:	f001 f8fa 	bl	801ae48 <UART_WaitOnFlagUntilTimeout>
 8019c54:	1e03      	subs	r3, r0, #0
 8019c56:	d004      	beq.n	8019c62 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	2220      	movs	r2, #32
 8019c5c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8019c5e:	2303      	movs	r3, #3
 8019c60:	e03b      	b.n	8019cda <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8019c62:	69fb      	ldr	r3, [r7, #28]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	d10b      	bne.n	8019c80 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019c68:	69bb      	ldr	r3, [r7, #24]
 8019c6a:	881b      	ldrh	r3, [r3, #0]
 8019c6c:	001a      	movs	r2, r3
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	05d2      	lsls	r2, r2, #23
 8019c74:	0dd2      	lsrs	r2, r2, #23
 8019c76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019c78:	69bb      	ldr	r3, [r7, #24]
 8019c7a:	3302      	adds	r3, #2
 8019c7c:	61bb      	str	r3, [r7, #24]
 8019c7e:	e007      	b.n	8019c90 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019c80:	69fb      	ldr	r3, [r7, #28]
 8019c82:	781a      	ldrb	r2, [r3, #0]
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019c8a:	69fb      	ldr	r3, [r7, #28]
 8019c8c:	3301      	adds	r3, #1
 8019c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	2252      	movs	r2, #82	@ 0x52
 8019c94:	5a9b      	ldrh	r3, [r3, r2]
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	3b01      	subs	r3, #1
 8019c9a:	b299      	uxth	r1, r3
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	2252      	movs	r2, #82	@ 0x52
 8019ca0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	2252      	movs	r2, #82	@ 0x52
 8019ca6:	5a9b      	ldrh	r3, [r3, r2]
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d1c9      	bne.n	8019c42 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019cae:	697a      	ldr	r2, [r7, #20]
 8019cb0:	68f8      	ldr	r0, [r7, #12]
 8019cb2:	683b      	ldr	r3, [r7, #0]
 8019cb4:	9300      	str	r3, [sp, #0]
 8019cb6:	0013      	movs	r3, r2
 8019cb8:	2200      	movs	r2, #0
 8019cba:	2140      	movs	r1, #64	@ 0x40
 8019cbc:	f001 f8c4 	bl	801ae48 <UART_WaitOnFlagUntilTimeout>
 8019cc0:	1e03      	subs	r3, r0, #0
 8019cc2:	d004      	beq.n	8019cce <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	2220      	movs	r2, #32
 8019cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8019cca:	2303      	movs	r3, #3
 8019ccc:	e005      	b.n	8019cda <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019cce:	68fb      	ldr	r3, [r7, #12]
 8019cd0:	2220      	movs	r2, #32
 8019cd2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	e000      	b.n	8019cda <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8019cd8:	2302      	movs	r3, #2
  }
}
 8019cda:	0018      	movs	r0, r3
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	b008      	add	sp, #32
 8019ce0:	bd80      	pop	{r7, pc}
	...

08019ce4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b088      	sub	sp, #32
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	60b9      	str	r1, [r7, #8]
 8019cee:	1dbb      	adds	r3, r7, #6
 8019cf0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	2280      	movs	r2, #128	@ 0x80
 8019cf6:	589b      	ldr	r3, [r3, r2]
 8019cf8:	2b20      	cmp	r3, #32
 8019cfa:	d14a      	bne.n	8019d92 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019cfc:	68bb      	ldr	r3, [r7, #8]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d003      	beq.n	8019d0a <HAL_UART_Receive_IT+0x26>
 8019d02:	1dbb      	adds	r3, r7, #6
 8019d04:	881b      	ldrh	r3, [r3, #0]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d101      	bne.n	8019d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	e042      	b.n	8019d94 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	689a      	ldr	r2, [r3, #8]
 8019d12:	2380      	movs	r3, #128	@ 0x80
 8019d14:	015b      	lsls	r3, r3, #5
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d109      	bne.n	8019d2e <HAL_UART_Receive_IT+0x4a>
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	691b      	ldr	r3, [r3, #16]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d105      	bne.n	8019d2e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019d22:	68bb      	ldr	r3, [r7, #8]
 8019d24:	2201      	movs	r2, #1
 8019d26:	4013      	ands	r3, r2
 8019d28:	d001      	beq.n	8019d2e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	e032      	b.n	8019d94 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	2200      	movs	r2, #0
 8019d32:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	4a18      	ldr	r2, [pc, #96]	@ (8019d9c <HAL_UART_Receive_IT+0xb8>)
 8019d3a:	4293      	cmp	r3, r2
 8019d3c:	d020      	beq.n	8019d80 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	685a      	ldr	r2, [r3, #4]
 8019d44:	2380      	movs	r3, #128	@ 0x80
 8019d46:	041b      	lsls	r3, r3, #16
 8019d48:	4013      	ands	r3, r2
 8019d4a:	d019      	beq.n	8019d80 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8019d50:	613b      	str	r3, [r7, #16]
  return(result);
 8019d52:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019d54:	61fb      	str	r3, [r7, #28]
 8019d56:	2301      	movs	r3, #1
 8019d58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	f383 8810 	msr	PRIMASK, r3
}
 8019d60:	46c0      	nop			@ (mov r8, r8)
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	681a      	ldr	r2, [r3, #0]
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	2180      	movs	r1, #128	@ 0x80
 8019d6e:	04c9      	lsls	r1, r1, #19
 8019d70:	430a      	orrs	r2, r1
 8019d72:	601a      	str	r2, [r3, #0]
 8019d74:	69fb      	ldr	r3, [r7, #28]
 8019d76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d78:	69bb      	ldr	r3, [r7, #24]
 8019d7a:	f383 8810 	msr	PRIMASK, r3
}
 8019d7e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019d80:	1dbb      	adds	r3, r7, #6
 8019d82:	881a      	ldrh	r2, [r3, #0]
 8019d84:	68b9      	ldr	r1, [r7, #8]
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	0018      	movs	r0, r3
 8019d8a:	f001 f8c7 	bl	801af1c <UART_Start_Receive_IT>
 8019d8e:	0003      	movs	r3, r0
 8019d90:	e000      	b.n	8019d94 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019d92:	2302      	movs	r3, #2
  }
}
 8019d94:	0018      	movs	r0, r3
 8019d96:	46bd      	mov	sp, r7
 8019d98:	b008      	add	sp, #32
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	40004800 	.word	0x40004800

08019da0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b088      	sub	sp, #32
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	60f8      	str	r0, [r7, #12]
 8019da8:	60b9      	str	r1, [r7, #8]
 8019daa:	1dbb      	adds	r3, r7, #6
 8019dac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019db2:	2b20      	cmp	r3, #32
 8019db4:	d000      	beq.n	8019db8 <HAL_UART_Transmit_DMA+0x18>
 8019db6:	e077      	b.n	8019ea8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8019db8:	68bb      	ldr	r3, [r7, #8]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d003      	beq.n	8019dc6 <HAL_UART_Transmit_DMA+0x26>
 8019dbe:	1dbb      	adds	r3, r7, #6
 8019dc0:	881b      	ldrh	r3, [r3, #0]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d101      	bne.n	8019dca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8019dc6:	2301      	movs	r3, #1
 8019dc8:	e06f      	b.n	8019eaa <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	689a      	ldr	r2, [r3, #8]
 8019dce:	2380      	movs	r3, #128	@ 0x80
 8019dd0:	015b      	lsls	r3, r3, #5
 8019dd2:	429a      	cmp	r2, r3
 8019dd4:	d109      	bne.n	8019dea <HAL_UART_Transmit_DMA+0x4a>
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	691b      	ldr	r3, [r3, #16]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d105      	bne.n	8019dea <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019dde:	68bb      	ldr	r3, [r7, #8]
 8019de0:	2201      	movs	r2, #1
 8019de2:	4013      	ands	r3, r2
 8019de4:	d001      	beq.n	8019dea <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019de6:	2301      	movs	r3, #1
 8019de8:	e05f      	b.n	8019eaa <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	68ba      	ldr	r2, [r7, #8]
 8019dee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	1dba      	adds	r2, r7, #6
 8019df4:	2150      	movs	r1, #80	@ 0x50
 8019df6:	8812      	ldrh	r2, [r2, #0]
 8019df8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	1dba      	adds	r2, r7, #6
 8019dfe:	2152      	movs	r1, #82	@ 0x52
 8019e00:	8812      	ldrh	r2, [r2, #0]
 8019e02:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	2284      	movs	r2, #132	@ 0x84
 8019e08:	2100      	movs	r1, #0
 8019e0a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	2221      	movs	r2, #33	@ 0x21
 8019e10:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d027      	beq.n	8019e6a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8019e1a:	68fb      	ldr	r3, [r7, #12]
 8019e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e1e:	4a25      	ldr	r2, [pc, #148]	@ (8019eb4 <HAL_UART_Transmit_DMA+0x114>)
 8019e20:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e26:	4a24      	ldr	r2, [pc, #144]	@ (8019eb8 <HAL_UART_Transmit_DMA+0x118>)
 8019e28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e2e:	4a23      	ldr	r2, [pc, #140]	@ (8019ebc <HAL_UART_Transmit_DMA+0x11c>)
 8019e30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019e36:	2200      	movs	r2, #0
 8019e38:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019e42:	0019      	movs	r1, r3
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	3328      	adds	r3, #40	@ 0x28
 8019e4a:	001a      	movs	r2, r3
 8019e4c:	1dbb      	adds	r3, r7, #6
 8019e4e:	881b      	ldrh	r3, [r3, #0]
 8019e50:	f7f7 ff36 	bl	8011cc0 <HAL_DMA_Start_IT>
 8019e54:	1e03      	subs	r3, r0, #0
 8019e56:	d008      	beq.n	8019e6a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	2284      	movs	r2, #132	@ 0x84
 8019e5c:	2110      	movs	r1, #16
 8019e5e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	2220      	movs	r2, #32
 8019e64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8019e66:	2301      	movs	r3, #1
 8019e68:	e01f      	b.n	8019eaa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8019e6a:	68fb      	ldr	r3, [r7, #12]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	2240      	movs	r2, #64	@ 0x40
 8019e70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e72:	f3ef 8310 	mrs	r3, PRIMASK
 8019e76:	613b      	str	r3, [r7, #16]
  return(result);
 8019e78:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019e7a:	61fb      	str	r3, [r7, #28]
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	f383 8810 	msr	PRIMASK, r3
}
 8019e86:	46c0      	nop			@ (mov r8, r8)
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	689a      	ldr	r2, [r3, #8]
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	2180      	movs	r1, #128	@ 0x80
 8019e94:	430a      	orrs	r2, r1
 8019e96:	609a      	str	r2, [r3, #8]
 8019e98:	69fb      	ldr	r3, [r7, #28]
 8019e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e9c:	69bb      	ldr	r3, [r7, #24]
 8019e9e:	f383 8810 	msr	PRIMASK, r3
}
 8019ea2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8019ea4:	2300      	movs	r3, #0
 8019ea6:	e000      	b.n	8019eaa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8019ea8:	2302      	movs	r3, #2
  }
}
 8019eaa:	0018      	movs	r0, r3
 8019eac:	46bd      	mov	sp, r7
 8019eae:	b008      	add	sp, #32
 8019eb0:	bd80      	pop	{r7, pc}
 8019eb2:	46c0      	nop			@ (mov r8, r8)
 8019eb4:	0801b301 	.word	0x0801b301
 8019eb8:	0801b39d 	.word	0x0801b39d
 8019ebc:	0801b53d 	.word	0x0801b53d

08019ec0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8019ec0:	b580      	push	{r7, lr}
 8019ec2:	b088      	sub	sp, #32
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	60f8      	str	r0, [r7, #12]
 8019ec8:	60b9      	str	r1, [r7, #8]
 8019eca:	1dbb      	adds	r3, r7, #6
 8019ecc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	2280      	movs	r2, #128	@ 0x80
 8019ed2:	589b      	ldr	r3, [r3, r2]
 8019ed4:	2b20      	cmp	r3, #32
 8019ed6:	d14a      	bne.n	8019f6e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8019ed8:	68bb      	ldr	r3, [r7, #8]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d003      	beq.n	8019ee6 <HAL_UART_Receive_DMA+0x26>
 8019ede:	1dbb      	adds	r3, r7, #6
 8019ee0:	881b      	ldrh	r3, [r3, #0]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d101      	bne.n	8019eea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8019ee6:	2301      	movs	r3, #1
 8019ee8:	e042      	b.n	8019f70 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	689a      	ldr	r2, [r3, #8]
 8019eee:	2380      	movs	r3, #128	@ 0x80
 8019ef0:	015b      	lsls	r3, r3, #5
 8019ef2:	429a      	cmp	r2, r3
 8019ef4:	d109      	bne.n	8019f0a <HAL_UART_Receive_DMA+0x4a>
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	691b      	ldr	r3, [r3, #16]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d105      	bne.n	8019f0a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	2201      	movs	r2, #1
 8019f02:	4013      	ands	r3, r2
 8019f04:	d001      	beq.n	8019f0a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8019f06:	2301      	movs	r3, #1
 8019f08:	e032      	b.n	8019f70 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	4a18      	ldr	r2, [pc, #96]	@ (8019f78 <HAL_UART_Receive_DMA+0xb8>)
 8019f16:	4293      	cmp	r3, r2
 8019f18:	d020      	beq.n	8019f5c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	685a      	ldr	r2, [r3, #4]
 8019f20:	2380      	movs	r3, #128	@ 0x80
 8019f22:	041b      	lsls	r3, r3, #16
 8019f24:	4013      	ands	r3, r2
 8019f26:	d019      	beq.n	8019f5c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f28:	f3ef 8310 	mrs	r3, PRIMASK
 8019f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8019f2e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019f30:	61fb      	str	r3, [r7, #28]
 8019f32:	2301      	movs	r3, #1
 8019f34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	f383 8810 	msr	PRIMASK, r3
}
 8019f3c:	46c0      	nop			@ (mov r8, r8)
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	681a      	ldr	r2, [r3, #0]
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	2180      	movs	r1, #128	@ 0x80
 8019f4a:	04c9      	lsls	r1, r1, #19
 8019f4c:	430a      	orrs	r2, r1
 8019f4e:	601a      	str	r2, [r3, #0]
 8019f50:	69fb      	ldr	r3, [r7, #28]
 8019f52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f54:	69bb      	ldr	r3, [r7, #24]
 8019f56:	f383 8810 	msr	PRIMASK, r3
}
 8019f5a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8019f5c:	1dbb      	adds	r3, r7, #6
 8019f5e:	881a      	ldrh	r2, [r3, #0]
 8019f60:	68b9      	ldr	r1, [r7, #8]
 8019f62:	68fb      	ldr	r3, [r7, #12]
 8019f64:	0018      	movs	r0, r3
 8019f66:	f001 f8a3 	bl	801b0b0 <UART_Start_Receive_DMA>
 8019f6a:	0003      	movs	r3, r0
 8019f6c:	e000      	b.n	8019f70 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8019f6e:	2302      	movs	r3, #2
  }
}
 8019f70:	0018      	movs	r0, r3
 8019f72:	46bd      	mov	sp, r7
 8019f74:	b008      	add	sp, #32
 8019f76:	bd80      	pop	{r7, pc}
 8019f78:	40004800 	.word	0x40004800

08019f7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8019f7c:	b590      	push	{r4, r7, lr}
 8019f7e:	b0ab      	sub	sp, #172	@ 0xac
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	69db      	ldr	r3, [r3, #28]
 8019f8a:	22a4      	movs	r2, #164	@ 0xa4
 8019f8c:	18b9      	adds	r1, r7, r2
 8019f8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	20a0      	movs	r0, #160	@ 0xa0
 8019f98:	1839      	adds	r1, r7, r0
 8019f9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	689b      	ldr	r3, [r3, #8]
 8019fa2:	219c      	movs	r1, #156	@ 0x9c
 8019fa4:	1879      	adds	r1, r7, r1
 8019fa6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8019fa8:	0011      	movs	r1, r2
 8019faa:	18bb      	adds	r3, r7, r2
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	4a9c      	ldr	r2, [pc, #624]	@ (801a220 <HAL_UART_IRQHandler+0x2a4>)
 8019fb0:	4013      	ands	r3, r2
 8019fb2:	2298      	movs	r2, #152	@ 0x98
 8019fb4:	18bc      	adds	r4, r7, r2
 8019fb6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8019fb8:	18bb      	adds	r3, r7, r2
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d114      	bne.n	8019fea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8019fc0:	187b      	adds	r3, r7, r1
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	2220      	movs	r2, #32
 8019fc6:	4013      	ands	r3, r2
 8019fc8:	d00f      	beq.n	8019fea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8019fca:	183b      	adds	r3, r7, r0
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	2220      	movs	r2, #32
 8019fd0:	4013      	ands	r3, r2
 8019fd2:	d00a      	beq.n	8019fea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d100      	bne.n	8019fde <HAL_UART_IRQHandler+0x62>
 8019fdc:	e2aa      	b.n	801a534 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019fe2:	687a      	ldr	r2, [r7, #4]
 8019fe4:	0010      	movs	r0, r2
 8019fe6:	4798      	blx	r3
      }
      return;
 8019fe8:	e2a4      	b.n	801a534 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8019fea:	2398      	movs	r3, #152	@ 0x98
 8019fec:	18fb      	adds	r3, r7, r3
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d100      	bne.n	8019ff6 <HAL_UART_IRQHandler+0x7a>
 8019ff4:	e11a      	b.n	801a22c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8019ff6:	239c      	movs	r3, #156	@ 0x9c
 8019ff8:	18fb      	adds	r3, r7, r3
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	2201      	movs	r2, #1
 8019ffe:	4013      	ands	r3, r2
 801a000:	d106      	bne.n	801a010 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801a002:	23a0      	movs	r3, #160	@ 0xa0
 801a004:	18fb      	adds	r3, r7, r3
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	4a86      	ldr	r2, [pc, #536]	@ (801a224 <HAL_UART_IRQHandler+0x2a8>)
 801a00a:	4013      	ands	r3, r2
 801a00c:	d100      	bne.n	801a010 <HAL_UART_IRQHandler+0x94>
 801a00e:	e10d      	b.n	801a22c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a010:	23a4      	movs	r3, #164	@ 0xa4
 801a012:	18fb      	adds	r3, r7, r3
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	2201      	movs	r2, #1
 801a018:	4013      	ands	r3, r2
 801a01a:	d012      	beq.n	801a042 <HAL_UART_IRQHandler+0xc6>
 801a01c:	23a0      	movs	r3, #160	@ 0xa0
 801a01e:	18fb      	adds	r3, r7, r3
 801a020:	681a      	ldr	r2, [r3, #0]
 801a022:	2380      	movs	r3, #128	@ 0x80
 801a024:	005b      	lsls	r3, r3, #1
 801a026:	4013      	ands	r3, r2
 801a028:	d00b      	beq.n	801a042 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	2201      	movs	r2, #1
 801a030:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2284      	movs	r2, #132	@ 0x84
 801a036:	589b      	ldr	r3, [r3, r2]
 801a038:	2201      	movs	r2, #1
 801a03a:	431a      	orrs	r2, r3
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	2184      	movs	r1, #132	@ 0x84
 801a040:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a042:	23a4      	movs	r3, #164	@ 0xa4
 801a044:	18fb      	adds	r3, r7, r3
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	2202      	movs	r2, #2
 801a04a:	4013      	ands	r3, r2
 801a04c:	d011      	beq.n	801a072 <HAL_UART_IRQHandler+0xf6>
 801a04e:	239c      	movs	r3, #156	@ 0x9c
 801a050:	18fb      	adds	r3, r7, r3
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	2201      	movs	r2, #1
 801a056:	4013      	ands	r3, r2
 801a058:	d00b      	beq.n	801a072 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	2202      	movs	r2, #2
 801a060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	2284      	movs	r2, #132	@ 0x84
 801a066:	589b      	ldr	r3, [r3, r2]
 801a068:	2204      	movs	r2, #4
 801a06a:	431a      	orrs	r2, r3
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2184      	movs	r1, #132	@ 0x84
 801a070:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a072:	23a4      	movs	r3, #164	@ 0xa4
 801a074:	18fb      	adds	r3, r7, r3
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	2204      	movs	r2, #4
 801a07a:	4013      	ands	r3, r2
 801a07c:	d011      	beq.n	801a0a2 <HAL_UART_IRQHandler+0x126>
 801a07e:	239c      	movs	r3, #156	@ 0x9c
 801a080:	18fb      	adds	r3, r7, r3
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	2201      	movs	r2, #1
 801a086:	4013      	ands	r3, r2
 801a088:	d00b      	beq.n	801a0a2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	2204      	movs	r2, #4
 801a090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	2284      	movs	r2, #132	@ 0x84
 801a096:	589b      	ldr	r3, [r3, r2]
 801a098:	2202      	movs	r2, #2
 801a09a:	431a      	orrs	r2, r3
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	2184      	movs	r1, #132	@ 0x84
 801a0a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801a0a2:	23a4      	movs	r3, #164	@ 0xa4
 801a0a4:	18fb      	adds	r3, r7, r3
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	2208      	movs	r2, #8
 801a0aa:	4013      	ands	r3, r2
 801a0ac:	d017      	beq.n	801a0de <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801a0ae:	23a0      	movs	r3, #160	@ 0xa0
 801a0b0:	18fb      	adds	r3, r7, r3
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	2220      	movs	r2, #32
 801a0b6:	4013      	ands	r3, r2
 801a0b8:	d105      	bne.n	801a0c6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801a0ba:	239c      	movs	r3, #156	@ 0x9c
 801a0bc:	18fb      	adds	r3, r7, r3
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	2201      	movs	r2, #1
 801a0c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801a0c4:	d00b      	beq.n	801a0de <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	2208      	movs	r2, #8
 801a0cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	2284      	movs	r2, #132	@ 0x84
 801a0d2:	589b      	ldr	r3, [r3, r2]
 801a0d4:	2208      	movs	r2, #8
 801a0d6:	431a      	orrs	r2, r3
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	2184      	movs	r1, #132	@ 0x84
 801a0dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801a0de:	23a4      	movs	r3, #164	@ 0xa4
 801a0e0:	18fb      	adds	r3, r7, r3
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	2380      	movs	r3, #128	@ 0x80
 801a0e6:	011b      	lsls	r3, r3, #4
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	d013      	beq.n	801a114 <HAL_UART_IRQHandler+0x198>
 801a0ec:	23a0      	movs	r3, #160	@ 0xa0
 801a0ee:	18fb      	adds	r3, r7, r3
 801a0f0:	681a      	ldr	r2, [r3, #0]
 801a0f2:	2380      	movs	r3, #128	@ 0x80
 801a0f4:	04db      	lsls	r3, r3, #19
 801a0f6:	4013      	ands	r3, r2
 801a0f8:	d00c      	beq.n	801a114 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2280      	movs	r2, #128	@ 0x80
 801a100:	0112      	lsls	r2, r2, #4
 801a102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	2284      	movs	r2, #132	@ 0x84
 801a108:	589b      	ldr	r3, [r3, r2]
 801a10a:	2220      	movs	r2, #32
 801a10c:	431a      	orrs	r2, r3
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	2184      	movs	r1, #132	@ 0x84
 801a112:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2284      	movs	r2, #132	@ 0x84
 801a118:	589b      	ldr	r3, [r3, r2]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d100      	bne.n	801a120 <HAL_UART_IRQHandler+0x1a4>
 801a11e:	e20b      	b.n	801a538 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801a120:	23a4      	movs	r3, #164	@ 0xa4
 801a122:	18fb      	adds	r3, r7, r3
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	2220      	movs	r2, #32
 801a128:	4013      	ands	r3, r2
 801a12a:	d00e      	beq.n	801a14a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801a12c:	23a0      	movs	r3, #160	@ 0xa0
 801a12e:	18fb      	adds	r3, r7, r3
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2220      	movs	r2, #32
 801a134:	4013      	ands	r3, r2
 801a136:	d008      	beq.n	801a14a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d004      	beq.n	801a14a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801a144:	687a      	ldr	r2, [r7, #4]
 801a146:	0010      	movs	r0, r2
 801a148:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	2284      	movs	r2, #132	@ 0x84
 801a14e:	589b      	ldr	r3, [r3, r2]
 801a150:	2194      	movs	r1, #148	@ 0x94
 801a152:	187a      	adds	r2, r7, r1
 801a154:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	689b      	ldr	r3, [r3, #8]
 801a15c:	2240      	movs	r2, #64	@ 0x40
 801a15e:	4013      	ands	r3, r2
 801a160:	2b40      	cmp	r3, #64	@ 0x40
 801a162:	d004      	beq.n	801a16e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801a164:	187b      	adds	r3, r7, r1
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	2228      	movs	r2, #40	@ 0x28
 801a16a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801a16c:	d04b      	beq.n	801a206 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	0018      	movs	r0, r3
 801a172:	f001 f861 	bl	801b238 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	689b      	ldr	r3, [r3, #8]
 801a17c:	2240      	movs	r2, #64	@ 0x40
 801a17e:	4013      	ands	r3, r2
 801a180:	2b40      	cmp	r3, #64	@ 0x40
 801a182:	d139      	bne.n	801a1f8 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a184:	f3ef 8310 	mrs	r3, PRIMASK
 801a188:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801a18a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a18c:	2090      	movs	r0, #144	@ 0x90
 801a18e:	183a      	adds	r2, r7, r0
 801a190:	6013      	str	r3, [r2, #0]
 801a192:	2301      	movs	r3, #1
 801a194:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a198:	f383 8810 	msr	PRIMASK, r3
}
 801a19c:	46c0      	nop			@ (mov r8, r8)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	689a      	ldr	r2, [r3, #8]
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	681b      	ldr	r3, [r3, #0]
 801a1a8:	2140      	movs	r1, #64	@ 0x40
 801a1aa:	438a      	bics	r2, r1
 801a1ac:	609a      	str	r2, [r3, #8]
 801a1ae:	183b      	adds	r3, r7, r0
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1b6:	f383 8810 	msr	PRIMASK, r3
}
 801a1ba:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d012      	beq.n	801a1ea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a1c8:	4a17      	ldr	r2, [pc, #92]	@ (801a228 <HAL_UART_IRQHandler+0x2ac>)
 801a1ca:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a1d0:	0018      	movs	r0, r3
 801a1d2:	f7f7 fe1b 	bl	8011e0c <HAL_DMA_Abort_IT>
 801a1d6:	1e03      	subs	r3, r0, #0
 801a1d8:	d020      	beq.n	801a21c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a1de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a1e4:	0018      	movs	r0, r3
 801a1e6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a1e8:	e018      	b.n	801a21c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	2298      	movs	r2, #152	@ 0x98
 801a1ee:	589b      	ldr	r3, [r3, r2]
 801a1f0:	687a      	ldr	r2, [r7, #4]
 801a1f2:	0010      	movs	r0, r2
 801a1f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a1f6:	e011      	b.n	801a21c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	2298      	movs	r2, #152	@ 0x98
 801a1fc:	589b      	ldr	r3, [r3, r2]
 801a1fe:	687a      	ldr	r2, [r7, #4]
 801a200:	0010      	movs	r0, r2
 801a202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a204:	e00a      	b.n	801a21c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	2298      	movs	r2, #152	@ 0x98
 801a20a:	589b      	ldr	r3, [r3, r2]
 801a20c:	687a      	ldr	r2, [r7, #4]
 801a20e:	0010      	movs	r0, r2
 801a210:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	2284      	movs	r2, #132	@ 0x84
 801a216:	2100      	movs	r1, #0
 801a218:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801a21a:	e18d      	b.n	801a538 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a21c:	46c0      	nop			@ (mov r8, r8)
    return;
 801a21e:	e18b      	b.n	801a538 <HAL_UART_IRQHandler+0x5bc>
 801a220:	0000080f 	.word	0x0000080f
 801a224:	04000120 	.word	0x04000120
 801a228:	0801b5c5 	.word	0x0801b5c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a230:	2b01      	cmp	r3, #1
 801a232:	d000      	beq.n	801a236 <HAL_UART_IRQHandler+0x2ba>
 801a234:	e13d      	b.n	801a4b2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801a236:	23a4      	movs	r3, #164	@ 0xa4
 801a238:	18fb      	adds	r3, r7, r3
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	2210      	movs	r2, #16
 801a23e:	4013      	ands	r3, r2
 801a240:	d100      	bne.n	801a244 <HAL_UART_IRQHandler+0x2c8>
 801a242:	e136      	b.n	801a4b2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801a244:	23a0      	movs	r3, #160	@ 0xa0
 801a246:	18fb      	adds	r3, r7, r3
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	2210      	movs	r2, #16
 801a24c:	4013      	ands	r3, r2
 801a24e:	d100      	bne.n	801a252 <HAL_UART_IRQHandler+0x2d6>
 801a250:	e12f      	b.n	801a4b2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	2210      	movs	r2, #16
 801a258:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	689b      	ldr	r3, [r3, #8]
 801a260:	2240      	movs	r2, #64	@ 0x40
 801a262:	4013      	ands	r3, r2
 801a264:	2b40      	cmp	r3, #64	@ 0x40
 801a266:	d000      	beq.n	801a26a <HAL_UART_IRQHandler+0x2ee>
 801a268:	e0a2      	b.n	801a3b0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	685a      	ldr	r2, [r3, #4]
 801a272:	217e      	movs	r1, #126	@ 0x7e
 801a274:	187b      	adds	r3, r7, r1
 801a276:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801a278:	187b      	adds	r3, r7, r1
 801a27a:	881b      	ldrh	r3, [r3, #0]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d100      	bne.n	801a282 <HAL_UART_IRQHandler+0x306>
 801a280:	e15c      	b.n	801a53c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	2258      	movs	r2, #88	@ 0x58
 801a286:	5a9b      	ldrh	r3, [r3, r2]
 801a288:	187a      	adds	r2, r7, r1
 801a28a:	8812      	ldrh	r2, [r2, #0]
 801a28c:	429a      	cmp	r2, r3
 801a28e:	d300      	bcc.n	801a292 <HAL_UART_IRQHandler+0x316>
 801a290:	e154      	b.n	801a53c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	187a      	adds	r2, r7, r1
 801a296:	215a      	movs	r1, #90	@ 0x5a
 801a298:	8812      	ldrh	r2, [r2, #0]
 801a29a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	2220      	movs	r2, #32
 801a2a6:	4013      	ands	r3, r2
 801a2a8:	d16f      	bne.n	801a38a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2aa:	f3ef 8310 	mrs	r3, PRIMASK
 801a2ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a2b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a2b4:	2301      	movs	r3, #1
 801a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2ba:	f383 8810 	msr	PRIMASK, r3
}
 801a2be:	46c0      	nop			@ (mov r8, r8)
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	681a      	ldr	r2, [r3, #0]
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	49a0      	ldr	r1, [pc, #640]	@ (801a54c <HAL_UART_IRQHandler+0x5d0>)
 801a2cc:	400a      	ands	r2, r1
 801a2ce:	601a      	str	r2, [r3, #0]
 801a2d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a2d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2d6:	f383 8810 	msr	PRIMASK, r3
}
 801a2da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801a2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a2e4:	677b      	str	r3, [r7, #116]	@ 0x74
 801a2e6:	2301      	movs	r3, #1
 801a2e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a2ec:	f383 8810 	msr	PRIMASK, r3
}
 801a2f0:	46c0      	nop			@ (mov r8, r8)
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	689a      	ldr	r2, [r3, #8]
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	2101      	movs	r1, #1
 801a2fe:	438a      	bics	r2, r1
 801a300:	609a      	str	r2, [r3, #8]
 801a302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a304:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a308:	f383 8810 	msr	PRIMASK, r3
}
 801a30c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a30e:	f3ef 8310 	mrs	r3, PRIMASK
 801a312:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801a314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a316:	673b      	str	r3, [r7, #112]	@ 0x70
 801a318:	2301      	movs	r3, #1
 801a31a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a31e:	f383 8810 	msr	PRIMASK, r3
}
 801a322:	46c0      	nop			@ (mov r8, r8)
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	689a      	ldr	r2, [r3, #8]
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	2140      	movs	r1, #64	@ 0x40
 801a330:	438a      	bics	r2, r1
 801a332:	609a      	str	r2, [r3, #8]
 801a334:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a336:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a33a:	f383 8810 	msr	PRIMASK, r3
}
 801a33e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	2280      	movs	r2, #128	@ 0x80
 801a344:	2120      	movs	r1, #32
 801a346:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	2200      	movs	r2, #0
 801a34c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a34e:	f3ef 8310 	mrs	r3, PRIMASK
 801a352:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801a354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a358:	2301      	movs	r3, #1
 801a35a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a35c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a35e:	f383 8810 	msr	PRIMASK, r3
}
 801a362:	46c0      	nop			@ (mov r8, r8)
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	681a      	ldr	r2, [r3, #0]
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	2110      	movs	r1, #16
 801a370:	438a      	bics	r2, r1
 801a372:	601a      	str	r2, [r3, #0]
 801a374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a376:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a37a:	f383 8810 	msr	PRIMASK, r3
}
 801a37e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a384:	0018      	movs	r0, r3
 801a386:	f7f7 fd01 	bl	8011d8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2202      	movs	r2, #2
 801a38e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	22ac      	movs	r2, #172	@ 0xac
 801a394:	589b      	ldr	r3, [r3, r2]
 801a396:	687a      	ldr	r2, [r7, #4]
 801a398:	2158      	movs	r1, #88	@ 0x58
 801a39a:	5a51      	ldrh	r1, [r2, r1]
 801a39c:	687a      	ldr	r2, [r7, #4]
 801a39e:	205a      	movs	r0, #90	@ 0x5a
 801a3a0:	5a12      	ldrh	r2, [r2, r0]
 801a3a2:	b292      	uxth	r2, r2
 801a3a4:	1a8a      	subs	r2, r1, r2
 801a3a6:	b291      	uxth	r1, r2
 801a3a8:	687a      	ldr	r2, [r7, #4]
 801a3aa:	0010      	movs	r0, r2
 801a3ac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a3ae:	e0c5      	b.n	801a53c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2258      	movs	r2, #88	@ 0x58
 801a3b4:	5a99      	ldrh	r1, [r3, r2]
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	225a      	movs	r2, #90	@ 0x5a
 801a3ba:	5a9b      	ldrh	r3, [r3, r2]
 801a3bc:	b29a      	uxth	r2, r3
 801a3be:	208e      	movs	r0, #142	@ 0x8e
 801a3c0:	183b      	adds	r3, r7, r0
 801a3c2:	1a8a      	subs	r2, r1, r2
 801a3c4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	225a      	movs	r2, #90	@ 0x5a
 801a3ca:	5a9b      	ldrh	r3, [r3, r2]
 801a3cc:	b29b      	uxth	r3, r3
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d100      	bne.n	801a3d4 <HAL_UART_IRQHandler+0x458>
 801a3d2:	e0b5      	b.n	801a540 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801a3d4:	183b      	adds	r3, r7, r0
 801a3d6:	881b      	ldrh	r3, [r3, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d100      	bne.n	801a3de <HAL_UART_IRQHandler+0x462>
 801a3dc:	e0b0      	b.n	801a540 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3de:	f3ef 8310 	mrs	r3, PRIMASK
 801a3e2:	60fb      	str	r3, [r7, #12]
  return(result);
 801a3e4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801a3e6:	2488      	movs	r4, #136	@ 0x88
 801a3e8:	193a      	adds	r2, r7, r4
 801a3ea:	6013      	str	r3, [r2, #0]
 801a3ec:	2301      	movs	r3, #1
 801a3ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3f0:	693b      	ldr	r3, [r7, #16]
 801a3f2:	f383 8810 	msr	PRIMASK, r3
}
 801a3f6:	46c0      	nop			@ (mov r8, r8)
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	681a      	ldr	r2, [r3, #0]
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	4953      	ldr	r1, [pc, #332]	@ (801a550 <HAL_UART_IRQHandler+0x5d4>)
 801a404:	400a      	ands	r2, r1
 801a406:	601a      	str	r2, [r3, #0]
 801a408:	193b      	adds	r3, r7, r4
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a40e:	697b      	ldr	r3, [r7, #20]
 801a410:	f383 8810 	msr	PRIMASK, r3
}
 801a414:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a416:	f3ef 8310 	mrs	r3, PRIMASK
 801a41a:	61bb      	str	r3, [r7, #24]
  return(result);
 801a41c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a41e:	2484      	movs	r4, #132	@ 0x84
 801a420:	193a      	adds	r2, r7, r4
 801a422:	6013      	str	r3, [r2, #0]
 801a424:	2301      	movs	r3, #1
 801a426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a428:	69fb      	ldr	r3, [r7, #28]
 801a42a:	f383 8810 	msr	PRIMASK, r3
}
 801a42e:	46c0      	nop			@ (mov r8, r8)
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	689a      	ldr	r2, [r3, #8]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2101      	movs	r1, #1
 801a43c:	438a      	bics	r2, r1
 801a43e:	609a      	str	r2, [r3, #8]
 801a440:	193b      	adds	r3, r7, r4
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a446:	6a3b      	ldr	r3, [r7, #32]
 801a448:	f383 8810 	msr	PRIMASK, r3
}
 801a44c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2280      	movs	r2, #128	@ 0x80
 801a452:	2120      	movs	r1, #32
 801a454:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2200      	movs	r2, #0
 801a45a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	2200      	movs	r2, #0
 801a460:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a462:	f3ef 8310 	mrs	r3, PRIMASK
 801a466:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a46a:	2480      	movs	r4, #128	@ 0x80
 801a46c:	193a      	adds	r2, r7, r4
 801a46e:	6013      	str	r3, [r2, #0]
 801a470:	2301      	movs	r3, #1
 801a472:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a476:	f383 8810 	msr	PRIMASK, r3
}
 801a47a:	46c0      	nop			@ (mov r8, r8)
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	681a      	ldr	r2, [r3, #0]
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2110      	movs	r1, #16
 801a488:	438a      	bics	r2, r1
 801a48a:	601a      	str	r2, [r3, #0]
 801a48c:	193b      	adds	r3, r7, r4
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a494:	f383 8810 	msr	PRIMASK, r3
}
 801a498:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2202      	movs	r2, #2
 801a49e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	22ac      	movs	r2, #172	@ 0xac
 801a4a4:	589b      	ldr	r3, [r3, r2]
 801a4a6:	183a      	adds	r2, r7, r0
 801a4a8:	8811      	ldrh	r1, [r2, #0]
 801a4aa:	687a      	ldr	r2, [r7, #4]
 801a4ac:	0010      	movs	r0, r2
 801a4ae:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801a4b0:	e046      	b.n	801a540 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801a4b2:	23a4      	movs	r3, #164	@ 0xa4
 801a4b4:	18fb      	adds	r3, r7, r3
 801a4b6:	681a      	ldr	r2, [r3, #0]
 801a4b8:	2380      	movs	r3, #128	@ 0x80
 801a4ba:	035b      	lsls	r3, r3, #13
 801a4bc:	4013      	ands	r3, r2
 801a4be:	d012      	beq.n	801a4e6 <HAL_UART_IRQHandler+0x56a>
 801a4c0:	239c      	movs	r3, #156	@ 0x9c
 801a4c2:	18fb      	adds	r3, r7, r3
 801a4c4:	681a      	ldr	r2, [r3, #0]
 801a4c6:	2380      	movs	r3, #128	@ 0x80
 801a4c8:	03db      	lsls	r3, r3, #15
 801a4ca:	4013      	ands	r3, r2
 801a4cc:	d00b      	beq.n	801a4e6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	2280      	movs	r2, #128	@ 0x80
 801a4d4:	0352      	lsls	r2, r2, #13
 801a4d6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	22a8      	movs	r2, #168	@ 0xa8
 801a4dc:	589b      	ldr	r3, [r3, r2]
 801a4de:	687a      	ldr	r2, [r7, #4]
 801a4e0:	0010      	movs	r0, r2
 801a4e2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801a4e4:	e02f      	b.n	801a546 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801a4e6:	23a4      	movs	r3, #164	@ 0xa4
 801a4e8:	18fb      	adds	r3, r7, r3
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	2280      	movs	r2, #128	@ 0x80
 801a4ee:	4013      	ands	r3, r2
 801a4f0:	d00f      	beq.n	801a512 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801a4f2:	23a0      	movs	r3, #160	@ 0xa0
 801a4f4:	18fb      	adds	r3, r7, r3
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	2280      	movs	r2, #128	@ 0x80
 801a4fa:	4013      	ands	r3, r2
 801a4fc:	d009      	beq.n	801a512 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a502:	2b00      	cmp	r3, #0
 801a504:	d01e      	beq.n	801a544 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a50a:	687a      	ldr	r2, [r7, #4]
 801a50c:	0010      	movs	r0, r2
 801a50e:	4798      	blx	r3
    }
    return;
 801a510:	e018      	b.n	801a544 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801a512:	23a4      	movs	r3, #164	@ 0xa4
 801a514:	18fb      	adds	r3, r7, r3
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2240      	movs	r2, #64	@ 0x40
 801a51a:	4013      	ands	r3, r2
 801a51c:	d013      	beq.n	801a546 <HAL_UART_IRQHandler+0x5ca>
 801a51e:	23a0      	movs	r3, #160	@ 0xa0
 801a520:	18fb      	adds	r3, r7, r3
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	2240      	movs	r2, #64	@ 0x40
 801a526:	4013      	ands	r3, r2
 801a528:	d00d      	beq.n	801a546 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	0018      	movs	r0, r3
 801a52e:	f001 f862 	bl	801b5f6 <UART_EndTransmit_IT>
    return;
 801a532:	e008      	b.n	801a546 <HAL_UART_IRQHandler+0x5ca>
      return;
 801a534:	46c0      	nop			@ (mov r8, r8)
 801a536:	e006      	b.n	801a546 <HAL_UART_IRQHandler+0x5ca>
    return;
 801a538:	46c0      	nop			@ (mov r8, r8)
 801a53a:	e004      	b.n	801a546 <HAL_UART_IRQHandler+0x5ca>
      return;
 801a53c:	46c0      	nop			@ (mov r8, r8)
 801a53e:	e002      	b.n	801a546 <HAL_UART_IRQHandler+0x5ca>
      return;
 801a540:	46c0      	nop			@ (mov r8, r8)
 801a542:	e000      	b.n	801a546 <HAL_UART_IRQHandler+0x5ca>
    return;
 801a544:	46c0      	nop			@ (mov r8, r8)
  }

}
 801a546:	46bd      	mov	sp, r7
 801a548:	b02b      	add	sp, #172	@ 0xac
 801a54a:	bd90      	pop	{r4, r7, pc}
 801a54c:	fffffeff 	.word	0xfffffeff
 801a550:	fffffedf 	.word	0xfffffedf

0801a554 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b082      	sub	sp, #8
 801a558:	af00      	add	r7, sp, #0
 801a55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801a55c:	46c0      	nop			@ (mov r8, r8)
 801a55e:	46bd      	mov	sp, r7
 801a560:	b002      	add	sp, #8
 801a562:	bd80      	pop	{r7, pc}

0801a564 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801a56c:	46c0      	nop			@ (mov r8, r8)
 801a56e:	46bd      	mov	sp, r7
 801a570:	b002      	add	sp, #8
 801a572:	bd80      	pop	{r7, pc}

0801a574 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a574:	b580      	push	{r7, lr}
 801a576:	b082      	sub	sp, #8
 801a578:	af00      	add	r7, sp, #0
 801a57a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801a57c:	46c0      	nop			@ (mov r8, r8)
 801a57e:	46bd      	mov	sp, r7
 801a580:	b002      	add	sp, #8
 801a582:	bd80      	pop	{r7, pc}

0801a584 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801a584:	b580      	push	{r7, lr}
 801a586:	b082      	sub	sp, #8
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801a58c:	46c0      	nop			@ (mov r8, r8)
 801a58e:	46bd      	mov	sp, r7
 801a590:	b002      	add	sp, #8
 801a592:	bd80      	pop	{r7, pc}

0801a594 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801a59c:	46c0      	nop			@ (mov r8, r8)
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	b002      	add	sp, #8
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b082      	sub	sp, #8
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801a5ac:	46c0      	nop			@ (mov r8, r8)
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	b002      	add	sp, #8
 801a5b2:	bd80      	pop	{r7, pc}

0801a5b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b082      	sub	sp, #8
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	000a      	movs	r2, r1
 801a5be:	1cbb      	adds	r3, r7, #2
 801a5c0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801a5c2:	46c0      	nop			@ (mov r8, r8)
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	b002      	add	sp, #8
 801a5c8:	bd80      	pop	{r7, pc}
	...

0801a5cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b082      	sub	sp, #8
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	2188      	movs	r1, #136	@ 0x88
 801a5d8:	4a14      	ldr	r2, [pc, #80]	@ (801a62c <UART_InitCallbacksToDefault+0x60>)
 801a5da:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	218c      	movs	r1, #140	@ 0x8c
 801a5e0:	4a13      	ldr	r2, [pc, #76]	@ (801a630 <UART_InitCallbacksToDefault+0x64>)
 801a5e2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	2190      	movs	r1, #144	@ 0x90
 801a5e8:	4a12      	ldr	r2, [pc, #72]	@ (801a634 <UART_InitCallbacksToDefault+0x68>)
 801a5ea:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	2194      	movs	r1, #148	@ 0x94
 801a5f0:	4a11      	ldr	r2, [pc, #68]	@ (801a638 <UART_InitCallbacksToDefault+0x6c>)
 801a5f2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	2198      	movs	r1, #152	@ 0x98
 801a5f8:	4a10      	ldr	r2, [pc, #64]	@ (801a63c <UART_InitCallbacksToDefault+0x70>)
 801a5fa:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	219c      	movs	r1, #156	@ 0x9c
 801a600:	4a0f      	ldr	r2, [pc, #60]	@ (801a640 <UART_InitCallbacksToDefault+0x74>)
 801a602:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	21a0      	movs	r1, #160	@ 0xa0
 801a608:	4a0e      	ldr	r2, [pc, #56]	@ (801a644 <UART_InitCallbacksToDefault+0x78>)
 801a60a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	21a4      	movs	r1, #164	@ 0xa4
 801a610:	4a0d      	ldr	r2, [pc, #52]	@ (801a648 <UART_InitCallbacksToDefault+0x7c>)
 801a612:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	21a8      	movs	r1, #168	@ 0xa8
 801a618:	4a0c      	ldr	r2, [pc, #48]	@ (801a64c <UART_InitCallbacksToDefault+0x80>)
 801a61a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	21ac      	movs	r1, #172	@ 0xac
 801a620:	4a0b      	ldr	r2, [pc, #44]	@ (801a650 <UART_InitCallbacksToDefault+0x84>)
 801a622:	505a      	str	r2, [r3, r1]

}
 801a624:	46c0      	nop			@ (mov r8, r8)
 801a626:	46bd      	mov	sp, r7
 801a628:	b002      	add	sp, #8
 801a62a:	bd80      	pop	{r7, pc}
 801a62c:	0801a565 	.word	0x0801a565
 801a630:	0801a555 	.word	0x0801a555
 801a634:	0801a575 	.word	0x0801a575
 801a638:	0800a44d 	.word	0x0800a44d
 801a63c:	08003c21 	.word	0x08003c21
 801a640:	0801a585 	.word	0x0801a585
 801a644:	0801a595 	.word	0x0801a595
 801a648:	0801a5a5 	.word	0x0801a5a5
 801a64c:	0801b9e9 	.word	0x0801b9e9
 801a650:	0801a5b5 	.word	0x0801a5b5

0801a654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801a654:	b5b0      	push	{r4, r5, r7, lr}
 801a656:	b08e      	sub	sp, #56	@ 0x38
 801a658:	af00      	add	r7, sp, #0
 801a65a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801a65c:	231a      	movs	r3, #26
 801a65e:	2218      	movs	r2, #24
 801a660:	189b      	adds	r3, r3, r2
 801a662:	19db      	adds	r3, r3, r7
 801a664:	2200      	movs	r2, #0
 801a666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801a668:	69fb      	ldr	r3, [r7, #28]
 801a66a:	689a      	ldr	r2, [r3, #8]
 801a66c:	69fb      	ldr	r3, [r7, #28]
 801a66e:	691b      	ldr	r3, [r3, #16]
 801a670:	431a      	orrs	r2, r3
 801a672:	69fb      	ldr	r3, [r7, #28]
 801a674:	695b      	ldr	r3, [r3, #20]
 801a676:	431a      	orrs	r2, r3
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	69db      	ldr	r3, [r3, #28]
 801a67c:	4313      	orrs	r3, r2
 801a67e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801a680:	69fb      	ldr	r3, [r7, #28]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4ac3      	ldr	r2, [pc, #780]	@ (801a994 <UART_SetConfig+0x340>)
 801a688:	4013      	ands	r3, r2
 801a68a:	0019      	movs	r1, r3
 801a68c:	69fb      	ldr	r3, [r7, #28]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a692:	430a      	orrs	r2, r1
 801a694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801a696:	69fb      	ldr	r3, [r7, #28]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	685b      	ldr	r3, [r3, #4]
 801a69c:	4abe      	ldr	r2, [pc, #760]	@ (801a998 <UART_SetConfig+0x344>)
 801a69e:	4013      	ands	r3, r2
 801a6a0:	0019      	movs	r1, r3
 801a6a2:	69fb      	ldr	r3, [r7, #28]
 801a6a4:	68da      	ldr	r2, [r3, #12]
 801a6a6:	69fb      	ldr	r3, [r7, #28]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	430a      	orrs	r2, r1
 801a6ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801a6ae:	69fb      	ldr	r3, [r7, #28]
 801a6b0:	699b      	ldr	r3, [r3, #24]
 801a6b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801a6b4:	69fb      	ldr	r3, [r7, #28]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	4ab8      	ldr	r2, [pc, #736]	@ (801a99c <UART_SetConfig+0x348>)
 801a6ba:	4293      	cmp	r3, r2
 801a6bc:	d004      	beq.n	801a6c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801a6be:	69fb      	ldr	r3, [r7, #28]
 801a6c0:	6a1b      	ldr	r3, [r3, #32]
 801a6c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a6c4:	4313      	orrs	r3, r2
 801a6c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801a6c8:	69fb      	ldr	r3, [r7, #28]
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	689b      	ldr	r3, [r3, #8]
 801a6ce:	4ab4      	ldr	r2, [pc, #720]	@ (801a9a0 <UART_SetConfig+0x34c>)
 801a6d0:	4013      	ands	r3, r2
 801a6d2:	0019      	movs	r1, r3
 801a6d4:	69fb      	ldr	r3, [r7, #28]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a6da:	430a      	orrs	r2, r1
 801a6dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801a6de:	69fb      	ldr	r3, [r7, #28]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	4ab0      	ldr	r2, [pc, #704]	@ (801a9a4 <UART_SetConfig+0x350>)
 801a6e4:	4293      	cmp	r3, r2
 801a6e6:	d131      	bne.n	801a74c <UART_SetConfig+0xf8>
 801a6e8:	4baf      	ldr	r3, [pc, #700]	@ (801a9a8 <UART_SetConfig+0x354>)
 801a6ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a6ec:	2203      	movs	r2, #3
 801a6ee:	4013      	ands	r3, r2
 801a6f0:	2b03      	cmp	r3, #3
 801a6f2:	d01d      	beq.n	801a730 <UART_SetConfig+0xdc>
 801a6f4:	d823      	bhi.n	801a73e <UART_SetConfig+0xea>
 801a6f6:	2b02      	cmp	r3, #2
 801a6f8:	d00c      	beq.n	801a714 <UART_SetConfig+0xc0>
 801a6fa:	d820      	bhi.n	801a73e <UART_SetConfig+0xea>
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d002      	beq.n	801a706 <UART_SetConfig+0xb2>
 801a700:	2b01      	cmp	r3, #1
 801a702:	d00e      	beq.n	801a722 <UART_SetConfig+0xce>
 801a704:	e01b      	b.n	801a73e <UART_SetConfig+0xea>
 801a706:	231b      	movs	r3, #27
 801a708:	2218      	movs	r2, #24
 801a70a:	189b      	adds	r3, r3, r2
 801a70c:	19db      	adds	r3, r3, r7
 801a70e:	2201      	movs	r2, #1
 801a710:	701a      	strb	r2, [r3, #0]
 801a712:	e0b4      	b.n	801a87e <UART_SetConfig+0x22a>
 801a714:	231b      	movs	r3, #27
 801a716:	2218      	movs	r2, #24
 801a718:	189b      	adds	r3, r3, r2
 801a71a:	19db      	adds	r3, r3, r7
 801a71c:	2202      	movs	r2, #2
 801a71e:	701a      	strb	r2, [r3, #0]
 801a720:	e0ad      	b.n	801a87e <UART_SetConfig+0x22a>
 801a722:	231b      	movs	r3, #27
 801a724:	2218      	movs	r2, #24
 801a726:	189b      	adds	r3, r3, r2
 801a728:	19db      	adds	r3, r3, r7
 801a72a:	2204      	movs	r2, #4
 801a72c:	701a      	strb	r2, [r3, #0]
 801a72e:	e0a6      	b.n	801a87e <UART_SetConfig+0x22a>
 801a730:	231b      	movs	r3, #27
 801a732:	2218      	movs	r2, #24
 801a734:	189b      	adds	r3, r3, r2
 801a736:	19db      	adds	r3, r3, r7
 801a738:	2208      	movs	r2, #8
 801a73a:	701a      	strb	r2, [r3, #0]
 801a73c:	e09f      	b.n	801a87e <UART_SetConfig+0x22a>
 801a73e:	231b      	movs	r3, #27
 801a740:	2218      	movs	r2, #24
 801a742:	189b      	adds	r3, r3, r2
 801a744:	19db      	adds	r3, r3, r7
 801a746:	2210      	movs	r2, #16
 801a748:	701a      	strb	r2, [r3, #0]
 801a74a:	e098      	b.n	801a87e <UART_SetConfig+0x22a>
 801a74c:	69fb      	ldr	r3, [r7, #28]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4a96      	ldr	r2, [pc, #600]	@ (801a9ac <UART_SetConfig+0x358>)
 801a752:	4293      	cmp	r3, r2
 801a754:	d131      	bne.n	801a7ba <UART_SetConfig+0x166>
 801a756:	4b94      	ldr	r3, [pc, #592]	@ (801a9a8 <UART_SetConfig+0x354>)
 801a758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a75a:	220c      	movs	r2, #12
 801a75c:	4013      	ands	r3, r2
 801a75e:	2b0c      	cmp	r3, #12
 801a760:	d01d      	beq.n	801a79e <UART_SetConfig+0x14a>
 801a762:	d823      	bhi.n	801a7ac <UART_SetConfig+0x158>
 801a764:	2b08      	cmp	r3, #8
 801a766:	d00c      	beq.n	801a782 <UART_SetConfig+0x12e>
 801a768:	d820      	bhi.n	801a7ac <UART_SetConfig+0x158>
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d002      	beq.n	801a774 <UART_SetConfig+0x120>
 801a76e:	2b04      	cmp	r3, #4
 801a770:	d00e      	beq.n	801a790 <UART_SetConfig+0x13c>
 801a772:	e01b      	b.n	801a7ac <UART_SetConfig+0x158>
 801a774:	231b      	movs	r3, #27
 801a776:	2218      	movs	r2, #24
 801a778:	189b      	adds	r3, r3, r2
 801a77a:	19db      	adds	r3, r3, r7
 801a77c:	2200      	movs	r2, #0
 801a77e:	701a      	strb	r2, [r3, #0]
 801a780:	e07d      	b.n	801a87e <UART_SetConfig+0x22a>
 801a782:	231b      	movs	r3, #27
 801a784:	2218      	movs	r2, #24
 801a786:	189b      	adds	r3, r3, r2
 801a788:	19db      	adds	r3, r3, r7
 801a78a:	2202      	movs	r2, #2
 801a78c:	701a      	strb	r2, [r3, #0]
 801a78e:	e076      	b.n	801a87e <UART_SetConfig+0x22a>
 801a790:	231b      	movs	r3, #27
 801a792:	2218      	movs	r2, #24
 801a794:	189b      	adds	r3, r3, r2
 801a796:	19db      	adds	r3, r3, r7
 801a798:	2204      	movs	r2, #4
 801a79a:	701a      	strb	r2, [r3, #0]
 801a79c:	e06f      	b.n	801a87e <UART_SetConfig+0x22a>
 801a79e:	231b      	movs	r3, #27
 801a7a0:	2218      	movs	r2, #24
 801a7a2:	189b      	adds	r3, r3, r2
 801a7a4:	19db      	adds	r3, r3, r7
 801a7a6:	2208      	movs	r2, #8
 801a7a8:	701a      	strb	r2, [r3, #0]
 801a7aa:	e068      	b.n	801a87e <UART_SetConfig+0x22a>
 801a7ac:	231b      	movs	r3, #27
 801a7ae:	2218      	movs	r2, #24
 801a7b0:	189b      	adds	r3, r3, r2
 801a7b2:	19db      	adds	r3, r3, r7
 801a7b4:	2210      	movs	r2, #16
 801a7b6:	701a      	strb	r2, [r3, #0]
 801a7b8:	e061      	b.n	801a87e <UART_SetConfig+0x22a>
 801a7ba:	69fb      	ldr	r3, [r7, #28]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4a7c      	ldr	r2, [pc, #496]	@ (801a9b0 <UART_SetConfig+0x35c>)
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d106      	bne.n	801a7d2 <UART_SetConfig+0x17e>
 801a7c4:	231b      	movs	r3, #27
 801a7c6:	2218      	movs	r2, #24
 801a7c8:	189b      	adds	r3, r3, r2
 801a7ca:	19db      	adds	r3, r3, r7
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	701a      	strb	r2, [r3, #0]
 801a7d0:	e055      	b.n	801a87e <UART_SetConfig+0x22a>
 801a7d2:	69fb      	ldr	r3, [r7, #28]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	4a77      	ldr	r2, [pc, #476]	@ (801a9b4 <UART_SetConfig+0x360>)
 801a7d8:	4293      	cmp	r3, r2
 801a7da:	d106      	bne.n	801a7ea <UART_SetConfig+0x196>
 801a7dc:	231b      	movs	r3, #27
 801a7de:	2218      	movs	r2, #24
 801a7e0:	189b      	adds	r3, r3, r2
 801a7e2:	19db      	adds	r3, r3, r7
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	701a      	strb	r2, [r3, #0]
 801a7e8:	e049      	b.n	801a87e <UART_SetConfig+0x22a>
 801a7ea:	69fb      	ldr	r3, [r7, #28]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4a6b      	ldr	r2, [pc, #428]	@ (801a99c <UART_SetConfig+0x348>)
 801a7f0:	4293      	cmp	r3, r2
 801a7f2:	d13e      	bne.n	801a872 <UART_SetConfig+0x21e>
 801a7f4:	4b6c      	ldr	r3, [pc, #432]	@ (801a9a8 <UART_SetConfig+0x354>)
 801a7f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a7f8:	23c0      	movs	r3, #192	@ 0xc0
 801a7fa:	011b      	lsls	r3, r3, #4
 801a7fc:	4013      	ands	r3, r2
 801a7fe:	22c0      	movs	r2, #192	@ 0xc0
 801a800:	0112      	lsls	r2, r2, #4
 801a802:	4293      	cmp	r3, r2
 801a804:	d027      	beq.n	801a856 <UART_SetConfig+0x202>
 801a806:	22c0      	movs	r2, #192	@ 0xc0
 801a808:	0112      	lsls	r2, r2, #4
 801a80a:	4293      	cmp	r3, r2
 801a80c:	d82a      	bhi.n	801a864 <UART_SetConfig+0x210>
 801a80e:	2280      	movs	r2, #128	@ 0x80
 801a810:	0112      	lsls	r2, r2, #4
 801a812:	4293      	cmp	r3, r2
 801a814:	d011      	beq.n	801a83a <UART_SetConfig+0x1e6>
 801a816:	2280      	movs	r2, #128	@ 0x80
 801a818:	0112      	lsls	r2, r2, #4
 801a81a:	4293      	cmp	r3, r2
 801a81c:	d822      	bhi.n	801a864 <UART_SetConfig+0x210>
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d004      	beq.n	801a82c <UART_SetConfig+0x1d8>
 801a822:	2280      	movs	r2, #128	@ 0x80
 801a824:	00d2      	lsls	r2, r2, #3
 801a826:	4293      	cmp	r3, r2
 801a828:	d00e      	beq.n	801a848 <UART_SetConfig+0x1f4>
 801a82a:	e01b      	b.n	801a864 <UART_SetConfig+0x210>
 801a82c:	231b      	movs	r3, #27
 801a82e:	2218      	movs	r2, #24
 801a830:	189b      	adds	r3, r3, r2
 801a832:	19db      	adds	r3, r3, r7
 801a834:	2200      	movs	r2, #0
 801a836:	701a      	strb	r2, [r3, #0]
 801a838:	e021      	b.n	801a87e <UART_SetConfig+0x22a>
 801a83a:	231b      	movs	r3, #27
 801a83c:	2218      	movs	r2, #24
 801a83e:	189b      	adds	r3, r3, r2
 801a840:	19db      	adds	r3, r3, r7
 801a842:	2202      	movs	r2, #2
 801a844:	701a      	strb	r2, [r3, #0]
 801a846:	e01a      	b.n	801a87e <UART_SetConfig+0x22a>
 801a848:	231b      	movs	r3, #27
 801a84a:	2218      	movs	r2, #24
 801a84c:	189b      	adds	r3, r3, r2
 801a84e:	19db      	adds	r3, r3, r7
 801a850:	2204      	movs	r2, #4
 801a852:	701a      	strb	r2, [r3, #0]
 801a854:	e013      	b.n	801a87e <UART_SetConfig+0x22a>
 801a856:	231b      	movs	r3, #27
 801a858:	2218      	movs	r2, #24
 801a85a:	189b      	adds	r3, r3, r2
 801a85c:	19db      	adds	r3, r3, r7
 801a85e:	2208      	movs	r2, #8
 801a860:	701a      	strb	r2, [r3, #0]
 801a862:	e00c      	b.n	801a87e <UART_SetConfig+0x22a>
 801a864:	231b      	movs	r3, #27
 801a866:	2218      	movs	r2, #24
 801a868:	189b      	adds	r3, r3, r2
 801a86a:	19db      	adds	r3, r3, r7
 801a86c:	2210      	movs	r2, #16
 801a86e:	701a      	strb	r2, [r3, #0]
 801a870:	e005      	b.n	801a87e <UART_SetConfig+0x22a>
 801a872:	231b      	movs	r3, #27
 801a874:	2218      	movs	r2, #24
 801a876:	189b      	adds	r3, r3, r2
 801a878:	19db      	adds	r3, r3, r7
 801a87a:	2210      	movs	r2, #16
 801a87c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a87e:	69fb      	ldr	r3, [r7, #28]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4a46      	ldr	r2, [pc, #280]	@ (801a99c <UART_SetConfig+0x348>)
 801a884:	4293      	cmp	r3, r2
 801a886:	d000      	beq.n	801a88a <UART_SetConfig+0x236>
 801a888:	e09a      	b.n	801a9c0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a88a:	231b      	movs	r3, #27
 801a88c:	2218      	movs	r2, #24
 801a88e:	189b      	adds	r3, r3, r2
 801a890:	19db      	adds	r3, r3, r7
 801a892:	781b      	ldrb	r3, [r3, #0]
 801a894:	2b08      	cmp	r3, #8
 801a896:	d01d      	beq.n	801a8d4 <UART_SetConfig+0x280>
 801a898:	dc20      	bgt.n	801a8dc <UART_SetConfig+0x288>
 801a89a:	2b04      	cmp	r3, #4
 801a89c:	d015      	beq.n	801a8ca <UART_SetConfig+0x276>
 801a89e:	dc1d      	bgt.n	801a8dc <UART_SetConfig+0x288>
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d002      	beq.n	801a8aa <UART_SetConfig+0x256>
 801a8a4:	2b02      	cmp	r3, #2
 801a8a6:	d005      	beq.n	801a8b4 <UART_SetConfig+0x260>
 801a8a8:	e018      	b.n	801a8dc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a8aa:	f7fd fe4b 	bl	8018544 <HAL_RCC_GetPCLK1Freq>
 801a8ae:	0003      	movs	r3, r0
 801a8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8b2:	e01c      	b.n	801a8ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a8b4:	4b3c      	ldr	r3, [pc, #240]	@ (801a9a8 <UART_SetConfig+0x354>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	2210      	movs	r2, #16
 801a8ba:	4013      	ands	r3, r2
 801a8bc:	d002      	beq.n	801a8c4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801a8be:	4b3e      	ldr	r3, [pc, #248]	@ (801a9b8 <UART_SetConfig+0x364>)
 801a8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a8c2:	e014      	b.n	801a8ee <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801a8c4:	4b3d      	ldr	r3, [pc, #244]	@ (801a9bc <UART_SetConfig+0x368>)
 801a8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8c8:	e011      	b.n	801a8ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801a8ca:	f7fd fd8b 	bl	80183e4 <HAL_RCC_GetSysClockFreq>
 801a8ce:	0003      	movs	r3, r0
 801a8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8d2:	e00c      	b.n	801a8ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a8d4:	2380      	movs	r3, #128	@ 0x80
 801a8d6:	021b      	lsls	r3, r3, #8
 801a8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a8da:	e008      	b.n	801a8ee <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801a8dc:	2300      	movs	r3, #0
 801a8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801a8e0:	231a      	movs	r3, #26
 801a8e2:	2218      	movs	r2, #24
 801a8e4:	189b      	adds	r3, r3, r2
 801a8e6:	19db      	adds	r3, r3, r7
 801a8e8:	2201      	movs	r2, #1
 801a8ea:	701a      	strb	r2, [r3, #0]
        break;
 801a8ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d100      	bne.n	801a8f6 <UART_SetConfig+0x2a2>
 801a8f4:	e133      	b.n	801ab5e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	685a      	ldr	r2, [r3, #4]
 801a8fa:	0013      	movs	r3, r2
 801a8fc:	005b      	lsls	r3, r3, #1
 801a8fe:	189b      	adds	r3, r3, r2
 801a900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a902:	429a      	cmp	r2, r3
 801a904:	d305      	bcc.n	801a912 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801a906:	69fb      	ldr	r3, [r7, #28]
 801a908:	685b      	ldr	r3, [r3, #4]
 801a90a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801a90c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a90e:	429a      	cmp	r2, r3
 801a910:	d906      	bls.n	801a920 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801a912:	231a      	movs	r3, #26
 801a914:	2218      	movs	r2, #24
 801a916:	189b      	adds	r3, r3, r2
 801a918:	19db      	adds	r3, r3, r7
 801a91a:	2201      	movs	r2, #1
 801a91c:	701a      	strb	r2, [r3, #0]
 801a91e:	e11e      	b.n	801ab5e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801a920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a922:	613b      	str	r3, [r7, #16]
 801a924:	2300      	movs	r3, #0
 801a926:	617b      	str	r3, [r7, #20]
 801a928:	6939      	ldr	r1, [r7, #16]
 801a92a:	697a      	ldr	r2, [r7, #20]
 801a92c:	000b      	movs	r3, r1
 801a92e:	0e1b      	lsrs	r3, r3, #24
 801a930:	0010      	movs	r0, r2
 801a932:	0205      	lsls	r5, r0, #8
 801a934:	431d      	orrs	r5, r3
 801a936:	000b      	movs	r3, r1
 801a938:	021c      	lsls	r4, r3, #8
 801a93a:	69fb      	ldr	r3, [r7, #28]
 801a93c:	685b      	ldr	r3, [r3, #4]
 801a93e:	085b      	lsrs	r3, r3, #1
 801a940:	60bb      	str	r3, [r7, #8]
 801a942:	2300      	movs	r3, #0
 801a944:	60fb      	str	r3, [r7, #12]
 801a946:	68b8      	ldr	r0, [r7, #8]
 801a948:	68f9      	ldr	r1, [r7, #12]
 801a94a:	1900      	adds	r0, r0, r4
 801a94c:	4169      	adcs	r1, r5
 801a94e:	69fb      	ldr	r3, [r7, #28]
 801a950:	685b      	ldr	r3, [r3, #4]
 801a952:	603b      	str	r3, [r7, #0]
 801a954:	2300      	movs	r3, #0
 801a956:	607b      	str	r3, [r7, #4]
 801a958:	683a      	ldr	r2, [r7, #0]
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	f7e5 fe10 	bl	8000580 <__aeabi_uldivmod>
 801a960:	0002      	movs	r2, r0
 801a962:	000b      	movs	r3, r1
 801a964:	0013      	movs	r3, r2
 801a966:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a96a:	23c0      	movs	r3, #192	@ 0xc0
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	429a      	cmp	r2, r3
 801a970:	d309      	bcc.n	801a986 <UART_SetConfig+0x332>
 801a972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a974:	2380      	movs	r3, #128	@ 0x80
 801a976:	035b      	lsls	r3, r3, #13
 801a978:	429a      	cmp	r2, r3
 801a97a:	d204      	bcs.n	801a986 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801a97c:	69fb      	ldr	r3, [r7, #28]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a982:	60da      	str	r2, [r3, #12]
 801a984:	e0eb      	b.n	801ab5e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801a986:	231a      	movs	r3, #26
 801a988:	2218      	movs	r2, #24
 801a98a:	189b      	adds	r3, r3, r2
 801a98c:	19db      	adds	r3, r3, r7
 801a98e:	2201      	movs	r2, #1
 801a990:	701a      	strb	r2, [r3, #0]
 801a992:	e0e4      	b.n	801ab5e <UART_SetConfig+0x50a>
 801a994:	efff69f3 	.word	0xefff69f3
 801a998:	ffffcfff 	.word	0xffffcfff
 801a99c:	40004800 	.word	0x40004800
 801a9a0:	fffff4ff 	.word	0xfffff4ff
 801a9a4:	40013800 	.word	0x40013800
 801a9a8:	40021000 	.word	0x40021000
 801a9ac:	40004400 	.word	0x40004400
 801a9b0:	40004c00 	.word	0x40004c00
 801a9b4:	40005000 	.word	0x40005000
 801a9b8:	003d0900 	.word	0x003d0900
 801a9bc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a9c0:	69fb      	ldr	r3, [r7, #28]
 801a9c2:	69da      	ldr	r2, [r3, #28]
 801a9c4:	2380      	movs	r3, #128	@ 0x80
 801a9c6:	021b      	lsls	r3, r3, #8
 801a9c8:	429a      	cmp	r2, r3
 801a9ca:	d000      	beq.n	801a9ce <UART_SetConfig+0x37a>
 801a9cc:	e070      	b.n	801aab0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801a9ce:	231b      	movs	r3, #27
 801a9d0:	2218      	movs	r2, #24
 801a9d2:	189b      	adds	r3, r3, r2
 801a9d4:	19db      	adds	r3, r3, r7
 801a9d6:	781b      	ldrb	r3, [r3, #0]
 801a9d8:	2b08      	cmp	r3, #8
 801a9da:	d822      	bhi.n	801aa22 <UART_SetConfig+0x3ce>
 801a9dc:	009a      	lsls	r2, r3, #2
 801a9de:	4b67      	ldr	r3, [pc, #412]	@ (801ab7c <UART_SetConfig+0x528>)
 801a9e0:	18d3      	adds	r3, r2, r3
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a9e6:	f7fd fdad 	bl	8018544 <HAL_RCC_GetPCLK1Freq>
 801a9ea:	0003      	movs	r3, r0
 801a9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a9ee:	e021      	b.n	801aa34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a9f0:	f7fd fdbe 	bl	8018570 <HAL_RCC_GetPCLK2Freq>
 801a9f4:	0003      	movs	r3, r0
 801a9f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801a9f8:	e01c      	b.n	801aa34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a9fa:	4b61      	ldr	r3, [pc, #388]	@ (801ab80 <UART_SetConfig+0x52c>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	2210      	movs	r2, #16
 801aa00:	4013      	ands	r3, r2
 801aa02:	d002      	beq.n	801aa0a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801aa04:	4b5f      	ldr	r3, [pc, #380]	@ (801ab84 <UART_SetConfig+0x530>)
 801aa06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801aa08:	e014      	b.n	801aa34 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801aa0a:	4b5f      	ldr	r3, [pc, #380]	@ (801ab88 <UART_SetConfig+0x534>)
 801aa0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aa0e:	e011      	b.n	801aa34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801aa10:	f7fd fce8 	bl	80183e4 <HAL_RCC_GetSysClockFreq>
 801aa14:	0003      	movs	r3, r0
 801aa16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aa18:	e00c      	b.n	801aa34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801aa1a:	2380      	movs	r3, #128	@ 0x80
 801aa1c:	021b      	lsls	r3, r3, #8
 801aa1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aa20:	e008      	b.n	801aa34 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801aa22:	2300      	movs	r3, #0
 801aa24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801aa26:	231a      	movs	r3, #26
 801aa28:	2218      	movs	r2, #24
 801aa2a:	189b      	adds	r3, r3, r2
 801aa2c:	19db      	adds	r3, r3, r7
 801aa2e:	2201      	movs	r2, #1
 801aa30:	701a      	strb	r2, [r3, #0]
        break;
 801aa32:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801aa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d100      	bne.n	801aa3c <UART_SetConfig+0x3e8>
 801aa3a:	e090      	b.n	801ab5e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801aa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa3e:	005a      	lsls	r2, r3, #1
 801aa40:	69fb      	ldr	r3, [r7, #28]
 801aa42:	685b      	ldr	r3, [r3, #4]
 801aa44:	085b      	lsrs	r3, r3, #1
 801aa46:	18d2      	adds	r2, r2, r3
 801aa48:	69fb      	ldr	r3, [r7, #28]
 801aa4a:	685b      	ldr	r3, [r3, #4]
 801aa4c:	0019      	movs	r1, r3
 801aa4e:	0010      	movs	r0, r2
 801aa50:	f7e5 fba8 	bl	80001a4 <__udivsi3>
 801aa54:	0003      	movs	r3, r0
 801aa56:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa5a:	2b0f      	cmp	r3, #15
 801aa5c:	d921      	bls.n	801aaa2 <UART_SetConfig+0x44e>
 801aa5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aa60:	2380      	movs	r3, #128	@ 0x80
 801aa62:	025b      	lsls	r3, r3, #9
 801aa64:	429a      	cmp	r2, r3
 801aa66:	d21c      	bcs.n	801aaa2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801aa68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa6a:	b29a      	uxth	r2, r3
 801aa6c:	200e      	movs	r0, #14
 801aa6e:	2418      	movs	r4, #24
 801aa70:	1903      	adds	r3, r0, r4
 801aa72:	19db      	adds	r3, r3, r7
 801aa74:	210f      	movs	r1, #15
 801aa76:	438a      	bics	r2, r1
 801aa78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801aa7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa7c:	085b      	lsrs	r3, r3, #1
 801aa7e:	b29b      	uxth	r3, r3
 801aa80:	2207      	movs	r2, #7
 801aa82:	4013      	ands	r3, r2
 801aa84:	b299      	uxth	r1, r3
 801aa86:	1903      	adds	r3, r0, r4
 801aa88:	19db      	adds	r3, r3, r7
 801aa8a:	1902      	adds	r2, r0, r4
 801aa8c:	19d2      	adds	r2, r2, r7
 801aa8e:	8812      	ldrh	r2, [r2, #0]
 801aa90:	430a      	orrs	r2, r1
 801aa92:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801aa94:	69fb      	ldr	r3, [r7, #28]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	1902      	adds	r2, r0, r4
 801aa9a:	19d2      	adds	r2, r2, r7
 801aa9c:	8812      	ldrh	r2, [r2, #0]
 801aa9e:	60da      	str	r2, [r3, #12]
 801aaa0:	e05d      	b.n	801ab5e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801aaa2:	231a      	movs	r3, #26
 801aaa4:	2218      	movs	r2, #24
 801aaa6:	189b      	adds	r3, r3, r2
 801aaa8:	19db      	adds	r3, r3, r7
 801aaaa:	2201      	movs	r2, #1
 801aaac:	701a      	strb	r2, [r3, #0]
 801aaae:	e056      	b.n	801ab5e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801aab0:	231b      	movs	r3, #27
 801aab2:	2218      	movs	r2, #24
 801aab4:	189b      	adds	r3, r3, r2
 801aab6:	19db      	adds	r3, r3, r7
 801aab8:	781b      	ldrb	r3, [r3, #0]
 801aaba:	2b08      	cmp	r3, #8
 801aabc:	d822      	bhi.n	801ab04 <UART_SetConfig+0x4b0>
 801aabe:	009a      	lsls	r2, r3, #2
 801aac0:	4b32      	ldr	r3, [pc, #200]	@ (801ab8c <UART_SetConfig+0x538>)
 801aac2:	18d3      	adds	r3, r2, r3
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801aac8:	f7fd fd3c 	bl	8018544 <HAL_RCC_GetPCLK1Freq>
 801aacc:	0003      	movs	r3, r0
 801aace:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aad0:	e021      	b.n	801ab16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801aad2:	f7fd fd4d 	bl	8018570 <HAL_RCC_GetPCLK2Freq>
 801aad6:	0003      	movs	r3, r0
 801aad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aada:	e01c      	b.n	801ab16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801aadc:	4b28      	ldr	r3, [pc, #160]	@ (801ab80 <UART_SetConfig+0x52c>)
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2210      	movs	r2, #16
 801aae2:	4013      	ands	r3, r2
 801aae4:	d002      	beq.n	801aaec <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801aae6:	4b27      	ldr	r3, [pc, #156]	@ (801ab84 <UART_SetConfig+0x530>)
 801aae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801aaea:	e014      	b.n	801ab16 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801aaec:	4b26      	ldr	r3, [pc, #152]	@ (801ab88 <UART_SetConfig+0x534>)
 801aaee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aaf0:	e011      	b.n	801ab16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801aaf2:	f7fd fc77 	bl	80183e4 <HAL_RCC_GetSysClockFreq>
 801aaf6:	0003      	movs	r3, r0
 801aaf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801aafa:	e00c      	b.n	801ab16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801aafc:	2380      	movs	r3, #128	@ 0x80
 801aafe:	021b      	lsls	r3, r3, #8
 801ab00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801ab02:	e008      	b.n	801ab16 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801ab04:	2300      	movs	r3, #0
 801ab06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801ab08:	231a      	movs	r3, #26
 801ab0a:	2218      	movs	r2, #24
 801ab0c:	189b      	adds	r3, r3, r2
 801ab0e:	19db      	adds	r3, r3, r7
 801ab10:	2201      	movs	r2, #1
 801ab12:	701a      	strb	r2, [r3, #0]
        break;
 801ab14:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801ab16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d020      	beq.n	801ab5e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801ab1c:	69fb      	ldr	r3, [r7, #28]
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	085a      	lsrs	r2, r3, #1
 801ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab24:	18d2      	adds	r2, r2, r3
 801ab26:	69fb      	ldr	r3, [r7, #28]
 801ab28:	685b      	ldr	r3, [r3, #4]
 801ab2a:	0019      	movs	r1, r3
 801ab2c:	0010      	movs	r0, r2
 801ab2e:	f7e5 fb39 	bl	80001a4 <__udivsi3>
 801ab32:	0003      	movs	r3, r0
 801ab34:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ab36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab38:	2b0f      	cmp	r3, #15
 801ab3a:	d90a      	bls.n	801ab52 <UART_SetConfig+0x4fe>
 801ab3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ab3e:	2380      	movs	r3, #128	@ 0x80
 801ab40:	025b      	lsls	r3, r3, #9
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d205      	bcs.n	801ab52 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ab46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab48:	b29a      	uxth	r2, r3
 801ab4a:	69fb      	ldr	r3, [r7, #28]
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	60da      	str	r2, [r3, #12]
 801ab50:	e005      	b.n	801ab5e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801ab52:	231a      	movs	r3, #26
 801ab54:	2218      	movs	r2, #24
 801ab56:	189b      	adds	r3, r3, r2
 801ab58:	19db      	adds	r3, r3, r7
 801ab5a:	2201      	movs	r2, #1
 801ab5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ab5e:	69fb      	ldr	r3, [r7, #28]
 801ab60:	2200      	movs	r2, #0
 801ab62:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801ab64:	69fb      	ldr	r3, [r7, #28]
 801ab66:	2200      	movs	r2, #0
 801ab68:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801ab6a:	231a      	movs	r3, #26
 801ab6c:	2218      	movs	r2, #24
 801ab6e:	189b      	adds	r3, r3, r2
 801ab70:	19db      	adds	r3, r3, r7
 801ab72:	781b      	ldrb	r3, [r3, #0]
}
 801ab74:	0018      	movs	r0, r3
 801ab76:	46bd      	mov	sp, r7
 801ab78:	b00e      	add	sp, #56	@ 0x38
 801ab7a:	bdb0      	pop	{r4, r5, r7, pc}
 801ab7c:	080291b0 	.word	0x080291b0
 801ab80:	40021000 	.word	0x40021000
 801ab84:	003d0900 	.word	0x003d0900
 801ab88:	00f42400 	.word	0x00f42400
 801ab8c:	080291d4 	.word	0x080291d4

0801ab90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b082      	sub	sp, #8
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab9c:	2201      	movs	r2, #1
 801ab9e:	4013      	ands	r3, r2
 801aba0:	d00b      	beq.n	801abba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	685b      	ldr	r3, [r3, #4]
 801aba8:	4a4a      	ldr	r2, [pc, #296]	@ (801acd4 <UART_AdvFeatureConfig+0x144>)
 801abaa:	4013      	ands	r3, r2
 801abac:	0019      	movs	r1, r3
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	430a      	orrs	r2, r1
 801abb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abbe:	2202      	movs	r2, #2
 801abc0:	4013      	ands	r3, r2
 801abc2:	d00b      	beq.n	801abdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	685b      	ldr	r3, [r3, #4]
 801abca:	4a43      	ldr	r2, [pc, #268]	@ (801acd8 <UART_AdvFeatureConfig+0x148>)
 801abcc:	4013      	ands	r3, r2
 801abce:	0019      	movs	r1, r3
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	430a      	orrs	r2, r1
 801abda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abe0:	2204      	movs	r2, #4
 801abe2:	4013      	ands	r3, r2
 801abe4:	d00b      	beq.n	801abfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	685b      	ldr	r3, [r3, #4]
 801abec:	4a3b      	ldr	r2, [pc, #236]	@ (801acdc <UART_AdvFeatureConfig+0x14c>)
 801abee:	4013      	ands	r3, r2
 801abf0:	0019      	movs	r1, r3
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	430a      	orrs	r2, r1
 801abfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac02:	2208      	movs	r2, #8
 801ac04:	4013      	ands	r3, r2
 801ac06:	d00b      	beq.n	801ac20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	685b      	ldr	r3, [r3, #4]
 801ac0e:	4a34      	ldr	r2, [pc, #208]	@ (801ace0 <UART_AdvFeatureConfig+0x150>)
 801ac10:	4013      	ands	r3, r2
 801ac12:	0019      	movs	r1, r3
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	430a      	orrs	r2, r1
 801ac1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac24:	2210      	movs	r2, #16
 801ac26:	4013      	ands	r3, r2
 801ac28:	d00b      	beq.n	801ac42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	689b      	ldr	r3, [r3, #8]
 801ac30:	4a2c      	ldr	r2, [pc, #176]	@ (801ace4 <UART_AdvFeatureConfig+0x154>)
 801ac32:	4013      	ands	r3, r2
 801ac34:	0019      	movs	r1, r3
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	430a      	orrs	r2, r1
 801ac40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac46:	2220      	movs	r2, #32
 801ac48:	4013      	ands	r3, r2
 801ac4a:	d00b      	beq.n	801ac64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	689b      	ldr	r3, [r3, #8]
 801ac52:	4a25      	ldr	r2, [pc, #148]	@ (801ace8 <UART_AdvFeatureConfig+0x158>)
 801ac54:	4013      	ands	r3, r2
 801ac56:	0019      	movs	r1, r3
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	430a      	orrs	r2, r1
 801ac62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac68:	2240      	movs	r2, #64	@ 0x40
 801ac6a:	4013      	ands	r3, r2
 801ac6c:	d01d      	beq.n	801acaa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	681b      	ldr	r3, [r3, #0]
 801ac72:	685b      	ldr	r3, [r3, #4]
 801ac74:	4a1d      	ldr	r2, [pc, #116]	@ (801acec <UART_AdvFeatureConfig+0x15c>)
 801ac76:	4013      	ands	r3, r2
 801ac78:	0019      	movs	r1, r3
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	430a      	orrs	r2, r1
 801ac84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801ac8a:	2380      	movs	r3, #128	@ 0x80
 801ac8c:	035b      	lsls	r3, r3, #13
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d10b      	bne.n	801acaa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	685b      	ldr	r3, [r3, #4]
 801ac98:	4a15      	ldr	r2, [pc, #84]	@ (801acf0 <UART_AdvFeatureConfig+0x160>)
 801ac9a:	4013      	ands	r3, r2
 801ac9c:	0019      	movs	r1, r3
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	430a      	orrs	r2, r1
 801aca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801acae:	2280      	movs	r2, #128	@ 0x80
 801acb0:	4013      	ands	r3, r2
 801acb2:	d00b      	beq.n	801accc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	685b      	ldr	r3, [r3, #4]
 801acba:	4a0e      	ldr	r2, [pc, #56]	@ (801acf4 <UART_AdvFeatureConfig+0x164>)
 801acbc:	4013      	ands	r3, r2
 801acbe:	0019      	movs	r1, r3
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	430a      	orrs	r2, r1
 801acca:	605a      	str	r2, [r3, #4]
  }
}
 801accc:	46c0      	nop			@ (mov r8, r8)
 801acce:	46bd      	mov	sp, r7
 801acd0:	b002      	add	sp, #8
 801acd2:	bd80      	pop	{r7, pc}
 801acd4:	fffdffff 	.word	0xfffdffff
 801acd8:	fffeffff 	.word	0xfffeffff
 801acdc:	fffbffff 	.word	0xfffbffff
 801ace0:	ffff7fff 	.word	0xffff7fff
 801ace4:	ffffefff 	.word	0xffffefff
 801ace8:	ffffdfff 	.word	0xffffdfff
 801acec:	ffefffff 	.word	0xffefffff
 801acf0:	ff9fffff 	.word	0xff9fffff
 801acf4:	fff7ffff 	.word	0xfff7ffff

0801acf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801acf8:	b580      	push	{r7, lr}
 801acfa:	b092      	sub	sp, #72	@ 0x48
 801acfc:	af02      	add	r7, sp, #8
 801acfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2284      	movs	r2, #132	@ 0x84
 801ad04:	2100      	movs	r1, #0
 801ad06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801ad08:	f7f6 fa88 	bl	801121c <HAL_GetTick>
 801ad0c:	0003      	movs	r3, r0
 801ad0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	2208      	movs	r2, #8
 801ad18:	4013      	ands	r3, r2
 801ad1a:	2b08      	cmp	r3, #8
 801ad1c:	d12c      	bne.n	801ad78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ad1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad20:	2280      	movs	r2, #128	@ 0x80
 801ad22:	0391      	lsls	r1, r2, #14
 801ad24:	6878      	ldr	r0, [r7, #4]
 801ad26:	4a46      	ldr	r2, [pc, #280]	@ (801ae40 <UART_CheckIdleState+0x148>)
 801ad28:	9200      	str	r2, [sp, #0]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	f000 f88c 	bl	801ae48 <UART_WaitOnFlagUntilTimeout>
 801ad30:	1e03      	subs	r3, r0, #0
 801ad32:	d021      	beq.n	801ad78 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad34:	f3ef 8310 	mrs	r3, PRIMASK
 801ad38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ad3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801ad3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ad3e:	2301      	movs	r3, #1
 801ad40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad44:	f383 8810 	msr	PRIMASK, r3
}
 801ad48:	46c0      	nop			@ (mov r8, r8)
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	681a      	ldr	r2, [r3, #0]
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2180      	movs	r1, #128	@ 0x80
 801ad56:	438a      	bics	r2, r1
 801ad58:	601a      	str	r2, [r3, #0]
 801ad5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ad5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad60:	f383 8810 	msr	PRIMASK, r3
}
 801ad64:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	2220      	movs	r2, #32
 801ad6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	2278      	movs	r2, #120	@ 0x78
 801ad70:	2100      	movs	r1, #0
 801ad72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ad74:	2303      	movs	r3, #3
 801ad76:	e05f      	b.n	801ae38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	2204      	movs	r2, #4
 801ad80:	4013      	ands	r3, r2
 801ad82:	2b04      	cmp	r3, #4
 801ad84:	d146      	bne.n	801ae14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ad86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad88:	2280      	movs	r2, #128	@ 0x80
 801ad8a:	03d1      	lsls	r1, r2, #15
 801ad8c:	6878      	ldr	r0, [r7, #4]
 801ad8e:	4a2c      	ldr	r2, [pc, #176]	@ (801ae40 <UART_CheckIdleState+0x148>)
 801ad90:	9200      	str	r2, [sp, #0]
 801ad92:	2200      	movs	r2, #0
 801ad94:	f000 f858 	bl	801ae48 <UART_WaitOnFlagUntilTimeout>
 801ad98:	1e03      	subs	r3, r0, #0
 801ad9a:	d03b      	beq.n	801ae14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad9c:	f3ef 8310 	mrs	r3, PRIMASK
 801ada0:	60fb      	str	r3, [r7, #12]
  return(result);
 801ada2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ada4:	637b      	str	r3, [r7, #52]	@ 0x34
 801ada6:	2301      	movs	r3, #1
 801ada8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adaa:	693b      	ldr	r3, [r7, #16]
 801adac:	f383 8810 	msr	PRIMASK, r3
}
 801adb0:	46c0      	nop			@ (mov r8, r8)
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	681a      	ldr	r2, [r3, #0]
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	4921      	ldr	r1, [pc, #132]	@ (801ae44 <UART_CheckIdleState+0x14c>)
 801adbe:	400a      	ands	r2, r1
 801adc0:	601a      	str	r2, [r3, #0]
 801adc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adc6:	697b      	ldr	r3, [r7, #20]
 801adc8:	f383 8810 	msr	PRIMASK, r3
}
 801adcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adce:	f3ef 8310 	mrs	r3, PRIMASK
 801add2:	61bb      	str	r3, [r7, #24]
  return(result);
 801add4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801add6:	633b      	str	r3, [r7, #48]	@ 0x30
 801add8:	2301      	movs	r3, #1
 801adda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801addc:	69fb      	ldr	r3, [r7, #28]
 801adde:	f383 8810 	msr	PRIMASK, r3
}
 801ade2:	46c0      	nop			@ (mov r8, r8)
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	689a      	ldr	r2, [r3, #8]
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	2101      	movs	r1, #1
 801adf0:	438a      	bics	r2, r1
 801adf2:	609a      	str	r2, [r3, #8]
 801adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adf8:	6a3b      	ldr	r3, [r7, #32]
 801adfa:	f383 8810 	msr	PRIMASK, r3
}
 801adfe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	2280      	movs	r2, #128	@ 0x80
 801ae04:	2120      	movs	r1, #32
 801ae06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2278      	movs	r2, #120	@ 0x78
 801ae0c:	2100      	movs	r1, #0
 801ae0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ae10:	2303      	movs	r3, #3
 801ae12:	e011      	b.n	801ae38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	2220      	movs	r2, #32
 801ae18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	2280      	movs	r2, #128	@ 0x80
 801ae1e:	2120      	movs	r1, #32
 801ae20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	2200      	movs	r2, #0
 801ae26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	2200      	movs	r2, #0
 801ae2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	2278      	movs	r2, #120	@ 0x78
 801ae32:	2100      	movs	r1, #0
 801ae34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ae36:	2300      	movs	r3, #0
}
 801ae38:	0018      	movs	r0, r3
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	b010      	add	sp, #64	@ 0x40
 801ae3e:	bd80      	pop	{r7, pc}
 801ae40:	01ffffff 	.word	0x01ffffff
 801ae44:	fffffedf 	.word	0xfffffedf

0801ae48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	b084      	sub	sp, #16
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	60f8      	str	r0, [r7, #12]
 801ae50:	60b9      	str	r1, [r7, #8]
 801ae52:	603b      	str	r3, [r7, #0]
 801ae54:	1dfb      	adds	r3, r7, #7
 801ae56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ae58:	e04b      	b.n	801aef2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ae5a:	69bb      	ldr	r3, [r7, #24]
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	d048      	beq.n	801aef2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ae60:	f7f6 f9dc 	bl	801121c <HAL_GetTick>
 801ae64:	0002      	movs	r2, r0
 801ae66:	683b      	ldr	r3, [r7, #0]
 801ae68:	1ad3      	subs	r3, r2, r3
 801ae6a:	69ba      	ldr	r2, [r7, #24]
 801ae6c:	429a      	cmp	r2, r3
 801ae6e:	d302      	bcc.n	801ae76 <UART_WaitOnFlagUntilTimeout+0x2e>
 801ae70:	69bb      	ldr	r3, [r7, #24]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d101      	bne.n	801ae7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801ae76:	2303      	movs	r3, #3
 801ae78:	e04b      	b.n	801af12 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	2204      	movs	r2, #4
 801ae82:	4013      	ands	r3, r2
 801ae84:	d035      	beq.n	801aef2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	69db      	ldr	r3, [r3, #28]
 801ae8c:	2208      	movs	r2, #8
 801ae8e:	4013      	ands	r3, r2
 801ae90:	2b08      	cmp	r3, #8
 801ae92:	d111      	bne.n	801aeb8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ae94:	68fb      	ldr	r3, [r7, #12]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2208      	movs	r2, #8
 801ae9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	0018      	movs	r0, r3
 801aea0:	f000 f9ca 	bl	801b238 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	2284      	movs	r2, #132	@ 0x84
 801aea8:	2108      	movs	r1, #8
 801aeaa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	2278      	movs	r2, #120	@ 0x78
 801aeb0:	2100      	movs	r1, #0
 801aeb2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801aeb4:	2301      	movs	r3, #1
 801aeb6:	e02c      	b.n	801af12 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	69da      	ldr	r2, [r3, #28]
 801aebe:	2380      	movs	r3, #128	@ 0x80
 801aec0:	011b      	lsls	r3, r3, #4
 801aec2:	401a      	ands	r2, r3
 801aec4:	2380      	movs	r3, #128	@ 0x80
 801aec6:	011b      	lsls	r3, r3, #4
 801aec8:	429a      	cmp	r2, r3
 801aeca:	d112      	bne.n	801aef2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	2280      	movs	r2, #128	@ 0x80
 801aed2:	0112      	lsls	r2, r2, #4
 801aed4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	0018      	movs	r0, r3
 801aeda:	f000 f9ad 	bl	801b238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	2284      	movs	r2, #132	@ 0x84
 801aee2:	2120      	movs	r1, #32
 801aee4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	2278      	movs	r2, #120	@ 0x78
 801aeea:	2100      	movs	r1, #0
 801aeec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801aeee:	2303      	movs	r3, #3
 801aef0:	e00f      	b.n	801af12 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aef2:	68fb      	ldr	r3, [r7, #12]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	69db      	ldr	r3, [r3, #28]
 801aef8:	68ba      	ldr	r2, [r7, #8]
 801aefa:	4013      	ands	r3, r2
 801aefc:	68ba      	ldr	r2, [r7, #8]
 801aefe:	1ad3      	subs	r3, r2, r3
 801af00:	425a      	negs	r2, r3
 801af02:	4153      	adcs	r3, r2
 801af04:	b2db      	uxtb	r3, r3
 801af06:	001a      	movs	r2, r3
 801af08:	1dfb      	adds	r3, r7, #7
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	429a      	cmp	r2, r3
 801af0e:	d0a4      	beq.n	801ae5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801af10:	2300      	movs	r3, #0
}
 801af12:	0018      	movs	r0, r3
 801af14:	46bd      	mov	sp, r7
 801af16:	b004      	add	sp, #16
 801af18:	bd80      	pop	{r7, pc}
	...

0801af1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b090      	sub	sp, #64	@ 0x40
 801af20:	af00      	add	r7, sp, #0
 801af22:	60f8      	str	r0, [r7, #12]
 801af24:	60b9      	str	r1, [r7, #8]
 801af26:	1dbb      	adds	r3, r7, #6
 801af28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	68ba      	ldr	r2, [r7, #8]
 801af2e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801af30:	68fb      	ldr	r3, [r7, #12]
 801af32:	1dba      	adds	r2, r7, #6
 801af34:	2158      	movs	r1, #88	@ 0x58
 801af36:	8812      	ldrh	r2, [r2, #0]
 801af38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	1dba      	adds	r2, r7, #6
 801af3e:	215a      	movs	r1, #90	@ 0x5a
 801af40:	8812      	ldrh	r2, [r2, #0]
 801af42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	2200      	movs	r2, #0
 801af48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	689a      	ldr	r2, [r3, #8]
 801af4e:	2380      	movs	r3, #128	@ 0x80
 801af50:	015b      	lsls	r3, r3, #5
 801af52:	429a      	cmp	r2, r3
 801af54:	d10d      	bne.n	801af72 <UART_Start_Receive_IT+0x56>
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	691b      	ldr	r3, [r3, #16]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d104      	bne.n	801af68 <UART_Start_Receive_IT+0x4c>
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	225c      	movs	r2, #92	@ 0x5c
 801af62:	4950      	ldr	r1, [pc, #320]	@ (801b0a4 <UART_Start_Receive_IT+0x188>)
 801af64:	5299      	strh	r1, [r3, r2]
 801af66:	e02e      	b.n	801afc6 <UART_Start_Receive_IT+0xaa>
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	225c      	movs	r2, #92	@ 0x5c
 801af6c:	21ff      	movs	r1, #255	@ 0xff
 801af6e:	5299      	strh	r1, [r3, r2]
 801af70:	e029      	b.n	801afc6 <UART_Start_Receive_IT+0xaa>
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	689b      	ldr	r3, [r3, #8]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d10d      	bne.n	801af96 <UART_Start_Receive_IT+0x7a>
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	691b      	ldr	r3, [r3, #16]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d104      	bne.n	801af8c <UART_Start_Receive_IT+0x70>
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	225c      	movs	r2, #92	@ 0x5c
 801af86:	21ff      	movs	r1, #255	@ 0xff
 801af88:	5299      	strh	r1, [r3, r2]
 801af8a:	e01c      	b.n	801afc6 <UART_Start_Receive_IT+0xaa>
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	225c      	movs	r2, #92	@ 0x5c
 801af90:	217f      	movs	r1, #127	@ 0x7f
 801af92:	5299      	strh	r1, [r3, r2]
 801af94:	e017      	b.n	801afc6 <UART_Start_Receive_IT+0xaa>
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	689a      	ldr	r2, [r3, #8]
 801af9a:	2380      	movs	r3, #128	@ 0x80
 801af9c:	055b      	lsls	r3, r3, #21
 801af9e:	429a      	cmp	r2, r3
 801afa0:	d10d      	bne.n	801afbe <UART_Start_Receive_IT+0xa2>
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	691b      	ldr	r3, [r3, #16]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d104      	bne.n	801afb4 <UART_Start_Receive_IT+0x98>
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	225c      	movs	r2, #92	@ 0x5c
 801afae:	217f      	movs	r1, #127	@ 0x7f
 801afb0:	5299      	strh	r1, [r3, r2]
 801afb2:	e008      	b.n	801afc6 <UART_Start_Receive_IT+0xaa>
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	225c      	movs	r2, #92	@ 0x5c
 801afb8:	213f      	movs	r1, #63	@ 0x3f
 801afba:	5299      	strh	r1, [r3, r2]
 801afbc:	e003      	b.n	801afc6 <UART_Start_Receive_IT+0xaa>
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	225c      	movs	r2, #92	@ 0x5c
 801afc2:	2100      	movs	r1, #0
 801afc4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	2284      	movs	r2, #132	@ 0x84
 801afca:	2100      	movs	r1, #0
 801afcc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	2280      	movs	r2, #128	@ 0x80
 801afd2:	2122      	movs	r1, #34	@ 0x22
 801afd4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801afd6:	f3ef 8310 	mrs	r3, PRIMASK
 801afda:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801afde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801afe0:	2301      	movs	r3, #1
 801afe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afe6:	f383 8810 	msr	PRIMASK, r3
}
 801afea:	46c0      	nop			@ (mov r8, r8)
 801afec:	68fb      	ldr	r3, [r7, #12]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	689a      	ldr	r2, [r3, #8]
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	2101      	movs	r1, #1
 801aff8:	430a      	orrs	r2, r1
 801affa:	609a      	str	r2, [r3, #8]
 801affc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801affe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b002:	f383 8810 	msr	PRIMASK, r3
}
 801b006:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b008:	68fb      	ldr	r3, [r7, #12]
 801b00a:	689a      	ldr	r2, [r3, #8]
 801b00c:	2380      	movs	r3, #128	@ 0x80
 801b00e:	015b      	lsls	r3, r3, #5
 801b010:	429a      	cmp	r2, r3
 801b012:	d107      	bne.n	801b024 <UART_Start_Receive_IT+0x108>
 801b014:	68fb      	ldr	r3, [r7, #12]
 801b016:	691b      	ldr	r3, [r3, #16]
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d103      	bne.n	801b024 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	4a22      	ldr	r2, [pc, #136]	@ (801b0a8 <UART_Start_Receive_IT+0x18c>)
 801b020:	669a      	str	r2, [r3, #104]	@ 0x68
 801b022:	e002      	b.n	801b02a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	4a21      	ldr	r2, [pc, #132]	@ (801b0ac <UART_Start_Receive_IT+0x190>)
 801b028:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	691b      	ldr	r3, [r3, #16]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d019      	beq.n	801b066 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b032:	f3ef 8310 	mrs	r3, PRIMASK
 801b036:	61fb      	str	r3, [r7, #28]
  return(result);
 801b038:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801b03a:	637b      	str	r3, [r7, #52]	@ 0x34
 801b03c:	2301      	movs	r3, #1
 801b03e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b040:	6a3b      	ldr	r3, [r7, #32]
 801b042:	f383 8810 	msr	PRIMASK, r3
}
 801b046:	46c0      	nop			@ (mov r8, r8)
 801b048:	68fb      	ldr	r3, [r7, #12]
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	681a      	ldr	r2, [r3, #0]
 801b04e:	68fb      	ldr	r3, [r7, #12]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	2190      	movs	r1, #144	@ 0x90
 801b054:	0049      	lsls	r1, r1, #1
 801b056:	430a      	orrs	r2, r1
 801b058:	601a      	str	r2, [r3, #0]
 801b05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b05c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b060:	f383 8810 	msr	PRIMASK, r3
}
 801b064:	e018      	b.n	801b098 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b066:	f3ef 8310 	mrs	r3, PRIMASK
 801b06a:	613b      	str	r3, [r7, #16]
  return(result);
 801b06c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801b06e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b070:	2301      	movs	r3, #1
 801b072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	f383 8810 	msr	PRIMASK, r3
}
 801b07a:	46c0      	nop			@ (mov r8, r8)
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	681a      	ldr	r2, [r3, #0]
 801b082:	68fb      	ldr	r3, [r7, #12]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	2120      	movs	r1, #32
 801b088:	430a      	orrs	r2, r1
 801b08a:	601a      	str	r2, [r3, #0]
 801b08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b08e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b090:	69bb      	ldr	r3, [r7, #24]
 801b092:	f383 8810 	msr	PRIMASK, r3
}
 801b096:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801b098:	2300      	movs	r3, #0
}
 801b09a:	0018      	movs	r0, r3
 801b09c:	46bd      	mov	sp, r7
 801b09e:	b010      	add	sp, #64	@ 0x40
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	46c0      	nop			@ (mov r8, r8)
 801b0a4:	000001ff 	.word	0x000001ff
 801b0a8:	0801b81d 	.word	0x0801b81d
 801b0ac:	0801b651 	.word	0x0801b651

0801b0b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b090      	sub	sp, #64	@ 0x40
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	60f8      	str	r0, [r7, #12]
 801b0b8:	60b9      	str	r1, [r7, #8]
 801b0ba:	1dbb      	adds	r3, r7, #6
 801b0bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	68ba      	ldr	r2, [r7, #8]
 801b0c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	1dba      	adds	r2, r7, #6
 801b0c8:	2158      	movs	r1, #88	@ 0x58
 801b0ca:	8812      	ldrh	r2, [r2, #0]
 801b0cc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	2284      	movs	r2, #132	@ 0x84
 801b0d2:	2100      	movs	r1, #0
 801b0d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	2280      	movs	r2, #128	@ 0x80
 801b0da:	2122      	movs	r1, #34	@ 0x22
 801b0dc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801b0de:	68fb      	ldr	r3, [r7, #12]
 801b0e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d028      	beq.n	801b138 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0ea:	4a3e      	ldr	r2, [pc, #248]	@ (801b1e4 <UART_Start_Receive_DMA+0x134>)
 801b0ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0f2:	4a3d      	ldr	r2, [pc, #244]	@ (801b1e8 <UART_Start_Receive_DMA+0x138>)
 801b0f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0fa:	4a3c      	ldr	r2, [pc, #240]	@ (801b1ec <UART_Start_Receive_DMA+0x13c>)
 801b0fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b102:	2200      	movs	r2, #0
 801b104:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	3324      	adds	r3, #36	@ 0x24
 801b110:	0019      	movs	r1, r3
 801b112:	68fb      	ldr	r3, [r7, #12]
 801b114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b116:	001a      	movs	r2, r3
 801b118:	1dbb      	adds	r3, r7, #6
 801b11a:	881b      	ldrh	r3, [r3, #0]
 801b11c:	f7f6 fdd0 	bl	8011cc0 <HAL_DMA_Start_IT>
 801b120:	1e03      	subs	r3, r0, #0
 801b122:	d009      	beq.n	801b138 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	2284      	movs	r2, #132	@ 0x84
 801b128:	2110      	movs	r1, #16
 801b12a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	2280      	movs	r2, #128	@ 0x80
 801b130:	2120      	movs	r1, #32
 801b132:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801b134:	2301      	movs	r3, #1
 801b136:	e050      	b.n	801b1da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	691b      	ldr	r3, [r3, #16]
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d019      	beq.n	801b174 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b140:	f3ef 8310 	mrs	r3, PRIMASK
 801b144:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801b146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b14a:	2301      	movs	r3, #1
 801b14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b150:	f383 8810 	msr	PRIMASK, r3
}
 801b154:	46c0      	nop			@ (mov r8, r8)
 801b156:	68fb      	ldr	r3, [r7, #12]
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	681a      	ldr	r2, [r3, #0]
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	2180      	movs	r1, #128	@ 0x80
 801b162:	0049      	lsls	r1, r1, #1
 801b164:	430a      	orrs	r2, r1
 801b166:	601a      	str	r2, [r3, #0]
 801b168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b16a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b16e:	f383 8810 	msr	PRIMASK, r3
}
 801b172:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b174:	f3ef 8310 	mrs	r3, PRIMASK
 801b178:	613b      	str	r3, [r7, #16]
  return(result);
 801b17a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b17c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b17e:	2301      	movs	r3, #1
 801b180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b182:	697b      	ldr	r3, [r7, #20]
 801b184:	f383 8810 	msr	PRIMASK, r3
}
 801b188:	46c0      	nop			@ (mov r8, r8)
 801b18a:	68fb      	ldr	r3, [r7, #12]
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	689a      	ldr	r2, [r3, #8]
 801b190:	68fb      	ldr	r3, [r7, #12]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	2101      	movs	r1, #1
 801b196:	430a      	orrs	r2, r1
 801b198:	609a      	str	r2, [r3, #8]
 801b19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b19c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b19e:	69bb      	ldr	r3, [r7, #24]
 801b1a0:	f383 8810 	msr	PRIMASK, r3
}
 801b1a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1a6:	f3ef 8310 	mrs	r3, PRIMASK
 801b1aa:	61fb      	str	r3, [r7, #28]
  return(result);
 801b1ac:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b1ae:	637b      	str	r3, [r7, #52]	@ 0x34
 801b1b0:	2301      	movs	r3, #1
 801b1b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1b4:	6a3b      	ldr	r3, [r7, #32]
 801b1b6:	f383 8810 	msr	PRIMASK, r3
}
 801b1ba:	46c0      	nop			@ (mov r8, r8)
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	689a      	ldr	r2, [r3, #8]
 801b1c2:	68fb      	ldr	r3, [r7, #12]
 801b1c4:	681b      	ldr	r3, [r3, #0]
 801b1c6:	2140      	movs	r1, #64	@ 0x40
 801b1c8:	430a      	orrs	r2, r1
 801b1ca:	609a      	str	r2, [r3, #8]
 801b1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b1d2:	f383 8810 	msr	PRIMASK, r3
}
 801b1d6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801b1d8:	2300      	movs	r3, #0
}
 801b1da:	0018      	movs	r0, r3
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	b010      	add	sp, #64	@ 0x40
 801b1e0:	bd80      	pop	{r7, pc}
 801b1e2:	46c0      	nop			@ (mov r8, r8)
 801b1e4:	0801b3c1 	.word	0x0801b3c1
 801b1e8:	0801b4f5 	.word	0x0801b4f5
 801b1ec:	0801b53d 	.word	0x0801b53d

0801b1f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b086      	sub	sp, #24
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1f8:	f3ef 8310 	mrs	r3, PRIMASK
 801b1fc:	60bb      	str	r3, [r7, #8]
  return(result);
 801b1fe:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801b200:	617b      	str	r3, [r7, #20]
 801b202:	2301      	movs	r3, #1
 801b204:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b206:	68fb      	ldr	r3, [r7, #12]
 801b208:	f383 8810 	msr	PRIMASK, r3
}
 801b20c:	46c0      	nop			@ (mov r8, r8)
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	681a      	ldr	r2, [r3, #0]
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	21c0      	movs	r1, #192	@ 0xc0
 801b21a:	438a      	bics	r2, r1
 801b21c:	601a      	str	r2, [r3, #0]
 801b21e:	697b      	ldr	r3, [r7, #20]
 801b220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b222:	693b      	ldr	r3, [r7, #16]
 801b224:	f383 8810 	msr	PRIMASK, r3
}
 801b228:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2220      	movs	r2, #32
 801b22e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801b230:	46c0      	nop			@ (mov r8, r8)
 801b232:	46bd      	mov	sp, r7
 801b234:	b006      	add	sp, #24
 801b236:	bd80      	pop	{r7, pc}

0801b238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b08e      	sub	sp, #56	@ 0x38
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b240:	f3ef 8310 	mrs	r3, PRIMASK
 801b244:	617b      	str	r3, [r7, #20]
  return(result);
 801b246:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b248:	637b      	str	r3, [r7, #52]	@ 0x34
 801b24a:	2301      	movs	r3, #1
 801b24c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b24e:	69bb      	ldr	r3, [r7, #24]
 801b250:	f383 8810 	msr	PRIMASK, r3
}
 801b254:	46c0      	nop			@ (mov r8, r8)
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	681a      	ldr	r2, [r3, #0]
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	4926      	ldr	r1, [pc, #152]	@ (801b2fc <UART_EndRxTransfer+0xc4>)
 801b262:	400a      	ands	r2, r1
 801b264:	601a      	str	r2, [r3, #0]
 801b266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b26a:	69fb      	ldr	r3, [r7, #28]
 801b26c:	f383 8810 	msr	PRIMASK, r3
}
 801b270:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b272:	f3ef 8310 	mrs	r3, PRIMASK
 801b276:	623b      	str	r3, [r7, #32]
  return(result);
 801b278:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b27a:	633b      	str	r3, [r7, #48]	@ 0x30
 801b27c:	2301      	movs	r3, #1
 801b27e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b282:	f383 8810 	msr	PRIMASK, r3
}
 801b286:	46c0      	nop			@ (mov r8, r8)
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	689a      	ldr	r2, [r3, #8]
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	2101      	movs	r1, #1
 801b294:	438a      	bics	r2, r1
 801b296:	609a      	str	r2, [r3, #8]
 801b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b29a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b29e:	f383 8810 	msr	PRIMASK, r3
}
 801b2a2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b2a8:	2b01      	cmp	r3, #1
 801b2aa:	d118      	bne.n	801b2de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2ac:	f3ef 8310 	mrs	r3, PRIMASK
 801b2b0:	60bb      	str	r3, [r7, #8]
  return(result);
 801b2b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	f383 8810 	msr	PRIMASK, r3
}
 801b2c0:	46c0      	nop			@ (mov r8, r8)
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	681a      	ldr	r2, [r3, #0]
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	2110      	movs	r1, #16
 801b2ce:	438a      	bics	r2, r1
 801b2d0:	601a      	str	r2, [r3, #0]
 801b2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b2d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2d6:	693b      	ldr	r3, [r7, #16]
 801b2d8:	f383 8810 	msr	PRIMASK, r3
}
 801b2dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	2280      	movs	r2, #128	@ 0x80
 801b2e2:	2120      	movs	r1, #32
 801b2e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	2200      	movs	r2, #0
 801b2ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	2200      	movs	r2, #0
 801b2f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b2f2:	46c0      	nop			@ (mov r8, r8)
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	b00e      	add	sp, #56	@ 0x38
 801b2f8:	bd80      	pop	{r7, pc}
 801b2fa:	46c0      	nop			@ (mov r8, r8)
 801b2fc:	fffffedf 	.word	0xfffffedf

0801b300 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b08c      	sub	sp, #48	@ 0x30
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b30c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	2220      	movs	r2, #32
 801b316:	4013      	ands	r3, r2
 801b318:	d135      	bne.n	801b386 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b31c:	2252      	movs	r2, #82	@ 0x52
 801b31e:	2100      	movs	r1, #0
 801b320:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b322:	f3ef 8310 	mrs	r3, PRIMASK
 801b326:	60fb      	str	r3, [r7, #12]
  return(result);
 801b328:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801b32a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b32c:	2301      	movs	r3, #1
 801b32e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b330:	693b      	ldr	r3, [r7, #16]
 801b332:	f383 8810 	msr	PRIMASK, r3
}
 801b336:	46c0      	nop			@ (mov r8, r8)
 801b338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	689a      	ldr	r2, [r3, #8]
 801b33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	2180      	movs	r1, #128	@ 0x80
 801b344:	438a      	bics	r2, r1
 801b346:	609a      	str	r2, [r3, #8]
 801b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b34a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b34c:	697b      	ldr	r3, [r7, #20]
 801b34e:	f383 8810 	msr	PRIMASK, r3
}
 801b352:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b354:	f3ef 8310 	mrs	r3, PRIMASK
 801b358:	61bb      	str	r3, [r7, #24]
  return(result);
 801b35a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b35c:	627b      	str	r3, [r7, #36]	@ 0x24
 801b35e:	2301      	movs	r3, #1
 801b360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b362:	69fb      	ldr	r3, [r7, #28]
 801b364:	f383 8810 	msr	PRIMASK, r3
}
 801b368:	46c0      	nop			@ (mov r8, r8)
 801b36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	681a      	ldr	r2, [r3, #0]
 801b370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	2140      	movs	r1, #64	@ 0x40
 801b376:	430a      	orrs	r2, r1
 801b378:	601a      	str	r2, [r3, #0]
 801b37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b37c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b37e:	6a3b      	ldr	r3, [r7, #32]
 801b380:	f383 8810 	msr	PRIMASK, r3
}
 801b384:	e006      	b.n	801b394 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801b386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b388:	228c      	movs	r2, #140	@ 0x8c
 801b38a:	589b      	ldr	r3, [r3, r2]
 801b38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b38e:	0010      	movs	r0, r2
 801b390:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b392:	46c0      	nop			@ (mov r8, r8)
 801b394:	46c0      	nop			@ (mov r8, r8)
 801b396:	46bd      	mov	sp, r7
 801b398:	b00c      	add	sp, #48	@ 0x30
 801b39a:	bd80      	pop	{r7, pc}

0801b39c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b084      	sub	sp, #16
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	2288      	movs	r2, #136	@ 0x88
 801b3ae:	589b      	ldr	r3, [r3, r2]
 801b3b0:	68fa      	ldr	r2, [r7, #12]
 801b3b2:	0010      	movs	r0, r2
 801b3b4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b3b6:	46c0      	nop			@ (mov r8, r8)
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	b004      	add	sp, #16
 801b3bc:	bd80      	pop	{r7, pc}
	...

0801b3c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b094      	sub	sp, #80	@ 0x50
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	2220      	movs	r2, #32
 801b3d6:	4013      	ands	r3, r2
 801b3d8:	d16f      	bne.n	801b4ba <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801b3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3dc:	225a      	movs	r2, #90	@ 0x5a
 801b3de:	2100      	movs	r1, #0
 801b3e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3e2:	f3ef 8310 	mrs	r3, PRIMASK
 801b3e6:	61bb      	str	r3, [r7, #24]
  return(result);
 801b3e8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b3ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b3f0:	69fb      	ldr	r3, [r7, #28]
 801b3f2:	f383 8810 	msr	PRIMASK, r3
}
 801b3f6:	46c0      	nop			@ (mov r8, r8)
 801b3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	681a      	ldr	r2, [r3, #0]
 801b3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	493b      	ldr	r1, [pc, #236]	@ (801b4f0 <UART_DMAReceiveCplt+0x130>)
 801b404:	400a      	ands	r2, r1
 801b406:	601a      	str	r2, [r3, #0]
 801b408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b40a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b40c:	6a3b      	ldr	r3, [r7, #32]
 801b40e:	f383 8810 	msr	PRIMASK, r3
}
 801b412:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b414:	f3ef 8310 	mrs	r3, PRIMASK
 801b418:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b41c:	647b      	str	r3, [r7, #68]	@ 0x44
 801b41e:	2301      	movs	r3, #1
 801b420:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b424:	f383 8810 	msr	PRIMASK, r3
}
 801b428:	46c0      	nop			@ (mov r8, r8)
 801b42a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	689a      	ldr	r2, [r3, #8]
 801b430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	2101      	movs	r1, #1
 801b436:	438a      	bics	r2, r1
 801b438:	609a      	str	r2, [r3, #8]
 801b43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b43c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b440:	f383 8810 	msr	PRIMASK, r3
}
 801b444:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b446:	f3ef 8310 	mrs	r3, PRIMASK
 801b44a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b44e:	643b      	str	r3, [r7, #64]	@ 0x40
 801b450:	2301      	movs	r3, #1
 801b452:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b456:	f383 8810 	msr	PRIMASK, r3
}
 801b45a:	46c0      	nop			@ (mov r8, r8)
 801b45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	689a      	ldr	r2, [r3, #8]
 801b462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	2140      	movs	r1, #64	@ 0x40
 801b468:	438a      	bics	r2, r1
 801b46a:	609a      	str	r2, [r3, #8]
 801b46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b46e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b472:	f383 8810 	msr	PRIMASK, r3
}
 801b476:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801b478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b47a:	2280      	movs	r2, #128	@ 0x80
 801b47c:	2120      	movs	r1, #32
 801b47e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b484:	2b01      	cmp	r3, #1
 801b486:	d118      	bne.n	801b4ba <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b488:	f3ef 8310 	mrs	r3, PRIMASK
 801b48c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b48e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b492:	2301      	movs	r3, #1
 801b494:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b496:	693b      	ldr	r3, [r7, #16]
 801b498:	f383 8810 	msr	PRIMASK, r3
}
 801b49c:	46c0      	nop			@ (mov r8, r8)
 801b49e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	681a      	ldr	r2, [r3, #0]
 801b4a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	2110      	movs	r1, #16
 801b4aa:	438a      	bics	r2, r1
 801b4ac:	601a      	str	r2, [r3, #0]
 801b4ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b4b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4b2:	697b      	ldr	r3, [r7, #20]
 801b4b4:	f383 8810 	msr	PRIMASK, r3
}
 801b4b8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b4ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b4bc:	2200      	movs	r2, #0
 801b4be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b4c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b4c4:	2b01      	cmp	r3, #1
 801b4c6:	d109      	bne.n	801b4dc <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801b4c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b4ca:	22ac      	movs	r2, #172	@ 0xac
 801b4cc:	589b      	ldr	r3, [r3, r2]
 801b4ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b4d0:	2158      	movs	r1, #88	@ 0x58
 801b4d2:	5a51      	ldrh	r1, [r2, r1]
 801b4d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b4d6:	0010      	movs	r0, r2
 801b4d8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b4da:	e005      	b.n	801b4e8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801b4dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b4de:	2294      	movs	r2, #148	@ 0x94
 801b4e0:	589b      	ldr	r3, [r3, r2]
 801b4e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b4e4:	0010      	movs	r0, r2
 801b4e6:	4798      	blx	r3
}
 801b4e8:	46c0      	nop			@ (mov r8, r8)
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	b014      	add	sp, #80	@ 0x50
 801b4ee:	bd80      	pop	{r7, pc}
 801b4f0:	fffffeff 	.word	0xfffffeff

0801b4f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b084      	sub	sp, #16
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b500:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	2201      	movs	r2, #1
 801b506:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b50c:	2b01      	cmp	r3, #1
 801b50e:	d10b      	bne.n	801b528 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	22ac      	movs	r2, #172	@ 0xac
 801b514:	589b      	ldr	r3, [r3, r2]
 801b516:	68fa      	ldr	r2, [r7, #12]
 801b518:	2158      	movs	r1, #88	@ 0x58
 801b51a:	5a52      	ldrh	r2, [r2, r1]
 801b51c:	0852      	lsrs	r2, r2, #1
 801b51e:	b291      	uxth	r1, r2
 801b520:	68fa      	ldr	r2, [r7, #12]
 801b522:	0010      	movs	r0, r2
 801b524:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801b526:	e005      	b.n	801b534 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	2290      	movs	r2, #144	@ 0x90
 801b52c:	589b      	ldr	r3, [r3, r2]
 801b52e:	68fa      	ldr	r2, [r7, #12]
 801b530:	0010      	movs	r0, r2
 801b532:	4798      	blx	r3
}
 801b534:	46c0      	nop			@ (mov r8, r8)
 801b536:	46bd      	mov	sp, r7
 801b538:	b004      	add	sp, #16
 801b53a:	bd80      	pop	{r7, pc}

0801b53c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801b53c:	b580      	push	{r7, lr}
 801b53e:	b086      	sub	sp, #24
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b548:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801b54a:	697b      	ldr	r3, [r7, #20]
 801b54c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801b54e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801b550:	697b      	ldr	r3, [r7, #20]
 801b552:	2280      	movs	r2, #128	@ 0x80
 801b554:	589b      	ldr	r3, [r3, r2]
 801b556:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801b558:	697b      	ldr	r3, [r7, #20]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	689b      	ldr	r3, [r3, #8]
 801b55e:	2280      	movs	r2, #128	@ 0x80
 801b560:	4013      	ands	r3, r2
 801b562:	2b80      	cmp	r3, #128	@ 0x80
 801b564:	d10a      	bne.n	801b57c <UART_DMAError+0x40>
 801b566:	693b      	ldr	r3, [r7, #16]
 801b568:	2b21      	cmp	r3, #33	@ 0x21
 801b56a:	d107      	bne.n	801b57c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801b56c:	697b      	ldr	r3, [r7, #20]
 801b56e:	2252      	movs	r2, #82	@ 0x52
 801b570:	2100      	movs	r1, #0
 801b572:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	0018      	movs	r0, r3
 801b578:	f7ff fe3a 	bl	801b1f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	689b      	ldr	r3, [r3, #8]
 801b582:	2240      	movs	r2, #64	@ 0x40
 801b584:	4013      	ands	r3, r2
 801b586:	2b40      	cmp	r3, #64	@ 0x40
 801b588:	d10a      	bne.n	801b5a0 <UART_DMAError+0x64>
 801b58a:	68fb      	ldr	r3, [r7, #12]
 801b58c:	2b22      	cmp	r3, #34	@ 0x22
 801b58e:	d107      	bne.n	801b5a0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	225a      	movs	r2, #90	@ 0x5a
 801b594:	2100      	movs	r1, #0
 801b596:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801b598:	697b      	ldr	r3, [r7, #20]
 801b59a:	0018      	movs	r0, r3
 801b59c:	f7ff fe4c 	bl	801b238 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801b5a0:	697b      	ldr	r3, [r7, #20]
 801b5a2:	2284      	movs	r2, #132	@ 0x84
 801b5a4:	589b      	ldr	r3, [r3, r2]
 801b5a6:	2210      	movs	r2, #16
 801b5a8:	431a      	orrs	r2, r3
 801b5aa:	697b      	ldr	r3, [r7, #20]
 801b5ac:	2184      	movs	r1, #132	@ 0x84
 801b5ae:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b5b0:	697b      	ldr	r3, [r7, #20]
 801b5b2:	2298      	movs	r2, #152	@ 0x98
 801b5b4:	589b      	ldr	r3, [r3, r2]
 801b5b6:	697a      	ldr	r2, [r7, #20]
 801b5b8:	0010      	movs	r0, r2
 801b5ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b5bc:	46c0      	nop			@ (mov r8, r8)
 801b5be:	46bd      	mov	sp, r7
 801b5c0:	b006      	add	sp, #24
 801b5c2:	bd80      	pop	{r7, pc}

0801b5c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	b084      	sub	sp, #16
 801b5c8:	af00      	add	r7, sp, #0
 801b5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b5d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	225a      	movs	r2, #90	@ 0x5a
 801b5d6:	2100      	movs	r1, #0
 801b5d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	2252      	movs	r2, #82	@ 0x52
 801b5de:	2100      	movs	r1, #0
 801b5e0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801b5e2:	68fb      	ldr	r3, [r7, #12]
 801b5e4:	2298      	movs	r2, #152	@ 0x98
 801b5e6:	589b      	ldr	r3, [r3, r2]
 801b5e8:	68fa      	ldr	r2, [r7, #12]
 801b5ea:	0010      	movs	r0, r2
 801b5ec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b5ee:	46c0      	nop			@ (mov r8, r8)
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	b004      	add	sp, #16
 801b5f4:	bd80      	pop	{r7, pc}

0801b5f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801b5f6:	b580      	push	{r7, lr}
 801b5f8:	b086      	sub	sp, #24
 801b5fa:	af00      	add	r7, sp, #0
 801b5fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b5fe:	f3ef 8310 	mrs	r3, PRIMASK
 801b602:	60bb      	str	r3, [r7, #8]
  return(result);
 801b604:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801b606:	617b      	str	r3, [r7, #20]
 801b608:	2301      	movs	r3, #1
 801b60a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	f383 8810 	msr	PRIMASK, r3
}
 801b612:	46c0      	nop			@ (mov r8, r8)
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	681a      	ldr	r2, [r3, #0]
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	2140      	movs	r1, #64	@ 0x40
 801b620:	438a      	bics	r2, r1
 801b622:	601a      	str	r2, [r3, #0]
 801b624:	697b      	ldr	r3, [r7, #20]
 801b626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	f383 8810 	msr	PRIMASK, r3
}
 801b62e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	2220      	movs	r2, #32
 801b634:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	2200      	movs	r2, #0
 801b63a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	228c      	movs	r2, #140	@ 0x8c
 801b640:	589b      	ldr	r3, [r3, r2]
 801b642:	687a      	ldr	r2, [r7, #4]
 801b644:	0010      	movs	r0, r2
 801b646:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801b648:	46c0      	nop			@ (mov r8, r8)
 801b64a:	46bd      	mov	sp, r7
 801b64c:	b006      	add	sp, #24
 801b64e:	bd80      	pop	{r7, pc}

0801b650 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801b650:	b580      	push	{r7, lr}
 801b652:	b094      	sub	sp, #80	@ 0x50
 801b654:	af00      	add	r7, sp, #0
 801b656:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801b658:	204e      	movs	r0, #78	@ 0x4e
 801b65a:	183b      	adds	r3, r7, r0
 801b65c:	687a      	ldr	r2, [r7, #4]
 801b65e:	215c      	movs	r1, #92	@ 0x5c
 801b660:	5a52      	ldrh	r2, [r2, r1]
 801b662:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	2280      	movs	r2, #128	@ 0x80
 801b668:	589b      	ldr	r3, [r3, r2]
 801b66a:	2b22      	cmp	r3, #34	@ 0x22
 801b66c:	d000      	beq.n	801b670 <UART_RxISR_8BIT+0x20>
 801b66e:	e0c2      	b.n	801b7f6 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b676:	214c      	movs	r1, #76	@ 0x4c
 801b678:	187b      	adds	r3, r7, r1
 801b67a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801b67c:	187b      	adds	r3, r7, r1
 801b67e:	881b      	ldrh	r3, [r3, #0]
 801b680:	b2da      	uxtb	r2, r3
 801b682:	183b      	adds	r3, r7, r0
 801b684:	881b      	ldrh	r3, [r3, #0]
 801b686:	b2d9      	uxtb	r1, r3
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b68c:	400a      	ands	r2, r1
 801b68e:	b2d2      	uxtb	r2, r2
 801b690:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b696:	1c5a      	adds	r2, r3, #1
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	225a      	movs	r2, #90	@ 0x5a
 801b6a0:	5a9b      	ldrh	r3, [r3, r2]
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	3b01      	subs	r3, #1
 801b6a6:	b299      	uxth	r1, r3
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	225a      	movs	r2, #90	@ 0x5a
 801b6ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	225a      	movs	r2, #90	@ 0x5a
 801b6b2:	5a9b      	ldrh	r3, [r3, r2]
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d000      	beq.n	801b6bc <UART_RxISR_8BIT+0x6c>
 801b6ba:	e0a4      	b.n	801b806 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b6c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801b6c6:	2301      	movs	r3, #1
 801b6c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b6cc:	f383 8810 	msr	PRIMASK, r3
}
 801b6d0:	46c0      	nop			@ (mov r8, r8)
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	681a      	ldr	r2, [r3, #0]
 801b6d8:	687b      	ldr	r3, [r7, #4]
 801b6da:	681b      	ldr	r3, [r3, #0]
 801b6dc:	494c      	ldr	r1, [pc, #304]	@ (801b810 <UART_RxISR_8BIT+0x1c0>)
 801b6de:	400a      	ands	r2, r1
 801b6e0:	601a      	str	r2, [r3, #0]
 801b6e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6e8:	f383 8810 	msr	PRIMASK, r3
}
 801b6ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6ee:	f3ef 8310 	mrs	r3, PRIMASK
 801b6f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b6f6:	647b      	str	r3, [r7, #68]	@ 0x44
 801b6f8:	2301      	movs	r3, #1
 801b6fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b6fe:	f383 8810 	msr	PRIMASK, r3
}
 801b702:	46c0      	nop			@ (mov r8, r8)
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	689a      	ldr	r2, [r3, #8]
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	2101      	movs	r1, #1
 801b710:	438a      	bics	r2, r1
 801b712:	609a      	str	r2, [r3, #8]
 801b714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b716:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b71a:	f383 8810 	msr	PRIMASK, r3
}
 801b71e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	2280      	movs	r2, #128	@ 0x80
 801b724:	2120      	movs	r1, #32
 801b726:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2200      	movs	r2, #0
 801b72c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	2200      	movs	r2, #0
 801b732:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	4a36      	ldr	r2, [pc, #216]	@ (801b814 <UART_RxISR_8BIT+0x1c4>)
 801b73a:	4293      	cmp	r3, r2
 801b73c:	d01f      	beq.n	801b77e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	681b      	ldr	r3, [r3, #0]
 801b742:	685a      	ldr	r2, [r3, #4]
 801b744:	2380      	movs	r3, #128	@ 0x80
 801b746:	041b      	lsls	r3, r3, #16
 801b748:	4013      	ands	r3, r2
 801b74a:	d018      	beq.n	801b77e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b74c:	f3ef 8310 	mrs	r3, PRIMASK
 801b750:	61bb      	str	r3, [r7, #24]
  return(result);
 801b752:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b754:	643b      	str	r3, [r7, #64]	@ 0x40
 801b756:	2301      	movs	r3, #1
 801b758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b75a:	69fb      	ldr	r3, [r7, #28]
 801b75c:	f383 8810 	msr	PRIMASK, r3
}
 801b760:	46c0      	nop			@ (mov r8, r8)
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	681a      	ldr	r2, [r3, #0]
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	492a      	ldr	r1, [pc, #168]	@ (801b818 <UART_RxISR_8BIT+0x1c8>)
 801b76e:	400a      	ands	r2, r1
 801b770:	601a      	str	r2, [r3, #0]
 801b772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b774:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b776:	6a3b      	ldr	r3, [r7, #32]
 801b778:	f383 8810 	msr	PRIMASK, r3
}
 801b77c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b782:	2b01      	cmp	r3, #1
 801b784:	d130      	bne.n	801b7e8 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	2200      	movs	r2, #0
 801b78a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b78c:	f3ef 8310 	mrs	r3, PRIMASK
 801b790:	60fb      	str	r3, [r7, #12]
  return(result);
 801b792:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b796:	2301      	movs	r3, #1
 801b798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b79a:	693b      	ldr	r3, [r7, #16]
 801b79c:	f383 8810 	msr	PRIMASK, r3
}
 801b7a0:	46c0      	nop			@ (mov r8, r8)
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	681a      	ldr	r2, [r3, #0]
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	2110      	movs	r1, #16
 801b7ae:	438a      	bics	r2, r1
 801b7b0:	601a      	str	r2, [r3, #0]
 801b7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7b6:	697b      	ldr	r3, [r7, #20]
 801b7b8:	f383 8810 	msr	PRIMASK, r3
}
 801b7bc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	69db      	ldr	r3, [r3, #28]
 801b7c4:	2210      	movs	r2, #16
 801b7c6:	4013      	ands	r3, r2
 801b7c8:	2b10      	cmp	r3, #16
 801b7ca:	d103      	bne.n	801b7d4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	2210      	movs	r2, #16
 801b7d2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	22ac      	movs	r2, #172	@ 0xac
 801b7d8:	589b      	ldr	r3, [r3, r2]
 801b7da:	687a      	ldr	r2, [r7, #4]
 801b7dc:	2158      	movs	r1, #88	@ 0x58
 801b7de:	5a51      	ldrh	r1, [r2, r1]
 801b7e0:	687a      	ldr	r2, [r7, #4]
 801b7e2:	0010      	movs	r0, r2
 801b7e4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b7e6:	e00e      	b.n	801b806 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	2294      	movs	r2, #148	@ 0x94
 801b7ec:	589b      	ldr	r3, [r3, r2]
 801b7ee:	687a      	ldr	r2, [r7, #4]
 801b7f0:	0010      	movs	r0, r2
 801b7f2:	4798      	blx	r3
}
 801b7f4:	e007      	b.n	801b806 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	699a      	ldr	r2, [r3, #24]
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	2108      	movs	r1, #8
 801b802:	430a      	orrs	r2, r1
 801b804:	619a      	str	r2, [r3, #24]
}
 801b806:	46c0      	nop			@ (mov r8, r8)
 801b808:	46bd      	mov	sp, r7
 801b80a:	b014      	add	sp, #80	@ 0x50
 801b80c:	bd80      	pop	{r7, pc}
 801b80e:	46c0      	nop			@ (mov r8, r8)
 801b810:	fffffedf 	.word	0xfffffedf
 801b814:	40004800 	.word	0x40004800
 801b818:	fbffffff 	.word	0xfbffffff

0801b81c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b094      	sub	sp, #80	@ 0x50
 801b820:	af00      	add	r7, sp, #0
 801b822:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801b824:	204e      	movs	r0, #78	@ 0x4e
 801b826:	183b      	adds	r3, r7, r0
 801b828:	687a      	ldr	r2, [r7, #4]
 801b82a:	215c      	movs	r1, #92	@ 0x5c
 801b82c:	5a52      	ldrh	r2, [r2, r1]
 801b82e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	2280      	movs	r2, #128	@ 0x80
 801b834:	589b      	ldr	r3, [r3, r2]
 801b836:	2b22      	cmp	r3, #34	@ 0x22
 801b838:	d000      	beq.n	801b83c <UART_RxISR_16BIT+0x20>
 801b83a:	e0c2      	b.n	801b9c2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b842:	214c      	movs	r1, #76	@ 0x4c
 801b844:	187b      	adds	r3, r7, r1
 801b846:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b84c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801b84e:	187b      	adds	r3, r7, r1
 801b850:	183a      	adds	r2, r7, r0
 801b852:	881b      	ldrh	r3, [r3, #0]
 801b854:	8812      	ldrh	r2, [r2, #0]
 801b856:	4013      	ands	r3, r2
 801b858:	b29a      	uxth	r2, r3
 801b85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b85c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b862:	1c9a      	adds	r2, r3, #2
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	225a      	movs	r2, #90	@ 0x5a
 801b86c:	5a9b      	ldrh	r3, [r3, r2]
 801b86e:	b29b      	uxth	r3, r3
 801b870:	3b01      	subs	r3, #1
 801b872:	b299      	uxth	r1, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	225a      	movs	r2, #90	@ 0x5a
 801b878:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	225a      	movs	r2, #90	@ 0x5a
 801b87e:	5a9b      	ldrh	r3, [r3, r2]
 801b880:	b29b      	uxth	r3, r3
 801b882:	2b00      	cmp	r3, #0
 801b884:	d000      	beq.n	801b888 <UART_RxISR_16BIT+0x6c>
 801b886:	e0a4      	b.n	801b9d2 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b888:	f3ef 8310 	mrs	r3, PRIMASK
 801b88c:	623b      	str	r3, [r7, #32]
  return(result);
 801b88e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b890:	647b      	str	r3, [r7, #68]	@ 0x44
 801b892:	2301      	movs	r3, #1
 801b894:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b898:	f383 8810 	msr	PRIMASK, r3
}
 801b89c:	46c0      	nop			@ (mov r8, r8)
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	681b      	ldr	r3, [r3, #0]
 801b8a8:	494c      	ldr	r1, [pc, #304]	@ (801b9dc <UART_RxISR_16BIT+0x1c0>)
 801b8aa:	400a      	ands	r2, r1
 801b8ac:	601a      	str	r2, [r3, #0]
 801b8ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8b4:	f383 8810 	msr	PRIMASK, r3
}
 801b8b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b8ba:	f3ef 8310 	mrs	r3, PRIMASK
 801b8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801b8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b8c2:	643b      	str	r3, [r7, #64]	@ 0x40
 801b8c4:	2301      	movs	r3, #1
 801b8c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8ca:	f383 8810 	msr	PRIMASK, r3
}
 801b8ce:	46c0      	nop			@ (mov r8, r8)
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	689a      	ldr	r2, [r3, #8]
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	2101      	movs	r1, #1
 801b8dc:	438a      	bics	r2, r1
 801b8de:	609a      	str	r2, [r3, #8]
 801b8e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b8e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b8e6:	f383 8810 	msr	PRIMASK, r3
}
 801b8ea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	2280      	movs	r2, #128	@ 0x80
 801b8f0:	2120      	movs	r1, #32
 801b8f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	4a36      	ldr	r2, [pc, #216]	@ (801b9e0 <UART_RxISR_16BIT+0x1c4>)
 801b906:	4293      	cmp	r3, r2
 801b908:	d01f      	beq.n	801b94a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	685a      	ldr	r2, [r3, #4]
 801b910:	2380      	movs	r3, #128	@ 0x80
 801b912:	041b      	lsls	r3, r3, #16
 801b914:	4013      	ands	r3, r2
 801b916:	d018      	beq.n	801b94a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b918:	f3ef 8310 	mrs	r3, PRIMASK
 801b91c:	617b      	str	r3, [r7, #20]
  return(result);
 801b91e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801b920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b922:	2301      	movs	r3, #1
 801b924:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	f383 8810 	msr	PRIMASK, r3
}
 801b92c:	46c0      	nop			@ (mov r8, r8)
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	681a      	ldr	r2, [r3, #0]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	492a      	ldr	r1, [pc, #168]	@ (801b9e4 <UART_RxISR_16BIT+0x1c8>)
 801b93a:	400a      	ands	r2, r1
 801b93c:	601a      	str	r2, [r3, #0]
 801b93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b942:	69fb      	ldr	r3, [r7, #28]
 801b944:	f383 8810 	msr	PRIMASK, r3
}
 801b948:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b94e:	2b01      	cmp	r3, #1
 801b950:	d130      	bne.n	801b9b4 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	2200      	movs	r2, #0
 801b956:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b958:	f3ef 8310 	mrs	r3, PRIMASK
 801b95c:	60bb      	str	r3, [r7, #8]
  return(result);
 801b95e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b960:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b962:	2301      	movs	r3, #1
 801b964:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b966:	68fb      	ldr	r3, [r7, #12]
 801b968:	f383 8810 	msr	PRIMASK, r3
}
 801b96c:	46c0      	nop			@ (mov r8, r8)
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	681a      	ldr	r2, [r3, #0]
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	2110      	movs	r1, #16
 801b97a:	438a      	bics	r2, r1
 801b97c:	601a      	str	r2, [r3, #0]
 801b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b982:	693b      	ldr	r3, [r7, #16]
 801b984:	f383 8810 	msr	PRIMASK, r3
}
 801b988:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	69db      	ldr	r3, [r3, #28]
 801b990:	2210      	movs	r2, #16
 801b992:	4013      	ands	r3, r2
 801b994:	2b10      	cmp	r3, #16
 801b996:	d103      	bne.n	801b9a0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	2210      	movs	r2, #16
 801b99e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	22ac      	movs	r2, #172	@ 0xac
 801b9a4:	589b      	ldr	r3, [r3, r2]
 801b9a6:	687a      	ldr	r2, [r7, #4]
 801b9a8:	2158      	movs	r1, #88	@ 0x58
 801b9aa:	5a51      	ldrh	r1, [r2, r1]
 801b9ac:	687a      	ldr	r2, [r7, #4]
 801b9ae:	0010      	movs	r0, r2
 801b9b0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801b9b2:	e00e      	b.n	801b9d2 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	2294      	movs	r2, #148	@ 0x94
 801b9b8:	589b      	ldr	r3, [r3, r2]
 801b9ba:	687a      	ldr	r2, [r7, #4]
 801b9bc:	0010      	movs	r0, r2
 801b9be:	4798      	blx	r3
}
 801b9c0:	e007      	b.n	801b9d2 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	699a      	ldr	r2, [r3, #24]
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	2108      	movs	r1, #8
 801b9ce:	430a      	orrs	r2, r1
 801b9d0:	619a      	str	r2, [r3, #24]
}
 801b9d2:	46c0      	nop			@ (mov r8, r8)
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	b014      	add	sp, #80	@ 0x50
 801b9d8:	bd80      	pop	{r7, pc}
 801b9da:	46c0      	nop			@ (mov r8, r8)
 801b9dc:	fffffedf 	.word	0xfffffedf
 801b9e0:	40004800 	.word	0x40004800
 801b9e4:	fbffffff 	.word	0xfbffffff

0801b9e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b082      	sub	sp, #8
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b9f0:	46c0      	nop			@ (mov r8, r8)
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	b002      	add	sp, #8
 801b9f6:	bd80      	pop	{r7, pc}

0801b9f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801b9f8:	b580      	push	{r7, lr}
 801b9fa:	b084      	sub	sp, #16
 801b9fc:	af00      	add	r7, sp, #0
 801b9fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	2244      	movs	r2, #68	@ 0x44
 801ba04:	2100      	movs	r1, #0
 801ba06:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ba08:	4b05      	ldr	r3, [pc, #20]	@ (801ba20 <USB_EnableGlobalInt+0x28>)
 801ba0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	b299      	uxth	r1, r3
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	2240      	movs	r2, #64	@ 0x40
 801ba14:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ba16:	2300      	movs	r3, #0
}
 801ba18:	0018      	movs	r0, r3
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	b004      	add	sp, #16
 801ba1e:	bd80      	pop	{r7, pc}
 801ba20:	0000bf80 	.word	0x0000bf80

0801ba24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801ba24:	b580      	push	{r7, lr}
 801ba26:	b084      	sub	sp, #16
 801ba28:	af00      	add	r7, sp, #0
 801ba2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801ba2c:	4b09      	ldr	r3, [pc, #36]	@ (801ba54 <USB_DisableGlobalInt+0x30>)
 801ba2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	2240      	movs	r2, #64	@ 0x40
 801ba34:	5a9b      	ldrh	r3, [r3, r2]
 801ba36:	b29b      	uxth	r3, r3
 801ba38:	68fa      	ldr	r2, [r7, #12]
 801ba3a:	b292      	uxth	r2, r2
 801ba3c:	43d2      	mvns	r2, r2
 801ba3e:	b292      	uxth	r2, r2
 801ba40:	4013      	ands	r3, r2
 801ba42:	b299      	uxth	r1, r3
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	2240      	movs	r2, #64	@ 0x40
 801ba48:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ba4a:	2300      	movs	r3, #0
}
 801ba4c:	0018      	movs	r0, r3
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	b004      	add	sp, #16
 801ba52:	bd80      	pop	{r7, pc}
 801ba54:	0000bf80 	.word	0x0000bf80

0801ba58 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801ba58:	b084      	sub	sp, #16
 801ba5a:	b590      	push	{r4, r7, lr}
 801ba5c:	b083      	sub	sp, #12
 801ba5e:	af00      	add	r7, sp, #0
 801ba60:	6078      	str	r0, [r7, #4]
 801ba62:	2004      	movs	r0, #4
 801ba64:	2410      	movs	r4, #16
 801ba66:	1900      	adds	r0, r0, r4
 801ba68:	2408      	movs	r4, #8
 801ba6a:	46a4      	mov	ip, r4
 801ba6c:	44bc      	add	ip, r7
 801ba6e:	4460      	add	r0, ip
 801ba70:	6001      	str	r1, [r0, #0]
 801ba72:	6042      	str	r2, [r0, #4]
 801ba74:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	2240      	movs	r2, #64	@ 0x40
 801ba7a:	2101      	movs	r1, #1
 801ba7c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	2240      	movs	r2, #64	@ 0x40
 801ba82:	2100      	movs	r1, #0
 801ba84:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	2244      	movs	r2, #68	@ 0x44
 801ba8a:	2100      	movs	r1, #0
 801ba8c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	2250      	movs	r2, #80	@ 0x50
 801ba92:	2100      	movs	r1, #0
 801ba94:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ba96:	2300      	movs	r3, #0
}
 801ba98:	0018      	movs	r0, r3
 801ba9a:	46bd      	mov	sp, r7
 801ba9c:	b003      	add	sp, #12
 801ba9e:	bc90      	pop	{r4, r7}
 801baa0:	bc08      	pop	{r3}
 801baa2:	b004      	add	sp, #16
 801baa4:	4718      	bx	r3
	...

0801baa8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b09c      	sub	sp, #112	@ 0x70
 801baac:	af00      	add	r7, sp, #0
 801baae:	6078      	str	r0, [r7, #4]
 801bab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801bab2:	236f      	movs	r3, #111	@ 0x6f
 801bab4:	18fb      	adds	r3, r7, r3
 801bab6:	2200      	movs	r2, #0
 801bab8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801baba:	687a      	ldr	r2, [r7, #4]
 801babc:	683b      	ldr	r3, [r7, #0]
 801babe:	781b      	ldrb	r3, [r3, #0]
 801bac0:	009b      	lsls	r3, r3, #2
 801bac2:	18d3      	adds	r3, r2, r3
 801bac4:	881b      	ldrh	r3, [r3, #0]
 801bac6:	b29a      	uxth	r2, r3
 801bac8:	236c      	movs	r3, #108	@ 0x6c
 801baca:	18fb      	adds	r3, r7, r3
 801bacc:	49a3      	ldr	r1, [pc, #652]	@ (801bd5c <USB_ActivateEndpoint+0x2b4>)
 801bace:	400a      	ands	r2, r1
 801bad0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801bad2:	683b      	ldr	r3, [r7, #0]
 801bad4:	78db      	ldrb	r3, [r3, #3]
 801bad6:	2b03      	cmp	r3, #3
 801bad8:	d017      	beq.n	801bb0a <USB_ActivateEndpoint+0x62>
 801bada:	dc28      	bgt.n	801bb2e <USB_ActivateEndpoint+0x86>
 801badc:	2b02      	cmp	r3, #2
 801bade:	d00e      	beq.n	801bafe <USB_ActivateEndpoint+0x56>
 801bae0:	dc25      	bgt.n	801bb2e <USB_ActivateEndpoint+0x86>
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d002      	beq.n	801baec <USB_ActivateEndpoint+0x44>
 801bae6:	2b01      	cmp	r3, #1
 801bae8:	d018      	beq.n	801bb1c <USB_ActivateEndpoint+0x74>
 801baea:	e020      	b.n	801bb2e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801baec:	226c      	movs	r2, #108	@ 0x6c
 801baee:	18bb      	adds	r3, r7, r2
 801baf0:	18ba      	adds	r2, r7, r2
 801baf2:	8812      	ldrh	r2, [r2, #0]
 801baf4:	2180      	movs	r1, #128	@ 0x80
 801baf6:	0089      	lsls	r1, r1, #2
 801baf8:	430a      	orrs	r2, r1
 801bafa:	801a      	strh	r2, [r3, #0]
      break;
 801bafc:	e01c      	b.n	801bb38 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801bafe:	226c      	movs	r2, #108	@ 0x6c
 801bb00:	18bb      	adds	r3, r7, r2
 801bb02:	18ba      	adds	r2, r7, r2
 801bb04:	8812      	ldrh	r2, [r2, #0]
 801bb06:	801a      	strh	r2, [r3, #0]
      break;
 801bb08:	e016      	b.n	801bb38 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801bb0a:	226c      	movs	r2, #108	@ 0x6c
 801bb0c:	18bb      	adds	r3, r7, r2
 801bb0e:	18ba      	adds	r2, r7, r2
 801bb10:	8812      	ldrh	r2, [r2, #0]
 801bb12:	21c0      	movs	r1, #192	@ 0xc0
 801bb14:	00c9      	lsls	r1, r1, #3
 801bb16:	430a      	orrs	r2, r1
 801bb18:	801a      	strh	r2, [r3, #0]
      break;
 801bb1a:	e00d      	b.n	801bb38 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801bb1c:	226c      	movs	r2, #108	@ 0x6c
 801bb1e:	18bb      	adds	r3, r7, r2
 801bb20:	18ba      	adds	r2, r7, r2
 801bb22:	8812      	ldrh	r2, [r2, #0]
 801bb24:	2180      	movs	r1, #128	@ 0x80
 801bb26:	00c9      	lsls	r1, r1, #3
 801bb28:	430a      	orrs	r2, r1
 801bb2a:	801a      	strh	r2, [r3, #0]
      break;
 801bb2c:	e004      	b.n	801bb38 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801bb2e:	236f      	movs	r3, #111	@ 0x6f
 801bb30:	18fb      	adds	r3, r7, r3
 801bb32:	2201      	movs	r2, #1
 801bb34:	701a      	strb	r2, [r3, #0]
      break;
 801bb36:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801bb38:	687a      	ldr	r2, [r7, #4]
 801bb3a:	683b      	ldr	r3, [r7, #0]
 801bb3c:	781b      	ldrb	r3, [r3, #0]
 801bb3e:	009b      	lsls	r3, r3, #2
 801bb40:	18d3      	adds	r3, r2, r3
 801bb42:	226c      	movs	r2, #108	@ 0x6c
 801bb44:	18ba      	adds	r2, r7, r2
 801bb46:	8812      	ldrh	r2, [r2, #0]
 801bb48:	4985      	ldr	r1, [pc, #532]	@ (801bd60 <USB_ActivateEndpoint+0x2b8>)
 801bb4a:	430a      	orrs	r2, r1
 801bb4c:	b292      	uxth	r2, r2
 801bb4e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801bb50:	687a      	ldr	r2, [r7, #4]
 801bb52:	683b      	ldr	r3, [r7, #0]
 801bb54:	781b      	ldrb	r3, [r3, #0]
 801bb56:	009b      	lsls	r3, r3, #2
 801bb58:	18d3      	adds	r3, r2, r3
 801bb5a:	881b      	ldrh	r3, [r3, #0]
 801bb5c:	b29b      	uxth	r3, r3
 801bb5e:	b21b      	sxth	r3, r3
 801bb60:	4a80      	ldr	r2, [pc, #512]	@ (801bd64 <USB_ActivateEndpoint+0x2bc>)
 801bb62:	4013      	ands	r3, r2
 801bb64:	b21a      	sxth	r2, r3
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	b21b      	sxth	r3, r3
 801bb6c:	4313      	orrs	r3, r2
 801bb6e:	b21a      	sxth	r2, r3
 801bb70:	2166      	movs	r1, #102	@ 0x66
 801bb72:	187b      	adds	r3, r7, r1
 801bb74:	801a      	strh	r2, [r3, #0]
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	683b      	ldr	r3, [r7, #0]
 801bb7a:	781b      	ldrb	r3, [r3, #0]
 801bb7c:	009b      	lsls	r3, r3, #2
 801bb7e:	18d3      	adds	r3, r2, r3
 801bb80:	187a      	adds	r2, r7, r1
 801bb82:	8812      	ldrh	r2, [r2, #0]
 801bb84:	4976      	ldr	r1, [pc, #472]	@ (801bd60 <USB_ActivateEndpoint+0x2b8>)
 801bb86:	430a      	orrs	r2, r1
 801bb88:	b292      	uxth	r2, r2
 801bb8a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801bb8c:	683b      	ldr	r3, [r7, #0]
 801bb8e:	7b1b      	ldrb	r3, [r3, #12]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d000      	beq.n	801bb96 <USB_ActivateEndpoint+0xee>
 801bb94:	e178      	b.n	801be88 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801bb96:	683b      	ldr	r3, [r7, #0]
 801bb98:	785b      	ldrb	r3, [r3, #1]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d100      	bne.n	801bba0 <USB_ActivateEndpoint+0xf8>
 801bb9e:	e07a      	b.n	801bc96 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	61bb      	str	r3, [r7, #24]
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	2250      	movs	r2, #80	@ 0x50
 801bba8:	5a9b      	ldrh	r3, [r3, r2]
 801bbaa:	b29b      	uxth	r3, r3
 801bbac:	001a      	movs	r2, r3
 801bbae:	69bb      	ldr	r3, [r7, #24]
 801bbb0:	189b      	adds	r3, r3, r2
 801bbb2:	61bb      	str	r3, [r7, #24]
 801bbb4:	683b      	ldr	r3, [r7, #0]
 801bbb6:	781b      	ldrb	r3, [r3, #0]
 801bbb8:	00da      	lsls	r2, r3, #3
 801bbba:	69bb      	ldr	r3, [r7, #24]
 801bbbc:	18d3      	adds	r3, r2, r3
 801bbbe:	2280      	movs	r2, #128	@ 0x80
 801bbc0:	00d2      	lsls	r2, r2, #3
 801bbc2:	4694      	mov	ip, r2
 801bbc4:	4463      	add	r3, ip
 801bbc6:	617b      	str	r3, [r7, #20]
 801bbc8:	683b      	ldr	r3, [r7, #0]
 801bbca:	88db      	ldrh	r3, [r3, #6]
 801bbcc:	085b      	lsrs	r3, r3, #1
 801bbce:	b29b      	uxth	r3, r3
 801bbd0:	18db      	adds	r3, r3, r3
 801bbd2:	b29a      	uxth	r2, r3
 801bbd4:	697b      	ldr	r3, [r7, #20]
 801bbd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bbd8:	687a      	ldr	r2, [r7, #4]
 801bbda:	683b      	ldr	r3, [r7, #0]
 801bbdc:	781b      	ldrb	r3, [r3, #0]
 801bbde:	009b      	lsls	r3, r3, #2
 801bbe0:	18d2      	adds	r2, r2, r3
 801bbe2:	2112      	movs	r1, #18
 801bbe4:	187b      	adds	r3, r7, r1
 801bbe6:	8812      	ldrh	r2, [r2, #0]
 801bbe8:	801a      	strh	r2, [r3, #0]
 801bbea:	187b      	adds	r3, r7, r1
 801bbec:	881b      	ldrh	r3, [r3, #0]
 801bbee:	2240      	movs	r2, #64	@ 0x40
 801bbf0:	4013      	ands	r3, r2
 801bbf2:	d016      	beq.n	801bc22 <USB_ActivateEndpoint+0x17a>
 801bbf4:	687a      	ldr	r2, [r7, #4]
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	781b      	ldrb	r3, [r3, #0]
 801bbfa:	009b      	lsls	r3, r3, #2
 801bbfc:	18d3      	adds	r3, r2, r3
 801bbfe:	881b      	ldrh	r3, [r3, #0]
 801bc00:	b29a      	uxth	r2, r3
 801bc02:	2010      	movs	r0, #16
 801bc04:	183b      	adds	r3, r7, r0
 801bc06:	4957      	ldr	r1, [pc, #348]	@ (801bd64 <USB_ActivateEndpoint+0x2bc>)
 801bc08:	400a      	ands	r2, r1
 801bc0a:	801a      	strh	r2, [r3, #0]
 801bc0c:	687a      	ldr	r2, [r7, #4]
 801bc0e:	683b      	ldr	r3, [r7, #0]
 801bc10:	781b      	ldrb	r3, [r3, #0]
 801bc12:	009b      	lsls	r3, r3, #2
 801bc14:	18d3      	adds	r3, r2, r3
 801bc16:	183a      	adds	r2, r7, r0
 801bc18:	8812      	ldrh	r2, [r2, #0]
 801bc1a:	4953      	ldr	r1, [pc, #332]	@ (801bd68 <USB_ActivateEndpoint+0x2c0>)
 801bc1c:	430a      	orrs	r2, r1
 801bc1e:	b292      	uxth	r2, r2
 801bc20:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801bc22:	683b      	ldr	r3, [r7, #0]
 801bc24:	78db      	ldrb	r3, [r3, #3]
 801bc26:	2b01      	cmp	r3, #1
 801bc28:	d01d      	beq.n	801bc66 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801bc2a:	687a      	ldr	r2, [r7, #4]
 801bc2c:	683b      	ldr	r3, [r7, #0]
 801bc2e:	781b      	ldrb	r3, [r3, #0]
 801bc30:	009b      	lsls	r3, r3, #2
 801bc32:	18d3      	adds	r3, r2, r3
 801bc34:	881b      	ldrh	r3, [r3, #0]
 801bc36:	b29a      	uxth	r2, r3
 801bc38:	200c      	movs	r0, #12
 801bc3a:	183b      	adds	r3, r7, r0
 801bc3c:	494b      	ldr	r1, [pc, #300]	@ (801bd6c <USB_ActivateEndpoint+0x2c4>)
 801bc3e:	400a      	ands	r2, r1
 801bc40:	801a      	strh	r2, [r3, #0]
 801bc42:	183b      	adds	r3, r7, r0
 801bc44:	183a      	adds	r2, r7, r0
 801bc46:	8812      	ldrh	r2, [r2, #0]
 801bc48:	2120      	movs	r1, #32
 801bc4a:	404a      	eors	r2, r1
 801bc4c:	801a      	strh	r2, [r3, #0]
 801bc4e:	687a      	ldr	r2, [r7, #4]
 801bc50:	683b      	ldr	r3, [r7, #0]
 801bc52:	781b      	ldrb	r3, [r3, #0]
 801bc54:	009b      	lsls	r3, r3, #2
 801bc56:	18d3      	adds	r3, r2, r3
 801bc58:	183a      	adds	r2, r7, r0
 801bc5a:	8812      	ldrh	r2, [r2, #0]
 801bc5c:	4940      	ldr	r1, [pc, #256]	@ (801bd60 <USB_ActivateEndpoint+0x2b8>)
 801bc5e:	430a      	orrs	r2, r1
 801bc60:	b292      	uxth	r2, r2
 801bc62:	801a      	strh	r2, [r3, #0]
 801bc64:	e2b4      	b.n	801c1d0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801bc66:	687a      	ldr	r2, [r7, #4]
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	781b      	ldrb	r3, [r3, #0]
 801bc6c:	009b      	lsls	r3, r3, #2
 801bc6e:	18d3      	adds	r3, r2, r3
 801bc70:	881b      	ldrh	r3, [r3, #0]
 801bc72:	b29a      	uxth	r2, r3
 801bc74:	200e      	movs	r0, #14
 801bc76:	183b      	adds	r3, r7, r0
 801bc78:	493c      	ldr	r1, [pc, #240]	@ (801bd6c <USB_ActivateEndpoint+0x2c4>)
 801bc7a:	400a      	ands	r2, r1
 801bc7c:	801a      	strh	r2, [r3, #0]
 801bc7e:	687a      	ldr	r2, [r7, #4]
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	781b      	ldrb	r3, [r3, #0]
 801bc84:	009b      	lsls	r3, r3, #2
 801bc86:	18d3      	adds	r3, r2, r3
 801bc88:	183a      	adds	r2, r7, r0
 801bc8a:	8812      	ldrh	r2, [r2, #0]
 801bc8c:	4934      	ldr	r1, [pc, #208]	@ (801bd60 <USB_ActivateEndpoint+0x2b8>)
 801bc8e:	430a      	orrs	r2, r1
 801bc90:	b292      	uxth	r2, r2
 801bc92:	801a      	strh	r2, [r3, #0]
 801bc94:	e29c      	b.n	801c1d0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	633b      	str	r3, [r7, #48]	@ 0x30
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	2250      	movs	r2, #80	@ 0x50
 801bc9e:	5a9b      	ldrh	r3, [r3, r2]
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	001a      	movs	r2, r3
 801bca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bca6:	189b      	adds	r3, r3, r2
 801bca8:	633b      	str	r3, [r7, #48]	@ 0x30
 801bcaa:	683b      	ldr	r3, [r7, #0]
 801bcac:	781b      	ldrb	r3, [r3, #0]
 801bcae:	00da      	lsls	r2, r3, #3
 801bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcb2:	18d3      	adds	r3, r2, r3
 801bcb4:	4a2e      	ldr	r2, [pc, #184]	@ (801bd70 <USB_ActivateEndpoint+0x2c8>)
 801bcb6:	4694      	mov	ip, r2
 801bcb8:	4463      	add	r3, ip
 801bcba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bcbc:	683b      	ldr	r3, [r7, #0]
 801bcbe:	88db      	ldrh	r3, [r3, #6]
 801bcc0:	085b      	lsrs	r3, r3, #1
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	18db      	adds	r3, r3, r3
 801bcc6:	b29a      	uxth	r2, r3
 801bcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	2250      	movs	r2, #80	@ 0x50
 801bcd4:	5a9b      	ldrh	r3, [r3, r2]
 801bcd6:	b29b      	uxth	r3, r3
 801bcd8:	001a      	movs	r2, r3
 801bcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcdc:	189b      	adds	r3, r3, r2
 801bcde:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bce0:	683b      	ldr	r3, [r7, #0]
 801bce2:	781b      	ldrb	r3, [r3, #0]
 801bce4:	00da      	lsls	r2, r3, #3
 801bce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bce8:	18d3      	adds	r3, r2, r3
 801bcea:	4a22      	ldr	r2, [pc, #136]	@ (801bd74 <USB_ActivateEndpoint+0x2cc>)
 801bcec:	4694      	mov	ip, r2
 801bcee:	4463      	add	r3, ip
 801bcf0:	627b      	str	r3, [r7, #36]	@ 0x24
 801bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcf4:	881b      	ldrh	r3, [r3, #0]
 801bcf6:	b29b      	uxth	r3, r3
 801bcf8:	059b      	lsls	r3, r3, #22
 801bcfa:	0d9b      	lsrs	r3, r3, #22
 801bcfc:	b29a      	uxth	r2, r3
 801bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd00:	801a      	strh	r2, [r3, #0]
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	691b      	ldr	r3, [r3, #16]
 801bd06:	2b3e      	cmp	r3, #62	@ 0x3e
 801bd08:	d91a      	bls.n	801bd40 <USB_ActivateEndpoint+0x298>
 801bd0a:	683b      	ldr	r3, [r7, #0]
 801bd0c:	691b      	ldr	r3, [r3, #16]
 801bd0e:	095b      	lsrs	r3, r3, #5
 801bd10:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bd12:	683b      	ldr	r3, [r7, #0]
 801bd14:	691b      	ldr	r3, [r3, #16]
 801bd16:	221f      	movs	r2, #31
 801bd18:	4013      	ands	r3, r2
 801bd1a:	d102      	bne.n	801bd22 <USB_ActivateEndpoint+0x27a>
 801bd1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bd1e:	3b01      	subs	r3, #1
 801bd20:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd24:	881b      	ldrh	r3, [r3, #0]
 801bd26:	b29a      	uxth	r2, r3
 801bd28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	029b      	lsls	r3, r3, #10
 801bd2e:	b29b      	uxth	r3, r3
 801bd30:	4313      	orrs	r3, r2
 801bd32:	b29b      	uxth	r3, r3
 801bd34:	4a10      	ldr	r2, [pc, #64]	@ (801bd78 <USB_ActivateEndpoint+0x2d0>)
 801bd36:	4313      	orrs	r3, r2
 801bd38:	b29a      	uxth	r2, r3
 801bd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd3c:	801a      	strh	r2, [r3, #0]
 801bd3e:	e034      	b.n	801bdaa <USB_ActivateEndpoint+0x302>
 801bd40:	683b      	ldr	r3, [r7, #0]
 801bd42:	691b      	ldr	r3, [r3, #16]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d119      	bne.n	801bd7c <USB_ActivateEndpoint+0x2d4>
 801bd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd4a:	881b      	ldrh	r3, [r3, #0]
 801bd4c:	b29b      	uxth	r3, r3
 801bd4e:	4a0a      	ldr	r2, [pc, #40]	@ (801bd78 <USB_ActivateEndpoint+0x2d0>)
 801bd50:	4313      	orrs	r3, r2
 801bd52:	b29a      	uxth	r2, r3
 801bd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd56:	801a      	strh	r2, [r3, #0]
 801bd58:	e027      	b.n	801bdaa <USB_ActivateEndpoint+0x302>
 801bd5a:	46c0      	nop			@ (mov r8, r8)
 801bd5c:	ffff898f 	.word	0xffff898f
 801bd60:	ffff8080 	.word	0xffff8080
 801bd64:	ffff8f8f 	.word	0xffff8f8f
 801bd68:	ffff80c0 	.word	0xffff80c0
 801bd6c:	ffff8fbf 	.word	0xffff8fbf
 801bd70:	00000404 	.word	0x00000404
 801bd74:	00000406 	.word	0x00000406
 801bd78:	ffff8000 	.word	0xffff8000
 801bd7c:	683b      	ldr	r3, [r7, #0]
 801bd7e:	691b      	ldr	r3, [r3, #16]
 801bd80:	085b      	lsrs	r3, r3, #1
 801bd82:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bd84:	683b      	ldr	r3, [r7, #0]
 801bd86:	691b      	ldr	r3, [r3, #16]
 801bd88:	2201      	movs	r2, #1
 801bd8a:	4013      	ands	r3, r2
 801bd8c:	d002      	beq.n	801bd94 <USB_ActivateEndpoint+0x2ec>
 801bd8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bd90:	3301      	adds	r3, #1
 801bd92:	66bb      	str	r3, [r7, #104]	@ 0x68
 801bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd96:	881b      	ldrh	r3, [r3, #0]
 801bd98:	b29a      	uxth	r2, r3
 801bd9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	029b      	lsls	r3, r3, #10
 801bda0:	b29b      	uxth	r3, r3
 801bda2:	4313      	orrs	r3, r2
 801bda4:	b29a      	uxth	r2, r3
 801bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bda8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bdaa:	687a      	ldr	r2, [r7, #4]
 801bdac:	683b      	ldr	r3, [r7, #0]
 801bdae:	781b      	ldrb	r3, [r3, #0]
 801bdb0:	009b      	lsls	r3, r3, #2
 801bdb2:	18d2      	adds	r2, r2, r3
 801bdb4:	2122      	movs	r1, #34	@ 0x22
 801bdb6:	187b      	adds	r3, r7, r1
 801bdb8:	8812      	ldrh	r2, [r2, #0]
 801bdba:	801a      	strh	r2, [r3, #0]
 801bdbc:	187b      	adds	r3, r7, r1
 801bdbe:	881a      	ldrh	r2, [r3, #0]
 801bdc0:	2380      	movs	r3, #128	@ 0x80
 801bdc2:	01db      	lsls	r3, r3, #7
 801bdc4:	4013      	ands	r3, r2
 801bdc6:	d016      	beq.n	801bdf6 <USB_ActivateEndpoint+0x34e>
 801bdc8:	687a      	ldr	r2, [r7, #4]
 801bdca:	683b      	ldr	r3, [r7, #0]
 801bdcc:	781b      	ldrb	r3, [r3, #0]
 801bdce:	009b      	lsls	r3, r3, #2
 801bdd0:	18d3      	adds	r3, r2, r3
 801bdd2:	881b      	ldrh	r3, [r3, #0]
 801bdd4:	b29a      	uxth	r2, r3
 801bdd6:	2020      	movs	r0, #32
 801bdd8:	183b      	adds	r3, r7, r0
 801bdda:	49dd      	ldr	r1, [pc, #884]	@ (801c150 <USB_ActivateEndpoint+0x6a8>)
 801bddc:	400a      	ands	r2, r1
 801bdde:	801a      	strh	r2, [r3, #0]
 801bde0:	687a      	ldr	r2, [r7, #4]
 801bde2:	683b      	ldr	r3, [r7, #0]
 801bde4:	781b      	ldrb	r3, [r3, #0]
 801bde6:	009b      	lsls	r3, r3, #2
 801bde8:	18d3      	adds	r3, r2, r3
 801bdea:	183a      	adds	r2, r7, r0
 801bdec:	8812      	ldrh	r2, [r2, #0]
 801bdee:	49d9      	ldr	r1, [pc, #868]	@ (801c154 <USB_ActivateEndpoint+0x6ac>)
 801bdf0:	430a      	orrs	r2, r1
 801bdf2:	b292      	uxth	r2, r2
 801bdf4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801bdf6:	683b      	ldr	r3, [r7, #0]
 801bdf8:	781b      	ldrb	r3, [r3, #0]
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d125      	bne.n	801be4a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bdfe:	687a      	ldr	r2, [r7, #4]
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	781b      	ldrb	r3, [r3, #0]
 801be04:	009b      	lsls	r3, r3, #2
 801be06:	18d3      	adds	r3, r2, r3
 801be08:	881b      	ldrh	r3, [r3, #0]
 801be0a:	b29a      	uxth	r2, r3
 801be0c:	201c      	movs	r0, #28
 801be0e:	183b      	adds	r3, r7, r0
 801be10:	49d1      	ldr	r1, [pc, #836]	@ (801c158 <USB_ActivateEndpoint+0x6b0>)
 801be12:	400a      	ands	r2, r1
 801be14:	801a      	strh	r2, [r3, #0]
 801be16:	183b      	adds	r3, r7, r0
 801be18:	183a      	adds	r2, r7, r0
 801be1a:	8812      	ldrh	r2, [r2, #0]
 801be1c:	2180      	movs	r1, #128	@ 0x80
 801be1e:	0149      	lsls	r1, r1, #5
 801be20:	404a      	eors	r2, r1
 801be22:	801a      	strh	r2, [r3, #0]
 801be24:	183b      	adds	r3, r7, r0
 801be26:	183a      	adds	r2, r7, r0
 801be28:	8812      	ldrh	r2, [r2, #0]
 801be2a:	2180      	movs	r1, #128	@ 0x80
 801be2c:	0189      	lsls	r1, r1, #6
 801be2e:	404a      	eors	r2, r1
 801be30:	801a      	strh	r2, [r3, #0]
 801be32:	687a      	ldr	r2, [r7, #4]
 801be34:	683b      	ldr	r3, [r7, #0]
 801be36:	781b      	ldrb	r3, [r3, #0]
 801be38:	009b      	lsls	r3, r3, #2
 801be3a:	18d3      	adds	r3, r2, r3
 801be3c:	183a      	adds	r2, r7, r0
 801be3e:	8812      	ldrh	r2, [r2, #0]
 801be40:	49c6      	ldr	r1, [pc, #792]	@ (801c15c <USB_ActivateEndpoint+0x6b4>)
 801be42:	430a      	orrs	r2, r1
 801be44:	b292      	uxth	r2, r2
 801be46:	801a      	strh	r2, [r3, #0]
 801be48:	e1c2      	b.n	801c1d0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801be4a:	687a      	ldr	r2, [r7, #4]
 801be4c:	683b      	ldr	r3, [r7, #0]
 801be4e:	781b      	ldrb	r3, [r3, #0]
 801be50:	009b      	lsls	r3, r3, #2
 801be52:	18d3      	adds	r3, r2, r3
 801be54:	881b      	ldrh	r3, [r3, #0]
 801be56:	b29a      	uxth	r2, r3
 801be58:	201e      	movs	r0, #30
 801be5a:	183b      	adds	r3, r7, r0
 801be5c:	49be      	ldr	r1, [pc, #760]	@ (801c158 <USB_ActivateEndpoint+0x6b0>)
 801be5e:	400a      	ands	r2, r1
 801be60:	801a      	strh	r2, [r3, #0]
 801be62:	183b      	adds	r3, r7, r0
 801be64:	183a      	adds	r2, r7, r0
 801be66:	8812      	ldrh	r2, [r2, #0]
 801be68:	2180      	movs	r1, #128	@ 0x80
 801be6a:	0189      	lsls	r1, r1, #6
 801be6c:	404a      	eors	r2, r1
 801be6e:	801a      	strh	r2, [r3, #0]
 801be70:	687a      	ldr	r2, [r7, #4]
 801be72:	683b      	ldr	r3, [r7, #0]
 801be74:	781b      	ldrb	r3, [r3, #0]
 801be76:	009b      	lsls	r3, r3, #2
 801be78:	18d3      	adds	r3, r2, r3
 801be7a:	183a      	adds	r2, r7, r0
 801be7c:	8812      	ldrh	r2, [r2, #0]
 801be7e:	49b7      	ldr	r1, [pc, #732]	@ (801c15c <USB_ActivateEndpoint+0x6b4>)
 801be80:	430a      	orrs	r2, r1
 801be82:	b292      	uxth	r2, r2
 801be84:	801a      	strh	r2, [r3, #0]
 801be86:	e1a3      	b.n	801c1d0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801be88:	683b      	ldr	r3, [r7, #0]
 801be8a:	78db      	ldrb	r3, [r3, #3]
 801be8c:	2b02      	cmp	r3, #2
 801be8e:	d117      	bne.n	801bec0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801be90:	687a      	ldr	r2, [r7, #4]
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	781b      	ldrb	r3, [r3, #0]
 801be96:	009b      	lsls	r3, r3, #2
 801be98:	18d3      	adds	r3, r2, r3
 801be9a:	881b      	ldrh	r3, [r3, #0]
 801be9c:	b29a      	uxth	r2, r3
 801be9e:	2062      	movs	r0, #98	@ 0x62
 801bea0:	183b      	adds	r3, r7, r0
 801bea2:	49ab      	ldr	r1, [pc, #684]	@ (801c150 <USB_ActivateEndpoint+0x6a8>)
 801bea4:	400a      	ands	r2, r1
 801bea6:	801a      	strh	r2, [r3, #0]
 801bea8:	687a      	ldr	r2, [r7, #4]
 801beaa:	683b      	ldr	r3, [r7, #0]
 801beac:	781b      	ldrb	r3, [r3, #0]
 801beae:	009b      	lsls	r3, r3, #2
 801beb0:	18d3      	adds	r3, r2, r3
 801beb2:	183a      	adds	r2, r7, r0
 801beb4:	8812      	ldrh	r2, [r2, #0]
 801beb6:	49aa      	ldr	r1, [pc, #680]	@ (801c160 <USB_ActivateEndpoint+0x6b8>)
 801beb8:	430a      	orrs	r2, r1
 801beba:	b292      	uxth	r2, r2
 801bebc:	801a      	strh	r2, [r3, #0]
 801bebe:	e016      	b.n	801beee <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801bec0:	687a      	ldr	r2, [r7, #4]
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	781b      	ldrb	r3, [r3, #0]
 801bec6:	009b      	lsls	r3, r3, #2
 801bec8:	18d3      	adds	r3, r2, r3
 801beca:	881b      	ldrh	r3, [r3, #0]
 801becc:	b29a      	uxth	r2, r3
 801bece:	2064      	movs	r0, #100	@ 0x64
 801bed0:	183b      	adds	r3, r7, r0
 801bed2:	49a4      	ldr	r1, [pc, #656]	@ (801c164 <USB_ActivateEndpoint+0x6bc>)
 801bed4:	400a      	ands	r2, r1
 801bed6:	801a      	strh	r2, [r3, #0]
 801bed8:	687a      	ldr	r2, [r7, #4]
 801beda:	683b      	ldr	r3, [r7, #0]
 801bedc:	781b      	ldrb	r3, [r3, #0]
 801bede:	009b      	lsls	r3, r3, #2
 801bee0:	18d3      	adds	r3, r2, r3
 801bee2:	183a      	adds	r2, r7, r0
 801bee4:	8812      	ldrh	r2, [r2, #0]
 801bee6:	499d      	ldr	r1, [pc, #628]	@ (801c15c <USB_ActivateEndpoint+0x6b4>)
 801bee8:	430a      	orrs	r2, r1
 801beea:	b292      	uxth	r2, r2
 801beec:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	2250      	movs	r2, #80	@ 0x50
 801bef6:	5a9b      	ldrh	r3, [r3, r2]
 801bef8:	b29b      	uxth	r3, r3
 801befa:	001a      	movs	r2, r3
 801befc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801befe:	189b      	adds	r3, r3, r2
 801bf00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801bf02:	683b      	ldr	r3, [r7, #0]
 801bf04:	781b      	ldrb	r3, [r3, #0]
 801bf06:	00da      	lsls	r2, r3, #3
 801bf08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bf0a:	18d3      	adds	r3, r2, r3
 801bf0c:	2280      	movs	r2, #128	@ 0x80
 801bf0e:	00d2      	lsls	r2, r2, #3
 801bf10:	4694      	mov	ip, r2
 801bf12:	4463      	add	r3, ip
 801bf14:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bf16:	683b      	ldr	r3, [r7, #0]
 801bf18:	891b      	ldrh	r3, [r3, #8]
 801bf1a:	085b      	lsrs	r3, r3, #1
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	18db      	adds	r3, r3, r3
 801bf20:	b29a      	uxth	r2, r3
 801bf22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801bf24:	801a      	strh	r2, [r3, #0]
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	657b      	str	r3, [r7, #84]	@ 0x54
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	2250      	movs	r2, #80	@ 0x50
 801bf2e:	5a9b      	ldrh	r3, [r3, r2]
 801bf30:	b29b      	uxth	r3, r3
 801bf32:	001a      	movs	r2, r3
 801bf34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf36:	189b      	adds	r3, r3, r2
 801bf38:	657b      	str	r3, [r7, #84]	@ 0x54
 801bf3a:	683b      	ldr	r3, [r7, #0]
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	00da      	lsls	r2, r3, #3
 801bf40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801bf42:	18d3      	adds	r3, r2, r3
 801bf44:	4a88      	ldr	r2, [pc, #544]	@ (801c168 <USB_ActivateEndpoint+0x6c0>)
 801bf46:	4694      	mov	ip, r2
 801bf48:	4463      	add	r3, ip
 801bf4a:	653b      	str	r3, [r7, #80]	@ 0x50
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	895b      	ldrh	r3, [r3, #10]
 801bf50:	085b      	lsrs	r3, r3, #1
 801bf52:	b29b      	uxth	r3, r3
 801bf54:	18db      	adds	r3, r3, r3
 801bf56:	b29a      	uxth	r2, r3
 801bf58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bf5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801bf5c:	683b      	ldr	r3, [r7, #0]
 801bf5e:	785b      	ldrb	r3, [r3, #1]
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d000      	beq.n	801bf66 <USB_ActivateEndpoint+0x4be>
 801bf64:	e087      	b.n	801c076 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	683b      	ldr	r3, [r7, #0]
 801bf6a:	781b      	ldrb	r3, [r3, #0]
 801bf6c:	009b      	lsls	r3, r3, #2
 801bf6e:	18d2      	adds	r2, r2, r3
 801bf70:	2140      	movs	r1, #64	@ 0x40
 801bf72:	187b      	adds	r3, r7, r1
 801bf74:	8812      	ldrh	r2, [r2, #0]
 801bf76:	801a      	strh	r2, [r3, #0]
 801bf78:	187b      	adds	r3, r7, r1
 801bf7a:	881a      	ldrh	r2, [r3, #0]
 801bf7c:	2380      	movs	r3, #128	@ 0x80
 801bf7e:	01db      	lsls	r3, r3, #7
 801bf80:	4013      	ands	r3, r2
 801bf82:	d016      	beq.n	801bfb2 <USB_ActivateEndpoint+0x50a>
 801bf84:	687a      	ldr	r2, [r7, #4]
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	781b      	ldrb	r3, [r3, #0]
 801bf8a:	009b      	lsls	r3, r3, #2
 801bf8c:	18d3      	adds	r3, r2, r3
 801bf8e:	881b      	ldrh	r3, [r3, #0]
 801bf90:	b29a      	uxth	r2, r3
 801bf92:	203e      	movs	r0, #62	@ 0x3e
 801bf94:	183b      	adds	r3, r7, r0
 801bf96:	496e      	ldr	r1, [pc, #440]	@ (801c150 <USB_ActivateEndpoint+0x6a8>)
 801bf98:	400a      	ands	r2, r1
 801bf9a:	801a      	strh	r2, [r3, #0]
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	781b      	ldrb	r3, [r3, #0]
 801bfa2:	009b      	lsls	r3, r3, #2
 801bfa4:	18d3      	adds	r3, r2, r3
 801bfa6:	183a      	adds	r2, r7, r0
 801bfa8:	8812      	ldrh	r2, [r2, #0]
 801bfaa:	496a      	ldr	r1, [pc, #424]	@ (801c154 <USB_ActivateEndpoint+0x6ac>)
 801bfac:	430a      	orrs	r2, r1
 801bfae:	b292      	uxth	r2, r2
 801bfb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801bfb2:	687a      	ldr	r2, [r7, #4]
 801bfb4:	683b      	ldr	r3, [r7, #0]
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	009b      	lsls	r3, r3, #2
 801bfba:	18d2      	adds	r2, r2, r3
 801bfbc:	213c      	movs	r1, #60	@ 0x3c
 801bfbe:	187b      	adds	r3, r7, r1
 801bfc0:	8812      	ldrh	r2, [r2, #0]
 801bfc2:	801a      	strh	r2, [r3, #0]
 801bfc4:	187b      	adds	r3, r7, r1
 801bfc6:	881b      	ldrh	r3, [r3, #0]
 801bfc8:	2240      	movs	r2, #64	@ 0x40
 801bfca:	4013      	ands	r3, r2
 801bfcc:	d016      	beq.n	801bffc <USB_ActivateEndpoint+0x554>
 801bfce:	687a      	ldr	r2, [r7, #4]
 801bfd0:	683b      	ldr	r3, [r7, #0]
 801bfd2:	781b      	ldrb	r3, [r3, #0]
 801bfd4:	009b      	lsls	r3, r3, #2
 801bfd6:	18d3      	adds	r3, r2, r3
 801bfd8:	881b      	ldrh	r3, [r3, #0]
 801bfda:	b29a      	uxth	r2, r3
 801bfdc:	203a      	movs	r0, #58	@ 0x3a
 801bfde:	183b      	adds	r3, r7, r0
 801bfe0:	495b      	ldr	r1, [pc, #364]	@ (801c150 <USB_ActivateEndpoint+0x6a8>)
 801bfe2:	400a      	ands	r2, r1
 801bfe4:	801a      	strh	r2, [r3, #0]
 801bfe6:	687a      	ldr	r2, [r7, #4]
 801bfe8:	683b      	ldr	r3, [r7, #0]
 801bfea:	781b      	ldrb	r3, [r3, #0]
 801bfec:	009b      	lsls	r3, r3, #2
 801bfee:	18d3      	adds	r3, r2, r3
 801bff0:	183a      	adds	r2, r7, r0
 801bff2:	8812      	ldrh	r2, [r2, #0]
 801bff4:	495d      	ldr	r1, [pc, #372]	@ (801c16c <USB_ActivateEndpoint+0x6c4>)
 801bff6:	430a      	orrs	r2, r1
 801bff8:	b292      	uxth	r2, r2
 801bffa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801bffc:	687a      	ldr	r2, [r7, #4]
 801bffe:	683b      	ldr	r3, [r7, #0]
 801c000:	781b      	ldrb	r3, [r3, #0]
 801c002:	009b      	lsls	r3, r3, #2
 801c004:	18d3      	adds	r3, r2, r3
 801c006:	881b      	ldrh	r3, [r3, #0]
 801c008:	b29a      	uxth	r2, r3
 801c00a:	2038      	movs	r0, #56	@ 0x38
 801c00c:	183b      	adds	r3, r7, r0
 801c00e:	4952      	ldr	r1, [pc, #328]	@ (801c158 <USB_ActivateEndpoint+0x6b0>)
 801c010:	400a      	ands	r2, r1
 801c012:	801a      	strh	r2, [r3, #0]
 801c014:	183b      	adds	r3, r7, r0
 801c016:	183a      	adds	r2, r7, r0
 801c018:	8812      	ldrh	r2, [r2, #0]
 801c01a:	2180      	movs	r1, #128	@ 0x80
 801c01c:	0149      	lsls	r1, r1, #5
 801c01e:	404a      	eors	r2, r1
 801c020:	801a      	strh	r2, [r3, #0]
 801c022:	183b      	adds	r3, r7, r0
 801c024:	183a      	adds	r2, r7, r0
 801c026:	8812      	ldrh	r2, [r2, #0]
 801c028:	2180      	movs	r1, #128	@ 0x80
 801c02a:	0189      	lsls	r1, r1, #6
 801c02c:	404a      	eors	r2, r1
 801c02e:	801a      	strh	r2, [r3, #0]
 801c030:	687a      	ldr	r2, [r7, #4]
 801c032:	683b      	ldr	r3, [r7, #0]
 801c034:	781b      	ldrb	r3, [r3, #0]
 801c036:	009b      	lsls	r3, r3, #2
 801c038:	18d3      	adds	r3, r2, r3
 801c03a:	183a      	adds	r2, r7, r0
 801c03c:	8812      	ldrh	r2, [r2, #0]
 801c03e:	4947      	ldr	r1, [pc, #284]	@ (801c15c <USB_ActivateEndpoint+0x6b4>)
 801c040:	430a      	orrs	r2, r1
 801c042:	b292      	uxth	r2, r2
 801c044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c046:	687a      	ldr	r2, [r7, #4]
 801c048:	683b      	ldr	r3, [r7, #0]
 801c04a:	781b      	ldrb	r3, [r3, #0]
 801c04c:	009b      	lsls	r3, r3, #2
 801c04e:	18d3      	adds	r3, r2, r3
 801c050:	881b      	ldrh	r3, [r3, #0]
 801c052:	b29a      	uxth	r2, r3
 801c054:	2036      	movs	r0, #54	@ 0x36
 801c056:	183b      	adds	r3, r7, r0
 801c058:	4945      	ldr	r1, [pc, #276]	@ (801c170 <USB_ActivateEndpoint+0x6c8>)
 801c05a:	400a      	ands	r2, r1
 801c05c:	801a      	strh	r2, [r3, #0]
 801c05e:	687a      	ldr	r2, [r7, #4]
 801c060:	683b      	ldr	r3, [r7, #0]
 801c062:	781b      	ldrb	r3, [r3, #0]
 801c064:	009b      	lsls	r3, r3, #2
 801c066:	18d3      	adds	r3, r2, r3
 801c068:	183a      	adds	r2, r7, r0
 801c06a:	8812      	ldrh	r2, [r2, #0]
 801c06c:	493b      	ldr	r1, [pc, #236]	@ (801c15c <USB_ActivateEndpoint+0x6b4>)
 801c06e:	430a      	orrs	r2, r1
 801c070:	b292      	uxth	r2, r2
 801c072:	801a      	strh	r2, [r3, #0]
 801c074:	e0ac      	b.n	801c1d0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c076:	687a      	ldr	r2, [r7, #4]
 801c078:	683b      	ldr	r3, [r7, #0]
 801c07a:	781b      	ldrb	r3, [r3, #0]
 801c07c:	009b      	lsls	r3, r3, #2
 801c07e:	18d2      	adds	r2, r2, r3
 801c080:	214e      	movs	r1, #78	@ 0x4e
 801c082:	187b      	adds	r3, r7, r1
 801c084:	8812      	ldrh	r2, [r2, #0]
 801c086:	801a      	strh	r2, [r3, #0]
 801c088:	187b      	adds	r3, r7, r1
 801c08a:	881a      	ldrh	r2, [r3, #0]
 801c08c:	2380      	movs	r3, #128	@ 0x80
 801c08e:	01db      	lsls	r3, r3, #7
 801c090:	4013      	ands	r3, r2
 801c092:	d016      	beq.n	801c0c2 <USB_ActivateEndpoint+0x61a>
 801c094:	687a      	ldr	r2, [r7, #4]
 801c096:	683b      	ldr	r3, [r7, #0]
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	009b      	lsls	r3, r3, #2
 801c09c:	18d3      	adds	r3, r2, r3
 801c09e:	881b      	ldrh	r3, [r3, #0]
 801c0a0:	b29a      	uxth	r2, r3
 801c0a2:	204c      	movs	r0, #76	@ 0x4c
 801c0a4:	183b      	adds	r3, r7, r0
 801c0a6:	492a      	ldr	r1, [pc, #168]	@ (801c150 <USB_ActivateEndpoint+0x6a8>)
 801c0a8:	400a      	ands	r2, r1
 801c0aa:	801a      	strh	r2, [r3, #0]
 801c0ac:	687a      	ldr	r2, [r7, #4]
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	781b      	ldrb	r3, [r3, #0]
 801c0b2:	009b      	lsls	r3, r3, #2
 801c0b4:	18d3      	adds	r3, r2, r3
 801c0b6:	183a      	adds	r2, r7, r0
 801c0b8:	8812      	ldrh	r2, [r2, #0]
 801c0ba:	4926      	ldr	r1, [pc, #152]	@ (801c154 <USB_ActivateEndpoint+0x6ac>)
 801c0bc:	430a      	orrs	r2, r1
 801c0be:	b292      	uxth	r2, r2
 801c0c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c0c2:	687a      	ldr	r2, [r7, #4]
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	781b      	ldrb	r3, [r3, #0]
 801c0c8:	009b      	lsls	r3, r3, #2
 801c0ca:	18d2      	adds	r2, r2, r3
 801c0cc:	214a      	movs	r1, #74	@ 0x4a
 801c0ce:	187b      	adds	r3, r7, r1
 801c0d0:	8812      	ldrh	r2, [r2, #0]
 801c0d2:	801a      	strh	r2, [r3, #0]
 801c0d4:	187b      	adds	r3, r7, r1
 801c0d6:	881b      	ldrh	r3, [r3, #0]
 801c0d8:	2240      	movs	r2, #64	@ 0x40
 801c0da:	4013      	ands	r3, r2
 801c0dc:	d016      	beq.n	801c10c <USB_ActivateEndpoint+0x664>
 801c0de:	687a      	ldr	r2, [r7, #4]
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	781b      	ldrb	r3, [r3, #0]
 801c0e4:	009b      	lsls	r3, r3, #2
 801c0e6:	18d3      	adds	r3, r2, r3
 801c0e8:	881b      	ldrh	r3, [r3, #0]
 801c0ea:	b29a      	uxth	r2, r3
 801c0ec:	2048      	movs	r0, #72	@ 0x48
 801c0ee:	183b      	adds	r3, r7, r0
 801c0f0:	4917      	ldr	r1, [pc, #92]	@ (801c150 <USB_ActivateEndpoint+0x6a8>)
 801c0f2:	400a      	ands	r2, r1
 801c0f4:	801a      	strh	r2, [r3, #0]
 801c0f6:	687a      	ldr	r2, [r7, #4]
 801c0f8:	683b      	ldr	r3, [r7, #0]
 801c0fa:	781b      	ldrb	r3, [r3, #0]
 801c0fc:	009b      	lsls	r3, r3, #2
 801c0fe:	18d3      	adds	r3, r2, r3
 801c100:	183a      	adds	r2, r7, r0
 801c102:	8812      	ldrh	r2, [r2, #0]
 801c104:	4919      	ldr	r1, [pc, #100]	@ (801c16c <USB_ActivateEndpoint+0x6c4>)
 801c106:	430a      	orrs	r2, r1
 801c108:	b292      	uxth	r2, r2
 801c10a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801c10c:	683b      	ldr	r3, [r7, #0]
 801c10e:	78db      	ldrb	r3, [r3, #3]
 801c110:	2b01      	cmp	r3, #1
 801c112:	d02f      	beq.n	801c174 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801c114:	687a      	ldr	r2, [r7, #4]
 801c116:	683b      	ldr	r3, [r7, #0]
 801c118:	781b      	ldrb	r3, [r3, #0]
 801c11a:	009b      	lsls	r3, r3, #2
 801c11c:	18d3      	adds	r3, r2, r3
 801c11e:	881b      	ldrh	r3, [r3, #0]
 801c120:	b29a      	uxth	r2, r3
 801c122:	2044      	movs	r0, #68	@ 0x44
 801c124:	183b      	adds	r3, r7, r0
 801c126:	4912      	ldr	r1, [pc, #72]	@ (801c170 <USB_ActivateEndpoint+0x6c8>)
 801c128:	400a      	ands	r2, r1
 801c12a:	801a      	strh	r2, [r3, #0]
 801c12c:	183b      	adds	r3, r7, r0
 801c12e:	183a      	adds	r2, r7, r0
 801c130:	8812      	ldrh	r2, [r2, #0]
 801c132:	2120      	movs	r1, #32
 801c134:	404a      	eors	r2, r1
 801c136:	801a      	strh	r2, [r3, #0]
 801c138:	687a      	ldr	r2, [r7, #4]
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	781b      	ldrb	r3, [r3, #0]
 801c13e:	009b      	lsls	r3, r3, #2
 801c140:	18d3      	adds	r3, r2, r3
 801c142:	183a      	adds	r2, r7, r0
 801c144:	8812      	ldrh	r2, [r2, #0]
 801c146:	4905      	ldr	r1, [pc, #20]	@ (801c15c <USB_ActivateEndpoint+0x6b4>)
 801c148:	430a      	orrs	r2, r1
 801c14a:	b292      	uxth	r2, r2
 801c14c:	801a      	strh	r2, [r3, #0]
 801c14e:	e028      	b.n	801c1a2 <USB_ActivateEndpoint+0x6fa>
 801c150:	ffff8f8f 	.word	0xffff8f8f
 801c154:	ffffc080 	.word	0xffffc080
 801c158:	ffffbf8f 	.word	0xffffbf8f
 801c15c:	ffff8080 	.word	0xffff8080
 801c160:	ffff8180 	.word	0xffff8180
 801c164:	ffff8e8f 	.word	0xffff8e8f
 801c168:	00000404 	.word	0x00000404
 801c16c:	ffff80c0 	.word	0xffff80c0
 801c170:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c174:	687a      	ldr	r2, [r7, #4]
 801c176:	683b      	ldr	r3, [r7, #0]
 801c178:	781b      	ldrb	r3, [r3, #0]
 801c17a:	009b      	lsls	r3, r3, #2
 801c17c:	18d3      	adds	r3, r2, r3
 801c17e:	881b      	ldrh	r3, [r3, #0]
 801c180:	b29a      	uxth	r2, r3
 801c182:	2046      	movs	r0, #70	@ 0x46
 801c184:	183b      	adds	r3, r7, r0
 801c186:	4916      	ldr	r1, [pc, #88]	@ (801c1e0 <USB_ActivateEndpoint+0x738>)
 801c188:	400a      	ands	r2, r1
 801c18a:	801a      	strh	r2, [r3, #0]
 801c18c:	687a      	ldr	r2, [r7, #4]
 801c18e:	683b      	ldr	r3, [r7, #0]
 801c190:	781b      	ldrb	r3, [r3, #0]
 801c192:	009b      	lsls	r3, r3, #2
 801c194:	18d3      	adds	r3, r2, r3
 801c196:	183a      	adds	r2, r7, r0
 801c198:	8812      	ldrh	r2, [r2, #0]
 801c19a:	4912      	ldr	r1, [pc, #72]	@ (801c1e4 <USB_ActivateEndpoint+0x73c>)
 801c19c:	430a      	orrs	r2, r1
 801c19e:	b292      	uxth	r2, r2
 801c1a0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c1a2:	687a      	ldr	r2, [r7, #4]
 801c1a4:	683b      	ldr	r3, [r7, #0]
 801c1a6:	781b      	ldrb	r3, [r3, #0]
 801c1a8:	009b      	lsls	r3, r3, #2
 801c1aa:	18d3      	adds	r3, r2, r3
 801c1ac:	881b      	ldrh	r3, [r3, #0]
 801c1ae:	b29a      	uxth	r2, r3
 801c1b0:	2042      	movs	r0, #66	@ 0x42
 801c1b2:	183b      	adds	r3, r7, r0
 801c1b4:	490c      	ldr	r1, [pc, #48]	@ (801c1e8 <USB_ActivateEndpoint+0x740>)
 801c1b6:	400a      	ands	r2, r1
 801c1b8:	801a      	strh	r2, [r3, #0]
 801c1ba:	687a      	ldr	r2, [r7, #4]
 801c1bc:	683b      	ldr	r3, [r7, #0]
 801c1be:	781b      	ldrb	r3, [r3, #0]
 801c1c0:	009b      	lsls	r3, r3, #2
 801c1c2:	18d3      	adds	r3, r2, r3
 801c1c4:	183a      	adds	r2, r7, r0
 801c1c6:	8812      	ldrh	r2, [r2, #0]
 801c1c8:	4906      	ldr	r1, [pc, #24]	@ (801c1e4 <USB_ActivateEndpoint+0x73c>)
 801c1ca:	430a      	orrs	r2, r1
 801c1cc:	b292      	uxth	r2, r2
 801c1ce:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801c1d0:	236f      	movs	r3, #111	@ 0x6f
 801c1d2:	18fb      	adds	r3, r7, r3
 801c1d4:	781b      	ldrb	r3, [r3, #0]
}
 801c1d6:	0018      	movs	r0, r3
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	b01c      	add	sp, #112	@ 0x70
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	46c0      	nop			@ (mov r8, r8)
 801c1e0:	ffff8fbf 	.word	0xffff8fbf
 801c1e4:	ffff8080 	.word	0xffff8080
 801c1e8:	ffffbf8f 	.word	0xffffbf8f

0801c1ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b08c      	sub	sp, #48	@ 0x30
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
 801c1f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	7b1b      	ldrb	r3, [r3, #12]
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d000      	beq.n	801c200 <USB_DeactivateEndpoint+0x14>
 801c1fe:	e07e      	b.n	801c2fe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801c200:	683b      	ldr	r3, [r7, #0]
 801c202:	785b      	ldrb	r3, [r3, #1]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d03c      	beq.n	801c282 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c208:	687a      	ldr	r2, [r7, #4]
 801c20a:	683b      	ldr	r3, [r7, #0]
 801c20c:	781b      	ldrb	r3, [r3, #0]
 801c20e:	009b      	lsls	r3, r3, #2
 801c210:	18d2      	adds	r2, r2, r3
 801c212:	210c      	movs	r1, #12
 801c214:	187b      	adds	r3, r7, r1
 801c216:	8812      	ldrh	r2, [r2, #0]
 801c218:	801a      	strh	r2, [r3, #0]
 801c21a:	187b      	adds	r3, r7, r1
 801c21c:	881b      	ldrh	r3, [r3, #0]
 801c21e:	2240      	movs	r2, #64	@ 0x40
 801c220:	4013      	ands	r3, r2
 801c222:	d016      	beq.n	801c252 <USB_DeactivateEndpoint+0x66>
 801c224:	687a      	ldr	r2, [r7, #4]
 801c226:	683b      	ldr	r3, [r7, #0]
 801c228:	781b      	ldrb	r3, [r3, #0]
 801c22a:	009b      	lsls	r3, r3, #2
 801c22c:	18d3      	adds	r3, r2, r3
 801c22e:	881b      	ldrh	r3, [r3, #0]
 801c230:	b29a      	uxth	r2, r3
 801c232:	200a      	movs	r0, #10
 801c234:	183b      	adds	r3, r7, r0
 801c236:	49c7      	ldr	r1, [pc, #796]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c238:	400a      	ands	r2, r1
 801c23a:	801a      	strh	r2, [r3, #0]
 801c23c:	687a      	ldr	r2, [r7, #4]
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	009b      	lsls	r3, r3, #2
 801c244:	18d3      	adds	r3, r2, r3
 801c246:	183a      	adds	r2, r7, r0
 801c248:	8812      	ldrh	r2, [r2, #0]
 801c24a:	49c3      	ldr	r1, [pc, #780]	@ (801c558 <USB_DeactivateEndpoint+0x36c>)
 801c24c:	430a      	orrs	r2, r1
 801c24e:	b292      	uxth	r2, r2
 801c250:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c252:	687a      	ldr	r2, [r7, #4]
 801c254:	683b      	ldr	r3, [r7, #0]
 801c256:	781b      	ldrb	r3, [r3, #0]
 801c258:	009b      	lsls	r3, r3, #2
 801c25a:	18d3      	adds	r3, r2, r3
 801c25c:	881b      	ldrh	r3, [r3, #0]
 801c25e:	b29a      	uxth	r2, r3
 801c260:	2008      	movs	r0, #8
 801c262:	183b      	adds	r3, r7, r0
 801c264:	49bd      	ldr	r1, [pc, #756]	@ (801c55c <USB_DeactivateEndpoint+0x370>)
 801c266:	400a      	ands	r2, r1
 801c268:	801a      	strh	r2, [r3, #0]
 801c26a:	687a      	ldr	r2, [r7, #4]
 801c26c:	683b      	ldr	r3, [r7, #0]
 801c26e:	781b      	ldrb	r3, [r3, #0]
 801c270:	009b      	lsls	r3, r3, #2
 801c272:	18d3      	adds	r3, r2, r3
 801c274:	183a      	adds	r2, r7, r0
 801c276:	8812      	ldrh	r2, [r2, #0]
 801c278:	49b9      	ldr	r1, [pc, #740]	@ (801c560 <USB_DeactivateEndpoint+0x374>)
 801c27a:	430a      	orrs	r2, r1
 801c27c:	b292      	uxth	r2, r2
 801c27e:	801a      	strh	r2, [r3, #0]
 801c280:	e163      	b.n	801c54a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	683b      	ldr	r3, [r7, #0]
 801c286:	781b      	ldrb	r3, [r3, #0]
 801c288:	009b      	lsls	r3, r3, #2
 801c28a:	18d2      	adds	r2, r2, r3
 801c28c:	2112      	movs	r1, #18
 801c28e:	187b      	adds	r3, r7, r1
 801c290:	8812      	ldrh	r2, [r2, #0]
 801c292:	801a      	strh	r2, [r3, #0]
 801c294:	187b      	adds	r3, r7, r1
 801c296:	881a      	ldrh	r2, [r3, #0]
 801c298:	2380      	movs	r3, #128	@ 0x80
 801c29a:	01db      	lsls	r3, r3, #7
 801c29c:	4013      	ands	r3, r2
 801c29e:	d016      	beq.n	801c2ce <USB_DeactivateEndpoint+0xe2>
 801c2a0:	687a      	ldr	r2, [r7, #4]
 801c2a2:	683b      	ldr	r3, [r7, #0]
 801c2a4:	781b      	ldrb	r3, [r3, #0]
 801c2a6:	009b      	lsls	r3, r3, #2
 801c2a8:	18d3      	adds	r3, r2, r3
 801c2aa:	881b      	ldrh	r3, [r3, #0]
 801c2ac:	b29a      	uxth	r2, r3
 801c2ae:	2010      	movs	r0, #16
 801c2b0:	183b      	adds	r3, r7, r0
 801c2b2:	49a8      	ldr	r1, [pc, #672]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c2b4:	400a      	ands	r2, r1
 801c2b6:	801a      	strh	r2, [r3, #0]
 801c2b8:	687a      	ldr	r2, [r7, #4]
 801c2ba:	683b      	ldr	r3, [r7, #0]
 801c2bc:	781b      	ldrb	r3, [r3, #0]
 801c2be:	009b      	lsls	r3, r3, #2
 801c2c0:	18d3      	adds	r3, r2, r3
 801c2c2:	183a      	adds	r2, r7, r0
 801c2c4:	8812      	ldrh	r2, [r2, #0]
 801c2c6:	49a7      	ldr	r1, [pc, #668]	@ (801c564 <USB_DeactivateEndpoint+0x378>)
 801c2c8:	430a      	orrs	r2, r1
 801c2ca:	b292      	uxth	r2, r2
 801c2cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c2ce:	687a      	ldr	r2, [r7, #4]
 801c2d0:	683b      	ldr	r3, [r7, #0]
 801c2d2:	781b      	ldrb	r3, [r3, #0]
 801c2d4:	009b      	lsls	r3, r3, #2
 801c2d6:	18d3      	adds	r3, r2, r3
 801c2d8:	881b      	ldrh	r3, [r3, #0]
 801c2da:	b29a      	uxth	r2, r3
 801c2dc:	200e      	movs	r0, #14
 801c2de:	183b      	adds	r3, r7, r0
 801c2e0:	49a1      	ldr	r1, [pc, #644]	@ (801c568 <USB_DeactivateEndpoint+0x37c>)
 801c2e2:	400a      	ands	r2, r1
 801c2e4:	801a      	strh	r2, [r3, #0]
 801c2e6:	687a      	ldr	r2, [r7, #4]
 801c2e8:	683b      	ldr	r3, [r7, #0]
 801c2ea:	781b      	ldrb	r3, [r3, #0]
 801c2ec:	009b      	lsls	r3, r3, #2
 801c2ee:	18d3      	adds	r3, r2, r3
 801c2f0:	183a      	adds	r2, r7, r0
 801c2f2:	8812      	ldrh	r2, [r2, #0]
 801c2f4:	499a      	ldr	r1, [pc, #616]	@ (801c560 <USB_DeactivateEndpoint+0x374>)
 801c2f6:	430a      	orrs	r2, r1
 801c2f8:	b292      	uxth	r2, r2
 801c2fa:	801a      	strh	r2, [r3, #0]
 801c2fc:	e125      	b.n	801c54a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	785b      	ldrb	r3, [r3, #1]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d000      	beq.n	801c308 <USB_DeactivateEndpoint+0x11c>
 801c306:	e090      	b.n	801c42a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c308:	687a      	ldr	r2, [r7, #4]
 801c30a:	683b      	ldr	r3, [r7, #0]
 801c30c:	781b      	ldrb	r3, [r3, #0]
 801c30e:	009b      	lsls	r3, r3, #2
 801c310:	18d2      	adds	r2, r2, r3
 801c312:	2120      	movs	r1, #32
 801c314:	187b      	adds	r3, r7, r1
 801c316:	8812      	ldrh	r2, [r2, #0]
 801c318:	801a      	strh	r2, [r3, #0]
 801c31a:	187b      	adds	r3, r7, r1
 801c31c:	881a      	ldrh	r2, [r3, #0]
 801c31e:	2380      	movs	r3, #128	@ 0x80
 801c320:	01db      	lsls	r3, r3, #7
 801c322:	4013      	ands	r3, r2
 801c324:	d016      	beq.n	801c354 <USB_DeactivateEndpoint+0x168>
 801c326:	687a      	ldr	r2, [r7, #4]
 801c328:	683b      	ldr	r3, [r7, #0]
 801c32a:	781b      	ldrb	r3, [r3, #0]
 801c32c:	009b      	lsls	r3, r3, #2
 801c32e:	18d3      	adds	r3, r2, r3
 801c330:	881b      	ldrh	r3, [r3, #0]
 801c332:	b29a      	uxth	r2, r3
 801c334:	201e      	movs	r0, #30
 801c336:	183b      	adds	r3, r7, r0
 801c338:	4986      	ldr	r1, [pc, #536]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c33a:	400a      	ands	r2, r1
 801c33c:	801a      	strh	r2, [r3, #0]
 801c33e:	687a      	ldr	r2, [r7, #4]
 801c340:	683b      	ldr	r3, [r7, #0]
 801c342:	781b      	ldrb	r3, [r3, #0]
 801c344:	009b      	lsls	r3, r3, #2
 801c346:	18d3      	adds	r3, r2, r3
 801c348:	183a      	adds	r2, r7, r0
 801c34a:	8812      	ldrh	r2, [r2, #0]
 801c34c:	4985      	ldr	r1, [pc, #532]	@ (801c564 <USB_DeactivateEndpoint+0x378>)
 801c34e:	430a      	orrs	r2, r1
 801c350:	b292      	uxth	r2, r2
 801c352:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c354:	687a      	ldr	r2, [r7, #4]
 801c356:	683b      	ldr	r3, [r7, #0]
 801c358:	781b      	ldrb	r3, [r3, #0]
 801c35a:	009b      	lsls	r3, r3, #2
 801c35c:	18d2      	adds	r2, r2, r3
 801c35e:	211c      	movs	r1, #28
 801c360:	187b      	adds	r3, r7, r1
 801c362:	8812      	ldrh	r2, [r2, #0]
 801c364:	801a      	strh	r2, [r3, #0]
 801c366:	187b      	adds	r3, r7, r1
 801c368:	881b      	ldrh	r3, [r3, #0]
 801c36a:	2240      	movs	r2, #64	@ 0x40
 801c36c:	4013      	ands	r3, r2
 801c36e:	d016      	beq.n	801c39e <USB_DeactivateEndpoint+0x1b2>
 801c370:	687a      	ldr	r2, [r7, #4]
 801c372:	683b      	ldr	r3, [r7, #0]
 801c374:	781b      	ldrb	r3, [r3, #0]
 801c376:	009b      	lsls	r3, r3, #2
 801c378:	18d3      	adds	r3, r2, r3
 801c37a:	881b      	ldrh	r3, [r3, #0]
 801c37c:	b29a      	uxth	r2, r3
 801c37e:	201a      	movs	r0, #26
 801c380:	183b      	adds	r3, r7, r0
 801c382:	4974      	ldr	r1, [pc, #464]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c384:	400a      	ands	r2, r1
 801c386:	801a      	strh	r2, [r3, #0]
 801c388:	687a      	ldr	r2, [r7, #4]
 801c38a:	683b      	ldr	r3, [r7, #0]
 801c38c:	781b      	ldrb	r3, [r3, #0]
 801c38e:	009b      	lsls	r3, r3, #2
 801c390:	18d3      	adds	r3, r2, r3
 801c392:	183a      	adds	r2, r7, r0
 801c394:	8812      	ldrh	r2, [r2, #0]
 801c396:	4970      	ldr	r1, [pc, #448]	@ (801c558 <USB_DeactivateEndpoint+0x36c>)
 801c398:	430a      	orrs	r2, r1
 801c39a:	b292      	uxth	r2, r2
 801c39c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801c39e:	687a      	ldr	r2, [r7, #4]
 801c3a0:	683b      	ldr	r3, [r7, #0]
 801c3a2:	781b      	ldrb	r3, [r3, #0]
 801c3a4:	009b      	lsls	r3, r3, #2
 801c3a6:	18d3      	adds	r3, r2, r3
 801c3a8:	881b      	ldrh	r3, [r3, #0]
 801c3aa:	b29a      	uxth	r2, r3
 801c3ac:	2018      	movs	r0, #24
 801c3ae:	183b      	adds	r3, r7, r0
 801c3b0:	4968      	ldr	r1, [pc, #416]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c3b2:	400a      	ands	r2, r1
 801c3b4:	801a      	strh	r2, [r3, #0]
 801c3b6:	687a      	ldr	r2, [r7, #4]
 801c3b8:	683b      	ldr	r3, [r7, #0]
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	009b      	lsls	r3, r3, #2
 801c3be:	18d3      	adds	r3, r2, r3
 801c3c0:	183a      	adds	r2, r7, r0
 801c3c2:	8812      	ldrh	r2, [r2, #0]
 801c3c4:	4964      	ldr	r1, [pc, #400]	@ (801c558 <USB_DeactivateEndpoint+0x36c>)
 801c3c6:	430a      	orrs	r2, r1
 801c3c8:	b292      	uxth	r2, r2
 801c3ca:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c3cc:	687a      	ldr	r2, [r7, #4]
 801c3ce:	683b      	ldr	r3, [r7, #0]
 801c3d0:	781b      	ldrb	r3, [r3, #0]
 801c3d2:	009b      	lsls	r3, r3, #2
 801c3d4:	18d3      	adds	r3, r2, r3
 801c3d6:	881b      	ldrh	r3, [r3, #0]
 801c3d8:	b29a      	uxth	r2, r3
 801c3da:	2016      	movs	r0, #22
 801c3dc:	183b      	adds	r3, r7, r0
 801c3de:	4962      	ldr	r1, [pc, #392]	@ (801c568 <USB_DeactivateEndpoint+0x37c>)
 801c3e0:	400a      	ands	r2, r1
 801c3e2:	801a      	strh	r2, [r3, #0]
 801c3e4:	687a      	ldr	r2, [r7, #4]
 801c3e6:	683b      	ldr	r3, [r7, #0]
 801c3e8:	781b      	ldrb	r3, [r3, #0]
 801c3ea:	009b      	lsls	r3, r3, #2
 801c3ec:	18d3      	adds	r3, r2, r3
 801c3ee:	183a      	adds	r2, r7, r0
 801c3f0:	8812      	ldrh	r2, [r2, #0]
 801c3f2:	495b      	ldr	r1, [pc, #364]	@ (801c560 <USB_DeactivateEndpoint+0x374>)
 801c3f4:	430a      	orrs	r2, r1
 801c3f6:	b292      	uxth	r2, r2
 801c3f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c3fa:	687a      	ldr	r2, [r7, #4]
 801c3fc:	683b      	ldr	r3, [r7, #0]
 801c3fe:	781b      	ldrb	r3, [r3, #0]
 801c400:	009b      	lsls	r3, r3, #2
 801c402:	18d3      	adds	r3, r2, r3
 801c404:	881b      	ldrh	r3, [r3, #0]
 801c406:	b29a      	uxth	r2, r3
 801c408:	2014      	movs	r0, #20
 801c40a:	183b      	adds	r3, r7, r0
 801c40c:	4953      	ldr	r1, [pc, #332]	@ (801c55c <USB_DeactivateEndpoint+0x370>)
 801c40e:	400a      	ands	r2, r1
 801c410:	801a      	strh	r2, [r3, #0]
 801c412:	687a      	ldr	r2, [r7, #4]
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	781b      	ldrb	r3, [r3, #0]
 801c418:	009b      	lsls	r3, r3, #2
 801c41a:	18d3      	adds	r3, r2, r3
 801c41c:	183a      	adds	r2, r7, r0
 801c41e:	8812      	ldrh	r2, [r2, #0]
 801c420:	494f      	ldr	r1, [pc, #316]	@ (801c560 <USB_DeactivateEndpoint+0x374>)
 801c422:	430a      	orrs	r2, r1
 801c424:	b292      	uxth	r2, r2
 801c426:	801a      	strh	r2, [r3, #0]
 801c428:	e08f      	b.n	801c54a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801c42a:	687a      	ldr	r2, [r7, #4]
 801c42c:	683b      	ldr	r3, [r7, #0]
 801c42e:	781b      	ldrb	r3, [r3, #0]
 801c430:	009b      	lsls	r3, r3, #2
 801c432:	18d2      	adds	r2, r2, r3
 801c434:	212e      	movs	r1, #46	@ 0x2e
 801c436:	187b      	adds	r3, r7, r1
 801c438:	8812      	ldrh	r2, [r2, #0]
 801c43a:	801a      	strh	r2, [r3, #0]
 801c43c:	187b      	adds	r3, r7, r1
 801c43e:	881a      	ldrh	r2, [r3, #0]
 801c440:	2380      	movs	r3, #128	@ 0x80
 801c442:	01db      	lsls	r3, r3, #7
 801c444:	4013      	ands	r3, r2
 801c446:	d016      	beq.n	801c476 <USB_DeactivateEndpoint+0x28a>
 801c448:	687a      	ldr	r2, [r7, #4]
 801c44a:	683b      	ldr	r3, [r7, #0]
 801c44c:	781b      	ldrb	r3, [r3, #0]
 801c44e:	009b      	lsls	r3, r3, #2
 801c450:	18d3      	adds	r3, r2, r3
 801c452:	881b      	ldrh	r3, [r3, #0]
 801c454:	b29a      	uxth	r2, r3
 801c456:	202c      	movs	r0, #44	@ 0x2c
 801c458:	183b      	adds	r3, r7, r0
 801c45a:	493e      	ldr	r1, [pc, #248]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c45c:	400a      	ands	r2, r1
 801c45e:	801a      	strh	r2, [r3, #0]
 801c460:	687a      	ldr	r2, [r7, #4]
 801c462:	683b      	ldr	r3, [r7, #0]
 801c464:	781b      	ldrb	r3, [r3, #0]
 801c466:	009b      	lsls	r3, r3, #2
 801c468:	18d3      	adds	r3, r2, r3
 801c46a:	183a      	adds	r2, r7, r0
 801c46c:	8812      	ldrh	r2, [r2, #0]
 801c46e:	493d      	ldr	r1, [pc, #244]	@ (801c564 <USB_DeactivateEndpoint+0x378>)
 801c470:	430a      	orrs	r2, r1
 801c472:	b292      	uxth	r2, r2
 801c474:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801c476:	687a      	ldr	r2, [r7, #4]
 801c478:	683b      	ldr	r3, [r7, #0]
 801c47a:	781b      	ldrb	r3, [r3, #0]
 801c47c:	009b      	lsls	r3, r3, #2
 801c47e:	18d2      	adds	r2, r2, r3
 801c480:	212a      	movs	r1, #42	@ 0x2a
 801c482:	187b      	adds	r3, r7, r1
 801c484:	8812      	ldrh	r2, [r2, #0]
 801c486:	801a      	strh	r2, [r3, #0]
 801c488:	187b      	adds	r3, r7, r1
 801c48a:	881b      	ldrh	r3, [r3, #0]
 801c48c:	2240      	movs	r2, #64	@ 0x40
 801c48e:	4013      	ands	r3, r2
 801c490:	d016      	beq.n	801c4c0 <USB_DeactivateEndpoint+0x2d4>
 801c492:	687a      	ldr	r2, [r7, #4]
 801c494:	683b      	ldr	r3, [r7, #0]
 801c496:	781b      	ldrb	r3, [r3, #0]
 801c498:	009b      	lsls	r3, r3, #2
 801c49a:	18d3      	adds	r3, r2, r3
 801c49c:	881b      	ldrh	r3, [r3, #0]
 801c49e:	b29a      	uxth	r2, r3
 801c4a0:	2028      	movs	r0, #40	@ 0x28
 801c4a2:	183b      	adds	r3, r7, r0
 801c4a4:	492b      	ldr	r1, [pc, #172]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c4a6:	400a      	ands	r2, r1
 801c4a8:	801a      	strh	r2, [r3, #0]
 801c4aa:	687a      	ldr	r2, [r7, #4]
 801c4ac:	683b      	ldr	r3, [r7, #0]
 801c4ae:	781b      	ldrb	r3, [r3, #0]
 801c4b0:	009b      	lsls	r3, r3, #2
 801c4b2:	18d3      	adds	r3, r2, r3
 801c4b4:	183a      	adds	r2, r7, r0
 801c4b6:	8812      	ldrh	r2, [r2, #0]
 801c4b8:	4927      	ldr	r1, [pc, #156]	@ (801c558 <USB_DeactivateEndpoint+0x36c>)
 801c4ba:	430a      	orrs	r2, r1
 801c4bc:	b292      	uxth	r2, r2
 801c4be:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801c4c0:	687a      	ldr	r2, [r7, #4]
 801c4c2:	683b      	ldr	r3, [r7, #0]
 801c4c4:	781b      	ldrb	r3, [r3, #0]
 801c4c6:	009b      	lsls	r3, r3, #2
 801c4c8:	18d3      	adds	r3, r2, r3
 801c4ca:	881b      	ldrh	r3, [r3, #0]
 801c4cc:	b29a      	uxth	r2, r3
 801c4ce:	2026      	movs	r0, #38	@ 0x26
 801c4d0:	183b      	adds	r3, r7, r0
 801c4d2:	4920      	ldr	r1, [pc, #128]	@ (801c554 <USB_DeactivateEndpoint+0x368>)
 801c4d4:	400a      	ands	r2, r1
 801c4d6:	801a      	strh	r2, [r3, #0]
 801c4d8:	687a      	ldr	r2, [r7, #4]
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	781b      	ldrb	r3, [r3, #0]
 801c4de:	009b      	lsls	r3, r3, #2
 801c4e0:	18d3      	adds	r3, r2, r3
 801c4e2:	183a      	adds	r2, r7, r0
 801c4e4:	8812      	ldrh	r2, [r2, #0]
 801c4e6:	491f      	ldr	r1, [pc, #124]	@ (801c564 <USB_DeactivateEndpoint+0x378>)
 801c4e8:	430a      	orrs	r2, r1
 801c4ea:	b292      	uxth	r2, r2
 801c4ec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801c4ee:	687a      	ldr	r2, [r7, #4]
 801c4f0:	683b      	ldr	r3, [r7, #0]
 801c4f2:	781b      	ldrb	r3, [r3, #0]
 801c4f4:	009b      	lsls	r3, r3, #2
 801c4f6:	18d3      	adds	r3, r2, r3
 801c4f8:	881b      	ldrh	r3, [r3, #0]
 801c4fa:	b29a      	uxth	r2, r3
 801c4fc:	2024      	movs	r0, #36	@ 0x24
 801c4fe:	183b      	adds	r3, r7, r0
 801c500:	4916      	ldr	r1, [pc, #88]	@ (801c55c <USB_DeactivateEndpoint+0x370>)
 801c502:	400a      	ands	r2, r1
 801c504:	801a      	strh	r2, [r3, #0]
 801c506:	687a      	ldr	r2, [r7, #4]
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	781b      	ldrb	r3, [r3, #0]
 801c50c:	009b      	lsls	r3, r3, #2
 801c50e:	18d3      	adds	r3, r2, r3
 801c510:	183a      	adds	r2, r7, r0
 801c512:	8812      	ldrh	r2, [r2, #0]
 801c514:	4912      	ldr	r1, [pc, #72]	@ (801c560 <USB_DeactivateEndpoint+0x374>)
 801c516:	430a      	orrs	r2, r1
 801c518:	b292      	uxth	r2, r2
 801c51a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801c51c:	687a      	ldr	r2, [r7, #4]
 801c51e:	683b      	ldr	r3, [r7, #0]
 801c520:	781b      	ldrb	r3, [r3, #0]
 801c522:	009b      	lsls	r3, r3, #2
 801c524:	18d3      	adds	r3, r2, r3
 801c526:	881b      	ldrh	r3, [r3, #0]
 801c528:	b29a      	uxth	r2, r3
 801c52a:	2022      	movs	r0, #34	@ 0x22
 801c52c:	183b      	adds	r3, r7, r0
 801c52e:	490e      	ldr	r1, [pc, #56]	@ (801c568 <USB_DeactivateEndpoint+0x37c>)
 801c530:	400a      	ands	r2, r1
 801c532:	801a      	strh	r2, [r3, #0]
 801c534:	687a      	ldr	r2, [r7, #4]
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	781b      	ldrb	r3, [r3, #0]
 801c53a:	009b      	lsls	r3, r3, #2
 801c53c:	18d3      	adds	r3, r2, r3
 801c53e:	183a      	adds	r2, r7, r0
 801c540:	8812      	ldrh	r2, [r2, #0]
 801c542:	4907      	ldr	r1, [pc, #28]	@ (801c560 <USB_DeactivateEndpoint+0x374>)
 801c544:	430a      	orrs	r2, r1
 801c546:	b292      	uxth	r2, r2
 801c548:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801c54a:	2300      	movs	r3, #0
}
 801c54c:	0018      	movs	r0, r3
 801c54e:	46bd      	mov	sp, r7
 801c550:	b00c      	add	sp, #48	@ 0x30
 801c552:	bd80      	pop	{r7, pc}
 801c554:	ffff8f8f 	.word	0xffff8f8f
 801c558:	ffff80c0 	.word	0xffff80c0
 801c55c:	ffff8fbf 	.word	0xffff8fbf
 801c560:	ffff8080 	.word	0xffff8080
 801c564:	ffffc080 	.word	0xffffc080
 801c568:	ffffbf8f 	.word	0xffffbf8f

0801c56c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c56c:	b590      	push	{r4, r7, lr}
 801c56e:	b0c3      	sub	sp, #268	@ 0x10c
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801c576:	683b      	ldr	r3, [r7, #0]
 801c578:	785b      	ldrb	r3, [r3, #1]
 801c57a:	2b01      	cmp	r3, #1
 801c57c:	d001      	beq.n	801c582 <USB_EPStartXfer+0x16>
 801c57e:	f000 fd2d 	bl	801cfdc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801c582:	683b      	ldr	r3, [r7, #0]
 801c584:	699a      	ldr	r2, [r3, #24]
 801c586:	683b      	ldr	r3, [r7, #0]
 801c588:	691b      	ldr	r3, [r3, #16]
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d905      	bls.n	801c59a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801c58e:	683b      	ldr	r3, [r7, #0]
 801c590:	691b      	ldr	r3, [r3, #16]
 801c592:	1d7a      	adds	r2, r7, #5
 801c594:	32ff      	adds	r2, #255	@ 0xff
 801c596:	6013      	str	r3, [r2, #0]
 801c598:	e004      	b.n	801c5a4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801c59a:	683b      	ldr	r3, [r7, #0]
 801c59c:	699b      	ldr	r3, [r3, #24]
 801c59e:	1d7a      	adds	r2, r7, #5
 801c5a0:	32ff      	adds	r2, #255	@ 0xff
 801c5a2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801c5a4:	683b      	ldr	r3, [r7, #0]
 801c5a6:	7b1b      	ldrb	r3, [r3, #12]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d125      	bne.n	801c5f8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801c5ac:	683b      	ldr	r3, [r7, #0]
 801c5ae:	6959      	ldr	r1, [r3, #20]
 801c5b0:	683b      	ldr	r3, [r7, #0]
 801c5b2:	88da      	ldrh	r2, [r3, #6]
 801c5b4:	1d7b      	adds	r3, r7, #5
 801c5b6:	33ff      	adds	r3, #255	@ 0xff
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	b29b      	uxth	r3, r3
 801c5bc:	6878      	ldr	r0, [r7, #4]
 801c5be:	f001 fa47 	bl	801da50 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	613b      	str	r3, [r7, #16]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	2250      	movs	r2, #80	@ 0x50
 801c5ca:	5a9b      	ldrh	r3, [r3, r2]
 801c5cc:	b29b      	uxth	r3, r3
 801c5ce:	001a      	movs	r2, r3
 801c5d0:	693b      	ldr	r3, [r7, #16]
 801c5d2:	189b      	adds	r3, r3, r2
 801c5d4:	613b      	str	r3, [r7, #16]
 801c5d6:	683b      	ldr	r3, [r7, #0]
 801c5d8:	781b      	ldrb	r3, [r3, #0]
 801c5da:	00da      	lsls	r2, r3, #3
 801c5dc:	693b      	ldr	r3, [r7, #16]
 801c5de:	18d3      	adds	r3, r2, r3
 801c5e0:	4ad7      	ldr	r2, [pc, #860]	@ (801c940 <USB_EPStartXfer+0x3d4>)
 801c5e2:	4694      	mov	ip, r2
 801c5e4:	4463      	add	r3, ip
 801c5e6:	60fb      	str	r3, [r7, #12]
 801c5e8:	1d7b      	adds	r3, r7, #5
 801c5ea:	33ff      	adds	r3, #255	@ 0xff
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	b29a      	uxth	r2, r3
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	801a      	strh	r2, [r3, #0]
 801c5f4:	f000 fccd 	bl	801cf92 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	78db      	ldrb	r3, [r3, #3]
 801c5fc:	2b02      	cmp	r3, #2
 801c5fe:	d000      	beq.n	801c602 <USB_EPStartXfer+0x96>
 801c600:	e362      	b.n	801ccc8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801c602:	683b      	ldr	r3, [r7, #0]
 801c604:	6a1a      	ldr	r2, [r3, #32]
 801c606:	683b      	ldr	r3, [r7, #0]
 801c608:	691b      	ldr	r3, [r3, #16]
 801c60a:	429a      	cmp	r2, r3
 801c60c:	d800      	bhi.n	801c610 <USB_EPStartXfer+0xa4>
 801c60e:	e309      	b.n	801cc24 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801c610:	687a      	ldr	r2, [r7, #4]
 801c612:	683b      	ldr	r3, [r7, #0]
 801c614:	781b      	ldrb	r3, [r3, #0]
 801c616:	009b      	lsls	r3, r3, #2
 801c618:	18d3      	adds	r3, r2, r3
 801c61a:	881b      	ldrh	r3, [r3, #0]
 801c61c:	b29a      	uxth	r2, r3
 801c61e:	2056      	movs	r0, #86	@ 0x56
 801c620:	183b      	adds	r3, r7, r0
 801c622:	49c8      	ldr	r1, [pc, #800]	@ (801c944 <USB_EPStartXfer+0x3d8>)
 801c624:	400a      	ands	r2, r1
 801c626:	801a      	strh	r2, [r3, #0]
 801c628:	687a      	ldr	r2, [r7, #4]
 801c62a:	683b      	ldr	r3, [r7, #0]
 801c62c:	781b      	ldrb	r3, [r3, #0]
 801c62e:	009b      	lsls	r3, r3, #2
 801c630:	18d3      	adds	r3, r2, r3
 801c632:	183a      	adds	r2, r7, r0
 801c634:	8812      	ldrh	r2, [r2, #0]
 801c636:	49c4      	ldr	r1, [pc, #784]	@ (801c948 <USB_EPStartXfer+0x3dc>)
 801c638:	430a      	orrs	r2, r1
 801c63a:	b292      	uxth	r2, r2
 801c63c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	6a1a      	ldr	r2, [r3, #32]
 801c642:	1d7b      	adds	r3, r7, #5
 801c644:	33ff      	adds	r3, #255	@ 0xff
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	1ad2      	subs	r2, r2, r3
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	683b      	ldr	r3, [r7, #0]
 801c652:	781b      	ldrb	r3, [r3, #0]
 801c654:	009b      	lsls	r3, r3, #2
 801c656:	18d3      	adds	r3, r2, r3
 801c658:	881b      	ldrh	r3, [r3, #0]
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	001a      	movs	r2, r3
 801c65e:	2340      	movs	r3, #64	@ 0x40
 801c660:	4013      	ands	r3, r2
 801c662:	d100      	bne.n	801c666 <USB_EPStartXfer+0xfa>
 801c664:	e176      	b.n	801c954 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	633b      	str	r3, [r7, #48]	@ 0x30
 801c66a:	683b      	ldr	r3, [r7, #0]
 801c66c:	785b      	ldrb	r3, [r3, #1]
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d000      	beq.n	801c674 <USB_EPStartXfer+0x108>
 801c672:	e074      	b.n	801c75e <USB_EPStartXfer+0x1f2>
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	2250      	movs	r2, #80	@ 0x50
 801c67c:	5a9b      	ldrh	r3, [r3, r2]
 801c67e:	b29b      	uxth	r3, r3
 801c680:	001a      	movs	r2, r3
 801c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c684:	189b      	adds	r3, r3, r2
 801c686:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c688:	683b      	ldr	r3, [r7, #0]
 801c68a:	781b      	ldrb	r3, [r3, #0]
 801c68c:	00da      	lsls	r2, r3, #3
 801c68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c690:	18d3      	adds	r3, r2, r3
 801c692:	4aae      	ldr	r2, [pc, #696]	@ (801c94c <USB_EPStartXfer+0x3e0>)
 801c694:	4694      	mov	ip, r2
 801c696:	4463      	add	r3, ip
 801c698:	627b      	str	r3, [r7, #36]	@ 0x24
 801c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c69c:	881b      	ldrh	r3, [r3, #0]
 801c69e:	b29b      	uxth	r3, r3
 801c6a0:	059b      	lsls	r3, r3, #22
 801c6a2:	0d9b      	lsrs	r3, r3, #22
 801c6a4:	b29a      	uxth	r2, r3
 801c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6a8:	801a      	strh	r2, [r3, #0]
 801c6aa:	1d7b      	adds	r3, r7, #5
 801c6ac:	33ff      	adds	r3, #255	@ 0xff
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	2b3e      	cmp	r3, #62	@ 0x3e
 801c6b2:	d924      	bls.n	801c6fe <USB_EPStartXfer+0x192>
 801c6b4:	1d7b      	adds	r3, r7, #5
 801c6b6:	33ff      	adds	r3, #255	@ 0xff
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	095b      	lsrs	r3, r3, #5
 801c6bc:	1c7a      	adds	r2, r7, #1
 801c6be:	32ff      	adds	r2, #255	@ 0xff
 801c6c0:	6013      	str	r3, [r2, #0]
 801c6c2:	1d7b      	adds	r3, r7, #5
 801c6c4:	33ff      	adds	r3, #255	@ 0xff
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	221f      	movs	r2, #31
 801c6ca:	4013      	ands	r3, r2
 801c6cc:	d106      	bne.n	801c6dc <USB_EPStartXfer+0x170>
 801c6ce:	1c7b      	adds	r3, r7, #1
 801c6d0:	33ff      	adds	r3, #255	@ 0xff
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	3b01      	subs	r3, #1
 801c6d6:	1c7a      	adds	r2, r7, #1
 801c6d8:	32ff      	adds	r2, #255	@ 0xff
 801c6da:	6013      	str	r3, [r2, #0]
 801c6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6de:	881b      	ldrh	r3, [r3, #0]
 801c6e0:	b29a      	uxth	r2, r3
 801c6e2:	1c7b      	adds	r3, r7, #1
 801c6e4:	33ff      	adds	r3, #255	@ 0xff
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	b29b      	uxth	r3, r3
 801c6ea:	029b      	lsls	r3, r3, #10
 801c6ec:	b29b      	uxth	r3, r3
 801c6ee:	4313      	orrs	r3, r2
 801c6f0:	b29b      	uxth	r3, r3
 801c6f2:	4a97      	ldr	r2, [pc, #604]	@ (801c950 <USB_EPStartXfer+0x3e4>)
 801c6f4:	4313      	orrs	r3, r2
 801c6f6:	b29a      	uxth	r2, r3
 801c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6fa:	801a      	strh	r2, [r3, #0]
 801c6fc:	e04a      	b.n	801c794 <USB_EPStartXfer+0x228>
 801c6fe:	1d7b      	adds	r3, r7, #5
 801c700:	33ff      	adds	r3, #255	@ 0xff
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d108      	bne.n	801c71a <USB_EPStartXfer+0x1ae>
 801c708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c70a:	881b      	ldrh	r3, [r3, #0]
 801c70c:	b29b      	uxth	r3, r3
 801c70e:	4a90      	ldr	r2, [pc, #576]	@ (801c950 <USB_EPStartXfer+0x3e4>)
 801c710:	4313      	orrs	r3, r2
 801c712:	b29a      	uxth	r2, r3
 801c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c716:	801a      	strh	r2, [r3, #0]
 801c718:	e03c      	b.n	801c794 <USB_EPStartXfer+0x228>
 801c71a:	1d7b      	adds	r3, r7, #5
 801c71c:	33ff      	adds	r3, #255	@ 0xff
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	085b      	lsrs	r3, r3, #1
 801c722:	1c7a      	adds	r2, r7, #1
 801c724:	32ff      	adds	r2, #255	@ 0xff
 801c726:	6013      	str	r3, [r2, #0]
 801c728:	1d7b      	adds	r3, r7, #5
 801c72a:	33ff      	adds	r3, #255	@ 0xff
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	2201      	movs	r2, #1
 801c730:	4013      	ands	r3, r2
 801c732:	d006      	beq.n	801c742 <USB_EPStartXfer+0x1d6>
 801c734:	1c7b      	adds	r3, r7, #1
 801c736:	33ff      	adds	r3, #255	@ 0xff
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	3301      	adds	r3, #1
 801c73c:	1c7a      	adds	r2, r7, #1
 801c73e:	32ff      	adds	r2, #255	@ 0xff
 801c740:	6013      	str	r3, [r2, #0]
 801c742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c744:	881b      	ldrh	r3, [r3, #0]
 801c746:	b29a      	uxth	r2, r3
 801c748:	1c7b      	adds	r3, r7, #1
 801c74a:	33ff      	adds	r3, #255	@ 0xff
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	b29b      	uxth	r3, r3
 801c750:	029b      	lsls	r3, r3, #10
 801c752:	b29b      	uxth	r3, r3
 801c754:	4313      	orrs	r3, r2
 801c756:	b29a      	uxth	r2, r3
 801c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c75a:	801a      	strh	r2, [r3, #0]
 801c75c:	e01a      	b.n	801c794 <USB_EPStartXfer+0x228>
 801c75e:	683b      	ldr	r3, [r7, #0]
 801c760:	785b      	ldrb	r3, [r3, #1]
 801c762:	2b01      	cmp	r3, #1
 801c764:	d116      	bne.n	801c794 <USB_EPStartXfer+0x228>
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	2250      	movs	r2, #80	@ 0x50
 801c76a:	5a9b      	ldrh	r3, [r3, r2]
 801c76c:	b29b      	uxth	r3, r3
 801c76e:	001a      	movs	r2, r3
 801c770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c772:	189b      	adds	r3, r3, r2
 801c774:	633b      	str	r3, [r7, #48]	@ 0x30
 801c776:	683b      	ldr	r3, [r7, #0]
 801c778:	781b      	ldrb	r3, [r3, #0]
 801c77a:	00da      	lsls	r2, r3, #3
 801c77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c77e:	18d3      	adds	r3, r2, r3
 801c780:	4a72      	ldr	r2, [pc, #456]	@ (801c94c <USB_EPStartXfer+0x3e0>)
 801c782:	4694      	mov	ip, r2
 801c784:	4463      	add	r3, ip
 801c786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c788:	1d7b      	adds	r3, r7, #5
 801c78a:	33ff      	adds	r3, #255	@ 0xff
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	b29a      	uxth	r2, r3
 801c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c792:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801c794:	2076      	movs	r0, #118	@ 0x76
 801c796:	183b      	adds	r3, r7, r0
 801c798:	683a      	ldr	r2, [r7, #0]
 801c79a:	8952      	ldrh	r2, [r2, #10]
 801c79c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c79e:	683b      	ldr	r3, [r7, #0]
 801c7a0:	6959      	ldr	r1, [r3, #20]
 801c7a2:	1d7b      	adds	r3, r7, #5
 801c7a4:	33ff      	adds	r3, #255	@ 0xff
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	b29c      	uxth	r4, r3
 801c7aa:	183b      	adds	r3, r7, r0
 801c7ac:	881a      	ldrh	r2, [r3, #0]
 801c7ae:	6878      	ldr	r0, [r7, #4]
 801c7b0:	0023      	movs	r3, r4
 801c7b2:	f001 f94d 	bl	801da50 <USB_WritePMA>
            ep->xfer_buff += len;
 801c7b6:	683b      	ldr	r3, [r7, #0]
 801c7b8:	695a      	ldr	r2, [r3, #20]
 801c7ba:	1d7b      	adds	r3, r7, #5
 801c7bc:	33ff      	adds	r3, #255	@ 0xff
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	18d2      	adds	r2, r2, r3
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801c7c6:	683b      	ldr	r3, [r7, #0]
 801c7c8:	6a1a      	ldr	r2, [r3, #32]
 801c7ca:	683b      	ldr	r3, [r7, #0]
 801c7cc:	691b      	ldr	r3, [r3, #16]
 801c7ce:	429a      	cmp	r2, r3
 801c7d0:	d908      	bls.n	801c7e4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801c7d2:	683b      	ldr	r3, [r7, #0]
 801c7d4:	6a1a      	ldr	r2, [r3, #32]
 801c7d6:	1d7b      	adds	r3, r7, #5
 801c7d8:	33ff      	adds	r3, #255	@ 0xff
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	1ad2      	subs	r2, r2, r3
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	621a      	str	r2, [r3, #32]
 801c7e2:	e007      	b.n	801c7f4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801c7e4:	683b      	ldr	r3, [r7, #0]
 801c7e6:	6a1b      	ldr	r3, [r3, #32]
 801c7e8:	1d7a      	adds	r2, r7, #5
 801c7ea:	32ff      	adds	r2, #255	@ 0xff
 801c7ec:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801c7ee:	683b      	ldr	r3, [r7, #0]
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c7f4:	683b      	ldr	r3, [r7, #0]
 801c7f6:	785b      	ldrb	r3, [r3, #1]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d000      	beq.n	801c7fe <USB_EPStartXfer+0x292>
 801c7fc:	e070      	b.n	801c8e0 <USB_EPStartXfer+0x374>
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	61bb      	str	r3, [r7, #24]
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	2250      	movs	r2, #80	@ 0x50
 801c806:	5a9b      	ldrh	r3, [r3, r2]
 801c808:	b29b      	uxth	r3, r3
 801c80a:	001a      	movs	r2, r3
 801c80c:	69bb      	ldr	r3, [r7, #24]
 801c80e:	189b      	adds	r3, r3, r2
 801c810:	61bb      	str	r3, [r7, #24]
 801c812:	683b      	ldr	r3, [r7, #0]
 801c814:	781b      	ldrb	r3, [r3, #0]
 801c816:	00da      	lsls	r2, r3, #3
 801c818:	69bb      	ldr	r3, [r7, #24]
 801c81a:	18d3      	adds	r3, r2, r3
 801c81c:	4a48      	ldr	r2, [pc, #288]	@ (801c940 <USB_EPStartXfer+0x3d4>)
 801c81e:	4694      	mov	ip, r2
 801c820:	4463      	add	r3, ip
 801c822:	617b      	str	r3, [r7, #20]
 801c824:	697b      	ldr	r3, [r7, #20]
 801c826:	881b      	ldrh	r3, [r3, #0]
 801c828:	b29b      	uxth	r3, r3
 801c82a:	059b      	lsls	r3, r3, #22
 801c82c:	0d9b      	lsrs	r3, r3, #22
 801c82e:	b29a      	uxth	r2, r3
 801c830:	697b      	ldr	r3, [r7, #20]
 801c832:	801a      	strh	r2, [r3, #0]
 801c834:	1d7b      	adds	r3, r7, #5
 801c836:	33ff      	adds	r3, #255	@ 0xff
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	2b3e      	cmp	r3, #62	@ 0x3e
 801c83c:	d922      	bls.n	801c884 <USB_EPStartXfer+0x318>
 801c83e:	1d7b      	adds	r3, r7, #5
 801c840:	33ff      	adds	r3, #255	@ 0xff
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	095b      	lsrs	r3, r3, #5
 801c846:	21fc      	movs	r1, #252	@ 0xfc
 801c848:	187a      	adds	r2, r7, r1
 801c84a:	6013      	str	r3, [r2, #0]
 801c84c:	1d7b      	adds	r3, r7, #5
 801c84e:	33ff      	adds	r3, #255	@ 0xff
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	221f      	movs	r2, #31
 801c854:	4013      	ands	r3, r2
 801c856:	d104      	bne.n	801c862 <USB_EPStartXfer+0x2f6>
 801c858:	187b      	adds	r3, r7, r1
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	3b01      	subs	r3, #1
 801c85e:	187a      	adds	r2, r7, r1
 801c860:	6013      	str	r3, [r2, #0]
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	881b      	ldrh	r3, [r3, #0]
 801c866:	b29a      	uxth	r2, r3
 801c868:	23fc      	movs	r3, #252	@ 0xfc
 801c86a:	18fb      	adds	r3, r7, r3
 801c86c:	681b      	ldr	r3, [r3, #0]
 801c86e:	b29b      	uxth	r3, r3
 801c870:	029b      	lsls	r3, r3, #10
 801c872:	b29b      	uxth	r3, r3
 801c874:	4313      	orrs	r3, r2
 801c876:	b29b      	uxth	r3, r3
 801c878:	4a35      	ldr	r2, [pc, #212]	@ (801c950 <USB_EPStartXfer+0x3e4>)
 801c87a:	4313      	orrs	r3, r2
 801c87c:	b29a      	uxth	r2, r3
 801c87e:	697b      	ldr	r3, [r7, #20]
 801c880:	801a      	strh	r2, [r3, #0]
 801c882:	e04a      	b.n	801c91a <USB_EPStartXfer+0x3ae>
 801c884:	1d7b      	adds	r3, r7, #5
 801c886:	33ff      	adds	r3, #255	@ 0xff
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	d108      	bne.n	801c8a0 <USB_EPStartXfer+0x334>
 801c88e:	697b      	ldr	r3, [r7, #20]
 801c890:	881b      	ldrh	r3, [r3, #0]
 801c892:	b29b      	uxth	r3, r3
 801c894:	4a2e      	ldr	r2, [pc, #184]	@ (801c950 <USB_EPStartXfer+0x3e4>)
 801c896:	4313      	orrs	r3, r2
 801c898:	b29a      	uxth	r2, r3
 801c89a:	697b      	ldr	r3, [r7, #20]
 801c89c:	801a      	strh	r2, [r3, #0]
 801c89e:	e03c      	b.n	801c91a <USB_EPStartXfer+0x3ae>
 801c8a0:	1d7b      	adds	r3, r7, #5
 801c8a2:	33ff      	adds	r3, #255	@ 0xff
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	085b      	lsrs	r3, r3, #1
 801c8a8:	21fc      	movs	r1, #252	@ 0xfc
 801c8aa:	187a      	adds	r2, r7, r1
 801c8ac:	6013      	str	r3, [r2, #0]
 801c8ae:	1d7b      	adds	r3, r7, #5
 801c8b0:	33ff      	adds	r3, #255	@ 0xff
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	2201      	movs	r2, #1
 801c8b6:	4013      	ands	r3, r2
 801c8b8:	d004      	beq.n	801c8c4 <USB_EPStartXfer+0x358>
 801c8ba:	187b      	adds	r3, r7, r1
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	3301      	adds	r3, #1
 801c8c0:	187a      	adds	r2, r7, r1
 801c8c2:	6013      	str	r3, [r2, #0]
 801c8c4:	697b      	ldr	r3, [r7, #20]
 801c8c6:	881b      	ldrh	r3, [r3, #0]
 801c8c8:	b29a      	uxth	r2, r3
 801c8ca:	23fc      	movs	r3, #252	@ 0xfc
 801c8cc:	18fb      	adds	r3, r7, r3
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	b29b      	uxth	r3, r3
 801c8d2:	029b      	lsls	r3, r3, #10
 801c8d4:	b29b      	uxth	r3, r3
 801c8d6:	4313      	orrs	r3, r2
 801c8d8:	b29a      	uxth	r2, r3
 801c8da:	697b      	ldr	r3, [r7, #20]
 801c8dc:	801a      	strh	r2, [r3, #0]
 801c8de:	e01c      	b.n	801c91a <USB_EPStartXfer+0x3ae>
 801c8e0:	683b      	ldr	r3, [r7, #0]
 801c8e2:	785b      	ldrb	r3, [r3, #1]
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d118      	bne.n	801c91a <USB_EPStartXfer+0x3ae>
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	623b      	str	r3, [r7, #32]
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	2250      	movs	r2, #80	@ 0x50
 801c8f0:	5a9b      	ldrh	r3, [r3, r2]
 801c8f2:	b29b      	uxth	r3, r3
 801c8f4:	001a      	movs	r2, r3
 801c8f6:	6a3b      	ldr	r3, [r7, #32]
 801c8f8:	189b      	adds	r3, r3, r2
 801c8fa:	623b      	str	r3, [r7, #32]
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	781b      	ldrb	r3, [r3, #0]
 801c900:	00da      	lsls	r2, r3, #3
 801c902:	6a3b      	ldr	r3, [r7, #32]
 801c904:	18d3      	adds	r3, r2, r3
 801c906:	4a0e      	ldr	r2, [pc, #56]	@ (801c940 <USB_EPStartXfer+0x3d4>)
 801c908:	4694      	mov	ip, r2
 801c90a:	4463      	add	r3, ip
 801c90c:	61fb      	str	r3, [r7, #28]
 801c90e:	1d7b      	adds	r3, r7, #5
 801c910:	33ff      	adds	r3, #255	@ 0xff
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	b29a      	uxth	r2, r3
 801c916:	69fb      	ldr	r3, [r7, #28]
 801c918:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801c91a:	2076      	movs	r0, #118	@ 0x76
 801c91c:	183b      	adds	r3, r7, r0
 801c91e:	683a      	ldr	r2, [r7, #0]
 801c920:	8912      	ldrh	r2, [r2, #8]
 801c922:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801c924:	683b      	ldr	r3, [r7, #0]
 801c926:	6959      	ldr	r1, [r3, #20]
 801c928:	1d7b      	adds	r3, r7, #5
 801c92a:	33ff      	adds	r3, #255	@ 0xff
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	b29c      	uxth	r4, r3
 801c930:	183b      	adds	r3, r7, r0
 801c932:	881a      	ldrh	r2, [r3, #0]
 801c934:	6878      	ldr	r0, [r7, #4]
 801c936:	0023      	movs	r3, r4
 801c938:	f001 f88a 	bl	801da50 <USB_WritePMA>
 801c93c:	e329      	b.n	801cf92 <USB_EPStartXfer+0xa26>
 801c93e:	46c0      	nop			@ (mov r8, r8)
 801c940:	00000402 	.word	0x00000402
 801c944:	ffff8f8f 	.word	0xffff8f8f
 801c948:	ffff8180 	.word	0xffff8180
 801c94c:	00000406 	.word	0x00000406
 801c950:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	785b      	ldrb	r3, [r3, #1]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	d000      	beq.n	801c95e <USB_EPStartXfer+0x3f2>
 801c95c:	e070      	b.n	801ca40 <USB_EPStartXfer+0x4d4>
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	2250      	movs	r2, #80	@ 0x50
 801c966:	5a9b      	ldrh	r3, [r3, r2]
 801c968:	b29b      	uxth	r3, r3
 801c96a:	001a      	movs	r2, r3
 801c96c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c96e:	189b      	adds	r3, r3, r2
 801c970:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c972:	683b      	ldr	r3, [r7, #0]
 801c974:	781b      	ldrb	r3, [r3, #0]
 801c976:	00da      	lsls	r2, r3, #3
 801c978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c97a:	18d3      	adds	r3, r2, r3
 801c97c:	4acd      	ldr	r2, [pc, #820]	@ (801ccb4 <USB_EPStartXfer+0x748>)
 801c97e:	4694      	mov	ip, r2
 801c980:	4463      	add	r3, ip
 801c982:	647b      	str	r3, [r7, #68]	@ 0x44
 801c984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c986:	881b      	ldrh	r3, [r3, #0]
 801c988:	b29b      	uxth	r3, r3
 801c98a:	059b      	lsls	r3, r3, #22
 801c98c:	0d9b      	lsrs	r3, r3, #22
 801c98e:	b29a      	uxth	r2, r3
 801c990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c992:	801a      	strh	r2, [r3, #0]
 801c994:	1d7b      	adds	r3, r7, #5
 801c996:	33ff      	adds	r3, #255	@ 0xff
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	2b3e      	cmp	r3, #62	@ 0x3e
 801c99c:	d922      	bls.n	801c9e4 <USB_EPStartXfer+0x478>
 801c99e:	1d7b      	adds	r3, r7, #5
 801c9a0:	33ff      	adds	r3, #255	@ 0xff
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	095b      	lsrs	r3, r3, #5
 801c9a6:	21f8      	movs	r1, #248	@ 0xf8
 801c9a8:	187a      	adds	r2, r7, r1
 801c9aa:	6013      	str	r3, [r2, #0]
 801c9ac:	1d7b      	adds	r3, r7, #5
 801c9ae:	33ff      	adds	r3, #255	@ 0xff
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	221f      	movs	r2, #31
 801c9b4:	4013      	ands	r3, r2
 801c9b6:	d104      	bne.n	801c9c2 <USB_EPStartXfer+0x456>
 801c9b8:	187b      	adds	r3, r7, r1
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	3b01      	subs	r3, #1
 801c9be:	187a      	adds	r2, r7, r1
 801c9c0:	6013      	str	r3, [r2, #0]
 801c9c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c9c4:	881b      	ldrh	r3, [r3, #0]
 801c9c6:	b29a      	uxth	r2, r3
 801c9c8:	23f8      	movs	r3, #248	@ 0xf8
 801c9ca:	18fb      	adds	r3, r7, r3
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	b29b      	uxth	r3, r3
 801c9d0:	029b      	lsls	r3, r3, #10
 801c9d2:	b29b      	uxth	r3, r3
 801c9d4:	4313      	orrs	r3, r2
 801c9d6:	b29b      	uxth	r3, r3
 801c9d8:	4ab7      	ldr	r2, [pc, #732]	@ (801ccb8 <USB_EPStartXfer+0x74c>)
 801c9da:	4313      	orrs	r3, r2
 801c9dc:	b29a      	uxth	r2, r3
 801c9de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c9e0:	801a      	strh	r2, [r3, #0]
 801c9e2:	e04a      	b.n	801ca7a <USB_EPStartXfer+0x50e>
 801c9e4:	1d7b      	adds	r3, r7, #5
 801c9e6:	33ff      	adds	r3, #255	@ 0xff
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d108      	bne.n	801ca00 <USB_EPStartXfer+0x494>
 801c9ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c9f0:	881b      	ldrh	r3, [r3, #0]
 801c9f2:	b29b      	uxth	r3, r3
 801c9f4:	4ab0      	ldr	r2, [pc, #704]	@ (801ccb8 <USB_EPStartXfer+0x74c>)
 801c9f6:	4313      	orrs	r3, r2
 801c9f8:	b29a      	uxth	r2, r3
 801c9fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c9fc:	801a      	strh	r2, [r3, #0]
 801c9fe:	e03c      	b.n	801ca7a <USB_EPStartXfer+0x50e>
 801ca00:	1d7b      	adds	r3, r7, #5
 801ca02:	33ff      	adds	r3, #255	@ 0xff
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	085b      	lsrs	r3, r3, #1
 801ca08:	21f8      	movs	r1, #248	@ 0xf8
 801ca0a:	187a      	adds	r2, r7, r1
 801ca0c:	6013      	str	r3, [r2, #0]
 801ca0e:	1d7b      	adds	r3, r7, #5
 801ca10:	33ff      	adds	r3, #255	@ 0xff
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	2201      	movs	r2, #1
 801ca16:	4013      	ands	r3, r2
 801ca18:	d004      	beq.n	801ca24 <USB_EPStartXfer+0x4b8>
 801ca1a:	187b      	adds	r3, r7, r1
 801ca1c:	681b      	ldr	r3, [r3, #0]
 801ca1e:	3301      	adds	r3, #1
 801ca20:	187a      	adds	r2, r7, r1
 801ca22:	6013      	str	r3, [r2, #0]
 801ca24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ca26:	881b      	ldrh	r3, [r3, #0]
 801ca28:	b29a      	uxth	r2, r3
 801ca2a:	23f8      	movs	r3, #248	@ 0xf8
 801ca2c:	18fb      	adds	r3, r7, r3
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	b29b      	uxth	r3, r3
 801ca32:	029b      	lsls	r3, r3, #10
 801ca34:	b29b      	uxth	r3, r3
 801ca36:	4313      	orrs	r3, r2
 801ca38:	b29a      	uxth	r2, r3
 801ca3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ca3c:	801a      	strh	r2, [r3, #0]
 801ca3e:	e01c      	b.n	801ca7a <USB_EPStartXfer+0x50e>
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	785b      	ldrb	r3, [r3, #1]
 801ca44:	2b01      	cmp	r3, #1
 801ca46:	d118      	bne.n	801ca7a <USB_EPStartXfer+0x50e>
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	2250      	movs	r2, #80	@ 0x50
 801ca50:	5a9b      	ldrh	r3, [r3, r2]
 801ca52:	b29b      	uxth	r3, r3
 801ca54:	001a      	movs	r2, r3
 801ca56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ca58:	189b      	adds	r3, r3, r2
 801ca5a:	653b      	str	r3, [r7, #80]	@ 0x50
 801ca5c:	683b      	ldr	r3, [r7, #0]
 801ca5e:	781b      	ldrb	r3, [r3, #0]
 801ca60:	00da      	lsls	r2, r3, #3
 801ca62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ca64:	18d3      	adds	r3, r2, r3
 801ca66:	4a93      	ldr	r2, [pc, #588]	@ (801ccb4 <USB_EPStartXfer+0x748>)
 801ca68:	4694      	mov	ip, r2
 801ca6a:	4463      	add	r3, ip
 801ca6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ca6e:	1d7b      	adds	r3, r7, #5
 801ca70:	33ff      	adds	r3, #255	@ 0xff
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	b29a      	uxth	r2, r3
 801ca76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ca78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801ca7a:	2076      	movs	r0, #118	@ 0x76
 801ca7c:	183b      	adds	r3, r7, r0
 801ca7e:	683a      	ldr	r2, [r7, #0]
 801ca80:	8912      	ldrh	r2, [r2, #8]
 801ca82:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ca84:	683b      	ldr	r3, [r7, #0]
 801ca86:	6959      	ldr	r1, [r3, #20]
 801ca88:	1d7b      	adds	r3, r7, #5
 801ca8a:	33ff      	adds	r3, #255	@ 0xff
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	b29c      	uxth	r4, r3
 801ca90:	183b      	adds	r3, r7, r0
 801ca92:	881a      	ldrh	r2, [r3, #0]
 801ca94:	6878      	ldr	r0, [r7, #4]
 801ca96:	0023      	movs	r3, r4
 801ca98:	f000 ffda 	bl	801da50 <USB_WritePMA>
            ep->xfer_buff += len;
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	695a      	ldr	r2, [r3, #20]
 801caa0:	1d7b      	adds	r3, r7, #5
 801caa2:	33ff      	adds	r3, #255	@ 0xff
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	18d2      	adds	r2, r2, r3
 801caa8:	683b      	ldr	r3, [r7, #0]
 801caaa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	6a1a      	ldr	r2, [r3, #32]
 801cab0:	683b      	ldr	r3, [r7, #0]
 801cab2:	691b      	ldr	r3, [r3, #16]
 801cab4:	429a      	cmp	r2, r3
 801cab6:	d908      	bls.n	801caca <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	6a1a      	ldr	r2, [r3, #32]
 801cabc:	1d7b      	adds	r3, r7, #5
 801cabe:	33ff      	adds	r3, #255	@ 0xff
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	1ad2      	subs	r2, r2, r3
 801cac4:	683b      	ldr	r3, [r7, #0]
 801cac6:	621a      	str	r2, [r3, #32]
 801cac8:	e007      	b.n	801cada <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801caca:	683b      	ldr	r3, [r7, #0]
 801cacc:	6a1b      	ldr	r3, [r3, #32]
 801cace:	1d7a      	adds	r2, r7, #5
 801cad0:	32ff      	adds	r2, #255	@ 0xff
 801cad2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801cad4:	683b      	ldr	r3, [r7, #0]
 801cad6:	2200      	movs	r2, #0
 801cad8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	643b      	str	r3, [r7, #64]	@ 0x40
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	785b      	ldrb	r3, [r3, #1]
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d000      	beq.n	801cae8 <USB_EPStartXfer+0x57c>
 801cae6:	e070      	b.n	801cbca <USB_EPStartXfer+0x65e>
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	63bb      	str	r3, [r7, #56]	@ 0x38
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	2250      	movs	r2, #80	@ 0x50
 801caf0:	5a9b      	ldrh	r3, [r3, r2]
 801caf2:	b29b      	uxth	r3, r3
 801caf4:	001a      	movs	r2, r3
 801caf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801caf8:	189b      	adds	r3, r3, r2
 801cafa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	781b      	ldrb	r3, [r3, #0]
 801cb00:	00da      	lsls	r2, r3, #3
 801cb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb04:	18d3      	adds	r3, r2, r3
 801cb06:	4a6d      	ldr	r2, [pc, #436]	@ (801ccbc <USB_EPStartXfer+0x750>)
 801cb08:	4694      	mov	ip, r2
 801cb0a:	4463      	add	r3, ip
 801cb0c:	637b      	str	r3, [r7, #52]	@ 0x34
 801cb0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb10:	881b      	ldrh	r3, [r3, #0]
 801cb12:	b29b      	uxth	r3, r3
 801cb14:	059b      	lsls	r3, r3, #22
 801cb16:	0d9b      	lsrs	r3, r3, #22
 801cb18:	b29a      	uxth	r2, r3
 801cb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb1c:	801a      	strh	r2, [r3, #0]
 801cb1e:	1d7b      	adds	r3, r7, #5
 801cb20:	33ff      	adds	r3, #255	@ 0xff
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	2b3e      	cmp	r3, #62	@ 0x3e
 801cb26:	d922      	bls.n	801cb6e <USB_EPStartXfer+0x602>
 801cb28:	1d7b      	adds	r3, r7, #5
 801cb2a:	33ff      	adds	r3, #255	@ 0xff
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	095b      	lsrs	r3, r3, #5
 801cb30:	21f4      	movs	r1, #244	@ 0xf4
 801cb32:	187a      	adds	r2, r7, r1
 801cb34:	6013      	str	r3, [r2, #0]
 801cb36:	1d7b      	adds	r3, r7, #5
 801cb38:	33ff      	adds	r3, #255	@ 0xff
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	221f      	movs	r2, #31
 801cb3e:	4013      	ands	r3, r2
 801cb40:	d104      	bne.n	801cb4c <USB_EPStartXfer+0x5e0>
 801cb42:	187b      	adds	r3, r7, r1
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	3b01      	subs	r3, #1
 801cb48:	187a      	adds	r2, r7, r1
 801cb4a:	6013      	str	r3, [r2, #0]
 801cb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb4e:	881b      	ldrh	r3, [r3, #0]
 801cb50:	b29a      	uxth	r2, r3
 801cb52:	23f4      	movs	r3, #244	@ 0xf4
 801cb54:	18fb      	adds	r3, r7, r3
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	b29b      	uxth	r3, r3
 801cb5a:	029b      	lsls	r3, r3, #10
 801cb5c:	b29b      	uxth	r3, r3
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	4a55      	ldr	r2, [pc, #340]	@ (801ccb8 <USB_EPStartXfer+0x74c>)
 801cb64:	4313      	orrs	r3, r2
 801cb66:	b29a      	uxth	r2, r3
 801cb68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb6a:	801a      	strh	r2, [r3, #0]
 801cb6c:	e048      	b.n	801cc00 <USB_EPStartXfer+0x694>
 801cb6e:	1d7b      	adds	r3, r7, #5
 801cb70:	33ff      	adds	r3, #255	@ 0xff
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d108      	bne.n	801cb8a <USB_EPStartXfer+0x61e>
 801cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb7a:	881b      	ldrh	r3, [r3, #0]
 801cb7c:	b29b      	uxth	r3, r3
 801cb7e:	4a4e      	ldr	r2, [pc, #312]	@ (801ccb8 <USB_EPStartXfer+0x74c>)
 801cb80:	4313      	orrs	r3, r2
 801cb82:	b29a      	uxth	r2, r3
 801cb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb86:	801a      	strh	r2, [r3, #0]
 801cb88:	e03a      	b.n	801cc00 <USB_EPStartXfer+0x694>
 801cb8a:	1d7b      	adds	r3, r7, #5
 801cb8c:	33ff      	adds	r3, #255	@ 0xff
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	085b      	lsrs	r3, r3, #1
 801cb92:	21f4      	movs	r1, #244	@ 0xf4
 801cb94:	187a      	adds	r2, r7, r1
 801cb96:	6013      	str	r3, [r2, #0]
 801cb98:	1d7b      	adds	r3, r7, #5
 801cb9a:	33ff      	adds	r3, #255	@ 0xff
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	2201      	movs	r2, #1
 801cba0:	4013      	ands	r3, r2
 801cba2:	d004      	beq.n	801cbae <USB_EPStartXfer+0x642>
 801cba4:	187b      	adds	r3, r7, r1
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	3301      	adds	r3, #1
 801cbaa:	187a      	adds	r2, r7, r1
 801cbac:	6013      	str	r3, [r2, #0]
 801cbae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cbb0:	881b      	ldrh	r3, [r3, #0]
 801cbb2:	b29a      	uxth	r2, r3
 801cbb4:	23f4      	movs	r3, #244	@ 0xf4
 801cbb6:	18fb      	adds	r3, r7, r3
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	b29b      	uxth	r3, r3
 801cbbc:	029b      	lsls	r3, r3, #10
 801cbbe:	b29b      	uxth	r3, r3
 801cbc0:	4313      	orrs	r3, r2
 801cbc2:	b29a      	uxth	r2, r3
 801cbc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cbc6:	801a      	strh	r2, [r3, #0]
 801cbc8:	e01a      	b.n	801cc00 <USB_EPStartXfer+0x694>
 801cbca:	683b      	ldr	r3, [r7, #0]
 801cbcc:	785b      	ldrb	r3, [r3, #1]
 801cbce:	2b01      	cmp	r3, #1
 801cbd0:	d116      	bne.n	801cc00 <USB_EPStartXfer+0x694>
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	2250      	movs	r2, #80	@ 0x50
 801cbd6:	5a9b      	ldrh	r3, [r3, r2]
 801cbd8:	b29b      	uxth	r3, r3
 801cbda:	001a      	movs	r2, r3
 801cbdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cbde:	189b      	adds	r3, r3, r2
 801cbe0:	643b      	str	r3, [r7, #64]	@ 0x40
 801cbe2:	683b      	ldr	r3, [r7, #0]
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	00da      	lsls	r2, r3, #3
 801cbe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cbea:	18d3      	adds	r3, r2, r3
 801cbec:	4a33      	ldr	r2, [pc, #204]	@ (801ccbc <USB_EPStartXfer+0x750>)
 801cbee:	4694      	mov	ip, r2
 801cbf0:	4463      	add	r3, ip
 801cbf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cbf4:	1d7b      	adds	r3, r7, #5
 801cbf6:	33ff      	adds	r3, #255	@ 0xff
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	b29a      	uxth	r2, r3
 801cbfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cbfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801cc00:	2076      	movs	r0, #118	@ 0x76
 801cc02:	183b      	adds	r3, r7, r0
 801cc04:	683a      	ldr	r2, [r7, #0]
 801cc06:	8952      	ldrh	r2, [r2, #10]
 801cc08:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cc0a:	683b      	ldr	r3, [r7, #0]
 801cc0c:	6959      	ldr	r1, [r3, #20]
 801cc0e:	1d7b      	adds	r3, r7, #5
 801cc10:	33ff      	adds	r3, #255	@ 0xff
 801cc12:	681b      	ldr	r3, [r3, #0]
 801cc14:	b29c      	uxth	r4, r3
 801cc16:	183b      	adds	r3, r7, r0
 801cc18:	881a      	ldrh	r2, [r3, #0]
 801cc1a:	6878      	ldr	r0, [r7, #4]
 801cc1c:	0023      	movs	r3, r4
 801cc1e:	f000 ff17 	bl	801da50 <USB_WritePMA>
 801cc22:	e1b6      	b.n	801cf92 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	6a1b      	ldr	r3, [r3, #32]
 801cc28:	1d7a      	adds	r2, r7, #5
 801cc2a:	32ff      	adds	r2, #255	@ 0xff
 801cc2c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801cc2e:	687a      	ldr	r2, [r7, #4]
 801cc30:	683b      	ldr	r3, [r7, #0]
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	009b      	lsls	r3, r3, #2
 801cc36:	18d3      	adds	r3, r2, r3
 801cc38:	881b      	ldrh	r3, [r3, #0]
 801cc3a:	b29a      	uxth	r2, r3
 801cc3c:	2062      	movs	r0, #98	@ 0x62
 801cc3e:	183b      	adds	r3, r7, r0
 801cc40:	491f      	ldr	r1, [pc, #124]	@ (801ccc0 <USB_EPStartXfer+0x754>)
 801cc42:	400a      	ands	r2, r1
 801cc44:	801a      	strh	r2, [r3, #0]
 801cc46:	687a      	ldr	r2, [r7, #4]
 801cc48:	683b      	ldr	r3, [r7, #0]
 801cc4a:	781b      	ldrb	r3, [r3, #0]
 801cc4c:	009b      	lsls	r3, r3, #2
 801cc4e:	18d3      	adds	r3, r2, r3
 801cc50:	183a      	adds	r2, r7, r0
 801cc52:	8812      	ldrh	r2, [r2, #0]
 801cc54:	491b      	ldr	r1, [pc, #108]	@ (801ccc4 <USB_EPStartXfer+0x758>)
 801cc56:	430a      	orrs	r2, r1
 801cc58:	b292      	uxth	r2, r2
 801cc5a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	2250      	movs	r2, #80	@ 0x50
 801cc64:	5a9b      	ldrh	r3, [r3, r2]
 801cc66:	b29b      	uxth	r3, r3
 801cc68:	001a      	movs	r2, r3
 801cc6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cc6c:	189b      	adds	r3, r3, r2
 801cc6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cc70:	683b      	ldr	r3, [r7, #0]
 801cc72:	781b      	ldrb	r3, [r3, #0]
 801cc74:	00da      	lsls	r2, r3, #3
 801cc76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cc78:	18d3      	adds	r3, r2, r3
 801cc7a:	4a0e      	ldr	r2, [pc, #56]	@ (801ccb4 <USB_EPStartXfer+0x748>)
 801cc7c:	4694      	mov	ip, r2
 801cc7e:	4463      	add	r3, ip
 801cc80:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cc82:	1d7b      	adds	r3, r7, #5
 801cc84:	33ff      	adds	r3, #255	@ 0xff
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	b29a      	uxth	r2, r3
 801cc8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cc8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801cc8e:	2076      	movs	r0, #118	@ 0x76
 801cc90:	183b      	adds	r3, r7, r0
 801cc92:	683a      	ldr	r2, [r7, #0]
 801cc94:	8912      	ldrh	r2, [r2, #8]
 801cc96:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cc98:	683b      	ldr	r3, [r7, #0]
 801cc9a:	6959      	ldr	r1, [r3, #20]
 801cc9c:	1d7b      	adds	r3, r7, #5
 801cc9e:	33ff      	adds	r3, #255	@ 0xff
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	b29c      	uxth	r4, r3
 801cca4:	183b      	adds	r3, r7, r0
 801cca6:	881a      	ldrh	r2, [r3, #0]
 801cca8:	6878      	ldr	r0, [r7, #4]
 801ccaa:	0023      	movs	r3, r4
 801ccac:	f000 fed0 	bl	801da50 <USB_WritePMA>
 801ccb0:	e16f      	b.n	801cf92 <USB_EPStartXfer+0xa26>
 801ccb2:	46c0      	nop			@ (mov r8, r8)
 801ccb4:	00000402 	.word	0x00000402
 801ccb8:	ffff8000 	.word	0xffff8000
 801ccbc:	00000406 	.word	0x00000406
 801ccc0:	ffff8e8f 	.word	0xffff8e8f
 801ccc4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801ccc8:	683b      	ldr	r3, [r7, #0]
 801ccca:	6a1a      	ldr	r2, [r3, #32]
 801cccc:	1d7b      	adds	r3, r7, #5
 801ccce:	33ff      	adds	r3, #255	@ 0xff
 801ccd0:	681b      	ldr	r3, [r3, #0]
 801ccd2:	1ad2      	subs	r2, r2, r3
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ccd8:	687a      	ldr	r2, [r7, #4]
 801ccda:	683b      	ldr	r3, [r7, #0]
 801ccdc:	781b      	ldrb	r3, [r3, #0]
 801ccde:	009b      	lsls	r3, r3, #2
 801cce0:	18d3      	adds	r3, r2, r3
 801cce2:	881b      	ldrh	r3, [r3, #0]
 801cce4:	b29b      	uxth	r3, r3
 801cce6:	001a      	movs	r2, r3
 801cce8:	2340      	movs	r3, #64	@ 0x40
 801ccea:	4013      	ands	r3, r2
 801ccec:	d100      	bne.n	801ccf0 <USB_EPStartXfer+0x784>
 801ccee:	e0a4      	b.n	801ce3a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	673b      	str	r3, [r7, #112]	@ 0x70
 801ccf4:	683b      	ldr	r3, [r7, #0]
 801ccf6:	785b      	ldrb	r3, [r3, #1]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d000      	beq.n	801ccfe <USB_EPStartXfer+0x792>
 801ccfc:	e070      	b.n	801cde0 <USB_EPStartXfer+0x874>
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	2250      	movs	r2, #80	@ 0x50
 801cd06:	5a9b      	ldrh	r3, [r3, r2]
 801cd08:	b29b      	uxth	r3, r3
 801cd0a:	001a      	movs	r2, r3
 801cd0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cd0e:	189b      	adds	r3, r3, r2
 801cd10:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cd12:	683b      	ldr	r3, [r7, #0]
 801cd14:	781b      	ldrb	r3, [r3, #0]
 801cd16:	00da      	lsls	r2, r3, #3
 801cd18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cd1a:	18d3      	adds	r3, r2, r3
 801cd1c:	4abc      	ldr	r2, [pc, #752]	@ (801d010 <USB_EPStartXfer+0xaa4>)
 801cd1e:	4694      	mov	ip, r2
 801cd20:	4463      	add	r3, ip
 801cd22:	667b      	str	r3, [r7, #100]	@ 0x64
 801cd24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cd26:	881b      	ldrh	r3, [r3, #0]
 801cd28:	b29b      	uxth	r3, r3
 801cd2a:	059b      	lsls	r3, r3, #22
 801cd2c:	0d9b      	lsrs	r3, r3, #22
 801cd2e:	b29a      	uxth	r2, r3
 801cd30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cd32:	801a      	strh	r2, [r3, #0]
 801cd34:	1d7b      	adds	r3, r7, #5
 801cd36:	33ff      	adds	r3, #255	@ 0xff
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	2b3e      	cmp	r3, #62	@ 0x3e
 801cd3c:	d922      	bls.n	801cd84 <USB_EPStartXfer+0x818>
 801cd3e:	1d7b      	adds	r3, r7, #5
 801cd40:	33ff      	adds	r3, #255	@ 0xff
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	095b      	lsrs	r3, r3, #5
 801cd46:	21f0      	movs	r1, #240	@ 0xf0
 801cd48:	187a      	adds	r2, r7, r1
 801cd4a:	6013      	str	r3, [r2, #0]
 801cd4c:	1d7b      	adds	r3, r7, #5
 801cd4e:	33ff      	adds	r3, #255	@ 0xff
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	221f      	movs	r2, #31
 801cd54:	4013      	ands	r3, r2
 801cd56:	d104      	bne.n	801cd62 <USB_EPStartXfer+0x7f6>
 801cd58:	187b      	adds	r3, r7, r1
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	3b01      	subs	r3, #1
 801cd5e:	187a      	adds	r2, r7, r1
 801cd60:	6013      	str	r3, [r2, #0]
 801cd62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cd64:	881b      	ldrh	r3, [r3, #0]
 801cd66:	b29a      	uxth	r2, r3
 801cd68:	23f0      	movs	r3, #240	@ 0xf0
 801cd6a:	18fb      	adds	r3, r7, r3
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	b29b      	uxth	r3, r3
 801cd70:	029b      	lsls	r3, r3, #10
 801cd72:	b29b      	uxth	r3, r3
 801cd74:	4313      	orrs	r3, r2
 801cd76:	b29b      	uxth	r3, r3
 801cd78:	4aa6      	ldr	r2, [pc, #664]	@ (801d014 <USB_EPStartXfer+0xaa8>)
 801cd7a:	4313      	orrs	r3, r2
 801cd7c:	b29a      	uxth	r2, r3
 801cd7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cd80:	801a      	strh	r2, [r3, #0]
 801cd82:	e048      	b.n	801ce16 <USB_EPStartXfer+0x8aa>
 801cd84:	1d7b      	adds	r3, r7, #5
 801cd86:	33ff      	adds	r3, #255	@ 0xff
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d108      	bne.n	801cda0 <USB_EPStartXfer+0x834>
 801cd8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cd90:	881b      	ldrh	r3, [r3, #0]
 801cd92:	b29b      	uxth	r3, r3
 801cd94:	4a9f      	ldr	r2, [pc, #636]	@ (801d014 <USB_EPStartXfer+0xaa8>)
 801cd96:	4313      	orrs	r3, r2
 801cd98:	b29a      	uxth	r2, r3
 801cd9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cd9c:	801a      	strh	r2, [r3, #0]
 801cd9e:	e03a      	b.n	801ce16 <USB_EPStartXfer+0x8aa>
 801cda0:	1d7b      	adds	r3, r7, #5
 801cda2:	33ff      	adds	r3, #255	@ 0xff
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	085b      	lsrs	r3, r3, #1
 801cda8:	21f0      	movs	r1, #240	@ 0xf0
 801cdaa:	187a      	adds	r2, r7, r1
 801cdac:	6013      	str	r3, [r2, #0]
 801cdae:	1d7b      	adds	r3, r7, #5
 801cdb0:	33ff      	adds	r3, #255	@ 0xff
 801cdb2:	681b      	ldr	r3, [r3, #0]
 801cdb4:	2201      	movs	r2, #1
 801cdb6:	4013      	ands	r3, r2
 801cdb8:	d004      	beq.n	801cdc4 <USB_EPStartXfer+0x858>
 801cdba:	187b      	adds	r3, r7, r1
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	3301      	adds	r3, #1
 801cdc0:	187a      	adds	r2, r7, r1
 801cdc2:	6013      	str	r3, [r2, #0]
 801cdc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cdc6:	881b      	ldrh	r3, [r3, #0]
 801cdc8:	b29a      	uxth	r2, r3
 801cdca:	23f0      	movs	r3, #240	@ 0xf0
 801cdcc:	18fb      	adds	r3, r7, r3
 801cdce:	681b      	ldr	r3, [r3, #0]
 801cdd0:	b29b      	uxth	r3, r3
 801cdd2:	029b      	lsls	r3, r3, #10
 801cdd4:	b29b      	uxth	r3, r3
 801cdd6:	4313      	orrs	r3, r2
 801cdd8:	b29a      	uxth	r2, r3
 801cdda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cddc:	801a      	strh	r2, [r3, #0]
 801cdde:	e01a      	b.n	801ce16 <USB_EPStartXfer+0x8aa>
 801cde0:	683b      	ldr	r3, [r7, #0]
 801cde2:	785b      	ldrb	r3, [r3, #1]
 801cde4:	2b01      	cmp	r3, #1
 801cde6:	d116      	bne.n	801ce16 <USB_EPStartXfer+0x8aa>
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	2250      	movs	r2, #80	@ 0x50
 801cdec:	5a9b      	ldrh	r3, [r3, r2]
 801cdee:	b29b      	uxth	r3, r3
 801cdf0:	001a      	movs	r2, r3
 801cdf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cdf4:	189b      	adds	r3, r3, r2
 801cdf6:	673b      	str	r3, [r7, #112]	@ 0x70
 801cdf8:	683b      	ldr	r3, [r7, #0]
 801cdfa:	781b      	ldrb	r3, [r3, #0]
 801cdfc:	00da      	lsls	r2, r3, #3
 801cdfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ce00:	18d3      	adds	r3, r2, r3
 801ce02:	4a83      	ldr	r2, [pc, #524]	@ (801d010 <USB_EPStartXfer+0xaa4>)
 801ce04:	4694      	mov	ip, r2
 801ce06:	4463      	add	r3, ip
 801ce08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ce0a:	1d7b      	adds	r3, r7, #5
 801ce0c:	33ff      	adds	r3, #255	@ 0xff
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	b29a      	uxth	r2, r3
 801ce12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ce14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801ce16:	2076      	movs	r0, #118	@ 0x76
 801ce18:	183b      	adds	r3, r7, r0
 801ce1a:	683a      	ldr	r2, [r7, #0]
 801ce1c:	8952      	ldrh	r2, [r2, #10]
 801ce1e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ce20:	683b      	ldr	r3, [r7, #0]
 801ce22:	6959      	ldr	r1, [r3, #20]
 801ce24:	1d7b      	adds	r3, r7, #5
 801ce26:	33ff      	adds	r3, #255	@ 0xff
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	b29c      	uxth	r4, r3
 801ce2c:	183b      	adds	r3, r7, r0
 801ce2e:	881a      	ldrh	r2, [r3, #0]
 801ce30:	6878      	ldr	r0, [r7, #4]
 801ce32:	0023      	movs	r3, r4
 801ce34:	f000 fe0c 	bl	801da50 <USB_WritePMA>
 801ce38:	e0ab      	b.n	801cf92 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	785b      	ldrb	r3, [r3, #1]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d000      	beq.n	801ce44 <USB_EPStartXfer+0x8d8>
 801ce42:	e070      	b.n	801cf26 <USB_EPStartXfer+0x9ba>
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	2250      	movs	r2, #80	@ 0x50
 801ce4c:	5a9b      	ldrh	r3, [r3, r2]
 801ce4e:	b29b      	uxth	r3, r3
 801ce50:	001a      	movs	r2, r3
 801ce52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ce54:	189b      	adds	r3, r3, r2
 801ce56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ce58:	683b      	ldr	r3, [r7, #0]
 801ce5a:	781b      	ldrb	r3, [r3, #0]
 801ce5c:	00da      	lsls	r2, r3, #3
 801ce5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ce60:	18d3      	adds	r3, r2, r3
 801ce62:	4a6d      	ldr	r2, [pc, #436]	@ (801d018 <USB_EPStartXfer+0xaac>)
 801ce64:	4694      	mov	ip, r2
 801ce66:	4463      	add	r3, ip
 801ce68:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ce6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ce6c:	881b      	ldrh	r3, [r3, #0]
 801ce6e:	b29b      	uxth	r3, r3
 801ce70:	059b      	lsls	r3, r3, #22
 801ce72:	0d9b      	lsrs	r3, r3, #22
 801ce74:	b29a      	uxth	r2, r3
 801ce76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ce78:	801a      	strh	r2, [r3, #0]
 801ce7a:	1d7b      	adds	r3, r7, #5
 801ce7c:	33ff      	adds	r3, #255	@ 0xff
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	2b3e      	cmp	r3, #62	@ 0x3e
 801ce82:	d922      	bls.n	801ceca <USB_EPStartXfer+0x95e>
 801ce84:	1d7b      	adds	r3, r7, #5
 801ce86:	33ff      	adds	r3, #255	@ 0xff
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	095b      	lsrs	r3, r3, #5
 801ce8c:	21ec      	movs	r1, #236	@ 0xec
 801ce8e:	187a      	adds	r2, r7, r1
 801ce90:	6013      	str	r3, [r2, #0]
 801ce92:	1d7b      	adds	r3, r7, #5
 801ce94:	33ff      	adds	r3, #255	@ 0xff
 801ce96:	681b      	ldr	r3, [r3, #0]
 801ce98:	221f      	movs	r2, #31
 801ce9a:	4013      	ands	r3, r2
 801ce9c:	d104      	bne.n	801cea8 <USB_EPStartXfer+0x93c>
 801ce9e:	187b      	adds	r3, r7, r1
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	3b01      	subs	r3, #1
 801cea4:	187a      	adds	r2, r7, r1
 801cea6:	6013      	str	r3, [r2, #0]
 801cea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ceaa:	881b      	ldrh	r3, [r3, #0]
 801ceac:	b29a      	uxth	r2, r3
 801ceae:	23ec      	movs	r3, #236	@ 0xec
 801ceb0:	18fb      	adds	r3, r7, r3
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	b29b      	uxth	r3, r3
 801ceb6:	029b      	lsls	r3, r3, #10
 801ceb8:	b29b      	uxth	r3, r3
 801ceba:	4313      	orrs	r3, r2
 801cebc:	b29b      	uxth	r3, r3
 801cebe:	4a55      	ldr	r2, [pc, #340]	@ (801d014 <USB_EPStartXfer+0xaa8>)
 801cec0:	4313      	orrs	r3, r2
 801cec2:	b29a      	uxth	r2, r3
 801cec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cec6:	801a      	strh	r2, [r3, #0]
 801cec8:	e052      	b.n	801cf70 <USB_EPStartXfer+0xa04>
 801ceca:	1d7b      	adds	r3, r7, #5
 801cecc:	33ff      	adds	r3, #255	@ 0xff
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d108      	bne.n	801cee6 <USB_EPStartXfer+0x97a>
 801ced4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ced6:	881b      	ldrh	r3, [r3, #0]
 801ced8:	b29b      	uxth	r3, r3
 801ceda:	4a4e      	ldr	r2, [pc, #312]	@ (801d014 <USB_EPStartXfer+0xaa8>)
 801cedc:	4313      	orrs	r3, r2
 801cede:	b29a      	uxth	r2, r3
 801cee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cee2:	801a      	strh	r2, [r3, #0]
 801cee4:	e044      	b.n	801cf70 <USB_EPStartXfer+0xa04>
 801cee6:	1d7b      	adds	r3, r7, #5
 801cee8:	33ff      	adds	r3, #255	@ 0xff
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	085b      	lsrs	r3, r3, #1
 801ceee:	21ec      	movs	r1, #236	@ 0xec
 801cef0:	187a      	adds	r2, r7, r1
 801cef2:	6013      	str	r3, [r2, #0]
 801cef4:	1d7b      	adds	r3, r7, #5
 801cef6:	33ff      	adds	r3, #255	@ 0xff
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	2201      	movs	r2, #1
 801cefc:	4013      	ands	r3, r2
 801cefe:	d004      	beq.n	801cf0a <USB_EPStartXfer+0x99e>
 801cf00:	187b      	adds	r3, r7, r1
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	3301      	adds	r3, #1
 801cf06:	187a      	adds	r2, r7, r1
 801cf08:	6013      	str	r3, [r2, #0]
 801cf0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf0c:	881b      	ldrh	r3, [r3, #0]
 801cf0e:	b29a      	uxth	r2, r3
 801cf10:	23ec      	movs	r3, #236	@ 0xec
 801cf12:	18fb      	adds	r3, r7, r3
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	b29b      	uxth	r3, r3
 801cf18:	029b      	lsls	r3, r3, #10
 801cf1a:	b29b      	uxth	r3, r3
 801cf1c:	4313      	orrs	r3, r2
 801cf1e:	b29a      	uxth	r2, r3
 801cf20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf22:	801a      	strh	r2, [r3, #0]
 801cf24:	e024      	b.n	801cf70 <USB_EPStartXfer+0xa04>
 801cf26:	683b      	ldr	r3, [r7, #0]
 801cf28:	785b      	ldrb	r3, [r3, #1]
 801cf2a:	2b01      	cmp	r3, #1
 801cf2c:	d120      	bne.n	801cf70 <USB_EPStartXfer+0xa04>
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	2184      	movs	r1, #132	@ 0x84
 801cf32:	187a      	adds	r2, r7, r1
 801cf34:	6013      	str	r3, [r2, #0]
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	2250      	movs	r2, #80	@ 0x50
 801cf3a:	5a9b      	ldrh	r3, [r3, r2]
 801cf3c:	b29b      	uxth	r3, r3
 801cf3e:	001a      	movs	r2, r3
 801cf40:	187b      	adds	r3, r7, r1
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	189b      	adds	r3, r3, r2
 801cf46:	187a      	adds	r2, r7, r1
 801cf48:	6013      	str	r3, [r2, #0]
 801cf4a:	683b      	ldr	r3, [r7, #0]
 801cf4c:	781b      	ldrb	r3, [r3, #0]
 801cf4e:	00da      	lsls	r2, r3, #3
 801cf50:	187b      	adds	r3, r7, r1
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	18d3      	adds	r3, r2, r3
 801cf56:	4a30      	ldr	r2, [pc, #192]	@ (801d018 <USB_EPStartXfer+0xaac>)
 801cf58:	4694      	mov	ip, r2
 801cf5a:	4463      	add	r3, ip
 801cf5c:	2180      	movs	r1, #128	@ 0x80
 801cf5e:	187a      	adds	r2, r7, r1
 801cf60:	6013      	str	r3, [r2, #0]
 801cf62:	1d7b      	adds	r3, r7, #5
 801cf64:	33ff      	adds	r3, #255	@ 0xff
 801cf66:	681b      	ldr	r3, [r3, #0]
 801cf68:	b29a      	uxth	r2, r3
 801cf6a:	187b      	adds	r3, r7, r1
 801cf6c:	681b      	ldr	r3, [r3, #0]
 801cf6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801cf70:	2076      	movs	r0, #118	@ 0x76
 801cf72:	183b      	adds	r3, r7, r0
 801cf74:	683a      	ldr	r2, [r7, #0]
 801cf76:	8912      	ldrh	r2, [r2, #8]
 801cf78:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801cf7a:	683b      	ldr	r3, [r7, #0]
 801cf7c:	6959      	ldr	r1, [r3, #20]
 801cf7e:	1d7b      	adds	r3, r7, #5
 801cf80:	33ff      	adds	r3, #255	@ 0xff
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	b29c      	uxth	r4, r3
 801cf86:	183b      	adds	r3, r7, r0
 801cf88:	881a      	ldrh	r2, [r3, #0]
 801cf8a:	6878      	ldr	r0, [r7, #4]
 801cf8c:	0023      	movs	r3, r4
 801cf8e:	f000 fd5f 	bl	801da50 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801cf92:	687a      	ldr	r2, [r7, #4]
 801cf94:	683b      	ldr	r3, [r7, #0]
 801cf96:	781b      	ldrb	r3, [r3, #0]
 801cf98:	009b      	lsls	r3, r3, #2
 801cf9a:	18d3      	adds	r3, r2, r3
 801cf9c:	881b      	ldrh	r3, [r3, #0]
 801cf9e:	b29a      	uxth	r2, r3
 801cfa0:	200a      	movs	r0, #10
 801cfa2:	183b      	adds	r3, r7, r0
 801cfa4:	491d      	ldr	r1, [pc, #116]	@ (801d01c <USB_EPStartXfer+0xab0>)
 801cfa6:	400a      	ands	r2, r1
 801cfa8:	801a      	strh	r2, [r3, #0]
 801cfaa:	183b      	adds	r3, r7, r0
 801cfac:	183a      	adds	r2, r7, r0
 801cfae:	8812      	ldrh	r2, [r2, #0]
 801cfb0:	2110      	movs	r1, #16
 801cfb2:	404a      	eors	r2, r1
 801cfb4:	801a      	strh	r2, [r3, #0]
 801cfb6:	183b      	adds	r3, r7, r0
 801cfb8:	183a      	adds	r2, r7, r0
 801cfba:	8812      	ldrh	r2, [r2, #0]
 801cfbc:	2120      	movs	r1, #32
 801cfbe:	404a      	eors	r2, r1
 801cfc0:	801a      	strh	r2, [r3, #0]
 801cfc2:	687a      	ldr	r2, [r7, #4]
 801cfc4:	683b      	ldr	r3, [r7, #0]
 801cfc6:	781b      	ldrb	r3, [r3, #0]
 801cfc8:	009b      	lsls	r3, r3, #2
 801cfca:	18d3      	adds	r3, r2, r3
 801cfcc:	183a      	adds	r2, r7, r0
 801cfce:	8812      	ldrh	r2, [r2, #0]
 801cfd0:	4913      	ldr	r1, [pc, #76]	@ (801d020 <USB_EPStartXfer+0xab4>)
 801cfd2:	430a      	orrs	r2, r1
 801cfd4:	b292      	uxth	r2, r2
 801cfd6:	801a      	strh	r2, [r3, #0]
 801cfd8:	f000 fbf4 	bl	801d7c4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801cfdc:	683b      	ldr	r3, [r7, #0]
 801cfde:	7b1b      	ldrb	r3, [r3, #12]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d000      	beq.n	801cfe6 <USB_EPStartXfer+0xa7a>
 801cfe4:	e0a9      	b.n	801d13a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801cfe6:	683b      	ldr	r3, [r7, #0]
 801cfe8:	699a      	ldr	r2, [r3, #24]
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	691b      	ldr	r3, [r3, #16]
 801cfee:	429a      	cmp	r2, r3
 801cff0:	d918      	bls.n	801d024 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801cff2:	683b      	ldr	r3, [r7, #0]
 801cff4:	691b      	ldr	r3, [r3, #16]
 801cff6:	1d7a      	adds	r2, r7, #5
 801cff8:	32ff      	adds	r2, #255	@ 0xff
 801cffa:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801cffc:	683b      	ldr	r3, [r7, #0]
 801cffe:	699a      	ldr	r2, [r3, #24]
 801d000:	1d7b      	adds	r3, r7, #5
 801d002:	33ff      	adds	r3, #255	@ 0xff
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	1ad2      	subs	r2, r2, r3
 801d008:	683b      	ldr	r3, [r7, #0]
 801d00a:	619a      	str	r2, [r3, #24]
 801d00c:	e012      	b.n	801d034 <USB_EPStartXfer+0xac8>
 801d00e:	46c0      	nop			@ (mov r8, r8)
 801d010:	00000406 	.word	0x00000406
 801d014:	ffff8000 	.word	0xffff8000
 801d018:	00000402 	.word	0x00000402
 801d01c:	ffff8fbf 	.word	0xffff8fbf
 801d020:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801d024:	683b      	ldr	r3, [r7, #0]
 801d026:	699b      	ldr	r3, [r3, #24]
 801d028:	1d7a      	adds	r2, r7, #5
 801d02a:	32ff      	adds	r2, #255	@ 0xff
 801d02c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	2200      	movs	r2, #0
 801d032:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	2190      	movs	r1, #144	@ 0x90
 801d038:	187a      	adds	r2, r7, r1
 801d03a:	6013      	str	r3, [r2, #0]
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	2250      	movs	r2, #80	@ 0x50
 801d040:	5a9b      	ldrh	r3, [r3, r2]
 801d042:	b29b      	uxth	r3, r3
 801d044:	001a      	movs	r2, r3
 801d046:	187b      	adds	r3, r7, r1
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	189b      	adds	r3, r3, r2
 801d04c:	187a      	adds	r2, r7, r1
 801d04e:	6013      	str	r3, [r2, #0]
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	781b      	ldrb	r3, [r3, #0]
 801d054:	00da      	lsls	r2, r3, #3
 801d056:	187b      	adds	r3, r7, r1
 801d058:	681b      	ldr	r3, [r3, #0]
 801d05a:	18d3      	adds	r3, r2, r3
 801d05c:	4acf      	ldr	r2, [pc, #828]	@ (801d39c <USB_EPStartXfer+0xe30>)
 801d05e:	4694      	mov	ip, r2
 801d060:	4463      	add	r3, ip
 801d062:	218c      	movs	r1, #140	@ 0x8c
 801d064:	187a      	adds	r2, r7, r1
 801d066:	6013      	str	r3, [r2, #0]
 801d068:	187b      	adds	r3, r7, r1
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	881b      	ldrh	r3, [r3, #0]
 801d06e:	b29b      	uxth	r3, r3
 801d070:	059b      	lsls	r3, r3, #22
 801d072:	0d9b      	lsrs	r3, r3, #22
 801d074:	b29a      	uxth	r2, r3
 801d076:	187b      	adds	r3, r7, r1
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	801a      	strh	r2, [r3, #0]
 801d07c:	1d7b      	adds	r3, r7, #5
 801d07e:	33ff      	adds	r3, #255	@ 0xff
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	2b3e      	cmp	r3, #62	@ 0x3e
 801d084:	d925      	bls.n	801d0d2 <USB_EPStartXfer+0xb66>
 801d086:	1d7b      	adds	r3, r7, #5
 801d088:	33ff      	adds	r3, #255	@ 0xff
 801d08a:	681b      	ldr	r3, [r3, #0]
 801d08c:	095b      	lsrs	r3, r3, #5
 801d08e:	21e8      	movs	r1, #232	@ 0xe8
 801d090:	187a      	adds	r2, r7, r1
 801d092:	6013      	str	r3, [r2, #0]
 801d094:	1d7b      	adds	r3, r7, #5
 801d096:	33ff      	adds	r3, #255	@ 0xff
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	221f      	movs	r2, #31
 801d09c:	4013      	ands	r3, r2
 801d09e:	d104      	bne.n	801d0aa <USB_EPStartXfer+0xb3e>
 801d0a0:	187b      	adds	r3, r7, r1
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	3b01      	subs	r3, #1
 801d0a6:	187a      	adds	r2, r7, r1
 801d0a8:	6013      	str	r3, [r2, #0]
 801d0aa:	218c      	movs	r1, #140	@ 0x8c
 801d0ac:	187b      	adds	r3, r7, r1
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	881b      	ldrh	r3, [r3, #0]
 801d0b2:	b29a      	uxth	r2, r3
 801d0b4:	23e8      	movs	r3, #232	@ 0xe8
 801d0b6:	18fb      	adds	r3, r7, r3
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	b29b      	uxth	r3, r3
 801d0bc:	029b      	lsls	r3, r3, #10
 801d0be:	b29b      	uxth	r3, r3
 801d0c0:	4313      	orrs	r3, r2
 801d0c2:	b29b      	uxth	r3, r3
 801d0c4:	4ab6      	ldr	r2, [pc, #728]	@ (801d3a0 <USB_EPStartXfer+0xe34>)
 801d0c6:	4313      	orrs	r3, r2
 801d0c8:	b29a      	uxth	r2, r3
 801d0ca:	187b      	adds	r3, r7, r1
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	801a      	strh	r2, [r3, #0]
 801d0d0:	e353      	b.n	801d77a <USB_EPStartXfer+0x120e>
 801d0d2:	1d7b      	adds	r3, r7, #5
 801d0d4:	33ff      	adds	r3, #255	@ 0xff
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d10b      	bne.n	801d0f4 <USB_EPStartXfer+0xb88>
 801d0dc:	218c      	movs	r1, #140	@ 0x8c
 801d0de:	187b      	adds	r3, r7, r1
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	881b      	ldrh	r3, [r3, #0]
 801d0e4:	b29b      	uxth	r3, r3
 801d0e6:	4aae      	ldr	r2, [pc, #696]	@ (801d3a0 <USB_EPStartXfer+0xe34>)
 801d0e8:	4313      	orrs	r3, r2
 801d0ea:	b29a      	uxth	r2, r3
 801d0ec:	187b      	adds	r3, r7, r1
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	801a      	strh	r2, [r3, #0]
 801d0f2:	e342      	b.n	801d77a <USB_EPStartXfer+0x120e>
 801d0f4:	1d7b      	adds	r3, r7, #5
 801d0f6:	33ff      	adds	r3, #255	@ 0xff
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	085b      	lsrs	r3, r3, #1
 801d0fc:	21e8      	movs	r1, #232	@ 0xe8
 801d0fe:	187a      	adds	r2, r7, r1
 801d100:	6013      	str	r3, [r2, #0]
 801d102:	1d7b      	adds	r3, r7, #5
 801d104:	33ff      	adds	r3, #255	@ 0xff
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	2201      	movs	r2, #1
 801d10a:	4013      	ands	r3, r2
 801d10c:	d004      	beq.n	801d118 <USB_EPStartXfer+0xbac>
 801d10e:	187b      	adds	r3, r7, r1
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	3301      	adds	r3, #1
 801d114:	187a      	adds	r2, r7, r1
 801d116:	6013      	str	r3, [r2, #0]
 801d118:	218c      	movs	r1, #140	@ 0x8c
 801d11a:	187b      	adds	r3, r7, r1
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	881b      	ldrh	r3, [r3, #0]
 801d120:	b29a      	uxth	r2, r3
 801d122:	23e8      	movs	r3, #232	@ 0xe8
 801d124:	18fb      	adds	r3, r7, r3
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	b29b      	uxth	r3, r3
 801d12a:	029b      	lsls	r3, r3, #10
 801d12c:	b29b      	uxth	r3, r3
 801d12e:	4313      	orrs	r3, r2
 801d130:	b29a      	uxth	r2, r3
 801d132:	187b      	adds	r3, r7, r1
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	801a      	strh	r2, [r3, #0]
 801d138:	e31f      	b.n	801d77a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801d13a:	683b      	ldr	r3, [r7, #0]
 801d13c:	78db      	ldrb	r3, [r3, #3]
 801d13e:	2b02      	cmp	r3, #2
 801d140:	d000      	beq.n	801d144 <USB_EPStartXfer+0xbd8>
 801d142:	e191      	b.n	801d468 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801d144:	683b      	ldr	r3, [r7, #0]
 801d146:	785b      	ldrb	r3, [r3, #1]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d000      	beq.n	801d14e <USB_EPStartXfer+0xbe2>
 801d14c:	e07c      	b.n	801d248 <USB_EPStartXfer+0xcdc>
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	21ac      	movs	r1, #172	@ 0xac
 801d152:	187a      	adds	r2, r7, r1
 801d154:	6013      	str	r3, [r2, #0]
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	2250      	movs	r2, #80	@ 0x50
 801d15a:	5a9b      	ldrh	r3, [r3, r2]
 801d15c:	b29b      	uxth	r3, r3
 801d15e:	001a      	movs	r2, r3
 801d160:	187b      	adds	r3, r7, r1
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	189b      	adds	r3, r3, r2
 801d166:	187a      	adds	r2, r7, r1
 801d168:	6013      	str	r3, [r2, #0]
 801d16a:	683b      	ldr	r3, [r7, #0]
 801d16c:	781b      	ldrb	r3, [r3, #0]
 801d16e:	00da      	lsls	r2, r3, #3
 801d170:	187b      	adds	r3, r7, r1
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	18d3      	adds	r3, r2, r3
 801d176:	4a8b      	ldr	r2, [pc, #556]	@ (801d3a4 <USB_EPStartXfer+0xe38>)
 801d178:	4694      	mov	ip, r2
 801d17a:	4463      	add	r3, ip
 801d17c:	21a8      	movs	r1, #168	@ 0xa8
 801d17e:	187a      	adds	r2, r7, r1
 801d180:	6013      	str	r3, [r2, #0]
 801d182:	187b      	adds	r3, r7, r1
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	881b      	ldrh	r3, [r3, #0]
 801d188:	b29b      	uxth	r3, r3
 801d18a:	059b      	lsls	r3, r3, #22
 801d18c:	0d9b      	lsrs	r3, r3, #22
 801d18e:	b29a      	uxth	r2, r3
 801d190:	187b      	adds	r3, r7, r1
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	801a      	strh	r2, [r3, #0]
 801d196:	683b      	ldr	r3, [r7, #0]
 801d198:	691b      	ldr	r3, [r3, #16]
 801d19a:	2b3e      	cmp	r3, #62	@ 0x3e
 801d19c:	d923      	bls.n	801d1e6 <USB_EPStartXfer+0xc7a>
 801d19e:	683b      	ldr	r3, [r7, #0]
 801d1a0:	691b      	ldr	r3, [r3, #16]
 801d1a2:	095b      	lsrs	r3, r3, #5
 801d1a4:	21e4      	movs	r1, #228	@ 0xe4
 801d1a6:	187a      	adds	r2, r7, r1
 801d1a8:	6013      	str	r3, [r2, #0]
 801d1aa:	683b      	ldr	r3, [r7, #0]
 801d1ac:	691b      	ldr	r3, [r3, #16]
 801d1ae:	221f      	movs	r2, #31
 801d1b0:	4013      	ands	r3, r2
 801d1b2:	d104      	bne.n	801d1be <USB_EPStartXfer+0xc52>
 801d1b4:	187b      	adds	r3, r7, r1
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	3b01      	subs	r3, #1
 801d1ba:	187a      	adds	r2, r7, r1
 801d1bc:	6013      	str	r3, [r2, #0]
 801d1be:	21a8      	movs	r1, #168	@ 0xa8
 801d1c0:	187b      	adds	r3, r7, r1
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	881b      	ldrh	r3, [r3, #0]
 801d1c6:	b29a      	uxth	r2, r3
 801d1c8:	23e4      	movs	r3, #228	@ 0xe4
 801d1ca:	18fb      	adds	r3, r7, r3
 801d1cc:	681b      	ldr	r3, [r3, #0]
 801d1ce:	b29b      	uxth	r3, r3
 801d1d0:	029b      	lsls	r3, r3, #10
 801d1d2:	b29b      	uxth	r3, r3
 801d1d4:	4313      	orrs	r3, r2
 801d1d6:	b29b      	uxth	r3, r3
 801d1d8:	4a71      	ldr	r2, [pc, #452]	@ (801d3a0 <USB_EPStartXfer+0xe34>)
 801d1da:	4313      	orrs	r3, r2
 801d1dc:	b29a      	uxth	r2, r3
 801d1de:	187b      	adds	r3, r7, r1
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	801a      	strh	r2, [r3, #0]
 801d1e4:	e054      	b.n	801d290 <USB_EPStartXfer+0xd24>
 801d1e6:	683b      	ldr	r3, [r7, #0]
 801d1e8:	691b      	ldr	r3, [r3, #16]
 801d1ea:	2b00      	cmp	r3, #0
 801d1ec:	d10b      	bne.n	801d206 <USB_EPStartXfer+0xc9a>
 801d1ee:	21a8      	movs	r1, #168	@ 0xa8
 801d1f0:	187b      	adds	r3, r7, r1
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	881b      	ldrh	r3, [r3, #0]
 801d1f6:	b29b      	uxth	r3, r3
 801d1f8:	4a69      	ldr	r2, [pc, #420]	@ (801d3a0 <USB_EPStartXfer+0xe34>)
 801d1fa:	4313      	orrs	r3, r2
 801d1fc:	b29a      	uxth	r2, r3
 801d1fe:	187b      	adds	r3, r7, r1
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	801a      	strh	r2, [r3, #0]
 801d204:	e044      	b.n	801d290 <USB_EPStartXfer+0xd24>
 801d206:	683b      	ldr	r3, [r7, #0]
 801d208:	691b      	ldr	r3, [r3, #16]
 801d20a:	085b      	lsrs	r3, r3, #1
 801d20c:	21e4      	movs	r1, #228	@ 0xe4
 801d20e:	187a      	adds	r2, r7, r1
 801d210:	6013      	str	r3, [r2, #0]
 801d212:	683b      	ldr	r3, [r7, #0]
 801d214:	691b      	ldr	r3, [r3, #16]
 801d216:	2201      	movs	r2, #1
 801d218:	4013      	ands	r3, r2
 801d21a:	d004      	beq.n	801d226 <USB_EPStartXfer+0xcba>
 801d21c:	187b      	adds	r3, r7, r1
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	3301      	adds	r3, #1
 801d222:	187a      	adds	r2, r7, r1
 801d224:	6013      	str	r3, [r2, #0]
 801d226:	21a8      	movs	r1, #168	@ 0xa8
 801d228:	187b      	adds	r3, r7, r1
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	881b      	ldrh	r3, [r3, #0]
 801d22e:	b29a      	uxth	r2, r3
 801d230:	23e4      	movs	r3, #228	@ 0xe4
 801d232:	18fb      	adds	r3, r7, r3
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	b29b      	uxth	r3, r3
 801d238:	029b      	lsls	r3, r3, #10
 801d23a:	b29b      	uxth	r3, r3
 801d23c:	4313      	orrs	r3, r2
 801d23e:	b29a      	uxth	r2, r3
 801d240:	187b      	adds	r3, r7, r1
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	801a      	strh	r2, [r3, #0]
 801d246:	e023      	b.n	801d290 <USB_EPStartXfer+0xd24>
 801d248:	683b      	ldr	r3, [r7, #0]
 801d24a:	785b      	ldrb	r3, [r3, #1]
 801d24c:	2b01      	cmp	r3, #1
 801d24e:	d11f      	bne.n	801d290 <USB_EPStartXfer+0xd24>
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	21b4      	movs	r1, #180	@ 0xb4
 801d254:	187a      	adds	r2, r7, r1
 801d256:	6013      	str	r3, [r2, #0]
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	2250      	movs	r2, #80	@ 0x50
 801d25c:	5a9b      	ldrh	r3, [r3, r2]
 801d25e:	b29b      	uxth	r3, r3
 801d260:	001a      	movs	r2, r3
 801d262:	187b      	adds	r3, r7, r1
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	189b      	adds	r3, r3, r2
 801d268:	187a      	adds	r2, r7, r1
 801d26a:	6013      	str	r3, [r2, #0]
 801d26c:	683b      	ldr	r3, [r7, #0]
 801d26e:	781b      	ldrb	r3, [r3, #0]
 801d270:	00da      	lsls	r2, r3, #3
 801d272:	187b      	adds	r3, r7, r1
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	18d3      	adds	r3, r2, r3
 801d278:	4a4a      	ldr	r2, [pc, #296]	@ (801d3a4 <USB_EPStartXfer+0xe38>)
 801d27a:	4694      	mov	ip, r2
 801d27c:	4463      	add	r3, ip
 801d27e:	21b0      	movs	r1, #176	@ 0xb0
 801d280:	187a      	adds	r2, r7, r1
 801d282:	6013      	str	r3, [r2, #0]
 801d284:	683b      	ldr	r3, [r7, #0]
 801d286:	691b      	ldr	r3, [r3, #16]
 801d288:	b29a      	uxth	r2, r3
 801d28a:	187b      	adds	r3, r7, r1
 801d28c:	681b      	ldr	r3, [r3, #0]
 801d28e:	801a      	strh	r2, [r3, #0]
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	22a4      	movs	r2, #164	@ 0xa4
 801d294:	18ba      	adds	r2, r7, r2
 801d296:	6013      	str	r3, [r2, #0]
 801d298:	683b      	ldr	r3, [r7, #0]
 801d29a:	785b      	ldrb	r3, [r3, #1]
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d000      	beq.n	801d2a2 <USB_EPStartXfer+0xd36>
 801d2a0:	e082      	b.n	801d3a8 <USB_EPStartXfer+0xe3c>
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	219c      	movs	r1, #156	@ 0x9c
 801d2a6:	187a      	adds	r2, r7, r1
 801d2a8:	6013      	str	r3, [r2, #0]
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	2250      	movs	r2, #80	@ 0x50
 801d2ae:	5a9b      	ldrh	r3, [r3, r2]
 801d2b0:	b29b      	uxth	r3, r3
 801d2b2:	001a      	movs	r2, r3
 801d2b4:	187b      	adds	r3, r7, r1
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	189b      	adds	r3, r3, r2
 801d2ba:	187a      	adds	r2, r7, r1
 801d2bc:	6013      	str	r3, [r2, #0]
 801d2be:	683b      	ldr	r3, [r7, #0]
 801d2c0:	781b      	ldrb	r3, [r3, #0]
 801d2c2:	00da      	lsls	r2, r3, #3
 801d2c4:	187b      	adds	r3, r7, r1
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	18d3      	adds	r3, r2, r3
 801d2ca:	4a34      	ldr	r2, [pc, #208]	@ (801d39c <USB_EPStartXfer+0xe30>)
 801d2cc:	4694      	mov	ip, r2
 801d2ce:	4463      	add	r3, ip
 801d2d0:	2198      	movs	r1, #152	@ 0x98
 801d2d2:	187a      	adds	r2, r7, r1
 801d2d4:	6013      	str	r3, [r2, #0]
 801d2d6:	187b      	adds	r3, r7, r1
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	881b      	ldrh	r3, [r3, #0]
 801d2dc:	b29b      	uxth	r3, r3
 801d2de:	059b      	lsls	r3, r3, #22
 801d2e0:	0d9b      	lsrs	r3, r3, #22
 801d2e2:	b29a      	uxth	r2, r3
 801d2e4:	187b      	adds	r3, r7, r1
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	801a      	strh	r2, [r3, #0]
 801d2ea:	683b      	ldr	r3, [r7, #0]
 801d2ec:	691b      	ldr	r3, [r3, #16]
 801d2ee:	2b3e      	cmp	r3, #62	@ 0x3e
 801d2f0:	d923      	bls.n	801d33a <USB_EPStartXfer+0xdce>
 801d2f2:	683b      	ldr	r3, [r7, #0]
 801d2f4:	691b      	ldr	r3, [r3, #16]
 801d2f6:	095b      	lsrs	r3, r3, #5
 801d2f8:	21e0      	movs	r1, #224	@ 0xe0
 801d2fa:	187a      	adds	r2, r7, r1
 801d2fc:	6013      	str	r3, [r2, #0]
 801d2fe:	683b      	ldr	r3, [r7, #0]
 801d300:	691b      	ldr	r3, [r3, #16]
 801d302:	221f      	movs	r2, #31
 801d304:	4013      	ands	r3, r2
 801d306:	d104      	bne.n	801d312 <USB_EPStartXfer+0xda6>
 801d308:	187b      	adds	r3, r7, r1
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	3b01      	subs	r3, #1
 801d30e:	187a      	adds	r2, r7, r1
 801d310:	6013      	str	r3, [r2, #0]
 801d312:	2198      	movs	r1, #152	@ 0x98
 801d314:	187b      	adds	r3, r7, r1
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	881b      	ldrh	r3, [r3, #0]
 801d31a:	b29a      	uxth	r2, r3
 801d31c:	23e0      	movs	r3, #224	@ 0xe0
 801d31e:	18fb      	adds	r3, r7, r3
 801d320:	681b      	ldr	r3, [r3, #0]
 801d322:	b29b      	uxth	r3, r3
 801d324:	029b      	lsls	r3, r3, #10
 801d326:	b29b      	uxth	r3, r3
 801d328:	4313      	orrs	r3, r2
 801d32a:	b29b      	uxth	r3, r3
 801d32c:	4a1c      	ldr	r2, [pc, #112]	@ (801d3a0 <USB_EPStartXfer+0xe34>)
 801d32e:	4313      	orrs	r3, r2
 801d330:	b29a      	uxth	r2, r3
 801d332:	187b      	adds	r3, r7, r1
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	801a      	strh	r2, [r3, #0]
 801d338:	e057      	b.n	801d3ea <USB_EPStartXfer+0xe7e>
 801d33a:	683b      	ldr	r3, [r7, #0]
 801d33c:	691b      	ldr	r3, [r3, #16]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d10b      	bne.n	801d35a <USB_EPStartXfer+0xdee>
 801d342:	2198      	movs	r1, #152	@ 0x98
 801d344:	187b      	adds	r3, r7, r1
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	881b      	ldrh	r3, [r3, #0]
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	4a14      	ldr	r2, [pc, #80]	@ (801d3a0 <USB_EPStartXfer+0xe34>)
 801d34e:	4313      	orrs	r3, r2
 801d350:	b29a      	uxth	r2, r3
 801d352:	187b      	adds	r3, r7, r1
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	801a      	strh	r2, [r3, #0]
 801d358:	e047      	b.n	801d3ea <USB_EPStartXfer+0xe7e>
 801d35a:	683b      	ldr	r3, [r7, #0]
 801d35c:	691b      	ldr	r3, [r3, #16]
 801d35e:	085b      	lsrs	r3, r3, #1
 801d360:	21e0      	movs	r1, #224	@ 0xe0
 801d362:	187a      	adds	r2, r7, r1
 801d364:	6013      	str	r3, [r2, #0]
 801d366:	683b      	ldr	r3, [r7, #0]
 801d368:	691b      	ldr	r3, [r3, #16]
 801d36a:	2201      	movs	r2, #1
 801d36c:	4013      	ands	r3, r2
 801d36e:	d004      	beq.n	801d37a <USB_EPStartXfer+0xe0e>
 801d370:	187b      	adds	r3, r7, r1
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	3301      	adds	r3, #1
 801d376:	187a      	adds	r2, r7, r1
 801d378:	6013      	str	r3, [r2, #0]
 801d37a:	2198      	movs	r1, #152	@ 0x98
 801d37c:	187b      	adds	r3, r7, r1
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	881b      	ldrh	r3, [r3, #0]
 801d382:	b29a      	uxth	r2, r3
 801d384:	23e0      	movs	r3, #224	@ 0xe0
 801d386:	18fb      	adds	r3, r7, r3
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	b29b      	uxth	r3, r3
 801d38c:	029b      	lsls	r3, r3, #10
 801d38e:	b29b      	uxth	r3, r3
 801d390:	4313      	orrs	r3, r2
 801d392:	b29a      	uxth	r2, r3
 801d394:	187b      	adds	r3, r7, r1
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	801a      	strh	r2, [r3, #0]
 801d39a:	e026      	b.n	801d3ea <USB_EPStartXfer+0xe7e>
 801d39c:	00000406 	.word	0x00000406
 801d3a0:	ffff8000 	.word	0xffff8000
 801d3a4:	00000402 	.word	0x00000402
 801d3a8:	683b      	ldr	r3, [r7, #0]
 801d3aa:	785b      	ldrb	r3, [r3, #1]
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d11c      	bne.n	801d3ea <USB_EPStartXfer+0xe7e>
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	2250      	movs	r2, #80	@ 0x50
 801d3b4:	5a9b      	ldrh	r3, [r3, r2]
 801d3b6:	b29b      	uxth	r3, r3
 801d3b8:	001a      	movs	r2, r3
 801d3ba:	21a4      	movs	r1, #164	@ 0xa4
 801d3bc:	187b      	adds	r3, r7, r1
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	189b      	adds	r3, r3, r2
 801d3c2:	187a      	adds	r2, r7, r1
 801d3c4:	6013      	str	r3, [r2, #0]
 801d3c6:	683b      	ldr	r3, [r7, #0]
 801d3c8:	781b      	ldrb	r3, [r3, #0]
 801d3ca:	00da      	lsls	r2, r3, #3
 801d3cc:	187b      	adds	r3, r7, r1
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	18d3      	adds	r3, r2, r3
 801d3d2:	4ad2      	ldr	r2, [pc, #840]	@ (801d71c <USB_EPStartXfer+0x11b0>)
 801d3d4:	4694      	mov	ip, r2
 801d3d6:	4463      	add	r3, ip
 801d3d8:	21a0      	movs	r1, #160	@ 0xa0
 801d3da:	187a      	adds	r2, r7, r1
 801d3dc:	6013      	str	r3, [r2, #0]
 801d3de:	683b      	ldr	r3, [r7, #0]
 801d3e0:	691b      	ldr	r3, [r3, #16]
 801d3e2:	b29a      	uxth	r2, r3
 801d3e4:	187b      	adds	r3, r7, r1
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801d3ea:	683b      	ldr	r3, [r7, #0]
 801d3ec:	69db      	ldr	r3, [r3, #28]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d100      	bne.n	801d3f4 <USB_EPStartXfer+0xe88>
 801d3f2:	e1c2      	b.n	801d77a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801d3f4:	687a      	ldr	r2, [r7, #4]
 801d3f6:	683b      	ldr	r3, [r7, #0]
 801d3f8:	781b      	ldrb	r3, [r3, #0]
 801d3fa:	009b      	lsls	r3, r3, #2
 801d3fc:	18d2      	adds	r2, r2, r3
 801d3fe:	2196      	movs	r1, #150	@ 0x96
 801d400:	187b      	adds	r3, r7, r1
 801d402:	8812      	ldrh	r2, [r2, #0]
 801d404:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801d406:	187b      	adds	r3, r7, r1
 801d408:	881a      	ldrh	r2, [r3, #0]
 801d40a:	2380      	movs	r3, #128	@ 0x80
 801d40c:	01db      	lsls	r3, r3, #7
 801d40e:	4013      	ands	r3, r2
 801d410:	d004      	beq.n	801d41c <USB_EPStartXfer+0xeb0>
 801d412:	187b      	adds	r3, r7, r1
 801d414:	881b      	ldrh	r3, [r3, #0]
 801d416:	2240      	movs	r2, #64	@ 0x40
 801d418:	4013      	ands	r3, r2
 801d41a:	d10d      	bne.n	801d438 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801d41c:	2196      	movs	r1, #150	@ 0x96
 801d41e:	187b      	adds	r3, r7, r1
 801d420:	881a      	ldrh	r2, [r3, #0]
 801d422:	2380      	movs	r3, #128	@ 0x80
 801d424:	01db      	lsls	r3, r3, #7
 801d426:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801d428:	d000      	beq.n	801d42c <USB_EPStartXfer+0xec0>
 801d42a:	e1a6      	b.n	801d77a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801d42c:	187b      	adds	r3, r7, r1
 801d42e:	881b      	ldrh	r3, [r3, #0]
 801d430:	2240      	movs	r2, #64	@ 0x40
 801d432:	4013      	ands	r3, r2
 801d434:	d000      	beq.n	801d438 <USB_EPStartXfer+0xecc>
 801d436:	e1a0      	b.n	801d77a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801d438:	687a      	ldr	r2, [r7, #4]
 801d43a:	683b      	ldr	r3, [r7, #0]
 801d43c:	781b      	ldrb	r3, [r3, #0]
 801d43e:	009b      	lsls	r3, r3, #2
 801d440:	18d3      	adds	r3, r2, r3
 801d442:	881b      	ldrh	r3, [r3, #0]
 801d444:	b29a      	uxth	r2, r3
 801d446:	2094      	movs	r0, #148	@ 0x94
 801d448:	183b      	adds	r3, r7, r0
 801d44a:	49b5      	ldr	r1, [pc, #724]	@ (801d720 <USB_EPStartXfer+0x11b4>)
 801d44c:	400a      	ands	r2, r1
 801d44e:	801a      	strh	r2, [r3, #0]
 801d450:	687a      	ldr	r2, [r7, #4]
 801d452:	683b      	ldr	r3, [r7, #0]
 801d454:	781b      	ldrb	r3, [r3, #0]
 801d456:	009b      	lsls	r3, r3, #2
 801d458:	18d3      	adds	r3, r2, r3
 801d45a:	183a      	adds	r2, r7, r0
 801d45c:	8812      	ldrh	r2, [r2, #0]
 801d45e:	49b1      	ldr	r1, [pc, #708]	@ (801d724 <USB_EPStartXfer+0x11b8>)
 801d460:	430a      	orrs	r2, r1
 801d462:	b292      	uxth	r2, r2
 801d464:	801a      	strh	r2, [r3, #0]
 801d466:	e188      	b.n	801d77a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801d468:	683b      	ldr	r3, [r7, #0]
 801d46a:	78db      	ldrb	r3, [r3, #3]
 801d46c:	2b01      	cmp	r3, #1
 801d46e:	d000      	beq.n	801d472 <USB_EPStartXfer+0xf06>
 801d470:	e181      	b.n	801d776 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801d472:	683b      	ldr	r3, [r7, #0]
 801d474:	699a      	ldr	r2, [r3, #24]
 801d476:	683b      	ldr	r3, [r7, #0]
 801d478:	691b      	ldr	r3, [r3, #16]
 801d47a:	429a      	cmp	r2, r3
 801d47c:	d90d      	bls.n	801d49a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801d47e:	683b      	ldr	r3, [r7, #0]
 801d480:	691b      	ldr	r3, [r3, #16]
 801d482:	1d7a      	adds	r2, r7, #5
 801d484:	32ff      	adds	r2, #255	@ 0xff
 801d486:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801d488:	683b      	ldr	r3, [r7, #0]
 801d48a:	699a      	ldr	r2, [r3, #24]
 801d48c:	1d7b      	adds	r3, r7, #5
 801d48e:	33ff      	adds	r3, #255	@ 0xff
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	1ad2      	subs	r2, r2, r3
 801d494:	683b      	ldr	r3, [r7, #0]
 801d496:	619a      	str	r2, [r3, #24]
 801d498:	e007      	b.n	801d4aa <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801d49a:	683b      	ldr	r3, [r7, #0]
 801d49c:	699b      	ldr	r3, [r3, #24]
 801d49e:	1d7a      	adds	r2, r7, #5
 801d4a0:	32ff      	adds	r2, #255	@ 0xff
 801d4a2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801d4a4:	683b      	ldr	r3, [r7, #0]
 801d4a6:	2200      	movs	r2, #0
 801d4a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801d4aa:	683b      	ldr	r3, [r7, #0]
 801d4ac:	785b      	ldrb	r3, [r3, #1]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d000      	beq.n	801d4b4 <USB_EPStartXfer+0xf48>
 801d4b2:	e082      	b.n	801d5ba <USB_EPStartXfer+0x104e>
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	21cc      	movs	r1, #204	@ 0xcc
 801d4b8:	187a      	adds	r2, r7, r1
 801d4ba:	6013      	str	r3, [r2, #0]
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	2250      	movs	r2, #80	@ 0x50
 801d4c0:	5a9b      	ldrh	r3, [r3, r2]
 801d4c2:	b29b      	uxth	r3, r3
 801d4c4:	001a      	movs	r2, r3
 801d4c6:	187b      	adds	r3, r7, r1
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	189b      	adds	r3, r3, r2
 801d4cc:	187a      	adds	r2, r7, r1
 801d4ce:	6013      	str	r3, [r2, #0]
 801d4d0:	683b      	ldr	r3, [r7, #0]
 801d4d2:	781b      	ldrb	r3, [r3, #0]
 801d4d4:	00da      	lsls	r2, r3, #3
 801d4d6:	187b      	adds	r3, r7, r1
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	18d3      	adds	r3, r2, r3
 801d4dc:	4a92      	ldr	r2, [pc, #584]	@ (801d728 <USB_EPStartXfer+0x11bc>)
 801d4de:	4694      	mov	ip, r2
 801d4e0:	4463      	add	r3, ip
 801d4e2:	21c8      	movs	r1, #200	@ 0xc8
 801d4e4:	187a      	adds	r2, r7, r1
 801d4e6:	6013      	str	r3, [r2, #0]
 801d4e8:	187b      	adds	r3, r7, r1
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	881b      	ldrh	r3, [r3, #0]
 801d4ee:	b29b      	uxth	r3, r3
 801d4f0:	059b      	lsls	r3, r3, #22
 801d4f2:	0d9b      	lsrs	r3, r3, #22
 801d4f4:	b29a      	uxth	r2, r3
 801d4f6:	187b      	adds	r3, r7, r1
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	801a      	strh	r2, [r3, #0]
 801d4fc:	1d7b      	adds	r3, r7, #5
 801d4fe:	33ff      	adds	r3, #255	@ 0xff
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	2b3e      	cmp	r3, #62	@ 0x3e
 801d504:	d925      	bls.n	801d552 <USB_EPStartXfer+0xfe6>
 801d506:	1d7b      	adds	r3, r7, #5
 801d508:	33ff      	adds	r3, #255	@ 0xff
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	095b      	lsrs	r3, r3, #5
 801d50e:	21dc      	movs	r1, #220	@ 0xdc
 801d510:	187a      	adds	r2, r7, r1
 801d512:	6013      	str	r3, [r2, #0]
 801d514:	1d7b      	adds	r3, r7, #5
 801d516:	33ff      	adds	r3, #255	@ 0xff
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	221f      	movs	r2, #31
 801d51c:	4013      	ands	r3, r2
 801d51e:	d104      	bne.n	801d52a <USB_EPStartXfer+0xfbe>
 801d520:	187b      	adds	r3, r7, r1
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	3b01      	subs	r3, #1
 801d526:	187a      	adds	r2, r7, r1
 801d528:	6013      	str	r3, [r2, #0]
 801d52a:	21c8      	movs	r1, #200	@ 0xc8
 801d52c:	187b      	adds	r3, r7, r1
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	881b      	ldrh	r3, [r3, #0]
 801d532:	b29a      	uxth	r2, r3
 801d534:	23dc      	movs	r3, #220	@ 0xdc
 801d536:	18fb      	adds	r3, r7, r3
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	b29b      	uxth	r3, r3
 801d53c:	029b      	lsls	r3, r3, #10
 801d53e:	b29b      	uxth	r3, r3
 801d540:	4313      	orrs	r3, r2
 801d542:	b29b      	uxth	r3, r3
 801d544:	4a79      	ldr	r2, [pc, #484]	@ (801d72c <USB_EPStartXfer+0x11c0>)
 801d546:	4313      	orrs	r3, r2
 801d548:	b29a      	uxth	r2, r3
 801d54a:	187b      	adds	r3, r7, r1
 801d54c:	681b      	ldr	r3, [r3, #0]
 801d54e:	801a      	strh	r2, [r3, #0]
 801d550:	e058      	b.n	801d604 <USB_EPStartXfer+0x1098>
 801d552:	1d7b      	adds	r3, r7, #5
 801d554:	33ff      	adds	r3, #255	@ 0xff
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	2b00      	cmp	r3, #0
 801d55a:	d10b      	bne.n	801d574 <USB_EPStartXfer+0x1008>
 801d55c:	21c8      	movs	r1, #200	@ 0xc8
 801d55e:	187b      	adds	r3, r7, r1
 801d560:	681b      	ldr	r3, [r3, #0]
 801d562:	881b      	ldrh	r3, [r3, #0]
 801d564:	b29b      	uxth	r3, r3
 801d566:	4a71      	ldr	r2, [pc, #452]	@ (801d72c <USB_EPStartXfer+0x11c0>)
 801d568:	4313      	orrs	r3, r2
 801d56a:	b29a      	uxth	r2, r3
 801d56c:	187b      	adds	r3, r7, r1
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	801a      	strh	r2, [r3, #0]
 801d572:	e047      	b.n	801d604 <USB_EPStartXfer+0x1098>
 801d574:	1d7b      	adds	r3, r7, #5
 801d576:	33ff      	adds	r3, #255	@ 0xff
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	085b      	lsrs	r3, r3, #1
 801d57c:	21dc      	movs	r1, #220	@ 0xdc
 801d57e:	187a      	adds	r2, r7, r1
 801d580:	6013      	str	r3, [r2, #0]
 801d582:	1d7b      	adds	r3, r7, #5
 801d584:	33ff      	adds	r3, #255	@ 0xff
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	2201      	movs	r2, #1
 801d58a:	4013      	ands	r3, r2
 801d58c:	d004      	beq.n	801d598 <USB_EPStartXfer+0x102c>
 801d58e:	187b      	adds	r3, r7, r1
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	3301      	adds	r3, #1
 801d594:	187a      	adds	r2, r7, r1
 801d596:	6013      	str	r3, [r2, #0]
 801d598:	21c8      	movs	r1, #200	@ 0xc8
 801d59a:	187b      	adds	r3, r7, r1
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	881b      	ldrh	r3, [r3, #0]
 801d5a0:	b29a      	uxth	r2, r3
 801d5a2:	23dc      	movs	r3, #220	@ 0xdc
 801d5a4:	18fb      	adds	r3, r7, r3
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	b29b      	uxth	r3, r3
 801d5aa:	029b      	lsls	r3, r3, #10
 801d5ac:	b29b      	uxth	r3, r3
 801d5ae:	4313      	orrs	r3, r2
 801d5b0:	b29a      	uxth	r2, r3
 801d5b2:	187b      	adds	r3, r7, r1
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	801a      	strh	r2, [r3, #0]
 801d5b8:	e024      	b.n	801d604 <USB_EPStartXfer+0x1098>
 801d5ba:	683b      	ldr	r3, [r7, #0]
 801d5bc:	785b      	ldrb	r3, [r3, #1]
 801d5be:	2b01      	cmp	r3, #1
 801d5c0:	d120      	bne.n	801d604 <USB_EPStartXfer+0x1098>
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	21d4      	movs	r1, #212	@ 0xd4
 801d5c6:	187a      	adds	r2, r7, r1
 801d5c8:	6013      	str	r3, [r2, #0]
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	2250      	movs	r2, #80	@ 0x50
 801d5ce:	5a9b      	ldrh	r3, [r3, r2]
 801d5d0:	b29b      	uxth	r3, r3
 801d5d2:	001a      	movs	r2, r3
 801d5d4:	187b      	adds	r3, r7, r1
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	189b      	adds	r3, r3, r2
 801d5da:	187a      	adds	r2, r7, r1
 801d5dc:	6013      	str	r3, [r2, #0]
 801d5de:	683b      	ldr	r3, [r7, #0]
 801d5e0:	781b      	ldrb	r3, [r3, #0]
 801d5e2:	00da      	lsls	r2, r3, #3
 801d5e4:	187b      	adds	r3, r7, r1
 801d5e6:	681b      	ldr	r3, [r3, #0]
 801d5e8:	18d3      	adds	r3, r2, r3
 801d5ea:	4a4f      	ldr	r2, [pc, #316]	@ (801d728 <USB_EPStartXfer+0x11bc>)
 801d5ec:	4694      	mov	ip, r2
 801d5ee:	4463      	add	r3, ip
 801d5f0:	21d0      	movs	r1, #208	@ 0xd0
 801d5f2:	187a      	adds	r2, r7, r1
 801d5f4:	6013      	str	r3, [r2, #0]
 801d5f6:	1d7b      	adds	r3, r7, #5
 801d5f8:	33ff      	adds	r3, #255	@ 0xff
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	b29a      	uxth	r2, r3
 801d5fe:	187b      	adds	r3, r7, r1
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	801a      	strh	r2, [r3, #0]
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	22c4      	movs	r2, #196	@ 0xc4
 801d608:	18ba      	adds	r2, r7, r2
 801d60a:	6013      	str	r3, [r2, #0]
 801d60c:	683b      	ldr	r3, [r7, #0]
 801d60e:	785b      	ldrb	r3, [r3, #1]
 801d610:	2b00      	cmp	r3, #0
 801d612:	d000      	beq.n	801d616 <USB_EPStartXfer+0x10aa>
 801d614:	e08c      	b.n	801d730 <USB_EPStartXfer+0x11c4>
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	21bc      	movs	r1, #188	@ 0xbc
 801d61a:	187a      	adds	r2, r7, r1
 801d61c:	6013      	str	r3, [r2, #0]
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	2250      	movs	r2, #80	@ 0x50
 801d622:	5a9b      	ldrh	r3, [r3, r2]
 801d624:	b29b      	uxth	r3, r3
 801d626:	001a      	movs	r2, r3
 801d628:	187b      	adds	r3, r7, r1
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	189b      	adds	r3, r3, r2
 801d62e:	187a      	adds	r2, r7, r1
 801d630:	6013      	str	r3, [r2, #0]
 801d632:	683b      	ldr	r3, [r7, #0]
 801d634:	781b      	ldrb	r3, [r3, #0]
 801d636:	00da      	lsls	r2, r3, #3
 801d638:	187b      	adds	r3, r7, r1
 801d63a:	681b      	ldr	r3, [r3, #0]
 801d63c:	18d3      	adds	r3, r2, r3
 801d63e:	4a37      	ldr	r2, [pc, #220]	@ (801d71c <USB_EPStartXfer+0x11b0>)
 801d640:	4694      	mov	ip, r2
 801d642:	4463      	add	r3, ip
 801d644:	21b8      	movs	r1, #184	@ 0xb8
 801d646:	187a      	adds	r2, r7, r1
 801d648:	6013      	str	r3, [r2, #0]
 801d64a:	187b      	adds	r3, r7, r1
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	881b      	ldrh	r3, [r3, #0]
 801d650:	b29b      	uxth	r3, r3
 801d652:	059b      	lsls	r3, r3, #22
 801d654:	0d9b      	lsrs	r3, r3, #22
 801d656:	b29a      	uxth	r2, r3
 801d658:	187b      	adds	r3, r7, r1
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	801a      	strh	r2, [r3, #0]
 801d65e:	1d7b      	adds	r3, r7, #5
 801d660:	33ff      	adds	r3, #255	@ 0xff
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	2b3e      	cmp	r3, #62	@ 0x3e
 801d666:	d925      	bls.n	801d6b4 <USB_EPStartXfer+0x1148>
 801d668:	1d7b      	adds	r3, r7, #5
 801d66a:	33ff      	adds	r3, #255	@ 0xff
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	095b      	lsrs	r3, r3, #5
 801d670:	21d8      	movs	r1, #216	@ 0xd8
 801d672:	187a      	adds	r2, r7, r1
 801d674:	6013      	str	r3, [r2, #0]
 801d676:	1d7b      	adds	r3, r7, #5
 801d678:	33ff      	adds	r3, #255	@ 0xff
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	221f      	movs	r2, #31
 801d67e:	4013      	ands	r3, r2
 801d680:	d104      	bne.n	801d68c <USB_EPStartXfer+0x1120>
 801d682:	187b      	adds	r3, r7, r1
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	3b01      	subs	r3, #1
 801d688:	187a      	adds	r2, r7, r1
 801d68a:	6013      	str	r3, [r2, #0]
 801d68c:	21b8      	movs	r1, #184	@ 0xb8
 801d68e:	187b      	adds	r3, r7, r1
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	881b      	ldrh	r3, [r3, #0]
 801d694:	b29a      	uxth	r2, r3
 801d696:	23d8      	movs	r3, #216	@ 0xd8
 801d698:	18fb      	adds	r3, r7, r3
 801d69a:	681b      	ldr	r3, [r3, #0]
 801d69c:	b29b      	uxth	r3, r3
 801d69e:	029b      	lsls	r3, r3, #10
 801d6a0:	b29b      	uxth	r3, r3
 801d6a2:	4313      	orrs	r3, r2
 801d6a4:	b29b      	uxth	r3, r3
 801d6a6:	4a21      	ldr	r2, [pc, #132]	@ (801d72c <USB_EPStartXfer+0x11c0>)
 801d6a8:	4313      	orrs	r3, r2
 801d6aa:	b29a      	uxth	r2, r3
 801d6ac:	187b      	adds	r3, r7, r1
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	801a      	strh	r2, [r3, #0]
 801d6b2:	e062      	b.n	801d77a <USB_EPStartXfer+0x120e>
 801d6b4:	1d7b      	adds	r3, r7, #5
 801d6b6:	33ff      	adds	r3, #255	@ 0xff
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d10b      	bne.n	801d6d6 <USB_EPStartXfer+0x116a>
 801d6be:	21b8      	movs	r1, #184	@ 0xb8
 801d6c0:	187b      	adds	r3, r7, r1
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	881b      	ldrh	r3, [r3, #0]
 801d6c6:	b29b      	uxth	r3, r3
 801d6c8:	4a18      	ldr	r2, [pc, #96]	@ (801d72c <USB_EPStartXfer+0x11c0>)
 801d6ca:	4313      	orrs	r3, r2
 801d6cc:	b29a      	uxth	r2, r3
 801d6ce:	187b      	adds	r3, r7, r1
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	801a      	strh	r2, [r3, #0]
 801d6d4:	e051      	b.n	801d77a <USB_EPStartXfer+0x120e>
 801d6d6:	1d7b      	adds	r3, r7, #5
 801d6d8:	33ff      	adds	r3, #255	@ 0xff
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	085b      	lsrs	r3, r3, #1
 801d6de:	21d8      	movs	r1, #216	@ 0xd8
 801d6e0:	187a      	adds	r2, r7, r1
 801d6e2:	6013      	str	r3, [r2, #0]
 801d6e4:	1d7b      	adds	r3, r7, #5
 801d6e6:	33ff      	adds	r3, #255	@ 0xff
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	2201      	movs	r2, #1
 801d6ec:	4013      	ands	r3, r2
 801d6ee:	d004      	beq.n	801d6fa <USB_EPStartXfer+0x118e>
 801d6f0:	187b      	adds	r3, r7, r1
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	3301      	adds	r3, #1
 801d6f6:	187a      	adds	r2, r7, r1
 801d6f8:	6013      	str	r3, [r2, #0]
 801d6fa:	21b8      	movs	r1, #184	@ 0xb8
 801d6fc:	187b      	adds	r3, r7, r1
 801d6fe:	681b      	ldr	r3, [r3, #0]
 801d700:	881b      	ldrh	r3, [r3, #0]
 801d702:	b29a      	uxth	r2, r3
 801d704:	23d8      	movs	r3, #216	@ 0xd8
 801d706:	18fb      	adds	r3, r7, r3
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	b29b      	uxth	r3, r3
 801d70c:	029b      	lsls	r3, r3, #10
 801d70e:	b29b      	uxth	r3, r3
 801d710:	4313      	orrs	r3, r2
 801d712:	b29a      	uxth	r2, r3
 801d714:	187b      	adds	r3, r7, r1
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	801a      	strh	r2, [r3, #0]
 801d71a:	e02e      	b.n	801d77a <USB_EPStartXfer+0x120e>
 801d71c:	00000406 	.word	0x00000406
 801d720:	ffff8f8f 	.word	0xffff8f8f
 801d724:	ffff80c0 	.word	0xffff80c0
 801d728:	00000402 	.word	0x00000402
 801d72c:	ffff8000 	.word	0xffff8000
 801d730:	683b      	ldr	r3, [r7, #0]
 801d732:	785b      	ldrb	r3, [r3, #1]
 801d734:	2b01      	cmp	r3, #1
 801d736:	d120      	bne.n	801d77a <USB_EPStartXfer+0x120e>
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	2250      	movs	r2, #80	@ 0x50
 801d73c:	5a9b      	ldrh	r3, [r3, r2]
 801d73e:	b29b      	uxth	r3, r3
 801d740:	001a      	movs	r2, r3
 801d742:	21c4      	movs	r1, #196	@ 0xc4
 801d744:	187b      	adds	r3, r7, r1
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	189b      	adds	r3, r3, r2
 801d74a:	187a      	adds	r2, r7, r1
 801d74c:	6013      	str	r3, [r2, #0]
 801d74e:	683b      	ldr	r3, [r7, #0]
 801d750:	781b      	ldrb	r3, [r3, #0]
 801d752:	00da      	lsls	r2, r3, #3
 801d754:	187b      	adds	r3, r7, r1
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	18d3      	adds	r3, r2, r3
 801d75a:	4a1d      	ldr	r2, [pc, #116]	@ (801d7d0 <USB_EPStartXfer+0x1264>)
 801d75c:	4694      	mov	ip, r2
 801d75e:	4463      	add	r3, ip
 801d760:	21c0      	movs	r1, #192	@ 0xc0
 801d762:	187a      	adds	r2, r7, r1
 801d764:	6013      	str	r3, [r2, #0]
 801d766:	1d7b      	adds	r3, r7, #5
 801d768:	33ff      	adds	r3, #255	@ 0xff
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	b29a      	uxth	r2, r3
 801d76e:	187b      	adds	r3, r7, r1
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	801a      	strh	r2, [r3, #0]
 801d774:	e001      	b.n	801d77a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801d776:	2301      	movs	r3, #1
 801d778:	e025      	b.n	801d7c6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d77a:	687a      	ldr	r2, [r7, #4]
 801d77c:	683b      	ldr	r3, [r7, #0]
 801d77e:	781b      	ldrb	r3, [r3, #0]
 801d780:	009b      	lsls	r3, r3, #2
 801d782:	18d3      	adds	r3, r2, r3
 801d784:	881b      	ldrh	r3, [r3, #0]
 801d786:	b29a      	uxth	r2, r3
 801d788:	208a      	movs	r0, #138	@ 0x8a
 801d78a:	183b      	adds	r3, r7, r0
 801d78c:	4911      	ldr	r1, [pc, #68]	@ (801d7d4 <USB_EPStartXfer+0x1268>)
 801d78e:	400a      	ands	r2, r1
 801d790:	801a      	strh	r2, [r3, #0]
 801d792:	183b      	adds	r3, r7, r0
 801d794:	183a      	adds	r2, r7, r0
 801d796:	8812      	ldrh	r2, [r2, #0]
 801d798:	2180      	movs	r1, #128	@ 0x80
 801d79a:	0149      	lsls	r1, r1, #5
 801d79c:	404a      	eors	r2, r1
 801d79e:	801a      	strh	r2, [r3, #0]
 801d7a0:	183b      	adds	r3, r7, r0
 801d7a2:	183a      	adds	r2, r7, r0
 801d7a4:	8812      	ldrh	r2, [r2, #0]
 801d7a6:	2180      	movs	r1, #128	@ 0x80
 801d7a8:	0189      	lsls	r1, r1, #6
 801d7aa:	404a      	eors	r2, r1
 801d7ac:	801a      	strh	r2, [r3, #0]
 801d7ae:	687a      	ldr	r2, [r7, #4]
 801d7b0:	683b      	ldr	r3, [r7, #0]
 801d7b2:	781b      	ldrb	r3, [r3, #0]
 801d7b4:	009b      	lsls	r3, r3, #2
 801d7b6:	18d3      	adds	r3, r2, r3
 801d7b8:	183a      	adds	r2, r7, r0
 801d7ba:	8812      	ldrh	r2, [r2, #0]
 801d7bc:	4906      	ldr	r1, [pc, #24]	@ (801d7d8 <USB_EPStartXfer+0x126c>)
 801d7be:	430a      	orrs	r2, r1
 801d7c0:	b292      	uxth	r2, r2
 801d7c2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d7c4:	2300      	movs	r3, #0
}
 801d7c6:	0018      	movs	r0, r3
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	b043      	add	sp, #268	@ 0x10c
 801d7cc:	bd90      	pop	{r4, r7, pc}
 801d7ce:	46c0      	nop			@ (mov r8, r8)
 801d7d0:	00000406 	.word	0x00000406
 801d7d4:	ffffbf8f 	.word	0xffffbf8f
 801d7d8:	ffff8080 	.word	0xffff8080

0801d7dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d7dc:	b580      	push	{r7, lr}
 801d7de:	b084      	sub	sp, #16
 801d7e0:	af00      	add	r7, sp, #0
 801d7e2:	6078      	str	r0, [r7, #4]
 801d7e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801d7e6:	683b      	ldr	r3, [r7, #0]
 801d7e8:	785b      	ldrb	r3, [r3, #1]
 801d7ea:	2b00      	cmp	r3, #0
 801d7ec:	d01d      	beq.n	801d82a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801d7ee:	687a      	ldr	r2, [r7, #4]
 801d7f0:	683b      	ldr	r3, [r7, #0]
 801d7f2:	781b      	ldrb	r3, [r3, #0]
 801d7f4:	009b      	lsls	r3, r3, #2
 801d7f6:	18d3      	adds	r3, r2, r3
 801d7f8:	881b      	ldrh	r3, [r3, #0]
 801d7fa:	b29a      	uxth	r2, r3
 801d7fc:	200c      	movs	r0, #12
 801d7fe:	183b      	adds	r3, r7, r0
 801d800:	491b      	ldr	r1, [pc, #108]	@ (801d870 <USB_EPSetStall+0x94>)
 801d802:	400a      	ands	r2, r1
 801d804:	801a      	strh	r2, [r3, #0]
 801d806:	183b      	adds	r3, r7, r0
 801d808:	183a      	adds	r2, r7, r0
 801d80a:	8812      	ldrh	r2, [r2, #0]
 801d80c:	2110      	movs	r1, #16
 801d80e:	404a      	eors	r2, r1
 801d810:	801a      	strh	r2, [r3, #0]
 801d812:	687a      	ldr	r2, [r7, #4]
 801d814:	683b      	ldr	r3, [r7, #0]
 801d816:	781b      	ldrb	r3, [r3, #0]
 801d818:	009b      	lsls	r3, r3, #2
 801d81a:	18d3      	adds	r3, r2, r3
 801d81c:	183a      	adds	r2, r7, r0
 801d81e:	8812      	ldrh	r2, [r2, #0]
 801d820:	4914      	ldr	r1, [pc, #80]	@ (801d874 <USB_EPSetStall+0x98>)
 801d822:	430a      	orrs	r2, r1
 801d824:	b292      	uxth	r2, r2
 801d826:	801a      	strh	r2, [r3, #0]
 801d828:	e01d      	b.n	801d866 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801d82a:	687a      	ldr	r2, [r7, #4]
 801d82c:	683b      	ldr	r3, [r7, #0]
 801d82e:	781b      	ldrb	r3, [r3, #0]
 801d830:	009b      	lsls	r3, r3, #2
 801d832:	18d3      	adds	r3, r2, r3
 801d834:	881b      	ldrh	r3, [r3, #0]
 801d836:	b29a      	uxth	r2, r3
 801d838:	200e      	movs	r0, #14
 801d83a:	183b      	adds	r3, r7, r0
 801d83c:	490e      	ldr	r1, [pc, #56]	@ (801d878 <USB_EPSetStall+0x9c>)
 801d83e:	400a      	ands	r2, r1
 801d840:	801a      	strh	r2, [r3, #0]
 801d842:	183b      	adds	r3, r7, r0
 801d844:	183a      	adds	r2, r7, r0
 801d846:	8812      	ldrh	r2, [r2, #0]
 801d848:	2180      	movs	r1, #128	@ 0x80
 801d84a:	0149      	lsls	r1, r1, #5
 801d84c:	404a      	eors	r2, r1
 801d84e:	801a      	strh	r2, [r3, #0]
 801d850:	687a      	ldr	r2, [r7, #4]
 801d852:	683b      	ldr	r3, [r7, #0]
 801d854:	781b      	ldrb	r3, [r3, #0]
 801d856:	009b      	lsls	r3, r3, #2
 801d858:	18d3      	adds	r3, r2, r3
 801d85a:	183a      	adds	r2, r7, r0
 801d85c:	8812      	ldrh	r2, [r2, #0]
 801d85e:	4905      	ldr	r1, [pc, #20]	@ (801d874 <USB_EPSetStall+0x98>)
 801d860:	430a      	orrs	r2, r1
 801d862:	b292      	uxth	r2, r2
 801d864:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801d866:	2300      	movs	r3, #0
}
 801d868:	0018      	movs	r0, r3
 801d86a:	46bd      	mov	sp, r7
 801d86c:	b004      	add	sp, #16
 801d86e:	bd80      	pop	{r7, pc}
 801d870:	ffff8fbf 	.word	0xffff8fbf
 801d874:	ffff8080 	.word	0xffff8080
 801d878:	ffffbf8f 	.word	0xffffbf8f

0801d87c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b086      	sub	sp, #24
 801d880:	af00      	add	r7, sp, #0
 801d882:	6078      	str	r0, [r7, #4]
 801d884:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d886:	683b      	ldr	r3, [r7, #0]
 801d888:	7b1b      	ldrb	r3, [r3, #12]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d000      	beq.n	801d890 <USB_EPClearStall+0x14>
 801d88e:	e095      	b.n	801d9bc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801d890:	683b      	ldr	r3, [r7, #0]
 801d892:	785b      	ldrb	r3, [r3, #1]
 801d894:	2b00      	cmp	r3, #0
 801d896:	d046      	beq.n	801d926 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d898:	687a      	ldr	r2, [r7, #4]
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	781b      	ldrb	r3, [r3, #0]
 801d89e:	009b      	lsls	r3, r3, #2
 801d8a0:	18d2      	adds	r2, r2, r3
 801d8a2:	2110      	movs	r1, #16
 801d8a4:	187b      	adds	r3, r7, r1
 801d8a6:	8812      	ldrh	r2, [r2, #0]
 801d8a8:	801a      	strh	r2, [r3, #0]
 801d8aa:	187b      	adds	r3, r7, r1
 801d8ac:	881b      	ldrh	r3, [r3, #0]
 801d8ae:	2240      	movs	r2, #64	@ 0x40
 801d8b0:	4013      	ands	r3, r2
 801d8b2:	d016      	beq.n	801d8e2 <USB_EPClearStall+0x66>
 801d8b4:	687a      	ldr	r2, [r7, #4]
 801d8b6:	683b      	ldr	r3, [r7, #0]
 801d8b8:	781b      	ldrb	r3, [r3, #0]
 801d8ba:	009b      	lsls	r3, r3, #2
 801d8bc:	18d3      	adds	r3, r2, r3
 801d8be:	881b      	ldrh	r3, [r3, #0]
 801d8c0:	b29a      	uxth	r2, r3
 801d8c2:	200e      	movs	r0, #14
 801d8c4:	183b      	adds	r3, r7, r0
 801d8c6:	4940      	ldr	r1, [pc, #256]	@ (801d9c8 <USB_EPClearStall+0x14c>)
 801d8c8:	400a      	ands	r2, r1
 801d8ca:	801a      	strh	r2, [r3, #0]
 801d8cc:	687a      	ldr	r2, [r7, #4]
 801d8ce:	683b      	ldr	r3, [r7, #0]
 801d8d0:	781b      	ldrb	r3, [r3, #0]
 801d8d2:	009b      	lsls	r3, r3, #2
 801d8d4:	18d3      	adds	r3, r2, r3
 801d8d6:	183a      	adds	r2, r7, r0
 801d8d8:	8812      	ldrh	r2, [r2, #0]
 801d8da:	493c      	ldr	r1, [pc, #240]	@ (801d9cc <USB_EPClearStall+0x150>)
 801d8dc:	430a      	orrs	r2, r1
 801d8de:	b292      	uxth	r2, r2
 801d8e0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801d8e2:	683b      	ldr	r3, [r7, #0]
 801d8e4:	78db      	ldrb	r3, [r3, #3]
 801d8e6:	2b01      	cmp	r3, #1
 801d8e8:	d068      	beq.n	801d9bc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801d8ea:	687a      	ldr	r2, [r7, #4]
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	781b      	ldrb	r3, [r3, #0]
 801d8f0:	009b      	lsls	r3, r3, #2
 801d8f2:	18d3      	adds	r3, r2, r3
 801d8f4:	881b      	ldrh	r3, [r3, #0]
 801d8f6:	b29a      	uxth	r2, r3
 801d8f8:	200c      	movs	r0, #12
 801d8fa:	183b      	adds	r3, r7, r0
 801d8fc:	4934      	ldr	r1, [pc, #208]	@ (801d9d0 <USB_EPClearStall+0x154>)
 801d8fe:	400a      	ands	r2, r1
 801d900:	801a      	strh	r2, [r3, #0]
 801d902:	183b      	adds	r3, r7, r0
 801d904:	183a      	adds	r2, r7, r0
 801d906:	8812      	ldrh	r2, [r2, #0]
 801d908:	2120      	movs	r1, #32
 801d90a:	404a      	eors	r2, r1
 801d90c:	801a      	strh	r2, [r3, #0]
 801d90e:	687a      	ldr	r2, [r7, #4]
 801d910:	683b      	ldr	r3, [r7, #0]
 801d912:	781b      	ldrb	r3, [r3, #0]
 801d914:	009b      	lsls	r3, r3, #2
 801d916:	18d3      	adds	r3, r2, r3
 801d918:	183a      	adds	r2, r7, r0
 801d91a:	8812      	ldrh	r2, [r2, #0]
 801d91c:	492d      	ldr	r1, [pc, #180]	@ (801d9d4 <USB_EPClearStall+0x158>)
 801d91e:	430a      	orrs	r2, r1
 801d920:	b292      	uxth	r2, r2
 801d922:	801a      	strh	r2, [r3, #0]
 801d924:	e04a      	b.n	801d9bc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d926:	687a      	ldr	r2, [r7, #4]
 801d928:	683b      	ldr	r3, [r7, #0]
 801d92a:	781b      	ldrb	r3, [r3, #0]
 801d92c:	009b      	lsls	r3, r3, #2
 801d92e:	18d2      	adds	r2, r2, r3
 801d930:	2116      	movs	r1, #22
 801d932:	187b      	adds	r3, r7, r1
 801d934:	8812      	ldrh	r2, [r2, #0]
 801d936:	801a      	strh	r2, [r3, #0]
 801d938:	187b      	adds	r3, r7, r1
 801d93a:	881a      	ldrh	r2, [r3, #0]
 801d93c:	2380      	movs	r3, #128	@ 0x80
 801d93e:	01db      	lsls	r3, r3, #7
 801d940:	4013      	ands	r3, r2
 801d942:	d016      	beq.n	801d972 <USB_EPClearStall+0xf6>
 801d944:	687a      	ldr	r2, [r7, #4]
 801d946:	683b      	ldr	r3, [r7, #0]
 801d948:	781b      	ldrb	r3, [r3, #0]
 801d94a:	009b      	lsls	r3, r3, #2
 801d94c:	18d3      	adds	r3, r2, r3
 801d94e:	881b      	ldrh	r3, [r3, #0]
 801d950:	b29a      	uxth	r2, r3
 801d952:	2014      	movs	r0, #20
 801d954:	183b      	adds	r3, r7, r0
 801d956:	491c      	ldr	r1, [pc, #112]	@ (801d9c8 <USB_EPClearStall+0x14c>)
 801d958:	400a      	ands	r2, r1
 801d95a:	801a      	strh	r2, [r3, #0]
 801d95c:	687a      	ldr	r2, [r7, #4]
 801d95e:	683b      	ldr	r3, [r7, #0]
 801d960:	781b      	ldrb	r3, [r3, #0]
 801d962:	009b      	lsls	r3, r3, #2
 801d964:	18d3      	adds	r3, r2, r3
 801d966:	183a      	adds	r2, r7, r0
 801d968:	8812      	ldrh	r2, [r2, #0]
 801d96a:	491b      	ldr	r1, [pc, #108]	@ (801d9d8 <USB_EPClearStall+0x15c>)
 801d96c:	430a      	orrs	r2, r1
 801d96e:	b292      	uxth	r2, r2
 801d970:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801d972:	687a      	ldr	r2, [r7, #4]
 801d974:	683b      	ldr	r3, [r7, #0]
 801d976:	781b      	ldrb	r3, [r3, #0]
 801d978:	009b      	lsls	r3, r3, #2
 801d97a:	18d3      	adds	r3, r2, r3
 801d97c:	881b      	ldrh	r3, [r3, #0]
 801d97e:	b29a      	uxth	r2, r3
 801d980:	2012      	movs	r0, #18
 801d982:	183b      	adds	r3, r7, r0
 801d984:	4915      	ldr	r1, [pc, #84]	@ (801d9dc <USB_EPClearStall+0x160>)
 801d986:	400a      	ands	r2, r1
 801d988:	801a      	strh	r2, [r3, #0]
 801d98a:	183b      	adds	r3, r7, r0
 801d98c:	183a      	adds	r2, r7, r0
 801d98e:	8812      	ldrh	r2, [r2, #0]
 801d990:	2180      	movs	r1, #128	@ 0x80
 801d992:	0149      	lsls	r1, r1, #5
 801d994:	404a      	eors	r2, r1
 801d996:	801a      	strh	r2, [r3, #0]
 801d998:	183b      	adds	r3, r7, r0
 801d99a:	183a      	adds	r2, r7, r0
 801d99c:	8812      	ldrh	r2, [r2, #0]
 801d99e:	2180      	movs	r1, #128	@ 0x80
 801d9a0:	0189      	lsls	r1, r1, #6
 801d9a2:	404a      	eors	r2, r1
 801d9a4:	801a      	strh	r2, [r3, #0]
 801d9a6:	687a      	ldr	r2, [r7, #4]
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	781b      	ldrb	r3, [r3, #0]
 801d9ac:	009b      	lsls	r3, r3, #2
 801d9ae:	18d3      	adds	r3, r2, r3
 801d9b0:	183a      	adds	r2, r7, r0
 801d9b2:	8812      	ldrh	r2, [r2, #0]
 801d9b4:	4907      	ldr	r1, [pc, #28]	@ (801d9d4 <USB_EPClearStall+0x158>)
 801d9b6:	430a      	orrs	r2, r1
 801d9b8:	b292      	uxth	r2, r2
 801d9ba:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801d9bc:	2300      	movs	r3, #0
}
 801d9be:	0018      	movs	r0, r3
 801d9c0:	46bd      	mov	sp, r7
 801d9c2:	b006      	add	sp, #24
 801d9c4:	bd80      	pop	{r7, pc}
 801d9c6:	46c0      	nop			@ (mov r8, r8)
 801d9c8:	ffff8f8f 	.word	0xffff8f8f
 801d9cc:	ffff80c0 	.word	0xffff80c0
 801d9d0:	ffff8fbf 	.word	0xffff8fbf
 801d9d4:	ffff8080 	.word	0xffff8080
 801d9d8:	ffffc080 	.word	0xffffc080
 801d9dc:	ffffbf8f 	.word	0xffffbf8f

0801d9e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801d9e0:	b580      	push	{r7, lr}
 801d9e2:	b082      	sub	sp, #8
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	6078      	str	r0, [r7, #4]
 801d9e8:	000a      	movs	r2, r1
 801d9ea:	1cfb      	adds	r3, r7, #3
 801d9ec:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801d9ee:	1cfb      	adds	r3, r7, #3
 801d9f0:	781b      	ldrb	r3, [r3, #0]
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d103      	bne.n	801d9fe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	224c      	movs	r2, #76	@ 0x4c
 801d9fa:	2180      	movs	r1, #128	@ 0x80
 801d9fc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801d9fe:	2300      	movs	r3, #0
}
 801da00:	0018      	movs	r0, r3
 801da02:	46bd      	mov	sp, r7
 801da04:	b002      	add	sp, #8
 801da06:	bd80      	pop	{r7, pc}

0801da08 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801da08:	b580      	push	{r7, lr}
 801da0a:	b082      	sub	sp, #8
 801da0c:	af00      	add	r7, sp, #0
 801da0e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	2258      	movs	r2, #88	@ 0x58
 801da14:	5a9b      	ldrh	r3, [r3, r2]
 801da16:	b29b      	uxth	r3, r3
 801da18:	4a05      	ldr	r2, [pc, #20]	@ (801da30 <USB_DevConnect+0x28>)
 801da1a:	4313      	orrs	r3, r2
 801da1c:	b299      	uxth	r1, r3
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	2258      	movs	r2, #88	@ 0x58
 801da22:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801da24:	2300      	movs	r3, #0
}
 801da26:	0018      	movs	r0, r3
 801da28:	46bd      	mov	sp, r7
 801da2a:	b002      	add	sp, #8
 801da2c:	bd80      	pop	{r7, pc}
 801da2e:	46c0      	nop			@ (mov r8, r8)
 801da30:	ffff8000 	.word	0xffff8000

0801da34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801da34:	b580      	push	{r7, lr}
 801da36:	b084      	sub	sp, #16
 801da38:	af00      	add	r7, sp, #0
 801da3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	2244      	movs	r2, #68	@ 0x44
 801da40:	5a9b      	ldrh	r3, [r3, r2]
 801da42:	b29b      	uxth	r3, r3
 801da44:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801da46:	68fb      	ldr	r3, [r7, #12]
}
 801da48:	0018      	movs	r0, r3
 801da4a:	46bd      	mov	sp, r7
 801da4c:	b004      	add	sp, #16
 801da4e:	bd80      	pop	{r7, pc}

0801da50 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801da50:	b580      	push	{r7, lr}
 801da52:	b08a      	sub	sp, #40	@ 0x28
 801da54:	af00      	add	r7, sp, #0
 801da56:	60f8      	str	r0, [r7, #12]
 801da58:	60b9      	str	r1, [r7, #8]
 801da5a:	0019      	movs	r1, r3
 801da5c:	1dbb      	adds	r3, r7, #6
 801da5e:	801a      	strh	r2, [r3, #0]
 801da60:	1d3b      	adds	r3, r7, #4
 801da62:	1c0a      	adds	r2, r1, #0
 801da64:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801da66:	1d3b      	adds	r3, r7, #4
 801da68:	881b      	ldrh	r3, [r3, #0]
 801da6a:	3301      	adds	r3, #1
 801da6c:	085b      	lsrs	r3, r3, #1
 801da6e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801da74:	68bb      	ldr	r3, [r7, #8]
 801da76:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801da78:	1dbb      	adds	r3, r7, #6
 801da7a:	881a      	ldrh	r2, [r3, #0]
 801da7c:	697b      	ldr	r3, [r7, #20]
 801da7e:	18d3      	adds	r3, r2, r3
 801da80:	2280      	movs	r2, #128	@ 0x80
 801da82:	00d2      	lsls	r2, r2, #3
 801da84:	4694      	mov	ip, r2
 801da86:	4463      	add	r3, ip
 801da88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801da8a:	69bb      	ldr	r3, [r7, #24]
 801da8c:	627b      	str	r3, [r7, #36]	@ 0x24
 801da8e:	e020      	b.n	801dad2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801da90:	69fb      	ldr	r3, [r7, #28]
 801da92:	781a      	ldrb	r2, [r3, #0]
 801da94:	2112      	movs	r1, #18
 801da96:	187b      	adds	r3, r7, r1
 801da98:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801da9a:	69fb      	ldr	r3, [r7, #28]
 801da9c:	3301      	adds	r3, #1
 801da9e:	781b      	ldrb	r3, [r3, #0]
 801daa0:	021b      	lsls	r3, r3, #8
 801daa2:	b21a      	sxth	r2, r3
 801daa4:	187b      	adds	r3, r7, r1
 801daa6:	2000      	movs	r0, #0
 801daa8:	5e1b      	ldrsh	r3, [r3, r0]
 801daaa:	4313      	orrs	r3, r2
 801daac:	b21a      	sxth	r2, r3
 801daae:	187b      	adds	r3, r7, r1
 801dab0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801dab2:	6a3b      	ldr	r3, [r7, #32]
 801dab4:	187a      	adds	r2, r7, r1
 801dab6:	8812      	ldrh	r2, [r2, #0]
 801dab8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801daba:	6a3b      	ldr	r3, [r7, #32]
 801dabc:	3302      	adds	r3, #2
 801dabe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801dac0:	69fb      	ldr	r3, [r7, #28]
 801dac2:	3301      	adds	r3, #1
 801dac4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801dac6:	69fb      	ldr	r3, [r7, #28]
 801dac8:	3301      	adds	r3, #1
 801daca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801dacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dace:	3b01      	subs	r3, #1
 801dad0:	627b      	str	r3, [r7, #36]	@ 0x24
 801dad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	d1db      	bne.n	801da90 <USB_WritePMA+0x40>
  }
}
 801dad8:	46c0      	nop			@ (mov r8, r8)
 801dada:	46c0      	nop			@ (mov r8, r8)
 801dadc:	46bd      	mov	sp, r7
 801dade:	b00a      	add	sp, #40	@ 0x28
 801dae0:	bd80      	pop	{r7, pc}

0801dae2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801dae2:	b580      	push	{r7, lr}
 801dae4:	b08a      	sub	sp, #40	@ 0x28
 801dae6:	af00      	add	r7, sp, #0
 801dae8:	60f8      	str	r0, [r7, #12]
 801daea:	60b9      	str	r1, [r7, #8]
 801daec:	0019      	movs	r1, r3
 801daee:	1dbb      	adds	r3, r7, #6
 801daf0:	801a      	strh	r2, [r3, #0]
 801daf2:	1d3b      	adds	r3, r7, #4
 801daf4:	1c0a      	adds	r2, r1, #0
 801daf6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801daf8:	1d3b      	adds	r3, r7, #4
 801dafa:	881b      	ldrh	r3, [r3, #0]
 801dafc:	085b      	lsrs	r3, r3, #1
 801dafe:	b29b      	uxth	r3, r3
 801db00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801db06:	68bb      	ldr	r3, [r7, #8]
 801db08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801db0a:	1dbb      	adds	r3, r7, #6
 801db0c:	881a      	ldrh	r2, [r3, #0]
 801db0e:	697b      	ldr	r3, [r7, #20]
 801db10:	18d3      	adds	r3, r2, r3
 801db12:	2280      	movs	r2, #128	@ 0x80
 801db14:	00d2      	lsls	r2, r2, #3
 801db16:	4694      	mov	ip, r2
 801db18:	4463      	add	r3, ip
 801db1a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801db1c:	69bb      	ldr	r3, [r7, #24]
 801db1e:	627b      	str	r3, [r7, #36]	@ 0x24
 801db20:	e018      	b.n	801db54 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801db22:	6a3b      	ldr	r3, [r7, #32]
 801db24:	881b      	ldrh	r3, [r3, #0]
 801db26:	b29b      	uxth	r3, r3
 801db28:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801db2a:	6a3b      	ldr	r3, [r7, #32]
 801db2c:	3302      	adds	r3, #2
 801db2e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801db30:	693b      	ldr	r3, [r7, #16]
 801db32:	b2da      	uxtb	r2, r3
 801db34:	69fb      	ldr	r3, [r7, #28]
 801db36:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801db38:	69fb      	ldr	r3, [r7, #28]
 801db3a:	3301      	adds	r3, #1
 801db3c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801db3e:	693b      	ldr	r3, [r7, #16]
 801db40:	0a1b      	lsrs	r3, r3, #8
 801db42:	b2da      	uxtb	r2, r3
 801db44:	69fb      	ldr	r3, [r7, #28]
 801db46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801db48:	69fb      	ldr	r3, [r7, #28]
 801db4a:	3301      	adds	r3, #1
 801db4c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801db4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db50:	3b01      	subs	r3, #1
 801db52:	627b      	str	r3, [r7, #36]	@ 0x24
 801db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db56:	2b00      	cmp	r3, #0
 801db58:	d1e3      	bne.n	801db22 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801db5a:	1d3b      	adds	r3, r7, #4
 801db5c:	881b      	ldrh	r3, [r3, #0]
 801db5e:	2201      	movs	r2, #1
 801db60:	4013      	ands	r3, r2
 801db62:	b29b      	uxth	r3, r3
 801db64:	2b00      	cmp	r3, #0
 801db66:	d007      	beq.n	801db78 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801db68:	6a3b      	ldr	r3, [r7, #32]
 801db6a:	881b      	ldrh	r3, [r3, #0]
 801db6c:	b29b      	uxth	r3, r3
 801db6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801db70:	693b      	ldr	r3, [r7, #16]
 801db72:	b2da      	uxtb	r2, r3
 801db74:	69fb      	ldr	r3, [r7, #28]
 801db76:	701a      	strb	r2, [r3, #0]
  }
}
 801db78:	46c0      	nop			@ (mov r8, r8)
 801db7a:	46bd      	mov	sp, r7
 801db7c:	b00a      	add	sp, #40	@ 0x28
 801db7e:	bd80      	pop	{r7, pc}

0801db80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801db80:	b580      	push	{r7, lr}
 801db82:	b084      	sub	sp, #16
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
 801db88:	000a      	movs	r2, r1
 801db8a:	1cfb      	adds	r3, r7, #3
 801db8c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801db8e:	230f      	movs	r3, #15
 801db90:	18fb      	adds	r3, r7, r3
 801db92:	2200      	movs	r2, #0
 801db94:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	7c1b      	ldrb	r3, [r3, #16]
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d116      	bne.n	801dbcc <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801db9e:	2380      	movs	r3, #128	@ 0x80
 801dba0:	009b      	lsls	r3, r3, #2
 801dba2:	6878      	ldr	r0, [r7, #4]
 801dba4:	2202      	movs	r2, #2
 801dba6:	2181      	movs	r1, #129	@ 0x81
 801dba8:	f002 f8eb 	bl	801fd82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	2201      	movs	r2, #1
 801dbb0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801dbb2:	2380      	movs	r3, #128	@ 0x80
 801dbb4:	009b      	lsls	r3, r3, #2
 801dbb6:	6878      	ldr	r0, [r7, #4]
 801dbb8:	2202      	movs	r2, #2
 801dbba:	2101      	movs	r1, #1
 801dbbc:	f002 f8e1 	bl	801fd82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801dbc0:	687a      	ldr	r2, [r7, #4]
 801dbc2:	23b6      	movs	r3, #182	@ 0xb6
 801dbc4:	005b      	lsls	r3, r3, #1
 801dbc6:	2101      	movs	r1, #1
 801dbc8:	50d1      	str	r1, [r2, r3]
 801dbca:	e013      	b.n	801dbf4 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801dbcc:	6878      	ldr	r0, [r7, #4]
 801dbce:	2340      	movs	r3, #64	@ 0x40
 801dbd0:	2202      	movs	r2, #2
 801dbd2:	2181      	movs	r1, #129	@ 0x81
 801dbd4:	f002 f8d5 	bl	801fd82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	2201      	movs	r2, #1
 801dbdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801dbde:	6878      	ldr	r0, [r7, #4]
 801dbe0:	2340      	movs	r3, #64	@ 0x40
 801dbe2:	2202      	movs	r2, #2
 801dbe4:	2101      	movs	r1, #1
 801dbe6:	f002 f8cc 	bl	801fd82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801dbea:	687a      	ldr	r2, [r7, #4]
 801dbec:	23b6      	movs	r3, #182	@ 0xb6
 801dbee:	005b      	lsls	r3, r3, #1
 801dbf0:	2101      	movs	r1, #1
 801dbf2:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801dbf4:	6878      	ldr	r0, [r7, #4]
 801dbf6:	2308      	movs	r3, #8
 801dbf8:	2203      	movs	r2, #3
 801dbfa:	2182      	movs	r1, #130	@ 0x82
 801dbfc:	f002 f8c1 	bl	801fd82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	2201      	movs	r2, #1
 801dc04:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801dc06:	2387      	movs	r3, #135	@ 0x87
 801dc08:	009b      	lsls	r3, r3, #2
 801dc0a:	0018      	movs	r0, r3
 801dc0c:	f002 fa52 	bl	80200b4 <USBD_static_malloc>
 801dc10:	0001      	movs	r1, r0
 801dc12:	687a      	ldr	r2, [r7, #4]
 801dc14:	23ae      	movs	r3, #174	@ 0xae
 801dc16:	009b      	lsls	r3, r3, #2
 801dc18:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801dc1a:	687a      	ldr	r2, [r7, #4]
 801dc1c:	23ae      	movs	r3, #174	@ 0xae
 801dc1e:	009b      	lsls	r3, r3, #2
 801dc20:	58d3      	ldr	r3, [r2, r3]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d104      	bne.n	801dc30 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801dc26:	230f      	movs	r3, #15
 801dc28:	18fb      	adds	r3, r7, r3
 801dc2a:	2201      	movs	r2, #1
 801dc2c:	701a      	strb	r2, [r3, #0]
 801dc2e:	e02c      	b.n	801dc8a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dc30:	687a      	ldr	r2, [r7, #4]
 801dc32:	23ae      	movs	r3, #174	@ 0xae
 801dc34:	009b      	lsls	r3, r3, #2
 801dc36:	58d3      	ldr	r3, [r2, r3]
 801dc38:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801dc3a:	687a      	ldr	r2, [r7, #4]
 801dc3c:	23af      	movs	r3, #175	@ 0xaf
 801dc3e:	009b      	lsls	r3, r3, #2
 801dc40:	58d3      	ldr	r3, [r2, r3]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801dc46:	68ba      	ldr	r2, [r7, #8]
 801dc48:	2385      	movs	r3, #133	@ 0x85
 801dc4a:	009b      	lsls	r3, r3, #2
 801dc4c:	2100      	movs	r1, #0
 801dc4e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801dc50:	68ba      	ldr	r2, [r7, #8]
 801dc52:	2386      	movs	r3, #134	@ 0x86
 801dc54:	009b      	lsls	r3, r3, #2
 801dc56:	2100      	movs	r1, #0
 801dc58:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	7c1b      	ldrb	r3, [r3, #16]
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d10a      	bne.n	801dc78 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801dc62:	68ba      	ldr	r2, [r7, #8]
 801dc64:	2381      	movs	r3, #129	@ 0x81
 801dc66:	009b      	lsls	r3, r3, #2
 801dc68:	58d2      	ldr	r2, [r2, r3]
 801dc6a:	2380      	movs	r3, #128	@ 0x80
 801dc6c:	009b      	lsls	r3, r3, #2
 801dc6e:	6878      	ldr	r0, [r7, #4]
 801dc70:	2101      	movs	r1, #1
 801dc72:	f002 f9d1 	bl	8020018 <USBD_LL_PrepareReceive>
 801dc76:	e008      	b.n	801dc8a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801dc78:	68ba      	ldr	r2, [r7, #8]
 801dc7a:	2381      	movs	r3, #129	@ 0x81
 801dc7c:	009b      	lsls	r3, r3, #2
 801dc7e:	58d2      	ldr	r2, [r2, r3]
 801dc80:	6878      	ldr	r0, [r7, #4]
 801dc82:	2340      	movs	r3, #64	@ 0x40
 801dc84:	2101      	movs	r1, #1
 801dc86:	f002 f9c7 	bl	8020018 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801dc8a:	230f      	movs	r3, #15
 801dc8c:	18fb      	adds	r3, r7, r3
 801dc8e:	781b      	ldrb	r3, [r3, #0]
}
 801dc90:	0018      	movs	r0, r3
 801dc92:	46bd      	mov	sp, r7
 801dc94:	b004      	add	sp, #16
 801dc96:	bd80      	pop	{r7, pc}

0801dc98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801dc98:	b580      	push	{r7, lr}
 801dc9a:	b084      	sub	sp, #16
 801dc9c:	af00      	add	r7, sp, #0
 801dc9e:	6078      	str	r0, [r7, #4]
 801dca0:	000a      	movs	r2, r1
 801dca2:	1cfb      	adds	r3, r7, #3
 801dca4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801dca6:	230f      	movs	r3, #15
 801dca8:	18fb      	adds	r3, r7, r3
 801dcaa:	2200      	movs	r2, #0
 801dcac:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	2181      	movs	r1, #129	@ 0x81
 801dcb2:	0018      	movs	r0, r3
 801dcb4:	f002 f89c 	bl	801fdf0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	2200      	movs	r2, #0
 801dcbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	2101      	movs	r1, #1
 801dcc2:	0018      	movs	r0, r3
 801dcc4:	f002 f894 	bl	801fdf0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801dcc8:	687a      	ldr	r2, [r7, #4]
 801dcca:	23b6      	movs	r3, #182	@ 0xb6
 801dccc:	005b      	lsls	r3, r3, #1
 801dcce:	2100      	movs	r1, #0
 801dcd0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	2182      	movs	r1, #130	@ 0x82
 801dcd6:	0018      	movs	r0, r3
 801dcd8:	f002 f88a 	bl	801fdf0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	2200      	movs	r2, #0
 801dce0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801dce2:	687a      	ldr	r2, [r7, #4]
 801dce4:	23ae      	movs	r3, #174	@ 0xae
 801dce6:	009b      	lsls	r3, r3, #2
 801dce8:	58d3      	ldr	r3, [r2, r3]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d011      	beq.n	801dd12 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801dcee:	687a      	ldr	r2, [r7, #4]
 801dcf0:	23af      	movs	r3, #175	@ 0xaf
 801dcf2:	009b      	lsls	r3, r3, #2
 801dcf4:	58d3      	ldr	r3, [r2, r3]
 801dcf6:	685b      	ldr	r3, [r3, #4]
 801dcf8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801dcfa:	687a      	ldr	r2, [r7, #4]
 801dcfc:	23ae      	movs	r3, #174	@ 0xae
 801dcfe:	009b      	lsls	r3, r3, #2
 801dd00:	58d3      	ldr	r3, [r2, r3]
 801dd02:	0018      	movs	r0, r3
 801dd04:	f002 f9e2 	bl	80200cc <USBD_static_free>
    pdev->pClassData = NULL;
 801dd08:	687a      	ldr	r2, [r7, #4]
 801dd0a:	23ae      	movs	r3, #174	@ 0xae
 801dd0c:	009b      	lsls	r3, r3, #2
 801dd0e:	2100      	movs	r1, #0
 801dd10:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801dd12:	230f      	movs	r3, #15
 801dd14:	18fb      	adds	r3, r7, r3
 801dd16:	781b      	ldrb	r3, [r3, #0]
}
 801dd18:	0018      	movs	r0, r3
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	b004      	add	sp, #16
 801dd1e:	bd80      	pop	{r7, pc}

0801dd20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801dd20:	b580      	push	{r7, lr}
 801dd22:	b086      	sub	sp, #24
 801dd24:	af00      	add	r7, sp, #0
 801dd26:	6078      	str	r0, [r7, #4]
 801dd28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dd2a:	687a      	ldr	r2, [r7, #4]
 801dd2c:	23ae      	movs	r3, #174	@ 0xae
 801dd2e:	009b      	lsls	r3, r3, #2
 801dd30:	58d3      	ldr	r3, [r2, r3]
 801dd32:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801dd34:	230f      	movs	r3, #15
 801dd36:	18fb      	adds	r3, r7, r3
 801dd38:	2200      	movs	r2, #0
 801dd3a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801dd3c:	230c      	movs	r3, #12
 801dd3e:	18fb      	adds	r3, r7, r3
 801dd40:	2200      	movs	r2, #0
 801dd42:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801dd44:	2317      	movs	r3, #23
 801dd46:	18fb      	adds	r3, r7, r3
 801dd48:	2200      	movs	r2, #0
 801dd4a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	781b      	ldrb	r3, [r3, #0]
 801dd50:	001a      	movs	r2, r3
 801dd52:	2360      	movs	r3, #96	@ 0x60
 801dd54:	4013      	ands	r3, r2
 801dd56:	d03d      	beq.n	801ddd4 <USBD_CDC_Setup+0xb4>
 801dd58:	2b20      	cmp	r3, #32
 801dd5a:	d000      	beq.n	801dd5e <USBD_CDC_Setup+0x3e>
 801dd5c:	e094      	b.n	801de88 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801dd5e:	683b      	ldr	r3, [r7, #0]
 801dd60:	88db      	ldrh	r3, [r3, #6]
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d02b      	beq.n	801ddbe <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801dd66:	683b      	ldr	r3, [r7, #0]
 801dd68:	781b      	ldrb	r3, [r3, #0]
 801dd6a:	b25b      	sxtb	r3, r3
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	da12      	bge.n	801dd96 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801dd70:	687a      	ldr	r2, [r7, #4]
 801dd72:	23af      	movs	r3, #175	@ 0xaf
 801dd74:	009b      	lsls	r3, r3, #2
 801dd76:	58d3      	ldr	r3, [r2, r3]
 801dd78:	689b      	ldr	r3, [r3, #8]
 801dd7a:	683a      	ldr	r2, [r7, #0]
 801dd7c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801dd7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801dd80:	683a      	ldr	r2, [r7, #0]
 801dd82:	88d2      	ldrh	r2, [r2, #6]
 801dd84:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801dd86:	6939      	ldr	r1, [r7, #16]
 801dd88:	683b      	ldr	r3, [r7, #0]
 801dd8a:	88da      	ldrh	r2, [r3, #6]
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	0018      	movs	r0, r3
 801dd90:	f001 fbaf 	bl	801f4f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801dd94:	e083      	b.n	801de9e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801dd96:	683b      	ldr	r3, [r7, #0]
 801dd98:	7859      	ldrb	r1, [r3, #1]
 801dd9a:	693a      	ldr	r2, [r7, #16]
 801dd9c:	2380      	movs	r3, #128	@ 0x80
 801dd9e:	009b      	lsls	r3, r3, #2
 801dda0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801dda2:	683b      	ldr	r3, [r7, #0]
 801dda4:	88db      	ldrh	r3, [r3, #6]
 801dda6:	b2d9      	uxtb	r1, r3
 801dda8:	693b      	ldr	r3, [r7, #16]
 801ddaa:	4a40      	ldr	r2, [pc, #256]	@ (801deac <USBD_CDC_Setup+0x18c>)
 801ddac:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ddae:	6939      	ldr	r1, [r7, #16]
 801ddb0:	683b      	ldr	r3, [r7, #0]
 801ddb2:	88da      	ldrh	r2, [r3, #6]
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	0018      	movs	r0, r3
 801ddb8:	f001 fbce 	bl	801f558 <USBD_CtlPrepareRx>
      break;
 801ddbc:	e06f      	b.n	801de9e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ddbe:	687a      	ldr	r2, [r7, #4]
 801ddc0:	23af      	movs	r3, #175	@ 0xaf
 801ddc2:	009b      	lsls	r3, r3, #2
 801ddc4:	58d3      	ldr	r3, [r2, r3]
 801ddc6:	689b      	ldr	r3, [r3, #8]
 801ddc8:	683a      	ldr	r2, [r7, #0]
 801ddca:	7850      	ldrb	r0, [r2, #1]
 801ddcc:	6839      	ldr	r1, [r7, #0]
 801ddce:	2200      	movs	r2, #0
 801ddd0:	4798      	blx	r3
      break;
 801ddd2:	e064      	b.n	801de9e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ddd4:	683b      	ldr	r3, [r7, #0]
 801ddd6:	785b      	ldrb	r3, [r3, #1]
 801ddd8:	2b0b      	cmp	r3, #11
 801ddda:	d037      	beq.n	801de4c <USBD_CDC_Setup+0x12c>
 801dddc:	dc47      	bgt.n	801de6e <USBD_CDC_Setup+0x14e>
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d002      	beq.n	801dde8 <USBD_CDC_Setup+0xc8>
 801dde2:	2b0a      	cmp	r3, #10
 801dde4:	d019      	beq.n	801de1a <USBD_CDC_Setup+0xfa>
 801dde6:	e042      	b.n	801de6e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801dde8:	687a      	ldr	r2, [r7, #4]
 801ddea:	23a7      	movs	r3, #167	@ 0xa7
 801ddec:	009b      	lsls	r3, r3, #2
 801ddee:	5cd3      	ldrb	r3, [r2, r3]
 801ddf0:	2b03      	cmp	r3, #3
 801ddf2:	d107      	bne.n	801de04 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801ddf4:	230c      	movs	r3, #12
 801ddf6:	18f9      	adds	r1, r7, r3
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	2202      	movs	r2, #2
 801ddfc:	0018      	movs	r0, r3
 801ddfe:	f001 fb78 	bl	801f4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801de02:	e040      	b.n	801de86 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801de04:	683a      	ldr	r2, [r7, #0]
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	0011      	movs	r1, r2
 801de0a:	0018      	movs	r0, r3
 801de0c:	f001 faf3 	bl	801f3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 801de10:	2317      	movs	r3, #23
 801de12:	18fb      	adds	r3, r7, r3
 801de14:	2202      	movs	r2, #2
 801de16:	701a      	strb	r2, [r3, #0]
          break;
 801de18:	e035      	b.n	801de86 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801de1a:	687a      	ldr	r2, [r7, #4]
 801de1c:	23a7      	movs	r3, #167	@ 0xa7
 801de1e:	009b      	lsls	r3, r3, #2
 801de20:	5cd3      	ldrb	r3, [r2, r3]
 801de22:	2b03      	cmp	r3, #3
 801de24:	d107      	bne.n	801de36 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801de26:	230f      	movs	r3, #15
 801de28:	18f9      	adds	r1, r7, r3
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	2201      	movs	r2, #1
 801de2e:	0018      	movs	r0, r3
 801de30:	f001 fb5f 	bl	801f4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801de34:	e027      	b.n	801de86 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801de36:	683a      	ldr	r2, [r7, #0]
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	0011      	movs	r1, r2
 801de3c:	0018      	movs	r0, r3
 801de3e:	f001 fada 	bl	801f3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 801de42:	2317      	movs	r3, #23
 801de44:	18fb      	adds	r3, r7, r3
 801de46:	2202      	movs	r2, #2
 801de48:	701a      	strb	r2, [r3, #0]
          break;
 801de4a:	e01c      	b.n	801de86 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801de4c:	687a      	ldr	r2, [r7, #4]
 801de4e:	23a7      	movs	r3, #167	@ 0xa7
 801de50:	009b      	lsls	r3, r3, #2
 801de52:	5cd3      	ldrb	r3, [r2, r3]
 801de54:	2b03      	cmp	r3, #3
 801de56:	d015      	beq.n	801de84 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801de58:	683a      	ldr	r2, [r7, #0]
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	0011      	movs	r1, r2
 801de5e:	0018      	movs	r0, r3
 801de60:	f001 fac9 	bl	801f3f6 <USBD_CtlError>
            ret = USBD_FAIL;
 801de64:	2317      	movs	r3, #23
 801de66:	18fb      	adds	r3, r7, r3
 801de68:	2202      	movs	r2, #2
 801de6a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801de6c:	e00a      	b.n	801de84 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801de6e:	683a      	ldr	r2, [r7, #0]
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	0011      	movs	r1, r2
 801de74:	0018      	movs	r0, r3
 801de76:	f001 fabe 	bl	801f3f6 <USBD_CtlError>
          ret = USBD_FAIL;
 801de7a:	2317      	movs	r3, #23
 801de7c:	18fb      	adds	r3, r7, r3
 801de7e:	2202      	movs	r2, #2
 801de80:	701a      	strb	r2, [r3, #0]
          break;
 801de82:	e000      	b.n	801de86 <USBD_CDC_Setup+0x166>
          break;
 801de84:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801de86:	e00a      	b.n	801de9e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801de88:	683a      	ldr	r2, [r7, #0]
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	0011      	movs	r1, r2
 801de8e:	0018      	movs	r0, r3
 801de90:	f001 fab1 	bl	801f3f6 <USBD_CtlError>
      ret = USBD_FAIL;
 801de94:	2317      	movs	r3, #23
 801de96:	18fb      	adds	r3, r7, r3
 801de98:	2202      	movs	r2, #2
 801de9a:	701a      	strb	r2, [r3, #0]
      break;
 801de9c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801de9e:	2317      	movs	r3, #23
 801dea0:	18fb      	adds	r3, r7, r3
 801dea2:	781b      	ldrb	r3, [r3, #0]
}
 801dea4:	0018      	movs	r0, r3
 801dea6:	46bd      	mov	sp, r7
 801dea8:	b006      	add	sp, #24
 801deaa:	bd80      	pop	{r7, pc}
 801deac:	00000201 	.word	0x00000201

0801deb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801deb0:	b580      	push	{r7, lr}
 801deb2:	b084      	sub	sp, #16
 801deb4:	af00      	add	r7, sp, #0
 801deb6:	6078      	str	r0, [r7, #4]
 801deb8:	000a      	movs	r2, r1
 801deba:	1cfb      	adds	r3, r7, #3
 801debc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801debe:	687a      	ldr	r2, [r7, #4]
 801dec0:	23ae      	movs	r3, #174	@ 0xae
 801dec2:	009b      	lsls	r3, r3, #2
 801dec4:	58d3      	ldr	r3, [r2, r3]
 801dec6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801dec8:	687a      	ldr	r2, [r7, #4]
 801deca:	23b0      	movs	r3, #176	@ 0xb0
 801decc:	009b      	lsls	r3, r3, #2
 801dece:	58d3      	ldr	r3, [r2, r3]
 801ded0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801ded2:	687a      	ldr	r2, [r7, #4]
 801ded4:	23ae      	movs	r3, #174	@ 0xae
 801ded6:	009b      	lsls	r3, r3, #2
 801ded8:	58d3      	ldr	r3, [r2, r3]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d03e      	beq.n	801df5c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801dede:	1cfb      	adds	r3, r7, #3
 801dee0:	781a      	ldrb	r2, [r3, #0]
 801dee2:	6879      	ldr	r1, [r7, #4]
 801dee4:	0013      	movs	r3, r2
 801dee6:	009b      	lsls	r3, r3, #2
 801dee8:	189b      	adds	r3, r3, r2
 801deea:	009b      	lsls	r3, r3, #2
 801deec:	18cb      	adds	r3, r1, r3
 801deee:	331c      	adds	r3, #28
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	2b00      	cmp	r3, #0
 801def4:	d02b      	beq.n	801df4e <USBD_CDC_DataIn+0x9e>
 801def6:	1cfb      	adds	r3, r7, #3
 801def8:	781a      	ldrb	r2, [r3, #0]
 801defa:	6879      	ldr	r1, [r7, #4]
 801defc:	0013      	movs	r3, r2
 801defe:	009b      	lsls	r3, r3, #2
 801df00:	189b      	adds	r3, r3, r2
 801df02:	009b      	lsls	r3, r3, #2
 801df04:	18cb      	adds	r3, r1, r3
 801df06:	331c      	adds	r3, #28
 801df08:	6818      	ldr	r0, [r3, #0]
 801df0a:	1cfb      	adds	r3, r7, #3
 801df0c:	781a      	ldrb	r2, [r3, #0]
 801df0e:	68b9      	ldr	r1, [r7, #8]
 801df10:	0013      	movs	r3, r2
 801df12:	009b      	lsls	r3, r3, #2
 801df14:	189b      	adds	r3, r3, r2
 801df16:	00db      	lsls	r3, r3, #3
 801df18:	18cb      	adds	r3, r1, r3
 801df1a:	3338      	adds	r3, #56	@ 0x38
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	0019      	movs	r1, r3
 801df20:	f7e2 f9c6 	bl	80002b0 <__aeabi_uidivmod>
 801df24:	1e0b      	subs	r3, r1, #0
 801df26:	d112      	bne.n	801df4e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801df28:	1cfb      	adds	r3, r7, #3
 801df2a:	781a      	ldrb	r2, [r3, #0]
 801df2c:	6879      	ldr	r1, [r7, #4]
 801df2e:	0013      	movs	r3, r2
 801df30:	009b      	lsls	r3, r3, #2
 801df32:	189b      	adds	r3, r3, r2
 801df34:	009b      	lsls	r3, r3, #2
 801df36:	18cb      	adds	r3, r1, r3
 801df38:	331c      	adds	r3, #28
 801df3a:	2200      	movs	r2, #0
 801df3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801df3e:	1cfb      	adds	r3, r7, #3
 801df40:	7819      	ldrb	r1, [r3, #0]
 801df42:	6878      	ldr	r0, [r7, #4]
 801df44:	2300      	movs	r3, #0
 801df46:	2200      	movs	r2, #0
 801df48:	f002 f82f 	bl	801ffaa <USBD_LL_Transmit>
 801df4c:	e004      	b.n	801df58 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801df4e:	68fa      	ldr	r2, [r7, #12]
 801df50:	2385      	movs	r3, #133	@ 0x85
 801df52:	009b      	lsls	r3, r3, #2
 801df54:	2100      	movs	r1, #0
 801df56:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801df58:	2300      	movs	r3, #0
 801df5a:	e000      	b.n	801df5e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801df5c:	2302      	movs	r3, #2
  }
}
 801df5e:	0018      	movs	r0, r3
 801df60:	46bd      	mov	sp, r7
 801df62:	b004      	add	sp, #16
 801df64:	bd80      	pop	{r7, pc}

0801df66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801df66:	b580      	push	{r7, lr}
 801df68:	b084      	sub	sp, #16
 801df6a:	af00      	add	r7, sp, #0
 801df6c:	6078      	str	r0, [r7, #4]
 801df6e:	000a      	movs	r2, r1
 801df70:	1cfb      	adds	r3, r7, #3
 801df72:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801df74:	687a      	ldr	r2, [r7, #4]
 801df76:	23ae      	movs	r3, #174	@ 0xae
 801df78:	009b      	lsls	r3, r3, #2
 801df7a:	58d3      	ldr	r3, [r2, r3]
 801df7c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801df7e:	1cfb      	adds	r3, r7, #3
 801df80:	781a      	ldrb	r2, [r3, #0]
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	0011      	movs	r1, r2
 801df86:	0018      	movs	r0, r3
 801df88:	f002 f87d 	bl	8020086 <USBD_LL_GetRxDataSize>
 801df8c:	0001      	movs	r1, r0
 801df8e:	68fa      	ldr	r2, [r7, #12]
 801df90:	2383      	movs	r3, #131	@ 0x83
 801df92:	009b      	lsls	r3, r3, #2
 801df94:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801df96:	687a      	ldr	r2, [r7, #4]
 801df98:	23ae      	movs	r3, #174	@ 0xae
 801df9a:	009b      	lsls	r3, r3, #2
 801df9c:	58d3      	ldr	r3, [r2, r3]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d011      	beq.n	801dfc6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801dfa2:	687a      	ldr	r2, [r7, #4]
 801dfa4:	23af      	movs	r3, #175	@ 0xaf
 801dfa6:	009b      	lsls	r3, r3, #2
 801dfa8:	58d3      	ldr	r3, [r2, r3]
 801dfaa:	68da      	ldr	r2, [r3, #12]
 801dfac:	68f9      	ldr	r1, [r7, #12]
 801dfae:	2381      	movs	r3, #129	@ 0x81
 801dfb0:	009b      	lsls	r3, r3, #2
 801dfb2:	58c8      	ldr	r0, [r1, r3]
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	2183      	movs	r1, #131	@ 0x83
 801dfb8:	0089      	lsls	r1, r1, #2
 801dfba:	468c      	mov	ip, r1
 801dfbc:	4463      	add	r3, ip
 801dfbe:	0019      	movs	r1, r3
 801dfc0:	4790      	blx	r2

    return USBD_OK;
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	e000      	b.n	801dfc8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801dfc6:	2302      	movs	r3, #2
  }
}
 801dfc8:	0018      	movs	r0, r3
 801dfca:	46bd      	mov	sp, r7
 801dfcc:	b004      	add	sp, #16
 801dfce:	bd80      	pop	{r7, pc}

0801dfd0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801dfd0:	b590      	push	{r4, r7, lr}
 801dfd2:	b085      	sub	sp, #20
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801dfd8:	687a      	ldr	r2, [r7, #4]
 801dfda:	23ae      	movs	r3, #174	@ 0xae
 801dfdc:	009b      	lsls	r3, r3, #2
 801dfde:	58d3      	ldr	r3, [r2, r3]
 801dfe0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801dfe2:	687a      	ldr	r2, [r7, #4]
 801dfe4:	23af      	movs	r3, #175	@ 0xaf
 801dfe6:	009b      	lsls	r3, r3, #2
 801dfe8:	58d3      	ldr	r3, [r2, r3]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d018      	beq.n	801e020 <USBD_CDC_EP0_RxReady+0x50>
 801dfee:	68fa      	ldr	r2, [r7, #12]
 801dff0:	2380      	movs	r3, #128	@ 0x80
 801dff2:	009b      	lsls	r3, r3, #2
 801dff4:	5cd3      	ldrb	r3, [r2, r3]
 801dff6:	2bff      	cmp	r3, #255	@ 0xff
 801dff8:	d012      	beq.n	801e020 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801dffa:	687a      	ldr	r2, [r7, #4]
 801dffc:	23af      	movs	r3, #175	@ 0xaf
 801dffe:	009b      	lsls	r3, r3, #2
 801e000:	58d3      	ldr	r3, [r2, r3]
 801e002:	689b      	ldr	r3, [r3, #8]
 801e004:	68f9      	ldr	r1, [r7, #12]
 801e006:	2280      	movs	r2, #128	@ 0x80
 801e008:	0092      	lsls	r2, r2, #2
 801e00a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801e00c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801e00e:	68fa      	ldr	r2, [r7, #12]
 801e010:	4c06      	ldr	r4, [pc, #24]	@ (801e02c <USBD_CDC_EP0_RxReady+0x5c>)
 801e012:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801e014:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801e016:	68fa      	ldr	r2, [r7, #12]
 801e018:	2380      	movs	r3, #128	@ 0x80
 801e01a:	009b      	lsls	r3, r3, #2
 801e01c:	21ff      	movs	r1, #255	@ 0xff
 801e01e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801e020:	2300      	movs	r3, #0
}
 801e022:	0018      	movs	r0, r3
 801e024:	46bd      	mov	sp, r7
 801e026:	b005      	add	sp, #20
 801e028:	bd90      	pop	{r4, r7, pc}
 801e02a:	46c0      	nop			@ (mov r8, r8)
 801e02c:	00000201 	.word	0x00000201

0801e030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801e030:	b580      	push	{r7, lr}
 801e032:	b082      	sub	sp, #8
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2243      	movs	r2, #67	@ 0x43
 801e03c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801e03e:	4b02      	ldr	r3, [pc, #8]	@ (801e048 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801e040:	0018      	movs	r0, r3
 801e042:	46bd      	mov	sp, r7
 801e044:	b002      	add	sp, #8
 801e046:	bd80      	pop	{r7, pc}
 801e048:	20000184 	.word	0x20000184

0801e04c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801e04c:	b580      	push	{r7, lr}
 801e04e:	b082      	sub	sp, #8
 801e050:	af00      	add	r7, sp, #0
 801e052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	2243      	movs	r2, #67	@ 0x43
 801e058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801e05a:	4b02      	ldr	r3, [pc, #8]	@ (801e064 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801e05c:	0018      	movs	r0, r3
 801e05e:	46bd      	mov	sp, r7
 801e060:	b002      	add	sp, #8
 801e062:	bd80      	pop	{r7, pc}
 801e064:	20000140 	.word	0x20000140

0801e068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801e068:	b580      	push	{r7, lr}
 801e06a:	b082      	sub	sp, #8
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	2243      	movs	r2, #67	@ 0x43
 801e074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801e076:	4b02      	ldr	r3, [pc, #8]	@ (801e080 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801e078:	0018      	movs	r0, r3
 801e07a:	46bd      	mov	sp, r7
 801e07c:	b002      	add	sp, #8
 801e07e:	bd80      	pop	{r7, pc}
 801e080:	200001c8 	.word	0x200001c8

0801e084 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801e084:	b580      	push	{r7, lr}
 801e086:	b082      	sub	sp, #8
 801e088:	af00      	add	r7, sp, #0
 801e08a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	220a      	movs	r2, #10
 801e090:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801e092:	4b02      	ldr	r3, [pc, #8]	@ (801e09c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801e094:	0018      	movs	r0, r3
 801e096:	46bd      	mov	sp, r7
 801e098:	b002      	add	sp, #8
 801e09a:	bd80      	pop	{r7, pc}
 801e09c:	200000fc 	.word	0x200000fc

0801e0a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801e0a0:	b580      	push	{r7, lr}
 801e0a2:	b084      	sub	sp, #16
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	6078      	str	r0, [r7, #4]
 801e0a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801e0aa:	200f      	movs	r0, #15
 801e0ac:	183b      	adds	r3, r7, r0
 801e0ae:	2202      	movs	r2, #2
 801e0b0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801e0b2:	683b      	ldr	r3, [r7, #0]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d007      	beq.n	801e0c8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801e0b8:	687a      	ldr	r2, [r7, #4]
 801e0ba:	23af      	movs	r3, #175	@ 0xaf
 801e0bc:	009b      	lsls	r3, r3, #2
 801e0be:	6839      	ldr	r1, [r7, #0]
 801e0c0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801e0c2:	183b      	adds	r3, r7, r0
 801e0c4:	2200      	movs	r2, #0
 801e0c6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801e0c8:	230f      	movs	r3, #15
 801e0ca:	18fb      	adds	r3, r7, r3
 801e0cc:	781b      	ldrb	r3, [r3, #0]
}
 801e0ce:	0018      	movs	r0, r3
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	b004      	add	sp, #16
 801e0d4:	bd80      	pop	{r7, pc}

0801e0d6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801e0d6:	b580      	push	{r7, lr}
 801e0d8:	b086      	sub	sp, #24
 801e0da:	af00      	add	r7, sp, #0
 801e0dc:	60f8      	str	r0, [r7, #12]
 801e0de:	60b9      	str	r1, [r7, #8]
 801e0e0:	1dbb      	adds	r3, r7, #6
 801e0e2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801e0e4:	68fa      	ldr	r2, [r7, #12]
 801e0e6:	23ae      	movs	r3, #174	@ 0xae
 801e0e8:	009b      	lsls	r3, r3, #2
 801e0ea:	58d3      	ldr	r3, [r2, r3]
 801e0ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801e0ee:	697a      	ldr	r2, [r7, #20]
 801e0f0:	2382      	movs	r3, #130	@ 0x82
 801e0f2:	009b      	lsls	r3, r3, #2
 801e0f4:	68b9      	ldr	r1, [r7, #8]
 801e0f6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801e0f8:	1dbb      	adds	r3, r7, #6
 801e0fa:	8819      	ldrh	r1, [r3, #0]
 801e0fc:	697a      	ldr	r2, [r7, #20]
 801e0fe:	2384      	movs	r3, #132	@ 0x84
 801e100:	009b      	lsls	r3, r3, #2
 801e102:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801e104:	2300      	movs	r3, #0
}
 801e106:	0018      	movs	r0, r3
 801e108:	46bd      	mov	sp, r7
 801e10a:	b006      	add	sp, #24
 801e10c:	bd80      	pop	{r7, pc}

0801e10e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801e10e:	b580      	push	{r7, lr}
 801e110:	b084      	sub	sp, #16
 801e112:	af00      	add	r7, sp, #0
 801e114:	6078      	str	r0, [r7, #4]
 801e116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801e118:	687a      	ldr	r2, [r7, #4]
 801e11a:	23ae      	movs	r3, #174	@ 0xae
 801e11c:	009b      	lsls	r3, r3, #2
 801e11e:	58d3      	ldr	r3, [r2, r3]
 801e120:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801e122:	68fa      	ldr	r2, [r7, #12]
 801e124:	2381      	movs	r3, #129	@ 0x81
 801e126:	009b      	lsls	r3, r3, #2
 801e128:	6839      	ldr	r1, [r7, #0]
 801e12a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801e12c:	2300      	movs	r3, #0
}
 801e12e:	0018      	movs	r0, r3
 801e130:	46bd      	mov	sp, r7
 801e132:	b004      	add	sp, #16
 801e134:	bd80      	pop	{r7, pc}

0801e136 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801e136:	b580      	push	{r7, lr}
 801e138:	b084      	sub	sp, #16
 801e13a:	af00      	add	r7, sp, #0
 801e13c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801e13e:	687a      	ldr	r2, [r7, #4]
 801e140:	23ae      	movs	r3, #174	@ 0xae
 801e142:	009b      	lsls	r3, r3, #2
 801e144:	58d3      	ldr	r3, [r2, r3]
 801e146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801e148:	687a      	ldr	r2, [r7, #4]
 801e14a:	23ae      	movs	r3, #174	@ 0xae
 801e14c:	009b      	lsls	r3, r3, #2
 801e14e:	58d3      	ldr	r3, [r2, r3]
 801e150:	2b00      	cmp	r3, #0
 801e152:	d022      	beq.n	801e19a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801e154:	68fa      	ldr	r2, [r7, #12]
 801e156:	2385      	movs	r3, #133	@ 0x85
 801e158:	009b      	lsls	r3, r3, #2
 801e15a:	58d3      	ldr	r3, [r2, r3]
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d11a      	bne.n	801e196 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801e160:	68fa      	ldr	r2, [r7, #12]
 801e162:	2385      	movs	r3, #133	@ 0x85
 801e164:	009b      	lsls	r3, r3, #2
 801e166:	2101      	movs	r1, #1
 801e168:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801e16a:	68fa      	ldr	r2, [r7, #12]
 801e16c:	2384      	movs	r3, #132	@ 0x84
 801e16e:	009b      	lsls	r3, r3, #2
 801e170:	58d2      	ldr	r2, [r2, r3]
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801e176:	68fa      	ldr	r2, [r7, #12]
 801e178:	2382      	movs	r3, #130	@ 0x82
 801e17a:	009b      	lsls	r3, r3, #2
 801e17c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801e17e:	68fa      	ldr	r2, [r7, #12]
 801e180:	2384      	movs	r3, #132	@ 0x84
 801e182:	009b      	lsls	r3, r3, #2
 801e184:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801e186:	b29b      	uxth	r3, r3
 801e188:	6878      	ldr	r0, [r7, #4]
 801e18a:	000a      	movs	r2, r1
 801e18c:	2181      	movs	r1, #129	@ 0x81
 801e18e:	f001 ff0c 	bl	801ffaa <USBD_LL_Transmit>

      return USBD_OK;
 801e192:	2300      	movs	r3, #0
 801e194:	e002      	b.n	801e19c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801e196:	2301      	movs	r3, #1
 801e198:	e000      	b.n	801e19c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801e19a:	2302      	movs	r3, #2
  }
}
 801e19c:	0018      	movs	r0, r3
 801e19e:	46bd      	mov	sp, r7
 801e1a0:	b004      	add	sp, #16
 801e1a2:	bd80      	pop	{r7, pc}

0801e1a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b084      	sub	sp, #16
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801e1ac:	687a      	ldr	r2, [r7, #4]
 801e1ae:	23ae      	movs	r3, #174	@ 0xae
 801e1b0:	009b      	lsls	r3, r3, #2
 801e1b2:	58d3      	ldr	r3, [r2, r3]
 801e1b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801e1b6:	687a      	ldr	r2, [r7, #4]
 801e1b8:	23ae      	movs	r3, #174	@ 0xae
 801e1ba:	009b      	lsls	r3, r3, #2
 801e1bc:	58d3      	ldr	r3, [r2, r3]
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d019      	beq.n	801e1f6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	7c1b      	ldrb	r3, [r3, #16]
 801e1c6:	2b00      	cmp	r3, #0
 801e1c8:	d10a      	bne.n	801e1e0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801e1ca:	68fa      	ldr	r2, [r7, #12]
 801e1cc:	2381      	movs	r3, #129	@ 0x81
 801e1ce:	009b      	lsls	r3, r3, #2
 801e1d0:	58d2      	ldr	r2, [r2, r3]
 801e1d2:	2380      	movs	r3, #128	@ 0x80
 801e1d4:	009b      	lsls	r3, r3, #2
 801e1d6:	6878      	ldr	r0, [r7, #4]
 801e1d8:	2101      	movs	r1, #1
 801e1da:	f001 ff1d 	bl	8020018 <USBD_LL_PrepareReceive>
 801e1de:	e008      	b.n	801e1f2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801e1e0:	68fa      	ldr	r2, [r7, #12]
 801e1e2:	2381      	movs	r3, #129	@ 0x81
 801e1e4:	009b      	lsls	r3, r3, #2
 801e1e6:	58d2      	ldr	r2, [r2, r3]
 801e1e8:	6878      	ldr	r0, [r7, #4]
 801e1ea:	2340      	movs	r3, #64	@ 0x40
 801e1ec:	2101      	movs	r1, #1
 801e1ee:	f001 ff13 	bl	8020018 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	e000      	b.n	801e1f8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801e1f6:	2302      	movs	r3, #2
  }
}
 801e1f8:	0018      	movs	r0, r3
 801e1fa:	46bd      	mov	sp, r7
 801e1fc:	b004      	add	sp, #16
 801e1fe:	bd80      	pop	{r7, pc}

0801e200 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801e200:	b580      	push	{r7, lr}
 801e202:	b084      	sub	sp, #16
 801e204:	af00      	add	r7, sp, #0
 801e206:	60f8      	str	r0, [r7, #12]
 801e208:	60b9      	str	r1, [r7, #8]
 801e20a:	1dfb      	adds	r3, r7, #7
 801e20c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	2b00      	cmp	r3, #0
 801e212:	d101      	bne.n	801e218 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801e214:	2302      	movs	r3, #2
 801e216:	e020      	b.n	801e25a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801e218:	68fa      	ldr	r2, [r7, #12]
 801e21a:	23ad      	movs	r3, #173	@ 0xad
 801e21c:	009b      	lsls	r3, r3, #2
 801e21e:	58d3      	ldr	r3, [r2, r3]
 801e220:	2b00      	cmp	r3, #0
 801e222:	d004      	beq.n	801e22e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801e224:	68fa      	ldr	r2, [r7, #12]
 801e226:	23ad      	movs	r3, #173	@ 0xad
 801e228:	009b      	lsls	r3, r3, #2
 801e22a:	2100      	movs	r1, #0
 801e22c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801e22e:	68bb      	ldr	r3, [r7, #8]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d004      	beq.n	801e23e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801e234:	68fa      	ldr	r2, [r7, #12]
 801e236:	23ac      	movs	r3, #172	@ 0xac
 801e238:	009b      	lsls	r3, r3, #2
 801e23a:	68b9      	ldr	r1, [r7, #8]
 801e23c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e23e:	68fa      	ldr	r2, [r7, #12]
 801e240:	23a7      	movs	r3, #167	@ 0xa7
 801e242:	009b      	lsls	r3, r3, #2
 801e244:	2101      	movs	r1, #1
 801e246:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	1dfa      	adds	r2, r7, #7
 801e24c:	7812      	ldrb	r2, [r2, #0]
 801e24e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	0018      	movs	r0, r3
 801e254:	f001 fd0c 	bl	801fc70 <USBD_LL_Init>

  return USBD_OK;
 801e258:	2300      	movs	r3, #0
}
 801e25a:	0018      	movs	r0, r3
 801e25c:	46bd      	mov	sp, r7
 801e25e:	b004      	add	sp, #16
 801e260:	bd80      	pop	{r7, pc}

0801e262 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801e262:	b580      	push	{r7, lr}
 801e264:	b084      	sub	sp, #16
 801e266:	af00      	add	r7, sp, #0
 801e268:	6078      	str	r0, [r7, #4]
 801e26a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801e26c:	200f      	movs	r0, #15
 801e26e:	183b      	adds	r3, r7, r0
 801e270:	2200      	movs	r2, #0
 801e272:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801e274:	683b      	ldr	r3, [r7, #0]
 801e276:	2b00      	cmp	r3, #0
 801e278:	d008      	beq.n	801e28c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801e27a:	687a      	ldr	r2, [r7, #4]
 801e27c:	23ad      	movs	r3, #173	@ 0xad
 801e27e:	009b      	lsls	r3, r3, #2
 801e280:	6839      	ldr	r1, [r7, #0]
 801e282:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801e284:	183b      	adds	r3, r7, r0
 801e286:	2200      	movs	r2, #0
 801e288:	701a      	strb	r2, [r3, #0]
 801e28a:	e003      	b.n	801e294 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801e28c:	230f      	movs	r3, #15
 801e28e:	18fb      	adds	r3, r7, r3
 801e290:	2202      	movs	r2, #2
 801e292:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801e294:	230f      	movs	r3, #15
 801e296:	18fb      	adds	r3, r7, r3
 801e298:	781b      	ldrb	r3, [r3, #0]
}
 801e29a:	0018      	movs	r0, r3
 801e29c:	46bd      	mov	sp, r7
 801e29e:	b004      	add	sp, #16
 801e2a0:	bd80      	pop	{r7, pc}

0801e2a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801e2a2:	b580      	push	{r7, lr}
 801e2a4:	b082      	sub	sp, #8
 801e2a6:	af00      	add	r7, sp, #0
 801e2a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	0018      	movs	r0, r3
 801e2ae:	f001 fd43 	bl	801fd38 <USBD_LL_Start>

  return USBD_OK;
 801e2b2:	2300      	movs	r3, #0
}
 801e2b4:	0018      	movs	r0, r3
 801e2b6:	46bd      	mov	sp, r7
 801e2b8:	b002      	add	sp, #8
 801e2ba:	bd80      	pop	{r7, pc}

0801e2bc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801e2bc:	b580      	push	{r7, lr}
 801e2be:	b082      	sub	sp, #8
 801e2c0:	af00      	add	r7, sp, #0
 801e2c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801e2c4:	2300      	movs	r3, #0
}
 801e2c6:	0018      	movs	r0, r3
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	b002      	add	sp, #8
 801e2cc:	bd80      	pop	{r7, pc}

0801e2ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e2ce:	b590      	push	{r4, r7, lr}
 801e2d0:	b085      	sub	sp, #20
 801e2d2:	af00      	add	r7, sp, #0
 801e2d4:	6078      	str	r0, [r7, #4]
 801e2d6:	000a      	movs	r2, r1
 801e2d8:	1cfb      	adds	r3, r7, #3
 801e2da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801e2dc:	240f      	movs	r4, #15
 801e2de:	193b      	adds	r3, r7, r4
 801e2e0:	2202      	movs	r2, #2
 801e2e2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801e2e4:	687a      	ldr	r2, [r7, #4]
 801e2e6:	23ad      	movs	r3, #173	@ 0xad
 801e2e8:	009b      	lsls	r3, r3, #2
 801e2ea:	58d3      	ldr	r3, [r2, r3]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d00e      	beq.n	801e30e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801e2f0:	687a      	ldr	r2, [r7, #4]
 801e2f2:	23ad      	movs	r3, #173	@ 0xad
 801e2f4:	009b      	lsls	r3, r3, #2
 801e2f6:	58d3      	ldr	r3, [r2, r3]
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	1cfa      	adds	r2, r7, #3
 801e2fc:	7811      	ldrb	r1, [r2, #0]
 801e2fe:	687a      	ldr	r2, [r7, #4]
 801e300:	0010      	movs	r0, r2
 801e302:	4798      	blx	r3
 801e304:	1e03      	subs	r3, r0, #0
 801e306:	d102      	bne.n	801e30e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801e308:	193b      	adds	r3, r7, r4
 801e30a:	2200      	movs	r2, #0
 801e30c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801e30e:	230f      	movs	r3, #15
 801e310:	18fb      	adds	r3, r7, r3
 801e312:	781b      	ldrb	r3, [r3, #0]
}
 801e314:	0018      	movs	r0, r3
 801e316:	46bd      	mov	sp, r7
 801e318:	b005      	add	sp, #20
 801e31a:	bd90      	pop	{r4, r7, pc}

0801e31c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801e31c:	b580      	push	{r7, lr}
 801e31e:	b082      	sub	sp, #8
 801e320:	af00      	add	r7, sp, #0
 801e322:	6078      	str	r0, [r7, #4]
 801e324:	000a      	movs	r2, r1
 801e326:	1cfb      	adds	r3, r7, #3
 801e328:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801e32a:	687a      	ldr	r2, [r7, #4]
 801e32c:	23ad      	movs	r3, #173	@ 0xad
 801e32e:	009b      	lsls	r3, r3, #2
 801e330:	58d3      	ldr	r3, [r2, r3]
 801e332:	685b      	ldr	r3, [r3, #4]
 801e334:	1cfa      	adds	r2, r7, #3
 801e336:	7811      	ldrb	r1, [r2, #0]
 801e338:	687a      	ldr	r2, [r7, #4]
 801e33a:	0010      	movs	r0, r2
 801e33c:	4798      	blx	r3

  return USBD_OK;
 801e33e:	2300      	movs	r3, #0
}
 801e340:	0018      	movs	r0, r3
 801e342:	46bd      	mov	sp, r7
 801e344:	b002      	add	sp, #8
 801e346:	bd80      	pop	{r7, pc}

0801e348 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801e348:	b580      	push	{r7, lr}
 801e34a:	b082      	sub	sp, #8
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	6078      	str	r0, [r7, #4]
 801e350:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	22aa      	movs	r2, #170	@ 0xaa
 801e356:	0092      	lsls	r2, r2, #2
 801e358:	4694      	mov	ip, r2
 801e35a:	4463      	add	r3, ip
 801e35c:	683a      	ldr	r2, [r7, #0]
 801e35e:	0011      	movs	r1, r2
 801e360:	0018      	movs	r0, r3
 801e362:	f001 f810 	bl	801f386 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801e366:	687a      	ldr	r2, [r7, #4]
 801e368:	23a5      	movs	r3, #165	@ 0xa5
 801e36a:	009b      	lsls	r3, r3, #2
 801e36c:	2101      	movs	r1, #1
 801e36e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	4a23      	ldr	r2, [pc, #140]	@ (801e400 <USBD_LL_SetupStage+0xb8>)
 801e374:	5a9b      	ldrh	r3, [r3, r2]
 801e376:	0019      	movs	r1, r3
 801e378:	687a      	ldr	r2, [r7, #4]
 801e37a:	23a6      	movs	r3, #166	@ 0xa6
 801e37c:	009b      	lsls	r3, r3, #2
 801e37e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801e380:	687a      	ldr	r2, [r7, #4]
 801e382:	23aa      	movs	r3, #170	@ 0xaa
 801e384:	009b      	lsls	r3, r3, #2
 801e386:	5cd3      	ldrb	r3, [r2, r3]
 801e388:	001a      	movs	r2, r3
 801e38a:	231f      	movs	r3, #31
 801e38c:	4013      	ands	r3, r2
 801e38e:	2b02      	cmp	r3, #2
 801e390:	d019      	beq.n	801e3c6 <USBD_LL_SetupStage+0x7e>
 801e392:	d822      	bhi.n	801e3da <USBD_LL_SetupStage+0x92>
 801e394:	2b00      	cmp	r3, #0
 801e396:	d002      	beq.n	801e39e <USBD_LL_SetupStage+0x56>
 801e398:	2b01      	cmp	r3, #1
 801e39a:	d00a      	beq.n	801e3b2 <USBD_LL_SetupStage+0x6a>
 801e39c:	e01d      	b.n	801e3da <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	22aa      	movs	r2, #170	@ 0xaa
 801e3a2:	0092      	lsls	r2, r2, #2
 801e3a4:	189a      	adds	r2, r3, r2
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	0011      	movs	r1, r2
 801e3aa:	0018      	movs	r0, r3
 801e3ac:	f000 fa10 	bl	801e7d0 <USBD_StdDevReq>
      break;
 801e3b0:	e020      	b.n	801e3f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	22aa      	movs	r2, #170	@ 0xaa
 801e3b6:	0092      	lsls	r2, r2, #2
 801e3b8:	189a      	adds	r2, r3, r2
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	0011      	movs	r1, r2
 801e3be:	0018      	movs	r0, r3
 801e3c0:	f000 fa78 	bl	801e8b4 <USBD_StdItfReq>
      break;
 801e3c4:	e016      	b.n	801e3f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	22aa      	movs	r2, #170	@ 0xaa
 801e3ca:	0092      	lsls	r2, r2, #2
 801e3cc:	189a      	adds	r2, r3, r2
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	0011      	movs	r1, r2
 801e3d2:	0018      	movs	r0, r3
 801e3d4:	f000 fac5 	bl	801e962 <USBD_StdEPReq>
      break;
 801e3d8:	e00c      	b.n	801e3f4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801e3da:	687a      	ldr	r2, [r7, #4]
 801e3dc:	23aa      	movs	r3, #170	@ 0xaa
 801e3de:	009b      	lsls	r3, r3, #2
 801e3e0:	5cd3      	ldrb	r3, [r2, r3]
 801e3e2:	227f      	movs	r2, #127	@ 0x7f
 801e3e4:	4393      	bics	r3, r2
 801e3e6:	b2da      	uxtb	r2, r3
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	0011      	movs	r1, r2
 801e3ec:	0018      	movs	r0, r3
 801e3ee:	f001 fd2a 	bl	801fe46 <USBD_LL_StallEP>
      break;
 801e3f2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e3f4:	2300      	movs	r3, #0
}
 801e3f6:	0018      	movs	r0, r3
 801e3f8:	46bd      	mov	sp, r7
 801e3fa:	b002      	add	sp, #8
 801e3fc:	bd80      	pop	{r7, pc}
 801e3fe:	46c0      	nop			@ (mov r8, r8)
 801e400:	000002ae 	.word	0x000002ae

0801e404 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801e404:	b580      	push	{r7, lr}
 801e406:	b086      	sub	sp, #24
 801e408:	af00      	add	r7, sp, #0
 801e40a:	60f8      	str	r0, [r7, #12]
 801e40c:	607a      	str	r2, [r7, #4]
 801e40e:	200b      	movs	r0, #11
 801e410:	183b      	adds	r3, r7, r0
 801e412:	1c0a      	adds	r2, r1, #0
 801e414:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e416:	183b      	adds	r3, r7, r0
 801e418:	781b      	ldrb	r3, [r3, #0]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d154      	bne.n	801e4c8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	3355      	adds	r3, #85	@ 0x55
 801e422:	33ff      	adds	r3, #255	@ 0xff
 801e424:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801e426:	68fa      	ldr	r2, [r7, #12]
 801e428:	23a5      	movs	r3, #165	@ 0xa5
 801e42a:	009b      	lsls	r3, r3, #2
 801e42c:	58d3      	ldr	r3, [r2, r3]
 801e42e:	2b03      	cmp	r3, #3
 801e430:	d139      	bne.n	801e4a6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801e432:	697b      	ldr	r3, [r7, #20]
 801e434:	68da      	ldr	r2, [r3, #12]
 801e436:	697b      	ldr	r3, [r7, #20]
 801e438:	691b      	ldr	r3, [r3, #16]
 801e43a:	429a      	cmp	r2, r3
 801e43c:	d919      	bls.n	801e472 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801e43e:	697b      	ldr	r3, [r7, #20]
 801e440:	68da      	ldr	r2, [r3, #12]
 801e442:	697b      	ldr	r3, [r7, #20]
 801e444:	691b      	ldr	r3, [r3, #16]
 801e446:	1ad2      	subs	r2, r2, r3
 801e448:	697b      	ldr	r3, [r7, #20]
 801e44a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e44c:	697b      	ldr	r3, [r7, #20]
 801e44e:	68da      	ldr	r2, [r3, #12]
 801e450:	697b      	ldr	r3, [r7, #20]
 801e452:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e454:	429a      	cmp	r2, r3
 801e456:	d203      	bcs.n	801e460 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e458:	697b      	ldr	r3, [r7, #20]
 801e45a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801e45c:	b29b      	uxth	r3, r3
 801e45e:	e002      	b.n	801e466 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801e460:	697b      	ldr	r3, [r7, #20]
 801e462:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801e464:	b29b      	uxth	r3, r3
 801e466:	6879      	ldr	r1, [r7, #4]
 801e468:	68f8      	ldr	r0, [r7, #12]
 801e46a:	001a      	movs	r2, r3
 801e46c:	f001 f898 	bl	801f5a0 <USBD_CtlContinueRx>
 801e470:	e045      	b.n	801e4fe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e472:	68fa      	ldr	r2, [r7, #12]
 801e474:	23ad      	movs	r3, #173	@ 0xad
 801e476:	009b      	lsls	r3, r3, #2
 801e478:	58d3      	ldr	r3, [r2, r3]
 801e47a:	691b      	ldr	r3, [r3, #16]
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d00d      	beq.n	801e49c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e480:	68fa      	ldr	r2, [r7, #12]
 801e482:	23a7      	movs	r3, #167	@ 0xa7
 801e484:	009b      	lsls	r3, r3, #2
 801e486:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801e488:	2b03      	cmp	r3, #3
 801e48a:	d107      	bne.n	801e49c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801e48c:	68fa      	ldr	r2, [r7, #12]
 801e48e:	23ad      	movs	r3, #173	@ 0xad
 801e490:	009b      	lsls	r3, r3, #2
 801e492:	58d3      	ldr	r3, [r2, r3]
 801e494:	691b      	ldr	r3, [r3, #16]
 801e496:	68fa      	ldr	r2, [r7, #12]
 801e498:	0010      	movs	r0, r2
 801e49a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801e49c:	68fb      	ldr	r3, [r7, #12]
 801e49e:	0018      	movs	r0, r3
 801e4a0:	f001 f891 	bl	801f5c6 <USBD_CtlSendStatus>
 801e4a4:	e02b      	b.n	801e4fe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801e4a6:	68fa      	ldr	r2, [r7, #12]
 801e4a8:	23a5      	movs	r3, #165	@ 0xa5
 801e4aa:	009b      	lsls	r3, r3, #2
 801e4ac:	58d3      	ldr	r3, [r2, r3]
 801e4ae:	2b05      	cmp	r3, #5
 801e4b0:	d125      	bne.n	801e4fe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801e4b2:	68fa      	ldr	r2, [r7, #12]
 801e4b4:	23a5      	movs	r3, #165	@ 0xa5
 801e4b6:	009b      	lsls	r3, r3, #2
 801e4b8:	2100      	movs	r1, #0
 801e4ba:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	2100      	movs	r1, #0
 801e4c0:	0018      	movs	r0, r3
 801e4c2:	f001 fcc0 	bl	801fe46 <USBD_LL_StallEP>
 801e4c6:	e01a      	b.n	801e4fe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801e4c8:	68fa      	ldr	r2, [r7, #12]
 801e4ca:	23ad      	movs	r3, #173	@ 0xad
 801e4cc:	009b      	lsls	r3, r3, #2
 801e4ce:	58d3      	ldr	r3, [r2, r3]
 801e4d0:	699b      	ldr	r3, [r3, #24]
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d011      	beq.n	801e4fa <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e4d6:	68fa      	ldr	r2, [r7, #12]
 801e4d8:	23a7      	movs	r3, #167	@ 0xa7
 801e4da:	009b      	lsls	r3, r3, #2
 801e4dc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801e4de:	2b03      	cmp	r3, #3
 801e4e0:	d10b      	bne.n	801e4fa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801e4e2:	68fa      	ldr	r2, [r7, #12]
 801e4e4:	23ad      	movs	r3, #173	@ 0xad
 801e4e6:	009b      	lsls	r3, r3, #2
 801e4e8:	58d3      	ldr	r3, [r2, r3]
 801e4ea:	699b      	ldr	r3, [r3, #24]
 801e4ec:	220b      	movs	r2, #11
 801e4ee:	18ba      	adds	r2, r7, r2
 801e4f0:	7811      	ldrb	r1, [r2, #0]
 801e4f2:	68fa      	ldr	r2, [r7, #12]
 801e4f4:	0010      	movs	r0, r2
 801e4f6:	4798      	blx	r3
 801e4f8:	e001      	b.n	801e4fe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e4fa:	2302      	movs	r3, #2
 801e4fc:	e000      	b.n	801e500 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801e4fe:	2300      	movs	r3, #0
}
 801e500:	0018      	movs	r0, r3
 801e502:	46bd      	mov	sp, r7
 801e504:	b006      	add	sp, #24
 801e506:	bd80      	pop	{r7, pc}

0801e508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b086      	sub	sp, #24
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	60f8      	str	r0, [r7, #12]
 801e510:	607a      	str	r2, [r7, #4]
 801e512:	200b      	movs	r0, #11
 801e514:	183b      	adds	r3, r7, r0
 801e516:	1c0a      	adds	r2, r1, #0
 801e518:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801e51a:	183b      	adds	r3, r7, r0
 801e51c:	781b      	ldrb	r3, [r3, #0]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d000      	beq.n	801e524 <USBD_LL_DataInStage+0x1c>
 801e522:	e08e      	b.n	801e642 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801e524:	68fb      	ldr	r3, [r7, #12]
 801e526:	3314      	adds	r3, #20
 801e528:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801e52a:	68fa      	ldr	r2, [r7, #12]
 801e52c:	23a5      	movs	r3, #165	@ 0xa5
 801e52e:	009b      	lsls	r3, r3, #2
 801e530:	58d3      	ldr	r3, [r2, r3]
 801e532:	2b02      	cmp	r3, #2
 801e534:	d164      	bne.n	801e600 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801e536:	697b      	ldr	r3, [r7, #20]
 801e538:	68da      	ldr	r2, [r3, #12]
 801e53a:	697b      	ldr	r3, [r7, #20]
 801e53c:	691b      	ldr	r3, [r3, #16]
 801e53e:	429a      	cmp	r2, r3
 801e540:	d915      	bls.n	801e56e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801e542:	697b      	ldr	r3, [r7, #20]
 801e544:	68da      	ldr	r2, [r3, #12]
 801e546:	697b      	ldr	r3, [r7, #20]
 801e548:	691b      	ldr	r3, [r3, #16]
 801e54a:	1ad2      	subs	r2, r2, r3
 801e54c:	697b      	ldr	r3, [r7, #20]
 801e54e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801e550:	697b      	ldr	r3, [r7, #20]
 801e552:	68db      	ldr	r3, [r3, #12]
 801e554:	b29a      	uxth	r2, r3
 801e556:	6879      	ldr	r1, [r7, #4]
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	0018      	movs	r0, r3
 801e55c:	f000 ffe9 	bl	801f532 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e560:	68f8      	ldr	r0, [r7, #12]
 801e562:	2300      	movs	r3, #0
 801e564:	2200      	movs	r2, #0
 801e566:	2100      	movs	r1, #0
 801e568:	f001 fd56 	bl	8020018 <USBD_LL_PrepareReceive>
 801e56c:	e059      	b.n	801e622 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e56e:	697b      	ldr	r3, [r7, #20]
 801e570:	689a      	ldr	r2, [r3, #8]
 801e572:	697b      	ldr	r3, [r7, #20]
 801e574:	691b      	ldr	r3, [r3, #16]
 801e576:	0019      	movs	r1, r3
 801e578:	0010      	movs	r0, r2
 801e57a:	f7e1 fe99 	bl	80002b0 <__aeabi_uidivmod>
 801e57e:	1e0b      	subs	r3, r1, #0
 801e580:	d11f      	bne.n	801e5c2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801e582:	697b      	ldr	r3, [r7, #20]
 801e584:	689a      	ldr	r2, [r3, #8]
 801e586:	697b      	ldr	r3, [r7, #20]
 801e588:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801e58a:	429a      	cmp	r2, r3
 801e58c:	d319      	bcc.n	801e5c2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801e58e:	697b      	ldr	r3, [r7, #20]
 801e590:	689a      	ldr	r2, [r3, #8]
 801e592:	68f9      	ldr	r1, [r7, #12]
 801e594:	23a6      	movs	r3, #166	@ 0xa6
 801e596:	009b      	lsls	r3, r3, #2
 801e598:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801e59a:	429a      	cmp	r2, r3
 801e59c:	d211      	bcs.n	801e5c2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	2200      	movs	r2, #0
 801e5a2:	2100      	movs	r1, #0
 801e5a4:	0018      	movs	r0, r3
 801e5a6:	f000 ffc4 	bl	801f532 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801e5aa:	68fa      	ldr	r2, [r7, #12]
 801e5ac:	23a6      	movs	r3, #166	@ 0xa6
 801e5ae:	009b      	lsls	r3, r3, #2
 801e5b0:	2100      	movs	r1, #0
 801e5b2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801e5b4:	68f8      	ldr	r0, [r7, #12]
 801e5b6:	2300      	movs	r3, #0
 801e5b8:	2200      	movs	r2, #0
 801e5ba:	2100      	movs	r1, #0
 801e5bc:	f001 fd2c 	bl	8020018 <USBD_LL_PrepareReceive>
 801e5c0:	e02f      	b.n	801e622 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e5c2:	68fa      	ldr	r2, [r7, #12]
 801e5c4:	23ad      	movs	r3, #173	@ 0xad
 801e5c6:	009b      	lsls	r3, r3, #2
 801e5c8:	58d3      	ldr	r3, [r2, r3]
 801e5ca:	68db      	ldr	r3, [r3, #12]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d00d      	beq.n	801e5ec <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e5d0:	68fa      	ldr	r2, [r7, #12]
 801e5d2:	23a7      	movs	r3, #167	@ 0xa7
 801e5d4:	009b      	lsls	r3, r3, #2
 801e5d6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801e5d8:	2b03      	cmp	r3, #3
 801e5da:	d107      	bne.n	801e5ec <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801e5dc:	68fa      	ldr	r2, [r7, #12]
 801e5de:	23ad      	movs	r3, #173	@ 0xad
 801e5e0:	009b      	lsls	r3, r3, #2
 801e5e2:	58d3      	ldr	r3, [r2, r3]
 801e5e4:	68db      	ldr	r3, [r3, #12]
 801e5e6:	68fa      	ldr	r2, [r7, #12]
 801e5e8:	0010      	movs	r0, r2
 801e5ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	2180      	movs	r1, #128	@ 0x80
 801e5f0:	0018      	movs	r0, r3
 801e5f2:	f001 fc28 	bl	801fe46 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	0018      	movs	r0, r3
 801e5fa:	f000 fff8 	bl	801f5ee <USBD_CtlReceiveStatus>
 801e5fe:	e010      	b.n	801e622 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e600:	68fa      	ldr	r2, [r7, #12]
 801e602:	23a5      	movs	r3, #165	@ 0xa5
 801e604:	009b      	lsls	r3, r3, #2
 801e606:	58d3      	ldr	r3, [r2, r3]
 801e608:	2b04      	cmp	r3, #4
 801e60a:	d005      	beq.n	801e618 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801e60c:	68fa      	ldr	r2, [r7, #12]
 801e60e:	23a5      	movs	r3, #165	@ 0xa5
 801e610:	009b      	lsls	r3, r3, #2
 801e612:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801e614:	2b00      	cmp	r3, #0
 801e616:	d104      	bne.n	801e622 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	2180      	movs	r1, #128	@ 0x80
 801e61c:	0018      	movs	r0, r3
 801e61e:	f001 fc12 	bl	801fe46 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801e622:	68fa      	ldr	r2, [r7, #12]
 801e624:	23a8      	movs	r3, #168	@ 0xa8
 801e626:	009b      	lsls	r3, r3, #2
 801e628:	5cd3      	ldrb	r3, [r2, r3]
 801e62a:	2b01      	cmp	r3, #1
 801e62c:	d124      	bne.n	801e678 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	0018      	movs	r0, r3
 801e632:	f7ff fe43 	bl	801e2bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801e636:	68fa      	ldr	r2, [r7, #12]
 801e638:	23a8      	movs	r3, #168	@ 0xa8
 801e63a:	009b      	lsls	r3, r3, #2
 801e63c:	2100      	movs	r1, #0
 801e63e:	54d1      	strb	r1, [r2, r3]
 801e640:	e01a      	b.n	801e678 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801e642:	68fa      	ldr	r2, [r7, #12]
 801e644:	23ad      	movs	r3, #173	@ 0xad
 801e646:	009b      	lsls	r3, r3, #2
 801e648:	58d3      	ldr	r3, [r2, r3]
 801e64a:	695b      	ldr	r3, [r3, #20]
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d011      	beq.n	801e674 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801e650:	68fa      	ldr	r2, [r7, #12]
 801e652:	23a7      	movs	r3, #167	@ 0xa7
 801e654:	009b      	lsls	r3, r3, #2
 801e656:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801e658:	2b03      	cmp	r3, #3
 801e65a:	d10b      	bne.n	801e674 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801e65c:	68fa      	ldr	r2, [r7, #12]
 801e65e:	23ad      	movs	r3, #173	@ 0xad
 801e660:	009b      	lsls	r3, r3, #2
 801e662:	58d3      	ldr	r3, [r2, r3]
 801e664:	695b      	ldr	r3, [r3, #20]
 801e666:	220b      	movs	r2, #11
 801e668:	18ba      	adds	r2, r7, r2
 801e66a:	7811      	ldrb	r1, [r2, #0]
 801e66c:	68fa      	ldr	r2, [r7, #12]
 801e66e:	0010      	movs	r0, r2
 801e670:	4798      	blx	r3
 801e672:	e001      	b.n	801e678 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801e674:	2302      	movs	r3, #2
 801e676:	e000      	b.n	801e67a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801e678:	2300      	movs	r3, #0
}
 801e67a:	0018      	movs	r0, r3
 801e67c:	46bd      	mov	sp, r7
 801e67e:	b006      	add	sp, #24
 801e680:	bd80      	pop	{r7, pc}

0801e682 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801e682:	b580      	push	{r7, lr}
 801e684:	b082      	sub	sp, #8
 801e686:	af00      	add	r7, sp, #0
 801e688:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e68a:	6878      	ldr	r0, [r7, #4]
 801e68c:	2340      	movs	r3, #64	@ 0x40
 801e68e:	2200      	movs	r2, #0
 801e690:	2100      	movs	r1, #0
 801e692:	f001 fb76 	bl	801fd82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801e696:	687a      	ldr	r2, [r7, #4]
 801e698:	23ac      	movs	r3, #172	@ 0xac
 801e69a:	005b      	lsls	r3, r3, #1
 801e69c:	2101      	movs	r1, #1
 801e69e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801e6a0:	687a      	ldr	r2, [r7, #4]
 801e6a2:	23b2      	movs	r3, #178	@ 0xb2
 801e6a4:	005b      	lsls	r3, r3, #1
 801e6a6:	2140      	movs	r1, #64	@ 0x40
 801e6a8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801e6aa:	6878      	ldr	r0, [r7, #4]
 801e6ac:	2340      	movs	r3, #64	@ 0x40
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	2180      	movs	r1, #128	@ 0x80
 801e6b2:	f001 fb66 	bl	801fd82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	2201      	movs	r2, #1
 801e6ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	2240      	movs	r2, #64	@ 0x40
 801e6c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801e6c2:	687a      	ldr	r2, [r7, #4]
 801e6c4:	23a7      	movs	r3, #167	@ 0xa7
 801e6c6:	009b      	lsls	r3, r3, #2
 801e6c8:	2101      	movs	r1, #1
 801e6ca:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801e6cc:	687a      	ldr	r2, [r7, #4]
 801e6ce:	23a5      	movs	r3, #165	@ 0xa5
 801e6d0:	009b      	lsls	r3, r3, #2
 801e6d2:	2100      	movs	r1, #0
 801e6d4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	2200      	movs	r2, #0
 801e6da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801e6dc:	687a      	ldr	r2, [r7, #4]
 801e6de:	23a9      	movs	r3, #169	@ 0xa9
 801e6e0:	009b      	lsls	r3, r3, #2
 801e6e2:	2100      	movs	r1, #0
 801e6e4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801e6e6:	687a      	ldr	r2, [r7, #4]
 801e6e8:	23ae      	movs	r3, #174	@ 0xae
 801e6ea:	009b      	lsls	r3, r3, #2
 801e6ec:	58d3      	ldr	r3, [r2, r3]
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	d00a      	beq.n	801e708 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801e6f2:	687a      	ldr	r2, [r7, #4]
 801e6f4:	23ad      	movs	r3, #173	@ 0xad
 801e6f6:	009b      	lsls	r3, r3, #2
 801e6f8:	58d3      	ldr	r3, [r2, r3]
 801e6fa:	685a      	ldr	r2, [r3, #4]
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	685b      	ldr	r3, [r3, #4]
 801e700:	b2d9      	uxtb	r1, r3
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	0018      	movs	r0, r3
 801e706:	4790      	blx	r2
  }

  return USBD_OK;
 801e708:	2300      	movs	r3, #0
}
 801e70a:	0018      	movs	r0, r3
 801e70c:	46bd      	mov	sp, r7
 801e70e:	b002      	add	sp, #8
 801e710:	bd80      	pop	{r7, pc}

0801e712 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801e712:	b580      	push	{r7, lr}
 801e714:	b082      	sub	sp, #8
 801e716:	af00      	add	r7, sp, #0
 801e718:	6078      	str	r0, [r7, #4]
 801e71a:	000a      	movs	r2, r1
 801e71c:	1cfb      	adds	r3, r7, #3
 801e71e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	1cfa      	adds	r2, r7, #3
 801e724:	7812      	ldrb	r2, [r2, #0]
 801e726:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801e728:	2300      	movs	r3, #0
}
 801e72a:	0018      	movs	r0, r3
 801e72c:	46bd      	mov	sp, r7
 801e72e:	b002      	add	sp, #8
 801e730:	bd80      	pop	{r7, pc}
	...

0801e734 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801e734:	b580      	push	{r7, lr}
 801e736:	b082      	sub	sp, #8
 801e738:	af00      	add	r7, sp, #0
 801e73a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801e73c:	687a      	ldr	r2, [r7, #4]
 801e73e:	23a7      	movs	r3, #167	@ 0xa7
 801e740:	009b      	lsls	r3, r3, #2
 801e742:	5cd1      	ldrb	r1, [r2, r3]
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	4a06      	ldr	r2, [pc, #24]	@ (801e760 <USBD_LL_Suspend+0x2c>)
 801e748:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801e74a:	687a      	ldr	r2, [r7, #4]
 801e74c:	23a7      	movs	r3, #167	@ 0xa7
 801e74e:	009b      	lsls	r3, r3, #2
 801e750:	2104      	movs	r1, #4
 801e752:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801e754:	2300      	movs	r3, #0
}
 801e756:	0018      	movs	r0, r3
 801e758:	46bd      	mov	sp, r7
 801e75a:	b002      	add	sp, #8
 801e75c:	bd80      	pop	{r7, pc}
 801e75e:	46c0      	nop			@ (mov r8, r8)
 801e760:	0000029d 	.word	0x0000029d

0801e764 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801e764:	b580      	push	{r7, lr}
 801e766:	b082      	sub	sp, #8
 801e768:	af00      	add	r7, sp, #0
 801e76a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801e76c:	687a      	ldr	r2, [r7, #4]
 801e76e:	23a7      	movs	r3, #167	@ 0xa7
 801e770:	009b      	lsls	r3, r3, #2
 801e772:	5cd3      	ldrb	r3, [r2, r3]
 801e774:	2b04      	cmp	r3, #4
 801e776:	d106      	bne.n	801e786 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	4a05      	ldr	r2, [pc, #20]	@ (801e790 <USBD_LL_Resume+0x2c>)
 801e77c:	5c99      	ldrb	r1, [r3, r2]
 801e77e:	687a      	ldr	r2, [r7, #4]
 801e780:	23a7      	movs	r3, #167	@ 0xa7
 801e782:	009b      	lsls	r3, r3, #2
 801e784:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801e786:	2300      	movs	r3, #0
}
 801e788:	0018      	movs	r0, r3
 801e78a:	46bd      	mov	sp, r7
 801e78c:	b002      	add	sp, #8
 801e78e:	bd80      	pop	{r7, pc}
 801e790:	0000029d 	.word	0x0000029d

0801e794 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801e794:	b580      	push	{r7, lr}
 801e796:	b082      	sub	sp, #8
 801e798:	af00      	add	r7, sp, #0
 801e79a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801e79c:	687a      	ldr	r2, [r7, #4]
 801e79e:	23a7      	movs	r3, #167	@ 0xa7
 801e7a0:	009b      	lsls	r3, r3, #2
 801e7a2:	5cd3      	ldrb	r3, [r2, r3]
 801e7a4:	2b03      	cmp	r3, #3
 801e7a6:	d10e      	bne.n	801e7c6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801e7a8:	687a      	ldr	r2, [r7, #4]
 801e7aa:	23ad      	movs	r3, #173	@ 0xad
 801e7ac:	009b      	lsls	r3, r3, #2
 801e7ae:	58d3      	ldr	r3, [r2, r3]
 801e7b0:	69db      	ldr	r3, [r3, #28]
 801e7b2:	2b00      	cmp	r3, #0
 801e7b4:	d007      	beq.n	801e7c6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801e7b6:	687a      	ldr	r2, [r7, #4]
 801e7b8:	23ad      	movs	r3, #173	@ 0xad
 801e7ba:	009b      	lsls	r3, r3, #2
 801e7bc:	58d3      	ldr	r3, [r2, r3]
 801e7be:	69db      	ldr	r3, [r3, #28]
 801e7c0:	687a      	ldr	r2, [r7, #4]
 801e7c2:	0010      	movs	r0, r2
 801e7c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801e7c6:	2300      	movs	r3, #0
}
 801e7c8:	0018      	movs	r0, r3
 801e7ca:	46bd      	mov	sp, r7
 801e7cc:	b002      	add	sp, #8
 801e7ce:	bd80      	pop	{r7, pc}

0801e7d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b084      	sub	sp, #16
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	6078      	str	r0, [r7, #4]
 801e7d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e7da:	230f      	movs	r3, #15
 801e7dc:	18fb      	adds	r3, r7, r3
 801e7de:	2200      	movs	r2, #0
 801e7e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e7e2:	683b      	ldr	r3, [r7, #0]
 801e7e4:	781b      	ldrb	r3, [r3, #0]
 801e7e6:	001a      	movs	r2, r3
 801e7e8:	2360      	movs	r3, #96	@ 0x60
 801e7ea:	4013      	ands	r3, r2
 801e7ec:	2b40      	cmp	r3, #64	@ 0x40
 801e7ee:	d004      	beq.n	801e7fa <USBD_StdDevReq+0x2a>
 801e7f0:	d84f      	bhi.n	801e892 <USBD_StdDevReq+0xc2>
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d00b      	beq.n	801e80e <USBD_StdDevReq+0x3e>
 801e7f6:	2b20      	cmp	r3, #32
 801e7f8:	d14b      	bne.n	801e892 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e7fa:	687a      	ldr	r2, [r7, #4]
 801e7fc:	23ad      	movs	r3, #173	@ 0xad
 801e7fe:	009b      	lsls	r3, r3, #2
 801e800:	58d3      	ldr	r3, [r2, r3]
 801e802:	689b      	ldr	r3, [r3, #8]
 801e804:	6839      	ldr	r1, [r7, #0]
 801e806:	687a      	ldr	r2, [r7, #4]
 801e808:	0010      	movs	r0, r2
 801e80a:	4798      	blx	r3
      break;
 801e80c:	e048      	b.n	801e8a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801e80e:	683b      	ldr	r3, [r7, #0]
 801e810:	785b      	ldrb	r3, [r3, #1]
 801e812:	2b09      	cmp	r3, #9
 801e814:	d835      	bhi.n	801e882 <USBD_StdDevReq+0xb2>
 801e816:	009a      	lsls	r2, r3, #2
 801e818:	4b25      	ldr	r3, [pc, #148]	@ (801e8b0 <USBD_StdDevReq+0xe0>)
 801e81a:	18d3      	adds	r3, r2, r3
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801e820:	683a      	ldr	r2, [r7, #0]
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	0011      	movs	r1, r2
 801e826:	0018      	movs	r0, r3
 801e828:	f000 fa52 	bl	801ecd0 <USBD_GetDescriptor>
          break;
 801e82c:	e030      	b.n	801e890 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801e82e:	683a      	ldr	r2, [r7, #0]
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	0011      	movs	r1, r2
 801e834:	0018      	movs	r0, r3
 801e836:	f000 fbfd 	bl	801f034 <USBD_SetAddress>
          break;
 801e83a:	e029      	b.n	801e890 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801e83c:	683a      	ldr	r2, [r7, #0]
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	0011      	movs	r1, r2
 801e842:	0018      	movs	r0, r3
 801e844:	f000 fc4a 	bl	801f0dc <USBD_SetConfig>
          break;
 801e848:	e022      	b.n	801e890 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801e84a:	683a      	ldr	r2, [r7, #0]
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	0011      	movs	r1, r2
 801e850:	0018      	movs	r0, r3
 801e852:	f000 fce7 	bl	801f224 <USBD_GetConfig>
          break;
 801e856:	e01b      	b.n	801e890 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801e858:	683a      	ldr	r2, [r7, #0]
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	0011      	movs	r1, r2
 801e85e:	0018      	movs	r0, r3
 801e860:	f000 fd1b 	bl	801f29a <USBD_GetStatus>
          break;
 801e864:	e014      	b.n	801e890 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801e866:	683a      	ldr	r2, [r7, #0]
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	0011      	movs	r1, r2
 801e86c:	0018      	movs	r0, r3
 801e86e:	f000 fd4e 	bl	801f30e <USBD_SetFeature>
          break;
 801e872:	e00d      	b.n	801e890 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801e874:	683a      	ldr	r2, [r7, #0]
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	0011      	movs	r1, r2
 801e87a:	0018      	movs	r0, r3
 801e87c:	f000 fd5d 	bl	801f33a <USBD_ClrFeature>
          break;
 801e880:	e006      	b.n	801e890 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801e882:	683a      	ldr	r2, [r7, #0]
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	0011      	movs	r1, r2
 801e888:	0018      	movs	r0, r3
 801e88a:	f000 fdb4 	bl	801f3f6 <USBD_CtlError>
          break;
 801e88e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e890:	e006      	b.n	801e8a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801e892:	683a      	ldr	r2, [r7, #0]
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	0011      	movs	r1, r2
 801e898:	0018      	movs	r0, r3
 801e89a:	f000 fdac 	bl	801f3f6 <USBD_CtlError>
      break;
 801e89e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801e8a0:	230f      	movs	r3, #15
 801e8a2:	18fb      	adds	r3, r7, r3
 801e8a4:	781b      	ldrb	r3, [r3, #0]
}
 801e8a6:	0018      	movs	r0, r3
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	b004      	add	sp, #16
 801e8ac:	bd80      	pop	{r7, pc}
 801e8ae:	46c0      	nop			@ (mov r8, r8)
 801e8b0:	080291f8 	.word	0x080291f8

0801e8b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801e8b4:	b5b0      	push	{r4, r5, r7, lr}
 801e8b6:	b084      	sub	sp, #16
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	6078      	str	r0, [r7, #4]
 801e8bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801e8be:	230f      	movs	r3, #15
 801e8c0:	18fb      	adds	r3, r7, r3
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e8c6:	683b      	ldr	r3, [r7, #0]
 801e8c8:	781b      	ldrb	r3, [r3, #0]
 801e8ca:	001a      	movs	r2, r3
 801e8cc:	2360      	movs	r3, #96	@ 0x60
 801e8ce:	4013      	ands	r3, r2
 801e8d0:	2b40      	cmp	r3, #64	@ 0x40
 801e8d2:	d004      	beq.n	801e8de <USBD_StdItfReq+0x2a>
 801e8d4:	d839      	bhi.n	801e94a <USBD_StdItfReq+0x96>
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d001      	beq.n	801e8de <USBD_StdItfReq+0x2a>
 801e8da:	2b20      	cmp	r3, #32
 801e8dc:	d135      	bne.n	801e94a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801e8de:	687a      	ldr	r2, [r7, #4]
 801e8e0:	23a7      	movs	r3, #167	@ 0xa7
 801e8e2:	009b      	lsls	r3, r3, #2
 801e8e4:	5cd3      	ldrb	r3, [r2, r3]
 801e8e6:	3b01      	subs	r3, #1
 801e8e8:	2b02      	cmp	r3, #2
 801e8ea:	d825      	bhi.n	801e938 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801e8ec:	683b      	ldr	r3, [r7, #0]
 801e8ee:	889b      	ldrh	r3, [r3, #4]
 801e8f0:	b2db      	uxtb	r3, r3
 801e8f2:	2b01      	cmp	r3, #1
 801e8f4:	d819      	bhi.n	801e92a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e8f6:	687a      	ldr	r2, [r7, #4]
 801e8f8:	23ad      	movs	r3, #173	@ 0xad
 801e8fa:	009b      	lsls	r3, r3, #2
 801e8fc:	58d3      	ldr	r3, [r2, r3]
 801e8fe:	689b      	ldr	r3, [r3, #8]
 801e900:	250f      	movs	r5, #15
 801e902:	197c      	adds	r4, r7, r5
 801e904:	6839      	ldr	r1, [r7, #0]
 801e906:	687a      	ldr	r2, [r7, #4]
 801e908:	0010      	movs	r0, r2
 801e90a:	4798      	blx	r3
 801e90c:	0003      	movs	r3, r0
 801e90e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801e910:	683b      	ldr	r3, [r7, #0]
 801e912:	88db      	ldrh	r3, [r3, #6]
 801e914:	2b00      	cmp	r3, #0
 801e916:	d116      	bne.n	801e946 <USBD_StdItfReq+0x92>
 801e918:	197b      	adds	r3, r7, r5
 801e91a:	781b      	ldrb	r3, [r3, #0]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d112      	bne.n	801e946 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	0018      	movs	r0, r3
 801e924:	f000 fe4f 	bl	801f5c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801e928:	e00d      	b.n	801e946 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801e92a:	683a      	ldr	r2, [r7, #0]
 801e92c:	687b      	ldr	r3, [r7, #4]
 801e92e:	0011      	movs	r1, r2
 801e930:	0018      	movs	r0, r3
 801e932:	f000 fd60 	bl	801f3f6 <USBD_CtlError>
          break;
 801e936:	e006      	b.n	801e946 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801e938:	683a      	ldr	r2, [r7, #0]
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	0011      	movs	r1, r2
 801e93e:	0018      	movs	r0, r3
 801e940:	f000 fd59 	bl	801f3f6 <USBD_CtlError>
          break;
 801e944:	e000      	b.n	801e948 <USBD_StdItfReq+0x94>
          break;
 801e946:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801e948:	e006      	b.n	801e958 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801e94a:	683a      	ldr	r2, [r7, #0]
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	0011      	movs	r1, r2
 801e950:	0018      	movs	r0, r3
 801e952:	f000 fd50 	bl	801f3f6 <USBD_CtlError>
      break;
 801e956:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801e958:	2300      	movs	r3, #0
}
 801e95a:	0018      	movs	r0, r3
 801e95c:	46bd      	mov	sp, r7
 801e95e:	b004      	add	sp, #16
 801e960:	bdb0      	pop	{r4, r5, r7, pc}

0801e962 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801e962:	b5b0      	push	{r4, r5, r7, lr}
 801e964:	b084      	sub	sp, #16
 801e966:	af00      	add	r7, sp, #0
 801e968:	6078      	str	r0, [r7, #4]
 801e96a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801e96c:	230f      	movs	r3, #15
 801e96e:	18fb      	adds	r3, r7, r3
 801e970:	2200      	movs	r2, #0
 801e972:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801e974:	683b      	ldr	r3, [r7, #0]
 801e976:	889a      	ldrh	r2, [r3, #4]
 801e978:	230e      	movs	r3, #14
 801e97a:	18fb      	adds	r3, r7, r3
 801e97c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801e97e:	683b      	ldr	r3, [r7, #0]
 801e980:	781b      	ldrb	r3, [r3, #0]
 801e982:	001a      	movs	r2, r3
 801e984:	2360      	movs	r3, #96	@ 0x60
 801e986:	4013      	ands	r3, r2
 801e988:	2b40      	cmp	r3, #64	@ 0x40
 801e98a:	d006      	beq.n	801e99a <USBD_StdEPReq+0x38>
 801e98c:	d900      	bls.n	801e990 <USBD_StdEPReq+0x2e>
 801e98e:	e190      	b.n	801ecb2 <USBD_StdEPReq+0x350>
 801e990:	2b00      	cmp	r3, #0
 801e992:	d00c      	beq.n	801e9ae <USBD_StdEPReq+0x4c>
 801e994:	2b20      	cmp	r3, #32
 801e996:	d000      	beq.n	801e99a <USBD_StdEPReq+0x38>
 801e998:	e18b      	b.n	801ecb2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801e99a:	687a      	ldr	r2, [r7, #4]
 801e99c:	23ad      	movs	r3, #173	@ 0xad
 801e99e:	009b      	lsls	r3, r3, #2
 801e9a0:	58d3      	ldr	r3, [r2, r3]
 801e9a2:	689b      	ldr	r3, [r3, #8]
 801e9a4:	6839      	ldr	r1, [r7, #0]
 801e9a6:	687a      	ldr	r2, [r7, #4]
 801e9a8:	0010      	movs	r0, r2
 801e9aa:	4798      	blx	r3
      break;
 801e9ac:	e188      	b.n	801ecc0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801e9ae:	683b      	ldr	r3, [r7, #0]
 801e9b0:	781b      	ldrb	r3, [r3, #0]
 801e9b2:	001a      	movs	r2, r3
 801e9b4:	2360      	movs	r3, #96	@ 0x60
 801e9b6:	4013      	ands	r3, r2
 801e9b8:	2b20      	cmp	r3, #32
 801e9ba:	d10f      	bne.n	801e9dc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801e9bc:	687a      	ldr	r2, [r7, #4]
 801e9be:	23ad      	movs	r3, #173	@ 0xad
 801e9c0:	009b      	lsls	r3, r3, #2
 801e9c2:	58d3      	ldr	r3, [r2, r3]
 801e9c4:	689b      	ldr	r3, [r3, #8]
 801e9c6:	250f      	movs	r5, #15
 801e9c8:	197c      	adds	r4, r7, r5
 801e9ca:	6839      	ldr	r1, [r7, #0]
 801e9cc:	687a      	ldr	r2, [r7, #4]
 801e9ce:	0010      	movs	r0, r2
 801e9d0:	4798      	blx	r3
 801e9d2:	0003      	movs	r3, r0
 801e9d4:	7023      	strb	r3, [r4, #0]

        return ret;
 801e9d6:	197b      	adds	r3, r7, r5
 801e9d8:	781b      	ldrb	r3, [r3, #0]
 801e9da:	e174      	b.n	801ecc6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801e9dc:	683b      	ldr	r3, [r7, #0]
 801e9de:	785b      	ldrb	r3, [r3, #1]
 801e9e0:	2b03      	cmp	r3, #3
 801e9e2:	d007      	beq.n	801e9f4 <USBD_StdEPReq+0x92>
 801e9e4:	dd00      	ble.n	801e9e8 <USBD_StdEPReq+0x86>
 801e9e6:	e15c      	b.n	801eca2 <USBD_StdEPReq+0x340>
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d100      	bne.n	801e9ee <USBD_StdEPReq+0x8c>
 801e9ec:	e092      	b.n	801eb14 <USBD_StdEPReq+0x1b2>
 801e9ee:	2b01      	cmp	r3, #1
 801e9f0:	d04b      	beq.n	801ea8a <USBD_StdEPReq+0x128>
 801e9f2:	e156      	b.n	801eca2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801e9f4:	687a      	ldr	r2, [r7, #4]
 801e9f6:	23a7      	movs	r3, #167	@ 0xa7
 801e9f8:	009b      	lsls	r3, r3, #2
 801e9fa:	5cd3      	ldrb	r3, [r2, r3]
 801e9fc:	2b02      	cmp	r3, #2
 801e9fe:	d002      	beq.n	801ea06 <USBD_StdEPReq+0xa4>
 801ea00:	2b03      	cmp	r3, #3
 801ea02:	d01d      	beq.n	801ea40 <USBD_StdEPReq+0xde>
 801ea04:	e039      	b.n	801ea7a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ea06:	220e      	movs	r2, #14
 801ea08:	18bb      	adds	r3, r7, r2
 801ea0a:	781b      	ldrb	r3, [r3, #0]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d010      	beq.n	801ea32 <USBD_StdEPReq+0xd0>
 801ea10:	18bb      	adds	r3, r7, r2
 801ea12:	781b      	ldrb	r3, [r3, #0]
 801ea14:	2b80      	cmp	r3, #128	@ 0x80
 801ea16:	d00c      	beq.n	801ea32 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801ea18:	18bb      	adds	r3, r7, r2
 801ea1a:	781a      	ldrb	r2, [r3, #0]
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	0011      	movs	r1, r2
 801ea20:	0018      	movs	r0, r3
 801ea22:	f001 fa10 	bl	801fe46 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	2180      	movs	r1, #128	@ 0x80
 801ea2a:	0018      	movs	r0, r3
 801ea2c:	f001 fa0b 	bl	801fe46 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ea30:	e02a      	b.n	801ea88 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801ea32:	683a      	ldr	r2, [r7, #0]
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	0011      	movs	r1, r2
 801ea38:	0018      	movs	r0, r3
 801ea3a:	f000 fcdc 	bl	801f3f6 <USBD_CtlError>
              break;
 801ea3e:	e023      	b.n	801ea88 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ea40:	683b      	ldr	r3, [r7, #0]
 801ea42:	885b      	ldrh	r3, [r3, #2]
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d113      	bne.n	801ea70 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801ea48:	220e      	movs	r2, #14
 801ea4a:	18bb      	adds	r3, r7, r2
 801ea4c:	781b      	ldrb	r3, [r3, #0]
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d00e      	beq.n	801ea70 <USBD_StdEPReq+0x10e>
 801ea52:	18bb      	adds	r3, r7, r2
 801ea54:	781b      	ldrb	r3, [r3, #0]
 801ea56:	2b80      	cmp	r3, #128	@ 0x80
 801ea58:	d00a      	beq.n	801ea70 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801ea5a:	683b      	ldr	r3, [r7, #0]
 801ea5c:	88db      	ldrh	r3, [r3, #6]
 801ea5e:	2b00      	cmp	r3, #0
 801ea60:	d106      	bne.n	801ea70 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801ea62:	18bb      	adds	r3, r7, r2
 801ea64:	781a      	ldrb	r2, [r3, #0]
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	0011      	movs	r1, r2
 801ea6a:	0018      	movs	r0, r3
 801ea6c:	f001 f9eb 	bl	801fe46 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	0018      	movs	r0, r3
 801ea74:	f000 fda7 	bl	801f5c6 <USBD_CtlSendStatus>

              break;
 801ea78:	e006      	b.n	801ea88 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801ea7a:	683a      	ldr	r2, [r7, #0]
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	0011      	movs	r1, r2
 801ea80:	0018      	movs	r0, r3
 801ea82:	f000 fcb8 	bl	801f3f6 <USBD_CtlError>
              break;
 801ea86:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ea88:	e112      	b.n	801ecb0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801ea8a:	687a      	ldr	r2, [r7, #4]
 801ea8c:	23a7      	movs	r3, #167	@ 0xa7
 801ea8e:	009b      	lsls	r3, r3, #2
 801ea90:	5cd3      	ldrb	r3, [r2, r3]
 801ea92:	2b02      	cmp	r3, #2
 801ea94:	d002      	beq.n	801ea9c <USBD_StdEPReq+0x13a>
 801ea96:	2b03      	cmp	r3, #3
 801ea98:	d01d      	beq.n	801ead6 <USBD_StdEPReq+0x174>
 801ea9a:	e032      	b.n	801eb02 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ea9c:	220e      	movs	r2, #14
 801ea9e:	18bb      	adds	r3, r7, r2
 801eaa0:	781b      	ldrb	r3, [r3, #0]
 801eaa2:	2b00      	cmp	r3, #0
 801eaa4:	d010      	beq.n	801eac8 <USBD_StdEPReq+0x166>
 801eaa6:	18bb      	adds	r3, r7, r2
 801eaa8:	781b      	ldrb	r3, [r3, #0]
 801eaaa:	2b80      	cmp	r3, #128	@ 0x80
 801eaac:	d00c      	beq.n	801eac8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801eaae:	18bb      	adds	r3, r7, r2
 801eab0:	781a      	ldrb	r2, [r3, #0]
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	0011      	movs	r1, r2
 801eab6:	0018      	movs	r0, r3
 801eab8:	f001 f9c5 	bl	801fe46 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	2180      	movs	r1, #128	@ 0x80
 801eac0:	0018      	movs	r0, r3
 801eac2:	f001 f9c0 	bl	801fe46 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801eac6:	e024      	b.n	801eb12 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801eac8:	683a      	ldr	r2, [r7, #0]
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	0011      	movs	r1, r2
 801eace:	0018      	movs	r0, r3
 801ead0:	f000 fc91 	bl	801f3f6 <USBD_CtlError>
              break;
 801ead4:	e01d      	b.n	801eb12 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ead6:	683b      	ldr	r3, [r7, #0]
 801ead8:	885b      	ldrh	r3, [r3, #2]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d118      	bne.n	801eb10 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801eade:	210e      	movs	r1, #14
 801eae0:	187b      	adds	r3, r7, r1
 801eae2:	781b      	ldrb	r3, [r3, #0]
 801eae4:	227f      	movs	r2, #127	@ 0x7f
 801eae6:	4013      	ands	r3, r2
 801eae8:	d006      	beq.n	801eaf8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801eaea:	187b      	adds	r3, r7, r1
 801eaec:	781a      	ldrb	r2, [r3, #0]
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	0011      	movs	r1, r2
 801eaf2:	0018      	movs	r0, r3
 801eaf4:	f001 f9d2 	bl	801fe9c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	0018      	movs	r0, r3
 801eafc:	f000 fd63 	bl	801f5c6 <USBD_CtlSendStatus>
              }
              break;
 801eb00:	e006      	b.n	801eb10 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801eb02:	683a      	ldr	r2, [r7, #0]
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	0011      	movs	r1, r2
 801eb08:	0018      	movs	r0, r3
 801eb0a:	f000 fc74 	bl	801f3f6 <USBD_CtlError>
              break;
 801eb0e:	e000      	b.n	801eb12 <USBD_StdEPReq+0x1b0>
              break;
 801eb10:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801eb12:	e0cd      	b.n	801ecb0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801eb14:	687a      	ldr	r2, [r7, #4]
 801eb16:	23a7      	movs	r3, #167	@ 0xa7
 801eb18:	009b      	lsls	r3, r3, #2
 801eb1a:	5cd3      	ldrb	r3, [r2, r3]
 801eb1c:	2b02      	cmp	r3, #2
 801eb1e:	d002      	beq.n	801eb26 <USBD_StdEPReq+0x1c4>
 801eb20:	2b03      	cmp	r3, #3
 801eb22:	d03c      	beq.n	801eb9e <USBD_StdEPReq+0x23c>
 801eb24:	e0b5      	b.n	801ec92 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801eb26:	220e      	movs	r2, #14
 801eb28:	18bb      	adds	r3, r7, r2
 801eb2a:	781b      	ldrb	r3, [r3, #0]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d00a      	beq.n	801eb46 <USBD_StdEPReq+0x1e4>
 801eb30:	18bb      	adds	r3, r7, r2
 801eb32:	781b      	ldrb	r3, [r3, #0]
 801eb34:	2b80      	cmp	r3, #128	@ 0x80
 801eb36:	d006      	beq.n	801eb46 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801eb38:	683a      	ldr	r2, [r7, #0]
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	0011      	movs	r1, r2
 801eb3e:	0018      	movs	r0, r3
 801eb40:	f000 fc59 	bl	801f3f6 <USBD_CtlError>
                break;
 801eb44:	e0ac      	b.n	801eca0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801eb46:	220e      	movs	r2, #14
 801eb48:	18bb      	adds	r3, r7, r2
 801eb4a:	781b      	ldrb	r3, [r3, #0]
 801eb4c:	b25b      	sxtb	r3, r3
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	da0c      	bge.n	801eb6c <USBD_StdEPReq+0x20a>
 801eb52:	18bb      	adds	r3, r7, r2
 801eb54:	781b      	ldrb	r3, [r3, #0]
 801eb56:	227f      	movs	r2, #127	@ 0x7f
 801eb58:	401a      	ands	r2, r3
 801eb5a:	0013      	movs	r3, r2
 801eb5c:	009b      	lsls	r3, r3, #2
 801eb5e:	189b      	adds	r3, r3, r2
 801eb60:	009b      	lsls	r3, r3, #2
 801eb62:	3310      	adds	r3, #16
 801eb64:	687a      	ldr	r2, [r7, #4]
 801eb66:	18d3      	adds	r3, r2, r3
 801eb68:	3304      	adds	r3, #4
 801eb6a:	e00d      	b.n	801eb88 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801eb6c:	230e      	movs	r3, #14
 801eb6e:	18fb      	adds	r3, r7, r3
 801eb70:	781b      	ldrb	r3, [r3, #0]
 801eb72:	227f      	movs	r2, #127	@ 0x7f
 801eb74:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801eb76:	0013      	movs	r3, r2
 801eb78:	009b      	lsls	r3, r3, #2
 801eb7a:	189b      	adds	r3, r3, r2
 801eb7c:	009b      	lsls	r3, r3, #2
 801eb7e:	3351      	adds	r3, #81	@ 0x51
 801eb80:	33ff      	adds	r3, #255	@ 0xff
 801eb82:	687a      	ldr	r2, [r7, #4]
 801eb84:	18d3      	adds	r3, r2, r3
 801eb86:	3304      	adds	r3, #4
 801eb88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801eb8a:	68bb      	ldr	r3, [r7, #8]
 801eb8c:	2200      	movs	r2, #0
 801eb8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801eb90:	68b9      	ldr	r1, [r7, #8]
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	2202      	movs	r2, #2
 801eb96:	0018      	movs	r0, r3
 801eb98:	f000 fcab 	bl	801f4f2 <USBD_CtlSendData>
              break;
 801eb9c:	e080      	b.n	801eca0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801eb9e:	220e      	movs	r2, #14
 801eba0:	18bb      	adds	r3, r7, r2
 801eba2:	781b      	ldrb	r3, [r3, #0]
 801eba4:	b25b      	sxtb	r3, r3
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	da14      	bge.n	801ebd4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ebaa:	18bb      	adds	r3, r7, r2
 801ebac:	781b      	ldrb	r3, [r3, #0]
 801ebae:	220f      	movs	r2, #15
 801ebb0:	401a      	ands	r2, r3
 801ebb2:	6879      	ldr	r1, [r7, #4]
 801ebb4:	0013      	movs	r3, r2
 801ebb6:	009b      	lsls	r3, r3, #2
 801ebb8:	189b      	adds	r3, r3, r2
 801ebba:	009b      	lsls	r3, r3, #2
 801ebbc:	18cb      	adds	r3, r1, r3
 801ebbe:	3318      	adds	r3, #24
 801ebc0:	681b      	ldr	r3, [r3, #0]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d11e      	bne.n	801ec04 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801ebc6:	683a      	ldr	r2, [r7, #0]
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	0011      	movs	r1, r2
 801ebcc:	0018      	movs	r0, r3
 801ebce:	f000 fc12 	bl	801f3f6 <USBD_CtlError>
                  break;
 801ebd2:	e065      	b.n	801eca0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801ebd4:	230e      	movs	r3, #14
 801ebd6:	18fb      	adds	r3, r7, r3
 801ebd8:	781b      	ldrb	r3, [r3, #0]
 801ebda:	220f      	movs	r2, #15
 801ebdc:	401a      	ands	r2, r3
 801ebde:	6878      	ldr	r0, [r7, #4]
 801ebe0:	23ac      	movs	r3, #172	@ 0xac
 801ebe2:	0059      	lsls	r1, r3, #1
 801ebe4:	0013      	movs	r3, r2
 801ebe6:	009b      	lsls	r3, r3, #2
 801ebe8:	189b      	adds	r3, r3, r2
 801ebea:	009b      	lsls	r3, r3, #2
 801ebec:	18c3      	adds	r3, r0, r3
 801ebee:	185b      	adds	r3, r3, r1
 801ebf0:	681b      	ldr	r3, [r3, #0]
 801ebf2:	2b00      	cmp	r3, #0
 801ebf4:	d106      	bne.n	801ec04 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801ebf6:	683a      	ldr	r2, [r7, #0]
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	0011      	movs	r1, r2
 801ebfc:	0018      	movs	r0, r3
 801ebfe:	f000 fbfa 	bl	801f3f6 <USBD_CtlError>
                  break;
 801ec02:	e04d      	b.n	801eca0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ec04:	220e      	movs	r2, #14
 801ec06:	18bb      	adds	r3, r7, r2
 801ec08:	781b      	ldrb	r3, [r3, #0]
 801ec0a:	b25b      	sxtb	r3, r3
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	da0c      	bge.n	801ec2a <USBD_StdEPReq+0x2c8>
 801ec10:	18bb      	adds	r3, r7, r2
 801ec12:	781b      	ldrb	r3, [r3, #0]
 801ec14:	227f      	movs	r2, #127	@ 0x7f
 801ec16:	401a      	ands	r2, r3
 801ec18:	0013      	movs	r3, r2
 801ec1a:	009b      	lsls	r3, r3, #2
 801ec1c:	189b      	adds	r3, r3, r2
 801ec1e:	009b      	lsls	r3, r3, #2
 801ec20:	3310      	adds	r3, #16
 801ec22:	687a      	ldr	r2, [r7, #4]
 801ec24:	18d3      	adds	r3, r2, r3
 801ec26:	3304      	adds	r3, #4
 801ec28:	e00d      	b.n	801ec46 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ec2a:	230e      	movs	r3, #14
 801ec2c:	18fb      	adds	r3, r7, r3
 801ec2e:	781b      	ldrb	r3, [r3, #0]
 801ec30:	227f      	movs	r2, #127	@ 0x7f
 801ec32:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ec34:	0013      	movs	r3, r2
 801ec36:	009b      	lsls	r3, r3, #2
 801ec38:	189b      	adds	r3, r3, r2
 801ec3a:	009b      	lsls	r3, r3, #2
 801ec3c:	3351      	adds	r3, #81	@ 0x51
 801ec3e:	33ff      	adds	r3, #255	@ 0xff
 801ec40:	687a      	ldr	r2, [r7, #4]
 801ec42:	18d3      	adds	r3, r2, r3
 801ec44:	3304      	adds	r3, #4
 801ec46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ec48:	220e      	movs	r2, #14
 801ec4a:	18bb      	adds	r3, r7, r2
 801ec4c:	781b      	ldrb	r3, [r3, #0]
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d003      	beq.n	801ec5a <USBD_StdEPReq+0x2f8>
 801ec52:	18bb      	adds	r3, r7, r2
 801ec54:	781b      	ldrb	r3, [r3, #0]
 801ec56:	2b80      	cmp	r3, #128	@ 0x80
 801ec58:	d103      	bne.n	801ec62 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801ec5a:	68bb      	ldr	r3, [r7, #8]
 801ec5c:	2200      	movs	r2, #0
 801ec5e:	601a      	str	r2, [r3, #0]
 801ec60:	e010      	b.n	801ec84 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801ec62:	230e      	movs	r3, #14
 801ec64:	18fb      	adds	r3, r7, r3
 801ec66:	781a      	ldrb	r2, [r3, #0]
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	0011      	movs	r1, r2
 801ec6c:	0018      	movs	r0, r3
 801ec6e:	f001 f940 	bl	801fef2 <USBD_LL_IsStallEP>
 801ec72:	1e03      	subs	r3, r0, #0
 801ec74:	d003      	beq.n	801ec7e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801ec76:	68bb      	ldr	r3, [r7, #8]
 801ec78:	2201      	movs	r2, #1
 801ec7a:	601a      	str	r2, [r3, #0]
 801ec7c:	e002      	b.n	801ec84 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801ec7e:	68bb      	ldr	r3, [r7, #8]
 801ec80:	2200      	movs	r2, #0
 801ec82:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ec84:	68b9      	ldr	r1, [r7, #8]
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	2202      	movs	r2, #2
 801ec8a:	0018      	movs	r0, r3
 801ec8c:	f000 fc31 	bl	801f4f2 <USBD_CtlSendData>
              break;
 801ec90:	e006      	b.n	801eca0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801ec92:	683a      	ldr	r2, [r7, #0]
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	0011      	movs	r1, r2
 801ec98:	0018      	movs	r0, r3
 801ec9a:	f000 fbac 	bl	801f3f6 <USBD_CtlError>
              break;
 801ec9e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801eca0:	e006      	b.n	801ecb0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801eca2:	683a      	ldr	r2, [r7, #0]
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	0011      	movs	r1, r2
 801eca8:	0018      	movs	r0, r3
 801ecaa:	f000 fba4 	bl	801f3f6 <USBD_CtlError>
          break;
 801ecae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ecb0:	e006      	b.n	801ecc0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801ecb2:	683a      	ldr	r2, [r7, #0]
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	0011      	movs	r1, r2
 801ecb8:	0018      	movs	r0, r3
 801ecba:	f000 fb9c 	bl	801f3f6 <USBD_CtlError>
      break;
 801ecbe:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ecc0:	230f      	movs	r3, #15
 801ecc2:	18fb      	adds	r3, r7, r3
 801ecc4:	781b      	ldrb	r3, [r3, #0]
}
 801ecc6:	0018      	movs	r0, r3
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	b004      	add	sp, #16
 801eccc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ecd0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ecd0:	b580      	push	{r7, lr}
 801ecd2:	b084      	sub	sp, #16
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	6078      	str	r0, [r7, #4]
 801ecd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801ecda:	2308      	movs	r3, #8
 801ecdc:	18fb      	adds	r3, r7, r3
 801ecde:	2200      	movs	r2, #0
 801ece0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801ece2:	2300      	movs	r3, #0
 801ece4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ece6:	230b      	movs	r3, #11
 801ece8:	18fb      	adds	r3, r7, r3
 801ecea:	2200      	movs	r2, #0
 801ecec:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801ecee:	683b      	ldr	r3, [r7, #0]
 801ecf0:	885b      	ldrh	r3, [r3, #2]
 801ecf2:	0a1b      	lsrs	r3, r3, #8
 801ecf4:	b29b      	uxth	r3, r3
 801ecf6:	2b07      	cmp	r3, #7
 801ecf8:	d900      	bls.n	801ecfc <USBD_GetDescriptor+0x2c>
 801ecfa:	e159      	b.n	801efb0 <USBD_GetDescriptor+0x2e0>
 801ecfc:	009a      	lsls	r2, r3, #2
 801ecfe:	4bcb      	ldr	r3, [pc, #812]	@ (801f02c <USBD_GetDescriptor+0x35c>)
 801ed00:	18d3      	adds	r3, r2, r3
 801ed02:	681b      	ldr	r3, [r3, #0]
 801ed04:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801ed06:	687a      	ldr	r2, [r7, #4]
 801ed08:	23ac      	movs	r3, #172	@ 0xac
 801ed0a:	009b      	lsls	r3, r3, #2
 801ed0c:	58d3      	ldr	r3, [r2, r3]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	687a      	ldr	r2, [r7, #4]
 801ed12:	7c12      	ldrb	r2, [r2, #16]
 801ed14:	2108      	movs	r1, #8
 801ed16:	1879      	adds	r1, r7, r1
 801ed18:	0010      	movs	r0, r2
 801ed1a:	4798      	blx	r3
 801ed1c:	0003      	movs	r3, r0
 801ed1e:	60fb      	str	r3, [r7, #12]
      break;
 801ed20:	e153      	b.n	801efca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	7c1b      	ldrb	r3, [r3, #16]
 801ed26:	2b00      	cmp	r3, #0
 801ed28:	d10f      	bne.n	801ed4a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801ed2a:	687a      	ldr	r2, [r7, #4]
 801ed2c:	23ad      	movs	r3, #173	@ 0xad
 801ed2e:	009b      	lsls	r3, r3, #2
 801ed30:	58d3      	ldr	r3, [r2, r3]
 801ed32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed34:	2208      	movs	r2, #8
 801ed36:	18ba      	adds	r2, r7, r2
 801ed38:	0010      	movs	r0, r2
 801ed3a:	4798      	blx	r3
 801ed3c:	0003      	movs	r3, r0
 801ed3e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	3301      	adds	r3, #1
 801ed44:	2202      	movs	r2, #2
 801ed46:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801ed48:	e13f      	b.n	801efca <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801ed4a:	687a      	ldr	r2, [r7, #4]
 801ed4c:	23ad      	movs	r3, #173	@ 0xad
 801ed4e:	009b      	lsls	r3, r3, #2
 801ed50:	58d3      	ldr	r3, [r2, r3]
 801ed52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed54:	2208      	movs	r2, #8
 801ed56:	18ba      	adds	r2, r7, r2
 801ed58:	0010      	movs	r0, r2
 801ed5a:	4798      	blx	r3
 801ed5c:	0003      	movs	r3, r0
 801ed5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801ed60:	68fb      	ldr	r3, [r7, #12]
 801ed62:	3301      	adds	r3, #1
 801ed64:	2202      	movs	r2, #2
 801ed66:	701a      	strb	r2, [r3, #0]
      break;
 801ed68:	e12f      	b.n	801efca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	885b      	ldrh	r3, [r3, #2]
 801ed6e:	b2db      	uxtb	r3, r3
 801ed70:	2b05      	cmp	r3, #5
 801ed72:	d900      	bls.n	801ed76 <USBD_GetDescriptor+0xa6>
 801ed74:	e0d0      	b.n	801ef18 <USBD_GetDescriptor+0x248>
 801ed76:	009a      	lsls	r2, r3, #2
 801ed78:	4bad      	ldr	r3, [pc, #692]	@ (801f030 <USBD_GetDescriptor+0x360>)
 801ed7a:	18d3      	adds	r3, r2, r3
 801ed7c:	681b      	ldr	r3, [r3, #0]
 801ed7e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ed80:	687a      	ldr	r2, [r7, #4]
 801ed82:	23ac      	movs	r3, #172	@ 0xac
 801ed84:	009b      	lsls	r3, r3, #2
 801ed86:	58d3      	ldr	r3, [r2, r3]
 801ed88:	685b      	ldr	r3, [r3, #4]
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d00d      	beq.n	801edaa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801ed8e:	687a      	ldr	r2, [r7, #4]
 801ed90:	23ac      	movs	r3, #172	@ 0xac
 801ed92:	009b      	lsls	r3, r3, #2
 801ed94:	58d3      	ldr	r3, [r2, r3]
 801ed96:	685b      	ldr	r3, [r3, #4]
 801ed98:	687a      	ldr	r2, [r7, #4]
 801ed9a:	7c12      	ldrb	r2, [r2, #16]
 801ed9c:	2108      	movs	r1, #8
 801ed9e:	1879      	adds	r1, r7, r1
 801eda0:	0010      	movs	r0, r2
 801eda2:	4798      	blx	r3
 801eda4:	0003      	movs	r3, r0
 801eda6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eda8:	e0c3      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801edaa:	683a      	ldr	r2, [r7, #0]
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	0011      	movs	r1, r2
 801edb0:	0018      	movs	r0, r3
 801edb2:	f000 fb20 	bl	801f3f6 <USBD_CtlError>
            err++;
 801edb6:	210b      	movs	r1, #11
 801edb8:	187b      	adds	r3, r7, r1
 801edba:	781a      	ldrb	r2, [r3, #0]
 801edbc:	187b      	adds	r3, r7, r1
 801edbe:	3201      	adds	r2, #1
 801edc0:	701a      	strb	r2, [r3, #0]
          break;
 801edc2:	e0b6      	b.n	801ef32 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801edc4:	687a      	ldr	r2, [r7, #4]
 801edc6:	23ac      	movs	r3, #172	@ 0xac
 801edc8:	009b      	lsls	r3, r3, #2
 801edca:	58d3      	ldr	r3, [r2, r3]
 801edcc:	689b      	ldr	r3, [r3, #8]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d00d      	beq.n	801edee <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801edd2:	687a      	ldr	r2, [r7, #4]
 801edd4:	23ac      	movs	r3, #172	@ 0xac
 801edd6:	009b      	lsls	r3, r3, #2
 801edd8:	58d3      	ldr	r3, [r2, r3]
 801edda:	689b      	ldr	r3, [r3, #8]
 801eddc:	687a      	ldr	r2, [r7, #4]
 801edde:	7c12      	ldrb	r2, [r2, #16]
 801ede0:	2108      	movs	r1, #8
 801ede2:	1879      	adds	r1, r7, r1
 801ede4:	0010      	movs	r0, r2
 801ede6:	4798      	blx	r3
 801ede8:	0003      	movs	r3, r0
 801edea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801edec:	e0a1      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801edee:	683a      	ldr	r2, [r7, #0]
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	0011      	movs	r1, r2
 801edf4:	0018      	movs	r0, r3
 801edf6:	f000 fafe 	bl	801f3f6 <USBD_CtlError>
            err++;
 801edfa:	210b      	movs	r1, #11
 801edfc:	187b      	adds	r3, r7, r1
 801edfe:	781a      	ldrb	r2, [r3, #0]
 801ee00:	187b      	adds	r3, r7, r1
 801ee02:	3201      	adds	r2, #1
 801ee04:	701a      	strb	r2, [r3, #0]
          break;
 801ee06:	e094      	b.n	801ef32 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ee08:	687a      	ldr	r2, [r7, #4]
 801ee0a:	23ac      	movs	r3, #172	@ 0xac
 801ee0c:	009b      	lsls	r3, r3, #2
 801ee0e:	58d3      	ldr	r3, [r2, r3]
 801ee10:	68db      	ldr	r3, [r3, #12]
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d00d      	beq.n	801ee32 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ee16:	687a      	ldr	r2, [r7, #4]
 801ee18:	23ac      	movs	r3, #172	@ 0xac
 801ee1a:	009b      	lsls	r3, r3, #2
 801ee1c:	58d3      	ldr	r3, [r2, r3]
 801ee1e:	68db      	ldr	r3, [r3, #12]
 801ee20:	687a      	ldr	r2, [r7, #4]
 801ee22:	7c12      	ldrb	r2, [r2, #16]
 801ee24:	2108      	movs	r1, #8
 801ee26:	1879      	adds	r1, r7, r1
 801ee28:	0010      	movs	r0, r2
 801ee2a:	4798      	blx	r3
 801ee2c:	0003      	movs	r3, r0
 801ee2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ee30:	e07f      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ee32:	683a      	ldr	r2, [r7, #0]
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	0011      	movs	r1, r2
 801ee38:	0018      	movs	r0, r3
 801ee3a:	f000 fadc 	bl	801f3f6 <USBD_CtlError>
            err++;
 801ee3e:	210b      	movs	r1, #11
 801ee40:	187b      	adds	r3, r7, r1
 801ee42:	781a      	ldrb	r2, [r3, #0]
 801ee44:	187b      	adds	r3, r7, r1
 801ee46:	3201      	adds	r2, #1
 801ee48:	701a      	strb	r2, [r3, #0]
          break;
 801ee4a:	e072      	b.n	801ef32 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ee4c:	687a      	ldr	r2, [r7, #4]
 801ee4e:	23ac      	movs	r3, #172	@ 0xac
 801ee50:	009b      	lsls	r3, r3, #2
 801ee52:	58d3      	ldr	r3, [r2, r3]
 801ee54:	691b      	ldr	r3, [r3, #16]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d00d      	beq.n	801ee76 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ee5a:	687a      	ldr	r2, [r7, #4]
 801ee5c:	23ac      	movs	r3, #172	@ 0xac
 801ee5e:	009b      	lsls	r3, r3, #2
 801ee60:	58d3      	ldr	r3, [r2, r3]
 801ee62:	691b      	ldr	r3, [r3, #16]
 801ee64:	687a      	ldr	r2, [r7, #4]
 801ee66:	7c12      	ldrb	r2, [r2, #16]
 801ee68:	2108      	movs	r1, #8
 801ee6a:	1879      	adds	r1, r7, r1
 801ee6c:	0010      	movs	r0, r2
 801ee6e:	4798      	blx	r3
 801ee70:	0003      	movs	r3, r0
 801ee72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ee74:	e05d      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ee76:	683a      	ldr	r2, [r7, #0]
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	0011      	movs	r1, r2
 801ee7c:	0018      	movs	r0, r3
 801ee7e:	f000 faba 	bl	801f3f6 <USBD_CtlError>
            err++;
 801ee82:	210b      	movs	r1, #11
 801ee84:	187b      	adds	r3, r7, r1
 801ee86:	781a      	ldrb	r2, [r3, #0]
 801ee88:	187b      	adds	r3, r7, r1
 801ee8a:	3201      	adds	r2, #1
 801ee8c:	701a      	strb	r2, [r3, #0]
          break;
 801ee8e:	e050      	b.n	801ef32 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ee90:	687a      	ldr	r2, [r7, #4]
 801ee92:	23ac      	movs	r3, #172	@ 0xac
 801ee94:	009b      	lsls	r3, r3, #2
 801ee96:	58d3      	ldr	r3, [r2, r3]
 801ee98:	695b      	ldr	r3, [r3, #20]
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	d00d      	beq.n	801eeba <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ee9e:	687a      	ldr	r2, [r7, #4]
 801eea0:	23ac      	movs	r3, #172	@ 0xac
 801eea2:	009b      	lsls	r3, r3, #2
 801eea4:	58d3      	ldr	r3, [r2, r3]
 801eea6:	695b      	ldr	r3, [r3, #20]
 801eea8:	687a      	ldr	r2, [r7, #4]
 801eeaa:	7c12      	ldrb	r2, [r2, #16]
 801eeac:	2108      	movs	r1, #8
 801eeae:	1879      	adds	r1, r7, r1
 801eeb0:	0010      	movs	r0, r2
 801eeb2:	4798      	blx	r3
 801eeb4:	0003      	movs	r3, r0
 801eeb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eeb8:	e03b      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801eeba:	683a      	ldr	r2, [r7, #0]
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	0011      	movs	r1, r2
 801eec0:	0018      	movs	r0, r3
 801eec2:	f000 fa98 	bl	801f3f6 <USBD_CtlError>
            err++;
 801eec6:	210b      	movs	r1, #11
 801eec8:	187b      	adds	r3, r7, r1
 801eeca:	781a      	ldrb	r2, [r3, #0]
 801eecc:	187b      	adds	r3, r7, r1
 801eece:	3201      	adds	r2, #1
 801eed0:	701a      	strb	r2, [r3, #0]
          break;
 801eed2:	e02e      	b.n	801ef32 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801eed4:	687a      	ldr	r2, [r7, #4]
 801eed6:	23ac      	movs	r3, #172	@ 0xac
 801eed8:	009b      	lsls	r3, r3, #2
 801eeda:	58d3      	ldr	r3, [r2, r3]
 801eedc:	699b      	ldr	r3, [r3, #24]
 801eede:	2b00      	cmp	r3, #0
 801eee0:	d00d      	beq.n	801eefe <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801eee2:	687a      	ldr	r2, [r7, #4]
 801eee4:	23ac      	movs	r3, #172	@ 0xac
 801eee6:	009b      	lsls	r3, r3, #2
 801eee8:	58d3      	ldr	r3, [r2, r3]
 801eeea:	699b      	ldr	r3, [r3, #24]
 801eeec:	687a      	ldr	r2, [r7, #4]
 801eeee:	7c12      	ldrb	r2, [r2, #16]
 801eef0:	2108      	movs	r1, #8
 801eef2:	1879      	adds	r1, r7, r1
 801eef4:	0010      	movs	r0, r2
 801eef6:	4798      	blx	r3
 801eef8:	0003      	movs	r3, r0
 801eefa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801eefc:	e019      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801eefe:	683a      	ldr	r2, [r7, #0]
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	0011      	movs	r1, r2
 801ef04:	0018      	movs	r0, r3
 801ef06:	f000 fa76 	bl	801f3f6 <USBD_CtlError>
            err++;
 801ef0a:	210b      	movs	r1, #11
 801ef0c:	187b      	adds	r3, r7, r1
 801ef0e:	781a      	ldrb	r2, [r3, #0]
 801ef10:	187b      	adds	r3, r7, r1
 801ef12:	3201      	adds	r2, #1
 801ef14:	701a      	strb	r2, [r3, #0]
          break;
 801ef16:	e00c      	b.n	801ef32 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801ef18:	683a      	ldr	r2, [r7, #0]
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	0011      	movs	r1, r2
 801ef1e:	0018      	movs	r0, r3
 801ef20:	f000 fa69 	bl	801f3f6 <USBD_CtlError>
          err++;
 801ef24:	210b      	movs	r1, #11
 801ef26:	187b      	adds	r3, r7, r1
 801ef28:	781a      	ldrb	r2, [r3, #0]
 801ef2a:	187b      	adds	r3, r7, r1
 801ef2c:	3201      	adds	r2, #1
 801ef2e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801ef30:	e04b      	b.n	801efca <USBD_GetDescriptor+0x2fa>
 801ef32:	e04a      	b.n	801efca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	7c1b      	ldrb	r3, [r3, #16]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d10b      	bne.n	801ef54 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801ef3c:	687a      	ldr	r2, [r7, #4]
 801ef3e:	23ad      	movs	r3, #173	@ 0xad
 801ef40:	009b      	lsls	r3, r3, #2
 801ef42:	58d3      	ldr	r3, [r2, r3]
 801ef44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ef46:	2208      	movs	r2, #8
 801ef48:	18ba      	adds	r2, r7, r2
 801ef4a:	0010      	movs	r0, r2
 801ef4c:	4798      	blx	r3
 801ef4e:	0003      	movs	r3, r0
 801ef50:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ef52:	e03a      	b.n	801efca <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ef54:	683a      	ldr	r2, [r7, #0]
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	0011      	movs	r1, r2
 801ef5a:	0018      	movs	r0, r3
 801ef5c:	f000 fa4b 	bl	801f3f6 <USBD_CtlError>
        err++;
 801ef60:	210b      	movs	r1, #11
 801ef62:	187b      	adds	r3, r7, r1
 801ef64:	781a      	ldrb	r2, [r3, #0]
 801ef66:	187b      	adds	r3, r7, r1
 801ef68:	3201      	adds	r2, #1
 801ef6a:	701a      	strb	r2, [r3, #0]
      break;
 801ef6c:	e02d      	b.n	801efca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	7c1b      	ldrb	r3, [r3, #16]
 801ef72:	2b00      	cmp	r3, #0
 801ef74:	d10f      	bne.n	801ef96 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801ef76:	687a      	ldr	r2, [r7, #4]
 801ef78:	23ad      	movs	r3, #173	@ 0xad
 801ef7a:	009b      	lsls	r3, r3, #2
 801ef7c:	58d3      	ldr	r3, [r2, r3]
 801ef7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ef80:	2208      	movs	r2, #8
 801ef82:	18ba      	adds	r2, r7, r2
 801ef84:	0010      	movs	r0, r2
 801ef86:	4798      	blx	r3
 801ef88:	0003      	movs	r3, r0
 801ef8a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801ef8c:	68fb      	ldr	r3, [r7, #12]
 801ef8e:	3301      	adds	r3, #1
 801ef90:	2207      	movs	r2, #7
 801ef92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801ef94:	e019      	b.n	801efca <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801ef96:	683a      	ldr	r2, [r7, #0]
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	0011      	movs	r1, r2
 801ef9c:	0018      	movs	r0, r3
 801ef9e:	f000 fa2a 	bl	801f3f6 <USBD_CtlError>
        err++;
 801efa2:	210b      	movs	r1, #11
 801efa4:	187b      	adds	r3, r7, r1
 801efa6:	781a      	ldrb	r2, [r3, #0]
 801efa8:	187b      	adds	r3, r7, r1
 801efaa:	3201      	adds	r2, #1
 801efac:	701a      	strb	r2, [r3, #0]
      break;
 801efae:	e00c      	b.n	801efca <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801efb0:	683a      	ldr	r2, [r7, #0]
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	0011      	movs	r1, r2
 801efb6:	0018      	movs	r0, r3
 801efb8:	f000 fa1d 	bl	801f3f6 <USBD_CtlError>
      err++;
 801efbc:	210b      	movs	r1, #11
 801efbe:	187b      	adds	r3, r7, r1
 801efc0:	781a      	ldrb	r2, [r3, #0]
 801efc2:	187b      	adds	r3, r7, r1
 801efc4:	3201      	adds	r2, #1
 801efc6:	701a      	strb	r2, [r3, #0]
      break;
 801efc8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801efca:	230b      	movs	r3, #11
 801efcc:	18fb      	adds	r3, r7, r3
 801efce:	781b      	ldrb	r3, [r3, #0]
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	d127      	bne.n	801f024 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801efd4:	2108      	movs	r1, #8
 801efd6:	187b      	adds	r3, r7, r1
 801efd8:	881b      	ldrh	r3, [r3, #0]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d019      	beq.n	801f012 <USBD_GetDescriptor+0x342>
 801efde:	683b      	ldr	r3, [r7, #0]
 801efe0:	88db      	ldrh	r3, [r3, #6]
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d015      	beq.n	801f012 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801efe6:	683b      	ldr	r3, [r7, #0]
 801efe8:	88da      	ldrh	r2, [r3, #6]
 801efea:	187b      	adds	r3, r7, r1
 801efec:	881b      	ldrh	r3, [r3, #0]
 801efee:	1c18      	adds	r0, r3, #0
 801eff0:	1c11      	adds	r1, r2, #0
 801eff2:	b28a      	uxth	r2, r1
 801eff4:	b283      	uxth	r3, r0
 801eff6:	429a      	cmp	r2, r3
 801eff8:	d900      	bls.n	801effc <USBD_GetDescriptor+0x32c>
 801effa:	1c01      	adds	r1, r0, #0
 801effc:	b28a      	uxth	r2, r1
 801effe:	2108      	movs	r1, #8
 801f000:	187b      	adds	r3, r7, r1
 801f002:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801f004:	187b      	adds	r3, r7, r1
 801f006:	881a      	ldrh	r2, [r3, #0]
 801f008:	68f9      	ldr	r1, [r7, #12]
 801f00a:	687b      	ldr	r3, [r7, #4]
 801f00c:	0018      	movs	r0, r3
 801f00e:	f000 fa70 	bl	801f4f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801f012:	683b      	ldr	r3, [r7, #0]
 801f014:	88db      	ldrh	r3, [r3, #6]
 801f016:	2b00      	cmp	r3, #0
 801f018:	d105      	bne.n	801f026 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	0018      	movs	r0, r3
 801f01e:	f000 fad2 	bl	801f5c6 <USBD_CtlSendStatus>
 801f022:	e000      	b.n	801f026 <USBD_GetDescriptor+0x356>
    return;
 801f024:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801f026:	46bd      	mov	sp, r7
 801f028:	b004      	add	sp, #16
 801f02a:	bd80      	pop	{r7, pc}
 801f02c:	08029220 	.word	0x08029220
 801f030:	08029240 	.word	0x08029240

0801f034 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f034:	b590      	push	{r4, r7, lr}
 801f036:	b085      	sub	sp, #20
 801f038:	af00      	add	r7, sp, #0
 801f03a:	6078      	str	r0, [r7, #4]
 801f03c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801f03e:	683b      	ldr	r3, [r7, #0]
 801f040:	889b      	ldrh	r3, [r3, #4]
 801f042:	2b00      	cmp	r3, #0
 801f044:	d13d      	bne.n	801f0c2 <USBD_SetAddress+0x8e>
 801f046:	683b      	ldr	r3, [r7, #0]
 801f048:	88db      	ldrh	r3, [r3, #6]
 801f04a:	2b00      	cmp	r3, #0
 801f04c:	d139      	bne.n	801f0c2 <USBD_SetAddress+0x8e>
 801f04e:	683b      	ldr	r3, [r7, #0]
 801f050:	885b      	ldrh	r3, [r3, #2]
 801f052:	2b7f      	cmp	r3, #127	@ 0x7f
 801f054:	d835      	bhi.n	801f0c2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801f056:	683b      	ldr	r3, [r7, #0]
 801f058:	885b      	ldrh	r3, [r3, #2]
 801f05a:	b2da      	uxtb	r2, r3
 801f05c:	230f      	movs	r3, #15
 801f05e:	18fb      	adds	r3, r7, r3
 801f060:	217f      	movs	r1, #127	@ 0x7f
 801f062:	400a      	ands	r2, r1
 801f064:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f066:	687a      	ldr	r2, [r7, #4]
 801f068:	23a7      	movs	r3, #167	@ 0xa7
 801f06a:	009b      	lsls	r3, r3, #2
 801f06c:	5cd3      	ldrb	r3, [r2, r3]
 801f06e:	2b03      	cmp	r3, #3
 801f070:	d106      	bne.n	801f080 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801f072:	683a      	ldr	r2, [r7, #0]
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	0011      	movs	r1, r2
 801f078:	0018      	movs	r0, r3
 801f07a:	f000 f9bc 	bl	801f3f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f07e:	e027      	b.n	801f0d0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	240f      	movs	r4, #15
 801f084:	193a      	adds	r2, r7, r4
 801f086:	4914      	ldr	r1, [pc, #80]	@ (801f0d8 <USBD_SetAddress+0xa4>)
 801f088:	7812      	ldrb	r2, [r2, #0]
 801f08a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801f08c:	193b      	adds	r3, r7, r4
 801f08e:	781a      	ldrb	r2, [r3, #0]
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	0011      	movs	r1, r2
 801f094:	0018      	movs	r0, r3
 801f096:	f000 ff5d 	bl	801ff54 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	0018      	movs	r0, r3
 801f09e:	f000 fa92 	bl	801f5c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801f0a2:	193b      	adds	r3, r7, r4
 801f0a4:	781b      	ldrb	r3, [r3, #0]
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d005      	beq.n	801f0b6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801f0aa:	687a      	ldr	r2, [r7, #4]
 801f0ac:	23a7      	movs	r3, #167	@ 0xa7
 801f0ae:	009b      	lsls	r3, r3, #2
 801f0b0:	2102      	movs	r1, #2
 801f0b2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f0b4:	e00c      	b.n	801f0d0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801f0b6:	687a      	ldr	r2, [r7, #4]
 801f0b8:	23a7      	movs	r3, #167	@ 0xa7
 801f0ba:	009b      	lsls	r3, r3, #2
 801f0bc:	2101      	movs	r1, #1
 801f0be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f0c0:	e006      	b.n	801f0d0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801f0c2:	683a      	ldr	r2, [r7, #0]
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	0011      	movs	r1, r2
 801f0c8:	0018      	movs	r0, r3
 801f0ca:	f000 f994 	bl	801f3f6 <USBD_CtlError>
  }
}
 801f0ce:	46c0      	nop			@ (mov r8, r8)
 801f0d0:	46c0      	nop			@ (mov r8, r8)
 801f0d2:	46bd      	mov	sp, r7
 801f0d4:	b005      	add	sp, #20
 801f0d6:	bd90      	pop	{r4, r7, pc}
 801f0d8:	0000029e 	.word	0x0000029e

0801f0dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f0dc:	b580      	push	{r7, lr}
 801f0de:	b082      	sub	sp, #8
 801f0e0:	af00      	add	r7, sp, #0
 801f0e2:	6078      	str	r0, [r7, #4]
 801f0e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801f0e6:	683b      	ldr	r3, [r7, #0]
 801f0e8:	885b      	ldrh	r3, [r3, #2]
 801f0ea:	b2da      	uxtb	r2, r3
 801f0ec:	4b4c      	ldr	r3, [pc, #304]	@ (801f220 <USBD_SetConfig+0x144>)
 801f0ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801f0f0:	4b4b      	ldr	r3, [pc, #300]	@ (801f220 <USBD_SetConfig+0x144>)
 801f0f2:	781b      	ldrb	r3, [r3, #0]
 801f0f4:	2b01      	cmp	r3, #1
 801f0f6:	d906      	bls.n	801f106 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801f0f8:	683a      	ldr	r2, [r7, #0]
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	0011      	movs	r1, r2
 801f0fe:	0018      	movs	r0, r3
 801f100:	f000 f979 	bl	801f3f6 <USBD_CtlError>
 801f104:	e088      	b.n	801f218 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801f106:	687a      	ldr	r2, [r7, #4]
 801f108:	23a7      	movs	r3, #167	@ 0xa7
 801f10a:	009b      	lsls	r3, r3, #2
 801f10c:	5cd3      	ldrb	r3, [r2, r3]
 801f10e:	2b02      	cmp	r3, #2
 801f110:	d002      	beq.n	801f118 <USBD_SetConfig+0x3c>
 801f112:	2b03      	cmp	r3, #3
 801f114:	d029      	beq.n	801f16a <USBD_SetConfig+0x8e>
 801f116:	e071      	b.n	801f1fc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801f118:	4b41      	ldr	r3, [pc, #260]	@ (801f220 <USBD_SetConfig+0x144>)
 801f11a:	781b      	ldrb	r3, [r3, #0]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d01f      	beq.n	801f160 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801f120:	4b3f      	ldr	r3, [pc, #252]	@ (801f220 <USBD_SetConfig+0x144>)
 801f122:	781b      	ldrb	r3, [r3, #0]
 801f124:	001a      	movs	r2, r3
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801f12a:	687a      	ldr	r2, [r7, #4]
 801f12c:	23a7      	movs	r3, #167	@ 0xa7
 801f12e:	009b      	lsls	r3, r3, #2
 801f130:	2103      	movs	r1, #3
 801f132:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801f134:	4b3a      	ldr	r3, [pc, #232]	@ (801f220 <USBD_SetConfig+0x144>)
 801f136:	781a      	ldrb	r2, [r3, #0]
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	0011      	movs	r1, r2
 801f13c:	0018      	movs	r0, r3
 801f13e:	f7ff f8c6 	bl	801e2ce <USBD_SetClassConfig>
 801f142:	0003      	movs	r3, r0
 801f144:	2b02      	cmp	r3, #2
 801f146:	d106      	bne.n	801f156 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801f148:	683a      	ldr	r2, [r7, #0]
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	0011      	movs	r1, r2
 801f14e:	0018      	movs	r0, r3
 801f150:	f000 f951 	bl	801f3f6 <USBD_CtlError>
            return;
 801f154:	e060      	b.n	801f218 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	0018      	movs	r0, r3
 801f15a:	f000 fa34 	bl	801f5c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801f15e:	e05b      	b.n	801f218 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	0018      	movs	r0, r3
 801f164:	f000 fa2f 	bl	801f5c6 <USBD_CtlSendStatus>
        break;
 801f168:	e056      	b.n	801f218 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801f16a:	4b2d      	ldr	r3, [pc, #180]	@ (801f220 <USBD_SetConfig+0x144>)
 801f16c:	781b      	ldrb	r3, [r3, #0]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d115      	bne.n	801f19e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801f172:	687a      	ldr	r2, [r7, #4]
 801f174:	23a7      	movs	r3, #167	@ 0xa7
 801f176:	009b      	lsls	r3, r3, #2
 801f178:	2102      	movs	r1, #2
 801f17a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801f17c:	4b28      	ldr	r3, [pc, #160]	@ (801f220 <USBD_SetConfig+0x144>)
 801f17e:	781b      	ldrb	r3, [r3, #0]
 801f180:	001a      	movs	r2, r3
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801f186:	4b26      	ldr	r3, [pc, #152]	@ (801f220 <USBD_SetConfig+0x144>)
 801f188:	781a      	ldrb	r2, [r3, #0]
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	0011      	movs	r1, r2
 801f18e:	0018      	movs	r0, r3
 801f190:	f7ff f8c4 	bl	801e31c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	0018      	movs	r0, r3
 801f198:	f000 fa15 	bl	801f5c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801f19c:	e03c      	b.n	801f218 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801f19e:	4b20      	ldr	r3, [pc, #128]	@ (801f220 <USBD_SetConfig+0x144>)
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	001a      	movs	r2, r3
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	685b      	ldr	r3, [r3, #4]
 801f1a8:	429a      	cmp	r2, r3
 801f1aa:	d022      	beq.n	801f1f2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	685b      	ldr	r3, [r3, #4]
 801f1b0:	b2da      	uxtb	r2, r3
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	0011      	movs	r1, r2
 801f1b6:	0018      	movs	r0, r3
 801f1b8:	f7ff f8b0 	bl	801e31c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801f1bc:	4b18      	ldr	r3, [pc, #96]	@ (801f220 <USBD_SetConfig+0x144>)
 801f1be:	781b      	ldrb	r3, [r3, #0]
 801f1c0:	001a      	movs	r2, r3
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801f1c6:	4b16      	ldr	r3, [pc, #88]	@ (801f220 <USBD_SetConfig+0x144>)
 801f1c8:	781a      	ldrb	r2, [r3, #0]
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	0011      	movs	r1, r2
 801f1ce:	0018      	movs	r0, r3
 801f1d0:	f7ff f87d 	bl	801e2ce <USBD_SetClassConfig>
 801f1d4:	0003      	movs	r3, r0
 801f1d6:	2b02      	cmp	r3, #2
 801f1d8:	d106      	bne.n	801f1e8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801f1da:	683a      	ldr	r2, [r7, #0]
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	0011      	movs	r1, r2
 801f1e0:	0018      	movs	r0, r3
 801f1e2:	f000 f908 	bl	801f3f6 <USBD_CtlError>
            return;
 801f1e6:	e017      	b.n	801f218 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	0018      	movs	r0, r3
 801f1ec:	f000 f9eb 	bl	801f5c6 <USBD_CtlSendStatus>
        break;
 801f1f0:	e012      	b.n	801f218 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	0018      	movs	r0, r3
 801f1f6:	f000 f9e6 	bl	801f5c6 <USBD_CtlSendStatus>
        break;
 801f1fa:	e00d      	b.n	801f218 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801f1fc:	683a      	ldr	r2, [r7, #0]
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	0011      	movs	r1, r2
 801f202:	0018      	movs	r0, r3
 801f204:	f000 f8f7 	bl	801f3f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801f208:	4b05      	ldr	r3, [pc, #20]	@ (801f220 <USBD_SetConfig+0x144>)
 801f20a:	781a      	ldrb	r2, [r3, #0]
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	0011      	movs	r1, r2
 801f210:	0018      	movs	r0, r3
 801f212:	f7ff f883 	bl	801e31c <USBD_ClrClassConfig>
        break;
 801f216:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801f218:	46bd      	mov	sp, r7
 801f21a:	b002      	add	sp, #8
 801f21c:	bd80      	pop	{r7, pc}
 801f21e:	46c0      	nop			@ (mov r8, r8)
 801f220:	200021b4 	.word	0x200021b4

0801f224 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f224:	b580      	push	{r7, lr}
 801f226:	b082      	sub	sp, #8
 801f228:	af00      	add	r7, sp, #0
 801f22a:	6078      	str	r0, [r7, #4]
 801f22c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801f22e:	683b      	ldr	r3, [r7, #0]
 801f230:	88db      	ldrh	r3, [r3, #6]
 801f232:	2b01      	cmp	r3, #1
 801f234:	d006      	beq.n	801f244 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801f236:	683a      	ldr	r2, [r7, #0]
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	0011      	movs	r1, r2
 801f23c:	0018      	movs	r0, r3
 801f23e:	f000 f8da 	bl	801f3f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801f242:	e026      	b.n	801f292 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801f244:	687a      	ldr	r2, [r7, #4]
 801f246:	23a7      	movs	r3, #167	@ 0xa7
 801f248:	009b      	lsls	r3, r3, #2
 801f24a:	5cd3      	ldrb	r3, [r2, r3]
 801f24c:	2b02      	cmp	r3, #2
 801f24e:	dc02      	bgt.n	801f256 <USBD_GetConfig+0x32>
 801f250:	2b00      	cmp	r3, #0
 801f252:	dc03      	bgt.n	801f25c <USBD_GetConfig+0x38>
 801f254:	e016      	b.n	801f284 <USBD_GetConfig+0x60>
 801f256:	2b03      	cmp	r3, #3
 801f258:	d00c      	beq.n	801f274 <USBD_GetConfig+0x50>
 801f25a:	e013      	b.n	801f284 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801f25c:	687b      	ldr	r3, [r7, #4]
 801f25e:	2200      	movs	r2, #0
 801f260:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	3308      	adds	r3, #8
 801f266:	0019      	movs	r1, r3
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	2201      	movs	r2, #1
 801f26c:	0018      	movs	r0, r3
 801f26e:	f000 f940 	bl	801f4f2 <USBD_CtlSendData>
        break;
 801f272:	e00e      	b.n	801f292 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	1d19      	adds	r1, r3, #4
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	2201      	movs	r2, #1
 801f27c:	0018      	movs	r0, r3
 801f27e:	f000 f938 	bl	801f4f2 <USBD_CtlSendData>
        break;
 801f282:	e006      	b.n	801f292 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801f284:	683a      	ldr	r2, [r7, #0]
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	0011      	movs	r1, r2
 801f28a:	0018      	movs	r0, r3
 801f28c:	f000 f8b3 	bl	801f3f6 <USBD_CtlError>
        break;
 801f290:	46c0      	nop			@ (mov r8, r8)
}
 801f292:	46c0      	nop			@ (mov r8, r8)
 801f294:	46bd      	mov	sp, r7
 801f296:	b002      	add	sp, #8
 801f298:	bd80      	pop	{r7, pc}

0801f29a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801f29a:	b580      	push	{r7, lr}
 801f29c:	b082      	sub	sp, #8
 801f29e:	af00      	add	r7, sp, #0
 801f2a0:	6078      	str	r0, [r7, #4]
 801f2a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f2a4:	687a      	ldr	r2, [r7, #4]
 801f2a6:	23a7      	movs	r3, #167	@ 0xa7
 801f2a8:	009b      	lsls	r3, r3, #2
 801f2aa:	5cd3      	ldrb	r3, [r2, r3]
 801f2ac:	3b01      	subs	r3, #1
 801f2ae:	2b02      	cmp	r3, #2
 801f2b0:	d822      	bhi.n	801f2f8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801f2b2:	683b      	ldr	r3, [r7, #0]
 801f2b4:	88db      	ldrh	r3, [r3, #6]
 801f2b6:	2b02      	cmp	r3, #2
 801f2b8:	d006      	beq.n	801f2c8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801f2ba:	683a      	ldr	r2, [r7, #0]
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	0011      	movs	r1, r2
 801f2c0:	0018      	movs	r0, r3
 801f2c2:	f000 f898 	bl	801f3f6 <USBD_CtlError>
        break;
 801f2c6:	e01e      	b.n	801f306 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	2201      	movs	r2, #1
 801f2cc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801f2ce:	687a      	ldr	r2, [r7, #4]
 801f2d0:	23a9      	movs	r3, #169	@ 0xa9
 801f2d2:	009b      	lsls	r3, r3, #2
 801f2d4:	58d3      	ldr	r3, [r2, r3]
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d005      	beq.n	801f2e6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	68db      	ldr	r3, [r3, #12]
 801f2de:	2202      	movs	r2, #2
 801f2e0:	431a      	orrs	r2, r3
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	330c      	adds	r3, #12
 801f2ea:	0019      	movs	r1, r3
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	2202      	movs	r2, #2
 801f2f0:	0018      	movs	r0, r3
 801f2f2:	f000 f8fe 	bl	801f4f2 <USBD_CtlSendData>
      break;
 801f2f6:	e006      	b.n	801f306 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801f2f8:	683a      	ldr	r2, [r7, #0]
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	0011      	movs	r1, r2
 801f2fe:	0018      	movs	r0, r3
 801f300:	f000 f879 	bl	801f3f6 <USBD_CtlError>
      break;
 801f304:	46c0      	nop			@ (mov r8, r8)
  }
}
 801f306:	46c0      	nop			@ (mov r8, r8)
 801f308:	46bd      	mov	sp, r7
 801f30a:	b002      	add	sp, #8
 801f30c:	bd80      	pop	{r7, pc}

0801f30e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f30e:	b580      	push	{r7, lr}
 801f310:	b082      	sub	sp, #8
 801f312:	af00      	add	r7, sp, #0
 801f314:	6078      	str	r0, [r7, #4]
 801f316:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f318:	683b      	ldr	r3, [r7, #0]
 801f31a:	885b      	ldrh	r3, [r3, #2]
 801f31c:	2b01      	cmp	r3, #1
 801f31e:	d108      	bne.n	801f332 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801f320:	687a      	ldr	r2, [r7, #4]
 801f322:	23a9      	movs	r3, #169	@ 0xa9
 801f324:	009b      	lsls	r3, r3, #2
 801f326:	2101      	movs	r1, #1
 801f328:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801f32a:	687b      	ldr	r3, [r7, #4]
 801f32c:	0018      	movs	r0, r3
 801f32e:	f000 f94a 	bl	801f5c6 <USBD_CtlSendStatus>
  }
}
 801f332:	46c0      	nop			@ (mov r8, r8)
 801f334:	46bd      	mov	sp, r7
 801f336:	b002      	add	sp, #8
 801f338:	bd80      	pop	{r7, pc}

0801f33a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801f33a:	b580      	push	{r7, lr}
 801f33c:	b082      	sub	sp, #8
 801f33e:	af00      	add	r7, sp, #0
 801f340:	6078      	str	r0, [r7, #4]
 801f342:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801f344:	687a      	ldr	r2, [r7, #4]
 801f346:	23a7      	movs	r3, #167	@ 0xa7
 801f348:	009b      	lsls	r3, r3, #2
 801f34a:	5cd3      	ldrb	r3, [r2, r3]
 801f34c:	3b01      	subs	r3, #1
 801f34e:	2b02      	cmp	r3, #2
 801f350:	d80d      	bhi.n	801f36e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801f352:	683b      	ldr	r3, [r7, #0]
 801f354:	885b      	ldrh	r3, [r3, #2]
 801f356:	2b01      	cmp	r3, #1
 801f358:	d110      	bne.n	801f37c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801f35a:	687a      	ldr	r2, [r7, #4]
 801f35c:	23a9      	movs	r3, #169	@ 0xa9
 801f35e:	009b      	lsls	r3, r3, #2
 801f360:	2100      	movs	r1, #0
 801f362:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801f364:	687b      	ldr	r3, [r7, #4]
 801f366:	0018      	movs	r0, r3
 801f368:	f000 f92d 	bl	801f5c6 <USBD_CtlSendStatus>
      }
      break;
 801f36c:	e006      	b.n	801f37c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801f36e:	683a      	ldr	r2, [r7, #0]
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	0011      	movs	r1, r2
 801f374:	0018      	movs	r0, r3
 801f376:	f000 f83e 	bl	801f3f6 <USBD_CtlError>
      break;
 801f37a:	e000      	b.n	801f37e <USBD_ClrFeature+0x44>
      break;
 801f37c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801f37e:	46c0      	nop			@ (mov r8, r8)
 801f380:	46bd      	mov	sp, r7
 801f382:	b002      	add	sp, #8
 801f384:	bd80      	pop	{r7, pc}

0801f386 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801f386:	b580      	push	{r7, lr}
 801f388:	b082      	sub	sp, #8
 801f38a:	af00      	add	r7, sp, #0
 801f38c:	6078      	str	r0, [r7, #4]
 801f38e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801f390:	683b      	ldr	r3, [r7, #0]
 801f392:	781a      	ldrb	r2, [r3, #0]
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801f398:	683b      	ldr	r3, [r7, #0]
 801f39a:	785a      	ldrb	r2, [r3, #1]
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801f3a0:	683b      	ldr	r3, [r7, #0]
 801f3a2:	3302      	adds	r3, #2
 801f3a4:	781b      	ldrb	r3, [r3, #0]
 801f3a6:	001a      	movs	r2, r3
 801f3a8:	683b      	ldr	r3, [r7, #0]
 801f3aa:	3303      	adds	r3, #3
 801f3ac:	781b      	ldrb	r3, [r3, #0]
 801f3ae:	021b      	lsls	r3, r3, #8
 801f3b0:	b29b      	uxth	r3, r3
 801f3b2:	18d3      	adds	r3, r2, r3
 801f3b4:	b29a      	uxth	r2, r3
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801f3ba:	683b      	ldr	r3, [r7, #0]
 801f3bc:	3304      	adds	r3, #4
 801f3be:	781b      	ldrb	r3, [r3, #0]
 801f3c0:	001a      	movs	r2, r3
 801f3c2:	683b      	ldr	r3, [r7, #0]
 801f3c4:	3305      	adds	r3, #5
 801f3c6:	781b      	ldrb	r3, [r3, #0]
 801f3c8:	021b      	lsls	r3, r3, #8
 801f3ca:	b29b      	uxth	r3, r3
 801f3cc:	18d3      	adds	r3, r2, r3
 801f3ce:	b29a      	uxth	r2, r3
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801f3d4:	683b      	ldr	r3, [r7, #0]
 801f3d6:	3306      	adds	r3, #6
 801f3d8:	781b      	ldrb	r3, [r3, #0]
 801f3da:	001a      	movs	r2, r3
 801f3dc:	683b      	ldr	r3, [r7, #0]
 801f3de:	3307      	adds	r3, #7
 801f3e0:	781b      	ldrb	r3, [r3, #0]
 801f3e2:	021b      	lsls	r3, r3, #8
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	18d3      	adds	r3, r2, r3
 801f3e8:	b29a      	uxth	r2, r3
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	80da      	strh	r2, [r3, #6]

}
 801f3ee:	46c0      	nop			@ (mov r8, r8)
 801f3f0:	46bd      	mov	sp, r7
 801f3f2:	b002      	add	sp, #8
 801f3f4:	bd80      	pop	{r7, pc}

0801f3f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801f3f6:	b580      	push	{r7, lr}
 801f3f8:	b082      	sub	sp, #8
 801f3fa:	af00      	add	r7, sp, #0
 801f3fc:	6078      	str	r0, [r7, #4]
 801f3fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	2180      	movs	r1, #128	@ 0x80
 801f404:	0018      	movs	r0, r3
 801f406:	f000 fd1e 	bl	801fe46 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	2100      	movs	r1, #0
 801f40e:	0018      	movs	r0, r3
 801f410:	f000 fd19 	bl	801fe46 <USBD_LL_StallEP>
}
 801f414:	46c0      	nop			@ (mov r8, r8)
 801f416:	46bd      	mov	sp, r7
 801f418:	b002      	add	sp, #8
 801f41a:	bd80      	pop	{r7, pc}

0801f41c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801f41c:	b590      	push	{r4, r7, lr}
 801f41e:	b087      	sub	sp, #28
 801f420:	af00      	add	r7, sp, #0
 801f422:	60f8      	str	r0, [r7, #12]
 801f424:	60b9      	str	r1, [r7, #8]
 801f426:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801f428:	2417      	movs	r4, #23
 801f42a:	193b      	adds	r3, r7, r4
 801f42c:	2200      	movs	r2, #0
 801f42e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	2b00      	cmp	r3, #0
 801f434:	d03c      	beq.n	801f4b0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	0018      	movs	r0, r3
 801f43a:	f000 f83d 	bl	801f4b8 <USBD_GetLen>
 801f43e:	0003      	movs	r3, r0
 801f440:	3301      	adds	r3, #1
 801f442:	b29b      	uxth	r3, r3
 801f444:	18db      	adds	r3, r3, r3
 801f446:	b29a      	uxth	r2, r3
 801f448:	687b      	ldr	r3, [r7, #4]
 801f44a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801f44c:	193b      	adds	r3, r7, r4
 801f44e:	781b      	ldrb	r3, [r3, #0]
 801f450:	193a      	adds	r2, r7, r4
 801f452:	1c59      	adds	r1, r3, #1
 801f454:	7011      	strb	r1, [r2, #0]
 801f456:	001a      	movs	r2, r3
 801f458:	68bb      	ldr	r3, [r7, #8]
 801f45a:	189b      	adds	r3, r3, r2
 801f45c:	687a      	ldr	r2, [r7, #4]
 801f45e:	7812      	ldrb	r2, [r2, #0]
 801f460:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801f462:	193b      	adds	r3, r7, r4
 801f464:	781b      	ldrb	r3, [r3, #0]
 801f466:	193a      	adds	r2, r7, r4
 801f468:	1c59      	adds	r1, r3, #1
 801f46a:	7011      	strb	r1, [r2, #0]
 801f46c:	001a      	movs	r2, r3
 801f46e:	68bb      	ldr	r3, [r7, #8]
 801f470:	189b      	adds	r3, r3, r2
 801f472:	2203      	movs	r2, #3
 801f474:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801f476:	e017      	b.n	801f4a8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801f478:	68fb      	ldr	r3, [r7, #12]
 801f47a:	1c5a      	adds	r2, r3, #1
 801f47c:	60fa      	str	r2, [r7, #12]
 801f47e:	2417      	movs	r4, #23
 801f480:	193a      	adds	r2, r7, r4
 801f482:	7812      	ldrb	r2, [r2, #0]
 801f484:	1939      	adds	r1, r7, r4
 801f486:	1c50      	adds	r0, r2, #1
 801f488:	7008      	strb	r0, [r1, #0]
 801f48a:	0011      	movs	r1, r2
 801f48c:	68ba      	ldr	r2, [r7, #8]
 801f48e:	1852      	adds	r2, r2, r1
 801f490:	781b      	ldrb	r3, [r3, #0]
 801f492:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801f494:	193b      	adds	r3, r7, r4
 801f496:	781b      	ldrb	r3, [r3, #0]
 801f498:	193a      	adds	r2, r7, r4
 801f49a:	1c59      	adds	r1, r3, #1
 801f49c:	7011      	strb	r1, [r2, #0]
 801f49e:	001a      	movs	r2, r3
 801f4a0:	68bb      	ldr	r3, [r7, #8]
 801f4a2:	189b      	adds	r3, r3, r2
 801f4a4:	2200      	movs	r2, #0
 801f4a6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801f4a8:	68fb      	ldr	r3, [r7, #12]
 801f4aa:	781b      	ldrb	r3, [r3, #0]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d1e3      	bne.n	801f478 <USBD_GetString+0x5c>
    }
  }
}
 801f4b0:	46c0      	nop			@ (mov r8, r8)
 801f4b2:	46bd      	mov	sp, r7
 801f4b4:	b007      	add	sp, #28
 801f4b6:	bd90      	pop	{r4, r7, pc}

0801f4b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b084      	sub	sp, #16
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801f4c0:	230f      	movs	r3, #15
 801f4c2:	18fb      	adds	r3, r7, r3
 801f4c4:	2200      	movs	r2, #0
 801f4c6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801f4c8:	e008      	b.n	801f4dc <USBD_GetLen+0x24>
  {
    len++;
 801f4ca:	210f      	movs	r1, #15
 801f4cc:	187b      	adds	r3, r7, r1
 801f4ce:	781a      	ldrb	r2, [r3, #0]
 801f4d0:	187b      	adds	r3, r7, r1
 801f4d2:	3201      	adds	r2, #1
 801f4d4:	701a      	strb	r2, [r3, #0]
    buf++;
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	3301      	adds	r3, #1
 801f4da:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	781b      	ldrb	r3, [r3, #0]
 801f4e0:	2b00      	cmp	r3, #0
 801f4e2:	d1f2      	bne.n	801f4ca <USBD_GetLen+0x12>
  }

  return len;
 801f4e4:	230f      	movs	r3, #15
 801f4e6:	18fb      	adds	r3, r7, r3
 801f4e8:	781b      	ldrb	r3, [r3, #0]
}
 801f4ea:	0018      	movs	r0, r3
 801f4ec:	46bd      	mov	sp, r7
 801f4ee:	b004      	add	sp, #16
 801f4f0:	bd80      	pop	{r7, pc}

0801f4f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801f4f2:	b580      	push	{r7, lr}
 801f4f4:	b084      	sub	sp, #16
 801f4f6:	af00      	add	r7, sp, #0
 801f4f8:	60f8      	str	r0, [r7, #12]
 801f4fa:	60b9      	str	r1, [r7, #8]
 801f4fc:	1dbb      	adds	r3, r7, #6
 801f4fe:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801f500:	68fa      	ldr	r2, [r7, #12]
 801f502:	23a5      	movs	r3, #165	@ 0xa5
 801f504:	009b      	lsls	r3, r3, #2
 801f506:	2102      	movs	r1, #2
 801f508:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801f50a:	1dbb      	adds	r3, r7, #6
 801f50c:	881a      	ldrh	r2, [r3, #0]
 801f50e:	68fb      	ldr	r3, [r7, #12]
 801f510:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801f512:	1dbb      	adds	r3, r7, #6
 801f514:	881a      	ldrh	r2, [r3, #0]
 801f516:	68fb      	ldr	r3, [r7, #12]
 801f518:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f51a:	1dbb      	adds	r3, r7, #6
 801f51c:	881b      	ldrh	r3, [r3, #0]
 801f51e:	68ba      	ldr	r2, [r7, #8]
 801f520:	68f8      	ldr	r0, [r7, #12]
 801f522:	2100      	movs	r1, #0
 801f524:	f000 fd41 	bl	801ffaa <USBD_LL_Transmit>

  return USBD_OK;
 801f528:	2300      	movs	r3, #0
}
 801f52a:	0018      	movs	r0, r3
 801f52c:	46bd      	mov	sp, r7
 801f52e:	b004      	add	sp, #16
 801f530:	bd80      	pop	{r7, pc}

0801f532 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801f532:	b580      	push	{r7, lr}
 801f534:	b084      	sub	sp, #16
 801f536:	af00      	add	r7, sp, #0
 801f538:	60f8      	str	r0, [r7, #12]
 801f53a:	60b9      	str	r1, [r7, #8]
 801f53c:	1dbb      	adds	r3, r7, #6
 801f53e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801f540:	1dbb      	adds	r3, r7, #6
 801f542:	881b      	ldrh	r3, [r3, #0]
 801f544:	68ba      	ldr	r2, [r7, #8]
 801f546:	68f8      	ldr	r0, [r7, #12]
 801f548:	2100      	movs	r1, #0
 801f54a:	f000 fd2e 	bl	801ffaa <USBD_LL_Transmit>

  return USBD_OK;
 801f54e:	2300      	movs	r3, #0
}
 801f550:	0018      	movs	r0, r3
 801f552:	46bd      	mov	sp, r7
 801f554:	b004      	add	sp, #16
 801f556:	bd80      	pop	{r7, pc}

0801f558 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801f558:	b580      	push	{r7, lr}
 801f55a:	b084      	sub	sp, #16
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	60f8      	str	r0, [r7, #12]
 801f560:	60b9      	str	r1, [r7, #8]
 801f562:	1dbb      	adds	r3, r7, #6
 801f564:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801f566:	68fa      	ldr	r2, [r7, #12]
 801f568:	23a5      	movs	r3, #165	@ 0xa5
 801f56a:	009b      	lsls	r3, r3, #2
 801f56c:	2103      	movs	r1, #3
 801f56e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801f570:	1dbb      	adds	r3, r7, #6
 801f572:	8819      	ldrh	r1, [r3, #0]
 801f574:	68fa      	ldr	r2, [r7, #12]
 801f576:	23ae      	movs	r3, #174	@ 0xae
 801f578:	005b      	lsls	r3, r3, #1
 801f57a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801f57c:	1dbb      	adds	r3, r7, #6
 801f57e:	8819      	ldrh	r1, [r3, #0]
 801f580:	68fa      	ldr	r2, [r7, #12]
 801f582:	23b0      	movs	r3, #176	@ 0xb0
 801f584:	005b      	lsls	r3, r3, #1
 801f586:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f588:	1dbb      	adds	r3, r7, #6
 801f58a:	881b      	ldrh	r3, [r3, #0]
 801f58c:	68ba      	ldr	r2, [r7, #8]
 801f58e:	68f8      	ldr	r0, [r7, #12]
 801f590:	2100      	movs	r1, #0
 801f592:	f000 fd41 	bl	8020018 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f596:	2300      	movs	r3, #0
}
 801f598:	0018      	movs	r0, r3
 801f59a:	46bd      	mov	sp, r7
 801f59c:	b004      	add	sp, #16
 801f59e:	bd80      	pop	{r7, pc}

0801f5a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801f5a0:	b580      	push	{r7, lr}
 801f5a2:	b084      	sub	sp, #16
 801f5a4:	af00      	add	r7, sp, #0
 801f5a6:	60f8      	str	r0, [r7, #12]
 801f5a8:	60b9      	str	r1, [r7, #8]
 801f5aa:	1dbb      	adds	r3, r7, #6
 801f5ac:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801f5ae:	1dbb      	adds	r3, r7, #6
 801f5b0:	881b      	ldrh	r3, [r3, #0]
 801f5b2:	68ba      	ldr	r2, [r7, #8]
 801f5b4:	68f8      	ldr	r0, [r7, #12]
 801f5b6:	2100      	movs	r1, #0
 801f5b8:	f000 fd2e 	bl	8020018 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f5bc:	2300      	movs	r3, #0
}
 801f5be:	0018      	movs	r0, r3
 801f5c0:	46bd      	mov	sp, r7
 801f5c2:	b004      	add	sp, #16
 801f5c4:	bd80      	pop	{r7, pc}

0801f5c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801f5c6:	b580      	push	{r7, lr}
 801f5c8:	b082      	sub	sp, #8
 801f5ca:	af00      	add	r7, sp, #0
 801f5cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801f5ce:	687a      	ldr	r2, [r7, #4]
 801f5d0:	23a5      	movs	r3, #165	@ 0xa5
 801f5d2:	009b      	lsls	r3, r3, #2
 801f5d4:	2104      	movs	r1, #4
 801f5d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801f5d8:	6878      	ldr	r0, [r7, #4]
 801f5da:	2300      	movs	r3, #0
 801f5dc:	2200      	movs	r2, #0
 801f5de:	2100      	movs	r1, #0
 801f5e0:	f000 fce3 	bl	801ffaa <USBD_LL_Transmit>

  return USBD_OK;
 801f5e4:	2300      	movs	r3, #0
}
 801f5e6:	0018      	movs	r0, r3
 801f5e8:	46bd      	mov	sp, r7
 801f5ea:	b002      	add	sp, #8
 801f5ec:	bd80      	pop	{r7, pc}

0801f5ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801f5ee:	b580      	push	{r7, lr}
 801f5f0:	b082      	sub	sp, #8
 801f5f2:	af00      	add	r7, sp, #0
 801f5f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801f5f6:	687a      	ldr	r2, [r7, #4]
 801f5f8:	23a5      	movs	r3, #165	@ 0xa5
 801f5fa:	009b      	lsls	r3, r3, #2
 801f5fc:	2105      	movs	r1, #5
 801f5fe:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f600:	6878      	ldr	r0, [r7, #4]
 801f602:	2300      	movs	r3, #0
 801f604:	2200      	movs	r2, #0
 801f606:	2100      	movs	r1, #0
 801f608:	f000 fd06 	bl	8020018 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801f60c:	2300      	movs	r3, #0
}
 801f60e:	0018      	movs	r0, r3
 801f610:	46bd      	mov	sp, r7
 801f612:	b002      	add	sp, #8
 801f614:	bd80      	pop	{r7, pc}
	...

0801f618 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f618:	b580      	push	{r7, lr}
 801f61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801f61c:	4914      	ldr	r1, [pc, #80]	@ (801f670 <MX_USB_DEVICE_Init+0x58>)
 801f61e:	4b15      	ldr	r3, [pc, #84]	@ (801f674 <MX_USB_DEVICE_Init+0x5c>)
 801f620:	2200      	movs	r2, #0
 801f622:	0018      	movs	r0, r3
 801f624:	f7fe fdec 	bl	801e200 <USBD_Init>
 801f628:	1e03      	subs	r3, r0, #0
 801f62a:	d001      	beq.n	801f630 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f62c:	f7ea ff44 	bl	800a4b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801f630:	4a11      	ldr	r2, [pc, #68]	@ (801f678 <MX_USB_DEVICE_Init+0x60>)
 801f632:	4b10      	ldr	r3, [pc, #64]	@ (801f674 <MX_USB_DEVICE_Init+0x5c>)
 801f634:	0011      	movs	r1, r2
 801f636:	0018      	movs	r0, r3
 801f638:	f7fe fe13 	bl	801e262 <USBD_RegisterClass>
 801f63c:	1e03      	subs	r3, r0, #0
 801f63e:	d001      	beq.n	801f644 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801f640:	f7ea ff3a 	bl	800a4b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801f644:	4a0d      	ldr	r2, [pc, #52]	@ (801f67c <MX_USB_DEVICE_Init+0x64>)
 801f646:	4b0b      	ldr	r3, [pc, #44]	@ (801f674 <MX_USB_DEVICE_Init+0x5c>)
 801f648:	0011      	movs	r1, r2
 801f64a:	0018      	movs	r0, r3
 801f64c:	f7fe fd28 	bl	801e0a0 <USBD_CDC_RegisterInterface>
 801f650:	1e03      	subs	r3, r0, #0
 801f652:	d001      	beq.n	801f658 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801f654:	f7ea ff30 	bl	800a4b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801f658:	4b06      	ldr	r3, [pc, #24]	@ (801f674 <MX_USB_DEVICE_Init+0x5c>)
 801f65a:	0018      	movs	r0, r3
 801f65c:	f7fe fe21 	bl	801e2a2 <USBD_Start>
 801f660:	1e03      	subs	r3, r0, #0
 801f662:	d001      	beq.n	801f668 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801f664:	f7ea ff28 	bl	800a4b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801f668:	46c0      	nop			@ (mov r8, r8)
 801f66a:	46bd      	mov	sp, r7
 801f66c:	bd80      	pop	{r7, pc}
 801f66e:	46c0      	nop			@ (mov r8, r8)
 801f670:	2000021c 	.word	0x2000021c
 801f674:	200021b8 	.word	0x200021b8
 801f678:	20000108 	.word	0x20000108
 801f67c:	2000020c 	.word	0x2000020c

0801f680 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801f680:	b580      	push	{r7, lr}
 801f682:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801f684:	4907      	ldr	r1, [pc, #28]	@ (801f6a4 <CDC_Init_FS+0x24>)
 801f686:	4b08      	ldr	r3, [pc, #32]	@ (801f6a8 <CDC_Init_FS+0x28>)
 801f688:	2200      	movs	r2, #0
 801f68a:	0018      	movs	r0, r3
 801f68c:	f7fe fd23 	bl	801e0d6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801f690:	4a06      	ldr	r2, [pc, #24]	@ (801f6ac <CDC_Init_FS+0x2c>)
 801f692:	4b05      	ldr	r3, [pc, #20]	@ (801f6a8 <CDC_Init_FS+0x28>)
 801f694:	0011      	movs	r1, r2
 801f696:	0018      	movs	r0, r3
 801f698:	f7fe fd39 	bl	801e10e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801f69c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801f69e:	0018      	movs	r0, r3
 801f6a0:	46bd      	mov	sp, r7
 801f6a2:	bd80      	pop	{r7, pc}
 801f6a4:	2000293c 	.word	0x2000293c
 801f6a8:	200021b8 	.word	0x200021b8
 801f6ac:	2000253c 	.word	0x2000253c

0801f6b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801f6b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801f6b6:	0018      	movs	r0, r3
 801f6b8:	46bd      	mov	sp, r7
 801f6ba:	bd80      	pop	{r7, pc}

0801f6bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801f6bc:	b580      	push	{r7, lr}
 801f6be:	b082      	sub	sp, #8
 801f6c0:	af00      	add	r7, sp, #0
 801f6c2:	6039      	str	r1, [r7, #0]
 801f6c4:	0011      	movs	r1, r2
 801f6c6:	1dfb      	adds	r3, r7, #7
 801f6c8:	1c02      	adds	r2, r0, #0
 801f6ca:	701a      	strb	r2, [r3, #0]
 801f6cc:	1d3b      	adds	r3, r7, #4
 801f6ce:	1c0a      	adds	r2, r1, #0
 801f6d0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801f6d2:	1dfb      	adds	r3, r7, #7
 801f6d4:	781b      	ldrb	r3, [r3, #0]
 801f6d6:	2b23      	cmp	r3, #35	@ 0x23
 801f6d8:	d804      	bhi.n	801f6e4 <CDC_Control_FS+0x28>
 801f6da:	009a      	lsls	r2, r3, #2
 801f6dc:	4b04      	ldr	r3, [pc, #16]	@ (801f6f0 <CDC_Control_FS+0x34>)
 801f6de:	18d3      	adds	r3, r2, r3
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801f6e4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801f6e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801f6e8:	0018      	movs	r0, r3
 801f6ea:	46bd      	mov	sp, r7
 801f6ec:	b002      	add	sp, #8
 801f6ee:	bd80      	pop	{r7, pc}
 801f6f0:	08029258 	.word	0x08029258

0801f6f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801f6f4:	b580      	push	{r7, lr}
 801f6f6:	b082      	sub	sp, #8
 801f6f8:	af00      	add	r7, sp, #0
 801f6fa:	6078      	str	r0, [r7, #4]
 801f6fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801f6fe:	4b12      	ldr	r3, [pc, #72]	@ (801f748 <CDC_Receive_FS+0x54>)
 801f700:	781b      	ldrb	r3, [r3, #0]
 801f702:	2b00      	cmp	r3, #0
 801f704:	d013      	beq.n	801f72e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801f706:	683b      	ldr	r3, [r7, #0]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	b29a      	uxth	r2, r3
 801f70c:	2301      	movs	r3, #1
 801f70e:	425b      	negs	r3, r3
 801f710:	6879      	ldr	r1, [r7, #4]
 801f712:	480e      	ldr	r0, [pc, #56]	@ (801f74c <CDC_Receive_FS+0x58>)
 801f714:	f7fa fa46 	bl	8019ba4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801f718:	687a      	ldr	r2, [r7, #4]
 801f71a:	4b0d      	ldr	r3, [pc, #52]	@ (801f750 <CDC_Receive_FS+0x5c>)
 801f71c:	0011      	movs	r1, r2
 801f71e:	0018      	movs	r0, r3
 801f720:	f7fe fcf5 	bl	801e10e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f724:	4b0a      	ldr	r3, [pc, #40]	@ (801f750 <CDC_Receive_FS+0x5c>)
 801f726:	0018      	movs	r0, r3
 801f728:	f7fe fd3c 	bl	801e1a4 <USBD_CDC_ReceivePacket>
 801f72c:	e006      	b.n	801f73c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801f72e:	683b      	ldr	r3, [r7, #0]
 801f730:	681a      	ldr	r2, [r3, #0]
 801f732:	4b08      	ldr	r3, [pc, #32]	@ (801f754 <CDC_Receive_FS+0x60>)
 801f734:	681b      	ldr	r3, [r3, #0]
 801f736:	18d2      	adds	r2, r2, r3
 801f738:	4b06      	ldr	r3, [pc, #24]	@ (801f754 <CDC_Receive_FS+0x60>)
 801f73a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801f73c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801f73e:	0018      	movs	r0, r3
 801f740:	46bd      	mov	sp, r7
 801f742:	b002      	add	sp, #8
 801f744:	bd80      	pop	{r7, pc}
 801f746:	46c0      	nop			@ (mov r8, r8)
 801f748:	2000247c 	.word	0x2000247c
 801f74c:	20002480 	.word	0x20002480
 801f750:	200021b8 	.word	0x200021b8
 801f754:	20002538 	.word	0x20002538

0801f758 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801f758:	b5b0      	push	{r4, r5, r7, lr}
 801f75a:	b084      	sub	sp, #16
 801f75c:	af00      	add	r7, sp, #0
 801f75e:	6078      	str	r0, [r7, #4]
 801f760:	000a      	movs	r2, r1
 801f762:	1cbb      	adds	r3, r7, #2
 801f764:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801f766:	230f      	movs	r3, #15
 801f768:	18fb      	adds	r3, r7, r3
 801f76a:	2200      	movs	r2, #0
 801f76c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801f76e:	4a11      	ldr	r2, [pc, #68]	@ (801f7b4 <CDC_Transmit_FS+0x5c>)
 801f770:	23ae      	movs	r3, #174	@ 0xae
 801f772:	009b      	lsls	r3, r3, #2
 801f774:	58d3      	ldr	r3, [r2, r3]
 801f776:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801f778:	68ba      	ldr	r2, [r7, #8]
 801f77a:	2385      	movs	r3, #133	@ 0x85
 801f77c:	009b      	lsls	r3, r3, #2
 801f77e:	58d3      	ldr	r3, [r2, r3]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d001      	beq.n	801f788 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801f784:	2301      	movs	r3, #1
 801f786:	e010      	b.n	801f7aa <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801f788:	1cbb      	adds	r3, r7, #2
 801f78a:	881a      	ldrh	r2, [r3, #0]
 801f78c:	6879      	ldr	r1, [r7, #4]
 801f78e:	4b09      	ldr	r3, [pc, #36]	@ (801f7b4 <CDC_Transmit_FS+0x5c>)
 801f790:	0018      	movs	r0, r3
 801f792:	f7fe fca0 	bl	801e0d6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801f796:	250f      	movs	r5, #15
 801f798:	197c      	adds	r4, r7, r5
 801f79a:	4b06      	ldr	r3, [pc, #24]	@ (801f7b4 <CDC_Transmit_FS+0x5c>)
 801f79c:	0018      	movs	r0, r3
 801f79e:	f7fe fcca 	bl	801e136 <USBD_CDC_TransmitPacket>
 801f7a2:	0003      	movs	r3, r0
 801f7a4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801f7a6:	197b      	adds	r3, r7, r5
 801f7a8:	781b      	ldrb	r3, [r3, #0]
}
 801f7aa:	0018      	movs	r0, r3
 801f7ac:	46bd      	mov	sp, r7
 801f7ae:	b004      	add	sp, #16
 801f7b0:	bdb0      	pop	{r4, r5, r7, pc}
 801f7b2:	46c0      	nop			@ (mov r8, r8)
 801f7b4:	200021b8 	.word	0x200021b8

0801f7b8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801f7b8:	b580      	push	{r7, lr}
 801f7ba:	af00      	add	r7, sp, #0
  ESPProg = true;
 801f7bc:	4b02      	ldr	r3, [pc, #8]	@ (801f7c8 <EnableESPProg+0x10>)
 801f7be:	2201      	movs	r2, #1
 801f7c0:	701a      	strb	r2, [r3, #0]
}
 801f7c2:	46c0      	nop			@ (mov r8, r8)
 801f7c4:	46bd      	mov	sp, r7
 801f7c6:	bd80      	pop	{r7, pc}
 801f7c8:	2000247c 	.word	0x2000247c

0801f7cc <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801f7d0:	4b01      	ldr	r3, [pc, #4]	@ (801f7d8 <GetUsbRxPointer+0xc>)
}
 801f7d2:	0018      	movs	r0, r3
 801f7d4:	46bd      	mov	sp, r7
 801f7d6:	bd80      	pop	{r7, pc}
 801f7d8:	2000253c 	.word	0x2000253c

0801f7dc <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801f7dc:	b580      	push	{r7, lr}
 801f7de:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801f7e0:	4b07      	ldr	r3, [pc, #28]	@ (801f800 <ResetUsbRxDataSize+0x24>)
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801f7e6:	4a07      	ldr	r2, [pc, #28]	@ (801f804 <ResetUsbRxDataSize+0x28>)
 801f7e8:	4b07      	ldr	r3, [pc, #28]	@ (801f808 <ResetUsbRxDataSize+0x2c>)
 801f7ea:	0011      	movs	r1, r2
 801f7ec:	0018      	movs	r0, r3
 801f7ee:	f7fe fc8e 	bl	801e10e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f7f2:	4b05      	ldr	r3, [pc, #20]	@ (801f808 <ResetUsbRxDataSize+0x2c>)
 801f7f4:	0018      	movs	r0, r3
 801f7f6:	f7fe fcd5 	bl	801e1a4 <USBD_CDC_ReceivePacket>
}
 801f7fa:	46c0      	nop			@ (mov r8, r8)
 801f7fc:	46bd      	mov	sp, r7
 801f7fe:	bd80      	pop	{r7, pc}
 801f800:	20002538 	.word	0x20002538
 801f804:	2000253c 	.word	0x2000253c
 801f808:	200021b8 	.word	0x200021b8

0801f80c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801f80c:	b580      	push	{r7, lr}
 801f80e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801f810:	4b02      	ldr	r3, [pc, #8]	@ (801f81c <GetUsbRxDataSize+0x10>)
 801f812:	681b      	ldr	r3, [r3, #0]
}
 801f814:	0018      	movs	r0, r3
 801f816:	46bd      	mov	sp, r7
 801f818:	bd80      	pop	{r7, pc}
 801f81a:	46c0      	nop			@ (mov r8, r8)
 801f81c:	20002538 	.word	0x20002538

0801f820 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801f820:	b580      	push	{r7, lr}
 801f822:	b082      	sub	sp, #8
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801f828:	687a      	ldr	r2, [r7, #4]
 801f82a:	4b07      	ldr	r3, [pc, #28]	@ (801f848 <GetUsbRxNextChunk+0x28>)
 801f82c:	18d2      	adds	r2, r2, r3
 801f82e:	4b07      	ldr	r3, [pc, #28]	@ (801f84c <GetUsbRxNextChunk+0x2c>)
 801f830:	0011      	movs	r1, r2
 801f832:	0018      	movs	r0, r3
 801f834:	f7fe fc6b 	bl	801e10e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801f838:	4b04      	ldr	r3, [pc, #16]	@ (801f84c <GetUsbRxNextChunk+0x2c>)
 801f83a:	0018      	movs	r0, r3
 801f83c:	f7fe fcb2 	bl	801e1a4 <USBD_CDC_ReceivePacket>
}
 801f840:	46c0      	nop			@ (mov r8, r8)
 801f842:	46bd      	mov	sp, r7
 801f844:	b002      	add	sp, #8
 801f846:	bd80      	pop	{r7, pc}
 801f848:	2000253c 	.word	0x2000253c
 801f84c:	200021b8 	.word	0x200021b8

0801f850 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f850:	b580      	push	{r7, lr}
 801f852:	b082      	sub	sp, #8
 801f854:	af00      	add	r7, sp, #0
 801f856:	0002      	movs	r2, r0
 801f858:	6039      	str	r1, [r7, #0]
 801f85a:	1dfb      	adds	r3, r7, #7
 801f85c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801f85e:	683b      	ldr	r3, [r7, #0]
 801f860:	2212      	movs	r2, #18
 801f862:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801f864:	4b02      	ldr	r3, [pc, #8]	@ (801f870 <USBD_FS_DeviceDescriptor+0x20>)
}
 801f866:	0018      	movs	r0, r3
 801f868:	46bd      	mov	sp, r7
 801f86a:	b002      	add	sp, #8
 801f86c:	bd80      	pop	{r7, pc}
 801f86e:	46c0      	nop			@ (mov r8, r8)
 801f870:	20000238 	.word	0x20000238

0801f874 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f874:	b580      	push	{r7, lr}
 801f876:	b082      	sub	sp, #8
 801f878:	af00      	add	r7, sp, #0
 801f87a:	0002      	movs	r2, r0
 801f87c:	6039      	str	r1, [r7, #0]
 801f87e:	1dfb      	adds	r3, r7, #7
 801f880:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801f882:	683b      	ldr	r3, [r7, #0]
 801f884:	2204      	movs	r2, #4
 801f886:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801f888:	4b02      	ldr	r3, [pc, #8]	@ (801f894 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801f88a:	0018      	movs	r0, r3
 801f88c:	46bd      	mov	sp, r7
 801f88e:	b002      	add	sp, #8
 801f890:	bd80      	pop	{r7, pc}
 801f892:	46c0      	nop			@ (mov r8, r8)
 801f894:	2000024c 	.word	0x2000024c

0801f898 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f898:	b580      	push	{r7, lr}
 801f89a:	b082      	sub	sp, #8
 801f89c:	af00      	add	r7, sp, #0
 801f89e:	0002      	movs	r2, r0
 801f8a0:	6039      	str	r1, [r7, #0]
 801f8a2:	1dfb      	adds	r3, r7, #7
 801f8a4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f8a6:	1dfb      	adds	r3, r7, #7
 801f8a8:	781b      	ldrb	r3, [r3, #0]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d106      	bne.n	801f8bc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f8ae:	683a      	ldr	r2, [r7, #0]
 801f8b0:	4908      	ldr	r1, [pc, #32]	@ (801f8d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801f8b2:	4b09      	ldr	r3, [pc, #36]	@ (801f8d8 <USBD_FS_ProductStrDescriptor+0x40>)
 801f8b4:	0018      	movs	r0, r3
 801f8b6:	f7ff fdb1 	bl	801f41c <USBD_GetString>
 801f8ba:	e005      	b.n	801f8c8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801f8bc:	683a      	ldr	r2, [r7, #0]
 801f8be:	4905      	ldr	r1, [pc, #20]	@ (801f8d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801f8c0:	4b05      	ldr	r3, [pc, #20]	@ (801f8d8 <USBD_FS_ProductStrDescriptor+0x40>)
 801f8c2:	0018      	movs	r0, r3
 801f8c4:	f7ff fdaa 	bl	801f41c <USBD_GetString>
  }
  return USBD_StrDesc;
 801f8c8:	4b02      	ldr	r3, [pc, #8]	@ (801f8d4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801f8ca:	0018      	movs	r0, r3
 801f8cc:	46bd      	mov	sp, r7
 801f8ce:	b002      	add	sp, #8
 801f8d0:	bd80      	pop	{r7, pc}
 801f8d2:	46c0      	nop			@ (mov r8, r8)
 801f8d4:	20002d3c 	.word	0x20002d3c
 801f8d8:	08028c64 	.word	0x08028c64

0801f8dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f8dc:	b580      	push	{r7, lr}
 801f8de:	b082      	sub	sp, #8
 801f8e0:	af00      	add	r7, sp, #0
 801f8e2:	0002      	movs	r2, r0
 801f8e4:	6039      	str	r1, [r7, #0]
 801f8e6:	1dfb      	adds	r3, r7, #7
 801f8e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801f8ea:	683a      	ldr	r2, [r7, #0]
 801f8ec:	4904      	ldr	r1, [pc, #16]	@ (801f900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801f8ee:	4b05      	ldr	r3, [pc, #20]	@ (801f904 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801f8f0:	0018      	movs	r0, r3
 801f8f2:	f7ff fd93 	bl	801f41c <USBD_GetString>
  return USBD_StrDesc;
 801f8f6:	4b02      	ldr	r3, [pc, #8]	@ (801f900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801f8f8:	0018      	movs	r0, r3
 801f8fa:	46bd      	mov	sp, r7
 801f8fc:	b002      	add	sp, #8
 801f8fe:	bd80      	pop	{r7, pc}
 801f900:	20002d3c 	.word	0x20002d3c
 801f904:	08028c7c 	.word	0x08028c7c

0801f908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f908:	b580      	push	{r7, lr}
 801f90a:	b082      	sub	sp, #8
 801f90c:	af00      	add	r7, sp, #0
 801f90e:	0002      	movs	r2, r0
 801f910:	6039      	str	r1, [r7, #0]
 801f912:	1dfb      	adds	r3, r7, #7
 801f914:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801f916:	683b      	ldr	r3, [r7, #0]
 801f918:	221a      	movs	r2, #26
 801f91a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801f91c:	f000 f84c 	bl	801f9b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801f920:	4b02      	ldr	r3, [pc, #8]	@ (801f92c <USBD_FS_SerialStrDescriptor+0x24>)
}
 801f922:	0018      	movs	r0, r3
 801f924:	46bd      	mov	sp, r7
 801f926:	b002      	add	sp, #8
 801f928:	bd80      	pop	{r7, pc}
 801f92a:	46c0      	nop			@ (mov r8, r8)
 801f92c:	20000250 	.word	0x20000250

0801f930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f930:	b580      	push	{r7, lr}
 801f932:	b082      	sub	sp, #8
 801f934:	af00      	add	r7, sp, #0
 801f936:	0002      	movs	r2, r0
 801f938:	6039      	str	r1, [r7, #0]
 801f93a:	1dfb      	adds	r3, r7, #7
 801f93c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801f93e:	1dfb      	adds	r3, r7, #7
 801f940:	781b      	ldrb	r3, [r3, #0]
 801f942:	2b00      	cmp	r3, #0
 801f944:	d106      	bne.n	801f954 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f946:	683a      	ldr	r2, [r7, #0]
 801f948:	4908      	ldr	r1, [pc, #32]	@ (801f96c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f94a:	4b09      	ldr	r3, [pc, #36]	@ (801f970 <USBD_FS_ConfigStrDescriptor+0x40>)
 801f94c:	0018      	movs	r0, r3
 801f94e:	f7ff fd65 	bl	801f41c <USBD_GetString>
 801f952:	e005      	b.n	801f960 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801f954:	683a      	ldr	r2, [r7, #0]
 801f956:	4905      	ldr	r1, [pc, #20]	@ (801f96c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801f958:	4b05      	ldr	r3, [pc, #20]	@ (801f970 <USBD_FS_ConfigStrDescriptor+0x40>)
 801f95a:	0018      	movs	r0, r3
 801f95c:	f7ff fd5e 	bl	801f41c <USBD_GetString>
  }
  return USBD_StrDesc;
 801f960:	4b02      	ldr	r3, [pc, #8]	@ (801f96c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801f962:	0018      	movs	r0, r3
 801f964:	46bd      	mov	sp, r7
 801f966:	b002      	add	sp, #8
 801f968:	bd80      	pop	{r7, pc}
 801f96a:	46c0      	nop			@ (mov r8, r8)
 801f96c:	20002d3c 	.word	0x20002d3c
 801f970:	08028c90 	.word	0x08028c90

0801f974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801f974:	b580      	push	{r7, lr}
 801f976:	b082      	sub	sp, #8
 801f978:	af00      	add	r7, sp, #0
 801f97a:	0002      	movs	r2, r0
 801f97c:	6039      	str	r1, [r7, #0]
 801f97e:	1dfb      	adds	r3, r7, #7
 801f980:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801f982:	1dfb      	adds	r3, r7, #7
 801f984:	781b      	ldrb	r3, [r3, #0]
 801f986:	2b00      	cmp	r3, #0
 801f988:	d106      	bne.n	801f998 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f98a:	683a      	ldr	r2, [r7, #0]
 801f98c:	4908      	ldr	r1, [pc, #32]	@ (801f9b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f98e:	4b09      	ldr	r3, [pc, #36]	@ (801f9b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f990:	0018      	movs	r0, r3
 801f992:	f7ff fd43 	bl	801f41c <USBD_GetString>
 801f996:	e005      	b.n	801f9a4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801f998:	683a      	ldr	r2, [r7, #0]
 801f99a:	4905      	ldr	r1, [pc, #20]	@ (801f9b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801f99c:	4b05      	ldr	r3, [pc, #20]	@ (801f9b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801f99e:	0018      	movs	r0, r3
 801f9a0:	f7ff fd3c 	bl	801f41c <USBD_GetString>
  }
  return USBD_StrDesc;
 801f9a4:	4b02      	ldr	r3, [pc, #8]	@ (801f9b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801f9a6:	0018      	movs	r0, r3
 801f9a8:	46bd      	mov	sp, r7
 801f9aa:	b002      	add	sp, #8
 801f9ac:	bd80      	pop	{r7, pc}
 801f9ae:	46c0      	nop			@ (mov r8, r8)
 801f9b0:	20002d3c 	.word	0x20002d3c
 801f9b4:	08028c9c 	.word	0x08028c9c

0801f9b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801f9b8:	b580      	push	{r7, lr}
 801f9ba:	b084      	sub	sp, #16
 801f9bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801f9be:	4b10      	ldr	r3, [pc, #64]	@ (801fa00 <Get_SerialNum+0x48>)
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801f9c4:	4b0f      	ldr	r3, [pc, #60]	@ (801fa04 <Get_SerialNum+0x4c>)
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801f9ca:	4b0f      	ldr	r3, [pc, #60]	@ (801fa08 <Get_SerialNum+0x50>)
 801f9cc:	681b      	ldr	r3, [r3, #0]
 801f9ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801f9d0:	68fa      	ldr	r2, [r7, #12]
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	18d3      	adds	r3, r2, r3
 801f9d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d00b      	beq.n	801f9f6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801f9de:	490b      	ldr	r1, [pc, #44]	@ (801fa0c <Get_SerialNum+0x54>)
 801f9e0:	68fb      	ldr	r3, [r7, #12]
 801f9e2:	2208      	movs	r2, #8
 801f9e4:	0018      	movs	r0, r3
 801f9e6:	f000 f815 	bl	801fa14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801f9ea:	4909      	ldr	r1, [pc, #36]	@ (801fa10 <Get_SerialNum+0x58>)
 801f9ec:	68bb      	ldr	r3, [r7, #8]
 801f9ee:	2204      	movs	r2, #4
 801f9f0:	0018      	movs	r0, r3
 801f9f2:	f000 f80f 	bl	801fa14 <IntToUnicode>
  }
}
 801f9f6:	46c0      	nop			@ (mov r8, r8)
 801f9f8:	46bd      	mov	sp, r7
 801f9fa:	b004      	add	sp, #16
 801f9fc:	bd80      	pop	{r7, pc}
 801f9fe:	46c0      	nop			@ (mov r8, r8)
 801fa00:	1ff80050 	.word	0x1ff80050
 801fa04:	1ff80054 	.word	0x1ff80054
 801fa08:	1ff80058 	.word	0x1ff80058
 801fa0c:	20000252 	.word	0x20000252
 801fa10:	20000262 	.word	0x20000262

0801fa14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801fa14:	b580      	push	{r7, lr}
 801fa16:	b086      	sub	sp, #24
 801fa18:	af00      	add	r7, sp, #0
 801fa1a:	60f8      	str	r0, [r7, #12]
 801fa1c:	60b9      	str	r1, [r7, #8]
 801fa1e:	1dfb      	adds	r3, r7, #7
 801fa20:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801fa22:	2117      	movs	r1, #23
 801fa24:	187b      	adds	r3, r7, r1
 801fa26:	2200      	movs	r2, #0
 801fa28:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801fa2a:	187b      	adds	r3, r7, r1
 801fa2c:	2200      	movs	r2, #0
 801fa2e:	701a      	strb	r2, [r3, #0]
 801fa30:	e02f      	b.n	801fa92 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	0f1b      	lsrs	r3, r3, #28
 801fa36:	2b09      	cmp	r3, #9
 801fa38:	d80d      	bhi.n	801fa56 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801fa3a:	68fb      	ldr	r3, [r7, #12]
 801fa3c:	0f1b      	lsrs	r3, r3, #28
 801fa3e:	b2da      	uxtb	r2, r3
 801fa40:	2317      	movs	r3, #23
 801fa42:	18fb      	adds	r3, r7, r3
 801fa44:	781b      	ldrb	r3, [r3, #0]
 801fa46:	005b      	lsls	r3, r3, #1
 801fa48:	0019      	movs	r1, r3
 801fa4a:	68bb      	ldr	r3, [r7, #8]
 801fa4c:	185b      	adds	r3, r3, r1
 801fa4e:	3230      	adds	r2, #48	@ 0x30
 801fa50:	b2d2      	uxtb	r2, r2
 801fa52:	701a      	strb	r2, [r3, #0]
 801fa54:	e00c      	b.n	801fa70 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801fa56:	68fb      	ldr	r3, [r7, #12]
 801fa58:	0f1b      	lsrs	r3, r3, #28
 801fa5a:	b2da      	uxtb	r2, r3
 801fa5c:	2317      	movs	r3, #23
 801fa5e:	18fb      	adds	r3, r7, r3
 801fa60:	781b      	ldrb	r3, [r3, #0]
 801fa62:	005b      	lsls	r3, r3, #1
 801fa64:	0019      	movs	r1, r3
 801fa66:	68bb      	ldr	r3, [r7, #8]
 801fa68:	185b      	adds	r3, r3, r1
 801fa6a:	3237      	adds	r2, #55	@ 0x37
 801fa6c:	b2d2      	uxtb	r2, r2
 801fa6e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801fa70:	68fb      	ldr	r3, [r7, #12]
 801fa72:	011b      	lsls	r3, r3, #4
 801fa74:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801fa76:	2117      	movs	r1, #23
 801fa78:	187b      	adds	r3, r7, r1
 801fa7a:	781b      	ldrb	r3, [r3, #0]
 801fa7c:	005b      	lsls	r3, r3, #1
 801fa7e:	3301      	adds	r3, #1
 801fa80:	68ba      	ldr	r2, [r7, #8]
 801fa82:	18d3      	adds	r3, r2, r3
 801fa84:	2200      	movs	r2, #0
 801fa86:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801fa88:	187b      	adds	r3, r7, r1
 801fa8a:	781a      	ldrb	r2, [r3, #0]
 801fa8c:	187b      	adds	r3, r7, r1
 801fa8e:	3201      	adds	r2, #1
 801fa90:	701a      	strb	r2, [r3, #0]
 801fa92:	2317      	movs	r3, #23
 801fa94:	18fa      	adds	r2, r7, r3
 801fa96:	1dfb      	adds	r3, r7, #7
 801fa98:	7812      	ldrb	r2, [r2, #0]
 801fa9a:	781b      	ldrb	r3, [r3, #0]
 801fa9c:	429a      	cmp	r2, r3
 801fa9e:	d3c8      	bcc.n	801fa32 <IntToUnicode+0x1e>
  }
}
 801faa0:	46c0      	nop			@ (mov r8, r8)
 801faa2:	46c0      	nop			@ (mov r8, r8)
 801faa4:	46bd      	mov	sp, r7
 801faa6:	b006      	add	sp, #24
 801faa8:	bd80      	pop	{r7, pc}
	...

0801faac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801faac:	b580      	push	{r7, lr}
 801faae:	b082      	sub	sp, #8
 801fab0:	af00      	add	r7, sp, #0
 801fab2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	4a0a      	ldr	r2, [pc, #40]	@ (801fae4 <HAL_PCD_MspInit+0x38>)
 801faba:	4293      	cmp	r3, r2
 801fabc:	d10e      	bne.n	801fadc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801fabe:	4b0a      	ldr	r3, [pc, #40]	@ (801fae8 <HAL_PCD_MspInit+0x3c>)
 801fac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fac2:	4b09      	ldr	r3, [pc, #36]	@ (801fae8 <HAL_PCD_MspInit+0x3c>)
 801fac4:	2180      	movs	r1, #128	@ 0x80
 801fac6:	0409      	lsls	r1, r1, #16
 801fac8:	430a      	orrs	r2, r1
 801faca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801facc:	2200      	movs	r2, #0
 801face:	2100      	movs	r1, #0
 801fad0:	201f      	movs	r0, #31
 801fad2:	f7f2 f847 	bl	8011b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801fad6:	201f      	movs	r0, #31
 801fad8:	f7f2 f859 	bl	8011b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801fadc:	46c0      	nop			@ (mov r8, r8)
 801fade:	46bd      	mov	sp, r7
 801fae0:	b002      	add	sp, #8
 801fae2:	bd80      	pop	{r7, pc}
 801fae4:	40005c00 	.word	0x40005c00
 801fae8:	40021000 	.word	0x40021000

0801faec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801faec:	b580      	push	{r7, lr}
 801faee:	b082      	sub	sp, #8
 801faf0:	af00      	add	r7, sp, #0
 801faf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801faf4:	687a      	ldr	r2, [r7, #4]
 801faf6:	23bc      	movs	r3, #188	@ 0xbc
 801faf8:	009b      	lsls	r3, r3, #2
 801fafa:	58d2      	ldr	r2, [r2, r3]
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	21ac      	movs	r1, #172	@ 0xac
 801fb00:	0089      	lsls	r1, r1, #2
 801fb02:	468c      	mov	ip, r1
 801fb04:	4463      	add	r3, ip
 801fb06:	0019      	movs	r1, r3
 801fb08:	0010      	movs	r0, r2
 801fb0a:	f7fe fc1d 	bl	801e348 <USBD_LL_SetupStage>
}
 801fb0e:	46c0      	nop			@ (mov r8, r8)
 801fb10:	46bd      	mov	sp, r7
 801fb12:	b002      	add	sp, #8
 801fb14:	bd80      	pop	{r7, pc}

0801fb16 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fb16:	b590      	push	{r4, r7, lr}
 801fb18:	b083      	sub	sp, #12
 801fb1a:	af00      	add	r7, sp, #0
 801fb1c:	6078      	str	r0, [r7, #4]
 801fb1e:	000a      	movs	r2, r1
 801fb20:	1cfb      	adds	r3, r7, #3
 801fb22:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801fb24:	687a      	ldr	r2, [r7, #4]
 801fb26:	23bc      	movs	r3, #188	@ 0xbc
 801fb28:	009b      	lsls	r3, r3, #2
 801fb2a:	58d4      	ldr	r4, [r2, r3]
 801fb2c:	1cfb      	adds	r3, r7, #3
 801fb2e:	781a      	ldrb	r2, [r3, #0]
 801fb30:	6878      	ldr	r0, [r7, #4]
 801fb32:	23be      	movs	r3, #190	@ 0xbe
 801fb34:	0059      	lsls	r1, r3, #1
 801fb36:	0013      	movs	r3, r2
 801fb38:	009b      	lsls	r3, r3, #2
 801fb3a:	189b      	adds	r3, r3, r2
 801fb3c:	00db      	lsls	r3, r3, #3
 801fb3e:	18c3      	adds	r3, r0, r3
 801fb40:	185b      	adds	r3, r3, r1
 801fb42:	681a      	ldr	r2, [r3, #0]
 801fb44:	1cfb      	adds	r3, r7, #3
 801fb46:	781b      	ldrb	r3, [r3, #0]
 801fb48:	0019      	movs	r1, r3
 801fb4a:	0020      	movs	r0, r4
 801fb4c:	f7fe fc5a 	bl	801e404 <USBD_LL_DataOutStage>
}
 801fb50:	46c0      	nop			@ (mov r8, r8)
 801fb52:	46bd      	mov	sp, r7
 801fb54:	b003      	add	sp, #12
 801fb56:	bd90      	pop	{r4, r7, pc}

0801fb58 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fb58:	b580      	push	{r7, lr}
 801fb5a:	b082      	sub	sp, #8
 801fb5c:	af00      	add	r7, sp, #0
 801fb5e:	6078      	str	r0, [r7, #4]
 801fb60:	000a      	movs	r2, r1
 801fb62:	1cfb      	adds	r3, r7, #3
 801fb64:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801fb66:	687a      	ldr	r2, [r7, #4]
 801fb68:	23bc      	movs	r3, #188	@ 0xbc
 801fb6a:	009b      	lsls	r3, r3, #2
 801fb6c:	58d0      	ldr	r0, [r2, r3]
 801fb6e:	1cfb      	adds	r3, r7, #3
 801fb70:	781a      	ldrb	r2, [r3, #0]
 801fb72:	6879      	ldr	r1, [r7, #4]
 801fb74:	0013      	movs	r3, r2
 801fb76:	009b      	lsls	r3, r3, #2
 801fb78:	189b      	adds	r3, r3, r2
 801fb7a:	00db      	lsls	r3, r3, #3
 801fb7c:	18cb      	adds	r3, r1, r3
 801fb7e:	333c      	adds	r3, #60	@ 0x3c
 801fb80:	681a      	ldr	r2, [r3, #0]
 801fb82:	1cfb      	adds	r3, r7, #3
 801fb84:	781b      	ldrb	r3, [r3, #0]
 801fb86:	0019      	movs	r1, r3
 801fb88:	f7fe fcbe 	bl	801e508 <USBD_LL_DataInStage>
}
 801fb8c:	46c0      	nop			@ (mov r8, r8)
 801fb8e:	46bd      	mov	sp, r7
 801fb90:	b002      	add	sp, #8
 801fb92:	bd80      	pop	{r7, pc}

0801fb94 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fb94:	b580      	push	{r7, lr}
 801fb96:	b082      	sub	sp, #8
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801fb9c:	687a      	ldr	r2, [r7, #4]
 801fb9e:	23bc      	movs	r3, #188	@ 0xbc
 801fba0:	009b      	lsls	r3, r3, #2
 801fba2:	58d3      	ldr	r3, [r2, r3]
 801fba4:	0018      	movs	r0, r3
 801fba6:	f7fe fdf5 	bl	801e794 <USBD_LL_SOF>
}
 801fbaa:	46c0      	nop			@ (mov r8, r8)
 801fbac:	46bd      	mov	sp, r7
 801fbae:	b002      	add	sp, #8
 801fbb0:	bd80      	pop	{r7, pc}

0801fbb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fbb2:	b580      	push	{r7, lr}
 801fbb4:	b084      	sub	sp, #16
 801fbb6:	af00      	add	r7, sp, #0
 801fbb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801fbba:	230f      	movs	r3, #15
 801fbbc:	18fb      	adds	r3, r7, r3
 801fbbe:	2201      	movs	r2, #1
 801fbc0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	689b      	ldr	r3, [r3, #8]
 801fbc6:	2b02      	cmp	r3, #2
 801fbc8:	d001      	beq.n	801fbce <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801fbca:	f7ea fc75 	bl	800a4b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801fbce:	687a      	ldr	r2, [r7, #4]
 801fbd0:	23bc      	movs	r3, #188	@ 0xbc
 801fbd2:	009b      	lsls	r3, r3, #2
 801fbd4:	58d2      	ldr	r2, [r2, r3]
 801fbd6:	230f      	movs	r3, #15
 801fbd8:	18fb      	adds	r3, r7, r3
 801fbda:	781b      	ldrb	r3, [r3, #0]
 801fbdc:	0019      	movs	r1, r3
 801fbde:	0010      	movs	r0, r2
 801fbe0:	f7fe fd97 	bl	801e712 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801fbe4:	687a      	ldr	r2, [r7, #4]
 801fbe6:	23bc      	movs	r3, #188	@ 0xbc
 801fbe8:	009b      	lsls	r3, r3, #2
 801fbea:	58d3      	ldr	r3, [r2, r3]
 801fbec:	0018      	movs	r0, r3
 801fbee:	f7fe fd48 	bl	801e682 <USBD_LL_Reset>
}
 801fbf2:	46c0      	nop			@ (mov r8, r8)
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	b004      	add	sp, #16
 801fbf8:	bd80      	pop	{r7, pc}
	...

0801fbfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fbfc:	b580      	push	{r7, lr}
 801fbfe:	b082      	sub	sp, #8
 801fc00:	af00      	add	r7, sp, #0
 801fc02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801fc04:	687a      	ldr	r2, [r7, #4]
 801fc06:	23bc      	movs	r3, #188	@ 0xbc
 801fc08:	009b      	lsls	r3, r3, #2
 801fc0a:	58d3      	ldr	r3, [r2, r3]
 801fc0c:	0018      	movs	r0, r3
 801fc0e:	f7fe fd91 	bl	801e734 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801fc12:	687b      	ldr	r3, [r7, #4]
 801fc14:	699b      	ldr	r3, [r3, #24]
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d005      	beq.n	801fc26 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801fc1a:	4b05      	ldr	r3, [pc, #20]	@ (801fc30 <HAL_PCD_SuspendCallback+0x34>)
 801fc1c:	691a      	ldr	r2, [r3, #16]
 801fc1e:	4b04      	ldr	r3, [pc, #16]	@ (801fc30 <HAL_PCD_SuspendCallback+0x34>)
 801fc20:	2106      	movs	r1, #6
 801fc22:	430a      	orrs	r2, r1
 801fc24:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801fc26:	46c0      	nop			@ (mov r8, r8)
 801fc28:	46bd      	mov	sp, r7
 801fc2a:	b002      	add	sp, #8
 801fc2c:	bd80      	pop	{r7, pc}
 801fc2e:	46c0      	nop			@ (mov r8, r8)
 801fc30:	e000ed00 	.word	0xe000ed00

0801fc34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fc34:	b580      	push	{r7, lr}
 801fc36:	b082      	sub	sp, #8
 801fc38:	af00      	add	r7, sp, #0
 801fc3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	699b      	ldr	r3, [r3, #24]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d007      	beq.n	801fc54 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801fc44:	4b09      	ldr	r3, [pc, #36]	@ (801fc6c <HAL_PCD_ResumeCallback+0x38>)
 801fc46:	691a      	ldr	r2, [r3, #16]
 801fc48:	4b08      	ldr	r3, [pc, #32]	@ (801fc6c <HAL_PCD_ResumeCallback+0x38>)
 801fc4a:	2106      	movs	r1, #6
 801fc4c:	438a      	bics	r2, r1
 801fc4e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801fc50:	f000 fa44 	bl	80200dc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801fc54:	687a      	ldr	r2, [r7, #4]
 801fc56:	23bc      	movs	r3, #188	@ 0xbc
 801fc58:	009b      	lsls	r3, r3, #2
 801fc5a:	58d3      	ldr	r3, [r2, r3]
 801fc5c:	0018      	movs	r0, r3
 801fc5e:	f7fe fd81 	bl	801e764 <USBD_LL_Resume>
}
 801fc62:	46c0      	nop			@ (mov r8, r8)
 801fc64:	46bd      	mov	sp, r7
 801fc66:	b002      	add	sp, #8
 801fc68:	bd80      	pop	{r7, pc}
 801fc6a:	46c0      	nop			@ (mov r8, r8)
 801fc6c:	e000ed00 	.word	0xe000ed00

0801fc70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801fc70:	b580      	push	{r7, lr}
 801fc72:	b082      	sub	sp, #8
 801fc74:	af00      	add	r7, sp, #0
 801fc76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801fc78:	4a2d      	ldr	r2, [pc, #180]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fc7a:	23bc      	movs	r3, #188	@ 0xbc
 801fc7c:	009b      	lsls	r3, r3, #2
 801fc7e:	6879      	ldr	r1, [r7, #4]
 801fc80:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801fc82:	687a      	ldr	r2, [r7, #4]
 801fc84:	23b0      	movs	r3, #176	@ 0xb0
 801fc86:	009b      	lsls	r3, r3, #2
 801fc88:	4929      	ldr	r1, [pc, #164]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fc8a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801fc8c:	4b28      	ldr	r3, [pc, #160]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fc8e:	4a29      	ldr	r2, [pc, #164]	@ (801fd34 <USBD_LL_Init+0xc4>)
 801fc90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801fc92:	4b27      	ldr	r3, [pc, #156]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fc94:	2208      	movs	r2, #8
 801fc96:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801fc98:	4b25      	ldr	r3, [pc, #148]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fc9a:	2202      	movs	r2, #2
 801fc9c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801fc9e:	4b24      	ldr	r3, [pc, #144]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fca0:	2202      	movs	r2, #2
 801fca2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801fca4:	4b22      	ldr	r3, [pc, #136]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fca6:	2200      	movs	r2, #0
 801fca8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801fcaa:	4b21      	ldr	r3, [pc, #132]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fcac:	2200      	movs	r2, #0
 801fcae:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801fcb0:	4b1f      	ldr	r3, [pc, #124]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fcb2:	2200      	movs	r2, #0
 801fcb4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801fcb6:	4b1e      	ldr	r3, [pc, #120]	@ (801fd30 <USBD_LL_Init+0xc0>)
 801fcb8:	0018      	movs	r0, r3
 801fcba:	f7f5 ff95 	bl	8015be8 <HAL_PCD_Init>
 801fcbe:	1e03      	subs	r3, r0, #0
 801fcc0:	d001      	beq.n	801fcc6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801fcc2:	f7ea fbf9 	bl	800a4b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801fcc6:	687a      	ldr	r2, [r7, #4]
 801fcc8:	23b0      	movs	r3, #176	@ 0xb0
 801fcca:	009b      	lsls	r3, r3, #2
 801fccc:	58d0      	ldr	r0, [r2, r3]
 801fcce:	2318      	movs	r3, #24
 801fcd0:	2200      	movs	r2, #0
 801fcd2:	2100      	movs	r1, #0
 801fcd4:	f7f7 fd56 	bl	8017784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801fcd8:	687a      	ldr	r2, [r7, #4]
 801fcda:	23b0      	movs	r3, #176	@ 0xb0
 801fcdc:	009b      	lsls	r3, r3, #2
 801fcde:	58d0      	ldr	r0, [r2, r3]
 801fce0:	2358      	movs	r3, #88	@ 0x58
 801fce2:	2200      	movs	r2, #0
 801fce4:	2180      	movs	r1, #128	@ 0x80
 801fce6:	f7f7 fd4d 	bl	8017784 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801fcea:	687a      	ldr	r2, [r7, #4]
 801fcec:	23b0      	movs	r3, #176	@ 0xb0
 801fcee:	009b      	lsls	r3, r3, #2
 801fcf0:	58d0      	ldr	r0, [r2, r3]
 801fcf2:	23c0      	movs	r3, #192	@ 0xc0
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	2181      	movs	r1, #129	@ 0x81
 801fcf8:	f7f7 fd44 	bl	8017784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801fcfc:	687a      	ldr	r2, [r7, #4]
 801fcfe:	23b0      	movs	r3, #176	@ 0xb0
 801fd00:	009b      	lsls	r3, r3, #2
 801fd02:	58d0      	ldr	r0, [r2, r3]
 801fd04:	2388      	movs	r3, #136	@ 0x88
 801fd06:	005b      	lsls	r3, r3, #1
 801fd08:	2200      	movs	r2, #0
 801fd0a:	2101      	movs	r1, #1
 801fd0c:	f7f7 fd3a 	bl	8017784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801fd10:	687a      	ldr	r2, [r7, #4]
 801fd12:	23b0      	movs	r3, #176	@ 0xb0
 801fd14:	009b      	lsls	r3, r3, #2
 801fd16:	58d0      	ldr	r0, [r2, r3]
 801fd18:	2380      	movs	r3, #128	@ 0x80
 801fd1a:	005b      	lsls	r3, r3, #1
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	2182      	movs	r1, #130	@ 0x82
 801fd20:	f7f7 fd30 	bl	8017784 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801fd24:	2300      	movs	r3, #0
}
 801fd26:	0018      	movs	r0, r3
 801fd28:	46bd      	mov	sp, r7
 801fd2a:	b002      	add	sp, #8
 801fd2c:	bd80      	pop	{r7, pc}
 801fd2e:	46c0      	nop			@ (mov r8, r8)
 801fd30:	20002f3c 	.word	0x20002f3c
 801fd34:	40005c00 	.word	0x40005c00

0801fd38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd3a:	b085      	sub	sp, #20
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fd40:	210f      	movs	r1, #15
 801fd42:	187b      	adds	r3, r7, r1
 801fd44:	2200      	movs	r2, #0
 801fd46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fd48:	260e      	movs	r6, #14
 801fd4a:	19bb      	adds	r3, r7, r6
 801fd4c:	2200      	movs	r2, #0
 801fd4e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801fd50:	687a      	ldr	r2, [r7, #4]
 801fd52:	23b0      	movs	r3, #176	@ 0xb0
 801fd54:	009b      	lsls	r3, r3, #2
 801fd56:	58d3      	ldr	r3, [r2, r3]
 801fd58:	000d      	movs	r5, r1
 801fd5a:	187c      	adds	r4, r7, r1
 801fd5c:	0018      	movs	r0, r3
 801fd5e:	f7f6 f843 	bl	8015de8 <HAL_PCD_Start>
 801fd62:	0003      	movs	r3, r0
 801fd64:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fd66:	19bc      	adds	r4, r7, r6
 801fd68:	197b      	adds	r3, r7, r5
 801fd6a:	781b      	ldrb	r3, [r3, #0]
 801fd6c:	0018      	movs	r0, r3
 801fd6e:	f000 f9bc 	bl	80200ea <USBD_Get_USB_Status>
 801fd72:	0003      	movs	r3, r0
 801fd74:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fd76:	19bb      	adds	r3, r7, r6
 801fd78:	781b      	ldrb	r3, [r3, #0]
}
 801fd7a:	0018      	movs	r0, r3
 801fd7c:	46bd      	mov	sp, r7
 801fd7e:	b005      	add	sp, #20
 801fd80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801fd82:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd84:	b085      	sub	sp, #20
 801fd86:	af00      	add	r7, sp, #0
 801fd88:	6078      	str	r0, [r7, #4]
 801fd8a:	000c      	movs	r4, r1
 801fd8c:	0010      	movs	r0, r2
 801fd8e:	0019      	movs	r1, r3
 801fd90:	1cfb      	adds	r3, r7, #3
 801fd92:	1c22      	adds	r2, r4, #0
 801fd94:	701a      	strb	r2, [r3, #0]
 801fd96:	1cbb      	adds	r3, r7, #2
 801fd98:	1c02      	adds	r2, r0, #0
 801fd9a:	701a      	strb	r2, [r3, #0]
 801fd9c:	003b      	movs	r3, r7
 801fd9e:	1c0a      	adds	r2, r1, #0
 801fda0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fda2:	260f      	movs	r6, #15
 801fda4:	19bb      	adds	r3, r7, r6
 801fda6:	2200      	movs	r2, #0
 801fda8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fdaa:	250e      	movs	r5, #14
 801fdac:	197b      	adds	r3, r7, r5
 801fdae:	2200      	movs	r2, #0
 801fdb0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801fdb2:	687a      	ldr	r2, [r7, #4]
 801fdb4:	23b0      	movs	r3, #176	@ 0xb0
 801fdb6:	009b      	lsls	r3, r3, #2
 801fdb8:	58d0      	ldr	r0, [r2, r3]
 801fdba:	19bc      	adds	r4, r7, r6
 801fdbc:	1cbb      	adds	r3, r7, #2
 801fdbe:	781d      	ldrb	r5, [r3, #0]
 801fdc0:	003b      	movs	r3, r7
 801fdc2:	881a      	ldrh	r2, [r3, #0]
 801fdc4:	1cfb      	adds	r3, r7, #3
 801fdc6:	7819      	ldrb	r1, [r3, #0]
 801fdc8:	002b      	movs	r3, r5
 801fdca:	f7f6 f9a2 	bl	8016112 <HAL_PCD_EP_Open>
 801fdce:	0003      	movs	r3, r0
 801fdd0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fdd2:	250e      	movs	r5, #14
 801fdd4:	197c      	adds	r4, r7, r5
 801fdd6:	19bb      	adds	r3, r7, r6
 801fdd8:	781b      	ldrb	r3, [r3, #0]
 801fdda:	0018      	movs	r0, r3
 801fddc:	f000 f985 	bl	80200ea <USBD_Get_USB_Status>
 801fde0:	0003      	movs	r3, r0
 801fde2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fde4:	197b      	adds	r3, r7, r5
 801fde6:	781b      	ldrb	r3, [r3, #0]
}
 801fde8:	0018      	movs	r0, r3
 801fdea:	46bd      	mov	sp, r7
 801fdec:	b005      	add	sp, #20
 801fdee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fdf0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fdf2:	b085      	sub	sp, #20
 801fdf4:	af00      	add	r7, sp, #0
 801fdf6:	6078      	str	r0, [r7, #4]
 801fdf8:	000a      	movs	r2, r1
 801fdfa:	1cfb      	adds	r3, r7, #3
 801fdfc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fdfe:	210f      	movs	r1, #15
 801fe00:	187b      	adds	r3, r7, r1
 801fe02:	2200      	movs	r2, #0
 801fe04:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fe06:	260e      	movs	r6, #14
 801fe08:	19bb      	adds	r3, r7, r6
 801fe0a:	2200      	movs	r2, #0
 801fe0c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801fe0e:	687a      	ldr	r2, [r7, #4]
 801fe10:	23b0      	movs	r3, #176	@ 0xb0
 801fe12:	009b      	lsls	r3, r3, #2
 801fe14:	58d2      	ldr	r2, [r2, r3]
 801fe16:	000d      	movs	r5, r1
 801fe18:	187c      	adds	r4, r7, r1
 801fe1a:	1cfb      	adds	r3, r7, #3
 801fe1c:	781b      	ldrb	r3, [r3, #0]
 801fe1e:	0019      	movs	r1, r3
 801fe20:	0010      	movs	r0, r2
 801fe22:	f7f6 f9e5 	bl	80161f0 <HAL_PCD_EP_Close>
 801fe26:	0003      	movs	r3, r0
 801fe28:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fe2a:	19bc      	adds	r4, r7, r6
 801fe2c:	197b      	adds	r3, r7, r5
 801fe2e:	781b      	ldrb	r3, [r3, #0]
 801fe30:	0018      	movs	r0, r3
 801fe32:	f000 f95a 	bl	80200ea <USBD_Get_USB_Status>
 801fe36:	0003      	movs	r3, r0
 801fe38:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fe3a:	19bb      	adds	r3, r7, r6
 801fe3c:	781b      	ldrb	r3, [r3, #0]
}
 801fe3e:	0018      	movs	r0, r3
 801fe40:	46bd      	mov	sp, r7
 801fe42:	b005      	add	sp, #20
 801fe44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fe46 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fe46:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe48:	b085      	sub	sp, #20
 801fe4a:	af00      	add	r7, sp, #0
 801fe4c:	6078      	str	r0, [r7, #4]
 801fe4e:	000a      	movs	r2, r1
 801fe50:	1cfb      	adds	r3, r7, #3
 801fe52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801fe54:	210f      	movs	r1, #15
 801fe56:	187b      	adds	r3, r7, r1
 801fe58:	2200      	movs	r2, #0
 801fe5a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801fe5c:	260e      	movs	r6, #14
 801fe5e:	19bb      	adds	r3, r7, r6
 801fe60:	2200      	movs	r2, #0
 801fe62:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801fe64:	687a      	ldr	r2, [r7, #4]
 801fe66:	23b0      	movs	r3, #176	@ 0xb0
 801fe68:	009b      	lsls	r3, r3, #2
 801fe6a:	58d2      	ldr	r2, [r2, r3]
 801fe6c:	000d      	movs	r5, r1
 801fe6e:	187c      	adds	r4, r7, r1
 801fe70:	1cfb      	adds	r3, r7, #3
 801fe72:	781b      	ldrb	r3, [r3, #0]
 801fe74:	0019      	movs	r1, r3
 801fe76:	0010      	movs	r0, r2
 801fe78:	f7f6 fa97 	bl	80163aa <HAL_PCD_EP_SetStall>
 801fe7c:	0003      	movs	r3, r0
 801fe7e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fe80:	19bc      	adds	r4, r7, r6
 801fe82:	197b      	adds	r3, r7, r5
 801fe84:	781b      	ldrb	r3, [r3, #0]
 801fe86:	0018      	movs	r0, r3
 801fe88:	f000 f92f 	bl	80200ea <USBD_Get_USB_Status>
 801fe8c:	0003      	movs	r3, r0
 801fe8e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fe90:	19bb      	adds	r3, r7, r6
 801fe92:	781b      	ldrb	r3, [r3, #0]
}
 801fe94:	0018      	movs	r0, r3
 801fe96:	46bd      	mov	sp, r7
 801fe98:	b005      	add	sp, #20
 801fe9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fe9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fe9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe9e:	b085      	sub	sp, #20
 801fea0:	af00      	add	r7, sp, #0
 801fea2:	6078      	str	r0, [r7, #4]
 801fea4:	000a      	movs	r2, r1
 801fea6:	1cfb      	adds	r3, r7, #3
 801fea8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801feaa:	210f      	movs	r1, #15
 801feac:	187b      	adds	r3, r7, r1
 801feae:	2200      	movs	r2, #0
 801feb0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801feb2:	260e      	movs	r6, #14
 801feb4:	19bb      	adds	r3, r7, r6
 801feb6:	2200      	movs	r2, #0
 801feb8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801feba:	687a      	ldr	r2, [r7, #4]
 801febc:	23b0      	movs	r3, #176	@ 0xb0
 801febe:	009b      	lsls	r3, r3, #2
 801fec0:	58d2      	ldr	r2, [r2, r3]
 801fec2:	000d      	movs	r5, r1
 801fec4:	187c      	adds	r4, r7, r1
 801fec6:	1cfb      	adds	r3, r7, #3
 801fec8:	781b      	ldrb	r3, [r3, #0]
 801feca:	0019      	movs	r1, r3
 801fecc:	0010      	movs	r0, r2
 801fece:	f7f6 fac8 	bl	8016462 <HAL_PCD_EP_ClrStall>
 801fed2:	0003      	movs	r3, r0
 801fed4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fed6:	19bc      	adds	r4, r7, r6
 801fed8:	197b      	adds	r3, r7, r5
 801feda:	781b      	ldrb	r3, [r3, #0]
 801fedc:	0018      	movs	r0, r3
 801fede:	f000 f904 	bl	80200ea <USBD_Get_USB_Status>
 801fee2:	0003      	movs	r3, r0
 801fee4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801fee6:	19bb      	adds	r3, r7, r6
 801fee8:	781b      	ldrb	r3, [r3, #0]
}
 801feea:	0018      	movs	r0, r3
 801feec:	46bd      	mov	sp, r7
 801feee:	b005      	add	sp, #20
 801fef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fef2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801fef2:	b580      	push	{r7, lr}
 801fef4:	b084      	sub	sp, #16
 801fef6:	af00      	add	r7, sp, #0
 801fef8:	6078      	str	r0, [r7, #4]
 801fefa:	000a      	movs	r2, r1
 801fefc:	1cfb      	adds	r3, r7, #3
 801fefe:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ff00:	687a      	ldr	r2, [r7, #4]
 801ff02:	23b0      	movs	r3, #176	@ 0xb0
 801ff04:	009b      	lsls	r3, r3, #2
 801ff06:	58d3      	ldr	r3, [r2, r3]
 801ff08:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ff0a:	1cfb      	adds	r3, r7, #3
 801ff0c:	781b      	ldrb	r3, [r3, #0]
 801ff0e:	b25b      	sxtb	r3, r3
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	da0d      	bge.n	801ff30 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ff14:	1cfb      	adds	r3, r7, #3
 801ff16:	781b      	ldrb	r3, [r3, #0]
 801ff18:	227f      	movs	r2, #127	@ 0x7f
 801ff1a:	4013      	ands	r3, r2
 801ff1c:	68f9      	ldr	r1, [r7, #12]
 801ff1e:	1c5a      	adds	r2, r3, #1
 801ff20:	0013      	movs	r3, r2
 801ff22:	009b      	lsls	r3, r3, #2
 801ff24:	189b      	adds	r3, r3, r2
 801ff26:	00db      	lsls	r3, r3, #3
 801ff28:	18cb      	adds	r3, r1, r3
 801ff2a:	3302      	adds	r3, #2
 801ff2c:	781b      	ldrb	r3, [r3, #0]
 801ff2e:	e00d      	b.n	801ff4c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ff30:	1cfb      	adds	r3, r7, #3
 801ff32:	781b      	ldrb	r3, [r3, #0]
 801ff34:	227f      	movs	r2, #127	@ 0x7f
 801ff36:	401a      	ands	r2, r3
 801ff38:	68f8      	ldr	r0, [r7, #12]
 801ff3a:	23b5      	movs	r3, #181	@ 0xb5
 801ff3c:	0059      	lsls	r1, r3, #1
 801ff3e:	0013      	movs	r3, r2
 801ff40:	009b      	lsls	r3, r3, #2
 801ff42:	189b      	adds	r3, r3, r2
 801ff44:	00db      	lsls	r3, r3, #3
 801ff46:	18c3      	adds	r3, r0, r3
 801ff48:	185b      	adds	r3, r3, r1
 801ff4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ff4c:	0018      	movs	r0, r3
 801ff4e:	46bd      	mov	sp, r7
 801ff50:	b004      	add	sp, #16
 801ff52:	bd80      	pop	{r7, pc}

0801ff54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ff54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff56:	b085      	sub	sp, #20
 801ff58:	af00      	add	r7, sp, #0
 801ff5a:	6078      	str	r0, [r7, #4]
 801ff5c:	000a      	movs	r2, r1
 801ff5e:	1cfb      	adds	r3, r7, #3
 801ff60:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ff62:	210f      	movs	r1, #15
 801ff64:	187b      	adds	r3, r7, r1
 801ff66:	2200      	movs	r2, #0
 801ff68:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ff6a:	260e      	movs	r6, #14
 801ff6c:	19bb      	adds	r3, r7, r6
 801ff6e:	2200      	movs	r2, #0
 801ff70:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ff72:	687a      	ldr	r2, [r7, #4]
 801ff74:	23b0      	movs	r3, #176	@ 0xb0
 801ff76:	009b      	lsls	r3, r3, #2
 801ff78:	58d2      	ldr	r2, [r2, r3]
 801ff7a:	000d      	movs	r5, r1
 801ff7c:	187c      	adds	r4, r7, r1
 801ff7e:	1cfb      	adds	r3, r7, #3
 801ff80:	781b      	ldrb	r3, [r3, #0]
 801ff82:	0019      	movs	r1, r3
 801ff84:	0010      	movs	r0, r2
 801ff86:	f7f6 f899 	bl	80160bc <HAL_PCD_SetAddress>
 801ff8a:	0003      	movs	r3, r0
 801ff8c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ff8e:	19bc      	adds	r4, r7, r6
 801ff90:	197b      	adds	r3, r7, r5
 801ff92:	781b      	ldrb	r3, [r3, #0]
 801ff94:	0018      	movs	r0, r3
 801ff96:	f000 f8a8 	bl	80200ea <USBD_Get_USB_Status>
 801ff9a:	0003      	movs	r3, r0
 801ff9c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ff9e:	19bb      	adds	r3, r7, r6
 801ffa0:	781b      	ldrb	r3, [r3, #0]
}
 801ffa2:	0018      	movs	r0, r3
 801ffa4:	46bd      	mov	sp, r7
 801ffa6:	b005      	add	sp, #20
 801ffa8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ffaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801ffaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffac:	b087      	sub	sp, #28
 801ffae:	af00      	add	r7, sp, #0
 801ffb0:	60f8      	str	r0, [r7, #12]
 801ffb2:	0008      	movs	r0, r1
 801ffb4:	607a      	str	r2, [r7, #4]
 801ffb6:	0019      	movs	r1, r3
 801ffb8:	230b      	movs	r3, #11
 801ffba:	18fb      	adds	r3, r7, r3
 801ffbc:	1c02      	adds	r2, r0, #0
 801ffbe:	701a      	strb	r2, [r3, #0]
 801ffc0:	2408      	movs	r4, #8
 801ffc2:	193b      	adds	r3, r7, r4
 801ffc4:	1c0a      	adds	r2, r1, #0
 801ffc6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ffc8:	2117      	movs	r1, #23
 801ffca:	187b      	adds	r3, r7, r1
 801ffcc:	2200      	movs	r2, #0
 801ffce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ffd0:	2516      	movs	r5, #22
 801ffd2:	197b      	adds	r3, r7, r5
 801ffd4:	2200      	movs	r2, #0
 801ffd6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ffd8:	68fa      	ldr	r2, [r7, #12]
 801ffda:	23b0      	movs	r3, #176	@ 0xb0
 801ffdc:	009b      	lsls	r3, r3, #2
 801ffde:	58d0      	ldr	r0, [r2, r3]
 801ffe0:	193b      	adds	r3, r7, r4
 801ffe2:	881d      	ldrh	r5, [r3, #0]
 801ffe4:	000e      	movs	r6, r1
 801ffe6:	187c      	adds	r4, r7, r1
 801ffe8:	687a      	ldr	r2, [r7, #4]
 801ffea:	230b      	movs	r3, #11
 801ffec:	18fb      	adds	r3, r7, r3
 801ffee:	7819      	ldrb	r1, [r3, #0]
 801fff0:	002b      	movs	r3, r5
 801fff2:	f7f6 f99e 	bl	8016332 <HAL_PCD_EP_Transmit>
 801fff6:	0003      	movs	r3, r0
 801fff8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801fffa:	2516      	movs	r5, #22
 801fffc:	197c      	adds	r4, r7, r5
 801fffe:	19bb      	adds	r3, r7, r6
 8020000:	781b      	ldrb	r3, [r3, #0]
 8020002:	0018      	movs	r0, r3
 8020004:	f000 f871 	bl	80200ea <USBD_Get_USB_Status>
 8020008:	0003      	movs	r3, r0
 802000a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802000c:	197b      	adds	r3, r7, r5
 802000e:	781b      	ldrb	r3, [r3, #0]
}
 8020010:	0018      	movs	r0, r3
 8020012:	46bd      	mov	sp, r7
 8020014:	b007      	add	sp, #28
 8020016:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020018 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020018:	b5f0      	push	{r4, r5, r6, r7, lr}
 802001a:	b087      	sub	sp, #28
 802001c:	af00      	add	r7, sp, #0
 802001e:	60f8      	str	r0, [r7, #12]
 8020020:	0008      	movs	r0, r1
 8020022:	607a      	str	r2, [r7, #4]
 8020024:	0019      	movs	r1, r3
 8020026:	230b      	movs	r3, #11
 8020028:	18fb      	adds	r3, r7, r3
 802002a:	1c02      	adds	r2, r0, #0
 802002c:	701a      	strb	r2, [r3, #0]
 802002e:	2408      	movs	r4, #8
 8020030:	193b      	adds	r3, r7, r4
 8020032:	1c0a      	adds	r2, r1, #0
 8020034:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020036:	2117      	movs	r1, #23
 8020038:	187b      	adds	r3, r7, r1
 802003a:	2200      	movs	r2, #0
 802003c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802003e:	2516      	movs	r5, #22
 8020040:	197b      	adds	r3, r7, r5
 8020042:	2200      	movs	r2, #0
 8020044:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020046:	68fa      	ldr	r2, [r7, #12]
 8020048:	23b0      	movs	r3, #176	@ 0xb0
 802004a:	009b      	lsls	r3, r3, #2
 802004c:	58d0      	ldr	r0, [r2, r3]
 802004e:	193b      	adds	r3, r7, r4
 8020050:	881d      	ldrh	r5, [r3, #0]
 8020052:	000e      	movs	r6, r1
 8020054:	187c      	adds	r4, r7, r1
 8020056:	687a      	ldr	r2, [r7, #4]
 8020058:	230b      	movs	r3, #11
 802005a:	18fb      	adds	r3, r7, r3
 802005c:	7819      	ldrb	r1, [r3, #0]
 802005e:	002b      	movs	r3, r5
 8020060:	f7f6 f917 	bl	8016292 <HAL_PCD_EP_Receive>
 8020064:	0003      	movs	r3, r0
 8020066:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020068:	2516      	movs	r5, #22
 802006a:	197c      	adds	r4, r7, r5
 802006c:	19bb      	adds	r3, r7, r6
 802006e:	781b      	ldrb	r3, [r3, #0]
 8020070:	0018      	movs	r0, r3
 8020072:	f000 f83a 	bl	80200ea <USBD_Get_USB_Status>
 8020076:	0003      	movs	r3, r0
 8020078:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802007a:	197b      	adds	r3, r7, r5
 802007c:	781b      	ldrb	r3, [r3, #0]
}
 802007e:	0018      	movs	r0, r3
 8020080:	46bd      	mov	sp, r7
 8020082:	b007      	add	sp, #28
 8020084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020086 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020086:	b580      	push	{r7, lr}
 8020088:	b082      	sub	sp, #8
 802008a:	af00      	add	r7, sp, #0
 802008c:	6078      	str	r0, [r7, #4]
 802008e:	000a      	movs	r2, r1
 8020090:	1cfb      	adds	r3, r7, #3
 8020092:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020094:	687a      	ldr	r2, [r7, #4]
 8020096:	23b0      	movs	r3, #176	@ 0xb0
 8020098:	009b      	lsls	r3, r3, #2
 802009a:	58d2      	ldr	r2, [r2, r3]
 802009c:	1cfb      	adds	r3, r7, #3
 802009e:	781b      	ldrb	r3, [r3, #0]
 80200a0:	0019      	movs	r1, r3
 80200a2:	0010      	movs	r0, r2
 80200a4:	f7f6 f92c 	bl	8016300 <HAL_PCD_EP_GetRxCount>
 80200a8:	0003      	movs	r3, r0
}
 80200aa:	0018      	movs	r0, r3
 80200ac:	46bd      	mov	sp, r7
 80200ae:	b002      	add	sp, #8
 80200b0:	bd80      	pop	{r7, pc}
	...

080200b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80200b4:	b580      	push	{r7, lr}
 80200b6:	b082      	sub	sp, #8
 80200b8:	af00      	add	r7, sp, #0
 80200ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80200bc:	4b02      	ldr	r3, [pc, #8]	@ (80200c8 <USBD_static_malloc+0x14>)
}
 80200be:	0018      	movs	r0, r3
 80200c0:	46bd      	mov	sp, r7
 80200c2:	b002      	add	sp, #8
 80200c4:	bd80      	pop	{r7, pc}
 80200c6:	46c0      	nop			@ (mov r8, r8)
 80200c8:	20003230 	.word	0x20003230

080200cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80200cc:	b580      	push	{r7, lr}
 80200ce:	b082      	sub	sp, #8
 80200d0:	af00      	add	r7, sp, #0
 80200d2:	6078      	str	r0, [r7, #4]

}
 80200d4:	46c0      	nop			@ (mov r8, r8)
 80200d6:	46bd      	mov	sp, r7
 80200d8:	b002      	add	sp, #8
 80200da:	bd80      	pop	{r7, pc}

080200dc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80200dc:	b580      	push	{r7, lr}
 80200de:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80200e0:	f7ea f89a 	bl	800a218 <SystemClock_Config>
}
 80200e4:	46c0      	nop			@ (mov r8, r8)
 80200e6:	46bd      	mov	sp, r7
 80200e8:	bd80      	pop	{r7, pc}

080200ea <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80200ea:	b580      	push	{r7, lr}
 80200ec:	b084      	sub	sp, #16
 80200ee:	af00      	add	r7, sp, #0
 80200f0:	0002      	movs	r2, r0
 80200f2:	1dfb      	adds	r3, r7, #7
 80200f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80200f6:	230f      	movs	r3, #15
 80200f8:	18fb      	adds	r3, r7, r3
 80200fa:	2200      	movs	r2, #0
 80200fc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80200fe:	1dfb      	adds	r3, r7, #7
 8020100:	781b      	ldrb	r3, [r3, #0]
 8020102:	2b03      	cmp	r3, #3
 8020104:	d017      	beq.n	8020136 <USBD_Get_USB_Status+0x4c>
 8020106:	dc1b      	bgt.n	8020140 <USBD_Get_USB_Status+0x56>
 8020108:	2b02      	cmp	r3, #2
 802010a:	d00f      	beq.n	802012c <USBD_Get_USB_Status+0x42>
 802010c:	dc18      	bgt.n	8020140 <USBD_Get_USB_Status+0x56>
 802010e:	2b00      	cmp	r3, #0
 8020110:	d002      	beq.n	8020118 <USBD_Get_USB_Status+0x2e>
 8020112:	2b01      	cmp	r3, #1
 8020114:	d005      	beq.n	8020122 <USBD_Get_USB_Status+0x38>
 8020116:	e013      	b.n	8020140 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020118:	230f      	movs	r3, #15
 802011a:	18fb      	adds	r3, r7, r3
 802011c:	2200      	movs	r2, #0
 802011e:	701a      	strb	r2, [r3, #0]
    break;
 8020120:	e013      	b.n	802014a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020122:	230f      	movs	r3, #15
 8020124:	18fb      	adds	r3, r7, r3
 8020126:	2202      	movs	r2, #2
 8020128:	701a      	strb	r2, [r3, #0]
    break;
 802012a:	e00e      	b.n	802014a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 802012c:	230f      	movs	r3, #15
 802012e:	18fb      	adds	r3, r7, r3
 8020130:	2201      	movs	r2, #1
 8020132:	701a      	strb	r2, [r3, #0]
    break;
 8020134:	e009      	b.n	802014a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8020136:	230f      	movs	r3, #15
 8020138:	18fb      	adds	r3, r7, r3
 802013a:	2202      	movs	r2, #2
 802013c:	701a      	strb	r2, [r3, #0]
    break;
 802013e:	e004      	b.n	802014a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8020140:	230f      	movs	r3, #15
 8020142:	18fb      	adds	r3, r7, r3
 8020144:	2202      	movs	r2, #2
 8020146:	701a      	strb	r2, [r3, #0]
    break;
 8020148:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 802014a:	230f      	movs	r3, #15
 802014c:	18fb      	adds	r3, r7, r3
 802014e:	781b      	ldrb	r3, [r3, #0]
}
 8020150:	0018      	movs	r0, r3
 8020152:	46bd      	mov	sp, r7
 8020154:	b004      	add	sp, #16
 8020156:	bd80      	pop	{r7, pc}

08020158 <arm_cfft_radix4by2_q31>:
 8020158:	b5f0      	push	{r4, r5, r6, r7, lr}
 802015a:	465f      	mov	r7, fp
 802015c:	4656      	mov	r6, sl
 802015e:	464d      	mov	r5, r9
 8020160:	4644      	mov	r4, r8
 8020162:	000b      	movs	r3, r1
 8020164:	b4f0      	push	{r4, r5, r6, r7}
 8020166:	085b      	lsrs	r3, r3, #1
 8020168:	b08f      	sub	sp, #60	@ 0x3c
 802016a:	910a      	str	r1, [sp, #40]	@ 0x28
 802016c:	0007      	movs	r7, r0
 802016e:	9009      	str	r0, [sp, #36]	@ 0x24
 8020170:	0011      	movs	r1, r2
 8020172:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020174:	930c      	str	r3, [sp, #48]	@ 0x30
 8020176:	2b00      	cmp	r3, #0
 8020178:	d100      	bne.n	802017c <arm_cfft_radix4by2_q31+0x24>
 802017a:	e0a0      	b.n	80202be <arm_cfft_radix4by2_q31+0x166>
 802017c:	0002      	movs	r2, r0
 802017e:	00db      	lsls	r3, r3, #3
 8020180:	3204      	adds	r2, #4
 8020182:	4691      	mov	r9, r2
 8020184:	4698      	mov	r8, r3
 8020186:	000a      	movs	r2, r1
 8020188:	464e      	mov	r6, r9
 802018a:	4442      	add	r2, r8
 802018c:	4699      	mov	r9, r3
 802018e:	4688      	mov	r8, r1
 8020190:	9208      	str	r2, [sp, #32]
 8020192:	900d      	str	r0, [sp, #52]	@ 0x34
 8020194:	4643      	mov	r3, r8
 8020196:	681b      	ldr	r3, [r3, #0]
 8020198:	469b      	mov	fp, r3
 802019a:	4643      	mov	r3, r8
 802019c:	685b      	ldr	r3, [r3, #4]
 802019e:	469a      	mov	sl, r3
 80201a0:	683b      	ldr	r3, [r7, #0]
 80201a2:	109c      	asrs	r4, r3, #2
 80201a4:	464b      	mov	r3, r9
 80201a6:	58fb      	ldr	r3, [r7, r3]
 80201a8:	109a      	asrs	r2, r3, #2
 80201aa:	18a3      	adds	r3, r4, r2
 80201ac:	603b      	str	r3, [r7, #0]
 80201ae:	6833      	ldr	r3, [r6, #0]
 80201b0:	1aa4      	subs	r4, r4, r2
 80201b2:	109d      	asrs	r5, r3, #2
 80201b4:	464b      	mov	r3, r9
 80201b6:	58f3      	ldr	r3, [r6, r3]
 80201b8:	17e2      	asrs	r2, r4, #31
 80201ba:	109b      	asrs	r3, r3, #2
 80201bc:	18e9      	adds	r1, r5, r3
 80201be:	6031      	str	r1, [r6, #0]
 80201c0:	0011      	movs	r1, r2
 80201c2:	465a      	mov	r2, fp
 80201c4:	17d2      	asrs	r2, r2, #31
 80201c6:	0010      	movs	r0, r2
 80201c8:	4652      	mov	r2, sl
 80201ca:	1aed      	subs	r5, r5, r3
 80201cc:	17eb      	asrs	r3, r5, #31
 80201ce:	17d2      	asrs	r2, r2, #31
 80201d0:	9307      	str	r3, [sp, #28]
 80201d2:	9204      	str	r2, [sp, #16]
 80201d4:	0003      	movs	r3, r0
 80201d6:	465a      	mov	r2, fp
 80201d8:	9006      	str	r0, [sp, #24]
 80201da:	0020      	movs	r0, r4
 80201dc:	9105      	str	r1, [sp, #20]
 80201de:	f7e0 f9ef 	bl	80005c0 <__aeabi_lmul>
 80201e2:	2280      	movs	r2, #128	@ 0x80
 80201e4:	2300      	movs	r3, #0
 80201e6:	0612      	lsls	r2, r2, #24
 80201e8:	1880      	adds	r0, r0, r2
 80201ea:	4159      	adcs	r1, r3
 80201ec:	2300      	movs	r3, #0
 80201ee:	9101      	str	r1, [sp, #4]
 80201f0:	9300      	str	r3, [sp, #0]
 80201f2:	4652      	mov	r2, sl
 80201f4:	9b04      	ldr	r3, [sp, #16]
 80201f6:	0028      	movs	r0, r5
 80201f8:	17e9      	asrs	r1, r5, #31
 80201fa:	f7e0 f9e1 	bl	80005c0 <__aeabi_lmul>
 80201fe:	9a00      	ldr	r2, [sp, #0]
 8020200:	9b01      	ldr	r3, [sp, #4]
 8020202:	1880      	adds	r0, r0, r2
 8020204:	4159      	adcs	r1, r3
 8020206:	2280      	movs	r2, #128	@ 0x80
 8020208:	2300      	movs	r3, #0
 802020a:	0612      	lsls	r2, r2, #24
 802020c:	1880      	adds	r0, r0, r2
 802020e:	4159      	adcs	r1, r3
 8020210:	464a      	mov	r2, r9
 8020212:	004b      	lsls	r3, r1, #1
 8020214:	50bb      	str	r3, [r7, r2]
 8020216:	4658      	mov	r0, fp
 8020218:	002a      	movs	r2, r5
 802021a:	9b07      	ldr	r3, [sp, #28]
 802021c:	9906      	ldr	r1, [sp, #24]
 802021e:	f7e0 f9cf 	bl	80005c0 <__aeabi_lmul>
 8020222:	2280      	movs	r2, #128	@ 0x80
 8020224:	2300      	movs	r3, #0
 8020226:	0612      	lsls	r2, r2, #24
 8020228:	1880      	adds	r0, r0, r2
 802022a:	4159      	adcs	r1, r3
 802022c:	2000      	movs	r0, #0
 802022e:	9103      	str	r1, [sp, #12]
 8020230:	9002      	str	r0, [sp, #8]
 8020232:	4652      	mov	r2, sl
 8020234:	9b04      	ldr	r3, [sp, #16]
 8020236:	0020      	movs	r0, r4
 8020238:	9905      	ldr	r1, [sp, #20]
 802023a:	f7e0 f9c1 	bl	80005c0 <__aeabi_lmul>
 802023e:	9a02      	ldr	r2, [sp, #8]
 8020240:	9b03      	ldr	r3, [sp, #12]
 8020242:	1a12      	subs	r2, r2, r0
 8020244:	418b      	sbcs	r3, r1
 8020246:	2080      	movs	r0, #128	@ 0x80
 8020248:	2100      	movs	r1, #0
 802024a:	0600      	lsls	r0, r0, #24
 802024c:	1812      	adds	r2, r2, r0
 802024e:	414b      	adcs	r3, r1
 8020250:	464a      	mov	r2, r9
 8020252:	005b      	lsls	r3, r3, #1
 8020254:	50b3      	str	r3, [r6, r2]
 8020256:	2308      	movs	r3, #8
 8020258:	469c      	mov	ip, r3
 802025a:	9b08      	ldr	r3, [sp, #32]
 802025c:	44e0      	add	r8, ip
 802025e:	3708      	adds	r7, #8
 8020260:	3608      	adds	r6, #8
 8020262:	4598      	cmp	r8, r3
 8020264:	d196      	bne.n	8020194 <arm_cfft_radix4by2_q31+0x3c>
 8020266:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020268:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802026a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802026c:	2302      	movs	r3, #2
 802026e:	003a      	movs	r2, r7
 8020270:	0029      	movs	r1, r5
 8020272:	0020      	movs	r0, r4
 8020274:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8020276:	f000 f957 	bl	8020528 <arm_radix4_butterfly_q31>
 802027a:	46a4      	mov	ip, r4
 802027c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802027e:	2302      	movs	r3, #2
 8020280:	0088      	lsls	r0, r1, #2
 8020282:	4460      	add	r0, ip
 8020284:	003a      	movs	r2, r7
 8020286:	0029      	movs	r1, r5
 8020288:	f000 f94e 	bl	8020528 <arm_radix4_butterfly_q31>
 802028c:	46a4      	mov	ip, r4
 802028e:	0128      	lsls	r0, r5, #4
 8020290:	4460      	add	r0, ip
 8020292:	6833      	ldr	r3, [r6, #0]
 8020294:	005b      	lsls	r3, r3, #1
 8020296:	6033      	str	r3, [r6, #0]
 8020298:	6873      	ldr	r3, [r6, #4]
 802029a:	005b      	lsls	r3, r3, #1
 802029c:	6073      	str	r3, [r6, #4]
 802029e:	68b3      	ldr	r3, [r6, #8]
 80202a0:	005b      	lsls	r3, r3, #1
 80202a2:	60b3      	str	r3, [r6, #8]
 80202a4:	68f3      	ldr	r3, [r6, #12]
 80202a6:	005b      	lsls	r3, r3, #1
 80202a8:	60f3      	str	r3, [r6, #12]
 80202aa:	3610      	adds	r6, #16
 80202ac:	42b0      	cmp	r0, r6
 80202ae:	d1f0      	bne.n	8020292 <arm_cfft_radix4by2_q31+0x13a>
 80202b0:	b00f      	add	sp, #60	@ 0x3c
 80202b2:	bc3c      	pop	{r2, r3, r4, r5}
 80202b4:	4690      	mov	r8, r2
 80202b6:	4699      	mov	r9, r3
 80202b8:	46a2      	mov	sl, r4
 80202ba:	46ab      	mov	fp, r5
 80202bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202be:	2302      	movs	r3, #2
 80202c0:	2100      	movs	r1, #0
 80202c2:	0015      	movs	r5, r2
 80202c4:	f000 f930 	bl	8020528 <arm_radix4_butterfly_q31>
 80202c8:	46bc      	mov	ip, r7
 80202ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80202cc:	002a      	movs	r2, r5
 80202ce:	0098      	lsls	r0, r3, #2
 80202d0:	4460      	add	r0, ip
 80202d2:	2302      	movs	r3, #2
 80202d4:	2100      	movs	r1, #0
 80202d6:	f000 f927 	bl	8020528 <arm_radix4_butterfly_q31>
 80202da:	e7e9      	b.n	80202b0 <arm_cfft_radix4by2_q31+0x158>

080202dc <arm_cfft_radix4by2_inverse_q31>:
 80202dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80202de:	465f      	mov	r7, fp
 80202e0:	4656      	mov	r6, sl
 80202e2:	464d      	mov	r5, r9
 80202e4:	4644      	mov	r4, r8
 80202e6:	000b      	movs	r3, r1
 80202e8:	b4f0      	push	{r4, r5, r6, r7}
 80202ea:	085b      	lsrs	r3, r3, #1
 80202ec:	b08f      	sub	sp, #60	@ 0x3c
 80202ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80202f0:	0007      	movs	r7, r0
 80202f2:	9009      	str	r0, [sp, #36]	@ 0x24
 80202f4:	0011      	movs	r1, r2
 80202f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80202f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d100      	bne.n	8020300 <arm_cfft_radix4by2_inverse_q31+0x24>
 80202fe:	e0a0      	b.n	8020442 <arm_cfft_radix4by2_inverse_q31+0x166>
 8020300:	0002      	movs	r2, r0
 8020302:	00db      	lsls	r3, r3, #3
 8020304:	3204      	adds	r2, #4
 8020306:	4691      	mov	r9, r2
 8020308:	4698      	mov	r8, r3
 802030a:	000a      	movs	r2, r1
 802030c:	464e      	mov	r6, r9
 802030e:	4442      	add	r2, r8
 8020310:	4699      	mov	r9, r3
 8020312:	4688      	mov	r8, r1
 8020314:	9208      	str	r2, [sp, #32]
 8020316:	900d      	str	r0, [sp, #52]	@ 0x34
 8020318:	4643      	mov	r3, r8
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	469b      	mov	fp, r3
 802031e:	4643      	mov	r3, r8
 8020320:	685b      	ldr	r3, [r3, #4]
 8020322:	469a      	mov	sl, r3
 8020324:	683b      	ldr	r3, [r7, #0]
 8020326:	109c      	asrs	r4, r3, #2
 8020328:	464b      	mov	r3, r9
 802032a:	58fb      	ldr	r3, [r7, r3]
 802032c:	109a      	asrs	r2, r3, #2
 802032e:	18a3      	adds	r3, r4, r2
 8020330:	603b      	str	r3, [r7, #0]
 8020332:	6833      	ldr	r3, [r6, #0]
 8020334:	1aa4      	subs	r4, r4, r2
 8020336:	109d      	asrs	r5, r3, #2
 8020338:	464b      	mov	r3, r9
 802033a:	58f3      	ldr	r3, [r6, r3]
 802033c:	17e2      	asrs	r2, r4, #31
 802033e:	109b      	asrs	r3, r3, #2
 8020340:	18e9      	adds	r1, r5, r3
 8020342:	6031      	str	r1, [r6, #0]
 8020344:	0011      	movs	r1, r2
 8020346:	465a      	mov	r2, fp
 8020348:	17d2      	asrs	r2, r2, #31
 802034a:	0010      	movs	r0, r2
 802034c:	4652      	mov	r2, sl
 802034e:	1aed      	subs	r5, r5, r3
 8020350:	17eb      	asrs	r3, r5, #31
 8020352:	17d2      	asrs	r2, r2, #31
 8020354:	9307      	str	r3, [sp, #28]
 8020356:	9204      	str	r2, [sp, #16]
 8020358:	0003      	movs	r3, r0
 802035a:	465a      	mov	r2, fp
 802035c:	9006      	str	r0, [sp, #24]
 802035e:	0020      	movs	r0, r4
 8020360:	9105      	str	r1, [sp, #20]
 8020362:	f7e0 f92d 	bl	80005c0 <__aeabi_lmul>
 8020366:	2280      	movs	r2, #128	@ 0x80
 8020368:	2300      	movs	r3, #0
 802036a:	0612      	lsls	r2, r2, #24
 802036c:	1880      	adds	r0, r0, r2
 802036e:	4159      	adcs	r1, r3
 8020370:	2300      	movs	r3, #0
 8020372:	9101      	str	r1, [sp, #4]
 8020374:	9300      	str	r3, [sp, #0]
 8020376:	4652      	mov	r2, sl
 8020378:	9b04      	ldr	r3, [sp, #16]
 802037a:	0028      	movs	r0, r5
 802037c:	17e9      	asrs	r1, r5, #31
 802037e:	f7e0 f91f 	bl	80005c0 <__aeabi_lmul>
 8020382:	9a00      	ldr	r2, [sp, #0]
 8020384:	9b01      	ldr	r3, [sp, #4]
 8020386:	1a12      	subs	r2, r2, r0
 8020388:	418b      	sbcs	r3, r1
 802038a:	2080      	movs	r0, #128	@ 0x80
 802038c:	2100      	movs	r1, #0
 802038e:	0600      	lsls	r0, r0, #24
 8020390:	1812      	adds	r2, r2, r0
 8020392:	414b      	adcs	r3, r1
 8020394:	464a      	mov	r2, r9
 8020396:	005b      	lsls	r3, r3, #1
 8020398:	50bb      	str	r3, [r7, r2]
 802039a:	4658      	mov	r0, fp
 802039c:	002a      	movs	r2, r5
 802039e:	9b07      	ldr	r3, [sp, #28]
 80203a0:	9906      	ldr	r1, [sp, #24]
 80203a2:	f7e0 f90d 	bl	80005c0 <__aeabi_lmul>
 80203a6:	2280      	movs	r2, #128	@ 0x80
 80203a8:	2300      	movs	r3, #0
 80203aa:	0612      	lsls	r2, r2, #24
 80203ac:	1880      	adds	r0, r0, r2
 80203ae:	4159      	adcs	r1, r3
 80203b0:	2000      	movs	r0, #0
 80203b2:	9103      	str	r1, [sp, #12]
 80203b4:	9002      	str	r0, [sp, #8]
 80203b6:	4652      	mov	r2, sl
 80203b8:	9b04      	ldr	r3, [sp, #16]
 80203ba:	0020      	movs	r0, r4
 80203bc:	9905      	ldr	r1, [sp, #20]
 80203be:	f7e0 f8ff 	bl	80005c0 <__aeabi_lmul>
 80203c2:	9b02      	ldr	r3, [sp, #8]
 80203c4:	9c03      	ldr	r4, [sp, #12]
 80203c6:	18c0      	adds	r0, r0, r3
 80203c8:	4161      	adcs	r1, r4
 80203ca:	2380      	movs	r3, #128	@ 0x80
 80203cc:	2400      	movs	r4, #0
 80203ce:	061b      	lsls	r3, r3, #24
 80203d0:	18c0      	adds	r0, r0, r3
 80203d2:	4161      	adcs	r1, r4
 80203d4:	464a      	mov	r2, r9
 80203d6:	004b      	lsls	r3, r1, #1
 80203d8:	50b3      	str	r3, [r6, r2]
 80203da:	2308      	movs	r3, #8
 80203dc:	469c      	mov	ip, r3
 80203de:	9b08      	ldr	r3, [sp, #32]
 80203e0:	44e0      	add	r8, ip
 80203e2:	3708      	adds	r7, #8
 80203e4:	3608      	adds	r6, #8
 80203e6:	4598      	cmp	r8, r3
 80203e8:	d196      	bne.n	8020318 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80203ea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80203ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80203ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80203f0:	2302      	movs	r3, #2
 80203f2:	003a      	movs	r2, r7
 80203f4:	0029      	movs	r1, r5
 80203f6:	0020      	movs	r0, r4
 80203f8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80203fa:	f000 fb3b 	bl	8020a74 <arm_radix4_butterfly_inverse_q31>
 80203fe:	46a4      	mov	ip, r4
 8020400:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020402:	2302      	movs	r3, #2
 8020404:	0088      	lsls	r0, r1, #2
 8020406:	4460      	add	r0, ip
 8020408:	003a      	movs	r2, r7
 802040a:	0029      	movs	r1, r5
 802040c:	f000 fb32 	bl	8020a74 <arm_radix4_butterfly_inverse_q31>
 8020410:	46a4      	mov	ip, r4
 8020412:	0128      	lsls	r0, r5, #4
 8020414:	4460      	add	r0, ip
 8020416:	6833      	ldr	r3, [r6, #0]
 8020418:	005b      	lsls	r3, r3, #1
 802041a:	6033      	str	r3, [r6, #0]
 802041c:	6873      	ldr	r3, [r6, #4]
 802041e:	005b      	lsls	r3, r3, #1
 8020420:	6073      	str	r3, [r6, #4]
 8020422:	68b3      	ldr	r3, [r6, #8]
 8020424:	005b      	lsls	r3, r3, #1
 8020426:	60b3      	str	r3, [r6, #8]
 8020428:	68f3      	ldr	r3, [r6, #12]
 802042a:	005b      	lsls	r3, r3, #1
 802042c:	60f3      	str	r3, [r6, #12]
 802042e:	3610      	adds	r6, #16
 8020430:	42b0      	cmp	r0, r6
 8020432:	d1f0      	bne.n	8020416 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8020434:	b00f      	add	sp, #60	@ 0x3c
 8020436:	bc3c      	pop	{r2, r3, r4, r5}
 8020438:	4690      	mov	r8, r2
 802043a:	4699      	mov	r9, r3
 802043c:	46a2      	mov	sl, r4
 802043e:	46ab      	mov	fp, r5
 8020440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020442:	2302      	movs	r3, #2
 8020444:	2100      	movs	r1, #0
 8020446:	0015      	movs	r5, r2
 8020448:	f000 fb14 	bl	8020a74 <arm_radix4_butterfly_inverse_q31>
 802044c:	46bc      	mov	ip, r7
 802044e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020450:	002a      	movs	r2, r5
 8020452:	0098      	lsls	r0, r3, #2
 8020454:	4460      	add	r0, ip
 8020456:	2302      	movs	r3, #2
 8020458:	2100      	movs	r1, #0
 802045a:	f000 fb0b 	bl	8020a74 <arm_radix4_butterfly_inverse_q31>
 802045e:	e7e9      	b.n	8020434 <arm_cfft_radix4by2_inverse_q31+0x158>

08020460 <arm_cfft_q31>:
 8020460:	b570      	push	{r4, r5, r6, lr}
 8020462:	001e      	movs	r6, r3
 8020464:	2380      	movs	r3, #128	@ 0x80
 8020466:	000d      	movs	r5, r1
 8020468:	0004      	movs	r4, r0
 802046a:	8801      	ldrh	r1, [r0, #0]
 802046c:	005b      	lsls	r3, r3, #1
 802046e:	2a01      	cmp	r2, #1
 8020470:	d028      	beq.n	80204c4 <arm_cfft_q31+0x64>
 8020472:	4299      	cmp	r1, r3
 8020474:	d020      	beq.n	80204b8 <arm_cfft_q31+0x58>
 8020476:	d812      	bhi.n	802049e <arm_cfft_q31+0x3e>
 8020478:	2920      	cmp	r1, #32
 802047a:	d004      	beq.n	8020486 <arm_cfft_q31+0x26>
 802047c:	d949      	bls.n	8020512 <arm_cfft_q31+0xb2>
 802047e:	2940      	cmp	r1, #64	@ 0x40
 8020480:	d01a      	beq.n	80204b8 <arm_cfft_q31+0x58>
 8020482:	2980      	cmp	r1, #128	@ 0x80
 8020484:	d103      	bne.n	802048e <arm_cfft_q31+0x2e>
 8020486:	6862      	ldr	r2, [r4, #4]
 8020488:	0028      	movs	r0, r5
 802048a:	f7ff fe65 	bl	8020158 <arm_cfft_radix4by2_q31>
 802048e:	2e00      	cmp	r6, #0
 8020490:	d004      	beq.n	802049c <arm_cfft_q31+0x3c>
 8020492:	68a2      	ldr	r2, [r4, #8]
 8020494:	89a1      	ldrh	r1, [r4, #12]
 8020496:	0028      	movs	r0, r5
 8020498:	f7df fe36 	bl	8000108 <arm_bitreversal_32>
 802049c:	bd70      	pop	{r4, r5, r6, pc}
 802049e:	2380      	movs	r3, #128	@ 0x80
 80204a0:	00db      	lsls	r3, r3, #3
 80204a2:	4299      	cmp	r1, r3
 80204a4:	d008      	beq.n	80204b8 <arm_cfft_q31+0x58>
 80204a6:	d92f      	bls.n	8020508 <arm_cfft_q31+0xa8>
 80204a8:	2380      	movs	r3, #128	@ 0x80
 80204aa:	011b      	lsls	r3, r3, #4
 80204ac:	4299      	cmp	r1, r3
 80204ae:	d0ea      	beq.n	8020486 <arm_cfft_q31+0x26>
 80204b0:	2380      	movs	r3, #128	@ 0x80
 80204b2:	015b      	lsls	r3, r3, #5
 80204b4:	4299      	cmp	r1, r3
 80204b6:	d1ea      	bne.n	802048e <arm_cfft_q31+0x2e>
 80204b8:	2301      	movs	r3, #1
 80204ba:	6862      	ldr	r2, [r4, #4]
 80204bc:	0028      	movs	r0, r5
 80204be:	f000 f833 	bl	8020528 <arm_radix4_butterfly_q31>
 80204c2:	e7e4      	b.n	802048e <arm_cfft_q31+0x2e>
 80204c4:	4299      	cmp	r1, r3
 80204c6:	d019      	beq.n	80204fc <arm_cfft_q31+0x9c>
 80204c8:	d80b      	bhi.n	80204e2 <arm_cfft_q31+0x82>
 80204ca:	2920      	cmp	r1, #32
 80204cc:	d004      	beq.n	80204d8 <arm_cfft_q31+0x78>
 80204ce:	d928      	bls.n	8020522 <arm_cfft_q31+0xc2>
 80204d0:	2940      	cmp	r1, #64	@ 0x40
 80204d2:	d013      	beq.n	80204fc <arm_cfft_q31+0x9c>
 80204d4:	2980      	cmp	r1, #128	@ 0x80
 80204d6:	d1da      	bne.n	802048e <arm_cfft_q31+0x2e>
 80204d8:	6862      	ldr	r2, [r4, #4]
 80204da:	0028      	movs	r0, r5
 80204dc:	f7ff fefe 	bl	80202dc <arm_cfft_radix4by2_inverse_q31>
 80204e0:	e7d5      	b.n	802048e <arm_cfft_q31+0x2e>
 80204e2:	2380      	movs	r3, #128	@ 0x80
 80204e4:	00db      	lsls	r3, r3, #3
 80204e6:	4299      	cmp	r1, r3
 80204e8:	d008      	beq.n	80204fc <arm_cfft_q31+0x9c>
 80204ea:	d915      	bls.n	8020518 <arm_cfft_q31+0xb8>
 80204ec:	2380      	movs	r3, #128	@ 0x80
 80204ee:	011b      	lsls	r3, r3, #4
 80204f0:	4299      	cmp	r1, r3
 80204f2:	d0f1      	beq.n	80204d8 <arm_cfft_q31+0x78>
 80204f4:	2380      	movs	r3, #128	@ 0x80
 80204f6:	015b      	lsls	r3, r3, #5
 80204f8:	4299      	cmp	r1, r3
 80204fa:	d1c8      	bne.n	802048e <arm_cfft_q31+0x2e>
 80204fc:	2301      	movs	r3, #1
 80204fe:	6862      	ldr	r2, [r4, #4]
 8020500:	0028      	movs	r0, r5
 8020502:	f000 fab7 	bl	8020a74 <arm_radix4_butterfly_inverse_q31>
 8020506:	e7c2      	b.n	802048e <arm_cfft_q31+0x2e>
 8020508:	2380      	movs	r3, #128	@ 0x80
 802050a:	009b      	lsls	r3, r3, #2
 802050c:	4299      	cmp	r1, r3
 802050e:	d0ba      	beq.n	8020486 <arm_cfft_q31+0x26>
 8020510:	e7bd      	b.n	802048e <arm_cfft_q31+0x2e>
 8020512:	2910      	cmp	r1, #16
 8020514:	d1bb      	bne.n	802048e <arm_cfft_q31+0x2e>
 8020516:	e7cf      	b.n	80204b8 <arm_cfft_q31+0x58>
 8020518:	2380      	movs	r3, #128	@ 0x80
 802051a:	009b      	lsls	r3, r3, #2
 802051c:	4299      	cmp	r1, r3
 802051e:	d0db      	beq.n	80204d8 <arm_cfft_q31+0x78>
 8020520:	e7b5      	b.n	802048e <arm_cfft_q31+0x2e>
 8020522:	2910      	cmp	r1, #16
 8020524:	d1b3      	bne.n	802048e <arm_cfft_q31+0x2e>
 8020526:	e7e9      	b.n	80204fc <arm_cfft_q31+0x9c>

08020528 <arm_radix4_butterfly_q31>:
 8020528:	b5f0      	push	{r4, r5, r6, r7, lr}
 802052a:	464d      	mov	r5, r9
 802052c:	4644      	mov	r4, r8
 802052e:	465f      	mov	r7, fp
 8020530:	4656      	mov	r6, sl
 8020532:	469c      	mov	ip, r3
 8020534:	b4f0      	push	{r4, r5, r6, r7}
 8020536:	b0a7      	sub	sp, #156	@ 0x9c
 8020538:	9114      	str	r1, [sp, #80]	@ 0x50
 802053a:	0889      	lsrs	r1, r1, #2
 802053c:	9310      	str	r3, [sp, #64]	@ 0x40
 802053e:	00cb      	lsls	r3, r1, #3
 8020540:	0015      	movs	r5, r2
 8020542:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020544:	18c2      	adds	r2, r0, r3
 8020546:	000c      	movs	r4, r1
 8020548:	469a      	mov	sl, r3
 802054a:	9124      	str	r1, [sp, #144]	@ 0x90
 802054c:	18d1      	adds	r1, r2, r3
 802054e:	4663      	mov	r3, ip
 8020550:	468b      	mov	fp, r1
 8020552:	0119      	lsls	r1, r3, #4
 8020554:	910d      	str	r1, [sp, #52]	@ 0x34
 8020556:	00d9      	lsls	r1, r3, #3
 8020558:	005b      	lsls	r3, r3, #1
 802055a:	4463      	add	r3, ip
 802055c:	910e      	str	r1, [sp, #56]	@ 0x38
 802055e:	00d9      	lsls	r1, r3, #3
 8020560:	465b      	mov	r3, fp
 8020562:	44da      	add	sl, fp
 8020564:	4690      	mov	r8, r2
 8020566:	4683      	mov	fp, r0
 8020568:	4699      	mov	r9, r3
 802056a:	9022      	str	r0, [sp, #136]	@ 0x88
 802056c:	9025      	str	r0, [sp, #148]	@ 0x94
 802056e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020570:	9502      	str	r5, [sp, #8]
 8020572:	9500      	str	r5, [sp, #0]
 8020574:	9501      	str	r5, [sp, #4]
 8020576:	9407      	str	r4, [sp, #28]
 8020578:	465b      	mov	r3, fp
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	4642      	mov	r2, r8
 802057e:	111c      	asrs	r4, r3, #4
 8020580:	464b      	mov	r3, r9
 8020582:	4658      	mov	r0, fp
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	6812      	ldr	r2, [r2, #0]
 8020588:	111b      	asrs	r3, r3, #4
 802058a:	18e7      	adds	r7, r4, r3
 802058c:	1ae3      	subs	r3, r4, r3
 802058e:	1114      	asrs	r4, r2, #4
 8020590:	4652      	mov	r2, sl
 8020592:	6840      	ldr	r0, [r0, #4]
 8020594:	6812      	ldr	r2, [r2, #0]
 8020596:	1105      	asrs	r5, r0, #4
 8020598:	4648      	mov	r0, r9
 802059a:	9303      	str	r3, [sp, #12]
 802059c:	1113      	asrs	r3, r2, #4
 802059e:	18e2      	adds	r2, r4, r3
 80205a0:	465c      	mov	r4, fp
 80205a2:	6840      	ldr	r0, [r0, #4]
 80205a4:	1103      	asrs	r3, r0, #4
 80205a6:	18ee      	adds	r6, r5, r3
 80205a8:	1ae8      	subs	r0, r5, r3
 80205aa:	18bb      	adds	r3, r7, r2
 80205ac:	6023      	str	r3, [r4, #0]
 80205ae:	4644      	mov	r4, r8
 80205b0:	6864      	ldr	r4, [r4, #4]
 80205b2:	9004      	str	r0, [sp, #16]
 80205b4:	1125      	asrs	r5, r4, #4
 80205b6:	4654      	mov	r4, sl
 80205b8:	6864      	ldr	r4, [r4, #4]
 80205ba:	1123      	asrs	r3, r4, #4
 80205bc:	465c      	mov	r4, fp
 80205be:	18eb      	adds	r3, r5, r3
 80205c0:	18f1      	adds	r1, r6, r3
 80205c2:	6061      	str	r1, [r4, #4]
 80205c4:	4655      	mov	r5, sl
 80205c6:	4644      	mov	r4, r8
 80205c8:	686d      	ldr	r5, [r5, #4]
 80205ca:	6864      	ldr	r4, [r4, #4]
 80205cc:	1129      	asrs	r1, r5, #4
 80205ce:	1124      	asrs	r4, r4, #4
 80205d0:	1a64      	subs	r4, r4, r1
 80205d2:	4641      	mov	r1, r8
 80205d4:	6809      	ldr	r1, [r1, #0]
 80205d6:	9405      	str	r4, [sp, #20]
 80205d8:	1108      	asrs	r0, r1, #4
 80205da:	4651      	mov	r1, sl
 80205dc:	6809      	ldr	r1, [r1, #0]
 80205de:	1abc      	subs	r4, r7, r2
 80205e0:	1109      	asrs	r1, r1, #4
 80205e2:	1a41      	subs	r1, r0, r1
 80205e4:	17e2      	asrs	r2, r4, #31
 80205e6:	9106      	str	r1, [sp, #24]
 80205e8:	0011      	movs	r1, r2
 80205ea:	9a01      	ldr	r2, [sp, #4]
 80205ec:	9108      	str	r1, [sp, #32]
 80205ee:	6817      	ldr	r7, [r2, #0]
 80205f0:	17fd      	asrs	r5, r7, #31
 80205f2:	0028      	movs	r0, r5
 80205f4:	1af5      	subs	r5, r6, r3
 80205f6:	17ee      	asrs	r6, r5, #31
 80205f8:	960a      	str	r6, [sp, #40]	@ 0x28
 80205fa:	6856      	ldr	r6, [r2, #4]
 80205fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80205fe:	17f3      	asrs	r3, r6, #31
 8020600:	003a      	movs	r2, r7
 8020602:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020604:	0003      	movs	r3, r0
 8020606:	0020      	movs	r0, r4
 8020608:	f7df ffda 	bl	80005c0 <__aeabi_lmul>
 802060c:	0032      	movs	r2, r6
 802060e:	17f3      	asrs	r3, r6, #31
 8020610:	910c      	str	r1, [sp, #48]	@ 0x30
 8020612:	0028      	movs	r0, r5
 8020614:	17e9      	asrs	r1, r5, #31
 8020616:	f7df ffd3 	bl	80005c0 <__aeabi_lmul>
 802061a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802061c:	002a      	movs	r2, r5
 802061e:	4684      	mov	ip, r0
 8020620:	4640      	mov	r0, r8
 8020622:	4461      	add	r1, ip
 8020624:	0049      	lsls	r1, r1, #1
 8020626:	6001      	str	r1, [r0, #0]
 8020628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802062a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802062c:	0038      	movs	r0, r7
 802062e:	f7df ffc7 	bl	80005c0 <__aeabi_lmul>
 8020632:	0032      	movs	r2, r6
 8020634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020636:	000d      	movs	r5, r1
 8020638:	0020      	movs	r0, r4
 802063a:	9908      	ldr	r1, [sp, #32]
 802063c:	f7df ffc0 	bl	80005c0 <__aeabi_lmul>
 8020640:	4646      	mov	r6, r8
 8020642:	1a6d      	subs	r5, r5, r1
 8020644:	006d      	lsls	r5, r5, #1
 8020646:	6075      	str	r5, [r6, #4]
 8020648:	9903      	ldr	r1, [sp, #12]
 802064a:	9d05      	ldr	r5, [sp, #20]
 802064c:	000c      	movs	r4, r1
 802064e:	46ac      	mov	ip, r5
 8020650:	4464      	add	r4, ip
 8020652:	17e6      	asrs	r6, r4, #31
 8020654:	0031      	movs	r1, r6
 8020656:	9b00      	ldr	r3, [sp, #0]
 8020658:	9804      	ldr	r0, [sp, #16]
 802065a:	681e      	ldr	r6, [r3, #0]
 802065c:	17f7      	asrs	r7, r6, #31
 802065e:	9709      	str	r7, [sp, #36]	@ 0x24
 8020660:	9f06      	ldr	r7, [sp, #24]
 8020662:	0032      	movs	r2, r6
 8020664:	1bc7      	subs	r7, r0, r7
 8020666:	17fd      	asrs	r5, r7, #31
 8020668:	950a      	str	r5, [sp, #40]	@ 0x28
 802066a:	685d      	ldr	r5, [r3, #4]
 802066c:	17f3      	asrs	r3, r6, #31
 802066e:	17e8      	asrs	r0, r5, #31
 8020670:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020672:	0020      	movs	r0, r4
 8020674:	9108      	str	r1, [sp, #32]
 8020676:	f7df ffa3 	bl	80005c0 <__aeabi_lmul>
 802067a:	002a      	movs	r2, r5
 802067c:	17eb      	asrs	r3, r5, #31
 802067e:	910c      	str	r1, [sp, #48]	@ 0x30
 8020680:	0038      	movs	r0, r7
 8020682:	17f9      	asrs	r1, r7, #31
 8020684:	f7df ff9c 	bl	80005c0 <__aeabi_lmul>
 8020688:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802068a:	003a      	movs	r2, r7
 802068c:	4684      	mov	ip, r0
 802068e:	4648      	mov	r0, r9
 8020690:	4461      	add	r1, ip
 8020692:	0049      	lsls	r1, r1, #1
 8020694:	6001      	str	r1, [r0, #0]
 8020696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020698:	0030      	movs	r0, r6
 802069a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802069c:	f7df ff90 	bl	80005c0 <__aeabi_lmul>
 80206a0:	002a      	movs	r2, r5
 80206a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80206a4:	000e      	movs	r6, r1
 80206a6:	0020      	movs	r0, r4
 80206a8:	9908      	ldr	r1, [sp, #32]
 80206aa:	f7df ff89 	bl	80005c0 <__aeabi_lmul>
 80206ae:	464c      	mov	r4, r9
 80206b0:	9d05      	ldr	r5, [sp, #20]
 80206b2:	1a76      	subs	r6, r6, r1
 80206b4:	9903      	ldr	r1, [sp, #12]
 80206b6:	0076      	lsls	r6, r6, #1
 80206b8:	6066      	str	r6, [r4, #4]
 80206ba:	1b4c      	subs	r4, r1, r5
 80206bc:	9e06      	ldr	r6, [sp, #24]
 80206be:	17e1      	asrs	r1, r4, #31
 80206c0:	9103      	str	r1, [sp, #12]
 80206c2:	9902      	ldr	r1, [sp, #8]
 80206c4:	46b4      	mov	ip, r6
 80206c6:	680f      	ldr	r7, [r1, #0]
 80206c8:	9804      	ldr	r0, [sp, #16]
 80206ca:	17fd      	asrs	r5, r7, #31
 80206cc:	002b      	movs	r3, r5
 80206ce:	684e      	ldr	r6, [r1, #4]
 80206d0:	4460      	add	r0, ip
 80206d2:	0005      	movs	r5, r0
 80206d4:	17c0      	asrs	r0, r0, #31
 80206d6:	9005      	str	r0, [sp, #20]
 80206d8:	17f0      	asrs	r0, r6, #31
 80206da:	9006      	str	r0, [sp, #24]
 80206dc:	003a      	movs	r2, r7
 80206de:	0020      	movs	r0, r4
 80206e0:	17e1      	asrs	r1, r4, #31
 80206e2:	9304      	str	r3, [sp, #16]
 80206e4:	f7df ff6c 	bl	80005c0 <__aeabi_lmul>
 80206e8:	0032      	movs	r2, r6
 80206ea:	9108      	str	r1, [sp, #32]
 80206ec:	17f3      	asrs	r3, r6, #31
 80206ee:	0028      	movs	r0, r5
 80206f0:	17e9      	asrs	r1, r5, #31
 80206f2:	f7df ff65 	bl	80005c0 <__aeabi_lmul>
 80206f6:	9808      	ldr	r0, [sp, #32]
 80206f8:	002a      	movs	r2, r5
 80206fa:	4684      	mov	ip, r0
 80206fc:	4650      	mov	r0, sl
 80206fe:	4461      	add	r1, ip
 8020700:	0049      	lsls	r1, r1, #1
 8020702:	6001      	str	r1, [r0, #0]
 8020704:	9b05      	ldr	r3, [sp, #20]
 8020706:	9904      	ldr	r1, [sp, #16]
 8020708:	0038      	movs	r0, r7
 802070a:	f7df ff59 	bl	80005c0 <__aeabi_lmul>
 802070e:	0020      	movs	r0, r4
 8020710:	2408      	movs	r4, #8
 8020712:	000d      	movs	r5, r1
 8020714:	0032      	movs	r2, r6
 8020716:	9b06      	ldr	r3, [sp, #24]
 8020718:	9903      	ldr	r1, [sp, #12]
 802071a:	f7df ff51 	bl	80005c0 <__aeabi_lmul>
 802071e:	46a4      	mov	ip, r4
 8020720:	4650      	mov	r0, sl
 8020722:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020724:	44e3      	add	fp, ip
 8020726:	44e0      	add	r8, ip
 8020728:	44e1      	add	r9, ip
 802072a:	44e2      	add	sl, ip
 802072c:	46a4      	mov	ip, r4
 802072e:	1a6d      	subs	r5, r5, r1
 8020730:	006d      	lsls	r5, r5, #1
 8020732:	9a01      	ldr	r2, [sp, #4]
 8020734:	6045      	str	r5, [r0, #4]
 8020736:	9807      	ldr	r0, [sp, #28]
 8020738:	4462      	add	r2, ip
 802073a:	3801      	subs	r0, #1
 802073c:	9201      	str	r2, [sp, #4]
 802073e:	9007      	str	r0, [sp, #28]
 8020740:	9b00      	ldr	r3, [sp, #0]
 8020742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020744:	9902      	ldr	r1, [sp, #8]
 8020746:	4694      	mov	ip, r2
 8020748:	4463      	add	r3, ip
 802074a:	9300      	str	r3, [sp, #0]
 802074c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802074e:	469c      	mov	ip, r3
 8020750:	4461      	add	r1, ip
 8020752:	9102      	str	r1, [sp, #8]
 8020754:	2800      	cmp	r0, #0
 8020756:	d000      	beq.n	802075a <arm_radix4_butterfly_q31+0x232>
 8020758:	e70e      	b.n	8020578 <arm_radix4_butterfly_q31+0x50>
 802075a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802075c:	009b      	lsls	r3, r3, #2
 802075e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020760:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020762:	9320      	str	r3, [sp, #128]	@ 0x80
 8020764:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020766:	2b04      	cmp	r3, #4
 8020768:	d800      	bhi.n	802076c <arm_radix4_butterfly_q31+0x244>
 802076a:	e180      	b.n	8020a6e <arm_radix4_butterfly_q31+0x546>
 802076c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802076e:	0893      	lsrs	r3, r2, #2
 8020770:	1e59      	subs	r1, r3, #1
 8020772:	9321      	str	r3, [sp, #132]	@ 0x84
 8020774:	00db      	lsls	r3, r3, #3
 8020776:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020778:	00d3      	lsls	r3, r2, #3
 802077a:	9300      	str	r3, [sp, #0]
 802077c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802077e:	911a      	str	r1, [sp, #104]	@ 0x68
 8020780:	00da      	lsls	r2, r3, #3
 8020782:	921e      	str	r2, [sp, #120]	@ 0x78
 8020784:	011a      	lsls	r2, r3, #4
 8020786:	921d      	str	r2, [sp, #116]	@ 0x74
 8020788:	001a      	movs	r2, r3
 802078a:	4694      	mov	ip, r2
 802078c:	005b      	lsls	r3, r3, #1
 802078e:	4463      	add	r3, ip
 8020790:	00db      	lsls	r3, r3, #3
 8020792:	931c      	str	r3, [sp, #112]	@ 0x70
 8020794:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020796:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020798:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802079a:	9318      	str	r3, [sp, #96]	@ 0x60
 802079c:	9319      	str	r3, [sp, #100]	@ 0x64
 802079e:	9316      	str	r3, [sp, #88]	@ 0x58
 80207a0:	2300      	movs	r3, #0
 80207a2:	9315      	str	r3, [sp, #84]	@ 0x54
 80207a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80207a6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80207a8:	681a      	ldr	r2, [r3, #0]
 80207aa:	685b      	ldr	r3, [r3, #4]
 80207ac:	9205      	str	r2, [sp, #20]
 80207ae:	9306      	str	r3, [sp, #24]
 80207b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80207b2:	468c      	mov	ip, r1
 80207b4:	681a      	ldr	r2, [r3, #0]
 80207b6:	685b      	ldr	r3, [r3, #4]
 80207b8:	9207      	str	r2, [sp, #28]
 80207ba:	9308      	str	r3, [sp, #32]
 80207bc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80207be:	681a      	ldr	r2, [r3, #0]
 80207c0:	685b      	ldr	r3, [r3, #4]
 80207c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80207c4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80207c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80207c8:	0013      	movs	r3, r2
 80207ca:	4463      	add	r3, ip
 80207cc:	4698      	mov	r8, r3
 80207ce:	0013      	movs	r3, r2
 80207d0:	4442      	add	r2, r8
 80207d2:	4691      	mov	r9, r2
 80207d4:	001a      	movs	r2, r3
 80207d6:	444a      	add	r2, r9
 80207d8:	4692      	mov	sl, r2
 80207da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80207dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80207de:	4293      	cmp	r3, r2
 80207e0:	d800      	bhi.n	80207e4 <arm_radix4_butterfly_q31+0x2bc>
 80207e2:	e0dd      	b.n	80209a0 <arm_radix4_butterfly_q31+0x478>
 80207e4:	4694      	mov	ip, r2
 80207e6:	468b      	mov	fp, r1
 80207e8:	4644      	mov	r4, r8
 80207ea:	4655      	mov	r5, sl
 80207ec:	9b07      	ldr	r3, [sp, #28]
 80207ee:	17db      	asrs	r3, r3, #31
 80207f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80207f2:	9b08      	ldr	r3, [sp, #32]
 80207f4:	17db      	asrs	r3, r3, #31
 80207f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80207f8:	9b05      	ldr	r3, [sp, #20]
 80207fa:	17db      	asrs	r3, r3, #31
 80207fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80207fe:	9b06      	ldr	r3, [sp, #24]
 8020800:	17db      	asrs	r3, r3, #31
 8020802:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020806:	17db      	asrs	r3, r3, #31
 8020808:	9310      	str	r3, [sp, #64]	@ 0x40
 802080a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802080c:	17db      	asrs	r3, r3, #31
 802080e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020810:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020812:	4463      	add	r3, ip
 8020814:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020816:	465b      	mov	r3, fp
 8020818:	4659      	mov	r1, fp
 802081a:	681a      	ldr	r2, [r3, #0]
 802081c:	464b      	mov	r3, r9
 802081e:	684f      	ldr	r7, [r1, #4]
 8020820:	4649      	mov	r1, r9
 8020822:	681b      	ldr	r3, [r3, #0]
 8020824:	18d6      	adds	r6, r2, r3
 8020826:	1ad3      	subs	r3, r2, r3
 8020828:	9301      	str	r3, [sp, #4]
 802082a:	684b      	ldr	r3, [r1, #4]
 802082c:	18f8      	adds	r0, r7, r3
 802082e:	1af9      	subs	r1, r7, r3
 8020830:	6827      	ldr	r7, [r4, #0]
 8020832:	9102      	str	r1, [sp, #8]
 8020834:	003a      	movs	r2, r7
 8020836:	682f      	ldr	r7, [r5, #0]
 8020838:	46bc      	mov	ip, r7
 802083a:	465f      	mov	r7, fp
 802083c:	4462      	add	r2, ip
 802083e:	18b3      	adds	r3, r6, r2
 8020840:	109b      	asrs	r3, r3, #2
 8020842:	603b      	str	r3, [r7, #0]
 8020844:	6867      	ldr	r7, [r4, #4]
 8020846:	1ab6      	subs	r6, r6, r2
 8020848:	46b8      	mov	r8, r7
 802084a:	686f      	ldr	r7, [r5, #4]
 802084c:	17f2      	asrs	r2, r6, #31
 802084e:	46bc      	mov	ip, r7
 8020850:	44e0      	add	r8, ip
 8020852:	4643      	mov	r3, r8
 8020854:	465f      	mov	r7, fp
 8020856:	18c1      	adds	r1, r0, r3
 8020858:	1089      	asrs	r1, r1, #2
 802085a:	6079      	str	r1, [r7, #4]
 802085c:	9900      	ldr	r1, [sp, #0]
 802085e:	4690      	mov	r8, r2
 8020860:	468c      	mov	ip, r1
 8020862:	6867      	ldr	r7, [r4, #4]
 8020864:	6869      	ldr	r1, [r5, #4]
 8020866:	44e3      	add	fp, ip
 8020868:	1a7f      	subs	r7, r7, r1
 802086a:	9703      	str	r7, [sp, #12]
 802086c:	6829      	ldr	r1, [r5, #0]
 802086e:	6827      	ldr	r7, [r4, #0]
 8020870:	1a7f      	subs	r7, r7, r1
 8020872:	9704      	str	r7, [sp, #16]
 8020874:	1ac7      	subs	r7, r0, r3
 8020876:	17fa      	asrs	r2, r7, #31
 8020878:	4692      	mov	sl, r2
 802087a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802087c:	9a07      	ldr	r2, [sp, #28]
 802087e:	0030      	movs	r0, r6
 8020880:	4641      	mov	r1, r8
 8020882:	f7df fe9d 	bl	80005c0 <__aeabi_lmul>
 8020886:	9a08      	ldr	r2, [sp, #32]
 8020888:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802088a:	9112      	str	r1, [sp, #72]	@ 0x48
 802088c:	0038      	movs	r0, r7
 802088e:	4651      	mov	r1, sl
 8020890:	f7df fe96 	bl	80005c0 <__aeabi_lmul>
 8020894:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020896:	9a07      	ldr	r2, [sp, #28]
 8020898:	4684      	mov	ip, r0
 802089a:	4461      	add	r1, ip
 802089c:	1049      	asrs	r1, r1, #1
 802089e:	6021      	str	r1, [r4, #0]
 80208a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80208a2:	0038      	movs	r0, r7
 80208a4:	4651      	mov	r1, sl
 80208a6:	f7df fe8b 	bl	80005c0 <__aeabi_lmul>
 80208aa:	9a08      	ldr	r2, [sp, #32]
 80208ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80208ae:	000f      	movs	r7, r1
 80208b0:	0030      	movs	r0, r6
 80208b2:	4641      	mov	r1, r8
 80208b4:	f7df fe84 	bl	80005c0 <__aeabi_lmul>
 80208b8:	9b00      	ldr	r3, [sp, #0]
 80208ba:	9a01      	ldr	r2, [sp, #4]
 80208bc:	469c      	mov	ip, r3
 80208be:	9803      	ldr	r0, [sp, #12]
 80208c0:	1a7f      	subs	r7, r7, r1
 80208c2:	107f      	asrs	r7, r7, #1
 80208c4:	6067      	str	r7, [r4, #4]
 80208c6:	0016      	movs	r6, r2
 80208c8:	4464      	add	r4, ip
 80208ca:	4684      	mov	ip, r0
 80208cc:	4466      	add	r6, ip
 80208ce:	17f2      	asrs	r2, r6, #31
 80208d0:	4690      	mov	r8, r2
 80208d2:	9902      	ldr	r1, [sp, #8]
 80208d4:	9f04      	ldr	r7, [sp, #16]
 80208d6:	0030      	movs	r0, r6
 80208d8:	1bcf      	subs	r7, r1, r7
 80208da:	17fa      	asrs	r2, r7, #31
 80208dc:	4692      	mov	sl, r2
 80208de:	4641      	mov	r1, r8
 80208e0:	9a05      	ldr	r2, [sp, #20]
 80208e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208e4:	f7df fe6c 	bl	80005c0 <__aeabi_lmul>
 80208e8:	9a06      	ldr	r2, [sp, #24]
 80208ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80208ec:	9112      	str	r1, [sp, #72]	@ 0x48
 80208ee:	0038      	movs	r0, r7
 80208f0:	4651      	mov	r1, sl
 80208f2:	f7df fe65 	bl	80005c0 <__aeabi_lmul>
 80208f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80208f8:	9a05      	ldr	r2, [sp, #20]
 80208fa:	4684      	mov	ip, r0
 80208fc:	4648      	mov	r0, r9
 80208fe:	4461      	add	r1, ip
 8020900:	1049      	asrs	r1, r1, #1
 8020902:	6001      	str	r1, [r0, #0]
 8020904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020906:	0038      	movs	r0, r7
 8020908:	4651      	mov	r1, sl
 802090a:	f7df fe59 	bl	80005c0 <__aeabi_lmul>
 802090e:	9a06      	ldr	r2, [sp, #24]
 8020910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020912:	000f      	movs	r7, r1
 8020914:	0030      	movs	r0, r6
 8020916:	4641      	mov	r1, r8
 8020918:	f7df fe52 	bl	80005c0 <__aeabi_lmul>
 802091c:	464e      	mov	r6, r9
 802091e:	9a00      	ldr	r2, [sp, #0]
 8020920:	9b01      	ldr	r3, [sp, #4]
 8020922:	4694      	mov	ip, r2
 8020924:	9803      	ldr	r0, [sp, #12]
 8020926:	1a7f      	subs	r7, r7, r1
 8020928:	107f      	asrs	r7, r7, #1
 802092a:	6077      	str	r7, [r6, #4]
 802092c:	1a1e      	subs	r6, r3, r0
 802092e:	9b04      	ldr	r3, [sp, #16]
 8020930:	44e1      	add	r9, ip
 8020932:	469c      	mov	ip, r3
 8020934:	17f0      	asrs	r0, r6, #31
 8020936:	4680      	mov	r8, r0
 8020938:	9902      	ldr	r1, [sp, #8]
 802093a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802093c:	4461      	add	r1, ip
 802093e:	17cb      	asrs	r3, r1, #31
 8020940:	000f      	movs	r7, r1
 8020942:	469a      	mov	sl, r3
 8020944:	0030      	movs	r0, r6
 8020946:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020948:	4641      	mov	r1, r8
 802094a:	f7df fe39 	bl	80005c0 <__aeabi_lmul>
 802094e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020950:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020952:	9101      	str	r1, [sp, #4]
 8020954:	0038      	movs	r0, r7
 8020956:	4651      	mov	r1, sl
 8020958:	f7df fe32 	bl	80005c0 <__aeabi_lmul>
 802095c:	9801      	ldr	r0, [sp, #4]
 802095e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020960:	4684      	mov	ip, r0
 8020962:	4461      	add	r1, ip
 8020964:	1049      	asrs	r1, r1, #1
 8020966:	6029      	str	r1, [r5, #0]
 8020968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802096a:	0038      	movs	r0, r7
 802096c:	4651      	mov	r1, sl
 802096e:	f7df fe27 	bl	80005c0 <__aeabi_lmul>
 8020972:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020974:	000f      	movs	r7, r1
 8020976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020978:	0030      	movs	r0, r6
 802097a:	4641      	mov	r1, r8
 802097c:	f7df fe20 	bl	80005c0 <__aeabi_lmul>
 8020980:	1a7f      	subs	r7, r7, r1
 8020982:	107f      	asrs	r7, r7, #1
 8020984:	606f      	str	r7, [r5, #4]
 8020986:	9a00      	ldr	r2, [sp, #0]
 8020988:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802098a:	4694      	mov	ip, r2
 802098c:	4465      	add	r5, ip
 802098e:	468c      	mov	ip, r1
 8020990:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020992:	0013      	movs	r3, r2
 8020994:	4462      	add	r2, ip
 8020996:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020998:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802099a:	429a      	cmp	r2, r3
 802099c:	d900      	bls.n	80209a0 <arm_radix4_butterfly_q31+0x478>
 802099e:	e73a      	b.n	8020816 <arm_radix4_butterfly_q31+0x2ee>
 80209a0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80209a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80209a4:	468c      	mov	ip, r1
 80209a6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80209a8:	4462      	add	r2, ip
 80209aa:	468c      	mov	ip, r1
 80209ac:	9216      	str	r2, [sp, #88]	@ 0x58
 80209ae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80209b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80209b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80209b4:	4462      	add	r2, ip
 80209b6:	468c      	mov	ip, r1
 80209b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80209ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80209bc:	3301      	adds	r3, #1
 80209be:	4462      	add	r2, ip
 80209c0:	9218      	str	r2, [sp, #96]	@ 0x60
 80209c2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80209c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80209c6:	3208      	adds	r2, #8
 80209c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80209ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80209cc:	4293      	cmp	r3, r2
 80209ce:	d800      	bhi.n	80209d2 <arm_radix4_butterfly_q31+0x4aa>
 80209d0:	e6e8      	b.n	80207a4 <arm_radix4_butterfly_q31+0x27c>
 80209d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80209d4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80209d6:	009b      	lsls	r3, r3, #2
 80209d8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80209da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80209dc:	9213      	str	r2, [sp, #76]	@ 0x4c
 80209de:	089b      	lsrs	r3, r3, #2
 80209e0:	9320      	str	r3, [sp, #128]	@ 0x80
 80209e2:	2b04      	cmp	r3, #4
 80209e4:	d900      	bls.n	80209e8 <arm_radix4_butterfly_q31+0x4c0>
 80209e6:	e6c1      	b.n	802076c <arm_radix4_butterfly_q31+0x244>
 80209e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80209ea:	469a      	mov	sl, r3
 80209ec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80209ee:	691c      	ldr	r4, [r3, #16]
 80209f0:	685a      	ldr	r2, [r3, #4]
 80209f2:	46a1      	mov	r9, r4
 80209f4:	4690      	mov	r8, r2
 80209f6:	6819      	ldr	r1, [r3, #0]
 80209f8:	689a      	ldr	r2, [r3, #8]
 80209fa:	699f      	ldr	r7, [r3, #24]
 80209fc:	188d      	adds	r5, r1, r2
 80209fe:	444d      	add	r5, r9
 8020a00:	19ed      	adds	r5, r5, r7
 8020a02:	69de      	ldr	r6, [r3, #28]
 8020a04:	601d      	str	r5, [r3, #0]
 8020a06:	4645      	mov	r5, r8
 8020a08:	46b4      	mov	ip, r6
 8020a0a:	68d8      	ldr	r0, [r3, #12]
 8020a0c:	695c      	ldr	r4, [r3, #20]
 8020a0e:	182d      	adds	r5, r5, r0
 8020a10:	192d      	adds	r5, r5, r4
 8020a12:	4465      	add	r5, ip
 8020a14:	605d      	str	r5, [r3, #4]
 8020a16:	1a8d      	subs	r5, r1, r2
 8020a18:	444d      	add	r5, r9
 8020a1a:	1bed      	subs	r5, r5, r7
 8020a1c:	609d      	str	r5, [r3, #8]
 8020a1e:	4645      	mov	r5, r8
 8020a20:	1a2d      	subs	r5, r5, r0
 8020a22:	192d      	adds	r5, r5, r4
 8020a24:	1bad      	subs	r5, r5, r6
 8020a26:	464e      	mov	r6, r9
 8020a28:	60dd      	str	r5, [r3, #12]
 8020a2a:	180d      	adds	r5, r1, r0
 8020a2c:	1bad      	subs	r5, r5, r6
 8020a2e:	4666      	mov	r6, ip
 8020a30:	1bad      	subs	r5, r5, r6
 8020a32:	611d      	str	r5, [r3, #16]
 8020a34:	4645      	mov	r5, r8
 8020a36:	1aad      	subs	r5, r5, r2
 8020a38:	4442      	add	r2, r8
 8020a3a:	1b12      	subs	r2, r2, r4
 8020a3c:	1bd2      	subs	r2, r2, r7
 8020a3e:	1a08      	subs	r0, r1, r0
 8020a40:	61da      	str	r2, [r3, #28]
 8020a42:	4649      	mov	r1, r9
 8020a44:	2201      	movs	r2, #1
 8020a46:	1a41      	subs	r1, r0, r1
 8020a48:	4252      	negs	r2, r2
 8020a4a:	4461      	add	r1, ip
 8020a4c:	4694      	mov	ip, r2
 8020a4e:	44e2      	add	sl, ip
 8020a50:	4652      	mov	r2, sl
 8020a52:	1b2d      	subs	r5, r5, r4
 8020a54:	19ed      	adds	r5, r5, r7
 8020a56:	615d      	str	r5, [r3, #20]
 8020a58:	6199      	str	r1, [r3, #24]
 8020a5a:	3320      	adds	r3, #32
 8020a5c:	2a00      	cmp	r2, #0
 8020a5e:	d1c6      	bne.n	80209ee <arm_radix4_butterfly_q31+0x4c6>
 8020a60:	b027      	add	sp, #156	@ 0x9c
 8020a62:	bc3c      	pop	{r2, r3, r4, r5}
 8020a64:	4690      	mov	r8, r2
 8020a66:	4699      	mov	r9, r3
 8020a68:	46a2      	mov	sl, r4
 8020a6a:	46ab      	mov	fp, r5
 8020a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a6e:	469a      	mov	sl, r3
 8020a70:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020a72:	e7bc      	b.n	80209ee <arm_radix4_butterfly_q31+0x4c6>

08020a74 <arm_radix4_butterfly_inverse_q31>:
 8020a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a76:	464d      	mov	r5, r9
 8020a78:	4644      	mov	r4, r8
 8020a7a:	465f      	mov	r7, fp
 8020a7c:	4656      	mov	r6, sl
 8020a7e:	b4f0      	push	{r4, r5, r6, r7}
 8020a80:	b0a7      	sub	sp, #156	@ 0x9c
 8020a82:	469c      	mov	ip, r3
 8020a84:	9114      	str	r1, [sp, #80]	@ 0x50
 8020a86:	0889      	lsrs	r1, r1, #2
 8020a88:	9310      	str	r3, [sp, #64]	@ 0x40
 8020a8a:	00cb      	lsls	r3, r1, #3
 8020a8c:	0015      	movs	r5, r2
 8020a8e:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020a90:	18c2      	adds	r2, r0, r3
 8020a92:	000c      	movs	r4, r1
 8020a94:	9124      	str	r1, [sp, #144]	@ 0x90
 8020a96:	18d1      	adds	r1, r2, r3
 8020a98:	468b      	mov	fp, r1
 8020a9a:	469a      	mov	sl, r3
 8020a9c:	4663      	mov	r3, ip
 8020a9e:	44da      	add	sl, fp
 8020aa0:	46d0      	mov	r8, sl
 8020aa2:	4681      	mov	r9, r0
 8020aa4:	4692      	mov	sl, r2
 8020aa6:	0119      	lsls	r1, r3, #4
 8020aa8:	910d      	str	r1, [sp, #52]	@ 0x34
 8020aaa:	00d9      	lsls	r1, r3, #3
 8020aac:	005b      	lsls	r3, r3, #1
 8020aae:	4463      	add	r3, ip
 8020ab0:	910e      	str	r1, [sp, #56]	@ 0x38
 8020ab2:	00d9      	lsls	r1, r3, #3
 8020ab4:	9022      	str	r0, [sp, #136]	@ 0x88
 8020ab6:	9025      	str	r0, [sp, #148]	@ 0x94
 8020ab8:	910f      	str	r1, [sp, #60]	@ 0x3c
 8020aba:	9502      	str	r5, [sp, #8]
 8020abc:	9500      	str	r5, [sp, #0]
 8020abe:	9501      	str	r5, [sp, #4]
 8020ac0:	9409      	str	r4, [sp, #36]	@ 0x24
 8020ac2:	464b      	mov	r3, r9
 8020ac4:	681b      	ldr	r3, [r3, #0]
 8020ac6:	4652      	mov	r2, sl
 8020ac8:	111c      	asrs	r4, r3, #4
 8020aca:	465b      	mov	r3, fp
 8020acc:	4648      	mov	r0, r9
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	6812      	ldr	r2, [r2, #0]
 8020ad2:	6840      	ldr	r0, [r0, #4]
 8020ad4:	111b      	asrs	r3, r3, #4
 8020ad6:	18e7      	adds	r7, r4, r3
 8020ad8:	1ae3      	subs	r3, r4, r3
 8020ada:	1114      	asrs	r4, r2, #4
 8020adc:	4642      	mov	r2, r8
 8020ade:	1105      	asrs	r5, r0, #4
 8020ae0:	4658      	mov	r0, fp
 8020ae2:	6812      	ldr	r2, [r2, #0]
 8020ae4:	6840      	ldr	r0, [r0, #4]
 8020ae6:	9303      	str	r3, [sp, #12]
 8020ae8:	1113      	asrs	r3, r2, #4
 8020aea:	18e2      	adds	r2, r4, r3
 8020aec:	1103      	asrs	r3, r0, #4
 8020aee:	18ee      	adds	r6, r5, r3
 8020af0:	1ae8      	subs	r0, r5, r3
 8020af2:	464d      	mov	r5, r9
 8020af4:	18bb      	adds	r3, r7, r2
 8020af6:	602b      	str	r3, [r5, #0]
 8020af8:	4641      	mov	r1, r8
 8020afa:	4655      	mov	r5, sl
 8020afc:	6849      	ldr	r1, [r1, #4]
 8020afe:	686d      	ldr	r5, [r5, #4]
 8020b00:	110b      	asrs	r3, r1, #4
 8020b02:	112d      	asrs	r5, r5, #4
 8020b04:	18eb      	adds	r3, r5, r3
 8020b06:	464d      	mov	r5, r9
 8020b08:	18f1      	adds	r1, r6, r3
 8020b0a:	6069      	str	r1, [r5, #4]
 8020b0c:	4655      	mov	r5, sl
 8020b0e:	686d      	ldr	r5, [r5, #4]
 8020b10:	9004      	str	r0, [sp, #16]
 8020b12:	112c      	asrs	r4, r5, #4
 8020b14:	4645      	mov	r5, r8
 8020b16:	686d      	ldr	r5, [r5, #4]
 8020b18:	1129      	asrs	r1, r5, #4
 8020b1a:	1a65      	subs	r5, r4, r1
 8020b1c:	4651      	mov	r1, sl
 8020b1e:	6809      	ldr	r1, [r1, #0]
 8020b20:	1abc      	subs	r4, r7, r2
 8020b22:	1108      	asrs	r0, r1, #4
 8020b24:	4641      	mov	r1, r8
 8020b26:	17e2      	asrs	r2, r4, #31
 8020b28:	6809      	ldr	r1, [r1, #0]
 8020b2a:	9207      	str	r2, [sp, #28]
 8020b2c:	9a01      	ldr	r2, [sp, #4]
 8020b2e:	1109      	asrs	r1, r1, #4
 8020b30:	6817      	ldr	r7, [r2, #0]
 8020b32:	1a41      	subs	r1, r0, r1
 8020b34:	9106      	str	r1, [sp, #24]
 8020b36:	0039      	movs	r1, r7
 8020b38:	17ff      	asrs	r7, r7, #31
 8020b3a:	0038      	movs	r0, r7
 8020b3c:	9505      	str	r5, [sp, #20]
 8020b3e:	1af5      	subs	r5, r6, r3
 8020b40:	17ef      	asrs	r7, r5, #31
 8020b42:	970b      	str	r7, [sp, #44]	@ 0x2c
 8020b44:	6857      	ldr	r7, [r2, #4]
 8020b46:	0003      	movs	r3, r0
 8020b48:	17fe      	asrs	r6, r7, #31
 8020b4a:	000a      	movs	r2, r1
 8020b4c:	9108      	str	r1, [sp, #32]
 8020b4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020b50:	17e1      	asrs	r1, r4, #31
 8020b52:	0020      	movs	r0, r4
 8020b54:	960c      	str	r6, [sp, #48]	@ 0x30
 8020b56:	f7df fd33 	bl	80005c0 <__aeabi_lmul>
 8020b5a:	003a      	movs	r2, r7
 8020b5c:	17fb      	asrs	r3, r7, #31
 8020b5e:	000e      	movs	r6, r1
 8020b60:	0028      	movs	r0, r5
 8020b62:	17e9      	asrs	r1, r5, #31
 8020b64:	f7df fd2c 	bl	80005c0 <__aeabi_lmul>
 8020b68:	4653      	mov	r3, sl
 8020b6a:	1a76      	subs	r6, r6, r1
 8020b6c:	0076      	lsls	r6, r6, #1
 8020b6e:	601e      	str	r6, [r3, #0]
 8020b70:	002a      	movs	r2, r5
 8020b72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020b74:	9808      	ldr	r0, [sp, #32]
 8020b76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020b78:	f7df fd22 	bl	80005c0 <__aeabi_lmul>
 8020b7c:	003a      	movs	r2, r7
 8020b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b80:	000d      	movs	r5, r1
 8020b82:	0020      	movs	r0, r4
 8020b84:	9907      	ldr	r1, [sp, #28]
 8020b86:	f7df fd1b 	bl	80005c0 <__aeabi_lmul>
 8020b8a:	4657      	mov	r7, sl
 8020b8c:	186d      	adds	r5, r5, r1
 8020b8e:	006d      	lsls	r5, r5, #1
 8020b90:	607d      	str	r5, [r7, #4]
 8020b92:	9b03      	ldr	r3, [sp, #12]
 8020b94:	9e06      	ldr	r6, [sp, #24]
 8020b96:	9d05      	ldr	r5, [sp, #20]
 8020b98:	46b4      	mov	ip, r6
 8020b9a:	1b5d      	subs	r5, r3, r5
 8020b9c:	9b00      	ldr	r3, [sp, #0]
 8020b9e:	17ef      	asrs	r7, r5, #31
 8020ba0:	0039      	movs	r1, r7
 8020ba2:	681f      	ldr	r7, [r3, #0]
 8020ba4:	17fc      	asrs	r4, r7, #31
 8020ba6:	0020      	movs	r0, r4
 8020ba8:	9c04      	ldr	r4, [sp, #16]
 8020baa:	4464      	add	r4, ip
 8020bac:	17e6      	asrs	r6, r4, #31
 8020bae:	9407      	str	r4, [sp, #28]
 8020bb0:	9608      	str	r6, [sp, #32]
 8020bb2:	685e      	ldr	r6, [r3, #4]
 8020bb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020bb6:	17f2      	asrs	r2, r6, #31
 8020bb8:	0003      	movs	r3, r0
 8020bba:	920c      	str	r2, [sp, #48]	@ 0x30
 8020bbc:	0028      	movs	r0, r5
 8020bbe:	003a      	movs	r2, r7
 8020bc0:	910a      	str	r1, [sp, #40]	@ 0x28
 8020bc2:	f7df fcfd 	bl	80005c0 <__aeabi_lmul>
 8020bc6:	0032      	movs	r2, r6
 8020bc8:	17f3      	asrs	r3, r6, #31
 8020bca:	9807      	ldr	r0, [sp, #28]
 8020bcc:	000c      	movs	r4, r1
 8020bce:	9908      	ldr	r1, [sp, #32]
 8020bd0:	f7df fcf6 	bl	80005c0 <__aeabi_lmul>
 8020bd4:	4658      	mov	r0, fp
 8020bd6:	1a64      	subs	r4, r4, r1
 8020bd8:	0064      	lsls	r4, r4, #1
 8020bda:	9a07      	ldr	r2, [sp, #28]
 8020bdc:	6004      	str	r4, [r0, #0]
 8020bde:	9b08      	ldr	r3, [sp, #32]
 8020be0:	0038      	movs	r0, r7
 8020be2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020be4:	f7df fcec 	bl	80005c0 <__aeabi_lmul>
 8020be8:	0032      	movs	r2, r6
 8020bea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020bec:	000c      	movs	r4, r1
 8020bee:	0028      	movs	r0, r5
 8020bf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020bf2:	f7df fce5 	bl	80005c0 <__aeabi_lmul>
 8020bf6:	9d05      	ldr	r5, [sp, #20]
 8020bf8:	465f      	mov	r7, fp
 8020bfa:	46ac      	mov	ip, r5
 8020bfc:	1864      	adds	r4, r4, r1
 8020bfe:	9903      	ldr	r1, [sp, #12]
 8020c00:	0064      	lsls	r4, r4, #1
 8020c02:	4461      	add	r1, ip
 8020c04:	607c      	str	r4, [r7, #4]
 8020c06:	000c      	movs	r4, r1
 8020c08:	17c9      	asrs	r1, r1, #31
 8020c0a:	9105      	str	r1, [sp, #20]
 8020c0c:	9902      	ldr	r1, [sp, #8]
 8020c0e:	9804      	ldr	r0, [sp, #16]
 8020c10:	680d      	ldr	r5, [r1, #0]
 8020c12:	9e06      	ldr	r6, [sp, #24]
 8020c14:	002b      	movs	r3, r5
 8020c16:	17ed      	asrs	r5, r5, #31
 8020c18:	684f      	ldr	r7, [r1, #4]
 8020c1a:	9503      	str	r5, [sp, #12]
 8020c1c:	1b85      	subs	r5, r0, r6
 8020c1e:	17e8      	asrs	r0, r5, #31
 8020c20:	001a      	movs	r2, r3
 8020c22:	9006      	str	r0, [sp, #24]
 8020c24:	17fe      	asrs	r6, r7, #31
 8020c26:	9304      	str	r3, [sp, #16]
 8020c28:	0020      	movs	r0, r4
 8020c2a:	9b03      	ldr	r3, [sp, #12]
 8020c2c:	17e1      	asrs	r1, r4, #31
 8020c2e:	9607      	str	r6, [sp, #28]
 8020c30:	f7df fcc6 	bl	80005c0 <__aeabi_lmul>
 8020c34:	003a      	movs	r2, r7
 8020c36:	000e      	movs	r6, r1
 8020c38:	17fb      	asrs	r3, r7, #31
 8020c3a:	0028      	movs	r0, r5
 8020c3c:	17e9      	asrs	r1, r5, #31
 8020c3e:	f7df fcbf 	bl	80005c0 <__aeabi_lmul>
 8020c42:	4640      	mov	r0, r8
 8020c44:	1a76      	subs	r6, r6, r1
 8020c46:	0076      	lsls	r6, r6, #1
 8020c48:	002a      	movs	r2, r5
 8020c4a:	9b06      	ldr	r3, [sp, #24]
 8020c4c:	6006      	str	r6, [r0, #0]
 8020c4e:	9903      	ldr	r1, [sp, #12]
 8020c50:	9804      	ldr	r0, [sp, #16]
 8020c52:	f7df fcb5 	bl	80005c0 <__aeabi_lmul>
 8020c56:	0020      	movs	r0, r4
 8020c58:	2408      	movs	r4, #8
 8020c5a:	9b07      	ldr	r3, [sp, #28]
 8020c5c:	000d      	movs	r5, r1
 8020c5e:	003a      	movs	r2, r7
 8020c60:	9905      	ldr	r1, [sp, #20]
 8020c62:	f7df fcad 	bl	80005c0 <__aeabi_lmul>
 8020c66:	4640      	mov	r0, r8
 8020c68:	46a4      	mov	ip, r4
 8020c6a:	186d      	adds	r5, r5, r1
 8020c6c:	006d      	lsls	r5, r5, #1
 8020c6e:	6045      	str	r5, [r0, #4]
 8020c70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020c72:	44e1      	add	r9, ip
 8020c74:	3801      	subs	r0, #1
 8020c76:	9009      	str	r0, [sp, #36]	@ 0x24
 8020c78:	9a01      	ldr	r2, [sp, #4]
 8020c7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020c7c:	44e2      	add	sl, ip
 8020c7e:	44e3      	add	fp, ip
 8020c80:	44e0      	add	r8, ip
 8020c82:	46a4      	mov	ip, r4
 8020c84:	4462      	add	r2, ip
 8020c86:	9201      	str	r2, [sp, #4]
 8020c88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020c8a:	9b00      	ldr	r3, [sp, #0]
 8020c8c:	4694      	mov	ip, r2
 8020c8e:	4463      	add	r3, ip
 8020c90:	9300      	str	r3, [sp, #0]
 8020c92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c94:	9902      	ldr	r1, [sp, #8]
 8020c96:	469c      	mov	ip, r3
 8020c98:	4461      	add	r1, ip
 8020c9a:	9102      	str	r1, [sp, #8]
 8020c9c:	2800      	cmp	r0, #0
 8020c9e:	d000      	beq.n	8020ca2 <arm_radix4_butterfly_inverse_q31+0x22e>
 8020ca0:	e70f      	b.n	8020ac2 <arm_radix4_butterfly_inverse_q31+0x4e>
 8020ca2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020ca4:	009b      	lsls	r3, r3, #2
 8020ca6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020ca8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020caa:	9320      	str	r3, [sp, #128]	@ 0x80
 8020cac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020cae:	2b04      	cmp	r3, #4
 8020cb0:	d800      	bhi.n	8020cb4 <arm_radix4_butterfly_inverse_q31+0x240>
 8020cb2:	e17c      	b.n	8020fae <arm_radix4_butterfly_inverse_q31+0x53a>
 8020cb4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020cb6:	0893      	lsrs	r3, r2, #2
 8020cb8:	1e59      	subs	r1, r3, #1
 8020cba:	9321      	str	r3, [sp, #132]	@ 0x84
 8020cbc:	00db      	lsls	r3, r3, #3
 8020cbe:	931b      	str	r3, [sp, #108]	@ 0x6c
 8020cc0:	00d3      	lsls	r3, r2, #3
 8020cc2:	9300      	str	r3, [sp, #0]
 8020cc4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020cc6:	911a      	str	r1, [sp, #104]	@ 0x68
 8020cc8:	00da      	lsls	r2, r3, #3
 8020cca:	921e      	str	r2, [sp, #120]	@ 0x78
 8020ccc:	011a      	lsls	r2, r3, #4
 8020cce:	921d      	str	r2, [sp, #116]	@ 0x74
 8020cd0:	001a      	movs	r2, r3
 8020cd2:	4694      	mov	ip, r2
 8020cd4:	005b      	lsls	r3, r3, #1
 8020cd6:	4463      	add	r3, ip
 8020cd8:	00db      	lsls	r3, r3, #3
 8020cda:	931c      	str	r3, [sp, #112]	@ 0x70
 8020cdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020cde:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020ce0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ce2:	9318      	str	r3, [sp, #96]	@ 0x60
 8020ce4:	9319      	str	r3, [sp, #100]	@ 0x64
 8020ce6:	9316      	str	r3, [sp, #88]	@ 0x58
 8020ce8:	2300      	movs	r3, #0
 8020cea:	9315      	str	r3, [sp, #84]	@ 0x54
 8020cec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020cee:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020cf0:	681a      	ldr	r2, [r3, #0]
 8020cf2:	685b      	ldr	r3, [r3, #4]
 8020cf4:	9205      	str	r2, [sp, #20]
 8020cf6:	9306      	str	r3, [sp, #24]
 8020cf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020cfa:	468c      	mov	ip, r1
 8020cfc:	681a      	ldr	r2, [r3, #0]
 8020cfe:	685b      	ldr	r3, [r3, #4]
 8020d00:	9207      	str	r2, [sp, #28]
 8020d02:	9308      	str	r3, [sp, #32]
 8020d04:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020d06:	681a      	ldr	r2, [r3, #0]
 8020d08:	685b      	ldr	r3, [r3, #4]
 8020d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020d0c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d10:	0013      	movs	r3, r2
 8020d12:	4463      	add	r3, ip
 8020d14:	4698      	mov	r8, r3
 8020d16:	0013      	movs	r3, r2
 8020d18:	4442      	add	r2, r8
 8020d1a:	4691      	mov	r9, r2
 8020d1c:	001a      	movs	r2, r3
 8020d1e:	444a      	add	r2, r9
 8020d20:	4692      	mov	sl, r2
 8020d22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020d24:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8020d26:	4293      	cmp	r3, r2
 8020d28:	d800      	bhi.n	8020d2c <arm_radix4_butterfly_inverse_q31+0x2b8>
 8020d2a:	e0d9      	b.n	8020ee0 <arm_radix4_butterfly_inverse_q31+0x46c>
 8020d2c:	4694      	mov	ip, r2
 8020d2e:	4644      	mov	r4, r8
 8020d30:	4655      	mov	r5, sl
 8020d32:	4688      	mov	r8, r1
 8020d34:	9b07      	ldr	r3, [sp, #28]
 8020d36:	17db      	asrs	r3, r3, #31
 8020d38:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d3a:	9b08      	ldr	r3, [sp, #32]
 8020d3c:	17db      	asrs	r3, r3, #31
 8020d3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d40:	9b05      	ldr	r3, [sp, #20]
 8020d42:	17db      	asrs	r3, r3, #31
 8020d44:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d46:	9b06      	ldr	r3, [sp, #24]
 8020d48:	17db      	asrs	r3, r3, #31
 8020d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d4e:	17db      	asrs	r3, r3, #31
 8020d50:	9310      	str	r3, [sp, #64]	@ 0x40
 8020d52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d54:	17db      	asrs	r3, r3, #31
 8020d56:	9311      	str	r3, [sp, #68]	@ 0x44
 8020d58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020d5a:	4463      	add	r3, ip
 8020d5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020d5e:	4643      	mov	r3, r8
 8020d60:	4641      	mov	r1, r8
 8020d62:	681a      	ldr	r2, [r3, #0]
 8020d64:	464b      	mov	r3, r9
 8020d66:	684f      	ldr	r7, [r1, #4]
 8020d68:	4649      	mov	r1, r9
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	18d6      	adds	r6, r2, r3
 8020d6e:	1ad3      	subs	r3, r2, r3
 8020d70:	9301      	str	r3, [sp, #4]
 8020d72:	684b      	ldr	r3, [r1, #4]
 8020d74:	1af9      	subs	r1, r7, r3
 8020d76:	9102      	str	r1, [sp, #8]
 8020d78:	6829      	ldr	r1, [r5, #0]
 8020d7a:	18f8      	adds	r0, r7, r3
 8020d7c:	468c      	mov	ip, r1
 8020d7e:	6827      	ldr	r7, [r4, #0]
 8020d80:	4467      	add	r7, ip
 8020d82:	003a      	movs	r2, r7
 8020d84:	19f3      	adds	r3, r6, r7
 8020d86:	4647      	mov	r7, r8
 8020d88:	109b      	asrs	r3, r3, #2
 8020d8a:	603b      	str	r3, [r7, #0]
 8020d8c:	6869      	ldr	r1, [r5, #4]
 8020d8e:	6867      	ldr	r7, [r4, #4]
 8020d90:	468c      	mov	ip, r1
 8020d92:	4467      	add	r7, ip
 8020d94:	003b      	movs	r3, r7
 8020d96:	19c1      	adds	r1, r0, r7
 8020d98:	4647      	mov	r7, r8
 8020d9a:	1ab6      	subs	r6, r6, r2
 8020d9c:	1089      	asrs	r1, r1, #2
 8020d9e:	6079      	str	r1, [r7, #4]
 8020da0:	17f2      	asrs	r2, r6, #31
 8020da2:	9900      	ldr	r1, [sp, #0]
 8020da4:	4692      	mov	sl, r2
 8020da6:	468c      	mov	ip, r1
 8020da8:	6867      	ldr	r7, [r4, #4]
 8020daa:	6869      	ldr	r1, [r5, #4]
 8020dac:	44e0      	add	r8, ip
 8020dae:	1a7f      	subs	r7, r7, r1
 8020db0:	9703      	str	r7, [sp, #12]
 8020db2:	6821      	ldr	r1, [r4, #0]
 8020db4:	682f      	ldr	r7, [r5, #0]
 8020db6:	1bc9      	subs	r1, r1, r7
 8020db8:	1ac7      	subs	r7, r0, r3
 8020dba:	17fa      	asrs	r2, r7, #31
 8020dbc:	4693      	mov	fp, r2
 8020dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020dc0:	9a07      	ldr	r2, [sp, #28]
 8020dc2:	9104      	str	r1, [sp, #16]
 8020dc4:	0030      	movs	r0, r6
 8020dc6:	4651      	mov	r1, sl
 8020dc8:	f7df fbfa 	bl	80005c0 <__aeabi_lmul>
 8020dcc:	9a08      	ldr	r2, [sp, #32]
 8020dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020dd0:	9112      	str	r1, [sp, #72]	@ 0x48
 8020dd2:	0038      	movs	r0, r7
 8020dd4:	4659      	mov	r1, fp
 8020dd6:	f7df fbf3 	bl	80005c0 <__aeabi_lmul>
 8020dda:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020ddc:	9a07      	ldr	r2, [sp, #28]
 8020dde:	1a41      	subs	r1, r0, r1
 8020de0:	1049      	asrs	r1, r1, #1
 8020de2:	6021      	str	r1, [r4, #0]
 8020de4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020de6:	0038      	movs	r0, r7
 8020de8:	4659      	mov	r1, fp
 8020dea:	f7df fbe9 	bl	80005c0 <__aeabi_lmul>
 8020dee:	9a08      	ldr	r2, [sp, #32]
 8020df0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020df2:	000f      	movs	r7, r1
 8020df4:	0030      	movs	r0, r6
 8020df6:	4651      	mov	r1, sl
 8020df8:	f7df fbe2 	bl	80005c0 <__aeabi_lmul>
 8020dfc:	9b00      	ldr	r3, [sp, #0]
 8020dfe:	187f      	adds	r7, r7, r1
 8020e00:	469c      	mov	ip, r3
 8020e02:	107f      	asrs	r7, r7, #1
 8020e04:	6067      	str	r7, [r4, #4]
 8020e06:	9a01      	ldr	r2, [sp, #4]
 8020e08:	9f03      	ldr	r7, [sp, #12]
 8020e0a:	9802      	ldr	r0, [sp, #8]
 8020e0c:	1bd7      	subs	r7, r2, r7
 8020e0e:	17fe      	asrs	r6, r7, #31
 8020e10:	0031      	movs	r1, r6
 8020e12:	9e04      	ldr	r6, [sp, #16]
 8020e14:	4682      	mov	sl, r0
 8020e16:	4464      	add	r4, ip
 8020e18:	46b4      	mov	ip, r6
 8020e1a:	44e2      	add	sl, ip
 8020e1c:	4652      	mov	r2, sl
 8020e1e:	17d2      	asrs	r2, r2, #31
 8020e20:	4693      	mov	fp, r2
 8020e22:	0038      	movs	r0, r7
 8020e24:	9a05      	ldr	r2, [sp, #20]
 8020e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e28:	9112      	str	r1, [sp, #72]	@ 0x48
 8020e2a:	f7df fbc9 	bl	80005c0 <__aeabi_lmul>
 8020e2e:	9a06      	ldr	r2, [sp, #24]
 8020e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e32:	000e      	movs	r6, r1
 8020e34:	4650      	mov	r0, sl
 8020e36:	4659      	mov	r1, fp
 8020e38:	f7df fbc2 	bl	80005c0 <__aeabi_lmul>
 8020e3c:	4648      	mov	r0, r9
 8020e3e:	1a76      	subs	r6, r6, r1
 8020e40:	1076      	asrs	r6, r6, #1
 8020e42:	6006      	str	r6, [r0, #0]
 8020e44:	9a05      	ldr	r2, [sp, #20]
 8020e46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020e48:	4650      	mov	r0, sl
 8020e4a:	4659      	mov	r1, fp
 8020e4c:	f7df fbb8 	bl	80005c0 <__aeabi_lmul>
 8020e50:	9a06      	ldr	r2, [sp, #24]
 8020e52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e54:	000e      	movs	r6, r1
 8020e56:	0038      	movs	r0, r7
 8020e58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020e5a:	f7df fbb1 	bl	80005c0 <__aeabi_lmul>
 8020e5e:	9a00      	ldr	r2, [sp, #0]
 8020e60:	9f03      	ldr	r7, [sp, #12]
 8020e62:	4694      	mov	ip, r2
 8020e64:	1876      	adds	r6, r6, r1
 8020e66:	4649      	mov	r1, r9
 8020e68:	44e1      	add	r9, ip
 8020e6a:	46bc      	mov	ip, r7
 8020e6c:	9b01      	ldr	r3, [sp, #4]
 8020e6e:	1076      	asrs	r6, r6, #1
 8020e70:	4463      	add	r3, ip
 8020e72:	17df      	asrs	r7, r3, #31
 8020e74:	604e      	str	r6, [r1, #4]
 8020e76:	46ba      	mov	sl, r7
 8020e78:	001e      	movs	r6, r3
 8020e7a:	9802      	ldr	r0, [sp, #8]
 8020e7c:	9b04      	ldr	r3, [sp, #16]
 8020e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e80:	1ac7      	subs	r7, r0, r3
 8020e82:	17fb      	asrs	r3, r7, #31
 8020e84:	469b      	mov	fp, r3
 8020e86:	0030      	movs	r0, r6
 8020e88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020e8a:	4651      	mov	r1, sl
 8020e8c:	f7df fb98 	bl	80005c0 <__aeabi_lmul>
 8020e90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020e94:	9101      	str	r1, [sp, #4]
 8020e96:	0038      	movs	r0, r7
 8020e98:	4659      	mov	r1, fp
 8020e9a:	f7df fb91 	bl	80005c0 <__aeabi_lmul>
 8020e9e:	9801      	ldr	r0, [sp, #4]
 8020ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ea2:	1a41      	subs	r1, r0, r1
 8020ea4:	1049      	asrs	r1, r1, #1
 8020ea6:	6029      	str	r1, [r5, #0]
 8020ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020eaa:	0038      	movs	r0, r7
 8020eac:	4659      	mov	r1, fp
 8020eae:	f7df fb87 	bl	80005c0 <__aeabi_lmul>
 8020eb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020eb4:	000f      	movs	r7, r1
 8020eb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020eb8:	0030      	movs	r0, r6
 8020eba:	4651      	mov	r1, sl
 8020ebc:	f7df fb80 	bl	80005c0 <__aeabi_lmul>
 8020ec0:	187f      	adds	r7, r7, r1
 8020ec2:	107f      	asrs	r7, r7, #1
 8020ec4:	606f      	str	r7, [r5, #4]
 8020ec6:	9a00      	ldr	r2, [sp, #0]
 8020ec8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020eca:	4694      	mov	ip, r2
 8020ecc:	4465      	add	r5, ip
 8020ece:	468c      	mov	ip, r1
 8020ed0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020ed2:	0013      	movs	r3, r2
 8020ed4:	4462      	add	r2, ip
 8020ed6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020ed8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020eda:	429a      	cmp	r2, r3
 8020edc:	d900      	bls.n	8020ee0 <arm_radix4_butterfly_inverse_q31+0x46c>
 8020ede:	e73e      	b.n	8020d5e <arm_radix4_butterfly_inverse_q31+0x2ea>
 8020ee0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8020ee2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020ee4:	468c      	mov	ip, r1
 8020ee6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8020ee8:	4462      	add	r2, ip
 8020eea:	468c      	mov	ip, r1
 8020eec:	9216      	str	r2, [sp, #88]	@ 0x58
 8020eee:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8020ef0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020ef2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020ef4:	4462      	add	r2, ip
 8020ef6:	468c      	mov	ip, r1
 8020ef8:	9219      	str	r2, [sp, #100]	@ 0x64
 8020efa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020efc:	3301      	adds	r3, #1
 8020efe:	4462      	add	r2, ip
 8020f00:	9218      	str	r2, [sp, #96]	@ 0x60
 8020f02:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020f04:	9315      	str	r3, [sp, #84]	@ 0x54
 8020f06:	3208      	adds	r2, #8
 8020f08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020f0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020f0c:	4293      	cmp	r3, r2
 8020f0e:	d800      	bhi.n	8020f12 <arm_radix4_butterfly_inverse_q31+0x49e>
 8020f10:	e6ec      	b.n	8020cec <arm_radix4_butterfly_inverse_q31+0x278>
 8020f12:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8020f14:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8020f16:	009b      	lsls	r3, r3, #2
 8020f18:	931f      	str	r3, [sp, #124]	@ 0x7c
 8020f1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020f1c:	9213      	str	r2, [sp, #76]	@ 0x4c
 8020f1e:	089b      	lsrs	r3, r3, #2
 8020f20:	9320      	str	r3, [sp, #128]	@ 0x80
 8020f22:	2b04      	cmp	r3, #4
 8020f24:	d900      	bls.n	8020f28 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8020f26:	e6c5      	b.n	8020cb4 <arm_radix4_butterfly_inverse_q31+0x240>
 8020f28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020f2a:	469a      	mov	sl, r3
 8020f2c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020f2e:	681a      	ldr	r2, [r3, #0]
 8020f30:	6918      	ldr	r0, [r3, #16]
 8020f32:	4691      	mov	r9, r2
 8020f34:	464c      	mov	r4, r9
 8020f36:	4680      	mov	r8, r0
 8020f38:	69de      	ldr	r6, [r3, #28]
 8020f3a:	689d      	ldr	r5, [r3, #8]
 8020f3c:	46b4      	mov	ip, r6
 8020f3e:	6998      	ldr	r0, [r3, #24]
 8020f40:	1964      	adds	r4, r4, r5
 8020f42:	6859      	ldr	r1, [r3, #4]
 8020f44:	68da      	ldr	r2, [r3, #12]
 8020f46:	4444      	add	r4, r8
 8020f48:	695f      	ldr	r7, [r3, #20]
 8020f4a:	1824      	adds	r4, r4, r0
 8020f4c:	601c      	str	r4, [r3, #0]
 8020f4e:	188c      	adds	r4, r1, r2
 8020f50:	19e4      	adds	r4, r4, r7
 8020f52:	4464      	add	r4, ip
 8020f54:	605c      	str	r4, [r3, #4]
 8020f56:	464c      	mov	r4, r9
 8020f58:	1b64      	subs	r4, r4, r5
 8020f5a:	4444      	add	r4, r8
 8020f5c:	1a24      	subs	r4, r4, r0
 8020f5e:	609c      	str	r4, [r3, #8]
 8020f60:	1a8c      	subs	r4, r1, r2
 8020f62:	19e4      	adds	r4, r4, r7
 8020f64:	1ba4      	subs	r4, r4, r6
 8020f66:	60dc      	str	r4, [r3, #12]
 8020f68:	464c      	mov	r4, r9
 8020f6a:	4646      	mov	r6, r8
 8020f6c:	1aa4      	subs	r4, r4, r2
 8020f6e:	1ba4      	subs	r4, r4, r6
 8020f70:	4464      	add	r4, ip
 8020f72:	611c      	str	r4, [r3, #16]
 8020f74:	194c      	adds	r4, r1, r5
 8020f76:	1be4      	subs	r4, r4, r7
 8020f78:	1a24      	subs	r4, r4, r0
 8020f7a:	615c      	str	r4, [r3, #20]
 8020f7c:	4644      	mov	r4, r8
 8020f7e:	4666      	mov	r6, ip
 8020f80:	444a      	add	r2, r9
 8020f82:	1b12      	subs	r2, r2, r4
 8020f84:	1b92      	subs	r2, r2, r6
 8020f86:	619a      	str	r2, [r3, #24]
 8020f88:	1b4a      	subs	r2, r1, r5
 8020f8a:	1bd1      	subs	r1, r2, r7
 8020f8c:	2201      	movs	r2, #1
 8020f8e:	4252      	negs	r2, r2
 8020f90:	4694      	mov	ip, r2
 8020f92:	44e2      	add	sl, ip
 8020f94:	4652      	mov	r2, sl
 8020f96:	1809      	adds	r1, r1, r0
 8020f98:	61d9      	str	r1, [r3, #28]
 8020f9a:	3320      	adds	r3, #32
 8020f9c:	2a00      	cmp	r2, #0
 8020f9e:	d1c6      	bne.n	8020f2e <arm_radix4_butterfly_inverse_q31+0x4ba>
 8020fa0:	b027      	add	sp, #156	@ 0x9c
 8020fa2:	bc3c      	pop	{r2, r3, r4, r5}
 8020fa4:	4690      	mov	r8, r2
 8020fa6:	4699      	mov	r9, r3
 8020fa8:	46a2      	mov	sl, r4
 8020faa:	46ab      	mov	fp, r5
 8020fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fae:	469a      	mov	sl, r3
 8020fb0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020fb2:	e7bc      	b.n	8020f2e <arm_radix4_butterfly_inverse_q31+0x4ba>

08020fb4 <arm_cmplx_mag_squared_q31>:
 8020fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fb6:	464f      	mov	r7, r9
 8020fb8:	4646      	mov	r6, r8
 8020fba:	0004      	movs	r4, r0
 8020fbc:	b4c0      	push	{r6, r7}
 8020fbe:	0016      	movs	r6, r2
 8020fc0:	000f      	movs	r7, r1
 8020fc2:	2a00      	cmp	r2, #0
 8020fc4:	d018      	beq.n	8020ff8 <arm_cmplx_mag_squared_q31+0x44>
 8020fc6:	6823      	ldr	r3, [r4, #0]
 8020fc8:	6822      	ldr	r2, [r4, #0]
 8020fca:	17d9      	asrs	r1, r3, #31
 8020fcc:	6863      	ldr	r3, [r4, #4]
 8020fce:	0010      	movs	r0, r2
 8020fd0:	4698      	mov	r8, r3
 8020fd2:	17db      	asrs	r3, r3, #31
 8020fd4:	4699      	mov	r9, r3
 8020fd6:	000b      	movs	r3, r1
 8020fd8:	f7df faf2 	bl	80005c0 <__aeabi_lmul>
 8020fdc:	4642      	mov	r2, r8
 8020fde:	104d      	asrs	r5, r1, #1
 8020fe0:	464b      	mov	r3, r9
 8020fe2:	4640      	mov	r0, r8
 8020fe4:	4649      	mov	r1, r9
 8020fe6:	f7df faeb 	bl	80005c0 <__aeabi_lmul>
 8020fea:	1049      	asrs	r1, r1, #1
 8020fec:	1869      	adds	r1, r5, r1
 8020fee:	3e01      	subs	r6, #1
 8020ff0:	c702      	stmia	r7!, {r1}
 8020ff2:	3408      	adds	r4, #8
 8020ff4:	2e00      	cmp	r6, #0
 8020ff6:	d1e6      	bne.n	8020fc6 <arm_cmplx_mag_squared_q31+0x12>
 8020ff8:	bc0c      	pop	{r2, r3}
 8020ffa:	4690      	mov	r8, r2
 8020ffc:	4699      	mov	r9, r3
 8020ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021000 <arm_mult_q31>:
 8021000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021002:	4646      	mov	r6, r8
 8021004:	464f      	mov	r7, r9
 8021006:	4690      	mov	r8, r2
 8021008:	b4c0      	push	{r6, r7}
 802100a:	001d      	movs	r5, r3
 802100c:	0006      	movs	r6, r0
 802100e:	000f      	movs	r7, r1
 8021010:	2400      	movs	r4, #0
 8021012:	2b00      	cmp	r3, #0
 8021014:	d020      	beq.n	8021058 <arm_mult_q31+0x58>
 8021016:	4b12      	ldr	r3, [pc, #72]	@ (8021060 <arm_mult_q31+0x60>)
 8021018:	4699      	mov	r9, r3
 802101a:	e007      	b.n	802102c <arm_mult_q31+0x2c>
 802101c:	464b      	mov	r3, r9
 802101e:	4059      	eors	r1, r3
 8021020:	4643      	mov	r3, r8
 8021022:	3d01      	subs	r5, #1
 8021024:	5119      	str	r1, [r3, r4]
 8021026:	3404      	adds	r4, #4
 8021028:	2d00      	cmp	r5, #0
 802102a:	d015      	beq.n	8021058 <arm_mult_q31+0x58>
 802102c:	5933      	ldr	r3, [r6, r4]
 802102e:	593a      	ldr	r2, [r7, r4]
 8021030:	17d9      	asrs	r1, r3, #31
 8021032:	593b      	ldr	r3, [r7, r4]
 8021034:	5930      	ldr	r0, [r6, r4]
 8021036:	17db      	asrs	r3, r3, #31
 8021038:	f7df fac2 	bl	80005c0 <__aeabi_lmul>
 802103c:	004b      	lsls	r3, r1, #1
 802103e:	0fc0      	lsrs	r0, r0, #31
 8021040:	4318      	orrs	r0, r3
 8021042:	17c9      	asrs	r1, r1, #31
 8021044:	17c3      	asrs	r3, r0, #31
 8021046:	428b      	cmp	r3, r1
 8021048:	d1e8      	bne.n	802101c <arm_mult_q31+0x1c>
 802104a:	0001      	movs	r1, r0
 802104c:	4643      	mov	r3, r8
 802104e:	3d01      	subs	r5, #1
 8021050:	5119      	str	r1, [r3, r4]
 8021052:	3404      	adds	r4, #4
 8021054:	2d00      	cmp	r5, #0
 8021056:	d1e9      	bne.n	802102c <arm_mult_q31+0x2c>
 8021058:	bc0c      	pop	{r2, r3}
 802105a:	4690      	mov	r8, r2
 802105c:	4699      	mov	r9, r3
 802105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021060:	7fffffff 	.word	0x7fffffff

08021064 <arm_add_q31>:
 8021064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021066:	465f      	mov	r7, fp
 8021068:	4656      	mov	r6, sl
 802106a:	464d      	mov	r5, r9
 802106c:	4644      	mov	r4, r8
 802106e:	b4f0      	push	{r4, r5, r6, r7}
 8021070:	4693      	mov	fp, r2
 8021072:	b083      	sub	sp, #12
 8021074:	4681      	mov	r9, r0
 8021076:	468a      	mov	sl, r1
 8021078:	4698      	mov	r8, r3
 802107a:	2200      	movs	r2, #0
 802107c:	2b00      	cmp	r3, #0
 802107e:	d020      	beq.n	80210c2 <arm_add_q31+0x5e>
 8021080:	4649      	mov	r1, r9
 8021082:	4653      	mov	r3, sl
 8021084:	588e      	ldr	r6, [r1, r2]
 8021086:	589b      	ldr	r3, [r3, r2]
 8021088:	17f7      	asrs	r7, r6, #31
 802108a:	001c      	movs	r4, r3
 802108c:	0030      	movs	r0, r6
 802108e:	0039      	movs	r1, r7
 8021090:	17dd      	asrs	r5, r3, #31
 8021092:	46b4      	mov	ip, r6
 8021094:	1900      	adds	r0, r0, r4
 8021096:	4169      	adcs	r1, r5
 8021098:	4463      	add	r3, ip
 802109a:	9000      	str	r0, [sp, #0]
 802109c:	9101      	str	r1, [sp, #4]
 802109e:	17d9      	asrs	r1, r3, #31
 80210a0:	468c      	mov	ip, r1
 80210a2:	9901      	ldr	r1, [sp, #4]
 80210a4:	458c      	cmp	ip, r1
 80210a6:	d002      	beq.n	80210ae <arm_add_q31+0x4a>
 80210a8:	17cb      	asrs	r3, r1, #31
 80210aa:	4909      	ldr	r1, [pc, #36]	@ (80210d0 <arm_add_q31+0x6c>)
 80210ac:	404b      	eors	r3, r1
 80210ae:	4659      	mov	r1, fp
 80210b0:	508b      	str	r3, [r1, r2]
 80210b2:	2301      	movs	r3, #1
 80210b4:	425b      	negs	r3, r3
 80210b6:	469c      	mov	ip, r3
 80210b8:	44e0      	add	r8, ip
 80210ba:	4643      	mov	r3, r8
 80210bc:	3204      	adds	r2, #4
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d1de      	bne.n	8021080 <arm_add_q31+0x1c>
 80210c2:	b003      	add	sp, #12
 80210c4:	bc3c      	pop	{r2, r3, r4, r5}
 80210c6:	4690      	mov	r8, r2
 80210c8:	4699      	mov	r9, r3
 80210ca:	46a2      	mov	sl, r4
 80210cc:	46ab      	mov	fp, r5
 80210ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210d0:	7fffffff 	.word	0x7fffffff

080210d4 <atof>:
 80210d4:	b510      	push	{r4, lr}
 80210d6:	2100      	movs	r1, #0
 80210d8:	f000 fe12 	bl	8021d00 <strtod>
 80210dc:	bd10      	pop	{r4, pc}

080210de <atoi>:
 80210de:	b510      	push	{r4, lr}
 80210e0:	220a      	movs	r2, #10
 80210e2:	2100      	movs	r1, #0
 80210e4:	f000 fea4 	bl	8021e30 <strtol>
 80210e8:	bd10      	pop	{r4, pc}
	...

080210ec <sulp>:
 80210ec:	b570      	push	{r4, r5, r6, lr}
 80210ee:	0016      	movs	r6, r2
 80210f0:	000d      	movs	r5, r1
 80210f2:	f003 fd15 	bl	8024b20 <__ulp>
 80210f6:	2e00      	cmp	r6, #0
 80210f8:	d00d      	beq.n	8021116 <sulp+0x2a>
 80210fa:	236b      	movs	r3, #107	@ 0x6b
 80210fc:	006a      	lsls	r2, r5, #1
 80210fe:	0d52      	lsrs	r2, r2, #21
 8021100:	1a9b      	subs	r3, r3, r2
 8021102:	2b00      	cmp	r3, #0
 8021104:	dd07      	ble.n	8021116 <sulp+0x2a>
 8021106:	2400      	movs	r4, #0
 8021108:	4a03      	ldr	r2, [pc, #12]	@ (8021118 <sulp+0x2c>)
 802110a:	051b      	lsls	r3, r3, #20
 802110c:	189d      	adds	r5, r3, r2
 802110e:	002b      	movs	r3, r5
 8021110:	0022      	movs	r2, r4
 8021112:	f7e1 fa93 	bl	800263c <__aeabi_dmul>
 8021116:	bd70      	pop	{r4, r5, r6, pc}
 8021118:	3ff00000 	.word	0x3ff00000

0802111c <_strtod_l>:
 802111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802111e:	b0a3      	sub	sp, #140	@ 0x8c
 8021120:	921b      	str	r2, [sp, #108]	@ 0x6c
 8021122:	2200      	movs	r2, #0
 8021124:	2600      	movs	r6, #0
 8021126:	2700      	movs	r7, #0
 8021128:	9005      	str	r0, [sp, #20]
 802112a:	9109      	str	r1, [sp, #36]	@ 0x24
 802112c:	921e      	str	r2, [sp, #120]	@ 0x78
 802112e:	911d      	str	r1, [sp, #116]	@ 0x74
 8021130:	780a      	ldrb	r2, [r1, #0]
 8021132:	2a2b      	cmp	r2, #43	@ 0x2b
 8021134:	d053      	beq.n	80211de <_strtod_l+0xc2>
 8021136:	d83f      	bhi.n	80211b8 <_strtod_l+0x9c>
 8021138:	2a0d      	cmp	r2, #13
 802113a:	d839      	bhi.n	80211b0 <_strtod_l+0x94>
 802113c:	2a08      	cmp	r2, #8
 802113e:	d839      	bhi.n	80211b4 <_strtod_l+0x98>
 8021140:	2a00      	cmp	r2, #0
 8021142:	d042      	beq.n	80211ca <_strtod_l+0xae>
 8021144:	2200      	movs	r2, #0
 8021146:	9212      	str	r2, [sp, #72]	@ 0x48
 8021148:	2100      	movs	r1, #0
 802114a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802114c:	910c      	str	r1, [sp, #48]	@ 0x30
 802114e:	782a      	ldrb	r2, [r5, #0]
 8021150:	2a30      	cmp	r2, #48	@ 0x30
 8021152:	d000      	beq.n	8021156 <_strtod_l+0x3a>
 8021154:	e083      	b.n	802125e <_strtod_l+0x142>
 8021156:	786a      	ldrb	r2, [r5, #1]
 8021158:	3120      	adds	r1, #32
 802115a:	438a      	bics	r2, r1
 802115c:	2a58      	cmp	r2, #88	@ 0x58
 802115e:	d000      	beq.n	8021162 <_strtod_l+0x46>
 8021160:	e073      	b.n	802124a <_strtod_l+0x12e>
 8021162:	9302      	str	r3, [sp, #8]
 8021164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8021166:	4a95      	ldr	r2, [pc, #596]	@ (80213bc <_strtod_l+0x2a0>)
 8021168:	9301      	str	r3, [sp, #4]
 802116a:	ab1e      	add	r3, sp, #120	@ 0x78
 802116c:	9300      	str	r3, [sp, #0]
 802116e:	9805      	ldr	r0, [sp, #20]
 8021170:	ab1f      	add	r3, sp, #124	@ 0x7c
 8021172:	a91d      	add	r1, sp, #116	@ 0x74
 8021174:	f002 fd84 	bl	8023c80 <__gethex>
 8021178:	230f      	movs	r3, #15
 802117a:	0002      	movs	r2, r0
 802117c:	401a      	ands	r2, r3
 802117e:	0004      	movs	r4, r0
 8021180:	9206      	str	r2, [sp, #24]
 8021182:	4218      	tst	r0, r3
 8021184:	d005      	beq.n	8021192 <_strtod_l+0x76>
 8021186:	2a06      	cmp	r2, #6
 8021188:	d12b      	bne.n	80211e2 <_strtod_l+0xc6>
 802118a:	2300      	movs	r3, #0
 802118c:	3501      	adds	r5, #1
 802118e:	951d      	str	r5, [sp, #116]	@ 0x74
 8021190:	9312      	str	r3, [sp, #72]	@ 0x48
 8021192:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021194:	2b00      	cmp	r3, #0
 8021196:	d002      	beq.n	802119e <_strtod_l+0x82>
 8021198:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802119a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802119c:	6013      	str	r3, [r2, #0]
 802119e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d019      	beq.n	80211d8 <_strtod_l+0xbc>
 80211a4:	2380      	movs	r3, #128	@ 0x80
 80211a6:	0030      	movs	r0, r6
 80211a8:	061b      	lsls	r3, r3, #24
 80211aa:	18f9      	adds	r1, r7, r3
 80211ac:	b023      	add	sp, #140	@ 0x8c
 80211ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211b0:	2a20      	cmp	r2, #32
 80211b2:	d1c7      	bne.n	8021144 <_strtod_l+0x28>
 80211b4:	3101      	adds	r1, #1
 80211b6:	e7ba      	b.n	802112e <_strtod_l+0x12>
 80211b8:	2a2d      	cmp	r2, #45	@ 0x2d
 80211ba:	d1c3      	bne.n	8021144 <_strtod_l+0x28>
 80211bc:	3a2c      	subs	r2, #44	@ 0x2c
 80211be:	9212      	str	r2, [sp, #72]	@ 0x48
 80211c0:	1c4a      	adds	r2, r1, #1
 80211c2:	921d      	str	r2, [sp, #116]	@ 0x74
 80211c4:	784a      	ldrb	r2, [r1, #1]
 80211c6:	2a00      	cmp	r2, #0
 80211c8:	d1be      	bne.n	8021148 <_strtod_l+0x2c>
 80211ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211cc:	931d      	str	r3, [sp, #116]	@ 0x74
 80211ce:	2300      	movs	r3, #0
 80211d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80211d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d1df      	bne.n	8021198 <_strtod_l+0x7c>
 80211d8:	0030      	movs	r0, r6
 80211da:	0039      	movs	r1, r7
 80211dc:	e7e6      	b.n	80211ac <_strtod_l+0x90>
 80211de:	2200      	movs	r2, #0
 80211e0:	e7ed      	b.n	80211be <_strtod_l+0xa2>
 80211e2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80211e4:	2a00      	cmp	r2, #0
 80211e6:	d007      	beq.n	80211f8 <_strtod_l+0xdc>
 80211e8:	2135      	movs	r1, #53	@ 0x35
 80211ea:	a820      	add	r0, sp, #128	@ 0x80
 80211ec:	f003 fd8e 	bl	8024d0c <__copybits>
 80211f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80211f2:	9805      	ldr	r0, [sp, #20]
 80211f4:	f003 f948 	bl	8024488 <_Bfree>
 80211f8:	9806      	ldr	r0, [sp, #24]
 80211fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80211fc:	3801      	subs	r0, #1
 80211fe:	2804      	cmp	r0, #4
 8021200:	d806      	bhi.n	8021210 <_strtod_l+0xf4>
 8021202:	f7de ffbb 	bl	800017c <__gnu_thumb1_case_uqi>
 8021206:	0312      	.short	0x0312
 8021208:	1e1c      	.short	0x1e1c
 802120a:	12          	.byte	0x12
 802120b:	00          	.byte	0x00
 802120c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802120e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8021210:	05e4      	lsls	r4, r4, #23
 8021212:	d502      	bpl.n	802121a <_strtod_l+0xfe>
 8021214:	2380      	movs	r3, #128	@ 0x80
 8021216:	061b      	lsls	r3, r3, #24
 8021218:	431f      	orrs	r7, r3
 802121a:	4b69      	ldr	r3, [pc, #420]	@ (80213c0 <_strtod_l+0x2a4>)
 802121c:	423b      	tst	r3, r7
 802121e:	d1b8      	bne.n	8021192 <_strtod_l+0x76>
 8021220:	f001 fdb2 	bl	8022d88 <__errno>
 8021224:	2322      	movs	r3, #34	@ 0x22
 8021226:	6003      	str	r3, [r0, #0]
 8021228:	e7b3      	b.n	8021192 <_strtod_l+0x76>
 802122a:	4966      	ldr	r1, [pc, #408]	@ (80213c4 <_strtod_l+0x2a8>)
 802122c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802122e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8021230:	400a      	ands	r2, r1
 8021232:	4965      	ldr	r1, [pc, #404]	@ (80213c8 <_strtod_l+0x2ac>)
 8021234:	185b      	adds	r3, r3, r1
 8021236:	051b      	lsls	r3, r3, #20
 8021238:	431a      	orrs	r2, r3
 802123a:	0017      	movs	r7, r2
 802123c:	e7e8      	b.n	8021210 <_strtod_l+0xf4>
 802123e:	4f60      	ldr	r7, [pc, #384]	@ (80213c0 <_strtod_l+0x2a4>)
 8021240:	e7e6      	b.n	8021210 <_strtod_l+0xf4>
 8021242:	2601      	movs	r6, #1
 8021244:	4f61      	ldr	r7, [pc, #388]	@ (80213cc <_strtod_l+0x2b0>)
 8021246:	4276      	negs	r6, r6
 8021248:	e7e2      	b.n	8021210 <_strtod_l+0xf4>
 802124a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802124c:	1c5a      	adds	r2, r3, #1
 802124e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021250:	785b      	ldrb	r3, [r3, #1]
 8021252:	2b30      	cmp	r3, #48	@ 0x30
 8021254:	d0f9      	beq.n	802124a <_strtod_l+0x12e>
 8021256:	2b00      	cmp	r3, #0
 8021258:	d09b      	beq.n	8021192 <_strtod_l+0x76>
 802125a:	2301      	movs	r3, #1
 802125c:	930c      	str	r3, [sp, #48]	@ 0x30
 802125e:	2500      	movs	r5, #0
 8021260:	220a      	movs	r2, #10
 8021262:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021264:	950d      	str	r5, [sp, #52]	@ 0x34
 8021266:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021268:	9508      	str	r5, [sp, #32]
 802126a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802126c:	7804      	ldrb	r4, [r0, #0]
 802126e:	0023      	movs	r3, r4
 8021270:	3b30      	subs	r3, #48	@ 0x30
 8021272:	b2d9      	uxtb	r1, r3
 8021274:	2909      	cmp	r1, #9
 8021276:	d927      	bls.n	80212c8 <_strtod_l+0x1ac>
 8021278:	2201      	movs	r2, #1
 802127a:	4955      	ldr	r1, [pc, #340]	@ (80213d0 <_strtod_l+0x2b4>)
 802127c:	f001 fcf6 	bl	8022c6c <strncmp>
 8021280:	2800      	cmp	r0, #0
 8021282:	d031      	beq.n	80212e8 <_strtod_l+0x1cc>
 8021284:	2000      	movs	r0, #0
 8021286:	0023      	movs	r3, r4
 8021288:	4684      	mov	ip, r0
 802128a:	9a08      	ldr	r2, [sp, #32]
 802128c:	900e      	str	r0, [sp, #56]	@ 0x38
 802128e:	9206      	str	r2, [sp, #24]
 8021290:	2220      	movs	r2, #32
 8021292:	0019      	movs	r1, r3
 8021294:	4391      	bics	r1, r2
 8021296:	000a      	movs	r2, r1
 8021298:	2100      	movs	r1, #0
 802129a:	9107      	str	r1, [sp, #28]
 802129c:	2a45      	cmp	r2, #69	@ 0x45
 802129e:	d000      	beq.n	80212a2 <_strtod_l+0x186>
 80212a0:	e0c0      	b.n	8021424 <_strtod_l+0x308>
 80212a2:	9b06      	ldr	r3, [sp, #24]
 80212a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80212a6:	4303      	orrs	r3, r0
 80212a8:	4313      	orrs	r3, r2
 80212aa:	428b      	cmp	r3, r1
 80212ac:	d08d      	beq.n	80211ca <_strtod_l+0xae>
 80212ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80212b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80212b2:	3301      	adds	r3, #1
 80212b4:	931d      	str	r3, [sp, #116]	@ 0x74
 80212b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80212b8:	785b      	ldrb	r3, [r3, #1]
 80212ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80212bc:	d070      	beq.n	80213a0 <_strtod_l+0x284>
 80212be:	000c      	movs	r4, r1
 80212c0:	2b2d      	cmp	r3, #45	@ 0x2d
 80212c2:	d173      	bne.n	80213ac <_strtod_l+0x290>
 80212c4:	2401      	movs	r4, #1
 80212c6:	e06c      	b.n	80213a2 <_strtod_l+0x286>
 80212c8:	9908      	ldr	r1, [sp, #32]
 80212ca:	2908      	cmp	r1, #8
 80212cc:	dc09      	bgt.n	80212e2 <_strtod_l+0x1c6>
 80212ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80212d0:	4351      	muls	r1, r2
 80212d2:	185b      	adds	r3, r3, r1
 80212d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80212d6:	9b08      	ldr	r3, [sp, #32]
 80212d8:	3001      	adds	r0, #1
 80212da:	3301      	adds	r3, #1
 80212dc:	9308      	str	r3, [sp, #32]
 80212de:	901d      	str	r0, [sp, #116]	@ 0x74
 80212e0:	e7c3      	b.n	802126a <_strtod_l+0x14e>
 80212e2:	4355      	muls	r5, r2
 80212e4:	195d      	adds	r5, r3, r5
 80212e6:	e7f6      	b.n	80212d6 <_strtod_l+0x1ba>
 80212e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80212ea:	1c5a      	adds	r2, r3, #1
 80212ec:	921d      	str	r2, [sp, #116]	@ 0x74
 80212ee:	9a08      	ldr	r2, [sp, #32]
 80212f0:	785b      	ldrb	r3, [r3, #1]
 80212f2:	2a00      	cmp	r2, #0
 80212f4:	d03a      	beq.n	802136c <_strtod_l+0x250>
 80212f6:	900e      	str	r0, [sp, #56]	@ 0x38
 80212f8:	9206      	str	r2, [sp, #24]
 80212fa:	001a      	movs	r2, r3
 80212fc:	3a30      	subs	r2, #48	@ 0x30
 80212fe:	2a09      	cmp	r2, #9
 8021300:	d912      	bls.n	8021328 <_strtod_l+0x20c>
 8021302:	2201      	movs	r2, #1
 8021304:	4694      	mov	ip, r2
 8021306:	e7c3      	b.n	8021290 <_strtod_l+0x174>
 8021308:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802130a:	3001      	adds	r0, #1
 802130c:	1c5a      	adds	r2, r3, #1
 802130e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021310:	785b      	ldrb	r3, [r3, #1]
 8021312:	2b30      	cmp	r3, #48	@ 0x30
 8021314:	d0f8      	beq.n	8021308 <_strtod_l+0x1ec>
 8021316:	001a      	movs	r2, r3
 8021318:	3a31      	subs	r2, #49	@ 0x31
 802131a:	2a08      	cmp	r2, #8
 802131c:	d83b      	bhi.n	8021396 <_strtod_l+0x27a>
 802131e:	900e      	str	r0, [sp, #56]	@ 0x38
 8021320:	2000      	movs	r0, #0
 8021322:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8021324:	9006      	str	r0, [sp, #24]
 8021326:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021328:	001a      	movs	r2, r3
 802132a:	1c41      	adds	r1, r0, #1
 802132c:	3a30      	subs	r2, #48	@ 0x30
 802132e:	2b30      	cmp	r3, #48	@ 0x30
 8021330:	d016      	beq.n	8021360 <_strtod_l+0x244>
 8021332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021334:	185b      	adds	r3, r3, r1
 8021336:	930e      	str	r3, [sp, #56]	@ 0x38
 8021338:	9b06      	ldr	r3, [sp, #24]
 802133a:	210a      	movs	r1, #10
 802133c:	469c      	mov	ip, r3
 802133e:	4484      	add	ip, r0
 8021340:	459c      	cmp	ip, r3
 8021342:	d115      	bne.n	8021370 <_strtod_l+0x254>
 8021344:	9906      	ldr	r1, [sp, #24]
 8021346:	9b06      	ldr	r3, [sp, #24]
 8021348:	3101      	adds	r1, #1
 802134a:	1809      	adds	r1, r1, r0
 802134c:	181b      	adds	r3, r3, r0
 802134e:	9106      	str	r1, [sp, #24]
 8021350:	2b08      	cmp	r3, #8
 8021352:	dc19      	bgt.n	8021388 <_strtod_l+0x26c>
 8021354:	230a      	movs	r3, #10
 8021356:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021358:	434b      	muls	r3, r1
 802135a:	2100      	movs	r1, #0
 802135c:	18d3      	adds	r3, r2, r3
 802135e:	930d      	str	r3, [sp, #52]	@ 0x34
 8021360:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021362:	0008      	movs	r0, r1
 8021364:	1c5a      	adds	r2, r3, #1
 8021366:	921d      	str	r2, [sp, #116]	@ 0x74
 8021368:	785b      	ldrb	r3, [r3, #1]
 802136a:	e7c6      	b.n	80212fa <_strtod_l+0x1de>
 802136c:	9808      	ldr	r0, [sp, #32]
 802136e:	e7d0      	b.n	8021312 <_strtod_l+0x1f6>
 8021370:	1c5c      	adds	r4, r3, #1
 8021372:	2b08      	cmp	r3, #8
 8021374:	dc04      	bgt.n	8021380 <_strtod_l+0x264>
 8021376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021378:	434b      	muls	r3, r1
 802137a:	930d      	str	r3, [sp, #52]	@ 0x34
 802137c:	0023      	movs	r3, r4
 802137e:	e7df      	b.n	8021340 <_strtod_l+0x224>
 8021380:	2c10      	cmp	r4, #16
 8021382:	dcfb      	bgt.n	802137c <_strtod_l+0x260>
 8021384:	434d      	muls	r5, r1
 8021386:	e7f9      	b.n	802137c <_strtod_l+0x260>
 8021388:	2100      	movs	r1, #0
 802138a:	2b0f      	cmp	r3, #15
 802138c:	dce8      	bgt.n	8021360 <_strtod_l+0x244>
 802138e:	230a      	movs	r3, #10
 8021390:	435d      	muls	r5, r3
 8021392:	1955      	adds	r5, r2, r5
 8021394:	e7e4      	b.n	8021360 <_strtod_l+0x244>
 8021396:	2200      	movs	r2, #0
 8021398:	920e      	str	r2, [sp, #56]	@ 0x38
 802139a:	9206      	str	r2, [sp, #24]
 802139c:	3201      	adds	r2, #1
 802139e:	e7b1      	b.n	8021304 <_strtod_l+0x1e8>
 80213a0:	2400      	movs	r4, #0
 80213a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213a4:	3302      	adds	r3, #2
 80213a6:	931d      	str	r3, [sp, #116]	@ 0x74
 80213a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213aa:	789b      	ldrb	r3, [r3, #2]
 80213ac:	001a      	movs	r2, r3
 80213ae:	3a30      	subs	r2, #48	@ 0x30
 80213b0:	2a09      	cmp	r2, #9
 80213b2:	d913      	bls.n	80213dc <_strtod_l+0x2c0>
 80213b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80213b6:	921d      	str	r2, [sp, #116]	@ 0x74
 80213b8:	2200      	movs	r2, #0
 80213ba:	e032      	b.n	8021422 <_strtod_l+0x306>
 80213bc:	080296f0 	.word	0x080296f0
 80213c0:	7ff00000 	.word	0x7ff00000
 80213c4:	ffefffff 	.word	0xffefffff
 80213c8:	00000433 	.word	0x00000433
 80213cc:	7fffffff 	.word	0x7fffffff
 80213d0:	080296d8 	.word	0x080296d8
 80213d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80213d6:	1c5a      	adds	r2, r3, #1
 80213d8:	921d      	str	r2, [sp, #116]	@ 0x74
 80213da:	785b      	ldrb	r3, [r3, #1]
 80213dc:	2b30      	cmp	r3, #48	@ 0x30
 80213de:	d0f9      	beq.n	80213d4 <_strtod_l+0x2b8>
 80213e0:	2200      	movs	r2, #0
 80213e2:	9207      	str	r2, [sp, #28]
 80213e4:	001a      	movs	r2, r3
 80213e6:	3a31      	subs	r2, #49	@ 0x31
 80213e8:	2a08      	cmp	r2, #8
 80213ea:	d81b      	bhi.n	8021424 <_strtod_l+0x308>
 80213ec:	3b30      	subs	r3, #48	@ 0x30
 80213ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80213f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80213f2:	9307      	str	r3, [sp, #28]
 80213f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80213f6:	1c59      	adds	r1, r3, #1
 80213f8:	911d      	str	r1, [sp, #116]	@ 0x74
 80213fa:	785b      	ldrb	r3, [r3, #1]
 80213fc:	001a      	movs	r2, r3
 80213fe:	3a30      	subs	r2, #48	@ 0x30
 8021400:	2a09      	cmp	r2, #9
 8021402:	d93a      	bls.n	802147a <_strtod_l+0x35e>
 8021404:	9a07      	ldr	r2, [sp, #28]
 8021406:	1a8a      	subs	r2, r1, r2
 8021408:	49b4      	ldr	r1, [pc, #720]	@ (80216dc <_strtod_l+0x5c0>)
 802140a:	9107      	str	r1, [sp, #28]
 802140c:	2a08      	cmp	r2, #8
 802140e:	dc04      	bgt.n	802141a <_strtod_l+0x2fe>
 8021410:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021412:	9207      	str	r2, [sp, #28]
 8021414:	428a      	cmp	r2, r1
 8021416:	dd00      	ble.n	802141a <_strtod_l+0x2fe>
 8021418:	9107      	str	r1, [sp, #28]
 802141a:	2c00      	cmp	r4, #0
 802141c:	d002      	beq.n	8021424 <_strtod_l+0x308>
 802141e:	9a07      	ldr	r2, [sp, #28]
 8021420:	4252      	negs	r2, r2
 8021422:	9207      	str	r2, [sp, #28]
 8021424:	9a06      	ldr	r2, [sp, #24]
 8021426:	2a00      	cmp	r2, #0
 8021428:	d14d      	bne.n	80214c6 <_strtod_l+0x3aa>
 802142a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802142c:	4310      	orrs	r0, r2
 802142e:	d000      	beq.n	8021432 <_strtod_l+0x316>
 8021430:	e6af      	b.n	8021192 <_strtod_l+0x76>
 8021432:	4662      	mov	r2, ip
 8021434:	2a00      	cmp	r2, #0
 8021436:	d000      	beq.n	802143a <_strtod_l+0x31e>
 8021438:	e6c7      	b.n	80211ca <_strtod_l+0xae>
 802143a:	2b69      	cmp	r3, #105	@ 0x69
 802143c:	d027      	beq.n	802148e <_strtod_l+0x372>
 802143e:	dc23      	bgt.n	8021488 <_strtod_l+0x36c>
 8021440:	2b49      	cmp	r3, #73	@ 0x49
 8021442:	d024      	beq.n	802148e <_strtod_l+0x372>
 8021444:	2b4e      	cmp	r3, #78	@ 0x4e
 8021446:	d000      	beq.n	802144a <_strtod_l+0x32e>
 8021448:	e6bf      	b.n	80211ca <_strtod_l+0xae>
 802144a:	49a5      	ldr	r1, [pc, #660]	@ (80216e0 <_strtod_l+0x5c4>)
 802144c:	a81d      	add	r0, sp, #116	@ 0x74
 802144e:	f002 fe4d 	bl	80240ec <__match>
 8021452:	2800      	cmp	r0, #0
 8021454:	d100      	bne.n	8021458 <_strtod_l+0x33c>
 8021456:	e6b8      	b.n	80211ca <_strtod_l+0xae>
 8021458:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802145a:	781b      	ldrb	r3, [r3, #0]
 802145c:	2b28      	cmp	r3, #40	@ 0x28
 802145e:	d12c      	bne.n	80214ba <_strtod_l+0x39e>
 8021460:	49a0      	ldr	r1, [pc, #640]	@ (80216e4 <_strtod_l+0x5c8>)
 8021462:	aa20      	add	r2, sp, #128	@ 0x80
 8021464:	a81d      	add	r0, sp, #116	@ 0x74
 8021466:	f002 fe55 	bl	8024114 <__hexnan>
 802146a:	2805      	cmp	r0, #5
 802146c:	d125      	bne.n	80214ba <_strtod_l+0x39e>
 802146e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8021470:	4a9d      	ldr	r2, [pc, #628]	@ (80216e8 <_strtod_l+0x5cc>)
 8021472:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8021474:	431a      	orrs	r2, r3
 8021476:	0017      	movs	r7, r2
 8021478:	e68b      	b.n	8021192 <_strtod_l+0x76>
 802147a:	220a      	movs	r2, #10
 802147c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802147e:	434a      	muls	r2, r1
 8021480:	18d2      	adds	r2, r2, r3
 8021482:	3a30      	subs	r2, #48	@ 0x30
 8021484:	9210      	str	r2, [sp, #64]	@ 0x40
 8021486:	e7b5      	b.n	80213f4 <_strtod_l+0x2d8>
 8021488:	2b6e      	cmp	r3, #110	@ 0x6e
 802148a:	d0de      	beq.n	802144a <_strtod_l+0x32e>
 802148c:	e69d      	b.n	80211ca <_strtod_l+0xae>
 802148e:	4997      	ldr	r1, [pc, #604]	@ (80216ec <_strtod_l+0x5d0>)
 8021490:	a81d      	add	r0, sp, #116	@ 0x74
 8021492:	f002 fe2b 	bl	80240ec <__match>
 8021496:	2800      	cmp	r0, #0
 8021498:	d100      	bne.n	802149c <_strtod_l+0x380>
 802149a:	e696      	b.n	80211ca <_strtod_l+0xae>
 802149c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802149e:	4994      	ldr	r1, [pc, #592]	@ (80216f0 <_strtod_l+0x5d4>)
 80214a0:	3b01      	subs	r3, #1
 80214a2:	a81d      	add	r0, sp, #116	@ 0x74
 80214a4:	931d      	str	r3, [sp, #116]	@ 0x74
 80214a6:	f002 fe21 	bl	80240ec <__match>
 80214aa:	2800      	cmp	r0, #0
 80214ac:	d102      	bne.n	80214b4 <_strtod_l+0x398>
 80214ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80214b0:	3301      	adds	r3, #1
 80214b2:	931d      	str	r3, [sp, #116]	@ 0x74
 80214b4:	2600      	movs	r6, #0
 80214b6:	4f8c      	ldr	r7, [pc, #560]	@ (80216e8 <_strtod_l+0x5cc>)
 80214b8:	e66b      	b.n	8021192 <_strtod_l+0x76>
 80214ba:	488e      	ldr	r0, [pc, #568]	@ (80216f4 <_strtod_l+0x5d8>)
 80214bc:	f001 fca6 	bl	8022e0c <nan>
 80214c0:	0006      	movs	r6, r0
 80214c2:	000f      	movs	r7, r1
 80214c4:	e665      	b.n	8021192 <_strtod_l+0x76>
 80214c6:	9b07      	ldr	r3, [sp, #28]
 80214c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214ca:	1a9b      	subs	r3, r3, r2
 80214cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80214ce:	9b08      	ldr	r3, [sp, #32]
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	d101      	bne.n	80214d8 <_strtod_l+0x3bc>
 80214d4:	9b06      	ldr	r3, [sp, #24]
 80214d6:	9308      	str	r3, [sp, #32]
 80214d8:	9c06      	ldr	r4, [sp, #24]
 80214da:	2c10      	cmp	r4, #16
 80214dc:	dd00      	ble.n	80214e0 <_strtod_l+0x3c4>
 80214de:	2410      	movs	r4, #16
 80214e0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80214e2:	f7e1 ff9b 	bl	800341c <__aeabi_ui2d>
 80214e6:	9b06      	ldr	r3, [sp, #24]
 80214e8:	0006      	movs	r6, r0
 80214ea:	000f      	movs	r7, r1
 80214ec:	2b09      	cmp	r3, #9
 80214ee:	dc13      	bgt.n	8021518 <_strtod_l+0x3fc>
 80214f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d100      	bne.n	80214f8 <_strtod_l+0x3dc>
 80214f6:	e64c      	b.n	8021192 <_strtod_l+0x76>
 80214f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	dc00      	bgt.n	8021500 <_strtod_l+0x3e4>
 80214fe:	e07e      	b.n	80215fe <_strtod_l+0x4e2>
 8021500:	2b16      	cmp	r3, #22
 8021502:	dc63      	bgt.n	80215cc <_strtod_l+0x4b0>
 8021504:	497c      	ldr	r1, [pc, #496]	@ (80216f8 <_strtod_l+0x5dc>)
 8021506:	00db      	lsls	r3, r3, #3
 8021508:	18c9      	adds	r1, r1, r3
 802150a:	0032      	movs	r2, r6
 802150c:	6808      	ldr	r0, [r1, #0]
 802150e:	6849      	ldr	r1, [r1, #4]
 8021510:	003b      	movs	r3, r7
 8021512:	f7e1 f893 	bl	800263c <__aeabi_dmul>
 8021516:	e7d3      	b.n	80214c0 <_strtod_l+0x3a4>
 8021518:	0022      	movs	r2, r4
 802151a:	4b77      	ldr	r3, [pc, #476]	@ (80216f8 <_strtod_l+0x5dc>)
 802151c:	3a09      	subs	r2, #9
 802151e:	00d2      	lsls	r2, r2, #3
 8021520:	189b      	adds	r3, r3, r2
 8021522:	681a      	ldr	r2, [r3, #0]
 8021524:	685b      	ldr	r3, [r3, #4]
 8021526:	f7e1 f889 	bl	800263c <__aeabi_dmul>
 802152a:	0006      	movs	r6, r0
 802152c:	0028      	movs	r0, r5
 802152e:	000f      	movs	r7, r1
 8021530:	f7e1 ff74 	bl	800341c <__aeabi_ui2d>
 8021534:	000b      	movs	r3, r1
 8021536:	0002      	movs	r2, r0
 8021538:	0039      	movs	r1, r7
 802153a:	0030      	movs	r0, r6
 802153c:	f7e0 f8d6 	bl	80016ec <__aeabi_dadd>
 8021540:	9b06      	ldr	r3, [sp, #24]
 8021542:	0006      	movs	r6, r0
 8021544:	000f      	movs	r7, r1
 8021546:	2b0f      	cmp	r3, #15
 8021548:	ddd2      	ble.n	80214f0 <_strtod_l+0x3d4>
 802154a:	9b06      	ldr	r3, [sp, #24]
 802154c:	1b1c      	subs	r4, r3, r4
 802154e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021550:	18e4      	adds	r4, r4, r3
 8021552:	2c00      	cmp	r4, #0
 8021554:	dc00      	bgt.n	8021558 <_strtod_l+0x43c>
 8021556:	e09b      	b.n	8021690 <_strtod_l+0x574>
 8021558:	220f      	movs	r2, #15
 802155a:	0023      	movs	r3, r4
 802155c:	4013      	ands	r3, r2
 802155e:	4214      	tst	r4, r2
 8021560:	d00a      	beq.n	8021578 <_strtod_l+0x45c>
 8021562:	4965      	ldr	r1, [pc, #404]	@ (80216f8 <_strtod_l+0x5dc>)
 8021564:	00db      	lsls	r3, r3, #3
 8021566:	18c9      	adds	r1, r1, r3
 8021568:	0032      	movs	r2, r6
 802156a:	6808      	ldr	r0, [r1, #0]
 802156c:	6849      	ldr	r1, [r1, #4]
 802156e:	003b      	movs	r3, r7
 8021570:	f7e1 f864 	bl	800263c <__aeabi_dmul>
 8021574:	0006      	movs	r6, r0
 8021576:	000f      	movs	r7, r1
 8021578:	230f      	movs	r3, #15
 802157a:	439c      	bics	r4, r3
 802157c:	d073      	beq.n	8021666 <_strtod_l+0x54a>
 802157e:	3326      	adds	r3, #38	@ 0x26
 8021580:	33ff      	adds	r3, #255	@ 0xff
 8021582:	429c      	cmp	r4, r3
 8021584:	dd4b      	ble.n	802161e <_strtod_l+0x502>
 8021586:	2300      	movs	r3, #0
 8021588:	9306      	str	r3, [sp, #24]
 802158a:	9307      	str	r3, [sp, #28]
 802158c:	930d      	str	r3, [sp, #52]	@ 0x34
 802158e:	9308      	str	r3, [sp, #32]
 8021590:	2322      	movs	r3, #34	@ 0x22
 8021592:	2600      	movs	r6, #0
 8021594:	9a05      	ldr	r2, [sp, #20]
 8021596:	4f54      	ldr	r7, [pc, #336]	@ (80216e8 <_strtod_l+0x5cc>)
 8021598:	6013      	str	r3, [r2, #0]
 802159a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802159c:	42b3      	cmp	r3, r6
 802159e:	d100      	bne.n	80215a2 <_strtod_l+0x486>
 80215a0:	e5f7      	b.n	8021192 <_strtod_l+0x76>
 80215a2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80215a4:	9805      	ldr	r0, [sp, #20]
 80215a6:	f002 ff6f 	bl	8024488 <_Bfree>
 80215aa:	9908      	ldr	r1, [sp, #32]
 80215ac:	9805      	ldr	r0, [sp, #20]
 80215ae:	f002 ff6b 	bl	8024488 <_Bfree>
 80215b2:	9907      	ldr	r1, [sp, #28]
 80215b4:	9805      	ldr	r0, [sp, #20]
 80215b6:	f002 ff67 	bl	8024488 <_Bfree>
 80215ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80215bc:	9805      	ldr	r0, [sp, #20]
 80215be:	f002 ff63 	bl	8024488 <_Bfree>
 80215c2:	9906      	ldr	r1, [sp, #24]
 80215c4:	9805      	ldr	r0, [sp, #20]
 80215c6:	f002 ff5f 	bl	8024488 <_Bfree>
 80215ca:	e5e2      	b.n	8021192 <_strtod_l+0x76>
 80215cc:	2325      	movs	r3, #37	@ 0x25
 80215ce:	9a06      	ldr	r2, [sp, #24]
 80215d0:	1a9b      	subs	r3, r3, r2
 80215d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80215d4:	4293      	cmp	r3, r2
 80215d6:	dbb8      	blt.n	802154a <_strtod_l+0x42e>
 80215d8:	240f      	movs	r4, #15
 80215da:	9b06      	ldr	r3, [sp, #24]
 80215dc:	4d46      	ldr	r5, [pc, #280]	@ (80216f8 <_strtod_l+0x5dc>)
 80215de:	1ae4      	subs	r4, r4, r3
 80215e0:	00e1      	lsls	r1, r4, #3
 80215e2:	1869      	adds	r1, r5, r1
 80215e4:	0032      	movs	r2, r6
 80215e6:	6808      	ldr	r0, [r1, #0]
 80215e8:	6849      	ldr	r1, [r1, #4]
 80215ea:	003b      	movs	r3, r7
 80215ec:	f7e1 f826 	bl	800263c <__aeabi_dmul>
 80215f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80215f2:	1b1c      	subs	r4, r3, r4
 80215f4:	00e4      	lsls	r4, r4, #3
 80215f6:	192d      	adds	r5, r5, r4
 80215f8:	682a      	ldr	r2, [r5, #0]
 80215fa:	686b      	ldr	r3, [r5, #4]
 80215fc:	e789      	b.n	8021512 <_strtod_l+0x3f6>
 80215fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021600:	3316      	adds	r3, #22
 8021602:	dba2      	blt.n	802154a <_strtod_l+0x42e>
 8021604:	9907      	ldr	r1, [sp, #28]
 8021606:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021608:	4b3b      	ldr	r3, [pc, #236]	@ (80216f8 <_strtod_l+0x5dc>)
 802160a:	1a52      	subs	r2, r2, r1
 802160c:	00d2      	lsls	r2, r2, #3
 802160e:	189b      	adds	r3, r3, r2
 8021610:	0030      	movs	r0, r6
 8021612:	681a      	ldr	r2, [r3, #0]
 8021614:	685b      	ldr	r3, [r3, #4]
 8021616:	0039      	movs	r1, r7
 8021618:	f7e0 fbcc 	bl	8001db4 <__aeabi_ddiv>
 802161c:	e750      	b.n	80214c0 <_strtod_l+0x3a4>
 802161e:	2300      	movs	r3, #0
 8021620:	0030      	movs	r0, r6
 8021622:	0039      	movs	r1, r7
 8021624:	4d35      	ldr	r5, [pc, #212]	@ (80216fc <_strtod_l+0x5e0>)
 8021626:	1124      	asrs	r4, r4, #4
 8021628:	9309      	str	r3, [sp, #36]	@ 0x24
 802162a:	2c01      	cmp	r4, #1
 802162c:	dc1e      	bgt.n	802166c <_strtod_l+0x550>
 802162e:	2b00      	cmp	r3, #0
 8021630:	d001      	beq.n	8021636 <_strtod_l+0x51a>
 8021632:	0006      	movs	r6, r0
 8021634:	000f      	movs	r7, r1
 8021636:	4b32      	ldr	r3, [pc, #200]	@ (8021700 <_strtod_l+0x5e4>)
 8021638:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802163a:	18ff      	adds	r7, r7, r3
 802163c:	4b2f      	ldr	r3, [pc, #188]	@ (80216fc <_strtod_l+0x5e0>)
 802163e:	00d5      	lsls	r5, r2, #3
 8021640:	195d      	adds	r5, r3, r5
 8021642:	0032      	movs	r2, r6
 8021644:	6828      	ldr	r0, [r5, #0]
 8021646:	6869      	ldr	r1, [r5, #4]
 8021648:	003b      	movs	r3, r7
 802164a:	f7e0 fff7 	bl	800263c <__aeabi_dmul>
 802164e:	4b26      	ldr	r3, [pc, #152]	@ (80216e8 <_strtod_l+0x5cc>)
 8021650:	4a2c      	ldr	r2, [pc, #176]	@ (8021704 <_strtod_l+0x5e8>)
 8021652:	0006      	movs	r6, r0
 8021654:	400b      	ands	r3, r1
 8021656:	4293      	cmp	r3, r2
 8021658:	d895      	bhi.n	8021586 <_strtod_l+0x46a>
 802165a:	4a2b      	ldr	r2, [pc, #172]	@ (8021708 <_strtod_l+0x5ec>)
 802165c:	4293      	cmp	r3, r2
 802165e:	d913      	bls.n	8021688 <_strtod_l+0x56c>
 8021660:	2601      	movs	r6, #1
 8021662:	4f2a      	ldr	r7, [pc, #168]	@ (802170c <_strtod_l+0x5f0>)
 8021664:	4276      	negs	r6, r6
 8021666:	2300      	movs	r3, #0
 8021668:	9309      	str	r3, [sp, #36]	@ 0x24
 802166a:	e086      	b.n	802177a <_strtod_l+0x65e>
 802166c:	2201      	movs	r2, #1
 802166e:	4214      	tst	r4, r2
 8021670:	d004      	beq.n	802167c <_strtod_l+0x560>
 8021672:	682a      	ldr	r2, [r5, #0]
 8021674:	686b      	ldr	r3, [r5, #4]
 8021676:	f7e0 ffe1 	bl	800263c <__aeabi_dmul>
 802167a:	2301      	movs	r3, #1
 802167c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802167e:	1064      	asrs	r4, r4, #1
 8021680:	3201      	adds	r2, #1
 8021682:	9209      	str	r2, [sp, #36]	@ 0x24
 8021684:	3508      	adds	r5, #8
 8021686:	e7d0      	b.n	802162a <_strtod_l+0x50e>
 8021688:	23d4      	movs	r3, #212	@ 0xd4
 802168a:	049b      	lsls	r3, r3, #18
 802168c:	18cf      	adds	r7, r1, r3
 802168e:	e7ea      	b.n	8021666 <_strtod_l+0x54a>
 8021690:	2c00      	cmp	r4, #0
 8021692:	d0e8      	beq.n	8021666 <_strtod_l+0x54a>
 8021694:	4264      	negs	r4, r4
 8021696:	230f      	movs	r3, #15
 8021698:	0022      	movs	r2, r4
 802169a:	401a      	ands	r2, r3
 802169c:	421c      	tst	r4, r3
 802169e:	d00a      	beq.n	80216b6 <_strtod_l+0x59a>
 80216a0:	4b15      	ldr	r3, [pc, #84]	@ (80216f8 <_strtod_l+0x5dc>)
 80216a2:	00d2      	lsls	r2, r2, #3
 80216a4:	189b      	adds	r3, r3, r2
 80216a6:	0030      	movs	r0, r6
 80216a8:	681a      	ldr	r2, [r3, #0]
 80216aa:	685b      	ldr	r3, [r3, #4]
 80216ac:	0039      	movs	r1, r7
 80216ae:	f7e0 fb81 	bl	8001db4 <__aeabi_ddiv>
 80216b2:	0006      	movs	r6, r0
 80216b4:	000f      	movs	r7, r1
 80216b6:	1124      	asrs	r4, r4, #4
 80216b8:	d0d5      	beq.n	8021666 <_strtod_l+0x54a>
 80216ba:	2c1f      	cmp	r4, #31
 80216bc:	dd28      	ble.n	8021710 <_strtod_l+0x5f4>
 80216be:	2300      	movs	r3, #0
 80216c0:	9306      	str	r3, [sp, #24]
 80216c2:	9307      	str	r3, [sp, #28]
 80216c4:	930d      	str	r3, [sp, #52]	@ 0x34
 80216c6:	9308      	str	r3, [sp, #32]
 80216c8:	2322      	movs	r3, #34	@ 0x22
 80216ca:	9a05      	ldr	r2, [sp, #20]
 80216cc:	2600      	movs	r6, #0
 80216ce:	6013      	str	r3, [r2, #0]
 80216d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216d2:	2700      	movs	r7, #0
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d000      	beq.n	80216da <_strtod_l+0x5be>
 80216d8:	e763      	b.n	80215a2 <_strtod_l+0x486>
 80216da:	e55a      	b.n	8021192 <_strtod_l+0x76>
 80216dc:	00004e1f 	.word	0x00004e1f
 80216e0:	0802983e 	.word	0x0802983e
 80216e4:	080296dc 	.word	0x080296dc
 80216e8:	7ff00000 	.word	0x7ff00000
 80216ec:	08029836 	.word	0x08029836
 80216f0:	08029870 	.word	0x08029870
 80216f4:	08029afc 	.word	0x08029afc
 80216f8:	080299e8 	.word	0x080299e8
 80216fc:	080299c0 	.word	0x080299c0
 8021700:	fcb00000 	.word	0xfcb00000
 8021704:	7ca00000 	.word	0x7ca00000
 8021708:	7c900000 	.word	0x7c900000
 802170c:	7fefffff 	.word	0x7fefffff
 8021710:	2310      	movs	r3, #16
 8021712:	0022      	movs	r2, r4
 8021714:	401a      	ands	r2, r3
 8021716:	9209      	str	r2, [sp, #36]	@ 0x24
 8021718:	421c      	tst	r4, r3
 802171a:	d001      	beq.n	8021720 <_strtod_l+0x604>
 802171c:	335a      	adds	r3, #90	@ 0x5a
 802171e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021720:	0030      	movs	r0, r6
 8021722:	0039      	movs	r1, r7
 8021724:	2300      	movs	r3, #0
 8021726:	4dbf      	ldr	r5, [pc, #764]	@ (8021a24 <_strtod_l+0x908>)
 8021728:	2201      	movs	r2, #1
 802172a:	4214      	tst	r4, r2
 802172c:	d004      	beq.n	8021738 <_strtod_l+0x61c>
 802172e:	682a      	ldr	r2, [r5, #0]
 8021730:	686b      	ldr	r3, [r5, #4]
 8021732:	f7e0 ff83 	bl	800263c <__aeabi_dmul>
 8021736:	2301      	movs	r3, #1
 8021738:	1064      	asrs	r4, r4, #1
 802173a:	3508      	adds	r5, #8
 802173c:	2c00      	cmp	r4, #0
 802173e:	d1f3      	bne.n	8021728 <_strtod_l+0x60c>
 8021740:	2b00      	cmp	r3, #0
 8021742:	d001      	beq.n	8021748 <_strtod_l+0x62c>
 8021744:	0006      	movs	r6, r0
 8021746:	000f      	movs	r7, r1
 8021748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802174a:	2b00      	cmp	r3, #0
 802174c:	d00d      	beq.n	802176a <_strtod_l+0x64e>
 802174e:	236b      	movs	r3, #107	@ 0x6b
 8021750:	007a      	lsls	r2, r7, #1
 8021752:	0d52      	lsrs	r2, r2, #21
 8021754:	0039      	movs	r1, r7
 8021756:	1a9b      	subs	r3, r3, r2
 8021758:	2b00      	cmp	r3, #0
 802175a:	dd06      	ble.n	802176a <_strtod_l+0x64e>
 802175c:	2b1f      	cmp	r3, #31
 802175e:	dd5a      	ble.n	8021816 <_strtod_l+0x6fa>
 8021760:	2600      	movs	r6, #0
 8021762:	2b34      	cmp	r3, #52	@ 0x34
 8021764:	dd50      	ble.n	8021808 <_strtod_l+0x6ec>
 8021766:	27dc      	movs	r7, #220	@ 0xdc
 8021768:	04bf      	lsls	r7, r7, #18
 802176a:	2200      	movs	r2, #0
 802176c:	2300      	movs	r3, #0
 802176e:	0030      	movs	r0, r6
 8021770:	0039      	movs	r1, r7
 8021772:	f7de fe9d 	bl	80004b0 <__aeabi_dcmpeq>
 8021776:	2800      	cmp	r0, #0
 8021778:	d1a1      	bne.n	80216be <_strtod_l+0x5a2>
 802177a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802177c:	9a08      	ldr	r2, [sp, #32]
 802177e:	9300      	str	r3, [sp, #0]
 8021780:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021782:	9b06      	ldr	r3, [sp, #24]
 8021784:	9805      	ldr	r0, [sp, #20]
 8021786:	f002 fee7 	bl	8024558 <__s2b>
 802178a:	900d      	str	r0, [sp, #52]	@ 0x34
 802178c:	2800      	cmp	r0, #0
 802178e:	d100      	bne.n	8021792 <_strtod_l+0x676>
 8021790:	e6f9      	b.n	8021586 <_strtod_l+0x46a>
 8021792:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021794:	9907      	ldr	r1, [sp, #28]
 8021796:	17da      	asrs	r2, r3, #31
 8021798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802179a:	1a5b      	subs	r3, r3, r1
 802179c:	401a      	ands	r2, r3
 802179e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80217a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80217a2:	43db      	mvns	r3, r3
 80217a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80217a6:	17db      	asrs	r3, r3, #31
 80217a8:	401a      	ands	r2, r3
 80217aa:	2300      	movs	r3, #0
 80217ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80217ae:	9306      	str	r3, [sp, #24]
 80217b0:	9307      	str	r3, [sp, #28]
 80217b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80217b4:	9805      	ldr	r0, [sp, #20]
 80217b6:	6859      	ldr	r1, [r3, #4]
 80217b8:	f002 fe22 	bl	8024400 <_Balloc>
 80217bc:	9008      	str	r0, [sp, #32]
 80217be:	2800      	cmp	r0, #0
 80217c0:	d100      	bne.n	80217c4 <_strtod_l+0x6a8>
 80217c2:	e6e5      	b.n	8021590 <_strtod_l+0x474>
 80217c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80217c6:	300c      	adds	r0, #12
 80217c8:	0019      	movs	r1, r3
 80217ca:	691a      	ldr	r2, [r3, #16]
 80217cc:	310c      	adds	r1, #12
 80217ce:	3202      	adds	r2, #2
 80217d0:	0092      	lsls	r2, r2, #2
 80217d2:	f001 fb11 	bl	8022df8 <memcpy>
 80217d6:	ab20      	add	r3, sp, #128	@ 0x80
 80217d8:	9301      	str	r3, [sp, #4]
 80217da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80217dc:	9300      	str	r3, [sp, #0]
 80217de:	0032      	movs	r2, r6
 80217e0:	003b      	movs	r3, r7
 80217e2:	9805      	ldr	r0, [sp, #20]
 80217e4:	9610      	str	r6, [sp, #64]	@ 0x40
 80217e6:	9711      	str	r7, [sp, #68]	@ 0x44
 80217e8:	f003 fa06 	bl	8024bf8 <__d2b>
 80217ec:	901e      	str	r0, [sp, #120]	@ 0x78
 80217ee:	2800      	cmp	r0, #0
 80217f0:	d100      	bne.n	80217f4 <_strtod_l+0x6d8>
 80217f2:	e6cd      	b.n	8021590 <_strtod_l+0x474>
 80217f4:	2101      	movs	r1, #1
 80217f6:	9805      	ldr	r0, [sp, #20]
 80217f8:	f002 ff4a 	bl	8024690 <__i2b>
 80217fc:	9007      	str	r0, [sp, #28]
 80217fe:	2800      	cmp	r0, #0
 8021800:	d10e      	bne.n	8021820 <_strtod_l+0x704>
 8021802:	2300      	movs	r3, #0
 8021804:	9307      	str	r3, [sp, #28]
 8021806:	e6c3      	b.n	8021590 <_strtod_l+0x474>
 8021808:	234b      	movs	r3, #75	@ 0x4b
 802180a:	1a9a      	subs	r2, r3, r2
 802180c:	3b4c      	subs	r3, #76	@ 0x4c
 802180e:	4093      	lsls	r3, r2
 8021810:	4019      	ands	r1, r3
 8021812:	000f      	movs	r7, r1
 8021814:	e7a9      	b.n	802176a <_strtod_l+0x64e>
 8021816:	2201      	movs	r2, #1
 8021818:	4252      	negs	r2, r2
 802181a:	409a      	lsls	r2, r3
 802181c:	4016      	ands	r6, r2
 802181e:	e7a4      	b.n	802176a <_strtod_l+0x64e>
 8021820:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021822:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021824:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8021826:	1ad4      	subs	r4, r2, r3
 8021828:	2b00      	cmp	r3, #0
 802182a:	db01      	blt.n	8021830 <_strtod_l+0x714>
 802182c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802182e:	195d      	adds	r5, r3, r5
 8021830:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021832:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8021834:	1a5b      	subs	r3, r3, r1
 8021836:	2136      	movs	r1, #54	@ 0x36
 8021838:	189b      	adds	r3, r3, r2
 802183a:	1a8a      	subs	r2, r1, r2
 802183c:	497a      	ldr	r1, [pc, #488]	@ (8021a28 <_strtod_l+0x90c>)
 802183e:	2001      	movs	r0, #1
 8021840:	468c      	mov	ip, r1
 8021842:	2100      	movs	r1, #0
 8021844:	3b01      	subs	r3, #1
 8021846:	9116      	str	r1, [sp, #88]	@ 0x58
 8021848:	9014      	str	r0, [sp, #80]	@ 0x50
 802184a:	4563      	cmp	r3, ip
 802184c:	da06      	bge.n	802185c <_strtod_l+0x740>
 802184e:	4661      	mov	r1, ip
 8021850:	1ac9      	subs	r1, r1, r3
 8021852:	1a52      	subs	r2, r2, r1
 8021854:	291f      	cmp	r1, #31
 8021856:	dc3f      	bgt.n	80218d8 <_strtod_l+0x7bc>
 8021858:	4088      	lsls	r0, r1
 802185a:	9014      	str	r0, [sp, #80]	@ 0x50
 802185c:	18ab      	adds	r3, r5, r2
 802185e:	930e      	str	r3, [sp, #56]	@ 0x38
 8021860:	18a4      	adds	r4, r4, r2
 8021862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021866:	191c      	adds	r4, r3, r4
 8021868:	002b      	movs	r3, r5
 802186a:	4295      	cmp	r5, r2
 802186c:	dd00      	ble.n	8021870 <_strtod_l+0x754>
 802186e:	0013      	movs	r3, r2
 8021870:	42a3      	cmp	r3, r4
 8021872:	dd00      	ble.n	8021876 <_strtod_l+0x75a>
 8021874:	0023      	movs	r3, r4
 8021876:	2b00      	cmp	r3, #0
 8021878:	dd04      	ble.n	8021884 <_strtod_l+0x768>
 802187a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802187c:	1ae4      	subs	r4, r4, r3
 802187e:	1ad2      	subs	r2, r2, r3
 8021880:	920e      	str	r2, [sp, #56]	@ 0x38
 8021882:	1aed      	subs	r5, r5, r3
 8021884:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021886:	2b00      	cmp	r3, #0
 8021888:	dd16      	ble.n	80218b8 <_strtod_l+0x79c>
 802188a:	001a      	movs	r2, r3
 802188c:	9907      	ldr	r1, [sp, #28]
 802188e:	9805      	ldr	r0, [sp, #20]
 8021890:	f002 ffc8 	bl	8024824 <__pow5mult>
 8021894:	9007      	str	r0, [sp, #28]
 8021896:	2800      	cmp	r0, #0
 8021898:	d0b3      	beq.n	8021802 <_strtod_l+0x6e6>
 802189a:	0001      	movs	r1, r0
 802189c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802189e:	9805      	ldr	r0, [sp, #20]
 80218a0:	f002 ff0e 	bl	80246c0 <__multiply>
 80218a4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80218a6:	2800      	cmp	r0, #0
 80218a8:	d100      	bne.n	80218ac <_strtod_l+0x790>
 80218aa:	e671      	b.n	8021590 <_strtod_l+0x474>
 80218ac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80218ae:	9805      	ldr	r0, [sp, #20]
 80218b0:	f002 fdea 	bl	8024488 <_Bfree>
 80218b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80218b6:	931e      	str	r3, [sp, #120]	@ 0x78
 80218b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	dc12      	bgt.n	80218e4 <_strtod_l+0x7c8>
 80218be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	dd18      	ble.n	80218f6 <_strtod_l+0x7da>
 80218c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80218c6:	9908      	ldr	r1, [sp, #32]
 80218c8:	9805      	ldr	r0, [sp, #20]
 80218ca:	f002 ffab 	bl	8024824 <__pow5mult>
 80218ce:	9008      	str	r0, [sp, #32]
 80218d0:	2800      	cmp	r0, #0
 80218d2:	d110      	bne.n	80218f6 <_strtod_l+0x7da>
 80218d4:	2300      	movs	r3, #0
 80218d6:	e65a      	b.n	802158e <_strtod_l+0x472>
 80218d8:	4954      	ldr	r1, [pc, #336]	@ (8021a2c <_strtod_l+0x910>)
 80218da:	1acb      	subs	r3, r1, r3
 80218dc:	0001      	movs	r1, r0
 80218de:	4099      	lsls	r1, r3
 80218e0:	9116      	str	r1, [sp, #88]	@ 0x58
 80218e2:	e7ba      	b.n	802185a <_strtod_l+0x73e>
 80218e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80218e6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80218e8:	9805      	ldr	r0, [sp, #20]
 80218ea:	f002 fff7 	bl	80248dc <__lshift>
 80218ee:	901e      	str	r0, [sp, #120]	@ 0x78
 80218f0:	2800      	cmp	r0, #0
 80218f2:	d1e4      	bne.n	80218be <_strtod_l+0x7a2>
 80218f4:	e64c      	b.n	8021590 <_strtod_l+0x474>
 80218f6:	2c00      	cmp	r4, #0
 80218f8:	dd07      	ble.n	802190a <_strtod_l+0x7ee>
 80218fa:	0022      	movs	r2, r4
 80218fc:	9908      	ldr	r1, [sp, #32]
 80218fe:	9805      	ldr	r0, [sp, #20]
 8021900:	f002 ffec 	bl	80248dc <__lshift>
 8021904:	9008      	str	r0, [sp, #32]
 8021906:	2800      	cmp	r0, #0
 8021908:	d0e4      	beq.n	80218d4 <_strtod_l+0x7b8>
 802190a:	2d00      	cmp	r5, #0
 802190c:	dd08      	ble.n	8021920 <_strtod_l+0x804>
 802190e:	002a      	movs	r2, r5
 8021910:	9907      	ldr	r1, [sp, #28]
 8021912:	9805      	ldr	r0, [sp, #20]
 8021914:	f002 ffe2 	bl	80248dc <__lshift>
 8021918:	9007      	str	r0, [sp, #28]
 802191a:	2800      	cmp	r0, #0
 802191c:	d100      	bne.n	8021920 <_strtod_l+0x804>
 802191e:	e637      	b.n	8021590 <_strtod_l+0x474>
 8021920:	9a08      	ldr	r2, [sp, #32]
 8021922:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021924:	9805      	ldr	r0, [sp, #20]
 8021926:	f003 f861 	bl	80249ec <__mdiff>
 802192a:	9006      	str	r0, [sp, #24]
 802192c:	2800      	cmp	r0, #0
 802192e:	d100      	bne.n	8021932 <_strtod_l+0x816>
 8021930:	e62e      	b.n	8021590 <_strtod_l+0x474>
 8021932:	68c3      	ldr	r3, [r0, #12]
 8021934:	9907      	ldr	r1, [sp, #28]
 8021936:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021938:	2300      	movs	r3, #0
 802193a:	60c3      	str	r3, [r0, #12]
 802193c:	f003 f83a 	bl	80249b4 <__mcmp>
 8021940:	2800      	cmp	r0, #0
 8021942:	da3b      	bge.n	80219bc <_strtod_l+0x8a0>
 8021944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021946:	4333      	orrs	r3, r6
 8021948:	d167      	bne.n	8021a1a <_strtod_l+0x8fe>
 802194a:	033b      	lsls	r3, r7, #12
 802194c:	d165      	bne.n	8021a1a <_strtod_l+0x8fe>
 802194e:	22d6      	movs	r2, #214	@ 0xd6
 8021950:	4b37      	ldr	r3, [pc, #220]	@ (8021a30 <_strtod_l+0x914>)
 8021952:	04d2      	lsls	r2, r2, #19
 8021954:	403b      	ands	r3, r7
 8021956:	4293      	cmp	r3, r2
 8021958:	d95f      	bls.n	8021a1a <_strtod_l+0x8fe>
 802195a:	9b06      	ldr	r3, [sp, #24]
 802195c:	695b      	ldr	r3, [r3, #20]
 802195e:	2b00      	cmp	r3, #0
 8021960:	d103      	bne.n	802196a <_strtod_l+0x84e>
 8021962:	9b06      	ldr	r3, [sp, #24]
 8021964:	691b      	ldr	r3, [r3, #16]
 8021966:	2b01      	cmp	r3, #1
 8021968:	dd57      	ble.n	8021a1a <_strtod_l+0x8fe>
 802196a:	9906      	ldr	r1, [sp, #24]
 802196c:	2201      	movs	r2, #1
 802196e:	9805      	ldr	r0, [sp, #20]
 8021970:	f002 ffb4 	bl	80248dc <__lshift>
 8021974:	9907      	ldr	r1, [sp, #28]
 8021976:	9006      	str	r0, [sp, #24]
 8021978:	f003 f81c 	bl	80249b4 <__mcmp>
 802197c:	2800      	cmp	r0, #0
 802197e:	dd4c      	ble.n	8021a1a <_strtod_l+0x8fe>
 8021980:	4b2b      	ldr	r3, [pc, #172]	@ (8021a30 <_strtod_l+0x914>)
 8021982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021984:	403b      	ands	r3, r7
 8021986:	2a00      	cmp	r2, #0
 8021988:	d074      	beq.n	8021a74 <_strtod_l+0x958>
 802198a:	22d6      	movs	r2, #214	@ 0xd6
 802198c:	04d2      	lsls	r2, r2, #19
 802198e:	4293      	cmp	r3, r2
 8021990:	d870      	bhi.n	8021a74 <_strtod_l+0x958>
 8021992:	22dc      	movs	r2, #220	@ 0xdc
 8021994:	0492      	lsls	r2, r2, #18
 8021996:	4293      	cmp	r3, r2
 8021998:	d800      	bhi.n	802199c <_strtod_l+0x880>
 802199a:	e695      	b.n	80216c8 <_strtod_l+0x5ac>
 802199c:	0030      	movs	r0, r6
 802199e:	0039      	movs	r1, r7
 80219a0:	4b24      	ldr	r3, [pc, #144]	@ (8021a34 <_strtod_l+0x918>)
 80219a2:	2200      	movs	r2, #0
 80219a4:	f7e0 fe4a 	bl	800263c <__aeabi_dmul>
 80219a8:	4b21      	ldr	r3, [pc, #132]	@ (8021a30 <_strtod_l+0x914>)
 80219aa:	0006      	movs	r6, r0
 80219ac:	000f      	movs	r7, r1
 80219ae:	420b      	tst	r3, r1
 80219b0:	d000      	beq.n	80219b4 <_strtod_l+0x898>
 80219b2:	e5f6      	b.n	80215a2 <_strtod_l+0x486>
 80219b4:	2322      	movs	r3, #34	@ 0x22
 80219b6:	9a05      	ldr	r2, [sp, #20]
 80219b8:	6013      	str	r3, [r2, #0]
 80219ba:	e5f2      	b.n	80215a2 <_strtod_l+0x486>
 80219bc:	970e      	str	r7, [sp, #56]	@ 0x38
 80219be:	2800      	cmp	r0, #0
 80219c0:	d175      	bne.n	8021aae <_strtod_l+0x992>
 80219c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80219c4:	033b      	lsls	r3, r7, #12
 80219c6:	0b1b      	lsrs	r3, r3, #12
 80219c8:	2a00      	cmp	r2, #0
 80219ca:	d039      	beq.n	8021a40 <_strtod_l+0x924>
 80219cc:	4a1a      	ldr	r2, [pc, #104]	@ (8021a38 <_strtod_l+0x91c>)
 80219ce:	4293      	cmp	r3, r2
 80219d0:	d138      	bne.n	8021a44 <_strtod_l+0x928>
 80219d2:	2101      	movs	r1, #1
 80219d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219d6:	4249      	negs	r1, r1
 80219d8:	0032      	movs	r2, r6
 80219da:	0008      	movs	r0, r1
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d00b      	beq.n	80219f8 <_strtod_l+0x8dc>
 80219e0:	24d4      	movs	r4, #212	@ 0xd4
 80219e2:	4b13      	ldr	r3, [pc, #76]	@ (8021a30 <_strtod_l+0x914>)
 80219e4:	0008      	movs	r0, r1
 80219e6:	403b      	ands	r3, r7
 80219e8:	04e4      	lsls	r4, r4, #19
 80219ea:	42a3      	cmp	r3, r4
 80219ec:	d804      	bhi.n	80219f8 <_strtod_l+0x8dc>
 80219ee:	306c      	adds	r0, #108	@ 0x6c
 80219f0:	0d1b      	lsrs	r3, r3, #20
 80219f2:	1ac3      	subs	r3, r0, r3
 80219f4:	4099      	lsls	r1, r3
 80219f6:	0008      	movs	r0, r1
 80219f8:	4282      	cmp	r2, r0
 80219fa:	d123      	bne.n	8021a44 <_strtod_l+0x928>
 80219fc:	4b0f      	ldr	r3, [pc, #60]	@ (8021a3c <_strtod_l+0x920>)
 80219fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021a00:	4299      	cmp	r1, r3
 8021a02:	d102      	bne.n	8021a0a <_strtod_l+0x8ee>
 8021a04:	3201      	adds	r2, #1
 8021a06:	d100      	bne.n	8021a0a <_strtod_l+0x8ee>
 8021a08:	e5c2      	b.n	8021590 <_strtod_l+0x474>
 8021a0a:	4b09      	ldr	r3, [pc, #36]	@ (8021a30 <_strtod_l+0x914>)
 8021a0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021a0e:	2600      	movs	r6, #0
 8021a10:	401a      	ands	r2, r3
 8021a12:	0013      	movs	r3, r2
 8021a14:	2280      	movs	r2, #128	@ 0x80
 8021a16:	0352      	lsls	r2, r2, #13
 8021a18:	189f      	adds	r7, r3, r2
 8021a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	d1bd      	bne.n	802199c <_strtod_l+0x880>
 8021a20:	e5bf      	b.n	80215a2 <_strtod_l+0x486>
 8021a22:	46c0      	nop			@ (mov r8, r8)
 8021a24:	08029708 	.word	0x08029708
 8021a28:	fffffc02 	.word	0xfffffc02
 8021a2c:	fffffbe2 	.word	0xfffffbe2
 8021a30:	7ff00000 	.word	0x7ff00000
 8021a34:	39500000 	.word	0x39500000
 8021a38:	000fffff 	.word	0x000fffff
 8021a3c:	7fefffff 	.word	0x7fefffff
 8021a40:	4333      	orrs	r3, r6
 8021a42:	d09d      	beq.n	8021980 <_strtod_l+0x864>
 8021a44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d01c      	beq.n	8021a84 <_strtod_l+0x968>
 8021a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021a4e:	4213      	tst	r3, r2
 8021a50:	d0e3      	beq.n	8021a1a <_strtod_l+0x8fe>
 8021a52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021a54:	0030      	movs	r0, r6
 8021a56:	0039      	movs	r1, r7
 8021a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d016      	beq.n	8021a8c <_strtod_l+0x970>
 8021a5e:	f7ff fb45 	bl	80210ec <sulp>
 8021a62:	0002      	movs	r2, r0
 8021a64:	000b      	movs	r3, r1
 8021a66:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021a68:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021a6a:	f7df fe3f 	bl	80016ec <__aeabi_dadd>
 8021a6e:	0006      	movs	r6, r0
 8021a70:	000f      	movs	r7, r1
 8021a72:	e7d2      	b.n	8021a1a <_strtod_l+0x8fe>
 8021a74:	2601      	movs	r6, #1
 8021a76:	4a92      	ldr	r2, [pc, #584]	@ (8021cc0 <_strtod_l+0xba4>)
 8021a78:	4276      	negs	r6, r6
 8021a7a:	189b      	adds	r3, r3, r2
 8021a7c:	4a91      	ldr	r2, [pc, #580]	@ (8021cc4 <_strtod_l+0xba8>)
 8021a7e:	431a      	orrs	r2, r3
 8021a80:	0017      	movs	r7, r2
 8021a82:	e7ca      	b.n	8021a1a <_strtod_l+0x8fe>
 8021a84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021a86:	4233      	tst	r3, r6
 8021a88:	d0c7      	beq.n	8021a1a <_strtod_l+0x8fe>
 8021a8a:	e7e2      	b.n	8021a52 <_strtod_l+0x936>
 8021a8c:	f7ff fb2e 	bl	80210ec <sulp>
 8021a90:	0002      	movs	r2, r0
 8021a92:	000b      	movs	r3, r1
 8021a94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021a96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021a98:	f7e1 f898 	bl	8002bcc <__aeabi_dsub>
 8021a9c:	2200      	movs	r2, #0
 8021a9e:	2300      	movs	r3, #0
 8021aa0:	0006      	movs	r6, r0
 8021aa2:	000f      	movs	r7, r1
 8021aa4:	f7de fd04 	bl	80004b0 <__aeabi_dcmpeq>
 8021aa8:	2800      	cmp	r0, #0
 8021aaa:	d0b6      	beq.n	8021a1a <_strtod_l+0x8fe>
 8021aac:	e60c      	b.n	80216c8 <_strtod_l+0x5ac>
 8021aae:	9907      	ldr	r1, [sp, #28]
 8021ab0:	9806      	ldr	r0, [sp, #24]
 8021ab2:	f003 f901 	bl	8024cb8 <__ratio>
 8021ab6:	2380      	movs	r3, #128	@ 0x80
 8021ab8:	2200      	movs	r2, #0
 8021aba:	05db      	lsls	r3, r3, #23
 8021abc:	0004      	movs	r4, r0
 8021abe:	000d      	movs	r5, r1
 8021ac0:	f7de fd06 	bl	80004d0 <__aeabi_dcmple>
 8021ac4:	2800      	cmp	r0, #0
 8021ac6:	d06c      	beq.n	8021ba2 <_strtod_l+0xa86>
 8021ac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d177      	bne.n	8021bbe <_strtod_l+0xaa2>
 8021ace:	2e00      	cmp	r6, #0
 8021ad0:	d157      	bne.n	8021b82 <_strtod_l+0xa66>
 8021ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021ad4:	031b      	lsls	r3, r3, #12
 8021ad6:	d15a      	bne.n	8021b8e <_strtod_l+0xa72>
 8021ad8:	2200      	movs	r2, #0
 8021ada:	0020      	movs	r0, r4
 8021adc:	0029      	movs	r1, r5
 8021ade:	4b7a      	ldr	r3, [pc, #488]	@ (8021cc8 <_strtod_l+0xbac>)
 8021ae0:	f7de fcec 	bl	80004bc <__aeabi_dcmplt>
 8021ae4:	2800      	cmp	r0, #0
 8021ae6:	d159      	bne.n	8021b9c <_strtod_l+0xa80>
 8021ae8:	0020      	movs	r0, r4
 8021aea:	0029      	movs	r1, r5
 8021aec:	2200      	movs	r2, #0
 8021aee:	4b77      	ldr	r3, [pc, #476]	@ (8021ccc <_strtod_l+0xbb0>)
 8021af0:	f7e0 fda4 	bl	800263c <__aeabi_dmul>
 8021af4:	0004      	movs	r4, r0
 8021af6:	000d      	movs	r5, r1
 8021af8:	2380      	movs	r3, #128	@ 0x80
 8021afa:	061b      	lsls	r3, r3, #24
 8021afc:	18eb      	adds	r3, r5, r3
 8021afe:	940a      	str	r4, [sp, #40]	@ 0x28
 8021b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021b06:	9214      	str	r2, [sp, #80]	@ 0x50
 8021b08:	9315      	str	r3, [sp, #84]	@ 0x54
 8021b0a:	4a71      	ldr	r2, [pc, #452]	@ (8021cd0 <_strtod_l+0xbb4>)
 8021b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b0e:	4013      	ands	r3, r2
 8021b10:	9316      	str	r3, [sp, #88]	@ 0x58
 8021b12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021b14:	4b6f      	ldr	r3, [pc, #444]	@ (8021cd4 <_strtod_l+0xbb8>)
 8021b16:	429a      	cmp	r2, r3
 8021b18:	d000      	beq.n	8021b1c <_strtod_l+0xa00>
 8021b1a:	e087      	b.n	8021c2c <_strtod_l+0xb10>
 8021b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8021cd8 <_strtod_l+0xbbc>)
 8021b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b20:	4694      	mov	ip, r2
 8021b22:	4463      	add	r3, ip
 8021b24:	001f      	movs	r7, r3
 8021b26:	0030      	movs	r0, r6
 8021b28:	0019      	movs	r1, r3
 8021b2a:	f002 fff9 	bl	8024b20 <__ulp>
 8021b2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021b30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021b32:	f7e0 fd83 	bl	800263c <__aeabi_dmul>
 8021b36:	0032      	movs	r2, r6
 8021b38:	003b      	movs	r3, r7
 8021b3a:	f7df fdd7 	bl	80016ec <__aeabi_dadd>
 8021b3e:	4a64      	ldr	r2, [pc, #400]	@ (8021cd0 <_strtod_l+0xbb4>)
 8021b40:	4b66      	ldr	r3, [pc, #408]	@ (8021cdc <_strtod_l+0xbc0>)
 8021b42:	0006      	movs	r6, r0
 8021b44:	400a      	ands	r2, r1
 8021b46:	429a      	cmp	r2, r3
 8021b48:	d940      	bls.n	8021bcc <_strtod_l+0xab0>
 8021b4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021b4c:	4a64      	ldr	r2, [pc, #400]	@ (8021ce0 <_strtod_l+0xbc4>)
 8021b4e:	4293      	cmp	r3, r2
 8021b50:	d103      	bne.n	8021b5a <_strtod_l+0xa3e>
 8021b52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021b54:	3301      	adds	r3, #1
 8021b56:	d100      	bne.n	8021b5a <_strtod_l+0xa3e>
 8021b58:	e51a      	b.n	8021590 <_strtod_l+0x474>
 8021b5a:	2601      	movs	r6, #1
 8021b5c:	4f60      	ldr	r7, [pc, #384]	@ (8021ce0 <_strtod_l+0xbc4>)
 8021b5e:	4276      	negs	r6, r6
 8021b60:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021b62:	9805      	ldr	r0, [sp, #20]
 8021b64:	f002 fc90 	bl	8024488 <_Bfree>
 8021b68:	9908      	ldr	r1, [sp, #32]
 8021b6a:	9805      	ldr	r0, [sp, #20]
 8021b6c:	f002 fc8c 	bl	8024488 <_Bfree>
 8021b70:	9907      	ldr	r1, [sp, #28]
 8021b72:	9805      	ldr	r0, [sp, #20]
 8021b74:	f002 fc88 	bl	8024488 <_Bfree>
 8021b78:	9906      	ldr	r1, [sp, #24]
 8021b7a:	9805      	ldr	r0, [sp, #20]
 8021b7c:	f002 fc84 	bl	8024488 <_Bfree>
 8021b80:	e617      	b.n	80217b2 <_strtod_l+0x696>
 8021b82:	2e01      	cmp	r6, #1
 8021b84:	d103      	bne.n	8021b8e <_strtod_l+0xa72>
 8021b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	d100      	bne.n	8021b8e <_strtod_l+0xa72>
 8021b8c:	e59c      	b.n	80216c8 <_strtod_l+0x5ac>
 8021b8e:	2300      	movs	r3, #0
 8021b90:	4c54      	ldr	r4, [pc, #336]	@ (8021ce4 <_strtod_l+0xbc8>)
 8021b92:	4d4d      	ldr	r5, [pc, #308]	@ (8021cc8 <_strtod_l+0xbac>)
 8021b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8021b96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021b98:	2400      	movs	r4, #0
 8021b9a:	e7b2      	b.n	8021b02 <_strtod_l+0x9e6>
 8021b9c:	2400      	movs	r4, #0
 8021b9e:	4d4b      	ldr	r5, [pc, #300]	@ (8021ccc <_strtod_l+0xbb0>)
 8021ba0:	e7aa      	b.n	8021af8 <_strtod_l+0x9dc>
 8021ba2:	0020      	movs	r0, r4
 8021ba4:	0029      	movs	r1, r5
 8021ba6:	4b49      	ldr	r3, [pc, #292]	@ (8021ccc <_strtod_l+0xbb0>)
 8021ba8:	2200      	movs	r2, #0
 8021baa:	f7e0 fd47 	bl	800263c <__aeabi_dmul>
 8021bae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021bb0:	0004      	movs	r4, r0
 8021bb2:	000d      	movs	r5, r1
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	d09f      	beq.n	8021af8 <_strtod_l+0x9dc>
 8021bb8:	940a      	str	r4, [sp, #40]	@ 0x28
 8021bba:	950b      	str	r5, [sp, #44]	@ 0x2c
 8021bbc:	e7a1      	b.n	8021b02 <_strtod_l+0x9e6>
 8021bbe:	2300      	movs	r3, #0
 8021bc0:	4c41      	ldr	r4, [pc, #260]	@ (8021cc8 <_strtod_l+0xbac>)
 8021bc2:	0025      	movs	r5, r4
 8021bc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8021bc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021bc8:	001c      	movs	r4, r3
 8021bca:	e79a      	b.n	8021b02 <_strtod_l+0x9e6>
 8021bcc:	23d4      	movs	r3, #212	@ 0xd4
 8021bce:	049b      	lsls	r3, r3, #18
 8021bd0:	18cf      	adds	r7, r1, r3
 8021bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021bd4:	9710      	str	r7, [sp, #64]	@ 0x40
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	d1c2      	bne.n	8021b60 <_strtod_l+0xa44>
 8021bda:	4b3d      	ldr	r3, [pc, #244]	@ (8021cd0 <_strtod_l+0xbb4>)
 8021bdc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021bde:	403b      	ands	r3, r7
 8021be0:	429a      	cmp	r2, r3
 8021be2:	d1bd      	bne.n	8021b60 <_strtod_l+0xa44>
 8021be4:	0020      	movs	r0, r4
 8021be6:	0029      	movs	r1, r5
 8021be8:	f7de fd4e 	bl	8000688 <__aeabi_d2lz>
 8021bec:	f7de fd86 	bl	80006fc <__aeabi_l2d>
 8021bf0:	0002      	movs	r2, r0
 8021bf2:	000b      	movs	r3, r1
 8021bf4:	0020      	movs	r0, r4
 8021bf6:	0029      	movs	r1, r5
 8021bf8:	f7e0 ffe8 	bl	8002bcc <__aeabi_dsub>
 8021bfc:	033c      	lsls	r4, r7, #12
 8021bfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021c00:	0b24      	lsrs	r4, r4, #12
 8021c02:	4334      	orrs	r4, r6
 8021c04:	900e      	str	r0, [sp, #56]	@ 0x38
 8021c06:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021c08:	4a37      	ldr	r2, [pc, #220]	@ (8021ce8 <_strtod_l+0xbcc>)
 8021c0a:	431c      	orrs	r4, r3
 8021c0c:	d052      	beq.n	8021cb4 <_strtod_l+0xb98>
 8021c0e:	4b37      	ldr	r3, [pc, #220]	@ (8021cec <_strtod_l+0xbd0>)
 8021c10:	f7de fc54 	bl	80004bc <__aeabi_dcmplt>
 8021c14:	2800      	cmp	r0, #0
 8021c16:	d000      	beq.n	8021c1a <_strtod_l+0xafe>
 8021c18:	e4c3      	b.n	80215a2 <_strtod_l+0x486>
 8021c1a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021c1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021c1e:	4a34      	ldr	r2, [pc, #208]	@ (8021cf0 <_strtod_l+0xbd4>)
 8021c20:	4b2a      	ldr	r3, [pc, #168]	@ (8021ccc <_strtod_l+0xbb0>)
 8021c22:	f7de fc5f 	bl	80004e4 <__aeabi_dcmpgt>
 8021c26:	2800      	cmp	r0, #0
 8021c28:	d09a      	beq.n	8021b60 <_strtod_l+0xa44>
 8021c2a:	e4ba      	b.n	80215a2 <_strtod_l+0x486>
 8021c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d02a      	beq.n	8021c88 <_strtod_l+0xb6c>
 8021c32:	23d4      	movs	r3, #212	@ 0xd4
 8021c34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021c36:	04db      	lsls	r3, r3, #19
 8021c38:	429a      	cmp	r2, r3
 8021c3a:	d825      	bhi.n	8021c88 <_strtod_l+0xb6c>
 8021c3c:	0020      	movs	r0, r4
 8021c3e:	0029      	movs	r1, r5
 8021c40:	4a2c      	ldr	r2, [pc, #176]	@ (8021cf4 <_strtod_l+0xbd8>)
 8021c42:	4b2d      	ldr	r3, [pc, #180]	@ (8021cf8 <_strtod_l+0xbdc>)
 8021c44:	f7de fc44 	bl	80004d0 <__aeabi_dcmple>
 8021c48:	2800      	cmp	r0, #0
 8021c4a:	d016      	beq.n	8021c7a <_strtod_l+0xb5e>
 8021c4c:	0020      	movs	r0, r4
 8021c4e:	0029      	movs	r1, r5
 8021c50:	f7de fcfc 	bl	800064c <__aeabi_d2uiz>
 8021c54:	2800      	cmp	r0, #0
 8021c56:	d100      	bne.n	8021c5a <_strtod_l+0xb3e>
 8021c58:	3001      	adds	r0, #1
 8021c5a:	f7e1 fbdf 	bl	800341c <__aeabi_ui2d>
 8021c5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021c60:	0004      	movs	r4, r0
 8021c62:	000d      	movs	r5, r1
 8021c64:	2b00      	cmp	r3, #0
 8021c66:	d122      	bne.n	8021cae <_strtod_l+0xb92>
 8021c68:	2380      	movs	r3, #128	@ 0x80
 8021c6a:	061b      	lsls	r3, r3, #24
 8021c6c:	18cb      	adds	r3, r1, r3
 8021c6e:	9018      	str	r0, [sp, #96]	@ 0x60
 8021c70:	9319      	str	r3, [sp, #100]	@ 0x64
 8021c72:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021c74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021c76:	9214      	str	r2, [sp, #80]	@ 0x50
 8021c78:	9315      	str	r3, [sp, #84]	@ 0x54
 8021c7a:	22d6      	movs	r2, #214	@ 0xd6
 8021c7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021c7e:	04d2      	lsls	r2, r2, #19
 8021c80:	189b      	adds	r3, r3, r2
 8021c82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021c84:	1a9b      	subs	r3, r3, r2
 8021c86:	9315      	str	r3, [sp, #84]	@ 0x54
 8021c88:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021c8a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021c8c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8021c8e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8021c90:	f002 ff46 	bl	8024b20 <__ulp>
 8021c94:	0002      	movs	r2, r0
 8021c96:	000b      	movs	r3, r1
 8021c98:	0030      	movs	r0, r6
 8021c9a:	0039      	movs	r1, r7
 8021c9c:	f7e0 fcce 	bl	800263c <__aeabi_dmul>
 8021ca0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021ca2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021ca4:	f7df fd22 	bl	80016ec <__aeabi_dadd>
 8021ca8:	0006      	movs	r6, r0
 8021caa:	000f      	movs	r7, r1
 8021cac:	e791      	b.n	8021bd2 <_strtod_l+0xab6>
 8021cae:	9418      	str	r4, [sp, #96]	@ 0x60
 8021cb0:	9519      	str	r5, [sp, #100]	@ 0x64
 8021cb2:	e7de      	b.n	8021c72 <_strtod_l+0xb56>
 8021cb4:	4b11      	ldr	r3, [pc, #68]	@ (8021cfc <_strtod_l+0xbe0>)
 8021cb6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8021cb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8021cba:	f7de fbff 	bl	80004bc <__aeabi_dcmplt>
 8021cbe:	e7b2      	b.n	8021c26 <_strtod_l+0xb0a>
 8021cc0:	fff00000 	.word	0xfff00000
 8021cc4:	000fffff 	.word	0x000fffff
 8021cc8:	3ff00000 	.word	0x3ff00000
 8021ccc:	3fe00000 	.word	0x3fe00000
 8021cd0:	7ff00000 	.word	0x7ff00000
 8021cd4:	7fe00000 	.word	0x7fe00000
 8021cd8:	fcb00000 	.word	0xfcb00000
 8021cdc:	7c9fffff 	.word	0x7c9fffff
 8021ce0:	7fefffff 	.word	0x7fefffff
 8021ce4:	bff00000 	.word	0xbff00000
 8021ce8:	94a03595 	.word	0x94a03595
 8021cec:	3fdfffff 	.word	0x3fdfffff
 8021cf0:	35afe535 	.word	0x35afe535
 8021cf4:	ffc00000 	.word	0xffc00000
 8021cf8:	41dfffff 	.word	0x41dfffff
 8021cfc:	3fcfffff 	.word	0x3fcfffff

08021d00 <strtod>:
 8021d00:	b510      	push	{r4, lr}
 8021d02:	4c04      	ldr	r4, [pc, #16]	@ (8021d14 <strtod+0x14>)
 8021d04:	000a      	movs	r2, r1
 8021d06:	0001      	movs	r1, r0
 8021d08:	4b03      	ldr	r3, [pc, #12]	@ (8021d18 <strtod+0x18>)
 8021d0a:	6820      	ldr	r0, [r4, #0]
 8021d0c:	f7ff fa06 	bl	802111c <_strtod_l>
 8021d10:	bd10      	pop	{r4, pc}
 8021d12:	46c0      	nop			@ (mov r8, r8)
 8021d14:	200003e4 	.word	0x200003e4
 8021d18:	20000278 	.word	0x20000278

08021d1c <_strtol_l.constprop.0>:
 8021d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d1e:	b085      	sub	sp, #20
 8021d20:	0017      	movs	r7, r2
 8021d22:	001e      	movs	r6, r3
 8021d24:	9003      	str	r0, [sp, #12]
 8021d26:	9101      	str	r1, [sp, #4]
 8021d28:	2b24      	cmp	r3, #36	@ 0x24
 8021d2a:	d844      	bhi.n	8021db6 <_strtol_l.constprop.0+0x9a>
 8021d2c:	000c      	movs	r4, r1
 8021d2e:	2b01      	cmp	r3, #1
 8021d30:	d041      	beq.n	8021db6 <_strtol_l.constprop.0+0x9a>
 8021d32:	4b3d      	ldr	r3, [pc, #244]	@ (8021e28 <_strtol_l.constprop.0+0x10c>)
 8021d34:	2208      	movs	r2, #8
 8021d36:	469c      	mov	ip, r3
 8021d38:	0023      	movs	r3, r4
 8021d3a:	4661      	mov	r1, ip
 8021d3c:	781d      	ldrb	r5, [r3, #0]
 8021d3e:	3401      	adds	r4, #1
 8021d40:	5d48      	ldrb	r0, [r1, r5]
 8021d42:	0001      	movs	r1, r0
 8021d44:	4011      	ands	r1, r2
 8021d46:	4210      	tst	r0, r2
 8021d48:	d1f6      	bne.n	8021d38 <_strtol_l.constprop.0+0x1c>
 8021d4a:	2d2d      	cmp	r5, #45	@ 0x2d
 8021d4c:	d13a      	bne.n	8021dc4 <_strtol_l.constprop.0+0xa8>
 8021d4e:	7825      	ldrb	r5, [r4, #0]
 8021d50:	1c9c      	adds	r4, r3, #2
 8021d52:	2301      	movs	r3, #1
 8021d54:	9300      	str	r3, [sp, #0]
 8021d56:	2210      	movs	r2, #16
 8021d58:	0033      	movs	r3, r6
 8021d5a:	4393      	bics	r3, r2
 8021d5c:	d109      	bne.n	8021d72 <_strtol_l.constprop.0+0x56>
 8021d5e:	2d30      	cmp	r5, #48	@ 0x30
 8021d60:	d136      	bne.n	8021dd0 <_strtol_l.constprop.0+0xb4>
 8021d62:	2120      	movs	r1, #32
 8021d64:	7823      	ldrb	r3, [r4, #0]
 8021d66:	438b      	bics	r3, r1
 8021d68:	2b58      	cmp	r3, #88	@ 0x58
 8021d6a:	d131      	bne.n	8021dd0 <_strtol_l.constprop.0+0xb4>
 8021d6c:	0016      	movs	r6, r2
 8021d6e:	7865      	ldrb	r5, [r4, #1]
 8021d70:	3402      	adds	r4, #2
 8021d72:	4a2e      	ldr	r2, [pc, #184]	@ (8021e2c <_strtol_l.constprop.0+0x110>)
 8021d74:	9b00      	ldr	r3, [sp, #0]
 8021d76:	4694      	mov	ip, r2
 8021d78:	4463      	add	r3, ip
 8021d7a:	0031      	movs	r1, r6
 8021d7c:	0018      	movs	r0, r3
 8021d7e:	9302      	str	r3, [sp, #8]
 8021d80:	f7de fa96 	bl	80002b0 <__aeabi_uidivmod>
 8021d84:	2200      	movs	r2, #0
 8021d86:	4684      	mov	ip, r0
 8021d88:	0010      	movs	r0, r2
 8021d8a:	002b      	movs	r3, r5
 8021d8c:	3b30      	subs	r3, #48	@ 0x30
 8021d8e:	2b09      	cmp	r3, #9
 8021d90:	d825      	bhi.n	8021dde <_strtol_l.constprop.0+0xc2>
 8021d92:	001d      	movs	r5, r3
 8021d94:	42ae      	cmp	r6, r5
 8021d96:	dd31      	ble.n	8021dfc <_strtol_l.constprop.0+0xe0>
 8021d98:	1c53      	adds	r3, r2, #1
 8021d9a:	d009      	beq.n	8021db0 <_strtol_l.constprop.0+0x94>
 8021d9c:	2201      	movs	r2, #1
 8021d9e:	4252      	negs	r2, r2
 8021da0:	4584      	cmp	ip, r0
 8021da2:	d305      	bcc.n	8021db0 <_strtol_l.constprop.0+0x94>
 8021da4:	d101      	bne.n	8021daa <_strtol_l.constprop.0+0x8e>
 8021da6:	42a9      	cmp	r1, r5
 8021da8:	db25      	blt.n	8021df6 <_strtol_l.constprop.0+0xda>
 8021daa:	2201      	movs	r2, #1
 8021dac:	4370      	muls	r0, r6
 8021dae:	1828      	adds	r0, r5, r0
 8021db0:	7825      	ldrb	r5, [r4, #0]
 8021db2:	3401      	adds	r4, #1
 8021db4:	e7e9      	b.n	8021d8a <_strtol_l.constprop.0+0x6e>
 8021db6:	f000 ffe7 	bl	8022d88 <__errno>
 8021dba:	2316      	movs	r3, #22
 8021dbc:	6003      	str	r3, [r0, #0]
 8021dbe:	2000      	movs	r0, #0
 8021dc0:	b005      	add	sp, #20
 8021dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021dc4:	9100      	str	r1, [sp, #0]
 8021dc6:	2d2b      	cmp	r5, #43	@ 0x2b
 8021dc8:	d1c5      	bne.n	8021d56 <_strtol_l.constprop.0+0x3a>
 8021dca:	7825      	ldrb	r5, [r4, #0]
 8021dcc:	1c9c      	adds	r4, r3, #2
 8021dce:	e7c2      	b.n	8021d56 <_strtol_l.constprop.0+0x3a>
 8021dd0:	2e00      	cmp	r6, #0
 8021dd2:	d1ce      	bne.n	8021d72 <_strtol_l.constprop.0+0x56>
 8021dd4:	3608      	adds	r6, #8
 8021dd6:	2d30      	cmp	r5, #48	@ 0x30
 8021dd8:	d0cb      	beq.n	8021d72 <_strtol_l.constprop.0+0x56>
 8021dda:	3602      	adds	r6, #2
 8021ddc:	e7c9      	b.n	8021d72 <_strtol_l.constprop.0+0x56>
 8021dde:	002b      	movs	r3, r5
 8021de0:	3b41      	subs	r3, #65	@ 0x41
 8021de2:	2b19      	cmp	r3, #25
 8021de4:	d801      	bhi.n	8021dea <_strtol_l.constprop.0+0xce>
 8021de6:	3d37      	subs	r5, #55	@ 0x37
 8021de8:	e7d4      	b.n	8021d94 <_strtol_l.constprop.0+0x78>
 8021dea:	002b      	movs	r3, r5
 8021dec:	3b61      	subs	r3, #97	@ 0x61
 8021dee:	2b19      	cmp	r3, #25
 8021df0:	d804      	bhi.n	8021dfc <_strtol_l.constprop.0+0xe0>
 8021df2:	3d57      	subs	r5, #87	@ 0x57
 8021df4:	e7ce      	b.n	8021d94 <_strtol_l.constprop.0+0x78>
 8021df6:	2201      	movs	r2, #1
 8021df8:	4252      	negs	r2, r2
 8021dfa:	e7d9      	b.n	8021db0 <_strtol_l.constprop.0+0x94>
 8021dfc:	1c53      	adds	r3, r2, #1
 8021dfe:	d108      	bne.n	8021e12 <_strtol_l.constprop.0+0xf6>
 8021e00:	2322      	movs	r3, #34	@ 0x22
 8021e02:	9a03      	ldr	r2, [sp, #12]
 8021e04:	9802      	ldr	r0, [sp, #8]
 8021e06:	6013      	str	r3, [r2, #0]
 8021e08:	2f00      	cmp	r7, #0
 8021e0a:	d0d9      	beq.n	8021dc0 <_strtol_l.constprop.0+0xa4>
 8021e0c:	1e63      	subs	r3, r4, #1
 8021e0e:	9301      	str	r3, [sp, #4]
 8021e10:	e007      	b.n	8021e22 <_strtol_l.constprop.0+0x106>
 8021e12:	9b00      	ldr	r3, [sp, #0]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d000      	beq.n	8021e1a <_strtol_l.constprop.0+0xfe>
 8021e18:	4240      	negs	r0, r0
 8021e1a:	2f00      	cmp	r7, #0
 8021e1c:	d0d0      	beq.n	8021dc0 <_strtol_l.constprop.0+0xa4>
 8021e1e:	2a00      	cmp	r2, #0
 8021e20:	d1f4      	bne.n	8021e0c <_strtol_l.constprop.0+0xf0>
 8021e22:	9b01      	ldr	r3, [sp, #4]
 8021e24:	603b      	str	r3, [r7, #0]
 8021e26:	e7cb      	b.n	8021dc0 <_strtol_l.constprop.0+0xa4>
 8021e28:	08029731 	.word	0x08029731
 8021e2c:	7fffffff 	.word	0x7fffffff

08021e30 <strtol>:
 8021e30:	b510      	push	{r4, lr}
 8021e32:	4c04      	ldr	r4, [pc, #16]	@ (8021e44 <strtol+0x14>)
 8021e34:	0013      	movs	r3, r2
 8021e36:	000a      	movs	r2, r1
 8021e38:	0001      	movs	r1, r0
 8021e3a:	6820      	ldr	r0, [r4, #0]
 8021e3c:	f7ff ff6e 	bl	8021d1c <_strtol_l.constprop.0>
 8021e40:	bd10      	pop	{r4, pc}
 8021e42:	46c0      	nop			@ (mov r8, r8)
 8021e44:	200003e4 	.word	0x200003e4

08021e48 <__cvt>:
 8021e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e4a:	001f      	movs	r7, r3
 8021e4c:	2300      	movs	r3, #0
 8021e4e:	0016      	movs	r6, r2
 8021e50:	b08b      	sub	sp, #44	@ 0x2c
 8021e52:	429f      	cmp	r7, r3
 8021e54:	da04      	bge.n	8021e60 <__cvt+0x18>
 8021e56:	2180      	movs	r1, #128	@ 0x80
 8021e58:	0609      	lsls	r1, r1, #24
 8021e5a:	187b      	adds	r3, r7, r1
 8021e5c:	001f      	movs	r7, r3
 8021e5e:	232d      	movs	r3, #45	@ 0x2d
 8021e60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021e62:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021e64:	7013      	strb	r3, [r2, #0]
 8021e66:	2320      	movs	r3, #32
 8021e68:	2203      	movs	r2, #3
 8021e6a:	439d      	bics	r5, r3
 8021e6c:	2d46      	cmp	r5, #70	@ 0x46
 8021e6e:	d007      	beq.n	8021e80 <__cvt+0x38>
 8021e70:	002b      	movs	r3, r5
 8021e72:	3b45      	subs	r3, #69	@ 0x45
 8021e74:	4259      	negs	r1, r3
 8021e76:	414b      	adcs	r3, r1
 8021e78:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021e7a:	3a01      	subs	r2, #1
 8021e7c:	18cb      	adds	r3, r1, r3
 8021e7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021e80:	ab09      	add	r3, sp, #36	@ 0x24
 8021e82:	9304      	str	r3, [sp, #16]
 8021e84:	ab08      	add	r3, sp, #32
 8021e86:	9303      	str	r3, [sp, #12]
 8021e88:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021e8a:	9200      	str	r2, [sp, #0]
 8021e8c:	9302      	str	r3, [sp, #8]
 8021e8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021e90:	0032      	movs	r2, r6
 8021e92:	9301      	str	r3, [sp, #4]
 8021e94:	003b      	movs	r3, r7
 8021e96:	f001 f84d 	bl	8022f34 <_dtoa_r>
 8021e9a:	0004      	movs	r4, r0
 8021e9c:	2d47      	cmp	r5, #71	@ 0x47
 8021e9e:	d11b      	bne.n	8021ed8 <__cvt+0x90>
 8021ea0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021ea2:	07db      	lsls	r3, r3, #31
 8021ea4:	d511      	bpl.n	8021eca <__cvt+0x82>
 8021ea6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021ea8:	18c3      	adds	r3, r0, r3
 8021eaa:	9307      	str	r3, [sp, #28]
 8021eac:	2200      	movs	r2, #0
 8021eae:	2300      	movs	r3, #0
 8021eb0:	0030      	movs	r0, r6
 8021eb2:	0039      	movs	r1, r7
 8021eb4:	f7de fafc 	bl	80004b0 <__aeabi_dcmpeq>
 8021eb8:	2800      	cmp	r0, #0
 8021eba:	d001      	beq.n	8021ec0 <__cvt+0x78>
 8021ebc:	9b07      	ldr	r3, [sp, #28]
 8021ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ec0:	2230      	movs	r2, #48	@ 0x30
 8021ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ec4:	9907      	ldr	r1, [sp, #28]
 8021ec6:	428b      	cmp	r3, r1
 8021ec8:	d320      	bcc.n	8021f0c <__cvt+0xc4>
 8021eca:	0020      	movs	r0, r4
 8021ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ece:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021ed0:	1b1b      	subs	r3, r3, r4
 8021ed2:	6013      	str	r3, [r2, #0]
 8021ed4:	b00b      	add	sp, #44	@ 0x2c
 8021ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ed8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021eda:	18c3      	adds	r3, r0, r3
 8021edc:	9307      	str	r3, [sp, #28]
 8021ede:	2d46      	cmp	r5, #70	@ 0x46
 8021ee0:	d1e4      	bne.n	8021eac <__cvt+0x64>
 8021ee2:	7803      	ldrb	r3, [r0, #0]
 8021ee4:	2b30      	cmp	r3, #48	@ 0x30
 8021ee6:	d10c      	bne.n	8021f02 <__cvt+0xba>
 8021ee8:	2200      	movs	r2, #0
 8021eea:	2300      	movs	r3, #0
 8021eec:	0030      	movs	r0, r6
 8021eee:	0039      	movs	r1, r7
 8021ef0:	f7de fade 	bl	80004b0 <__aeabi_dcmpeq>
 8021ef4:	2800      	cmp	r0, #0
 8021ef6:	d104      	bne.n	8021f02 <__cvt+0xba>
 8021ef8:	2301      	movs	r3, #1
 8021efa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8021efc:	1a9b      	subs	r3, r3, r2
 8021efe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021f00:	6013      	str	r3, [r2, #0]
 8021f02:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021f04:	9a07      	ldr	r2, [sp, #28]
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	18d3      	adds	r3, r2, r3
 8021f0a:	e7ce      	b.n	8021eaa <__cvt+0x62>
 8021f0c:	1c59      	adds	r1, r3, #1
 8021f0e:	9109      	str	r1, [sp, #36]	@ 0x24
 8021f10:	701a      	strb	r2, [r3, #0]
 8021f12:	e7d6      	b.n	8021ec2 <__cvt+0x7a>

08021f14 <__exponent>:
 8021f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f16:	232b      	movs	r3, #43	@ 0x2b
 8021f18:	0005      	movs	r5, r0
 8021f1a:	000c      	movs	r4, r1
 8021f1c:	b085      	sub	sp, #20
 8021f1e:	7002      	strb	r2, [r0, #0]
 8021f20:	2900      	cmp	r1, #0
 8021f22:	da01      	bge.n	8021f28 <__exponent+0x14>
 8021f24:	424c      	negs	r4, r1
 8021f26:	3302      	adds	r3, #2
 8021f28:	706b      	strb	r3, [r5, #1]
 8021f2a:	2c09      	cmp	r4, #9
 8021f2c:	dd2c      	ble.n	8021f88 <__exponent+0x74>
 8021f2e:	ab02      	add	r3, sp, #8
 8021f30:	1dde      	adds	r6, r3, #7
 8021f32:	0020      	movs	r0, r4
 8021f34:	210a      	movs	r1, #10
 8021f36:	f7de faa5 	bl	8000484 <__aeabi_idivmod>
 8021f3a:	0037      	movs	r7, r6
 8021f3c:	3130      	adds	r1, #48	@ 0x30
 8021f3e:	3e01      	subs	r6, #1
 8021f40:	0020      	movs	r0, r4
 8021f42:	7031      	strb	r1, [r6, #0]
 8021f44:	210a      	movs	r1, #10
 8021f46:	9401      	str	r4, [sp, #4]
 8021f48:	f7de f9b6 	bl	80002b8 <__divsi3>
 8021f4c:	9b01      	ldr	r3, [sp, #4]
 8021f4e:	0004      	movs	r4, r0
 8021f50:	2b63      	cmp	r3, #99	@ 0x63
 8021f52:	dcee      	bgt.n	8021f32 <__exponent+0x1e>
 8021f54:	1eba      	subs	r2, r7, #2
 8021f56:	1ca8      	adds	r0, r5, #2
 8021f58:	0001      	movs	r1, r0
 8021f5a:	0013      	movs	r3, r2
 8021f5c:	3430      	adds	r4, #48	@ 0x30
 8021f5e:	7014      	strb	r4, [r2, #0]
 8021f60:	ac02      	add	r4, sp, #8
 8021f62:	3407      	adds	r4, #7
 8021f64:	429c      	cmp	r4, r3
 8021f66:	d80a      	bhi.n	8021f7e <__exponent+0x6a>
 8021f68:	2300      	movs	r3, #0
 8021f6a:	42a2      	cmp	r2, r4
 8021f6c:	d803      	bhi.n	8021f76 <__exponent+0x62>
 8021f6e:	3309      	adds	r3, #9
 8021f70:	aa02      	add	r2, sp, #8
 8021f72:	189b      	adds	r3, r3, r2
 8021f74:	1bdb      	subs	r3, r3, r7
 8021f76:	18c0      	adds	r0, r0, r3
 8021f78:	1b40      	subs	r0, r0, r5
 8021f7a:	b005      	add	sp, #20
 8021f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f7e:	781c      	ldrb	r4, [r3, #0]
 8021f80:	3301      	adds	r3, #1
 8021f82:	700c      	strb	r4, [r1, #0]
 8021f84:	3101      	adds	r1, #1
 8021f86:	e7eb      	b.n	8021f60 <__exponent+0x4c>
 8021f88:	2330      	movs	r3, #48	@ 0x30
 8021f8a:	18e4      	adds	r4, r4, r3
 8021f8c:	70ab      	strb	r3, [r5, #2]
 8021f8e:	1d28      	adds	r0, r5, #4
 8021f90:	70ec      	strb	r4, [r5, #3]
 8021f92:	e7f1      	b.n	8021f78 <__exponent+0x64>

08021f94 <_printf_float>:
 8021f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f96:	b097      	sub	sp, #92	@ 0x5c
 8021f98:	000d      	movs	r5, r1
 8021f9a:	920a      	str	r2, [sp, #40]	@ 0x28
 8021f9c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8021f9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021fa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8021fa2:	f000 fe9f 	bl	8022ce4 <_localeconv_r>
 8021fa6:	6803      	ldr	r3, [r0, #0]
 8021fa8:	0018      	movs	r0, r3
 8021faa:	930d      	str	r3, [sp, #52]	@ 0x34
 8021fac:	f7de f8de 	bl	800016c <strlen>
 8021fb0:	2300      	movs	r3, #0
 8021fb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8021fb4:	9314      	str	r3, [sp, #80]	@ 0x50
 8021fb6:	7e2b      	ldrb	r3, [r5, #24]
 8021fb8:	2207      	movs	r2, #7
 8021fba:	930c      	str	r3, [sp, #48]	@ 0x30
 8021fbc:	682b      	ldr	r3, [r5, #0]
 8021fbe:	930e      	str	r3, [sp, #56]	@ 0x38
 8021fc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021fc2:	6823      	ldr	r3, [r4, #0]
 8021fc4:	05c9      	lsls	r1, r1, #23
 8021fc6:	d545      	bpl.n	8022054 <_printf_float+0xc0>
 8021fc8:	189b      	adds	r3, r3, r2
 8021fca:	4393      	bics	r3, r2
 8021fcc:	001a      	movs	r2, r3
 8021fce:	3208      	adds	r2, #8
 8021fd0:	6022      	str	r2, [r4, #0]
 8021fd2:	2201      	movs	r2, #1
 8021fd4:	681e      	ldr	r6, [r3, #0]
 8021fd6:	685f      	ldr	r7, [r3, #4]
 8021fd8:	007b      	lsls	r3, r7, #1
 8021fda:	085b      	lsrs	r3, r3, #1
 8021fdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8021fde:	9610      	str	r6, [sp, #64]	@ 0x40
 8021fe0:	64ae      	str	r6, [r5, #72]	@ 0x48
 8021fe2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8021fe4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021fe6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021fe8:	4ba7      	ldr	r3, [pc, #668]	@ (8022288 <_printf_float+0x2f4>)
 8021fea:	4252      	negs	r2, r2
 8021fec:	f7e1 f98a 	bl	8003304 <__aeabi_dcmpun>
 8021ff0:	2800      	cmp	r0, #0
 8021ff2:	d131      	bne.n	8022058 <_printf_float+0xc4>
 8021ff4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021ff6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021ff8:	2201      	movs	r2, #1
 8021ffa:	4ba3      	ldr	r3, [pc, #652]	@ (8022288 <_printf_float+0x2f4>)
 8021ffc:	4252      	negs	r2, r2
 8021ffe:	f7de fa67 	bl	80004d0 <__aeabi_dcmple>
 8022002:	2800      	cmp	r0, #0
 8022004:	d128      	bne.n	8022058 <_printf_float+0xc4>
 8022006:	2200      	movs	r2, #0
 8022008:	2300      	movs	r3, #0
 802200a:	0030      	movs	r0, r6
 802200c:	0039      	movs	r1, r7
 802200e:	f7de fa55 	bl	80004bc <__aeabi_dcmplt>
 8022012:	2800      	cmp	r0, #0
 8022014:	d003      	beq.n	802201e <_printf_float+0x8a>
 8022016:	002b      	movs	r3, r5
 8022018:	222d      	movs	r2, #45	@ 0x2d
 802201a:	3343      	adds	r3, #67	@ 0x43
 802201c:	701a      	strb	r2, [r3, #0]
 802201e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022020:	4f9a      	ldr	r7, [pc, #616]	@ (802228c <_printf_float+0x2f8>)
 8022022:	2b47      	cmp	r3, #71	@ 0x47
 8022024:	d900      	bls.n	8022028 <_printf_float+0x94>
 8022026:	4f9a      	ldr	r7, [pc, #616]	@ (8022290 <_printf_float+0x2fc>)
 8022028:	2303      	movs	r3, #3
 802202a:	2400      	movs	r4, #0
 802202c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802202e:	612b      	str	r3, [r5, #16]
 8022030:	3301      	adds	r3, #1
 8022032:	439a      	bics	r2, r3
 8022034:	602a      	str	r2, [r5, #0]
 8022036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022038:	0029      	movs	r1, r5
 802203a:	9300      	str	r3, [sp, #0]
 802203c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802203e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022040:	aa15      	add	r2, sp, #84	@ 0x54
 8022042:	f000 f9e5 	bl	8022410 <_printf_common>
 8022046:	3001      	adds	r0, #1
 8022048:	d000      	beq.n	802204c <_printf_float+0xb8>
 802204a:	e09f      	b.n	802218c <_printf_float+0x1f8>
 802204c:	2001      	movs	r0, #1
 802204e:	4240      	negs	r0, r0
 8022050:	b017      	add	sp, #92	@ 0x5c
 8022052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022054:	3307      	adds	r3, #7
 8022056:	e7b8      	b.n	8021fca <_printf_float+0x36>
 8022058:	0032      	movs	r2, r6
 802205a:	003b      	movs	r3, r7
 802205c:	0030      	movs	r0, r6
 802205e:	0039      	movs	r1, r7
 8022060:	f7e1 f950 	bl	8003304 <__aeabi_dcmpun>
 8022064:	2800      	cmp	r0, #0
 8022066:	d00b      	beq.n	8022080 <_printf_float+0xec>
 8022068:	2f00      	cmp	r7, #0
 802206a:	da03      	bge.n	8022074 <_printf_float+0xe0>
 802206c:	002b      	movs	r3, r5
 802206e:	222d      	movs	r2, #45	@ 0x2d
 8022070:	3343      	adds	r3, #67	@ 0x43
 8022072:	701a      	strb	r2, [r3, #0]
 8022074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022076:	4f87      	ldr	r7, [pc, #540]	@ (8022294 <_printf_float+0x300>)
 8022078:	2b47      	cmp	r3, #71	@ 0x47
 802207a:	d9d5      	bls.n	8022028 <_printf_float+0x94>
 802207c:	4f86      	ldr	r7, [pc, #536]	@ (8022298 <_printf_float+0x304>)
 802207e:	e7d3      	b.n	8022028 <_printf_float+0x94>
 8022080:	2220      	movs	r2, #32
 8022082:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022084:	686b      	ldr	r3, [r5, #4]
 8022086:	4394      	bics	r4, r2
 8022088:	1c5a      	adds	r2, r3, #1
 802208a:	d146      	bne.n	802211a <_printf_float+0x186>
 802208c:	3307      	adds	r3, #7
 802208e:	606b      	str	r3, [r5, #4]
 8022090:	2380      	movs	r3, #128	@ 0x80
 8022092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022094:	00db      	lsls	r3, r3, #3
 8022096:	4313      	orrs	r3, r2
 8022098:	2200      	movs	r2, #0
 802209a:	602b      	str	r3, [r5, #0]
 802209c:	9206      	str	r2, [sp, #24]
 802209e:	aa14      	add	r2, sp, #80	@ 0x50
 80220a0:	9205      	str	r2, [sp, #20]
 80220a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80220a4:	a90a      	add	r1, sp, #40	@ 0x28
 80220a6:	9204      	str	r2, [sp, #16]
 80220a8:	aa13      	add	r2, sp, #76	@ 0x4c
 80220aa:	9203      	str	r2, [sp, #12]
 80220ac:	2223      	movs	r2, #35	@ 0x23
 80220ae:	1852      	adds	r2, r2, r1
 80220b0:	9202      	str	r2, [sp, #8]
 80220b2:	9301      	str	r3, [sp, #4]
 80220b4:	686b      	ldr	r3, [r5, #4]
 80220b6:	0032      	movs	r2, r6
 80220b8:	9300      	str	r3, [sp, #0]
 80220ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220bc:	003b      	movs	r3, r7
 80220be:	f7ff fec3 	bl	8021e48 <__cvt>
 80220c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80220c4:	0007      	movs	r7, r0
 80220c6:	2c47      	cmp	r4, #71	@ 0x47
 80220c8:	d12d      	bne.n	8022126 <_printf_float+0x192>
 80220ca:	1cd3      	adds	r3, r2, #3
 80220cc:	db02      	blt.n	80220d4 <_printf_float+0x140>
 80220ce:	686b      	ldr	r3, [r5, #4]
 80220d0:	429a      	cmp	r2, r3
 80220d2:	dd48      	ble.n	8022166 <_printf_float+0x1d2>
 80220d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80220d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80220d8:	3b02      	subs	r3, #2
 80220da:	b2db      	uxtb	r3, r3
 80220dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80220de:	0028      	movs	r0, r5
 80220e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80220e2:	3901      	subs	r1, #1
 80220e4:	3050      	adds	r0, #80	@ 0x50
 80220e6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80220e8:	f7ff ff14 	bl	8021f14 <__exponent>
 80220ec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80220ee:	0004      	movs	r4, r0
 80220f0:	1813      	adds	r3, r2, r0
 80220f2:	612b      	str	r3, [r5, #16]
 80220f4:	2a01      	cmp	r2, #1
 80220f6:	dc02      	bgt.n	80220fe <_printf_float+0x16a>
 80220f8:	682a      	ldr	r2, [r5, #0]
 80220fa:	07d2      	lsls	r2, r2, #31
 80220fc:	d501      	bpl.n	8022102 <_printf_float+0x16e>
 80220fe:	3301      	adds	r3, #1
 8022100:	612b      	str	r3, [r5, #16]
 8022102:	2323      	movs	r3, #35	@ 0x23
 8022104:	aa0a      	add	r2, sp, #40	@ 0x28
 8022106:	189b      	adds	r3, r3, r2
 8022108:	781b      	ldrb	r3, [r3, #0]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d100      	bne.n	8022110 <_printf_float+0x17c>
 802210e:	e792      	b.n	8022036 <_printf_float+0xa2>
 8022110:	002b      	movs	r3, r5
 8022112:	222d      	movs	r2, #45	@ 0x2d
 8022114:	3343      	adds	r3, #67	@ 0x43
 8022116:	701a      	strb	r2, [r3, #0]
 8022118:	e78d      	b.n	8022036 <_printf_float+0xa2>
 802211a:	2c47      	cmp	r4, #71	@ 0x47
 802211c:	d1b8      	bne.n	8022090 <_printf_float+0xfc>
 802211e:	2b00      	cmp	r3, #0
 8022120:	d1b6      	bne.n	8022090 <_printf_float+0xfc>
 8022122:	3301      	adds	r3, #1
 8022124:	e7b3      	b.n	802208e <_printf_float+0xfa>
 8022126:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022128:	0011      	movs	r1, r2
 802212a:	2b65      	cmp	r3, #101	@ 0x65
 802212c:	d9d7      	bls.n	80220de <_printf_float+0x14a>
 802212e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022130:	2b66      	cmp	r3, #102	@ 0x66
 8022132:	d11a      	bne.n	802216a <_printf_float+0x1d6>
 8022134:	686b      	ldr	r3, [r5, #4]
 8022136:	2a00      	cmp	r2, #0
 8022138:	dd09      	ble.n	802214e <_printf_float+0x1ba>
 802213a:	612a      	str	r2, [r5, #16]
 802213c:	2b00      	cmp	r3, #0
 802213e:	d102      	bne.n	8022146 <_printf_float+0x1b2>
 8022140:	6829      	ldr	r1, [r5, #0]
 8022142:	07c9      	lsls	r1, r1, #31
 8022144:	d50b      	bpl.n	802215e <_printf_float+0x1ca>
 8022146:	3301      	adds	r3, #1
 8022148:	189b      	adds	r3, r3, r2
 802214a:	612b      	str	r3, [r5, #16]
 802214c:	e007      	b.n	802215e <_printf_float+0x1ca>
 802214e:	2b00      	cmp	r3, #0
 8022150:	d103      	bne.n	802215a <_printf_float+0x1c6>
 8022152:	2201      	movs	r2, #1
 8022154:	6829      	ldr	r1, [r5, #0]
 8022156:	4211      	tst	r1, r2
 8022158:	d000      	beq.n	802215c <_printf_float+0x1c8>
 802215a:	1c9a      	adds	r2, r3, #2
 802215c:	612a      	str	r2, [r5, #16]
 802215e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022160:	2400      	movs	r4, #0
 8022162:	65ab      	str	r3, [r5, #88]	@ 0x58
 8022164:	e7cd      	b.n	8022102 <_printf_float+0x16e>
 8022166:	2367      	movs	r3, #103	@ 0x67
 8022168:	930c      	str	r3, [sp, #48]	@ 0x30
 802216a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802216c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802216e:	4299      	cmp	r1, r3
 8022170:	db06      	blt.n	8022180 <_printf_float+0x1ec>
 8022172:	682b      	ldr	r3, [r5, #0]
 8022174:	6129      	str	r1, [r5, #16]
 8022176:	07db      	lsls	r3, r3, #31
 8022178:	d5f1      	bpl.n	802215e <_printf_float+0x1ca>
 802217a:	3101      	adds	r1, #1
 802217c:	6129      	str	r1, [r5, #16]
 802217e:	e7ee      	b.n	802215e <_printf_float+0x1ca>
 8022180:	2201      	movs	r2, #1
 8022182:	2900      	cmp	r1, #0
 8022184:	dce0      	bgt.n	8022148 <_printf_float+0x1b4>
 8022186:	1892      	adds	r2, r2, r2
 8022188:	1a52      	subs	r2, r2, r1
 802218a:	e7dd      	b.n	8022148 <_printf_float+0x1b4>
 802218c:	682a      	ldr	r2, [r5, #0]
 802218e:	0553      	lsls	r3, r2, #21
 8022190:	d408      	bmi.n	80221a4 <_printf_float+0x210>
 8022192:	692b      	ldr	r3, [r5, #16]
 8022194:	003a      	movs	r2, r7
 8022196:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022198:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802219a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802219c:	47a0      	blx	r4
 802219e:	3001      	adds	r0, #1
 80221a0:	d129      	bne.n	80221f6 <_printf_float+0x262>
 80221a2:	e753      	b.n	802204c <_printf_float+0xb8>
 80221a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80221a6:	2b65      	cmp	r3, #101	@ 0x65
 80221a8:	d800      	bhi.n	80221ac <_printf_float+0x218>
 80221aa:	e0da      	b.n	8022362 <_printf_float+0x3ce>
 80221ac:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80221ae:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80221b0:	2200      	movs	r2, #0
 80221b2:	2300      	movs	r3, #0
 80221b4:	f7de f97c 	bl	80004b0 <__aeabi_dcmpeq>
 80221b8:	2800      	cmp	r0, #0
 80221ba:	d033      	beq.n	8022224 <_printf_float+0x290>
 80221bc:	2301      	movs	r3, #1
 80221be:	4a37      	ldr	r2, [pc, #220]	@ (802229c <_printf_float+0x308>)
 80221c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80221c6:	47a0      	blx	r4
 80221c8:	3001      	adds	r0, #1
 80221ca:	d100      	bne.n	80221ce <_printf_float+0x23a>
 80221cc:	e73e      	b.n	802204c <_printf_float+0xb8>
 80221ce:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80221d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80221d2:	42b3      	cmp	r3, r6
 80221d4:	db02      	blt.n	80221dc <_printf_float+0x248>
 80221d6:	682b      	ldr	r3, [r5, #0]
 80221d8:	07db      	lsls	r3, r3, #31
 80221da:	d50c      	bpl.n	80221f6 <_printf_float+0x262>
 80221dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80221de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80221e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80221e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80221e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80221e6:	47a0      	blx	r4
 80221e8:	2400      	movs	r4, #0
 80221ea:	3001      	adds	r0, #1
 80221ec:	d100      	bne.n	80221f0 <_printf_float+0x25c>
 80221ee:	e72d      	b.n	802204c <_printf_float+0xb8>
 80221f0:	1e73      	subs	r3, r6, #1
 80221f2:	42a3      	cmp	r3, r4
 80221f4:	dc0a      	bgt.n	802220c <_printf_float+0x278>
 80221f6:	682b      	ldr	r3, [r5, #0]
 80221f8:	079b      	lsls	r3, r3, #30
 80221fa:	d500      	bpl.n	80221fe <_printf_float+0x26a>
 80221fc:	e105      	b.n	802240a <_printf_float+0x476>
 80221fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022200:	68e8      	ldr	r0, [r5, #12]
 8022202:	4298      	cmp	r0, r3
 8022204:	db00      	blt.n	8022208 <_printf_float+0x274>
 8022206:	e723      	b.n	8022050 <_printf_float+0xbc>
 8022208:	0018      	movs	r0, r3
 802220a:	e721      	b.n	8022050 <_printf_float+0xbc>
 802220c:	002a      	movs	r2, r5
 802220e:	2301      	movs	r3, #1
 8022210:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022214:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022216:	321a      	adds	r2, #26
 8022218:	47b8      	blx	r7
 802221a:	3001      	adds	r0, #1
 802221c:	d100      	bne.n	8022220 <_printf_float+0x28c>
 802221e:	e715      	b.n	802204c <_printf_float+0xb8>
 8022220:	3401      	adds	r4, #1
 8022222:	e7e5      	b.n	80221f0 <_printf_float+0x25c>
 8022224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022226:	2b00      	cmp	r3, #0
 8022228:	dc3a      	bgt.n	80222a0 <_printf_float+0x30c>
 802222a:	2301      	movs	r3, #1
 802222c:	4a1b      	ldr	r2, [pc, #108]	@ (802229c <_printf_float+0x308>)
 802222e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022230:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022232:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022234:	47a0      	blx	r4
 8022236:	3001      	adds	r0, #1
 8022238:	d100      	bne.n	802223c <_printf_float+0x2a8>
 802223a:	e707      	b.n	802204c <_printf_float+0xb8>
 802223c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802223e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022240:	4333      	orrs	r3, r6
 8022242:	d102      	bne.n	802224a <_printf_float+0x2b6>
 8022244:	682b      	ldr	r3, [r5, #0]
 8022246:	07db      	lsls	r3, r3, #31
 8022248:	d5d5      	bpl.n	80221f6 <_printf_float+0x262>
 802224a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802224c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802224e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022250:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022252:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022254:	47a0      	blx	r4
 8022256:	2300      	movs	r3, #0
 8022258:	3001      	adds	r0, #1
 802225a:	d100      	bne.n	802225e <_printf_float+0x2ca>
 802225c:	e6f6      	b.n	802204c <_printf_float+0xb8>
 802225e:	930c      	str	r3, [sp, #48]	@ 0x30
 8022260:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022262:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022264:	425b      	negs	r3, r3
 8022266:	4293      	cmp	r3, r2
 8022268:	dc01      	bgt.n	802226e <_printf_float+0x2da>
 802226a:	0033      	movs	r3, r6
 802226c:	e792      	b.n	8022194 <_printf_float+0x200>
 802226e:	002a      	movs	r2, r5
 8022270:	2301      	movs	r3, #1
 8022272:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022274:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022276:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022278:	321a      	adds	r2, #26
 802227a:	47a0      	blx	r4
 802227c:	3001      	adds	r0, #1
 802227e:	d100      	bne.n	8022282 <_printf_float+0x2ee>
 8022280:	e6e4      	b.n	802204c <_printf_float+0xb8>
 8022282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022284:	3301      	adds	r3, #1
 8022286:	e7ea      	b.n	802225e <_printf_float+0x2ca>
 8022288:	7fefffff 	.word	0x7fefffff
 802228c:	08029831 	.word	0x08029831
 8022290:	08029835 	.word	0x08029835
 8022294:	08029839 	.word	0x08029839
 8022298:	0802983d 	.word	0x0802983d
 802229c:	08029841 	.word	0x08029841
 80222a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80222a2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80222a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80222a6:	429e      	cmp	r6, r3
 80222a8:	dd00      	ble.n	80222ac <_printf_float+0x318>
 80222aa:	001e      	movs	r6, r3
 80222ac:	2e00      	cmp	r6, #0
 80222ae:	dc31      	bgt.n	8022314 <_printf_float+0x380>
 80222b0:	43f3      	mvns	r3, r6
 80222b2:	2400      	movs	r4, #0
 80222b4:	17db      	asrs	r3, r3, #31
 80222b6:	4033      	ands	r3, r6
 80222b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80222ba:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80222bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80222be:	1af3      	subs	r3, r6, r3
 80222c0:	42a3      	cmp	r3, r4
 80222c2:	dc30      	bgt.n	8022326 <_printf_float+0x392>
 80222c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80222c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80222c8:	429a      	cmp	r2, r3
 80222ca:	dc38      	bgt.n	802233e <_printf_float+0x3aa>
 80222cc:	682b      	ldr	r3, [r5, #0]
 80222ce:	07db      	lsls	r3, r3, #31
 80222d0:	d435      	bmi.n	802233e <_printf_float+0x3aa>
 80222d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80222d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80222d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80222d8:	1b9b      	subs	r3, r3, r6
 80222da:	1b14      	subs	r4, r2, r4
 80222dc:	429c      	cmp	r4, r3
 80222de:	dd00      	ble.n	80222e2 <_printf_float+0x34e>
 80222e0:	001c      	movs	r4, r3
 80222e2:	2c00      	cmp	r4, #0
 80222e4:	dc34      	bgt.n	8022350 <_printf_float+0x3bc>
 80222e6:	43e3      	mvns	r3, r4
 80222e8:	2600      	movs	r6, #0
 80222ea:	17db      	asrs	r3, r3, #31
 80222ec:	401c      	ands	r4, r3
 80222ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80222f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80222f2:	1ad3      	subs	r3, r2, r3
 80222f4:	1b1b      	subs	r3, r3, r4
 80222f6:	42b3      	cmp	r3, r6
 80222f8:	dc00      	bgt.n	80222fc <_printf_float+0x368>
 80222fa:	e77c      	b.n	80221f6 <_printf_float+0x262>
 80222fc:	002a      	movs	r2, r5
 80222fe:	2301      	movs	r3, #1
 8022300:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022304:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022306:	321a      	adds	r2, #26
 8022308:	47b8      	blx	r7
 802230a:	3001      	adds	r0, #1
 802230c:	d100      	bne.n	8022310 <_printf_float+0x37c>
 802230e:	e69d      	b.n	802204c <_printf_float+0xb8>
 8022310:	3601      	adds	r6, #1
 8022312:	e7ec      	b.n	80222ee <_printf_float+0x35a>
 8022314:	0033      	movs	r3, r6
 8022316:	003a      	movs	r2, r7
 8022318:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802231a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802231c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802231e:	47a0      	blx	r4
 8022320:	3001      	adds	r0, #1
 8022322:	d1c5      	bne.n	80222b0 <_printf_float+0x31c>
 8022324:	e692      	b.n	802204c <_printf_float+0xb8>
 8022326:	002a      	movs	r2, r5
 8022328:	2301      	movs	r3, #1
 802232a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802232c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802232e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8022330:	321a      	adds	r2, #26
 8022332:	47b0      	blx	r6
 8022334:	3001      	adds	r0, #1
 8022336:	d100      	bne.n	802233a <_printf_float+0x3a6>
 8022338:	e688      	b.n	802204c <_printf_float+0xb8>
 802233a:	3401      	adds	r4, #1
 802233c:	e7bd      	b.n	80222ba <_printf_float+0x326>
 802233e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022340:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022342:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022344:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022346:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022348:	47a0      	blx	r4
 802234a:	3001      	adds	r0, #1
 802234c:	d1c1      	bne.n	80222d2 <_printf_float+0x33e>
 802234e:	e67d      	b.n	802204c <_printf_float+0xb8>
 8022350:	19ba      	adds	r2, r7, r6
 8022352:	0023      	movs	r3, r4
 8022354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022358:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802235a:	47b0      	blx	r6
 802235c:	3001      	adds	r0, #1
 802235e:	d1c2      	bne.n	80222e6 <_printf_float+0x352>
 8022360:	e674      	b.n	802204c <_printf_float+0xb8>
 8022362:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8022364:	930c      	str	r3, [sp, #48]	@ 0x30
 8022366:	2b01      	cmp	r3, #1
 8022368:	dc02      	bgt.n	8022370 <_printf_float+0x3dc>
 802236a:	2301      	movs	r3, #1
 802236c:	421a      	tst	r2, r3
 802236e:	d039      	beq.n	80223e4 <_printf_float+0x450>
 8022370:	2301      	movs	r3, #1
 8022372:	003a      	movs	r2, r7
 8022374:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022378:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802237a:	47b0      	blx	r6
 802237c:	3001      	adds	r0, #1
 802237e:	d100      	bne.n	8022382 <_printf_float+0x3ee>
 8022380:	e664      	b.n	802204c <_printf_float+0xb8>
 8022382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022384:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8022386:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022388:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802238a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802238c:	47b0      	blx	r6
 802238e:	3001      	adds	r0, #1
 8022390:	d100      	bne.n	8022394 <_printf_float+0x400>
 8022392:	e65b      	b.n	802204c <_printf_float+0xb8>
 8022394:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8022396:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8022398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802239a:	2200      	movs	r2, #0
 802239c:	3b01      	subs	r3, #1
 802239e:	930c      	str	r3, [sp, #48]	@ 0x30
 80223a0:	2300      	movs	r3, #0
 80223a2:	f7de f885 	bl	80004b0 <__aeabi_dcmpeq>
 80223a6:	2800      	cmp	r0, #0
 80223a8:	d11a      	bne.n	80223e0 <_printf_float+0x44c>
 80223aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223ac:	1c7a      	adds	r2, r7, #1
 80223ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80223b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80223b2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80223b4:	47b0      	blx	r6
 80223b6:	3001      	adds	r0, #1
 80223b8:	d10e      	bne.n	80223d8 <_printf_float+0x444>
 80223ba:	e647      	b.n	802204c <_printf_float+0xb8>
 80223bc:	002a      	movs	r2, r5
 80223be:	2301      	movs	r3, #1
 80223c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80223c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80223c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80223c6:	321a      	adds	r2, #26
 80223c8:	47b8      	blx	r7
 80223ca:	3001      	adds	r0, #1
 80223cc:	d100      	bne.n	80223d0 <_printf_float+0x43c>
 80223ce:	e63d      	b.n	802204c <_printf_float+0xb8>
 80223d0:	3601      	adds	r6, #1
 80223d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223d4:	429e      	cmp	r6, r3
 80223d6:	dbf1      	blt.n	80223bc <_printf_float+0x428>
 80223d8:	002a      	movs	r2, r5
 80223da:	0023      	movs	r3, r4
 80223dc:	3250      	adds	r2, #80	@ 0x50
 80223de:	e6da      	b.n	8022196 <_printf_float+0x202>
 80223e0:	2600      	movs	r6, #0
 80223e2:	e7f6      	b.n	80223d2 <_printf_float+0x43e>
 80223e4:	003a      	movs	r2, r7
 80223e6:	e7e2      	b.n	80223ae <_printf_float+0x41a>
 80223e8:	002a      	movs	r2, r5
 80223ea:	2301      	movs	r3, #1
 80223ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80223ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80223f0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80223f2:	3219      	adds	r2, #25
 80223f4:	47b0      	blx	r6
 80223f6:	3001      	adds	r0, #1
 80223f8:	d100      	bne.n	80223fc <_printf_float+0x468>
 80223fa:	e627      	b.n	802204c <_printf_float+0xb8>
 80223fc:	3401      	adds	r4, #1
 80223fe:	68eb      	ldr	r3, [r5, #12]
 8022400:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022402:	1a9b      	subs	r3, r3, r2
 8022404:	42a3      	cmp	r3, r4
 8022406:	dcef      	bgt.n	80223e8 <_printf_float+0x454>
 8022408:	e6f9      	b.n	80221fe <_printf_float+0x26a>
 802240a:	2400      	movs	r4, #0
 802240c:	e7f7      	b.n	80223fe <_printf_float+0x46a>
 802240e:	46c0      	nop			@ (mov r8, r8)

08022410 <_printf_common>:
 8022410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022412:	0016      	movs	r6, r2
 8022414:	9301      	str	r3, [sp, #4]
 8022416:	688a      	ldr	r2, [r1, #8]
 8022418:	690b      	ldr	r3, [r1, #16]
 802241a:	000c      	movs	r4, r1
 802241c:	9000      	str	r0, [sp, #0]
 802241e:	4293      	cmp	r3, r2
 8022420:	da00      	bge.n	8022424 <_printf_common+0x14>
 8022422:	0013      	movs	r3, r2
 8022424:	0022      	movs	r2, r4
 8022426:	6033      	str	r3, [r6, #0]
 8022428:	3243      	adds	r2, #67	@ 0x43
 802242a:	7812      	ldrb	r2, [r2, #0]
 802242c:	2a00      	cmp	r2, #0
 802242e:	d001      	beq.n	8022434 <_printf_common+0x24>
 8022430:	3301      	adds	r3, #1
 8022432:	6033      	str	r3, [r6, #0]
 8022434:	6823      	ldr	r3, [r4, #0]
 8022436:	069b      	lsls	r3, r3, #26
 8022438:	d502      	bpl.n	8022440 <_printf_common+0x30>
 802243a:	6833      	ldr	r3, [r6, #0]
 802243c:	3302      	adds	r3, #2
 802243e:	6033      	str	r3, [r6, #0]
 8022440:	6822      	ldr	r2, [r4, #0]
 8022442:	2306      	movs	r3, #6
 8022444:	0015      	movs	r5, r2
 8022446:	401d      	ands	r5, r3
 8022448:	421a      	tst	r2, r3
 802244a:	d027      	beq.n	802249c <_printf_common+0x8c>
 802244c:	0023      	movs	r3, r4
 802244e:	3343      	adds	r3, #67	@ 0x43
 8022450:	781b      	ldrb	r3, [r3, #0]
 8022452:	1e5a      	subs	r2, r3, #1
 8022454:	4193      	sbcs	r3, r2
 8022456:	6822      	ldr	r2, [r4, #0]
 8022458:	0692      	lsls	r2, r2, #26
 802245a:	d430      	bmi.n	80224be <_printf_common+0xae>
 802245c:	0022      	movs	r2, r4
 802245e:	9901      	ldr	r1, [sp, #4]
 8022460:	9800      	ldr	r0, [sp, #0]
 8022462:	9d08      	ldr	r5, [sp, #32]
 8022464:	3243      	adds	r2, #67	@ 0x43
 8022466:	47a8      	blx	r5
 8022468:	3001      	adds	r0, #1
 802246a:	d025      	beq.n	80224b8 <_printf_common+0xa8>
 802246c:	2206      	movs	r2, #6
 802246e:	6823      	ldr	r3, [r4, #0]
 8022470:	2500      	movs	r5, #0
 8022472:	4013      	ands	r3, r2
 8022474:	2b04      	cmp	r3, #4
 8022476:	d105      	bne.n	8022484 <_printf_common+0x74>
 8022478:	6833      	ldr	r3, [r6, #0]
 802247a:	68e5      	ldr	r5, [r4, #12]
 802247c:	1aed      	subs	r5, r5, r3
 802247e:	43eb      	mvns	r3, r5
 8022480:	17db      	asrs	r3, r3, #31
 8022482:	401d      	ands	r5, r3
 8022484:	68a3      	ldr	r3, [r4, #8]
 8022486:	6922      	ldr	r2, [r4, #16]
 8022488:	4293      	cmp	r3, r2
 802248a:	dd01      	ble.n	8022490 <_printf_common+0x80>
 802248c:	1a9b      	subs	r3, r3, r2
 802248e:	18ed      	adds	r5, r5, r3
 8022490:	2600      	movs	r6, #0
 8022492:	42b5      	cmp	r5, r6
 8022494:	d120      	bne.n	80224d8 <_printf_common+0xc8>
 8022496:	2000      	movs	r0, #0
 8022498:	e010      	b.n	80224bc <_printf_common+0xac>
 802249a:	3501      	adds	r5, #1
 802249c:	68e3      	ldr	r3, [r4, #12]
 802249e:	6832      	ldr	r2, [r6, #0]
 80224a0:	1a9b      	subs	r3, r3, r2
 80224a2:	42ab      	cmp	r3, r5
 80224a4:	ddd2      	ble.n	802244c <_printf_common+0x3c>
 80224a6:	0022      	movs	r2, r4
 80224a8:	2301      	movs	r3, #1
 80224aa:	9901      	ldr	r1, [sp, #4]
 80224ac:	9800      	ldr	r0, [sp, #0]
 80224ae:	9f08      	ldr	r7, [sp, #32]
 80224b0:	3219      	adds	r2, #25
 80224b2:	47b8      	blx	r7
 80224b4:	3001      	adds	r0, #1
 80224b6:	d1f0      	bne.n	802249a <_printf_common+0x8a>
 80224b8:	2001      	movs	r0, #1
 80224ba:	4240      	negs	r0, r0
 80224bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80224be:	2030      	movs	r0, #48	@ 0x30
 80224c0:	18e1      	adds	r1, r4, r3
 80224c2:	3143      	adds	r1, #67	@ 0x43
 80224c4:	7008      	strb	r0, [r1, #0]
 80224c6:	0021      	movs	r1, r4
 80224c8:	1c5a      	adds	r2, r3, #1
 80224ca:	3145      	adds	r1, #69	@ 0x45
 80224cc:	7809      	ldrb	r1, [r1, #0]
 80224ce:	18a2      	adds	r2, r4, r2
 80224d0:	3243      	adds	r2, #67	@ 0x43
 80224d2:	3302      	adds	r3, #2
 80224d4:	7011      	strb	r1, [r2, #0]
 80224d6:	e7c1      	b.n	802245c <_printf_common+0x4c>
 80224d8:	0022      	movs	r2, r4
 80224da:	2301      	movs	r3, #1
 80224dc:	9901      	ldr	r1, [sp, #4]
 80224de:	9800      	ldr	r0, [sp, #0]
 80224e0:	9f08      	ldr	r7, [sp, #32]
 80224e2:	321a      	adds	r2, #26
 80224e4:	47b8      	blx	r7
 80224e6:	3001      	adds	r0, #1
 80224e8:	d0e6      	beq.n	80224b8 <_printf_common+0xa8>
 80224ea:	3601      	adds	r6, #1
 80224ec:	e7d1      	b.n	8022492 <_printf_common+0x82>
	...

080224f0 <_printf_i>:
 80224f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224f2:	b08b      	sub	sp, #44	@ 0x2c
 80224f4:	9206      	str	r2, [sp, #24]
 80224f6:	000a      	movs	r2, r1
 80224f8:	3243      	adds	r2, #67	@ 0x43
 80224fa:	9307      	str	r3, [sp, #28]
 80224fc:	9005      	str	r0, [sp, #20]
 80224fe:	9203      	str	r2, [sp, #12]
 8022500:	7e0a      	ldrb	r2, [r1, #24]
 8022502:	000c      	movs	r4, r1
 8022504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022506:	2a78      	cmp	r2, #120	@ 0x78
 8022508:	d809      	bhi.n	802251e <_printf_i+0x2e>
 802250a:	2a62      	cmp	r2, #98	@ 0x62
 802250c:	d80b      	bhi.n	8022526 <_printf_i+0x36>
 802250e:	2a00      	cmp	r2, #0
 8022510:	d100      	bne.n	8022514 <_printf_i+0x24>
 8022512:	e0bc      	b.n	802268e <_printf_i+0x19e>
 8022514:	497b      	ldr	r1, [pc, #492]	@ (8022704 <_printf_i+0x214>)
 8022516:	9104      	str	r1, [sp, #16]
 8022518:	2a58      	cmp	r2, #88	@ 0x58
 802251a:	d100      	bne.n	802251e <_printf_i+0x2e>
 802251c:	e090      	b.n	8022640 <_printf_i+0x150>
 802251e:	0025      	movs	r5, r4
 8022520:	3542      	adds	r5, #66	@ 0x42
 8022522:	702a      	strb	r2, [r5, #0]
 8022524:	e022      	b.n	802256c <_printf_i+0x7c>
 8022526:	0010      	movs	r0, r2
 8022528:	3863      	subs	r0, #99	@ 0x63
 802252a:	2815      	cmp	r0, #21
 802252c:	d8f7      	bhi.n	802251e <_printf_i+0x2e>
 802252e:	f7dd fe2f 	bl	8000190 <__gnu_thumb1_case_shi>
 8022532:	0016      	.short	0x0016
 8022534:	fff6001f 	.word	0xfff6001f
 8022538:	fff6fff6 	.word	0xfff6fff6
 802253c:	001ffff6 	.word	0x001ffff6
 8022540:	fff6fff6 	.word	0xfff6fff6
 8022544:	fff6fff6 	.word	0xfff6fff6
 8022548:	003600a1 	.word	0x003600a1
 802254c:	fff60080 	.word	0xfff60080
 8022550:	00b2fff6 	.word	0x00b2fff6
 8022554:	0036fff6 	.word	0x0036fff6
 8022558:	fff6fff6 	.word	0xfff6fff6
 802255c:	0084      	.short	0x0084
 802255e:	0025      	movs	r5, r4
 8022560:	681a      	ldr	r2, [r3, #0]
 8022562:	3542      	adds	r5, #66	@ 0x42
 8022564:	1d11      	adds	r1, r2, #4
 8022566:	6019      	str	r1, [r3, #0]
 8022568:	6813      	ldr	r3, [r2, #0]
 802256a:	702b      	strb	r3, [r5, #0]
 802256c:	2301      	movs	r3, #1
 802256e:	e0a0      	b.n	80226b2 <_printf_i+0x1c2>
 8022570:	6818      	ldr	r0, [r3, #0]
 8022572:	6809      	ldr	r1, [r1, #0]
 8022574:	1d02      	adds	r2, r0, #4
 8022576:	060d      	lsls	r5, r1, #24
 8022578:	d50b      	bpl.n	8022592 <_printf_i+0xa2>
 802257a:	6806      	ldr	r6, [r0, #0]
 802257c:	601a      	str	r2, [r3, #0]
 802257e:	2e00      	cmp	r6, #0
 8022580:	da03      	bge.n	802258a <_printf_i+0x9a>
 8022582:	232d      	movs	r3, #45	@ 0x2d
 8022584:	9a03      	ldr	r2, [sp, #12]
 8022586:	4276      	negs	r6, r6
 8022588:	7013      	strb	r3, [r2, #0]
 802258a:	4b5e      	ldr	r3, [pc, #376]	@ (8022704 <_printf_i+0x214>)
 802258c:	270a      	movs	r7, #10
 802258e:	9304      	str	r3, [sp, #16]
 8022590:	e018      	b.n	80225c4 <_printf_i+0xd4>
 8022592:	6806      	ldr	r6, [r0, #0]
 8022594:	601a      	str	r2, [r3, #0]
 8022596:	0649      	lsls	r1, r1, #25
 8022598:	d5f1      	bpl.n	802257e <_printf_i+0x8e>
 802259a:	b236      	sxth	r6, r6
 802259c:	e7ef      	b.n	802257e <_printf_i+0x8e>
 802259e:	6808      	ldr	r0, [r1, #0]
 80225a0:	6819      	ldr	r1, [r3, #0]
 80225a2:	c940      	ldmia	r1!, {r6}
 80225a4:	0605      	lsls	r5, r0, #24
 80225a6:	d402      	bmi.n	80225ae <_printf_i+0xbe>
 80225a8:	0640      	lsls	r0, r0, #25
 80225aa:	d500      	bpl.n	80225ae <_printf_i+0xbe>
 80225ac:	b2b6      	uxth	r6, r6
 80225ae:	6019      	str	r1, [r3, #0]
 80225b0:	4b54      	ldr	r3, [pc, #336]	@ (8022704 <_printf_i+0x214>)
 80225b2:	270a      	movs	r7, #10
 80225b4:	9304      	str	r3, [sp, #16]
 80225b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80225b8:	d100      	bne.n	80225bc <_printf_i+0xcc>
 80225ba:	3f02      	subs	r7, #2
 80225bc:	0023      	movs	r3, r4
 80225be:	2200      	movs	r2, #0
 80225c0:	3343      	adds	r3, #67	@ 0x43
 80225c2:	701a      	strb	r2, [r3, #0]
 80225c4:	6863      	ldr	r3, [r4, #4]
 80225c6:	60a3      	str	r3, [r4, #8]
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	db03      	blt.n	80225d4 <_printf_i+0xe4>
 80225cc:	2104      	movs	r1, #4
 80225ce:	6822      	ldr	r2, [r4, #0]
 80225d0:	438a      	bics	r2, r1
 80225d2:	6022      	str	r2, [r4, #0]
 80225d4:	2e00      	cmp	r6, #0
 80225d6:	d102      	bne.n	80225de <_printf_i+0xee>
 80225d8:	9d03      	ldr	r5, [sp, #12]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d00c      	beq.n	80225f8 <_printf_i+0x108>
 80225de:	9d03      	ldr	r5, [sp, #12]
 80225e0:	0030      	movs	r0, r6
 80225e2:	0039      	movs	r1, r7
 80225e4:	f7dd fe64 	bl	80002b0 <__aeabi_uidivmod>
 80225e8:	9b04      	ldr	r3, [sp, #16]
 80225ea:	3d01      	subs	r5, #1
 80225ec:	5c5b      	ldrb	r3, [r3, r1]
 80225ee:	702b      	strb	r3, [r5, #0]
 80225f0:	0033      	movs	r3, r6
 80225f2:	0006      	movs	r6, r0
 80225f4:	429f      	cmp	r7, r3
 80225f6:	d9f3      	bls.n	80225e0 <_printf_i+0xf0>
 80225f8:	2f08      	cmp	r7, #8
 80225fa:	d109      	bne.n	8022610 <_printf_i+0x120>
 80225fc:	6823      	ldr	r3, [r4, #0]
 80225fe:	07db      	lsls	r3, r3, #31
 8022600:	d506      	bpl.n	8022610 <_printf_i+0x120>
 8022602:	6862      	ldr	r2, [r4, #4]
 8022604:	6923      	ldr	r3, [r4, #16]
 8022606:	429a      	cmp	r2, r3
 8022608:	dc02      	bgt.n	8022610 <_printf_i+0x120>
 802260a:	2330      	movs	r3, #48	@ 0x30
 802260c:	3d01      	subs	r5, #1
 802260e:	702b      	strb	r3, [r5, #0]
 8022610:	9b03      	ldr	r3, [sp, #12]
 8022612:	1b5b      	subs	r3, r3, r5
 8022614:	6123      	str	r3, [r4, #16]
 8022616:	9b07      	ldr	r3, [sp, #28]
 8022618:	0021      	movs	r1, r4
 802261a:	9300      	str	r3, [sp, #0]
 802261c:	9805      	ldr	r0, [sp, #20]
 802261e:	9b06      	ldr	r3, [sp, #24]
 8022620:	aa09      	add	r2, sp, #36	@ 0x24
 8022622:	f7ff fef5 	bl	8022410 <_printf_common>
 8022626:	3001      	adds	r0, #1
 8022628:	d148      	bne.n	80226bc <_printf_i+0x1cc>
 802262a:	2001      	movs	r0, #1
 802262c:	4240      	negs	r0, r0
 802262e:	b00b      	add	sp, #44	@ 0x2c
 8022630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022632:	2220      	movs	r2, #32
 8022634:	6809      	ldr	r1, [r1, #0]
 8022636:	430a      	orrs	r2, r1
 8022638:	6022      	str	r2, [r4, #0]
 802263a:	2278      	movs	r2, #120	@ 0x78
 802263c:	4932      	ldr	r1, [pc, #200]	@ (8022708 <_printf_i+0x218>)
 802263e:	9104      	str	r1, [sp, #16]
 8022640:	0021      	movs	r1, r4
 8022642:	3145      	adds	r1, #69	@ 0x45
 8022644:	700a      	strb	r2, [r1, #0]
 8022646:	6819      	ldr	r1, [r3, #0]
 8022648:	6822      	ldr	r2, [r4, #0]
 802264a:	c940      	ldmia	r1!, {r6}
 802264c:	0610      	lsls	r0, r2, #24
 802264e:	d402      	bmi.n	8022656 <_printf_i+0x166>
 8022650:	0650      	lsls	r0, r2, #25
 8022652:	d500      	bpl.n	8022656 <_printf_i+0x166>
 8022654:	b2b6      	uxth	r6, r6
 8022656:	6019      	str	r1, [r3, #0]
 8022658:	07d3      	lsls	r3, r2, #31
 802265a:	d502      	bpl.n	8022662 <_printf_i+0x172>
 802265c:	2320      	movs	r3, #32
 802265e:	4313      	orrs	r3, r2
 8022660:	6023      	str	r3, [r4, #0]
 8022662:	2e00      	cmp	r6, #0
 8022664:	d001      	beq.n	802266a <_printf_i+0x17a>
 8022666:	2710      	movs	r7, #16
 8022668:	e7a8      	b.n	80225bc <_printf_i+0xcc>
 802266a:	2220      	movs	r2, #32
 802266c:	6823      	ldr	r3, [r4, #0]
 802266e:	4393      	bics	r3, r2
 8022670:	6023      	str	r3, [r4, #0]
 8022672:	e7f8      	b.n	8022666 <_printf_i+0x176>
 8022674:	681a      	ldr	r2, [r3, #0]
 8022676:	680d      	ldr	r5, [r1, #0]
 8022678:	1d10      	adds	r0, r2, #4
 802267a:	6949      	ldr	r1, [r1, #20]
 802267c:	6018      	str	r0, [r3, #0]
 802267e:	6813      	ldr	r3, [r2, #0]
 8022680:	062e      	lsls	r6, r5, #24
 8022682:	d501      	bpl.n	8022688 <_printf_i+0x198>
 8022684:	6019      	str	r1, [r3, #0]
 8022686:	e002      	b.n	802268e <_printf_i+0x19e>
 8022688:	066d      	lsls	r5, r5, #25
 802268a:	d5fb      	bpl.n	8022684 <_printf_i+0x194>
 802268c:	8019      	strh	r1, [r3, #0]
 802268e:	2300      	movs	r3, #0
 8022690:	9d03      	ldr	r5, [sp, #12]
 8022692:	6123      	str	r3, [r4, #16]
 8022694:	e7bf      	b.n	8022616 <_printf_i+0x126>
 8022696:	681a      	ldr	r2, [r3, #0]
 8022698:	1d11      	adds	r1, r2, #4
 802269a:	6019      	str	r1, [r3, #0]
 802269c:	6815      	ldr	r5, [r2, #0]
 802269e:	2100      	movs	r1, #0
 80226a0:	0028      	movs	r0, r5
 80226a2:	6862      	ldr	r2, [r4, #4]
 80226a4:	f000 fb9d 	bl	8022de2 <memchr>
 80226a8:	2800      	cmp	r0, #0
 80226aa:	d001      	beq.n	80226b0 <_printf_i+0x1c0>
 80226ac:	1b40      	subs	r0, r0, r5
 80226ae:	6060      	str	r0, [r4, #4]
 80226b0:	6863      	ldr	r3, [r4, #4]
 80226b2:	6123      	str	r3, [r4, #16]
 80226b4:	2300      	movs	r3, #0
 80226b6:	9a03      	ldr	r2, [sp, #12]
 80226b8:	7013      	strb	r3, [r2, #0]
 80226ba:	e7ac      	b.n	8022616 <_printf_i+0x126>
 80226bc:	002a      	movs	r2, r5
 80226be:	6923      	ldr	r3, [r4, #16]
 80226c0:	9906      	ldr	r1, [sp, #24]
 80226c2:	9805      	ldr	r0, [sp, #20]
 80226c4:	9d07      	ldr	r5, [sp, #28]
 80226c6:	47a8      	blx	r5
 80226c8:	3001      	adds	r0, #1
 80226ca:	d0ae      	beq.n	802262a <_printf_i+0x13a>
 80226cc:	6823      	ldr	r3, [r4, #0]
 80226ce:	079b      	lsls	r3, r3, #30
 80226d0:	d415      	bmi.n	80226fe <_printf_i+0x20e>
 80226d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226d4:	68e0      	ldr	r0, [r4, #12]
 80226d6:	4298      	cmp	r0, r3
 80226d8:	daa9      	bge.n	802262e <_printf_i+0x13e>
 80226da:	0018      	movs	r0, r3
 80226dc:	e7a7      	b.n	802262e <_printf_i+0x13e>
 80226de:	0022      	movs	r2, r4
 80226e0:	2301      	movs	r3, #1
 80226e2:	9906      	ldr	r1, [sp, #24]
 80226e4:	9805      	ldr	r0, [sp, #20]
 80226e6:	9e07      	ldr	r6, [sp, #28]
 80226e8:	3219      	adds	r2, #25
 80226ea:	47b0      	blx	r6
 80226ec:	3001      	adds	r0, #1
 80226ee:	d09c      	beq.n	802262a <_printf_i+0x13a>
 80226f0:	3501      	adds	r5, #1
 80226f2:	68e3      	ldr	r3, [r4, #12]
 80226f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80226f6:	1a9b      	subs	r3, r3, r2
 80226f8:	42ab      	cmp	r3, r5
 80226fa:	dcf0      	bgt.n	80226de <_printf_i+0x1ee>
 80226fc:	e7e9      	b.n	80226d2 <_printf_i+0x1e2>
 80226fe:	2500      	movs	r5, #0
 8022700:	e7f7      	b.n	80226f2 <_printf_i+0x202>
 8022702:	46c0      	nop			@ (mov r8, r8)
 8022704:	08029843 	.word	0x08029843
 8022708:	08029854 	.word	0x08029854

0802270c <std>:
 802270c:	2300      	movs	r3, #0
 802270e:	b510      	push	{r4, lr}
 8022710:	0004      	movs	r4, r0
 8022712:	6003      	str	r3, [r0, #0]
 8022714:	6043      	str	r3, [r0, #4]
 8022716:	6083      	str	r3, [r0, #8]
 8022718:	8181      	strh	r1, [r0, #12]
 802271a:	6643      	str	r3, [r0, #100]	@ 0x64
 802271c:	81c2      	strh	r2, [r0, #14]
 802271e:	6103      	str	r3, [r0, #16]
 8022720:	6143      	str	r3, [r0, #20]
 8022722:	6183      	str	r3, [r0, #24]
 8022724:	0019      	movs	r1, r3
 8022726:	2208      	movs	r2, #8
 8022728:	305c      	adds	r0, #92	@ 0x5c
 802272a:	f000 fa89 	bl	8022c40 <memset>
 802272e:	4b0b      	ldr	r3, [pc, #44]	@ (802275c <std+0x50>)
 8022730:	6224      	str	r4, [r4, #32]
 8022732:	6263      	str	r3, [r4, #36]	@ 0x24
 8022734:	4b0a      	ldr	r3, [pc, #40]	@ (8022760 <std+0x54>)
 8022736:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022738:	4b0a      	ldr	r3, [pc, #40]	@ (8022764 <std+0x58>)
 802273a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802273c:	4b0a      	ldr	r3, [pc, #40]	@ (8022768 <std+0x5c>)
 802273e:	6323      	str	r3, [r4, #48]	@ 0x30
 8022740:	4b0a      	ldr	r3, [pc, #40]	@ (802276c <std+0x60>)
 8022742:	429c      	cmp	r4, r3
 8022744:	d005      	beq.n	8022752 <std+0x46>
 8022746:	4b0a      	ldr	r3, [pc, #40]	@ (8022770 <std+0x64>)
 8022748:	429c      	cmp	r4, r3
 802274a:	d002      	beq.n	8022752 <std+0x46>
 802274c:	4b09      	ldr	r3, [pc, #36]	@ (8022774 <std+0x68>)
 802274e:	429c      	cmp	r4, r3
 8022750:	d103      	bne.n	802275a <std+0x4e>
 8022752:	0020      	movs	r0, r4
 8022754:	3058      	adds	r0, #88	@ 0x58
 8022756:	f000 fb41 	bl	8022ddc <__retarget_lock_init_recursive>
 802275a:	bd10      	pop	{r4, pc}
 802275c:	080229b5 	.word	0x080229b5
 8022760:	080229dd 	.word	0x080229dd
 8022764:	08022a15 	.word	0x08022a15
 8022768:	08022a41 	.word	0x08022a41
 802276c:	20003450 	.word	0x20003450
 8022770:	200034b8 	.word	0x200034b8
 8022774:	20003520 	.word	0x20003520

08022778 <stdio_exit_handler>:
 8022778:	b510      	push	{r4, lr}
 802277a:	4a03      	ldr	r2, [pc, #12]	@ (8022788 <stdio_exit_handler+0x10>)
 802277c:	4903      	ldr	r1, [pc, #12]	@ (802278c <stdio_exit_handler+0x14>)
 802277e:	4804      	ldr	r0, [pc, #16]	@ (8022790 <stdio_exit_handler+0x18>)
 8022780:	f000 f86c 	bl	802285c <_fwalk_sglue>
 8022784:	bd10      	pop	{r4, pc}
 8022786:	46c0      	nop			@ (mov r8, r8)
 8022788:	2000026c 	.word	0x2000026c
 802278c:	08025401 	.word	0x08025401
 8022790:	200003e8 	.word	0x200003e8

08022794 <cleanup_stdio>:
 8022794:	6841      	ldr	r1, [r0, #4]
 8022796:	4b0b      	ldr	r3, [pc, #44]	@ (80227c4 <cleanup_stdio+0x30>)
 8022798:	b510      	push	{r4, lr}
 802279a:	0004      	movs	r4, r0
 802279c:	4299      	cmp	r1, r3
 802279e:	d001      	beq.n	80227a4 <cleanup_stdio+0x10>
 80227a0:	f002 fe2e 	bl	8025400 <_fflush_r>
 80227a4:	68a1      	ldr	r1, [r4, #8]
 80227a6:	4b08      	ldr	r3, [pc, #32]	@ (80227c8 <cleanup_stdio+0x34>)
 80227a8:	4299      	cmp	r1, r3
 80227aa:	d002      	beq.n	80227b2 <cleanup_stdio+0x1e>
 80227ac:	0020      	movs	r0, r4
 80227ae:	f002 fe27 	bl	8025400 <_fflush_r>
 80227b2:	68e1      	ldr	r1, [r4, #12]
 80227b4:	4b05      	ldr	r3, [pc, #20]	@ (80227cc <cleanup_stdio+0x38>)
 80227b6:	4299      	cmp	r1, r3
 80227b8:	d002      	beq.n	80227c0 <cleanup_stdio+0x2c>
 80227ba:	0020      	movs	r0, r4
 80227bc:	f002 fe20 	bl	8025400 <_fflush_r>
 80227c0:	bd10      	pop	{r4, pc}
 80227c2:	46c0      	nop			@ (mov r8, r8)
 80227c4:	20003450 	.word	0x20003450
 80227c8:	200034b8 	.word	0x200034b8
 80227cc:	20003520 	.word	0x20003520

080227d0 <global_stdio_init.part.0>:
 80227d0:	b510      	push	{r4, lr}
 80227d2:	4b09      	ldr	r3, [pc, #36]	@ (80227f8 <global_stdio_init.part.0+0x28>)
 80227d4:	4a09      	ldr	r2, [pc, #36]	@ (80227fc <global_stdio_init.part.0+0x2c>)
 80227d6:	2104      	movs	r1, #4
 80227d8:	601a      	str	r2, [r3, #0]
 80227da:	4809      	ldr	r0, [pc, #36]	@ (8022800 <global_stdio_init.part.0+0x30>)
 80227dc:	2200      	movs	r2, #0
 80227de:	f7ff ff95 	bl	802270c <std>
 80227e2:	2201      	movs	r2, #1
 80227e4:	2109      	movs	r1, #9
 80227e6:	4807      	ldr	r0, [pc, #28]	@ (8022804 <global_stdio_init.part.0+0x34>)
 80227e8:	f7ff ff90 	bl	802270c <std>
 80227ec:	2202      	movs	r2, #2
 80227ee:	2112      	movs	r1, #18
 80227f0:	4805      	ldr	r0, [pc, #20]	@ (8022808 <global_stdio_init.part.0+0x38>)
 80227f2:	f7ff ff8b 	bl	802270c <std>
 80227f6:	bd10      	pop	{r4, pc}
 80227f8:	20003588 	.word	0x20003588
 80227fc:	08022779 	.word	0x08022779
 8022800:	20003450 	.word	0x20003450
 8022804:	200034b8 	.word	0x200034b8
 8022808:	20003520 	.word	0x20003520

0802280c <__sfp_lock_acquire>:
 802280c:	b510      	push	{r4, lr}
 802280e:	4802      	ldr	r0, [pc, #8]	@ (8022818 <__sfp_lock_acquire+0xc>)
 8022810:	f000 fae5 	bl	8022dde <__retarget_lock_acquire_recursive>
 8022814:	bd10      	pop	{r4, pc}
 8022816:	46c0      	nop			@ (mov r8, r8)
 8022818:	20003591 	.word	0x20003591

0802281c <__sfp_lock_release>:
 802281c:	b510      	push	{r4, lr}
 802281e:	4802      	ldr	r0, [pc, #8]	@ (8022828 <__sfp_lock_release+0xc>)
 8022820:	f000 fade 	bl	8022de0 <__retarget_lock_release_recursive>
 8022824:	bd10      	pop	{r4, pc}
 8022826:	46c0      	nop			@ (mov r8, r8)
 8022828:	20003591 	.word	0x20003591

0802282c <__sinit>:
 802282c:	b510      	push	{r4, lr}
 802282e:	0004      	movs	r4, r0
 8022830:	f7ff ffec 	bl	802280c <__sfp_lock_acquire>
 8022834:	6a23      	ldr	r3, [r4, #32]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d002      	beq.n	8022840 <__sinit+0x14>
 802283a:	f7ff ffef 	bl	802281c <__sfp_lock_release>
 802283e:	bd10      	pop	{r4, pc}
 8022840:	4b04      	ldr	r3, [pc, #16]	@ (8022854 <__sinit+0x28>)
 8022842:	6223      	str	r3, [r4, #32]
 8022844:	4b04      	ldr	r3, [pc, #16]	@ (8022858 <__sinit+0x2c>)
 8022846:	681b      	ldr	r3, [r3, #0]
 8022848:	2b00      	cmp	r3, #0
 802284a:	d1f6      	bne.n	802283a <__sinit+0xe>
 802284c:	f7ff ffc0 	bl	80227d0 <global_stdio_init.part.0>
 8022850:	e7f3      	b.n	802283a <__sinit+0xe>
 8022852:	46c0      	nop			@ (mov r8, r8)
 8022854:	08022795 	.word	0x08022795
 8022858:	20003588 	.word	0x20003588

0802285c <_fwalk_sglue>:
 802285c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802285e:	0014      	movs	r4, r2
 8022860:	2600      	movs	r6, #0
 8022862:	9000      	str	r0, [sp, #0]
 8022864:	9101      	str	r1, [sp, #4]
 8022866:	68a5      	ldr	r5, [r4, #8]
 8022868:	6867      	ldr	r7, [r4, #4]
 802286a:	3f01      	subs	r7, #1
 802286c:	d504      	bpl.n	8022878 <_fwalk_sglue+0x1c>
 802286e:	6824      	ldr	r4, [r4, #0]
 8022870:	2c00      	cmp	r4, #0
 8022872:	d1f8      	bne.n	8022866 <_fwalk_sglue+0xa>
 8022874:	0030      	movs	r0, r6
 8022876:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022878:	89ab      	ldrh	r3, [r5, #12]
 802287a:	2b01      	cmp	r3, #1
 802287c:	d908      	bls.n	8022890 <_fwalk_sglue+0x34>
 802287e:	220e      	movs	r2, #14
 8022880:	5eab      	ldrsh	r3, [r5, r2]
 8022882:	3301      	adds	r3, #1
 8022884:	d004      	beq.n	8022890 <_fwalk_sglue+0x34>
 8022886:	0029      	movs	r1, r5
 8022888:	9800      	ldr	r0, [sp, #0]
 802288a:	9b01      	ldr	r3, [sp, #4]
 802288c:	4798      	blx	r3
 802288e:	4306      	orrs	r6, r0
 8022890:	3568      	adds	r5, #104	@ 0x68
 8022892:	e7ea      	b.n	802286a <_fwalk_sglue+0xe>

08022894 <iprintf>:
 8022894:	b40f      	push	{r0, r1, r2, r3}
 8022896:	b507      	push	{r0, r1, r2, lr}
 8022898:	4905      	ldr	r1, [pc, #20]	@ (80228b0 <iprintf+0x1c>)
 802289a:	ab04      	add	r3, sp, #16
 802289c:	6808      	ldr	r0, [r1, #0]
 802289e:	cb04      	ldmia	r3!, {r2}
 80228a0:	6881      	ldr	r1, [r0, #8]
 80228a2:	9301      	str	r3, [sp, #4]
 80228a4:	f002 fc0a 	bl	80250bc <_vfiprintf_r>
 80228a8:	b003      	add	sp, #12
 80228aa:	bc08      	pop	{r3}
 80228ac:	b004      	add	sp, #16
 80228ae:	4718      	bx	r3
 80228b0:	200003e4 	.word	0x200003e4

080228b4 <_puts_r>:
 80228b4:	6a03      	ldr	r3, [r0, #32]
 80228b6:	b570      	push	{r4, r5, r6, lr}
 80228b8:	0005      	movs	r5, r0
 80228ba:	000e      	movs	r6, r1
 80228bc:	6884      	ldr	r4, [r0, #8]
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d101      	bne.n	80228c6 <_puts_r+0x12>
 80228c2:	f7ff ffb3 	bl	802282c <__sinit>
 80228c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80228c8:	07db      	lsls	r3, r3, #31
 80228ca:	d405      	bmi.n	80228d8 <_puts_r+0x24>
 80228cc:	89a3      	ldrh	r3, [r4, #12]
 80228ce:	059b      	lsls	r3, r3, #22
 80228d0:	d402      	bmi.n	80228d8 <_puts_r+0x24>
 80228d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80228d4:	f000 fa83 	bl	8022dde <__retarget_lock_acquire_recursive>
 80228d8:	89a3      	ldrh	r3, [r4, #12]
 80228da:	071b      	lsls	r3, r3, #28
 80228dc:	d502      	bpl.n	80228e4 <_puts_r+0x30>
 80228de:	6923      	ldr	r3, [r4, #16]
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	d11f      	bne.n	8022924 <_puts_r+0x70>
 80228e4:	0021      	movs	r1, r4
 80228e6:	0028      	movs	r0, r5
 80228e8:	f000 f94c 	bl	8022b84 <__swsetup_r>
 80228ec:	2800      	cmp	r0, #0
 80228ee:	d019      	beq.n	8022924 <_puts_r+0x70>
 80228f0:	2501      	movs	r5, #1
 80228f2:	426d      	negs	r5, r5
 80228f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80228f6:	07db      	lsls	r3, r3, #31
 80228f8:	d405      	bmi.n	8022906 <_puts_r+0x52>
 80228fa:	89a3      	ldrh	r3, [r4, #12]
 80228fc:	059b      	lsls	r3, r3, #22
 80228fe:	d402      	bmi.n	8022906 <_puts_r+0x52>
 8022900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022902:	f000 fa6d 	bl	8022de0 <__retarget_lock_release_recursive>
 8022906:	0028      	movs	r0, r5
 8022908:	bd70      	pop	{r4, r5, r6, pc}
 802290a:	3601      	adds	r6, #1
 802290c:	60a3      	str	r3, [r4, #8]
 802290e:	2b00      	cmp	r3, #0
 8022910:	da04      	bge.n	802291c <_puts_r+0x68>
 8022912:	69a2      	ldr	r2, [r4, #24]
 8022914:	429a      	cmp	r2, r3
 8022916:	dc16      	bgt.n	8022946 <_puts_r+0x92>
 8022918:	290a      	cmp	r1, #10
 802291a:	d014      	beq.n	8022946 <_puts_r+0x92>
 802291c:	6823      	ldr	r3, [r4, #0]
 802291e:	1c5a      	adds	r2, r3, #1
 8022920:	6022      	str	r2, [r4, #0]
 8022922:	7019      	strb	r1, [r3, #0]
 8022924:	68a3      	ldr	r3, [r4, #8]
 8022926:	7831      	ldrb	r1, [r6, #0]
 8022928:	3b01      	subs	r3, #1
 802292a:	2900      	cmp	r1, #0
 802292c:	d1ed      	bne.n	802290a <_puts_r+0x56>
 802292e:	60a3      	str	r3, [r4, #8]
 8022930:	2b00      	cmp	r3, #0
 8022932:	da0f      	bge.n	8022954 <_puts_r+0xa0>
 8022934:	0022      	movs	r2, r4
 8022936:	0028      	movs	r0, r5
 8022938:	310a      	adds	r1, #10
 802293a:	f000 f8e1 	bl	8022b00 <__swbuf_r>
 802293e:	3001      	adds	r0, #1
 8022940:	d0d6      	beq.n	80228f0 <_puts_r+0x3c>
 8022942:	250a      	movs	r5, #10
 8022944:	e7d6      	b.n	80228f4 <_puts_r+0x40>
 8022946:	0022      	movs	r2, r4
 8022948:	0028      	movs	r0, r5
 802294a:	f000 f8d9 	bl	8022b00 <__swbuf_r>
 802294e:	3001      	adds	r0, #1
 8022950:	d1e8      	bne.n	8022924 <_puts_r+0x70>
 8022952:	e7cd      	b.n	80228f0 <_puts_r+0x3c>
 8022954:	6823      	ldr	r3, [r4, #0]
 8022956:	1c5a      	adds	r2, r3, #1
 8022958:	6022      	str	r2, [r4, #0]
 802295a:	220a      	movs	r2, #10
 802295c:	701a      	strb	r2, [r3, #0]
 802295e:	e7f0      	b.n	8022942 <_puts_r+0x8e>

08022960 <puts>:
 8022960:	b510      	push	{r4, lr}
 8022962:	4b03      	ldr	r3, [pc, #12]	@ (8022970 <puts+0x10>)
 8022964:	0001      	movs	r1, r0
 8022966:	6818      	ldr	r0, [r3, #0]
 8022968:	f7ff ffa4 	bl	80228b4 <_puts_r>
 802296c:	bd10      	pop	{r4, pc}
 802296e:	46c0      	nop			@ (mov r8, r8)
 8022970:	200003e4 	.word	0x200003e4

08022974 <siprintf>:
 8022974:	b40e      	push	{r1, r2, r3}
 8022976:	b500      	push	{lr}
 8022978:	490b      	ldr	r1, [pc, #44]	@ (80229a8 <siprintf+0x34>)
 802297a:	b09c      	sub	sp, #112	@ 0x70
 802297c:	ab1d      	add	r3, sp, #116	@ 0x74
 802297e:	9002      	str	r0, [sp, #8]
 8022980:	9006      	str	r0, [sp, #24]
 8022982:	9107      	str	r1, [sp, #28]
 8022984:	9104      	str	r1, [sp, #16]
 8022986:	4809      	ldr	r0, [pc, #36]	@ (80229ac <siprintf+0x38>)
 8022988:	4909      	ldr	r1, [pc, #36]	@ (80229b0 <siprintf+0x3c>)
 802298a:	cb04      	ldmia	r3!, {r2}
 802298c:	9105      	str	r1, [sp, #20]
 802298e:	6800      	ldr	r0, [r0, #0]
 8022990:	a902      	add	r1, sp, #8
 8022992:	9301      	str	r3, [sp, #4]
 8022994:	f002 fa6c 	bl	8024e70 <_svfiprintf_r>
 8022998:	2200      	movs	r2, #0
 802299a:	9b02      	ldr	r3, [sp, #8]
 802299c:	701a      	strb	r2, [r3, #0]
 802299e:	b01c      	add	sp, #112	@ 0x70
 80229a0:	bc08      	pop	{r3}
 80229a2:	b003      	add	sp, #12
 80229a4:	4718      	bx	r3
 80229a6:	46c0      	nop			@ (mov r8, r8)
 80229a8:	7fffffff 	.word	0x7fffffff
 80229ac:	200003e4 	.word	0x200003e4
 80229b0:	ffff0208 	.word	0xffff0208

080229b4 <__sread>:
 80229b4:	b570      	push	{r4, r5, r6, lr}
 80229b6:	000c      	movs	r4, r1
 80229b8:	250e      	movs	r5, #14
 80229ba:	5f49      	ldrsh	r1, [r1, r5]
 80229bc:	f000 f9bc 	bl	8022d38 <_read_r>
 80229c0:	2800      	cmp	r0, #0
 80229c2:	db03      	blt.n	80229cc <__sread+0x18>
 80229c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80229c6:	181b      	adds	r3, r3, r0
 80229c8:	6563      	str	r3, [r4, #84]	@ 0x54
 80229ca:	bd70      	pop	{r4, r5, r6, pc}
 80229cc:	89a3      	ldrh	r3, [r4, #12]
 80229ce:	4a02      	ldr	r2, [pc, #8]	@ (80229d8 <__sread+0x24>)
 80229d0:	4013      	ands	r3, r2
 80229d2:	81a3      	strh	r3, [r4, #12]
 80229d4:	e7f9      	b.n	80229ca <__sread+0x16>
 80229d6:	46c0      	nop			@ (mov r8, r8)
 80229d8:	ffffefff 	.word	0xffffefff

080229dc <__swrite>:
 80229dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80229de:	001f      	movs	r7, r3
 80229e0:	898b      	ldrh	r3, [r1, #12]
 80229e2:	0005      	movs	r5, r0
 80229e4:	000c      	movs	r4, r1
 80229e6:	0016      	movs	r6, r2
 80229e8:	05db      	lsls	r3, r3, #23
 80229ea:	d505      	bpl.n	80229f8 <__swrite+0x1c>
 80229ec:	230e      	movs	r3, #14
 80229ee:	5ec9      	ldrsh	r1, [r1, r3]
 80229f0:	2200      	movs	r2, #0
 80229f2:	2302      	movs	r3, #2
 80229f4:	f000 f98c 	bl	8022d10 <_lseek_r>
 80229f8:	89a3      	ldrh	r3, [r4, #12]
 80229fa:	4a05      	ldr	r2, [pc, #20]	@ (8022a10 <__swrite+0x34>)
 80229fc:	0028      	movs	r0, r5
 80229fe:	4013      	ands	r3, r2
 8022a00:	81a3      	strh	r3, [r4, #12]
 8022a02:	0032      	movs	r2, r6
 8022a04:	230e      	movs	r3, #14
 8022a06:	5ee1      	ldrsh	r1, [r4, r3]
 8022a08:	003b      	movs	r3, r7
 8022a0a:	f000 f9a9 	bl	8022d60 <_write_r>
 8022a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a10:	ffffefff 	.word	0xffffefff

08022a14 <__sseek>:
 8022a14:	b570      	push	{r4, r5, r6, lr}
 8022a16:	000c      	movs	r4, r1
 8022a18:	250e      	movs	r5, #14
 8022a1a:	5f49      	ldrsh	r1, [r1, r5]
 8022a1c:	f000 f978 	bl	8022d10 <_lseek_r>
 8022a20:	89a3      	ldrh	r3, [r4, #12]
 8022a22:	1c42      	adds	r2, r0, #1
 8022a24:	d103      	bne.n	8022a2e <__sseek+0x1a>
 8022a26:	4a05      	ldr	r2, [pc, #20]	@ (8022a3c <__sseek+0x28>)
 8022a28:	4013      	ands	r3, r2
 8022a2a:	81a3      	strh	r3, [r4, #12]
 8022a2c:	bd70      	pop	{r4, r5, r6, pc}
 8022a2e:	2280      	movs	r2, #128	@ 0x80
 8022a30:	0152      	lsls	r2, r2, #5
 8022a32:	4313      	orrs	r3, r2
 8022a34:	81a3      	strh	r3, [r4, #12]
 8022a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8022a38:	e7f8      	b.n	8022a2c <__sseek+0x18>
 8022a3a:	46c0      	nop			@ (mov r8, r8)
 8022a3c:	ffffefff 	.word	0xffffefff

08022a40 <__sclose>:
 8022a40:	b510      	push	{r4, lr}
 8022a42:	230e      	movs	r3, #14
 8022a44:	5ec9      	ldrsh	r1, [r1, r3]
 8022a46:	f000 f951 	bl	8022cec <_close_r>
 8022a4a:	bd10      	pop	{r4, pc}

08022a4c <_vsniprintf_r>:
 8022a4c:	b530      	push	{r4, r5, lr}
 8022a4e:	0014      	movs	r4, r2
 8022a50:	0005      	movs	r5, r0
 8022a52:	001a      	movs	r2, r3
 8022a54:	b09b      	sub	sp, #108	@ 0x6c
 8022a56:	2c00      	cmp	r4, #0
 8022a58:	da05      	bge.n	8022a66 <_vsniprintf_r+0x1a>
 8022a5a:	238b      	movs	r3, #139	@ 0x8b
 8022a5c:	6003      	str	r3, [r0, #0]
 8022a5e:	2001      	movs	r0, #1
 8022a60:	4240      	negs	r0, r0
 8022a62:	b01b      	add	sp, #108	@ 0x6c
 8022a64:	bd30      	pop	{r4, r5, pc}
 8022a66:	2382      	movs	r3, #130	@ 0x82
 8022a68:	4668      	mov	r0, sp
 8022a6a:	009b      	lsls	r3, r3, #2
 8022a6c:	8183      	strh	r3, [r0, #12]
 8022a6e:	2300      	movs	r3, #0
 8022a70:	9100      	str	r1, [sp, #0]
 8022a72:	9104      	str	r1, [sp, #16]
 8022a74:	429c      	cmp	r4, r3
 8022a76:	d000      	beq.n	8022a7a <_vsniprintf_r+0x2e>
 8022a78:	1e63      	subs	r3, r4, #1
 8022a7a:	9302      	str	r3, [sp, #8]
 8022a7c:	9305      	str	r3, [sp, #20]
 8022a7e:	2301      	movs	r3, #1
 8022a80:	4669      	mov	r1, sp
 8022a82:	425b      	negs	r3, r3
 8022a84:	81cb      	strh	r3, [r1, #14]
 8022a86:	0028      	movs	r0, r5
 8022a88:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022a8a:	f002 f9f1 	bl	8024e70 <_svfiprintf_r>
 8022a8e:	1c43      	adds	r3, r0, #1
 8022a90:	da01      	bge.n	8022a96 <_vsniprintf_r+0x4a>
 8022a92:	238b      	movs	r3, #139	@ 0x8b
 8022a94:	602b      	str	r3, [r5, #0]
 8022a96:	2c00      	cmp	r4, #0
 8022a98:	d0e3      	beq.n	8022a62 <_vsniprintf_r+0x16>
 8022a9a:	2200      	movs	r2, #0
 8022a9c:	9b00      	ldr	r3, [sp, #0]
 8022a9e:	701a      	strb	r2, [r3, #0]
 8022aa0:	e7df      	b.n	8022a62 <_vsniprintf_r+0x16>
	...

08022aa4 <vsniprintf>:
 8022aa4:	b513      	push	{r0, r1, r4, lr}
 8022aa6:	4c04      	ldr	r4, [pc, #16]	@ (8022ab8 <vsniprintf+0x14>)
 8022aa8:	9300      	str	r3, [sp, #0]
 8022aaa:	0013      	movs	r3, r2
 8022aac:	000a      	movs	r2, r1
 8022aae:	0001      	movs	r1, r0
 8022ab0:	6820      	ldr	r0, [r4, #0]
 8022ab2:	f7ff ffcb 	bl	8022a4c <_vsniprintf_r>
 8022ab6:	bd16      	pop	{r1, r2, r4, pc}
 8022ab8:	200003e4 	.word	0x200003e4

08022abc <_vsiprintf_r>:
 8022abc:	b500      	push	{lr}
 8022abe:	b09b      	sub	sp, #108	@ 0x6c
 8022ac0:	9100      	str	r1, [sp, #0]
 8022ac2:	9104      	str	r1, [sp, #16]
 8022ac4:	4906      	ldr	r1, [pc, #24]	@ (8022ae0 <_vsiprintf_r+0x24>)
 8022ac6:	9105      	str	r1, [sp, #20]
 8022ac8:	9102      	str	r1, [sp, #8]
 8022aca:	4906      	ldr	r1, [pc, #24]	@ (8022ae4 <_vsiprintf_r+0x28>)
 8022acc:	9103      	str	r1, [sp, #12]
 8022ace:	4669      	mov	r1, sp
 8022ad0:	f002 f9ce 	bl	8024e70 <_svfiprintf_r>
 8022ad4:	2200      	movs	r2, #0
 8022ad6:	9b00      	ldr	r3, [sp, #0]
 8022ad8:	701a      	strb	r2, [r3, #0]
 8022ada:	b01b      	add	sp, #108	@ 0x6c
 8022adc:	bd00      	pop	{pc}
 8022ade:	46c0      	nop			@ (mov r8, r8)
 8022ae0:	7fffffff 	.word	0x7fffffff
 8022ae4:	ffff0208 	.word	0xffff0208

08022ae8 <vsiprintf>:
 8022ae8:	b510      	push	{r4, lr}
 8022aea:	4c04      	ldr	r4, [pc, #16]	@ (8022afc <vsiprintf+0x14>)
 8022aec:	0013      	movs	r3, r2
 8022aee:	000a      	movs	r2, r1
 8022af0:	0001      	movs	r1, r0
 8022af2:	6820      	ldr	r0, [r4, #0]
 8022af4:	f7ff ffe2 	bl	8022abc <_vsiprintf_r>
 8022af8:	bd10      	pop	{r4, pc}
 8022afa:	46c0      	nop			@ (mov r8, r8)
 8022afc:	200003e4 	.word	0x200003e4

08022b00 <__swbuf_r>:
 8022b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b02:	0006      	movs	r6, r0
 8022b04:	000d      	movs	r5, r1
 8022b06:	0014      	movs	r4, r2
 8022b08:	2800      	cmp	r0, #0
 8022b0a:	d004      	beq.n	8022b16 <__swbuf_r+0x16>
 8022b0c:	6a03      	ldr	r3, [r0, #32]
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d101      	bne.n	8022b16 <__swbuf_r+0x16>
 8022b12:	f7ff fe8b 	bl	802282c <__sinit>
 8022b16:	69a3      	ldr	r3, [r4, #24]
 8022b18:	60a3      	str	r3, [r4, #8]
 8022b1a:	89a3      	ldrh	r3, [r4, #12]
 8022b1c:	071b      	lsls	r3, r3, #28
 8022b1e:	d502      	bpl.n	8022b26 <__swbuf_r+0x26>
 8022b20:	6923      	ldr	r3, [r4, #16]
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	d109      	bne.n	8022b3a <__swbuf_r+0x3a>
 8022b26:	0021      	movs	r1, r4
 8022b28:	0030      	movs	r0, r6
 8022b2a:	f000 f82b 	bl	8022b84 <__swsetup_r>
 8022b2e:	2800      	cmp	r0, #0
 8022b30:	d003      	beq.n	8022b3a <__swbuf_r+0x3a>
 8022b32:	2501      	movs	r5, #1
 8022b34:	426d      	negs	r5, r5
 8022b36:	0028      	movs	r0, r5
 8022b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b3a:	6923      	ldr	r3, [r4, #16]
 8022b3c:	6820      	ldr	r0, [r4, #0]
 8022b3e:	b2ef      	uxtb	r7, r5
 8022b40:	1ac0      	subs	r0, r0, r3
 8022b42:	6963      	ldr	r3, [r4, #20]
 8022b44:	b2ed      	uxtb	r5, r5
 8022b46:	4283      	cmp	r3, r0
 8022b48:	dc05      	bgt.n	8022b56 <__swbuf_r+0x56>
 8022b4a:	0021      	movs	r1, r4
 8022b4c:	0030      	movs	r0, r6
 8022b4e:	f002 fc57 	bl	8025400 <_fflush_r>
 8022b52:	2800      	cmp	r0, #0
 8022b54:	d1ed      	bne.n	8022b32 <__swbuf_r+0x32>
 8022b56:	68a3      	ldr	r3, [r4, #8]
 8022b58:	3001      	adds	r0, #1
 8022b5a:	3b01      	subs	r3, #1
 8022b5c:	60a3      	str	r3, [r4, #8]
 8022b5e:	6823      	ldr	r3, [r4, #0]
 8022b60:	1c5a      	adds	r2, r3, #1
 8022b62:	6022      	str	r2, [r4, #0]
 8022b64:	701f      	strb	r7, [r3, #0]
 8022b66:	6963      	ldr	r3, [r4, #20]
 8022b68:	4283      	cmp	r3, r0
 8022b6a:	d004      	beq.n	8022b76 <__swbuf_r+0x76>
 8022b6c:	89a3      	ldrh	r3, [r4, #12]
 8022b6e:	07db      	lsls	r3, r3, #31
 8022b70:	d5e1      	bpl.n	8022b36 <__swbuf_r+0x36>
 8022b72:	2d0a      	cmp	r5, #10
 8022b74:	d1df      	bne.n	8022b36 <__swbuf_r+0x36>
 8022b76:	0021      	movs	r1, r4
 8022b78:	0030      	movs	r0, r6
 8022b7a:	f002 fc41 	bl	8025400 <_fflush_r>
 8022b7e:	2800      	cmp	r0, #0
 8022b80:	d0d9      	beq.n	8022b36 <__swbuf_r+0x36>
 8022b82:	e7d6      	b.n	8022b32 <__swbuf_r+0x32>

08022b84 <__swsetup_r>:
 8022b84:	4b2d      	ldr	r3, [pc, #180]	@ (8022c3c <__swsetup_r+0xb8>)
 8022b86:	b570      	push	{r4, r5, r6, lr}
 8022b88:	0005      	movs	r5, r0
 8022b8a:	6818      	ldr	r0, [r3, #0]
 8022b8c:	000c      	movs	r4, r1
 8022b8e:	2800      	cmp	r0, #0
 8022b90:	d004      	beq.n	8022b9c <__swsetup_r+0x18>
 8022b92:	6a03      	ldr	r3, [r0, #32]
 8022b94:	2b00      	cmp	r3, #0
 8022b96:	d101      	bne.n	8022b9c <__swsetup_r+0x18>
 8022b98:	f7ff fe48 	bl	802282c <__sinit>
 8022b9c:	230c      	movs	r3, #12
 8022b9e:	5ee2      	ldrsh	r2, [r4, r3]
 8022ba0:	0713      	lsls	r3, r2, #28
 8022ba2:	d423      	bmi.n	8022bec <__swsetup_r+0x68>
 8022ba4:	06d3      	lsls	r3, r2, #27
 8022ba6:	d407      	bmi.n	8022bb8 <__swsetup_r+0x34>
 8022ba8:	2309      	movs	r3, #9
 8022baa:	602b      	str	r3, [r5, #0]
 8022bac:	2340      	movs	r3, #64	@ 0x40
 8022bae:	2001      	movs	r0, #1
 8022bb0:	4313      	orrs	r3, r2
 8022bb2:	81a3      	strh	r3, [r4, #12]
 8022bb4:	4240      	negs	r0, r0
 8022bb6:	e03a      	b.n	8022c2e <__swsetup_r+0xaa>
 8022bb8:	0752      	lsls	r2, r2, #29
 8022bba:	d513      	bpl.n	8022be4 <__swsetup_r+0x60>
 8022bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022bbe:	2900      	cmp	r1, #0
 8022bc0:	d008      	beq.n	8022bd4 <__swsetup_r+0x50>
 8022bc2:	0023      	movs	r3, r4
 8022bc4:	3344      	adds	r3, #68	@ 0x44
 8022bc6:	4299      	cmp	r1, r3
 8022bc8:	d002      	beq.n	8022bd0 <__swsetup_r+0x4c>
 8022bca:	0028      	movs	r0, r5
 8022bcc:	f000 ffa6 	bl	8023b1c <_free_r>
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8022bd4:	2224      	movs	r2, #36	@ 0x24
 8022bd6:	89a3      	ldrh	r3, [r4, #12]
 8022bd8:	4393      	bics	r3, r2
 8022bda:	81a3      	strh	r3, [r4, #12]
 8022bdc:	2300      	movs	r3, #0
 8022bde:	6063      	str	r3, [r4, #4]
 8022be0:	6923      	ldr	r3, [r4, #16]
 8022be2:	6023      	str	r3, [r4, #0]
 8022be4:	2308      	movs	r3, #8
 8022be6:	89a2      	ldrh	r2, [r4, #12]
 8022be8:	4313      	orrs	r3, r2
 8022bea:	81a3      	strh	r3, [r4, #12]
 8022bec:	6923      	ldr	r3, [r4, #16]
 8022bee:	2b00      	cmp	r3, #0
 8022bf0:	d10b      	bne.n	8022c0a <__swsetup_r+0x86>
 8022bf2:	21a0      	movs	r1, #160	@ 0xa0
 8022bf4:	2280      	movs	r2, #128	@ 0x80
 8022bf6:	89a3      	ldrh	r3, [r4, #12]
 8022bf8:	0089      	lsls	r1, r1, #2
 8022bfa:	0092      	lsls	r2, r2, #2
 8022bfc:	400b      	ands	r3, r1
 8022bfe:	4293      	cmp	r3, r2
 8022c00:	d003      	beq.n	8022c0a <__swsetup_r+0x86>
 8022c02:	0021      	movs	r1, r4
 8022c04:	0028      	movs	r0, r5
 8022c06:	f002 fc51 	bl	80254ac <__smakebuf_r>
 8022c0a:	230c      	movs	r3, #12
 8022c0c:	5ee2      	ldrsh	r2, [r4, r3]
 8022c0e:	2101      	movs	r1, #1
 8022c10:	0013      	movs	r3, r2
 8022c12:	400b      	ands	r3, r1
 8022c14:	420a      	tst	r2, r1
 8022c16:	d00b      	beq.n	8022c30 <__swsetup_r+0xac>
 8022c18:	2300      	movs	r3, #0
 8022c1a:	60a3      	str	r3, [r4, #8]
 8022c1c:	6963      	ldr	r3, [r4, #20]
 8022c1e:	425b      	negs	r3, r3
 8022c20:	61a3      	str	r3, [r4, #24]
 8022c22:	2000      	movs	r0, #0
 8022c24:	6923      	ldr	r3, [r4, #16]
 8022c26:	4283      	cmp	r3, r0
 8022c28:	d101      	bne.n	8022c2e <__swsetup_r+0xaa>
 8022c2a:	0613      	lsls	r3, r2, #24
 8022c2c:	d4be      	bmi.n	8022bac <__swsetup_r+0x28>
 8022c2e:	bd70      	pop	{r4, r5, r6, pc}
 8022c30:	0791      	lsls	r1, r2, #30
 8022c32:	d400      	bmi.n	8022c36 <__swsetup_r+0xb2>
 8022c34:	6963      	ldr	r3, [r4, #20]
 8022c36:	60a3      	str	r3, [r4, #8]
 8022c38:	e7f3      	b.n	8022c22 <__swsetup_r+0x9e>
 8022c3a:	46c0      	nop			@ (mov r8, r8)
 8022c3c:	200003e4 	.word	0x200003e4

08022c40 <memset>:
 8022c40:	0003      	movs	r3, r0
 8022c42:	1882      	adds	r2, r0, r2
 8022c44:	4293      	cmp	r3, r2
 8022c46:	d100      	bne.n	8022c4a <memset+0xa>
 8022c48:	4770      	bx	lr
 8022c4a:	7019      	strb	r1, [r3, #0]
 8022c4c:	3301      	adds	r3, #1
 8022c4e:	e7f9      	b.n	8022c44 <memset+0x4>

08022c50 <strchr>:
 8022c50:	b2c9      	uxtb	r1, r1
 8022c52:	7803      	ldrb	r3, [r0, #0]
 8022c54:	2b00      	cmp	r3, #0
 8022c56:	d004      	beq.n	8022c62 <strchr+0x12>
 8022c58:	428b      	cmp	r3, r1
 8022c5a:	d100      	bne.n	8022c5e <strchr+0xe>
 8022c5c:	4770      	bx	lr
 8022c5e:	3001      	adds	r0, #1
 8022c60:	e7f7      	b.n	8022c52 <strchr+0x2>
 8022c62:	424b      	negs	r3, r1
 8022c64:	4159      	adcs	r1, r3
 8022c66:	4249      	negs	r1, r1
 8022c68:	4008      	ands	r0, r1
 8022c6a:	e7f7      	b.n	8022c5c <strchr+0xc>

08022c6c <strncmp>:
 8022c6c:	b530      	push	{r4, r5, lr}
 8022c6e:	0005      	movs	r5, r0
 8022c70:	1e10      	subs	r0, r2, #0
 8022c72:	d00b      	beq.n	8022c8c <strncmp+0x20>
 8022c74:	2400      	movs	r4, #0
 8022c76:	3a01      	subs	r2, #1
 8022c78:	5d2b      	ldrb	r3, [r5, r4]
 8022c7a:	5d08      	ldrb	r0, [r1, r4]
 8022c7c:	4283      	cmp	r3, r0
 8022c7e:	d104      	bne.n	8022c8a <strncmp+0x1e>
 8022c80:	42a2      	cmp	r2, r4
 8022c82:	d002      	beq.n	8022c8a <strncmp+0x1e>
 8022c84:	3401      	adds	r4, #1
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	d1f6      	bne.n	8022c78 <strncmp+0xc>
 8022c8a:	1a18      	subs	r0, r3, r0
 8022c8c:	bd30      	pop	{r4, r5, pc}

08022c8e <strncpy>:
 8022c8e:	0003      	movs	r3, r0
 8022c90:	b530      	push	{r4, r5, lr}
 8022c92:	001d      	movs	r5, r3
 8022c94:	2a00      	cmp	r2, #0
 8022c96:	d006      	beq.n	8022ca6 <strncpy+0x18>
 8022c98:	780c      	ldrb	r4, [r1, #0]
 8022c9a:	3a01      	subs	r2, #1
 8022c9c:	3301      	adds	r3, #1
 8022c9e:	702c      	strb	r4, [r5, #0]
 8022ca0:	3101      	adds	r1, #1
 8022ca2:	2c00      	cmp	r4, #0
 8022ca4:	d1f5      	bne.n	8022c92 <strncpy+0x4>
 8022ca6:	2100      	movs	r1, #0
 8022ca8:	189a      	adds	r2, r3, r2
 8022caa:	4293      	cmp	r3, r2
 8022cac:	d100      	bne.n	8022cb0 <strncpy+0x22>
 8022cae:	bd30      	pop	{r4, r5, pc}
 8022cb0:	7019      	strb	r1, [r3, #0]
 8022cb2:	3301      	adds	r3, #1
 8022cb4:	e7f9      	b.n	8022caa <strncpy+0x1c>

08022cb6 <strstr>:
 8022cb6:	780a      	ldrb	r2, [r1, #0]
 8022cb8:	b530      	push	{r4, r5, lr}
 8022cba:	2a00      	cmp	r2, #0
 8022cbc:	d10c      	bne.n	8022cd8 <strstr+0x22>
 8022cbe:	bd30      	pop	{r4, r5, pc}
 8022cc0:	429a      	cmp	r2, r3
 8022cc2:	d108      	bne.n	8022cd6 <strstr+0x20>
 8022cc4:	2301      	movs	r3, #1
 8022cc6:	5ccc      	ldrb	r4, [r1, r3]
 8022cc8:	2c00      	cmp	r4, #0
 8022cca:	d0f8      	beq.n	8022cbe <strstr+0x8>
 8022ccc:	5cc5      	ldrb	r5, [r0, r3]
 8022cce:	42a5      	cmp	r5, r4
 8022cd0:	d101      	bne.n	8022cd6 <strstr+0x20>
 8022cd2:	3301      	adds	r3, #1
 8022cd4:	e7f7      	b.n	8022cc6 <strstr+0x10>
 8022cd6:	3001      	adds	r0, #1
 8022cd8:	7803      	ldrb	r3, [r0, #0]
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d1f0      	bne.n	8022cc0 <strstr+0xa>
 8022cde:	0018      	movs	r0, r3
 8022ce0:	e7ed      	b.n	8022cbe <strstr+0x8>
	...

08022ce4 <_localeconv_r>:
 8022ce4:	4800      	ldr	r0, [pc, #0]	@ (8022ce8 <_localeconv_r+0x4>)
 8022ce6:	4770      	bx	lr
 8022ce8:	20000368 	.word	0x20000368

08022cec <_close_r>:
 8022cec:	2300      	movs	r3, #0
 8022cee:	b570      	push	{r4, r5, r6, lr}
 8022cf0:	4d06      	ldr	r5, [pc, #24]	@ (8022d0c <_close_r+0x20>)
 8022cf2:	0004      	movs	r4, r0
 8022cf4:	0008      	movs	r0, r1
 8022cf6:	602b      	str	r3, [r5, #0]
 8022cf8:	f7ed f9e6 	bl	80100c8 <_close>
 8022cfc:	1c43      	adds	r3, r0, #1
 8022cfe:	d103      	bne.n	8022d08 <_close_r+0x1c>
 8022d00:	682b      	ldr	r3, [r5, #0]
 8022d02:	2b00      	cmp	r3, #0
 8022d04:	d000      	beq.n	8022d08 <_close_r+0x1c>
 8022d06:	6023      	str	r3, [r4, #0]
 8022d08:	bd70      	pop	{r4, r5, r6, pc}
 8022d0a:	46c0      	nop			@ (mov r8, r8)
 8022d0c:	2000358c 	.word	0x2000358c

08022d10 <_lseek_r>:
 8022d10:	b570      	push	{r4, r5, r6, lr}
 8022d12:	0004      	movs	r4, r0
 8022d14:	0008      	movs	r0, r1
 8022d16:	0011      	movs	r1, r2
 8022d18:	001a      	movs	r2, r3
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	4d05      	ldr	r5, [pc, #20]	@ (8022d34 <_lseek_r+0x24>)
 8022d1e:	602b      	str	r3, [r5, #0]
 8022d20:	f7ed f9f3 	bl	801010a <_lseek>
 8022d24:	1c43      	adds	r3, r0, #1
 8022d26:	d103      	bne.n	8022d30 <_lseek_r+0x20>
 8022d28:	682b      	ldr	r3, [r5, #0]
 8022d2a:	2b00      	cmp	r3, #0
 8022d2c:	d000      	beq.n	8022d30 <_lseek_r+0x20>
 8022d2e:	6023      	str	r3, [r4, #0]
 8022d30:	bd70      	pop	{r4, r5, r6, pc}
 8022d32:	46c0      	nop			@ (mov r8, r8)
 8022d34:	2000358c 	.word	0x2000358c

08022d38 <_read_r>:
 8022d38:	b570      	push	{r4, r5, r6, lr}
 8022d3a:	0004      	movs	r4, r0
 8022d3c:	0008      	movs	r0, r1
 8022d3e:	0011      	movs	r1, r2
 8022d40:	001a      	movs	r2, r3
 8022d42:	2300      	movs	r3, #0
 8022d44:	4d05      	ldr	r5, [pc, #20]	@ (8022d5c <_read_r+0x24>)
 8022d46:	602b      	str	r3, [r5, #0]
 8022d48:	f7ed f9a1 	bl	801008e <_read>
 8022d4c:	1c43      	adds	r3, r0, #1
 8022d4e:	d103      	bne.n	8022d58 <_read_r+0x20>
 8022d50:	682b      	ldr	r3, [r5, #0]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d000      	beq.n	8022d58 <_read_r+0x20>
 8022d56:	6023      	str	r3, [r4, #0]
 8022d58:	bd70      	pop	{r4, r5, r6, pc}
 8022d5a:	46c0      	nop			@ (mov r8, r8)
 8022d5c:	2000358c 	.word	0x2000358c

08022d60 <_write_r>:
 8022d60:	b570      	push	{r4, r5, r6, lr}
 8022d62:	0004      	movs	r4, r0
 8022d64:	0008      	movs	r0, r1
 8022d66:	0011      	movs	r1, r2
 8022d68:	001a      	movs	r2, r3
 8022d6a:	2300      	movs	r3, #0
 8022d6c:	4d05      	ldr	r5, [pc, #20]	@ (8022d84 <_write_r+0x24>)
 8022d6e:	602b      	str	r3, [r5, #0]
 8022d70:	f7ed fe5e 	bl	8010a30 <_write>
 8022d74:	1c43      	adds	r3, r0, #1
 8022d76:	d103      	bne.n	8022d80 <_write_r+0x20>
 8022d78:	682b      	ldr	r3, [r5, #0]
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d000      	beq.n	8022d80 <_write_r+0x20>
 8022d7e:	6023      	str	r3, [r4, #0]
 8022d80:	bd70      	pop	{r4, r5, r6, pc}
 8022d82:	46c0      	nop			@ (mov r8, r8)
 8022d84:	2000358c 	.word	0x2000358c

08022d88 <__errno>:
 8022d88:	4b01      	ldr	r3, [pc, #4]	@ (8022d90 <__errno+0x8>)
 8022d8a:	6818      	ldr	r0, [r3, #0]
 8022d8c:	4770      	bx	lr
 8022d8e:	46c0      	nop			@ (mov r8, r8)
 8022d90:	200003e4 	.word	0x200003e4

08022d94 <__libc_init_array>:
 8022d94:	b570      	push	{r4, r5, r6, lr}
 8022d96:	2600      	movs	r6, #0
 8022d98:	4c0c      	ldr	r4, [pc, #48]	@ (8022dcc <__libc_init_array+0x38>)
 8022d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8022dd0 <__libc_init_array+0x3c>)
 8022d9c:	1b64      	subs	r4, r4, r5
 8022d9e:	10a4      	asrs	r4, r4, #2
 8022da0:	42a6      	cmp	r6, r4
 8022da2:	d109      	bne.n	8022db8 <__libc_init_array+0x24>
 8022da4:	2600      	movs	r6, #0
 8022da6:	f002 fee9 	bl	8025b7c <_init>
 8022daa:	4c0a      	ldr	r4, [pc, #40]	@ (8022dd4 <__libc_init_array+0x40>)
 8022dac:	4d0a      	ldr	r5, [pc, #40]	@ (8022dd8 <__libc_init_array+0x44>)
 8022dae:	1b64      	subs	r4, r4, r5
 8022db0:	10a4      	asrs	r4, r4, #2
 8022db2:	42a6      	cmp	r6, r4
 8022db4:	d105      	bne.n	8022dc2 <__libc_init_array+0x2e>
 8022db6:	bd70      	pop	{r4, r5, r6, pc}
 8022db8:	00b3      	lsls	r3, r6, #2
 8022dba:	58eb      	ldr	r3, [r5, r3]
 8022dbc:	4798      	blx	r3
 8022dbe:	3601      	adds	r6, #1
 8022dc0:	e7ee      	b.n	8022da0 <__libc_init_array+0xc>
 8022dc2:	00b3      	lsls	r3, r6, #2
 8022dc4:	58eb      	ldr	r3, [r5, r3]
 8022dc6:	4798      	blx	r3
 8022dc8:	3601      	adds	r6, #1
 8022dca:	e7f2      	b.n	8022db2 <__libc_init_array+0x1e>
 8022dcc:	08029b20 	.word	0x08029b20
 8022dd0:	08029b20 	.word	0x08029b20
 8022dd4:	08029b24 	.word	0x08029b24
 8022dd8:	08029b20 	.word	0x08029b20

08022ddc <__retarget_lock_init_recursive>:
 8022ddc:	4770      	bx	lr

08022dde <__retarget_lock_acquire_recursive>:
 8022dde:	4770      	bx	lr

08022de0 <__retarget_lock_release_recursive>:
 8022de0:	4770      	bx	lr

08022de2 <memchr>:
 8022de2:	b2c9      	uxtb	r1, r1
 8022de4:	1882      	adds	r2, r0, r2
 8022de6:	4290      	cmp	r0, r2
 8022de8:	d101      	bne.n	8022dee <memchr+0xc>
 8022dea:	2000      	movs	r0, #0
 8022dec:	4770      	bx	lr
 8022dee:	7803      	ldrb	r3, [r0, #0]
 8022df0:	428b      	cmp	r3, r1
 8022df2:	d0fb      	beq.n	8022dec <memchr+0xa>
 8022df4:	3001      	adds	r0, #1
 8022df6:	e7f6      	b.n	8022de6 <memchr+0x4>

08022df8 <memcpy>:
 8022df8:	2300      	movs	r3, #0
 8022dfa:	b510      	push	{r4, lr}
 8022dfc:	429a      	cmp	r2, r3
 8022dfe:	d100      	bne.n	8022e02 <memcpy+0xa>
 8022e00:	bd10      	pop	{r4, pc}
 8022e02:	5ccc      	ldrb	r4, [r1, r3]
 8022e04:	54c4      	strb	r4, [r0, r3]
 8022e06:	3301      	adds	r3, #1
 8022e08:	e7f8      	b.n	8022dfc <memcpy+0x4>
	...

08022e0c <nan>:
 8022e0c:	2000      	movs	r0, #0
 8022e0e:	4901      	ldr	r1, [pc, #4]	@ (8022e14 <nan+0x8>)
 8022e10:	4770      	bx	lr
 8022e12:	46c0      	nop			@ (mov r8, r8)
 8022e14:	7ff80000 	.word	0x7ff80000

08022e18 <quorem>:
 8022e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e1a:	6902      	ldr	r2, [r0, #16]
 8022e1c:	690f      	ldr	r7, [r1, #16]
 8022e1e:	b087      	sub	sp, #28
 8022e20:	0006      	movs	r6, r0
 8022e22:	000b      	movs	r3, r1
 8022e24:	2000      	movs	r0, #0
 8022e26:	9102      	str	r1, [sp, #8]
 8022e28:	42ba      	cmp	r2, r7
 8022e2a:	db6d      	blt.n	8022f08 <quorem+0xf0>
 8022e2c:	3f01      	subs	r7, #1
 8022e2e:	00bc      	lsls	r4, r7, #2
 8022e30:	3314      	adds	r3, #20
 8022e32:	9305      	str	r3, [sp, #20]
 8022e34:	191b      	adds	r3, r3, r4
 8022e36:	9303      	str	r3, [sp, #12]
 8022e38:	0033      	movs	r3, r6
 8022e3a:	3314      	adds	r3, #20
 8022e3c:	191c      	adds	r4, r3, r4
 8022e3e:	9301      	str	r3, [sp, #4]
 8022e40:	6823      	ldr	r3, [r4, #0]
 8022e42:	9304      	str	r3, [sp, #16]
 8022e44:	9b03      	ldr	r3, [sp, #12]
 8022e46:	9804      	ldr	r0, [sp, #16]
 8022e48:	681d      	ldr	r5, [r3, #0]
 8022e4a:	3501      	adds	r5, #1
 8022e4c:	0029      	movs	r1, r5
 8022e4e:	f7dd f9a9 	bl	80001a4 <__udivsi3>
 8022e52:	9b04      	ldr	r3, [sp, #16]
 8022e54:	9000      	str	r0, [sp, #0]
 8022e56:	42ab      	cmp	r3, r5
 8022e58:	d32b      	bcc.n	8022eb2 <quorem+0x9a>
 8022e5a:	9b05      	ldr	r3, [sp, #20]
 8022e5c:	9d01      	ldr	r5, [sp, #4]
 8022e5e:	469c      	mov	ip, r3
 8022e60:	2300      	movs	r3, #0
 8022e62:	9305      	str	r3, [sp, #20]
 8022e64:	9304      	str	r3, [sp, #16]
 8022e66:	4662      	mov	r2, ip
 8022e68:	ca08      	ldmia	r2!, {r3}
 8022e6a:	6828      	ldr	r0, [r5, #0]
 8022e6c:	4694      	mov	ip, r2
 8022e6e:	9a00      	ldr	r2, [sp, #0]
 8022e70:	b299      	uxth	r1, r3
 8022e72:	4351      	muls	r1, r2
 8022e74:	9a05      	ldr	r2, [sp, #20]
 8022e76:	0c1b      	lsrs	r3, r3, #16
 8022e78:	1889      	adds	r1, r1, r2
 8022e7a:	9a00      	ldr	r2, [sp, #0]
 8022e7c:	4353      	muls	r3, r2
 8022e7e:	0c0a      	lsrs	r2, r1, #16
 8022e80:	189b      	adds	r3, r3, r2
 8022e82:	0c1a      	lsrs	r2, r3, #16
 8022e84:	b289      	uxth	r1, r1
 8022e86:	9205      	str	r2, [sp, #20]
 8022e88:	b282      	uxth	r2, r0
 8022e8a:	1a52      	subs	r2, r2, r1
 8022e8c:	9904      	ldr	r1, [sp, #16]
 8022e8e:	0c00      	lsrs	r0, r0, #16
 8022e90:	1852      	adds	r2, r2, r1
 8022e92:	b29b      	uxth	r3, r3
 8022e94:	1411      	asrs	r1, r2, #16
 8022e96:	1ac3      	subs	r3, r0, r3
 8022e98:	185b      	adds	r3, r3, r1
 8022e9a:	1419      	asrs	r1, r3, #16
 8022e9c:	b292      	uxth	r2, r2
 8022e9e:	041b      	lsls	r3, r3, #16
 8022ea0:	431a      	orrs	r2, r3
 8022ea2:	9b03      	ldr	r3, [sp, #12]
 8022ea4:	9104      	str	r1, [sp, #16]
 8022ea6:	c504      	stmia	r5!, {r2}
 8022ea8:	4563      	cmp	r3, ip
 8022eaa:	d2dc      	bcs.n	8022e66 <quorem+0x4e>
 8022eac:	6823      	ldr	r3, [r4, #0]
 8022eae:	2b00      	cmp	r3, #0
 8022eb0:	d030      	beq.n	8022f14 <quorem+0xfc>
 8022eb2:	0030      	movs	r0, r6
 8022eb4:	9902      	ldr	r1, [sp, #8]
 8022eb6:	f001 fd7d 	bl	80249b4 <__mcmp>
 8022eba:	2800      	cmp	r0, #0
 8022ebc:	db23      	blt.n	8022f06 <quorem+0xee>
 8022ebe:	0034      	movs	r4, r6
 8022ec0:	2500      	movs	r5, #0
 8022ec2:	9902      	ldr	r1, [sp, #8]
 8022ec4:	3414      	adds	r4, #20
 8022ec6:	3114      	adds	r1, #20
 8022ec8:	6823      	ldr	r3, [r4, #0]
 8022eca:	c901      	ldmia	r1!, {r0}
 8022ecc:	9302      	str	r3, [sp, #8]
 8022ece:	466b      	mov	r3, sp
 8022ed0:	891b      	ldrh	r3, [r3, #8]
 8022ed2:	b282      	uxth	r2, r0
 8022ed4:	1a9a      	subs	r2, r3, r2
 8022ed6:	9b02      	ldr	r3, [sp, #8]
 8022ed8:	1952      	adds	r2, r2, r5
 8022eda:	0c00      	lsrs	r0, r0, #16
 8022edc:	0c1b      	lsrs	r3, r3, #16
 8022ede:	1a1b      	subs	r3, r3, r0
 8022ee0:	1410      	asrs	r0, r2, #16
 8022ee2:	181b      	adds	r3, r3, r0
 8022ee4:	141d      	asrs	r5, r3, #16
 8022ee6:	b292      	uxth	r2, r2
 8022ee8:	041b      	lsls	r3, r3, #16
 8022eea:	431a      	orrs	r2, r3
 8022eec:	9b03      	ldr	r3, [sp, #12]
 8022eee:	c404      	stmia	r4!, {r2}
 8022ef0:	428b      	cmp	r3, r1
 8022ef2:	d2e9      	bcs.n	8022ec8 <quorem+0xb0>
 8022ef4:	9a01      	ldr	r2, [sp, #4]
 8022ef6:	00bb      	lsls	r3, r7, #2
 8022ef8:	18d3      	adds	r3, r2, r3
 8022efa:	681a      	ldr	r2, [r3, #0]
 8022efc:	2a00      	cmp	r2, #0
 8022efe:	d013      	beq.n	8022f28 <quorem+0x110>
 8022f00:	9b00      	ldr	r3, [sp, #0]
 8022f02:	3301      	adds	r3, #1
 8022f04:	9300      	str	r3, [sp, #0]
 8022f06:	9800      	ldr	r0, [sp, #0]
 8022f08:	b007      	add	sp, #28
 8022f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f0c:	6823      	ldr	r3, [r4, #0]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d104      	bne.n	8022f1c <quorem+0x104>
 8022f12:	3f01      	subs	r7, #1
 8022f14:	9b01      	ldr	r3, [sp, #4]
 8022f16:	3c04      	subs	r4, #4
 8022f18:	42a3      	cmp	r3, r4
 8022f1a:	d3f7      	bcc.n	8022f0c <quorem+0xf4>
 8022f1c:	6137      	str	r7, [r6, #16]
 8022f1e:	e7c8      	b.n	8022eb2 <quorem+0x9a>
 8022f20:	681a      	ldr	r2, [r3, #0]
 8022f22:	2a00      	cmp	r2, #0
 8022f24:	d104      	bne.n	8022f30 <quorem+0x118>
 8022f26:	3f01      	subs	r7, #1
 8022f28:	9a01      	ldr	r2, [sp, #4]
 8022f2a:	3b04      	subs	r3, #4
 8022f2c:	429a      	cmp	r2, r3
 8022f2e:	d3f7      	bcc.n	8022f20 <quorem+0x108>
 8022f30:	6137      	str	r7, [r6, #16]
 8022f32:	e7e5      	b.n	8022f00 <quorem+0xe8>

08022f34 <_dtoa_r>:
 8022f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f36:	0014      	movs	r4, r2
 8022f38:	001d      	movs	r5, r3
 8022f3a:	69c6      	ldr	r6, [r0, #28]
 8022f3c:	b09d      	sub	sp, #116	@ 0x74
 8022f3e:	940a      	str	r4, [sp, #40]	@ 0x28
 8022f40:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022f42:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8022f44:	9003      	str	r0, [sp, #12]
 8022f46:	2e00      	cmp	r6, #0
 8022f48:	d10f      	bne.n	8022f6a <_dtoa_r+0x36>
 8022f4a:	2010      	movs	r0, #16
 8022f4c:	f001 f98a 	bl	8024264 <malloc>
 8022f50:	9b03      	ldr	r3, [sp, #12]
 8022f52:	1e02      	subs	r2, r0, #0
 8022f54:	61d8      	str	r0, [r3, #28]
 8022f56:	d104      	bne.n	8022f62 <_dtoa_r+0x2e>
 8022f58:	21ef      	movs	r1, #239	@ 0xef
 8022f5a:	4bc7      	ldr	r3, [pc, #796]	@ (8023278 <_dtoa_r+0x344>)
 8022f5c:	48c7      	ldr	r0, [pc, #796]	@ (802327c <_dtoa_r+0x348>)
 8022f5e:	f002 fb2f 	bl	80255c0 <__assert_func>
 8022f62:	6046      	str	r6, [r0, #4]
 8022f64:	6086      	str	r6, [r0, #8]
 8022f66:	6006      	str	r6, [r0, #0]
 8022f68:	60c6      	str	r6, [r0, #12]
 8022f6a:	9b03      	ldr	r3, [sp, #12]
 8022f6c:	69db      	ldr	r3, [r3, #28]
 8022f6e:	6819      	ldr	r1, [r3, #0]
 8022f70:	2900      	cmp	r1, #0
 8022f72:	d00b      	beq.n	8022f8c <_dtoa_r+0x58>
 8022f74:	685a      	ldr	r2, [r3, #4]
 8022f76:	2301      	movs	r3, #1
 8022f78:	4093      	lsls	r3, r2
 8022f7a:	604a      	str	r2, [r1, #4]
 8022f7c:	608b      	str	r3, [r1, #8]
 8022f7e:	9803      	ldr	r0, [sp, #12]
 8022f80:	f001 fa82 	bl	8024488 <_Bfree>
 8022f84:	2200      	movs	r2, #0
 8022f86:	9b03      	ldr	r3, [sp, #12]
 8022f88:	69db      	ldr	r3, [r3, #28]
 8022f8a:	601a      	str	r2, [r3, #0]
 8022f8c:	2d00      	cmp	r5, #0
 8022f8e:	da1e      	bge.n	8022fce <_dtoa_r+0x9a>
 8022f90:	2301      	movs	r3, #1
 8022f92:	603b      	str	r3, [r7, #0]
 8022f94:	006b      	lsls	r3, r5, #1
 8022f96:	085b      	lsrs	r3, r3, #1
 8022f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022f9a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022f9c:	4bb8      	ldr	r3, [pc, #736]	@ (8023280 <_dtoa_r+0x34c>)
 8022f9e:	4ab8      	ldr	r2, [pc, #736]	@ (8023280 <_dtoa_r+0x34c>)
 8022fa0:	403b      	ands	r3, r7
 8022fa2:	4293      	cmp	r3, r2
 8022fa4:	d116      	bne.n	8022fd4 <_dtoa_r+0xa0>
 8022fa6:	4bb7      	ldr	r3, [pc, #732]	@ (8023284 <_dtoa_r+0x350>)
 8022fa8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022faa:	6013      	str	r3, [r2, #0]
 8022fac:	033b      	lsls	r3, r7, #12
 8022fae:	0b1b      	lsrs	r3, r3, #12
 8022fb0:	4323      	orrs	r3, r4
 8022fb2:	d101      	bne.n	8022fb8 <_dtoa_r+0x84>
 8022fb4:	f000 fd83 	bl	8023abe <_dtoa_r+0xb8a>
 8022fb8:	4bb3      	ldr	r3, [pc, #716]	@ (8023288 <_dtoa_r+0x354>)
 8022fba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022fbc:	9308      	str	r3, [sp, #32]
 8022fbe:	2a00      	cmp	r2, #0
 8022fc0:	d002      	beq.n	8022fc8 <_dtoa_r+0x94>
 8022fc2:	4bb2      	ldr	r3, [pc, #712]	@ (802328c <_dtoa_r+0x358>)
 8022fc4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022fc6:	6013      	str	r3, [r2, #0]
 8022fc8:	9808      	ldr	r0, [sp, #32]
 8022fca:	b01d      	add	sp, #116	@ 0x74
 8022fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022fce:	2300      	movs	r3, #0
 8022fd0:	603b      	str	r3, [r7, #0]
 8022fd2:	e7e2      	b.n	8022f9a <_dtoa_r+0x66>
 8022fd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022fd8:	9212      	str	r2, [sp, #72]	@ 0x48
 8022fda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022fdc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022fde:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022fe0:	2200      	movs	r2, #0
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	f7dd fa64 	bl	80004b0 <__aeabi_dcmpeq>
 8022fe8:	1e06      	subs	r6, r0, #0
 8022fea:	d00b      	beq.n	8023004 <_dtoa_r+0xd0>
 8022fec:	2301      	movs	r3, #1
 8022fee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8022ff0:	6013      	str	r3, [r2, #0]
 8022ff2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022ff4:	2b00      	cmp	r3, #0
 8022ff6:	d002      	beq.n	8022ffe <_dtoa_r+0xca>
 8022ff8:	4ba5      	ldr	r3, [pc, #660]	@ (8023290 <_dtoa_r+0x35c>)
 8022ffa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8022ffc:	6013      	str	r3, [r2, #0]
 8022ffe:	4ba5      	ldr	r3, [pc, #660]	@ (8023294 <_dtoa_r+0x360>)
 8023000:	9308      	str	r3, [sp, #32]
 8023002:	e7e1      	b.n	8022fc8 <_dtoa_r+0x94>
 8023004:	ab1a      	add	r3, sp, #104	@ 0x68
 8023006:	9301      	str	r3, [sp, #4]
 8023008:	ab1b      	add	r3, sp, #108	@ 0x6c
 802300a:	9300      	str	r3, [sp, #0]
 802300c:	9803      	ldr	r0, [sp, #12]
 802300e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023010:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023012:	f001 fdf1 	bl	8024bf8 <__d2b>
 8023016:	007a      	lsls	r2, r7, #1
 8023018:	9005      	str	r0, [sp, #20]
 802301a:	0d52      	lsrs	r2, r2, #21
 802301c:	d100      	bne.n	8023020 <_dtoa_r+0xec>
 802301e:	e07b      	b.n	8023118 <_dtoa_r+0x1e4>
 8023020:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023022:	9618      	str	r6, [sp, #96]	@ 0x60
 8023024:	0319      	lsls	r1, r3, #12
 8023026:	4b9c      	ldr	r3, [pc, #624]	@ (8023298 <_dtoa_r+0x364>)
 8023028:	0b09      	lsrs	r1, r1, #12
 802302a:	430b      	orrs	r3, r1
 802302c:	499b      	ldr	r1, [pc, #620]	@ (802329c <_dtoa_r+0x368>)
 802302e:	1857      	adds	r7, r2, r1
 8023030:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023032:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023034:	0019      	movs	r1, r3
 8023036:	2200      	movs	r2, #0
 8023038:	4b99      	ldr	r3, [pc, #612]	@ (80232a0 <_dtoa_r+0x36c>)
 802303a:	f7df fdc7 	bl	8002bcc <__aeabi_dsub>
 802303e:	4a99      	ldr	r2, [pc, #612]	@ (80232a4 <_dtoa_r+0x370>)
 8023040:	4b99      	ldr	r3, [pc, #612]	@ (80232a8 <_dtoa_r+0x374>)
 8023042:	f7df fafb 	bl	800263c <__aeabi_dmul>
 8023046:	4a99      	ldr	r2, [pc, #612]	@ (80232ac <_dtoa_r+0x378>)
 8023048:	4b99      	ldr	r3, [pc, #612]	@ (80232b0 <_dtoa_r+0x37c>)
 802304a:	f7de fb4f 	bl	80016ec <__aeabi_dadd>
 802304e:	0004      	movs	r4, r0
 8023050:	0038      	movs	r0, r7
 8023052:	000d      	movs	r5, r1
 8023054:	f7e0 f9b4 	bl	80033c0 <__aeabi_i2d>
 8023058:	4a96      	ldr	r2, [pc, #600]	@ (80232b4 <_dtoa_r+0x380>)
 802305a:	4b97      	ldr	r3, [pc, #604]	@ (80232b8 <_dtoa_r+0x384>)
 802305c:	f7df faee 	bl	800263c <__aeabi_dmul>
 8023060:	0002      	movs	r2, r0
 8023062:	000b      	movs	r3, r1
 8023064:	0020      	movs	r0, r4
 8023066:	0029      	movs	r1, r5
 8023068:	f7de fb40 	bl	80016ec <__aeabi_dadd>
 802306c:	0004      	movs	r4, r0
 802306e:	000d      	movs	r5, r1
 8023070:	f7e0 f96a 	bl	8003348 <__aeabi_d2iz>
 8023074:	2200      	movs	r2, #0
 8023076:	9004      	str	r0, [sp, #16]
 8023078:	2300      	movs	r3, #0
 802307a:	0020      	movs	r0, r4
 802307c:	0029      	movs	r1, r5
 802307e:	f7dd fa1d 	bl	80004bc <__aeabi_dcmplt>
 8023082:	2800      	cmp	r0, #0
 8023084:	d00b      	beq.n	802309e <_dtoa_r+0x16a>
 8023086:	9804      	ldr	r0, [sp, #16]
 8023088:	f7e0 f99a 	bl	80033c0 <__aeabi_i2d>
 802308c:	002b      	movs	r3, r5
 802308e:	0022      	movs	r2, r4
 8023090:	f7dd fa0e 	bl	80004b0 <__aeabi_dcmpeq>
 8023094:	4243      	negs	r3, r0
 8023096:	4158      	adcs	r0, r3
 8023098:	9b04      	ldr	r3, [sp, #16]
 802309a:	1a1b      	subs	r3, r3, r0
 802309c:	9304      	str	r3, [sp, #16]
 802309e:	2301      	movs	r3, #1
 80230a0:	9315      	str	r3, [sp, #84]	@ 0x54
 80230a2:	9b04      	ldr	r3, [sp, #16]
 80230a4:	2b16      	cmp	r3, #22
 80230a6:	d810      	bhi.n	80230ca <_dtoa_r+0x196>
 80230a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80230aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80230ac:	9a04      	ldr	r2, [sp, #16]
 80230ae:	4b83      	ldr	r3, [pc, #524]	@ (80232bc <_dtoa_r+0x388>)
 80230b0:	00d2      	lsls	r2, r2, #3
 80230b2:	189b      	adds	r3, r3, r2
 80230b4:	681a      	ldr	r2, [r3, #0]
 80230b6:	685b      	ldr	r3, [r3, #4]
 80230b8:	f7dd fa00 	bl	80004bc <__aeabi_dcmplt>
 80230bc:	2800      	cmp	r0, #0
 80230be:	d047      	beq.n	8023150 <_dtoa_r+0x21c>
 80230c0:	9b04      	ldr	r3, [sp, #16]
 80230c2:	3b01      	subs	r3, #1
 80230c4:	9304      	str	r3, [sp, #16]
 80230c6:	2300      	movs	r3, #0
 80230c8:	9315      	str	r3, [sp, #84]	@ 0x54
 80230ca:	2200      	movs	r2, #0
 80230cc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80230ce:	9206      	str	r2, [sp, #24]
 80230d0:	1bdb      	subs	r3, r3, r7
 80230d2:	1e5a      	subs	r2, r3, #1
 80230d4:	d53e      	bpl.n	8023154 <_dtoa_r+0x220>
 80230d6:	2201      	movs	r2, #1
 80230d8:	1ad3      	subs	r3, r2, r3
 80230da:	9306      	str	r3, [sp, #24]
 80230dc:	2300      	movs	r3, #0
 80230de:	930d      	str	r3, [sp, #52]	@ 0x34
 80230e0:	9b04      	ldr	r3, [sp, #16]
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	db38      	blt.n	8023158 <_dtoa_r+0x224>
 80230e6:	9a04      	ldr	r2, [sp, #16]
 80230e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80230ea:	4694      	mov	ip, r2
 80230ec:	4463      	add	r3, ip
 80230ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80230f0:	2300      	movs	r3, #0
 80230f2:	9214      	str	r2, [sp, #80]	@ 0x50
 80230f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80230f6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80230f8:	2401      	movs	r4, #1
 80230fa:	2b09      	cmp	r3, #9
 80230fc:	d867      	bhi.n	80231ce <_dtoa_r+0x29a>
 80230fe:	2b05      	cmp	r3, #5
 8023100:	dd02      	ble.n	8023108 <_dtoa_r+0x1d4>
 8023102:	2400      	movs	r4, #0
 8023104:	3b04      	subs	r3, #4
 8023106:	9322      	str	r3, [sp, #136]	@ 0x88
 8023108:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802310a:	1e98      	subs	r0, r3, #2
 802310c:	2803      	cmp	r0, #3
 802310e:	d867      	bhi.n	80231e0 <_dtoa_r+0x2ac>
 8023110:	f7dd f834 	bl	800017c <__gnu_thumb1_case_uqi>
 8023114:	5b383a2b 	.word	0x5b383a2b
 8023118:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802311a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802311c:	18f6      	adds	r6, r6, r3
 802311e:	4b68      	ldr	r3, [pc, #416]	@ (80232c0 <_dtoa_r+0x38c>)
 8023120:	18f2      	adds	r2, r6, r3
 8023122:	2a20      	cmp	r2, #32
 8023124:	dd0f      	ble.n	8023146 <_dtoa_r+0x212>
 8023126:	2340      	movs	r3, #64	@ 0x40
 8023128:	1a9b      	subs	r3, r3, r2
 802312a:	409f      	lsls	r7, r3
 802312c:	4b65      	ldr	r3, [pc, #404]	@ (80232c4 <_dtoa_r+0x390>)
 802312e:	0038      	movs	r0, r7
 8023130:	18f3      	adds	r3, r6, r3
 8023132:	40dc      	lsrs	r4, r3
 8023134:	4320      	orrs	r0, r4
 8023136:	f7e0 f971 	bl	800341c <__aeabi_ui2d>
 802313a:	2201      	movs	r2, #1
 802313c:	4b62      	ldr	r3, [pc, #392]	@ (80232c8 <_dtoa_r+0x394>)
 802313e:	1e77      	subs	r7, r6, #1
 8023140:	18cb      	adds	r3, r1, r3
 8023142:	9218      	str	r2, [sp, #96]	@ 0x60
 8023144:	e776      	b.n	8023034 <_dtoa_r+0x100>
 8023146:	2320      	movs	r3, #32
 8023148:	0020      	movs	r0, r4
 802314a:	1a9b      	subs	r3, r3, r2
 802314c:	4098      	lsls	r0, r3
 802314e:	e7f2      	b.n	8023136 <_dtoa_r+0x202>
 8023150:	9015      	str	r0, [sp, #84]	@ 0x54
 8023152:	e7ba      	b.n	80230ca <_dtoa_r+0x196>
 8023154:	920d      	str	r2, [sp, #52]	@ 0x34
 8023156:	e7c3      	b.n	80230e0 <_dtoa_r+0x1ac>
 8023158:	9b06      	ldr	r3, [sp, #24]
 802315a:	9a04      	ldr	r2, [sp, #16]
 802315c:	1a9b      	subs	r3, r3, r2
 802315e:	9306      	str	r3, [sp, #24]
 8023160:	4253      	negs	r3, r2
 8023162:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023164:	2300      	movs	r3, #0
 8023166:	9314      	str	r3, [sp, #80]	@ 0x50
 8023168:	e7c5      	b.n	80230f6 <_dtoa_r+0x1c2>
 802316a:	2300      	movs	r3, #0
 802316c:	9310      	str	r3, [sp, #64]	@ 0x40
 802316e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023170:	930e      	str	r3, [sp, #56]	@ 0x38
 8023172:	9309      	str	r3, [sp, #36]	@ 0x24
 8023174:	2b00      	cmp	r3, #0
 8023176:	dc13      	bgt.n	80231a0 <_dtoa_r+0x26c>
 8023178:	2301      	movs	r3, #1
 802317a:	001a      	movs	r2, r3
 802317c:	930e      	str	r3, [sp, #56]	@ 0x38
 802317e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023180:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023182:	e00d      	b.n	80231a0 <_dtoa_r+0x26c>
 8023184:	2301      	movs	r3, #1
 8023186:	e7f1      	b.n	802316c <_dtoa_r+0x238>
 8023188:	2300      	movs	r3, #0
 802318a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802318c:	9310      	str	r3, [sp, #64]	@ 0x40
 802318e:	4694      	mov	ip, r2
 8023190:	9b04      	ldr	r3, [sp, #16]
 8023192:	4463      	add	r3, ip
 8023194:	930e      	str	r3, [sp, #56]	@ 0x38
 8023196:	3301      	adds	r3, #1
 8023198:	9309      	str	r3, [sp, #36]	@ 0x24
 802319a:	2b00      	cmp	r3, #0
 802319c:	dc00      	bgt.n	80231a0 <_dtoa_r+0x26c>
 802319e:	2301      	movs	r3, #1
 80231a0:	9a03      	ldr	r2, [sp, #12]
 80231a2:	2100      	movs	r1, #0
 80231a4:	69d0      	ldr	r0, [r2, #28]
 80231a6:	2204      	movs	r2, #4
 80231a8:	0015      	movs	r5, r2
 80231aa:	3514      	adds	r5, #20
 80231ac:	429d      	cmp	r5, r3
 80231ae:	d91b      	bls.n	80231e8 <_dtoa_r+0x2b4>
 80231b0:	6041      	str	r1, [r0, #4]
 80231b2:	9803      	ldr	r0, [sp, #12]
 80231b4:	f001 f924 	bl	8024400 <_Balloc>
 80231b8:	9008      	str	r0, [sp, #32]
 80231ba:	2800      	cmp	r0, #0
 80231bc:	d117      	bne.n	80231ee <_dtoa_r+0x2ba>
 80231be:	21b0      	movs	r1, #176	@ 0xb0
 80231c0:	4b42      	ldr	r3, [pc, #264]	@ (80232cc <_dtoa_r+0x398>)
 80231c2:	482e      	ldr	r0, [pc, #184]	@ (802327c <_dtoa_r+0x348>)
 80231c4:	9a08      	ldr	r2, [sp, #32]
 80231c6:	31ff      	adds	r1, #255	@ 0xff
 80231c8:	e6c9      	b.n	8022f5e <_dtoa_r+0x2a>
 80231ca:	2301      	movs	r3, #1
 80231cc:	e7dd      	b.n	802318a <_dtoa_r+0x256>
 80231ce:	2300      	movs	r3, #0
 80231d0:	9410      	str	r4, [sp, #64]	@ 0x40
 80231d2:	9322      	str	r3, [sp, #136]	@ 0x88
 80231d4:	3b01      	subs	r3, #1
 80231d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80231d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80231da:	2200      	movs	r2, #0
 80231dc:	3313      	adds	r3, #19
 80231de:	e7cf      	b.n	8023180 <_dtoa_r+0x24c>
 80231e0:	2301      	movs	r3, #1
 80231e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80231e4:	3b02      	subs	r3, #2
 80231e6:	e7f6      	b.n	80231d6 <_dtoa_r+0x2a2>
 80231e8:	3101      	adds	r1, #1
 80231ea:	0052      	lsls	r2, r2, #1
 80231ec:	e7dc      	b.n	80231a8 <_dtoa_r+0x274>
 80231ee:	9b03      	ldr	r3, [sp, #12]
 80231f0:	9a08      	ldr	r2, [sp, #32]
 80231f2:	69db      	ldr	r3, [r3, #28]
 80231f4:	601a      	str	r2, [r3, #0]
 80231f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231f8:	2b0e      	cmp	r3, #14
 80231fa:	d900      	bls.n	80231fe <_dtoa_r+0x2ca>
 80231fc:	e0d9      	b.n	80233b2 <_dtoa_r+0x47e>
 80231fe:	2c00      	cmp	r4, #0
 8023200:	d100      	bne.n	8023204 <_dtoa_r+0x2d0>
 8023202:	e0d6      	b.n	80233b2 <_dtoa_r+0x47e>
 8023204:	9b04      	ldr	r3, [sp, #16]
 8023206:	2b00      	cmp	r3, #0
 8023208:	dd64      	ble.n	80232d4 <_dtoa_r+0x3a0>
 802320a:	210f      	movs	r1, #15
 802320c:	9a04      	ldr	r2, [sp, #16]
 802320e:	4b2b      	ldr	r3, [pc, #172]	@ (80232bc <_dtoa_r+0x388>)
 8023210:	400a      	ands	r2, r1
 8023212:	00d2      	lsls	r2, r2, #3
 8023214:	189b      	adds	r3, r3, r2
 8023216:	681e      	ldr	r6, [r3, #0]
 8023218:	685f      	ldr	r7, [r3, #4]
 802321a:	9b04      	ldr	r3, [sp, #16]
 802321c:	2402      	movs	r4, #2
 802321e:	111d      	asrs	r5, r3, #4
 8023220:	05db      	lsls	r3, r3, #23
 8023222:	d50a      	bpl.n	802323a <_dtoa_r+0x306>
 8023224:	4b2a      	ldr	r3, [pc, #168]	@ (80232d0 <_dtoa_r+0x39c>)
 8023226:	400d      	ands	r5, r1
 8023228:	6a1a      	ldr	r2, [r3, #32]
 802322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802322c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802322e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023230:	f7de fdc0 	bl	8001db4 <__aeabi_ddiv>
 8023234:	900a      	str	r0, [sp, #40]	@ 0x28
 8023236:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023238:	3401      	adds	r4, #1
 802323a:	4b25      	ldr	r3, [pc, #148]	@ (80232d0 <_dtoa_r+0x39c>)
 802323c:	930c      	str	r3, [sp, #48]	@ 0x30
 802323e:	2d00      	cmp	r5, #0
 8023240:	d108      	bne.n	8023254 <_dtoa_r+0x320>
 8023242:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023246:	0032      	movs	r2, r6
 8023248:	003b      	movs	r3, r7
 802324a:	f7de fdb3 	bl	8001db4 <__aeabi_ddiv>
 802324e:	900a      	str	r0, [sp, #40]	@ 0x28
 8023250:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023252:	e05a      	b.n	802330a <_dtoa_r+0x3d6>
 8023254:	2301      	movs	r3, #1
 8023256:	421d      	tst	r5, r3
 8023258:	d009      	beq.n	802326e <_dtoa_r+0x33a>
 802325a:	18e4      	adds	r4, r4, r3
 802325c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802325e:	0030      	movs	r0, r6
 8023260:	681a      	ldr	r2, [r3, #0]
 8023262:	685b      	ldr	r3, [r3, #4]
 8023264:	0039      	movs	r1, r7
 8023266:	f7df f9e9 	bl	800263c <__aeabi_dmul>
 802326a:	0006      	movs	r6, r0
 802326c:	000f      	movs	r7, r1
 802326e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023270:	106d      	asrs	r5, r5, #1
 8023272:	3308      	adds	r3, #8
 8023274:	e7e2      	b.n	802323c <_dtoa_r+0x308>
 8023276:	46c0      	nop			@ (mov r8, r8)
 8023278:	0802987a 	.word	0x0802987a
 802327c:	08029891 	.word	0x08029891
 8023280:	7ff00000 	.word	0x7ff00000
 8023284:	0000270f 	.word	0x0000270f
 8023288:	08029876 	.word	0x08029876
 802328c:	08029879 	.word	0x08029879
 8023290:	08029842 	.word	0x08029842
 8023294:	08029841 	.word	0x08029841
 8023298:	3ff00000 	.word	0x3ff00000
 802329c:	fffffc01 	.word	0xfffffc01
 80232a0:	3ff80000 	.word	0x3ff80000
 80232a4:	636f4361 	.word	0x636f4361
 80232a8:	3fd287a7 	.word	0x3fd287a7
 80232ac:	8b60c8b3 	.word	0x8b60c8b3
 80232b0:	3fc68a28 	.word	0x3fc68a28
 80232b4:	509f79fb 	.word	0x509f79fb
 80232b8:	3fd34413 	.word	0x3fd34413
 80232bc:	080299e8 	.word	0x080299e8
 80232c0:	00000432 	.word	0x00000432
 80232c4:	00000412 	.word	0x00000412
 80232c8:	fe100000 	.word	0xfe100000
 80232cc:	080298e9 	.word	0x080298e9
 80232d0:	080299c0 	.word	0x080299c0
 80232d4:	9b04      	ldr	r3, [sp, #16]
 80232d6:	2402      	movs	r4, #2
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d016      	beq.n	802330a <_dtoa_r+0x3d6>
 80232dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80232de:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80232e0:	220f      	movs	r2, #15
 80232e2:	425d      	negs	r5, r3
 80232e4:	402a      	ands	r2, r5
 80232e6:	4bd7      	ldr	r3, [pc, #860]	@ (8023644 <_dtoa_r+0x710>)
 80232e8:	00d2      	lsls	r2, r2, #3
 80232ea:	189b      	adds	r3, r3, r2
 80232ec:	681a      	ldr	r2, [r3, #0]
 80232ee:	685b      	ldr	r3, [r3, #4]
 80232f0:	f7df f9a4 	bl	800263c <__aeabi_dmul>
 80232f4:	2701      	movs	r7, #1
 80232f6:	2300      	movs	r3, #0
 80232f8:	900a      	str	r0, [sp, #40]	@ 0x28
 80232fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80232fc:	4ed2      	ldr	r6, [pc, #840]	@ (8023648 <_dtoa_r+0x714>)
 80232fe:	112d      	asrs	r5, r5, #4
 8023300:	2d00      	cmp	r5, #0
 8023302:	d000      	beq.n	8023306 <_dtoa_r+0x3d2>
 8023304:	e0ba      	b.n	802347c <_dtoa_r+0x548>
 8023306:	2b00      	cmp	r3, #0
 8023308:	d1a1      	bne.n	802324e <_dtoa_r+0x31a>
 802330a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802330c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802330e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023310:	2b00      	cmp	r3, #0
 8023312:	d100      	bne.n	8023316 <_dtoa_r+0x3e2>
 8023314:	e0bd      	b.n	8023492 <_dtoa_r+0x55e>
 8023316:	2200      	movs	r2, #0
 8023318:	0030      	movs	r0, r6
 802331a:	0039      	movs	r1, r7
 802331c:	4bcb      	ldr	r3, [pc, #812]	@ (802364c <_dtoa_r+0x718>)
 802331e:	f7dd f8cd 	bl	80004bc <__aeabi_dcmplt>
 8023322:	2800      	cmp	r0, #0
 8023324:	d100      	bne.n	8023328 <_dtoa_r+0x3f4>
 8023326:	e0b4      	b.n	8023492 <_dtoa_r+0x55e>
 8023328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802332a:	2b00      	cmp	r3, #0
 802332c:	d100      	bne.n	8023330 <_dtoa_r+0x3fc>
 802332e:	e0b0      	b.n	8023492 <_dtoa_r+0x55e>
 8023330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023332:	2b00      	cmp	r3, #0
 8023334:	dd39      	ble.n	80233aa <_dtoa_r+0x476>
 8023336:	9b04      	ldr	r3, [sp, #16]
 8023338:	2200      	movs	r2, #0
 802333a:	3b01      	subs	r3, #1
 802333c:	930c      	str	r3, [sp, #48]	@ 0x30
 802333e:	0030      	movs	r0, r6
 8023340:	4bc3      	ldr	r3, [pc, #780]	@ (8023650 <_dtoa_r+0x71c>)
 8023342:	0039      	movs	r1, r7
 8023344:	f7df f97a 	bl	800263c <__aeabi_dmul>
 8023348:	900a      	str	r0, [sp, #40]	@ 0x28
 802334a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802334c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802334e:	3401      	adds	r4, #1
 8023350:	0020      	movs	r0, r4
 8023352:	9311      	str	r3, [sp, #68]	@ 0x44
 8023354:	f7e0 f834 	bl	80033c0 <__aeabi_i2d>
 8023358:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802335a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802335c:	f7df f96e 	bl	800263c <__aeabi_dmul>
 8023360:	4bbc      	ldr	r3, [pc, #752]	@ (8023654 <_dtoa_r+0x720>)
 8023362:	2200      	movs	r2, #0
 8023364:	f7de f9c2 	bl	80016ec <__aeabi_dadd>
 8023368:	4bbb      	ldr	r3, [pc, #748]	@ (8023658 <_dtoa_r+0x724>)
 802336a:	0006      	movs	r6, r0
 802336c:	18cf      	adds	r7, r1, r3
 802336e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023370:	2b00      	cmp	r3, #0
 8023372:	d000      	beq.n	8023376 <_dtoa_r+0x442>
 8023374:	e091      	b.n	802349a <_dtoa_r+0x566>
 8023376:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802337a:	2200      	movs	r2, #0
 802337c:	4bb7      	ldr	r3, [pc, #732]	@ (802365c <_dtoa_r+0x728>)
 802337e:	f7df fc25 	bl	8002bcc <__aeabi_dsub>
 8023382:	0032      	movs	r2, r6
 8023384:	003b      	movs	r3, r7
 8023386:	0004      	movs	r4, r0
 8023388:	000d      	movs	r5, r1
 802338a:	f7dd f8ab 	bl	80004e4 <__aeabi_dcmpgt>
 802338e:	2800      	cmp	r0, #0
 8023390:	d000      	beq.n	8023394 <_dtoa_r+0x460>
 8023392:	e29d      	b.n	80238d0 <_dtoa_r+0x99c>
 8023394:	2180      	movs	r1, #128	@ 0x80
 8023396:	0609      	lsls	r1, r1, #24
 8023398:	187b      	adds	r3, r7, r1
 802339a:	0032      	movs	r2, r6
 802339c:	0020      	movs	r0, r4
 802339e:	0029      	movs	r1, r5
 80233a0:	f7dd f88c 	bl	80004bc <__aeabi_dcmplt>
 80233a4:	2800      	cmp	r0, #0
 80233a6:	d000      	beq.n	80233aa <_dtoa_r+0x476>
 80233a8:	e130      	b.n	802360c <_dtoa_r+0x6d8>
 80233aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80233ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80233ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80233b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80233b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80233b4:	2b00      	cmp	r3, #0
 80233b6:	da00      	bge.n	80233ba <_dtoa_r+0x486>
 80233b8:	e177      	b.n	80236aa <_dtoa_r+0x776>
 80233ba:	9a04      	ldr	r2, [sp, #16]
 80233bc:	2a0e      	cmp	r2, #14
 80233be:	dd00      	ble.n	80233c2 <_dtoa_r+0x48e>
 80233c0:	e173      	b.n	80236aa <_dtoa_r+0x776>
 80233c2:	4ba0      	ldr	r3, [pc, #640]	@ (8023644 <_dtoa_r+0x710>)
 80233c4:	00d2      	lsls	r2, r2, #3
 80233c6:	189b      	adds	r3, r3, r2
 80233c8:	685c      	ldr	r4, [r3, #4]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	9306      	str	r3, [sp, #24]
 80233ce:	9407      	str	r4, [sp, #28]
 80233d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80233d2:	2b00      	cmp	r3, #0
 80233d4:	da03      	bge.n	80233de <_dtoa_r+0x4aa>
 80233d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233d8:	2b00      	cmp	r3, #0
 80233da:	dc00      	bgt.n	80233de <_dtoa_r+0x4aa>
 80233dc:	e106      	b.n	80235ec <_dtoa_r+0x6b8>
 80233de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80233e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80233e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80233e4:	9d08      	ldr	r5, [sp, #32]
 80233e6:	3b01      	subs	r3, #1
 80233e8:	195b      	adds	r3, r3, r5
 80233ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80233ec:	9a06      	ldr	r2, [sp, #24]
 80233ee:	9b07      	ldr	r3, [sp, #28]
 80233f0:	0030      	movs	r0, r6
 80233f2:	0039      	movs	r1, r7
 80233f4:	f7de fcde 	bl	8001db4 <__aeabi_ddiv>
 80233f8:	f7df ffa6 	bl	8003348 <__aeabi_d2iz>
 80233fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80233fe:	f7df ffdf 	bl	80033c0 <__aeabi_i2d>
 8023402:	9a06      	ldr	r2, [sp, #24]
 8023404:	9b07      	ldr	r3, [sp, #28]
 8023406:	f7df f919 	bl	800263c <__aeabi_dmul>
 802340a:	0002      	movs	r2, r0
 802340c:	000b      	movs	r3, r1
 802340e:	0030      	movs	r0, r6
 8023410:	0039      	movs	r1, r7
 8023412:	f7df fbdb 	bl	8002bcc <__aeabi_dsub>
 8023416:	002b      	movs	r3, r5
 8023418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802341a:	3501      	adds	r5, #1
 802341c:	3230      	adds	r2, #48	@ 0x30
 802341e:	701a      	strb	r2, [r3, #0]
 8023420:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023422:	002c      	movs	r4, r5
 8023424:	429a      	cmp	r2, r3
 8023426:	d000      	beq.n	802342a <_dtoa_r+0x4f6>
 8023428:	e131      	b.n	802368e <_dtoa_r+0x75a>
 802342a:	0002      	movs	r2, r0
 802342c:	000b      	movs	r3, r1
 802342e:	f7de f95d 	bl	80016ec <__aeabi_dadd>
 8023432:	9a06      	ldr	r2, [sp, #24]
 8023434:	9b07      	ldr	r3, [sp, #28]
 8023436:	0006      	movs	r6, r0
 8023438:	000f      	movs	r7, r1
 802343a:	f7dd f853 	bl	80004e4 <__aeabi_dcmpgt>
 802343e:	2800      	cmp	r0, #0
 8023440:	d000      	beq.n	8023444 <_dtoa_r+0x510>
 8023442:	e10f      	b.n	8023664 <_dtoa_r+0x730>
 8023444:	9a06      	ldr	r2, [sp, #24]
 8023446:	9b07      	ldr	r3, [sp, #28]
 8023448:	0030      	movs	r0, r6
 802344a:	0039      	movs	r1, r7
 802344c:	f7dd f830 	bl	80004b0 <__aeabi_dcmpeq>
 8023450:	2800      	cmp	r0, #0
 8023452:	d003      	beq.n	802345c <_dtoa_r+0x528>
 8023454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023456:	07dd      	lsls	r5, r3, #31
 8023458:	d500      	bpl.n	802345c <_dtoa_r+0x528>
 802345a:	e103      	b.n	8023664 <_dtoa_r+0x730>
 802345c:	9905      	ldr	r1, [sp, #20]
 802345e:	9803      	ldr	r0, [sp, #12]
 8023460:	f001 f812 	bl	8024488 <_Bfree>
 8023464:	2300      	movs	r3, #0
 8023466:	7023      	strb	r3, [r4, #0]
 8023468:	9b04      	ldr	r3, [sp, #16]
 802346a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802346c:	3301      	adds	r3, #1
 802346e:	6013      	str	r3, [r2, #0]
 8023470:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023472:	2b00      	cmp	r3, #0
 8023474:	d100      	bne.n	8023478 <_dtoa_r+0x544>
 8023476:	e5a7      	b.n	8022fc8 <_dtoa_r+0x94>
 8023478:	601c      	str	r4, [r3, #0]
 802347a:	e5a5      	b.n	8022fc8 <_dtoa_r+0x94>
 802347c:	423d      	tst	r5, r7
 802347e:	d005      	beq.n	802348c <_dtoa_r+0x558>
 8023480:	6832      	ldr	r2, [r6, #0]
 8023482:	6873      	ldr	r3, [r6, #4]
 8023484:	f7df f8da 	bl	800263c <__aeabi_dmul>
 8023488:	003b      	movs	r3, r7
 802348a:	3401      	adds	r4, #1
 802348c:	106d      	asrs	r5, r5, #1
 802348e:	3608      	adds	r6, #8
 8023490:	e736      	b.n	8023300 <_dtoa_r+0x3cc>
 8023492:	9b04      	ldr	r3, [sp, #16]
 8023494:	930c      	str	r3, [sp, #48]	@ 0x30
 8023496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023498:	e75a      	b.n	8023350 <_dtoa_r+0x41c>
 802349a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802349c:	4b69      	ldr	r3, [pc, #420]	@ (8023644 <_dtoa_r+0x710>)
 802349e:	3a01      	subs	r2, #1
 80234a0:	00d2      	lsls	r2, r2, #3
 80234a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80234a4:	189b      	adds	r3, r3, r2
 80234a6:	681a      	ldr	r2, [r3, #0]
 80234a8:	685b      	ldr	r3, [r3, #4]
 80234aa:	2900      	cmp	r1, #0
 80234ac:	d04c      	beq.n	8023548 <_dtoa_r+0x614>
 80234ae:	2000      	movs	r0, #0
 80234b0:	496b      	ldr	r1, [pc, #428]	@ (8023660 <_dtoa_r+0x72c>)
 80234b2:	f7de fc7f 	bl	8001db4 <__aeabi_ddiv>
 80234b6:	0032      	movs	r2, r6
 80234b8:	003b      	movs	r3, r7
 80234ba:	f7df fb87 	bl	8002bcc <__aeabi_dsub>
 80234be:	9a08      	ldr	r2, [sp, #32]
 80234c0:	0006      	movs	r6, r0
 80234c2:	4694      	mov	ip, r2
 80234c4:	000f      	movs	r7, r1
 80234c6:	9b08      	ldr	r3, [sp, #32]
 80234c8:	9316      	str	r3, [sp, #88]	@ 0x58
 80234ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80234cc:	4463      	add	r3, ip
 80234ce:	9311      	str	r3, [sp, #68]	@ 0x44
 80234d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80234d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80234d4:	f7df ff38 	bl	8003348 <__aeabi_d2iz>
 80234d8:	0005      	movs	r5, r0
 80234da:	f7df ff71 	bl	80033c0 <__aeabi_i2d>
 80234de:	0002      	movs	r2, r0
 80234e0:	000b      	movs	r3, r1
 80234e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80234e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80234e6:	f7df fb71 	bl	8002bcc <__aeabi_dsub>
 80234ea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80234ec:	3530      	adds	r5, #48	@ 0x30
 80234ee:	1c5c      	adds	r4, r3, #1
 80234f0:	701d      	strb	r5, [r3, #0]
 80234f2:	0032      	movs	r2, r6
 80234f4:	003b      	movs	r3, r7
 80234f6:	900a      	str	r0, [sp, #40]	@ 0x28
 80234f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80234fa:	f7dc ffdf 	bl	80004bc <__aeabi_dcmplt>
 80234fe:	2800      	cmp	r0, #0
 8023500:	d16a      	bne.n	80235d8 <_dtoa_r+0x6a4>
 8023502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023506:	2000      	movs	r0, #0
 8023508:	4950      	ldr	r1, [pc, #320]	@ (802364c <_dtoa_r+0x718>)
 802350a:	f7df fb5f 	bl	8002bcc <__aeabi_dsub>
 802350e:	0032      	movs	r2, r6
 8023510:	003b      	movs	r3, r7
 8023512:	f7dc ffd3 	bl	80004bc <__aeabi_dcmplt>
 8023516:	2800      	cmp	r0, #0
 8023518:	d000      	beq.n	802351c <_dtoa_r+0x5e8>
 802351a:	e0a5      	b.n	8023668 <_dtoa_r+0x734>
 802351c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802351e:	42a3      	cmp	r3, r4
 8023520:	d100      	bne.n	8023524 <_dtoa_r+0x5f0>
 8023522:	e742      	b.n	80233aa <_dtoa_r+0x476>
 8023524:	2200      	movs	r2, #0
 8023526:	0030      	movs	r0, r6
 8023528:	0039      	movs	r1, r7
 802352a:	4b49      	ldr	r3, [pc, #292]	@ (8023650 <_dtoa_r+0x71c>)
 802352c:	f7df f886 	bl	800263c <__aeabi_dmul>
 8023530:	2200      	movs	r2, #0
 8023532:	0006      	movs	r6, r0
 8023534:	000f      	movs	r7, r1
 8023536:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023538:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802353a:	4b45      	ldr	r3, [pc, #276]	@ (8023650 <_dtoa_r+0x71c>)
 802353c:	f7df f87e 	bl	800263c <__aeabi_dmul>
 8023540:	9416      	str	r4, [sp, #88]	@ 0x58
 8023542:	900a      	str	r0, [sp, #40]	@ 0x28
 8023544:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023546:	e7c3      	b.n	80234d0 <_dtoa_r+0x59c>
 8023548:	0030      	movs	r0, r6
 802354a:	0039      	movs	r1, r7
 802354c:	f7df f876 	bl	800263c <__aeabi_dmul>
 8023550:	9d08      	ldr	r5, [sp, #32]
 8023552:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8023554:	002b      	movs	r3, r5
 8023556:	4694      	mov	ip, r2
 8023558:	9016      	str	r0, [sp, #88]	@ 0x58
 802355a:	9117      	str	r1, [sp, #92]	@ 0x5c
 802355c:	4463      	add	r3, ip
 802355e:	9319      	str	r3, [sp, #100]	@ 0x64
 8023560:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023562:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023564:	f7df fef0 	bl	8003348 <__aeabi_d2iz>
 8023568:	0004      	movs	r4, r0
 802356a:	f7df ff29 	bl	80033c0 <__aeabi_i2d>
 802356e:	000b      	movs	r3, r1
 8023570:	0002      	movs	r2, r0
 8023572:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023574:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023576:	f7df fb29 	bl	8002bcc <__aeabi_dsub>
 802357a:	3430      	adds	r4, #48	@ 0x30
 802357c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802357e:	702c      	strb	r4, [r5, #0]
 8023580:	3501      	adds	r5, #1
 8023582:	0006      	movs	r6, r0
 8023584:	000f      	movs	r7, r1
 8023586:	42ab      	cmp	r3, r5
 8023588:	d129      	bne.n	80235de <_dtoa_r+0x6aa>
 802358a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802358c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802358e:	9b08      	ldr	r3, [sp, #32]
 8023590:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8023592:	469c      	mov	ip, r3
 8023594:	2200      	movs	r2, #0
 8023596:	4b32      	ldr	r3, [pc, #200]	@ (8023660 <_dtoa_r+0x72c>)
 8023598:	4464      	add	r4, ip
 802359a:	f7de f8a7 	bl	80016ec <__aeabi_dadd>
 802359e:	0002      	movs	r2, r0
 80235a0:	000b      	movs	r3, r1
 80235a2:	0030      	movs	r0, r6
 80235a4:	0039      	movs	r1, r7
 80235a6:	f7dc ff9d 	bl	80004e4 <__aeabi_dcmpgt>
 80235aa:	2800      	cmp	r0, #0
 80235ac:	d15c      	bne.n	8023668 <_dtoa_r+0x734>
 80235ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80235b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80235b2:	2000      	movs	r0, #0
 80235b4:	492a      	ldr	r1, [pc, #168]	@ (8023660 <_dtoa_r+0x72c>)
 80235b6:	f7df fb09 	bl	8002bcc <__aeabi_dsub>
 80235ba:	0002      	movs	r2, r0
 80235bc:	000b      	movs	r3, r1
 80235be:	0030      	movs	r0, r6
 80235c0:	0039      	movs	r1, r7
 80235c2:	f7dc ff7b 	bl	80004bc <__aeabi_dcmplt>
 80235c6:	2800      	cmp	r0, #0
 80235c8:	d100      	bne.n	80235cc <_dtoa_r+0x698>
 80235ca:	e6ee      	b.n	80233aa <_dtoa_r+0x476>
 80235cc:	0023      	movs	r3, r4
 80235ce:	3c01      	subs	r4, #1
 80235d0:	7822      	ldrb	r2, [r4, #0]
 80235d2:	2a30      	cmp	r2, #48	@ 0x30
 80235d4:	d0fa      	beq.n	80235cc <_dtoa_r+0x698>
 80235d6:	001c      	movs	r4, r3
 80235d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80235da:	9304      	str	r3, [sp, #16]
 80235dc:	e73e      	b.n	802345c <_dtoa_r+0x528>
 80235de:	2200      	movs	r2, #0
 80235e0:	4b1b      	ldr	r3, [pc, #108]	@ (8023650 <_dtoa_r+0x71c>)
 80235e2:	f7df f82b 	bl	800263c <__aeabi_dmul>
 80235e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80235e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80235ea:	e7b9      	b.n	8023560 <_dtoa_r+0x62c>
 80235ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235ee:	2b00      	cmp	r3, #0
 80235f0:	d10c      	bne.n	802360c <_dtoa_r+0x6d8>
 80235f2:	9806      	ldr	r0, [sp, #24]
 80235f4:	9907      	ldr	r1, [sp, #28]
 80235f6:	2200      	movs	r2, #0
 80235f8:	4b18      	ldr	r3, [pc, #96]	@ (802365c <_dtoa_r+0x728>)
 80235fa:	f7df f81f 	bl	800263c <__aeabi_dmul>
 80235fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023602:	f7dc ff79 	bl	80004f8 <__aeabi_dcmpge>
 8023606:	2800      	cmp	r0, #0
 8023608:	d100      	bne.n	802360c <_dtoa_r+0x6d8>
 802360a:	e164      	b.n	80238d6 <_dtoa_r+0x9a2>
 802360c:	2600      	movs	r6, #0
 802360e:	0037      	movs	r7, r6
 8023610:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023612:	9c08      	ldr	r4, [sp, #32]
 8023614:	43db      	mvns	r3, r3
 8023616:	930c      	str	r3, [sp, #48]	@ 0x30
 8023618:	2300      	movs	r3, #0
 802361a:	9304      	str	r3, [sp, #16]
 802361c:	0031      	movs	r1, r6
 802361e:	9803      	ldr	r0, [sp, #12]
 8023620:	f000 ff32 	bl	8024488 <_Bfree>
 8023624:	2f00      	cmp	r7, #0
 8023626:	d0d7      	beq.n	80235d8 <_dtoa_r+0x6a4>
 8023628:	9b04      	ldr	r3, [sp, #16]
 802362a:	2b00      	cmp	r3, #0
 802362c:	d005      	beq.n	802363a <_dtoa_r+0x706>
 802362e:	42bb      	cmp	r3, r7
 8023630:	d003      	beq.n	802363a <_dtoa_r+0x706>
 8023632:	0019      	movs	r1, r3
 8023634:	9803      	ldr	r0, [sp, #12]
 8023636:	f000 ff27 	bl	8024488 <_Bfree>
 802363a:	0039      	movs	r1, r7
 802363c:	9803      	ldr	r0, [sp, #12]
 802363e:	f000 ff23 	bl	8024488 <_Bfree>
 8023642:	e7c9      	b.n	80235d8 <_dtoa_r+0x6a4>
 8023644:	080299e8 	.word	0x080299e8
 8023648:	080299c0 	.word	0x080299c0
 802364c:	3ff00000 	.word	0x3ff00000
 8023650:	40240000 	.word	0x40240000
 8023654:	401c0000 	.word	0x401c0000
 8023658:	fcc00000 	.word	0xfcc00000
 802365c:	40140000 	.word	0x40140000
 8023660:	3fe00000 	.word	0x3fe00000
 8023664:	9b04      	ldr	r3, [sp, #16]
 8023666:	930c      	str	r3, [sp, #48]	@ 0x30
 8023668:	0023      	movs	r3, r4
 802366a:	001c      	movs	r4, r3
 802366c:	3b01      	subs	r3, #1
 802366e:	781a      	ldrb	r2, [r3, #0]
 8023670:	2a39      	cmp	r2, #57	@ 0x39
 8023672:	d108      	bne.n	8023686 <_dtoa_r+0x752>
 8023674:	9a08      	ldr	r2, [sp, #32]
 8023676:	429a      	cmp	r2, r3
 8023678:	d1f7      	bne.n	802366a <_dtoa_r+0x736>
 802367a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802367c:	9908      	ldr	r1, [sp, #32]
 802367e:	3201      	adds	r2, #1
 8023680:	920c      	str	r2, [sp, #48]	@ 0x30
 8023682:	2230      	movs	r2, #48	@ 0x30
 8023684:	700a      	strb	r2, [r1, #0]
 8023686:	781a      	ldrb	r2, [r3, #0]
 8023688:	3201      	adds	r2, #1
 802368a:	701a      	strb	r2, [r3, #0]
 802368c:	e7a4      	b.n	80235d8 <_dtoa_r+0x6a4>
 802368e:	2200      	movs	r2, #0
 8023690:	4bc6      	ldr	r3, [pc, #792]	@ (80239ac <_dtoa_r+0xa78>)
 8023692:	f7de ffd3 	bl	800263c <__aeabi_dmul>
 8023696:	2200      	movs	r2, #0
 8023698:	2300      	movs	r3, #0
 802369a:	0006      	movs	r6, r0
 802369c:	000f      	movs	r7, r1
 802369e:	f7dc ff07 	bl	80004b0 <__aeabi_dcmpeq>
 80236a2:	2800      	cmp	r0, #0
 80236a4:	d100      	bne.n	80236a8 <_dtoa_r+0x774>
 80236a6:	e6a1      	b.n	80233ec <_dtoa_r+0x4b8>
 80236a8:	e6d8      	b.n	802345c <_dtoa_r+0x528>
 80236aa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80236ac:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80236ae:	9c06      	ldr	r4, [sp, #24]
 80236b0:	2f00      	cmp	r7, #0
 80236b2:	d014      	beq.n	80236de <_dtoa_r+0x7aa>
 80236b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80236b6:	2a01      	cmp	r2, #1
 80236b8:	dd00      	ble.n	80236bc <_dtoa_r+0x788>
 80236ba:	e0c8      	b.n	802384e <_dtoa_r+0x91a>
 80236bc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80236be:	2a00      	cmp	r2, #0
 80236c0:	d100      	bne.n	80236c4 <_dtoa_r+0x790>
 80236c2:	e0be      	b.n	8023842 <_dtoa_r+0x90e>
 80236c4:	4aba      	ldr	r2, [pc, #744]	@ (80239b0 <_dtoa_r+0xa7c>)
 80236c6:	189b      	adds	r3, r3, r2
 80236c8:	9a06      	ldr	r2, [sp, #24]
 80236ca:	2101      	movs	r1, #1
 80236cc:	18d2      	adds	r2, r2, r3
 80236ce:	9206      	str	r2, [sp, #24]
 80236d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80236d2:	9803      	ldr	r0, [sp, #12]
 80236d4:	18d3      	adds	r3, r2, r3
 80236d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80236d8:	f000 ffda 	bl	8024690 <__i2b>
 80236dc:	0007      	movs	r7, r0
 80236de:	2c00      	cmp	r4, #0
 80236e0:	d00e      	beq.n	8023700 <_dtoa_r+0x7cc>
 80236e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80236e4:	2b00      	cmp	r3, #0
 80236e6:	dd0b      	ble.n	8023700 <_dtoa_r+0x7cc>
 80236e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80236ea:	0023      	movs	r3, r4
 80236ec:	4294      	cmp	r4, r2
 80236ee:	dd00      	ble.n	80236f2 <_dtoa_r+0x7be>
 80236f0:	0013      	movs	r3, r2
 80236f2:	9a06      	ldr	r2, [sp, #24]
 80236f4:	1ae4      	subs	r4, r4, r3
 80236f6:	1ad2      	subs	r2, r2, r3
 80236f8:	9206      	str	r2, [sp, #24]
 80236fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80236fc:	1ad3      	subs	r3, r2, r3
 80236fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8023700:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023702:	2b00      	cmp	r3, #0
 8023704:	d01f      	beq.n	8023746 <_dtoa_r+0x812>
 8023706:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023708:	2b00      	cmp	r3, #0
 802370a:	d100      	bne.n	802370e <_dtoa_r+0x7da>
 802370c:	e0b5      	b.n	802387a <_dtoa_r+0x946>
 802370e:	2d00      	cmp	r5, #0
 8023710:	d010      	beq.n	8023734 <_dtoa_r+0x800>
 8023712:	0039      	movs	r1, r7
 8023714:	002a      	movs	r2, r5
 8023716:	9803      	ldr	r0, [sp, #12]
 8023718:	f001 f884 	bl	8024824 <__pow5mult>
 802371c:	9a05      	ldr	r2, [sp, #20]
 802371e:	0001      	movs	r1, r0
 8023720:	0007      	movs	r7, r0
 8023722:	9803      	ldr	r0, [sp, #12]
 8023724:	f000 ffcc 	bl	80246c0 <__multiply>
 8023728:	0006      	movs	r6, r0
 802372a:	9905      	ldr	r1, [sp, #20]
 802372c:	9803      	ldr	r0, [sp, #12]
 802372e:	f000 feab 	bl	8024488 <_Bfree>
 8023732:	9605      	str	r6, [sp, #20]
 8023734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023736:	1b5a      	subs	r2, r3, r5
 8023738:	42ab      	cmp	r3, r5
 802373a:	d004      	beq.n	8023746 <_dtoa_r+0x812>
 802373c:	9905      	ldr	r1, [sp, #20]
 802373e:	9803      	ldr	r0, [sp, #12]
 8023740:	f001 f870 	bl	8024824 <__pow5mult>
 8023744:	9005      	str	r0, [sp, #20]
 8023746:	2101      	movs	r1, #1
 8023748:	9803      	ldr	r0, [sp, #12]
 802374a:	f000 ffa1 	bl	8024690 <__i2b>
 802374e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023750:	0006      	movs	r6, r0
 8023752:	2b00      	cmp	r3, #0
 8023754:	d100      	bne.n	8023758 <_dtoa_r+0x824>
 8023756:	e1bc      	b.n	8023ad2 <_dtoa_r+0xb9e>
 8023758:	001a      	movs	r2, r3
 802375a:	0001      	movs	r1, r0
 802375c:	9803      	ldr	r0, [sp, #12]
 802375e:	f001 f861 	bl	8024824 <__pow5mult>
 8023762:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023764:	0006      	movs	r6, r0
 8023766:	2500      	movs	r5, #0
 8023768:	2b01      	cmp	r3, #1
 802376a:	dc16      	bgt.n	802379a <_dtoa_r+0x866>
 802376c:	2500      	movs	r5, #0
 802376e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023770:	42ab      	cmp	r3, r5
 8023772:	d10e      	bne.n	8023792 <_dtoa_r+0x85e>
 8023774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023776:	031b      	lsls	r3, r3, #12
 8023778:	42ab      	cmp	r3, r5
 802377a:	d10a      	bne.n	8023792 <_dtoa_r+0x85e>
 802377c:	4b8d      	ldr	r3, [pc, #564]	@ (80239b4 <_dtoa_r+0xa80>)
 802377e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023780:	4213      	tst	r3, r2
 8023782:	d006      	beq.n	8023792 <_dtoa_r+0x85e>
 8023784:	9b06      	ldr	r3, [sp, #24]
 8023786:	3501      	adds	r5, #1
 8023788:	3301      	adds	r3, #1
 802378a:	9306      	str	r3, [sp, #24]
 802378c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802378e:	3301      	adds	r3, #1
 8023790:	930d      	str	r3, [sp, #52]	@ 0x34
 8023792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023794:	2001      	movs	r0, #1
 8023796:	2b00      	cmp	r3, #0
 8023798:	d008      	beq.n	80237ac <_dtoa_r+0x878>
 802379a:	6933      	ldr	r3, [r6, #16]
 802379c:	3303      	adds	r3, #3
 802379e:	009b      	lsls	r3, r3, #2
 80237a0:	18f3      	adds	r3, r6, r3
 80237a2:	6858      	ldr	r0, [r3, #4]
 80237a4:	f000 ff24 	bl	80245f0 <__hi0bits>
 80237a8:	2320      	movs	r3, #32
 80237aa:	1a18      	subs	r0, r3, r0
 80237ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80237ae:	1818      	adds	r0, r3, r0
 80237b0:	0002      	movs	r2, r0
 80237b2:	231f      	movs	r3, #31
 80237b4:	401a      	ands	r2, r3
 80237b6:	4218      	tst	r0, r3
 80237b8:	d065      	beq.n	8023886 <_dtoa_r+0x952>
 80237ba:	3301      	adds	r3, #1
 80237bc:	1a9b      	subs	r3, r3, r2
 80237be:	2b04      	cmp	r3, #4
 80237c0:	dd5d      	ble.n	802387e <_dtoa_r+0x94a>
 80237c2:	231c      	movs	r3, #28
 80237c4:	1a9b      	subs	r3, r3, r2
 80237c6:	9a06      	ldr	r2, [sp, #24]
 80237c8:	18e4      	adds	r4, r4, r3
 80237ca:	18d2      	adds	r2, r2, r3
 80237cc:	9206      	str	r2, [sp, #24]
 80237ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80237d0:	18d3      	adds	r3, r2, r3
 80237d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80237d4:	9b06      	ldr	r3, [sp, #24]
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	dd05      	ble.n	80237e6 <_dtoa_r+0x8b2>
 80237da:	001a      	movs	r2, r3
 80237dc:	9905      	ldr	r1, [sp, #20]
 80237de:	9803      	ldr	r0, [sp, #12]
 80237e0:	f001 f87c 	bl	80248dc <__lshift>
 80237e4:	9005      	str	r0, [sp, #20]
 80237e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80237e8:	2b00      	cmp	r3, #0
 80237ea:	dd05      	ble.n	80237f8 <_dtoa_r+0x8c4>
 80237ec:	0031      	movs	r1, r6
 80237ee:	001a      	movs	r2, r3
 80237f0:	9803      	ldr	r0, [sp, #12]
 80237f2:	f001 f873 	bl	80248dc <__lshift>
 80237f6:	0006      	movs	r6, r0
 80237f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	d045      	beq.n	802388a <_dtoa_r+0x956>
 80237fe:	0031      	movs	r1, r6
 8023800:	9805      	ldr	r0, [sp, #20]
 8023802:	f001 f8d7 	bl	80249b4 <__mcmp>
 8023806:	2800      	cmp	r0, #0
 8023808:	da3f      	bge.n	802388a <_dtoa_r+0x956>
 802380a:	9b04      	ldr	r3, [sp, #16]
 802380c:	220a      	movs	r2, #10
 802380e:	3b01      	subs	r3, #1
 8023810:	930c      	str	r3, [sp, #48]	@ 0x30
 8023812:	9905      	ldr	r1, [sp, #20]
 8023814:	2300      	movs	r3, #0
 8023816:	9803      	ldr	r0, [sp, #12]
 8023818:	f000 fe5a 	bl	80244d0 <__multadd>
 802381c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802381e:	9005      	str	r0, [sp, #20]
 8023820:	2b00      	cmp	r3, #0
 8023822:	d100      	bne.n	8023826 <_dtoa_r+0x8f2>
 8023824:	e15c      	b.n	8023ae0 <_dtoa_r+0xbac>
 8023826:	2300      	movs	r3, #0
 8023828:	0039      	movs	r1, r7
 802382a:	220a      	movs	r2, #10
 802382c:	9803      	ldr	r0, [sp, #12]
 802382e:	f000 fe4f 	bl	80244d0 <__multadd>
 8023832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023834:	0007      	movs	r7, r0
 8023836:	2b00      	cmp	r3, #0
 8023838:	dc55      	bgt.n	80238e6 <_dtoa_r+0x9b2>
 802383a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802383c:	2b02      	cmp	r3, #2
 802383e:	dc2d      	bgt.n	802389c <_dtoa_r+0x968>
 8023840:	e051      	b.n	80238e6 <_dtoa_r+0x9b2>
 8023842:	2336      	movs	r3, #54	@ 0x36
 8023844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023846:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8023848:	9c06      	ldr	r4, [sp, #24]
 802384a:	1a9b      	subs	r3, r3, r2
 802384c:	e73c      	b.n	80236c8 <_dtoa_r+0x794>
 802384e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023850:	1e5d      	subs	r5, r3, #1
 8023852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023854:	42ab      	cmp	r3, r5
 8023856:	db08      	blt.n	802386a <_dtoa_r+0x936>
 8023858:	1b5d      	subs	r5, r3, r5
 802385a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802385c:	9c06      	ldr	r4, [sp, #24]
 802385e:	2b00      	cmp	r3, #0
 8023860:	db00      	blt.n	8023864 <_dtoa_r+0x930>
 8023862:	e731      	b.n	80236c8 <_dtoa_r+0x794>
 8023864:	1ae4      	subs	r4, r4, r3
 8023866:	2300      	movs	r3, #0
 8023868:	e72e      	b.n	80236c8 <_dtoa_r+0x794>
 802386a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802386c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802386e:	1aeb      	subs	r3, r5, r3
 8023870:	18d3      	adds	r3, r2, r3
 8023872:	950f      	str	r5, [sp, #60]	@ 0x3c
 8023874:	9314      	str	r3, [sp, #80]	@ 0x50
 8023876:	2500      	movs	r5, #0
 8023878:	e7ef      	b.n	802385a <_dtoa_r+0x926>
 802387a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802387c:	e75e      	b.n	802373c <_dtoa_r+0x808>
 802387e:	2b04      	cmp	r3, #4
 8023880:	d0a8      	beq.n	80237d4 <_dtoa_r+0x8a0>
 8023882:	331c      	adds	r3, #28
 8023884:	e79f      	b.n	80237c6 <_dtoa_r+0x892>
 8023886:	0013      	movs	r3, r2
 8023888:	e7fb      	b.n	8023882 <_dtoa_r+0x94e>
 802388a:	9b04      	ldr	r3, [sp, #16]
 802388c:	930c      	str	r3, [sp, #48]	@ 0x30
 802388e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023890:	930e      	str	r3, [sp, #56]	@ 0x38
 8023892:	2b00      	cmp	r3, #0
 8023894:	dc23      	bgt.n	80238de <_dtoa_r+0x9aa>
 8023896:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023898:	2b02      	cmp	r3, #2
 802389a:	dd20      	ble.n	80238de <_dtoa_r+0x9aa>
 802389c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d000      	beq.n	80238a4 <_dtoa_r+0x970>
 80238a2:	e6b5      	b.n	8023610 <_dtoa_r+0x6dc>
 80238a4:	0031      	movs	r1, r6
 80238a6:	2205      	movs	r2, #5
 80238a8:	9803      	ldr	r0, [sp, #12]
 80238aa:	f000 fe11 	bl	80244d0 <__multadd>
 80238ae:	0006      	movs	r6, r0
 80238b0:	0001      	movs	r1, r0
 80238b2:	9805      	ldr	r0, [sp, #20]
 80238b4:	f001 f87e 	bl	80249b4 <__mcmp>
 80238b8:	2800      	cmp	r0, #0
 80238ba:	dc00      	bgt.n	80238be <_dtoa_r+0x98a>
 80238bc:	e6a8      	b.n	8023610 <_dtoa_r+0x6dc>
 80238be:	9b08      	ldr	r3, [sp, #32]
 80238c0:	9a08      	ldr	r2, [sp, #32]
 80238c2:	1c5c      	adds	r4, r3, #1
 80238c4:	2331      	movs	r3, #49	@ 0x31
 80238c6:	7013      	strb	r3, [r2, #0]
 80238c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80238ca:	3301      	adds	r3, #1
 80238cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80238ce:	e6a3      	b.n	8023618 <_dtoa_r+0x6e4>
 80238d0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80238d2:	0037      	movs	r7, r6
 80238d4:	e7f3      	b.n	80238be <_dtoa_r+0x98a>
 80238d6:	9b04      	ldr	r3, [sp, #16]
 80238d8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80238da:	930c      	str	r3, [sp, #48]	@ 0x30
 80238dc:	e7f9      	b.n	80238d2 <_dtoa_r+0x99e>
 80238de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	d100      	bne.n	80238e6 <_dtoa_r+0x9b2>
 80238e4:	e100      	b.n	8023ae8 <_dtoa_r+0xbb4>
 80238e6:	2c00      	cmp	r4, #0
 80238e8:	dd05      	ble.n	80238f6 <_dtoa_r+0x9c2>
 80238ea:	0039      	movs	r1, r7
 80238ec:	0022      	movs	r2, r4
 80238ee:	9803      	ldr	r0, [sp, #12]
 80238f0:	f000 fff4 	bl	80248dc <__lshift>
 80238f4:	0007      	movs	r7, r0
 80238f6:	0038      	movs	r0, r7
 80238f8:	2d00      	cmp	r5, #0
 80238fa:	d018      	beq.n	802392e <_dtoa_r+0x9fa>
 80238fc:	6879      	ldr	r1, [r7, #4]
 80238fe:	9803      	ldr	r0, [sp, #12]
 8023900:	f000 fd7e 	bl	8024400 <_Balloc>
 8023904:	1e04      	subs	r4, r0, #0
 8023906:	d105      	bne.n	8023914 <_dtoa_r+0x9e0>
 8023908:	0022      	movs	r2, r4
 802390a:	4b2b      	ldr	r3, [pc, #172]	@ (80239b8 <_dtoa_r+0xa84>)
 802390c:	482b      	ldr	r0, [pc, #172]	@ (80239bc <_dtoa_r+0xa88>)
 802390e:	492c      	ldr	r1, [pc, #176]	@ (80239c0 <_dtoa_r+0xa8c>)
 8023910:	f7ff fb25 	bl	8022f5e <_dtoa_r+0x2a>
 8023914:	0039      	movs	r1, r7
 8023916:	693a      	ldr	r2, [r7, #16]
 8023918:	310c      	adds	r1, #12
 802391a:	3202      	adds	r2, #2
 802391c:	0092      	lsls	r2, r2, #2
 802391e:	300c      	adds	r0, #12
 8023920:	f7ff fa6a 	bl	8022df8 <memcpy>
 8023924:	2201      	movs	r2, #1
 8023926:	0021      	movs	r1, r4
 8023928:	9803      	ldr	r0, [sp, #12]
 802392a:	f000 ffd7 	bl	80248dc <__lshift>
 802392e:	9b08      	ldr	r3, [sp, #32]
 8023930:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023932:	9306      	str	r3, [sp, #24]
 8023934:	3b01      	subs	r3, #1
 8023936:	189b      	adds	r3, r3, r2
 8023938:	2201      	movs	r2, #1
 802393a:	9704      	str	r7, [sp, #16]
 802393c:	0007      	movs	r7, r0
 802393e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023942:	4013      	ands	r3, r2
 8023944:	930e      	str	r3, [sp, #56]	@ 0x38
 8023946:	0031      	movs	r1, r6
 8023948:	9805      	ldr	r0, [sp, #20]
 802394a:	f7ff fa65 	bl	8022e18 <quorem>
 802394e:	9904      	ldr	r1, [sp, #16]
 8023950:	0005      	movs	r5, r0
 8023952:	900a      	str	r0, [sp, #40]	@ 0x28
 8023954:	9805      	ldr	r0, [sp, #20]
 8023956:	f001 f82d 	bl	80249b4 <__mcmp>
 802395a:	003a      	movs	r2, r7
 802395c:	900d      	str	r0, [sp, #52]	@ 0x34
 802395e:	0031      	movs	r1, r6
 8023960:	9803      	ldr	r0, [sp, #12]
 8023962:	f001 f843 	bl	80249ec <__mdiff>
 8023966:	2201      	movs	r2, #1
 8023968:	68c3      	ldr	r3, [r0, #12]
 802396a:	0004      	movs	r4, r0
 802396c:	3530      	adds	r5, #48	@ 0x30
 802396e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023970:	2b00      	cmp	r3, #0
 8023972:	d104      	bne.n	802397e <_dtoa_r+0xa4a>
 8023974:	0001      	movs	r1, r0
 8023976:	9805      	ldr	r0, [sp, #20]
 8023978:	f001 f81c 	bl	80249b4 <__mcmp>
 802397c:	9009      	str	r0, [sp, #36]	@ 0x24
 802397e:	0021      	movs	r1, r4
 8023980:	9803      	ldr	r0, [sp, #12]
 8023982:	f000 fd81 	bl	8024488 <_Bfree>
 8023986:	9b06      	ldr	r3, [sp, #24]
 8023988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802398a:	1c5c      	adds	r4, r3, #1
 802398c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802398e:	4313      	orrs	r3, r2
 8023990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023992:	4313      	orrs	r3, r2
 8023994:	d116      	bne.n	80239c4 <_dtoa_r+0xa90>
 8023996:	2d39      	cmp	r5, #57	@ 0x39
 8023998:	d02f      	beq.n	80239fa <_dtoa_r+0xac6>
 802399a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802399c:	2b00      	cmp	r3, #0
 802399e:	dd01      	ble.n	80239a4 <_dtoa_r+0xa70>
 80239a0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80239a2:	3531      	adds	r5, #49	@ 0x31
 80239a4:	9b06      	ldr	r3, [sp, #24]
 80239a6:	701d      	strb	r5, [r3, #0]
 80239a8:	e638      	b.n	802361c <_dtoa_r+0x6e8>
 80239aa:	46c0      	nop			@ (mov r8, r8)
 80239ac:	40240000 	.word	0x40240000
 80239b0:	00000433 	.word	0x00000433
 80239b4:	7ff00000 	.word	0x7ff00000
 80239b8:	080298e9 	.word	0x080298e9
 80239bc:	08029891 	.word	0x08029891
 80239c0:	000002ef 	.word	0x000002ef
 80239c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	db04      	blt.n	80239d4 <_dtoa_r+0xaa0>
 80239ca:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80239cc:	4313      	orrs	r3, r2
 80239ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80239d0:	4313      	orrs	r3, r2
 80239d2:	d11e      	bne.n	8023a12 <_dtoa_r+0xade>
 80239d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	dde4      	ble.n	80239a4 <_dtoa_r+0xa70>
 80239da:	9905      	ldr	r1, [sp, #20]
 80239dc:	2201      	movs	r2, #1
 80239de:	9803      	ldr	r0, [sp, #12]
 80239e0:	f000 ff7c 	bl	80248dc <__lshift>
 80239e4:	0031      	movs	r1, r6
 80239e6:	9005      	str	r0, [sp, #20]
 80239e8:	f000 ffe4 	bl	80249b4 <__mcmp>
 80239ec:	2800      	cmp	r0, #0
 80239ee:	dc02      	bgt.n	80239f6 <_dtoa_r+0xac2>
 80239f0:	d1d8      	bne.n	80239a4 <_dtoa_r+0xa70>
 80239f2:	07eb      	lsls	r3, r5, #31
 80239f4:	d5d6      	bpl.n	80239a4 <_dtoa_r+0xa70>
 80239f6:	2d39      	cmp	r5, #57	@ 0x39
 80239f8:	d1d2      	bne.n	80239a0 <_dtoa_r+0xa6c>
 80239fa:	2339      	movs	r3, #57	@ 0x39
 80239fc:	9a06      	ldr	r2, [sp, #24]
 80239fe:	7013      	strb	r3, [r2, #0]
 8023a00:	0023      	movs	r3, r4
 8023a02:	001c      	movs	r4, r3
 8023a04:	3b01      	subs	r3, #1
 8023a06:	781a      	ldrb	r2, [r3, #0]
 8023a08:	2a39      	cmp	r2, #57	@ 0x39
 8023a0a:	d04f      	beq.n	8023aac <_dtoa_r+0xb78>
 8023a0c:	3201      	adds	r2, #1
 8023a0e:	701a      	strb	r2, [r3, #0]
 8023a10:	e604      	b.n	802361c <_dtoa_r+0x6e8>
 8023a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	dd03      	ble.n	8023a20 <_dtoa_r+0xaec>
 8023a18:	2d39      	cmp	r5, #57	@ 0x39
 8023a1a:	d0ee      	beq.n	80239fa <_dtoa_r+0xac6>
 8023a1c:	3501      	adds	r5, #1
 8023a1e:	e7c1      	b.n	80239a4 <_dtoa_r+0xa70>
 8023a20:	9b06      	ldr	r3, [sp, #24]
 8023a22:	9a06      	ldr	r2, [sp, #24]
 8023a24:	701d      	strb	r5, [r3, #0]
 8023a26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023a28:	4293      	cmp	r3, r2
 8023a2a:	d02a      	beq.n	8023a82 <_dtoa_r+0xb4e>
 8023a2c:	2300      	movs	r3, #0
 8023a2e:	220a      	movs	r2, #10
 8023a30:	9905      	ldr	r1, [sp, #20]
 8023a32:	9803      	ldr	r0, [sp, #12]
 8023a34:	f000 fd4c 	bl	80244d0 <__multadd>
 8023a38:	9b04      	ldr	r3, [sp, #16]
 8023a3a:	9005      	str	r0, [sp, #20]
 8023a3c:	42bb      	cmp	r3, r7
 8023a3e:	d109      	bne.n	8023a54 <_dtoa_r+0xb20>
 8023a40:	2300      	movs	r3, #0
 8023a42:	220a      	movs	r2, #10
 8023a44:	9904      	ldr	r1, [sp, #16]
 8023a46:	9803      	ldr	r0, [sp, #12]
 8023a48:	f000 fd42 	bl	80244d0 <__multadd>
 8023a4c:	9004      	str	r0, [sp, #16]
 8023a4e:	0007      	movs	r7, r0
 8023a50:	9406      	str	r4, [sp, #24]
 8023a52:	e778      	b.n	8023946 <_dtoa_r+0xa12>
 8023a54:	9904      	ldr	r1, [sp, #16]
 8023a56:	2300      	movs	r3, #0
 8023a58:	220a      	movs	r2, #10
 8023a5a:	9803      	ldr	r0, [sp, #12]
 8023a5c:	f000 fd38 	bl	80244d0 <__multadd>
 8023a60:	2300      	movs	r3, #0
 8023a62:	9004      	str	r0, [sp, #16]
 8023a64:	220a      	movs	r2, #10
 8023a66:	0039      	movs	r1, r7
 8023a68:	9803      	ldr	r0, [sp, #12]
 8023a6a:	f000 fd31 	bl	80244d0 <__multadd>
 8023a6e:	e7ee      	b.n	8023a4e <_dtoa_r+0xb1a>
 8023a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023a72:	2401      	movs	r4, #1
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	dd00      	ble.n	8023a7a <_dtoa_r+0xb46>
 8023a78:	001c      	movs	r4, r3
 8023a7a:	9b08      	ldr	r3, [sp, #32]
 8023a7c:	191c      	adds	r4, r3, r4
 8023a7e:	2300      	movs	r3, #0
 8023a80:	9304      	str	r3, [sp, #16]
 8023a82:	9905      	ldr	r1, [sp, #20]
 8023a84:	2201      	movs	r2, #1
 8023a86:	9803      	ldr	r0, [sp, #12]
 8023a88:	f000 ff28 	bl	80248dc <__lshift>
 8023a8c:	0031      	movs	r1, r6
 8023a8e:	9005      	str	r0, [sp, #20]
 8023a90:	f000 ff90 	bl	80249b4 <__mcmp>
 8023a94:	2800      	cmp	r0, #0
 8023a96:	dcb3      	bgt.n	8023a00 <_dtoa_r+0xacc>
 8023a98:	d101      	bne.n	8023a9e <_dtoa_r+0xb6a>
 8023a9a:	07ed      	lsls	r5, r5, #31
 8023a9c:	d4b0      	bmi.n	8023a00 <_dtoa_r+0xacc>
 8023a9e:	0023      	movs	r3, r4
 8023aa0:	001c      	movs	r4, r3
 8023aa2:	3b01      	subs	r3, #1
 8023aa4:	781a      	ldrb	r2, [r3, #0]
 8023aa6:	2a30      	cmp	r2, #48	@ 0x30
 8023aa8:	d0fa      	beq.n	8023aa0 <_dtoa_r+0xb6c>
 8023aaa:	e5b7      	b.n	802361c <_dtoa_r+0x6e8>
 8023aac:	9a08      	ldr	r2, [sp, #32]
 8023aae:	429a      	cmp	r2, r3
 8023ab0:	d1a7      	bne.n	8023a02 <_dtoa_r+0xace>
 8023ab2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ab4:	3301      	adds	r3, #1
 8023ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8023ab8:	2331      	movs	r3, #49	@ 0x31
 8023aba:	7013      	strb	r3, [r2, #0]
 8023abc:	e5ae      	b.n	802361c <_dtoa_r+0x6e8>
 8023abe:	4b15      	ldr	r3, [pc, #84]	@ (8023b14 <_dtoa_r+0xbe0>)
 8023ac0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023ac2:	9308      	str	r3, [sp, #32]
 8023ac4:	4b14      	ldr	r3, [pc, #80]	@ (8023b18 <_dtoa_r+0xbe4>)
 8023ac6:	2a00      	cmp	r2, #0
 8023ac8:	d001      	beq.n	8023ace <_dtoa_r+0xb9a>
 8023aca:	f7ff fa7b 	bl	8022fc4 <_dtoa_r+0x90>
 8023ace:	f7ff fa7b 	bl	8022fc8 <_dtoa_r+0x94>
 8023ad2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023ad4:	2b01      	cmp	r3, #1
 8023ad6:	dc00      	bgt.n	8023ada <_dtoa_r+0xba6>
 8023ad8:	e648      	b.n	802376c <_dtoa_r+0x838>
 8023ada:	2001      	movs	r0, #1
 8023adc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8023ade:	e665      	b.n	80237ac <_dtoa_r+0x878>
 8023ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	dc00      	bgt.n	8023ae8 <_dtoa_r+0xbb4>
 8023ae6:	e6d6      	b.n	8023896 <_dtoa_r+0x962>
 8023ae8:	2400      	movs	r4, #0
 8023aea:	0031      	movs	r1, r6
 8023aec:	9805      	ldr	r0, [sp, #20]
 8023aee:	f7ff f993 	bl	8022e18 <quorem>
 8023af2:	9b08      	ldr	r3, [sp, #32]
 8023af4:	3030      	adds	r0, #48	@ 0x30
 8023af6:	5518      	strb	r0, [r3, r4]
 8023af8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023afa:	3401      	adds	r4, #1
 8023afc:	0005      	movs	r5, r0
 8023afe:	429c      	cmp	r4, r3
 8023b00:	dab6      	bge.n	8023a70 <_dtoa_r+0xb3c>
 8023b02:	2300      	movs	r3, #0
 8023b04:	220a      	movs	r2, #10
 8023b06:	9905      	ldr	r1, [sp, #20]
 8023b08:	9803      	ldr	r0, [sp, #12]
 8023b0a:	f000 fce1 	bl	80244d0 <__multadd>
 8023b0e:	9005      	str	r0, [sp, #20]
 8023b10:	e7eb      	b.n	8023aea <_dtoa_r+0xbb6>
 8023b12:	46c0      	nop			@ (mov r8, r8)
 8023b14:	0802986d 	.word	0x0802986d
 8023b18:	08029875 	.word	0x08029875

08023b1c <_free_r>:
 8023b1c:	b570      	push	{r4, r5, r6, lr}
 8023b1e:	0005      	movs	r5, r0
 8023b20:	1e0c      	subs	r4, r1, #0
 8023b22:	d010      	beq.n	8023b46 <_free_r+0x2a>
 8023b24:	3c04      	subs	r4, #4
 8023b26:	6823      	ldr	r3, [r4, #0]
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	da00      	bge.n	8023b2e <_free_r+0x12>
 8023b2c:	18e4      	adds	r4, r4, r3
 8023b2e:	0028      	movs	r0, r5
 8023b30:	f000 fc56 	bl	80243e0 <__malloc_lock>
 8023b34:	4a1d      	ldr	r2, [pc, #116]	@ (8023bac <_free_r+0x90>)
 8023b36:	6813      	ldr	r3, [r2, #0]
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d105      	bne.n	8023b48 <_free_r+0x2c>
 8023b3c:	6063      	str	r3, [r4, #4]
 8023b3e:	6014      	str	r4, [r2, #0]
 8023b40:	0028      	movs	r0, r5
 8023b42:	f000 fc55 	bl	80243f0 <__malloc_unlock>
 8023b46:	bd70      	pop	{r4, r5, r6, pc}
 8023b48:	42a3      	cmp	r3, r4
 8023b4a:	d908      	bls.n	8023b5e <_free_r+0x42>
 8023b4c:	6820      	ldr	r0, [r4, #0]
 8023b4e:	1821      	adds	r1, r4, r0
 8023b50:	428b      	cmp	r3, r1
 8023b52:	d1f3      	bne.n	8023b3c <_free_r+0x20>
 8023b54:	6819      	ldr	r1, [r3, #0]
 8023b56:	685b      	ldr	r3, [r3, #4]
 8023b58:	1809      	adds	r1, r1, r0
 8023b5a:	6021      	str	r1, [r4, #0]
 8023b5c:	e7ee      	b.n	8023b3c <_free_r+0x20>
 8023b5e:	001a      	movs	r2, r3
 8023b60:	685b      	ldr	r3, [r3, #4]
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	d001      	beq.n	8023b6a <_free_r+0x4e>
 8023b66:	42a3      	cmp	r3, r4
 8023b68:	d9f9      	bls.n	8023b5e <_free_r+0x42>
 8023b6a:	6811      	ldr	r1, [r2, #0]
 8023b6c:	1850      	adds	r0, r2, r1
 8023b6e:	42a0      	cmp	r0, r4
 8023b70:	d10b      	bne.n	8023b8a <_free_r+0x6e>
 8023b72:	6820      	ldr	r0, [r4, #0]
 8023b74:	1809      	adds	r1, r1, r0
 8023b76:	1850      	adds	r0, r2, r1
 8023b78:	6011      	str	r1, [r2, #0]
 8023b7a:	4283      	cmp	r3, r0
 8023b7c:	d1e0      	bne.n	8023b40 <_free_r+0x24>
 8023b7e:	6818      	ldr	r0, [r3, #0]
 8023b80:	685b      	ldr	r3, [r3, #4]
 8023b82:	1841      	adds	r1, r0, r1
 8023b84:	6011      	str	r1, [r2, #0]
 8023b86:	6053      	str	r3, [r2, #4]
 8023b88:	e7da      	b.n	8023b40 <_free_r+0x24>
 8023b8a:	42a0      	cmp	r0, r4
 8023b8c:	d902      	bls.n	8023b94 <_free_r+0x78>
 8023b8e:	230c      	movs	r3, #12
 8023b90:	602b      	str	r3, [r5, #0]
 8023b92:	e7d5      	b.n	8023b40 <_free_r+0x24>
 8023b94:	6820      	ldr	r0, [r4, #0]
 8023b96:	1821      	adds	r1, r4, r0
 8023b98:	428b      	cmp	r3, r1
 8023b9a:	d103      	bne.n	8023ba4 <_free_r+0x88>
 8023b9c:	6819      	ldr	r1, [r3, #0]
 8023b9e:	685b      	ldr	r3, [r3, #4]
 8023ba0:	1809      	adds	r1, r1, r0
 8023ba2:	6021      	str	r1, [r4, #0]
 8023ba4:	6063      	str	r3, [r4, #4]
 8023ba6:	6054      	str	r4, [r2, #4]
 8023ba8:	e7ca      	b.n	8023b40 <_free_r+0x24>
 8023baa:	46c0      	nop			@ (mov r8, r8)
 8023bac:	20003598 	.word	0x20003598

08023bb0 <rshift>:
 8023bb0:	0002      	movs	r2, r0
 8023bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bb4:	6904      	ldr	r4, [r0, #16]
 8023bb6:	b085      	sub	sp, #20
 8023bb8:	3214      	adds	r2, #20
 8023bba:	114b      	asrs	r3, r1, #5
 8023bbc:	0016      	movs	r6, r2
 8023bbe:	9302      	str	r3, [sp, #8]
 8023bc0:	429c      	cmp	r4, r3
 8023bc2:	dd31      	ble.n	8023c28 <rshift+0x78>
 8023bc4:	261f      	movs	r6, #31
 8023bc6:	000f      	movs	r7, r1
 8023bc8:	009b      	lsls	r3, r3, #2
 8023bca:	00a5      	lsls	r5, r4, #2
 8023bcc:	18d3      	adds	r3, r2, r3
 8023bce:	4037      	ands	r7, r6
 8023bd0:	1955      	adds	r5, r2, r5
 8023bd2:	9300      	str	r3, [sp, #0]
 8023bd4:	9701      	str	r7, [sp, #4]
 8023bd6:	4231      	tst	r1, r6
 8023bd8:	d10d      	bne.n	8023bf6 <rshift+0x46>
 8023bda:	0016      	movs	r6, r2
 8023bdc:	0019      	movs	r1, r3
 8023bde:	428d      	cmp	r5, r1
 8023be0:	d836      	bhi.n	8023c50 <rshift+0xa0>
 8023be2:	9b00      	ldr	r3, [sp, #0]
 8023be4:	2600      	movs	r6, #0
 8023be6:	3b03      	subs	r3, #3
 8023be8:	429d      	cmp	r5, r3
 8023bea:	d302      	bcc.n	8023bf2 <rshift+0x42>
 8023bec:	9b02      	ldr	r3, [sp, #8]
 8023bee:	1ae4      	subs	r4, r4, r3
 8023bf0:	00a6      	lsls	r6, r4, #2
 8023bf2:	1996      	adds	r6, r2, r6
 8023bf4:	e018      	b.n	8023c28 <rshift+0x78>
 8023bf6:	2120      	movs	r1, #32
 8023bf8:	9e01      	ldr	r6, [sp, #4]
 8023bfa:	9f01      	ldr	r7, [sp, #4]
 8023bfc:	1b89      	subs	r1, r1, r6
 8023bfe:	9e00      	ldr	r6, [sp, #0]
 8023c00:	9103      	str	r1, [sp, #12]
 8023c02:	ce02      	ldmia	r6!, {r1}
 8023c04:	4694      	mov	ip, r2
 8023c06:	40f9      	lsrs	r1, r7
 8023c08:	42b5      	cmp	r5, r6
 8023c0a:	d816      	bhi.n	8023c3a <rshift+0x8a>
 8023c0c:	9b00      	ldr	r3, [sp, #0]
 8023c0e:	2600      	movs	r6, #0
 8023c10:	3301      	adds	r3, #1
 8023c12:	429d      	cmp	r5, r3
 8023c14:	d303      	bcc.n	8023c1e <rshift+0x6e>
 8023c16:	9b02      	ldr	r3, [sp, #8]
 8023c18:	1ae4      	subs	r4, r4, r3
 8023c1a:	00a6      	lsls	r6, r4, #2
 8023c1c:	3e04      	subs	r6, #4
 8023c1e:	1996      	adds	r6, r2, r6
 8023c20:	6031      	str	r1, [r6, #0]
 8023c22:	2900      	cmp	r1, #0
 8023c24:	d000      	beq.n	8023c28 <rshift+0x78>
 8023c26:	3604      	adds	r6, #4
 8023c28:	1ab1      	subs	r1, r6, r2
 8023c2a:	1089      	asrs	r1, r1, #2
 8023c2c:	6101      	str	r1, [r0, #16]
 8023c2e:	4296      	cmp	r6, r2
 8023c30:	d101      	bne.n	8023c36 <rshift+0x86>
 8023c32:	2300      	movs	r3, #0
 8023c34:	6143      	str	r3, [r0, #20]
 8023c36:	b005      	add	sp, #20
 8023c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c3a:	6837      	ldr	r7, [r6, #0]
 8023c3c:	9b03      	ldr	r3, [sp, #12]
 8023c3e:	409f      	lsls	r7, r3
 8023c40:	430f      	orrs	r7, r1
 8023c42:	4661      	mov	r1, ip
 8023c44:	c180      	stmia	r1!, {r7}
 8023c46:	468c      	mov	ip, r1
 8023c48:	9b01      	ldr	r3, [sp, #4]
 8023c4a:	ce02      	ldmia	r6!, {r1}
 8023c4c:	40d9      	lsrs	r1, r3
 8023c4e:	e7db      	b.n	8023c08 <rshift+0x58>
 8023c50:	c980      	ldmia	r1!, {r7}
 8023c52:	c680      	stmia	r6!, {r7}
 8023c54:	e7c3      	b.n	8023bde <rshift+0x2e>

08023c56 <__hexdig_fun>:
 8023c56:	0002      	movs	r2, r0
 8023c58:	3a30      	subs	r2, #48	@ 0x30
 8023c5a:	0003      	movs	r3, r0
 8023c5c:	2a09      	cmp	r2, #9
 8023c5e:	d802      	bhi.n	8023c66 <__hexdig_fun+0x10>
 8023c60:	3b20      	subs	r3, #32
 8023c62:	b2d8      	uxtb	r0, r3
 8023c64:	4770      	bx	lr
 8023c66:	0002      	movs	r2, r0
 8023c68:	3a61      	subs	r2, #97	@ 0x61
 8023c6a:	2a05      	cmp	r2, #5
 8023c6c:	d801      	bhi.n	8023c72 <__hexdig_fun+0x1c>
 8023c6e:	3b47      	subs	r3, #71	@ 0x47
 8023c70:	e7f7      	b.n	8023c62 <__hexdig_fun+0xc>
 8023c72:	001a      	movs	r2, r3
 8023c74:	3a41      	subs	r2, #65	@ 0x41
 8023c76:	2000      	movs	r0, #0
 8023c78:	2a05      	cmp	r2, #5
 8023c7a:	d8f3      	bhi.n	8023c64 <__hexdig_fun+0xe>
 8023c7c:	3b27      	subs	r3, #39	@ 0x27
 8023c7e:	e7f0      	b.n	8023c62 <__hexdig_fun+0xc>

08023c80 <__gethex>:
 8023c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c82:	b089      	sub	sp, #36	@ 0x24
 8023c84:	9307      	str	r3, [sp, #28]
 8023c86:	680b      	ldr	r3, [r1, #0]
 8023c88:	9201      	str	r2, [sp, #4]
 8023c8a:	9003      	str	r0, [sp, #12]
 8023c8c:	9106      	str	r1, [sp, #24]
 8023c8e:	1c9a      	adds	r2, r3, #2
 8023c90:	0011      	movs	r1, r2
 8023c92:	3201      	adds	r2, #1
 8023c94:	1e50      	subs	r0, r2, #1
 8023c96:	7800      	ldrb	r0, [r0, #0]
 8023c98:	2830      	cmp	r0, #48	@ 0x30
 8023c9a:	d0f9      	beq.n	8023c90 <__gethex+0x10>
 8023c9c:	1acb      	subs	r3, r1, r3
 8023c9e:	3b02      	subs	r3, #2
 8023ca0:	9305      	str	r3, [sp, #20]
 8023ca2:	9100      	str	r1, [sp, #0]
 8023ca4:	f7ff ffd7 	bl	8023c56 <__hexdig_fun>
 8023ca8:	2300      	movs	r3, #0
 8023caa:	001d      	movs	r5, r3
 8023cac:	9302      	str	r3, [sp, #8]
 8023cae:	4298      	cmp	r0, r3
 8023cb0:	d11e      	bne.n	8023cf0 <__gethex+0x70>
 8023cb2:	2201      	movs	r2, #1
 8023cb4:	49a6      	ldr	r1, [pc, #664]	@ (8023f50 <__gethex+0x2d0>)
 8023cb6:	9800      	ldr	r0, [sp, #0]
 8023cb8:	f7fe ffd8 	bl	8022c6c <strncmp>
 8023cbc:	0007      	movs	r7, r0
 8023cbe:	42a8      	cmp	r0, r5
 8023cc0:	d000      	beq.n	8023cc4 <__gethex+0x44>
 8023cc2:	e06a      	b.n	8023d9a <__gethex+0x11a>
 8023cc4:	9b00      	ldr	r3, [sp, #0]
 8023cc6:	7858      	ldrb	r0, [r3, #1]
 8023cc8:	1c5c      	adds	r4, r3, #1
 8023cca:	f7ff ffc4 	bl	8023c56 <__hexdig_fun>
 8023cce:	2301      	movs	r3, #1
 8023cd0:	9302      	str	r3, [sp, #8]
 8023cd2:	42a8      	cmp	r0, r5
 8023cd4:	d02f      	beq.n	8023d36 <__gethex+0xb6>
 8023cd6:	9400      	str	r4, [sp, #0]
 8023cd8:	9b00      	ldr	r3, [sp, #0]
 8023cda:	7818      	ldrb	r0, [r3, #0]
 8023cdc:	2830      	cmp	r0, #48	@ 0x30
 8023cde:	d009      	beq.n	8023cf4 <__gethex+0x74>
 8023ce0:	f7ff ffb9 	bl	8023c56 <__hexdig_fun>
 8023ce4:	4242      	negs	r2, r0
 8023ce6:	4142      	adcs	r2, r0
 8023ce8:	2301      	movs	r3, #1
 8023cea:	0025      	movs	r5, r4
 8023cec:	9202      	str	r2, [sp, #8]
 8023cee:	9305      	str	r3, [sp, #20]
 8023cf0:	9c00      	ldr	r4, [sp, #0]
 8023cf2:	e004      	b.n	8023cfe <__gethex+0x7e>
 8023cf4:	9b00      	ldr	r3, [sp, #0]
 8023cf6:	3301      	adds	r3, #1
 8023cf8:	9300      	str	r3, [sp, #0]
 8023cfa:	e7ed      	b.n	8023cd8 <__gethex+0x58>
 8023cfc:	3401      	adds	r4, #1
 8023cfe:	7820      	ldrb	r0, [r4, #0]
 8023d00:	f7ff ffa9 	bl	8023c56 <__hexdig_fun>
 8023d04:	1e07      	subs	r7, r0, #0
 8023d06:	d1f9      	bne.n	8023cfc <__gethex+0x7c>
 8023d08:	2201      	movs	r2, #1
 8023d0a:	0020      	movs	r0, r4
 8023d0c:	4990      	ldr	r1, [pc, #576]	@ (8023f50 <__gethex+0x2d0>)
 8023d0e:	f7fe ffad 	bl	8022c6c <strncmp>
 8023d12:	2800      	cmp	r0, #0
 8023d14:	d10d      	bne.n	8023d32 <__gethex+0xb2>
 8023d16:	2d00      	cmp	r5, #0
 8023d18:	d106      	bne.n	8023d28 <__gethex+0xa8>
 8023d1a:	3401      	adds	r4, #1
 8023d1c:	0025      	movs	r5, r4
 8023d1e:	7820      	ldrb	r0, [r4, #0]
 8023d20:	f7ff ff99 	bl	8023c56 <__hexdig_fun>
 8023d24:	2800      	cmp	r0, #0
 8023d26:	d102      	bne.n	8023d2e <__gethex+0xae>
 8023d28:	1b2d      	subs	r5, r5, r4
 8023d2a:	00af      	lsls	r7, r5, #2
 8023d2c:	e003      	b.n	8023d36 <__gethex+0xb6>
 8023d2e:	3401      	adds	r4, #1
 8023d30:	e7f5      	b.n	8023d1e <__gethex+0x9e>
 8023d32:	2d00      	cmp	r5, #0
 8023d34:	d1f8      	bne.n	8023d28 <__gethex+0xa8>
 8023d36:	2220      	movs	r2, #32
 8023d38:	7823      	ldrb	r3, [r4, #0]
 8023d3a:	0026      	movs	r6, r4
 8023d3c:	4393      	bics	r3, r2
 8023d3e:	2b50      	cmp	r3, #80	@ 0x50
 8023d40:	d11d      	bne.n	8023d7e <__gethex+0xfe>
 8023d42:	7863      	ldrb	r3, [r4, #1]
 8023d44:	2b2b      	cmp	r3, #43	@ 0x2b
 8023d46:	d02d      	beq.n	8023da4 <__gethex+0x124>
 8023d48:	2b2d      	cmp	r3, #45	@ 0x2d
 8023d4a:	d02f      	beq.n	8023dac <__gethex+0x12c>
 8023d4c:	2300      	movs	r3, #0
 8023d4e:	1c66      	adds	r6, r4, #1
 8023d50:	9304      	str	r3, [sp, #16]
 8023d52:	7830      	ldrb	r0, [r6, #0]
 8023d54:	f7ff ff7f 	bl	8023c56 <__hexdig_fun>
 8023d58:	1e43      	subs	r3, r0, #1
 8023d5a:	b2db      	uxtb	r3, r3
 8023d5c:	0005      	movs	r5, r0
 8023d5e:	2b18      	cmp	r3, #24
 8023d60:	d82a      	bhi.n	8023db8 <__gethex+0x138>
 8023d62:	7870      	ldrb	r0, [r6, #1]
 8023d64:	f7ff ff77 	bl	8023c56 <__hexdig_fun>
 8023d68:	1e43      	subs	r3, r0, #1
 8023d6a:	b2db      	uxtb	r3, r3
 8023d6c:	3601      	adds	r6, #1
 8023d6e:	3d10      	subs	r5, #16
 8023d70:	2b18      	cmp	r3, #24
 8023d72:	d91d      	bls.n	8023db0 <__gethex+0x130>
 8023d74:	9b04      	ldr	r3, [sp, #16]
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d000      	beq.n	8023d7c <__gethex+0xfc>
 8023d7a:	426d      	negs	r5, r5
 8023d7c:	197f      	adds	r7, r7, r5
 8023d7e:	9b06      	ldr	r3, [sp, #24]
 8023d80:	601e      	str	r6, [r3, #0]
 8023d82:	9b02      	ldr	r3, [sp, #8]
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d019      	beq.n	8023dbc <__gethex+0x13c>
 8023d88:	9b05      	ldr	r3, [sp, #20]
 8023d8a:	2606      	movs	r6, #6
 8023d8c:	425a      	negs	r2, r3
 8023d8e:	4153      	adcs	r3, r2
 8023d90:	425b      	negs	r3, r3
 8023d92:	401e      	ands	r6, r3
 8023d94:	0030      	movs	r0, r6
 8023d96:	b009      	add	sp, #36	@ 0x24
 8023d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d9a:	2301      	movs	r3, #1
 8023d9c:	2700      	movs	r7, #0
 8023d9e:	9c00      	ldr	r4, [sp, #0]
 8023da0:	9302      	str	r3, [sp, #8]
 8023da2:	e7c8      	b.n	8023d36 <__gethex+0xb6>
 8023da4:	2300      	movs	r3, #0
 8023da6:	9304      	str	r3, [sp, #16]
 8023da8:	1ca6      	adds	r6, r4, #2
 8023daa:	e7d2      	b.n	8023d52 <__gethex+0xd2>
 8023dac:	2301      	movs	r3, #1
 8023dae:	e7fa      	b.n	8023da6 <__gethex+0x126>
 8023db0:	230a      	movs	r3, #10
 8023db2:	435d      	muls	r5, r3
 8023db4:	182d      	adds	r5, r5, r0
 8023db6:	e7d4      	b.n	8023d62 <__gethex+0xe2>
 8023db8:	0026      	movs	r6, r4
 8023dba:	e7e0      	b.n	8023d7e <__gethex+0xfe>
 8023dbc:	9b00      	ldr	r3, [sp, #0]
 8023dbe:	9902      	ldr	r1, [sp, #8]
 8023dc0:	1ae3      	subs	r3, r4, r3
 8023dc2:	3b01      	subs	r3, #1
 8023dc4:	2b07      	cmp	r3, #7
 8023dc6:	dc0a      	bgt.n	8023dde <__gethex+0x15e>
 8023dc8:	9803      	ldr	r0, [sp, #12]
 8023dca:	f000 fb19 	bl	8024400 <_Balloc>
 8023dce:	1e05      	subs	r5, r0, #0
 8023dd0:	d108      	bne.n	8023de4 <__gethex+0x164>
 8023dd2:	002a      	movs	r2, r5
 8023dd4:	21e4      	movs	r1, #228	@ 0xe4
 8023dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8023f54 <__gethex+0x2d4>)
 8023dd8:	485f      	ldr	r0, [pc, #380]	@ (8023f58 <__gethex+0x2d8>)
 8023dda:	f001 fbf1 	bl	80255c0 <__assert_func>
 8023dde:	3101      	adds	r1, #1
 8023de0:	105b      	asrs	r3, r3, #1
 8023de2:	e7ef      	b.n	8023dc4 <__gethex+0x144>
 8023de4:	0003      	movs	r3, r0
 8023de6:	3314      	adds	r3, #20
 8023de8:	9302      	str	r3, [sp, #8]
 8023dea:	9305      	str	r3, [sp, #20]
 8023dec:	2300      	movs	r3, #0
 8023dee:	001e      	movs	r6, r3
 8023df0:	9304      	str	r3, [sp, #16]
 8023df2:	9b00      	ldr	r3, [sp, #0]
 8023df4:	42a3      	cmp	r3, r4
 8023df6:	d338      	bcc.n	8023e6a <__gethex+0x1ea>
 8023df8:	9c05      	ldr	r4, [sp, #20]
 8023dfa:	9b02      	ldr	r3, [sp, #8]
 8023dfc:	c440      	stmia	r4!, {r6}
 8023dfe:	1ae4      	subs	r4, r4, r3
 8023e00:	10a4      	asrs	r4, r4, #2
 8023e02:	0030      	movs	r0, r6
 8023e04:	612c      	str	r4, [r5, #16]
 8023e06:	f000 fbf3 	bl	80245f0 <__hi0bits>
 8023e0a:	9b01      	ldr	r3, [sp, #4]
 8023e0c:	0164      	lsls	r4, r4, #5
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	1a26      	subs	r6, r4, r0
 8023e12:	9300      	str	r3, [sp, #0]
 8023e14:	429e      	cmp	r6, r3
 8023e16:	dd52      	ble.n	8023ebe <__gethex+0x23e>
 8023e18:	1af6      	subs	r6, r6, r3
 8023e1a:	0031      	movs	r1, r6
 8023e1c:	0028      	movs	r0, r5
 8023e1e:	f000 ff96 	bl	8024d4e <__any_on>
 8023e22:	1e04      	subs	r4, r0, #0
 8023e24:	d00f      	beq.n	8023e46 <__gethex+0x1c6>
 8023e26:	2401      	movs	r4, #1
 8023e28:	231f      	movs	r3, #31
 8023e2a:	0020      	movs	r0, r4
 8023e2c:	1e72      	subs	r2, r6, #1
 8023e2e:	4013      	ands	r3, r2
 8023e30:	4098      	lsls	r0, r3
 8023e32:	0003      	movs	r3, r0
 8023e34:	1151      	asrs	r1, r2, #5
 8023e36:	9802      	ldr	r0, [sp, #8]
 8023e38:	0089      	lsls	r1, r1, #2
 8023e3a:	5809      	ldr	r1, [r1, r0]
 8023e3c:	4219      	tst	r1, r3
 8023e3e:	d002      	beq.n	8023e46 <__gethex+0x1c6>
 8023e40:	42a2      	cmp	r2, r4
 8023e42:	dc34      	bgt.n	8023eae <__gethex+0x22e>
 8023e44:	2402      	movs	r4, #2
 8023e46:	0031      	movs	r1, r6
 8023e48:	0028      	movs	r0, r5
 8023e4a:	f7ff feb1 	bl	8023bb0 <rshift>
 8023e4e:	19bf      	adds	r7, r7, r6
 8023e50:	9b01      	ldr	r3, [sp, #4]
 8023e52:	689b      	ldr	r3, [r3, #8]
 8023e54:	42bb      	cmp	r3, r7
 8023e56:	da42      	bge.n	8023ede <__gethex+0x25e>
 8023e58:	0029      	movs	r1, r5
 8023e5a:	9803      	ldr	r0, [sp, #12]
 8023e5c:	f000 fb14 	bl	8024488 <_Bfree>
 8023e60:	2300      	movs	r3, #0
 8023e62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023e64:	26a3      	movs	r6, #163	@ 0xa3
 8023e66:	6013      	str	r3, [r2, #0]
 8023e68:	e794      	b.n	8023d94 <__gethex+0x114>
 8023e6a:	3c01      	subs	r4, #1
 8023e6c:	7823      	ldrb	r3, [r4, #0]
 8023e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8023e70:	d012      	beq.n	8023e98 <__gethex+0x218>
 8023e72:	9b04      	ldr	r3, [sp, #16]
 8023e74:	2b20      	cmp	r3, #32
 8023e76:	d104      	bne.n	8023e82 <__gethex+0x202>
 8023e78:	9b05      	ldr	r3, [sp, #20]
 8023e7a:	c340      	stmia	r3!, {r6}
 8023e7c:	2600      	movs	r6, #0
 8023e7e:	9305      	str	r3, [sp, #20]
 8023e80:	9604      	str	r6, [sp, #16]
 8023e82:	7820      	ldrb	r0, [r4, #0]
 8023e84:	f7ff fee7 	bl	8023c56 <__hexdig_fun>
 8023e88:	230f      	movs	r3, #15
 8023e8a:	4018      	ands	r0, r3
 8023e8c:	9b04      	ldr	r3, [sp, #16]
 8023e8e:	4098      	lsls	r0, r3
 8023e90:	3304      	adds	r3, #4
 8023e92:	4306      	orrs	r6, r0
 8023e94:	9304      	str	r3, [sp, #16]
 8023e96:	e7ac      	b.n	8023df2 <__gethex+0x172>
 8023e98:	9b00      	ldr	r3, [sp, #0]
 8023e9a:	42a3      	cmp	r3, r4
 8023e9c:	d8e9      	bhi.n	8023e72 <__gethex+0x1f2>
 8023e9e:	2201      	movs	r2, #1
 8023ea0:	0020      	movs	r0, r4
 8023ea2:	492b      	ldr	r1, [pc, #172]	@ (8023f50 <__gethex+0x2d0>)
 8023ea4:	f7fe fee2 	bl	8022c6c <strncmp>
 8023ea8:	2800      	cmp	r0, #0
 8023eaa:	d1e2      	bne.n	8023e72 <__gethex+0x1f2>
 8023eac:	e7a1      	b.n	8023df2 <__gethex+0x172>
 8023eae:	0028      	movs	r0, r5
 8023eb0:	1eb1      	subs	r1, r6, #2
 8023eb2:	f000 ff4c 	bl	8024d4e <__any_on>
 8023eb6:	2800      	cmp	r0, #0
 8023eb8:	d0c4      	beq.n	8023e44 <__gethex+0x1c4>
 8023eba:	2403      	movs	r4, #3
 8023ebc:	e7c3      	b.n	8023e46 <__gethex+0x1c6>
 8023ebe:	9b00      	ldr	r3, [sp, #0]
 8023ec0:	2400      	movs	r4, #0
 8023ec2:	429e      	cmp	r6, r3
 8023ec4:	dac4      	bge.n	8023e50 <__gethex+0x1d0>
 8023ec6:	1b9e      	subs	r6, r3, r6
 8023ec8:	0029      	movs	r1, r5
 8023eca:	0032      	movs	r2, r6
 8023ecc:	9803      	ldr	r0, [sp, #12]
 8023ece:	f000 fd05 	bl	80248dc <__lshift>
 8023ed2:	0003      	movs	r3, r0
 8023ed4:	3314      	adds	r3, #20
 8023ed6:	0005      	movs	r5, r0
 8023ed8:	1bbf      	subs	r7, r7, r6
 8023eda:	9302      	str	r3, [sp, #8]
 8023edc:	e7b8      	b.n	8023e50 <__gethex+0x1d0>
 8023ede:	9b01      	ldr	r3, [sp, #4]
 8023ee0:	685e      	ldr	r6, [r3, #4]
 8023ee2:	42be      	cmp	r6, r7
 8023ee4:	dd6f      	ble.n	8023fc6 <__gethex+0x346>
 8023ee6:	9b00      	ldr	r3, [sp, #0]
 8023ee8:	1bf6      	subs	r6, r6, r7
 8023eea:	42b3      	cmp	r3, r6
 8023eec:	dc36      	bgt.n	8023f5c <__gethex+0x2dc>
 8023eee:	9b01      	ldr	r3, [sp, #4]
 8023ef0:	68db      	ldr	r3, [r3, #12]
 8023ef2:	2b02      	cmp	r3, #2
 8023ef4:	d024      	beq.n	8023f40 <__gethex+0x2c0>
 8023ef6:	2b03      	cmp	r3, #3
 8023ef8:	d026      	beq.n	8023f48 <__gethex+0x2c8>
 8023efa:	2b01      	cmp	r3, #1
 8023efc:	d117      	bne.n	8023f2e <__gethex+0x2ae>
 8023efe:	9b00      	ldr	r3, [sp, #0]
 8023f00:	42b3      	cmp	r3, r6
 8023f02:	d114      	bne.n	8023f2e <__gethex+0x2ae>
 8023f04:	2b01      	cmp	r3, #1
 8023f06:	d10b      	bne.n	8023f20 <__gethex+0x2a0>
 8023f08:	9b01      	ldr	r3, [sp, #4]
 8023f0a:	9a07      	ldr	r2, [sp, #28]
 8023f0c:	685b      	ldr	r3, [r3, #4]
 8023f0e:	2662      	movs	r6, #98	@ 0x62
 8023f10:	6013      	str	r3, [r2, #0]
 8023f12:	2301      	movs	r3, #1
 8023f14:	9a02      	ldr	r2, [sp, #8]
 8023f16:	612b      	str	r3, [r5, #16]
 8023f18:	6013      	str	r3, [r2, #0]
 8023f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023f1c:	601d      	str	r5, [r3, #0]
 8023f1e:	e739      	b.n	8023d94 <__gethex+0x114>
 8023f20:	9900      	ldr	r1, [sp, #0]
 8023f22:	0028      	movs	r0, r5
 8023f24:	3901      	subs	r1, #1
 8023f26:	f000 ff12 	bl	8024d4e <__any_on>
 8023f2a:	2800      	cmp	r0, #0
 8023f2c:	d1ec      	bne.n	8023f08 <__gethex+0x288>
 8023f2e:	0029      	movs	r1, r5
 8023f30:	9803      	ldr	r0, [sp, #12]
 8023f32:	f000 faa9 	bl	8024488 <_Bfree>
 8023f36:	2300      	movs	r3, #0
 8023f38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023f3a:	2650      	movs	r6, #80	@ 0x50
 8023f3c:	6013      	str	r3, [r2, #0]
 8023f3e:	e729      	b.n	8023d94 <__gethex+0x114>
 8023f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f42:	2b00      	cmp	r3, #0
 8023f44:	d1f3      	bne.n	8023f2e <__gethex+0x2ae>
 8023f46:	e7df      	b.n	8023f08 <__gethex+0x288>
 8023f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	d1dc      	bne.n	8023f08 <__gethex+0x288>
 8023f4e:	e7ee      	b.n	8023f2e <__gethex+0x2ae>
 8023f50:	080296d8 	.word	0x080296d8
 8023f54:	080298e9 	.word	0x080298e9
 8023f58:	080298fa 	.word	0x080298fa
 8023f5c:	1e77      	subs	r7, r6, #1
 8023f5e:	2c00      	cmp	r4, #0
 8023f60:	d12f      	bne.n	8023fc2 <__gethex+0x342>
 8023f62:	2f00      	cmp	r7, #0
 8023f64:	d004      	beq.n	8023f70 <__gethex+0x2f0>
 8023f66:	0039      	movs	r1, r7
 8023f68:	0028      	movs	r0, r5
 8023f6a:	f000 fef0 	bl	8024d4e <__any_on>
 8023f6e:	0004      	movs	r4, r0
 8023f70:	231f      	movs	r3, #31
 8023f72:	117a      	asrs	r2, r7, #5
 8023f74:	401f      	ands	r7, r3
 8023f76:	3b1e      	subs	r3, #30
 8023f78:	40bb      	lsls	r3, r7
 8023f7a:	9902      	ldr	r1, [sp, #8]
 8023f7c:	0092      	lsls	r2, r2, #2
 8023f7e:	5852      	ldr	r2, [r2, r1]
 8023f80:	421a      	tst	r2, r3
 8023f82:	d001      	beq.n	8023f88 <__gethex+0x308>
 8023f84:	2302      	movs	r3, #2
 8023f86:	431c      	orrs	r4, r3
 8023f88:	9b00      	ldr	r3, [sp, #0]
 8023f8a:	0031      	movs	r1, r6
 8023f8c:	1b9b      	subs	r3, r3, r6
 8023f8e:	2602      	movs	r6, #2
 8023f90:	0028      	movs	r0, r5
 8023f92:	9300      	str	r3, [sp, #0]
 8023f94:	f7ff fe0c 	bl	8023bb0 <rshift>
 8023f98:	9b01      	ldr	r3, [sp, #4]
 8023f9a:	685f      	ldr	r7, [r3, #4]
 8023f9c:	2c00      	cmp	r4, #0
 8023f9e:	d03f      	beq.n	8024020 <__gethex+0x3a0>
 8023fa0:	9b01      	ldr	r3, [sp, #4]
 8023fa2:	68db      	ldr	r3, [r3, #12]
 8023fa4:	2b02      	cmp	r3, #2
 8023fa6:	d010      	beq.n	8023fca <__gethex+0x34a>
 8023fa8:	2b03      	cmp	r3, #3
 8023faa:	d012      	beq.n	8023fd2 <__gethex+0x352>
 8023fac:	2b01      	cmp	r3, #1
 8023fae:	d106      	bne.n	8023fbe <__gethex+0x33e>
 8023fb0:	07a2      	lsls	r2, r4, #30
 8023fb2:	d504      	bpl.n	8023fbe <__gethex+0x33e>
 8023fb4:	9a02      	ldr	r2, [sp, #8]
 8023fb6:	6812      	ldr	r2, [r2, #0]
 8023fb8:	4314      	orrs	r4, r2
 8023fba:	421c      	tst	r4, r3
 8023fbc:	d10c      	bne.n	8023fd8 <__gethex+0x358>
 8023fbe:	2310      	movs	r3, #16
 8023fc0:	e02d      	b.n	802401e <__gethex+0x39e>
 8023fc2:	2401      	movs	r4, #1
 8023fc4:	e7d4      	b.n	8023f70 <__gethex+0x2f0>
 8023fc6:	2601      	movs	r6, #1
 8023fc8:	e7e8      	b.n	8023f9c <__gethex+0x31c>
 8023fca:	2301      	movs	r3, #1
 8023fcc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023fce:	1a9b      	subs	r3, r3, r2
 8023fd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023fd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	d0f2      	beq.n	8023fbe <__gethex+0x33e>
 8023fd8:	692b      	ldr	r3, [r5, #16]
 8023fda:	2000      	movs	r0, #0
 8023fdc:	9302      	str	r3, [sp, #8]
 8023fde:	009b      	lsls	r3, r3, #2
 8023fe0:	9304      	str	r3, [sp, #16]
 8023fe2:	002b      	movs	r3, r5
 8023fe4:	9a04      	ldr	r2, [sp, #16]
 8023fe6:	3314      	adds	r3, #20
 8023fe8:	1899      	adds	r1, r3, r2
 8023fea:	681a      	ldr	r2, [r3, #0]
 8023fec:	1c54      	adds	r4, r2, #1
 8023fee:	d01c      	beq.n	802402a <__gethex+0x3aa>
 8023ff0:	3201      	adds	r2, #1
 8023ff2:	601a      	str	r2, [r3, #0]
 8023ff4:	002b      	movs	r3, r5
 8023ff6:	3314      	adds	r3, #20
 8023ff8:	2e02      	cmp	r6, #2
 8023ffa:	d13f      	bne.n	802407c <__gethex+0x3fc>
 8023ffc:	9a01      	ldr	r2, [sp, #4]
 8023ffe:	9900      	ldr	r1, [sp, #0]
 8024000:	6812      	ldr	r2, [r2, #0]
 8024002:	3a01      	subs	r2, #1
 8024004:	428a      	cmp	r2, r1
 8024006:	d109      	bne.n	802401c <__gethex+0x39c>
 8024008:	000a      	movs	r2, r1
 802400a:	201f      	movs	r0, #31
 802400c:	4010      	ands	r0, r2
 802400e:	2201      	movs	r2, #1
 8024010:	4082      	lsls	r2, r0
 8024012:	1149      	asrs	r1, r1, #5
 8024014:	0089      	lsls	r1, r1, #2
 8024016:	58cb      	ldr	r3, [r1, r3]
 8024018:	4213      	tst	r3, r2
 802401a:	d13d      	bne.n	8024098 <__gethex+0x418>
 802401c:	2320      	movs	r3, #32
 802401e:	431e      	orrs	r6, r3
 8024020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024022:	601d      	str	r5, [r3, #0]
 8024024:	9b07      	ldr	r3, [sp, #28]
 8024026:	601f      	str	r7, [r3, #0]
 8024028:	e6b4      	b.n	8023d94 <__gethex+0x114>
 802402a:	c301      	stmia	r3!, {r0}
 802402c:	4299      	cmp	r1, r3
 802402e:	d8dc      	bhi.n	8023fea <__gethex+0x36a>
 8024030:	68ab      	ldr	r3, [r5, #8]
 8024032:	9a02      	ldr	r2, [sp, #8]
 8024034:	429a      	cmp	r2, r3
 8024036:	db18      	blt.n	802406a <__gethex+0x3ea>
 8024038:	6869      	ldr	r1, [r5, #4]
 802403a:	9803      	ldr	r0, [sp, #12]
 802403c:	3101      	adds	r1, #1
 802403e:	f000 f9df 	bl	8024400 <_Balloc>
 8024042:	1e04      	subs	r4, r0, #0
 8024044:	d104      	bne.n	8024050 <__gethex+0x3d0>
 8024046:	0022      	movs	r2, r4
 8024048:	2184      	movs	r1, #132	@ 0x84
 802404a:	4b1d      	ldr	r3, [pc, #116]	@ (80240c0 <__gethex+0x440>)
 802404c:	481d      	ldr	r0, [pc, #116]	@ (80240c4 <__gethex+0x444>)
 802404e:	e6c4      	b.n	8023dda <__gethex+0x15a>
 8024050:	0029      	movs	r1, r5
 8024052:	692a      	ldr	r2, [r5, #16]
 8024054:	310c      	adds	r1, #12
 8024056:	3202      	adds	r2, #2
 8024058:	0092      	lsls	r2, r2, #2
 802405a:	300c      	adds	r0, #12
 802405c:	f7fe fecc 	bl	8022df8 <memcpy>
 8024060:	0029      	movs	r1, r5
 8024062:	9803      	ldr	r0, [sp, #12]
 8024064:	f000 fa10 	bl	8024488 <_Bfree>
 8024068:	0025      	movs	r5, r4
 802406a:	692b      	ldr	r3, [r5, #16]
 802406c:	1c5a      	adds	r2, r3, #1
 802406e:	612a      	str	r2, [r5, #16]
 8024070:	2201      	movs	r2, #1
 8024072:	3304      	adds	r3, #4
 8024074:	009b      	lsls	r3, r3, #2
 8024076:	18eb      	adds	r3, r5, r3
 8024078:	605a      	str	r2, [r3, #4]
 802407a:	e7bb      	b.n	8023ff4 <__gethex+0x374>
 802407c:	692a      	ldr	r2, [r5, #16]
 802407e:	9902      	ldr	r1, [sp, #8]
 8024080:	428a      	cmp	r2, r1
 8024082:	dd0b      	ble.n	802409c <__gethex+0x41c>
 8024084:	2101      	movs	r1, #1
 8024086:	0028      	movs	r0, r5
 8024088:	f7ff fd92 	bl	8023bb0 <rshift>
 802408c:	9b01      	ldr	r3, [sp, #4]
 802408e:	3701      	adds	r7, #1
 8024090:	689b      	ldr	r3, [r3, #8]
 8024092:	42bb      	cmp	r3, r7
 8024094:	da00      	bge.n	8024098 <__gethex+0x418>
 8024096:	e6df      	b.n	8023e58 <__gethex+0x1d8>
 8024098:	2601      	movs	r6, #1
 802409a:	e7bf      	b.n	802401c <__gethex+0x39c>
 802409c:	221f      	movs	r2, #31
 802409e:	9c00      	ldr	r4, [sp, #0]
 80240a0:	9900      	ldr	r1, [sp, #0]
 80240a2:	4014      	ands	r4, r2
 80240a4:	4211      	tst	r1, r2
 80240a6:	d0f7      	beq.n	8024098 <__gethex+0x418>
 80240a8:	9a04      	ldr	r2, [sp, #16]
 80240aa:	189b      	adds	r3, r3, r2
 80240ac:	3b04      	subs	r3, #4
 80240ae:	6818      	ldr	r0, [r3, #0]
 80240b0:	f000 fa9e 	bl	80245f0 <__hi0bits>
 80240b4:	2320      	movs	r3, #32
 80240b6:	1b1b      	subs	r3, r3, r4
 80240b8:	4298      	cmp	r0, r3
 80240ba:	dbe3      	blt.n	8024084 <__gethex+0x404>
 80240bc:	e7ec      	b.n	8024098 <__gethex+0x418>
 80240be:	46c0      	nop			@ (mov r8, r8)
 80240c0:	080298e9 	.word	0x080298e9
 80240c4:	080298fa 	.word	0x080298fa

080240c8 <L_shift>:
 80240c8:	2308      	movs	r3, #8
 80240ca:	b570      	push	{r4, r5, r6, lr}
 80240cc:	2520      	movs	r5, #32
 80240ce:	1a9a      	subs	r2, r3, r2
 80240d0:	0092      	lsls	r2, r2, #2
 80240d2:	1aad      	subs	r5, r5, r2
 80240d4:	6843      	ldr	r3, [r0, #4]
 80240d6:	6804      	ldr	r4, [r0, #0]
 80240d8:	001e      	movs	r6, r3
 80240da:	40ae      	lsls	r6, r5
 80240dc:	40d3      	lsrs	r3, r2
 80240de:	4334      	orrs	r4, r6
 80240e0:	6004      	str	r4, [r0, #0]
 80240e2:	6043      	str	r3, [r0, #4]
 80240e4:	3004      	adds	r0, #4
 80240e6:	4288      	cmp	r0, r1
 80240e8:	d3f4      	bcc.n	80240d4 <L_shift+0xc>
 80240ea:	bd70      	pop	{r4, r5, r6, pc}

080240ec <__match>:
 80240ec:	b530      	push	{r4, r5, lr}
 80240ee:	6803      	ldr	r3, [r0, #0]
 80240f0:	780c      	ldrb	r4, [r1, #0]
 80240f2:	3301      	adds	r3, #1
 80240f4:	2c00      	cmp	r4, #0
 80240f6:	d102      	bne.n	80240fe <__match+0x12>
 80240f8:	6003      	str	r3, [r0, #0]
 80240fa:	2001      	movs	r0, #1
 80240fc:	bd30      	pop	{r4, r5, pc}
 80240fe:	781a      	ldrb	r2, [r3, #0]
 8024100:	0015      	movs	r5, r2
 8024102:	3d41      	subs	r5, #65	@ 0x41
 8024104:	2d19      	cmp	r5, #25
 8024106:	d800      	bhi.n	802410a <__match+0x1e>
 8024108:	3220      	adds	r2, #32
 802410a:	3101      	adds	r1, #1
 802410c:	42a2      	cmp	r2, r4
 802410e:	d0ef      	beq.n	80240f0 <__match+0x4>
 8024110:	2000      	movs	r0, #0
 8024112:	e7f3      	b.n	80240fc <__match+0x10>

08024114 <__hexnan>:
 8024114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024116:	680b      	ldr	r3, [r1, #0]
 8024118:	b08b      	sub	sp, #44	@ 0x2c
 802411a:	9201      	str	r2, [sp, #4]
 802411c:	9901      	ldr	r1, [sp, #4]
 802411e:	115a      	asrs	r2, r3, #5
 8024120:	0092      	lsls	r2, r2, #2
 8024122:	188a      	adds	r2, r1, r2
 8024124:	9202      	str	r2, [sp, #8]
 8024126:	0019      	movs	r1, r3
 8024128:	221f      	movs	r2, #31
 802412a:	4011      	ands	r1, r2
 802412c:	9008      	str	r0, [sp, #32]
 802412e:	9106      	str	r1, [sp, #24]
 8024130:	4213      	tst	r3, r2
 8024132:	d002      	beq.n	802413a <__hexnan+0x26>
 8024134:	9b02      	ldr	r3, [sp, #8]
 8024136:	3304      	adds	r3, #4
 8024138:	9302      	str	r3, [sp, #8]
 802413a:	9b02      	ldr	r3, [sp, #8]
 802413c:	2500      	movs	r5, #0
 802413e:	1f1f      	subs	r7, r3, #4
 8024140:	003e      	movs	r6, r7
 8024142:	003c      	movs	r4, r7
 8024144:	9b08      	ldr	r3, [sp, #32]
 8024146:	603d      	str	r5, [r7, #0]
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	9507      	str	r5, [sp, #28]
 802414c:	9305      	str	r3, [sp, #20]
 802414e:	9503      	str	r5, [sp, #12]
 8024150:	9b05      	ldr	r3, [sp, #20]
 8024152:	3301      	adds	r3, #1
 8024154:	9309      	str	r3, [sp, #36]	@ 0x24
 8024156:	9b05      	ldr	r3, [sp, #20]
 8024158:	785b      	ldrb	r3, [r3, #1]
 802415a:	9304      	str	r3, [sp, #16]
 802415c:	2b00      	cmp	r3, #0
 802415e:	d028      	beq.n	80241b2 <__hexnan+0x9e>
 8024160:	9804      	ldr	r0, [sp, #16]
 8024162:	f7ff fd78 	bl	8023c56 <__hexdig_fun>
 8024166:	2800      	cmp	r0, #0
 8024168:	d155      	bne.n	8024216 <__hexnan+0x102>
 802416a:	9b04      	ldr	r3, [sp, #16]
 802416c:	2b20      	cmp	r3, #32
 802416e:	d819      	bhi.n	80241a4 <__hexnan+0x90>
 8024170:	9b03      	ldr	r3, [sp, #12]
 8024172:	9a07      	ldr	r2, [sp, #28]
 8024174:	4293      	cmp	r3, r2
 8024176:	dd12      	ble.n	802419e <__hexnan+0x8a>
 8024178:	42b4      	cmp	r4, r6
 802417a:	d206      	bcs.n	802418a <__hexnan+0x76>
 802417c:	2d07      	cmp	r5, #7
 802417e:	dc04      	bgt.n	802418a <__hexnan+0x76>
 8024180:	002a      	movs	r2, r5
 8024182:	0031      	movs	r1, r6
 8024184:	0020      	movs	r0, r4
 8024186:	f7ff ff9f 	bl	80240c8 <L_shift>
 802418a:	9b01      	ldr	r3, [sp, #4]
 802418c:	2508      	movs	r5, #8
 802418e:	429c      	cmp	r4, r3
 8024190:	d905      	bls.n	802419e <__hexnan+0x8a>
 8024192:	1f26      	subs	r6, r4, #4
 8024194:	2500      	movs	r5, #0
 8024196:	0034      	movs	r4, r6
 8024198:	9b03      	ldr	r3, [sp, #12]
 802419a:	6035      	str	r5, [r6, #0]
 802419c:	9307      	str	r3, [sp, #28]
 802419e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241a0:	9305      	str	r3, [sp, #20]
 80241a2:	e7d5      	b.n	8024150 <__hexnan+0x3c>
 80241a4:	9b04      	ldr	r3, [sp, #16]
 80241a6:	2b29      	cmp	r3, #41	@ 0x29
 80241a8:	d15a      	bne.n	8024260 <__hexnan+0x14c>
 80241aa:	9b05      	ldr	r3, [sp, #20]
 80241ac:	9a08      	ldr	r2, [sp, #32]
 80241ae:	3302      	adds	r3, #2
 80241b0:	6013      	str	r3, [r2, #0]
 80241b2:	9b03      	ldr	r3, [sp, #12]
 80241b4:	2b00      	cmp	r3, #0
 80241b6:	d053      	beq.n	8024260 <__hexnan+0x14c>
 80241b8:	42b4      	cmp	r4, r6
 80241ba:	d206      	bcs.n	80241ca <__hexnan+0xb6>
 80241bc:	2d07      	cmp	r5, #7
 80241be:	dc04      	bgt.n	80241ca <__hexnan+0xb6>
 80241c0:	002a      	movs	r2, r5
 80241c2:	0031      	movs	r1, r6
 80241c4:	0020      	movs	r0, r4
 80241c6:	f7ff ff7f 	bl	80240c8 <L_shift>
 80241ca:	9b01      	ldr	r3, [sp, #4]
 80241cc:	429c      	cmp	r4, r3
 80241ce:	d936      	bls.n	802423e <__hexnan+0x12a>
 80241d0:	001a      	movs	r2, r3
 80241d2:	0023      	movs	r3, r4
 80241d4:	cb02      	ldmia	r3!, {r1}
 80241d6:	c202      	stmia	r2!, {r1}
 80241d8:	429f      	cmp	r7, r3
 80241da:	d2fb      	bcs.n	80241d4 <__hexnan+0xc0>
 80241dc:	9b02      	ldr	r3, [sp, #8]
 80241de:	1c61      	adds	r1, r4, #1
 80241e0:	1eda      	subs	r2, r3, #3
 80241e2:	2304      	movs	r3, #4
 80241e4:	4291      	cmp	r1, r2
 80241e6:	d805      	bhi.n	80241f4 <__hexnan+0xe0>
 80241e8:	9b02      	ldr	r3, [sp, #8]
 80241ea:	3b04      	subs	r3, #4
 80241ec:	1b1b      	subs	r3, r3, r4
 80241ee:	089b      	lsrs	r3, r3, #2
 80241f0:	3301      	adds	r3, #1
 80241f2:	009b      	lsls	r3, r3, #2
 80241f4:	9a01      	ldr	r2, [sp, #4]
 80241f6:	18d3      	adds	r3, r2, r3
 80241f8:	2200      	movs	r2, #0
 80241fa:	c304      	stmia	r3!, {r2}
 80241fc:	429f      	cmp	r7, r3
 80241fe:	d2fc      	bcs.n	80241fa <__hexnan+0xe6>
 8024200:	683b      	ldr	r3, [r7, #0]
 8024202:	2b00      	cmp	r3, #0
 8024204:	d104      	bne.n	8024210 <__hexnan+0xfc>
 8024206:	9b01      	ldr	r3, [sp, #4]
 8024208:	429f      	cmp	r7, r3
 802420a:	d127      	bne.n	802425c <__hexnan+0x148>
 802420c:	2301      	movs	r3, #1
 802420e:	603b      	str	r3, [r7, #0]
 8024210:	2005      	movs	r0, #5
 8024212:	b00b      	add	sp, #44	@ 0x2c
 8024214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024216:	9b03      	ldr	r3, [sp, #12]
 8024218:	3501      	adds	r5, #1
 802421a:	3301      	adds	r3, #1
 802421c:	9303      	str	r3, [sp, #12]
 802421e:	2d08      	cmp	r5, #8
 8024220:	dd06      	ble.n	8024230 <__hexnan+0x11c>
 8024222:	9b01      	ldr	r3, [sp, #4]
 8024224:	429c      	cmp	r4, r3
 8024226:	d9ba      	bls.n	802419e <__hexnan+0x8a>
 8024228:	2300      	movs	r3, #0
 802422a:	2501      	movs	r5, #1
 802422c:	3c04      	subs	r4, #4
 802422e:	6023      	str	r3, [r4, #0]
 8024230:	220f      	movs	r2, #15
 8024232:	6823      	ldr	r3, [r4, #0]
 8024234:	4010      	ands	r0, r2
 8024236:	011b      	lsls	r3, r3, #4
 8024238:	4303      	orrs	r3, r0
 802423a:	6023      	str	r3, [r4, #0]
 802423c:	e7af      	b.n	802419e <__hexnan+0x8a>
 802423e:	9b06      	ldr	r3, [sp, #24]
 8024240:	2b00      	cmp	r3, #0
 8024242:	d0dd      	beq.n	8024200 <__hexnan+0xec>
 8024244:	2320      	movs	r3, #32
 8024246:	9a06      	ldr	r2, [sp, #24]
 8024248:	9902      	ldr	r1, [sp, #8]
 802424a:	1a9b      	subs	r3, r3, r2
 802424c:	2201      	movs	r2, #1
 802424e:	4252      	negs	r2, r2
 8024250:	40da      	lsrs	r2, r3
 8024252:	3904      	subs	r1, #4
 8024254:	680b      	ldr	r3, [r1, #0]
 8024256:	4013      	ands	r3, r2
 8024258:	600b      	str	r3, [r1, #0]
 802425a:	e7d1      	b.n	8024200 <__hexnan+0xec>
 802425c:	3f04      	subs	r7, #4
 802425e:	e7cf      	b.n	8024200 <__hexnan+0xec>
 8024260:	2004      	movs	r0, #4
 8024262:	e7d6      	b.n	8024212 <__hexnan+0xfe>

08024264 <malloc>:
 8024264:	b510      	push	{r4, lr}
 8024266:	4b03      	ldr	r3, [pc, #12]	@ (8024274 <malloc+0x10>)
 8024268:	0001      	movs	r1, r0
 802426a:	6818      	ldr	r0, [r3, #0]
 802426c:	f000 f826 	bl	80242bc <_malloc_r>
 8024270:	bd10      	pop	{r4, pc}
 8024272:	46c0      	nop			@ (mov r8, r8)
 8024274:	200003e4 	.word	0x200003e4

08024278 <sbrk_aligned>:
 8024278:	b570      	push	{r4, r5, r6, lr}
 802427a:	4e0f      	ldr	r6, [pc, #60]	@ (80242b8 <sbrk_aligned+0x40>)
 802427c:	000d      	movs	r5, r1
 802427e:	6831      	ldr	r1, [r6, #0]
 8024280:	0004      	movs	r4, r0
 8024282:	2900      	cmp	r1, #0
 8024284:	d102      	bne.n	802428c <sbrk_aligned+0x14>
 8024286:	f001 f989 	bl	802559c <_sbrk_r>
 802428a:	6030      	str	r0, [r6, #0]
 802428c:	0029      	movs	r1, r5
 802428e:	0020      	movs	r0, r4
 8024290:	f001 f984 	bl	802559c <_sbrk_r>
 8024294:	1c43      	adds	r3, r0, #1
 8024296:	d103      	bne.n	80242a0 <sbrk_aligned+0x28>
 8024298:	2501      	movs	r5, #1
 802429a:	426d      	negs	r5, r5
 802429c:	0028      	movs	r0, r5
 802429e:	bd70      	pop	{r4, r5, r6, pc}
 80242a0:	2303      	movs	r3, #3
 80242a2:	1cc5      	adds	r5, r0, #3
 80242a4:	439d      	bics	r5, r3
 80242a6:	42a8      	cmp	r0, r5
 80242a8:	d0f8      	beq.n	802429c <sbrk_aligned+0x24>
 80242aa:	1a29      	subs	r1, r5, r0
 80242ac:	0020      	movs	r0, r4
 80242ae:	f001 f975 	bl	802559c <_sbrk_r>
 80242b2:	3001      	adds	r0, #1
 80242b4:	d1f2      	bne.n	802429c <sbrk_aligned+0x24>
 80242b6:	e7ef      	b.n	8024298 <sbrk_aligned+0x20>
 80242b8:	20003594 	.word	0x20003594

080242bc <_malloc_r>:
 80242bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80242be:	2203      	movs	r2, #3
 80242c0:	1ccb      	adds	r3, r1, #3
 80242c2:	4393      	bics	r3, r2
 80242c4:	3308      	adds	r3, #8
 80242c6:	0005      	movs	r5, r0
 80242c8:	001f      	movs	r7, r3
 80242ca:	2b0c      	cmp	r3, #12
 80242cc:	d234      	bcs.n	8024338 <_malloc_r+0x7c>
 80242ce:	270c      	movs	r7, #12
 80242d0:	42b9      	cmp	r1, r7
 80242d2:	d833      	bhi.n	802433c <_malloc_r+0x80>
 80242d4:	0028      	movs	r0, r5
 80242d6:	f000 f883 	bl	80243e0 <__malloc_lock>
 80242da:	4e37      	ldr	r6, [pc, #220]	@ (80243b8 <_malloc_r+0xfc>)
 80242dc:	6833      	ldr	r3, [r6, #0]
 80242de:	001c      	movs	r4, r3
 80242e0:	2c00      	cmp	r4, #0
 80242e2:	d12f      	bne.n	8024344 <_malloc_r+0x88>
 80242e4:	0039      	movs	r1, r7
 80242e6:	0028      	movs	r0, r5
 80242e8:	f7ff ffc6 	bl	8024278 <sbrk_aligned>
 80242ec:	0004      	movs	r4, r0
 80242ee:	1c43      	adds	r3, r0, #1
 80242f0:	d15f      	bne.n	80243b2 <_malloc_r+0xf6>
 80242f2:	6834      	ldr	r4, [r6, #0]
 80242f4:	9400      	str	r4, [sp, #0]
 80242f6:	9b00      	ldr	r3, [sp, #0]
 80242f8:	2b00      	cmp	r3, #0
 80242fa:	d14a      	bne.n	8024392 <_malloc_r+0xd6>
 80242fc:	2c00      	cmp	r4, #0
 80242fe:	d052      	beq.n	80243a6 <_malloc_r+0xea>
 8024300:	6823      	ldr	r3, [r4, #0]
 8024302:	0028      	movs	r0, r5
 8024304:	18e3      	adds	r3, r4, r3
 8024306:	9900      	ldr	r1, [sp, #0]
 8024308:	9301      	str	r3, [sp, #4]
 802430a:	f001 f947 	bl	802559c <_sbrk_r>
 802430e:	9b01      	ldr	r3, [sp, #4]
 8024310:	4283      	cmp	r3, r0
 8024312:	d148      	bne.n	80243a6 <_malloc_r+0xea>
 8024314:	6823      	ldr	r3, [r4, #0]
 8024316:	0028      	movs	r0, r5
 8024318:	1aff      	subs	r7, r7, r3
 802431a:	0039      	movs	r1, r7
 802431c:	f7ff ffac 	bl	8024278 <sbrk_aligned>
 8024320:	3001      	adds	r0, #1
 8024322:	d040      	beq.n	80243a6 <_malloc_r+0xea>
 8024324:	6823      	ldr	r3, [r4, #0]
 8024326:	19db      	adds	r3, r3, r7
 8024328:	6023      	str	r3, [r4, #0]
 802432a:	6833      	ldr	r3, [r6, #0]
 802432c:	685a      	ldr	r2, [r3, #4]
 802432e:	2a00      	cmp	r2, #0
 8024330:	d133      	bne.n	802439a <_malloc_r+0xde>
 8024332:	9b00      	ldr	r3, [sp, #0]
 8024334:	6033      	str	r3, [r6, #0]
 8024336:	e019      	b.n	802436c <_malloc_r+0xb0>
 8024338:	2b00      	cmp	r3, #0
 802433a:	dac9      	bge.n	80242d0 <_malloc_r+0x14>
 802433c:	230c      	movs	r3, #12
 802433e:	602b      	str	r3, [r5, #0]
 8024340:	2000      	movs	r0, #0
 8024342:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024344:	6821      	ldr	r1, [r4, #0]
 8024346:	1bc9      	subs	r1, r1, r7
 8024348:	d420      	bmi.n	802438c <_malloc_r+0xd0>
 802434a:	290b      	cmp	r1, #11
 802434c:	d90a      	bls.n	8024364 <_malloc_r+0xa8>
 802434e:	19e2      	adds	r2, r4, r7
 8024350:	6027      	str	r7, [r4, #0]
 8024352:	42a3      	cmp	r3, r4
 8024354:	d104      	bne.n	8024360 <_malloc_r+0xa4>
 8024356:	6032      	str	r2, [r6, #0]
 8024358:	6863      	ldr	r3, [r4, #4]
 802435a:	6011      	str	r1, [r2, #0]
 802435c:	6053      	str	r3, [r2, #4]
 802435e:	e005      	b.n	802436c <_malloc_r+0xb0>
 8024360:	605a      	str	r2, [r3, #4]
 8024362:	e7f9      	b.n	8024358 <_malloc_r+0x9c>
 8024364:	6862      	ldr	r2, [r4, #4]
 8024366:	42a3      	cmp	r3, r4
 8024368:	d10e      	bne.n	8024388 <_malloc_r+0xcc>
 802436a:	6032      	str	r2, [r6, #0]
 802436c:	0028      	movs	r0, r5
 802436e:	f000 f83f 	bl	80243f0 <__malloc_unlock>
 8024372:	0020      	movs	r0, r4
 8024374:	2207      	movs	r2, #7
 8024376:	300b      	adds	r0, #11
 8024378:	1d23      	adds	r3, r4, #4
 802437a:	4390      	bics	r0, r2
 802437c:	1ac2      	subs	r2, r0, r3
 802437e:	4298      	cmp	r0, r3
 8024380:	d0df      	beq.n	8024342 <_malloc_r+0x86>
 8024382:	1a1b      	subs	r3, r3, r0
 8024384:	50a3      	str	r3, [r4, r2]
 8024386:	e7dc      	b.n	8024342 <_malloc_r+0x86>
 8024388:	605a      	str	r2, [r3, #4]
 802438a:	e7ef      	b.n	802436c <_malloc_r+0xb0>
 802438c:	0023      	movs	r3, r4
 802438e:	6864      	ldr	r4, [r4, #4]
 8024390:	e7a6      	b.n	80242e0 <_malloc_r+0x24>
 8024392:	9c00      	ldr	r4, [sp, #0]
 8024394:	6863      	ldr	r3, [r4, #4]
 8024396:	9300      	str	r3, [sp, #0]
 8024398:	e7ad      	b.n	80242f6 <_malloc_r+0x3a>
 802439a:	001a      	movs	r2, r3
 802439c:	685b      	ldr	r3, [r3, #4]
 802439e:	42a3      	cmp	r3, r4
 80243a0:	d1fb      	bne.n	802439a <_malloc_r+0xde>
 80243a2:	2300      	movs	r3, #0
 80243a4:	e7da      	b.n	802435c <_malloc_r+0xa0>
 80243a6:	230c      	movs	r3, #12
 80243a8:	0028      	movs	r0, r5
 80243aa:	602b      	str	r3, [r5, #0]
 80243ac:	f000 f820 	bl	80243f0 <__malloc_unlock>
 80243b0:	e7c6      	b.n	8024340 <_malloc_r+0x84>
 80243b2:	6007      	str	r7, [r0, #0]
 80243b4:	e7da      	b.n	802436c <_malloc_r+0xb0>
 80243b6:	46c0      	nop			@ (mov r8, r8)
 80243b8:	20003598 	.word	0x20003598

080243bc <__ascii_mbtowc>:
 80243bc:	b082      	sub	sp, #8
 80243be:	2900      	cmp	r1, #0
 80243c0:	d100      	bne.n	80243c4 <__ascii_mbtowc+0x8>
 80243c2:	a901      	add	r1, sp, #4
 80243c4:	1e10      	subs	r0, r2, #0
 80243c6:	d006      	beq.n	80243d6 <__ascii_mbtowc+0x1a>
 80243c8:	2b00      	cmp	r3, #0
 80243ca:	d006      	beq.n	80243da <__ascii_mbtowc+0x1e>
 80243cc:	7813      	ldrb	r3, [r2, #0]
 80243ce:	600b      	str	r3, [r1, #0]
 80243d0:	7810      	ldrb	r0, [r2, #0]
 80243d2:	1e43      	subs	r3, r0, #1
 80243d4:	4198      	sbcs	r0, r3
 80243d6:	b002      	add	sp, #8
 80243d8:	4770      	bx	lr
 80243da:	2002      	movs	r0, #2
 80243dc:	4240      	negs	r0, r0
 80243de:	e7fa      	b.n	80243d6 <__ascii_mbtowc+0x1a>

080243e0 <__malloc_lock>:
 80243e0:	b510      	push	{r4, lr}
 80243e2:	4802      	ldr	r0, [pc, #8]	@ (80243ec <__malloc_lock+0xc>)
 80243e4:	f7fe fcfb 	bl	8022dde <__retarget_lock_acquire_recursive>
 80243e8:	bd10      	pop	{r4, pc}
 80243ea:	46c0      	nop			@ (mov r8, r8)
 80243ec:	20003590 	.word	0x20003590

080243f0 <__malloc_unlock>:
 80243f0:	b510      	push	{r4, lr}
 80243f2:	4802      	ldr	r0, [pc, #8]	@ (80243fc <__malloc_unlock+0xc>)
 80243f4:	f7fe fcf4 	bl	8022de0 <__retarget_lock_release_recursive>
 80243f8:	bd10      	pop	{r4, pc}
 80243fa:	46c0      	nop			@ (mov r8, r8)
 80243fc:	20003590 	.word	0x20003590

08024400 <_Balloc>:
 8024400:	b570      	push	{r4, r5, r6, lr}
 8024402:	69c5      	ldr	r5, [r0, #28]
 8024404:	0006      	movs	r6, r0
 8024406:	000c      	movs	r4, r1
 8024408:	2d00      	cmp	r5, #0
 802440a:	d10e      	bne.n	802442a <_Balloc+0x2a>
 802440c:	2010      	movs	r0, #16
 802440e:	f7ff ff29 	bl	8024264 <malloc>
 8024412:	1e02      	subs	r2, r0, #0
 8024414:	61f0      	str	r0, [r6, #28]
 8024416:	d104      	bne.n	8024422 <_Balloc+0x22>
 8024418:	216b      	movs	r1, #107	@ 0x6b
 802441a:	4b19      	ldr	r3, [pc, #100]	@ (8024480 <_Balloc+0x80>)
 802441c:	4819      	ldr	r0, [pc, #100]	@ (8024484 <_Balloc+0x84>)
 802441e:	f001 f8cf 	bl	80255c0 <__assert_func>
 8024422:	6045      	str	r5, [r0, #4]
 8024424:	6085      	str	r5, [r0, #8]
 8024426:	6005      	str	r5, [r0, #0]
 8024428:	60c5      	str	r5, [r0, #12]
 802442a:	69f5      	ldr	r5, [r6, #28]
 802442c:	68eb      	ldr	r3, [r5, #12]
 802442e:	2b00      	cmp	r3, #0
 8024430:	d013      	beq.n	802445a <_Balloc+0x5a>
 8024432:	69f3      	ldr	r3, [r6, #28]
 8024434:	00a2      	lsls	r2, r4, #2
 8024436:	68db      	ldr	r3, [r3, #12]
 8024438:	189b      	adds	r3, r3, r2
 802443a:	6818      	ldr	r0, [r3, #0]
 802443c:	2800      	cmp	r0, #0
 802443e:	d118      	bne.n	8024472 <_Balloc+0x72>
 8024440:	2101      	movs	r1, #1
 8024442:	000d      	movs	r5, r1
 8024444:	40a5      	lsls	r5, r4
 8024446:	1d6a      	adds	r2, r5, #5
 8024448:	0030      	movs	r0, r6
 802444a:	0092      	lsls	r2, r2, #2
 802444c:	f001 f8d6 	bl	80255fc <_calloc_r>
 8024450:	2800      	cmp	r0, #0
 8024452:	d00c      	beq.n	802446e <_Balloc+0x6e>
 8024454:	6044      	str	r4, [r0, #4]
 8024456:	6085      	str	r5, [r0, #8]
 8024458:	e00d      	b.n	8024476 <_Balloc+0x76>
 802445a:	2221      	movs	r2, #33	@ 0x21
 802445c:	2104      	movs	r1, #4
 802445e:	0030      	movs	r0, r6
 8024460:	f001 f8cc 	bl	80255fc <_calloc_r>
 8024464:	69f3      	ldr	r3, [r6, #28]
 8024466:	60e8      	str	r0, [r5, #12]
 8024468:	68db      	ldr	r3, [r3, #12]
 802446a:	2b00      	cmp	r3, #0
 802446c:	d1e1      	bne.n	8024432 <_Balloc+0x32>
 802446e:	2000      	movs	r0, #0
 8024470:	bd70      	pop	{r4, r5, r6, pc}
 8024472:	6802      	ldr	r2, [r0, #0]
 8024474:	601a      	str	r2, [r3, #0]
 8024476:	2300      	movs	r3, #0
 8024478:	6103      	str	r3, [r0, #16]
 802447a:	60c3      	str	r3, [r0, #12]
 802447c:	e7f8      	b.n	8024470 <_Balloc+0x70>
 802447e:	46c0      	nop			@ (mov r8, r8)
 8024480:	0802987a 	.word	0x0802987a
 8024484:	0802995a 	.word	0x0802995a

08024488 <_Bfree>:
 8024488:	b570      	push	{r4, r5, r6, lr}
 802448a:	69c6      	ldr	r6, [r0, #28]
 802448c:	0005      	movs	r5, r0
 802448e:	000c      	movs	r4, r1
 8024490:	2e00      	cmp	r6, #0
 8024492:	d10e      	bne.n	80244b2 <_Bfree+0x2a>
 8024494:	2010      	movs	r0, #16
 8024496:	f7ff fee5 	bl	8024264 <malloc>
 802449a:	1e02      	subs	r2, r0, #0
 802449c:	61e8      	str	r0, [r5, #28]
 802449e:	d104      	bne.n	80244aa <_Bfree+0x22>
 80244a0:	218f      	movs	r1, #143	@ 0x8f
 80244a2:	4b09      	ldr	r3, [pc, #36]	@ (80244c8 <_Bfree+0x40>)
 80244a4:	4809      	ldr	r0, [pc, #36]	@ (80244cc <_Bfree+0x44>)
 80244a6:	f001 f88b 	bl	80255c0 <__assert_func>
 80244aa:	6046      	str	r6, [r0, #4]
 80244ac:	6086      	str	r6, [r0, #8]
 80244ae:	6006      	str	r6, [r0, #0]
 80244b0:	60c6      	str	r6, [r0, #12]
 80244b2:	2c00      	cmp	r4, #0
 80244b4:	d007      	beq.n	80244c6 <_Bfree+0x3e>
 80244b6:	69eb      	ldr	r3, [r5, #28]
 80244b8:	6862      	ldr	r2, [r4, #4]
 80244ba:	68db      	ldr	r3, [r3, #12]
 80244bc:	0092      	lsls	r2, r2, #2
 80244be:	189b      	adds	r3, r3, r2
 80244c0:	681a      	ldr	r2, [r3, #0]
 80244c2:	6022      	str	r2, [r4, #0]
 80244c4:	601c      	str	r4, [r3, #0]
 80244c6:	bd70      	pop	{r4, r5, r6, pc}
 80244c8:	0802987a 	.word	0x0802987a
 80244cc:	0802995a 	.word	0x0802995a

080244d0 <__multadd>:
 80244d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80244d2:	000f      	movs	r7, r1
 80244d4:	9001      	str	r0, [sp, #4]
 80244d6:	000c      	movs	r4, r1
 80244d8:	001e      	movs	r6, r3
 80244da:	2000      	movs	r0, #0
 80244dc:	690d      	ldr	r5, [r1, #16]
 80244de:	3714      	adds	r7, #20
 80244e0:	683b      	ldr	r3, [r7, #0]
 80244e2:	3001      	adds	r0, #1
 80244e4:	b299      	uxth	r1, r3
 80244e6:	4351      	muls	r1, r2
 80244e8:	0c1b      	lsrs	r3, r3, #16
 80244ea:	4353      	muls	r3, r2
 80244ec:	1989      	adds	r1, r1, r6
 80244ee:	0c0e      	lsrs	r6, r1, #16
 80244f0:	199b      	adds	r3, r3, r6
 80244f2:	0c1e      	lsrs	r6, r3, #16
 80244f4:	b289      	uxth	r1, r1
 80244f6:	041b      	lsls	r3, r3, #16
 80244f8:	185b      	adds	r3, r3, r1
 80244fa:	c708      	stmia	r7!, {r3}
 80244fc:	4285      	cmp	r5, r0
 80244fe:	dcef      	bgt.n	80244e0 <__multadd+0x10>
 8024500:	2e00      	cmp	r6, #0
 8024502:	d022      	beq.n	802454a <__multadd+0x7a>
 8024504:	68a3      	ldr	r3, [r4, #8]
 8024506:	42ab      	cmp	r3, r5
 8024508:	dc19      	bgt.n	802453e <__multadd+0x6e>
 802450a:	6861      	ldr	r1, [r4, #4]
 802450c:	9801      	ldr	r0, [sp, #4]
 802450e:	3101      	adds	r1, #1
 8024510:	f7ff ff76 	bl	8024400 <_Balloc>
 8024514:	1e07      	subs	r7, r0, #0
 8024516:	d105      	bne.n	8024524 <__multadd+0x54>
 8024518:	003a      	movs	r2, r7
 802451a:	21ba      	movs	r1, #186	@ 0xba
 802451c:	4b0c      	ldr	r3, [pc, #48]	@ (8024550 <__multadd+0x80>)
 802451e:	480d      	ldr	r0, [pc, #52]	@ (8024554 <__multadd+0x84>)
 8024520:	f001 f84e 	bl	80255c0 <__assert_func>
 8024524:	0021      	movs	r1, r4
 8024526:	6922      	ldr	r2, [r4, #16]
 8024528:	310c      	adds	r1, #12
 802452a:	3202      	adds	r2, #2
 802452c:	0092      	lsls	r2, r2, #2
 802452e:	300c      	adds	r0, #12
 8024530:	f7fe fc62 	bl	8022df8 <memcpy>
 8024534:	0021      	movs	r1, r4
 8024536:	9801      	ldr	r0, [sp, #4]
 8024538:	f7ff ffa6 	bl	8024488 <_Bfree>
 802453c:	003c      	movs	r4, r7
 802453e:	1d2b      	adds	r3, r5, #4
 8024540:	009b      	lsls	r3, r3, #2
 8024542:	18e3      	adds	r3, r4, r3
 8024544:	3501      	adds	r5, #1
 8024546:	605e      	str	r6, [r3, #4]
 8024548:	6125      	str	r5, [r4, #16]
 802454a:	0020      	movs	r0, r4
 802454c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802454e:	46c0      	nop			@ (mov r8, r8)
 8024550:	080298e9 	.word	0x080298e9
 8024554:	0802995a 	.word	0x0802995a

08024558 <__s2b>:
 8024558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802455a:	0007      	movs	r7, r0
 802455c:	0018      	movs	r0, r3
 802455e:	000c      	movs	r4, r1
 8024560:	3008      	adds	r0, #8
 8024562:	2109      	movs	r1, #9
 8024564:	9301      	str	r3, [sp, #4]
 8024566:	0015      	movs	r5, r2
 8024568:	f7db fea6 	bl	80002b8 <__divsi3>
 802456c:	2301      	movs	r3, #1
 802456e:	2100      	movs	r1, #0
 8024570:	4283      	cmp	r3, r0
 8024572:	db0a      	blt.n	802458a <__s2b+0x32>
 8024574:	0038      	movs	r0, r7
 8024576:	f7ff ff43 	bl	8024400 <_Balloc>
 802457a:	1e01      	subs	r1, r0, #0
 802457c:	d108      	bne.n	8024590 <__s2b+0x38>
 802457e:	000a      	movs	r2, r1
 8024580:	4b19      	ldr	r3, [pc, #100]	@ (80245e8 <__s2b+0x90>)
 8024582:	481a      	ldr	r0, [pc, #104]	@ (80245ec <__s2b+0x94>)
 8024584:	31d3      	adds	r1, #211	@ 0xd3
 8024586:	f001 f81b 	bl	80255c0 <__assert_func>
 802458a:	005b      	lsls	r3, r3, #1
 802458c:	3101      	adds	r1, #1
 802458e:	e7ef      	b.n	8024570 <__s2b+0x18>
 8024590:	9b08      	ldr	r3, [sp, #32]
 8024592:	6143      	str	r3, [r0, #20]
 8024594:	2301      	movs	r3, #1
 8024596:	6103      	str	r3, [r0, #16]
 8024598:	2d09      	cmp	r5, #9
 802459a:	dd18      	ble.n	80245ce <__s2b+0x76>
 802459c:	0023      	movs	r3, r4
 802459e:	3309      	adds	r3, #9
 80245a0:	001e      	movs	r6, r3
 80245a2:	9300      	str	r3, [sp, #0]
 80245a4:	1964      	adds	r4, r4, r5
 80245a6:	7833      	ldrb	r3, [r6, #0]
 80245a8:	220a      	movs	r2, #10
 80245aa:	0038      	movs	r0, r7
 80245ac:	3b30      	subs	r3, #48	@ 0x30
 80245ae:	f7ff ff8f 	bl	80244d0 <__multadd>
 80245b2:	3601      	adds	r6, #1
 80245b4:	0001      	movs	r1, r0
 80245b6:	42a6      	cmp	r6, r4
 80245b8:	d1f5      	bne.n	80245a6 <__s2b+0x4e>
 80245ba:	002c      	movs	r4, r5
 80245bc:	9b00      	ldr	r3, [sp, #0]
 80245be:	3c08      	subs	r4, #8
 80245c0:	191c      	adds	r4, r3, r4
 80245c2:	002e      	movs	r6, r5
 80245c4:	9b01      	ldr	r3, [sp, #4]
 80245c6:	429e      	cmp	r6, r3
 80245c8:	db04      	blt.n	80245d4 <__s2b+0x7c>
 80245ca:	0008      	movs	r0, r1
 80245cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80245ce:	2509      	movs	r5, #9
 80245d0:	340a      	adds	r4, #10
 80245d2:	e7f6      	b.n	80245c2 <__s2b+0x6a>
 80245d4:	1b63      	subs	r3, r4, r5
 80245d6:	5d9b      	ldrb	r3, [r3, r6]
 80245d8:	220a      	movs	r2, #10
 80245da:	0038      	movs	r0, r7
 80245dc:	3b30      	subs	r3, #48	@ 0x30
 80245de:	f7ff ff77 	bl	80244d0 <__multadd>
 80245e2:	3601      	adds	r6, #1
 80245e4:	0001      	movs	r1, r0
 80245e6:	e7ed      	b.n	80245c4 <__s2b+0x6c>
 80245e8:	080298e9 	.word	0x080298e9
 80245ec:	0802995a 	.word	0x0802995a

080245f0 <__hi0bits>:
 80245f0:	2280      	movs	r2, #128	@ 0x80
 80245f2:	0003      	movs	r3, r0
 80245f4:	0252      	lsls	r2, r2, #9
 80245f6:	2000      	movs	r0, #0
 80245f8:	4293      	cmp	r3, r2
 80245fa:	d201      	bcs.n	8024600 <__hi0bits+0x10>
 80245fc:	041b      	lsls	r3, r3, #16
 80245fe:	3010      	adds	r0, #16
 8024600:	2280      	movs	r2, #128	@ 0x80
 8024602:	0452      	lsls	r2, r2, #17
 8024604:	4293      	cmp	r3, r2
 8024606:	d201      	bcs.n	802460c <__hi0bits+0x1c>
 8024608:	3008      	adds	r0, #8
 802460a:	021b      	lsls	r3, r3, #8
 802460c:	2280      	movs	r2, #128	@ 0x80
 802460e:	0552      	lsls	r2, r2, #21
 8024610:	4293      	cmp	r3, r2
 8024612:	d201      	bcs.n	8024618 <__hi0bits+0x28>
 8024614:	3004      	adds	r0, #4
 8024616:	011b      	lsls	r3, r3, #4
 8024618:	2280      	movs	r2, #128	@ 0x80
 802461a:	05d2      	lsls	r2, r2, #23
 802461c:	4293      	cmp	r3, r2
 802461e:	d201      	bcs.n	8024624 <__hi0bits+0x34>
 8024620:	3002      	adds	r0, #2
 8024622:	009b      	lsls	r3, r3, #2
 8024624:	2b00      	cmp	r3, #0
 8024626:	db03      	blt.n	8024630 <__hi0bits+0x40>
 8024628:	3001      	adds	r0, #1
 802462a:	4213      	tst	r3, r2
 802462c:	d100      	bne.n	8024630 <__hi0bits+0x40>
 802462e:	2020      	movs	r0, #32
 8024630:	4770      	bx	lr

08024632 <__lo0bits>:
 8024632:	6803      	ldr	r3, [r0, #0]
 8024634:	0001      	movs	r1, r0
 8024636:	2207      	movs	r2, #7
 8024638:	0018      	movs	r0, r3
 802463a:	4010      	ands	r0, r2
 802463c:	4213      	tst	r3, r2
 802463e:	d00d      	beq.n	802465c <__lo0bits+0x2a>
 8024640:	3a06      	subs	r2, #6
 8024642:	2000      	movs	r0, #0
 8024644:	4213      	tst	r3, r2
 8024646:	d105      	bne.n	8024654 <__lo0bits+0x22>
 8024648:	3002      	adds	r0, #2
 802464a:	4203      	tst	r3, r0
 802464c:	d003      	beq.n	8024656 <__lo0bits+0x24>
 802464e:	40d3      	lsrs	r3, r2
 8024650:	0010      	movs	r0, r2
 8024652:	600b      	str	r3, [r1, #0]
 8024654:	4770      	bx	lr
 8024656:	089b      	lsrs	r3, r3, #2
 8024658:	600b      	str	r3, [r1, #0]
 802465a:	e7fb      	b.n	8024654 <__lo0bits+0x22>
 802465c:	b29a      	uxth	r2, r3
 802465e:	2a00      	cmp	r2, #0
 8024660:	d101      	bne.n	8024666 <__lo0bits+0x34>
 8024662:	2010      	movs	r0, #16
 8024664:	0c1b      	lsrs	r3, r3, #16
 8024666:	b2da      	uxtb	r2, r3
 8024668:	2a00      	cmp	r2, #0
 802466a:	d101      	bne.n	8024670 <__lo0bits+0x3e>
 802466c:	3008      	adds	r0, #8
 802466e:	0a1b      	lsrs	r3, r3, #8
 8024670:	071a      	lsls	r2, r3, #28
 8024672:	d101      	bne.n	8024678 <__lo0bits+0x46>
 8024674:	3004      	adds	r0, #4
 8024676:	091b      	lsrs	r3, r3, #4
 8024678:	079a      	lsls	r2, r3, #30
 802467a:	d101      	bne.n	8024680 <__lo0bits+0x4e>
 802467c:	3002      	adds	r0, #2
 802467e:	089b      	lsrs	r3, r3, #2
 8024680:	07da      	lsls	r2, r3, #31
 8024682:	d4e9      	bmi.n	8024658 <__lo0bits+0x26>
 8024684:	3001      	adds	r0, #1
 8024686:	085b      	lsrs	r3, r3, #1
 8024688:	d1e6      	bne.n	8024658 <__lo0bits+0x26>
 802468a:	2020      	movs	r0, #32
 802468c:	e7e2      	b.n	8024654 <__lo0bits+0x22>
	...

08024690 <__i2b>:
 8024690:	b510      	push	{r4, lr}
 8024692:	000c      	movs	r4, r1
 8024694:	2101      	movs	r1, #1
 8024696:	f7ff feb3 	bl	8024400 <_Balloc>
 802469a:	2800      	cmp	r0, #0
 802469c:	d107      	bne.n	80246ae <__i2b+0x1e>
 802469e:	2146      	movs	r1, #70	@ 0x46
 80246a0:	4c05      	ldr	r4, [pc, #20]	@ (80246b8 <__i2b+0x28>)
 80246a2:	0002      	movs	r2, r0
 80246a4:	4b05      	ldr	r3, [pc, #20]	@ (80246bc <__i2b+0x2c>)
 80246a6:	0020      	movs	r0, r4
 80246a8:	31ff      	adds	r1, #255	@ 0xff
 80246aa:	f000 ff89 	bl	80255c0 <__assert_func>
 80246ae:	2301      	movs	r3, #1
 80246b0:	6144      	str	r4, [r0, #20]
 80246b2:	6103      	str	r3, [r0, #16]
 80246b4:	bd10      	pop	{r4, pc}
 80246b6:	46c0      	nop			@ (mov r8, r8)
 80246b8:	0802995a 	.word	0x0802995a
 80246bc:	080298e9 	.word	0x080298e9

080246c0 <__multiply>:
 80246c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80246c2:	0014      	movs	r4, r2
 80246c4:	690a      	ldr	r2, [r1, #16]
 80246c6:	6923      	ldr	r3, [r4, #16]
 80246c8:	000d      	movs	r5, r1
 80246ca:	b08b      	sub	sp, #44	@ 0x2c
 80246cc:	429a      	cmp	r2, r3
 80246ce:	db02      	blt.n	80246d6 <__multiply+0x16>
 80246d0:	0023      	movs	r3, r4
 80246d2:	000c      	movs	r4, r1
 80246d4:	001d      	movs	r5, r3
 80246d6:	6927      	ldr	r7, [r4, #16]
 80246d8:	692e      	ldr	r6, [r5, #16]
 80246da:	6861      	ldr	r1, [r4, #4]
 80246dc:	19bb      	adds	r3, r7, r6
 80246de:	9303      	str	r3, [sp, #12]
 80246e0:	68a3      	ldr	r3, [r4, #8]
 80246e2:	19ba      	adds	r2, r7, r6
 80246e4:	4293      	cmp	r3, r2
 80246e6:	da00      	bge.n	80246ea <__multiply+0x2a>
 80246e8:	3101      	adds	r1, #1
 80246ea:	f7ff fe89 	bl	8024400 <_Balloc>
 80246ee:	9002      	str	r0, [sp, #8]
 80246f0:	2800      	cmp	r0, #0
 80246f2:	d106      	bne.n	8024702 <__multiply+0x42>
 80246f4:	21b1      	movs	r1, #177	@ 0xb1
 80246f6:	4b49      	ldr	r3, [pc, #292]	@ (802481c <__multiply+0x15c>)
 80246f8:	4849      	ldr	r0, [pc, #292]	@ (8024820 <__multiply+0x160>)
 80246fa:	9a02      	ldr	r2, [sp, #8]
 80246fc:	0049      	lsls	r1, r1, #1
 80246fe:	f000 ff5f 	bl	80255c0 <__assert_func>
 8024702:	9b02      	ldr	r3, [sp, #8]
 8024704:	2200      	movs	r2, #0
 8024706:	3314      	adds	r3, #20
 8024708:	469c      	mov	ip, r3
 802470a:	19bb      	adds	r3, r7, r6
 802470c:	009b      	lsls	r3, r3, #2
 802470e:	4463      	add	r3, ip
 8024710:	9304      	str	r3, [sp, #16]
 8024712:	4663      	mov	r3, ip
 8024714:	9904      	ldr	r1, [sp, #16]
 8024716:	428b      	cmp	r3, r1
 8024718:	d32a      	bcc.n	8024770 <__multiply+0xb0>
 802471a:	0023      	movs	r3, r4
 802471c:	00bf      	lsls	r7, r7, #2
 802471e:	3314      	adds	r3, #20
 8024720:	3514      	adds	r5, #20
 8024722:	9308      	str	r3, [sp, #32]
 8024724:	00b6      	lsls	r6, r6, #2
 8024726:	19db      	adds	r3, r3, r7
 8024728:	9305      	str	r3, [sp, #20]
 802472a:	19ab      	adds	r3, r5, r6
 802472c:	9309      	str	r3, [sp, #36]	@ 0x24
 802472e:	2304      	movs	r3, #4
 8024730:	9306      	str	r3, [sp, #24]
 8024732:	0023      	movs	r3, r4
 8024734:	9a05      	ldr	r2, [sp, #20]
 8024736:	3315      	adds	r3, #21
 8024738:	9501      	str	r5, [sp, #4]
 802473a:	429a      	cmp	r2, r3
 802473c:	d305      	bcc.n	802474a <__multiply+0x8a>
 802473e:	1b13      	subs	r3, r2, r4
 8024740:	3b15      	subs	r3, #21
 8024742:	089b      	lsrs	r3, r3, #2
 8024744:	3301      	adds	r3, #1
 8024746:	009b      	lsls	r3, r3, #2
 8024748:	9306      	str	r3, [sp, #24]
 802474a:	9b01      	ldr	r3, [sp, #4]
 802474c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802474e:	4293      	cmp	r3, r2
 8024750:	d310      	bcc.n	8024774 <__multiply+0xb4>
 8024752:	9b03      	ldr	r3, [sp, #12]
 8024754:	2b00      	cmp	r3, #0
 8024756:	dd05      	ble.n	8024764 <__multiply+0xa4>
 8024758:	9b04      	ldr	r3, [sp, #16]
 802475a:	3b04      	subs	r3, #4
 802475c:	9304      	str	r3, [sp, #16]
 802475e:	681b      	ldr	r3, [r3, #0]
 8024760:	2b00      	cmp	r3, #0
 8024762:	d056      	beq.n	8024812 <__multiply+0x152>
 8024764:	9b02      	ldr	r3, [sp, #8]
 8024766:	9a03      	ldr	r2, [sp, #12]
 8024768:	0018      	movs	r0, r3
 802476a:	611a      	str	r2, [r3, #16]
 802476c:	b00b      	add	sp, #44	@ 0x2c
 802476e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024770:	c304      	stmia	r3!, {r2}
 8024772:	e7cf      	b.n	8024714 <__multiply+0x54>
 8024774:	9b01      	ldr	r3, [sp, #4]
 8024776:	6818      	ldr	r0, [r3, #0]
 8024778:	b280      	uxth	r0, r0
 802477a:	2800      	cmp	r0, #0
 802477c:	d01e      	beq.n	80247bc <__multiply+0xfc>
 802477e:	4667      	mov	r7, ip
 8024780:	2500      	movs	r5, #0
 8024782:	9e08      	ldr	r6, [sp, #32]
 8024784:	ce02      	ldmia	r6!, {r1}
 8024786:	683b      	ldr	r3, [r7, #0]
 8024788:	9307      	str	r3, [sp, #28]
 802478a:	b28b      	uxth	r3, r1
 802478c:	4343      	muls	r3, r0
 802478e:	001a      	movs	r2, r3
 8024790:	466b      	mov	r3, sp
 8024792:	0c09      	lsrs	r1, r1, #16
 8024794:	8b9b      	ldrh	r3, [r3, #28]
 8024796:	4341      	muls	r1, r0
 8024798:	18d3      	adds	r3, r2, r3
 802479a:	9a07      	ldr	r2, [sp, #28]
 802479c:	195b      	adds	r3, r3, r5
 802479e:	0c12      	lsrs	r2, r2, #16
 80247a0:	1889      	adds	r1, r1, r2
 80247a2:	0c1a      	lsrs	r2, r3, #16
 80247a4:	188a      	adds	r2, r1, r2
 80247a6:	b29b      	uxth	r3, r3
 80247a8:	0c15      	lsrs	r5, r2, #16
 80247aa:	0412      	lsls	r2, r2, #16
 80247ac:	431a      	orrs	r2, r3
 80247ae:	9b05      	ldr	r3, [sp, #20]
 80247b0:	c704      	stmia	r7!, {r2}
 80247b2:	42b3      	cmp	r3, r6
 80247b4:	d8e6      	bhi.n	8024784 <__multiply+0xc4>
 80247b6:	4663      	mov	r3, ip
 80247b8:	9a06      	ldr	r2, [sp, #24]
 80247ba:	509d      	str	r5, [r3, r2]
 80247bc:	9b01      	ldr	r3, [sp, #4]
 80247be:	6818      	ldr	r0, [r3, #0]
 80247c0:	0c00      	lsrs	r0, r0, #16
 80247c2:	d020      	beq.n	8024806 <__multiply+0x146>
 80247c4:	4663      	mov	r3, ip
 80247c6:	0025      	movs	r5, r4
 80247c8:	4661      	mov	r1, ip
 80247ca:	2700      	movs	r7, #0
 80247cc:	681b      	ldr	r3, [r3, #0]
 80247ce:	3514      	adds	r5, #20
 80247d0:	682a      	ldr	r2, [r5, #0]
 80247d2:	680e      	ldr	r6, [r1, #0]
 80247d4:	b292      	uxth	r2, r2
 80247d6:	4342      	muls	r2, r0
 80247d8:	0c36      	lsrs	r6, r6, #16
 80247da:	1992      	adds	r2, r2, r6
 80247dc:	19d2      	adds	r2, r2, r7
 80247de:	0416      	lsls	r6, r2, #16
 80247e0:	b29b      	uxth	r3, r3
 80247e2:	431e      	orrs	r6, r3
 80247e4:	600e      	str	r6, [r1, #0]
 80247e6:	cd40      	ldmia	r5!, {r6}
 80247e8:	684b      	ldr	r3, [r1, #4]
 80247ea:	0c36      	lsrs	r6, r6, #16
 80247ec:	4346      	muls	r6, r0
 80247ee:	b29b      	uxth	r3, r3
 80247f0:	0c12      	lsrs	r2, r2, #16
 80247f2:	18f3      	adds	r3, r6, r3
 80247f4:	189b      	adds	r3, r3, r2
 80247f6:	9a05      	ldr	r2, [sp, #20]
 80247f8:	0c1f      	lsrs	r7, r3, #16
 80247fa:	3104      	adds	r1, #4
 80247fc:	42aa      	cmp	r2, r5
 80247fe:	d8e7      	bhi.n	80247d0 <__multiply+0x110>
 8024800:	4662      	mov	r2, ip
 8024802:	9906      	ldr	r1, [sp, #24]
 8024804:	5053      	str	r3, [r2, r1]
 8024806:	9b01      	ldr	r3, [sp, #4]
 8024808:	3304      	adds	r3, #4
 802480a:	9301      	str	r3, [sp, #4]
 802480c:	2304      	movs	r3, #4
 802480e:	449c      	add	ip, r3
 8024810:	e79b      	b.n	802474a <__multiply+0x8a>
 8024812:	9b03      	ldr	r3, [sp, #12]
 8024814:	3b01      	subs	r3, #1
 8024816:	9303      	str	r3, [sp, #12]
 8024818:	e79b      	b.n	8024752 <__multiply+0x92>
 802481a:	46c0      	nop			@ (mov r8, r8)
 802481c:	080298e9 	.word	0x080298e9
 8024820:	0802995a 	.word	0x0802995a

08024824 <__pow5mult>:
 8024824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024826:	2303      	movs	r3, #3
 8024828:	0015      	movs	r5, r2
 802482a:	0007      	movs	r7, r0
 802482c:	000e      	movs	r6, r1
 802482e:	401a      	ands	r2, r3
 8024830:	421d      	tst	r5, r3
 8024832:	d008      	beq.n	8024846 <__pow5mult+0x22>
 8024834:	4925      	ldr	r1, [pc, #148]	@ (80248cc <__pow5mult+0xa8>)
 8024836:	3a01      	subs	r2, #1
 8024838:	0092      	lsls	r2, r2, #2
 802483a:	5852      	ldr	r2, [r2, r1]
 802483c:	2300      	movs	r3, #0
 802483e:	0031      	movs	r1, r6
 8024840:	f7ff fe46 	bl	80244d0 <__multadd>
 8024844:	0006      	movs	r6, r0
 8024846:	10ad      	asrs	r5, r5, #2
 8024848:	d03d      	beq.n	80248c6 <__pow5mult+0xa2>
 802484a:	69fc      	ldr	r4, [r7, #28]
 802484c:	2c00      	cmp	r4, #0
 802484e:	d10f      	bne.n	8024870 <__pow5mult+0x4c>
 8024850:	2010      	movs	r0, #16
 8024852:	f7ff fd07 	bl	8024264 <malloc>
 8024856:	1e02      	subs	r2, r0, #0
 8024858:	61f8      	str	r0, [r7, #28]
 802485a:	d105      	bne.n	8024868 <__pow5mult+0x44>
 802485c:	21b4      	movs	r1, #180	@ 0xb4
 802485e:	4b1c      	ldr	r3, [pc, #112]	@ (80248d0 <__pow5mult+0xac>)
 8024860:	481c      	ldr	r0, [pc, #112]	@ (80248d4 <__pow5mult+0xb0>)
 8024862:	31ff      	adds	r1, #255	@ 0xff
 8024864:	f000 feac 	bl	80255c0 <__assert_func>
 8024868:	6044      	str	r4, [r0, #4]
 802486a:	6084      	str	r4, [r0, #8]
 802486c:	6004      	str	r4, [r0, #0]
 802486e:	60c4      	str	r4, [r0, #12]
 8024870:	69fb      	ldr	r3, [r7, #28]
 8024872:	689c      	ldr	r4, [r3, #8]
 8024874:	9301      	str	r3, [sp, #4]
 8024876:	2c00      	cmp	r4, #0
 8024878:	d108      	bne.n	802488c <__pow5mult+0x68>
 802487a:	0038      	movs	r0, r7
 802487c:	4916      	ldr	r1, [pc, #88]	@ (80248d8 <__pow5mult+0xb4>)
 802487e:	f7ff ff07 	bl	8024690 <__i2b>
 8024882:	9b01      	ldr	r3, [sp, #4]
 8024884:	0004      	movs	r4, r0
 8024886:	6098      	str	r0, [r3, #8]
 8024888:	2300      	movs	r3, #0
 802488a:	6003      	str	r3, [r0, #0]
 802488c:	2301      	movs	r3, #1
 802488e:	421d      	tst	r5, r3
 8024890:	d00a      	beq.n	80248a8 <__pow5mult+0x84>
 8024892:	0031      	movs	r1, r6
 8024894:	0022      	movs	r2, r4
 8024896:	0038      	movs	r0, r7
 8024898:	f7ff ff12 	bl	80246c0 <__multiply>
 802489c:	0031      	movs	r1, r6
 802489e:	9001      	str	r0, [sp, #4]
 80248a0:	0038      	movs	r0, r7
 80248a2:	f7ff fdf1 	bl	8024488 <_Bfree>
 80248a6:	9e01      	ldr	r6, [sp, #4]
 80248a8:	106d      	asrs	r5, r5, #1
 80248aa:	d00c      	beq.n	80248c6 <__pow5mult+0xa2>
 80248ac:	6820      	ldr	r0, [r4, #0]
 80248ae:	2800      	cmp	r0, #0
 80248b0:	d107      	bne.n	80248c2 <__pow5mult+0x9e>
 80248b2:	0022      	movs	r2, r4
 80248b4:	0021      	movs	r1, r4
 80248b6:	0038      	movs	r0, r7
 80248b8:	f7ff ff02 	bl	80246c0 <__multiply>
 80248bc:	2300      	movs	r3, #0
 80248be:	6020      	str	r0, [r4, #0]
 80248c0:	6003      	str	r3, [r0, #0]
 80248c2:	0004      	movs	r4, r0
 80248c4:	e7e2      	b.n	802488c <__pow5mult+0x68>
 80248c6:	0030      	movs	r0, r6
 80248c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80248ca:	46c0      	nop			@ (mov r8, r8)
 80248cc:	080299b4 	.word	0x080299b4
 80248d0:	0802987a 	.word	0x0802987a
 80248d4:	0802995a 	.word	0x0802995a
 80248d8:	00000271 	.word	0x00000271

080248dc <__lshift>:
 80248dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80248de:	000c      	movs	r4, r1
 80248e0:	0016      	movs	r6, r2
 80248e2:	6923      	ldr	r3, [r4, #16]
 80248e4:	1157      	asrs	r7, r2, #5
 80248e6:	b085      	sub	sp, #20
 80248e8:	18fb      	adds	r3, r7, r3
 80248ea:	9301      	str	r3, [sp, #4]
 80248ec:	3301      	adds	r3, #1
 80248ee:	9300      	str	r3, [sp, #0]
 80248f0:	6849      	ldr	r1, [r1, #4]
 80248f2:	68a3      	ldr	r3, [r4, #8]
 80248f4:	9002      	str	r0, [sp, #8]
 80248f6:	9a00      	ldr	r2, [sp, #0]
 80248f8:	4293      	cmp	r3, r2
 80248fa:	db10      	blt.n	802491e <__lshift+0x42>
 80248fc:	9802      	ldr	r0, [sp, #8]
 80248fe:	f7ff fd7f 	bl	8024400 <_Balloc>
 8024902:	2300      	movs	r3, #0
 8024904:	0001      	movs	r1, r0
 8024906:	0005      	movs	r5, r0
 8024908:	001a      	movs	r2, r3
 802490a:	3114      	adds	r1, #20
 802490c:	4298      	cmp	r0, r3
 802490e:	d10c      	bne.n	802492a <__lshift+0x4e>
 8024910:	21ef      	movs	r1, #239	@ 0xef
 8024912:	002a      	movs	r2, r5
 8024914:	4b25      	ldr	r3, [pc, #148]	@ (80249ac <__lshift+0xd0>)
 8024916:	4826      	ldr	r0, [pc, #152]	@ (80249b0 <__lshift+0xd4>)
 8024918:	0049      	lsls	r1, r1, #1
 802491a:	f000 fe51 	bl	80255c0 <__assert_func>
 802491e:	3101      	adds	r1, #1
 8024920:	005b      	lsls	r3, r3, #1
 8024922:	e7e8      	b.n	80248f6 <__lshift+0x1a>
 8024924:	0098      	lsls	r0, r3, #2
 8024926:	500a      	str	r2, [r1, r0]
 8024928:	3301      	adds	r3, #1
 802492a:	42bb      	cmp	r3, r7
 802492c:	dbfa      	blt.n	8024924 <__lshift+0x48>
 802492e:	43fb      	mvns	r3, r7
 8024930:	17db      	asrs	r3, r3, #31
 8024932:	401f      	ands	r7, r3
 8024934:	00bf      	lsls	r7, r7, #2
 8024936:	0023      	movs	r3, r4
 8024938:	201f      	movs	r0, #31
 802493a:	19c9      	adds	r1, r1, r7
 802493c:	0037      	movs	r7, r6
 802493e:	6922      	ldr	r2, [r4, #16]
 8024940:	3314      	adds	r3, #20
 8024942:	0092      	lsls	r2, r2, #2
 8024944:	189a      	adds	r2, r3, r2
 8024946:	4007      	ands	r7, r0
 8024948:	4206      	tst	r6, r0
 802494a:	d029      	beq.n	80249a0 <__lshift+0xc4>
 802494c:	3001      	adds	r0, #1
 802494e:	1bc0      	subs	r0, r0, r7
 8024950:	9003      	str	r0, [sp, #12]
 8024952:	468c      	mov	ip, r1
 8024954:	2000      	movs	r0, #0
 8024956:	681e      	ldr	r6, [r3, #0]
 8024958:	40be      	lsls	r6, r7
 802495a:	4306      	orrs	r6, r0
 802495c:	4660      	mov	r0, ip
 802495e:	c040      	stmia	r0!, {r6}
 8024960:	4684      	mov	ip, r0
 8024962:	9e03      	ldr	r6, [sp, #12]
 8024964:	cb01      	ldmia	r3!, {r0}
 8024966:	40f0      	lsrs	r0, r6
 8024968:	429a      	cmp	r2, r3
 802496a:	d8f4      	bhi.n	8024956 <__lshift+0x7a>
 802496c:	0026      	movs	r6, r4
 802496e:	3615      	adds	r6, #21
 8024970:	2304      	movs	r3, #4
 8024972:	42b2      	cmp	r2, r6
 8024974:	d304      	bcc.n	8024980 <__lshift+0xa4>
 8024976:	1b13      	subs	r3, r2, r4
 8024978:	3b15      	subs	r3, #21
 802497a:	089b      	lsrs	r3, r3, #2
 802497c:	3301      	adds	r3, #1
 802497e:	009b      	lsls	r3, r3, #2
 8024980:	50c8      	str	r0, [r1, r3]
 8024982:	2800      	cmp	r0, #0
 8024984:	d002      	beq.n	802498c <__lshift+0xb0>
 8024986:	9b01      	ldr	r3, [sp, #4]
 8024988:	3302      	adds	r3, #2
 802498a:	9300      	str	r3, [sp, #0]
 802498c:	9b00      	ldr	r3, [sp, #0]
 802498e:	9802      	ldr	r0, [sp, #8]
 8024990:	3b01      	subs	r3, #1
 8024992:	0021      	movs	r1, r4
 8024994:	612b      	str	r3, [r5, #16]
 8024996:	f7ff fd77 	bl	8024488 <_Bfree>
 802499a:	0028      	movs	r0, r5
 802499c:	b005      	add	sp, #20
 802499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249a0:	cb01      	ldmia	r3!, {r0}
 80249a2:	c101      	stmia	r1!, {r0}
 80249a4:	429a      	cmp	r2, r3
 80249a6:	d8fb      	bhi.n	80249a0 <__lshift+0xc4>
 80249a8:	e7f0      	b.n	802498c <__lshift+0xb0>
 80249aa:	46c0      	nop			@ (mov r8, r8)
 80249ac:	080298e9 	.word	0x080298e9
 80249b0:	0802995a 	.word	0x0802995a

080249b4 <__mcmp>:
 80249b4:	b530      	push	{r4, r5, lr}
 80249b6:	690b      	ldr	r3, [r1, #16]
 80249b8:	6904      	ldr	r4, [r0, #16]
 80249ba:	0002      	movs	r2, r0
 80249bc:	1ae0      	subs	r0, r4, r3
 80249be:	429c      	cmp	r4, r3
 80249c0:	d10f      	bne.n	80249e2 <__mcmp+0x2e>
 80249c2:	3214      	adds	r2, #20
 80249c4:	009b      	lsls	r3, r3, #2
 80249c6:	3114      	adds	r1, #20
 80249c8:	0014      	movs	r4, r2
 80249ca:	18c9      	adds	r1, r1, r3
 80249cc:	18d2      	adds	r2, r2, r3
 80249ce:	3a04      	subs	r2, #4
 80249d0:	3904      	subs	r1, #4
 80249d2:	6815      	ldr	r5, [r2, #0]
 80249d4:	680b      	ldr	r3, [r1, #0]
 80249d6:	429d      	cmp	r5, r3
 80249d8:	d004      	beq.n	80249e4 <__mcmp+0x30>
 80249da:	2001      	movs	r0, #1
 80249dc:	429d      	cmp	r5, r3
 80249de:	d200      	bcs.n	80249e2 <__mcmp+0x2e>
 80249e0:	3802      	subs	r0, #2
 80249e2:	bd30      	pop	{r4, r5, pc}
 80249e4:	4294      	cmp	r4, r2
 80249e6:	d3f2      	bcc.n	80249ce <__mcmp+0x1a>
 80249e8:	e7fb      	b.n	80249e2 <__mcmp+0x2e>
	...

080249ec <__mdiff>:
 80249ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80249ee:	000c      	movs	r4, r1
 80249f0:	b087      	sub	sp, #28
 80249f2:	9000      	str	r0, [sp, #0]
 80249f4:	0011      	movs	r1, r2
 80249f6:	0020      	movs	r0, r4
 80249f8:	0017      	movs	r7, r2
 80249fa:	f7ff ffdb 	bl	80249b4 <__mcmp>
 80249fe:	1e05      	subs	r5, r0, #0
 8024a00:	d110      	bne.n	8024a24 <__mdiff+0x38>
 8024a02:	0001      	movs	r1, r0
 8024a04:	9800      	ldr	r0, [sp, #0]
 8024a06:	f7ff fcfb 	bl	8024400 <_Balloc>
 8024a0a:	1e02      	subs	r2, r0, #0
 8024a0c:	d104      	bne.n	8024a18 <__mdiff+0x2c>
 8024a0e:	4b40      	ldr	r3, [pc, #256]	@ (8024b10 <__mdiff+0x124>)
 8024a10:	4840      	ldr	r0, [pc, #256]	@ (8024b14 <__mdiff+0x128>)
 8024a12:	4941      	ldr	r1, [pc, #260]	@ (8024b18 <__mdiff+0x12c>)
 8024a14:	f000 fdd4 	bl	80255c0 <__assert_func>
 8024a18:	2301      	movs	r3, #1
 8024a1a:	6145      	str	r5, [r0, #20]
 8024a1c:	6103      	str	r3, [r0, #16]
 8024a1e:	0010      	movs	r0, r2
 8024a20:	b007      	add	sp, #28
 8024a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a24:	2600      	movs	r6, #0
 8024a26:	42b0      	cmp	r0, r6
 8024a28:	da03      	bge.n	8024a32 <__mdiff+0x46>
 8024a2a:	0023      	movs	r3, r4
 8024a2c:	003c      	movs	r4, r7
 8024a2e:	001f      	movs	r7, r3
 8024a30:	3601      	adds	r6, #1
 8024a32:	6861      	ldr	r1, [r4, #4]
 8024a34:	9800      	ldr	r0, [sp, #0]
 8024a36:	f7ff fce3 	bl	8024400 <_Balloc>
 8024a3a:	1e02      	subs	r2, r0, #0
 8024a3c:	d103      	bne.n	8024a46 <__mdiff+0x5a>
 8024a3e:	4b34      	ldr	r3, [pc, #208]	@ (8024b10 <__mdiff+0x124>)
 8024a40:	4834      	ldr	r0, [pc, #208]	@ (8024b14 <__mdiff+0x128>)
 8024a42:	4936      	ldr	r1, [pc, #216]	@ (8024b1c <__mdiff+0x130>)
 8024a44:	e7e6      	b.n	8024a14 <__mdiff+0x28>
 8024a46:	6923      	ldr	r3, [r4, #16]
 8024a48:	3414      	adds	r4, #20
 8024a4a:	9300      	str	r3, [sp, #0]
 8024a4c:	009b      	lsls	r3, r3, #2
 8024a4e:	18e3      	adds	r3, r4, r3
 8024a50:	0021      	movs	r1, r4
 8024a52:	9401      	str	r4, [sp, #4]
 8024a54:	003c      	movs	r4, r7
 8024a56:	9302      	str	r3, [sp, #8]
 8024a58:	693b      	ldr	r3, [r7, #16]
 8024a5a:	3414      	adds	r4, #20
 8024a5c:	009b      	lsls	r3, r3, #2
 8024a5e:	18e3      	adds	r3, r4, r3
 8024a60:	9303      	str	r3, [sp, #12]
 8024a62:	0003      	movs	r3, r0
 8024a64:	60c6      	str	r6, [r0, #12]
 8024a66:	468c      	mov	ip, r1
 8024a68:	2000      	movs	r0, #0
 8024a6a:	3314      	adds	r3, #20
 8024a6c:	9304      	str	r3, [sp, #16]
 8024a6e:	9305      	str	r3, [sp, #20]
 8024a70:	4663      	mov	r3, ip
 8024a72:	cb20      	ldmia	r3!, {r5}
 8024a74:	b2a9      	uxth	r1, r5
 8024a76:	000e      	movs	r6, r1
 8024a78:	469c      	mov	ip, r3
 8024a7a:	cc08      	ldmia	r4!, {r3}
 8024a7c:	0c2d      	lsrs	r5, r5, #16
 8024a7e:	b299      	uxth	r1, r3
 8024a80:	1a71      	subs	r1, r6, r1
 8024a82:	1809      	adds	r1, r1, r0
 8024a84:	0c1b      	lsrs	r3, r3, #16
 8024a86:	1408      	asrs	r0, r1, #16
 8024a88:	1aeb      	subs	r3, r5, r3
 8024a8a:	181b      	adds	r3, r3, r0
 8024a8c:	1418      	asrs	r0, r3, #16
 8024a8e:	b289      	uxth	r1, r1
 8024a90:	041b      	lsls	r3, r3, #16
 8024a92:	4319      	orrs	r1, r3
 8024a94:	9b05      	ldr	r3, [sp, #20]
 8024a96:	c302      	stmia	r3!, {r1}
 8024a98:	9305      	str	r3, [sp, #20]
 8024a9a:	9b03      	ldr	r3, [sp, #12]
 8024a9c:	42a3      	cmp	r3, r4
 8024a9e:	d8e7      	bhi.n	8024a70 <__mdiff+0x84>
 8024aa0:	0039      	movs	r1, r7
 8024aa2:	9c03      	ldr	r4, [sp, #12]
 8024aa4:	3115      	adds	r1, #21
 8024aa6:	2304      	movs	r3, #4
 8024aa8:	428c      	cmp	r4, r1
 8024aaa:	d304      	bcc.n	8024ab6 <__mdiff+0xca>
 8024aac:	1be3      	subs	r3, r4, r7
 8024aae:	3b15      	subs	r3, #21
 8024ab0:	089b      	lsrs	r3, r3, #2
 8024ab2:	3301      	adds	r3, #1
 8024ab4:	009b      	lsls	r3, r3, #2
 8024ab6:	9901      	ldr	r1, [sp, #4]
 8024ab8:	18cd      	adds	r5, r1, r3
 8024aba:	9904      	ldr	r1, [sp, #16]
 8024abc:	002e      	movs	r6, r5
 8024abe:	18cb      	adds	r3, r1, r3
 8024ac0:	001f      	movs	r7, r3
 8024ac2:	9902      	ldr	r1, [sp, #8]
 8024ac4:	428e      	cmp	r6, r1
 8024ac6:	d311      	bcc.n	8024aec <__mdiff+0x100>
 8024ac8:	9c02      	ldr	r4, [sp, #8]
 8024aca:	1ee9      	subs	r1, r5, #3
 8024acc:	2000      	movs	r0, #0
 8024ace:	428c      	cmp	r4, r1
 8024ad0:	d304      	bcc.n	8024adc <__mdiff+0xf0>
 8024ad2:	0021      	movs	r1, r4
 8024ad4:	3103      	adds	r1, #3
 8024ad6:	1b49      	subs	r1, r1, r5
 8024ad8:	0889      	lsrs	r1, r1, #2
 8024ada:	0088      	lsls	r0, r1, #2
 8024adc:	181b      	adds	r3, r3, r0
 8024ade:	3b04      	subs	r3, #4
 8024ae0:	6819      	ldr	r1, [r3, #0]
 8024ae2:	2900      	cmp	r1, #0
 8024ae4:	d010      	beq.n	8024b08 <__mdiff+0x11c>
 8024ae6:	9b00      	ldr	r3, [sp, #0]
 8024ae8:	6113      	str	r3, [r2, #16]
 8024aea:	e798      	b.n	8024a1e <__mdiff+0x32>
 8024aec:	4684      	mov	ip, r0
 8024aee:	ce02      	ldmia	r6!, {r1}
 8024af0:	b288      	uxth	r0, r1
 8024af2:	4460      	add	r0, ip
 8024af4:	1400      	asrs	r0, r0, #16
 8024af6:	0c0c      	lsrs	r4, r1, #16
 8024af8:	1904      	adds	r4, r0, r4
 8024afa:	4461      	add	r1, ip
 8024afc:	1420      	asrs	r0, r4, #16
 8024afe:	b289      	uxth	r1, r1
 8024b00:	0424      	lsls	r4, r4, #16
 8024b02:	4321      	orrs	r1, r4
 8024b04:	c702      	stmia	r7!, {r1}
 8024b06:	e7dc      	b.n	8024ac2 <__mdiff+0xd6>
 8024b08:	9900      	ldr	r1, [sp, #0]
 8024b0a:	3901      	subs	r1, #1
 8024b0c:	9100      	str	r1, [sp, #0]
 8024b0e:	e7e6      	b.n	8024ade <__mdiff+0xf2>
 8024b10:	080298e9 	.word	0x080298e9
 8024b14:	0802995a 	.word	0x0802995a
 8024b18:	00000237 	.word	0x00000237
 8024b1c:	00000245 	.word	0x00000245

08024b20 <__ulp>:
 8024b20:	b510      	push	{r4, lr}
 8024b22:	2400      	movs	r4, #0
 8024b24:	4b0c      	ldr	r3, [pc, #48]	@ (8024b58 <__ulp+0x38>)
 8024b26:	4a0d      	ldr	r2, [pc, #52]	@ (8024b5c <__ulp+0x3c>)
 8024b28:	400b      	ands	r3, r1
 8024b2a:	189b      	adds	r3, r3, r2
 8024b2c:	42a3      	cmp	r3, r4
 8024b2e:	dc06      	bgt.n	8024b3e <__ulp+0x1e>
 8024b30:	425b      	negs	r3, r3
 8024b32:	151a      	asrs	r2, r3, #20
 8024b34:	2a13      	cmp	r2, #19
 8024b36:	dc05      	bgt.n	8024b44 <__ulp+0x24>
 8024b38:	2380      	movs	r3, #128	@ 0x80
 8024b3a:	031b      	lsls	r3, r3, #12
 8024b3c:	4113      	asrs	r3, r2
 8024b3e:	0019      	movs	r1, r3
 8024b40:	0020      	movs	r0, r4
 8024b42:	bd10      	pop	{r4, pc}
 8024b44:	3a14      	subs	r2, #20
 8024b46:	2401      	movs	r4, #1
 8024b48:	2a1e      	cmp	r2, #30
 8024b4a:	dc02      	bgt.n	8024b52 <__ulp+0x32>
 8024b4c:	2480      	movs	r4, #128	@ 0x80
 8024b4e:	0624      	lsls	r4, r4, #24
 8024b50:	40d4      	lsrs	r4, r2
 8024b52:	2300      	movs	r3, #0
 8024b54:	e7f3      	b.n	8024b3e <__ulp+0x1e>
 8024b56:	46c0      	nop			@ (mov r8, r8)
 8024b58:	7ff00000 	.word	0x7ff00000
 8024b5c:	fcc00000 	.word	0xfcc00000

08024b60 <__b2d>:
 8024b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024b62:	0006      	movs	r6, r0
 8024b64:	6903      	ldr	r3, [r0, #16]
 8024b66:	3614      	adds	r6, #20
 8024b68:	009b      	lsls	r3, r3, #2
 8024b6a:	18f3      	adds	r3, r6, r3
 8024b6c:	1f1d      	subs	r5, r3, #4
 8024b6e:	682c      	ldr	r4, [r5, #0]
 8024b70:	000f      	movs	r7, r1
 8024b72:	0020      	movs	r0, r4
 8024b74:	9301      	str	r3, [sp, #4]
 8024b76:	f7ff fd3b 	bl	80245f0 <__hi0bits>
 8024b7a:	2220      	movs	r2, #32
 8024b7c:	1a12      	subs	r2, r2, r0
 8024b7e:	603a      	str	r2, [r7, #0]
 8024b80:	0003      	movs	r3, r0
 8024b82:	4a1c      	ldr	r2, [pc, #112]	@ (8024bf4 <__b2d+0x94>)
 8024b84:	280a      	cmp	r0, #10
 8024b86:	dc15      	bgt.n	8024bb4 <__b2d+0x54>
 8024b88:	210b      	movs	r1, #11
 8024b8a:	0027      	movs	r7, r4
 8024b8c:	1a09      	subs	r1, r1, r0
 8024b8e:	40cf      	lsrs	r7, r1
 8024b90:	433a      	orrs	r2, r7
 8024b92:	468c      	mov	ip, r1
 8024b94:	0011      	movs	r1, r2
 8024b96:	2200      	movs	r2, #0
 8024b98:	42ae      	cmp	r6, r5
 8024b9a:	d202      	bcs.n	8024ba2 <__b2d+0x42>
 8024b9c:	9a01      	ldr	r2, [sp, #4]
 8024b9e:	3a08      	subs	r2, #8
 8024ba0:	6812      	ldr	r2, [r2, #0]
 8024ba2:	3315      	adds	r3, #21
 8024ba4:	409c      	lsls	r4, r3
 8024ba6:	4663      	mov	r3, ip
 8024ba8:	0027      	movs	r7, r4
 8024baa:	40da      	lsrs	r2, r3
 8024bac:	4317      	orrs	r7, r2
 8024bae:	0038      	movs	r0, r7
 8024bb0:	b003      	add	sp, #12
 8024bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024bb4:	2700      	movs	r7, #0
 8024bb6:	42ae      	cmp	r6, r5
 8024bb8:	d202      	bcs.n	8024bc0 <__b2d+0x60>
 8024bba:	9d01      	ldr	r5, [sp, #4]
 8024bbc:	3d08      	subs	r5, #8
 8024bbe:	682f      	ldr	r7, [r5, #0]
 8024bc0:	210b      	movs	r1, #11
 8024bc2:	4249      	negs	r1, r1
 8024bc4:	468c      	mov	ip, r1
 8024bc6:	449c      	add	ip, r3
 8024bc8:	2b0b      	cmp	r3, #11
 8024bca:	d010      	beq.n	8024bee <__b2d+0x8e>
 8024bcc:	4661      	mov	r1, ip
 8024bce:	2320      	movs	r3, #32
 8024bd0:	408c      	lsls	r4, r1
 8024bd2:	1a5b      	subs	r3, r3, r1
 8024bd4:	0039      	movs	r1, r7
 8024bd6:	40d9      	lsrs	r1, r3
 8024bd8:	430c      	orrs	r4, r1
 8024bda:	4322      	orrs	r2, r4
 8024bdc:	0011      	movs	r1, r2
 8024bde:	2200      	movs	r2, #0
 8024be0:	42b5      	cmp	r5, r6
 8024be2:	d901      	bls.n	8024be8 <__b2d+0x88>
 8024be4:	3d04      	subs	r5, #4
 8024be6:	682a      	ldr	r2, [r5, #0]
 8024be8:	4664      	mov	r4, ip
 8024bea:	40a7      	lsls	r7, r4
 8024bec:	e7dd      	b.n	8024baa <__b2d+0x4a>
 8024bee:	4322      	orrs	r2, r4
 8024bf0:	0011      	movs	r1, r2
 8024bf2:	e7dc      	b.n	8024bae <__b2d+0x4e>
 8024bf4:	3ff00000 	.word	0x3ff00000

08024bf8 <__d2b>:
 8024bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024bfa:	2101      	movs	r1, #1
 8024bfc:	0016      	movs	r6, r2
 8024bfe:	001f      	movs	r7, r3
 8024c00:	f7ff fbfe 	bl	8024400 <_Balloc>
 8024c04:	1e04      	subs	r4, r0, #0
 8024c06:	d105      	bne.n	8024c14 <__d2b+0x1c>
 8024c08:	0022      	movs	r2, r4
 8024c0a:	4b25      	ldr	r3, [pc, #148]	@ (8024ca0 <__d2b+0xa8>)
 8024c0c:	4825      	ldr	r0, [pc, #148]	@ (8024ca4 <__d2b+0xac>)
 8024c0e:	4926      	ldr	r1, [pc, #152]	@ (8024ca8 <__d2b+0xb0>)
 8024c10:	f000 fcd6 	bl	80255c0 <__assert_func>
 8024c14:	033b      	lsls	r3, r7, #12
 8024c16:	007d      	lsls	r5, r7, #1
 8024c18:	0b1b      	lsrs	r3, r3, #12
 8024c1a:	0d6d      	lsrs	r5, r5, #21
 8024c1c:	d002      	beq.n	8024c24 <__d2b+0x2c>
 8024c1e:	2280      	movs	r2, #128	@ 0x80
 8024c20:	0352      	lsls	r2, r2, #13
 8024c22:	4313      	orrs	r3, r2
 8024c24:	9301      	str	r3, [sp, #4]
 8024c26:	2e00      	cmp	r6, #0
 8024c28:	d025      	beq.n	8024c76 <__d2b+0x7e>
 8024c2a:	4668      	mov	r0, sp
 8024c2c:	9600      	str	r6, [sp, #0]
 8024c2e:	f7ff fd00 	bl	8024632 <__lo0bits>
 8024c32:	9b01      	ldr	r3, [sp, #4]
 8024c34:	9900      	ldr	r1, [sp, #0]
 8024c36:	2800      	cmp	r0, #0
 8024c38:	d01b      	beq.n	8024c72 <__d2b+0x7a>
 8024c3a:	2220      	movs	r2, #32
 8024c3c:	001e      	movs	r6, r3
 8024c3e:	1a12      	subs	r2, r2, r0
 8024c40:	4096      	lsls	r6, r2
 8024c42:	0032      	movs	r2, r6
 8024c44:	40c3      	lsrs	r3, r0
 8024c46:	430a      	orrs	r2, r1
 8024c48:	6162      	str	r2, [r4, #20]
 8024c4a:	9301      	str	r3, [sp, #4]
 8024c4c:	9e01      	ldr	r6, [sp, #4]
 8024c4e:	61a6      	str	r6, [r4, #24]
 8024c50:	1e73      	subs	r3, r6, #1
 8024c52:	419e      	sbcs	r6, r3
 8024c54:	3601      	adds	r6, #1
 8024c56:	6126      	str	r6, [r4, #16]
 8024c58:	2d00      	cmp	r5, #0
 8024c5a:	d014      	beq.n	8024c86 <__d2b+0x8e>
 8024c5c:	2635      	movs	r6, #53	@ 0x35
 8024c5e:	4b13      	ldr	r3, [pc, #76]	@ (8024cac <__d2b+0xb4>)
 8024c60:	18ed      	adds	r5, r5, r3
 8024c62:	9b08      	ldr	r3, [sp, #32]
 8024c64:	182d      	adds	r5, r5, r0
 8024c66:	601d      	str	r5, [r3, #0]
 8024c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c6a:	1a36      	subs	r6, r6, r0
 8024c6c:	601e      	str	r6, [r3, #0]
 8024c6e:	0020      	movs	r0, r4
 8024c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024c72:	6161      	str	r1, [r4, #20]
 8024c74:	e7ea      	b.n	8024c4c <__d2b+0x54>
 8024c76:	a801      	add	r0, sp, #4
 8024c78:	f7ff fcdb 	bl	8024632 <__lo0bits>
 8024c7c:	9b01      	ldr	r3, [sp, #4]
 8024c7e:	2601      	movs	r6, #1
 8024c80:	6163      	str	r3, [r4, #20]
 8024c82:	3020      	adds	r0, #32
 8024c84:	e7e7      	b.n	8024c56 <__d2b+0x5e>
 8024c86:	4b0a      	ldr	r3, [pc, #40]	@ (8024cb0 <__d2b+0xb8>)
 8024c88:	18c0      	adds	r0, r0, r3
 8024c8a:	9b08      	ldr	r3, [sp, #32]
 8024c8c:	6018      	str	r0, [r3, #0]
 8024c8e:	4b09      	ldr	r3, [pc, #36]	@ (8024cb4 <__d2b+0xbc>)
 8024c90:	18f3      	adds	r3, r6, r3
 8024c92:	009b      	lsls	r3, r3, #2
 8024c94:	18e3      	adds	r3, r4, r3
 8024c96:	6958      	ldr	r0, [r3, #20]
 8024c98:	f7ff fcaa 	bl	80245f0 <__hi0bits>
 8024c9c:	0176      	lsls	r6, r6, #5
 8024c9e:	e7e3      	b.n	8024c68 <__d2b+0x70>
 8024ca0:	080298e9 	.word	0x080298e9
 8024ca4:	0802995a 	.word	0x0802995a
 8024ca8:	0000030f 	.word	0x0000030f
 8024cac:	fffffbcd 	.word	0xfffffbcd
 8024cb0:	fffffbce 	.word	0xfffffbce
 8024cb4:	3fffffff 	.word	0x3fffffff

08024cb8 <__ratio>:
 8024cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024cba:	b087      	sub	sp, #28
 8024cbc:	000f      	movs	r7, r1
 8024cbe:	a904      	add	r1, sp, #16
 8024cc0:	0006      	movs	r6, r0
 8024cc2:	f7ff ff4d 	bl	8024b60 <__b2d>
 8024cc6:	9000      	str	r0, [sp, #0]
 8024cc8:	9101      	str	r1, [sp, #4]
 8024cca:	9b00      	ldr	r3, [sp, #0]
 8024ccc:	9c01      	ldr	r4, [sp, #4]
 8024cce:	0038      	movs	r0, r7
 8024cd0:	a905      	add	r1, sp, #20
 8024cd2:	9302      	str	r3, [sp, #8]
 8024cd4:	9403      	str	r4, [sp, #12]
 8024cd6:	f7ff ff43 	bl	8024b60 <__b2d>
 8024cda:	000d      	movs	r5, r1
 8024cdc:	0002      	movs	r2, r0
 8024cde:	000b      	movs	r3, r1
 8024ce0:	6930      	ldr	r0, [r6, #16]
 8024ce2:	6939      	ldr	r1, [r7, #16]
 8024ce4:	9e04      	ldr	r6, [sp, #16]
 8024ce6:	1a40      	subs	r0, r0, r1
 8024ce8:	9905      	ldr	r1, [sp, #20]
 8024cea:	0140      	lsls	r0, r0, #5
 8024cec:	1a71      	subs	r1, r6, r1
 8024cee:	1841      	adds	r1, r0, r1
 8024cf0:	0508      	lsls	r0, r1, #20
 8024cf2:	2900      	cmp	r1, #0
 8024cf4:	dd08      	ble.n	8024d08 <__ratio+0x50>
 8024cf6:	9901      	ldr	r1, [sp, #4]
 8024cf8:	1841      	adds	r1, r0, r1
 8024cfa:	9103      	str	r1, [sp, #12]
 8024cfc:	9802      	ldr	r0, [sp, #8]
 8024cfe:	9903      	ldr	r1, [sp, #12]
 8024d00:	f7dd f858 	bl	8001db4 <__aeabi_ddiv>
 8024d04:	b007      	add	sp, #28
 8024d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024d08:	1a2b      	subs	r3, r5, r0
 8024d0a:	e7f7      	b.n	8024cfc <__ratio+0x44>

08024d0c <__copybits>:
 8024d0c:	b570      	push	{r4, r5, r6, lr}
 8024d0e:	0014      	movs	r4, r2
 8024d10:	0005      	movs	r5, r0
 8024d12:	3901      	subs	r1, #1
 8024d14:	6913      	ldr	r3, [r2, #16]
 8024d16:	1149      	asrs	r1, r1, #5
 8024d18:	3101      	adds	r1, #1
 8024d1a:	0089      	lsls	r1, r1, #2
 8024d1c:	3414      	adds	r4, #20
 8024d1e:	009b      	lsls	r3, r3, #2
 8024d20:	1841      	adds	r1, r0, r1
 8024d22:	18e3      	adds	r3, r4, r3
 8024d24:	42a3      	cmp	r3, r4
 8024d26:	d80d      	bhi.n	8024d44 <__copybits+0x38>
 8024d28:	0014      	movs	r4, r2
 8024d2a:	3411      	adds	r4, #17
 8024d2c:	2500      	movs	r5, #0
 8024d2e:	429c      	cmp	r4, r3
 8024d30:	d803      	bhi.n	8024d3a <__copybits+0x2e>
 8024d32:	1a9b      	subs	r3, r3, r2
 8024d34:	3b11      	subs	r3, #17
 8024d36:	089b      	lsrs	r3, r3, #2
 8024d38:	009d      	lsls	r5, r3, #2
 8024d3a:	2300      	movs	r3, #0
 8024d3c:	1940      	adds	r0, r0, r5
 8024d3e:	4281      	cmp	r1, r0
 8024d40:	d803      	bhi.n	8024d4a <__copybits+0x3e>
 8024d42:	bd70      	pop	{r4, r5, r6, pc}
 8024d44:	cc40      	ldmia	r4!, {r6}
 8024d46:	c540      	stmia	r5!, {r6}
 8024d48:	e7ec      	b.n	8024d24 <__copybits+0x18>
 8024d4a:	c008      	stmia	r0!, {r3}
 8024d4c:	e7f7      	b.n	8024d3e <__copybits+0x32>

08024d4e <__any_on>:
 8024d4e:	0002      	movs	r2, r0
 8024d50:	6900      	ldr	r0, [r0, #16]
 8024d52:	b510      	push	{r4, lr}
 8024d54:	3214      	adds	r2, #20
 8024d56:	114b      	asrs	r3, r1, #5
 8024d58:	4298      	cmp	r0, r3
 8024d5a:	db13      	blt.n	8024d84 <__any_on+0x36>
 8024d5c:	dd0c      	ble.n	8024d78 <__any_on+0x2a>
 8024d5e:	241f      	movs	r4, #31
 8024d60:	0008      	movs	r0, r1
 8024d62:	4020      	ands	r0, r4
 8024d64:	4221      	tst	r1, r4
 8024d66:	d007      	beq.n	8024d78 <__any_on+0x2a>
 8024d68:	0099      	lsls	r1, r3, #2
 8024d6a:	588c      	ldr	r4, [r1, r2]
 8024d6c:	0021      	movs	r1, r4
 8024d6e:	40c1      	lsrs	r1, r0
 8024d70:	4081      	lsls	r1, r0
 8024d72:	2001      	movs	r0, #1
 8024d74:	428c      	cmp	r4, r1
 8024d76:	d104      	bne.n	8024d82 <__any_on+0x34>
 8024d78:	009b      	lsls	r3, r3, #2
 8024d7a:	18d3      	adds	r3, r2, r3
 8024d7c:	4293      	cmp	r3, r2
 8024d7e:	d803      	bhi.n	8024d88 <__any_on+0x3a>
 8024d80:	2000      	movs	r0, #0
 8024d82:	bd10      	pop	{r4, pc}
 8024d84:	0003      	movs	r3, r0
 8024d86:	e7f7      	b.n	8024d78 <__any_on+0x2a>
 8024d88:	3b04      	subs	r3, #4
 8024d8a:	6819      	ldr	r1, [r3, #0]
 8024d8c:	2900      	cmp	r1, #0
 8024d8e:	d0f5      	beq.n	8024d7c <__any_on+0x2e>
 8024d90:	2001      	movs	r0, #1
 8024d92:	e7f6      	b.n	8024d82 <__any_on+0x34>

08024d94 <__ascii_wctomb>:
 8024d94:	0003      	movs	r3, r0
 8024d96:	1e08      	subs	r0, r1, #0
 8024d98:	d005      	beq.n	8024da6 <__ascii_wctomb+0x12>
 8024d9a:	2aff      	cmp	r2, #255	@ 0xff
 8024d9c:	d904      	bls.n	8024da8 <__ascii_wctomb+0x14>
 8024d9e:	228a      	movs	r2, #138	@ 0x8a
 8024da0:	2001      	movs	r0, #1
 8024da2:	601a      	str	r2, [r3, #0]
 8024da4:	4240      	negs	r0, r0
 8024da6:	4770      	bx	lr
 8024da8:	2001      	movs	r0, #1
 8024daa:	700a      	strb	r2, [r1, #0]
 8024dac:	e7fb      	b.n	8024da6 <__ascii_wctomb+0x12>
	...

08024db0 <__ssputs_r>:
 8024db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024db2:	688e      	ldr	r6, [r1, #8]
 8024db4:	b085      	sub	sp, #20
 8024db6:	001f      	movs	r7, r3
 8024db8:	000c      	movs	r4, r1
 8024dba:	680b      	ldr	r3, [r1, #0]
 8024dbc:	9002      	str	r0, [sp, #8]
 8024dbe:	9203      	str	r2, [sp, #12]
 8024dc0:	42be      	cmp	r6, r7
 8024dc2:	d830      	bhi.n	8024e26 <__ssputs_r+0x76>
 8024dc4:	210c      	movs	r1, #12
 8024dc6:	5e62      	ldrsh	r2, [r4, r1]
 8024dc8:	2190      	movs	r1, #144	@ 0x90
 8024dca:	00c9      	lsls	r1, r1, #3
 8024dcc:	420a      	tst	r2, r1
 8024dce:	d028      	beq.n	8024e22 <__ssputs_r+0x72>
 8024dd0:	2003      	movs	r0, #3
 8024dd2:	6921      	ldr	r1, [r4, #16]
 8024dd4:	1a5b      	subs	r3, r3, r1
 8024dd6:	9301      	str	r3, [sp, #4]
 8024dd8:	6963      	ldr	r3, [r4, #20]
 8024dda:	4343      	muls	r3, r0
 8024ddc:	9801      	ldr	r0, [sp, #4]
 8024dde:	0fdd      	lsrs	r5, r3, #31
 8024de0:	18ed      	adds	r5, r5, r3
 8024de2:	1c7b      	adds	r3, r7, #1
 8024de4:	181b      	adds	r3, r3, r0
 8024de6:	106d      	asrs	r5, r5, #1
 8024de8:	42ab      	cmp	r3, r5
 8024dea:	d900      	bls.n	8024dee <__ssputs_r+0x3e>
 8024dec:	001d      	movs	r5, r3
 8024dee:	0552      	lsls	r2, r2, #21
 8024df0:	d528      	bpl.n	8024e44 <__ssputs_r+0x94>
 8024df2:	0029      	movs	r1, r5
 8024df4:	9802      	ldr	r0, [sp, #8]
 8024df6:	f7ff fa61 	bl	80242bc <_malloc_r>
 8024dfa:	1e06      	subs	r6, r0, #0
 8024dfc:	d02c      	beq.n	8024e58 <__ssputs_r+0xa8>
 8024dfe:	9a01      	ldr	r2, [sp, #4]
 8024e00:	6921      	ldr	r1, [r4, #16]
 8024e02:	f7fd fff9 	bl	8022df8 <memcpy>
 8024e06:	89a2      	ldrh	r2, [r4, #12]
 8024e08:	4b18      	ldr	r3, [pc, #96]	@ (8024e6c <__ssputs_r+0xbc>)
 8024e0a:	401a      	ands	r2, r3
 8024e0c:	2380      	movs	r3, #128	@ 0x80
 8024e0e:	4313      	orrs	r3, r2
 8024e10:	81a3      	strh	r3, [r4, #12]
 8024e12:	9b01      	ldr	r3, [sp, #4]
 8024e14:	6126      	str	r6, [r4, #16]
 8024e16:	18f6      	adds	r6, r6, r3
 8024e18:	6026      	str	r6, [r4, #0]
 8024e1a:	003e      	movs	r6, r7
 8024e1c:	6165      	str	r5, [r4, #20]
 8024e1e:	1aed      	subs	r5, r5, r3
 8024e20:	60a5      	str	r5, [r4, #8]
 8024e22:	42be      	cmp	r6, r7
 8024e24:	d900      	bls.n	8024e28 <__ssputs_r+0x78>
 8024e26:	003e      	movs	r6, r7
 8024e28:	0032      	movs	r2, r6
 8024e2a:	9903      	ldr	r1, [sp, #12]
 8024e2c:	6820      	ldr	r0, [r4, #0]
 8024e2e:	f000 fb7e 	bl	802552e <memmove>
 8024e32:	2000      	movs	r0, #0
 8024e34:	68a3      	ldr	r3, [r4, #8]
 8024e36:	1b9b      	subs	r3, r3, r6
 8024e38:	60a3      	str	r3, [r4, #8]
 8024e3a:	6823      	ldr	r3, [r4, #0]
 8024e3c:	199b      	adds	r3, r3, r6
 8024e3e:	6023      	str	r3, [r4, #0]
 8024e40:	b005      	add	sp, #20
 8024e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e44:	002a      	movs	r2, r5
 8024e46:	9802      	ldr	r0, [sp, #8]
 8024e48:	f000 fc05 	bl	8025656 <_realloc_r>
 8024e4c:	1e06      	subs	r6, r0, #0
 8024e4e:	d1e0      	bne.n	8024e12 <__ssputs_r+0x62>
 8024e50:	6921      	ldr	r1, [r4, #16]
 8024e52:	9802      	ldr	r0, [sp, #8]
 8024e54:	f7fe fe62 	bl	8023b1c <_free_r>
 8024e58:	230c      	movs	r3, #12
 8024e5a:	2001      	movs	r0, #1
 8024e5c:	9a02      	ldr	r2, [sp, #8]
 8024e5e:	4240      	negs	r0, r0
 8024e60:	6013      	str	r3, [r2, #0]
 8024e62:	89a2      	ldrh	r2, [r4, #12]
 8024e64:	3334      	adds	r3, #52	@ 0x34
 8024e66:	4313      	orrs	r3, r2
 8024e68:	81a3      	strh	r3, [r4, #12]
 8024e6a:	e7e9      	b.n	8024e40 <__ssputs_r+0x90>
 8024e6c:	fffffb7f 	.word	0xfffffb7f

08024e70 <_svfiprintf_r>:
 8024e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e72:	b0a1      	sub	sp, #132	@ 0x84
 8024e74:	9003      	str	r0, [sp, #12]
 8024e76:	001d      	movs	r5, r3
 8024e78:	898b      	ldrh	r3, [r1, #12]
 8024e7a:	000f      	movs	r7, r1
 8024e7c:	0016      	movs	r6, r2
 8024e7e:	061b      	lsls	r3, r3, #24
 8024e80:	d511      	bpl.n	8024ea6 <_svfiprintf_r+0x36>
 8024e82:	690b      	ldr	r3, [r1, #16]
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	d10e      	bne.n	8024ea6 <_svfiprintf_r+0x36>
 8024e88:	2140      	movs	r1, #64	@ 0x40
 8024e8a:	f7ff fa17 	bl	80242bc <_malloc_r>
 8024e8e:	6038      	str	r0, [r7, #0]
 8024e90:	6138      	str	r0, [r7, #16]
 8024e92:	2800      	cmp	r0, #0
 8024e94:	d105      	bne.n	8024ea2 <_svfiprintf_r+0x32>
 8024e96:	230c      	movs	r3, #12
 8024e98:	9a03      	ldr	r2, [sp, #12]
 8024e9a:	6013      	str	r3, [r2, #0]
 8024e9c:	2001      	movs	r0, #1
 8024e9e:	4240      	negs	r0, r0
 8024ea0:	e0cf      	b.n	8025042 <_svfiprintf_r+0x1d2>
 8024ea2:	2340      	movs	r3, #64	@ 0x40
 8024ea4:	617b      	str	r3, [r7, #20]
 8024ea6:	2300      	movs	r3, #0
 8024ea8:	ac08      	add	r4, sp, #32
 8024eaa:	6163      	str	r3, [r4, #20]
 8024eac:	3320      	adds	r3, #32
 8024eae:	7663      	strb	r3, [r4, #25]
 8024eb0:	3310      	adds	r3, #16
 8024eb2:	76a3      	strb	r3, [r4, #26]
 8024eb4:	9507      	str	r5, [sp, #28]
 8024eb6:	0035      	movs	r5, r6
 8024eb8:	782b      	ldrb	r3, [r5, #0]
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	d001      	beq.n	8024ec2 <_svfiprintf_r+0x52>
 8024ebe:	2b25      	cmp	r3, #37	@ 0x25
 8024ec0:	d148      	bne.n	8024f54 <_svfiprintf_r+0xe4>
 8024ec2:	1bab      	subs	r3, r5, r6
 8024ec4:	9305      	str	r3, [sp, #20]
 8024ec6:	42b5      	cmp	r5, r6
 8024ec8:	d00b      	beq.n	8024ee2 <_svfiprintf_r+0x72>
 8024eca:	0032      	movs	r2, r6
 8024ecc:	0039      	movs	r1, r7
 8024ece:	9803      	ldr	r0, [sp, #12]
 8024ed0:	f7ff ff6e 	bl	8024db0 <__ssputs_r>
 8024ed4:	3001      	adds	r0, #1
 8024ed6:	d100      	bne.n	8024eda <_svfiprintf_r+0x6a>
 8024ed8:	e0ae      	b.n	8025038 <_svfiprintf_r+0x1c8>
 8024eda:	6963      	ldr	r3, [r4, #20]
 8024edc:	9a05      	ldr	r2, [sp, #20]
 8024ede:	189b      	adds	r3, r3, r2
 8024ee0:	6163      	str	r3, [r4, #20]
 8024ee2:	782b      	ldrb	r3, [r5, #0]
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	d100      	bne.n	8024eea <_svfiprintf_r+0x7a>
 8024ee8:	e0a6      	b.n	8025038 <_svfiprintf_r+0x1c8>
 8024eea:	2201      	movs	r2, #1
 8024eec:	2300      	movs	r3, #0
 8024eee:	4252      	negs	r2, r2
 8024ef0:	6062      	str	r2, [r4, #4]
 8024ef2:	a904      	add	r1, sp, #16
 8024ef4:	3254      	adds	r2, #84	@ 0x54
 8024ef6:	1852      	adds	r2, r2, r1
 8024ef8:	1c6e      	adds	r6, r5, #1
 8024efa:	6023      	str	r3, [r4, #0]
 8024efc:	60e3      	str	r3, [r4, #12]
 8024efe:	60a3      	str	r3, [r4, #8]
 8024f00:	7013      	strb	r3, [r2, #0]
 8024f02:	65a3      	str	r3, [r4, #88]	@ 0x58
 8024f04:	4b54      	ldr	r3, [pc, #336]	@ (8025058 <_svfiprintf_r+0x1e8>)
 8024f06:	2205      	movs	r2, #5
 8024f08:	0018      	movs	r0, r3
 8024f0a:	7831      	ldrb	r1, [r6, #0]
 8024f0c:	9305      	str	r3, [sp, #20]
 8024f0e:	f7fd ff68 	bl	8022de2 <memchr>
 8024f12:	1c75      	adds	r5, r6, #1
 8024f14:	2800      	cmp	r0, #0
 8024f16:	d11f      	bne.n	8024f58 <_svfiprintf_r+0xe8>
 8024f18:	6822      	ldr	r2, [r4, #0]
 8024f1a:	06d3      	lsls	r3, r2, #27
 8024f1c:	d504      	bpl.n	8024f28 <_svfiprintf_r+0xb8>
 8024f1e:	2353      	movs	r3, #83	@ 0x53
 8024f20:	a904      	add	r1, sp, #16
 8024f22:	185b      	adds	r3, r3, r1
 8024f24:	2120      	movs	r1, #32
 8024f26:	7019      	strb	r1, [r3, #0]
 8024f28:	0713      	lsls	r3, r2, #28
 8024f2a:	d504      	bpl.n	8024f36 <_svfiprintf_r+0xc6>
 8024f2c:	2353      	movs	r3, #83	@ 0x53
 8024f2e:	a904      	add	r1, sp, #16
 8024f30:	185b      	adds	r3, r3, r1
 8024f32:	212b      	movs	r1, #43	@ 0x2b
 8024f34:	7019      	strb	r1, [r3, #0]
 8024f36:	7833      	ldrb	r3, [r6, #0]
 8024f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8024f3a:	d016      	beq.n	8024f6a <_svfiprintf_r+0xfa>
 8024f3c:	0035      	movs	r5, r6
 8024f3e:	2100      	movs	r1, #0
 8024f40:	200a      	movs	r0, #10
 8024f42:	68e3      	ldr	r3, [r4, #12]
 8024f44:	782a      	ldrb	r2, [r5, #0]
 8024f46:	1c6e      	adds	r6, r5, #1
 8024f48:	3a30      	subs	r2, #48	@ 0x30
 8024f4a:	2a09      	cmp	r2, #9
 8024f4c:	d950      	bls.n	8024ff0 <_svfiprintf_r+0x180>
 8024f4e:	2900      	cmp	r1, #0
 8024f50:	d111      	bne.n	8024f76 <_svfiprintf_r+0x106>
 8024f52:	e017      	b.n	8024f84 <_svfiprintf_r+0x114>
 8024f54:	3501      	adds	r5, #1
 8024f56:	e7af      	b.n	8024eb8 <_svfiprintf_r+0x48>
 8024f58:	9b05      	ldr	r3, [sp, #20]
 8024f5a:	6822      	ldr	r2, [r4, #0]
 8024f5c:	1ac0      	subs	r0, r0, r3
 8024f5e:	2301      	movs	r3, #1
 8024f60:	4083      	lsls	r3, r0
 8024f62:	4313      	orrs	r3, r2
 8024f64:	002e      	movs	r6, r5
 8024f66:	6023      	str	r3, [r4, #0]
 8024f68:	e7cc      	b.n	8024f04 <_svfiprintf_r+0x94>
 8024f6a:	9b07      	ldr	r3, [sp, #28]
 8024f6c:	1d19      	adds	r1, r3, #4
 8024f6e:	681b      	ldr	r3, [r3, #0]
 8024f70:	9107      	str	r1, [sp, #28]
 8024f72:	2b00      	cmp	r3, #0
 8024f74:	db01      	blt.n	8024f7a <_svfiprintf_r+0x10a>
 8024f76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024f78:	e004      	b.n	8024f84 <_svfiprintf_r+0x114>
 8024f7a:	425b      	negs	r3, r3
 8024f7c:	60e3      	str	r3, [r4, #12]
 8024f7e:	2302      	movs	r3, #2
 8024f80:	4313      	orrs	r3, r2
 8024f82:	6023      	str	r3, [r4, #0]
 8024f84:	782b      	ldrb	r3, [r5, #0]
 8024f86:	2b2e      	cmp	r3, #46	@ 0x2e
 8024f88:	d10c      	bne.n	8024fa4 <_svfiprintf_r+0x134>
 8024f8a:	786b      	ldrb	r3, [r5, #1]
 8024f8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8024f8e:	d134      	bne.n	8024ffa <_svfiprintf_r+0x18a>
 8024f90:	9b07      	ldr	r3, [sp, #28]
 8024f92:	3502      	adds	r5, #2
 8024f94:	1d1a      	adds	r2, r3, #4
 8024f96:	681b      	ldr	r3, [r3, #0]
 8024f98:	9207      	str	r2, [sp, #28]
 8024f9a:	2b00      	cmp	r3, #0
 8024f9c:	da01      	bge.n	8024fa2 <_svfiprintf_r+0x132>
 8024f9e:	2301      	movs	r3, #1
 8024fa0:	425b      	negs	r3, r3
 8024fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8024fa4:	4e2d      	ldr	r6, [pc, #180]	@ (802505c <_svfiprintf_r+0x1ec>)
 8024fa6:	2203      	movs	r2, #3
 8024fa8:	0030      	movs	r0, r6
 8024faa:	7829      	ldrb	r1, [r5, #0]
 8024fac:	f7fd ff19 	bl	8022de2 <memchr>
 8024fb0:	2800      	cmp	r0, #0
 8024fb2:	d006      	beq.n	8024fc2 <_svfiprintf_r+0x152>
 8024fb4:	2340      	movs	r3, #64	@ 0x40
 8024fb6:	1b80      	subs	r0, r0, r6
 8024fb8:	4083      	lsls	r3, r0
 8024fba:	6822      	ldr	r2, [r4, #0]
 8024fbc:	3501      	adds	r5, #1
 8024fbe:	4313      	orrs	r3, r2
 8024fc0:	6023      	str	r3, [r4, #0]
 8024fc2:	7829      	ldrb	r1, [r5, #0]
 8024fc4:	2206      	movs	r2, #6
 8024fc6:	4826      	ldr	r0, [pc, #152]	@ (8025060 <_svfiprintf_r+0x1f0>)
 8024fc8:	1c6e      	adds	r6, r5, #1
 8024fca:	7621      	strb	r1, [r4, #24]
 8024fcc:	f7fd ff09 	bl	8022de2 <memchr>
 8024fd0:	2800      	cmp	r0, #0
 8024fd2:	d038      	beq.n	8025046 <_svfiprintf_r+0x1d6>
 8024fd4:	4b23      	ldr	r3, [pc, #140]	@ (8025064 <_svfiprintf_r+0x1f4>)
 8024fd6:	2b00      	cmp	r3, #0
 8024fd8:	d122      	bne.n	8025020 <_svfiprintf_r+0x1b0>
 8024fda:	2207      	movs	r2, #7
 8024fdc:	9b07      	ldr	r3, [sp, #28]
 8024fde:	3307      	adds	r3, #7
 8024fe0:	4393      	bics	r3, r2
 8024fe2:	3308      	adds	r3, #8
 8024fe4:	9307      	str	r3, [sp, #28]
 8024fe6:	6963      	ldr	r3, [r4, #20]
 8024fe8:	9a04      	ldr	r2, [sp, #16]
 8024fea:	189b      	adds	r3, r3, r2
 8024fec:	6163      	str	r3, [r4, #20]
 8024fee:	e762      	b.n	8024eb6 <_svfiprintf_r+0x46>
 8024ff0:	4343      	muls	r3, r0
 8024ff2:	0035      	movs	r5, r6
 8024ff4:	2101      	movs	r1, #1
 8024ff6:	189b      	adds	r3, r3, r2
 8024ff8:	e7a4      	b.n	8024f44 <_svfiprintf_r+0xd4>
 8024ffa:	2300      	movs	r3, #0
 8024ffc:	200a      	movs	r0, #10
 8024ffe:	0019      	movs	r1, r3
 8025000:	3501      	adds	r5, #1
 8025002:	6063      	str	r3, [r4, #4]
 8025004:	782a      	ldrb	r2, [r5, #0]
 8025006:	1c6e      	adds	r6, r5, #1
 8025008:	3a30      	subs	r2, #48	@ 0x30
 802500a:	2a09      	cmp	r2, #9
 802500c:	d903      	bls.n	8025016 <_svfiprintf_r+0x1a6>
 802500e:	2b00      	cmp	r3, #0
 8025010:	d0c8      	beq.n	8024fa4 <_svfiprintf_r+0x134>
 8025012:	9109      	str	r1, [sp, #36]	@ 0x24
 8025014:	e7c6      	b.n	8024fa4 <_svfiprintf_r+0x134>
 8025016:	4341      	muls	r1, r0
 8025018:	0035      	movs	r5, r6
 802501a:	2301      	movs	r3, #1
 802501c:	1889      	adds	r1, r1, r2
 802501e:	e7f1      	b.n	8025004 <_svfiprintf_r+0x194>
 8025020:	aa07      	add	r2, sp, #28
 8025022:	9200      	str	r2, [sp, #0]
 8025024:	0021      	movs	r1, r4
 8025026:	003a      	movs	r2, r7
 8025028:	4b0f      	ldr	r3, [pc, #60]	@ (8025068 <_svfiprintf_r+0x1f8>)
 802502a:	9803      	ldr	r0, [sp, #12]
 802502c:	f7fc ffb2 	bl	8021f94 <_printf_float>
 8025030:	9004      	str	r0, [sp, #16]
 8025032:	9b04      	ldr	r3, [sp, #16]
 8025034:	3301      	adds	r3, #1
 8025036:	d1d6      	bne.n	8024fe6 <_svfiprintf_r+0x176>
 8025038:	89bb      	ldrh	r3, [r7, #12]
 802503a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802503c:	065b      	lsls	r3, r3, #25
 802503e:	d500      	bpl.n	8025042 <_svfiprintf_r+0x1d2>
 8025040:	e72c      	b.n	8024e9c <_svfiprintf_r+0x2c>
 8025042:	b021      	add	sp, #132	@ 0x84
 8025044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025046:	aa07      	add	r2, sp, #28
 8025048:	9200      	str	r2, [sp, #0]
 802504a:	0021      	movs	r1, r4
 802504c:	003a      	movs	r2, r7
 802504e:	4b06      	ldr	r3, [pc, #24]	@ (8025068 <_svfiprintf_r+0x1f8>)
 8025050:	9803      	ldr	r0, [sp, #12]
 8025052:	f7fd fa4d 	bl	80224f0 <_printf_i>
 8025056:	e7eb      	b.n	8025030 <_svfiprintf_r+0x1c0>
 8025058:	08029ab0 	.word	0x08029ab0
 802505c:	08029ab6 	.word	0x08029ab6
 8025060:	08029aba 	.word	0x08029aba
 8025064:	08021f95 	.word	0x08021f95
 8025068:	08024db1 	.word	0x08024db1

0802506c <__sfputc_r>:
 802506c:	6893      	ldr	r3, [r2, #8]
 802506e:	b510      	push	{r4, lr}
 8025070:	3b01      	subs	r3, #1
 8025072:	6093      	str	r3, [r2, #8]
 8025074:	2b00      	cmp	r3, #0
 8025076:	da04      	bge.n	8025082 <__sfputc_r+0x16>
 8025078:	6994      	ldr	r4, [r2, #24]
 802507a:	42a3      	cmp	r3, r4
 802507c:	db07      	blt.n	802508e <__sfputc_r+0x22>
 802507e:	290a      	cmp	r1, #10
 8025080:	d005      	beq.n	802508e <__sfputc_r+0x22>
 8025082:	6813      	ldr	r3, [r2, #0]
 8025084:	1c58      	adds	r0, r3, #1
 8025086:	6010      	str	r0, [r2, #0]
 8025088:	7019      	strb	r1, [r3, #0]
 802508a:	0008      	movs	r0, r1
 802508c:	bd10      	pop	{r4, pc}
 802508e:	f7fd fd37 	bl	8022b00 <__swbuf_r>
 8025092:	0001      	movs	r1, r0
 8025094:	e7f9      	b.n	802508a <__sfputc_r+0x1e>

08025096 <__sfputs_r>:
 8025096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025098:	0006      	movs	r6, r0
 802509a:	000f      	movs	r7, r1
 802509c:	0014      	movs	r4, r2
 802509e:	18d5      	adds	r5, r2, r3
 80250a0:	42ac      	cmp	r4, r5
 80250a2:	d101      	bne.n	80250a8 <__sfputs_r+0x12>
 80250a4:	2000      	movs	r0, #0
 80250a6:	e007      	b.n	80250b8 <__sfputs_r+0x22>
 80250a8:	7821      	ldrb	r1, [r4, #0]
 80250aa:	003a      	movs	r2, r7
 80250ac:	0030      	movs	r0, r6
 80250ae:	f7ff ffdd 	bl	802506c <__sfputc_r>
 80250b2:	3401      	adds	r4, #1
 80250b4:	1c43      	adds	r3, r0, #1
 80250b6:	d1f3      	bne.n	80250a0 <__sfputs_r+0xa>
 80250b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080250bc <_vfiprintf_r>:
 80250bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250be:	b0a1      	sub	sp, #132	@ 0x84
 80250c0:	000f      	movs	r7, r1
 80250c2:	0015      	movs	r5, r2
 80250c4:	001e      	movs	r6, r3
 80250c6:	9003      	str	r0, [sp, #12]
 80250c8:	2800      	cmp	r0, #0
 80250ca:	d004      	beq.n	80250d6 <_vfiprintf_r+0x1a>
 80250cc:	6a03      	ldr	r3, [r0, #32]
 80250ce:	2b00      	cmp	r3, #0
 80250d0:	d101      	bne.n	80250d6 <_vfiprintf_r+0x1a>
 80250d2:	f7fd fbab 	bl	802282c <__sinit>
 80250d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80250d8:	07db      	lsls	r3, r3, #31
 80250da:	d405      	bmi.n	80250e8 <_vfiprintf_r+0x2c>
 80250dc:	89bb      	ldrh	r3, [r7, #12]
 80250de:	059b      	lsls	r3, r3, #22
 80250e0:	d402      	bmi.n	80250e8 <_vfiprintf_r+0x2c>
 80250e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80250e4:	f7fd fe7b 	bl	8022dde <__retarget_lock_acquire_recursive>
 80250e8:	89bb      	ldrh	r3, [r7, #12]
 80250ea:	071b      	lsls	r3, r3, #28
 80250ec:	d502      	bpl.n	80250f4 <_vfiprintf_r+0x38>
 80250ee:	693b      	ldr	r3, [r7, #16]
 80250f0:	2b00      	cmp	r3, #0
 80250f2:	d113      	bne.n	802511c <_vfiprintf_r+0x60>
 80250f4:	0039      	movs	r1, r7
 80250f6:	9803      	ldr	r0, [sp, #12]
 80250f8:	f7fd fd44 	bl	8022b84 <__swsetup_r>
 80250fc:	2800      	cmp	r0, #0
 80250fe:	d00d      	beq.n	802511c <_vfiprintf_r+0x60>
 8025100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025102:	07db      	lsls	r3, r3, #31
 8025104:	d503      	bpl.n	802510e <_vfiprintf_r+0x52>
 8025106:	2001      	movs	r0, #1
 8025108:	4240      	negs	r0, r0
 802510a:	b021      	add	sp, #132	@ 0x84
 802510c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802510e:	89bb      	ldrh	r3, [r7, #12]
 8025110:	059b      	lsls	r3, r3, #22
 8025112:	d4f8      	bmi.n	8025106 <_vfiprintf_r+0x4a>
 8025114:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025116:	f7fd fe63 	bl	8022de0 <__retarget_lock_release_recursive>
 802511a:	e7f4      	b.n	8025106 <_vfiprintf_r+0x4a>
 802511c:	2300      	movs	r3, #0
 802511e:	ac08      	add	r4, sp, #32
 8025120:	6163      	str	r3, [r4, #20]
 8025122:	3320      	adds	r3, #32
 8025124:	7663      	strb	r3, [r4, #25]
 8025126:	3310      	adds	r3, #16
 8025128:	76a3      	strb	r3, [r4, #26]
 802512a:	9607      	str	r6, [sp, #28]
 802512c:	002e      	movs	r6, r5
 802512e:	7833      	ldrb	r3, [r6, #0]
 8025130:	2b00      	cmp	r3, #0
 8025132:	d001      	beq.n	8025138 <_vfiprintf_r+0x7c>
 8025134:	2b25      	cmp	r3, #37	@ 0x25
 8025136:	d148      	bne.n	80251ca <_vfiprintf_r+0x10e>
 8025138:	1b73      	subs	r3, r6, r5
 802513a:	9305      	str	r3, [sp, #20]
 802513c:	42ae      	cmp	r6, r5
 802513e:	d00b      	beq.n	8025158 <_vfiprintf_r+0x9c>
 8025140:	002a      	movs	r2, r5
 8025142:	0039      	movs	r1, r7
 8025144:	9803      	ldr	r0, [sp, #12]
 8025146:	f7ff ffa6 	bl	8025096 <__sfputs_r>
 802514a:	3001      	adds	r0, #1
 802514c:	d100      	bne.n	8025150 <_vfiprintf_r+0x94>
 802514e:	e0ae      	b.n	80252ae <_vfiprintf_r+0x1f2>
 8025150:	6963      	ldr	r3, [r4, #20]
 8025152:	9a05      	ldr	r2, [sp, #20]
 8025154:	189b      	adds	r3, r3, r2
 8025156:	6163      	str	r3, [r4, #20]
 8025158:	7833      	ldrb	r3, [r6, #0]
 802515a:	2b00      	cmp	r3, #0
 802515c:	d100      	bne.n	8025160 <_vfiprintf_r+0xa4>
 802515e:	e0a6      	b.n	80252ae <_vfiprintf_r+0x1f2>
 8025160:	2201      	movs	r2, #1
 8025162:	2300      	movs	r3, #0
 8025164:	4252      	negs	r2, r2
 8025166:	6062      	str	r2, [r4, #4]
 8025168:	a904      	add	r1, sp, #16
 802516a:	3254      	adds	r2, #84	@ 0x54
 802516c:	1852      	adds	r2, r2, r1
 802516e:	1c75      	adds	r5, r6, #1
 8025170:	6023      	str	r3, [r4, #0]
 8025172:	60e3      	str	r3, [r4, #12]
 8025174:	60a3      	str	r3, [r4, #8]
 8025176:	7013      	strb	r3, [r2, #0]
 8025178:	65a3      	str	r3, [r4, #88]	@ 0x58
 802517a:	4b59      	ldr	r3, [pc, #356]	@ (80252e0 <_vfiprintf_r+0x224>)
 802517c:	2205      	movs	r2, #5
 802517e:	0018      	movs	r0, r3
 8025180:	7829      	ldrb	r1, [r5, #0]
 8025182:	9305      	str	r3, [sp, #20]
 8025184:	f7fd fe2d 	bl	8022de2 <memchr>
 8025188:	1c6e      	adds	r6, r5, #1
 802518a:	2800      	cmp	r0, #0
 802518c:	d11f      	bne.n	80251ce <_vfiprintf_r+0x112>
 802518e:	6822      	ldr	r2, [r4, #0]
 8025190:	06d3      	lsls	r3, r2, #27
 8025192:	d504      	bpl.n	802519e <_vfiprintf_r+0xe2>
 8025194:	2353      	movs	r3, #83	@ 0x53
 8025196:	a904      	add	r1, sp, #16
 8025198:	185b      	adds	r3, r3, r1
 802519a:	2120      	movs	r1, #32
 802519c:	7019      	strb	r1, [r3, #0]
 802519e:	0713      	lsls	r3, r2, #28
 80251a0:	d504      	bpl.n	80251ac <_vfiprintf_r+0xf0>
 80251a2:	2353      	movs	r3, #83	@ 0x53
 80251a4:	a904      	add	r1, sp, #16
 80251a6:	185b      	adds	r3, r3, r1
 80251a8:	212b      	movs	r1, #43	@ 0x2b
 80251aa:	7019      	strb	r1, [r3, #0]
 80251ac:	782b      	ldrb	r3, [r5, #0]
 80251ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80251b0:	d016      	beq.n	80251e0 <_vfiprintf_r+0x124>
 80251b2:	002e      	movs	r6, r5
 80251b4:	2100      	movs	r1, #0
 80251b6:	200a      	movs	r0, #10
 80251b8:	68e3      	ldr	r3, [r4, #12]
 80251ba:	7832      	ldrb	r2, [r6, #0]
 80251bc:	1c75      	adds	r5, r6, #1
 80251be:	3a30      	subs	r2, #48	@ 0x30
 80251c0:	2a09      	cmp	r2, #9
 80251c2:	d950      	bls.n	8025266 <_vfiprintf_r+0x1aa>
 80251c4:	2900      	cmp	r1, #0
 80251c6:	d111      	bne.n	80251ec <_vfiprintf_r+0x130>
 80251c8:	e017      	b.n	80251fa <_vfiprintf_r+0x13e>
 80251ca:	3601      	adds	r6, #1
 80251cc:	e7af      	b.n	802512e <_vfiprintf_r+0x72>
 80251ce:	9b05      	ldr	r3, [sp, #20]
 80251d0:	6822      	ldr	r2, [r4, #0]
 80251d2:	1ac0      	subs	r0, r0, r3
 80251d4:	2301      	movs	r3, #1
 80251d6:	4083      	lsls	r3, r0
 80251d8:	4313      	orrs	r3, r2
 80251da:	0035      	movs	r5, r6
 80251dc:	6023      	str	r3, [r4, #0]
 80251de:	e7cc      	b.n	802517a <_vfiprintf_r+0xbe>
 80251e0:	9b07      	ldr	r3, [sp, #28]
 80251e2:	1d19      	adds	r1, r3, #4
 80251e4:	681b      	ldr	r3, [r3, #0]
 80251e6:	9107      	str	r1, [sp, #28]
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	db01      	blt.n	80251f0 <_vfiprintf_r+0x134>
 80251ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80251ee:	e004      	b.n	80251fa <_vfiprintf_r+0x13e>
 80251f0:	425b      	negs	r3, r3
 80251f2:	60e3      	str	r3, [r4, #12]
 80251f4:	2302      	movs	r3, #2
 80251f6:	4313      	orrs	r3, r2
 80251f8:	6023      	str	r3, [r4, #0]
 80251fa:	7833      	ldrb	r3, [r6, #0]
 80251fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80251fe:	d10c      	bne.n	802521a <_vfiprintf_r+0x15e>
 8025200:	7873      	ldrb	r3, [r6, #1]
 8025202:	2b2a      	cmp	r3, #42	@ 0x2a
 8025204:	d134      	bne.n	8025270 <_vfiprintf_r+0x1b4>
 8025206:	9b07      	ldr	r3, [sp, #28]
 8025208:	3602      	adds	r6, #2
 802520a:	1d1a      	adds	r2, r3, #4
 802520c:	681b      	ldr	r3, [r3, #0]
 802520e:	9207      	str	r2, [sp, #28]
 8025210:	2b00      	cmp	r3, #0
 8025212:	da01      	bge.n	8025218 <_vfiprintf_r+0x15c>
 8025214:	2301      	movs	r3, #1
 8025216:	425b      	negs	r3, r3
 8025218:	9309      	str	r3, [sp, #36]	@ 0x24
 802521a:	4d32      	ldr	r5, [pc, #200]	@ (80252e4 <_vfiprintf_r+0x228>)
 802521c:	2203      	movs	r2, #3
 802521e:	0028      	movs	r0, r5
 8025220:	7831      	ldrb	r1, [r6, #0]
 8025222:	f7fd fdde 	bl	8022de2 <memchr>
 8025226:	2800      	cmp	r0, #0
 8025228:	d006      	beq.n	8025238 <_vfiprintf_r+0x17c>
 802522a:	2340      	movs	r3, #64	@ 0x40
 802522c:	1b40      	subs	r0, r0, r5
 802522e:	4083      	lsls	r3, r0
 8025230:	6822      	ldr	r2, [r4, #0]
 8025232:	3601      	adds	r6, #1
 8025234:	4313      	orrs	r3, r2
 8025236:	6023      	str	r3, [r4, #0]
 8025238:	7831      	ldrb	r1, [r6, #0]
 802523a:	2206      	movs	r2, #6
 802523c:	482a      	ldr	r0, [pc, #168]	@ (80252e8 <_vfiprintf_r+0x22c>)
 802523e:	1c75      	adds	r5, r6, #1
 8025240:	7621      	strb	r1, [r4, #24]
 8025242:	f7fd fdce 	bl	8022de2 <memchr>
 8025246:	2800      	cmp	r0, #0
 8025248:	d040      	beq.n	80252cc <_vfiprintf_r+0x210>
 802524a:	4b28      	ldr	r3, [pc, #160]	@ (80252ec <_vfiprintf_r+0x230>)
 802524c:	2b00      	cmp	r3, #0
 802524e:	d122      	bne.n	8025296 <_vfiprintf_r+0x1da>
 8025250:	2207      	movs	r2, #7
 8025252:	9b07      	ldr	r3, [sp, #28]
 8025254:	3307      	adds	r3, #7
 8025256:	4393      	bics	r3, r2
 8025258:	3308      	adds	r3, #8
 802525a:	9307      	str	r3, [sp, #28]
 802525c:	6963      	ldr	r3, [r4, #20]
 802525e:	9a04      	ldr	r2, [sp, #16]
 8025260:	189b      	adds	r3, r3, r2
 8025262:	6163      	str	r3, [r4, #20]
 8025264:	e762      	b.n	802512c <_vfiprintf_r+0x70>
 8025266:	4343      	muls	r3, r0
 8025268:	002e      	movs	r6, r5
 802526a:	2101      	movs	r1, #1
 802526c:	189b      	adds	r3, r3, r2
 802526e:	e7a4      	b.n	80251ba <_vfiprintf_r+0xfe>
 8025270:	2300      	movs	r3, #0
 8025272:	200a      	movs	r0, #10
 8025274:	0019      	movs	r1, r3
 8025276:	3601      	adds	r6, #1
 8025278:	6063      	str	r3, [r4, #4]
 802527a:	7832      	ldrb	r2, [r6, #0]
 802527c:	1c75      	adds	r5, r6, #1
 802527e:	3a30      	subs	r2, #48	@ 0x30
 8025280:	2a09      	cmp	r2, #9
 8025282:	d903      	bls.n	802528c <_vfiprintf_r+0x1d0>
 8025284:	2b00      	cmp	r3, #0
 8025286:	d0c8      	beq.n	802521a <_vfiprintf_r+0x15e>
 8025288:	9109      	str	r1, [sp, #36]	@ 0x24
 802528a:	e7c6      	b.n	802521a <_vfiprintf_r+0x15e>
 802528c:	4341      	muls	r1, r0
 802528e:	002e      	movs	r6, r5
 8025290:	2301      	movs	r3, #1
 8025292:	1889      	adds	r1, r1, r2
 8025294:	e7f1      	b.n	802527a <_vfiprintf_r+0x1be>
 8025296:	aa07      	add	r2, sp, #28
 8025298:	9200      	str	r2, [sp, #0]
 802529a:	0021      	movs	r1, r4
 802529c:	003a      	movs	r2, r7
 802529e:	4b14      	ldr	r3, [pc, #80]	@ (80252f0 <_vfiprintf_r+0x234>)
 80252a0:	9803      	ldr	r0, [sp, #12]
 80252a2:	f7fc fe77 	bl	8021f94 <_printf_float>
 80252a6:	9004      	str	r0, [sp, #16]
 80252a8:	9b04      	ldr	r3, [sp, #16]
 80252aa:	3301      	adds	r3, #1
 80252ac:	d1d6      	bne.n	802525c <_vfiprintf_r+0x1a0>
 80252ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80252b0:	07db      	lsls	r3, r3, #31
 80252b2:	d405      	bmi.n	80252c0 <_vfiprintf_r+0x204>
 80252b4:	89bb      	ldrh	r3, [r7, #12]
 80252b6:	059b      	lsls	r3, r3, #22
 80252b8:	d402      	bmi.n	80252c0 <_vfiprintf_r+0x204>
 80252ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80252bc:	f7fd fd90 	bl	8022de0 <__retarget_lock_release_recursive>
 80252c0:	89bb      	ldrh	r3, [r7, #12]
 80252c2:	065b      	lsls	r3, r3, #25
 80252c4:	d500      	bpl.n	80252c8 <_vfiprintf_r+0x20c>
 80252c6:	e71e      	b.n	8025106 <_vfiprintf_r+0x4a>
 80252c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80252ca:	e71e      	b.n	802510a <_vfiprintf_r+0x4e>
 80252cc:	aa07      	add	r2, sp, #28
 80252ce:	9200      	str	r2, [sp, #0]
 80252d0:	0021      	movs	r1, r4
 80252d2:	003a      	movs	r2, r7
 80252d4:	4b06      	ldr	r3, [pc, #24]	@ (80252f0 <_vfiprintf_r+0x234>)
 80252d6:	9803      	ldr	r0, [sp, #12]
 80252d8:	f7fd f90a 	bl	80224f0 <_printf_i>
 80252dc:	e7e3      	b.n	80252a6 <_vfiprintf_r+0x1ea>
 80252de:	46c0      	nop			@ (mov r8, r8)
 80252e0:	08029ab0 	.word	0x08029ab0
 80252e4:	08029ab6 	.word	0x08029ab6
 80252e8:	08029aba 	.word	0x08029aba
 80252ec:	08021f95 	.word	0x08021f95
 80252f0:	08025097 	.word	0x08025097

080252f4 <__sflush_r>:
 80252f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80252f6:	220c      	movs	r2, #12
 80252f8:	5e8b      	ldrsh	r3, [r1, r2]
 80252fa:	0005      	movs	r5, r0
 80252fc:	000c      	movs	r4, r1
 80252fe:	071a      	lsls	r2, r3, #28
 8025300:	d456      	bmi.n	80253b0 <__sflush_r+0xbc>
 8025302:	684a      	ldr	r2, [r1, #4]
 8025304:	2a00      	cmp	r2, #0
 8025306:	dc02      	bgt.n	802530e <__sflush_r+0x1a>
 8025308:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802530a:	2a00      	cmp	r2, #0
 802530c:	dd4e      	ble.n	80253ac <__sflush_r+0xb8>
 802530e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8025310:	2f00      	cmp	r7, #0
 8025312:	d04b      	beq.n	80253ac <__sflush_r+0xb8>
 8025314:	2200      	movs	r2, #0
 8025316:	2080      	movs	r0, #128	@ 0x80
 8025318:	682e      	ldr	r6, [r5, #0]
 802531a:	602a      	str	r2, [r5, #0]
 802531c:	001a      	movs	r2, r3
 802531e:	0140      	lsls	r0, r0, #5
 8025320:	6a21      	ldr	r1, [r4, #32]
 8025322:	4002      	ands	r2, r0
 8025324:	4203      	tst	r3, r0
 8025326:	d033      	beq.n	8025390 <__sflush_r+0x9c>
 8025328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802532a:	89a3      	ldrh	r3, [r4, #12]
 802532c:	075b      	lsls	r3, r3, #29
 802532e:	d506      	bpl.n	802533e <__sflush_r+0x4a>
 8025330:	6863      	ldr	r3, [r4, #4]
 8025332:	1ad2      	subs	r2, r2, r3
 8025334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025336:	2b00      	cmp	r3, #0
 8025338:	d001      	beq.n	802533e <__sflush_r+0x4a>
 802533a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802533c:	1ad2      	subs	r2, r2, r3
 802533e:	2300      	movs	r3, #0
 8025340:	0028      	movs	r0, r5
 8025342:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8025344:	6a21      	ldr	r1, [r4, #32]
 8025346:	47b8      	blx	r7
 8025348:	89a2      	ldrh	r2, [r4, #12]
 802534a:	1c43      	adds	r3, r0, #1
 802534c:	d106      	bne.n	802535c <__sflush_r+0x68>
 802534e:	6829      	ldr	r1, [r5, #0]
 8025350:	291d      	cmp	r1, #29
 8025352:	d846      	bhi.n	80253e2 <__sflush_r+0xee>
 8025354:	4b29      	ldr	r3, [pc, #164]	@ (80253fc <__sflush_r+0x108>)
 8025356:	410b      	asrs	r3, r1
 8025358:	07db      	lsls	r3, r3, #31
 802535a:	d442      	bmi.n	80253e2 <__sflush_r+0xee>
 802535c:	2300      	movs	r3, #0
 802535e:	6063      	str	r3, [r4, #4]
 8025360:	6923      	ldr	r3, [r4, #16]
 8025362:	6023      	str	r3, [r4, #0]
 8025364:	04d2      	lsls	r2, r2, #19
 8025366:	d505      	bpl.n	8025374 <__sflush_r+0x80>
 8025368:	1c43      	adds	r3, r0, #1
 802536a:	d102      	bne.n	8025372 <__sflush_r+0x7e>
 802536c:	682b      	ldr	r3, [r5, #0]
 802536e:	2b00      	cmp	r3, #0
 8025370:	d100      	bne.n	8025374 <__sflush_r+0x80>
 8025372:	6560      	str	r0, [r4, #84]	@ 0x54
 8025374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025376:	602e      	str	r6, [r5, #0]
 8025378:	2900      	cmp	r1, #0
 802537a:	d017      	beq.n	80253ac <__sflush_r+0xb8>
 802537c:	0023      	movs	r3, r4
 802537e:	3344      	adds	r3, #68	@ 0x44
 8025380:	4299      	cmp	r1, r3
 8025382:	d002      	beq.n	802538a <__sflush_r+0x96>
 8025384:	0028      	movs	r0, r5
 8025386:	f7fe fbc9 	bl	8023b1c <_free_r>
 802538a:	2300      	movs	r3, #0
 802538c:	6363      	str	r3, [r4, #52]	@ 0x34
 802538e:	e00d      	b.n	80253ac <__sflush_r+0xb8>
 8025390:	2301      	movs	r3, #1
 8025392:	0028      	movs	r0, r5
 8025394:	47b8      	blx	r7
 8025396:	0002      	movs	r2, r0
 8025398:	1c43      	adds	r3, r0, #1
 802539a:	d1c6      	bne.n	802532a <__sflush_r+0x36>
 802539c:	682b      	ldr	r3, [r5, #0]
 802539e:	2b00      	cmp	r3, #0
 80253a0:	d0c3      	beq.n	802532a <__sflush_r+0x36>
 80253a2:	2b1d      	cmp	r3, #29
 80253a4:	d001      	beq.n	80253aa <__sflush_r+0xb6>
 80253a6:	2b16      	cmp	r3, #22
 80253a8:	d11a      	bne.n	80253e0 <__sflush_r+0xec>
 80253aa:	602e      	str	r6, [r5, #0]
 80253ac:	2000      	movs	r0, #0
 80253ae:	e01e      	b.n	80253ee <__sflush_r+0xfa>
 80253b0:	690e      	ldr	r6, [r1, #16]
 80253b2:	2e00      	cmp	r6, #0
 80253b4:	d0fa      	beq.n	80253ac <__sflush_r+0xb8>
 80253b6:	680f      	ldr	r7, [r1, #0]
 80253b8:	600e      	str	r6, [r1, #0]
 80253ba:	1bba      	subs	r2, r7, r6
 80253bc:	9201      	str	r2, [sp, #4]
 80253be:	2200      	movs	r2, #0
 80253c0:	079b      	lsls	r3, r3, #30
 80253c2:	d100      	bne.n	80253c6 <__sflush_r+0xd2>
 80253c4:	694a      	ldr	r2, [r1, #20]
 80253c6:	60a2      	str	r2, [r4, #8]
 80253c8:	9b01      	ldr	r3, [sp, #4]
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	ddee      	ble.n	80253ac <__sflush_r+0xb8>
 80253ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80253d0:	0032      	movs	r2, r6
 80253d2:	001f      	movs	r7, r3
 80253d4:	0028      	movs	r0, r5
 80253d6:	9b01      	ldr	r3, [sp, #4]
 80253d8:	6a21      	ldr	r1, [r4, #32]
 80253da:	47b8      	blx	r7
 80253dc:	2800      	cmp	r0, #0
 80253de:	dc07      	bgt.n	80253f0 <__sflush_r+0xfc>
 80253e0:	89a2      	ldrh	r2, [r4, #12]
 80253e2:	2340      	movs	r3, #64	@ 0x40
 80253e4:	2001      	movs	r0, #1
 80253e6:	4313      	orrs	r3, r2
 80253e8:	b21b      	sxth	r3, r3
 80253ea:	81a3      	strh	r3, [r4, #12]
 80253ec:	4240      	negs	r0, r0
 80253ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80253f0:	9b01      	ldr	r3, [sp, #4]
 80253f2:	1836      	adds	r6, r6, r0
 80253f4:	1a1b      	subs	r3, r3, r0
 80253f6:	9301      	str	r3, [sp, #4]
 80253f8:	e7e6      	b.n	80253c8 <__sflush_r+0xd4>
 80253fa:	46c0      	nop			@ (mov r8, r8)
 80253fc:	dfbffffe 	.word	0xdfbffffe

08025400 <_fflush_r>:
 8025400:	690b      	ldr	r3, [r1, #16]
 8025402:	b570      	push	{r4, r5, r6, lr}
 8025404:	0005      	movs	r5, r0
 8025406:	000c      	movs	r4, r1
 8025408:	2b00      	cmp	r3, #0
 802540a:	d102      	bne.n	8025412 <_fflush_r+0x12>
 802540c:	2500      	movs	r5, #0
 802540e:	0028      	movs	r0, r5
 8025410:	bd70      	pop	{r4, r5, r6, pc}
 8025412:	2800      	cmp	r0, #0
 8025414:	d004      	beq.n	8025420 <_fflush_r+0x20>
 8025416:	6a03      	ldr	r3, [r0, #32]
 8025418:	2b00      	cmp	r3, #0
 802541a:	d101      	bne.n	8025420 <_fflush_r+0x20>
 802541c:	f7fd fa06 	bl	802282c <__sinit>
 8025420:	220c      	movs	r2, #12
 8025422:	5ea3      	ldrsh	r3, [r4, r2]
 8025424:	2b00      	cmp	r3, #0
 8025426:	d0f1      	beq.n	802540c <_fflush_r+0xc>
 8025428:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802542a:	07d2      	lsls	r2, r2, #31
 802542c:	d404      	bmi.n	8025438 <_fflush_r+0x38>
 802542e:	059b      	lsls	r3, r3, #22
 8025430:	d402      	bmi.n	8025438 <_fflush_r+0x38>
 8025432:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025434:	f7fd fcd3 	bl	8022dde <__retarget_lock_acquire_recursive>
 8025438:	0028      	movs	r0, r5
 802543a:	0021      	movs	r1, r4
 802543c:	f7ff ff5a 	bl	80252f4 <__sflush_r>
 8025440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025442:	0005      	movs	r5, r0
 8025444:	07db      	lsls	r3, r3, #31
 8025446:	d4e2      	bmi.n	802540e <_fflush_r+0xe>
 8025448:	89a3      	ldrh	r3, [r4, #12]
 802544a:	059b      	lsls	r3, r3, #22
 802544c:	d4df      	bmi.n	802540e <_fflush_r+0xe>
 802544e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025450:	f7fd fcc6 	bl	8022de0 <__retarget_lock_release_recursive>
 8025454:	e7db      	b.n	802540e <_fflush_r+0xe>
	...

08025458 <__swhatbuf_r>:
 8025458:	b570      	push	{r4, r5, r6, lr}
 802545a:	000e      	movs	r6, r1
 802545c:	001d      	movs	r5, r3
 802545e:	230e      	movs	r3, #14
 8025460:	5ec9      	ldrsh	r1, [r1, r3]
 8025462:	0014      	movs	r4, r2
 8025464:	b096      	sub	sp, #88	@ 0x58
 8025466:	2900      	cmp	r1, #0
 8025468:	da0c      	bge.n	8025484 <__swhatbuf_r+0x2c>
 802546a:	89b2      	ldrh	r2, [r6, #12]
 802546c:	2380      	movs	r3, #128	@ 0x80
 802546e:	0011      	movs	r1, r2
 8025470:	4019      	ands	r1, r3
 8025472:	421a      	tst	r2, r3
 8025474:	d114      	bne.n	80254a0 <__swhatbuf_r+0x48>
 8025476:	2380      	movs	r3, #128	@ 0x80
 8025478:	00db      	lsls	r3, r3, #3
 802547a:	2000      	movs	r0, #0
 802547c:	6029      	str	r1, [r5, #0]
 802547e:	6023      	str	r3, [r4, #0]
 8025480:	b016      	add	sp, #88	@ 0x58
 8025482:	bd70      	pop	{r4, r5, r6, pc}
 8025484:	466a      	mov	r2, sp
 8025486:	f000 f865 	bl	8025554 <_fstat_r>
 802548a:	2800      	cmp	r0, #0
 802548c:	dbed      	blt.n	802546a <__swhatbuf_r+0x12>
 802548e:	23f0      	movs	r3, #240	@ 0xf0
 8025490:	9901      	ldr	r1, [sp, #4]
 8025492:	021b      	lsls	r3, r3, #8
 8025494:	4019      	ands	r1, r3
 8025496:	4b04      	ldr	r3, [pc, #16]	@ (80254a8 <__swhatbuf_r+0x50>)
 8025498:	18c9      	adds	r1, r1, r3
 802549a:	424b      	negs	r3, r1
 802549c:	4159      	adcs	r1, r3
 802549e:	e7ea      	b.n	8025476 <__swhatbuf_r+0x1e>
 80254a0:	2100      	movs	r1, #0
 80254a2:	2340      	movs	r3, #64	@ 0x40
 80254a4:	e7e9      	b.n	802547a <__swhatbuf_r+0x22>
 80254a6:	46c0      	nop			@ (mov r8, r8)
 80254a8:	ffffe000 	.word	0xffffe000

080254ac <__smakebuf_r>:
 80254ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80254ae:	2602      	movs	r6, #2
 80254b0:	898b      	ldrh	r3, [r1, #12]
 80254b2:	0005      	movs	r5, r0
 80254b4:	000c      	movs	r4, r1
 80254b6:	b085      	sub	sp, #20
 80254b8:	4233      	tst	r3, r6
 80254ba:	d007      	beq.n	80254cc <__smakebuf_r+0x20>
 80254bc:	0023      	movs	r3, r4
 80254be:	3347      	adds	r3, #71	@ 0x47
 80254c0:	6023      	str	r3, [r4, #0]
 80254c2:	6123      	str	r3, [r4, #16]
 80254c4:	2301      	movs	r3, #1
 80254c6:	6163      	str	r3, [r4, #20]
 80254c8:	b005      	add	sp, #20
 80254ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80254cc:	ab03      	add	r3, sp, #12
 80254ce:	aa02      	add	r2, sp, #8
 80254d0:	f7ff ffc2 	bl	8025458 <__swhatbuf_r>
 80254d4:	9f02      	ldr	r7, [sp, #8]
 80254d6:	9001      	str	r0, [sp, #4]
 80254d8:	0039      	movs	r1, r7
 80254da:	0028      	movs	r0, r5
 80254dc:	f7fe feee 	bl	80242bc <_malloc_r>
 80254e0:	2800      	cmp	r0, #0
 80254e2:	d108      	bne.n	80254f6 <__smakebuf_r+0x4a>
 80254e4:	220c      	movs	r2, #12
 80254e6:	5ea3      	ldrsh	r3, [r4, r2]
 80254e8:	059a      	lsls	r2, r3, #22
 80254ea:	d4ed      	bmi.n	80254c8 <__smakebuf_r+0x1c>
 80254ec:	2203      	movs	r2, #3
 80254ee:	4393      	bics	r3, r2
 80254f0:	431e      	orrs	r6, r3
 80254f2:	81a6      	strh	r6, [r4, #12]
 80254f4:	e7e2      	b.n	80254bc <__smakebuf_r+0x10>
 80254f6:	2380      	movs	r3, #128	@ 0x80
 80254f8:	89a2      	ldrh	r2, [r4, #12]
 80254fa:	6020      	str	r0, [r4, #0]
 80254fc:	4313      	orrs	r3, r2
 80254fe:	81a3      	strh	r3, [r4, #12]
 8025500:	9b03      	ldr	r3, [sp, #12]
 8025502:	6120      	str	r0, [r4, #16]
 8025504:	6167      	str	r7, [r4, #20]
 8025506:	2b00      	cmp	r3, #0
 8025508:	d00c      	beq.n	8025524 <__smakebuf_r+0x78>
 802550a:	0028      	movs	r0, r5
 802550c:	230e      	movs	r3, #14
 802550e:	5ee1      	ldrsh	r1, [r4, r3]
 8025510:	f000 f832 	bl	8025578 <_isatty_r>
 8025514:	2800      	cmp	r0, #0
 8025516:	d005      	beq.n	8025524 <__smakebuf_r+0x78>
 8025518:	2303      	movs	r3, #3
 802551a:	89a2      	ldrh	r2, [r4, #12]
 802551c:	439a      	bics	r2, r3
 802551e:	3b02      	subs	r3, #2
 8025520:	4313      	orrs	r3, r2
 8025522:	81a3      	strh	r3, [r4, #12]
 8025524:	89a3      	ldrh	r3, [r4, #12]
 8025526:	9a01      	ldr	r2, [sp, #4]
 8025528:	4313      	orrs	r3, r2
 802552a:	81a3      	strh	r3, [r4, #12]
 802552c:	e7cc      	b.n	80254c8 <__smakebuf_r+0x1c>

0802552e <memmove>:
 802552e:	b510      	push	{r4, lr}
 8025530:	4288      	cmp	r0, r1
 8025532:	d806      	bhi.n	8025542 <memmove+0x14>
 8025534:	2300      	movs	r3, #0
 8025536:	429a      	cmp	r2, r3
 8025538:	d008      	beq.n	802554c <memmove+0x1e>
 802553a:	5ccc      	ldrb	r4, [r1, r3]
 802553c:	54c4      	strb	r4, [r0, r3]
 802553e:	3301      	adds	r3, #1
 8025540:	e7f9      	b.n	8025536 <memmove+0x8>
 8025542:	188b      	adds	r3, r1, r2
 8025544:	4298      	cmp	r0, r3
 8025546:	d2f5      	bcs.n	8025534 <memmove+0x6>
 8025548:	3a01      	subs	r2, #1
 802554a:	d200      	bcs.n	802554e <memmove+0x20>
 802554c:	bd10      	pop	{r4, pc}
 802554e:	5c8b      	ldrb	r3, [r1, r2]
 8025550:	5483      	strb	r3, [r0, r2]
 8025552:	e7f9      	b.n	8025548 <memmove+0x1a>

08025554 <_fstat_r>:
 8025554:	2300      	movs	r3, #0
 8025556:	b570      	push	{r4, r5, r6, lr}
 8025558:	4d06      	ldr	r5, [pc, #24]	@ (8025574 <_fstat_r+0x20>)
 802555a:	0004      	movs	r4, r0
 802555c:	0008      	movs	r0, r1
 802555e:	0011      	movs	r1, r2
 8025560:	602b      	str	r3, [r5, #0]
 8025562:	f7ea fdbb 	bl	80100dc <_fstat>
 8025566:	1c43      	adds	r3, r0, #1
 8025568:	d103      	bne.n	8025572 <_fstat_r+0x1e>
 802556a:	682b      	ldr	r3, [r5, #0]
 802556c:	2b00      	cmp	r3, #0
 802556e:	d000      	beq.n	8025572 <_fstat_r+0x1e>
 8025570:	6023      	str	r3, [r4, #0]
 8025572:	bd70      	pop	{r4, r5, r6, pc}
 8025574:	2000358c 	.word	0x2000358c

08025578 <_isatty_r>:
 8025578:	2300      	movs	r3, #0
 802557a:	b570      	push	{r4, r5, r6, lr}
 802557c:	4d06      	ldr	r5, [pc, #24]	@ (8025598 <_isatty_r+0x20>)
 802557e:	0004      	movs	r4, r0
 8025580:	0008      	movs	r0, r1
 8025582:	602b      	str	r3, [r5, #0]
 8025584:	f7ea fdb8 	bl	80100f8 <_isatty>
 8025588:	1c43      	adds	r3, r0, #1
 802558a:	d103      	bne.n	8025594 <_isatty_r+0x1c>
 802558c:	682b      	ldr	r3, [r5, #0]
 802558e:	2b00      	cmp	r3, #0
 8025590:	d000      	beq.n	8025594 <_isatty_r+0x1c>
 8025592:	6023      	str	r3, [r4, #0]
 8025594:	bd70      	pop	{r4, r5, r6, pc}
 8025596:	46c0      	nop			@ (mov r8, r8)
 8025598:	2000358c 	.word	0x2000358c

0802559c <_sbrk_r>:
 802559c:	2300      	movs	r3, #0
 802559e:	b570      	push	{r4, r5, r6, lr}
 80255a0:	4d06      	ldr	r5, [pc, #24]	@ (80255bc <_sbrk_r+0x20>)
 80255a2:	0004      	movs	r4, r0
 80255a4:	0008      	movs	r0, r1
 80255a6:	602b      	str	r3, [r5, #0]
 80255a8:	f7ea fdba 	bl	8010120 <_sbrk>
 80255ac:	1c43      	adds	r3, r0, #1
 80255ae:	d103      	bne.n	80255b8 <_sbrk_r+0x1c>
 80255b0:	682b      	ldr	r3, [r5, #0]
 80255b2:	2b00      	cmp	r3, #0
 80255b4:	d000      	beq.n	80255b8 <_sbrk_r+0x1c>
 80255b6:	6023      	str	r3, [r4, #0]
 80255b8:	bd70      	pop	{r4, r5, r6, pc}
 80255ba:	46c0      	nop			@ (mov r8, r8)
 80255bc:	2000358c 	.word	0x2000358c

080255c0 <__assert_func>:
 80255c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80255c2:	0014      	movs	r4, r2
 80255c4:	001a      	movs	r2, r3
 80255c6:	4b09      	ldr	r3, [pc, #36]	@ (80255ec <__assert_func+0x2c>)
 80255c8:	0005      	movs	r5, r0
 80255ca:	681b      	ldr	r3, [r3, #0]
 80255cc:	000e      	movs	r6, r1
 80255ce:	68d8      	ldr	r0, [r3, #12]
 80255d0:	4b07      	ldr	r3, [pc, #28]	@ (80255f0 <__assert_func+0x30>)
 80255d2:	2c00      	cmp	r4, #0
 80255d4:	d101      	bne.n	80255da <__assert_func+0x1a>
 80255d6:	4b07      	ldr	r3, [pc, #28]	@ (80255f4 <__assert_func+0x34>)
 80255d8:	001c      	movs	r4, r3
 80255da:	4907      	ldr	r1, [pc, #28]	@ (80255f8 <__assert_func+0x38>)
 80255dc:	9301      	str	r3, [sp, #4]
 80255de:	9402      	str	r4, [sp, #8]
 80255e0:	002b      	movs	r3, r5
 80255e2:	9600      	str	r6, [sp, #0]
 80255e4:	f000 f866 	bl	80256b4 <fiprintf>
 80255e8:	f000 f874 	bl	80256d4 <abort>
 80255ec:	200003e4 	.word	0x200003e4
 80255f0:	08029ac1 	.word	0x08029ac1
 80255f4:	08029afc 	.word	0x08029afc
 80255f8:	08029ace 	.word	0x08029ace

080255fc <_calloc_r>:
 80255fc:	b570      	push	{r4, r5, r6, lr}
 80255fe:	0c0b      	lsrs	r3, r1, #16
 8025600:	0c15      	lsrs	r5, r2, #16
 8025602:	2b00      	cmp	r3, #0
 8025604:	d11e      	bne.n	8025644 <_calloc_r+0x48>
 8025606:	2d00      	cmp	r5, #0
 8025608:	d10c      	bne.n	8025624 <_calloc_r+0x28>
 802560a:	b289      	uxth	r1, r1
 802560c:	b294      	uxth	r4, r2
 802560e:	434c      	muls	r4, r1
 8025610:	0021      	movs	r1, r4
 8025612:	f7fe fe53 	bl	80242bc <_malloc_r>
 8025616:	1e05      	subs	r5, r0, #0
 8025618:	d01a      	beq.n	8025650 <_calloc_r+0x54>
 802561a:	0022      	movs	r2, r4
 802561c:	2100      	movs	r1, #0
 802561e:	f7fd fb0f 	bl	8022c40 <memset>
 8025622:	e016      	b.n	8025652 <_calloc_r+0x56>
 8025624:	1c2b      	adds	r3, r5, #0
 8025626:	1c0c      	adds	r4, r1, #0
 8025628:	b289      	uxth	r1, r1
 802562a:	b292      	uxth	r2, r2
 802562c:	434a      	muls	r2, r1
 802562e:	b29b      	uxth	r3, r3
 8025630:	b2a1      	uxth	r1, r4
 8025632:	4359      	muls	r1, r3
 8025634:	0c14      	lsrs	r4, r2, #16
 8025636:	190c      	adds	r4, r1, r4
 8025638:	0c23      	lsrs	r3, r4, #16
 802563a:	d107      	bne.n	802564c <_calloc_r+0x50>
 802563c:	0424      	lsls	r4, r4, #16
 802563e:	b292      	uxth	r2, r2
 8025640:	4314      	orrs	r4, r2
 8025642:	e7e5      	b.n	8025610 <_calloc_r+0x14>
 8025644:	2d00      	cmp	r5, #0
 8025646:	d101      	bne.n	802564c <_calloc_r+0x50>
 8025648:	1c14      	adds	r4, r2, #0
 802564a:	e7ed      	b.n	8025628 <_calloc_r+0x2c>
 802564c:	230c      	movs	r3, #12
 802564e:	6003      	str	r3, [r0, #0]
 8025650:	2500      	movs	r5, #0
 8025652:	0028      	movs	r0, r5
 8025654:	bd70      	pop	{r4, r5, r6, pc}

08025656 <_realloc_r>:
 8025656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025658:	0006      	movs	r6, r0
 802565a:	000c      	movs	r4, r1
 802565c:	0015      	movs	r5, r2
 802565e:	2900      	cmp	r1, #0
 8025660:	d105      	bne.n	802566e <_realloc_r+0x18>
 8025662:	0011      	movs	r1, r2
 8025664:	f7fe fe2a 	bl	80242bc <_malloc_r>
 8025668:	0004      	movs	r4, r0
 802566a:	0020      	movs	r0, r4
 802566c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802566e:	2a00      	cmp	r2, #0
 8025670:	d103      	bne.n	802567a <_realloc_r+0x24>
 8025672:	f7fe fa53 	bl	8023b1c <_free_r>
 8025676:	2400      	movs	r4, #0
 8025678:	e7f7      	b.n	802566a <_realloc_r+0x14>
 802567a:	f000 f832 	bl	80256e2 <_malloc_usable_size_r>
 802567e:	0007      	movs	r7, r0
 8025680:	4285      	cmp	r5, r0
 8025682:	d802      	bhi.n	802568a <_realloc_r+0x34>
 8025684:	0843      	lsrs	r3, r0, #1
 8025686:	42ab      	cmp	r3, r5
 8025688:	d3ef      	bcc.n	802566a <_realloc_r+0x14>
 802568a:	0029      	movs	r1, r5
 802568c:	0030      	movs	r0, r6
 802568e:	f7fe fe15 	bl	80242bc <_malloc_r>
 8025692:	9001      	str	r0, [sp, #4]
 8025694:	2800      	cmp	r0, #0
 8025696:	d0ee      	beq.n	8025676 <_realloc_r+0x20>
 8025698:	002a      	movs	r2, r5
 802569a:	42bd      	cmp	r5, r7
 802569c:	d900      	bls.n	80256a0 <_realloc_r+0x4a>
 802569e:	003a      	movs	r2, r7
 80256a0:	0021      	movs	r1, r4
 80256a2:	9801      	ldr	r0, [sp, #4]
 80256a4:	f7fd fba8 	bl	8022df8 <memcpy>
 80256a8:	0021      	movs	r1, r4
 80256aa:	0030      	movs	r0, r6
 80256ac:	f7fe fa36 	bl	8023b1c <_free_r>
 80256b0:	9c01      	ldr	r4, [sp, #4]
 80256b2:	e7da      	b.n	802566a <_realloc_r+0x14>

080256b4 <fiprintf>:
 80256b4:	b40e      	push	{r1, r2, r3}
 80256b6:	b517      	push	{r0, r1, r2, r4, lr}
 80256b8:	4c05      	ldr	r4, [pc, #20]	@ (80256d0 <fiprintf+0x1c>)
 80256ba:	ab05      	add	r3, sp, #20
 80256bc:	cb04      	ldmia	r3!, {r2}
 80256be:	0001      	movs	r1, r0
 80256c0:	6820      	ldr	r0, [r4, #0]
 80256c2:	9301      	str	r3, [sp, #4]
 80256c4:	f7ff fcfa 	bl	80250bc <_vfiprintf_r>
 80256c8:	bc1e      	pop	{r1, r2, r3, r4}
 80256ca:	bc08      	pop	{r3}
 80256cc:	b003      	add	sp, #12
 80256ce:	4718      	bx	r3
 80256d0:	200003e4 	.word	0x200003e4

080256d4 <abort>:
 80256d4:	2006      	movs	r0, #6
 80256d6:	b510      	push	{r4, lr}
 80256d8:	f000 f834 	bl	8025744 <raise>
 80256dc:	2001      	movs	r0, #1
 80256de:	f7ea fcc9 	bl	8010074 <_exit>

080256e2 <_malloc_usable_size_r>:
 80256e2:	1f0b      	subs	r3, r1, #4
 80256e4:	681b      	ldr	r3, [r3, #0]
 80256e6:	1f18      	subs	r0, r3, #4
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	da01      	bge.n	80256f0 <_malloc_usable_size_r+0xe>
 80256ec:	580b      	ldr	r3, [r1, r0]
 80256ee:	18c0      	adds	r0, r0, r3
 80256f0:	4770      	bx	lr

080256f2 <_raise_r>:
 80256f2:	b570      	push	{r4, r5, r6, lr}
 80256f4:	0004      	movs	r4, r0
 80256f6:	000d      	movs	r5, r1
 80256f8:	291f      	cmp	r1, #31
 80256fa:	d904      	bls.n	8025706 <_raise_r+0x14>
 80256fc:	2316      	movs	r3, #22
 80256fe:	6003      	str	r3, [r0, #0]
 8025700:	2001      	movs	r0, #1
 8025702:	4240      	negs	r0, r0
 8025704:	bd70      	pop	{r4, r5, r6, pc}
 8025706:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8025708:	2b00      	cmp	r3, #0
 802570a:	d004      	beq.n	8025716 <_raise_r+0x24>
 802570c:	008a      	lsls	r2, r1, #2
 802570e:	189b      	adds	r3, r3, r2
 8025710:	681a      	ldr	r2, [r3, #0]
 8025712:	2a00      	cmp	r2, #0
 8025714:	d108      	bne.n	8025728 <_raise_r+0x36>
 8025716:	0020      	movs	r0, r4
 8025718:	f000 f830 	bl	802577c <_getpid_r>
 802571c:	002a      	movs	r2, r5
 802571e:	0001      	movs	r1, r0
 8025720:	0020      	movs	r0, r4
 8025722:	f000 f819 	bl	8025758 <_kill_r>
 8025726:	e7ed      	b.n	8025704 <_raise_r+0x12>
 8025728:	2a01      	cmp	r2, #1
 802572a:	d009      	beq.n	8025740 <_raise_r+0x4e>
 802572c:	1c51      	adds	r1, r2, #1
 802572e:	d103      	bne.n	8025738 <_raise_r+0x46>
 8025730:	2316      	movs	r3, #22
 8025732:	6003      	str	r3, [r0, #0]
 8025734:	2001      	movs	r0, #1
 8025736:	e7e5      	b.n	8025704 <_raise_r+0x12>
 8025738:	2100      	movs	r1, #0
 802573a:	0028      	movs	r0, r5
 802573c:	6019      	str	r1, [r3, #0]
 802573e:	4790      	blx	r2
 8025740:	2000      	movs	r0, #0
 8025742:	e7df      	b.n	8025704 <_raise_r+0x12>

08025744 <raise>:
 8025744:	b510      	push	{r4, lr}
 8025746:	4b03      	ldr	r3, [pc, #12]	@ (8025754 <raise+0x10>)
 8025748:	0001      	movs	r1, r0
 802574a:	6818      	ldr	r0, [r3, #0]
 802574c:	f7ff ffd1 	bl	80256f2 <_raise_r>
 8025750:	bd10      	pop	{r4, pc}
 8025752:	46c0      	nop			@ (mov r8, r8)
 8025754:	200003e4 	.word	0x200003e4

08025758 <_kill_r>:
 8025758:	2300      	movs	r3, #0
 802575a:	b570      	push	{r4, r5, r6, lr}
 802575c:	4d06      	ldr	r5, [pc, #24]	@ (8025778 <_kill_r+0x20>)
 802575e:	0004      	movs	r4, r0
 8025760:	0008      	movs	r0, r1
 8025762:	0011      	movs	r1, r2
 8025764:	602b      	str	r3, [r5, #0]
 8025766:	f7ea fc75 	bl	8010054 <_kill>
 802576a:	1c43      	adds	r3, r0, #1
 802576c:	d103      	bne.n	8025776 <_kill_r+0x1e>
 802576e:	682b      	ldr	r3, [r5, #0]
 8025770:	2b00      	cmp	r3, #0
 8025772:	d000      	beq.n	8025776 <_kill_r+0x1e>
 8025774:	6023      	str	r3, [r4, #0]
 8025776:	bd70      	pop	{r4, r5, r6, pc}
 8025778:	2000358c 	.word	0x2000358c

0802577c <_getpid_r>:
 802577c:	b510      	push	{r4, lr}
 802577e:	f7ea fc63 	bl	8010048 <_getpid>
 8025782:	bd10      	pop	{r4, pc}

08025784 <expf>:
 8025784:	b570      	push	{r4, r5, r6, lr}
 8025786:	1c04      	adds	r4, r0, #0
 8025788:	f000 f8e6 	bl	8025958 <__ieee754_expf>
 802578c:	1c05      	adds	r5, r0, #0
 802578e:	1c20      	adds	r0, r4, #0
 8025790:	f000 f83c 	bl	802580c <finitef>
 8025794:	2800      	cmp	r0, #0
 8025796:	d00b      	beq.n	80257b0 <expf+0x2c>
 8025798:	490c      	ldr	r1, [pc, #48]	@ (80257cc <expf+0x48>)
 802579a:	1c20      	adds	r0, r4, #0
 802579c:	f7da fedc 	bl	8000558 <__aeabi_fcmpgt>
 80257a0:	2800      	cmp	r0, #0
 80257a2:	d007      	beq.n	80257b4 <expf+0x30>
 80257a4:	f7fd faf0 	bl	8022d88 <__errno>
 80257a8:	25ff      	movs	r5, #255	@ 0xff
 80257aa:	2322      	movs	r3, #34	@ 0x22
 80257ac:	05ed      	lsls	r5, r5, #23
 80257ae:	6003      	str	r3, [r0, #0]
 80257b0:	1c28      	adds	r0, r5, #0
 80257b2:	bd70      	pop	{r4, r5, r6, pc}
 80257b4:	4906      	ldr	r1, [pc, #24]	@ (80257d0 <expf+0x4c>)
 80257b6:	1c20      	adds	r0, r4, #0
 80257b8:	f7da feba 	bl	8000530 <__aeabi_fcmplt>
 80257bc:	2800      	cmp	r0, #0
 80257be:	d0f7      	beq.n	80257b0 <expf+0x2c>
 80257c0:	f7fd fae2 	bl	8022d88 <__errno>
 80257c4:	2322      	movs	r3, #34	@ 0x22
 80257c6:	2500      	movs	r5, #0
 80257c8:	6003      	str	r3, [r0, #0]
 80257ca:	e7f1      	b.n	80257b0 <expf+0x2c>
 80257cc:	42b17217 	.word	0x42b17217
 80257d0:	c2cff1b5 	.word	0xc2cff1b5

080257d4 <sqrtf>:
 80257d4:	b570      	push	{r4, r5, r6, lr}
 80257d6:	1c05      	adds	r5, r0, #0
 80257d8:	f000 f822 	bl	8025820 <__ieee754_sqrtf>
 80257dc:	1c29      	adds	r1, r5, #0
 80257de:	1c04      	adds	r4, r0, #0
 80257e0:	1c28      	adds	r0, r5, #0
 80257e2:	f7db febf 	bl	8001564 <__aeabi_fcmpun>
 80257e6:	2800      	cmp	r0, #0
 80257e8:	d10e      	bne.n	8025808 <sqrtf+0x34>
 80257ea:	2100      	movs	r1, #0
 80257ec:	1c28      	adds	r0, r5, #0
 80257ee:	f7da fe9f 	bl	8000530 <__aeabi_fcmplt>
 80257f2:	2800      	cmp	r0, #0
 80257f4:	d008      	beq.n	8025808 <sqrtf+0x34>
 80257f6:	f7fd fac7 	bl	8022d88 <__errno>
 80257fa:	2321      	movs	r3, #33	@ 0x21
 80257fc:	2100      	movs	r1, #0
 80257fe:	6003      	str	r3, [r0, #0]
 8025800:	1c08      	adds	r0, r1, #0
 8025802:	f7db f9e7 	bl	8000bd4 <__aeabi_fdiv>
 8025806:	1c04      	adds	r4, r0, #0
 8025808:	1c20      	adds	r0, r4, #0
 802580a:	bd70      	pop	{r4, r5, r6, pc}

0802580c <finitef>:
 802580c:	22ff      	movs	r2, #255	@ 0xff
 802580e:	0043      	lsls	r3, r0, #1
 8025810:	085b      	lsrs	r3, r3, #1
 8025812:	2001      	movs	r0, #1
 8025814:	05d2      	lsls	r2, r2, #23
 8025816:	4293      	cmp	r3, r2
 8025818:	db00      	blt.n	802581c <finitef+0x10>
 802581a:	2000      	movs	r0, #0
 802581c:	4770      	bx	lr
	...

08025820 <__ieee754_sqrtf>:
 8025820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025822:	0003      	movs	r3, r0
 8025824:	0042      	lsls	r2, r0, #1
 8025826:	1c04      	adds	r4, r0, #0
 8025828:	20ff      	movs	r0, #255	@ 0xff
 802582a:	0852      	lsrs	r2, r2, #1
 802582c:	05c0      	lsls	r0, r0, #23
 802582e:	4282      	cmp	r2, r0
 8025830:	d30a      	bcc.n	8025848 <__ieee754_sqrtf+0x28>
 8025832:	1c21      	adds	r1, r4, #0
 8025834:	1c20      	adds	r0, r4, #0
 8025836:	f7db fbb3 	bl	8000fa0 <__aeabi_fmul>
 802583a:	1c01      	adds	r1, r0, #0
 802583c:	1c20      	adds	r0, r4, #0
 802583e:	f7db f83f 	bl	80008c0 <__aeabi_fadd>
 8025842:	1c04      	adds	r4, r0, #0
 8025844:	1c20      	adds	r0, r4, #0
 8025846:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025848:	2a00      	cmp	r2, #0
 802584a:	d0fb      	beq.n	8025844 <__ieee754_sqrtf+0x24>
 802584c:	2c00      	cmp	r4, #0
 802584e:	da07      	bge.n	8025860 <__ieee754_sqrtf+0x40>
 8025850:	1c21      	adds	r1, r4, #0
 8025852:	1c20      	adds	r0, r4, #0
 8025854:	f7db fce2 	bl	800121c <__aeabi_fsub>
 8025858:	1c01      	adds	r1, r0, #0
 802585a:	f7db f9bb 	bl	8000bd4 <__aeabi_fdiv>
 802585e:	e7f0      	b.n	8025842 <__ieee754_sqrtf+0x22>
 8025860:	0022      	movs	r2, r4
 8025862:	15e1      	asrs	r1, r4, #23
 8025864:	4002      	ands	r2, r0
 8025866:	4204      	tst	r4, r0
 8025868:	d046      	beq.n	80258f8 <__ieee754_sqrtf+0xd8>
 802586a:	2280      	movs	r2, #128	@ 0x80
 802586c:	000f      	movs	r7, r1
 802586e:	025b      	lsls	r3, r3, #9
 8025870:	0a5b      	lsrs	r3, r3, #9
 8025872:	0412      	lsls	r2, r2, #16
 8025874:	3f7f      	subs	r7, #127	@ 0x7f
 8025876:	4313      	orrs	r3, r2
 8025878:	07c9      	lsls	r1, r1, #31
 802587a:	d400      	bmi.n	802587e <__ieee754_sqrtf+0x5e>
 802587c:	005b      	lsls	r3, r3, #1
 802587e:	2400      	movs	r4, #0
 8025880:	2180      	movs	r1, #128	@ 0x80
 8025882:	2019      	movs	r0, #25
 8025884:	0026      	movs	r6, r4
 8025886:	107f      	asrs	r7, r7, #1
 8025888:	005b      	lsls	r3, r3, #1
 802588a:	0449      	lsls	r1, r1, #17
 802588c:	1875      	adds	r5, r6, r1
 802588e:	001a      	movs	r2, r3
 8025890:	429d      	cmp	r5, r3
 8025892:	dc02      	bgt.n	802589a <__ieee754_sqrtf+0x7a>
 8025894:	186e      	adds	r6, r5, r1
 8025896:	1b5a      	subs	r2, r3, r5
 8025898:	1864      	adds	r4, r4, r1
 802589a:	3801      	subs	r0, #1
 802589c:	0053      	lsls	r3, r2, #1
 802589e:	0849      	lsrs	r1, r1, #1
 80258a0:	2800      	cmp	r0, #0
 80258a2:	d1f3      	bne.n	802588c <__ieee754_sqrtf+0x6c>
 80258a4:	2a00      	cmp	r2, #0
 80258a6:	d019      	beq.n	80258dc <__ieee754_sqrtf+0xbc>
 80258a8:	4d17      	ldr	r5, [pc, #92]	@ (8025908 <__ieee754_sqrtf+0xe8>)
 80258aa:	4e18      	ldr	r6, [pc, #96]	@ (802590c <__ieee754_sqrtf+0xec>)
 80258ac:	6828      	ldr	r0, [r5, #0]
 80258ae:	6831      	ldr	r1, [r6, #0]
 80258b0:	682b      	ldr	r3, [r5, #0]
 80258b2:	9301      	str	r3, [sp, #4]
 80258b4:	f7db fcb2 	bl	800121c <__aeabi_fsub>
 80258b8:	1c01      	adds	r1, r0, #0
 80258ba:	9801      	ldr	r0, [sp, #4]
 80258bc:	f7da fe42 	bl	8000544 <__aeabi_fcmple>
 80258c0:	2800      	cmp	r0, #0
 80258c2:	d00b      	beq.n	80258dc <__ieee754_sqrtf+0xbc>
 80258c4:	6828      	ldr	r0, [r5, #0]
 80258c6:	6831      	ldr	r1, [r6, #0]
 80258c8:	f7da fffa 	bl	80008c0 <__aeabi_fadd>
 80258cc:	682d      	ldr	r5, [r5, #0]
 80258ce:	1c01      	adds	r1, r0, #0
 80258d0:	1c28      	adds	r0, r5, #0
 80258d2:	f7da fe2d 	bl	8000530 <__aeabi_fcmplt>
 80258d6:	2800      	cmp	r0, #0
 80258d8:	d011      	beq.n	80258fe <__ieee754_sqrtf+0xde>
 80258da:	3402      	adds	r4, #2
 80258dc:	23fc      	movs	r3, #252	@ 0xfc
 80258de:	1064      	asrs	r4, r4, #1
 80258e0:	059b      	lsls	r3, r3, #22
 80258e2:	18e3      	adds	r3, r4, r3
 80258e4:	05fc      	lsls	r4, r7, #23
 80258e6:	18e4      	adds	r4, r4, r3
 80258e8:	e7ac      	b.n	8025844 <__ieee754_sqrtf+0x24>
 80258ea:	005b      	lsls	r3, r3, #1
 80258ec:	3201      	adds	r2, #1
 80258ee:	4203      	tst	r3, r0
 80258f0:	d0fb      	beq.n	80258ea <__ieee754_sqrtf+0xca>
 80258f2:	3a01      	subs	r2, #1
 80258f4:	1a89      	subs	r1, r1, r2
 80258f6:	e7b8      	b.n	802586a <__ieee754_sqrtf+0x4a>
 80258f8:	2080      	movs	r0, #128	@ 0x80
 80258fa:	0400      	lsls	r0, r0, #16
 80258fc:	e7f7      	b.n	80258ee <__ieee754_sqrtf+0xce>
 80258fe:	2301      	movs	r3, #1
 8025900:	3401      	adds	r4, #1
 8025902:	439c      	bics	r4, r3
 8025904:	e7ea      	b.n	80258dc <__ieee754_sqrtf+0xbc>
 8025906:	46c0      	nop			@ (mov r8, r8)
 8025908:	20000438 	.word	0x20000438
 802590c:	20000434 	.word	0x20000434

08025910 <roundf>:
 8025910:	0dc3      	lsrs	r3, r0, #23
 8025912:	b2db      	uxtb	r3, r3
 8025914:	3b7f      	subs	r3, #127	@ 0x7f
 8025916:	0002      	movs	r2, r0
 8025918:	b510      	push	{r4, lr}
 802591a:	2b16      	cmp	r3, #22
 802591c:	dc13      	bgt.n	8025946 <roundf+0x36>
 802591e:	2b00      	cmp	r3, #0
 8025920:	da07      	bge.n	8025932 <roundf+0x22>
 8025922:	0fc2      	lsrs	r2, r0, #31
 8025924:	07d0      	lsls	r0, r2, #31
 8025926:	3301      	adds	r3, #1
 8025928:	d102      	bne.n	8025930 <roundf+0x20>
 802592a:	23fe      	movs	r3, #254	@ 0xfe
 802592c:	059b      	lsls	r3, r3, #22
 802592e:	4318      	orrs	r0, r3
 8025930:	bd10      	pop	{r4, pc}
 8025932:	4908      	ldr	r1, [pc, #32]	@ (8025954 <roundf+0x44>)
 8025934:	4119      	asrs	r1, r3
 8025936:	4208      	tst	r0, r1
 8025938:	d0fa      	beq.n	8025930 <roundf+0x20>
 802593a:	2080      	movs	r0, #128	@ 0x80
 802593c:	03c0      	lsls	r0, r0, #15
 802593e:	4118      	asrs	r0, r3
 8025940:	1880      	adds	r0, r0, r2
 8025942:	4388      	bics	r0, r1
 8025944:	e7f4      	b.n	8025930 <roundf+0x20>
 8025946:	2b80      	cmp	r3, #128	@ 0x80
 8025948:	d1f2      	bne.n	8025930 <roundf+0x20>
 802594a:	1c01      	adds	r1, r0, #0
 802594c:	f7da ffb8 	bl	80008c0 <__aeabi_fadd>
 8025950:	e7ee      	b.n	8025930 <roundf+0x20>
 8025952:	46c0      	nop			@ (mov r8, r8)
 8025954:	007fffff 	.word	0x007fffff

08025958 <__ieee754_expf>:
 8025958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802595a:	21ff      	movs	r1, #255	@ 0xff
 802595c:	0043      	lsls	r3, r0, #1
 802595e:	1c04      	adds	r4, r0, #0
 8025960:	085b      	lsrs	r3, r3, #1
 8025962:	05c9      	lsls	r1, r1, #23
 8025964:	428b      	cmp	r3, r1
 8025966:	d904      	bls.n	8025972 <__ieee754_expf+0x1a>
 8025968:	1c01      	adds	r1, r0, #0
 802596a:	1c20      	adds	r0, r4, #0
 802596c:	f7da ffa8 	bl	80008c0 <__aeabi_fadd>
 8025970:	e00d      	b.n	802598e <__ieee754_expf+0x36>
 8025972:	0fc6      	lsrs	r6, r0, #31
 8025974:	428b      	cmp	r3, r1
 8025976:	d104      	bne.n	8025982 <__ieee754_expf+0x2a>
 8025978:	2e00      	cmp	r6, #0
 802597a:	d000      	beq.n	802597e <__ieee754_expf+0x26>
 802597c:	e0ba      	b.n	8025af4 <__ieee754_expf+0x19c>
 802597e:	1c20      	adds	r0, r4, #0
 8025980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025982:	495d      	ldr	r1, [pc, #372]	@ (8025af8 <__ieee754_expf+0x1a0>)
 8025984:	4288      	cmp	r0, r1
 8025986:	dd04      	ble.n	8025992 <__ieee754_expf+0x3a>
 8025988:	2000      	movs	r0, #0
 802598a:	f000 f8f1 	bl	8025b70 <__math_oflowf>
 802598e:	1c04      	adds	r4, r0, #0
 8025990:	e7f5      	b.n	802597e <__ieee754_expf+0x26>
 8025992:	2800      	cmp	r0, #0
 8025994:	da06      	bge.n	80259a4 <__ieee754_expf+0x4c>
 8025996:	4a59      	ldr	r2, [pc, #356]	@ (8025afc <__ieee754_expf+0x1a4>)
 8025998:	4293      	cmp	r3, r2
 802599a:	d903      	bls.n	80259a4 <__ieee754_expf+0x4c>
 802599c:	2000      	movs	r0, #0
 802599e:	f000 f8e1 	bl	8025b64 <__math_uflowf>
 80259a2:	e7f4      	b.n	802598e <__ieee754_expf+0x36>
 80259a4:	4a56      	ldr	r2, [pc, #344]	@ (8025b00 <__ieee754_expf+0x1a8>)
 80259a6:	4293      	cmp	r3, r2
 80259a8:	d96e      	bls.n	8025a88 <__ieee754_expf+0x130>
 80259aa:	4a56      	ldr	r2, [pc, #344]	@ (8025b04 <__ieee754_expf+0x1ac>)
 80259ac:	00b5      	lsls	r5, r6, #2
 80259ae:	4293      	cmp	r3, r2
 80259b0:	d84e      	bhi.n	8025a50 <__ieee754_expf+0xf8>
 80259b2:	4b55      	ldr	r3, [pc, #340]	@ (8025b08 <__ieee754_expf+0x1b0>)
 80259b4:	1c20      	adds	r0, r4, #0
 80259b6:	5959      	ldr	r1, [r3, r5]
 80259b8:	f7db fc30 	bl	800121c <__aeabi_fsub>
 80259bc:	4b53      	ldr	r3, [pc, #332]	@ (8025b0c <__ieee754_expf+0x1b4>)
 80259be:	1c07      	adds	r7, r0, #0
 80259c0:	595b      	ldr	r3, [r3, r5]
 80259c2:	2501      	movs	r5, #1
 80259c4:	1bad      	subs	r5, r5, r6
 80259c6:	9300      	str	r3, [sp, #0]
 80259c8:	1bad      	subs	r5, r5, r6
 80259ca:	9900      	ldr	r1, [sp, #0]
 80259cc:	1c38      	adds	r0, r7, #0
 80259ce:	f7db fc25 	bl	800121c <__aeabi_fsub>
 80259d2:	1c04      	adds	r4, r0, #0
 80259d4:	1c21      	adds	r1, r4, #0
 80259d6:	1c20      	adds	r0, r4, #0
 80259d8:	f7db fae2 	bl	8000fa0 <__aeabi_fmul>
 80259dc:	494c      	ldr	r1, [pc, #304]	@ (8025b10 <__ieee754_expf+0x1b8>)
 80259de:	1c06      	adds	r6, r0, #0
 80259e0:	f7db fade 	bl	8000fa0 <__aeabi_fmul>
 80259e4:	494b      	ldr	r1, [pc, #300]	@ (8025b14 <__ieee754_expf+0x1bc>)
 80259e6:	f7db fc19 	bl	800121c <__aeabi_fsub>
 80259ea:	1c31      	adds	r1, r6, #0
 80259ec:	f7db fad8 	bl	8000fa0 <__aeabi_fmul>
 80259f0:	4949      	ldr	r1, [pc, #292]	@ (8025b18 <__ieee754_expf+0x1c0>)
 80259f2:	f7da ff65 	bl	80008c0 <__aeabi_fadd>
 80259f6:	1c31      	adds	r1, r6, #0
 80259f8:	f7db fad2 	bl	8000fa0 <__aeabi_fmul>
 80259fc:	4947      	ldr	r1, [pc, #284]	@ (8025b1c <__ieee754_expf+0x1c4>)
 80259fe:	f7db fc0d 	bl	800121c <__aeabi_fsub>
 8025a02:	1c31      	adds	r1, r6, #0
 8025a04:	f7db facc 	bl	8000fa0 <__aeabi_fmul>
 8025a08:	4945      	ldr	r1, [pc, #276]	@ (8025b20 <__ieee754_expf+0x1c8>)
 8025a0a:	f7da ff59 	bl	80008c0 <__aeabi_fadd>
 8025a0e:	1c31      	adds	r1, r6, #0
 8025a10:	f7db fac6 	bl	8000fa0 <__aeabi_fmul>
 8025a14:	1c01      	adds	r1, r0, #0
 8025a16:	1c20      	adds	r0, r4, #0
 8025a18:	f7db fc00 	bl	800121c <__aeabi_fsub>
 8025a1c:	1c01      	adds	r1, r0, #0
 8025a1e:	1c06      	adds	r6, r0, #0
 8025a20:	1c20      	adds	r0, r4, #0
 8025a22:	f7db fabd 	bl	8000fa0 <__aeabi_fmul>
 8025a26:	9001      	str	r0, [sp, #4]
 8025a28:	2d00      	cmp	r5, #0
 8025a2a:	d140      	bne.n	8025aae <__ieee754_expf+0x156>
 8025a2c:	2180      	movs	r1, #128	@ 0x80
 8025a2e:	1c30      	adds	r0, r6, #0
 8025a30:	05c9      	lsls	r1, r1, #23
 8025a32:	f7db fbf3 	bl	800121c <__aeabi_fsub>
 8025a36:	1c01      	adds	r1, r0, #0
 8025a38:	9801      	ldr	r0, [sp, #4]
 8025a3a:	f7db f8cb 	bl	8000bd4 <__aeabi_fdiv>
 8025a3e:	1c21      	adds	r1, r4, #0
 8025a40:	f7db fbec 	bl	800121c <__aeabi_fsub>
 8025a44:	1c01      	adds	r1, r0, #0
 8025a46:	20fe      	movs	r0, #254	@ 0xfe
 8025a48:	0580      	lsls	r0, r0, #22
 8025a4a:	f7db fbe7 	bl	800121c <__aeabi_fsub>
 8025a4e:	e79e      	b.n	802598e <__ieee754_expf+0x36>
 8025a50:	4934      	ldr	r1, [pc, #208]	@ (8025b24 <__ieee754_expf+0x1cc>)
 8025a52:	1c20      	adds	r0, r4, #0
 8025a54:	f7db faa4 	bl	8000fa0 <__aeabi_fmul>
 8025a58:	4b33      	ldr	r3, [pc, #204]	@ (8025b28 <__ieee754_expf+0x1d0>)
 8025a5a:	5959      	ldr	r1, [r3, r5]
 8025a5c:	f7da ff30 	bl	80008c0 <__aeabi_fadd>
 8025a60:	f7db fd96 	bl	8001590 <__aeabi_f2iz>
 8025a64:	0005      	movs	r5, r0
 8025a66:	f7db fdb3 	bl	80015d0 <__aeabi_i2f>
 8025a6a:	4930      	ldr	r1, [pc, #192]	@ (8025b2c <__ieee754_expf+0x1d4>)
 8025a6c:	1c06      	adds	r6, r0, #0
 8025a6e:	f7db fa97 	bl	8000fa0 <__aeabi_fmul>
 8025a72:	1c01      	adds	r1, r0, #0
 8025a74:	1c20      	adds	r0, r4, #0
 8025a76:	f7db fbd1 	bl	800121c <__aeabi_fsub>
 8025a7a:	492d      	ldr	r1, [pc, #180]	@ (8025b30 <__ieee754_expf+0x1d8>)
 8025a7c:	1c07      	adds	r7, r0, #0
 8025a7e:	1c30      	adds	r0, r6, #0
 8025a80:	f7db fa8e 	bl	8000fa0 <__aeabi_fmul>
 8025a84:	9000      	str	r0, [sp, #0]
 8025a86:	e7a0      	b.n	80259ca <__ieee754_expf+0x72>
 8025a88:	22d0      	movs	r2, #208	@ 0xd0
 8025a8a:	0592      	lsls	r2, r2, #22
 8025a8c:	4293      	cmp	r3, r2
 8025a8e:	d20c      	bcs.n	8025aaa <__ieee754_expf+0x152>
 8025a90:	4928      	ldr	r1, [pc, #160]	@ (8025b34 <__ieee754_expf+0x1dc>)
 8025a92:	1c20      	adds	r0, r4, #0
 8025a94:	f7da ff14 	bl	80008c0 <__aeabi_fadd>
 8025a98:	21fe      	movs	r1, #254	@ 0xfe
 8025a9a:	0589      	lsls	r1, r1, #22
 8025a9c:	f7da fd5c 	bl	8000558 <__aeabi_fcmpgt>
 8025aa0:	1e05      	subs	r5, r0, #0
 8025aa2:	d097      	beq.n	80259d4 <__ieee754_expf+0x7c>
 8025aa4:	21fe      	movs	r1, #254	@ 0xfe
 8025aa6:	0589      	lsls	r1, r1, #22
 8025aa8:	e75f      	b.n	802596a <__ieee754_expf+0x12>
 8025aaa:	2500      	movs	r5, #0
 8025aac:	e792      	b.n	80259d4 <__ieee754_expf+0x7c>
 8025aae:	2080      	movs	r0, #128	@ 0x80
 8025ab0:	1c31      	adds	r1, r6, #0
 8025ab2:	05c0      	lsls	r0, r0, #23
 8025ab4:	f7db fbb2 	bl	800121c <__aeabi_fsub>
 8025ab8:	1c01      	adds	r1, r0, #0
 8025aba:	9801      	ldr	r0, [sp, #4]
 8025abc:	f7db f88a 	bl	8000bd4 <__aeabi_fdiv>
 8025ac0:	1c01      	adds	r1, r0, #0
 8025ac2:	9800      	ldr	r0, [sp, #0]
 8025ac4:	f7db fbaa 	bl	800121c <__aeabi_fsub>
 8025ac8:	1c39      	adds	r1, r7, #0
 8025aca:	f7db fba7 	bl	800121c <__aeabi_fsub>
 8025ace:	1c01      	adds	r1, r0, #0
 8025ad0:	20fe      	movs	r0, #254	@ 0xfe
 8025ad2:	0580      	lsls	r0, r0, #22
 8025ad4:	f7db fba2 	bl	800121c <__aeabi_fsub>
 8025ad8:	002b      	movs	r3, r5
 8025ada:	337d      	adds	r3, #125	@ 0x7d
 8025adc:	db02      	blt.n	8025ae4 <__ieee754_expf+0x18c>
 8025ade:	05ec      	lsls	r4, r5, #23
 8025ae0:	1824      	adds	r4, r4, r0
 8025ae2:	e74c      	b.n	802597e <__ieee754_expf+0x26>
 8025ae4:	21d8      	movs	r1, #216	@ 0xd8
 8025ae6:	3564      	adds	r5, #100	@ 0x64
 8025ae8:	05ed      	lsls	r5, r5, #23
 8025aea:	1828      	adds	r0, r5, r0
 8025aec:	0509      	lsls	r1, r1, #20
 8025aee:	f7db fa57 	bl	8000fa0 <__aeabi_fmul>
 8025af2:	e74c      	b.n	802598e <__ieee754_expf+0x36>
 8025af4:	2400      	movs	r4, #0
 8025af6:	e742      	b.n	802597e <__ieee754_expf+0x26>
 8025af8:	42b17217 	.word	0x42b17217
 8025afc:	42cff1b5 	.word	0x42cff1b5
 8025b00:	3eb17218 	.word	0x3eb17218
 8025b04:	3f851591 	.word	0x3f851591
 8025b08:	08029b08 	.word	0x08029b08
 8025b0c:	08029b00 	.word	0x08029b00
 8025b10:	3331bb4c 	.word	0x3331bb4c
 8025b14:	35ddea0e 	.word	0x35ddea0e
 8025b18:	388ab355 	.word	0x388ab355
 8025b1c:	3b360b61 	.word	0x3b360b61
 8025b20:	3e2aaaab 	.word	0x3e2aaaab
 8025b24:	3fb8aa3b 	.word	0x3fb8aa3b
 8025b28:	08029b10 	.word	0x08029b10
 8025b2c:	3f317180 	.word	0x3f317180
 8025b30:	3717f7d1 	.word	0x3717f7d1
 8025b34:	7149f2ca 	.word	0x7149f2ca

08025b38 <with_errnof>:
 8025b38:	b570      	push	{r4, r5, r6, lr}
 8025b3a:	000d      	movs	r5, r1
 8025b3c:	1c04      	adds	r4, r0, #0
 8025b3e:	f7fd f923 	bl	8022d88 <__errno>
 8025b42:	6005      	str	r5, [r0, #0]
 8025b44:	1c20      	adds	r0, r4, #0
 8025b46:	bd70      	pop	{r4, r5, r6, pc}

08025b48 <xflowf>:
 8025b48:	b510      	push	{r4, lr}
 8025b4a:	1c0b      	adds	r3, r1, #0
 8025b4c:	2800      	cmp	r0, #0
 8025b4e:	d002      	beq.n	8025b56 <xflowf+0xe>
 8025b50:	2380      	movs	r3, #128	@ 0x80
 8025b52:	061b      	lsls	r3, r3, #24
 8025b54:	18cb      	adds	r3, r1, r3
 8025b56:	1c18      	adds	r0, r3, #0
 8025b58:	f7db fa22 	bl	8000fa0 <__aeabi_fmul>
 8025b5c:	2122      	movs	r1, #34	@ 0x22
 8025b5e:	f7ff ffeb 	bl	8025b38 <with_errnof>
 8025b62:	bd10      	pop	{r4, pc}

08025b64 <__math_uflowf>:
 8025b64:	2180      	movs	r1, #128	@ 0x80
 8025b66:	b510      	push	{r4, lr}
 8025b68:	0549      	lsls	r1, r1, #21
 8025b6a:	f7ff ffed 	bl	8025b48 <xflowf>
 8025b6e:	bd10      	pop	{r4, pc}

08025b70 <__math_oflowf>:
 8025b70:	21e0      	movs	r1, #224	@ 0xe0
 8025b72:	b510      	push	{r4, lr}
 8025b74:	05c9      	lsls	r1, r1, #23
 8025b76:	f7ff ffe7 	bl	8025b48 <xflowf>
 8025b7a:	bd10      	pop	{r4, pc}

08025b7c <_init>:
 8025b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b7e:	46c0      	nop			@ (mov r8, r8)
 8025b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025b82:	bc08      	pop	{r3}
 8025b84:	469e      	mov	lr, r3
 8025b86:	4770      	bx	lr

08025b88 <_fini>:
 8025b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025b8a:	46c0      	nop			@ (mov r8, r8)
 8025b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025b8e:	bc08      	pop	{r3}
 8025b90:	469e      	mov	lr, r3
 8025b92:	4770      	bx	lr
