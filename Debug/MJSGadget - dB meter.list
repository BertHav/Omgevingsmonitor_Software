
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000277fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004360  080278c0  080278c0  000288c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bc20  0802bc20  0002d448  2**0
                  CONTENTS
  4 .ARM          00000008  0802bc20  0802bc20  0002cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bc28  0802bc28  0002d448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bc28  0802bc28  0002cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802bc2c  0802bc2c  0002cc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000448  20000000  0802bc30  0002d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a8  20000448  0802c078  0002d448  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200035f0  0802c078  0002d5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002d448  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003648a  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c30  00000000  00000000  000638fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d48  00000000  00000000  0006d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021b4  00000000  00000000  00070278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241b1  00000000  00000000  0007242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000459f3  00000000  00000000  000965dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a09  00000000  00000000  000dbfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0017e9d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9c0  00000000  00000000  0017ea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018a44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0018ca35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000448 	.word	0x20000448
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080278a4 	.word	0x080278a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000044c 	.word	0x2000044c
 8000104:	080278a4 	.word	0x080278a4

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802ad70 	.word	0x0802ad70
 8000e0c:	0802adb0 	.word	0x0802adb0
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802adec 	.word	0x0802adec
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af02      	add	r7, sp, #8
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	0019      	movs	r1, r3
 800365e:	260e      	movs	r6, #14
 8003660:	19bb      	adds	r3, r7, r6
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c0a      	adds	r2, r1, #0
 8003672:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteMemRegister+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteMemRegister+0x58>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <WriteMemRegister+0x5c>)
 8003682:	7918      	ldrb	r0, [r3, #4]
 8003684:	68bd      	ldr	r5, [r7, #8]
 8003686:	230c      	movs	r3, #12
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	19bb      	adds	r3, r7, r6
 800368e:	8819      	ldrh	r1, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	002b      	movs	r3, r5
 8003698:	47a0      	blx	r4
 800369a:	0003      	movs	r3, r0
 800369c:	e000      	b.n	80036a0 <WriteMemRegister+0x50>
  }
  return false;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b005      	add	sp, #20
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000470 	.word	0x20000470
 80036ac:	200004a0 	.word	0x200004a0

080036b0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0004      	movs	r4, r0
 80036b8:	0008      	movs	r0, r1
 80036ba:	60ba      	str	r2, [r7, #8]
 80036bc:	0019      	movs	r1, r3
 80036be:	260e      	movs	r6, #14
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <ReadMemRegister+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <ReadMemRegister+0x58>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <ReadMemRegister+0x5c>)
 80036e2:	7918      	ldrb	r0, [r3, #4]
 80036e4:	68bd      	ldr	r5, [r7, #8]
 80036e6:	230c      	movs	r3, #12
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	002b      	movs	r3, r5
 80036f8:	47a0      	blx	r4
 80036fa:	0003      	movs	r3, r0
 80036fc:	e000      	b.n	8003700 <ReadMemRegister+0x50>
  }
  return false;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b005      	add	sp, #20
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	2000046c 	.word	0x2000046c
 800370c:	200004a0 	.word	0x200004a0

08003710 <setENS160TimeStamp>:

void setENS160TimeStamp(uint32_t ticks) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003718:	f00e fcec 	bl	80120f4 <HAL_GetTick>
 800371c:	0002      	movs	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	18d2      	adds	r2, r2, r3
 8003722:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <setENS160TimeStamp+0x20>)
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	20000468 	.word	0x20000468

08003734 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <ENS_Init+0x20>)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <ENS_Init+0x24>)
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	601a      	str	r2, [r3, #0]
}	
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	2000046c 	.word	0x2000046c
 8003758:	20000470 	.word	0x20000470

0800375c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	22f0      	movs	r2, #240	@ 0xf0
 8003766:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003768:	1dba      	adds	r2, r7, #6
 800376a:	2301      	movs	r3, #1
 800376c:	2101      	movs	r1, #1
 800376e:	2010      	movs	r0, #16
 8003770:	f7ff ff6e 	bl	8003650 <WriteMemRegister>
 8003774:	0003      	movs	r3, r0
 8003776:	001a      	movs	r2, r3
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 800377c:	201e      	movs	r0, #30
 800377e:	f00e fcc3 	bl	8012108 <HAL_Delay>
	return result;
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	1e5a      	subs	r2, r3, #1
 8003788:	4193      	sbcs	r3, r2
 800378a:	b2db      	uxtb	r3, r3
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 800379a:	003b      	movs	r3, r7
 800379c:	2200      	movs	r2, #0
 800379e:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 80037a6:	003a      	movs	r2, r7
 80037a8:	2302      	movs	r3, #2
 80037aa:	2101      	movs	r1, #1
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7ff ff7f 	bl	80036b0 <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 80037b2:	003b      	movs	r3, r7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	003b      	movs	r3, r7
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	b21b      	sxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 80037c8:	4b1c      	ldr	r3, [pc, #112]	@ (800383c <ENS160_checkPartID+0xa8>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <ENS160_checkPartID+0x68>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	23b0      	movs	r3, #176	@ 0xb0
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	429a      	cmp	r2, r3
 80037da:	d009      	beq.n	80037f0 <ENS160_checkPartID+0x5c>
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	2362      	movs	r3, #98	@ 0x62
 80037e2:	33ff      	adds	r3, #255	@ 0xff
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d101      	bne.n	80037ec <ENS160_checkPartID+0x58>
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <ENS160_checkPartID+0xac>)
 80037ea:	e002      	b.n	80037f2 <ENS160_checkPartID+0x5e>
 80037ec:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <ENS160_checkPartID+0xb0>)
 80037ee:	e000      	b.n	80037f2 <ENS160_checkPartID+0x5e>
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <ENS160_checkPartID+0xb4>)
 80037f2:	4a16      	ldr	r2, [pc, #88]	@ (800384c <ENS160_checkPartID+0xb8>)
 80037f4:	4916      	ldr	r1, [pc, #88]	@ (8003850 <ENS160_checkPartID+0xbc>)
 80037f6:	2003      	movs	r0, #3
 80037f8:	f00e f830 	bl	801185c <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	23b0      	movs	r3, #176	@ 0xb0
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	429a      	cmp	r2, r3
 8003806:	d106      	bne.n	8003816 <ENS160_checkPartID+0x82>
	  hwsw._revENS16x = 0;
 8003808:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <ENS160_checkPartID+0xc0>)
 800380a:	2200      	movs	r2, #0
 800380c:	70da      	strb	r2, [r3, #3]
	  result = true;
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00b      	b.n	800382e <ENS160_checkPartID+0x9a>
	}
	else if (part_id == ENS161_PARTID) {
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	2362      	movs	r3, #98	@ 0x62
 800381c:	33ff      	adds	r3, #255	@ 0xff
 800381e:	429a      	cmp	r2, r3
 8003820:	d105      	bne.n	800382e <ENS160_checkPartID+0x9a>
	  hwsw._revENS16x = 1;
 8003822:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <ENS160_checkPartID+0xc0>)
 8003824:	2201      	movs	r2, #1
 8003826:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
	}
	return result;
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000464 	.word	0x20000464
 8003840:	080278c0 	.word	0x080278c0
 8003844:	080278cc 	.word	0x080278cc
 8003848:	080278d0 	.word	0x080278d0
 800384c:	080278dc 	.word	0x080278dc
 8003850:	080278fc 	.word	0x080278fc
 8003854:	200004a0 	.word	0x200004a0

08003858 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 800385e:	4a27      	ldr	r2, [pc, #156]	@ (80038fc <ENS160_clearCommand+0xa4>)
 8003860:	2301      	movs	r3, #1
 8003862:	2101      	movs	r1, #1
 8003864:	2012      	movs	r0, #18
 8003866:	f7ff fef3 	bl	8003650 <WriteMemRegister>
 800386a:	0003      	movs	r3, r0
 800386c:	001a      	movs	r2, r3
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <ENS160_clearCommand+0xa8>)
 8003870:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003872:	200a      	movs	r0, #10
 8003874:	f00e fc48 	bl	8012108 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003878:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <ENS160_clearCommand+0xa4>)
 800387a:	22cc      	movs	r2, #204	@ 0xcc
 800387c:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 800387e:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <ENS160_clearCommand+0xa4>)
 8003880:	2301      	movs	r3, #1
 8003882:	2101      	movs	r1, #1
 8003884:	2012      	movs	r0, #18
 8003886:	f7ff fee3 	bl	8003650 <WriteMemRegister>
 800388a:	0003      	movs	r3, r0
 800388c:	001a      	movs	r2, r3
 800388e:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <ENS160_clearCommand+0xa8>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4013      	ands	r3, r2
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b1a      	ldr	r3, [pc, #104]	@ (8003900 <ENS160_clearCommand+0xa8>)
 8003898:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 800389a:	200a      	movs	r0, #10
 800389c:	f00e fc34 	bl	8012108 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 80038a0:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <ENS160_clearCommand+0xa4>)
 80038a2:	2301      	movs	r3, #1
 80038a4:	2101      	movs	r1, #1
 80038a6:	2020      	movs	r0, #32
 80038a8:	f7ff ff02 	bl	80036b0 <ReadMemRegister>
 80038ac:	0003      	movs	r3, r0
 80038ae:	001a      	movs	r2, r3
 80038b0:	4b13      	ldr	r3, [pc, #76]	@ (8003900 <ENS160_clearCommand+0xa8>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <ENS160_clearCommand+0xa8>)
 80038ba:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <ENS160_clearCommand+0xac>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 80038c4:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <ENS160_clearCommand+0xa4>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	0018      	movs	r0, r3
 80038ca:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <ENS160_clearCommand+0xa4>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <ENS160_clearCommand+0x7e>
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <ENS160_clearCommand+0xb0>)
 80038d4:	e000      	b.n	80038d8 <ENS160_clearCommand+0x80>
 80038d6:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <ENS160_clearCommand+0xb4>)
 80038d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <ENS160_clearCommand+0xb8>)
 80038da:	490e      	ldr	r1, [pc, #56]	@ (8003914 <ENS160_clearCommand+0xbc>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	0003      	movs	r3, r0
 80038e0:	2003      	movs	r0, #3
 80038e2:	f00d ffbb 	bl	801185c <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038e6:	200a      	movs	r0, #10
 80038e8:	f00e fc0e 	bl	8012108 <HAL_Delay>
		
	return result;
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <ENS160_clearCommand+0xa8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	4193      	sbcs	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200004a8 	.word	0x200004a8
 8003900:	200004a9 	.word	0x200004a9
 8003904:	20000464 	.word	0x20000464
 8003908:	08027900 	.word	0x08027900
 800390c:	080278cc 	.word	0x080278cc
 8003910:	08027904 	.word	0x08027904
 8003914:	080278fc 	.word	0x080278fc

08003918 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 800391e:	f7ff ff9b 	bl	8003858 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003922:	200a      	movs	r0, #10
 8003924:	f00e fbf0 	bl	8012108 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	220e      	movs	r2, #14
 800392c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 800392e:	1d3a      	adds	r2, r7, #4
 8003930:	2301      	movs	r3, #1
 8003932:	2101      	movs	r1, #1
 8003934:	2012      	movs	r0, #18
 8003936:	f7ff fe8b 	bl	8003650 <WriteMemRegister>

	HAL_Delay(10);
 800393a:	200a      	movs	r0, #10
 800393c:	f00e fbe4 	bl	8012108 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003940:	1d3a      	adds	r2, r7, #4
 8003942:	2303      	movs	r3, #3
 8003944:	2101      	movs	r1, #1
 8003946:	204c      	movs	r0, #76	@ 0x4c
 8003948:	f7ff feb2 	bl	80036b0 <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003952:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003954:	1d3b      	adds	r3, r7, #4
 8003956:	785a      	ldrb	r2, [r3, #1]
 8003958:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <ENS160_getFirmware+0xa4>)
 800395a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	789a      	ldrb	r2, [r3, #2]
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003962:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d903      	bls.n	8003974 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <ENS160_getFirmware+0xa4>)
 800396e:	2201      	movs	r2, #1
 8003970:	70da      	strb	r2, [r3, #3]
 8003972:	e002      	b.n	800397a <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003976:	2200      	movs	r2, #0
 8003978:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 800397a:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <ENS160_getFirmware+0xa8>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00f      	beq.n	80039a2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003982:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	001c      	movs	r4, r3
 8003988:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <ENS160_getFirmware+0xa4>)
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	0018      	movs	r0, r3
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	4a0c      	ldr	r2, [pc, #48]	@ (80039c4 <ENS160_getFirmware+0xac>)
 8003994:	490c      	ldr	r1, [pc, #48]	@ (80039c8 <ENS160_getFirmware+0xb0>)
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	9000      	str	r0, [sp, #0]
 800399a:	0023      	movs	r3, r4
 800399c:	2003      	movs	r0, #3
 800399e:	f00d ff5d 	bl	801185c <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80039a2:	200a      	movs	r0, #10
 80039a4:	f00e fbb0 	bl	8012108 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	4193      	sbcs	r3, r2
 80039b0:	b2db      	uxtb	r3, r3
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b003      	add	sp, #12
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	200004a0 	.word	0x200004a0
 80039c0:	20000464 	.word	0x20000464
 80039c4:	08027930 	.word	0x08027930
 80039c8:	080278fc 	.word	0x080278fc

080039cc <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	0002      	movs	r2, r0
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d108      	bne.n	80039f2 <ENS160_setMode+0x26>
 80039e0:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <ENS160_setMode+0x58>)
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <ENS160_setMode+0x26>
	  result = 1;
 80039e8:	230f      	movs	r3, #15
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e00a      	b.n	8003a08 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 80039f2:	1dfa      	adds	r2, r7, #7
 80039f4:	2301      	movs	r3, #1
 80039f6:	2101      	movs	r1, #1
 80039f8:	2010      	movs	r0, #16
 80039fa:	f7ff fe29 	bl	8003650 <WriteMemRegister>
 80039fe:	0003      	movs	r3, r0
 8003a00:	001a      	movs	r2, r3
 8003a02:	230f      	movs	r3, #15
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003a08:	200a      	movs	r0, #10
 8003a0a:	f00e fb7d 	bl	8012108 <HAL_Delay>
	
	return result;
 8003a0e:	230f      	movs	r3, #15
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	4193      	sbcs	r3, r2
 8003a18:	b2db      	uxtb	r3, r3
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	200004a0 	.word	0x200004a0

08003a28 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <ENS_DeviceConnected+0xec>)
 8003a36:	2252      	movs	r2, #82	@ 0x52
 8003a38:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e02d      	b.n	8003a9e <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003a42:	f7ff fe8b 	bl	800375c <ENS160_reset>
 8003a46:	0003      	movs	r3, r0
 8003a48:	001a      	movs	r2, r3
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	401a      	ands	r2, r3
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	1e51      	subs	r1, r2, #1
 8003a54:	418a      	sbcs	r2, r1
 8003a56:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003a58:	f7ff fe9c 	bl	8003794 <ENS160_checkPartID>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	001a      	movs	r2, r3
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	401a      	ands	r2, r3
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	1e51      	subs	r1, r2, #1
 8003a6a:	418a      	sbcs	r2, r1
 8003a6c:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4053      	eors	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003a7c:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <ENS_DeviceConnected+0xf0>)
 8003a7e:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <ENS_DeviceConnected+0xf4>)
 8003a80:	0019      	movs	r1, r3
 8003a82:	2002      	movs	r0, #2
 8003a84:	f00d feea 	bl	801185c <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <ENS_DeviceConnected+0xec>)
 8003a8a:	2253      	movs	r2, #83	@ 0x53
 8003a8c:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a94:	1dbb      	adds	r3, r7, #6
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	1dbb      	adds	r3, r7, #6
 8003a9a:	3201      	adds	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	1dbb      	adds	r3, r7, #6
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d9cd      	bls.n	8003a42 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02b      	beq.n	8003b06 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f7ff ff8c 	bl	80039cc <ENS160_setMode>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	401a      	ands	r2, r3
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	1e51      	subs	r1, r2, #1
 8003ac2:	418a      	sbcs	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003ac6:	f7ff fec7 	bl	8003858 <ENS160_clearCommand>
 8003aca:	0003      	movs	r3, r0
 8003acc:	001a      	movs	r2, r3
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	1dfb      	adds	r3, r7, #7
 8003ad6:	1e51      	subs	r1, r2, #1
 8003ad8:	418a      	sbcs	r2, r1
 8003ada:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003adc:	f7ff ff1c 	bl	8003918 <ENS160_getFirmware>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	401a      	ands	r2, r3
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	1e51      	subs	r1, r2, #1
 8003aee:	418a      	sbcs	r2, r1
 8003af0:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <ENS_DeviceConnected+0xf8>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <ENS_DeviceConnected+0xfc>)
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <ENS_DeviceConnected+0x100>)
 8003afe:	0019      	movs	r1, r3
 8003b00:	2003      	movs	r0, #3
 8003b02:	f00d feab 	bl	801185c <CreateLine>
    }
  }
  return _available;
 8003b06:	1dfb      	adds	r3, r7, #7
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	200004a0 	.word	0x200004a0
 8003b18:	0802794c 	.word	0x0802794c
 8003b1c:	0802796c 	.word	0x0802796c
 8003b20:	20000464 	.word	0x20000464
 8003b24:	08027970 	.word	0x08027970
 8003b28:	080278fc 	.word	0x080278fc

08003b2c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003b32:	1dfa      	adds	r2, r7, #7
 8003b34:	2301      	movs	r3, #1
 8003b36:	2101      	movs	r1, #1
 8003b38:	2020      	movs	r0, #32
 8003b3a:	f7ff fdb9 	bl	80036b0 <ReadMemRegister>

  if (debugENS160) {
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <ENS160_readStatus+0x34>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <ENS160_readStatus+0x38>)
 8003b4c:	4906      	ldr	r1, [pc, #24]	@ (8003b68 <ENS160_readStatus+0x3c>)
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f00d fe84 	bl	801185c <CreateLine>
  }
  return status;
 8003b54:	1dfb      	adds	r3, r7, #7
 8003b56:	781b      	ldrb	r3, [r3, #0]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000464 	.word	0x20000464
 8003b64:	080279a4 	.word	0x080279a4
 8003b68:	080278fc 	.word	0x080278fc

08003b6c <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	0002      	movs	r2, r0
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003b78:	2317      	movs	r3, #23
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003b80:	4b32      	ldr	r3, [pc, #200]	@ (8003c4c <ENS160_measure+0xe0>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <ENS160_measure+0xe4>)
 8003b8a:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <ENS160_measure+0xe8>)
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	2003      	movs	r0, #3
 8003b90:	f00d fe64 	bl	801185c <CreateLine>
	}
	
	if (waitForNew) {
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f00e fab3 	bl	8012108 <HAL_Delay>
			status = ENS160_readStatus();
 8003ba2:	2516      	movs	r5, #22
 8003ba4:	197c      	adds	r4, r7, r5
 8003ba6:	f7ff ffc1 	bl	8003b2c <ENS160_readStatus>
 8003baa:	0003      	movs	r3, r0
 8003bac:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ef      	beq.n	8003b9c <ENS160_measure+0x30>
 8003bbc:	e002      	b.n	8003bc4 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003bbe:	200a      	movs	r0, #10
 8003bc0:	f00e faa2 	bl	8012108 <HAL_Delay>
	}
	
	newData = true;
 8003bc4:	2317      	movs	r3, #23
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 8003bcc:	240c      	movs	r4, #12
 8003bce:	193a      	adds	r2, r7, r4
 8003bd0:	2307      	movs	r3, #7
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	2021      	movs	r0, #33	@ 0x21
 8003bd6:	f7ff fd6b 	bl	80036b0 <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 8003bda:	0021      	movs	r1, r4
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <ENS160_measure+0xec>)
 8003be2:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	b21a      	sxth	r2, r3
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	789b      	ldrb	r3, [r3, #2]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	b21b      	sxth	r3, r3
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <ENS160_measure+0xec>)
 8003bfa:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	791b      	ldrb	r3, [r3, #4]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <ENS160_measure+0xec>)
 8003c12:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <ENS160_measure+0xf0>)
 8003c16:	78db      	ldrb	r3, [r3, #3]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <ENS160_measure+0xca>
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	795b      	ldrb	r3, [r3, #5]
 8003c20:	b21a      	sxth	r2, r3
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	799b      	ldrb	r3, [r3, #6]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b21b      	sxth	r3, r3
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <ENS160_measure+0xec>)
 8003c32:	80da      	strh	r2, [r3, #6]
 8003c34:	e002      	b.n	8003c3c <ENS160_measure+0xd0>
  	else pred._data_aqi500 = 0;
 8003c36:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <ENS160_measure+0xec>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8003c3c:	2317      	movs	r3, #23
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	781b      	ldrb	r3, [r3, #0]
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b006      	add	sp, #24
 8003c48:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	20000464 	.word	0x20000464
 8003c50:	080279b8 	.word	0x080279b8
 8003c54:	080278fc 	.word	0x080278fc
 8003c58:	20000498 	.word	0x20000498
 8003c5c:	200004a0 	.word	0x200004a0

08003c60 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0002      	movs	r2, r0
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 8003c6c:	2317      	movs	r3, #23
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 8003c74:	4bae      	ldr	r3, [pc, #696]	@ (8003f30 <ENS160_measureRaw+0x2d0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 8003c7c:	4aad      	ldr	r2, [pc, #692]	@ (8003f34 <ENS160_measureRaw+0x2d4>)
 8003c7e:	4bae      	ldr	r3, [pc, #696]	@ (8003f38 <ENS160_measureRaw+0x2d8>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2003      	movs	r0, #3
 8003c84:	f00d fdea 	bl	801185c <CreateLine>
	}
	
	if (waitForNew) {
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00e fa39 	bl	8012108 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003c96:	240b      	movs	r4, #11
 8003c98:	193a      	adds	r2, r7, r4
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	2020      	movs	r0, #32
 8003ca0:	f7ff fd06 	bl	80036b0 <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 8003cb2:	240c      	movs	r4, #12
 8003cb4:	193a      	adds	r2, r7, r4
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2048      	movs	r0, #72	@ 0x48
 8003cbc:	f7ff fcf8 	bl	80036b0 <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003cc0:	193b      	adds	r3, r7, r4
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fd fcca 	bl	8001668 <__aeabi_ui2f>
 8003cd4:	1c03      	adds	r3, r0, #0
 8003cd6:	218a      	movs	r1, #138	@ 0x8a
 8003cd8:	05c9      	lsls	r1, r1, #23
 8003cda:	1c18      	adds	r0, r3, #0
 8003cdc:	f7fc ff7a 	bl	8000bd4 <__aeabi_fdiv>
 8003ce0:	1c03      	adds	r3, r0, #0
 8003ce2:	1c18      	adds	r0, r3, #0
 8003ce4:	f7ff fbbe 	bl	8003464 <__aeabi_f2d>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	000b      	movs	r3, r1
 8003cec:	2000      	movs	r0, #0
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	05c9      	lsls	r1, r1, #23
 8003cf2:	f022 fcb3 	bl	802665c <pow>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	000b      	movs	r3, r1
 8003cfa:	0010      	movs	r0, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	f7fc fca5 	bl	800064c <__aeabi_d2uiz>
 8003d02:	0002      	movs	r2, r0
 8003d04:	4b8d      	ldr	r3, [pc, #564]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003d06:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	789b      	ldrb	r3, [r3, #2]
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	193b      	adds	r3, r7, r4
 8003d10:	78db      	ldrb	r3, [r3, #3]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	4313      	orrs	r3, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7fd fca6 	bl	8001668 <__aeabi_ui2f>
 8003d1c:	1c03      	adds	r3, r0, #0
 8003d1e:	218a      	movs	r1, #138	@ 0x8a
 8003d20:	05c9      	lsls	r1, r1, #23
 8003d22:	1c18      	adds	r0, r3, #0
 8003d24:	f7fc ff56 	bl	8000bd4 <__aeabi_fdiv>
 8003d28:	1c03      	adds	r3, r0, #0
 8003d2a:	1c18      	adds	r0, r3, #0
 8003d2c:	f7ff fb9a 	bl	8003464 <__aeabi_f2d>
 8003d30:	0002      	movs	r2, r0
 8003d32:	000b      	movs	r3, r1
 8003d34:	2000      	movs	r0, #0
 8003d36:	2180      	movs	r1, #128	@ 0x80
 8003d38:	05c9      	lsls	r1, r1, #23
 8003d3a:	f022 fc8f 	bl	802665c <pow>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	000b      	movs	r3, r1
 8003d42:	0010      	movs	r0, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	f7fc fc81 	bl	800064c <__aeabi_d2uiz>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003d4e:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	791b      	ldrb	r3, [r3, #4]
 8003d54:	001a      	movs	r2, r3
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	795b      	ldrb	r3, [r3, #5]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fd fc82 	bl	8001668 <__aeabi_ui2f>
 8003d64:	1c03      	adds	r3, r0, #0
 8003d66:	218a      	movs	r1, #138	@ 0x8a
 8003d68:	05c9      	lsls	r1, r1, #23
 8003d6a:	1c18      	adds	r0, r3, #0
 8003d6c:	f7fc ff32 	bl	8000bd4 <__aeabi_fdiv>
 8003d70:	1c03      	adds	r3, r0, #0
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7ff fb76 	bl	8003464 <__aeabi_f2d>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	2180      	movs	r1, #128	@ 0x80
 8003d80:	05c9      	lsls	r1, r1, #23
 8003d82:	f022 fc6b 	bl	802665c <pow>
 8003d86:	0002      	movs	r2, r0
 8003d88:	000b      	movs	r3, r1
 8003d8a:	0010      	movs	r0, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f7fc fc5d 	bl	800064c <__aeabi_d2uiz>
 8003d92:	0002      	movs	r2, r0
 8003d94:	4b69      	ldr	r3, [pc, #420]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003d96:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	799b      	ldrb	r3, [r3, #6]
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	193b      	adds	r3, r7, r4
 8003da0:	79db      	ldrb	r3, [r3, #7]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	4313      	orrs	r3, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7fd fc5e 	bl	8001668 <__aeabi_ui2f>
 8003dac:	1c03      	adds	r3, r0, #0
 8003dae:	218a      	movs	r1, #138	@ 0x8a
 8003db0:	05c9      	lsls	r1, r1, #23
 8003db2:	1c18      	adds	r0, r3, #0
 8003db4:	f7fc ff0e 	bl	8000bd4 <__aeabi_fdiv>
 8003db8:	1c03      	adds	r3, r0, #0
 8003dba:	1c18      	adds	r0, r3, #0
 8003dbc:	f7ff fb52 	bl	8003464 <__aeabi_f2d>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	000b      	movs	r3, r1
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	2180      	movs	r1, #128	@ 0x80
 8003dc8:	05c9      	lsls	r1, r1, #23
 8003dca:	f022 fc47 	bl	802665c <pow>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	000b      	movs	r3, r1
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f7fc fc39 	bl	800064c <__aeabi_d2uiz>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	4b57      	ldr	r3, [pc, #348]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003dde:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8003de0:	193a      	adds	r2, r7, r4
 8003de2:	2308      	movs	r3, #8
 8003de4:	2101      	movs	r1, #1
 8003de6:	2028      	movs	r0, #40	@ 0x28
 8003de8:	f7ff fc62 	bl	80036b0 <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	001a      	movs	r2, r3
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fd fc34 	bl	8001668 <__aeabi_ui2f>
 8003e00:	1c03      	adds	r3, r0, #0
 8003e02:	218a      	movs	r1, #138	@ 0x8a
 8003e04:	05c9      	lsls	r1, r1, #23
 8003e06:	1c18      	adds	r0, r3, #0
 8003e08:	f7fc fee4 	bl	8000bd4 <__aeabi_fdiv>
 8003e0c:	1c03      	adds	r3, r0, #0
 8003e0e:	1c18      	adds	r0, r3, #0
 8003e10:	f7ff fb28 	bl	8003464 <__aeabi_f2d>
 8003e14:	0002      	movs	r2, r0
 8003e16:	000b      	movs	r3, r1
 8003e18:	2000      	movs	r0, #0
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	05c9      	lsls	r1, r1, #23
 8003e1e:	f022 fc1d 	bl	802665c <pow>
 8003e22:	0002      	movs	r2, r0
 8003e24:	000b      	movs	r3, r1
 8003e26:	0010      	movs	r0, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	f7fc fc0f 	bl	800064c <__aeabi_d2uiz>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	4b42      	ldr	r3, [pc, #264]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003e32:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	789b      	ldrb	r3, [r3, #2]
 8003e38:	001a      	movs	r2, r3
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	4313      	orrs	r3, r2
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7fd fc10 	bl	8001668 <__aeabi_ui2f>
 8003e48:	1c03      	adds	r3, r0, #0
 8003e4a:	218a      	movs	r1, #138	@ 0x8a
 8003e4c:	05c9      	lsls	r1, r1, #23
 8003e4e:	1c18      	adds	r0, r3, #0
 8003e50:	f7fc fec0 	bl	8000bd4 <__aeabi_fdiv>
 8003e54:	1c03      	adds	r3, r0, #0
 8003e56:	1c18      	adds	r0, r3, #0
 8003e58:	f7ff fb04 	bl	8003464 <__aeabi_f2d>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	000b      	movs	r3, r1
 8003e60:	2000      	movs	r0, #0
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	05c9      	lsls	r1, r1, #23
 8003e66:	f022 fbf9 	bl	802665c <pow>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	0010      	movs	r0, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	f7fc fbeb 	bl	800064c <__aeabi_d2uiz>
 8003e76:	0002      	movs	r2, r0
 8003e78:	4b30      	ldr	r3, [pc, #192]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003e7a:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	791b      	ldrb	r3, [r3, #4]
 8003e80:	001a      	movs	r2, r3
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	795b      	ldrb	r3, [r3, #5]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fd fbec 	bl	8001668 <__aeabi_ui2f>
 8003e90:	1c03      	adds	r3, r0, #0
 8003e92:	218a      	movs	r1, #138	@ 0x8a
 8003e94:	05c9      	lsls	r1, r1, #23
 8003e96:	1c18      	adds	r0, r3, #0
 8003e98:	f7fc fe9c 	bl	8000bd4 <__aeabi_fdiv>
 8003e9c:	1c03      	adds	r3, r0, #0
 8003e9e:	1c18      	adds	r0, r3, #0
 8003ea0:	f7ff fae0 	bl	8003464 <__aeabi_f2d>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	000b      	movs	r3, r1
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	2180      	movs	r1, #128	@ 0x80
 8003eac:	05c9      	lsls	r1, r1, #23
 8003eae:	f022 fbd5 	bl	802665c <pow>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	000b      	movs	r3, r1
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	f7fc fbc7 	bl	800064c <__aeabi_d2uiz>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003ec2:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	799b      	ldrb	r3, [r3, #6]
 8003ec8:	001a      	movs	r2, r3
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	79db      	ldrb	r3, [r3, #7]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fd fbc8 	bl	8001668 <__aeabi_ui2f>
 8003ed8:	1c03      	adds	r3, r0, #0
 8003eda:	218a      	movs	r1, #138	@ 0x8a
 8003edc:	05c9      	lsls	r1, r1, #23
 8003ede:	1c18      	adds	r0, r3, #0
 8003ee0:	f7fc fe78 	bl	8000bd4 <__aeabi_fdiv>
 8003ee4:	1c03      	adds	r3, r0, #0
 8003ee6:	1c18      	adds	r0, r3, #0
 8003ee8:	f7ff fabc 	bl	8003464 <__aeabi_f2d>
 8003eec:	0002      	movs	r2, r0
 8003eee:	000b      	movs	r3, r1
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	2180      	movs	r1, #128	@ 0x80
 8003ef4:	05c9      	lsls	r1, r1, #23
 8003ef6:	f022 fbb1 	bl	802665c <pow>
 8003efa:	0002      	movs	r2, r0
 8003efc:	000b      	movs	r3, r1
 8003efe:	0010      	movs	r0, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	f7fc fba3 	bl	800064c <__aeabi_d2uiz>
 8003f06:	0002      	movs	r2, r0
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003f0a:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8003f0c:	193a      	adds	r2, r7, r4
 8003f0e:	2301      	movs	r3, #1
 8003f10:	2101      	movs	r1, #1
 8003f12:	2038      	movs	r0, #56	@ 0x38
 8003f14:	f7ff fbcc 	bl	80036b0 <ReadMemRegister>
    raw._misr = i2cbuf[0];
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	7819      	ldrb	r1, [r3, #0]
 8003f1c:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003f1e:	2220      	movs	r2, #32
 8003f20:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8003f22:	2317      	movs	r3, #23
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	781b      	ldrb	r3, [r3, #0]
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b007      	add	sp, #28
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	20000464 	.word	0x20000464
 8003f34:	080279d4 	.word	0x080279d4
 8003f38:	080278fc 	.word	0x080278fc
 8003f3c:	20000474 	.word	0x20000474

08003f40 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	0002      	movs	r2, r0
 8003f48:	1dbb      	adds	r3, r7, #6
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	1c0a      	adds	r2, r1, #0
 8003f50:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	2108      	movs	r1, #8
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 8003f84:	187a      	adds	r2, r7, r1
 8003f86:	2304      	movs	r3, #4
 8003f88:	2101      	movs	r1, #1
 8003f8a:	2013      	movs	r0, #19
 8003f8c:	f7ff fb60 	bl	8003650 <WriteMemRegister>
 8003f90:	0003      	movs	r3, r0
 8003f92:	001a      	movs	r2, r3
 8003f94:	210f      	movs	r1, #15
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	701a      	strb	r2, [r3, #0]
  return result;
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	4193      	sbcs	r3, r2
 8003fa2:	b2db      	uxtb	r3, r3
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b004      	add	sp, #16
 8003faa:	bd80      	pop	{r7, pc}

08003fac <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 8003fb6:	4916      	ldr	r1, [pc, #88]	@ (8004010 <ENS160_set_envdata+0x64>)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fc fc81 	bl	80008c0 <__aeabi_fadd>
 8003fbe:	1c03      	adds	r3, r0, #0
 8003fc0:	2185      	movs	r1, #133	@ 0x85
 8003fc2:	05c9      	lsls	r1, r1, #23
 8003fc4:	1c18      	adds	r0, r3, #0
 8003fc6:	f7fc ffeb 	bl	8000fa0 <__aeabi_fmul>
 8003fca:	1c03      	adds	r3, r0, #0
 8003fcc:	250e      	movs	r5, #14
 8003fce:	197c      	adds	r4, r7, r5
 8003fd0:	1c18      	adds	r0, r3, #0
 8003fd2:	f7fc fb23 	bl	800061c <__aeabi_f2uiz>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 8003fda:	2188      	movs	r1, #136	@ 0x88
 8003fdc:	05c9      	lsls	r1, r1, #23
 8003fde:	6838      	ldr	r0, [r7, #0]
 8003fe0:	f7fc ffde 	bl	8000fa0 <__aeabi_fmul>
 8003fe4:	1c03      	adds	r3, r0, #0
 8003fe6:	260c      	movs	r6, #12
 8003fe8:	19bc      	adds	r4, r7, r6
 8003fea:	1c18      	adds	r0, r3, #0
 8003fec:	f7fc fb16 	bl	800061c <__aeabi_f2uiz>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8003ff4:	19bb      	adds	r3, r7, r6
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	197b      	adds	r3, r7, r5
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff ff9e 	bl	8003f40 <ENS160_set_envdata210>
 8004004:	0003      	movs	r3, r0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b005      	add	sp, #20
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	43889333 	.word	0x43889333

08004014 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800401a:	4bd3      	ldr	r3, [pc, #844]	@ (8004368 <ENS_Upkeep+0x354>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0018      	movs	r0, r3
 8004020:	f00d fbc6 	bl	80117b0 <TimestampIsReached>
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	2301      	movs	r3, #1
 800402a:	4053      	eors	r3, r2
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <ENS_Upkeep+0x24>
    return ENSState;
 8004032:	4bce      	ldr	r3, [pc, #824]	@ (800436c <ENS_Upkeep+0x358>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	e1f0      	b.n	800441a <ENS_Upkeep+0x406>
  }
  switch(ENSState) {
 8004038:	4bcc      	ldr	r3, [pc, #816]	@ (800436c <ENS_Upkeep+0x358>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d900      	bls.n	8004042 <ENS_Upkeep+0x2e>
 8004040:	e1d4      	b.n	80043ec <ENS_Upkeep+0x3d8>
 8004042:	009a      	lsls	r2, r3, #2
 8004044:	4bca      	ldr	r3, [pc, #808]	@ (8004370 <ENS_Upkeep+0x35c>)
 8004046:	18d3      	adds	r3, r2, r3
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 800404c:	4ac9      	ldr	r2, [pc, #804]	@ (8004374 <ENS_Upkeep+0x360>)
 800404e:	4bca      	ldr	r3, [pc, #808]	@ (8004378 <ENS_Upkeep+0x364>)
 8004050:	0019      	movs	r1, r3
 8004052:	2003      	movs	r0, #3
 8004054:	f00d fc02 	bl	801185c <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8004058:	f00e f84c 	bl	80120f4 <HAL_GetTick>
 800405c:	0003      	movs	r3, r0
 800405e:	4ac7      	ldr	r2, [pc, #796]	@ (800437c <ENS_Upkeep+0x368>)
 8004060:	189a      	adds	r2, r3, r2
 8004062:	4bc1      	ldr	r3, [pc, #772]	@ (8004368 <ENS_Upkeep+0x354>)
 8004064:	601a      	str	r2, [r3, #0]
    break;
 8004066:	e1d6      	b.n	8004416 <ENS_Upkeep+0x402>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 8004068:	f007 fd64 	bl	800bb34 <getSensorLock>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d000      	beq.n	8004072 <ENS_Upkeep+0x5e>
 8004070:	e1c8      	b.n	8004404 <ENS_Upkeep+0x3f0>
      break;
    }
    setSensorLock(ENS160);
 8004072:	2005      	movs	r0, #5
 8004074:	f007 fd4e 	bl	800bb14 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004078:	1d3c      	adds	r4, r7, #4
 800407a:	2002      	movs	r0, #2
 800407c:	f7ff fca6 	bl	80039cc <ENS160_setMode>
 8004080:	0003      	movs	r3, r0
 8004082:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <ENS_Upkeep+0x7c>
 800408c:	4bbc      	ldr	r3, [pc, #752]	@ (8004380 <ENS_Upkeep+0x36c>)
 800408e:	e000      	b.n	8004092 <ENS_Upkeep+0x7e>
 8004090:	4bbc      	ldr	r3, [pc, #752]	@ (8004384 <ENS_Upkeep+0x370>)
 8004092:	4abd      	ldr	r2, [pc, #756]	@ (8004388 <ENS_Upkeep+0x374>)
 8004094:	49b8      	ldr	r1, [pc, #736]	@ (8004378 <ENS_Upkeep+0x364>)
 8004096:	2003      	movs	r0, #3
 8004098:	f00d fbe0 	bl	801185c <CreateLine>
    setSensorLock(FREE);
 800409c:	2000      	movs	r0, #0
 800409e:	f007 fd39 	bl	800bb14 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80040a2:	4bb2      	ldr	r3, [pc, #712]	@ (800436c <ENS_Upkeep+0x358>)
 80040a4:	2203      	movs	r2, #3
 80040a6:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80040a8:	f00e f824 	bl	80120f4 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	22fa      	movs	r2, #250	@ 0xfa
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	189a      	adds	r2, r3, r2
 80040b4:	4bac      	ldr	r3, [pc, #688]	@ (8004368 <ENS_Upkeep+0x354>)
 80040b6:	601a      	str	r2, [r3, #0]
    break;
 80040b8:	e1ad      	b.n	8004416 <ENS_Upkeep+0x402>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 80040ba:	f007 fd3b 	bl	800bb34 <getSensorLock>
 80040be:	1e03      	subs	r3, r0, #0
 80040c0:	d000      	beq.n	80040c4 <ENS_Upkeep+0xb0>
 80040c2:	e1a1      	b.n	8004408 <ENS_Upkeep+0x3f4>
      break;
    }
    setSensorLock(ENS160);
 80040c4:	2005      	movs	r0, #5
 80040c6:	f007 fd25 	bl	800bb14 <setSensorLock>
    status = ENS160_readStatus();
 80040ca:	1d7c      	adds	r4, r7, #5
 80040cc:	f7ff fd2e 	bl	8003b2c <ENS160_readStatus>
 80040d0:	0003      	movs	r3, r0
 80040d2:	7023      	strb	r3, [r4, #0]
    setSensorLock(FREE);
 80040d4:	2000      	movs	r0, #0
 80040d6:	f007 fd1d 	bl	800bb14 <setSensorLock>
    if ((status & 0x0C) != 0) {
 80040da:	1d7b      	adds	r3, r7, #5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	220c      	movs	r2, #12
 80040e0:	4013      	ands	r3, r2
 80040e2:	d02d      	beq.n	8004140 <ENS_Upkeep+0x12c>
      switch (status >> 2) {
 80040e4:	1d7b      	adds	r3, r7, #5
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d013      	beq.n	8004118 <ENS_Upkeep+0x104>
 80040f0:	dc19      	bgt.n	8004126 <ENS_Upkeep+0x112>
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d002      	beq.n	80040fc <ENS_Upkeep+0xe8>
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d007      	beq.n	800410a <ENS_Upkeep+0xf6>
 80040fa:	e014      	b.n	8004126 <ENS_Upkeep+0x112>
      case 1:
        Debug("Warm-Up phase");
 80040fc:	4aa3      	ldr	r2, [pc, #652]	@ (800438c <ENS_Upkeep+0x378>)
 80040fe:	4b9e      	ldr	r3, [pc, #632]	@ (8004378 <ENS_Upkeep+0x364>)
 8004100:	0019      	movs	r1, r3
 8004102:	2003      	movs	r0, #3
 8004104:	f00d fbaa 	bl	801185c <CreateLine>
        break;
 8004108:	e00d      	b.n	8004126 <ENS_Upkeep+0x112>
      case 2:
        Debug("Initial Start-UP phase");
 800410a:	4aa1      	ldr	r2, [pc, #644]	@ (8004390 <ENS_Upkeep+0x37c>)
 800410c:	4b9a      	ldr	r3, [pc, #616]	@ (8004378 <ENS_Upkeep+0x364>)
 800410e:	0019      	movs	r1, r3
 8004110:	2003      	movs	r0, #3
 8004112:	f00d fba3 	bl	801185c <CreateLine>
        break;
 8004116:	e006      	b.n	8004126 <ENS_Upkeep+0x112>
      case 3:
        Debug("Invalid output");
 8004118:	4a9e      	ldr	r2, [pc, #632]	@ (8004394 <ENS_Upkeep+0x380>)
 800411a:	4b97      	ldr	r3, [pc, #604]	@ (8004378 <ENS_Upkeep+0x364>)
 800411c:	0019      	movs	r1, r3
 800411e:	2003      	movs	r0, #3
 8004120:	f00d fb9c 	bl	801185c <CreateLine>
        break;
 8004124:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004126:	1d7b      	adds	r3, r7, #5
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2203      	movs	r2, #3
 800412c:	4013      	ands	r3, r2
 800412e:	d107      	bne.n	8004140 <ENS_Upkeep+0x12c>
        ENS160TimeStamp = HAL_GetTick() + 5000;
 8004130:	f00d ffe0 	bl	80120f4 <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	4a98      	ldr	r2, [pc, #608]	@ (8004398 <ENS_Upkeep+0x384>)
 8004138:	189a      	adds	r2, r3, r2
 800413a:	4b8b      	ldr	r3, [pc, #556]	@ (8004368 <ENS_Upkeep+0x354>)
 800413c:	601a      	str	r2, [r3, #0]
        break;
 800413e:	e16a      	b.n	8004416 <ENS_Upkeep+0x402>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004140:	4b8a      	ldr	r3, [pc, #552]	@ (800436c <ENS_Upkeep+0x358>)
 8004142:	2204      	movs	r2, #4
 8004144:	701a      	strb	r2, [r3, #0]
    break;
 8004146:	e166      	b.n	8004416 <ENS_Upkeep+0x402>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 8004148:	f007 fcf4 	bl	800bb34 <getSensorLock>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d036      	beq.n	80041be <ENS_Upkeep+0x1aa>
 8004150:	f007 fcf0 	bl	800bb34 <getSensorLock>
 8004154:	0003      	movs	r3, r0
 8004156:	2b05      	cmp	r3, #5
 8004158:	d031      	beq.n	80041be <ENS_Upkeep+0x1aa>
      uint8_t locktype = getSensorLock();
 800415a:	1dbc      	adds	r4, r7, #6
 800415c:	f007 fcea 	bl	800bb34 <getSensorLock>
 8004160:	0003      	movs	r3, r0
 8004162:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 8004164:	1dbb      	adds	r3, r7, #6
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d019      	beq.n	80041a0 <ENS_Upkeep+0x18c>
 800416c:	1dbb      	adds	r3, r7, #6
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d013      	beq.n	800419c <ENS_Upkeep+0x188>
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00d      	beq.n	8004198 <ENS_Upkeep+0x184>
 800417c:	1dbb      	adds	r3, r7, #6
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d007      	beq.n	8004194 <ENS_Upkeep+0x180>
 8004184:	1dbb      	adds	r3, r7, #6
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b05      	cmp	r3, #5
 800418a:	d101      	bne.n	8004190 <ENS_Upkeep+0x17c>
 800418c:	4b83      	ldr	r3, [pc, #524]	@ (800439c <ENS_Upkeep+0x388>)
 800418e:	e008      	b.n	80041a2 <ENS_Upkeep+0x18e>
 8004190:	4b83      	ldr	r3, [pc, #524]	@ (80043a0 <ENS_Upkeep+0x38c>)
 8004192:	e006      	b.n	80041a2 <ENS_Upkeep+0x18e>
 8004194:	4b83      	ldr	r3, [pc, #524]	@ (80043a4 <ENS_Upkeep+0x390>)
 8004196:	e004      	b.n	80041a2 <ENS_Upkeep+0x18e>
 8004198:	4b83      	ldr	r3, [pc, #524]	@ (80043a8 <ENS_Upkeep+0x394>)
 800419a:	e002      	b.n	80041a2 <ENS_Upkeep+0x18e>
 800419c:	4b83      	ldr	r3, [pc, #524]	@ (80043ac <ENS_Upkeep+0x398>)
 800419e:	e000      	b.n	80041a2 <ENS_Upkeep+0x18e>
 80041a0:	4b83      	ldr	r3, [pc, #524]	@ (80043b0 <ENS_Upkeep+0x39c>)
 80041a2:	4a84      	ldr	r2, [pc, #528]	@ (80043b4 <ENS_Upkeep+0x3a0>)
 80041a4:	4974      	ldr	r1, [pc, #464]	@ (8004378 <ENS_Upkeep+0x364>)
 80041a6:	2003      	movs	r0, #3
 80041a8:	f00d fb58 	bl	801185c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80041ac:	f00d ffa2 	bl	80120f4 <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	334e      	adds	r3, #78	@ 0x4e
 80041b4:	33ff      	adds	r3, #255	@ 0xff
 80041b6:	001a      	movs	r2, r3
 80041b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004368 <ENS_Upkeep+0x354>)
 80041ba:	601a      	str	r2, [r3, #0]
      break;
 80041bc:	e12b      	b.n	8004416 <ENS_Upkeep+0x402>
    }
    setSensorLock(ENS160);
 80041be:	2005      	movs	r0, #5
 80041c0:	f007 fca8 	bl	800bb14 <setSensorLock>
    status = ENS160_readStatus();
 80041c4:	1d7c      	adds	r4, r7, #5
 80041c6:	f7ff fcb1 	bl	8003b2c <ENS160_readStatus>
 80041ca:	0003      	movs	r3, r0
 80041cc:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 80041ce:	1d7b      	adds	r3, r7, #5
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d10b      	bne.n	80041f0 <ENS_Upkeep+0x1dc>
      ENS160TimeStamp = HAL_GetTick() + 500;
 80041d8:	f00d ff8c 	bl	80120f4 <HAL_GetTick>
 80041dc:	0003      	movs	r3, r0
 80041de:	33f5      	adds	r3, #245	@ 0xf5
 80041e0:	33ff      	adds	r3, #255	@ 0xff
 80041e2:	001a      	movs	r2, r3
 80041e4:	4b60      	ldr	r3, [pc, #384]	@ (8004368 <ENS_Upkeep+0x354>)
 80041e6:	601a      	str	r2, [r3, #0]
      setSensorLock(FREE);
 80041e8:	2000      	movs	r0, #0
 80041ea:	f007 fc93 	bl	800bb14 <setSensorLock>
      break;
 80041ee:	e112      	b.n	8004416 <ENS_Upkeep+0x402>
    }
    ENS160_measure(false);
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7ff fcbb 	bl	8003b6c <ENS160_measure>
    HAL_Delay(10);
 80041f6:	200a      	movs	r0, #10
 80041f8:	f00d ff86 	bl	8012108 <HAL_Delay>
    ENS160_measureRaw(false);
 80041fc:	2000      	movs	r0, #0
 80041fe:	f7ff fd2f 	bl	8003c60 <ENS160_measureRaw>
    HAL_Delay(10);
 8004202:	200a      	movs	r0, #10
 8004204:	f00d ff80 	bl	8012108 <HAL_Delay>
    setSensorLock(FREE);
 8004208:	2000      	movs	r0, #0
 800420a:	f007 fc83 	bl	800bb14 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800420e:	4b57      	ldr	r3, [pc, #348]	@ (800436c <ENS_Upkeep+0x358>)
 8004210:	2206      	movs	r2, #6
 8004212:	701a      	strb	r2, [r3, #0]
    break;
 8004214:	e0ff      	b.n	8004416 <ENS_Upkeep+0x402>

  case ENS_STATE_PROCESS_RESULTS:
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004216:	4b68      	ldr	r3, [pc, #416]	@ (80043b8 <ENS_Upkeep+0x3a4>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	001c      	movs	r4, r3
 800421c:	4b66      	ldr	r3, [pc, #408]	@ (80043b8 <ENS_Upkeep+0x3a4>)
 800421e:	885b      	ldrh	r3, [r3, #2]
 8004220:	0018      	movs	r0, r3
 8004222:	4b65      	ldr	r3, [pc, #404]	@ (80043b8 <ENS_Upkeep+0x3a4>)
 8004224:	889b      	ldrh	r3, [r3, #4]
 8004226:	4a65      	ldr	r2, [pc, #404]	@ (80043bc <ENS_Upkeep+0x3a8>)
 8004228:	4965      	ldr	r1, [pc, #404]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	9000      	str	r0, [sp, #0]
 800422e:	0023      	movs	r3, r4
 8004230:	2002      	movs	r0, #2
 8004232:	f00d fb13 	bl	801185c <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004236:	4b63      	ldr	r3, [pc, #396]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4a62      	ldr	r2, [pc, #392]	@ (80043c8 <ENS_Upkeep+0x3b4>)
 8004240:	495f      	ldr	r1, [pc, #380]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	0003      	movs	r3, r0
 8004246:	2002      	movs	r0, #2
 8004248:	f00d fb08 	bl	801185c <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 800424c:	4b5d      	ldr	r3, [pc, #372]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 800424e:	6898      	ldr	r0, [r3, #8]
 8004250:	4b5c      	ldr	r3, [pc, #368]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a5d      	ldr	r2, [pc, #372]	@ (80043cc <ENS_Upkeep+0x3b8>)
 8004256:	495a      	ldr	r1, [pc, #360]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	0003      	movs	r3, r0
 800425c:	2002      	movs	r0, #2
 800425e:	f00d fafd 	bl	801185c <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 8004262:	4b58      	ldr	r3, [pc, #352]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 8004264:	6918      	ldr	r0, [r3, #16]
 8004266:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	4a59      	ldr	r2, [pc, #356]	@ (80043d0 <ENS_Upkeep+0x3bc>)
 800426c:	4954      	ldr	r1, [pc, #336]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	0003      	movs	r3, r0
 8004272:	2002      	movs	r0, #2
 8004274:	f00d faf2 	bl	801185c <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 8004278:	4b52      	ldr	r3, [pc, #328]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 800427a:	6998      	ldr	r0, [r3, #24]
 800427c:	4b51      	ldr	r3, [pc, #324]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4a54      	ldr	r2, [pc, #336]	@ (80043d4 <ENS_Upkeep+0x3c0>)
 8004282:	494f      	ldr	r1, [pc, #316]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	0003      	movs	r3, r0
 8004288:	2002      	movs	r0, #2
 800428a:	f00d fae7 	bl	801185c <CreateLine>
    ENSState = ENS_LOW_POWER;
 800428e:	4b37      	ldr	r3, [pc, #220]	@ (800436c <ENS_Upkeep+0x358>)
 8004290:	2201      	movs	r2, #1
 8004292:	701a      	strb	r2, [r3, #0]
    break;
 8004294:	e0bf      	b.n	8004416 <ENS_Upkeep+0x402>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 5000;
 8004296:	f00d ff2d 	bl	80120f4 <HAL_GetTick>
 800429a:	0003      	movs	r3, r0
 800429c:	4a3e      	ldr	r2, [pc, #248]	@ (8004398 <ENS_Upkeep+0x384>)
 800429e:	189a      	adds	r2, r3, r2
 80042a0:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <ENS_Upkeep+0x354>)
 80042a2:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle) {
 80042a4:	4b4c      	ldr	r3, [pc, #304]	@ (80043d8 <ENS_Upkeep+0x3c4>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	4053      	eors	r3, r2
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02a      	beq.n	8004308 <ENS_Upkeep+0x2f4>
 80042b2:	4b4a      	ldr	r3, [pc, #296]	@ (80043dc <ENS_Upkeep+0x3c8>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2201      	movs	r2, #1
 80042b8:	4053      	eors	r3, r2
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d023      	beq.n	8004308 <ENS_Upkeep+0x2f4>
      if (getSensorLock() != FREE) {
 80042c0:	f007 fc38 	bl	800bb34 <getSensorLock>
 80042c4:	1e03      	subs	r3, r0, #0
 80042c6:	d000      	beq.n	80042ca <ENS_Upkeep+0x2b6>
 80042c8:	e0a0      	b.n	800440c <ENS_Upkeep+0x3f8>
        break;
      }
      setSensorLock(ENS160);
 80042ca:	2005      	movs	r0, #5
 80042cc:	f007 fc22 	bl	800bb14 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 80042d0:	1cfc      	adds	r4, r7, #3
 80042d2:	2000      	movs	r0, #0
 80042d4:	f7ff fb7a 	bl	80039cc <ENS160_setMode>
 80042d8:	0003      	movs	r3, r0
 80042da:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s", result?"done.":"failed.");
 80042dc:	1cfb      	adds	r3, r7, #3
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <ENS_Upkeep+0x2d4>
 80042e4:	4b26      	ldr	r3, [pc, #152]	@ (8004380 <ENS_Upkeep+0x36c>)
 80042e6:	e000      	b.n	80042ea <ENS_Upkeep+0x2d6>
 80042e8:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <ENS_Upkeep+0x370>)
 80042ea:	4a3d      	ldr	r2, [pc, #244]	@ (80043e0 <ENS_Upkeep+0x3cc>)
 80042ec:	4922      	ldr	r1, [pc, #136]	@ (8004378 <ENS_Upkeep+0x364>)
 80042ee:	2003      	movs	r0, #3
 80042f0:	f00d fab4 	bl	801185c <CreateLine>
      setSensorLock(FREE);
 80042f4:	2000      	movs	r0, #0
 80042f6:	f007 fc0d 	bl	800bb14 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 80042fa:	f00d fefb 	bl	80120f4 <HAL_GetTick>
 80042fe:	0003      	movs	r3, r0
 8004300:	4a38      	ldr	r2, [pc, #224]	@ (80043e4 <ENS_Upkeep+0x3d0>)
 8004302:	189a      	adds	r2, r3, r2
 8004304:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <ENS_Upkeep+0x354>)
 8004306:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004308:	4b18      	ldr	r3, [pc, #96]	@ (800436c <ENS_Upkeep+0x358>)
 800430a:	2208      	movs	r2, #8
 800430c:	701a      	strb	r2, [r3, #0]
    break;
 800430e:	e082      	b.n	8004416 <ENS_Upkeep+0x402>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 8004310:	f007 fc10 	bl	800bb34 <getSensorLock>
 8004314:	1e03      	subs	r3, r0, #0
 8004316:	d000      	beq.n	800431a <ENS_Upkeep+0x306>
 8004318:	e07a      	b.n	8004410 <ENS_Upkeep+0x3fc>
        break;
      }
      setSensorLock(ENS160);
 800431a:	2005      	movs	r0, #5
 800431c:	f007 fbfa 	bl	800bb14 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8004320:	1cba      	adds	r2, r7, #2
 8004322:	2301      	movs	r3, #1
 8004324:	2101      	movs	r1, #1
 8004326:	2010      	movs	r0, #16
 8004328:	f7ff f9c2 	bl	80036b0 <ReadMemRegister>
      if (data == 0) {
 800432c:	1cbb      	adds	r3, r7, #2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d114      	bne.n	800435e <ENS_Upkeep+0x34a>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004334:	1dfc      	adds	r4, r7, #7
 8004336:	2002      	movs	r0, #2
 8004338:	f7ff fb48 	bl	80039cc <ENS160_setMode>
 800433c:	0003      	movs	r3, r0
 800433e:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 8004340:	1dfb      	adds	r3, r7, #7
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <ENS_Upkeep+0x338>
 8004348:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <ENS_Upkeep+0x36c>)
 800434a:	e000      	b.n	800434e <ENS_Upkeep+0x33a>
 800434c:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <ENS_Upkeep+0x370>)
 800434e:	4a26      	ldr	r2, [pc, #152]	@ (80043e8 <ENS_Upkeep+0x3d4>)
 8004350:	4909      	ldr	r1, [pc, #36]	@ (8004378 <ENS_Upkeep+0x364>)
 8004352:	2003      	movs	r0, #3
 8004354:	f00d fa82 	bl	801185c <CreateLine>
        setSensorLock(FREE);
 8004358:	2000      	movs	r0, #0
 800435a:	f007 fbdb 	bl	800bb14 <setSensorLock>
      }
      ENSState = ENS_STATUS_CHECK;
 800435e:	4b03      	ldr	r3, [pc, #12]	@ (800436c <ENS_Upkeep+0x358>)
 8004360:	2203      	movs	r2, #3
 8004362:	701a      	strb	r2, [r3, #0]
    break;
 8004364:	e057      	b.n	8004416 <ENS_Upkeep+0x402>
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	20000468 	.word	0x20000468
 800436c:	20000000 	.word	0x20000000
 8004370:	0802ae2c 	.word	0x0802ae2c
 8004374:	080279f4 	.word	0x080279f4
 8004378:	080278fc 	.word	0x080278fc
 800437c:	002f9b80 	.word	0x002f9b80
 8004380:	08027a28 	.word	0x08027a28
 8004384:	08027a30 	.word	0x08027a30
 8004388:	08027a38 	.word	0x08027a38
 800438c:	08027a5c 	.word	0x08027a5c
 8004390:	08027a6c 	.word	0x08027a6c
 8004394:	08027a84 	.word	0x08027a84
 8004398:	00001388 	.word	0x00001388
 800439c:	08027a94 	.word	0x08027a94
 80043a0:	08027a9c 	.word	0x08027a9c
 80043a4:	08027aa4 	.word	0x08027aa4
 80043a8:	08027aac 	.word	0x08027aac
 80043ac:	08027ab4 	.word	0x08027ab4
 80043b0:	08027abc 	.word	0x08027abc
 80043b4:	08027ac4 	.word	0x08027ac4
 80043b8:	20000498 	.word	0x20000498
 80043bc:	08027aec 	.word	0x08027aec
 80043c0:	0802796c 	.word	0x0802796c
 80043c4:	20000474 	.word	0x20000474
 80043c8:	08027b18 	.word	0x08027b18
 80043cc:	08027b34 	.word	0x08027b34
 80043d0:	08027b50 	.word	0x08027b50
 80043d4:	08027b6c 	.word	0x08027b6c
 80043d8:	20001e2d 	.word	0x20001e2d
 80043dc:	20001e2e 	.word	0x20001e2e
 80043e0:	08027b88 	.word	0x08027b88
 80043e4:	0000afc8 	.word	0x0000afc8
 80043e8:	08027bac 	.word	0x08027bac


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80043ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <ENS_Upkeep+0x410>)
 80043ee:	2202      	movs	r2, #2
 80043f0:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80043f2:	f007 fb9f 	bl	800bb34 <getSensorLock>
 80043f6:	0003      	movs	r3, r0
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d00b      	beq.n	8004414 <ENS_Upkeep+0x400>
      setSensorLock(FREE);
 80043fc:	2000      	movs	r0, #0
 80043fe:	f007 fb89 	bl	800bb14 <setSensorLock>
    }
    break;
 8004402:	e007      	b.n	8004414 <ENS_Upkeep+0x400>
      break;
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	e006      	b.n	8004416 <ENS_Upkeep+0x402>
      break;
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	e004      	b.n	8004416 <ENS_Upkeep+0x402>
        break;
 800440c:	46c0      	nop			@ (mov r8, r8)
 800440e:	e002      	b.n	8004416 <ENS_Upkeep+0x402>
        break;
 8004410:	46c0      	nop			@ (mov r8, r8)
 8004412:	e000      	b.n	8004416 <ENS_Upkeep+0x402>
    break;
 8004414:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004416:	4b03      	ldr	r3, [pc, #12]	@ (8004424 <ENS_Upkeep+0x410>)
 8004418:	781b      	ldrb	r3, [r3, #0]
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b003      	add	sp, #12
 8004420:	bd90      	pop	{r4, r7, pc}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	20000000 	.word	0x20000000

08004428 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 800442c:	4b02      	ldr	r3, [pc, #8]	@ (8004438 <forceNTPupdate+0x10>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000684 	.word	0x20000684

0800443c <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004444:	f00d fe56 	bl	80120f4 <HAL_GetTick>
 8004448:	0002      	movs	r2, r0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	18d2      	adds	r2, r2, r3
 800444e:	4b03      	ldr	r3, [pc, #12]	@ (800445c <setESPTimeStamp+0x20>)
 8004450:	601a      	str	r2, [r3, #0]
}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	46bd      	mov	sp, r7
 8004456:	b002      	add	sp, #8
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	20000680 	.word	0x20000680

08004460 <setCharges>:
void setCharges(){
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004464:	f003 fc46 	bl	8007cf4 <ReadBatteryVoltage>
 8004468:	1c02      	adds	r2, r0, #0
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <setCharges+0x3c>)
 800446c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800446e:	f003 fca3 	bl	8007db8 <ReadSolarVoltage>
 8004472:	0003      	movs	r3, r0
 8004474:	0018      	movs	r0, r3
 8004476:	f7fe ffa3 	bl	80033c0 <__aeabi_i2d>
 800447a:	2200      	movs	r2, #0
 800447c:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <setCharges+0x40>)
 800447e:	f7fd fc99 	bl	8001db4 <__aeabi_ddiv>
 8004482:	0002      	movs	r2, r0
 8004484:	000b      	movs	r3, r1
 8004486:	0010      	movs	r0, r2
 8004488:	0019      	movs	r1, r3
 800448a:	f7ff f833 	bl	80034f4 <__aeabi_d2f>
 800448e:	1c02      	adds	r2, r0, #0
 8004490:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <setCharges+0x44>)
 8004492:	601a      	str	r2, [r3, #0]
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	200005d8 	.word	0x200005d8
 80044a0:	408f4000 	.word	0x408f4000
 80044a4:	200005dc 	.word	0x200005dc

080044a8 <checkEEprom>:
bool checkEEprom(){
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80044ae:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <checkEEprom+0x5c>)
 80044b0:	4815      	ldr	r0, [pc, #84]	@ (8004508 <checkEEprom+0x60>)
 80044b2:	220c      	movs	r2, #12
 80044b4:	0019      	movs	r1, r3
 80044b6:	f005 fe5b 	bl	800a170 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80044ba:	1dfb      	adds	r3, r7, #7
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e00e      	b.n	80044e0 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004504 <checkEEprom+0x5c>)
 80044c8:	5cd3      	ldrb	r3, [r2, r3]
 80044ca:	001a      	movs	r2, r3
 80044cc:	4b0f      	ldr	r3, [pc, #60]	@ (800450c <checkEEprom+0x64>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	18d2      	adds	r2, r2, r3
 80044d2:	4b0e      	ldr	r3, [pc, #56]	@ (800450c <checkEEprom+0x64>)
 80044d4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	1dfb      	adds	r3, r7, #7
 80044dc:	3201      	adds	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b0b      	cmp	r3, #11
 80044e6:	d9ec      	bls.n	80044c2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80044e8:	4b08      	ldr	r3, [pc, #32]	@ (800450c <checkEEprom+0x64>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	425a      	negs	r2, r3
 80044ee:	4153      	adcs	r3, r2
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	4b07      	ldr	r3, [pc, #28]	@ (8004510 <checkEEprom+0x68>)
 80044f4:	701a      	strb	r2, [r3, #0]
  return test;
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <checkEEprom+0x68>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b002      	add	sp, #8
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	200006cc 	.word	0x200006cc
 8004508:	0808000c 	.word	0x0808000c
 800450c:	200006d8 	.word	0x200006d8
 8004510:	200006dc 	.word	0x200006dc

08004514 <checkName>:
bool checkName(){
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800451a:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <checkName+0x5c>)
 800451c:	4815      	ldr	r0, [pc, #84]	@ (8004574 <checkName+0x60>)
 800451e:	2220      	movs	r2, #32
 8004520:	0019      	movs	r1, r3
 8004522:	f005 fe25 	bl	800a170 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004526:	1dfb      	adds	r3, r7, #7
 8004528:	2200      	movs	r2, #0
 800452a:	701a      	strb	r2, [r3, #0]
 800452c:	e00e      	b.n	800454c <checkName+0x38>
    configSum += nameConfig[i];
 800452e:	1dfb      	adds	r3, r7, #7
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	4a0f      	ldr	r2, [pc, #60]	@ (8004570 <checkName+0x5c>)
 8004534:	5cd3      	ldrb	r3, [r2, r3]
 8004536:	001a      	movs	r2, r3
 8004538:	4b0f      	ldr	r3, [pc, #60]	@ (8004578 <checkName+0x64>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	18d2      	adds	r2, r2, r3
 800453e:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <checkName+0x64>)
 8004540:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	781a      	ldrb	r2, [r3, #0]
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	3201      	adds	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b0b      	cmp	r3, #11
 8004552:	d9ec      	bls.n	800452e <checkName+0x1a>
  }
  test = (configSum != 0);
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <checkName+0x64>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	1e5a      	subs	r2, r3, #1
 800455a:	4193      	sbcs	r3, r2
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <checkName+0x68>)
 8004560:	701a      	strb	r2, [r3, #0]
  return test;
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <checkName+0x68>)
 8004564:	781b      	ldrb	r3, [r3, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b002      	add	sp, #8
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	200006e0 	.word	0x200006e0
 8004574:	08080090 	.word	0x08080090
 8004578:	20000700 	.word	0x20000700
 800457c:	20000704 	.word	0x20000704

08004580 <setHIDS>:


void setHIDS(float temp, float humid){
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 800458a:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <setHIDS+0x20>)
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <setHIDS+0x20>)
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	20000690 	.word	0x20000690

080045a4 <setVOC>:

void setVOC(uint16_t voc) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	0002      	movs	r2, r0
 80045ac:	1dbb      	adds	r3, r7, #6
 80045ae:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80045b0:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <setVOC+0x30>)
 80045b2:	1dba      	adds	r2, r7, #6
 80045b4:	8812      	ldrh	r2, [r2, #0]
 80045b6:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80045b8:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <setVOC+0x30>)
 80045ba:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80045bc:	1dba      	adds	r2, r7, #6
 80045be:	8812      	ldrh	r2, [r2, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80045c4:	4b03      	ldr	r3, [pc, #12]	@ (80045d4 <setVOC+0x30>)
 80045c6:	1dba      	adds	r2, r7, #6
 80045c8:	8812      	ldrh	r2, [r2, #0]
 80045ca:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b002      	add	sp, #8
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000690 	.word	0x20000690

080045d8 <sethPa>:

void sethPa(float hPa) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 80045e0:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <sethPa+0x30>)
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (hPa > MeasVal.hPaValuemax) {
 80045e6:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <sethPa+0x30>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	1c19      	adds	r1, r3, #0
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fb ffb3 	bl	8000558 <__aeabi_fcmpgt>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d100      	bne.n	80045f8 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 80045f6:	e002      	b.n	80045fe <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 80045f8:	4b03      	ldr	r3, [pc, #12]	@ (8004608 <sethPa+0x30>)
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	20000690 	.word	0x20000690

0800460c <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004618:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <setMic+0x28>)
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 800461e:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <setMic+0x28>)
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8004624:	4b03      	ldr	r3, [pc, #12]	@ (8004634 <setMic+0x28>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b004      	add	sp, #16
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	20000690 	.word	0x20000690

08004638 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	0002      	movs	r2, r0
 8004640:	1dbb      	adds	r3, r7, #6
 8004642:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004644:	1dbb      	adds	r3, r7, #6
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	0018      	movs	r0, r3
 800464a:	f7fc ffc1 	bl	80015d0 <__aeabi_i2f>
 800464e:	1c03      	adds	r3, r0, #0
 8004650:	490d      	ldr	r1, [pc, #52]	@ (8004688 <setPM2p5+0x50>)
 8004652:	1c18      	adds	r0, r3, #0
 8004654:	f7fc fabe 	bl	8000bd4 <__aeabi_fdiv>
 8004658:	1c03      	adds	r3, r0, #0
 800465a:	1c1a      	adds	r2, r3, #0
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <setPM2p5+0x54>)
 800465e:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004660:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <setPM2p5+0x54>)
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	4b09      	ldr	r3, [pc, #36]	@ (800468c <setPM2p5+0x54>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	1c19      	adds	r1, r3, #0
 800466a:	1c10      	adds	r0, r2, #0
 800466c:	f7fb ff74 	bl	8000558 <__aeabi_fcmpgt>
 8004670:	1e03      	subs	r3, r0, #0
 8004672:	d100      	bne.n	8004676 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004674:	e003      	b.n	800467e <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <setPM2p5+0x54>)
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	4b04      	ldr	r3, [pc, #16]	@ (800468c <setPM2p5+0x54>)
 800467c:	60da      	str	r2, [r3, #12]
}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b002      	add	sp, #8
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	41200000 	.word	0x41200000
 800468c:	20000690 	.word	0x20000690

08004690 <setPM10>:

void setPM10(uint16_t PM10) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	0002      	movs	r2, r0
 8004698:	1dbb      	adds	r3, r7, #6
 800469a:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 800469c:	1dbb      	adds	r3, r7, #6
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7fc ff95 	bl	80015d0 <__aeabi_i2f>
 80046a6:	1c03      	adds	r3, r0, #0
 80046a8:	490d      	ldr	r1, [pc, #52]	@ (80046e0 <setPM10+0x50>)
 80046aa:	1c18      	adds	r0, r3, #0
 80046ac:	f7fc fa92 	bl	8000bd4 <__aeabi_fdiv>
 80046b0:	1c03      	adds	r3, r0, #0
 80046b2:	1c1a      	adds	r2, r3, #0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <setPM10+0x54>)
 80046b6:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80046b8:	4b0a      	ldr	r3, [pc, #40]	@ (80046e4 <setPM10+0x54>)
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	4b09      	ldr	r3, [pc, #36]	@ (80046e4 <setPM10+0x54>)
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	1c19      	adds	r1, r3, #0
 80046c2:	1c10      	adds	r0, r2, #0
 80046c4:	f7fb ff48 	bl	8000558 <__aeabi_fcmpgt>
 80046c8:	1e03      	subs	r3, r0, #0
 80046ca:	d100      	bne.n	80046ce <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80046cc:	e003      	b.n	80046d6 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80046ce:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <setPM10+0x54>)
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <setPM10+0x54>)
 80046d4:	615a      	str	r2, [r3, #20]
}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	41200000 	.word	0x41200000
 80046e4:	20000690 	.word	0x20000690

080046e8 <setNOx>:

void setNOx(uint16_t nox) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	0002      	movs	r2, r0
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80046f4:	4b08      	ldr	r3, [pc, #32]	@ (8004718 <setNOx+0x30>)
 80046f6:	1dba      	adds	r2, r7, #6
 80046f8:	8812      	ldrh	r2, [r2, #0]
 80046fa:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <setNOx+0x30>)
 80046fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004700:	1dba      	adds	r2, r7, #6
 8004702:	8812      	ldrh	r2, [r2, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d903      	bls.n	8004710 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 8004708:	4b03      	ldr	r3, [pc, #12]	@ (8004718 <setNOx+0x30>)
 800470a:	1dba      	adds	r2, r7, #6
 800470c:	8812      	ldrh	r2, [r2, #0]
 800470e:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000690 	.word	0x20000690

0800471c <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004720:	f007 fdbe 	bl	800c2a0 <sen5x_Get_sen5x_enable_state>
 8004724:	1e03      	subs	r3, r0, #0
 8004726:	d008      	beq.n	800473a <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 8004728:	4b08      	ldr	r3, [pc, #32]	@ (800474c <resetMaxMeasurementValues+0x30>)
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 800472e:	4b07      	ldr	r3, [pc, #28]	@ (800474c <resetMaxMeasurementValues+0x30>)
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <resetMaxMeasurementValues+0x30>)
 8004736:	2200      	movs	r2, #0
 8004738:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.hPaValuemax = 0.0;
 800473a:	4b04      	ldr	r3, [pc, #16]	@ (800474c <resetMaxMeasurementValues+0x30>)
 800473c:	2200      	movs	r2, #0
 800473e:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.VOCIndexmax = 0;
 8004740:	4b02      	ldr	r3, [pc, #8]	@ (800474c <resetMaxMeasurementValues+0x30>)
 8004742:	2200      	movs	r2, #0
 8004744:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000690 	.word	0x20000690

08004750 <SetConfigMode>:

void SetConfigMode(){
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <SetConfigMode+0x30>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	4053      	eors	r3, r2
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004762:	4a08      	ldr	r2, [pc, #32]	@ (8004784 <SetConfigMode+0x34>)
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <SetConfigMode+0x38>)
 8004766:	0019      	movs	r1, r3
 8004768:	2003      	movs	r0, #3
 800476a:	f00d f877 	bl	801185c <CreateLine>
  }
  ReconfigSet = true;
 800476e:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <SetConfigMode+0x30>)
 8004770:	2201      	movs	r2, #1
 8004772:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <SetConfigMode+0x3c>)
 8004776:	2200      	movs	r2, #0
 8004778:	701a      	strb	r2, [r3, #0]
}
 800477a:	46c0      	nop			@ (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200005b7 	.word	0x200005b7
 8004784:	08027bdc 	.word	0x08027bdc
 8004788:	08027bfc 	.word	0x08027bfc
 800478c:	20000207 	.word	0x20000207

08004790 <GetReconfigMode>:

bool GetReconfigMode() {
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004794:	4b02      	ldr	r3, [pc, #8]	@ (80047a0 <GetReconfigMode+0x10>)
 8004796:	781b      	ldrb	r3, [r3, #0]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	200005b7 	.word	0x200005b7

080047a4 <ESP_GetUID>:

void ESP_GetUID(){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80047a8:	f00d fcee 	bl	8012188 <HAL_GetUIDw0>
 80047ac:	0002      	movs	r2, r0
 80047ae:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <ESP_GetUID+0x28>)
 80047b0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80047b2:	f00d fcf3 	bl	801219c <HAL_GetUIDw1>
 80047b6:	0002      	movs	r2, r0
 80047b8:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <ESP_GetUID+0x28>)
 80047ba:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80047bc:	f00d fcf8 	bl	80121b0 <HAL_GetUIDw2>
 80047c0:	0002      	movs	r2, r0
 80047c2:	4b02      	ldr	r3, [pc, #8]	@ (80047cc <ESP_GetUID+0x28>)
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200005c0 	.word	0x200005c0

080047d0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <ESP_Init+0x2c>)
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80047de:	4b08      	ldr	r3, [pc, #32]	@ (8004800 <ESP_Init+0x30>)
 80047e0:	2202      	movs	r2, #2
 80047e2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80047e4:	f7ff ffde 	bl	80047a4 <ESP_GetUID>
  beurs = checkEEprom();
 80047e8:	f7ff fe5e 	bl	80044a8 <checkEEprom>
 80047ec:	0003      	movs	r3, r0
 80047ee:	001a      	movs	r2, r3
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <ESP_Init+0x34>)
 80047f2:	701a      	strb	r2, [r3, #0]
}
 80047f4:	46c0      	nop			@ (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200004ac 	.word	0x200004ac
 8004800:	2000002c 	.word	0x2000002c
 8004804:	200005ba 	.word	0x200005ba

08004808 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004808:	b5b0      	push	{r4, r5, r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	000a      	movs	r2, r1
 8004812:	1cbb      	adds	r3, r7, #2
 8004814:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004816:	4b11      	ldr	r3, [pc, #68]	@ (800485c <ESP_Send+0x54>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	250f      	movs	r5, #15
 800481c:	197c      	adds	r4, r7, r5
 800481e:	1cbb      	adds	r3, r7, #2
 8004820:	881a      	ldrh	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0019      	movs	r1, r3
 8004826:	f016 fa27 	bl	801ac78 <HAL_UART_Transmit_DMA>
 800482a:	0003      	movs	r3, r0
 800482c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800482e:	197b      	adds	r3, r7, r5
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004836:	4a0a      	ldr	r2, [pc, #40]	@ (8004860 <ESP_Send+0x58>)
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <ESP_Send+0x5c>)
 800483a:	0019      	movs	r1, r3
 800483c:	2001      	movs	r0, #1
 800483e:	f00d f80d 	bl	801185c <CreateLine>
    return false;
 8004842:	2300      	movs	r3, #0
 8004844:	e006      	b.n	8004854 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <ESP_Send+0x60>)
 800484a:	0011      	movs	r1, r2
 800484c:	0018      	movs	r0, r3
 800484e:	f01e ff8d 	bl	802376c <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004852:	2301      	movs	r3, #1
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b004      	add	sp, #16
 800485a:	bdb0      	pop	{r4, r5, r7, pc}
 800485c:	200004ac 	.word	0x200004ac
 8004860:	08027c00 	.word	0x08027c00
 8004864:	08027c20 	.word	0x08027c20
 8004868:	08027c24 	.word	0x08027c24

0800486c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 800486c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	000a      	movs	r2, r1
 8004876:	1cbb      	adds	r3, r7, #2
 8004878:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 800487a:	4b52      	ldr	r3, [pc, #328]	@ (80049c4 <ESP_Receive+0x158>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004880:	260f      	movs	r6, #15
 8004882:	19bb      	adds	r3, r7, r6
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004888:	4b4f      	ldr	r3, [pc, #316]	@ (80049c8 <ESP_Receive+0x15c>)
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	250e      	movs	r5, #14
 800488e:	197c      	adds	r4, r7, r5
 8004890:	1cbb      	adds	r3, r7, #2
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0019      	movs	r1, r3
 8004898:	f016 fa7e 	bl	801ad98 <HAL_UART_Receive_DMA>
 800489c:	0003      	movs	r3, r0
 800489e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80048a0:	002c      	movs	r4, r5
 80048a2:	193b      	adds	r3, r7, r4
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d100      	bne.n	80048ac <ESP_Receive+0x40>
 80048aa:	e085      	b.n	80049b8 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 80048ac:	4b46      	ldr	r3, [pc, #280]	@ (80049c8 <ESP_Receive+0x15c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2284      	movs	r2, #132	@ 0x84
 80048b2:	589b      	ldr	r3, [r3, r2]
 80048b4:	4a45      	ldr	r2, [pc, #276]	@ (80049cc <ESP_Receive+0x160>)
 80048b6:	4946      	ldr	r1, [pc, #280]	@ (80049d0 <ESP_Receive+0x164>)
 80048b8:	2001      	movs	r0, #1
 80048ba:	f00c ffcf 	bl	801185c <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 80048be:	193b      	adds	r3, r7, r4
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2201      	movs	r2, #1
 80048c4:	4013      	ands	r3, r2
 80048c6:	d008      	beq.n	80048da <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 80048c8:	4a42      	ldr	r2, [pc, #264]	@ (80049d4 <ESP_Receive+0x168>)
 80048ca:	4b41      	ldr	r3, [pc, #260]	@ (80049d0 <ESP_Receive+0x164>)
 80048cc:	0019      	movs	r1, r3
 80048ce:	2001      	movs	r0, #1
 80048d0:	f00c ffc4 	bl	801185c <CreateLine>
      reset = true;
 80048d4:	19bb      	adds	r3, r7, r6
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 80048da:	230e      	movs	r3, #14
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2202      	movs	r2, #2
 80048e2:	4013      	ands	r3, r2
 80048e4:	d005      	beq.n	80048f2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 80048e6:	4a3c      	ldr	r2, [pc, #240]	@ (80049d8 <ESP_Receive+0x16c>)
 80048e8:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <ESP_Receive+0x164>)
 80048ea:	0019      	movs	r1, r3
 80048ec:	2001      	movs	r0, #1
 80048ee:	f00c ffb5 	bl	801185c <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 80048f2:	230e      	movs	r3, #14
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2204      	movs	r2, #4
 80048fa:	4013      	ands	r3, r2
 80048fc:	d005      	beq.n	800490a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 80048fe:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <ESP_Receive+0x170>)
 8004900:	4b33      	ldr	r3, [pc, #204]	@ (80049d0 <ESP_Receive+0x164>)
 8004902:	0019      	movs	r1, r3
 8004904:	2001      	movs	r0, #1
 8004906:	f00c ffa9 	bl	801185c <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 800490a:	230e      	movs	r3, #14
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	4013      	ands	r3, r2
 8004914:	d005      	beq.n	8004922 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004916:	4a32      	ldr	r2, [pc, #200]	@ (80049e0 <ESP_Receive+0x174>)
 8004918:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <ESP_Receive+0x164>)
 800491a:	0019      	movs	r1, r3
 800491c:	2001      	movs	r0, #1
 800491e:	f00c ff9d 	bl	801185c <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004922:	230e      	movs	r3, #14
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2210      	movs	r2, #16
 800492a:	4013      	ands	r3, r2
 800492c:	d005      	beq.n	800493a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 800492e:	4a2d      	ldr	r2, [pc, #180]	@ (80049e4 <ESP_Receive+0x178>)
 8004930:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <ESP_Receive+0x164>)
 8004932:	0019      	movs	r1, r3
 8004934:	2001      	movs	r0, #1
 8004936:	f00c ff91 	bl	801185c <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 800493a:	230e      	movs	r3, #14
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2220      	movs	r2, #32
 8004942:	4013      	ands	r3, r2
 8004944:	d005      	beq.n	8004952 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004946:	4a28      	ldr	r2, [pc, #160]	@ (80049e8 <ESP_Receive+0x17c>)
 8004948:	4b21      	ldr	r3, [pc, #132]	@ (80049d0 <ESP_Receive+0x164>)
 800494a:	0019      	movs	r1, r3
 800494c:	2001      	movs	r0, #1
 800494e:	f00c ff85 	bl	801185c <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8004952:	230e      	movs	r3, #14
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2240      	movs	r2, #64	@ 0x40
 800495a:	4013      	ands	r3, r2
 800495c:	d005      	beq.n	800496a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800495e:	4a23      	ldr	r2, [pc, #140]	@ (80049ec <ESP_Receive+0x180>)
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <ESP_Receive+0x164>)
 8004962:	0019      	movs	r1, r3
 8004964:	2001      	movs	r0, #1
 8004966:	f00c ff79 	bl	801185c <CreateLine>
    }
#endif
    if (reset) {
 800496a:	230f      	movs	r3, #15
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01c      	beq.n	80049ae <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004974:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <ESP_Receive+0x184>)
 8004976:	2200      	movs	r2, #0
 8004978:	2101      	movs	r1, #1
 800497a:	0018      	movs	r0, r3
 800497c:	f00e fe4b 	bl	8013616 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004980:	2001      	movs	r0, #1
 8004982:	f00d fbc1 	bl	8012108 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004986:	2380      	movs	r3, #128	@ 0x80
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	481a      	ldr	r0, [pc, #104]	@ (80049f4 <ESP_Receive+0x188>)
 800498c:	2200      	movs	r2, #0
 800498e:	0019      	movs	r1, r3
 8004990:	f00e fe41 	bl	8013616 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004994:	2001      	movs	r0, #1
 8004996:	f00d fbb7 	bl	8012108 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <ESP_Receive+0x184>)
 800499c:	2200      	movs	r2, #0
 800499e:	2102      	movs	r1, #2
 80049a0:	0018      	movs	r0, r3
 80049a2:	f00e fe38 	bl	8013616 <HAL_GPIO_WritePin>
      SetAllREDLED();
 80049a6:	f00b fecb 	bl	8010740 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 80049aa:	f00e f86c 	bl	8012a86 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <ESP_Receive+0x158>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
    return false;
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <ESP_Receive+0x14e>
  }
  return true;
 80049b8:	2301      	movs	r3, #1
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b005      	add	sp, #20
 80049c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	200004b0 	.word	0x200004b0
 80049c8:	200004ac 	.word	0x200004ac
 80049cc:	08027c34 	.word	0x08027c34
 80049d0:	08027c20 	.word	0x08027c20
 80049d4:	08027c64 	.word	0x08027c64
 80049d8:	08027c88 	.word	0x08027c88
 80049dc:	08027cac 	.word	0x08027cac
 80049e0:	08027cd0 	.word	0x08027cd0
 80049e4:	08027cf4 	.word	0x08027cf4
 80049e8:	08027d20 	.word	0x08027d20
 80049ec:	08027d50 	.word	0x08027d50
 80049f0:	50001c00 	.word	0x50001c00
 80049f4:	50000800 	.word	0x50000800

080049f8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8004a00:	4b39      	ldr	r3, [pc, #228]	@ (8004ae8 <HAL_UART_ErrorCallback+0xf0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d16b      	bne.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2284      	movs	r2, #132	@ 0x84
 8004a0e:	589b      	ldr	r3, [r3, r2]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d065      	beq.n	8004ae0 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2284      	movs	r2, #132	@ 0x84
 8004a18:	589b      	ldr	r3, [r3, r2]
 8004a1a:	4a34      	ldr	r2, [pc, #208]	@ (8004aec <HAL_UART_ErrorCallback+0xf4>)
 8004a1c:	4934      	ldr	r1, [pc, #208]	@ (8004af0 <HAL_UART_ErrorCallback+0xf8>)
 8004a1e:	2003      	movs	r0, #3
 8004a20:	f00c ff1c 	bl	801185c <CreateLine>
    switch (huart->ErrorCode) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2284      	movs	r2, #132	@ 0x84
 8004a28:	589b      	ldr	r3, [r3, r2]
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d851      	bhi.n	8004ad2 <HAL_UART_ErrorCallback+0xda>
 8004a2e:	009a      	lsls	r2, r3, #2
 8004a30:	4b30      	ldr	r3, [pc, #192]	@ (8004af4 <HAL_UART_ErrorCallback+0xfc>)
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8004a38:	4a2f      	ldr	r2, [pc, #188]	@ (8004af8 <HAL_UART_ErrorCallback+0x100>)
 8004a3a:	4b30      	ldr	r3, [pc, #192]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f00c ff0c 	bl	801185c <CreateLine>
        break;
 8004a44:	e04d      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8004a46:	4a2e      	ldr	r2, [pc, #184]	@ (8004b00 <HAL_UART_ErrorCallback+0x108>)
 8004a48:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	f00c ff05 	bl	801185c <CreateLine>
        break;
 8004a52:	e046      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8004a54:	4a2b      	ldr	r2, [pc, #172]	@ (8004b04 <HAL_UART_ErrorCallback+0x10c>)
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a58:	0019      	movs	r1, r3
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f00c fefe 	bl	801185c <CreateLine>
        break;
 8004a60:	e03f      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8004a62:	4a29      	ldr	r2, [pc, #164]	@ (8004b08 <HAL_UART_ErrorCallback+0x110>)
 8004a64:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a66:	0019      	movs	r1, r3
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f00c fef7 	bl	801185c <CreateLine>
        break;
 8004a6e:	e038      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8004a70:	4a26      	ldr	r2, [pc, #152]	@ (8004b0c <HAL_UART_ErrorCallback+0x114>)
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a74:	0019      	movs	r1, r3
 8004a76:	2001      	movs	r0, #1
 8004a78:	f00c fef0 	bl	801185c <CreateLine>
        break;
 8004a7c:	e031      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8004a7e:	4a24      	ldr	r2, [pc, #144]	@ (8004b10 <HAL_UART_ErrorCallback+0x118>)
 8004a80:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a82:	0019      	movs	r1, r3
 8004a84:	2001      	movs	r0, #1
 8004a86:	f00c fee9 	bl	801185c <CreateLine>
        break;
 8004a8a:	e02a      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8004a8c:	4a21      	ldr	r2, [pc, #132]	@ (8004b14 <HAL_UART_ErrorCallback+0x11c>)
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a90:	0019      	movs	r1, r3
 8004a92:	2001      	movs	r0, #1
 8004a94:	f00c fee2 	bl	801185c <CreateLine>
        break;
 8004a98:	e023      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004b18 <HAL_UART_ErrorCallback+0x120>)
 8004a9c:	4b17      	ldr	r3, [pc, #92]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f00c fedb 	bl	801185c <CreateLine>
        break;
 8004aa6:	e01c      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b1c <HAL_UART_ErrorCallback+0x124>)
 8004aaa:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004aac:	0019      	movs	r1, r3
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f00c fed4 	bl	801185c <CreateLine>
        break;
 8004ab4:	e015      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b20 <HAL_UART_ErrorCallback+0x128>)
 8004ab8:	4b10      	ldr	r3, [pc, #64]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004aba:	0019      	movs	r1, r3
 8004abc:	2001      	movs	r0, #1
 8004abe:	f00c fecd 	bl	801185c <CreateLine>
        break;
 8004ac2:	e00e      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8004ac4:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <HAL_UART_ErrorCallback+0x12c>)
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004ac8:	0019      	movs	r1, r3
 8004aca:	2001      	movs	r0, #1
 8004acc:	f00c fec6 	bl	801185c <CreateLine>
        break;
 8004ad0:	e007      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8004ad2:	4a15      	ldr	r2, [pc, #84]	@ (8004b28 <HAL_UART_ErrorCallback+0x130>)
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_UART_ErrorCallback+0x104>)
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f00c febf 	bl	801185c <CreateLine>
 8004ade:	e000      	b.n	8004ae2 <HAL_UART_ErrorCallback+0xea>
      return;
 8004ae0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	200004ac 	.word	0x200004ac
 8004aec:	08027d80 	.word	0x08027d80
 8004af0:	08027bfc 	.word	0x08027bfc
 8004af4:	0802aedc 	.word	0x0802aedc
 8004af8:	08027db0 	.word	0x08027db0
 8004afc:	08027c20 	.word	0x08027c20
 8004b00:	08027de4 	.word	0x08027de4
 8004b04:	08027e10 	.word	0x08027e10
 8004b08:	08027e44 	.word	0x08027e44
 8004b0c:	08027e70 	.word	0x08027e70
 8004b10:	08027e98 	.word	0x08027e98
 8004b14:	08027ec8 	.word	0x08027ec8
 8004b18:	08027f00 	.word	0x08027f00
 8004b1c:	08027f38 	.word	0x08027f38
 8004b20:	08027f60 	.word	0x08027f60
 8004b24:	08027f88 	.word	0x08027f88
 8004b28:	08027fb4 	.word	0x08027fb4

08004b2c <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e010      	b.n	8004b5e <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	001a      	movs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1898      	adds	r0, r3, r2
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	001a      	movs	r2, r3
 8004b50:	4b07      	ldr	r3, [pc, #28]	@ (8004b70 <uint8ArrayToString+0x44>)
 8004b52:	0019      	movs	r1, r3
 8004b54:	f01e fe7a 	bl	802384c <siprintf>
  for (int i = 0; i < 12; i++) {
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b0b      	cmp	r3, #11
 8004b62:	ddeb      	ble.n	8004b3c <uint8ArrayToString+0x10>
  }
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b004      	add	sp, #16
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	08027fd8 	.word	0x08027fd8

08004b74 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b089      	sub	sp, #36	@ 0x24
 8004b78:	af04      	add	r7, sp, #16
 8004b7a:	6039      	str	r1, [r7, #0]
 8004b7c:	0011      	movs	r1, r2
 8004b7e:	1dfb      	adds	r3, r7, #7
 8004b80:	1c02      	adds	r2, r0, #0
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	1dbb      	adds	r3, r7, #6
 8004b86:	1c0a      	adds	r2, r1, #0
 8004b88:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8004b8a:	4b23      	ldr	r3, [pc, #140]	@ (8004c18 <CreateMessage+0xa4>)
 8004b8c:	4823      	ldr	r0, [pc, #140]	@ (8004c1c <CreateMessage+0xa8>)
 8004b8e:	220c      	movs	r2, #12
 8004b90:	0019      	movs	r1, r3
 8004b92:	f005 faed 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8004b96:	4b22      	ldr	r3, [pc, #136]	@ (8004c20 <CreateMessage+0xac>)
 8004b98:	4822      	ldr	r0, [pc, #136]	@ (8004c24 <CreateMessage+0xb0>)
 8004b9a:	220c      	movs	r2, #12
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	f005 fae7 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8004ba2:	4b21      	ldr	r3, [pc, #132]	@ (8004c28 <CreateMessage+0xb4>)
 8004ba4:	4821      	ldr	r0, [pc, #132]	@ (8004c2c <CreateMessage+0xb8>)
 8004ba6:	220c      	movs	r2, #12
 8004ba8:	0019      	movs	r1, r3
 8004baa:	f005 fae1 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8004bae:	4b20      	ldr	r3, [pc, #128]	@ (8004c30 <CreateMessage+0xbc>)
 8004bb0:	4820      	ldr	r0, [pc, #128]	@ (8004c34 <CreateMessage+0xc0>)
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	f005 fadb 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8004bba:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <CreateMessage+0xc4>)
 8004bbc:	481f      	ldr	r0, [pc, #124]	@ (8004c3c <CreateMessage+0xc8>)
 8004bbe:	220c      	movs	r2, #12
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	f005 fad5 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <CreateMessage+0xcc>)
 8004bc8:	481e      	ldr	r0, [pc, #120]	@ (8004c44 <CreateMessage+0xd0>)
 8004bca:	220c      	movs	r2, #12
 8004bcc:	0019      	movs	r1, r3
 8004bce:	f005 facf 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8004bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c48 <CreateMessage+0xd4>)
 8004bd4:	481d      	ldr	r0, [pc, #116]	@ (8004c4c <CreateMessage+0xd8>)
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	0019      	movs	r1, r3
 8004bda:	f005 fac9 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8004bde:	4b1c      	ldr	r3, [pc, #112]	@ (8004c50 <CreateMessage+0xdc>)
 8004be0:	481c      	ldr	r0, [pc, #112]	@ (8004c54 <CreateMessage+0xe0>)
 8004be2:	220c      	movs	r2, #12
 8004be4:	0019      	movs	r1, r3
 8004be6:	f005 fac3 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <CreateMessage+0xe4>)
 8004bec:	481b      	ldr	r0, [pc, #108]	@ (8004c5c <CreateMessage+0xe8>)
 8004bee:	220c      	movs	r2, #12
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	f005 fabd 	bl	800a170 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8004bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c60 <CreateMessage+0xec>)
 8004bf8:	481a      	ldr	r0, [pc, #104]	@ (8004c64 <CreateMessage+0xf0>)
 8004bfa:	220c      	movs	r2, #12
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	f005 fab7 	bl	800a170 <ReadUint8ArrayEEprom>
  if(checkName()){
 8004c02:	f7ff fc87 	bl	8004514 <checkName>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d032      	beq.n	8004c70 <CreateMessage+0xfc>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004c0a:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <CreateMessage+0xf4>)
 8004c0c:	4817      	ldr	r0, [pc, #92]	@ (8004c6c <CreateMessage+0xf8>)
 8004c0e:	2220      	movs	r2, #32
 8004c10:	0019      	movs	r1, r3
 8004c12:	f005 faad 	bl	800a170 <ReadUint8ArrayEEprom>
 8004c16:	e031      	b.n	8004c7c <CreateMessage+0x108>
 8004c18:	20000708 	.word	0x20000708
 8004c1c:	0808000c 	.word	0x0808000c
 8004c20:	20000714 	.word	0x20000714
 8004c24:	08080018 	.word	0x08080018
 8004c28:	20000720 	.word	0x20000720
 8004c2c:	08080048 	.word	0x08080048
 8004c30:	2000072c 	.word	0x2000072c
 8004c34:	08080030 	.word	0x08080030
 8004c38:	20000738 	.word	0x20000738
 8004c3c:	0808003c 	.word	0x0808003c
 8004c40:	20000744 	.word	0x20000744
 8004c44:	0808006c 	.word	0x0808006c
 8004c48:	20000750 	.word	0x20000750
 8004c4c:	08080078 	.word	0x08080078
 8004c50:	2000075c 	.word	0x2000075c
 8004c54:	08080024 	.word	0x08080024
 8004c58:	20000768 	.word	0x20000768
 8004c5c:	08080054 	.word	0x08080054
 8004c60:	20000774 	.word	0x20000774
 8004c64:	08080060 	.word	0x08080060
 8004c68:	20000780 	.word	0x20000780
 8004c6c:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8004c70:	4bed      	ldr	r3, [pc, #948]	@ (8005028 <CreateMessage+0x4b4>)
 8004c72:	4aee      	ldr	r2, [pc, #952]	@ (800502c <CreateMessage+0x4b8>)
 8004c74:	6811      	ldr	r1, [r2, #0]
 8004c76:	6019      	str	r1, [r3, #0]
 8004c78:	7912      	ldrb	r2, [r2, #4]
 8004c7a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8004c7c:	f7ff fbf0 	bl	8004460 <setCharges>
  uint16_t index = 0;
 8004c80:	260e      	movs	r6, #14
 8004c82:	19bb      	adds	r3, r7, r6
 8004c84:	2200      	movs	r2, #0
 8004c86:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8004c88:	19bb      	adds	r3, r7, r6
 8004c8a:	881a      	ldrh	r2, [r3, #0]
 8004c8c:	4be8      	ldr	r3, [pc, #928]	@ (8005030 <CreateMessage+0x4bc>)
 8004c8e:	18d3      	adds	r3, r2, r3
 8004c90:	4ae8      	ldr	r2, [pc, #928]	@ (8005034 <CreateMessage+0x4c0>)
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f01e fdd9 	bl	802384c <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8004c9a:	4ae7      	ldr	r2, [pc, #924]	@ (8005038 <CreateMessage+0x4c4>)
 8004c9c:	4be7      	ldr	r3, [pc, #924]	@ (800503c <CreateMessage+0x4c8>)
 8004c9e:	0011      	movs	r1, r2
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f7ff ff43 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8004ca6:	4be6      	ldr	r3, [pc, #920]	@ (8005040 <CreateMessage+0x4cc>)
 8004ca8:	689c      	ldr	r4, [r3, #8]
 8004caa:	4be6      	ldr	r3, [pc, #920]	@ (8005044 <CreateMessage+0x4d0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	1c18      	adds	r0, r3, #0
 8004cb0:	f7fe fbd8 	bl	8003464 <__aeabi_f2d>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	000b      	movs	r3, r1
 8004cb8:	4ddb      	ldr	r5, [pc, #876]	@ (8005028 <CreateMessage+0x4b4>)
 8004cba:	49e3      	ldr	r1, [pc, #908]	@ (8005048 <CreateMessage+0x4d4>)
 8004cbc:	48e3      	ldr	r0, [pc, #908]	@ (800504c <CreateMessage+0x4d8>)
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	4bde      	ldr	r3, [pc, #888]	@ (800503c <CreateMessage+0x4c8>)
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	002b      	movs	r3, r5
 8004cc8:	0022      	movs	r2, r4
 8004cca:	f01e fdbf 	bl	802384c <siprintf>
#endif
index = strlen(message);
 8004cce:	4bd8      	ldr	r3, [pc, #864]	@ (8005030 <CreateMessage+0x4bc>)
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fb fa4b 	bl	800016c <strlen>
 8004cd6:	0002      	movs	r2, r0
 8004cd8:	19bb      	adds	r3, r7, r6
 8004cda:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <CreateMessage+0x1a4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004ce4:	4bd2      	ldr	r3, [pc, #840]	@ (8005030 <CreateMessage+0x4bc>)
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f7fb fa40 	bl	800016c <strlen>
 8004cec:	0003      	movs	r3, r0
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	4bcf      	ldr	r3, [pc, #828]	@ (8005030 <CreateMessage+0x4bc>)
 8004cf2:	0011      	movs	r1, r2
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff fd87 	bl	8004808 <ESP_Send>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	001a      	movs	r2, r3
 8004cfe:	4bd4      	ldr	r3, [pc, #848]	@ (8005050 <CreateMessage+0x4dc>)
 8004d00:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004d02:	4bd4      	ldr	r3, [pc, #848]	@ (8005054 <CreateMessage+0x4e0>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	001a      	movs	r2, r3
 8004d08:	4bd1      	ldr	r3, [pc, #836]	@ (8005050 <CreateMessage+0x4dc>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	1e5a      	subs	r2, r3, #1
 8004d10:	4193      	sbcs	r3, r2
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	4bcf      	ldr	r3, [pc, #828]	@ (8005054 <CreateMessage+0x4e0>)
 8004d16:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8004d18:	4acf      	ldr	r2, [pc, #828]	@ (8005058 <CreateMessage+0x4e4>)
 8004d1a:	4bc8      	ldr	r3, [pc, #800]	@ (800503c <CreateMessage+0x4c8>)
 8004d1c:	0011      	movs	r1, r2
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff ff04 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8004d24:	4bc6      	ldr	r3, [pc, #792]	@ (8005040 <CreateMessage+0x4cc>)
 8004d26:	689c      	ldr	r4, [r3, #8]
 8004d28:	4bc6      	ldr	r3, [pc, #792]	@ (8005044 <CreateMessage+0x4d0>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	1c18      	adds	r0, r3, #0
 8004d2e:	f7fe fb99 	bl	8003464 <__aeabi_f2d>
 8004d32:	0002      	movs	r2, r0
 8004d34:	000b      	movs	r3, r1
 8004d36:	4dbc      	ldr	r5, [pc, #752]	@ (8005028 <CreateMessage+0x4b4>)
 8004d38:	49c8      	ldr	r1, [pc, #800]	@ (800505c <CreateMessage+0x4e8>)
 8004d3a:	48bd      	ldr	r0, [pc, #756]	@ (8005030 <CreateMessage+0x4bc>)
 8004d3c:	9202      	str	r2, [sp, #8]
 8004d3e:	9303      	str	r3, [sp, #12]
 8004d40:	4bbe      	ldr	r3, [pc, #760]	@ (800503c <CreateMessage+0x4c8>)
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	002b      	movs	r3, r5
 8004d46:	0022      	movs	r2, r4
 8004d48:	f01e fd80 	bl	802384c <siprintf>
#endif
  index += strlen(message);
 8004d4c:	4bb8      	ldr	r3, [pc, #736]	@ (8005030 <CreateMessage+0x4bc>)
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7fb fa0c 	bl	800016c <strlen>
 8004d54:	0003      	movs	r3, r0
 8004d56:	b299      	uxth	r1, r3
 8004d58:	220e      	movs	r2, #14
 8004d5a:	18bb      	adds	r3, r7, r2
 8004d5c:	18ba      	adds	r2, r7, r2
 8004d5e:	8812      	ldrh	r2, [r2, #0]
 8004d60:	188a      	adds	r2, r1, r2
 8004d62:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <CreateMessage+0x22c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004d6c:	4bb0      	ldr	r3, [pc, #704]	@ (8005030 <CreateMessage+0x4bc>)
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f7fb f9fc 	bl	800016c <strlen>
 8004d74:	0003      	movs	r3, r0
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	4bad      	ldr	r3, [pc, #692]	@ (8005030 <CreateMessage+0x4bc>)
 8004d7a:	0011      	movs	r1, r2
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f7ff fd43 	bl	8004808 <ESP_Send>
 8004d82:	0003      	movs	r3, r0
 8004d84:	001a      	movs	r2, r3
 8004d86:	4bb2      	ldr	r3, [pc, #712]	@ (8005050 <CreateMessage+0x4dc>)
 8004d88:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004d8a:	4bb2      	ldr	r3, [pc, #712]	@ (8005054 <CreateMessage+0x4e0>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4baf      	ldr	r3, [pc, #700]	@ (8005050 <CreateMessage+0x4dc>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	4013      	ands	r3, r2
 8004d96:	1e5a      	subs	r2, r3, #1
 8004d98:	4193      	sbcs	r3, r2
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	4bad      	ldr	r3, [pc, #692]	@ (8005054 <CreateMessage+0x4e0>)
 8004d9e:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8004da0:	4aaf      	ldr	r2, [pc, #700]	@ (8005060 <CreateMessage+0x4ec>)
 8004da2:	4ba6      	ldr	r3, [pc, #664]	@ (800503c <CreateMessage+0x4c8>)
 8004da4:	0011      	movs	r1, r2
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7ff fec0 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8004dac:	4ba4      	ldr	r3, [pc, #656]	@ (8005040 <CreateMessage+0x4cc>)
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	4ba4      	ldr	r3, [pc, #656]	@ (8005044 <CreateMessage+0x4d0>)
 8004db2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004db4:	4c9c      	ldr	r4, [pc, #624]	@ (8005028 <CreateMessage+0x4b4>)
 8004db6:	49ab      	ldr	r1, [pc, #684]	@ (8005064 <CreateMessage+0x4f0>)
 8004db8:	489d      	ldr	r0, [pc, #628]	@ (8005030 <CreateMessage+0x4bc>)
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	4b9f      	ldr	r3, [pc, #636]	@ (800503c <CreateMessage+0x4c8>)
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	0023      	movs	r3, r4
 8004dc2:	f01e fd43 	bl	802384c <siprintf>
#endif
  index += strlen(message);
 8004dc6:	4b9a      	ldr	r3, [pc, #616]	@ (8005030 <CreateMessage+0x4bc>)
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7fb f9cf 	bl	800016c <strlen>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	220e      	movs	r2, #14
 8004dd4:	18bb      	adds	r3, r7, r2
 8004dd6:	18ba      	adds	r2, r7, r2
 8004dd8:	8812      	ldrh	r2, [r2, #0]
 8004dda:	188a      	adds	r2, r1, r2
 8004ddc:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004dde:	1dbb      	adds	r3, r7, #6
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d019      	beq.n	8004e1a <CreateMessage+0x2a6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004de6:	4b92      	ldr	r3, [pc, #584]	@ (8005030 <CreateMessage+0x4bc>)
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fb f9bf 	bl	800016c <strlen>
 8004dee:	0003      	movs	r3, r0
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	4b8f      	ldr	r3, [pc, #572]	@ (8005030 <CreateMessage+0x4bc>)
 8004df4:	0011      	movs	r1, r2
 8004df6:	0018      	movs	r0, r3
 8004df8:	f7ff fd06 	bl	8004808 <ESP_Send>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	001a      	movs	r2, r3
 8004e00:	4b93      	ldr	r3, [pc, #588]	@ (8005050 <CreateMessage+0x4dc>)
 8004e02:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004e04:	4b93      	ldr	r3, [pc, #588]	@ (8005054 <CreateMessage+0x4e0>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4b91      	ldr	r3, [pc, #580]	@ (8005050 <CreateMessage+0x4dc>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	1e5a      	subs	r2, r3, #1
 8004e12:	4193      	sbcs	r3, r2
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4b8f      	ldr	r3, [pc, #572]	@ (8005054 <CreateMessage+0x4e0>)
 8004e18:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 8004e1a:	f006 faaf 	bl	800b37c <IsBMP280SensorPresent>
 8004e1e:	1e03      	subs	r3, r0, #0
 8004e20:	d043      	beq.n	8004eaa <CreateMessage+0x336>
    uint8ArrayToString(Buffer, hPaConfig);
 8004e22:	4a91      	ldr	r2, [pc, #580]	@ (8005068 <CreateMessage+0x4f4>)
 8004e24:	4b85      	ldr	r3, [pc, #532]	@ (800503c <CreateMessage+0x4c8>)
 8004e26:	0011      	movs	r1, r2
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f7ff fe7f 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
    sprintf(&message[0], ",{\"name\":\"hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8004e2e:	4b84      	ldr	r3, [pc, #528]	@ (8005040 <CreateMessage+0x4cc>)
 8004e30:	689c      	ldr	r4, [r3, #8]
 8004e32:	4b84      	ldr	r3, [pc, #528]	@ (8005044 <CreateMessage+0x4d0>)
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	1c18      	adds	r0, r3, #0
 8004e38:	f7fe fb14 	bl	8003464 <__aeabi_f2d>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	000b      	movs	r3, r1
 8004e40:	4d79      	ldr	r5, [pc, #484]	@ (8005028 <CreateMessage+0x4b4>)
 8004e42:	498a      	ldr	r1, [pc, #552]	@ (800506c <CreateMessage+0x4f8>)
 8004e44:	487a      	ldr	r0, [pc, #488]	@ (8005030 <CreateMessage+0x4bc>)
 8004e46:	9202      	str	r2, [sp, #8]
 8004e48:	9303      	str	r3, [sp, #12]
 8004e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800503c <CreateMessage+0x4c8>)
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	002b      	movs	r3, r5
 8004e50:	0022      	movs	r2, r4
 8004e52:	f01e fcfb 	bl	802384c <siprintf>
#endif
    index += strlen(message);
 8004e56:	4b76      	ldr	r3, [pc, #472]	@ (8005030 <CreateMessage+0x4bc>)
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7fb f987 	bl	800016c <strlen>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	b299      	uxth	r1, r3
 8004e62:	220e      	movs	r2, #14
 8004e64:	18bb      	adds	r3, r7, r2
 8004e66:	18ba      	adds	r2, r7, r2
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	188a      	adds	r2, r1, r2
 8004e6c:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004e6e:	1dbb      	adds	r3, r7, #6
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d019      	beq.n	8004eaa <CreateMessage+0x336>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004e76:	4b6e      	ldr	r3, [pc, #440]	@ (8005030 <CreateMessage+0x4bc>)
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7fb f977 	bl	800016c <strlen>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	4b6b      	ldr	r3, [pc, #428]	@ (8005030 <CreateMessage+0x4bc>)
 8004e84:	0011      	movs	r1, r2
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7ff fcbe 	bl	8004808 <ESP_Send>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	001a      	movs	r2, r3
 8004e90:	4b6f      	ldr	r3, [pc, #444]	@ (8005050 <CreateMessage+0x4dc>)
 8004e92:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004e94:	4b6f      	ldr	r3, [pc, #444]	@ (8005054 <CreateMessage+0x4e0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	001a      	movs	r2, r3
 8004e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005050 <CreateMessage+0x4dc>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	1e5a      	subs	r2, r3, #1
 8004ea2:	4193      	sbcs	r3, r2
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8005054 <CreateMessage+0x4e0>)
 8004ea8:	701a      	strb	r2, [r3, #0]
    }
  }

  uint8ArrayToString(Buffer, soundConfig);
 8004eaa:	4a71      	ldr	r2, [pc, #452]	@ (8005070 <CreateMessage+0x4fc>)
 8004eac:	4b63      	ldr	r3, [pc, #396]	@ (800503c <CreateMessage+0x4c8>)
 8004eae:	0011      	movs	r1, r2
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7ff fe3b 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8004eb6:	4b62      	ldr	r3, [pc, #392]	@ (8005040 <CreateMessage+0x4cc>)
 8004eb8:	689c      	ldr	r4, [r3, #8]
 8004eba:	4b62      	ldr	r3, [pc, #392]	@ (8005044 <CreateMessage+0x4d0>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	1c18      	adds	r0, r3, #0
 8004ec0:	f7fe fad0 	bl	8003464 <__aeabi_f2d>
 8004ec4:	0002      	movs	r2, r0
 8004ec6:	000b      	movs	r3, r1
 8004ec8:	4d57      	ldr	r5, [pc, #348]	@ (8005028 <CreateMessage+0x4b4>)
 8004eca:	496a      	ldr	r1, [pc, #424]	@ (8005074 <CreateMessage+0x500>)
 8004ecc:	4858      	ldr	r0, [pc, #352]	@ (8005030 <CreateMessage+0x4bc>)
 8004ece:	9202      	str	r2, [sp, #8]
 8004ed0:	9303      	str	r3, [sp, #12]
 8004ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800503c <CreateMessage+0x4c8>)
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	002b      	movs	r3, r5
 8004ed8:	0022      	movs	r2, r4
 8004eda:	f01e fcb7 	bl	802384c <siprintf>
#endif
  index += strlen(message);
 8004ede:	4b54      	ldr	r3, [pc, #336]	@ (8005030 <CreateMessage+0x4bc>)
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fb f943 	bl	800016c <strlen>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	b299      	uxth	r1, r3
 8004eea:	220e      	movs	r2, #14
 8004eec:	18bb      	adds	r3, r7, r2
 8004eee:	18ba      	adds	r2, r7, r2
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	188a      	adds	r2, r1, r2
 8004ef4:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004ef6:	1dbb      	adds	r3, r7, #6
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d019      	beq.n	8004f32 <CreateMessage+0x3be>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004efe:	4b4c      	ldr	r3, [pc, #304]	@ (8005030 <CreateMessage+0x4bc>)
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fb f933 	bl	800016c <strlen>
 8004f06:	0003      	movs	r3, r0
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	4b49      	ldr	r3, [pc, #292]	@ (8005030 <CreateMessage+0x4bc>)
 8004f0c:	0011      	movs	r1, r2
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f7ff fc7a 	bl	8004808 <ESP_Send>
 8004f14:	0003      	movs	r3, r0
 8004f16:	001a      	movs	r2, r3
 8004f18:	4b4d      	ldr	r3, [pc, #308]	@ (8005050 <CreateMessage+0x4dc>)
 8004f1a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8005054 <CreateMessage+0x4e0>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	001a      	movs	r2, r3
 8004f22:	4b4b      	ldr	r3, [pc, #300]	@ (8005050 <CreateMessage+0x4dc>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	4013      	ands	r3, r2
 8004f28:	1e5a      	subs	r2, r3, #1
 8004f2a:	4193      	sbcs	r3, r2
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b49      	ldr	r3, [pc, #292]	@ (8005054 <CreateMessage+0x4e0>)
 8004f30:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004f32:	1dfb      	adds	r3, r7, #7
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	4053      	eors	r3, r2
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d100      	bne.n	8004f42 <CreateMessage+0x3ce>
 8004f40:	e14b      	b.n	80051da <CreateMessage+0x666>
    uint8ArrayToString(Buffer, solarConfig);
 8004f42:	4a4d      	ldr	r2, [pc, #308]	@ (8005078 <CreateMessage+0x504>)
 8004f44:	4b3d      	ldr	r3, [pc, #244]	@ (800503c <CreateMessage+0x4c8>)
 8004f46:	0011      	movs	r1, r2
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff fdef 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005040 <CreateMessage+0x4cc>)
 8004f50:	689c      	ldr	r4, [r3, #8]
 8004f52:	4b4a      	ldr	r3, [pc, #296]	@ (800507c <CreateMessage+0x508>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1c18      	adds	r0, r3, #0
 8004f58:	f7fe fa84 	bl	8003464 <__aeabi_f2d>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	000b      	movs	r3, r1
 8004f60:	4d31      	ldr	r5, [pc, #196]	@ (8005028 <CreateMessage+0x4b4>)
 8004f62:	4947      	ldr	r1, [pc, #284]	@ (8005080 <CreateMessage+0x50c>)
 8004f64:	4832      	ldr	r0, [pc, #200]	@ (8005030 <CreateMessage+0x4bc>)
 8004f66:	9202      	str	r2, [sp, #8]
 8004f68:	9303      	str	r3, [sp, #12]
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <CreateMessage+0x4c8>)
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	002b      	movs	r3, r5
 8004f70:	0022      	movs	r2, r4
 8004f72:	f01e fc6b 	bl	802384c <siprintf>
#endif
    index += strlen(message);
 8004f76:	4b2e      	ldr	r3, [pc, #184]	@ (8005030 <CreateMessage+0x4bc>)
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7fb f8f7 	bl	800016c <strlen>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	b299      	uxth	r1, r3
 8004f82:	220e      	movs	r2, #14
 8004f84:	18bb      	adds	r3, r7, r2
 8004f86:	18ba      	adds	r2, r7, r2
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	188a      	adds	r2, r1, r2
 8004f8c:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004f8e:	1dbb      	adds	r3, r7, #6
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d019      	beq.n	8004fca <CreateMessage+0x456>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004f96:	4b26      	ldr	r3, [pc, #152]	@ (8005030 <CreateMessage+0x4bc>)
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7fb f8e7 	bl	800016c <strlen>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <CreateMessage+0x4bc>)
 8004fa4:	0011      	movs	r1, r2
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7ff fc2e 	bl	8004808 <ESP_Send>
 8004fac:	0003      	movs	r3, r0
 8004fae:	001a      	movs	r2, r3
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <CreateMessage+0x4dc>)
 8004fb2:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004fb4:	4b27      	ldr	r3, [pc, #156]	@ (8005054 <CreateMessage+0x4e0>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	001a      	movs	r2, r3
 8004fba:	4b25      	ldr	r3, [pc, #148]	@ (8005050 <CreateMessage+0x4dc>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	4193      	sbcs	r3, r2
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4b23      	ldr	r3, [pc, #140]	@ (8005054 <CreateMessage+0x4e0>)
 8004fc8:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8004fca:	4b2e      	ldr	r3, [pc, #184]	@ (8005084 <CreateMessage+0x510>)
 8004fcc:	791b      	ldrb	r3, [r3, #4]
 8004fce:	2b35      	cmp	r3, #53	@ 0x35
 8004fd0:	d000      	beq.n	8004fd4 <CreateMessage+0x460>
 8004fd2:	e075      	b.n	80050c0 <CreateMessage+0x54c>
 8004fd4:	f002 ff44 	bl	8007e60 <Check_USB_PowerOn>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d071      	beq.n	80050c0 <CreateMessage+0x54c>
      uint8ArrayToString(Buffer, noxConfig);
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8005088 <CreateMessage+0x514>)
 8004fde:	4b17      	ldr	r3, [pc, #92]	@ (800503c <CreateMessage+0x4c8>)
 8004fe0:	0011      	movs	r1, r2
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7ff fda2 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004fe8:	4b15      	ldr	r3, [pc, #84]	@ (8005040 <CreateMessage+0x4cc>)
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <CreateMessage+0x4d0>)
 8004fee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8005028 <CreateMessage+0x4b4>)
 8004ff2:	4926      	ldr	r1, [pc, #152]	@ (800508c <CreateMessage+0x518>)
 8004ff4:	480e      	ldr	r0, [pc, #56]	@ (8005030 <CreateMessage+0x4bc>)
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	4b10      	ldr	r3, [pc, #64]	@ (800503c <CreateMessage+0x4c8>)
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	0023      	movs	r3, r4
 8004ffe:	f01e fc25 	bl	802384c <siprintf>
#endif
      index += strlen(message);
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <CreateMessage+0x4bc>)
 8005004:	0018      	movs	r0, r3
 8005006:	f7fb f8b1 	bl	800016c <strlen>
 800500a:	0003      	movs	r3, r0
 800500c:	b299      	uxth	r1, r3
 800500e:	220e      	movs	r2, #14
 8005010:	18bb      	adds	r3, r7, r2
 8005012:	18ba      	adds	r2, r7, r2
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	188a      	adds	r2, r1, r2
 8005018:	801a      	strh	r2, [r3, #0]
      if (send) {
 800501a:	1dbb      	adds	r3, r7, #6
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04e      	beq.n	80050c0 <CreateMessage+0x54c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005022:	4b03      	ldr	r3, [pc, #12]	@ (8005030 <CreateMessage+0x4bc>)
 8005024:	0018      	movs	r0, r3
 8005026:	e033      	b.n	8005090 <CreateMessage+0x51c>
 8005028:	20000780 	.word	0x20000780
 800502c:	0802ae70 	.word	0x0802ae70
 8005030:	200005e0 	.word	0x200005e0
 8005034:	08027fe0 	.word	0x08027fe0
 8005038:	20000708 	.word	0x20000708
 800503c:	200007a0 	.word	0x200007a0
 8005040:	200005c0 	.word	0x200005c0
 8005044:	20000690 	.word	0x20000690
 8005048:	08027fe4 	.word	0x08027fe4
 800504c:	200005e1 	.word	0x200005e1
 8005050:	200007b9 	.word	0x200007b9
 8005054:	2000002d 	.word	0x2000002d
 8005058:	20000714 	.word	0x20000714
 800505c:	08028038 	.word	0x08028038
 8005060:	2000072c 	.word	0x2000072c
 8005064:	08028090 	.word	0x08028090
 8005068:	20000738 	.word	0x20000738
 800506c:	080280e4 	.word	0x080280e4
 8005070:	20000720 	.word	0x20000720
 8005074:	0802813c 	.word	0x0802813c
 8005078:	20000750 	.word	0x20000750
 800507c:	200005dc 	.word	0x200005dc
 8005080:	08028198 	.word	0x08028198
 8005084:	20000ea0 	.word	0x20000ea0
 8005088:	2000075c 	.word	0x2000075c
 800508c:	080281f8 	.word	0x080281f8
 8005090:	f7fb f86c 	bl	800016c <strlen>
 8005094:	0003      	movs	r3, r0
 8005096:	b29a      	uxth	r2, r3
 8005098:	4b7d      	ldr	r3, [pc, #500]	@ (8005290 <CreateMessage+0x71c>)
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f7ff fbb3 	bl	8004808 <ESP_Send>
 80050a2:	0003      	movs	r3, r0
 80050a4:	001a      	movs	r2, r3
 80050a6:	4b7b      	ldr	r3, [pc, #492]	@ (8005294 <CreateMessage+0x720>)
 80050a8:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80050aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005298 <CreateMessage+0x724>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	001a      	movs	r2, r3
 80050b0:	4b78      	ldr	r3, [pc, #480]	@ (8005294 <CreateMessage+0x720>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	4193      	sbcs	r3, r2
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	4b76      	ldr	r3, [pc, #472]	@ (8005298 <CreateMessage+0x724>)
 80050be:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80050c0:	f007 f8ee 	bl	800c2a0 <sen5x_Get_sen5x_enable_state>
 80050c4:	1e03      	subs	r3, r0, #0
 80050c6:	d100      	bne.n	80050ca <CreateMessage+0x556>
 80050c8:	e087      	b.n	80051da <CreateMessage+0x666>
      uint8ArrayToString(Buffer, PM2Config);
 80050ca:	4a74      	ldr	r2, [pc, #464]	@ (800529c <CreateMessage+0x728>)
 80050cc:	4b74      	ldr	r3, [pc, #464]	@ (80052a0 <CreateMessage+0x72c>)
 80050ce:	0011      	movs	r1, r2
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7ff fd2b 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80050d6:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <CreateMessage+0x730>)
 80050d8:	689c      	ldr	r4, [r3, #8]
 80050da:	4b73      	ldr	r3, [pc, #460]	@ (80052a8 <CreateMessage+0x734>)
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	1c18      	adds	r0, r3, #0
 80050e0:	f7fe f9c0 	bl	8003464 <__aeabi_f2d>
 80050e4:	0002      	movs	r2, r0
 80050e6:	000b      	movs	r3, r1
 80050e8:	4d70      	ldr	r5, [pc, #448]	@ (80052ac <CreateMessage+0x738>)
 80050ea:	4971      	ldr	r1, [pc, #452]	@ (80052b0 <CreateMessage+0x73c>)
 80050ec:	4868      	ldr	r0, [pc, #416]	@ (8005290 <CreateMessage+0x71c>)
 80050ee:	9202      	str	r2, [sp, #8]
 80050f0:	9303      	str	r3, [sp, #12]
 80050f2:	4b6b      	ldr	r3, [pc, #428]	@ (80052a0 <CreateMessage+0x72c>)
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	002b      	movs	r3, r5
 80050f8:	0022      	movs	r2, r4
 80050fa:	f01e fba7 	bl	802384c <siprintf>
#endif
      index += strlen(message);
 80050fe:	4b64      	ldr	r3, [pc, #400]	@ (8005290 <CreateMessage+0x71c>)
 8005100:	0018      	movs	r0, r3
 8005102:	f7fb f833 	bl	800016c <strlen>
 8005106:	0003      	movs	r3, r0
 8005108:	b299      	uxth	r1, r3
 800510a:	220e      	movs	r2, #14
 800510c:	18bb      	adds	r3, r7, r2
 800510e:	18ba      	adds	r2, r7, r2
 8005110:	8812      	ldrh	r2, [r2, #0]
 8005112:	188a      	adds	r2, r1, r2
 8005114:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005116:	1dbb      	adds	r3, r7, #6
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d019      	beq.n	8005152 <CreateMessage+0x5de>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800511e:	4b5c      	ldr	r3, [pc, #368]	@ (8005290 <CreateMessage+0x71c>)
 8005120:	0018      	movs	r0, r3
 8005122:	f7fb f823 	bl	800016c <strlen>
 8005126:	0003      	movs	r3, r0
 8005128:	b29a      	uxth	r2, r3
 800512a:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <CreateMessage+0x71c>)
 800512c:	0011      	movs	r1, r2
 800512e:	0018      	movs	r0, r3
 8005130:	f7ff fb6a 	bl	8004808 <ESP_Send>
 8005134:	0003      	movs	r3, r0
 8005136:	001a      	movs	r2, r3
 8005138:	4b56      	ldr	r3, [pc, #344]	@ (8005294 <CreateMessage+0x720>)
 800513a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800513c:	4b56      	ldr	r3, [pc, #344]	@ (8005298 <CreateMessage+0x724>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	001a      	movs	r2, r3
 8005142:	4b54      	ldr	r3, [pc, #336]	@ (8005294 <CreateMessage+0x720>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	4013      	ands	r3, r2
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	4193      	sbcs	r3, r2
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b52      	ldr	r3, [pc, #328]	@ (8005298 <CreateMessage+0x724>)
 8005150:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 8005152:	4a58      	ldr	r2, [pc, #352]	@ (80052b4 <CreateMessage+0x740>)
 8005154:	4b52      	ldr	r3, [pc, #328]	@ (80052a0 <CreateMessage+0x72c>)
 8005156:	0011      	movs	r1, r2
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff fce7 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800515e:	4b51      	ldr	r3, [pc, #324]	@ (80052a4 <CreateMessage+0x730>)
 8005160:	689c      	ldr	r4, [r3, #8]
 8005162:	4b51      	ldr	r3, [pc, #324]	@ (80052a8 <CreateMessage+0x734>)
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	1c18      	adds	r0, r3, #0
 8005168:	f7fe f97c 	bl	8003464 <__aeabi_f2d>
 800516c:	0002      	movs	r2, r0
 800516e:	000b      	movs	r3, r1
 8005170:	4d4e      	ldr	r5, [pc, #312]	@ (80052ac <CreateMessage+0x738>)
 8005172:	4951      	ldr	r1, [pc, #324]	@ (80052b8 <CreateMessage+0x744>)
 8005174:	4846      	ldr	r0, [pc, #280]	@ (8005290 <CreateMessage+0x71c>)
 8005176:	9202      	str	r2, [sp, #8]
 8005178:	9303      	str	r3, [sp, #12]
 800517a:	4b49      	ldr	r3, [pc, #292]	@ (80052a0 <CreateMessage+0x72c>)
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	002b      	movs	r3, r5
 8005180:	0022      	movs	r2, r4
 8005182:	f01e fb63 	bl	802384c <siprintf>
#endif
      index += strlen(message);
 8005186:	4b42      	ldr	r3, [pc, #264]	@ (8005290 <CreateMessage+0x71c>)
 8005188:	0018      	movs	r0, r3
 800518a:	f7fa ffef 	bl	800016c <strlen>
 800518e:	0003      	movs	r3, r0
 8005190:	b299      	uxth	r1, r3
 8005192:	220e      	movs	r2, #14
 8005194:	18bb      	adds	r3, r7, r2
 8005196:	18ba      	adds	r2, r7, r2
 8005198:	8812      	ldrh	r2, [r2, #0]
 800519a:	188a      	adds	r2, r1, r2
 800519c:	801a      	strh	r2, [r3, #0]
      if (send) {
 800519e:	1dbb      	adds	r3, r7, #6
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d019      	beq.n	80051da <CreateMessage+0x666>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80051a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005290 <CreateMessage+0x71c>)
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7fa ffdf 	bl	800016c <strlen>
 80051ae:	0003      	movs	r3, r0
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	4b37      	ldr	r3, [pc, #220]	@ (8005290 <CreateMessage+0x71c>)
 80051b4:	0011      	movs	r1, r2
 80051b6:	0018      	movs	r0, r3
 80051b8:	f7ff fb26 	bl	8004808 <ESP_Send>
 80051bc:	0003      	movs	r3, r0
 80051be:	001a      	movs	r2, r3
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <CreateMessage+0x720>)
 80051c2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80051c4:	4b34      	ldr	r3, [pc, #208]	@ (8005298 <CreateMessage+0x724>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	001a      	movs	r2, r3
 80051ca:	4b32      	ldr	r3, [pc, #200]	@ (8005294 <CreateMessage+0x720>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	4013      	ands	r3, r2
 80051d0:	1e5a      	subs	r2, r3, #1
 80051d2:	4193      	sbcs	r3, r2
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b30      	ldr	r3, [pc, #192]	@ (8005298 <CreateMessage+0x724>)
 80051d8:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 80051da:	4a38      	ldr	r2, [pc, #224]	@ (80052bc <CreateMessage+0x748>)
 80051dc:	4b30      	ldr	r3, [pc, #192]	@ (80052a0 <CreateMessage+0x72c>)
 80051de:	0011      	movs	r1, r2
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7ff fca3 	bl	8004b2c <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80051e6:	4b2f      	ldr	r3, [pc, #188]	@ (80052a4 <CreateMessage+0x730>)
 80051e8:	689c      	ldr	r4, [r3, #8]
 80051ea:	4b35      	ldr	r3, [pc, #212]	@ (80052c0 <CreateMessage+0x74c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1c18      	adds	r0, r3, #0
 80051f0:	f7fe f938 	bl	8003464 <__aeabi_f2d>
 80051f4:	0002      	movs	r2, r0
 80051f6:	000b      	movs	r3, r1
 80051f8:	4d2c      	ldr	r5, [pc, #176]	@ (80052ac <CreateMessage+0x738>)
 80051fa:	4932      	ldr	r1, [pc, #200]	@ (80052c4 <CreateMessage+0x750>)
 80051fc:	4824      	ldr	r0, [pc, #144]	@ (8005290 <CreateMessage+0x71c>)
 80051fe:	9202      	str	r2, [sp, #8]
 8005200:	9303      	str	r3, [sp, #12]
 8005202:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <CreateMessage+0x72c>)
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	002b      	movs	r3, r5
 8005208:	0022      	movs	r2, r4
 800520a:	f01e fb1f 	bl	802384c <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 800520e:	4b20      	ldr	r3, [pc, #128]	@ (8005290 <CreateMessage+0x71c>)
 8005210:	0018      	movs	r0, r3
 8005212:	f7fa ffab 	bl	800016c <strlen>
 8005216:	0002      	movs	r2, r0
 8005218:	4b1d      	ldr	r3, [pc, #116]	@ (8005290 <CreateMessage+0x71c>)
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	4a2a      	ldr	r2, [pc, #168]	@ (80052c8 <CreateMessage+0x754>)
 800521e:	0011      	movs	r1, r2
 8005220:	0018      	movs	r0, r3
 8005222:	f01e fb13 	bl	802384c <siprintf>
  index += strlen(message);
 8005226:	4b1a      	ldr	r3, [pc, #104]	@ (8005290 <CreateMessage+0x71c>)
 8005228:	0018      	movs	r0, r3
 800522a:	f7fa ff9f 	bl	800016c <strlen>
 800522e:	0003      	movs	r3, r0
 8005230:	b299      	uxth	r1, r3
 8005232:	220e      	movs	r2, #14
 8005234:	18bb      	adds	r3, r7, r2
 8005236:	18ba      	adds	r2, r7, r2
 8005238:	8812      	ldrh	r2, [r2, #0]
 800523a:	188a      	adds	r2, r1, r2
 800523c:	801a      	strh	r2, [r3, #0]
  if (send) {
 800523e:	1dbb      	adds	r3, r7, #6
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d019      	beq.n	800527a <CreateMessage+0x706>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005246:	4b12      	ldr	r3, [pc, #72]	@ (8005290 <CreateMessage+0x71c>)
 8005248:	0018      	movs	r0, r3
 800524a:	f7fa ff8f 	bl	800016c <strlen>
 800524e:	0003      	movs	r3, r0
 8005250:	b29a      	uxth	r2, r3
 8005252:	4b0f      	ldr	r3, [pc, #60]	@ (8005290 <CreateMessage+0x71c>)
 8005254:	0011      	movs	r1, r2
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff fad6 	bl	8004808 <ESP_Send>
 800525c:	0003      	movs	r3, r0
 800525e:	001a      	movs	r2, r3
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <CreateMessage+0x720>)
 8005262:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <CreateMessage+0x724>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	001a      	movs	r2, r3
 800526a:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <CreateMessage+0x720>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4013      	ands	r3, r2
 8005270:	1e5a      	subs	r2, r3, #1
 8005272:	4193      	sbcs	r3, r2
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <CreateMessage+0x724>)
 8005278:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800527a:	4b07      	ldr	r3, [pc, #28]	@ (8005298 <CreateMessage+0x724>)
 800527c:	781a      	ldrb	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	701a      	strb	r2, [r3, #0]
  return index;
 8005282:	230e      	movs	r3, #14
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	881b      	ldrh	r3, [r3, #0]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b005      	add	sp, #20
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005290:	200005e0 	.word	0x200005e0
 8005294:	200007b9 	.word	0x200007b9
 8005298:	2000002d 	.word	0x2000002d
 800529c:	20000768 	.word	0x20000768
 80052a0:	200007a0 	.word	0x200007a0
 80052a4:	200005c0 	.word	0x200005c0
 80052a8:	20000690 	.word	0x20000690
 80052ac:	20000780 	.word	0x20000780
 80052b0:	0802824c 	.word	0x0802824c
 80052b4:	20000774 	.word	0x20000774
 80052b8:	080282a8 	.word	0x080282a8
 80052bc:	20000744 	.word	0x20000744
 80052c0:	200005d8 	.word	0x200005d8
 80052c4:	08028304 	.word	0x08028304
 80052c8:	0802835c 	.word	0x0802835c

080052cc <StartProg>:

void StartProg(){
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80052d0:	2064      	movs	r0, #100	@ 0x64
 80052d2:	f00c ff19 	bl	8012108 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052d6:	4b15      	ldr	r3, [pc, #84]	@ (800532c <StartProg+0x60>)
 80052d8:	2200      	movs	r2, #0
 80052da:	2101      	movs	r1, #1
 80052dc:	0018      	movs	r0, r3
 80052de:	f00e f99a 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80052e2:	2064      	movs	r0, #100	@ 0x64
 80052e4:	f00c ff10 	bl	8012108 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80052e8:	4b10      	ldr	r3, [pc, #64]	@ (800532c <StartProg+0x60>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	2102      	movs	r1, #2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f00e f991 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80052f4:	23fa      	movs	r3, #250	@ 0xfa
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	0018      	movs	r0, r3
 80052fa:	f00c ff05 	bl	8012108 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fe:	4b0b      	ldr	r3, [pc, #44]	@ (800532c <StartProg+0x60>)
 8005300:	2201      	movs	r2, #1
 8005302:	2101      	movs	r1, #1
 8005304:	0018      	movs	r0, r3
 8005306:	f00e f986 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800530a:	23fa      	movs	r3, #250	@ 0xfa
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	0018      	movs	r0, r3
 8005310:	f00c fefa 	bl	8012108 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8005314:	4b05      	ldr	r3, [pc, #20]	@ (800532c <StartProg+0x60>)
 8005316:	2201      	movs	r2, #1
 8005318:	2102      	movs	r1, #2
 800531a:	0018      	movs	r0, r3
 800531c:	f00e f97b 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8005320:	2028      	movs	r0, #40	@ 0x28
 8005322:	f00c fef1 	bl	8012108 <HAL_Delay>
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	50001c00 	.word	0x50001c00

08005330 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b0d9      	sub	sp, #356	@ 0x164
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	0008      	movs	r0, r1
 800533a:	0011      	movs	r1, r2
 800533c:	4ba4      	ldr	r3, [pc, #656]	@ (80055d0 <ParseBuffer+0x2a0>)
 800533e:	24b0      	movs	r4, #176	@ 0xb0
 8005340:	0064      	lsls	r4, r4, #1
 8005342:	191b      	adds	r3, r3, r4
 8005344:	19db      	adds	r3, r3, r7
 8005346:	1c02      	adds	r2, r0, #0
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	4ba2      	ldr	r3, [pc, #648]	@ (80055d4 <ParseBuffer+0x2a4>)
 800534c:	191b      	adds	r3, r3, r4
 800534e:	19db      	adds	r3, r3, r7
 8005350:	1c0a      	adds	r2, r1, #0
 8005352:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	005a      	lsls	r2, r3, #1
 8005358:	2348      	movs	r3, #72	@ 0x48
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	2100      	movs	r1, #0
 800535e:	0018      	movs	r0, r3
 8005360:	f01e fbda 	bl	8023b18 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8005364:	2360      	movs	r3, #96	@ 0x60
 8005366:	33ff      	adds	r3, #255	@ 0xff
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	2203      	movs	r2, #3
 800536c:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800536e:	23ae      	movs	r3, #174	@ 0xae
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	18fb      	adds	r3, r7, r3
 8005374:	2200      	movs	r2, #0
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e013      	b.n	80053a2 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800537a:	20ae      	movs	r0, #174	@ 0xae
 800537c:	0040      	lsls	r0, r0, #1
 800537e:	183b      	adds	r3, r7, r0
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	18d2      	adds	r2, r2, r3
 8005386:	183b      	adds	r3, r7, r0
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	7811      	ldrb	r1, [r2, #0]
 800538c:	4a92      	ldr	r2, [pc, #584]	@ (80055d8 <ParseBuffer+0x2a8>)
 800538e:	24b0      	movs	r4, #176	@ 0xb0
 8005390:	0064      	lsls	r4, r4, #1
 8005392:	1912      	adds	r2, r2, r4
 8005394:	19d2      	adds	r2, r2, r7
 8005396:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8005398:	183b      	adds	r3, r7, r0
 800539a:	881a      	ldrh	r2, [r3, #0]
 800539c:	183b      	adds	r3, r7, r0
 800539e:	3201      	adds	r2, #1
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	23ae      	movs	r3, #174	@ 0xae
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	18fa      	adds	r2, r7, r3
 80053a8:	4b89      	ldr	r3, [pc, #548]	@ (80055d0 <ParseBuffer+0x2a0>)
 80053aa:	21b0      	movs	r1, #176	@ 0xb0
 80053ac:	0049      	lsls	r1, r1, #1
 80053ae:	185b      	adds	r3, r3, r1
 80053b0:	19db      	adds	r3, r3, r7
 80053b2:	8812      	ldrh	r2, [r2, #0]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3df      	bcc.n	800537a <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80053ba:	4b85      	ldr	r3, [pc, #532]	@ (80055d0 <ParseBuffer+0x2a0>)
 80053bc:	185b      	adds	r3, r3, r1
 80053be:	19db      	adds	r3, r3, r7
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	4a85      	ldr	r2, [pc, #532]	@ (80055d8 <ParseBuffer+0x2a8>)
 80053c4:	1852      	adds	r2, r2, r1
 80053c6:	19d2      	adds	r2, r2, r7
 80053c8:	2100      	movs	r1, #0
 80053ca:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80053cc:	f00c fac0 	bl	8011950 <GetVerboseLevel>
 80053d0:	0003      	movs	r3, r0
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d106      	bne.n	80053e4 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80053d6:	2348      	movs	r3, #72	@ 0x48
 80053d8:	18fa      	adds	r2, r7, r3
 80053da:	4b80      	ldr	r3, [pc, #512]	@ (80055dc <ParseBuffer+0x2ac>)
 80053dc:	0011      	movs	r1, r2
 80053de:	0018      	movs	r0, r3
 80053e0:	f01e f9c4 	bl	802376c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	26ac      	movs	r6, #172	@ 0xac
 80053e8:	0076      	lsls	r6, r6, #1
 80053ea:	19ba      	adds	r2, r7, r6
 80053ec:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80053ee:	4b7c      	ldr	r3, [pc, #496]	@ (80055e0 <ParseBuffer+0x2b0>)
 80053f0:	25b0      	movs	r5, #176	@ 0xb0
 80053f2:	006d      	lsls	r5, r5, #1
 80053f4:	195b      	adds	r3, r3, r5
 80053f6:	19db      	adds	r3, r3, r7
 80053f8:	4a7a      	ldr	r2, [pc, #488]	@ (80055e4 <ParseBuffer+0x2b4>)
 80053fa:	8811      	ldrh	r1, [r2, #0]
 80053fc:	8019      	strh	r1, [r3, #0]
 80053fe:	7892      	ldrb	r2, [r2, #2]
 8005400:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8005402:	4b79      	ldr	r3, [pc, #484]	@ (80055e8 <ParseBuffer+0x2b8>)
 8005404:	195b      	adds	r3, r3, r5
 8005406:	19db      	adds	r3, r3, r7
 8005408:	4a78      	ldr	r2, [pc, #480]	@ (80055ec <ParseBuffer+0x2bc>)
 800540a:	6811      	ldr	r1, [r2, #0]
 800540c:	6019      	str	r1, [r3, #0]
 800540e:	8892      	ldrh	r2, [r2, #4]
 8005410:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8005412:	4b77      	ldr	r3, [pc, #476]	@ (80055f0 <ParseBuffer+0x2c0>)
 8005414:	195b      	adds	r3, r3, r5
 8005416:	19db      	adds	r3, r3, r7
 8005418:	4a76      	ldr	r2, [pc, #472]	@ (80055f4 <ParseBuffer+0x2c4>)
 800541a:	6811      	ldr	r1, [r2, #0]
 800541c:	6019      	str	r1, [r3, #0]
 800541e:	7912      	ldrb	r2, [r2, #4]
 8005420:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8005422:	4b75      	ldr	r3, [pc, #468]	@ (80055f8 <ParseBuffer+0x2c8>)
 8005424:	195b      	adds	r3, r3, r5
 8005426:	19db      	adds	r3, r3, r7
 8005428:	4a74      	ldr	r2, [pc, #464]	@ (80055fc <ParseBuffer+0x2cc>)
 800542a:	6811      	ldr	r1, [r2, #0]
 800542c:	6019      	str	r1, [r3, #0]
 800542e:	8892      	ldrh	r2, [r2, #4]
 8005430:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8005432:	4b73      	ldr	r3, [pc, #460]	@ (8005600 <ParseBuffer+0x2d0>)
 8005434:	195b      	adds	r3, r3, r5
 8005436:	19db      	adds	r3, r3, r7
 8005438:	223e      	movs	r2, #62	@ 0x3e
 800543a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800543c:	4b71      	ldr	r3, [pc, #452]	@ (8005604 <ParseBuffer+0x2d4>)
 800543e:	195b      	adds	r3, r3, r5
 8005440:	19db      	adds	r3, r3, r7
 8005442:	4a71      	ldr	r2, [pc, #452]	@ (8005608 <ParseBuffer+0x2d8>)
 8005444:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005446:	c313      	stmia	r3!, {r0, r1, r4}
 8005448:	8811      	ldrh	r1, [r2, #0]
 800544a:	8019      	strh	r1, [r3, #0]
 800544c:	7892      	ldrb	r2, [r2, #2]
 800544e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8005450:	4b6e      	ldr	r3, [pc, #440]	@ (800560c <ParseBuffer+0x2dc>)
 8005452:	195b      	adds	r3, r3, r5
 8005454:	19db      	adds	r3, r3, r7
 8005456:	4a6e      	ldr	r2, [pc, #440]	@ (8005610 <ParseBuffer+0x2e0>)
 8005458:	ca13      	ldmia	r2!, {r0, r1, r4}
 800545a:	c313      	stmia	r3!, {r0, r1, r4}
 800545c:	8812      	ldrh	r2, [r2, #0]
 800545e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8005460:	4b5c      	ldr	r3, [pc, #368]	@ (80055d4 <ParseBuffer+0x2a4>)
 8005462:	195b      	adds	r3, r3, r5
 8005464:	19db      	adds	r3, r3, r7
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10a      	bne.n	8005482 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 800546c:	2344      	movs	r3, #68	@ 0x44
 800546e:	18fa      	adds	r2, r7, r3
 8005470:	2348      	movs	r3, #72	@ 0x48
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	0011      	movs	r1, r2
 8005476:	0018      	movs	r0, r3
 8005478:	f01e fb89 	bl	8023b8e <strstr>
 800547c:	0003      	movs	r3, r0
 800547e:	19ba      	adds	r2, r7, r6
 8005480:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8005482:	4b54      	ldr	r3, [pc, #336]	@ (80055d4 <ParseBuffer+0x2a4>)
 8005484:	22b0      	movs	r2, #176	@ 0xb0
 8005486:	0052      	lsls	r2, r2, #1
 8005488:	189b      	adds	r3, r3, r2
 800548a:	19db      	adds	r3, r3, r7
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10c      	bne.n	80054ac <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8005492:	232c      	movs	r3, #44	@ 0x2c
 8005494:	18fa      	adds	r2, r7, r3
 8005496:	2348      	movs	r3, #72	@ 0x48
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	0011      	movs	r1, r2
 800549c:	0018      	movs	r0, r3
 800549e:	f01e fb76 	bl	8023b8e <strstr>
 80054a2:	0003      	movs	r3, r0
 80054a4:	22ac      	movs	r2, #172	@ 0xac
 80054a6:	0052      	lsls	r2, r2, #1
 80054a8:	18ba      	adds	r2, r7, r2
 80054aa:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80054ac:	4b49      	ldr	r3, [pc, #292]	@ (80055d4 <ParseBuffer+0x2a4>)
 80054ae:	22b0      	movs	r2, #176	@ 0xb0
 80054b0:	0052      	lsls	r2, r2, #1
 80054b2:	189b      	adds	r3, r3, r2
 80054b4:	19db      	adds	r3, r3, r7
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d10c      	bne.n	80054d6 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80054bc:	2328      	movs	r3, #40	@ 0x28
 80054be:	18fa      	adds	r2, r7, r3
 80054c0:	2348      	movs	r3, #72	@ 0x48
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	0011      	movs	r1, r2
 80054c6:	0018      	movs	r0, r3
 80054c8:	f01e fb61 	bl	8023b8e <strstr>
 80054cc:	0003      	movs	r3, r0
 80054ce:	22ac      	movs	r2, #172	@ 0xac
 80054d0:	0052      	lsls	r2, r2, #1
 80054d2:	18ba      	adds	r2, r7, r2
 80054d4:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80054d6:	4b3f      	ldr	r3, [pc, #252]	@ (80055d4 <ParseBuffer+0x2a4>)
 80054d8:	22b0      	movs	r2, #176	@ 0xb0
 80054da:	0052      	lsls	r2, r2, #1
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	19db      	adds	r3, r3, r7
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d10c      	bne.n	8005500 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80054e6:	2308      	movs	r3, #8
 80054e8:	18fa      	adds	r2, r7, r3
 80054ea:	2348      	movs	r3, #72	@ 0x48
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f01e fb4c 	bl	8023b8e <strstr>
 80054f6:	0003      	movs	r3, r0
 80054f8:	22ac      	movs	r2, #172	@ 0xac
 80054fa:	0052      	lsls	r2, r2, #1
 80054fc:	18ba      	adds	r2, r7, r2
 80054fe:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8005500:	233c      	movs	r3, #60	@ 0x3c
 8005502:	18fa      	adds	r2, r7, r3
 8005504:	2448      	movs	r4, #72	@ 0x48
 8005506:	193b      	adds	r3, r7, r4
 8005508:	0011      	movs	r1, r2
 800550a:	0018      	movs	r0, r3
 800550c:	f01e fb3f 	bl	8023b8e <strstr>
 8005510:	0003      	movs	r3, r0
 8005512:	22aa      	movs	r2, #170	@ 0xaa
 8005514:	0052      	lsls	r2, r2, #1
 8005516:	18ba      	adds	r2, r7, r2
 8005518:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 800551a:	2318      	movs	r3, #24
 800551c:	18fa      	adds	r2, r7, r3
 800551e:	193b      	adds	r3, r7, r4
 8005520:	0011      	movs	r1, r2
 8005522:	0018      	movs	r0, r3
 8005524:	f01e fb33 	bl	8023b8e <strstr>
 8005528:	0003      	movs	r3, r0
 800552a:	22a8      	movs	r2, #168	@ 0xa8
 800552c:	0052      	lsls	r2, r2, #1
 800552e:	18ba      	adds	r2, r7, r2
 8005530:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8005532:	4a38      	ldr	r2, [pc, #224]	@ (8005614 <ParseBuffer+0x2e4>)
 8005534:	193b      	adds	r3, r7, r4
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f01e fb28 	bl	8023b8e <strstr>
 800553e:	0003      	movs	r3, r0
 8005540:	22a6      	movs	r2, #166	@ 0xa6
 8005542:	0052      	lsls	r2, r2, #1
 8005544:	18ba      	adds	r2, r7, r2
 8005546:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8005548:	2334      	movs	r3, #52	@ 0x34
 800554a:	18fa      	adds	r2, r7, r3
 800554c:	193b      	adds	r3, r7, r4
 800554e:	0011      	movs	r1, r2
 8005550:	0018      	movs	r0, r3
 8005552:	f01e fb1c 	bl	8023b8e <strstr>
 8005556:	0003      	movs	r3, r0
 8005558:	22a4      	movs	r2, #164	@ 0xa4
 800555a:	0052      	lsls	r2, r2, #1
 800555c:	18ba      	adds	r2, r7, r2
 800555e:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8005560:	4b1b      	ldr	r3, [pc, #108]	@ (80055d0 <ParseBuffer+0x2a0>)
 8005562:	21b0      	movs	r1, #176	@ 0xb0
 8005564:	0049      	lsls	r1, r1, #1
 8005566:	185b      	adds	r3, r3, r1
 8005568:	19db      	adds	r3, r3, r7
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d800      	bhi.n	8005572 <ParseBuffer+0x242>
 8005570:	e0bf      	b.n	80056f2 <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8005572:	22ac      	movs	r2, #172	@ 0xac
 8005574:	0052      	lsls	r2, r2, #1
 8005576:	18bb      	adds	r3, r7, r2
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d052      	beq.n	8005624 <ParseBuffer+0x2f4>
 800557e:	18bb      	adds	r3, r7, r2
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b4f      	cmp	r3, #79	@ 0x4f
 8005586:	d14d      	bne.n	8005624 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8005588:	2360      	movs	r3, #96	@ 0x60
 800558a:	33ff      	adds	r3, #255	@ 0xff
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8005592:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <ParseBuffer+0x2e8>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b12      	cmp	r3, #18
 8005598:	d144      	bne.n	8005624 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <ParseBuffer+0x2a0>)
 800559c:	185b      	adds	r3, r3, r1
 800559e:	19db      	adds	r3, r3, r7
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80055a4:	d10b      	bne.n	80055be <ParseBuffer+0x28e>
 80055a6:	4b0c      	ldr	r3, [pc, #48]	@ (80055d8 <ParseBuffer+0x2a8>)
 80055a8:	185b      	adds	r3, r3, r1
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2221      	movs	r2, #33	@ 0x21
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	2b32      	cmp	r3, #50	@ 0x32
 80055b2:	d104      	bne.n	80055be <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80055b4:	193b      	adds	r3, r7, r4
 80055b6:	0018      	movs	r0, r3
 80055b8:	f002 fdd2 	bl	8008160 <ParseTime>
 80055bc:	e032      	b.n	8005624 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80055be:	4a17      	ldr	r2, [pc, #92]	@ (800561c <ParseBuffer+0x2ec>)
 80055c0:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <ParseBuffer+0x2f0>)
 80055c2:	0019      	movs	r1, r3
 80055c4:	2001      	movs	r0, #1
 80055c6:	f00c f949 	bl	801185c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80055ca:	2306      	movs	r3, #6
 80055cc:	e095      	b.n	80056fa <ParseBuffer+0x3ca>
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	fffffea2 	.word	0xfffffea2
 80055d4:	fffffea1 	.word	0xfffffea1
 80055d8:	fffffee8 	.word	0xfffffee8
 80055dc:	08028360 	.word	0x08028360
 80055e0:	fffffee4 	.word	0xfffffee4
 80055e4:	0802838c 	.word	0x0802838c
 80055e8:	fffffedc 	.word	0xfffffedc
 80055ec:	08028390 	.word	0x08028390
 80055f0:	fffffed4 	.word	0xfffffed4
 80055f4:	08028398 	.word	0x08028398
 80055f8:	fffffecc 	.word	0xfffffecc
 80055fc:	080283a0 	.word	0x080283a0
 8005600:	fffffec8 	.word	0xfffffec8
 8005604:	fffffeb8 	.word	0xfffffeb8
 8005608:	080283a8 	.word	0x080283a8
 800560c:	fffffea8 	.word	0xfffffea8
 8005610:	080283b8 	.word	0x080283b8
 8005614:	0802ae50 	.word	0x0802ae50
 8005618:	2000068a 	.word	0x2000068a
 800561c:	08028378 	.word	0x08028378
 8005620:	08027c20 	.word	0x08027c20
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8005624:	22ac      	movs	r2, #172	@ 0xac
 8005626:	0052      	lsls	r2, r2, #1
 8005628:	18bb      	adds	r3, r7, r2
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <ParseBuffer+0x314>
 8005630:	18bb      	adds	r3, r7, r2
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b72      	cmp	r3, #114	@ 0x72
 8005638:	d104      	bne.n	8005644 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 800563a:	2360      	movs	r3, #96	@ 0x60
 800563c:	33ff      	adds	r3, #255	@ 0xff
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	2202      	movs	r2, #2
 8005642:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8005644:	22ac      	movs	r2, #172	@ 0xac
 8005646:	0052      	lsls	r2, r2, #1
 8005648:	18bb      	adds	r3, r7, r2
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <ParseBuffer+0x334>
 8005650:	18bb      	adds	r3, r7, r2
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b3e      	cmp	r3, #62	@ 0x3e
 8005658:	d104      	bne.n	8005664 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 800565a:	2360      	movs	r3, #96	@ 0x60
 800565c:	33ff      	adds	r3, #255	@ 0xff
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2205      	movs	r2, #5
 8005662:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8005664:	22ac      	movs	r2, #172	@ 0xac
 8005666:	0052      	lsls	r2, r2, #1
 8005668:	18bb      	adds	r3, r7, r2
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <ParseBuffer+0x354>
 8005670:	18bb      	adds	r3, r7, r2
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	2b2b      	cmp	r3, #43	@ 0x2b
 8005678:	d104      	bne.n	8005684 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 800567a:	2360      	movs	r3, #96	@ 0x60
 800567c:	33ff      	adds	r3, #255	@ 0xff
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	220b      	movs	r2, #11
 8005682:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8005684:	22aa      	movs	r2, #170	@ 0xaa
 8005686:	0052      	lsls	r2, r2, #1
 8005688:	18bb      	adds	r3, r7, r2
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <ParseBuffer+0x36a>
 8005690:	18bb      	adds	r3, r7, r2
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b45      	cmp	r3, #69	@ 0x45
 8005698:	d00a      	beq.n	80056b0 <ParseBuffer+0x380>
 800569a:	22a4      	movs	r2, #164	@ 0xa4
 800569c:	0052      	lsls	r2, r2, #1
 800569e:	18bb      	adds	r3, r7, r2
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <ParseBuffer+0x38a>
 80056a6:	18bb      	adds	r3, r7, r2
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b46      	cmp	r3, #70	@ 0x46
 80056ae:	d104      	bne.n	80056ba <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80056b0:	2360      	movs	r3, #96	@ 0x60
 80056b2:	33ff      	adds	r3, #255	@ 0xff
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	2201      	movs	r2, #1
 80056b8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80056ba:	22a8      	movs	r2, #168	@ 0xa8
 80056bc:	0052      	lsls	r2, r2, #1
 80056be:	18bb      	adds	r3, r7, r2
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <ParseBuffer+0x3a6>
 80056c6:	18bb      	adds	r3, r7, r2
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b57      	cmp	r3, #87	@ 0x57
 80056ce:	d102      	bne.n	80056d6 <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80056d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <ParseBuffer+0x3d4>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80056d6:	22a6      	movs	r2, #166	@ 0xa6
 80056d8:	0052      	lsls	r2, r2, #1
 80056da:	18bb      	adds	r3, r7, r2
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <ParseBuffer+0x3c2>
 80056e2:	18bb      	adds	r3, r7, r2
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b32      	cmp	r3, #50	@ 0x32
 80056ea:	d102      	bne.n	80056f2 <ParseBuffer+0x3c2>
      beurs = true;
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <ParseBuffer+0x3d8>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80056f2:	2360      	movs	r3, #96	@ 0x60
 80056f4:	33ff      	adds	r3, #255	@ 0xff
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	781b      	ldrb	r3, [r3, #0]

}
 80056fa:	0018      	movs	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b059      	add	sp, #356	@ 0x164
 8005700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	200005b8 	.word	0x200005b8
 8005708:	200005ba 	.word	0x200005ba

0800570c <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8005712:	4b0b      	ldr	r3, [pc, #44]	@ (8005740 <PollAwake+0x34>)
 8005714:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f7fa fd27 	bl	800016c <strlen>
 800571e:	0003      	movs	r3, r0
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0011      	movs	r1, r2
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff f86e 	bl	8004808 <ESP_Send>
 800572c:	1e03      	subs	r3, r0, #0
 800572e:	d001      	beq.n	8005734 <PollAwake+0x28>
    return true;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <PollAwake+0x2a>
  }
  else{
    return false;
 8005734:	2300      	movs	r3, #0
  }
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b002      	add	sp, #8
 800573c:	bd80      	pop	{r7, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	080283c8 	.word	0x080283c8

08005744 <RFPower>:

bool RFPower(){
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800574a:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <RFPower+0x34>)
 800574c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f7fa fd0b 	bl	800016c <strlen>
 8005756:	0003      	movs	r3, r0
 8005758:	b29a      	uxth	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	0011      	movs	r1, r2
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff f852 	bl	8004808 <ESP_Send>
 8005764:	1e03      	subs	r3, r0, #0
 8005766:	d001      	beq.n	800576c <RFPower+0x28>
    return true;
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <RFPower+0x2a>
  }
  else{
    return false;
 800576c:	2300      	movs	r3, #0
  }
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b002      	add	sp, #8
 8005774:	bd80      	pop	{r7, pc}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	080283d0 	.word	0x080283d0

0800577c <CheckRFPower>:

bool CheckRFPower(){
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8005782:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <CheckRFPower+0x34>)
 8005784:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f7fa fcef 	bl	800016c <strlen>
 800578e:	0003      	movs	r3, r0
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	0011      	movs	r1, r2
 8005796:	0018      	movs	r0, r3
 8005798:	f7ff f836 	bl	8004808 <ESP_Send>
 800579c:	1e03      	subs	r3, r0, #0
 800579e:	d001      	beq.n	80057a4 <CheckRFPower+0x28>
    return true;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80057a4:	2300      	movs	r3, #0
  }
}
 80057a6:	0018      	movs	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	080283e0 	.word	0x080283e0

080057b4 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <ATRestore+0x34>)
 80057bc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f7fa fcd3 	bl	800016c <strlen>
 80057c6:	0003      	movs	r3, r0
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	0011      	movs	r1, r2
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7ff f81a 	bl	8004808 <ESP_Send>
 80057d4:	1e03      	subs	r3, r0, #0
 80057d6:	d001      	beq.n	80057dc <ATRestore+0x28>
    return true;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <ATRestore+0x2a>
  }
  else{
    return false;
 80057dc:	2300      	movs	r3, #0
  }
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b002      	add	sp, #8
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	080283f0 	.word	0x080283f0

080057ec <CWINIT>:

bool CWINIT(){
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80057f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005820 <CWINIT+0x34>)
 80057f4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0018      	movs	r0, r3
 80057fa:	f7fa fcb7 	bl	800016c <strlen>
 80057fe:	0003      	movs	r3, r0
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0011      	movs	r1, r2
 8005806:	0018      	movs	r0, r3
 8005808:	f7fe fffe 	bl	8004808 <ESP_Send>
 800580c:	1e03      	subs	r3, r0, #0
 800580e:	d001      	beq.n	8005814 <CWINIT+0x28>
    return true;
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <CWINIT+0x2a>
  }
  else{
    return false;
 8005814:	2300      	movs	r3, #0
  }
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b002      	add	sp, #8
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	08028400 	.word	0x08028400

08005824 <CWMODE1>:

bool CWMODE1(){
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800582a:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <CWMODE1+0x34>)
 800582c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	0018      	movs	r0, r3
 8005832:	f7fa fc9b 	bl	800016c <strlen>
 8005836:	0003      	movs	r3, r0
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f7fe ffe2 	bl	8004808 <ESP_Send>
 8005844:	1e03      	subs	r3, r0, #0
 8005846:	d001      	beq.n	800584c <CWMODE1+0x28>
    return true;
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <CWMODE1+0x2a>
  }
  else{
    return false;
 800584c:	2300      	movs	r3, #0
  }
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b002      	add	sp, #8
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	08028410 	.word	0x08028410

0800585c <CWMODE2>:

bool CWMODE2(){
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8005862:	4b0b      	ldr	r3, [pc, #44]	@ (8005890 <CWMODE2+0x34>)
 8005864:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f7fa fc7f 	bl	800016c <strlen>
 800586e:	0003      	movs	r3, r0
 8005870:	b29a      	uxth	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	0011      	movs	r1, r2
 8005876:	0018      	movs	r0, r3
 8005878:	f7fe ffc6 	bl	8004808 <ESP_Send>
 800587c:	1e03      	subs	r3, r0, #0
 800587e:	d001      	beq.n	8005884 <CWMODE2+0x28>
    return true;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <CWMODE2+0x2a>
  }
  else{
    return false;
 8005884:	2300      	movs	r3, #0
  }
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	08028420 	.word	0x08028420

08005894 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <CWAUTOCONN+0x34>)
 800589c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7fa fc63 	bl	800016c <strlen>
 80058a6:	0003      	movs	r3, r0
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0011      	movs	r1, r2
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fe ffaa 	bl	8004808 <ESP_Send>
 80058b4:	1e03      	subs	r3, r0, #0
 80058b6:	d001      	beq.n	80058bc <CWAUTOCONN+0x28>
    return true;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80058bc:	2300      	movs	r3, #0
  }
}
 80058be:	0018      	movs	r0, r3
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	08028430 	.word	0x08028430

080058cc <CWJAP>:

bool CWJAP(){
 80058cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ce:	46c6      	mov	lr, r8
 80058d0:	b500      	push	{lr}
 80058d2:	b0a2      	sub	sp, #136	@ 0x88
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	466b      	mov	r3, sp
 80058d8:	4698      	mov	r8, r3
  beursTest = true;
 80058da:	4b39      	ldr	r3, [pc, #228]	@ (80059c0 <CWJAP+0xf4>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80058e0:	2618      	movs	r6, #24
 80058e2:	19bb      	adds	r3, r7, r6
 80058e4:	2264      	movs	r2, #100	@ 0x64
 80058e6:	2100      	movs	r1, #0
 80058e8:	0018      	movs	r0, r3
 80058ea:	f01e f915 	bl	8023b18 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80058ee:	4b35      	ldr	r3, [pc, #212]	@ (80059c4 <CWJAP+0xf8>)
 80058f0:	4a35      	ldr	r2, [pc, #212]	@ (80059c8 <CWJAP+0xfc>)
 80058f2:	4936      	ldr	r1, [pc, #216]	@ (80059cc <CWJAP+0x100>)
 80058f4:	19b8      	adds	r0, r7, r6
 80058f6:	f01d ffa9 	bl	802384c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80058fa:	19bb      	adds	r3, r7, r6
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7fa fc35 	bl	800016c <strlen>
 8005902:	0002      	movs	r2, r0
 8005904:	216f      	movs	r1, #111	@ 0x6f
 8005906:	0030      	movs	r0, r6
 8005908:	180b      	adds	r3, r1, r0
 800590a:	19db      	adds	r3, r3, r7
 800590c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800590e:	180b      	adds	r3, r1, r0
 8005910:	19db      	adds	r3, r3, r7
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	1e5a      	subs	r2, r3, #1
 8005918:	2180      	movs	r1, #128	@ 0x80
 800591a:	1879      	adds	r1, r7, r1
 800591c:	600a      	str	r2, [r1, #0]
 800591e:	001a      	movs	r2, r3
 8005920:	60ba      	str	r2, [r7, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	60fa      	str	r2, [r7, #12]
 8005926:	68b8      	ldr	r0, [r7, #8]
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	0002      	movs	r2, r0
 800592c:	0f52      	lsrs	r2, r2, #29
 800592e:	000e      	movs	r6, r1
 8005930:	00f6      	lsls	r6, r6, #3
 8005932:	617e      	str	r6, [r7, #20]
 8005934:	697e      	ldr	r6, [r7, #20]
 8005936:	4316      	orrs	r6, r2
 8005938:	617e      	str	r6, [r7, #20]
 800593a:	0002      	movs	r2, r0
 800593c:	00d2      	lsls	r2, r2, #3
 800593e:	613a      	str	r2, [r7, #16]
 8005940:	001a      	movs	r2, r3
 8005942:	603a      	str	r2, [r7, #0]
 8005944:	2200      	movs	r2, #0
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	6838      	ldr	r0, [r7, #0]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	0002      	movs	r2, r0
 800594e:	0f52      	lsrs	r2, r2, #29
 8005950:	000e      	movs	r6, r1
 8005952:	00f5      	lsls	r5, r6, #3
 8005954:	4315      	orrs	r5, r2
 8005956:	0002      	movs	r2, r0
 8005958:	00d4      	lsls	r4, r2, #3
 800595a:	3307      	adds	r3, #7
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	466a      	mov	r2, sp
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	469d      	mov	sp, r3
 8005966:	466b      	mov	r3, sp
 8005968:	3300      	adds	r3, #0
 800596a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800596c:	246f      	movs	r4, #111	@ 0x6f
 800596e:	2518      	movs	r5, #24
 8005970:	1963      	adds	r3, r4, r5
 8005972:	19db      	adds	r3, r3, r7
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	001a      	movs	r2, r3
 800597a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800597c:	2100      	movs	r1, #0
 800597e:	0018      	movs	r0, r3
 8005980:	f01e f8ca 	bl	8023b18 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8005984:	1963      	adds	r3, r4, r5
 8005986:	19db      	adds	r3, r3, r7
 8005988:	781a      	ldrb	r2, [r3, #0]
 800598a:	1979      	adds	r1, r7, r5
 800598c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800598e:	0018      	movs	r0, r3
 8005990:	f01e f8e9 	bl	8023b66 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8005994:	1963      	adds	r3, r4, r5
 8005996:	19db      	adds	r3, r3, r7
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b29a      	uxth	r2, r3
 800599c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800599e:	0011      	movs	r1, r2
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7fe ff31 	bl	8004808 <ESP_Send>
 80059a6:	1e03      	subs	r3, r0, #0
 80059a8:	d001      	beq.n	80059ae <CWJAP+0xe2>
    return true;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <CWJAP+0xe4>
  }
  else{
    return false;
 80059ae:	2300      	movs	r3, #0
 80059b0:	46c5      	mov	sp, r8
  }
}
 80059b2:	0018      	movs	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b022      	add	sp, #136	@ 0x88
 80059b8:	bc80      	pop	{r7}
 80059ba:	46b8      	mov	r8, r7
 80059bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	200005b9 	.word	0x200005b9
 80059c4:	0802ae5c 	.word	0x0802ae5c
 80059c8:	0802ae50 	.word	0x0802ae50
 80059cc:	08028444 	.word	0x08028444

080059d0 <CWMODE3>:

bool CWMODE3(){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <CWMODE3+0x34>)
 80059d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fa fbc5 	bl	800016c <strlen>
 80059e2:	0003      	movs	r3, r0
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0011      	movs	r1, r2
 80059ea:	0018      	movs	r0, r3
 80059ec:	f7fe ff0c 	bl	8004808 <ESP_Send>
 80059f0:	1e03      	subs	r3, r0, #0
 80059f2:	d001      	beq.n	80059f8 <CWMODE3+0x28>
    return true;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <CWMODE3+0x2a>
  }
  else{
    return false;
 80059f8:	2300      	movs	r3, #0
  }
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b002      	add	sp, #8
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	0802845c 	.word	0x0802845c

08005a08 <CWSTATE>:

bool CWSTATE(){
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8005a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a3c <CWSTATE+0x34>)
 8005a10:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7fa fba9 	bl	800016c <strlen>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	0011      	movs	r1, r2
 8005a22:	0018      	movs	r0, r3
 8005a24:	f7fe fef0 	bl	8004808 <ESP_Send>
 8005a28:	1e03      	subs	r3, r0, #0
 8005a2a:	d001      	beq.n	8005a30 <CWSTATE+0x28>
    return true;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <CWSTATE+0x2a>
  }
  else{
    return false;
 8005a30:	2300      	movs	r3, #0
  }
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b002      	add	sp, #8
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	46c0      	nop			@ (mov r8, r8)
 8005a3c:	0802846c 	.word	0x0802846c

08005a40 <CWSAP>:

bool CWSAP(){
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8005a46:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <CWSAP+0x34>)
 8005a48:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fa fb8d 	bl	800016c <strlen>
 8005a52:	0003      	movs	r3, r0
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	0011      	movs	r1, r2
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7fe fed4 	bl	8004808 <ESP_Send>
 8005a60:	1e03      	subs	r3, r0, #0
 8005a62:	d001      	beq.n	8005a68 <CWSAP+0x28>
    return true;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <CWSAP+0x2a>
  }
  else{
    return false;
 8005a68:	2300      	movs	r3, #0
  }
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b002      	add	sp, #8
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	0802847c 	.word	0x0802847c

08005a78 <CIPMUX>:

bool CIPMUX(){
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005aac <CIPMUX+0x34>)
 8005a80:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f7fa fb71 	bl	800016c <strlen>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0011      	movs	r1, r2
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fe feb8 	bl	8004808 <ESP_Send>
 8005a98:	1e03      	subs	r3, r0, #0
 8005a9a:	d001      	beq.n	8005aa0 <CIPMUX+0x28>
    return true;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <CIPMUX+0x2a>
  }
  else{
    return false;
 8005aa0:	2300      	movs	r3, #0
  }
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b002      	add	sp, #8
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	080284a0 	.word	0x080284a0

08005ab0 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8005ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae4 <WEBSERVER+0x34>)
 8005ab8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f7fa fb55 	bl	800016c <strlen>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	0011      	movs	r1, r2
 8005aca:	0018      	movs	r0, r3
 8005acc:	f7fe fe9c 	bl	8004808 <ESP_Send>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d001      	beq.n	8005ad8 <WEBSERVER+0x28>
    return true;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <WEBSERVER+0x2a>
  }
  else{
    return false;
 8005ad8:	2300      	movs	r3, #0
  }
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	080284b0 	.word	0x080284b0

08005ae8 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8005aee:	1cfb      	adds	r3, r7, #3
 8005af0:	2200      	movs	r2, #0
 8005af2:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8005af4:	4b26      	ldr	r3, [pc, #152]	@ (8005b90 <HTTPCPOST+0xa8>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	1dbc      	adds	r4, r7, #6
 8005afa:	1cf9      	adds	r1, r7, #3
 8005afc:	2200      	movs	r2, #0
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7ff f838 	bl	8004b74 <CreateMessage>
 8005b04:	0003      	movs	r3, r0
 8005b06:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8005b08:	4b21      	ldr	r3, [pc, #132]	@ (8005b90 <HTTPCPOST+0xa8>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8005b10:	1dbb      	adds	r3, r7, #6
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	4a1f      	ldr	r2, [pc, #124]	@ (8005b94 <HTTPCPOST+0xac>)
 8005b16:	4920      	ldr	r1, [pc, #128]	@ (8005b98 <HTTPCPOST+0xb0>)
 8005b18:	4820      	ldr	r0, [pc, #128]	@ (8005b9c <HTTPCPOST+0xb4>)
 8005b1a:	f01d fe97 	bl	802384c <siprintf>
 8005b1e:	e015      	b.n	8005b4c <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8005b20:	4b1f      	ldr	r3, [pc, #124]	@ (8005ba0 <HTTPCPOST+0xb8>)
 8005b22:	4820      	ldr	r0, [pc, #128]	@ (8005ba4 <HTTPCPOST+0xbc>)
 8005b24:	220c      	movs	r2, #12
 8005b26:	0019      	movs	r1, r3
 8005b28:	f004 fb22 	bl	800a170 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba0 <HTTPCPOST+0xb8>)
 8005b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba8 <HTTPCPOST+0xc0>)
 8005b30:	0011      	movs	r1, r2
 8005b32:	0018      	movs	r0, r3
 8005b34:	f7fe fffa 	bl	8004b2c <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8005b38:	1dbb      	adds	r3, r7, #6
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	4c1a      	ldr	r4, [pc, #104]	@ (8005ba8 <HTTPCPOST+0xc0>)
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <HTTPCPOST+0xc4>)
 8005b40:	491b      	ldr	r1, [pc, #108]	@ (8005bb0 <HTTPCPOST+0xc8>)
 8005b42:	4816      	ldr	r0, [pc, #88]	@ (8005b9c <HTTPCPOST+0xb4>)
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	0023      	movs	r3, r4
 8005b48:	f01d fe80 	bl	802384c <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8005b4c:	4b13      	ldr	r3, [pc, #76]	@ (8005b9c <HTTPCPOST+0xb4>)
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f7fa fb0c 	bl	800016c <strlen>
 8005b54:	0002      	movs	r2, r0
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	8818      	ldrh	r0, [r3, #0]
 8005b5e:	1cfb      	adds	r3, r7, #3
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	4a14      	ldr	r2, [pc, #80]	@ (8005bb4 <HTTPCPOST+0xcc>)
 8005b64:	4914      	ldr	r1, [pc, #80]	@ (8005bb8 <HTTPCPOST+0xd0>)
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	0003      	movs	r3, r0
 8005b6a:	2003      	movs	r0, #3
 8005b6c:	f00b fe76 	bl	801185c <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	881a      	ldrh	r2, [r3, #0]
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <HTTPCPOST+0xb4>)
 8005b76:	0011      	movs	r1, r2
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7fe fe45 	bl	8004808 <ESP_Send>
 8005b7e:	1e03      	subs	r3, r0, #0
 8005b80:	d001      	beq.n	8005b86 <HTTPCPOST+0x9e>
    return true;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8005b86:	2300      	movs	r3, #0
  }
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b003      	add	sp, #12
 8005b8e:	bd90      	pop	{r4, r7, pc}
 8005b90:	200005ba 	.word	0x200005ba
 8005b94:	0802ae78 	.word	0x0802ae78
 8005b98:	080284c8 	.word	0x080284c8
 8005b9c:	200005e0 	.word	0x200005e0
 8005ba0:	200007bc 	.word	0x200007bc
 8005ba4:	08080000 	.word	0x08080000
 8005ba8:	200007c8 	.word	0x200007c8
 8005bac:	0802aeb4 	.word	0x0802aeb4
 8005bb0:	08028500 	.word	0x08028500
 8005bb4:	08028540 	.word	0x08028540
 8005bb8:	08027bfc 	.word	0x08027bfc

08005bbc <SENDDATA>:

bool SENDDATA(){
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af02      	add	r7, sp, #8
  bool result = false;
 8005bc2:	1dfb      	adds	r3, r7, #7
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c04 <SENDDATA+0x48>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	1df9      	adds	r1, r7, #7
 8005bce:	2201      	movs	r2, #1
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fe ffcf 	bl	8004b74 <CreateMessage>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	001a      	movs	r2, r3
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <SENDDATA+0x4c>)
 8005bdc:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8005bde:	1dfb      	adds	r3, r7, #7
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	0018      	movs	r0, r3
 8005be4:	4b08      	ldr	r3, [pc, #32]	@ (8005c08 <SENDDATA+0x4c>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	4a08      	ldr	r2, [pc, #32]	@ (8005c0c <SENDDATA+0x50>)
 8005bea:	4909      	ldr	r1, [pc, #36]	@ (8005c10 <SENDDATA+0x54>)
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	0003      	movs	r3, r0
 8005bf0:	2003      	movs	r0, #3
 8005bf2:	f00b fe33 	bl	801185c <CreateLine>
  return result;
 8005bf6:	1dfb      	adds	r3, r7, #7
 8005bf8:	781b      	ldrb	r3, [r3, #0]
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	200005ba 	.word	0x200005ba
 8005c08:	200005d4 	.word	0x200005d4
 8005c0c:	0802859c 	.word	0x0802859c
 8005c10:	08027bfc 	.word	0x08027bfc

08005c14 <SLEEP>:

bool SLEEP(){
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <SLEEP+0x34>)
 8005c1c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7fa faa3 	bl	800016c <strlen>
 8005c26:	0003      	movs	r3, r0
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0011      	movs	r1, r2
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7fe fdea 	bl	8004808 <ESP_Send>
 8005c34:	1e03      	subs	r3, r0, #0
 8005c36:	d001      	beq.n	8005c3c <SLEEP+0x28>
    return true;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <SLEEP+0x2a>
  }
  else{
    return false;
 8005c3c:	2300      	movs	r3, #0
  }
}
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b002      	add	sp, #8
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	46c0      	nop			@ (mov r8, r8)
 8005c48:	080285d8 	.word	0x080285d8

08005c4c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8005c52:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <CIPSNTPCFG+0x3c>)
 8005c54:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7fa fa87 	bl	800016c <strlen>
 8005c5e:	0003      	movs	r3, r0
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7fe fdce 	bl	8004808 <ESP_Send>
 8005c6c:	1e03      	subs	r3, r0, #0
 8005c6e:	d006      	beq.n	8005c7e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8005c70:	23fa      	movs	r3, #250	@ 0xfa
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	0018      	movs	r0, r3
 8005c76:	f00c fa47 	bl	8012108 <HAL_Delay>
    return true;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8005c7e:	2300      	movs	r3, #0
  }
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	080285e8 	.word	0x080285e8

08005c8c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8005c92:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc0 <CIPSNTPTIME+0x34>)
 8005c94:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f7fa fa67 	bl	800016c <strlen>
 8005c9e:	0003      	movs	r3, r0
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fe fdae 	bl	8004808 <ESP_Send>
 8005cac:	1e03      	subs	r3, r0, #0
 8005cae:	d001      	beq.n	8005cb4 <CIPSNTPTIME+0x28>
    return true;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8005cb4:	2300      	movs	r3, #0
  }
}
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	b002      	add	sp, #8
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	08028638 	.word	0x08028638

08005cc4 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8005cca:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <CIPSNTPINTV+0x34>)
 8005ccc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7fa fa4b 	bl	800016c <strlen>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0011      	movs	r1, r2
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fe fd92 	bl	8004808 <ESP_Send>
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	d001      	beq.n	8005cec <CIPSNTPINTV+0x28>
    return true;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8005cec:	2300      	movs	r3, #0
  }
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b002      	add	sp, #8
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	0802864c 	.word	0x0802864c

08005cfc <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8005cfc:	b5b0      	push	{r4, r5, r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	0002      	movs	r2, r0
 8005d04:	1dfb      	adds	r3, r7, #7
 8005d06:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8005d08:	4b6c      	ldr	r3, [pc, #432]	@ (8005ebc <DMA_ProcessBuffer+0x1c0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	200e      	movs	r0, #14
 8005d12:	183b      	adds	r3, r7, r0
 8005d14:	2180      	movs	r1, #128	@ 0x80
 8005d16:	0049      	lsls	r1, r1, #1
 8005d18:	1a8a      	subs	r2, r1, r2
 8005d1a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8005d1c:	230d      	movs	r3, #13
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	2203      	movs	r2, #3
 8005d22:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8005d24:	183b      	adds	r3, r7, r0
 8005d26:	881a      	ldrh	r2, [r3, #0]
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d903      	bls.n	8005d38 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8005d30:	183b      	adds	r3, r7, r0
 8005d32:	2280      	movs	r2, #128	@ 0x80
 8005d34:	0052      	lsls	r2, r2, #1
 8005d36:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8005d38:	4b61      	ldr	r3, [pc, #388]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	001a      	movs	r2, r3
 8005d40:	230e      	movs	r3, #14
 8005d42:	18fb      	adds	r3, r7, r3
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d131      	bne.n	8005dae <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8005d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8005ec4 <DMA_ProcessBuffer+0x1c8>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b14      	cmp	r3, #20
 8005d50:	d91b      	bls.n	8005d8a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8005d52:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec4 <DMA_ProcessBuffer+0x1c8>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8005d58:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec8 <DMA_ProcessBuffer+0x1cc>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <DMA_ProcessBuffer+0x74>
 8005d60:	4b5a      	ldr	r3, [pc, #360]	@ (8005ecc <DMA_ProcessBuffer+0x1d0>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8005d68:	230d      	movs	r3, #13
 8005d6a:	18fb      	adds	r3, r7, r3
 8005d6c:	2207      	movs	r2, #7
 8005d6e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8005d70:	4b55      	ldr	r3, [pc, #340]	@ (8005ec8 <DMA_ProcessBuffer+0x1cc>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d103      	bne.n	8005d80 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8005d78:	4b55      	ldr	r3, [pc, #340]	@ (8005ed0 <DMA_ProcessBuffer+0x1d4>)
 8005d7a:	220b      	movs	r2, #11
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e016      	b.n	8005dae <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8005d80:	230d      	movs	r3, #13
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2206      	movs	r2, #6
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e011      	b.n	8005dae <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8005d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ec4 <DMA_ProcessBuffer+0x1c8>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec4 <DMA_ProcessBuffer+0x1c8>)
 8005d94:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8005d96:	f00c f9ad 	bl	80120f4 <HAL_GetTick>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	33f5      	adds	r3, #245	@ 0xf5
 8005d9e:	33ff      	adds	r3, #255	@ 0xff
 8005da0:	001a      	movs	r2, r3
 8005da2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ed4 <DMA_ProcessBuffer+0x1d8>)
 8005da4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8005da6:	230d      	movs	r3, #13
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2204      	movs	r2, #4
 8005dac:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8005dae:	4b44      	ldr	r3, [pc, #272]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	001a      	movs	r2, r3
 8005db6:	210e      	movs	r1, #14
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d100      	bne.n	8005dc2 <DMA_ProcessBuffer+0xc6>
 8005dc0:	e075      	b.n	8005eae <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8005dc2:	4b40      	ldr	r3, [pc, #256]	@ (8005ec4 <DMA_ProcessBuffer+0x1c8>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8005dc8:	4b43      	ldr	r3, [pc, #268]	@ (8005ed8 <DMA_ProcessBuffer+0x1dc>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d109      	bne.n	8005dec <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed8 <DMA_ProcessBuffer+0x1dc>)
 8005de0:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8005de2:	230d      	movs	r3, #13
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	220a      	movs	r2, #10
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e060      	b.n	8005eae <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8005dec:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed8 <DMA_ProcessBuffer+0x1dc>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	001a      	movs	r2, r3
 8005df4:	210e      	movs	r1, #14
 8005df6:	187b      	adds	r3, r7, r1
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b34      	ldr	r3, [pc, #208]	@ (8005ed8 <DMA_ProcessBuffer+0x1dc>)
 8005e06:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8005e08:	230d      	movs	r3, #13
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	220a      	movs	r2, #10
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e04d      	b.n	8005eae <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8005e12:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	001a      	movs	r2, r3
 8005e1a:	210e      	movs	r1, #14
 8005e1c:	187b      	adds	r3, r7, r1
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d917      	bls.n	8005e54 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8005e24:	4b26      	ldr	r3, [pc, #152]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8005edc <DMA_ProcessBuffer+0x1e0>)
 8005e2e:	18d0      	adds	r0, r2, r3
 8005e30:	4b23      	ldr	r3, [pc, #140]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	001a      	movs	r2, r3
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	1a9b      	subs	r3, r3, r2
 8005e3e:	b299      	uxth	r1, r3
 8005e40:	230d      	movs	r3, #13
 8005e42:	18fc      	adds	r4, r7, r3
 8005e44:	1dfb      	adds	r3, r7, #7
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	001a      	movs	r2, r3
 8005e4a:	f7ff fa71 	bl	8005330 <ParseBuffer>
 8005e4e:	0003      	movs	r3, r0
 8005e50:	7023      	strb	r3, [r4, #0]
 8005e52:	e026      	b.n	8005ea2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8005e54:	4b1a      	ldr	r3, [pc, #104]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	001a      	movs	r2, r3
 8005e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8005edc <DMA_ProcessBuffer+0x1e0>)
 8005e5e:	18d0      	adds	r0, r2, r3
 8005e60:	4b17      	ldr	r3, [pc, #92]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	001a      	movs	r2, r3
 8005e68:	2380      	movs	r3, #128	@ 0x80
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	b299      	uxth	r1, r3
 8005e70:	250d      	movs	r5, #13
 8005e72:	197c      	adds	r4, r7, r5
 8005e74:	1dfb      	adds	r3, r7, #7
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	001a      	movs	r2, r3
 8005e7a:	f7ff fa59 	bl	8005330 <ParseBuffer>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8005e82:	210e      	movs	r1, #14
 8005e84:	187b      	adds	r3, r7, r1
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8005e8c:	197c      	adds	r4, r7, r5
 8005e8e:	1dfb      	adds	r3, r7, #7
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	8819      	ldrh	r1, [r3, #0]
 8005e96:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <DMA_ProcessBuffer+0x1e0>)
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7ff fa49 	bl	8005330 <ParseBuffer>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8005ea2:	230e      	movs	r3, #14
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <DMA_ProcessBuffer+0x1c4>)
 8005eac:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8005eae:	230d      	movs	r3, #13
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
}
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b004      	add	sp, #16
 8005eba:	bdb0      	pop	{r4, r5, r7, pc}
 8005ebc:	20002134 	.word	0x20002134
 8005ec0:	200007e1 	.word	0x200007e1
 8005ec4:	20000688 	.word	0x20000688
 8005ec8:	2000068a 	.word	0x2000068a
 8005ecc:	20000001 	.word	0x20000001
 8005ed0:	2000002c 	.word	0x2000002c
 8005ed4:	20000680 	.word	0x20000680
 8005ed8:	200007e2 	.word	0x200007e2
 8005edc:	200004b4 	.word	0x200004b4

08005ee0 <clearDMABuffer>:

void clearDMABuffer(){
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	005a      	lsls	r2, r3, #1
 8005ee8:	4b03      	ldr	r3, [pc, #12]	@ (8005ef8 <clearDMABuffer+0x18>)
 8005eea:	2100      	movs	r1, #0
 8005eec:	0018      	movs	r0, r3
 8005eee:	f01d fe13 	bl	8023b18 <memset>
}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	200004b4 	.word	0x200004b4

08005efc <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	0002      	movs	r2, r0
 8005f04:	1dfb      	adds	r3, r7, #7
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	1dbb      	adds	r3, r7, #6
 8005f0a:	1c0a      	adds	r2, r1, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005f0e:	210f      	movs	r1, #15
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8005f16:	1dbb      	adds	r3, r7, #6
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	1dfa      	adds	r2, r7, #7
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	4251      	negs	r1, r2
 8005f26:	414a      	adcs	r2, r1
 8005f28:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005f2a:	1dbb      	adds	r3, r7, #6
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d107      	bne.n	8005f42 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005f32:	230f      	movs	r3, #15
 8005f34:	18fb      	adds	r3, r7, r3
 8005f36:	1dfa      	adds	r2, r7, #7
 8005f38:	7812      	ldrb	r2, [r2, #0]
 8005f3a:	3a02      	subs	r2, #2
 8005f3c:	4251      	negs	r1, r2
 8005f3e:	414a      	adcs	r2, r1
 8005f40:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005f42:	1dbb      	adds	r3, r7, #6
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d107      	bne.n	8005f5a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005f4a:	230f      	movs	r3, #15
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	1dfa      	adds	r2, r7, #7
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	3a05      	subs	r2, #5
 8005f54:	4251      	negs	r1, r2
 8005f56:	414a      	adcs	r2, r1
 8005f58:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005f5a:	1dbb      	adds	r3, r7, #6
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b05      	cmp	r3, #5
 8005f60:	d107      	bne.n	8005f72 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8005f62:	230f      	movs	r3, #15
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	1dfa      	adds	r2, r7, #7
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	3a0b      	subs	r2, #11
 8005f6c:	4251      	negs	r1, r2
 8005f6e:	414a      	adcs	r2, r1
 8005f70:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8005f72:	230f      	movs	r3, #15
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	781b      	ldrb	r3, [r3, #0]
}
 8005f78:	0018      	movs	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b004      	add	sp, #16
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <AT_Send>:

bool AT_Send(AT_Commands state){
 8005f80:	b590      	push	{r4, r7, lr}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	0002      	movs	r2, r0
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8005f8c:	230f      	movs	r3, #15
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  switch (state){
 8005f94:	1dfb      	adds	r3, r7, #7
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b14      	cmp	r3, #20
 8005f9a:	d900      	bls.n	8005f9e <AT_Send+0x1e>
 8005f9c:	e19e      	b.n	80062dc <AT_Send+0x35c>
 8005f9e:	009a      	lsls	r2, r3, #2
 8005fa0:	4bd2      	ldr	r3, [pc, #840]	@ (80062ec <AT_Send+0x36c>)
 8005fa2:	18d3      	adds	r3, r2, r3
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8005fa8:	4bd1      	ldr	r3, [pc, #836]	@ (80062f0 <AT_Send+0x370>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f00b fbff 	bl	80117b0 <TimestampIsReached>
 8005fb2:	1e03      	subs	r3, r0, #0
 8005fb4:	d100      	bne.n	8005fb8 <AT_Send+0x38>
 8005fb6:	e190      	b.n	80062da <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8005fb8:	4ace      	ldr	r2, [pc, #824]	@ (80062f4 <AT_Send+0x374>)
 8005fba:	4bcf      	ldr	r3, [pc, #828]	@ (80062f8 <AT_Send+0x378>)
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	2003      	movs	r0, #3
 8005fc0:	f00b fc4c 	bl	801185c <CreateLine>
    ATCommandSend = PollAwake();
 8005fc4:	230f      	movs	r3, #15
 8005fc6:	18fc      	adds	r4, r7, r3
 8005fc8:	f7ff fba0 	bl	800570c <PollAwake>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005fd0:	f00c f890 	bl	80120f4 <HAL_GetTick>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	3332      	adds	r3, #50	@ 0x32
 8005fd8:	001a      	movs	r2, r3
 8005fda:	4bc5      	ldr	r3, [pc, #788]	@ (80062f0 <AT_Send+0x370>)
 8005fdc:	601a      	str	r2, [r3, #0]
  }
  break;
 8005fde:	e17c      	b.n	80062da <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005fe0:	4ac6      	ldr	r2, [pc, #792]	@ (80062fc <AT_Send+0x37c>)
 8005fe2:	4bc5      	ldr	r3, [pc, #788]	@ (80062f8 <AT_Send+0x378>)
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	2003      	movs	r0, #3
 8005fe8:	f00b fc38 	bl	801185c <CreateLine>
    ATCommandSend = RFPower();
 8005fec:	230f      	movs	r3, #15
 8005fee:	18fc      	adds	r4, r7, r3
 8005ff0:	f7ff fba8 	bl	8005744 <RFPower>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005ff8:	f00c f87c 	bl	80120f4 <HAL_GetTick>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	330a      	adds	r3, #10
 8006000:	001a      	movs	r2, r3
 8006002:	4bbb      	ldr	r3, [pc, #748]	@ (80062f0 <AT_Send+0x370>)
 8006004:	601a      	str	r2, [r3, #0]
    break;
 8006006:	e169      	b.n	80062dc <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006008:	4abd      	ldr	r2, [pc, #756]	@ (8006300 <AT_Send+0x380>)
 800600a:	4bbb      	ldr	r3, [pc, #748]	@ (80062f8 <AT_Send+0x378>)
 800600c:	0019      	movs	r1, r3
 800600e:	2003      	movs	r0, #3
 8006010:	f00b fc24 	bl	801185c <CreateLine>
    ATCommandSend = CheckRFPower();
 8006014:	230f      	movs	r3, #15
 8006016:	18fc      	adds	r4, r7, r3
 8006018:	f7ff fbb0 	bl	800577c <CheckRFPower>
 800601c:	0003      	movs	r3, r0
 800601e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006020:	f00c f868 	bl	80120f4 <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	330a      	adds	r3, #10
 8006028:	001a      	movs	r2, r3
 800602a:	4bb1      	ldr	r3, [pc, #708]	@ (80062f0 <AT_Send+0x370>)
 800602c:	601a      	str	r2, [r3, #0]
    break;
 800602e:	e155      	b.n	80062dc <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006030:	4ab4      	ldr	r2, [pc, #720]	@ (8006304 <AT_Send+0x384>)
 8006032:	4bb1      	ldr	r3, [pc, #708]	@ (80062f8 <AT_Send+0x378>)
 8006034:	0019      	movs	r1, r3
 8006036:	2003      	movs	r0, #3
 8006038:	f00b fc10 	bl	801185c <CreateLine>
    ATCommandSend = ATRestore();
 800603c:	230f      	movs	r3, #15
 800603e:	18fc      	adds	r4, r7, r3
 8006040:	f7ff fbb8 	bl	80057b4 <ATRestore>
 8006044:	0003      	movs	r3, r0
 8006046:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006048:	f00c f854 	bl	80120f4 <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	3332      	adds	r3, #50	@ 0x32
 8006050:	001a      	movs	r2, r3
 8006052:	4ba7      	ldr	r3, [pc, #668]	@ (80062f0 <AT_Send+0x370>)
 8006054:	601a      	str	r2, [r3, #0]
    break;
 8006056:	e141      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006058:	4aab      	ldr	r2, [pc, #684]	@ (8006308 <AT_Send+0x388>)
 800605a:	4ba7      	ldr	r3, [pc, #668]	@ (80062f8 <AT_Send+0x378>)
 800605c:	0019      	movs	r1, r3
 800605e:	2003      	movs	r0, #3
 8006060:	f00b fbfc 	bl	801185c <CreateLine>
    ATCommandSend = CWINIT();
 8006064:	230f      	movs	r3, #15
 8006066:	18fc      	adds	r4, r7, r3
 8006068:	f7ff fbc0 	bl	80057ec <CWINIT>
 800606c:	0003      	movs	r3, r0
 800606e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006070:	f00c f840 	bl	80120f4 <HAL_GetTick>
 8006074:	0003      	movs	r3, r0
 8006076:	33f5      	adds	r3, #245	@ 0xf5
 8006078:	33ff      	adds	r3, #255	@ 0xff
 800607a:	001a      	movs	r2, r3
 800607c:	4b9c      	ldr	r3, [pc, #624]	@ (80062f0 <AT_Send+0x370>)
 800607e:	601a      	str	r2, [r3, #0]
    break;
 8006080:	e12c      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006082:	4aa2      	ldr	r2, [pc, #648]	@ (800630c <AT_Send+0x38c>)
 8006084:	4b9c      	ldr	r3, [pc, #624]	@ (80062f8 <AT_Send+0x378>)
 8006086:	0019      	movs	r1, r3
 8006088:	2003      	movs	r0, #3
 800608a:	f00b fbe7 	bl	801185c <CreateLine>
    ATCommandSend = CWSTATE();
 800608e:	230f      	movs	r3, #15
 8006090:	18fc      	adds	r4, r7, r3
 8006092:	f7ff fcb9 	bl	8005a08 <CWSTATE>
 8006096:	0003      	movs	r3, r0
 8006098:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800609a:	f00c f82b 	bl	80120f4 <HAL_GetTick>
 800609e:	0003      	movs	r3, r0
 80060a0:	33f5      	adds	r3, #245	@ 0xf5
 80060a2:	33ff      	adds	r3, #255	@ 0xff
 80060a4:	001a      	movs	r2, r3
 80060a6:	4b92      	ldr	r3, [pc, #584]	@ (80062f0 <AT_Send+0x370>)
 80060a8:	601a      	str	r2, [r3, #0]
    break;
 80060aa:	e117      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80060ac:	4a98      	ldr	r2, [pc, #608]	@ (8006310 <AT_Send+0x390>)
 80060ae:	4b92      	ldr	r3, [pc, #584]	@ (80062f8 <AT_Send+0x378>)
 80060b0:	0019      	movs	r1, r3
 80060b2:	2003      	movs	r0, #3
 80060b4:	f00b fbd2 	bl	801185c <CreateLine>
    ATCommandSend = CWMODE1();
 80060b8:	230f      	movs	r3, #15
 80060ba:	18fc      	adds	r4, r7, r3
 80060bc:	f7ff fbb2 	bl	8005824 <CWMODE1>
 80060c0:	0003      	movs	r3, r0
 80060c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80060c4:	f00c f816 	bl	80120f4 <HAL_GetTick>
 80060c8:	0003      	movs	r3, r0
 80060ca:	330a      	adds	r3, #10
 80060cc:	001a      	movs	r2, r3
 80060ce:	4b88      	ldr	r3, [pc, #544]	@ (80062f0 <AT_Send+0x370>)
 80060d0:	601a      	str	r2, [r3, #0]
    break;
 80060d2:	e103      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80060d4:	4a8e      	ldr	r2, [pc, #568]	@ (8006310 <AT_Send+0x390>)
 80060d6:	4b88      	ldr	r3, [pc, #544]	@ (80062f8 <AT_Send+0x378>)
 80060d8:	0019      	movs	r1, r3
 80060da:	2003      	movs	r0, #3
 80060dc:	f00b fbbe 	bl	801185c <CreateLine>
    ATCommandSend = CWMODE2();
 80060e0:	230f      	movs	r3, #15
 80060e2:	18fc      	adds	r4, r7, r3
 80060e4:	f7ff fbba 	bl	800585c <CWMODE2>
 80060e8:	0003      	movs	r3, r0
 80060ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80060ec:	f00c f802 	bl	80120f4 <HAL_GetTick>
 80060f0:	0003      	movs	r3, r0
 80060f2:	330a      	adds	r3, #10
 80060f4:	001a      	movs	r2, r3
 80060f6:	4b7e      	ldr	r3, [pc, #504]	@ (80062f0 <AT_Send+0x370>)
 80060f8:	601a      	str	r2, [r3, #0]
    break;
 80060fa:	e0ef      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80060fc:	4a85      	ldr	r2, [pc, #532]	@ (8006314 <AT_Send+0x394>)
 80060fe:	4b7e      	ldr	r3, [pc, #504]	@ (80062f8 <AT_Send+0x378>)
 8006100:	0019      	movs	r1, r3
 8006102:	2003      	movs	r0, #3
 8006104:	f00b fbaa 	bl	801185c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006108:	230f      	movs	r3, #15
 800610a:	18fc      	adds	r4, r7, r3
 800610c:	f7ff fbc2 	bl	8005894 <CWAUTOCONN>
 8006110:	0003      	movs	r3, r0
 8006112:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006114:	f00b ffee 	bl	80120f4 <HAL_GetTick>
 8006118:	0003      	movs	r3, r0
 800611a:	330a      	adds	r3, #10
 800611c:	001a      	movs	r2, r3
 800611e:	4b74      	ldr	r3, [pc, #464]	@ (80062f0 <AT_Send+0x370>)
 8006120:	601a      	str	r2, [r3, #0]
    break;
 8006122:	e0db      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006124:	4a7c      	ldr	r2, [pc, #496]	@ (8006318 <AT_Send+0x398>)
 8006126:	4b74      	ldr	r3, [pc, #464]	@ (80062f8 <AT_Send+0x378>)
 8006128:	0019      	movs	r1, r3
 800612a:	2003      	movs	r0, #3
 800612c:	f00b fb96 	bl	801185c <CreateLine>
    ATCommandSend = CWJAP();
 8006130:	230f      	movs	r3, #15
 8006132:	18fc      	adds	r4, r7, r3
 8006134:	f7ff fbca 	bl	80058cc <CWJAP>
 8006138:	0003      	movs	r3, r0
 800613a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800613c:	f00b ffda 	bl	80120f4 <HAL_GetTick>
 8006140:	0003      	movs	r3, r0
 8006142:	3332      	adds	r3, #50	@ 0x32
 8006144:	001a      	movs	r2, r3
 8006146:	4b6a      	ldr	r3, [pc, #424]	@ (80062f0 <AT_Send+0x370>)
 8006148:	601a      	str	r2, [r3, #0]
    break;
 800614a:	e0c7      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800614c:	4a73      	ldr	r2, [pc, #460]	@ (800631c <AT_Send+0x39c>)
 800614e:	4b6a      	ldr	r3, [pc, #424]	@ (80062f8 <AT_Send+0x378>)
 8006150:	0019      	movs	r1, r3
 8006152:	2003      	movs	r0, #3
 8006154:	f00b fb82 	bl	801185c <CreateLine>
    ATCommandSend = CWMODE3();
 8006158:	230f      	movs	r3, #15
 800615a:	18fc      	adds	r4, r7, r3
 800615c:	f7ff fc38 	bl	80059d0 <CWMODE3>
 8006160:	0003      	movs	r3, r0
 8006162:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006164:	f00b ffc6 	bl	80120f4 <HAL_GetTick>
 8006168:	0003      	movs	r3, r0
 800616a:	330a      	adds	r3, #10
 800616c:	001a      	movs	r2, r3
 800616e:	4b60      	ldr	r3, [pc, #384]	@ (80062f0 <AT_Send+0x370>)
 8006170:	601a      	str	r2, [r3, #0]
    break;
 8006172:	e0b3      	b.n	80062dc <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006174:	4a6a      	ldr	r2, [pc, #424]	@ (8006320 <AT_Send+0x3a0>)
 8006176:	4b60      	ldr	r3, [pc, #384]	@ (80062f8 <AT_Send+0x378>)
 8006178:	0019      	movs	r1, r3
 800617a:	2003      	movs	r0, #3
 800617c:	f00b fb6e 	bl	801185c <CreateLine>
    ATCommandSend = CWSAP();
 8006180:	230f      	movs	r3, #15
 8006182:	18fc      	adds	r4, r7, r3
 8006184:	f7ff fc5c 	bl	8005a40 <CWSAP>
 8006188:	0003      	movs	r3, r0
 800618a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800618c:	f00b ffb2 	bl	80120f4 <HAL_GetTick>
 8006190:	0003      	movs	r3, r0
 8006192:	330a      	adds	r3, #10
 8006194:	001a      	movs	r2, r3
 8006196:	4b56      	ldr	r3, [pc, #344]	@ (80062f0 <AT_Send+0x370>)
 8006198:	601a      	str	r2, [r3, #0]
    break;
 800619a:	e09f      	b.n	80062dc <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 800619c:	4a61      	ldr	r2, [pc, #388]	@ (8006324 <AT_Send+0x3a4>)
 800619e:	4b56      	ldr	r3, [pc, #344]	@ (80062f8 <AT_Send+0x378>)
 80061a0:	0019      	movs	r1, r3
 80061a2:	2003      	movs	r0, #3
 80061a4:	f00b fb5a 	bl	801185c <CreateLine>
    ATCommandSend = CIPMUX();
 80061a8:	230f      	movs	r3, #15
 80061aa:	18fc      	adds	r4, r7, r3
 80061ac:	f7ff fc64 	bl	8005a78 <CIPMUX>
 80061b0:	0003      	movs	r3, r0
 80061b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80061b4:	f00b ff9e 	bl	80120f4 <HAL_GetTick>
 80061b8:	0003      	movs	r3, r0
 80061ba:	330a      	adds	r3, #10
 80061bc:	001a      	movs	r2, r3
 80061be:	4b4c      	ldr	r3, [pc, #304]	@ (80062f0 <AT_Send+0x370>)
 80061c0:	601a      	str	r2, [r3, #0]
    break;
 80061c2:	e08b      	b.n	80062dc <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80061c4:	4a58      	ldr	r2, [pc, #352]	@ (8006328 <AT_Send+0x3a8>)
 80061c6:	4b4c      	ldr	r3, [pc, #304]	@ (80062f8 <AT_Send+0x378>)
 80061c8:	0019      	movs	r1, r3
 80061ca:	2003      	movs	r0, #3
 80061cc:	f00b fb46 	bl	801185c <CreateLine>
    ATCommandSend = WEBSERVER();
 80061d0:	230f      	movs	r3, #15
 80061d2:	18fc      	adds	r4, r7, r3
 80061d4:	f7ff fc6c 	bl	8005ab0 <WEBSERVER>
 80061d8:	0003      	movs	r3, r0
 80061da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80061dc:	f00b ff8a 	bl	80120f4 <HAL_GetTick>
 80061e0:	0003      	movs	r3, r0
 80061e2:	330a      	adds	r3, #10
 80061e4:	001a      	movs	r2, r3
 80061e6:	4b42      	ldr	r3, [pc, #264]	@ (80062f0 <AT_Send+0x370>)
 80061e8:	601a      	str	r2, [r3, #0]
    break;
 80061ea:	e077      	b.n	80062dc <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80061ec:	230f      	movs	r3, #15
 80061ee:	18fc      	adds	r4, r7, r3
 80061f0:	f7ff fc7a 	bl	8005ae8 <HTTPCPOST>
 80061f4:	0003      	movs	r3, r0
 80061f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80061f8:	f00b ff7c 	bl	80120f4 <HAL_GetTick>
 80061fc:	0003      	movs	r3, r0
 80061fe:	33f5      	adds	r3, #245	@ 0xf5
 8006200:	33ff      	adds	r3, #255	@ 0xff
 8006202:	001a      	movs	r2, r3
 8006204:	4b3a      	ldr	r3, [pc, #232]	@ (80062f0 <AT_Send+0x370>)
 8006206:	601a      	str	r2, [r3, #0]
    break;
 8006208:	e068      	b.n	80062dc <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800620a:	4a48      	ldr	r2, [pc, #288]	@ (800632c <AT_Send+0x3ac>)
 800620c:	4b3a      	ldr	r3, [pc, #232]	@ (80062f8 <AT_Send+0x378>)
 800620e:	0019      	movs	r1, r3
 8006210:	2003      	movs	r0, #3
 8006212:	f00b fb23 	bl	801185c <CreateLine>
    ATCommandSend = SENDDATA();
 8006216:	230f      	movs	r3, #15
 8006218:	18fc      	adds	r4, r7, r3
 800621a:	f7ff fccf 	bl	8005bbc <SENDDATA>
 800621e:	0003      	movs	r3, r0
 8006220:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8006222:	f00b ff67 	bl	80120f4 <HAL_GetTick>
 8006226:	0003      	movs	r3, r0
 8006228:	33f5      	adds	r3, #245	@ 0xf5
 800622a:	33ff      	adds	r3, #255	@ 0xff
 800622c:	001a      	movs	r2, r3
 800622e:	4b30      	ldr	r3, [pc, #192]	@ (80062f0 <AT_Send+0x370>)
 8006230:	601a      	str	r2, [r3, #0]
    break;
 8006232:	e053      	b.n	80062dc <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8006234:	4a3e      	ldr	r2, [pc, #248]	@ (8006330 <AT_Send+0x3b0>)
 8006236:	4b30      	ldr	r3, [pc, #192]	@ (80062f8 <AT_Send+0x378>)
 8006238:	0019      	movs	r1, r3
 800623a:	2003      	movs	r0, #3
 800623c:	f00b fb0e 	bl	801185c <CreateLine>
    ATCommandSend = SLEEP();
 8006240:	230f      	movs	r3, #15
 8006242:	18fc      	adds	r4, r7, r3
 8006244:	f7ff fce6 	bl	8005c14 <SLEEP>
 8006248:	0003      	movs	r3, r0
 800624a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800624c:	f00b ff52 	bl	80120f4 <HAL_GetTick>
 8006250:	0003      	movs	r3, r0
 8006252:	330a      	adds	r3, #10
 8006254:	001a      	movs	r2, r3
 8006256:	4b26      	ldr	r3, [pc, #152]	@ (80062f0 <AT_Send+0x370>)
 8006258:	601a      	str	r2, [r3, #0]
    break;
 800625a:	e03f      	b.n	80062dc <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800625c:	4a35      	ldr	r2, [pc, #212]	@ (8006334 <AT_Send+0x3b4>)
 800625e:	4b26      	ldr	r3, [pc, #152]	@ (80062f8 <AT_Send+0x378>)
 8006260:	0019      	movs	r1, r3
 8006262:	2003      	movs	r0, #3
 8006264:	f00b fafa 	bl	801185c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8006268:	230f      	movs	r3, #15
 800626a:	18fc      	adds	r4, r7, r3
 800626c:	f7ff fcee 	bl	8005c4c <CIPSNTPCFG>
 8006270:	0003      	movs	r3, r0
 8006272:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006274:	f00b ff3e 	bl	80120f4 <HAL_GetTick>
 8006278:	0003      	movs	r3, r0
 800627a:	330a      	adds	r3, #10
 800627c:	001a      	movs	r2, r3
 800627e:	4b1c      	ldr	r3, [pc, #112]	@ (80062f0 <AT_Send+0x370>)
 8006280:	601a      	str	r2, [r3, #0]
    break;
 8006282:	e02b      	b.n	80062dc <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8006284:	4a2c      	ldr	r2, [pc, #176]	@ (8006338 <AT_Send+0x3b8>)
 8006286:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <AT_Send+0x378>)
 8006288:	0019      	movs	r1, r3
 800628a:	2003      	movs	r0, #3
 800628c:	f00b fae6 	bl	801185c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8006290:	230f      	movs	r3, #15
 8006292:	18fc      	adds	r4, r7, r3
 8006294:	f7ff fcfa 	bl	8005c8c <CIPSNTPTIME>
 8006298:	0003      	movs	r3, r0
 800629a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800629c:	f00b ff2a 	bl	80120f4 <HAL_GetTick>
 80062a0:	0003      	movs	r3, r0
 80062a2:	33f5      	adds	r3, #245	@ 0xf5
 80062a4:	33ff      	adds	r3, #255	@ 0xff
 80062a6:	001a      	movs	r2, r3
 80062a8:	4b11      	ldr	r3, [pc, #68]	@ (80062f0 <AT_Send+0x370>)
 80062aa:	601a      	str	r2, [r3, #0]
    break;
 80062ac:	e016      	b.n	80062dc <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80062ae:	4a23      	ldr	r2, [pc, #140]	@ (800633c <AT_Send+0x3bc>)
 80062b0:	4b11      	ldr	r3, [pc, #68]	@ (80062f8 <AT_Send+0x378>)
 80062b2:	0019      	movs	r1, r3
 80062b4:	2003      	movs	r0, #3
 80062b6:	f00b fad1 	bl	801185c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80062ba:	230f      	movs	r3, #15
 80062bc:	18fc      	adds	r4, r7, r3
 80062be:	f7ff fd01 	bl	8005cc4 <CIPSNTPINTV>
 80062c2:	0003      	movs	r3, r0
 80062c4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80062c6:	f00b ff15 	bl	80120f4 <HAL_GetTick>
 80062ca:	0003      	movs	r3, r0
 80062cc:	330a      	adds	r3, #10
 80062ce:	001a      	movs	r2, r3
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <AT_Send+0x370>)
 80062d2:	601a      	str	r2, [r3, #0]
    break;
 80062d4:	e002      	b.n	80062dc <AT_Send+0x35c>

  case AT_END:
    break;
 80062d6:	46c0      	nop			@ (mov r8, r8)
 80062d8:	e000      	b.n	80062dc <AT_Send+0x35c>
  break;
 80062da:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80062dc:	230f      	movs	r3, #15
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	781b      	ldrb	r3, [r3, #0]
}
 80062e2:	0018      	movs	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b005      	add	sp, #20
 80062e8:	bd90      	pop	{r4, r7, pc}
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	0802af10 	.word	0x0802af10
 80062f0:	20000680 	.word	0x20000680
 80062f4:	08028664 	.word	0x08028664
 80062f8:	08027bfc 	.word	0x08027bfc
 80062fc:	08028670 	.word	0x08028670
 8006300:	08028684 	.word	0x08028684
 8006304:	08028698 	.word	0x08028698
 8006308:	080286a8 	.word	0x080286a8
 800630c:	080286bc 	.word	0x080286bc
 8006310:	080286d4 	.word	0x080286d4
 8006314:	080286ec 	.word	0x080286ec
 8006318:	08028704 	.word	0x08028704
 800631c:	08028718 	.word	0x08028718
 8006320:	08028734 	.word	0x08028734
 8006324:	08028750 	.word	0x08028750
 8006328:	0802876c 	.word	0x0802876c
 800632c:	08028788 	.word	0x08028788
 8006330:	08028798 	.word	0x08028798
 8006334:	080287bc 	.word	0x080287bc
 8006338:	080287d0 	.word	0x080287d0
 800633c:	080287e8 	.word	0x080287e8

08006340 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8006346:	1dfb      	adds	r3, r7, #7
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800634c:	4b7d      	ldr	r3, [pc, #500]	@ (8006544 <ESP_WakeTest+0x204>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b05      	cmp	r3, #5
 8006352:	d900      	bls.n	8006356 <ESP_WakeTest+0x16>
 8006354:	e0d9      	b.n	800650a <ESP_WakeTest+0x1ca>
 8006356:	009a      	lsls	r2, r3, #2
 8006358:	4b7b      	ldr	r3, [pc, #492]	@ (8006548 <ESP_WakeTest+0x208>)
 800635a:	18d3      	adds	r3, r2, r3
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8006360:	4b7a      	ldr	r3, [pc, #488]	@ (800654c <ESP_WakeTest+0x20c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	4053      	eors	r3, r2
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d036      	beq.n	80063dc <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800636e:	2380      	movs	r3, #128	@ 0x80
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	4877      	ldr	r0, [pc, #476]	@ (8006550 <ESP_WakeTest+0x210>)
 8006374:	2200      	movs	r2, #0
 8006376:	0019      	movs	r1, r3
 8006378:	f00d f94d 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800637c:	2032      	movs	r0, #50	@ 0x32
 800637e:	f00b fec3 	bl	8012108 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	4872      	ldr	r0, [pc, #456]	@ (8006550 <ESP_WakeTest+0x210>)
 8006388:	2201      	movs	r2, #1
 800638a:	0019      	movs	r1, r3
 800638c:	f00d f943 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8006390:	200a      	movs	r0, #10
 8006392:	f00b feb9 	bl	8012108 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006396:	4b6f      	ldr	r3, [pc, #444]	@ (8006554 <ESP_WakeTest+0x214>)
 8006398:	2200      	movs	r2, #0
 800639a:	2101      	movs	r1, #1
 800639c:	0018      	movs	r0, r3
 800639e:	f00d f93a 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80063a2:	200a      	movs	r0, #10
 80063a4:	f00b feb0 	bl	8012108 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80063a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006554 <ESP_WakeTest+0x214>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	2102      	movs	r1, #2
 80063ae:	0018      	movs	r0, r3
 80063b0:	f00d f931 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80063b4:	200a      	movs	r0, #10
 80063b6:	f00b fea7 	bl	8012108 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80063ba:	4b66      	ldr	r3, [pc, #408]	@ (8006554 <ESP_WakeTest+0x214>)
 80063bc:	2201      	movs	r2, #1
 80063be:	2101      	movs	r1, #1
 80063c0:	0018      	movs	r0, r3
 80063c2:	f00d f928 	bl	8013616 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80063c6:	f00b fe95 	bl	80120f4 <HAL_GetTick>
 80063ca:	0003      	movs	r3, r0
 80063cc:	22af      	movs	r2, #175	@ 0xaf
 80063ce:	0092      	lsls	r2, r2, #2
 80063d0:	189a      	adds	r2, r3, r2
 80063d2:	4b61      	ldr	r3, [pc, #388]	@ (8006558 <ESP_WakeTest+0x218>)
 80063d4:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80063d6:	4b5d      	ldr	r3, [pc, #372]	@ (800654c <ESP_WakeTest+0x20c>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80063dc:	2380      	movs	r3, #128	@ 0x80
 80063de:	005a      	lsls	r2, r3, #1
 80063e0:	4b5e      	ldr	r3, [pc, #376]	@ (800655c <ESP_WakeTest+0x21c>)
 80063e2:	0011      	movs	r1, r2
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7fe fa41 	bl	800486c <ESP_Receive>
 80063ea:	1e03      	subs	r3, r0, #0
 80063ec:	d100      	bne.n	80063f0 <ESP_WakeTest+0xb0>
 80063ee:	e09f      	b.n	8006530 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80063f0:	4b54      	ldr	r3, [pc, #336]	@ (8006544 <ESP_WakeTest+0x204>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80063f6:	e09b      	b.n	8006530 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80063f8:	4b57      	ldr	r3, [pc, #348]	@ (8006558 <ESP_WakeTest+0x218>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f00b f9d7 	bl	80117b0 <TimestampIsReached>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d100      	bne.n	8006408 <ESP_WakeTest+0xc8>
 8006406:	e095      	b.n	8006534 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8006408:	4b55      	ldr	r3, [pc, #340]	@ (8006560 <ESP_WakeTest+0x220>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	1dfc      	adds	r4, r7, #7
 800640e:	0018      	movs	r0, r3
 8006410:	f7ff fdb6 	bl	8005f80 <AT_Send>
 8006414:	0003      	movs	r3, r0
 8006416:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8006418:	1dfb      	adds	r3, r7, #7
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d100      	bne.n	8006422 <ESP_WakeTest+0xe2>
 8006420:	e088      	b.n	8006534 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8006422:	4b48      	ldr	r3, [pc, #288]	@ (8006544 <ESP_WakeTest+0x204>)
 8006424:	2202      	movs	r2, #2
 8006426:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006428:	e084      	b.n	8006534 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800642a:	4b4b      	ldr	r3, [pc, #300]	@ (8006558 <ESP_WakeTest+0x218>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	0018      	movs	r0, r3
 8006430:	f00b f9be 	bl	80117b0 <TimestampIsReached>
 8006434:	1e03      	subs	r3, r0, #0
 8006436:	d100      	bne.n	800643a <ESP_WakeTest+0xfa>
 8006438:	e07e      	b.n	8006538 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800643a:	4b4a      	ldr	r3, [pc, #296]	@ (8006564 <ESP_WakeTest+0x224>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	0018      	movs	r0, r3
 8006440:	f7ff fc5c 	bl	8005cfc <DMA_ProcessBuffer>
 8006444:	0003      	movs	r3, r0
 8006446:	001a      	movs	r2, r3
 8006448:	4b47      	ldr	r3, [pc, #284]	@ (8006568 <ESP_WakeTest+0x228>)
 800644a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800644c:	4b46      	ldr	r3, [pc, #280]	@ (8006568 <ESP_WakeTest+0x228>)
 800644e:	781a      	ldrb	r2, [r3, #0]
 8006450:	4b44      	ldr	r3, [pc, #272]	@ (8006564 <ESP_WakeTest+0x224>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	1dbc      	adds	r4, r7, #6
 8006456:	0019      	movs	r1, r3
 8006458:	0010      	movs	r0, r2
 800645a:	f7ff fd4f 	bl	8005efc <ATCompare>
 800645e:	0003      	movs	r3, r0
 8006460:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8006462:	4b41      	ldr	r3, [pc, #260]	@ (8006568 <ESP_WakeTest+0x228>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d102      	bne.n	8006470 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800646a:	4b36      	ldr	r3, [pc, #216]	@ (8006544 <ESP_WakeTest+0x204>)
 800646c:	2201      	movs	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8006470:	4b3d      	ldr	r3, [pc, #244]	@ (8006568 <ESP_WakeTest+0x228>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b07      	cmp	r3, #7
 8006476:	d104      	bne.n	8006482 <ESP_WakeTest+0x142>
          StartProg();
 8006478:	f7fe ff28 	bl	80052cc <StartProg>
          TestState = ESP_TEST_BOOT;
 800647c:	4b31      	ldr	r3, [pc, #196]	@ (8006544 <ESP_WakeTest+0x204>)
 800647e:	2205      	movs	r2, #5
 8006480:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006482:	4b39      	ldr	r3, [pc, #228]	@ (8006568 <ESP_WakeTest+0x228>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b03      	cmp	r3, #3
 8006488:	d109      	bne.n	800649e <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800648a:	f00b fe33 	bl	80120f4 <HAL_GetTick>
 800648e:	0003      	movs	r3, r0
 8006490:	3332      	adds	r3, #50	@ 0x32
 8006492:	001a      	movs	r2, r3
 8006494:	4b30      	ldr	r3, [pc, #192]	@ (8006558 <ESP_WakeTest+0x218>)
 8006496:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8006498:	4b2a      	ldr	r3, [pc, #168]	@ (8006544 <ESP_WakeTest+0x204>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800649e:	1dbb      	adds	r3, r7, #6
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d048      	beq.n	8006538 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80064a6:	4b27      	ldr	r3, [pc, #156]	@ (8006544 <ESP_WakeTest+0x204>)
 80064a8:	2203      	movs	r2, #3
 80064aa:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80064ac:	e044      	b.n	8006538 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80064ae:	4b2f      	ldr	r3, [pc, #188]	@ (800656c <ESP_WakeTest+0x22c>)
 80064b0:	22fa      	movs	r2, #250	@ 0xfa
 80064b2:	0112      	lsls	r2, r2, #4
 80064b4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80064b6:	f009 ff21 	bl	80102fc <Calculate_LED_ON>
 80064ba:	0003      	movs	r3, r0
 80064bc:	001a      	movs	r2, r3
 80064be:	4b2b      	ldr	r3, [pc, #172]	@ (800656c <ESP_WakeTest+0x22c>)
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80064c2:	4b2a      	ldr	r3, [pc, #168]	@ (800656c <ESP_WakeTest+0x22c>)
 80064c4:	22fa      	movs	r2, #250	@ 0xfa
 80064c6:	0112      	lsls	r2, r2, #4
 80064c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80064ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006544 <ESP_WakeTest+0x204>)
 80064cc:	2204      	movs	r2, #4
 80064ce:	701a      	strb	r2, [r3, #0]

      break;
 80064d0:	e033      	b.n	800653a <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80064d2:	4b27      	ldr	r3, [pc, #156]	@ (8006570 <ESP_WakeTest+0x230>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80064d8:	4b1c      	ldr	r3, [pc, #112]	@ (800654c <ESP_WakeTest+0x20c>)
 80064da:	2200      	movs	r2, #0
 80064dc:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80064de:	4b1d      	ldr	r3, [pc, #116]	@ (8006554 <ESP_WakeTest+0x214>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	2101      	movs	r1, #1
 80064e4:	0018      	movs	r0, r3
 80064e6:	f00d f896 	bl	8013616 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80064ea:	2380      	movs	r3, #128	@ 0x80
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	4818      	ldr	r0, [pc, #96]	@ (8006550 <ESP_WakeTest+0x210>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	0019      	movs	r1, r3
 80064f4:	f00d f88f 	bl	8013616 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80064f8:	4b16      	ldr	r3, [pc, #88]	@ (8006554 <ESP_WakeTest+0x214>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	2102      	movs	r1, #2
 80064fe:	0018      	movs	r0, r3
 8006500:	f00d f889 	bl	8013616 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8006504:	f004 ffa8 	bl	800b458 <SetESPMeasurementDone>
      break;
 8006508:	e017      	b.n	800653a <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800650a:	4b0e      	ldr	r3, [pc, #56]	@ (8006544 <ESP_WakeTest+0x204>)
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
      break;
 8006510:	e013      	b.n	800653a <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8006512:	4b16      	ldr	r3, [pc, #88]	@ (800656c <ESP_WakeTest+0x22c>)
 8006514:	22fa      	movs	r2, #250	@ 0xfa
 8006516:	0112      	lsls	r2, r2, #4
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800651a:	4b14      	ldr	r3, [pc, #80]	@ (800656c <ESP_WakeTest+0x22c>)
 800651c:	22fa      	movs	r2, #250	@ 0xfa
 800651e:	0112      	lsls	r2, r2, #4
 8006520:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8006522:	f009 feeb 	bl	80102fc <Calculate_LED_ON>
 8006526:	0003      	movs	r3, r0
 8006528:	001a      	movs	r2, r3
 800652a:	4b10      	ldr	r3, [pc, #64]	@ (800656c <ESP_WakeTest+0x22c>)
 800652c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800652e:	e004      	b.n	800653a <ESP_WakeTest+0x1fa>
      break;
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	e002      	b.n	800653a <ESP_WakeTest+0x1fa>
      break;
 8006534:	46c0      	nop			@ (mov r8, r8)
 8006536:	e000      	b.n	800653a <ESP_WakeTest+0x1fa>
      break;
 8006538:	46c0      	nop			@ (mov r8, r8)
  }
}
 800653a:	46c0      	nop			@ (mov r8, r8)
 800653c:	46bd      	mov	sp, r7
 800653e:	b003      	add	sp, #12
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	2000068c 	.word	0x2000068c
 8006548:	0802af64 	.word	0x0802af64
 800654c:	200005b4 	.word	0x200005b4
 8006550:	50000800 	.word	0x50000800
 8006554:	50001c00 	.word	0x50001c00
 8006558:	20000680 	.word	0x20000680
 800655c:	200004b4 	.word	0x200004b4
 8006560:	2000068a 	.word	0x2000068a
 8006564:	20000689 	.word	0x20000689
 8006568:	2000002e 	.word	0x2000002e
 800656c:	40000400 	.word	0x40000400
 8006570:	20000001 	.word	0x20000001

08006574 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8006574:	b5b0      	push	{r4, r5, r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800657a:	1dfb      	adds	r3, r7, #7
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8006580:	4be2      	ldr	r3, [pc, #904]	@ (800690c <ESP_Upkeep+0x398>)
 8006582:	781a      	ldrb	r2, [r3, #0]
 8006584:	4be2      	ldr	r3, [pc, #904]	@ (8006910 <ESP_Upkeep+0x39c>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d024      	beq.n	80065d6 <ESP_Upkeep+0x62>
 800658c:	f00b f9e0 	bl	8011950 <GetVerboseLevel>
 8006590:	0003      	movs	r3, r0
 8006592:	2b03      	cmp	r3, #3
 8006594:	d11f      	bne.n	80065d6 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8006596:	4bdd      	ldr	r3, [pc, #884]	@ (800690c <ESP_Upkeep+0x398>)
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	4bdd      	ldr	r3, [pc, #884]	@ (8006910 <ESP_Upkeep+0x39c>)
 800659c:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800659e:	4bdc      	ldr	r3, [pc, #880]	@ (8006910 <ESP_Upkeep+0x39c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d103      	bne.n	80065ae <ESP_Upkeep+0x3a>
 80065a6:	4bdb      	ldr	r3, [pc, #876]	@ (8006914 <ESP_Upkeep+0x3a0>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b0e      	cmp	r3, #14
 80065ac:	d013      	beq.n	80065d6 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80065ae:	4bd8      	ldr	r3, [pc, #864]	@ (8006910 <ESP_Upkeep+0x39c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	001d      	movs	r5, r3
 80065b4:	4bd7      	ldr	r3, [pc, #860]	@ (8006914 <ESP_Upkeep+0x3a0>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	0018      	movs	r0, r3
 80065ba:	4bd7      	ldr	r3, [pc, #860]	@ (8006918 <ESP_Upkeep+0x3a4>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	001c      	movs	r4, r3
 80065c0:	4bd6      	ldr	r3, [pc, #856]	@ (800691c <ESP_Upkeep+0x3a8>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	4ad6      	ldr	r2, [pc, #856]	@ (8006920 <ESP_Upkeep+0x3ac>)
 80065c6:	49d7      	ldr	r1, [pc, #860]	@ (8006924 <ESP_Upkeep+0x3b0>)
 80065c8:	9302      	str	r3, [sp, #8]
 80065ca:	9401      	str	r4, [sp, #4]
 80065cc:	9000      	str	r0, [sp, #0]
 80065ce:	002b      	movs	r3, r5
 80065d0:	2003      	movs	r0, #3
 80065d2:	f00b f943 	bl	801185c <CreateLine>
    }
  }
  switch (EspState) {
 80065d6:	4bcd      	ldr	r3, [pc, #820]	@ (800690c <ESP_Upkeep+0x398>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2b0f      	cmp	r3, #15
 80065dc:	d901      	bls.n	80065e2 <ESP_Upkeep+0x6e>
 80065de:	f000 fc36 	bl	8006e4e <ESP_Upkeep+0x8da>
 80065e2:	009a      	lsls	r2, r3, #2
 80065e4:	4bd0      	ldr	r3, [pc, #832]	@ (8006928 <ESP_Upkeep+0x3b4>)
 80065e6:	18d3      	adds	r3, r2, r3
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80065ec:	4bc7      	ldr	r3, [pc, #796]	@ (800690c <ESP_Upkeep+0x398>)
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
      break;
 80065f2:	f000 fc45 	bl	8006e80 <ESP_Upkeep+0x90c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 80065f6:	f005 fa67 	bl	800bac8 <DisableConnectedDevices>
      SetESPIndicator();
 80065fa:	f00a f811 	bl	8010620 <SetESPIndicator>
      if(!EspTurnedOn){
 80065fe:	4bcb      	ldr	r3, [pc, #812]	@ (800692c <ESP_Upkeep+0x3b8>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2201      	movs	r2, #1
 8006604:	4053      	eors	r3, r2
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d036      	beq.n	800667a <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800660c:	2380      	movs	r3, #128	@ 0x80
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	48c7      	ldr	r0, [pc, #796]	@ (8006930 <ESP_Upkeep+0x3bc>)
 8006612:	2200      	movs	r2, #0
 8006614:	0019      	movs	r1, r3
 8006616:	f00c fffe 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800661a:	2001      	movs	r0, #1
 800661c:	f00b fd74 	bl	8012108 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006620:	2380      	movs	r3, #128	@ 0x80
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	48c2      	ldr	r0, [pc, #776]	@ (8006930 <ESP_Upkeep+0x3bc>)
 8006626:	2201      	movs	r2, #1
 8006628:	0019      	movs	r1, r3
 800662a:	f00c fff4 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800662e:	2001      	movs	r0, #1
 8006630:	f00b fd6a 	bl	8012108 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006634:	4bbf      	ldr	r3, [pc, #764]	@ (8006934 <ESP_Upkeep+0x3c0>)
 8006636:	2200      	movs	r2, #0
 8006638:	2101      	movs	r1, #1
 800663a:	0018      	movs	r0, r3
 800663c:	f00c ffeb 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006640:	2001      	movs	r0, #1
 8006642:	f00b fd61 	bl	8012108 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006646:	4bbb      	ldr	r3, [pc, #748]	@ (8006934 <ESP_Upkeep+0x3c0>)
 8006648:	2201      	movs	r2, #1
 800664a:	2102      	movs	r1, #2
 800664c:	0018      	movs	r0, r3
 800664e:	f00c ffe2 	bl	8013616 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006652:	2001      	movs	r0, #1
 8006654:	f00b fd58 	bl	8012108 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006658:	4bb6      	ldr	r3, [pc, #728]	@ (8006934 <ESP_Upkeep+0x3c0>)
 800665a:	2201      	movs	r2, #1
 800665c:	2101      	movs	r1, #1
 800665e:	0018      	movs	r0, r3
 8006660:	f00c ffd9 	bl	8013616 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006664:	f00b fd46 	bl	80120f4 <HAL_GetTick>
 8006668:	0003      	movs	r3, r0
 800666a:	22af      	movs	r2, #175	@ 0xaf
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	189a      	adds	r2, r3, r2
 8006670:	4bb1      	ldr	r3, [pc, #708]	@ (8006938 <ESP_Upkeep+0x3c4>)
 8006672:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006674:	4bad      	ldr	r3, [pc, #692]	@ (800692c <ESP_Upkeep+0x3b8>)
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800667a:	2380      	movs	r3, #128	@ 0x80
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	4baf      	ldr	r3, [pc, #700]	@ (800693c <ESP_Upkeep+0x3c8>)
 8006680:	0011      	movs	r1, r2
 8006682:	0018      	movs	r0, r3
 8006684:	f7fe f8f2 	bl	800486c <ESP_Receive>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d101      	bne.n	8006690 <ESP_Upkeep+0x11c>
 800668c:	f000 fbeb 	bl	8006e66 <ESP_Upkeep+0x8f2>
        EspState = ESP_STATE_WAIT_AWAKE;
 8006690:	4b9e      	ldr	r3, [pc, #632]	@ (800690c <ESP_Upkeep+0x398>)
 8006692:	220f      	movs	r2, #15
 8006694:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8006696:	f00b fd2d 	bl	80120f4 <HAL_GetTick>
 800669a:	0003      	movs	r3, r0
 800669c:	22fa      	movs	r2, #250	@ 0xfa
 800669e:	00d2      	lsls	r2, r2, #3
 80066a0:	189a      	adds	r2, r3, r2
 80066a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006940 <ESP_Upkeep+0x3cc>)
 80066a4:	601a      	str	r2, [r3, #0]
      }
      break;
 80066a6:	f000 fbde 	bl	8006e66 <ESP_Upkeep+0x8f2>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80066aa:	2001      	movs	r0, #1
 80066ac:	f7ff fb26 	bl	8005cfc <DMA_ProcessBuffer>
 80066b0:	0003      	movs	r3, r0
 80066b2:	001a      	movs	r2, r3
 80066b4:	4ba3      	ldr	r3, [pc, #652]	@ (8006944 <ESP_Upkeep+0x3d0>)
 80066b6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80066b8:	4ba2      	ldr	r3, [pc, #648]	@ (8006944 <ESP_Upkeep+0x3d0>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	1dbc      	adds	r4, r7, #6
 80066be:	2101      	movs	r1, #1
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7ff fc1b 	bl	8005efc <ATCompare>
 80066c6:	0003      	movs	r3, r0
 80066c8:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80066ca:	1dbb      	adds	r3, r7, #6
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d108      	bne.n	80066e4 <ESP_Upkeep+0x170>
 80066d2:	4b9b      	ldr	r3, [pc, #620]	@ (8006940 <ESP_Upkeep+0x3cc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f00b f86a 	bl	80117b0 <TimestampIsReached>
 80066dc:	1e03      	subs	r3, r0, #0
 80066de:	d101      	bne.n	80066e4 <ESP_Upkeep+0x170>
 80066e0:	f000 fbc3 	bl	8006e6a <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_MODE_SELECT;
 80066e4:	4b89      	ldr	r3, [pc, #548]	@ (800690c <ESP_Upkeep+0x398>)
 80066e6:	220b      	movs	r2, #11
 80066e8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80066ea:	f000 fbbe 	bl	8006e6a <ESP_Upkeep+0x8f6>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80066ee:	4b96      	ldr	r3, [pc, #600]	@ (8006948 <ESP_Upkeep+0x3d4>)
 80066f0:	2209      	movs	r2, #9
 80066f2:	2114      	movs	r1, #20
 80066f4:	0018      	movs	r0, r3
 80066f6:	f01d fa0f 	bl	8023b18 <memset>
      if(!InitIsDone || WifiReset){
 80066fa:	4b94      	ldr	r3, [pc, #592]	@ (800694c <ESP_Upkeep+0x3d8>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2201      	movs	r2, #1
 8006700:	4053      	eors	r3, r2
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <ESP_Upkeep+0x19c>
 8006708:	4b91      	ldr	r3, [pc, #580]	@ (8006950 <ESP_Upkeep+0x3dc>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8006710:	4b8d      	ldr	r3, [pc, #564]	@ (8006948 <ESP_Upkeep+0x3d4>)
 8006712:	4a90      	ldr	r2, [pc, #576]	@ (8006954 <ESP_Upkeep+0x3e0>)
 8006714:	6811      	ldr	r1, [r2, #0]
 8006716:	6019      	str	r1, [r3, #0]
 8006718:	8891      	ldrh	r1, [r2, #4]
 800671a:	8099      	strh	r1, [r3, #4]
 800671c:	7992      	ldrb	r2, [r2, #6]
 800671e:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8006720:	4b7a      	ldr	r3, [pc, #488]	@ (800690c <ESP_Upkeep+0x398>)
 8006722:	2204      	movs	r2, #4
 8006724:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006726:	4b8c      	ldr	r3, [pc, #560]	@ (8006958 <ESP_Upkeep+0x3e4>)
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800672c:	4b7a      	ldr	r3, [pc, #488]	@ (8006918 <ESP_Upkeep+0x3a4>)
 800672e:	2200      	movs	r2, #0
 8006730:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006732:	4b89      	ldr	r3, [pc, #548]	@ (8006958 <ESP_Upkeep+0x3e4>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	001a      	movs	r2, r3
 8006738:	4b83      	ldr	r3, [pc, #524]	@ (8006948 <ESP_Upkeep+0x3d4>)
 800673a:	5c9a      	ldrb	r2, [r3, r2]
 800673c:	4b75      	ldr	r3, [pc, #468]	@ (8006914 <ESP_Upkeep+0x3a0>)
 800673e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006740:	4b76      	ldr	r3, [pc, #472]	@ (800691c <ESP_Upkeep+0x3a8>)
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8006746:	4b81      	ldr	r3, [pc, #516]	@ (800694c <ESP_Upkeep+0x3d8>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01f      	beq.n	800678e <ESP_Upkeep+0x21a>
 800674e:	4b83      	ldr	r3, [pc, #524]	@ (800695c <ESP_Upkeep+0x3e8>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2201      	movs	r2, #1
 8006754:	4053      	eors	r3, r2
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d018      	beq.n	800678e <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800675c:	4b7a      	ldr	r3, [pc, #488]	@ (8006948 <ESP_Upkeep+0x3d4>)
 800675e:	4a80      	ldr	r2, [pc, #512]	@ (8006960 <ESP_Upkeep+0x3ec>)
 8006760:	6811      	ldr	r1, [r2, #0]
 8006762:	6019      	str	r1, [r3, #0]
 8006764:	8892      	ldrh	r2, [r2, #4]
 8006766:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8006768:	4b68      	ldr	r3, [pc, #416]	@ (800690c <ESP_Upkeep+0x398>)
 800676a:	2204      	movs	r2, #4
 800676c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800676e:	4b7a      	ldr	r3, [pc, #488]	@ (8006958 <ESP_Upkeep+0x3e4>)
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8006774:	4b68      	ldr	r3, [pc, #416]	@ (8006918 <ESP_Upkeep+0x3a4>)
 8006776:	2201      	movs	r2, #1
 8006778:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800677a:	4b77      	ldr	r3, [pc, #476]	@ (8006958 <ESP_Upkeep+0x3e4>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	001a      	movs	r2, r3
 8006780:	4b71      	ldr	r3, [pc, #452]	@ (8006948 <ESP_Upkeep+0x3d4>)
 8006782:	5c9a      	ldrb	r2, [r3, r2]
 8006784:	4b63      	ldr	r3, [pc, #396]	@ (8006914 <ESP_Upkeep+0x3a0>)
 8006786:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006788:	4b64      	ldr	r3, [pc, #400]	@ (800691c <ESP_Upkeep+0x3a8>)
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800678e:	4b6f      	ldr	r3, [pc, #444]	@ (800694c <ESP_Upkeep+0x3d8>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d021      	beq.n	80067da <ESP_Upkeep+0x266>
 8006796:	4b71      	ldr	r3, [pc, #452]	@ (800695c <ESP_Upkeep+0x3e8>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01d      	beq.n	80067da <ESP_Upkeep+0x266>
 800679e:	4b71      	ldr	r3, [pc, #452]	@ (8006964 <ESP_Upkeep+0x3f0>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2201      	movs	r2, #1
 80067a4:	4053      	eors	r3, r2
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d016      	beq.n	80067da <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80067ac:	4b6e      	ldr	r3, [pc, #440]	@ (8006968 <ESP_Upkeep+0x3f4>)
 80067ae:	881a      	ldrh	r2, [r3, #0]
 80067b0:	4b65      	ldr	r3, [pc, #404]	@ (8006948 <ESP_Upkeep+0x3d4>)
 80067b2:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80067b4:	4b55      	ldr	r3, [pc, #340]	@ (800690c <ESP_Upkeep+0x398>)
 80067b6:	2204      	movs	r2, #4
 80067b8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80067ba:	4b67      	ldr	r3, [pc, #412]	@ (8006958 <ESP_Upkeep+0x3e4>)
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80067c0:	4b55      	ldr	r3, [pc, #340]	@ (8006918 <ESP_Upkeep+0x3a4>)
 80067c2:	2204      	movs	r2, #4
 80067c4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80067c6:	4b64      	ldr	r3, [pc, #400]	@ (8006958 <ESP_Upkeep+0x3e4>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	001a      	movs	r2, r3
 80067cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006948 <ESP_Upkeep+0x3d4>)
 80067ce:	5c9a      	ldrb	r2, [r3, r2]
 80067d0:	4b50      	ldr	r3, [pc, #320]	@ (8006914 <ESP_Upkeep+0x3a0>)
 80067d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80067d4:	4b51      	ldr	r3, [pc, #324]	@ (800691c <ESP_Upkeep+0x3a8>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80067da:	4b5c      	ldr	r3, [pc, #368]	@ (800694c <ESP_Upkeep+0x3d8>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d02c      	beq.n	800683c <ESP_Upkeep+0x2c8>
 80067e2:	4b5e      	ldr	r3, [pc, #376]	@ (800695c <ESP_Upkeep+0x3e8>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d028      	beq.n	800683c <ESP_Upkeep+0x2c8>
 80067ea:	4b5e      	ldr	r3, [pc, #376]	@ (8006964 <ESP_Upkeep+0x3f0>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d024      	beq.n	800683c <ESP_Upkeep+0x2c8>
 80067f2:	4b5e      	ldr	r3, [pc, #376]	@ (800696c <ESP_Upkeep+0x3f8>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	4053      	eors	r3, r2
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01d      	beq.n	800683c <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8006800:	4b51      	ldr	r3, [pc, #324]	@ (8006948 <ESP_Upkeep+0x3d4>)
 8006802:	4a5b      	ldr	r2, [pc, #364]	@ (8006970 <ESP_Upkeep+0x3fc>)
 8006804:	8811      	ldrh	r1, [r2, #0]
 8006806:	8019      	strh	r1, [r3, #0]
 8006808:	7892      	ldrb	r2, [r2, #2]
 800680a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800680c:	4b3f      	ldr	r3, [pc, #252]	@ (800690c <ESP_Upkeep+0x398>)
 800680e:	2204      	movs	r2, #4
 8006810:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006812:	4b51      	ldr	r3, [pc, #324]	@ (8006958 <ESP_Upkeep+0x3e4>)
 8006814:	2200      	movs	r2, #0
 8006816:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8006818:	4b3f      	ldr	r3, [pc, #252]	@ (8006918 <ESP_Upkeep+0x3a4>)
 800681a:	2202      	movs	r2, #2
 800681c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800681e:	f00b fc69 	bl	80120f4 <HAL_GetTick>
 8006822:	0002      	movs	r2, r0
 8006824:	4b53      	ldr	r3, [pc, #332]	@ (8006974 <ESP_Upkeep+0x400>)
 8006826:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006828:	4b4b      	ldr	r3, [pc, #300]	@ (8006958 <ESP_Upkeep+0x3e4>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	001a      	movs	r2, r3
 800682e:	4b46      	ldr	r3, [pc, #280]	@ (8006948 <ESP_Upkeep+0x3d4>)
 8006830:	5c9a      	ldrb	r2, [r3, r2]
 8006832:	4b38      	ldr	r3, [pc, #224]	@ (8006914 <ESP_Upkeep+0x3a0>)
 8006834:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006836:	4b39      	ldr	r3, [pc, #228]	@ (800691c <ESP_Upkeep+0x3a8>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 800683c:	4b43      	ldr	r3, [pc, #268]	@ (800694c <ESP_Upkeep+0x3d8>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d027      	beq.n	8006894 <ESP_Upkeep+0x320>
 8006844:	4b45      	ldr	r3, [pc, #276]	@ (800695c <ESP_Upkeep+0x3e8>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d023      	beq.n	8006894 <ESP_Upkeep+0x320>
 800684c:	4b45      	ldr	r3, [pc, #276]	@ (8006964 <ESP_Upkeep+0x3f0>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01f      	beq.n	8006894 <ESP_Upkeep+0x320>
 8006854:	4b45      	ldr	r3, [pc, #276]	@ (800696c <ESP_Upkeep+0x3f8>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01b      	beq.n	8006894 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800685c:	4b46      	ldr	r3, [pc, #280]	@ (8006978 <ESP_Upkeep+0x404>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b39      	ldr	r3, [pc, #228]	@ (8006948 <ESP_Upkeep+0x3d4>)
 8006862:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8006864:	4b29      	ldr	r3, [pc, #164]	@ (800690c <ESP_Upkeep+0x398>)
 8006866:	2204      	movs	r2, #4
 8006868:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800686a:	4b3b      	ldr	r3, [pc, #236]	@ (8006958 <ESP_Upkeep+0x3e4>)
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8006870:	4b29      	ldr	r3, [pc, #164]	@ (8006918 <ESP_Upkeep+0x3a4>)
 8006872:	2205      	movs	r2, #5
 8006874:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8006876:	f00b fc3d 	bl	80120f4 <HAL_GetTick>
 800687a:	0002      	movs	r2, r0
 800687c:	4b3d      	ldr	r3, [pc, #244]	@ (8006974 <ESP_Upkeep+0x400>)
 800687e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006880:	4b35      	ldr	r3, [pc, #212]	@ (8006958 <ESP_Upkeep+0x3e4>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	001a      	movs	r2, r3
 8006886:	4b30      	ldr	r3, [pc, #192]	@ (8006948 <ESP_Upkeep+0x3d4>)
 8006888:	5c9a      	ldrb	r2, [r3, r2]
 800688a:	4b22      	ldr	r3, [pc, #136]	@ (8006914 <ESP_Upkeep+0x3a0>)
 800688c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800688e:	4b23      	ldr	r3, [pc, #140]	@ (800691c <ESP_Upkeep+0x3a8>)
 8006890:	2200      	movs	r2, #0
 8006892:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8006894:	4b39      	ldr	r3, [pc, #228]	@ (800697c <ESP_Upkeep+0x408>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d100      	bne.n	800689e <ESP_Upkeep+0x32a>
 800689c:	e2e7      	b.n	8006e6e <ESP_Upkeep+0x8fa>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800689e:	4b2a      	ldr	r3, [pc, #168]	@ (8006948 <ESP_Upkeep+0x3d4>)
 80068a0:	4a37      	ldr	r2, [pc, #220]	@ (8006980 <ESP_Upkeep+0x40c>)
 80068a2:	6811      	ldr	r1, [r2, #0]
 80068a4:	6019      	str	r1, [r3, #0]
 80068a6:	7912      	ldrb	r2, [r2, #4]
 80068a8:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80068aa:	4a36      	ldr	r2, [pc, #216]	@ (8006984 <ESP_Upkeep+0x410>)
 80068ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006924 <ESP_Upkeep+0x3b0>)
 80068ae:	0019      	movs	r1, r3
 80068b0:	2003      	movs	r0, #3
 80068b2:	f00a ffd3 	bl	801185c <CreateLine>
        DisableConnectedDevices();
 80068b6:	f005 f907 	bl	800bac8 <DisableConnectedDevices>
        usblog = false;
 80068ba:	4b33      	ldr	r3, [pc, #204]	@ (8006988 <ESP_Upkeep+0x414>)
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80068c0:	4b12      	ldr	r3, [pc, #72]	@ (800690c <ESP_Upkeep+0x398>)
 80068c2:	2204      	movs	r2, #4
 80068c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80068c6:	4b24      	ldr	r3, [pc, #144]	@ (8006958 <ESP_Upkeep+0x3e4>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80068cc:	4b12      	ldr	r3, [pc, #72]	@ (8006918 <ESP_Upkeep+0x3a4>)
 80068ce:	2203      	movs	r2, #3
 80068d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80068d2:	4b21      	ldr	r3, [pc, #132]	@ (8006958 <ESP_Upkeep+0x3e4>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	001a      	movs	r2, r3
 80068d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <ESP_Upkeep+0x3d4>)
 80068da:	5c9a      	ldrb	r2, [r3, r2]
 80068dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006914 <ESP_Upkeep+0x3a0>)
 80068de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80068e0:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <ESP_Upkeep+0x3a8>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80068e6:	e2c2      	b.n	8006e6e <ESP_Upkeep+0x8fa>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80068e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006914 <ESP_Upkeep+0x3a0>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	1dfc      	adds	r4, r7, #7
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7ff fb46 	bl	8005f80 <AT_Send>
 80068f4:	0003      	movs	r3, r0
 80068f6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80068f8:	1dfb      	adds	r3, r7, #7
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d100      	bne.n	8006902 <ESP_Upkeep+0x38e>
 8006900:	e2b7      	b.n	8006e72 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8006902:	4b02      	ldr	r3, [pc, #8]	@ (800690c <ESP_Upkeep+0x398>)
 8006904:	2203      	movs	r2, #3
 8006906:	701a      	strb	r2, [r3, #0]
        }
    break;
 8006908:	e2b3      	b.n	8006e72 <ESP_Upkeep+0x8fe>
 800690a:	46c0      	nop			@ (mov r8, r8)
 800690c:	2000002c 	.word	0x2000002c
 8006910:	20000003 	.word	0x20000003
 8006914:	2000068a 	.word	0x2000068a
 8006918:	2000068b 	.word	0x2000068b
 800691c:	20000689 	.word	0x20000689
 8006920:	08028808 	.word	0x08028808
 8006924:	08027bfc 	.word	0x08027bfc
 8006928:	0802af7c 	.word	0x0802af7c
 800692c:	200005b4 	.word	0x200005b4
 8006930:	50000800 	.word	0x50000800
 8006934:	50001c00 	.word	0x50001c00
 8006938:	20000680 	.word	0x20000680
 800693c:	200004b4 	.word	0x200004b4
 8006940:	200007e4 	.word	0x200007e4
 8006944:	2000002f 	.word	0x2000002f
 8006948:	20000670 	.word	0x20000670
 800694c:	200005b5 	.word	0x200005b5
 8006950:	200005b6 	.word	0x200005b6
 8006954:	20000004 	.word	0x20000004
 8006958:	2000067a 	.word	0x2000067a
 800695c:	200005b8 	.word	0x200005b8
 8006960:	20000014 	.word	0x20000014
 8006964:	200005b9 	.word	0x200005b9
 8006968:	20000010 	.word	0x20000010
 800696c:	20000002 	.word	0x20000002
 8006970:	2000000c 	.word	0x2000000c
 8006974:	200005cc 	.word	0x200005cc
 8006978:	20000024 	.word	0x20000024
 800697c:	200005b7 	.word	0x200005b7
 8006980:	2000001c 	.word	0x2000001c
 8006984:	08028834 	.word	0x08028834
 8006988:	20000207 	.word	0x20000207

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800698c:	4bcb      	ldr	r3, [pc, #812]	@ (8006cbc <ESP_Upkeep+0x748>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <ESP_Upkeep+0x430>
 8006994:	4bca      	ldr	r3, [pc, #808]	@ (8006cc0 <ESP_Upkeep+0x74c>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d003      	beq.n	80069a4 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 800699c:	4bc9      	ldr	r3, [pc, #804]	@ (8006cc4 <ESP_Upkeep+0x750>)
 800699e:	220b      	movs	r2, #11
 80069a0:	701a      	strb	r2, [r3, #0]
        break;
 80069a2:	e26d      	b.n	8006e80 <ESP_Upkeep+0x90c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80069a4:	4bc8      	ldr	r3, [pc, #800]	@ (8006cc8 <ESP_Upkeep+0x754>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f00a ff01 	bl	80117b0 <TimestampIsReached>
 80069ae:	1e03      	subs	r3, r0, #0
 80069b0:	d100      	bne.n	80069b4 <ESP_Upkeep+0x440>
 80069b2:	e260      	b.n	8006e76 <ESP_Upkeep+0x902>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80069b4:	4bc5      	ldr	r3, [pc, #788]	@ (8006ccc <ESP_Upkeep+0x758>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	0018      	movs	r0, r3
 80069ba:	f7ff f99f 	bl	8005cfc <DMA_ProcessBuffer>
 80069be:	0003      	movs	r3, r0
 80069c0:	001a      	movs	r2, r3
 80069c2:	4bc3      	ldr	r3, [pc, #780]	@ (8006cd0 <ESP_Upkeep+0x75c>)
 80069c4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80069c6:	4bc2      	ldr	r3, [pc, #776]	@ (8006cd0 <ESP_Upkeep+0x75c>)
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	4bc0      	ldr	r3, [pc, #768]	@ (8006ccc <ESP_Upkeep+0x758>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	1d7c      	adds	r4, r7, #5
 80069d0:	0019      	movs	r1, r3
 80069d2:	0010      	movs	r0, r2
 80069d4:	f7ff fa92 	bl	8005efc <ATCompare>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80069dc:	4bbc      	ldr	r3, [pc, #752]	@ (8006cd0 <ESP_Upkeep+0x75c>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d138      	bne.n	8006a56 <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 80069e4:	4bbb      	ldr	r3, [pc, #748]	@ (8006cd4 <ESP_Upkeep+0x760>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b0f      	cmp	r3, #15
 80069ea:	d108      	bne.n	80069fe <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 80069ec:	4bb9      	ldr	r3, [pc, #740]	@ (8006cd4 <ESP_Upkeep+0x760>)
 80069ee:	220e      	movs	r2, #14
 80069f0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80069f2:	4bb6      	ldr	r3, [pc, #728]	@ (8006ccc <ESP_Upkeep+0x758>)
 80069f4:	2202      	movs	r2, #2
 80069f6:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80069f8:	4bb7      	ldr	r3, [pc, #732]	@ (8006cd8 <ESP_Upkeep+0x764>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80069fe:	4bb1      	ldr	r3, [pc, #708]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006a00:	2204      	movs	r2, #4
 8006a02:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8006a04:	4bb5      	ldr	r3, [pc, #724]	@ (8006cdc <ESP_Upkeep+0x768>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	4bb3      	ldr	r3, [pc, #716]	@ (8006cdc <ESP_Upkeep+0x768>)
 8006a0e:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8006a10:	4bb2      	ldr	r3, [pc, #712]	@ (8006cdc <ESP_Upkeep+0x768>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d91e      	bls.n	8006a56 <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8006a18:	f00b fb6c 	bl	80120f4 <HAL_GetTick>
 8006a1c:	0003      	movs	r3, r0
 8006a1e:	4ab0      	ldr	r2, [pc, #704]	@ (8006ce0 <ESP_Upkeep+0x76c>)
 8006a20:	189a      	adds	r2, r3, r2
 8006a22:	4ba9      	ldr	r3, [pc, #676]	@ (8006cc8 <ESP_Upkeep+0x754>)
 8006a24:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8006a26:	4baf      	ldr	r3, [pc, #700]	@ (8006ce4 <ESP_Upkeep+0x770>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8006a2c:	f7ff fa58 	bl	8005ee0 <clearDMABuffer>
            stop = HAL_GetTick();
 8006a30:	f00b fb60 	bl	80120f4 <HAL_GetTick>
 8006a34:	0002      	movs	r2, r0
 8006a36:	4bac      	ldr	r3, [pc, #688]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006a38:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8006a3a:	4bab      	ldr	r3, [pc, #684]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4bab      	ldr	r3, [pc, #684]	@ (8006cec <ESP_Upkeep+0x778>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	4aaa      	ldr	r2, [pc, #680]	@ (8006cf0 <ESP_Upkeep+0x77c>)
 8006a46:	49ab      	ldr	r1, [pc, #684]	@ (8006cf4 <ESP_Upkeep+0x780>)
 8006a48:	2001      	movs	r0, #1
 8006a4a:	f00a ff07 	bl	801185c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006a50:	220d      	movs	r2, #13
 8006a52:	701a      	strb	r2, [r3, #0]
            break;
 8006a54:	e214      	b.n	8006e80 <ESP_Upkeep+0x90c>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006a56:	4b9e      	ldr	r3, [pc, #632]	@ (8006cd0 <ESP_Upkeep+0x75c>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d106      	bne.n	8006a6c <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8006a5e:	f00b fb49 	bl	80120f4 <HAL_GetTick>
 8006a62:	0003      	movs	r3, r0
 8006a64:	330a      	adds	r3, #10
 8006a66:	001a      	movs	r2, r3
 8006a68:	4b97      	ldr	r3, [pc, #604]	@ (8006cc8 <ESP_Upkeep+0x754>)
 8006a6a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8006a6c:	4b98      	ldr	r3, [pc, #608]	@ (8006cd0 <ESP_Upkeep+0x75c>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b0a      	cmp	r3, #10
 8006a72:	d106      	bne.n	8006a82 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8006a74:	f00b fb3e 	bl	80120f4 <HAL_GetTick>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	330a      	adds	r3, #10
 8006a7c:	001a      	movs	r2, r3
 8006a7e:	4b92      	ldr	r3, [pc, #584]	@ (8006cc8 <ESP_Upkeep+0x754>)
 8006a80:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8006a82:	4b93      	ldr	r3, [pc, #588]	@ (8006cd0 <ESP_Upkeep+0x75c>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b06      	cmp	r3, #6
 8006a88:	d14b      	bne.n	8006b22 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8006a8a:	4b9b      	ldr	r3, [pc, #620]	@ (8006cf8 <ESP_Upkeep+0x784>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	4b99      	ldr	r3, [pc, #612]	@ (8006cf8 <ESP_Upkeep+0x784>)
 8006a94:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8006a96:	4a99      	ldr	r2, [pc, #612]	@ (8006cfc <ESP_Upkeep+0x788>)
 8006a98:	4b96      	ldr	r3, [pc, #600]	@ (8006cf4 <ESP_Upkeep+0x780>)
 8006a9a:	0019      	movs	r1, r3
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f00a fedd 	bl	801185c <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8006aa2:	4b95      	ldr	r3, [pc, #596]	@ (8006cf8 <ESP_Upkeep+0x784>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d924      	bls.n	8006af4 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8006aaa:	f00b fb23 	bl	80120f4 <HAL_GetTick>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	4a93      	ldr	r2, [pc, #588]	@ (8006d00 <ESP_Upkeep+0x78c>)
 8006ab2:	189a      	adds	r2, r3, r2
 8006ab4:	4b84      	ldr	r3, [pc, #528]	@ (8006cc8 <ESP_Upkeep+0x754>)
 8006ab6:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8006ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ce4 <ESP_Upkeep+0x770>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8006abe:	f7ff fa0f 	bl	8005ee0 <clearDMABuffer>
            stop = HAL_GetTick();
 8006ac2:	f00b fb17 	bl	80120f4 <HAL_GetTick>
 8006ac6:	0002      	movs	r2, r0
 8006ac8:	4b87      	ldr	r3, [pc, #540]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006aca:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8006acc:	4b86      	ldr	r3, [pc, #536]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b86      	ldr	r3, [pc, #536]	@ (8006cec <ESP_Upkeep+0x778>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	4a8b      	ldr	r2, [pc, #556]	@ (8006d04 <ESP_Upkeep+0x790>)
 8006ad8:	4986      	ldr	r1, [pc, #536]	@ (8006cf4 <ESP_Upkeep+0x780>)
 8006ada:	2001      	movs	r0, #1
 8006adc:	f00a febe 	bl	801185c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006ae0:	4b78      	ldr	r3, [pc, #480]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006ae2:	220d      	movs	r2, #13
 8006ae4:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8006ae6:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006ae8:	2214      	movs	r2, #20
 8006aea:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8006aec:	4b77      	ldr	r3, [pc, #476]	@ (8006ccc <ESP_Upkeep+0x758>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	701a      	strb	r2, [r3, #0]
            break;
 8006af2:	e1c5      	b.n	8006e80 <ESP_Upkeep+0x90c>
          }
          if(ATCommand != AT_SENDDATA){
 8006af4:	4b77      	ldr	r3, [pc, #476]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b0f      	cmp	r3, #15
 8006afa:	d003      	beq.n	8006b04 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8006afc:	4b71      	ldr	r3, [pc, #452]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006afe:	2204      	movs	r2, #4
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e00e      	b.n	8006b22 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8006b04:	4b73      	ldr	r3, [pc, #460]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b06:	220e      	movs	r2, #14
 8006b08:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8006b0a:	4b73      	ldr	r3, [pc, #460]	@ (8006cd8 <ESP_Upkeep+0x764>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	4b71      	ldr	r3, [pc, #452]	@ (8006cd8 <ESP_Upkeep+0x764>)
 8006b14:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8006b16:	4b6d      	ldr	r3, [pc, #436]	@ (8006ccc <ESP_Upkeep+0x758>)
 8006b18:	2202      	movs	r2, #2
 8006b1a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8006b1c:	4b69      	ldr	r3, [pc, #420]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006b1e:	2204      	movs	r2, #4
 8006b20:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8006b22:	1d7b      	adds	r3, r7, #5
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d100      	bne.n	8006b2c <ESP_Upkeep+0x5b8>
 8006b2a:	e1a4      	b.n	8006e76 <ESP_Upkeep+0x902>
          EspState = ESP_STATE_NEXT_AT;
 8006b2c:	4b65      	ldr	r3, [pc, #404]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006b2e:	2205      	movs	r2, #5
 8006b30:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006b32:	e1a0      	b.n	8006e76 <ESP_Upkeep+0x902>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8006b34:	4b68      	ldr	r3, [pc, #416]	@ (8006cd8 <ESP_Upkeep+0x764>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	4b66      	ldr	r3, [pc, #408]	@ (8006cd8 <ESP_Upkeep+0x764>)
 8006b3e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8006b40:	4b65      	ldr	r3, [pc, #404]	@ (8006cd8 <ESP_Upkeep+0x764>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	001a      	movs	r2, r3
 8006b46:	4b70      	ldr	r3, [pc, #448]	@ (8006d08 <ESP_Upkeep+0x794>)
 8006b48:	5c9a      	ldrb	r2, [r3, r2]
 8006b4a:	4b62      	ldr	r3, [pc, #392]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b4c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8006b4e:	4b61      	ldr	r3, [pc, #388]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d102      	bne.n	8006b5c <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8006b56:	4b5d      	ldr	r3, [pc, #372]	@ (8006ccc <ESP_Upkeep+0x758>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8006b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b0e      	cmp	r3, #14
 8006b62:	d102      	bne.n	8006b6a <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8006b64:	4b59      	ldr	r3, [pc, #356]	@ (8006ccc <ESP_Upkeep+0x758>)
 8006b66:	2202      	movs	r2, #2
 8006b68:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8006b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b0e      	cmp	r3, #14
 8006b70:	d006      	beq.n	8006b80 <ESP_Upkeep+0x60c>
 8006b72:	4b58      	ldr	r3, [pc, #352]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d002      	beq.n	8006b80 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006b7a:	4b54      	ldr	r3, [pc, #336]	@ (8006ccc <ESP_Upkeep+0x758>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8006b80:	4b54      	ldr	r3, [pc, #336]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b11      	cmp	r3, #17
 8006b86:	d102      	bne.n	8006b8e <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8006b88:	4b50      	ldr	r3, [pc, #320]	@ (8006ccc <ESP_Upkeep+0x758>)
 8006b8a:	2205      	movs	r2, #5
 8006b8c:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8006b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006b90:	2204      	movs	r2, #4
 8006b92:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8006b94:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd4 <ESP_Upkeep+0x760>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b14      	cmp	r3, #20
 8006b9a:	d000      	beq.n	8006b9e <ESP_Upkeep+0x62a>
 8006b9c:	e16d      	b.n	8006e7a <ESP_Upkeep+0x906>
        if(Mode == AT_MODE_SEND){
 8006b9e:	4b48      	ldr	r3, [pc, #288]	@ (8006cc0 <ESP_Upkeep+0x74c>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d124      	bne.n	8006bf0 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8006ba6:	f00b faa5 	bl	80120f4 <HAL_GetTick>
 8006baa:	0003      	movs	r3, r0
 8006bac:	4a4c      	ldr	r2, [pc, #304]	@ (8006ce0 <ESP_Upkeep+0x76c>)
 8006bae:	189a      	adds	r2, r3, r2
 8006bb0:	4b45      	ldr	r3, [pc, #276]	@ (8006cc8 <ESP_Upkeep+0x754>)
 8006bb2:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8006bb4:	f7ff f994 	bl	8005ee0 <clearDMABuffer>
          stop = HAL_GetTick();
 8006bb8:	f00b fa9c 	bl	80120f4 <HAL_GetTick>
 8006bbc:	0002      	movs	r2, r0
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006bc0:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8006bc2:	4b49      	ldr	r3, [pc, #292]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b49      	ldr	r3, [pc, #292]	@ (8006cec <ESP_Upkeep+0x778>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	4a4f      	ldr	r2, [pc, #316]	@ (8006d0c <ESP_Upkeep+0x798>)
 8006bce:	4950      	ldr	r1, [pc, #320]	@ (8006d10 <ESP_Upkeep+0x79c>)
 8006bd0:	2002      	movs	r0, #2
 8006bd2:	f00a fe43 	bl	801185c <CreateLine>
          ResetdBAmax();
 8006bd6:	f004 fffb 	bl	800bbd0 <ResetdBAmax>
          resetMaxMeasurementValues();
 8006bda:	f7fd fd9f 	bl	800471c <resetMaxMeasurementValues>
          showTime();
 8006bde:	f001 f96f 	bl	8007ec0 <showTime>
          ESPTransmitDone = true;
 8006be2:	4b40      	ldr	r3, [pc, #256]	@ (8006ce4 <ESP_Upkeep+0x770>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8006be8:	4b36      	ldr	r3, [pc, #216]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006bea:	220d      	movs	r2, #13
 8006bec:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8006bee:	e144      	b.n	8006e7a <ESP_Upkeep+0x906>
        else if (Mode == AT_MODE_GETTIME) {
 8006bf0:	4b33      	ldr	r3, [pc, #204]	@ (8006cc0 <ESP_Upkeep+0x74c>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b05      	cmp	r3, #5
 8006bf6:	d12f      	bne.n	8006c58 <ESP_Upkeep+0x6e4>
            setTime = false;
 8006bf8:	4b46      	ldr	r3, [pc, #280]	@ (8006d14 <ESP_Upkeep+0x7a0>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8006bfe:	f001 f9b1 	bl	8007f64 <calculateNextNTPTime>
 8006c02:	0002      	movs	r2, r0
 8006c04:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <ESP_Upkeep+0x7a4>)
 8006c06:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8006c08:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <ESP_Upkeep+0x7a4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a43      	ldr	r2, [pc, #268]	@ (8006d1c <ESP_Upkeep+0x7a8>)
 8006c0e:	189a      	adds	r2, r3, r2
 8006c10:	4b41      	ldr	r3, [pc, #260]	@ (8006d18 <ESP_Upkeep+0x7a4>)
 8006c12:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8006c14:	4b41      	ldr	r3, [pc, #260]	@ (8006d1c <ESP_Upkeep+0x7a8>)
 8006c16:	4a42      	ldr	r2, [pc, #264]	@ (8006d20 <ESP_Upkeep+0x7ac>)
 8006c18:	493d      	ldr	r1, [pc, #244]	@ (8006d10 <ESP_Upkeep+0x79c>)
 8006c1a:	2002      	movs	r0, #2
 8006c1c:	f00a fe1e 	bl	801185c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8006c20:	4b40      	ldr	r3, [pc, #256]	@ (8006d24 <ESP_Upkeep+0x7b0>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	4b28      	ldr	r3, [pc, #160]	@ (8006cc8 <ESP_Upkeep+0x754>)
 8006c26:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8006c28:	f7ff f95a 	bl	8005ee0 <clearDMABuffer>
            stop = HAL_GetTick();
 8006c2c:	f00b fa62 	bl	80120f4 <HAL_GetTick>
 8006c30:	0002      	movs	r2, r0
 8006c32:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006c34:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8006c36:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce8 <ESP_Upkeep+0x774>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006cec <ESP_Upkeep+0x778>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	4a39      	ldr	r2, [pc, #228]	@ (8006d28 <ESP_Upkeep+0x7b4>)
 8006c42:	4933      	ldr	r1, [pc, #204]	@ (8006d10 <ESP_Upkeep+0x79c>)
 8006c44:	2002      	movs	r0, #2
 8006c46:	f00a fe09 	bl	801185c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006c4c:	220d      	movs	r2, #13
 8006c4e:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8006c50:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <ESP_Upkeep+0x74c>)
 8006c52:	2202      	movs	r2, #2
 8006c54:	701a      	strb	r2, [r3, #0]
    break;
 8006c56:	e110      	b.n	8006e7a <ESP_Upkeep+0x906>
          EspState = ESP_STATE_RESET;
 8006c58:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006c5a:	2209      	movs	r2, #9
 8006c5c:	701a      	strb	r2, [r3, #0]
    break;
 8006c5e:	e10c      	b.n	8006e7a <ESP_Upkeep+0x906>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8006c60:	4b32      	ldr	r3, [pc, #200]	@ (8006d2c <ESP_Upkeep+0x7b8>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006c66:	4b32      	ldr	r3, [pc, #200]	@ (8006d30 <ESP_Upkeep+0x7bc>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f00c fcd2 	bl	8013616 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006c72:	2001      	movs	r0, #1
 8006c74:	f00b fa48 	bl	8012108 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006c78:	2380      	movs	r3, #128	@ 0x80
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	482d      	ldr	r0, [pc, #180]	@ (8006d34 <ESP_Upkeep+0x7c0>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	0019      	movs	r1, r3
 8006c82:	f00c fcc8 	bl	8013616 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006c86:	2001      	movs	r0, #1
 8006c88:	f00b fa3e 	bl	8012108 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8006c8c:	4b28      	ldr	r3, [pc, #160]	@ (8006d30 <ESP_Upkeep+0x7bc>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2102      	movs	r1, #2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f00c fcbf 	bl	8013616 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8006c98:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc4 <ESP_Upkeep+0x750>)
 8006c9a:	2209      	movs	r2, #9
 8006c9c:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8006c9e:	f004 fed5 	bl	800ba4c <EnabledConnectedDevices>
      HAL_Delay(1);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f00b fa30 	bl	8012108 <HAL_Delay>
      ResetESPIndicator();
 8006ca8:	f009 fcd2 	bl	8010650 <ResetESPIndicator>
      errorcntr = 0;
 8006cac:	4b0b      	ldr	r3, [pc, #44]	@ (8006cdc <ESP_Upkeep+0x768>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8006cb2:	4b11      	ldr	r3, [pc, #68]	@ (8006cf8 <ESP_Upkeep+0x784>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
      break;
 8006cb8:	e0e2      	b.n	8006e80 <ESP_Upkeep+0x90c>
 8006cba:	46c0      	nop			@ (mov r8, r8)
 8006cbc:	200005b7 	.word	0x200005b7
 8006cc0:	2000068b 	.word	0x2000068b
 8006cc4:	2000002c 	.word	0x2000002c
 8006cc8:	20000680 	.word	0x20000680
 8006ccc:	20000689 	.word	0x20000689
 8006cd0:	2000002f 	.word	0x2000002f
 8006cd4:	2000068a 	.word	0x2000068a
 8006cd8:	2000067a 	.word	0x2000067a
 8006cdc:	2000067b 	.word	0x2000067b
 8006ce0:	0003a980 	.word	0x0003a980
 8006ce4:	200005bc 	.word	0x200005bc
 8006ce8:	200005d0 	.word	0x200005d0
 8006cec:	200005cc 	.word	0x200005cc
 8006cf0:	08028864 	.word	0x08028864
 8006cf4:	08027c20 	.word	0x08027c20
 8006cf8:	2000067c 	.word	0x2000067c
 8006cfc:	08028898 	.word	0x08028898
 8006d00:	0000c350 	.word	0x0000c350
 8006d04:	080288d4 	.word	0x080288d4
 8006d08:	20000670 	.word	0x20000670
 8006d0c:	08028904 	.word	0x08028904
 8006d10:	0802891c 	.word	0x0802891c
 8006d14:	20000002 	.word	0x20000002
 8006d18:	20000684 	.word	0x20000684
 8006d1c:	00012686 	.word	0x00012686
 8006d20:	08028920 	.word	0x08028920
 8006d24:	20000028 	.word	0x20000028
 8006d28:	08028964 	.word	0x08028964
 8006d2c:	200005b4 	.word	0x200005b4
 8006d30:	50001c00 	.word	0x50001c00
 8006d34:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8006d38:	4b54      	ldr	r3, [pc, #336]	@ (8006e8c <ESP_Upkeep+0x918>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f00a fd37 	bl	80117b0 <TimestampIsReached>
 8006d42:	1e03      	subs	r3, r0, #0
 8006d44:	d103      	bne.n	8006d4e <ESP_Upkeep+0x7da>
 8006d46:	4b52      	ldr	r3, [pc, #328]	@ (8006e90 <ESP_Upkeep+0x91c>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d043      	beq.n	8006dd6 <ESP_Upkeep+0x862>
        ESPTransmitDone = false;
 8006d4e:	4b51      	ldr	r3, [pc, #324]	@ (8006e94 <ESP_Upkeep+0x920>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8006d54:	4b50      	ldr	r3, [pc, #320]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <ESP_Upkeep+0x7f4>
          InitIsDone = true;
 8006d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e9c <ESP_Upkeep+0x928>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8006d62:	4b4f      	ldr	r3, [pc, #316]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006d64:	220b      	movs	r2, #11
 8006d66:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8006d68:	4b4b      	ldr	r3, [pc, #300]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d108      	bne.n	8006d82 <ESP_Upkeep+0x80e>
          ConnectionMade = true;
 8006d70:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea4 <ESP_Upkeep+0x930>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8006d76:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea8 <ESP_Upkeep+0x934>)
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8006d7c:	4b48      	ldr	r3, [pc, #288]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006d7e:	220b      	movs	r2, #11
 8006d80:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8006d82:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d102      	bne.n	8006d90 <ESP_Upkeep+0x81c>
          EspState = ESP_STATE_INIT;
 8006d8a:	4b45      	ldr	r3, [pc, #276]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8006d90:	4b41      	ldr	r3, [pc, #260]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d108      	bne.n	8006daa <ESP_Upkeep+0x836>
          EspState = ESP_STATE_CONFIG;
 8006d98:	4b41      	ldr	r3, [pc, #260]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006d9a:	220e      	movs	r2, #14
 8006d9c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8006d9e:	4a43      	ldr	r2, [pc, #268]	@ (8006eac <ESP_Upkeep+0x938>)
 8006da0:	4b43      	ldr	r3, [pc, #268]	@ (8006eb0 <ESP_Upkeep+0x93c>)
 8006da2:	0019      	movs	r1, r3
 8006da4:	2002      	movs	r0, #2
 8006da6:	f00a fd59 	bl	801185c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8006daa:	4b3b      	ldr	r3, [pc, #236]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d105      	bne.n	8006dbe <ESP_Upkeep+0x84a>
          EspState = ESP_STATE_MODE_SELECT;
 8006db2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006db4:	220b      	movs	r2, #11
 8006db6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8006db8:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <ESP_Upkeep+0x940>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006dbe:	4b34      	ldr	r3, [pc, #208]	@ (8006e90 <ESP_Upkeep+0x91c>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d020      	beq.n	8006e08 <ESP_Upkeep+0x894>
 8006dc6:	4b34      	ldr	r3, [pc, #208]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d01c      	beq.n	8006e08 <ESP_Upkeep+0x894>
          EspState = ESP_STATE_INIT;
 8006dce:	4b34      	ldr	r3, [pc, #208]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006dd4:	e018      	b.n	8006e08 <ESP_Upkeep+0x894>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8006dd6:	f001 f8c5 	bl	8007f64 <calculateNextNTPTime>
 8006dda:	0002      	movs	r2, r0
 8006ddc:	4b36      	ldr	r3, [pc, #216]	@ (8006eb8 <ESP_Upkeep+0x944>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d94c      	bls.n	8006e7e <ESP_Upkeep+0x90a>
        if(Mode == AT_MODE_SEND ) {
 8006de4:	4b2c      	ldr	r3, [pc, #176]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d148      	bne.n	8006e7e <ESP_Upkeep+0x90a>
           Mode = AT_MODE_GETTIME;
 8006dec:	4b2a      	ldr	r3, [pc, #168]	@ (8006e98 <ESP_Upkeep+0x924>)
 8006dee:	2205      	movs	r2, #5
 8006df0:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8006df2:	4b2b      	ldr	r3, [pc, #172]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006df4:	2202      	movs	r2, #2
 8006df6:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8006df8:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <ESP_Upkeep+0x918>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8006ebc <ESP_Upkeep+0x948>)
 8006dfe:	601a      	str	r2, [r3, #0]
           setTime = true;
 8006e00:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec0 <ESP_Upkeep+0x94c>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006e06:	e03a      	b.n	8006e7e <ESP_Upkeep+0x90a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006e08:	46c0      	nop			@ (mov r8, r8)
      break;
 8006e0a:	e038      	b.n	8006e7e <ESP_Upkeep+0x90a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8006e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec4 <ESP_Upkeep+0x950>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	4053      	eors	r3, r2
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d008      	beq.n	8006e2c <ESP_Upkeep+0x8b8>
        Info("Do nothing until reset");
 8006e1a:	4a24      	ldr	r2, [pc, #144]	@ (8006eac <ESP_Upkeep+0x938>)
 8006e1c:	4b24      	ldr	r3, [pc, #144]	@ (8006eb0 <ESP_Upkeep+0x93c>)
 8006e1e:	0019      	movs	r1, r3
 8006e20:	2002      	movs	r0, #2
 8006e22:	f00a fd1b 	bl	801185c <CreateLine>
        msgdone = true;
 8006e26:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <ESP_Upkeep+0x950>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8006e2c:	f019 fc3a 	bl	80206a4 <GetUsbRxPointer>
 8006e30:	0003      	movs	r3, r0
 8006e32:	0018      	movs	r0, r3
 8006e34:	f000 f97e 	bl	8007134 <Process_PC_Config>
      break;
 8006e38:	e022      	b.n	8006e80 <ESP_Upkeep+0x90c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8006e3a:	4a23      	ldr	r2, [pc, #140]	@ (8006ec8 <ESP_Upkeep+0x954>)
 8006e3c:	4b23      	ldr	r3, [pc, #140]	@ (8006ecc <ESP_Upkeep+0x958>)
 8006e3e:	0019      	movs	r1, r3
 8006e40:	2001      	movs	r0, #1
 8006e42:	f00a fd0b 	bl	801185c <CreateLine>
      EspState = ESP_STATE_INIT;
 8006e46:	4b16      	ldr	r3, [pc, #88]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006e48:	2202      	movs	r2, #2
 8006e4a:	701a      	strb	r2, [r3, #0]
      break;
 8006e4c:	e018      	b.n	8006e80 <ESP_Upkeep+0x90c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8006e4e:	4a20      	ldr	r2, [pc, #128]	@ (8006ed0 <ESP_Upkeep+0x95c>)
 8006e50:	4b1e      	ldr	r3, [pc, #120]	@ (8006ecc <ESP_Upkeep+0x958>)
 8006e52:	0019      	movs	r1, r3
 8006e54:	2001      	movs	r0, #1
 8006e56:	f00a fd01 	bl	801185c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8006e5a:	4b11      	ldr	r3, [pc, #68]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	701a      	strb	r2, [r3, #0]
      break;
 8006e60:	e00e      	b.n	8006e80 <ESP_Upkeep+0x90c>
      break;
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	e00c      	b.n	8006e80 <ESP_Upkeep+0x90c>
      break;
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	e00a      	b.n	8006e80 <ESP_Upkeep+0x90c>
        break;
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	e008      	b.n	8006e80 <ESP_Upkeep+0x90c>
    break;
 8006e6e:	46c0      	nop			@ (mov r8, r8)
 8006e70:	e006      	b.n	8006e80 <ESP_Upkeep+0x90c>
    break;
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	e004      	b.n	8006e80 <ESP_Upkeep+0x90c>
      break;
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	e002      	b.n	8006e80 <ESP_Upkeep+0x90c>
    break;
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	e000      	b.n	8006e80 <ESP_Upkeep+0x90c>
      break;
 8006e7e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8006e80:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <ESP_Upkeep+0x92c>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
}
 8006e84:	0018      	movs	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b002      	add	sp, #8
 8006e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006e8c:	20000680 	.word	0x20000680
 8006e90:	200005b7 	.word	0x200005b7
 8006e94:	200005bc 	.word	0x200005bc
 8006e98:	2000068b 	.word	0x2000068b
 8006e9c:	200005b5 	.word	0x200005b5
 8006ea0:	2000002c 	.word	0x2000002c
 8006ea4:	200005b8 	.word	0x200005b8
 8006ea8:	200005ba 	.word	0x200005ba
 8006eac:	08028984 	.word	0x08028984
 8006eb0:	0802891c 	.word	0x0802891c
 8006eb4:	200005b9 	.word	0x200005b9
 8006eb8:	20000684 	.word	0x20000684
 8006ebc:	20000028 	.word	0x20000028
 8006ec0:	20000002 	.word	0x20000002
 8006ec4:	200005bb 	.word	0x200005bb
 8006ec8:	0802899c 	.word	0x0802899c
 8006ecc:	08027c20 	.word	0x08027c20
 8006ed0:	080289b0 	.word	0x080289b0

08006ed4 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8006edc:	4b12      	ldr	r3, [pc, #72]	@ (8006f28 <I2CSensors_Init+0x54>)
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8006ee2:	4a12      	ldr	r2, [pc, #72]	@ (8006f2c <I2CSensors_Init+0x58>)
 8006ee4:	4b12      	ldr	r3, [pc, #72]	@ (8006f30 <I2CSensors_Init+0x5c>)
 8006ee6:	0011      	movs	r1, r2
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f00a fe1b 	bl	8011b24 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8006eee:	4a0f      	ldr	r2, [pc, #60]	@ (8006f2c <I2CSensors_Init+0x58>)
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <I2CSensors_Init+0x5c>)
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f007 fd83 	bl	800ea00 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8006efa:	4a0e      	ldr	r2, [pc, #56]	@ (8006f34 <I2CSensors_Init+0x60>)
 8006efc:	490b      	ldr	r1, [pc, #44]	@ (8006f2c <I2CSensors_Init+0x58>)
 8006efe:	4b0c      	ldr	r3, [pc, #48]	@ (8006f30 <I2CSensors_Init+0x5c>)
 8006f00:	0018      	movs	r0, r3
 8006f02:	f001 ff6f 	bl	8008de4 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006f06:	4a0c      	ldr	r2, [pc, #48]	@ (8006f38 <I2CSensors_Init+0x64>)
 8006f08:	4b0c      	ldr	r3, [pc, #48]	@ (8006f3c <I2CSensors_Init+0x68>)
 8006f0a:	0011      	movs	r1, r2
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f002 fd25 	bl	800995c <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8006f12:	4a09      	ldr	r2, [pc, #36]	@ (8006f38 <I2CSensors_Init+0x64>)
 8006f14:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <I2CSensors_Init+0x68>)
 8006f16:	0011      	movs	r1, r2
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7fc fc0b 	bl	8003734 <ENS_Init>
}
 8006f1e:	46c0      	nop			@ (mov r8, r8)
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b002      	add	sp, #8
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	200007e8 	.word	0x200007e8
 8006f2c:	08006fed 	.word	0x08006fed
 8006f30:	08006f99 	.word	0x08006f99
 8006f34:	08006f41 	.word	0x08006f41
 8006f38:	080070bd 	.word	0x080070bd
 8006f3c:	08007041 	.word	0x08007041

08006f40 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	6039      	str	r1, [r7, #0]
 8006f48:	0011      	movs	r1, r2
 8006f4a:	1dfb      	adds	r3, r7, #7
 8006f4c:	1c02      	adds	r2, r0, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	1dbb      	adds	r3, r7, #6
 8006f52:	1c0a      	adds	r2, r1, #0
 8006f54:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8006f56:	4b0f      	ldr	r3, [pc, #60]	@ (8006f94 <ReadI2CDirect+0x54>)
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	1dfb      	adds	r3, r7, #7
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	18db      	adds	r3, r3, r3
 8006f62:	b299      	uxth	r1, r3
 8006f64:	1dbb      	adds	r3, r7, #6
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	260f      	movs	r6, #15
 8006f6c:	19bc      	adds	r4, r7, r6
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	25fa      	movs	r5, #250	@ 0xfa
 8006f72:	9500      	str	r5, [sp, #0]
 8006f74:	f00c fd26 	bl	80139c4 <HAL_I2C_Master_Receive>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006f7c:	19bb      	adds	r3, r7, r6
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <ReadI2CDirect+0x48>
        return false;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <ReadI2CDirect+0x4a>
    }
    return true;
 8006f88:	2301      	movs	r3, #1
}
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b005      	add	sp, #20
 8006f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	200007e8 	.word	0x200007e8

08006f98 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006f98:	b5b0      	push	{r4, r5, r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6039      	str	r1, [r7, #0]
 8006fa0:	0011      	movs	r1, r2
 8006fa2:	1dfb      	adds	r3, r7, #7
 8006fa4:	1c02      	adds	r2, r0, #0
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	1dbb      	adds	r3, r7, #6
 8006faa:	1c0a      	adds	r2, r1, #0
 8006fac:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006fae:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe8 <ReadI2C+0x50>)
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	1dfb      	adds	r3, r7, #7
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	18db      	adds	r3, r3, r3
 8006fba:	b299      	uxth	r1, r3
 8006fbc:	1dbb      	adds	r3, r7, #6
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	250f      	movs	r5, #15
 8006fc4:	197c      	adds	r4, r7, r5
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	f00c ff0a 	bl	8013de0 <HAL_I2C_Master_Receive_DMA>
 8006fcc:	0003      	movs	r3, r0
 8006fce:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006fd0:	197b      	adds	r3, r7, r5
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <ReadI2C+0x44>
        return false;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <ReadI2C+0x46>
    }
    return true;
 8006fdc:	2301      	movs	r3, #1
}
 8006fde:	0018      	movs	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b004      	add	sp, #16
 8006fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	200007e8 	.word	0x200007e8

08006fec <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006fec:	b5b0      	push	{r4, r5, r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6039      	str	r1, [r7, #0]
 8006ff4:	0011      	movs	r1, r2
 8006ff6:	1dfb      	adds	r3, r7, #7
 8006ff8:	1c02      	adds	r2, r0, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	1dbb      	adds	r3, r7, #6
 8006ffe:	1c0a      	adds	r2, r1, #0
 8007000:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007002:	4b0e      	ldr	r3, [pc, #56]	@ (800703c <WriteI2C+0x50>)
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	1dfb      	adds	r3, r7, #7
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	18db      	adds	r3, r3, r3
 800700e:	b299      	uxth	r1, r3
 8007010:	1dbb      	adds	r3, r7, #6
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	250f      	movs	r5, #15
 8007018:	197c      	adds	r4, r7, r5
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	f00c fdda 	bl	8013bd4 <HAL_I2C_Master_Transmit_DMA>
 8007020:	0003      	movs	r3, r0
 8007022:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007024:	197b      	adds	r3, r7, r5
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <WriteI2C+0x44>
        return false;
 800702c:	2300      	movs	r3, #0
 800702e:	e000      	b.n	8007032 <WriteI2C+0x46>
    }
    return true;
 8007030:	2301      	movs	r3, #1
}
 8007032:	0018      	movs	r0, r3
 8007034:	46bd      	mov	sp, r7
 8007036:	b004      	add	sp, #16
 8007038:	bdb0      	pop	{r4, r5, r7, pc}
 800703a:	46c0      	nop			@ (mov r8, r8)
 800703c:	200007e8 	.word	0x200007e8

08007040 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007042:	b08b      	sub	sp, #44	@ 0x2c
 8007044:	af04      	add	r7, sp, #16
 8007046:	0004      	movs	r4, r0
 8007048:	0008      	movs	r0, r1
 800704a:	0011      	movs	r1, r2
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	250f      	movs	r5, #15
 8007050:	197b      	adds	r3, r7, r5
 8007052:	1c22      	adds	r2, r4, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	260c      	movs	r6, #12
 8007058:	19bb      	adds	r3, r7, r6
 800705a:	1c02      	adds	r2, r0, #0
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	230a      	movs	r3, #10
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	1c0a      	adds	r2, r1, #0
 8007064:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007066:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <ReadI2CMem+0x78>)
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	197b      	adds	r3, r7, r5
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	18db      	adds	r3, r3, r3
 8007072:	b299      	uxth	r1, r3
 8007074:	2217      	movs	r2, #23
 8007076:	18bc      	adds	r4, r7, r2
 8007078:	230a      	movs	r3, #10
 800707a:	18fb      	adds	r3, r7, r3
 800707c:	881d      	ldrh	r5, [r3, #0]
 800707e:	19bb      	adds	r3, r7, r6
 8007080:	881a      	ldrh	r2, [r3, #0]
 8007082:	2364      	movs	r3, #100	@ 0x64
 8007084:	9302      	str	r3, [sp, #8]
 8007086:	2328      	movs	r3, #40	@ 0x28
 8007088:	2608      	movs	r6, #8
 800708a:	199b      	adds	r3, r3, r6
 800708c:	19db      	adds	r3, r3, r7
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	002b      	movs	r3, r5
 8007098:	f00c ffa8 	bl	8013fec <HAL_I2C_Mem_Read>
 800709c:	0003      	movs	r3, r0
 800709e:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80070a0:	2217      	movs	r2, #23
 80070a2:	18bb      	adds	r3, r7, r2
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <ReadI2CMem+0x6e>
     return false;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e000      	b.n	80070b0 <ReadI2CMem+0x70>
   }
   return true;
 80070ae:	2301      	movs	r3, #1
}
 80070b0:	0018      	movs	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b007      	add	sp, #28
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b8:	200007e8 	.word	0x200007e8

080070bc <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80070bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070be:	b089      	sub	sp, #36	@ 0x24
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	0004      	movs	r4, r0
 80070c4:	0008      	movs	r0, r1
 80070c6:	0011      	movs	r1, r2
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	250f      	movs	r5, #15
 80070cc:	197b      	adds	r3, r7, r5
 80070ce:	1c22      	adds	r2, r4, #0
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	260c      	movs	r6, #12
 80070d4:	19bb      	adds	r3, r7, r6
 80070d6:	1c02      	adds	r2, r0, #0
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	230a      	movs	r3, #10
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	1c0a      	adds	r2, r1, #0
 80070e0:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 80070e2:	4b13      	ldr	r3, [pc, #76]	@ (8007130 <WriteI2CMem+0x74>)
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	197b      	adds	r3, r7, r5
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	18db      	adds	r3, r3, r3
 80070ee:	b299      	uxth	r1, r3
 80070f0:	2217      	movs	r2, #23
 80070f2:	18bc      	adds	r4, r7, r2
 80070f4:	230a      	movs	r3, #10
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	881d      	ldrh	r5, [r3, #0]
 80070fa:	19bb      	adds	r3, r7, r6
 80070fc:	881a      	ldrh	r2, [r3, #0]
 80070fe:	2328      	movs	r3, #40	@ 0x28
 8007100:	2608      	movs	r6, #8
 8007102:	199b      	adds	r3, r3, r6
 8007104:	19db      	adds	r3, r3, r7
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	002b      	movs	r3, r5
 8007110:	f00d f8a0 	bl	8014254 <HAL_I2C_Mem_Write_DMA>
 8007114:	0003      	movs	r3, r0
 8007116:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007118:	2217      	movs	r2, #23
 800711a:	18bb      	adds	r3, r7, r2
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <WriteI2CMem+0x6a>
     return false;
 8007122:	2300      	movs	r3, #0
 8007124:	e000      	b.n	8007128 <WriteI2CMem+0x6c>
   }
   return true;
 8007126:	2301      	movs	r3, #1
}
 8007128:	0018      	movs	r0, r3
 800712a:	46bd      	mov	sp, r7
 800712c:	b007      	add	sp, #28
 800712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007130:	200007e8 	.word	0x200007e8

08007134 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007134:	b590      	push	{r4, r7, lr}
 8007136:	b0c3      	sub	sp, #268	@ 0x10c
 8007138:	af3e      	add	r7, sp, #248	@ 0xf8
 800713a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800713c:	f019 fad2 	bl	80206e4 <GetUsbRxDataSize>
 8007140:	0003      	movs	r3, r0
 8007142:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b05      	cmp	r3, #5
 8007148:	d971      	bls.n	800722e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2123      	movs	r1, #35	@ 0x23
 800714e:	0018      	movs	r0, r3
 8007150:	f01c fcea 	bl	8023b28 <strchr>
 8007154:	0003      	movs	r3, r0
 8007156:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d065      	beq.n	800722a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	785a      	ldrb	r2, [r3, #1]
 8007162:	4b34      	ldr	r3, [pc, #208]	@ (8007234 <Process_PC_Config+0x100>)
 8007164:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	789a      	ldrb	r2, [r3, #2]
 800716a:	4b32      	ldr	r3, [pc, #200]	@ (8007234 <Process_PC_Config+0x100>)
 800716c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800716e:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <Process_PC_Config+0x100>)
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	3305      	adds	r3, #5
 8007174:	001a      	movs	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4293      	cmp	r3, r2
 800717a:	d351      	bcc.n	8007220 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	1cd9      	adds	r1, r3, #3
 8007180:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <Process_PC_Config+0x100>)
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	001a      	movs	r2, r3
 8007186:	4b2c      	ldr	r3, [pc, #176]	@ (8007238 <Process_PC_Config+0x104>)
 8007188:	0018      	movs	r0, r3
 800718a:	f01c fda1 	bl	8023cd0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800718e:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <Process_PC_Config+0x100>)
 8007190:	785b      	ldrb	r3, [r3, #1]
 8007192:	3303      	adds	r3, #3
 8007194:	001a      	movs	r2, r3
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	189b      	adds	r3, r3, r2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	021b      	lsls	r3, r3, #8
 800719e:	b21a      	sxth	r2, r3
 80071a0:	4b24      	ldr	r3, [pc, #144]	@ (8007234 <Process_PC_Config+0x100>)
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	3304      	adds	r3, #4
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	18cb      	adds	r3, r1, r3
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b21b      	sxth	r3, r3
 80071ae:	4313      	orrs	r3, r2
 80071b0:	b21b      	sxth	r3, r3
 80071b2:	b299      	uxth	r1, r3
 80071b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007234 <Process_PC_Config+0x100>)
 80071b6:	2381      	movs	r3, #129	@ 0x81
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80071bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007234 <Process_PC_Config+0x100>)
 80071be:	2381      	movs	r3, #129	@ 0x81
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	5ad4      	ldrh	r4, [r2, r3]
 80071c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <Process_PC_Config+0x100>)
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	3303      	adds	r3, #3
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	0011      	movs	r1, r2
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 f975 	bl	80074c0 <CRC16_ARC>
 80071d6:	0003      	movs	r3, r0
 80071d8:	429c      	cmp	r4, r3
 80071da:	d007      	beq.n	80071ec <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80071dc:	4b15      	ldr	r3, [pc, #84]	@ (8007234 <Process_PC_Config+0x100>)
 80071de:	785a      	ldrb	r2, [r3, #1]
 80071e0:	4b15      	ldr	r3, [pc, #84]	@ (8007238 <Process_PC_Config+0x104>)
 80071e2:	0019      	movs	r1, r3
 80071e4:	2001      	movs	r0, #1
 80071e6:	f000 f919 	bl	800741c <Create_Message>
 80071ea:	e016      	b.n	800721a <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80071ec:	4c11      	ldr	r4, [pc, #68]	@ (8007234 <Process_PC_Config+0x100>)
 80071ee:	466b      	mov	r3, sp
 80071f0:	0018      	movs	r0, r3
 80071f2:	0023      	movs	r3, r4
 80071f4:	3310      	adds	r3, #16
 80071f6:	22f4      	movs	r2, #244	@ 0xf4
 80071f8:	0019      	movs	r1, r3
 80071fa:	f01c fd69 	bl	8023cd0 <memcpy>
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	6861      	ldr	r1, [r4, #4]
 8007202:	68a2      	ldr	r2, [r4, #8]
 8007204:	68e3      	ldr	r3, [r4, #12]
 8007206:	f000 f819 	bl	800723c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <Process_PC_Config+0x100>)
 800720c:	7818      	ldrb	r0, [r3, #0]
 800720e:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <Process_PC_Config+0x100>)
 8007210:	785a      	ldrb	r2, [r3, #1]
 8007212:	4b09      	ldr	r3, [pc, #36]	@ (8007238 <Process_PC_Config+0x104>)
 8007214:	0019      	movs	r1, r3
 8007216:	f000 f901 	bl	800741c <Create_Message>
                }
                ResetUsbRxDataSize();
 800721a:	f019 fa4b 	bl	80206b4 <ResetUsbRxDataSize>
                return;
 800721e:	e006      	b.n	800722e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0018      	movs	r0, r3
 8007224:	f019 fa68 	bl	80206f8 <GetUsbRxNextChunk>
 8007228:	e001      	b.n	800722e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 800722a:	f019 fa43 	bl	80206b4 <ResetUsbRxDataSize>
        }
    }
}
 800722e:	46bd      	mov	sp, r7
 8007230:	b005      	add	sp, #20
 8007232:	bd90      	pop	{r4, r7, pc}
 8007234:	200007ec 	.word	0x200007ec
 8007238:	200007ee 	.word	0x200007ee

0800723c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800723c:	b084      	sub	sp, #16
 800723e:	b5b0      	push	{r4, r5, r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	2518      	movs	r5, #24
 8007246:	197c      	adds	r4, r7, r5
 8007248:	6020      	str	r0, [r4, #0]
 800724a:	6061      	str	r1, [r4, #4]
 800724c:	60a2      	str	r2, [r4, #8]
 800724e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8007250:	197b      	adds	r3, r7, r5
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2bfe      	cmp	r3, #254	@ 0xfe
 8007256:	d100      	bne.n	800725a <ProcessCmd+0x1e>
 8007258:	e09c      	b.n	8007394 <ProcessCmd+0x158>
 800725a:	dd00      	ble.n	800725e <ProcessCmd+0x22>
 800725c:	e0bc      	b.n	80073d8 <ProcessCmd+0x19c>
 800725e:	2b0c      	cmp	r3, #12
 8007260:	dc0a      	bgt.n	8007278 <ProcessCmd+0x3c>
 8007262:	2b00      	cmp	r3, #0
 8007264:	da00      	bge.n	8007268 <ProcessCmd+0x2c>
 8007266:	e0b7      	b.n	80073d8 <ProcessCmd+0x19c>
 8007268:	2b0c      	cmp	r3, #12
 800726a:	d900      	bls.n	800726e <ProcessCmd+0x32>
 800726c:	e0b4      	b.n	80073d8 <ProcessCmd+0x19c>
 800726e:	009a      	lsls	r2, r3, #2
 8007270:	4b5d      	ldr	r3, [pc, #372]	@ (80073e8 <ProcessCmd+0x1ac>)
 8007272:	18d3      	adds	r3, r2, r3
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	469f      	mov	pc, r3
 8007278:	2bfd      	cmp	r3, #253	@ 0xfd
 800727a:	d100      	bne.n	800727e <ProcessCmd+0x42>
 800727c:	e084      	b.n	8007388 <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 800727e:	e0ab      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007280:	2118      	movs	r1, #24
 8007282:	187b      	adds	r3, r7, r1
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	001a      	movs	r2, r3
 8007288:	187b      	adds	r3, r7, r1
 800728a:	1c99      	adds	r1, r3, #2
 800728c:	4857      	ldr	r0, [pc, #348]	@ (80073ec <ProcessCmd+0x1b0>)
 800728e:	230c      	movs	r3, #12
 8007290:	f002 ff52 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 8007294:	e0a0      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007296:	2118      	movs	r1, #24
 8007298:	187b      	adds	r3, r7, r1
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	001a      	movs	r2, r3
 800729e:	187b      	adds	r3, r7, r1
 80072a0:	1c99      	adds	r1, r3, #2
 80072a2:	4853      	ldr	r0, [pc, #332]	@ (80073f0 <ProcessCmd+0x1b4>)
 80072a4:	230c      	movs	r3, #12
 80072a6:	f002 ff47 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 80072aa:	e095      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072ac:	2118      	movs	r1, #24
 80072ae:	187b      	adds	r3, r7, r1
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	001a      	movs	r2, r3
 80072b4:	187b      	adds	r3, r7, r1
 80072b6:	1c99      	adds	r1, r3, #2
 80072b8:	484e      	ldr	r0, [pc, #312]	@ (80073f4 <ProcessCmd+0x1b8>)
 80072ba:	230c      	movs	r3, #12
 80072bc:	f002 ff3c 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 80072c0:	e08a      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072c2:	2118      	movs	r1, #24
 80072c4:	187b      	adds	r3, r7, r1
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	001a      	movs	r2, r3
 80072ca:	187b      	adds	r3, r7, r1
 80072cc:	1c99      	adds	r1, r3, #2
 80072ce:	484a      	ldr	r0, [pc, #296]	@ (80073f8 <ProcessCmd+0x1bc>)
 80072d0:	230c      	movs	r3, #12
 80072d2:	f002 ff31 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 80072d6:	e07f      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072d8:	2118      	movs	r1, #24
 80072da:	187b      	adds	r3, r7, r1
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	001a      	movs	r2, r3
 80072e0:	187b      	adds	r3, r7, r1
 80072e2:	1c99      	adds	r1, r3, #2
 80072e4:	4845      	ldr	r0, [pc, #276]	@ (80073fc <ProcessCmd+0x1c0>)
 80072e6:	230c      	movs	r3, #12
 80072e8:	f002 ff26 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 80072ec:	e074      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072ee:	2118      	movs	r1, #24
 80072f0:	187b      	adds	r3, r7, r1
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	001a      	movs	r2, r3
 80072f6:	187b      	adds	r3, r7, r1
 80072f8:	1c99      	adds	r1, r3, #2
 80072fa:	4841      	ldr	r0, [pc, #260]	@ (8007400 <ProcessCmd+0x1c4>)
 80072fc:	230c      	movs	r3, #12
 80072fe:	f002 ff1b 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 8007302:	e069      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007304:	2118      	movs	r1, #24
 8007306:	187b      	adds	r3, r7, r1
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	001a      	movs	r2, r3
 800730c:	187b      	adds	r3, r7, r1
 800730e:	1c99      	adds	r1, r3, #2
 8007310:	483c      	ldr	r0, [pc, #240]	@ (8007404 <ProcessCmd+0x1c8>)
 8007312:	230c      	movs	r3, #12
 8007314:	f002 ff10 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 8007318:	e05e      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800731a:	2118      	movs	r1, #24
 800731c:	187b      	adds	r3, r7, r1
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	001a      	movs	r2, r3
 8007322:	187b      	adds	r3, r7, r1
 8007324:	1c99      	adds	r1, r3, #2
 8007326:	4838      	ldr	r0, [pc, #224]	@ (8007408 <ProcessCmd+0x1cc>)
 8007328:	2320      	movs	r3, #32
 800732a:	f002 ff05 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 800732e:	e053      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007330:	2118      	movs	r1, #24
 8007332:	187b      	adds	r3, r7, r1
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	001a      	movs	r2, r3
 8007338:	187b      	adds	r3, r7, r1
 800733a:	1c99      	adds	r1, r3, #2
 800733c:	4833      	ldr	r0, [pc, #204]	@ (800740c <ProcessCmd+0x1d0>)
 800733e:	230c      	movs	r3, #12
 8007340:	f002 fefa 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 8007344:	e048      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007346:	2118      	movs	r1, #24
 8007348:	187b      	adds	r3, r7, r1
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	001a      	movs	r2, r3
 800734e:	187b      	adds	r3, r7, r1
 8007350:	1c99      	adds	r1, r3, #2
 8007352:	482f      	ldr	r0, [pc, #188]	@ (8007410 <ProcessCmd+0x1d4>)
 8007354:	230c      	movs	r3, #12
 8007356:	f002 feef 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 800735a:	e03d      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800735c:	2118      	movs	r1, #24
 800735e:	187b      	adds	r3, r7, r1
 8007360:	785b      	ldrb	r3, [r3, #1]
 8007362:	001a      	movs	r2, r3
 8007364:	187b      	adds	r3, r7, r1
 8007366:	1c99      	adds	r1, r3, #2
 8007368:	482a      	ldr	r0, [pc, #168]	@ (8007414 <ProcessCmd+0x1d8>)
 800736a:	230c      	movs	r3, #12
 800736c:	f002 fee4 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 8007370:	e032      	b.n	80073d8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007372:	2118      	movs	r1, #24
 8007374:	187b      	adds	r3, r7, r1
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	001a      	movs	r2, r3
 800737a:	187b      	adds	r3, r7, r1
 800737c:	1c99      	adds	r1, r3, #2
 800737e:	4826      	ldr	r0, [pc, #152]	@ (8007418 <ProcessCmd+0x1dc>)
 8007380:	230c      	movs	r3, #12
 8007382:	f002 fed9 	bl	800a138 <WriteUint8ArrayEepromSafe>
        break;
 8007386:	e027      	b.n	80073d8 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8007388:	4b18      	ldr	r3, [pc, #96]	@ (80073ec <ProcessCmd+0x1b0>)
 800738a:	21f8      	movs	r1, #248	@ 0xf8
 800738c:	0018      	movs	r0, r3
 800738e:	f002 ff18 	bl	800a1c2 <ClearEEprom>
        break;
 8007392:	e021      	b.n	80073d8 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8007394:	2118      	movs	r1, #24
 8007396:	187b      	adds	r3, r7, r1
 8007398:	789b      	ldrb	r3, [r3, #2]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	b21a      	sxth	r2, r3
 800739e:	187b      	adds	r3, r7, r1
 80073a0:	78db      	ldrb	r3, [r3, #3]
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b21a      	sxth	r2, r3
 80073a8:	1dbb      	adds	r3, r7, #6
 80073aa:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80073ac:	1dbb      	adds	r3, r7, #6
 80073ae:	881a      	ldrh	r2, [r3, #0]
 80073b0:	23c0      	movs	r3, #192	@ 0xc0
 80073b2:	015b      	lsls	r3, r3, #5
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d207      	bcs.n	80073c8 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 80073b8:	1dbb      	adds	r3, r7, #6
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	4a0b      	ldr	r2, [pc, #44]	@ (80073ec <ProcessCmd+0x1b0>)
 80073be:	0019      	movs	r1, r3
 80073c0:	0010      	movs	r0, r2
 80073c2:	f002 fefe 	bl	800a1c2 <ClearEEprom>
            break;
 80073c6:	e006      	b.n	80073d6 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80073c8:	23c0      	movs	r3, #192	@ 0xc0
 80073ca:	015b      	lsls	r3, r3, #5
 80073cc:	4a07      	ldr	r2, [pc, #28]	@ (80073ec <ProcessCmd+0x1b0>)
 80073ce:	0019      	movs	r1, r3
 80073d0:	0010      	movs	r0, r2
 80073d2:	f002 fef6 	bl	800a1c2 <ClearEEprom>
            break;
 80073d6:	46c0      	nop			@ (mov r8, r8)
}
 80073d8:	46c0      	nop			@ (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bcb0      	pop	{r4, r5, r7}
 80073e0:	bc08      	pop	{r3}
 80073e2:	b004      	add	sp, #16
 80073e4:	4718      	bx	r3
 80073e6:	46c0      	nop			@ (mov r8, r8)
 80073e8:	0802afbc 	.word	0x0802afbc
 80073ec:	08080000 	.word	0x08080000
 80073f0:	0808000c 	.word	0x0808000c
 80073f4:	08080018 	.word	0x08080018
 80073f8:	08080024 	.word	0x08080024
 80073fc:	08080030 	.word	0x08080030
 8007400:	0808003c 	.word	0x0808003c
 8007404:	08080048 	.word	0x08080048
 8007408:	08080090 	.word	0x08080090
 800740c:	08080078 	.word	0x08080078
 8007410:	0808006c 	.word	0x0808006c
 8007414:	08080060 	.word	0x08080060
 8007418:	08080054 	.word	0x08080054

0800741c <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 800741c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6039      	str	r1, [r7, #0]
 8007424:	0011      	movs	r1, r2
 8007426:	1dfb      	adds	r3, r7, #7
 8007428:	1c02      	adds	r2, r0, #0
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	1dbb      	adds	r3, r7, #6
 800742e:	1c0a      	adds	r2, r1, #0
 8007430:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8007432:	2223      	movs	r2, #35	@ 0x23
 8007434:	4b20      	ldr	r3, [pc, #128]	@ (80074b8 <Create_Message+0x9c>)
 8007436:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8007438:	4b1f      	ldr	r3, [pc, #124]	@ (80074b8 <Create_Message+0x9c>)
 800743a:	1dfa      	adds	r2, r7, #7
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8007440:	4b1d      	ldr	r3, [pc, #116]	@ (80074b8 <Create_Message+0x9c>)
 8007442:	1dba      	adds	r2, r7, #6
 8007444:	7812      	ldrb	r2, [r2, #0]
 8007446:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8007448:	1dbb      	adds	r3, r7, #6
 800744a:	781a      	ldrb	r2, [r3, #0]
 800744c:	6839      	ldr	r1, [r7, #0]
 800744e:	4b1b      	ldr	r3, [pc, #108]	@ (80074bc <Create_Message+0xa0>)
 8007450:	0018      	movs	r0, r3
 8007452:	f01c fc3d 	bl	8023cd0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8007456:	1dbb      	adds	r3, r7, #6
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	b29a      	uxth	r2, r3
 800745c:	250e      	movs	r5, #14
 800745e:	197b      	adds	r3, r7, r5
 8007460:	3203      	adds	r2, #3
 8007462:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8007464:	260c      	movs	r6, #12
 8007466:	19bc      	adds	r4, r7, r6
 8007468:	197b      	adds	r3, r7, r5
 800746a:	881a      	ldrh	r2, [r3, #0]
 800746c:	4b12      	ldr	r3, [pc, #72]	@ (80074b8 <Create_Message+0x9c>)
 800746e:	0011      	movs	r1, r2
 8007470:	0018      	movs	r0, r3
 8007472:	f000 f825 	bl	80074c0 <CRC16_ARC>
 8007476:	0003      	movs	r3, r0
 8007478:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800747a:	0030      	movs	r0, r6
 800747c:	183b      	adds	r3, r7, r0
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	0a1b      	lsrs	r3, r3, #8
 8007482:	b29a      	uxth	r2, r3
 8007484:	197b      	adds	r3, r7, r5
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b2d1      	uxtb	r1, r2
 800748a:	4a0b      	ldr	r2, [pc, #44]	@ (80074b8 <Create_Message+0x9c>)
 800748c:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800748e:	197b      	adds	r3, r7, r5
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	183a      	adds	r2, r7, r0
 8007496:	8812      	ldrh	r2, [r2, #0]
 8007498:	b2d1      	uxtb	r1, r2
 800749a:	4a07      	ldr	r2, [pc, #28]	@ (80074b8 <Create_Message+0x9c>)
 800749c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800749e:	197b      	adds	r3, r7, r5
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	3302      	adds	r3, #2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	4b04      	ldr	r3, [pc, #16]	@ (80074b8 <Create_Message+0x9c>)
 80074a8:	0011      	movs	r1, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	f019 f8c0 	bl	8020630 <CDC_Transmit_FS>
}
 80074b0:	46c0      	nop			@ (mov r8, r8)
 80074b2:	46bd      	mov	sp, r7
 80074b4:	b005      	add	sp, #20
 80074b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b8:	200008f8 	.word	0x200008f8
 80074bc:	200008fb 	.word	0x200008fb

080074c0 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	000a      	movs	r2, r1
 80074ca:	1cbb      	adds	r3, r7, #2
 80074cc:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80074ce:	2316      	movs	r3, #22
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	2200      	movs	r2, #0
 80074d4:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80074d6:	2300      	movs	r3, #0
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	e02e      	b.n	800753a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	18d3      	adds	r3, r2, r3
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	0019      	movs	r1, r3
 80074e6:	2216      	movs	r2, #22
 80074e8:	18bb      	adds	r3, r7, r2
 80074ea:	18ba      	adds	r2, r7, r2
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	404a      	eors	r2, r1
 80074f0:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	e01a      	b.n	800752e <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80074f8:	2116      	movs	r1, #22
 80074fa:	187b      	adds	r3, r7, r1
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	2201      	movs	r2, #1
 8007500:	4013      	ands	r3, r2
 8007502:	d00b      	beq.n	800751c <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8007504:	187b      	adds	r3, r7, r1
 8007506:	187a      	adds	r2, r7, r1
 8007508:	8812      	ldrh	r2, [r2, #0]
 800750a:	0852      	lsrs	r2, r2, #1
 800750c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800750e:	187b      	adds	r3, r7, r1
 8007510:	187a      	adds	r2, r7, r1
 8007512:	8812      	ldrh	r2, [r2, #0]
 8007514:	490f      	ldr	r1, [pc, #60]	@ (8007554 <CRC16_ARC+0x94>)
 8007516:	404a      	eors	r2, r1
 8007518:	801a      	strh	r2, [r3, #0]
 800751a:	e005      	b.n	8007528 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 800751c:	2216      	movs	r2, #22
 800751e:	18bb      	adds	r3, r7, r2
 8007520:	18ba      	adds	r2, r7, r2
 8007522:	8812      	ldrh	r2, [r2, #0]
 8007524:	0852      	lsrs	r2, r2, #1
 8007526:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3301      	adds	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b07      	cmp	r3, #7
 8007532:	dde1      	ble.n	80074f8 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	3301      	adds	r3, #1
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	1cbb      	adds	r3, r7, #2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	429a      	cmp	r2, r3
 8007542:	dbcb      	blt.n	80074dc <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8007544:	2316      	movs	r3, #22
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	881b      	ldrh	r3, [r3, #0]
}
 800754a:	0018      	movs	r0, r3
 800754c:	46bd      	mov	sp, r7
 800754e:	b006      	add	sp, #24
 8007550:	bd80      	pop	{r7, pc}
 8007552:	46c0      	nop			@ (mov r8, r8)
 8007554:	ffffa001 	.word	0xffffa001

08007558 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8007558:	b40f      	push	{r0, r1, r2, r3}
 800755a:	b590      	push	{r4, r7, lr}
 800755c:	b0a9      	sub	sp, #164	@ 0xa4
 800755e:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8007560:	23ac      	movs	r3, #172	@ 0xac
 8007562:	2108      	movs	r1, #8
 8007564:	185b      	adds	r3, r3, r1
 8007566:	19db      	adds	r3, r3, r7
 8007568:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	23a8      	movs	r3, #168	@ 0xa8
 800756e:	185b      	adds	r3, r3, r1
 8007570:	19db      	adds	r3, r3, r7
 8007572:	6819      	ldr	r1, [r3, #0]
 8007574:	2408      	movs	r4, #8
 8007576:	193b      	adds	r3, r7, r4
 8007578:	0018      	movs	r0, r3
 800757a:	f01c fa21 	bl	80239c0 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 800757e:	193b      	adds	r3, r7, r4
 8007580:	0018      	movs	r0, r3
 8007582:	f7f8 fdf3 	bl	800016c <strlen>
 8007586:	0003      	movs	r3, r0
 8007588:	b29a      	uxth	r2, r3
 800758a:	193b      	adds	r3, r7, r4
 800758c:	0011      	movs	r1, r2
 800758e:	0018      	movs	r0, r3
 8007590:	f019 f84e 	bl	8020630 <CDC_Transmit_FS>
}
 8007594:	46c0      	nop			@ (mov r8, r8)
 8007596:	46bd      	mov	sp, r7
 8007598:	b029      	add	sp, #164	@ 0xa4
 800759a:	bc90      	pop	{r4, r7}
 800759c:	bc08      	pop	{r3}
 800759e:	b004      	add	sp, #16
 80075a0:	4718      	bx	r3

080075a2 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	000a      	movs	r2, r1
 80075ac:	1cfb      	adds	r3, r7, #3
 80075ae:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 80075b0:	1cfb      	adds	r3, r7, #3
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <PC_selectout+0x1e>
    printf_USB(msg);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7ff ffcc 	bl	8007558 <printf_USB>
  }
//  else {
    printf(msg);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	0018      	movs	r0, r3
 80075c4:	f01c f8d2 	bl	802376c <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 80075c8:	200a      	movs	r0, #10
 80075ca:	f00a fd9d 	bl	8012108 <HAL_Delay>
}
 80075ce:	46c0      	nop			@ (mov r8, r8)
 80075d0:	46bd      	mov	sp, r7
 80075d2:	b002      	add	sp, #8
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <PC_show_Keys>:

void PC_show_Keys() {
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 80075dc:	f000 fc40 	bl	8007e60 <Check_USB_PowerOn>
 80075e0:	1e03      	subs	r3, r0, #0
 80075e2:	d003      	beq.n	80075ec <PC_show_Keys+0x14>
    usb_out = true;
 80075e4:	4bcc      	ldr	r3, [pc, #816]	@ (8007918 <PC_show_Keys+0x340>)
 80075e6:	2201      	movs	r2, #1
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	e002      	b.n	80075f2 <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80075ec:	4bca      	ldr	r3, [pc, #808]	@ (8007918 <PC_show_Keys+0x340>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80075f2:	4aca      	ldr	r2, [pc, #808]	@ (800791c <PC_show_Keys+0x344>)
 80075f4:	4bca      	ldr	r3, [pc, #808]	@ (8007920 <PC_show_Keys+0x348>)
 80075f6:	0011      	movs	r1, r2
 80075f8:	0018      	movs	r0, r3
 80075fa:	f01c f927 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80075fe:	4bc6      	ldr	r3, [pc, #792]	@ (8007918 <PC_show_Keys+0x340>)
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	4bc7      	ldr	r3, [pc, #796]	@ (8007920 <PC_show_Keys+0x348>)
 8007604:	0011      	movs	r1, r2
 8007606:	0018      	movs	r0, r3
 8007608:	f7ff ffcb 	bl	80075a2 <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800760c:	4bc5      	ldr	r3, [pc, #788]	@ (8007924 <PC_show_Keys+0x34c>)
 800760e:	48c6      	ldr	r0, [pc, #792]	@ (8007928 <PC_show_Keys+0x350>)
 8007610:	220c      	movs	r2, #12
 8007612:	0019      	movs	r1, r3
 8007614:	f002 fdac 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8007618:	4ac2      	ldr	r2, [pc, #776]	@ (8007924 <PC_show_Keys+0x34c>)
 800761a:	4bc4      	ldr	r3, [pc, #784]	@ (800792c <PC_show_Keys+0x354>)
 800761c:	0011      	movs	r1, r2
 800761e:	0018      	movs	r0, r3
 8007620:	f7fd fa84 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 8007624:	4ac1      	ldr	r2, [pc, #772]	@ (800792c <PC_show_Keys+0x354>)
 8007626:	49c2      	ldr	r1, [pc, #776]	@ (8007930 <PC_show_Keys+0x358>)
 8007628:	4bbd      	ldr	r3, [pc, #756]	@ (8007920 <PC_show_Keys+0x348>)
 800762a:	0018      	movs	r0, r3
 800762c:	f01c f90e 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007630:	4bb9      	ldr	r3, [pc, #740]	@ (8007918 <PC_show_Keys+0x340>)
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	4bba      	ldr	r3, [pc, #744]	@ (8007920 <PC_show_Keys+0x348>)
 8007636:	0011      	movs	r1, r2
 8007638:	0018      	movs	r0, r3
 800763a:	f7ff ffb2 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800763e:	4bbd      	ldr	r3, [pc, #756]	@ (8007934 <PC_show_Keys+0x35c>)
 8007640:	48bd      	ldr	r0, [pc, #756]	@ (8007938 <PC_show_Keys+0x360>)
 8007642:	220c      	movs	r2, #12
 8007644:	0019      	movs	r1, r3
 8007646:	f002 fd93 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 800764a:	4aba      	ldr	r2, [pc, #744]	@ (8007934 <PC_show_Keys+0x35c>)
 800764c:	4bb7      	ldr	r3, [pc, #732]	@ (800792c <PC_show_Keys+0x354>)
 800764e:	0011      	movs	r1, r2
 8007650:	0018      	movs	r0, r3
 8007652:	f7fd fa6b 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 8007656:	4ab5      	ldr	r2, [pc, #724]	@ (800792c <PC_show_Keys+0x354>)
 8007658:	49b8      	ldr	r1, [pc, #736]	@ (800793c <PC_show_Keys+0x364>)
 800765a:	4bb1      	ldr	r3, [pc, #708]	@ (8007920 <PC_show_Keys+0x348>)
 800765c:	0018      	movs	r0, r3
 800765e:	f01c f8f5 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007662:	4bad      	ldr	r3, [pc, #692]	@ (8007918 <PC_show_Keys+0x340>)
 8007664:	781a      	ldrb	r2, [r3, #0]
 8007666:	4bae      	ldr	r3, [pc, #696]	@ (8007920 <PC_show_Keys+0x348>)
 8007668:	0011      	movs	r1, r2
 800766a:	0018      	movs	r0, r3
 800766c:	f7ff ff99 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8007670:	4bb3      	ldr	r3, [pc, #716]	@ (8007940 <PC_show_Keys+0x368>)
 8007672:	48b4      	ldr	r0, [pc, #720]	@ (8007944 <PC_show_Keys+0x36c>)
 8007674:	220c      	movs	r2, #12
 8007676:	0019      	movs	r1, r3
 8007678:	f002 fd7a 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 800767c:	4ab0      	ldr	r2, [pc, #704]	@ (8007940 <PC_show_Keys+0x368>)
 800767e:	4bab      	ldr	r3, [pc, #684]	@ (800792c <PC_show_Keys+0x354>)
 8007680:	0011      	movs	r1, r2
 8007682:	0018      	movs	r0, r3
 8007684:	f7fd fa52 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 8007688:	4aa8      	ldr	r2, [pc, #672]	@ (800792c <PC_show_Keys+0x354>)
 800768a:	49af      	ldr	r1, [pc, #700]	@ (8007948 <PC_show_Keys+0x370>)
 800768c:	4ba4      	ldr	r3, [pc, #656]	@ (8007920 <PC_show_Keys+0x348>)
 800768e:	0018      	movs	r0, r3
 8007690:	f01c f8dc 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007694:	4ba0      	ldr	r3, [pc, #640]	@ (8007918 <PC_show_Keys+0x340>)
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	4ba1      	ldr	r3, [pc, #644]	@ (8007920 <PC_show_Keys+0x348>)
 800769a:	0011      	movs	r1, r2
 800769c:	0018      	movs	r0, r3
 800769e:	f7ff ff80 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 80076a2:	4baa      	ldr	r3, [pc, #680]	@ (800794c <PC_show_Keys+0x374>)
 80076a4:	48aa      	ldr	r0, [pc, #680]	@ (8007950 <PC_show_Keys+0x378>)
 80076a6:	220c      	movs	r2, #12
 80076a8:	0019      	movs	r1, r3
 80076aa:	f002 fd61 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 80076ae:	4aa7      	ldr	r2, [pc, #668]	@ (800794c <PC_show_Keys+0x374>)
 80076b0:	4b9e      	ldr	r3, [pc, #632]	@ (800792c <PC_show_Keys+0x354>)
 80076b2:	0011      	movs	r1, r2
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7fd fa39 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 80076ba:	4a9c      	ldr	r2, [pc, #624]	@ (800792c <PC_show_Keys+0x354>)
 80076bc:	49a5      	ldr	r1, [pc, #660]	@ (8007954 <PC_show_Keys+0x37c>)
 80076be:	4b98      	ldr	r3, [pc, #608]	@ (8007920 <PC_show_Keys+0x348>)
 80076c0:	0018      	movs	r0, r3
 80076c2:	f01c f8c3 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076c6:	4b94      	ldr	r3, [pc, #592]	@ (8007918 <PC_show_Keys+0x340>)
 80076c8:	781a      	ldrb	r2, [r3, #0]
 80076ca:	4b95      	ldr	r3, [pc, #596]	@ (8007920 <PC_show_Keys+0x348>)
 80076cc:	0011      	movs	r1, r2
 80076ce:	0018      	movs	r0, r3
 80076d0:	f7ff ff67 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80076d4:	4ba0      	ldr	r3, [pc, #640]	@ (8007958 <PC_show_Keys+0x380>)
 80076d6:	48a1      	ldr	r0, [pc, #644]	@ (800795c <PC_show_Keys+0x384>)
 80076d8:	220c      	movs	r2, #12
 80076da:	0019      	movs	r1, r3
 80076dc:	f002 fd48 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80076e0:	4a9d      	ldr	r2, [pc, #628]	@ (8007958 <PC_show_Keys+0x380>)
 80076e2:	4b92      	ldr	r3, [pc, #584]	@ (800792c <PC_show_Keys+0x354>)
 80076e4:	0011      	movs	r1, r2
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7fd fa20 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80076ec:	4a8f      	ldr	r2, [pc, #572]	@ (800792c <PC_show_Keys+0x354>)
 80076ee:	499c      	ldr	r1, [pc, #624]	@ (8007960 <PC_show_Keys+0x388>)
 80076f0:	4b8b      	ldr	r3, [pc, #556]	@ (8007920 <PC_show_Keys+0x348>)
 80076f2:	0018      	movs	r0, r3
 80076f4:	f01c f8aa 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076f8:	4b87      	ldr	r3, [pc, #540]	@ (8007918 <PC_show_Keys+0x340>)
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	4b88      	ldr	r3, [pc, #544]	@ (8007920 <PC_show_Keys+0x348>)
 80076fe:	0011      	movs	r1, r2
 8007700:	0018      	movs	r0, r3
 8007702:	f7ff ff4e 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, soundConfig, IdSize);
 8007706:	4b97      	ldr	r3, [pc, #604]	@ (8007964 <PC_show_Keys+0x38c>)
 8007708:	4897      	ldr	r0, [pc, #604]	@ (8007968 <PC_show_Keys+0x390>)
 800770a:	220c      	movs	r2, #12
 800770c:	0019      	movs	r1, r3
 800770e:	f002 fd2f 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8007712:	4a94      	ldr	r2, [pc, #592]	@ (8007964 <PC_show_Keys+0x38c>)
 8007714:	4b85      	ldr	r3, [pc, #532]	@ (800792c <PC_show_Keys+0x354>)
 8007716:	0011      	movs	r1, r2
 8007718:	0018      	movs	r0, r3
 800771a:	f7fd fa07 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 800771e:	4a93      	ldr	r2, [pc, #588]	@ (800796c <PC_show_Keys+0x394>)
 8007720:	4b7f      	ldr	r3, [pc, #508]	@ (8007920 <PC_show_Keys+0x348>)
 8007722:	0011      	movs	r1, r2
 8007724:	0018      	movs	r0, r3
 8007726:	f01c f891 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 800772a:	4b7b      	ldr	r3, [pc, #492]	@ (8007918 <PC_show_Keys+0x340>)
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	4b7c      	ldr	r3, [pc, #496]	@ (8007920 <PC_show_Keys+0x348>)
 8007730:	0011      	movs	r1, r2
 8007732:	0018      	movs	r0, r3
 8007734:	f7ff ff35 	bl	80075a2 <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 8007738:	4a7c      	ldr	r2, [pc, #496]	@ (800792c <PC_show_Keys+0x354>)
 800773a:	498d      	ldr	r1, [pc, #564]	@ (8007970 <PC_show_Keys+0x398>)
 800773c:	4b78      	ldr	r3, [pc, #480]	@ (8007920 <PC_show_Keys+0x348>)
 800773e:	0018      	movs	r0, r3
 8007740:	f01c f884 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007744:	4b74      	ldr	r3, [pc, #464]	@ (8007918 <PC_show_Keys+0x340>)
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	4b75      	ldr	r3, [pc, #468]	@ (8007920 <PC_show_Keys+0x348>)
 800774a:	0011      	movs	r1, r2
 800774c:	0018      	movs	r0, r3
 800774e:	f7ff ff28 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8007752:	4b84      	ldr	r3, [pc, #528]	@ (8007964 <PC_show_Keys+0x38c>)
 8007754:	4887      	ldr	r0, [pc, #540]	@ (8007974 <PC_show_Keys+0x39c>)
 8007756:	220c      	movs	r2, #12
 8007758:	0019      	movs	r1, r3
 800775a:	f002 fd09 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 800775e:	4a81      	ldr	r2, [pc, #516]	@ (8007964 <PC_show_Keys+0x38c>)
 8007760:	4b72      	ldr	r3, [pc, #456]	@ (800792c <PC_show_Keys+0x354>)
 8007762:	0011      	movs	r1, r2
 8007764:	0018      	movs	r0, r3
 8007766:	f7fd f9e1 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 800776a:	4a83      	ldr	r2, [pc, #524]	@ (8007978 <PC_show_Keys+0x3a0>)
 800776c:	4b6c      	ldr	r3, [pc, #432]	@ (8007920 <PC_show_Keys+0x348>)
 800776e:	0011      	movs	r1, r2
 8007770:	0018      	movs	r0, r3
 8007772:	f01c f86b 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007776:	4b68      	ldr	r3, [pc, #416]	@ (8007918 <PC_show_Keys+0x340>)
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	4b69      	ldr	r3, [pc, #420]	@ (8007920 <PC_show_Keys+0x348>)
 800777c:	0011      	movs	r1, r2
 800777e:	0018      	movs	r0, r3
 8007780:	f7ff ff0f 	bl	80075a2 <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 8007784:	4a69      	ldr	r2, [pc, #420]	@ (800792c <PC_show_Keys+0x354>)
 8007786:	497d      	ldr	r1, [pc, #500]	@ (800797c <PC_show_Keys+0x3a4>)
 8007788:	4b65      	ldr	r3, [pc, #404]	@ (8007920 <PC_show_Keys+0x348>)
 800778a:	0018      	movs	r0, r3
 800778c:	f01c f85e 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007790:	4b61      	ldr	r3, [pc, #388]	@ (8007918 <PC_show_Keys+0x340>)
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	4b62      	ldr	r3, [pc, #392]	@ (8007920 <PC_show_Keys+0x348>)
 8007796:	0011      	movs	r1, r2
 8007798:	0018      	movs	r0, r3
 800779a:	f7ff ff02 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800779e:	4b78      	ldr	r3, [pc, #480]	@ (8007980 <PC_show_Keys+0x3a8>)
 80077a0:	4878      	ldr	r0, [pc, #480]	@ (8007984 <PC_show_Keys+0x3ac>)
 80077a2:	2220      	movs	r2, #32
 80077a4:	0019      	movs	r1, r3
 80077a6:	f002 fce3 	bl	800a170 <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 80077aa:	4a77      	ldr	r2, [pc, #476]	@ (8007988 <PC_show_Keys+0x3b0>)
 80077ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007920 <PC_show_Keys+0x348>)
 80077ae:	0011      	movs	r1, r2
 80077b0:	0018      	movs	r0, r3
 80077b2:	f01c f84b 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077b6:	4b58      	ldr	r3, [pc, #352]	@ (8007918 <PC_show_Keys+0x340>)
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	4b59      	ldr	r3, [pc, #356]	@ (8007920 <PC_show_Keys+0x348>)
 80077bc:	0011      	movs	r1, r2
 80077be:	0018      	movs	r0, r3
 80077c0:	f7ff feef 	bl	80075a2 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 80077c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007980 <PC_show_Keys+0x3a8>)
 80077c6:	4971      	ldr	r1, [pc, #452]	@ (800798c <PC_show_Keys+0x3b4>)
 80077c8:	4b55      	ldr	r3, [pc, #340]	@ (8007920 <PC_show_Keys+0x348>)
 80077ca:	0018      	movs	r0, r3
 80077cc:	f01c f83e 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077d0:	4b51      	ldr	r3, [pc, #324]	@ (8007918 <PC_show_Keys+0x340>)
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	4b52      	ldr	r3, [pc, #328]	@ (8007920 <PC_show_Keys+0x348>)
 80077d6:	0011      	movs	r1, r2
 80077d8:	0018      	movs	r0, r3
 80077da:	f7ff fee2 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80077de:	4b6c      	ldr	r3, [pc, #432]	@ (8007990 <PC_show_Keys+0x3b8>)
 80077e0:	486c      	ldr	r0, [pc, #432]	@ (8007994 <PC_show_Keys+0x3bc>)
 80077e2:	220c      	movs	r2, #12
 80077e4:	0019      	movs	r1, r3
 80077e6:	f002 fcc3 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80077ea:	4a69      	ldr	r2, [pc, #420]	@ (8007990 <PC_show_Keys+0x3b8>)
 80077ec:	4b4f      	ldr	r3, [pc, #316]	@ (800792c <PC_show_Keys+0x354>)
 80077ee:	0011      	movs	r1, r2
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7fd f99b 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80077f6:	4a4d      	ldr	r2, [pc, #308]	@ (800792c <PC_show_Keys+0x354>)
 80077f8:	4967      	ldr	r1, [pc, #412]	@ (8007998 <PC_show_Keys+0x3c0>)
 80077fa:	4b49      	ldr	r3, [pc, #292]	@ (8007920 <PC_show_Keys+0x348>)
 80077fc:	0018      	movs	r0, r3
 80077fe:	f01c f825 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007802:	4b45      	ldr	r3, [pc, #276]	@ (8007918 <PC_show_Keys+0x340>)
 8007804:	781a      	ldrb	r2, [r3, #0]
 8007806:	4b46      	ldr	r3, [pc, #280]	@ (8007920 <PC_show_Keys+0x348>)
 8007808:	0011      	movs	r1, r2
 800780a:	0018      	movs	r0, r3
 800780c:	f7ff fec9 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8007810:	4b62      	ldr	r3, [pc, #392]	@ (800799c <PC_show_Keys+0x3c4>)
 8007812:	4863      	ldr	r0, [pc, #396]	@ (80079a0 <PC_show_Keys+0x3c8>)
 8007814:	220c      	movs	r2, #12
 8007816:	0019      	movs	r1, r3
 8007818:	f002 fcaa 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 800781c:	4a5f      	ldr	r2, [pc, #380]	@ (800799c <PC_show_Keys+0x3c4>)
 800781e:	4b43      	ldr	r3, [pc, #268]	@ (800792c <PC_show_Keys+0x354>)
 8007820:	0011      	movs	r1, r2
 8007822:	0018      	movs	r0, r3
 8007824:	f7fd f982 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 8007828:	4a40      	ldr	r2, [pc, #256]	@ (800792c <PC_show_Keys+0x354>)
 800782a:	495e      	ldr	r1, [pc, #376]	@ (80079a4 <PC_show_Keys+0x3cc>)
 800782c:	4b3c      	ldr	r3, [pc, #240]	@ (8007920 <PC_show_Keys+0x348>)
 800782e:	0018      	movs	r0, r3
 8007830:	f01c f80c 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007834:	4b38      	ldr	r3, [pc, #224]	@ (8007918 <PC_show_Keys+0x340>)
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	4b39      	ldr	r3, [pc, #228]	@ (8007920 <PC_show_Keys+0x348>)
 800783a:	0011      	movs	r1, r2
 800783c:	0018      	movs	r0, r3
 800783e:	f7ff feb0 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8007842:	4b59      	ldr	r3, [pc, #356]	@ (80079a8 <PC_show_Keys+0x3d0>)
 8007844:	4859      	ldr	r0, [pc, #356]	@ (80079ac <PC_show_Keys+0x3d4>)
 8007846:	220c      	movs	r2, #12
 8007848:	0019      	movs	r1, r3
 800784a:	f002 fc91 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 800784e:	4a56      	ldr	r2, [pc, #344]	@ (80079a8 <PC_show_Keys+0x3d0>)
 8007850:	4b36      	ldr	r3, [pc, #216]	@ (800792c <PC_show_Keys+0x354>)
 8007852:	0011      	movs	r1, r2
 8007854:	0018      	movs	r0, r3
 8007856:	f7fd f969 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 800785a:	4a34      	ldr	r2, [pc, #208]	@ (800792c <PC_show_Keys+0x354>)
 800785c:	4954      	ldr	r1, [pc, #336]	@ (80079b0 <PC_show_Keys+0x3d8>)
 800785e:	4b30      	ldr	r3, [pc, #192]	@ (8007920 <PC_show_Keys+0x348>)
 8007860:	0018      	movs	r0, r3
 8007862:	f01b fff3 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007866:	4b2c      	ldr	r3, [pc, #176]	@ (8007918 <PC_show_Keys+0x340>)
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	4b2d      	ldr	r3, [pc, #180]	@ (8007920 <PC_show_Keys+0x348>)
 800786c:	0011      	movs	r1, r2
 800786e:	0018      	movs	r0, r3
 8007870:	f7ff fe97 	bl	80075a2 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8007874:	4b4f      	ldr	r3, [pc, #316]	@ (80079b4 <PC_show_Keys+0x3dc>)
 8007876:	4850      	ldr	r0, [pc, #320]	@ (80079b8 <PC_show_Keys+0x3e0>)
 8007878:	220c      	movs	r2, #12
 800787a:	0019      	movs	r1, r3
 800787c:	f002 fc78 	bl	800a170 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8007880:	4a4c      	ldr	r2, [pc, #304]	@ (80079b4 <PC_show_Keys+0x3dc>)
 8007882:	4b2a      	ldr	r3, [pc, #168]	@ (800792c <PC_show_Keys+0x354>)
 8007884:	0011      	movs	r1, r2
 8007886:	0018      	movs	r0, r3
 8007888:	f7fd f950 	bl	8004b2c <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 800788c:	4a27      	ldr	r2, [pc, #156]	@ (800792c <PC_show_Keys+0x354>)
 800788e:	494b      	ldr	r1, [pc, #300]	@ (80079bc <PC_show_Keys+0x3e4>)
 8007890:	4b23      	ldr	r3, [pc, #140]	@ (8007920 <PC_show_Keys+0x348>)
 8007892:	0018      	movs	r0, r3
 8007894:	f01b ffda 	bl	802384c <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007898:	4b1f      	ldr	r3, [pc, #124]	@ (8007918 <PC_show_Keys+0x340>)
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	4b20      	ldr	r3, [pc, #128]	@ (8007920 <PC_show_Keys+0x348>)
 800789e:	0011      	movs	r1, r2
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7ff fe7e 	bl	80075a2 <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 80078a6:	4b46      	ldr	r3, [pc, #280]	@ (80079c0 <PC_show_Keys+0x3e8>)
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7ff fe55 	bl	8007558 <printf_USB>
  HAL_Delay(10);
 80078ae:	200a      	movs	r0, #10
 80078b0:	f00a fc2a 	bl	8012108 <HAL_Delay>
  printf_USB("Command example for air pressure => #5,6a\r\n");
 80078b4:	4b43      	ldr	r3, [pc, #268]	@ (80079c4 <PC_show_Keys+0x3ec>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f7ff fe4e 	bl	8007558 <printf_USB>
  HAL_Delay(10);
 80078bc:	200a      	movs	r0, #10
 80078be:	f00a fc23 	bl	8012108 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 80078c2:	4b41      	ldr	r3, [pc, #260]	@ (80079c8 <PC_show_Keys+0x3f0>)
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7ff fe47 	bl	8007558 <printf_USB>
  HAL_Delay(10);
 80078ca:	200a      	movs	r0, #10
 80078cc:	f00a fc1c 	bl	8012108 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 80078d0:	4b3e      	ldr	r3, [pc, #248]	@ (80079cc <PC_show_Keys+0x3f4>)
 80078d2:	0018      	movs	r0, r3
 80078d4:	f7ff fe40 	bl	8007558 <printf_USB>
  HAL_Delay(10);
 80078d8:	200a      	movs	r0, #10
 80078da:	f00a fc15 	bl	8012108 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 80078de:	4b3c      	ldr	r3, [pc, #240]	@ (80079d0 <PC_show_Keys+0x3f8>)
 80078e0:	0018      	movs	r0, r3
 80078e2:	f7ff fe39 	bl	8007558 <printf_USB>
  HAL_Delay(10);
 80078e6:	200a      	movs	r0, #10
 80078e8:	f00a fc0e 	bl	8012108 <HAL_Delay>
  printf_USB(" $5,67af09374cdef30007b35055\r\n");
 80078ec:	4b39      	ldr	r3, [pc, #228]	@ (80079d4 <PC_show_Keys+0x3fc>)
 80078ee:	0018      	movs	r0, r3
 80078f0:	f7ff fe32 	bl	8007558 <printf_USB>
  HAL_Delay(10);
 80078f4:	200a      	movs	r0, #10
 80078f6:	f00a fc07 	bl	8012108 <HAL_Delay>
  if (!usb_out) {
 80078fa:	4b07      	ldr	r3, [pc, #28]	@ (8007918 <PC_show_Keys+0x340>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2201      	movs	r2, #1
 8007900:	4053      	eors	r3, r2
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <PC_show_Keys+0x338>
    printf("A key can only be changed by USB input.\r\n");
 8007908:	4b33      	ldr	r3, [pc, #204]	@ (80079d8 <PC_show_Keys+0x400>)
 800790a:	0018      	movs	r0, r3
 800790c:	f01b ff94 	bl	8023838 <puts>
  }
}
 8007910:	46c0      	nop			@ (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	46c0      	nop			@ (mov r8, r8)
 8007918:	200009fd 	.word	0x200009fd
 800791c:	080289e0 	.word	0x080289e0
 8007920:	20000a00 	.word	0x20000a00
 8007924:	20000a40 	.word	0x20000a40
 8007928:	08080000 	.word	0x08080000
 800792c:	20000a4c 	.word	0x20000a4c
 8007930:	080289fc 	.word	0x080289fc
 8007934:	20000a68 	.word	0x20000a68
 8007938:	0808000c 	.word	0x0808000c
 800793c:	08028a20 	.word	0x08028a20
 8007940:	20000a74 	.word	0x20000a74
 8007944:	08080018 	.word	0x08080018
 8007948:	08028a44 	.word	0x08028a44
 800794c:	20000a80 	.word	0x20000a80
 8007950:	08080024 	.word	0x08080024
 8007954:	08028a68 	.word	0x08028a68
 8007958:	20000a8c 	.word	0x20000a8c
 800795c:	08080030 	.word	0x08080030
 8007960:	08028a8c 	.word	0x08028a8c
 8007964:	20000a98 	.word	0x20000a98
 8007968:	0808003c 	.word	0x0808003c
 800796c:	08028ab0 	.word	0x08028ab0
 8007970:	08028acc 	.word	0x08028acc
 8007974:	08080048 	.word	0x08080048
 8007978:	08028af0 	.word	0x08028af0
 800797c:	08028b04 	.word	0x08028b04
 8007980:	20000aa4 	.word	0x20000aa4
 8007984:	08080090 	.word	0x08080090
 8007988:	08028b28 	.word	0x08028b28
 800798c:	08028b48 	.word	0x08028b48
 8007990:	20000ac4 	.word	0x20000ac4
 8007994:	08080078 	.word	0x08080078
 8007998:	08028b50 	.word	0x08028b50
 800799c:	20000ad0 	.word	0x20000ad0
 80079a0:	0808006c 	.word	0x0808006c
 80079a4:	08028b74 	.word	0x08028b74
 80079a8:	20000adc 	.word	0x20000adc
 80079ac:	08080060 	.word	0x08080060
 80079b0:	08028b98 	.word	0x08028b98
 80079b4:	20000ae8 	.word	0x20000ae8
 80079b8:	08080054 	.word	0x08080054
 80079bc:	08028bbc 	.word	0x08028bbc
 80079c0:	08028be0 	.word	0x08028be0
 80079c4:	08028c10 	.word	0x08028c10
 80079c8:	08028c3c 	.word	0x08028c3c
 80079cc:	08028c78 	.word	0x08028c78
 80079d0:	08028cb0 	.word	0x08028cb0
 80079d4:	08028ce4 	.word	0x08028ce4
 80079d8:	08028d04 	.word	0x08028d04

080079dc <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b0c5      	sub	sp, #276	@ 0x114
 80079e0:	af3e      	add	r7, sp, #248	@ 0xf8
 80079e2:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint32_t len = 5;
  uint32_t length = GetUsbRxDataSize();
 80079e4:	f018 fe7e 	bl	80206e4 <GetUsbRxDataSize>
 80079e8:	0003      	movs	r3, r0
 80079ea:	613b      	str	r3, [r7, #16]
  static uint8_t r = 0;
//  uint8_t* message;
  static char Buffer[24];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2124      	movs	r1, #36	@ 0x24
 80079f0:	0018      	movs	r0, r3
 80079f2:	f01c f899 	bl	8023b28 <strchr>
 80079f6:	0003      	movs	r3, r0
 80079f8:	60fb      	str	r3, [r7, #12]
  if ((length == 1) && (message != NULL) && (len != 27)){
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10f      	bne.n	8007a20 <Process_USB_input+0x44>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00c      	beq.n	8007a20 <Process_USB_input+0x44>
 8007a06:	4bab      	ldr	r3, [pc, #684]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b1b      	cmp	r3, #27
 8007a0c:	d008      	beq.n	8007a20 <Process_USB_input+0x44>
      Debug("Switching to input length of 27 for full opensensemap keylength");
 8007a0e:	4aaa      	ldr	r2, [pc, #680]	@ (8007cb8 <Process_USB_input+0x2dc>)
 8007a10:	4baa      	ldr	r3, [pc, #680]	@ (8007cbc <Process_USB_input+0x2e0>)
 8007a12:	0019      	movs	r1, r3
 8007a14:	2003      	movs	r0, #3
 8007a16:	f009 ff21 	bl	801185c <CreateLine>
      len = 27;
 8007a1a:	4ba6      	ldr	r3, [pc, #664]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007a1c:	221b      	movs	r2, #27
 8007a1e:	601a      	str	r2, [r3, #0]
  }
  if (length > len) {
 8007a20:	4ba4      	ldr	r3, [pc, #656]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d800      	bhi.n	8007a2c <Process_USB_input+0x50>
 8007a2a:	e12c      	b.n	8007c86 <Process_USB_input+0x2aa>
//    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
    printf_USB("USB input: %s\r\n", (const char*)data);
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4ba4      	ldr	r3, [pc, #656]	@ (8007cc0 <Process_USB_input+0x2e4>)
 8007a30:	0011      	movs	r1, r2
 8007a32:	0018      	movs	r0, r3
 8007a34:	f7ff fd90 	bl	8007558 <printf_USB>
    message = (unsigned char*)data;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]
    if (message[0] == '$') {
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b24      	cmp	r3, #36	@ 0x24
 8007a42:	d102      	bne.n	8007a4a <Process_USB_input+0x6e>
      len = 27;
 8007a44:	4b9b      	ldr	r3, [pc, #620]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007a46:	221b      	movs	r2, #27
 8007a48:	601a      	str	r2, [r3, #0]
    }
    if((message[0] == '#') || (message[0] == '$')) {
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b23      	cmp	r3, #35	@ 0x23
 8007a50:	d004      	beq.n	8007a5c <Process_USB_input+0x80>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b24      	cmp	r3, #36	@ 0x24
 8007a58:	d000      	beq.n	8007a5c <Process_USB_input+0x80>
 8007a5a:	e0f7      	b.n	8007c4c <Process_USB_input+0x270>
      received.Command = (message[1] & 0x0F);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	220f      	movs	r2, #15
 8007a64:	4013      	ands	r3, r2
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	4b96      	ldr	r3, [pc, #600]	@ (8007cc4 <Process_USB_input+0x2e8>)
 8007a6a:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3302      	adds	r3, #2
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b2c      	cmp	r3, #44	@ 0x2c
 8007a74:	d000      	beq.n	8007a78 <Process_USB_input+0x9c>
 8007a76:	e0e2      	b.n	8007c3e <Process_USB_input+0x262>
        for (uint8_t i=3; i < len; i++) {
 8007a78:	2317      	movs	r3, #23
 8007a7a:	18fb      	adds	r3, r7, r3
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e084      	b.n	8007b8c <Process_USB_input+0x1b0>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
          HAL_Delay(10);
 8007a82:	200a      	movs	r0, #10
 8007a84:	f00a fb40 	bl	8012108 <HAL_Delay>
          if (isxdigit(message[i])) {
 8007a88:	2117      	movs	r1, #23
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	18d3      	adds	r3, r2, r3
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	4b8c      	ldr	r3, [pc, #560]	@ (8007cc8 <Process_USB_input+0x2ec>)
 8007a98:	18d3      	adds	r3, r2, r3
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	001a      	movs	r2, r3
 8007a9e:	2344      	movs	r3, #68	@ 0x44
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	d05c      	beq.n	8007b5e <Process_USB_input+0x182>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8007aa4:	4b89      	ldr	r3, [pc, #548]	@ (8007ccc <Process_USB_input+0x2f0>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	b25a      	sxtb	r2, r3
 8007aac:	0008      	movs	r0, r1
 8007aae:	187b      	adds	r3, r7, r1
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	68f9      	ldr	r1, [r7, #12]
 8007ab4:	18cb      	adds	r3, r1, r3
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	1c59      	adds	r1, r3, #1
 8007aba:	4b83      	ldr	r3, [pc, #524]	@ (8007cc8 <Process_USB_input+0x2ec>)
 8007abc:	18cb      	adds	r3, r1, r3
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	0019      	movs	r1, r3
 8007ac2:	2304      	movs	r3, #4
 8007ac4:	400b      	ands	r3, r1
 8007ac6:	d008      	beq.n	8007ada <Process_USB_input+0xfe>
 8007ac8:	183b      	adds	r3, r7, r0
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	18cb      	adds	r3, r1, r3
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	3b30      	subs	r3, #48	@ 0x30
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	e01e      	b.n	8007b18 <Process_USB_input+0x13c>
 8007ada:	2317      	movs	r3, #23
 8007adc:	18fb      	adds	r3, r7, r3
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	18c9      	adds	r1, r1, r3
 8007ae4:	200b      	movs	r0, #11
 8007ae6:	183b      	adds	r3, r7, r0
 8007ae8:	7809      	ldrb	r1, [r1, #0]
 8007aea:	7019      	strb	r1, [r3, #0]
 8007aec:	183b      	adds	r3, r7, r0
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	1c59      	adds	r1, r3, #1
 8007af2:	4b75      	ldr	r3, [pc, #468]	@ (8007cc8 <Process_USB_input+0x2ec>)
 8007af4:	18cb      	adds	r3, r1, r3
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	0019      	movs	r1, r3
 8007afa:	2303      	movs	r3, #3
 8007afc:	400b      	ands	r3, r1
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d103      	bne.n	8007b0a <Process_USB_input+0x12e>
 8007b02:	183b      	adds	r3, r7, r0
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	3b20      	subs	r3, #32
 8007b08:	e002      	b.n	8007b10 <Process_USB_input+0x134>
 8007b0a:	230b      	movs	r3, #11
 8007b0c:	18fb      	adds	r3, r7, r3
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	3b37      	subs	r3, #55	@ 0x37
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8007ccc <Process_USB_input+0x2f0>)
 8007b20:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%2X\r\n", result);
            HAL_Delay(10);
 8007b22:	200a      	movs	r0, #10
 8007b24:	f00a faf0 	bl	8012108 <HAL_Delay>
            if (len == 27) {
 8007b28:	4b62      	ldr	r3, [pc, #392]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b1b      	cmp	r3, #27
 8007b2e:	d127      	bne.n	8007b80 <Process_USB_input+0x1a4>
              if ((i % 2) == 0) {
 8007b30:	2317      	movs	r3, #23
 8007b32:	18fb      	adds	r3, r7, r3
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2201      	movs	r2, #1
 8007b38:	4013      	ands	r3, r2
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11f      	bne.n	8007b80 <Process_USB_input+0x1a4>
                message[r] = result;
 8007b40:	4b63      	ldr	r3, [pc, #396]	@ (8007cd0 <Process_USB_input+0x2f4>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	001a      	movs	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	189b      	adds	r3, r3, r2
 8007b4a:	4a60      	ldr	r2, [pc, #384]	@ (8007ccc <Process_USB_input+0x2f0>)
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	701a      	strb	r2, [r3, #0]
                r++;
 8007b50:	4b5f      	ldr	r3, [pc, #380]	@ (8007cd0 <Process_USB_input+0x2f4>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	4b5d      	ldr	r3, [pc, #372]	@ (8007cd0 <Process_USB_input+0x2f4>)
 8007b5a:	701a      	strb	r2, [r3, #0]
 8007b5c:	e010      	b.n	8007b80 <Process_USB_input+0x1a4>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 8007b5e:	2017      	movs	r0, #23
 8007b60:	183b      	adds	r3, r7, r0
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	18d3      	adds	r3, r2, r3
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	183b      	adds	r3, r7, r0
 8007b6e:	781a      	ldrb	r2, [r3, #0]
 8007b70:	4b58      	ldr	r3, [pc, #352]	@ (8007cd4 <Process_USB_input+0x2f8>)
 8007b72:	0018      	movs	r0, r3
 8007b74:	f7ff fcf0 	bl	8007558 <printf_USB>
            ResetUsbRxDataSize();
 8007b78:	f018 fd9c 	bl	80206b4 <ResetUsbRxDataSize>
            return false; // Of een andere foutwaarde
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e095      	b.n	8007cac <Process_USB_input+0x2d0>
        for (uint8_t i=3; i < len; i++) {
 8007b80:	2117      	movs	r1, #23
 8007b82:	187b      	adds	r3, r7, r1
 8007b84:	781a      	ldrb	r2, [r3, #0]
 8007b86:	187b      	adds	r3, r7, r1
 8007b88:	3201      	adds	r2, #1
 8007b8a:	701a      	strb	r2, [r3, #0]
 8007b8c:	2317      	movs	r3, #23
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	781a      	ldrb	r2, [r3, #0]
 8007b92:	4b48      	ldr	r3, [pc, #288]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d200      	bcs.n	8007b9c <Process_USB_input+0x1c0>
 8007b9a:	e772      	b.n	8007a82 <Process_USB_input+0xa6>
          }
        }
        if (len == 5) {
 8007b9c:	4b45      	ldr	r3, [pc, #276]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b05      	cmp	r3, #5
 8007ba2:	d112      	bne.n	8007bca <Process_USB_input+0x1ee>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8007ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8007cd8 <Process_USB_input+0x2fc>)
 8007ba6:	484d      	ldr	r0, [pc, #308]	@ (8007cdc <Process_USB_input+0x300>)
 8007ba8:	220c      	movs	r2, #12
 8007baa:	0019      	movs	r1, r3
 8007bac:	f002 fae0 	bl	800a170 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 8007bb0:	4b46      	ldr	r3, [pc, #280]	@ (8007ccc <Process_USB_input+0x2f0>)
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	4b48      	ldr	r3, [pc, #288]	@ (8007cd8 <Process_USB_input+0x2fc>)
 8007bb6:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8007bb8:	4b42      	ldr	r3, [pc, #264]	@ (8007cc4 <Process_USB_input+0x2e8>)
 8007bba:	2202      	movs	r2, #2
 8007bbc:	4946      	ldr	r1, [pc, #280]	@ (8007cd8 <Process_USB_input+0x2fc>)
 8007bbe:	189b      	adds	r3, r3, r2
 8007bc0:	220c      	movs	r2, #12
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f01c f884 	bl	8023cd0 <memcpy>
 8007bc8:	e005      	b.n	8007bd6 <Process_USB_input+0x1fa>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	4b44      	ldr	r3, [pc, #272]	@ (8007ce0 <Process_USB_input+0x304>)
 8007bce:	220c      	movs	r2, #12
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f01c f87d 	bl	8023cd0 <memcpy>
        }
        received.PayloadLength = IdSize;
 8007bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc4 <Process_USB_input+0x2e8>)
 8007bd8:	220c      	movs	r2, #12
 8007bda:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8007bdc:	4a40      	ldr	r2, [pc, #256]	@ (8007ce0 <Process_USB_input+0x304>)
 8007bde:	4b41      	ldr	r3, [pc, #260]	@ (8007ce4 <Process_USB_input+0x308>)
 8007be0:	0011      	movs	r1, r2
 8007be2:	0018      	movs	r0, r3
 8007be4:	f7fc ffa2 	bl	8004b2c <uint8ArrayToString>
        ProcessCmd(received);
 8007be8:	4c36      	ldr	r4, [pc, #216]	@ (8007cc4 <Process_USB_input+0x2e8>)
 8007bea:	466b      	mov	r3, sp
 8007bec:	0018      	movs	r0, r3
 8007bee:	0023      	movs	r3, r4
 8007bf0:	3310      	adds	r3, #16
 8007bf2:	22f4      	movs	r2, #244	@ 0xf4
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	f01c f86b 	bl	8023cd0 <memcpy>
 8007bfa:	6820      	ldr	r0, [r4, #0]
 8007bfc:	6861      	ldr	r1, [r4, #4]
 8007bfe:	68a2      	ldr	r2, [r4, #8]
 8007c00:	68e3      	ldr	r3, [r4, #12]
 8007c02:	f7ff fb1b 	bl	800723c <ProcessCmd>
        ResetUsbRxDataSize();
 8007c06:	f018 fd55 	bl	80206b4 <ResetUsbRxDataSize>
        PC_show_Keys();
 8007c0a:	f7ff fce5 	bl	80075d8 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8007c0e:	2316      	movs	r3, #22
 8007c10:	18fb      	adds	r3, r7, r3
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
 8007c16:	e00b      	b.n	8007c30 <Process_USB_input+0x254>
          data[i] = '\0';
 8007c18:	2116      	movs	r1, #22
 8007c1a:	187b      	adds	r3, r7, r1
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	18d3      	adds	r3, r2, r3
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8007c26:	187b      	adds	r3, r7, r1
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	3201      	adds	r2, #1
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	2316      	movs	r3, #22
 8007c32:	18fb      	adds	r3, r7, r3
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b1f      	cmp	r3, #31
 8007c38:	d9ee      	bls.n	8007c18 <Process_USB_input+0x23c>
        }
        return true;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e036      	b.n	8007cac <Process_USB_input+0x2d0>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8007c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce8 <Process_USB_input+0x30c>)
 8007c40:	0018      	movs	r0, r3
 8007c42:	f7ff fc89 	bl	8007558 <printf_USB>
        ResetUsbRxDataSize();
 8007c46:	f018 fd35 	bl	80206b4 <ResetUsbRxDataSize>
      if (message[2] == ',') {
 8007c4a:	e006      	b.n	8007c5a <Process_USB_input+0x27e>
      }
    }
    else {
      len = 5;
 8007c4c:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <Process_USB_input+0x2d8>)
 8007c4e:	2205      	movs	r2, #5
 8007c50:	601a      	str	r2, [r3, #0]
      PC_show_Keys();
 8007c52:	f7ff fcc1 	bl	80075d8 <PC_show_Keys>
      ResetUsbRxDataSize();
 8007c56:	f018 fd2d 	bl	80206b4 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 32; i++) {
 8007c5a:	2315      	movs	r3, #21
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e00b      	b.n	8007c7c <Process_USB_input+0x2a0>
      data[i] = '\0';
 8007c64:	2115      	movs	r1, #21
 8007c66:	187b      	adds	r3, r7, r1
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	18d3      	adds	r3, r2, r3
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8007c72:	187b      	adds	r3, r7, r1
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	3201      	adds	r2, #1
 8007c7a:	701a      	strb	r2, [r3, #0]
 8007c7c:	2315      	movs	r3, #21
 8007c7e:	18fb      	adds	r3, r7, r3
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b1f      	cmp	r3, #31
 8007c84:	d9ee      	bls.n	8007c64 <Process_USB_input+0x288>
    }

  }
  if (formerlength != length) {
 8007c86:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <Process_USB_input+0x310>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d008      	beq.n	8007ca2 <Process_USB_input+0x2c6>
    printf_USB("USB input: %s\r", (const char*)data);
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <Process_USB_input+0x314>)
 8007c94:	0011      	movs	r1, r2
 8007c96:	0018      	movs	r0, r3
 8007c98:	f7ff fc5e 	bl	8007558 <printf_USB>
    formerlength = length;
 8007c9c:	4b13      	ldr	r3, [pc, #76]	@ (8007cec <Process_USB_input+0x310>)
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	f018 fd27 	bl	80206f8 <GetUsbRxNextChunk>

  return false;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	0018      	movs	r0, r3
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	b007      	add	sp, #28
 8007cb2:	bd90      	pop	{r4, r7, pc}
 8007cb4:	20000030 	.word	0x20000030
 8007cb8:	08028d30 	.word	0x08028d30
 8007cbc:	08028d70 	.word	0x08028d70
 8007cc0:	08028d74 	.word	0x08028d74
 8007cc4:	200007ec 	.word	0x200007ec
 8007cc8:	0802b808 	.word	0x0802b808
 8007ccc:	200008f0 	.word	0x200008f0
 8007cd0:	20000af4 	.word	0x20000af4
 8007cd4:	08028d84 	.word	0x08028d84
 8007cd8:	20000af8 	.word	0x20000af8
 8007cdc:	08080000 	.word	0x08080000
 8007ce0:	200007ee 	.word	0x200007ee
 8007ce4:	20000b04 	.word	0x20000b04
 8007ce8:	08028dbc 	.word	0x08028dbc
 8007cec:	200008f4 	.word	0x200008f4
 8007cf0:	08028de8 	.word	0x08028de8

08007cf4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8007cf8:	4b26      	ldr	r3, [pc, #152]	@ (8007d94 <ReadBatteryVoltage+0xa0>)
 8007cfa:	4a27      	ldr	r2, [pc, #156]	@ (8007d98 <ReadBatteryVoltage+0xa4>)
 8007cfc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007cfe:	4b25      	ldr	r3, [pc, #148]	@ (8007d94 <ReadBatteryVoltage+0xa0>)
 8007d00:	2280      	movs	r2, #128	@ 0x80
 8007d02:	0152      	lsls	r2, r2, #5
 8007d04:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007d06:	4a23      	ldr	r2, [pc, #140]	@ (8007d94 <ReadBatteryVoltage+0xa0>)
 8007d08:	4b24      	ldr	r3, [pc, #144]	@ (8007d9c <ReadBatteryVoltage+0xa8>)
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f00a fcc9 	bl	80126a4 <HAL_ADC_ConfigChannel>
 8007d12:	1e03      	subs	r3, r0, #0
 8007d14:	d001      	beq.n	8007d1a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8007d16:	f003 facb 	bl	800b2b0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8007d1a:	4b20      	ldr	r3, [pc, #128]	@ (8007d9c <ReadBatteryVoltage+0xa8>)
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f00a fbc5 	bl	80124ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8007d22:	4b1e      	ldr	r3, [pc, #120]	@ (8007d9c <ReadBatteryVoltage+0xa8>)
 8007d24:	2101      	movs	r1, #1
 8007d26:	0018      	movs	r0, r3
 8007d28:	f00a fc14 	bl	8012554 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8007d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d9c <ReadBatteryVoltage+0xa8>)
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f00a fcac 	bl	801268c <HAL_ADC_GetValue>
 8007d34:	0002      	movs	r2, r0
 8007d36:	4b1a      	ldr	r3, [pc, #104]	@ (8007da0 <ReadBatteryVoltage+0xac>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4353      	muls	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4919      	ldr	r1, [pc, #100]	@ (8007da4 <ReadBatteryVoltage+0xb0>)
 8007d40:	0018      	movs	r0, r3
 8007d42:	f7f8 fa2f 	bl	80001a4 <__udivsi3>
 8007d46:	0003      	movs	r3, r0
 8007d48:	001a      	movs	r2, r3
 8007d4a:	4b17      	ldr	r3, [pc, #92]	@ (8007da8 <ReadBatteryVoltage+0xb4>)
 8007d4c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8007d4e:	4b16      	ldr	r3, [pc, #88]	@ (8007da8 <ReadBatteryVoltage+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	0018      	movs	r0, r3
 8007d54:	f7f9 fc88 	bl	8001668 <__aeabi_ui2f>
 8007d58:	1c03      	adds	r3, r0, #0
 8007d5a:	4914      	ldr	r1, [pc, #80]	@ (8007dac <ReadBatteryVoltage+0xb8>)
 8007d5c:	1c18      	adds	r0, r3, #0
 8007d5e:	f7f8 ff39 	bl	8000bd4 <__aeabi_fdiv>
 8007d62:	1c03      	adds	r3, r0, #0
 8007d64:	1c1a      	adds	r2, r3, #0
 8007d66:	4b12      	ldr	r3, [pc, #72]	@ (8007db0 <ReadBatteryVoltage+0xbc>)
 8007d68:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d94 <ReadBatteryVoltage+0xa0>)
 8007d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d98 <ReadBatteryVoltage+0xa4>)
 8007d6e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8007d70:	4b08      	ldr	r3, [pc, #32]	@ (8007d94 <ReadBatteryVoltage+0xa0>)
 8007d72:	4a10      	ldr	r2, [pc, #64]	@ (8007db4 <ReadBatteryVoltage+0xc0>)
 8007d74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007d76:	4a07      	ldr	r2, [pc, #28]	@ (8007d94 <ReadBatteryVoltage+0xa0>)
 8007d78:	4b08      	ldr	r3, [pc, #32]	@ (8007d9c <ReadBatteryVoltage+0xa8>)
 8007d7a:	0011      	movs	r1, r2
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f00a fc91 	bl	80126a4 <HAL_ADC_ConfigChannel>
 8007d82:	1e03      	subs	r3, r0, #0
 8007d84:	d001      	beq.n	8007d8a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8007d86:	f003 fa93 	bl	800b2b0 <Error_Handler>
  }
  return trueValue;
 8007d8a:	4b09      	ldr	r3, [pc, #36]	@ (8007db0 <ReadBatteryVoltage+0xbc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 }
 8007d8e:	1c18      	adds	r0, r3, #0
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000b1c 	.word	0x20000b1c
 8007d98:	38004000 	.word	0x38004000
 8007d9c:	20000b58 	.word	0x20000b58
 8007da0:	20000034 	.word	0x20000034
 8007da4:	00000fff 	.word	0x00000fff
 8007da8:	20000b24 	.word	0x20000b24
 8007dac:	447a0000 	.word	0x447a0000
 8007db0:	20000b28 	.word	0x20000b28
 8007db4:	00001001 	.word	0x00001001

08007db8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8007dbc:	4b21      	ldr	r3, [pc, #132]	@ (8007e44 <ReadSolarVoltage+0x8c>)
 8007dbe:	4a22      	ldr	r2, [pc, #136]	@ (8007e48 <ReadSolarVoltage+0x90>)
 8007dc0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007dc2:	4b20      	ldr	r3, [pc, #128]	@ (8007e44 <ReadSolarVoltage+0x8c>)
 8007dc4:	2280      	movs	r2, #128	@ 0x80
 8007dc6:	0152      	lsls	r2, r2, #5
 8007dc8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007dca:	4a1e      	ldr	r2, [pc, #120]	@ (8007e44 <ReadSolarVoltage+0x8c>)
 8007dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8007e4c <ReadSolarVoltage+0x94>)
 8007dce:	0011      	movs	r1, r2
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f00a fc67 	bl	80126a4 <HAL_ADC_ConfigChannel>
 8007dd6:	1e03      	subs	r3, r0, #0
 8007dd8:	d001      	beq.n	8007dde <ReadSolarVoltage+0x26>
    Error_Handler();
 8007dda:	f003 fa69 	bl	800b2b0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8007dde:	4b1b      	ldr	r3, [pc, #108]	@ (8007e4c <ReadSolarVoltage+0x94>)
 8007de0:	0018      	movs	r0, r3
 8007de2:	f00a fb63 	bl	80124ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8007de6:	4b19      	ldr	r3, [pc, #100]	@ (8007e4c <ReadSolarVoltage+0x94>)
 8007de8:	2101      	movs	r1, #1
 8007dea:	0018      	movs	r0, r3
 8007dec:	f00a fbb2 	bl	8012554 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8007df0:	4b16      	ldr	r3, [pc, #88]	@ (8007e4c <ReadSolarVoltage+0x94>)
 8007df2:	0018      	movs	r0, r3
 8007df4:	f00a fc4a 	bl	801268c <HAL_ADC_GetValue>
 8007df8:	0002      	movs	r2, r0
 8007dfa:	4b15      	ldr	r3, [pc, #84]	@ (8007e50 <ReadSolarVoltage+0x98>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	435a      	muls	r2, r3
 8007e00:	0013      	movs	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	189b      	adds	r3, r3, r2
 8007e06:	4913      	ldr	r1, [pc, #76]	@ (8007e54 <ReadSolarVoltage+0x9c>)
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f7f8 f9cb 	bl	80001a4 <__udivsi3>
 8007e0e:	0003      	movs	r3, r0
 8007e10:	001a      	movs	r2, r3
 8007e12:	4b11      	ldr	r3, [pc, #68]	@ (8007e58 <ReadSolarVoltage+0xa0>)
 8007e14:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8007e16:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <ReadSolarVoltage+0x8c>)
 8007e18:	4a0b      	ldr	r2, [pc, #44]	@ (8007e48 <ReadSolarVoltage+0x90>)
 8007e1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8007e1c:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <ReadSolarVoltage+0x8c>)
 8007e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8007e5c <ReadSolarVoltage+0xa4>)
 8007e20:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007e22:	4a08      	ldr	r2, [pc, #32]	@ (8007e44 <ReadSolarVoltage+0x8c>)
 8007e24:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <ReadSolarVoltage+0x94>)
 8007e26:	0011      	movs	r1, r2
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f00a fc3b 	bl	80126a4 <HAL_ADC_ConfigChannel>
 8007e2e:	1e03      	subs	r3, r0, #0
 8007e30:	d001      	beq.n	8007e36 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8007e32:	f003 fa3d 	bl	800b2b0 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8007e36:	4b08      	ldr	r3, [pc, #32]	@ (8007e58 <ReadSolarVoltage+0xa0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 }
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	20000b1c 	.word	0x20000b1c
 8007e48:	3c008000 	.word	0x3c008000
 8007e4c:	20000b58 	.word	0x20000b58
 8007e50:	20000034 	.word	0x20000034
 8007e54:	00000fff 	.word	0x00000fff
 8007e58:	20000b2c 	.word	0x20000b2c
 8007e5c:	00001001 	.word	0x00001001

08007e60 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8007e64:	23a0      	movs	r3, #160	@ 0xa0
 8007e66:	05db      	lsls	r3, r3, #23
 8007e68:	2180      	movs	r1, #128	@ 0x80
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f00b fbb6 	bl	80135dc <HAL_GPIO_ReadPin>
 8007e70:	0003      	movs	r3, r0
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	4193      	sbcs	r3, r2
 8007e76:	b2db      	uxtb	r3, r3
}
 8007e78:	0018      	movs	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8007e82:	2380      	movs	r3, #128	@ 0x80
 8007e84:	021a      	lsls	r2, r3, #8
 8007e86:	23a0      	movs	r3, #160	@ 0xa0
 8007e88:	05db      	lsls	r3, r3, #23
 8007e8a:	0011      	movs	r1, r2
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f00b fba5 	bl	80135dc <HAL_GPIO_ReadPin>
 8007e92:	0003      	movs	r3, r0
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	4193      	sbcs	r3, r2
 8007e98:	b2db      	uxtb	r3, r3
}
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8007ea4:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <UserButton_Pressed+0x1c>)
 8007ea6:	2104      	movs	r1, #4
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f00b fb97 	bl	80135dc <HAL_GPIO_ReadPin>
 8007eae:	0003      	movs	r3, r0
 8007eb0:	425a      	negs	r2, r3
 8007eb2:	4153      	adcs	r3, r2
 8007eb4:	b2db      	uxtb	r3, r3
}
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	50000c00 	.word	0x50000c00

08007ec0 <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8007ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ec2:	46d6      	mov	lr, sl
 8007ec4:	464f      	mov	r7, r9
 8007ec6:	4646      	mov	r6, r8
 8007ec8:	b5c0      	push	{r6, r7, lr}
 8007eca:	b08e      	sub	sp, #56	@ 0x38
 8007ecc:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8007ece:	4b21      	ldr	r3, [pc, #132]	@ (8007f54 <showTime+0x94>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d036      	beq.n	8007f44 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007ed6:	003a      	movs	r2, r7
 8007ed8:	1d3b      	adds	r3, r7, #4
 8007eda:	0011      	movs	r1, r2
 8007edc:	0018      	movs	r0, r3
 8007ede:	f000 fa3f 	bl	8008360 <RTC_GetTime>
  UpdateSystemUptime();
 8007ee2:	f000 f853 	bl	8007f8c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007ee6:	003b      	movs	r3, r7
 8007ee8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007eea:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007eec:	003b      	movs	r3, r7
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ef2:	4b19      	ldr	r3, [pc, #100]	@ (8007f58 <showTime+0x98>)
 8007ef4:	0092      	lsls	r2, r2, #2
 8007ef6:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007ef8:	003b      	movs	r3, r7
 8007efa:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007efc:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007efe:	1d3b      	adds	r3, r7, #4
 8007f00:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f02:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007f04:	1d3b      	adds	r3, r7, #4
 8007f06:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f08:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f0a:	1d3b      	adds	r3, r7, #4
 8007f0c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f0e:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f10:	4b12      	ldr	r3, [pc, #72]	@ (8007f5c <showTime+0x9c>)
 8007f12:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f14:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f16:	4b11      	ldr	r3, [pc, #68]	@ (8007f5c <showTime+0x9c>)
 8007f18:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f1a:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f5c <showTime+0x9c>)
 8007f1e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f20:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f22:	4b0e      	ldr	r3, [pc, #56]	@ (8007f5c <showTime+0x9c>)
 8007f24:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f26:	480e      	ldr	r0, [pc, #56]	@ (8007f60 <showTime+0xa0>)
 8007f28:	9306      	str	r3, [sp, #24]
 8007f2a:	4643      	mov	r3, r8
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	4663      	mov	r3, ip
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	9603      	str	r6, [sp, #12]
 8007f34:	9502      	str	r5, [sp, #8]
 8007f36:	9401      	str	r4, [sp, #4]
 8007f38:	9100      	str	r1, [sp, #0]
 8007f3a:	4653      	mov	r3, sl
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	f01b fc15 	bl	802376c <iprintf>
 8007f42:	e000      	b.n	8007f46 <showTime+0x86>
    return;
 8007f44:	46c0      	nop			@ (mov r8, r8)
}
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b006      	add	sp, #24
 8007f4a:	bce0      	pop	{r5, r6, r7}
 8007f4c:	46ba      	mov	sl, r7
 8007f4e:	46b1      	mov	r9, r6
 8007f50:	46a8      	mov	r8, r5
 8007f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f54:	20000b3c 	.word	0x20000b3c
 8007f58:	20000054 	.word	0x20000054
 8007f5c:	20000b30 	.word	0x20000b30
 8007f60:	08028e44 	.word	0x08028e44

08007f64 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007f6a:	003a      	movs	r2, r7
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	0011      	movs	r1, r2
 8007f70:	0018      	movs	r0, r3
 8007f72:	f000 f9f5 	bl	8008360 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8007f76:	1d3a      	adds	r2, r7, #4
 8007f78:	003b      	movs	r3, r7
 8007f7a:	0011      	movs	r1, r2
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f000 fbc5 	bl	800870c <makeTime>
 8007f82:	0003      	movs	r3, r0
}
 8007f84:	0018      	movs	r0, r3
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b006      	add	sp, #24
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8007f92:	003a      	movs	r2, r7
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	0011      	movs	r1, r2
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f000 f9e1 	bl	8008360 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8007f9e:	1d3a      	adds	r2, r7, #4
 8007fa0:	003b      	movs	r3, r7
 8007fa2:	0011      	movs	r1, r2
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f000 fbb1 	bl	800870c <makeTime>
 8007faa:	0002      	movs	r2, r0
 8007fac:	4b1e      	ldr	r3, [pc, #120]	@ (8008028 <UpdateSystemUptime+0x9c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	213c      	movs	r1, #60	@ 0x3c
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f7f8 f977 	bl	80002b0 <__aeabi_uidivmod>
 8007fc2:	000b      	movs	r3, r1
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	4b19      	ldr	r3, [pc, #100]	@ (800802c <UpdateSystemUptime+0xa0>)
 8007fc8:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	213c      	movs	r1, #60	@ 0x3c
 8007fce:	0018      	movs	r0, r3
 8007fd0:	f7f8 f8e8 	bl	80001a4 <__udivsi3>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	213c      	movs	r1, #60	@ 0x3c
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f7f8 f967 	bl	80002b0 <__aeabi_uidivmod>
 8007fe2:	000b      	movs	r3, r1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	4b11      	ldr	r3, [pc, #68]	@ (800802c <UpdateSystemUptime+0xa0>)
 8007fe8:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	213c      	movs	r1, #60	@ 0x3c
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7f8 f8d8 	bl	80001a4 <__udivsi3>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2118      	movs	r1, #24
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f7f8 f957 	bl	80002b0 <__aeabi_uidivmod>
 8008002:	000b      	movs	r3, r1
 8008004:	b2da      	uxtb	r2, r3
 8008006:	4b09      	ldr	r3, [pc, #36]	@ (800802c <UpdateSystemUptime+0xa0>)
 8008008:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2118      	movs	r1, #24
 800800e:	0018      	movs	r0, r3
 8008010:	f7f8 f8c8 	bl	80001a4 <__udivsi3>
 8008014:	0003      	movs	r3, r0
 8008016:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	b29a      	uxth	r2, r3
 800801c:	4b03      	ldr	r3, [pc, #12]	@ (800802c <UpdateSystemUptime+0xa0>)
 800801e:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8008020:	46c0      	nop			@ (mov r8, r8)
 8008022:	46bd      	mov	sp, r7
 8008024:	b008      	add	sp, #32
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000b3c 	.word	0x20000b3c
 800802c:	20000b30 	.word	0x20000b30

08008030 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8008030:	b590      	push	{r4, r7, lr}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	0008      	movs	r0, r1
 800803a:	0011      	movs	r1, r2
 800803c:	1cfb      	adds	r3, r7, #3
 800803e:	1c02      	adds	r2, r0, #0
 8008040:	701a      	strb	r2, [r3, #0]
 8008042:	1cbb      	adds	r3, r7, #2
 8008044:	1c0a      	adds	r2, r1, #0
 8008046:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8008048:	230e      	movs	r3, #14
 800804a:	18fb      	adds	r3, r7, r3
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8008050:	230f      	movs	r3, #15
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	1cfa      	adds	r2, r7, #3
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	e015      	b.n	8008088 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800805c:	200f      	movs	r0, #15
 800805e:	183b      	adds	r3, r7, r0
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	18d2      	adds	r2, r2, r3
 8008066:	240e      	movs	r4, #14
 8008068:	193b      	adds	r3, r7, r4
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	7811      	ldrb	r1, [r2, #0]
 800806e:	2208      	movs	r2, #8
 8008070:	18ba      	adds	r2, r7, r2
 8008072:	54d1      	strb	r1, [r2, r3]
    pos++;
 8008074:	193b      	adds	r3, r7, r4
 8008076:	781a      	ldrb	r2, [r3, #0]
 8008078:	193b      	adds	r3, r7, r4
 800807a:	3201      	adds	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800807e:	183b      	adds	r3, r7, r0
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	183b      	adds	r3, r7, r0
 8008084:	3201      	adds	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	200f      	movs	r0, #15
 800808a:	183a      	adds	r2, r7, r0
 800808c:	1cbb      	adds	r3, r7, #2
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d9e2      	bls.n	800805c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8008096:	230e      	movs	r3, #14
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2208      	movs	r2, #8
 800809e:	18ba      	adds	r2, r7, r2
 80080a0:	2100      	movs	r1, #0
 80080a2:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80080a4:	1cfb      	adds	r3, r7, #3
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b13      	cmp	r3, #19
 80080aa:	d849      	bhi.n	8008140 <aBuff2int+0x110>
    if (start == 17) { //month
 80080ac:	1cfb      	adds	r3, r7, #3
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b11      	cmp	r3, #17
 80080b2:	d122      	bne.n	80080fa <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80080b4:	183b      	adds	r3, r7, r0
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e018      	b.n	80080ee <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80080bc:	240f      	movs	r4, #15
 80080be:	193b      	adds	r3, r7, r4
 80080c0:	781a      	ldrb	r2, [r3, #0]
 80080c2:	4b25      	ldr	r3, [pc, #148]	@ (8008158 <aBuff2int+0x128>)
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	58d2      	ldr	r2, [r2, r3]
 80080c8:	2308      	movs	r3, #8
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	0011      	movs	r1, r2
 80080ce:	0018      	movs	r0, r3
 80080d0:	f7f8 f842 	bl	8000158 <strcmp>
 80080d4:	1e03      	subs	r3, r0, #0
 80080d6:	d104      	bne.n	80080e2 <aBuff2int+0xb2>
          return i+1;
 80080d8:	193b      	adds	r3, r7, r4
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e035      	b.n	800814e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80080e2:	210f      	movs	r1, #15
 80080e4:	187b      	adds	r3, r7, r1
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	187b      	adds	r3, r7, r1
 80080ea:	3201      	adds	r2, #1
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	230f      	movs	r3, #15
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b0b      	cmp	r3, #11
 80080f6:	d9e1      	bls.n	80080bc <aBuff2int+0x8c>
 80080f8:	e022      	b.n	8008140 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80080fa:	230f      	movs	r3, #15
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e018      	b.n	8008136 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8008104:	240f      	movs	r4, #15
 8008106:	193b      	adds	r3, r7, r4
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	4b14      	ldr	r3, [pc, #80]	@ (800815c <aBuff2int+0x12c>)
 800810c:	0092      	lsls	r2, r2, #2
 800810e:	58d2      	ldr	r2, [r2, r3]
 8008110:	2308      	movs	r3, #8
 8008112:	18fb      	adds	r3, r7, r3
 8008114:	0011      	movs	r1, r2
 8008116:	0018      	movs	r0, r3
 8008118:	f7f8 f81e 	bl	8000158 <strcmp>
 800811c:	1e03      	subs	r3, r0, #0
 800811e:	d104      	bne.n	800812a <aBuff2int+0xfa>
          return i+1;
 8008120:	193b      	adds	r3, r7, r4
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	e011      	b.n	800814e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800812a:	210f      	movs	r1, #15
 800812c:	187b      	adds	r3, r7, r1
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	187b      	adds	r3, r7, r1
 8008132:	3201      	adds	r2, #1
 8008134:	701a      	strb	r2, [r3, #0]
 8008136:	230f      	movs	r3, #15
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b06      	cmp	r3, #6
 800813e:	d9e1      	bls.n	8008104 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8008140:	2308      	movs	r3, #8
 8008142:	18fb      	adds	r3, r7, r3
 8008144:	0018      	movs	r0, r3
 8008146:	f019 ff36 	bl	8021fb6 <atoi>
 800814a:	0003      	movs	r3, r0
 800814c:	b2db      	uxtb	r3, r3
}
 800814e:	0018      	movs	r0, r3
 8008150:	46bd      	mov	sp, r7
 8008152:	b005      	add	sp, #20
 8008154:	bd90      	pop	{r4, r7, pc}
 8008156:	46c0      	nop			@ (mov r8, r8)
 8008158:	20000054 	.word	0x20000054
 800815c:	20000038 	.word	0x20000038

08008160 <ParseTime>:

void ParseTime(char* buffer) {
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	b08b      	sub	sp, #44	@ 0x2c
 8008164:	af02      	add	r7, sp, #8
 8008166:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008168:	2408      	movs	r4, #8
 800816a:	193a      	adds	r2, r7, r4
 800816c:	260c      	movs	r6, #12
 800816e:	19bb      	adds	r3, r7, r6
 8008170:	0011      	movs	r1, r2
 8008172:	0018      	movs	r0, r3
 8008174:	f000 f8f4 	bl	8008360 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2219      	movs	r2, #25
 800817c:	2118      	movs	r1, #24
 800817e:	0018      	movs	r0, r3
 8008180:	f7ff ff56 	bl	8008030 <aBuff2int>
 8008184:	0003      	movs	r3, r0
 8008186:	001a      	movs	r2, r3
 8008188:	19bb      	adds	r3, r7, r6
 800818a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	221c      	movs	r2, #28
 8008190:	211b      	movs	r1, #27
 8008192:	0018      	movs	r0, r3
 8008194:	f7ff ff4c 	bl	8008030 <aBuff2int>
 8008198:	0003      	movs	r3, r0
 800819a:	001a      	movs	r2, r3
 800819c:	19bb      	adds	r3, r7, r6
 800819e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	221f      	movs	r2, #31
 80081a4:	211e      	movs	r1, #30
 80081a6:	0018      	movs	r0, r3
 80081a8:	f7ff ff42 	bl	8008030 <aBuff2int>
 80081ac:	0003      	movs	r3, r0
 80081ae:	001a      	movs	r2, r3
 80081b0:	19bb      	adds	r3, r7, r6
 80081b2:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2224      	movs	r2, #36	@ 0x24
 80081b8:	2123      	movs	r1, #35	@ 0x23
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7ff ff38 	bl	8008030 <aBuff2int>
 80081c0:	0003      	movs	r3, r0
 80081c2:	001a      	movs	r2, r3
 80081c4:	0025      	movs	r5, r4
 80081c6:	197b      	adds	r3, r7, r5
 80081c8:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2213      	movs	r2, #19
 80081ce:	2111      	movs	r1, #17
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7ff ff2d 	bl	8008030 <aBuff2int>
 80081d6:	0003      	movs	r3, r0
 80081d8:	001a      	movs	r2, r3
 80081da:	197b      	adds	r3, r7, r5
 80081dc:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2216      	movs	r2, #22
 80081e2:	2115      	movs	r1, #21
 80081e4:	0018      	movs	r0, r3
 80081e6:	f7ff ff23 	bl	8008030 <aBuff2int>
 80081ea:	0003      	movs	r3, r0
 80081ec:	001a      	movs	r2, r3
 80081ee:	197b      	adds	r3, r7, r5
 80081f0:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	220f      	movs	r2, #15
 80081f6:	210d      	movs	r1, #13
 80081f8:	0018      	movs	r0, r3
 80081fa:	f7ff ff19 	bl	8008030 <aBuff2int>
 80081fe:	0003      	movs	r3, r0
 8008200:	001a      	movs	r2, r3
 8008202:	197b      	adds	r3, r7, r5
 8008204:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8008206:	19bb      	adds	r3, r7, r6
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	001c      	movs	r4, r3
 800820c:	19bb      	adds	r3, r7, r6
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	0018      	movs	r0, r3
 8008212:	19bb      	adds	r3, r7, r6
 8008214:	789b      	ldrb	r3, [r3, #2]
 8008216:	4a1c      	ldr	r2, [pc, #112]	@ (8008288 <ParseTime+0x128>)
 8008218:	491c      	ldr	r1, [pc, #112]	@ (800828c <ParseTime+0x12c>)
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	9000      	str	r0, [sp, #0]
 800821e:	0023      	movs	r3, r4
 8008220:	2003      	movs	r0, #3
 8008222:	f009 fb1b 	bl	801185c <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8008226:	197b      	adds	r3, r7, r5
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	001c      	movs	r4, r3
 800822c:	197b      	adds	r3, r7, r5
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	0018      	movs	r0, r3
 8008232:	197b      	adds	r3, r7, r5
 8008234:	78db      	ldrb	r3, [r3, #3]
 8008236:	4a16      	ldr	r2, [pc, #88]	@ (8008290 <ParseTime+0x130>)
 8008238:	4914      	ldr	r1, [pc, #80]	@ (800828c <ParseTime+0x12c>)
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	9000      	str	r0, [sp, #0]
 800823e:	0023      	movs	r3, r4
 8008240:	2003      	movs	r0, #3
 8008242:	f009 fb0b 	bl	801185c <CreateLine>
  RTC_SetTime(&currentTime);
 8008246:	19bb      	adds	r3, r7, r6
 8008248:	0018      	movs	r0, r3
 800824a:	f000 f825 	bl	8008298 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800824e:	197b      	adds	r3, r7, r5
 8008250:	0018      	movs	r0, r3
 8008252:	f000 f847 	bl	80082e4 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8008256:	197b      	adds	r3, r7, r5
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d101      	bne.n	8008262 <ParseTime+0x102>
    reset_fanCleaningDone();
 800825e:	f004 f913 	bl	800c488 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8008262:	4b0c      	ldr	r3, [pc, #48]	@ (8008294 <ParseTime+0x134>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10a      	bne.n	8008280 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800826a:	230c      	movs	r3, #12
 800826c:	18fa      	adds	r2, r7, r3
 800826e:	2308      	movs	r3, #8
 8008270:	18fb      	adds	r3, r7, r3
 8008272:	0011      	movs	r1, r2
 8008274:	0018      	movs	r0, r3
 8008276:	f000 fa49 	bl	800870c <makeTime>
 800827a:	0002      	movs	r2, r0
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <ParseTime+0x134>)
 800827e:	601a      	str	r2, [r3, #0]
  }
}
 8008280:	46c0      	nop			@ (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b009      	add	sp, #36	@ 0x24
 8008286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008288:	08028e9c 	.word	0x08028e9c
 800828c:	08028ed4 	.word	0x08028ed4
 8008290:	08028ed8 	.word	0x08028ed8
 8008294:	20000b3c 	.word	0x20000b3c

08008298 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <RTC_SetTime+0x40>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	0018      	movs	r0, r3
 80082bc:	f011 fad2 	bl	8019864 <HAL_RTC_SetTime>
 80082c0:	1e03      	subs	r3, r0, #0
 80082c2:	d005      	beq.n	80082d0 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80082c4:	4a05      	ldr	r2, [pc, #20]	@ (80082dc <RTC_SetTime+0x44>)
 80082c6:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <RTC_SetTime+0x48>)
 80082c8:	0019      	movs	r1, r3
 80082ca:	2001      	movs	r0, #1
 80082cc:	f009 fac6 	bl	801185c <CreateLine>
    }
}
 80082d0:	46c0      	nop			@ (mov r8, r8)
 80082d2:	46bd      	mov	sp, r7
 80082d4:	b002      	add	sp, #8
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000b38 	.word	0x20000b38
 80082dc:	08028f0c 	.word	0x08028f0c
 80082e0:	08028f28 	.word	0x08028f28

080082e4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80082ec:	4b16      	ldr	r3, [pc, #88]	@ (8008348 <RTC_SetDate+0x64>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	0018      	movs	r0, r3
 80082f6:	f011 fbbd 	bl	8019a74 <HAL_RTC_SetDate>
 80082fa:	1e03      	subs	r3, r0, #0
 80082fc:	d005      	beq.n	800830a <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80082fe:	4a13      	ldr	r2, [pc, #76]	@ (800834c <RTC_SetDate+0x68>)
 8008300:	4b13      	ldr	r3, [pc, #76]	@ (8008350 <RTC_SetDate+0x6c>)
 8008302:	0019      	movs	r1, r3
 8008304:	2001      	movs	r0, #1
 8008306:	f009 faa9 	bl	801185c <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800830a:	4b0f      	ldr	r3, [pc, #60]	@ (8008348 <RTC_SetDate+0x64>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2101      	movs	r1, #1
 8008310:	0018      	movs	r0, r3
 8008312:	f011 fef5 	bl	801a100 <HAL_RTCEx_BKUPRead>
 8008316:	0003      	movs	r3, r0
 8008318:	4a0e      	ldr	r2, [pc, #56]	@ (8008354 <RTC_SetDate+0x70>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d010      	beq.n	8008340 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800831e:	4a0e      	ldr	r2, [pc, #56]	@ (8008358 <RTC_SetDate+0x74>)
 8008320:	4b0e      	ldr	r3, [pc, #56]	@ (800835c <RTC_SetDate+0x78>)
 8008322:	0019      	movs	r1, r3
 8008324:	2003      	movs	r0, #3
 8008326:	f009 fa99 	bl	801185c <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800832a:	f010 fa1b 	bl	8018764 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800832e:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <RTC_SetDate+0x64>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a08      	ldr	r2, [pc, #32]	@ (8008354 <RTC_SetDate+0x70>)
 8008334:	2101      	movs	r1, #1
 8008336:	0018      	movs	r0, r3
 8008338:	f011 feca 	bl	801a0d0 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800833c:	f010 fa20 	bl	8018780 <HAL_PWR_DisableBkUpAccess>
    }
}
 8008340:	46c0      	nop			@ (mov r8, r8)
 8008342:	46bd      	mov	sp, r7
 8008344:	b002      	add	sp, #8
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000b38 	.word	0x20000b38
 800834c:	08028f2c 	.word	0x08028f2c
 8008350:	08028f28 	.word	0x08028f28
 8008354:	0000bebe 	.word	0x0000bebe
 8008358:	08028f48 	.word	0x08028f48
 800835c:	08028ed4 	.word	0x08028ed4

08008360 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8008360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800836a:	250f      	movs	r5, #15
 800836c:	197b      	adds	r3, r7, r5
 800836e:	2201      	movs	r2, #1
 8008370:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8008372:	230e      	movs	r3, #14
 8008374:	18fb      	adds	r3, r7, r3
 8008376:	2200      	movs	r2, #0
 8008378:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800837a:	260c      	movs	r6, #12
 800837c:	19bc      	adds	r4, r7, r6
 800837e:	f008 faff 	bl	8010980 <powerCheck>
 8008382:	0003      	movs	r3, r0
 8008384:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8008386:	19bb      	adds	r3, r7, r6
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800838e:	197b      	adds	r3, r7, r5
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	197b      	adds	r3, r7, r5
 8008394:	3201      	adds	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8008398:	230d      	movs	r3, #13
 800839a:	18fb      	adds	r3, r7, r3
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e039      	b.n	8008416 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80083a2:	4b23      	ldr	r3, [pc, #140]	@ (8008430 <RTC_GetTime+0xd0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	0018      	movs	r0, r3
 80083ac:	f011 fb04 	bl	80199b8 <HAL_RTC_GetTime>
 80083b0:	1e03      	subs	r3, r0, #0
 80083b2:	d005      	beq.n	80083c0 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80083b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <RTC_GetTime+0xd4>)
 80083b6:	4b20      	ldr	r3, [pc, #128]	@ (8008438 <RTC_GetTime+0xd8>)
 80083b8:	0019      	movs	r1, r3
 80083ba:	2001      	movs	r0, #1
 80083bc:	f009 fa4e 	bl	801185c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80083c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <RTC_GetTime+0xd0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	2200      	movs	r2, #0
 80083c8:	0018      	movs	r0, r3
 80083ca:	f011 fbe7 	bl	8019b9c <HAL_RTC_GetDate>
 80083ce:	1e03      	subs	r3, r0, #0
 80083d0:	d005      	beq.n	80083de <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80083d2:	4a1a      	ldr	r2, [pc, #104]	@ (800843c <RTC_GetTime+0xdc>)
 80083d4:	4b18      	ldr	r3, [pc, #96]	@ (8008438 <RTC_GetTime+0xd8>)
 80083d6:	0019      	movs	r1, r3
 80083d8:	2001      	movs	r0, #1
 80083da:	f009 fa3f 	bl	801185c <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80083de:	230c      	movs	r3, #12
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d110      	bne.n	800840a <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	210e      	movs	r1, #14
 80083ee:	187a      	adds	r2, r7, r1
 80083f0:	7812      	ldrb	r2, [r2, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d018      	beq.n	8008428 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80083f6:	187b      	adds	r3, r7, r1
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
        t++;
 80083fe:	210f      	movs	r1, #15
 8008400:	187b      	adds	r3, r7, r1
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	187b      	adds	r3, r7, r1
 8008406:	3201      	adds	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800840a:	210d      	movs	r1, #13
 800840c:	187b      	adds	r3, r7, r1
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	187b      	adds	r3, r7, r1
 8008412:	3201      	adds	r2, #1
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	230d      	movs	r3, #13
 8008418:	18fa      	adds	r2, r7, r3
 800841a:	230f      	movs	r3, #15
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d3bd      	bcc.n	80083a2 <RTC_GetTime+0x42>
 8008426:	e000      	b.n	800842a <RTC_GetTime+0xca>
      }
      else {
        return;
 8008428:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800842a:	46bd      	mov	sp, r7
 800842c:	b005      	add	sp, #20
 800842e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008430:	20000b38 	.word	0x20000b38
 8008434:	08028f60 	.word	0x08028f60
 8008438:	08028f28 	.word	0x08028f28
 800843c:	08028f7c 	.word	0x08028f7c

08008440 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008446:	003a      	movs	r2, r7
 8008448:	1d3b      	adds	r3, r7, #4
 800844a:	0011      	movs	r1, r2
 800844c:	0018      	movs	r0, r3
 800844e:	f7ff ff87 	bl	8008360 <RTC_GetTime>
  return currentDate.WeekDay;
 8008452:	003b      	movs	r3, r7
 8008454:	781b      	ldrb	r3, [r3, #0]
}
 8008456:	0018      	movs	r0, r3
 8008458:	46bd      	mov	sp, r7
 800845a:	b006      	add	sp, #24
 800845c:	bd80      	pop	{r7, pc}

0800845e <getPosixTime>:

uint32_t getPosixTime(void) {
 800845e:	b580      	push	{r7, lr}
 8008460:	b086      	sub	sp, #24
 8008462:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008464:	003a      	movs	r2, r7
 8008466:	1d3b      	adds	r3, r7, #4
 8008468:	0011      	movs	r1, r2
 800846a:	0018      	movs	r0, r3
 800846c:	f7ff ff78 	bl	8008360 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8008470:	1d3a      	adds	r2, r7, #4
 8008472:	003b      	movs	r3, r7
 8008474:	0011      	movs	r1, r2
 8008476:	0018      	movs	r0, r3
 8008478:	f000 f948 	bl	800870c <makeTime>
 800847c:	0003      	movs	r3, r0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b006      	add	sp, #24
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8008488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800848a:	b08d      	sub	sp, #52	@ 0x34
 800848c:	af04      	add	r7, sp, #16
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8008492:	240c      	movs	r4, #12
 8008494:	193a      	adds	r2, r7, r4
 8008496:	2508      	movs	r5, #8
 8008498:	1979      	adds	r1, r7, r5
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	0018      	movs	r0, r3
 800849e:	f000 f9ff 	bl	80088a0 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084a2:	002a      	movs	r2, r5
 80084a4:	18bb      	adds	r3, r7, r2
 80084a6:	789b      	ldrb	r3, [r3, #2]
 80084a8:	001e      	movs	r6, r3
 80084aa:	18bb      	adds	r3, r7, r2
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	469c      	mov	ip, r3
 80084b0:	18bb      	adds	r3, r7, r2
 80084b2:	78db      	ldrb	r3, [r3, #3]
 80084b4:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80084b6:	0021      	movs	r1, r4
 80084b8:	187b      	adds	r3, r7, r1
 80084ba:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084bc:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80084be:	187b      	adds	r3, r7, r1
 80084c0:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084c2:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80084c4:	187b      	adds	r3, r7, r1
 80084c6:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084c8:	4906      	ldr	r1, [pc, #24]	@ (80084e4 <getUTCfromPosixTime+0x5c>)
 80084ca:	6838      	ldr	r0, [r7, #0]
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	9502      	str	r5, [sp, #8]
 80084d0:	9401      	str	r4, [sp, #4]
 80084d2:	9200      	str	r2, [sp, #0]
 80084d4:	4663      	mov	r3, ip
 80084d6:	0032      	movs	r2, r6
 80084d8:	f01b f9b8 	bl	802384c <siprintf>
}
 80084dc:	46c0      	nop			@ (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b009      	add	sp, #36	@ 0x24
 80084e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e4:	08028f98 	.word	0x08028f98

080084e8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80084f0:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <RTC_SetWakeUpTimer+0x4c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f011 fd4f 	bl	8019f98 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80084fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008534 <RTC_SetWakeUpTimer+0x4c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	22ff      	movs	r2, #255	@ 0xff
 8008504:	401a      	ands	r2, r3
 8008506:	4b0b      	ldr	r3, [pc, #44]	@ (8008534 <RTC_SetWakeUpTimer+0x4c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	490a      	ldr	r1, [pc, #40]	@ (8008538 <RTC_SetWakeUpTimer+0x50>)
 800850e:	430a      	orrs	r2, r1
 8008510:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <RTC_SetWakeUpTimer+0x54>)
 8008514:	2280      	movs	r2, #128	@ 0x80
 8008516:	0352      	lsls	r2, r2, #13
 8008518:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800851a:	4b06      	ldr	r3, [pc, #24]	@ (8008534 <RTC_SetWakeUpTimer+0x4c>)
 800851c:	6818      	ldr	r0, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	3b01      	subs	r3, #1
 8008522:	2204      	movs	r2, #4
 8008524:	0019      	movs	r1, r3
 8008526:	f011 fc5f 	bl	8019de8 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	b002      	add	sp, #8
 8008530:	bd80      	pop	{r7, pc}
 8008532:	46c0      	nop			@ (mov r8, r8)
 8008534:	20000b38 	.word	0x20000b38
 8008538:	fffffb7f 	.word	0xfffffb7f
 800853c:	40010400 	.word	0x40010400

08008540 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8008544:	4a0b      	ldr	r2, [pc, #44]	@ (8008574 <Enter_Standby_Mode+0x34>)
 8008546:	4b0c      	ldr	r3, [pc, #48]	@ (8008578 <Enter_Standby_Mode+0x38>)
 8008548:	0019      	movs	r1, r3
 800854a:	2003      	movs	r0, #3
 800854c:	f009 f986 	bl	801185c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8008550:	2064      	movs	r0, #100	@ 0x64
 8008552:	f009 fdd9 	bl	8012108 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8008556:	4b09      	ldr	r3, [pc, #36]	@ (800857c <Enter_Standby_Mode+0x3c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	0018      	movs	r0, r3
 800855c:	f011 fd1c 	bl	8019f98 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8008560:	f002 f8e0 	bl	800a724 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8008564:	f009 fdf4 	bl	8012150 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8008568:	f010 f976 	bl	8018858 <HAL_PWR_EnterSTANDBYMode>
}
 800856c:	46c0      	nop			@ (mov r8, r8)
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	08028fec 	.word	0x08028fec
 8008578:	08028ed4 	.word	0x08028ed4
 800857c:	20000b38 	.word	0x20000b38

08008580 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af02      	add	r7, sp, #8
 8008586:	0002      	movs	r2, r0
 8008588:	1dbb      	adds	r3, r7, #6
 800858a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800858c:	4b4c      	ldr	r3, [pc, #304]	@ (80086c0 <Enter_Stop_Mode+0x140>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8008594:	f003 ff4c 	bl	800c430 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8008598:	f7ff fbac 	bl	8007cf4 <ReadBatteryVoltage>
 800859c:	1c03      	adds	r3, r0, #0
 800859e:	1c18      	adds	r0, r3, #0
 80085a0:	f7fa ff60 	bl	8003464 <__aeabi_f2d>
 80085a4:	0002      	movs	r2, r0
 80085a6:	000b      	movs	r3, r1
 80085a8:	4846      	ldr	r0, [pc, #280]	@ (80086c4 <Enter_Stop_Mode+0x144>)
 80085aa:	4947      	ldr	r1, [pc, #284]	@ (80086c8 <Enter_Stop_Mode+0x148>)
 80085ac:	9200      	str	r2, [sp, #0]
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	0002      	movs	r2, r0
 80085b2:	2002      	movs	r0, #2
 80085b4:	f009 f952 	bl	801185c <CreateLine>
  powerDisplay(powerCheck());
 80085b8:	f008 f9e2 	bl	8010980 <powerCheck>
 80085bc:	0003      	movs	r3, r0
 80085be:	0018      	movs	r0, r3
 80085c0:	f008 f9fa 	bl	80109b8 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80085c4:	1dbb      	adds	r3, r7, #6
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	4a40      	ldr	r2, [pc, #256]	@ (80086cc <Enter_Stop_Mode+0x14c>)
 80085ca:	4941      	ldr	r1, [pc, #260]	@ (80086d0 <Enter_Stop_Mode+0x150>)
 80085cc:	2003      	movs	r0, #3
 80085ce:	f009 f945 	bl	801185c <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80085d2:	f7ff ff44 	bl	800845e <getPosixTime>
 80085d6:	0002      	movs	r2, r0
 80085d8:	1dbb      	adds	r3, r7, #6
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	18d3      	adds	r3, r2, r3
 80085de:	4a3d      	ldr	r2, [pc, #244]	@ (80086d4 <Enter_Stop_Mode+0x154>)
 80085e0:	0011      	movs	r1, r2
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7ff ff50 	bl	8008488 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 80085e8:	4b3a      	ldr	r3, [pc, #232]	@ (80086d4 <Enter_Stop_Mode+0x154>)
 80085ea:	4a3b      	ldr	r2, [pc, #236]	@ (80086d8 <Enter_Stop_Mode+0x158>)
 80085ec:	4936      	ldr	r1, [pc, #216]	@ (80086c8 <Enter_Stop_Mode+0x148>)
 80085ee:	2002      	movs	r0, #2
 80085f0:	f009 f934 	bl	801185c <CreateLine>
  HAL_Delay(100);
 80085f4:	2064      	movs	r0, #100	@ 0x64
 80085f6:	f009 fd87 	bl	8012108 <HAL_Delay>
  HAL_SuspendTick();
 80085fa:	f009 fda9 	bl	8012150 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 80085fe:	1dbb      	adds	r3, r7, #6
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	0018      	movs	r0, r3
 8008604:	f7ff ff70 	bl	80084e8 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8008608:	2101      	movs	r1, #1
 800860a:	2001      	movs	r0, #1
 800860c:	f010 f8c8 	bl	80187a0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8008610:	f002 fcfe 	bl	800b010 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8008614:	f009 fdaa 	bl	801216c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8008618:	1dbb      	adds	r3, r7, #6
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	0018      	movs	r0, r3
 800861e:	f003 fe7b 	bl	800c318 <sen5x_enable>
 8008622:	1e03      	subs	r3, r0, #0
 8008624:	d01e      	beq.n	8008664 <Enter_Stop_Mode+0xe4>
    showTime();
 8008626:	f7ff fc4b 	bl	8007ec0 <showTime>
    set_light_on_state();
 800862a:	f004 fb83 	bl	800cd34 <set_light_on_state>
    if (!userToggle) {
 800862e:	4b2b      	ldr	r3, [pc, #172]	@ (80086dc <Enter_Stop_Mode+0x15c>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2201      	movs	r2, #1
 8008634:	4053      	eors	r3, r2
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d013      	beq.n	8008664 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800863c:	201c      	movs	r0, #28
 800863e:	f7ff ff53 	bl	80084e8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8008642:	4a22      	ldr	r2, [pc, #136]	@ (80086cc <Enter_Stop_Mode+0x14c>)
 8008644:	4922      	ldr	r1, [pc, #136]	@ (80086d0 <Enter_Stop_Mode+0x150>)
 8008646:	231c      	movs	r3, #28
 8008648:	2003      	movs	r0, #3
 800864a:	f009 f907 	bl	801185c <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800864e:	2101      	movs	r1, #1
 8008650:	2001      	movs	r0, #1
 8008652:	f010 f8a5 	bl	80187a0 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8008656:	f002 fcdb 	bl	800b010 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800865a:	f009 fd87 	bl	801216c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800865e:	2000      	movs	r0, #0
 8008660:	f003 fe38 	bl	800c2d4 <setsen5xReadTimer>
    }
  }
  showTime();
 8008664:	f7ff fc2c 	bl	8007ec0 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8008668:	f003 face 	bl	800bc08 <ResetDBACalculator>
  ResetSGP40samplecounter();
 800866c:	f006 f9be 	bl	800e9ec <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8008670:	2000      	movs	r0, #0
 8008672:	f003 fe41 	bl	800c2f8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8008676:	4b1a      	ldr	r3, [pc, #104]	@ (80086e0 <Enter_Stop_Mode+0x160>)
 8008678:	0018      	movs	r0, r3
 800867a:	f7fb fedf 	bl	800443c <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800867e:	201e      	movs	r0, #30
 8008680:	f006 f9a2 	bl	800e9c8 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8008684:	2000      	movs	r0, #0
 8008686:	f009 faad 	bl	8011be4 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800868a:	203c      	movs	r0, #60	@ 0x3c
 800868c:	f000 fb98 	bl	8008dc0 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8008690:	205a      	movs	r0, #90	@ 0x5a
 8008692:	f000 ff31 	bl	80094f8 <setBMP280TimeStamp>
  setENS160TimeStamp(90);
 8008696:	205a      	movs	r0, #90	@ 0x5a
 8008698:	f7fb f83a 	bl	8003710 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800869c:	2000      	movs	r0, #0
 800869e:	f003 faa1 	bl	800bbe4 <setMICTimeStamp>
  ESPTransmitDone = false;
 80086a2:	4b10      	ldr	r3, [pc, #64]	@ (80086e4 <Enter_Stop_Mode+0x164>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 80086a8:	f009 fd24 	bl	80120f4 <HAL_GetTick>
 80086ac:	0003      	movs	r3, r0
 80086ae:	4a0e      	ldr	r2, [pc, #56]	@ (80086e8 <Enter_Stop_Mode+0x168>)
 80086b0:	189a      	adds	r2, r3, r2
 80086b2:	4b0e      	ldr	r3, [pc, #56]	@ (80086ec <Enter_Stop_Mode+0x16c>)
 80086b4:	601a      	str	r2, [r3, #0]
}
 80086b6:	46c0      	nop			@ (mov r8, r8)
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b002      	add	sp, #8
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	46c0      	nop			@ (mov r8, r8)
 80086c0:	20000e9d 	.word	0x20000e9d
 80086c4:	08029010 	.word	0x08029010
 80086c8:	08029028 	.word	0x08029028
 80086cc:	0802902c 	.word	0x0802902c
 80086d0:	08028ed4 	.word	0x08028ed4
 80086d4:	20000b40 	.word	0x20000b40
 80086d8:	08029050 	.word	0x08029050
 80086dc:	20001e2e 	.word	0x20001e2e
 80086e0:	00001194 	.word	0x00001194
 80086e4:	200005bc 	.word	0x200005bc
 80086e8:	00000bb8 	.word	0x00000bb8
 80086ec:	20000df4 	.word	0x20000df4

080086f0 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 80086f8:	4b03      	ldr	r3, [pc, #12]	@ (8008708 <InitClock+0x18>)
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
}
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	20000b38 	.word	0x20000b38

0800870c <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	001a      	movs	r2, r3
 800871c:	0013      	movs	r3, r2
 800871e:	025b      	lsls	r3, r3, #9
 8008720:	189b      	adds	r3, r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	189b      	adds	r3, r3, r2
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	189b      	adds	r3, r3, r2
 800872a:	011a      	lsls	r2, r3, #4
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	01d3      	lsls	r3, r2, #7
 8008730:	001a      	movs	r2, r3
 8008732:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	e028      	b.n	800878c <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	4a53      	ldr	r2, [pc, #332]	@ (800888c <makeTime+0x180>)
 800873e:	4293      	cmp	r3, r2
 8008740:	db21      	blt.n	8008786 <makeTime+0x7a>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	4a52      	ldr	r2, [pc, #328]	@ (8008890 <makeTime+0x184>)
 8008746:	4694      	mov	ip, r2
 8008748:	4463      	add	r3, ip
 800874a:	001a      	movs	r2, r3
 800874c:	2303      	movs	r3, #3
 800874e:	4013      	ands	r3, r2
 8008750:	d119      	bne.n	8008786 <makeTime+0x7a>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a4e      	ldr	r2, [pc, #312]	@ (8008890 <makeTime+0x184>)
 8008756:	4694      	mov	ip, r2
 8008758:	4463      	add	r3, ip
 800875a:	2164      	movs	r1, #100	@ 0x64
 800875c:	0018      	movs	r0, r3
 800875e:	f7f7 fe91 	bl	8000484 <__aeabi_idivmod>
 8008762:	1e0b      	subs	r3, r1, #0
 8008764:	d10a      	bne.n	800877c <makeTime+0x70>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4a49      	ldr	r2, [pc, #292]	@ (8008890 <makeTime+0x184>)
 800876a:	4694      	mov	ip, r2
 800876c:	4463      	add	r3, ip
 800876e:	22c8      	movs	r2, #200	@ 0xc8
 8008770:	0051      	lsls	r1, r2, #1
 8008772:	0018      	movs	r0, r3
 8008774:	f7f7 fe86 	bl	8000484 <__aeabi_idivmod>
 8008778:	1e0b      	subs	r3, r1, #0
 800877a:	d104      	bne.n	8008786 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	4a45      	ldr	r2, [pc, #276]	@ (8008894 <makeTime+0x188>)
 8008780:	4694      	mov	ip, r2
 8008782:	4463      	add	r3, ip
 8008784:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	78db      	ldrb	r3, [r3, #3]
 8008790:	001a      	movs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4293      	cmp	r3, r2
 8008796:	dbd0      	blt.n	800873a <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8008798:	2301      	movs	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e03c      	b.n	8008818 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d125      	bne.n	80087f0 <makeTime+0xe4>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	78db      	ldrb	r3, [r3, #3]
 80087a8:	4a39      	ldr	r2, [pc, #228]	@ (8008890 <makeTime+0x184>)
 80087aa:	4694      	mov	ip, r2
 80087ac:	4463      	add	r3, ip
 80087ae:	001a      	movs	r2, r3
 80087b0:	2303      	movs	r3, #3
 80087b2:	4013      	ands	r3, r2
 80087b4:	d11c      	bne.n	80087f0 <makeTime+0xe4>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	78db      	ldrb	r3, [r3, #3]
 80087ba:	4a35      	ldr	r2, [pc, #212]	@ (8008890 <makeTime+0x184>)
 80087bc:	4694      	mov	ip, r2
 80087be:	4463      	add	r3, ip
 80087c0:	2164      	movs	r1, #100	@ 0x64
 80087c2:	0018      	movs	r0, r3
 80087c4:	f7f7 fe5e 	bl	8000484 <__aeabi_idivmod>
 80087c8:	1e0b      	subs	r3, r1, #0
 80087ca:	d10b      	bne.n	80087e4 <makeTime+0xd8>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	78db      	ldrb	r3, [r3, #3]
 80087d0:	4a2f      	ldr	r2, [pc, #188]	@ (8008890 <makeTime+0x184>)
 80087d2:	4694      	mov	ip, r2
 80087d4:	4463      	add	r3, ip
 80087d6:	22c8      	movs	r2, #200	@ 0xc8
 80087d8:	0051      	lsls	r1, r2, #1
 80087da:	0018      	movs	r0, r3
 80087dc:	f7f7 fe52 	bl	8000484 <__aeabi_idivmod>
 80087e0:	1e0b      	subs	r3, r1, #0
 80087e2:	d105      	bne.n	80087f0 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008898 <makeTime+0x18c>)
 80087e8:	4694      	mov	ip, r2
 80087ea:	4463      	add	r3, ip
 80087ec:	60bb      	str	r3, [r7, #8]
 80087ee:	e010      	b.n	8008812 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	4a29      	ldr	r2, [pc, #164]	@ (800889c <makeTime+0x190>)
 80087f6:	5cd3      	ldrb	r3, [r2, r3]
 80087f8:	001a      	movs	r2, r3
 80087fa:	0013      	movs	r3, r2
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	189b      	adds	r3, r3, r2
 8008800:	011a      	lsls	r2, r3, #4
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	0113      	lsls	r3, r2, #4
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	01db      	lsls	r3, r3, #7
 800880a:	001a      	movs	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	189b      	adds	r3, r3, r2
 8008810:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	001a      	movs	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	4293      	cmp	r3, r2
 8008822:	dbbc      	blt.n	800879e <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	789b      	ldrb	r3, [r3, #2]
 8008828:	3b01      	subs	r3, #1
 800882a:	001a      	movs	r2, r3
 800882c:	0013      	movs	r3, r2
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	189b      	adds	r3, r3, r2
 8008832:	011a      	lsls	r2, r3, #4
 8008834:	1ad2      	subs	r2, r2, r3
 8008836:	0113      	lsls	r3, r2, #4
 8008838:	1a9b      	subs	r3, r3, r2
 800883a:	01db      	lsls	r3, r3, #7
 800883c:	001a      	movs	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	189b      	adds	r3, r3, r2
 8008842:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	001a      	movs	r2, r3
 800884a:	0013      	movs	r3, r2
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	011a      	lsls	r2, r3, #4
 8008852:	1ad2      	subs	r2, r2, r3
 8008854:	0113      	lsls	r3, r2, #4
 8008856:	001a      	movs	r2, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	189b      	adds	r3, r3, r2
 800885c:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	001a      	movs	r2, r3
 8008864:	0013      	movs	r3, r2
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	001a      	movs	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	189b      	adds	r3, r3, r2
 8008872:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	789b      	ldrb	r3, [r3, #2]
 8008878:	001a      	movs	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	189b      	adds	r3, r3, r2
 800887e:	60bb      	str	r3, [r7, #8]
  return seconds;
 8008880:	68bb      	ldr	r3, [r7, #8]
}
 8008882:	0018      	movs	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	b004      	add	sp, #16
 8008888:	bd80      	pop	{r7, pc}
 800888a:	46c0      	nop			@ (mov r8, r8)
 800888c:	fffff84f 	.word	0xfffff84f
 8008890:	000007b2 	.word	0x000007b2
 8008894:	00015180 	.word	0x00015180
 8008898:	00263b80 	.word	0x00263b80
 800889c:	0802aff0 	.word	0x0802aff0

080088a0 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80088a0:	b590      	push	{r4, r7, lr}
 80088a2:	b089      	sub	sp, #36	@ 0x24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	213c      	movs	r1, #60	@ 0x3c
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7f7 fcfb 	bl	80002b0 <__aeabi_uidivmod>
 80088ba:	000b      	movs	r3, r1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	213c      	movs	r1, #60	@ 0x3c
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7f7 fc6c 	bl	80001a4 <__udivsi3>
 80088cc:	0003      	movs	r3, r0
 80088ce:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	213c      	movs	r1, #60	@ 0x3c
 80088d4:	0018      	movs	r0, r3
 80088d6:	f7f7 fceb 	bl	80002b0 <__aeabi_uidivmod>
 80088da:	000b      	movs	r3, r1
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	213c      	movs	r1, #60	@ 0x3c
 80088e6:	0018      	movs	r0, r3
 80088e8:	f7f7 fc5c 	bl	80001a4 <__udivsi3>
 80088ec:	0003      	movs	r3, r0
 80088ee:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2118      	movs	r1, #24
 80088f4:	0018      	movs	r0, r3
 80088f6:	f7f7 fcdb 	bl	80002b0 <__aeabi_uidivmod>
 80088fa:	000b      	movs	r3, r1
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2118      	movs	r1, #24
 8008906:	0018      	movs	r0, r3
 8008908:	f7f7 fc4c 	bl	80001a4 <__udivsi3>
 800890c:	0003      	movs	r3, r0
 800890e:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	3b01      	subs	r3, #1
 8008914:	2107      	movs	r1, #7
 8008916:	0018      	movs	r0, r3
 8008918:	f7f7 fcca 	bl	80002b0 <__aeabi_uidivmod>
 800891c:	000b      	movs	r3, r1
 800891e:	b2db      	uxtb	r3, r3
 8008920:	3301      	adds	r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	701a      	strb	r2, [r3, #0]
  year = 0;
 8008928:	231f      	movs	r3, #31
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
  days = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8008934:	e005      	b.n	8008942 <breakPosixTime+0xa2>
    year++;
 8008936:	211f      	movs	r1, #31
 8008938:	187b      	adds	r3, r7, r1
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	187b      	adds	r3, r7, r1
 800893e:	3201      	adds	r2, #1
 8008940:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8008942:	241f      	movs	r4, #31
 8008944:	193b      	adds	r3, r7, r4
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4a64      	ldr	r2, [pc, #400]	@ (8008adc <breakPosixTime+0x23c>)
 800894a:	4694      	mov	ip, r2
 800894c:	4463      	add	r3, ip
 800894e:	001a      	movs	r2, r3
 8008950:	2303      	movs	r3, #3
 8008952:	4013      	ands	r3, r2
 8008954:	d119      	bne.n	800898a <breakPosixTime+0xea>
 8008956:	193b      	adds	r3, r7, r4
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	4a60      	ldr	r2, [pc, #384]	@ (8008adc <breakPosixTime+0x23c>)
 800895c:	4694      	mov	ip, r2
 800895e:	4463      	add	r3, ip
 8008960:	2164      	movs	r1, #100	@ 0x64
 8008962:	0018      	movs	r0, r3
 8008964:	f7f7 fd8e 	bl	8000484 <__aeabi_idivmod>
 8008968:	1e0b      	subs	r3, r1, #0
 800896a:	d10b      	bne.n	8008984 <breakPosixTime+0xe4>
 800896c:	193b      	adds	r3, r7, r4
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	4a5a      	ldr	r2, [pc, #360]	@ (8008adc <breakPosixTime+0x23c>)
 8008972:	4694      	mov	ip, r2
 8008974:	4463      	add	r3, ip
 8008976:	22c8      	movs	r2, #200	@ 0xc8
 8008978:	0051      	lsls	r1, r2, #1
 800897a:	0018      	movs	r0, r3
 800897c:	f7f7 fd82 	bl	8000484 <__aeabi_idivmod>
 8008980:	1e0b      	subs	r3, r1, #0
 8008982:	d102      	bne.n	800898a <breakPosixTime+0xea>
 8008984:	23b7      	movs	r3, #183	@ 0xb7
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	e001      	b.n	800898e <breakPosixTime+0xee>
 800898a:	236e      	movs	r3, #110	@ 0x6e
 800898c:	33ff      	adds	r3, #255	@ 0xff
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	18d3      	adds	r3, r2, r3
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	429a      	cmp	r2, r3
 800899a:	d9cc      	bls.n	8008936 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	241f      	movs	r4, #31
 80089a0:	193a      	adds	r2, r7, r4
 80089a2:	7812      	ldrb	r2, [r2, #0]
 80089a4:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 80089a6:	193b      	adds	r3, r7, r4
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	4a4c      	ldr	r2, [pc, #304]	@ (8008adc <breakPosixTime+0x23c>)
 80089ac:	4694      	mov	ip, r2
 80089ae:	4463      	add	r3, ip
 80089b0:	001a      	movs	r2, r3
 80089b2:	2303      	movs	r3, #3
 80089b4:	4013      	ands	r3, r2
 80089b6:	d119      	bne.n	80089ec <breakPosixTime+0x14c>
 80089b8:	193b      	adds	r3, r7, r4
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4a47      	ldr	r2, [pc, #284]	@ (8008adc <breakPosixTime+0x23c>)
 80089be:	4694      	mov	ip, r2
 80089c0:	4463      	add	r3, ip
 80089c2:	2164      	movs	r1, #100	@ 0x64
 80089c4:	0018      	movs	r0, r3
 80089c6:	f7f7 fd5d 	bl	8000484 <__aeabi_idivmod>
 80089ca:	1e0b      	subs	r3, r1, #0
 80089cc:	d10b      	bne.n	80089e6 <breakPosixTime+0x146>
 80089ce:	193b      	adds	r3, r7, r4
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	4a42      	ldr	r2, [pc, #264]	@ (8008adc <breakPosixTime+0x23c>)
 80089d4:	4694      	mov	ip, r2
 80089d6:	4463      	add	r3, ip
 80089d8:	22c8      	movs	r2, #200	@ 0xc8
 80089da:	0051      	lsls	r1, r2, #1
 80089dc:	0018      	movs	r0, r3
 80089de:	f7f7 fd51 	bl	8000484 <__aeabi_idivmod>
 80089e2:	1e0b      	subs	r3, r1, #0
 80089e4:	d102      	bne.n	80089ec <breakPosixTime+0x14c>
 80089e6:	23b7      	movs	r3, #183	@ 0xb7
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	e001      	b.n	80089f0 <breakPosixTime+0x150>
 80089ec:	236e      	movs	r3, #110	@ 0x6e
 80089ee:	33ff      	adds	r3, #255	@ 0xff
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	61bb      	str	r3, [r7, #24]

  days=0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]
  month=0;
 8008a02:	211e      	movs	r1, #30
 8008a04:	187b      	adds	r3, r7, r1
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8008a0a:	231d      	movs	r3, #29
 8008a0c:	18fb      	adds	r3, r7, r3
 8008a0e:	2200      	movs	r2, #0
 8008a10:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8008a12:	187b      	adds	r3, r7, r1
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e048      	b.n	8008aac <breakPosixTime+0x20c>
    if (month==1) { // february
 8008a1a:	231e      	movs	r3, #30
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d12a      	bne.n	8008a7a <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8008a24:	241f      	movs	r4, #31
 8008a26:	193b      	adds	r3, r7, r4
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008adc <breakPosixTime+0x23c>)
 8008a2c:	4694      	mov	ip, r2
 8008a2e:	4463      	add	r3, ip
 8008a30:	001a      	movs	r2, r3
 8008a32:	2303      	movs	r3, #3
 8008a34:	4013      	ands	r3, r2
 8008a36:	d11b      	bne.n	8008a70 <breakPosixTime+0x1d0>
 8008a38:	193b      	adds	r3, r7, r4
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4a27      	ldr	r2, [pc, #156]	@ (8008adc <breakPosixTime+0x23c>)
 8008a3e:	4694      	mov	ip, r2
 8008a40:	4463      	add	r3, ip
 8008a42:	2164      	movs	r1, #100	@ 0x64
 8008a44:	0018      	movs	r0, r3
 8008a46:	f7f7 fd1d 	bl	8000484 <__aeabi_idivmod>
 8008a4a:	1e0b      	subs	r3, r1, #0
 8008a4c:	d10b      	bne.n	8008a66 <breakPosixTime+0x1c6>
 8008a4e:	193b      	adds	r3, r7, r4
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	4a22      	ldr	r2, [pc, #136]	@ (8008adc <breakPosixTime+0x23c>)
 8008a54:	4694      	mov	ip, r2
 8008a56:	4463      	add	r3, ip
 8008a58:	22c8      	movs	r2, #200	@ 0xc8
 8008a5a:	0051      	lsls	r1, r2, #1
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7f7 fd11 	bl	8000484 <__aeabi_idivmod>
 8008a62:	1e0b      	subs	r3, r1, #0
 8008a64:	d104      	bne.n	8008a70 <breakPosixTime+0x1d0>
        monthLength=29;
 8008a66:	231d      	movs	r3, #29
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	221d      	movs	r2, #29
 8008a6c:	701a      	strb	r2, [r3, #0]
 8008a6e:	e00c      	b.n	8008a8a <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8008a70:	231d      	movs	r3, #29
 8008a72:	18fb      	adds	r3, r7, r3
 8008a74:	221c      	movs	r2, #28
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e007      	b.n	8008a8a <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8008a7a:	231e      	movs	r3, #30
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	231d      	movs	r3, #29
 8008a82:	18fb      	adds	r3, r7, r3
 8008a84:	4916      	ldr	r1, [pc, #88]	@ (8008ae0 <breakPosixTime+0x240>)
 8008a86:	5c8a      	ldrb	r2, [r1, r2]
 8008a88:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8008a8a:	211d      	movs	r1, #29
 8008a8c:	187b      	adds	r3, r7, r1
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d310      	bcc.n	8008ab8 <breakPosixTime+0x218>
      time -= monthLength;
 8008a96:	187b      	adds	r3, r7, r1
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8008aa0:	211e      	movs	r1, #30
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	781a      	ldrb	r2, [r3, #0]
 8008aa6:	187b      	adds	r3, r7, r1
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	701a      	strb	r2, [r3, #0]
 8008aac:	231e      	movs	r3, #30
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b0b      	cmp	r3, #11
 8008ab4:	d9b1      	bls.n	8008a1a <breakPosixTime+0x17a>
 8008ab6:	e000      	b.n	8008aba <breakPosixTime+0x21a>
    } else {
        break;
 8008ab8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8008aba:	231e      	movs	r3, #30
 8008abc:	18fb      	adds	r3, r7, r3
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	3301      	adds	r3, #1
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	709a      	strb	r2, [r3, #2]
}
 8008ad4:	46c0      	nop			@ (mov r8, r8)
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	b009      	add	sp, #36	@ 0x24
 8008ada:	bd90      	pop	{r4, r7, pc}
 8008adc:	000007b2 	.word	0x000007b2
 8008ae0:	0802aff0 	.word	0x0802aff0

08008ae4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008aea:	003b      	movs	r3, r7
 8008aec:	0018      	movs	r0, r3
 8008aee:	2308      	movs	r3, #8
 8008af0:	001a      	movs	r2, r3
 8008af2:	2100      	movs	r1, #0
 8008af4:	f01b f810 	bl	8023b18 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8008af8:	4b30      	ldr	r3, [pc, #192]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008afa:	4a31      	ldr	r2, [pc, #196]	@ (8008bc0 <MX_ADC_Init+0xdc>)
 8008afc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8008afe:	4b2f      	ldr	r3, [pc, #188]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008b04:	4b2d      	ldr	r3, [pc, #180]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b06:	22c0      	movs	r2, #192	@ 0xc0
 8008b08:	0612      	lsls	r2, r2, #24
 8008b0a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008b12:	4b2a      	ldr	r3, [pc, #168]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b18:	4b28      	ldr	r3, [pc, #160]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b1e:	4b27      	ldr	r3, [pc, #156]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8008b24:	4b25      	ldr	r3, [pc, #148]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b26:	2220      	movs	r2, #32
 8008b28:	2100      	movs	r1, #0
 8008b2a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8008b2c:	4b23      	ldr	r3, [pc, #140]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b2e:	2221      	movs	r2, #33	@ 0x21
 8008b30:	2101      	movs	r1, #1
 8008b32:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b34:	4b21      	ldr	r3, [pc, #132]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b3a:	4b20      	ldr	r3, [pc, #128]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b3c:	22c2      	movs	r2, #194	@ 0xc2
 8008b3e:	32ff      	adds	r2, #255	@ 0xff
 8008b40:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8008b42:	4b1e      	ldr	r3, [pc, #120]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b44:	222c      	movs	r2, #44	@ 0x2c
 8008b46:	2100      	movs	r1, #0
 8008b48:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008b50:	4b1a      	ldr	r3, [pc, #104]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8008b56:	4b19      	ldr	r3, [pc, #100]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8008b5c:	4b17      	ldr	r3, [pc, #92]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008b62:	4b16      	ldr	r3, [pc, #88]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008b68:	4b14      	ldr	r3, [pc, #80]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f009 fb2a 	bl	80121c4 <HAL_ADC_Init>
 8008b70:	1e03      	subs	r3, r0, #0
 8008b72:	d001      	beq.n	8008b78 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8008b74:	f002 fb9c 	bl	800b2b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8008b78:	003b      	movs	r3, r7
 8008b7a:	4a12      	ldr	r2, [pc, #72]	@ (8008bc4 <MX_ADC_Init+0xe0>)
 8008b7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b7e:	003b      	movs	r3, r7
 8008b80:	2280      	movs	r2, #128	@ 0x80
 8008b82:	0152      	lsls	r2, r2, #5
 8008b84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008b86:	003a      	movs	r2, r7
 8008b88:	4b0c      	ldr	r3, [pc, #48]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008b8a:	0011      	movs	r1, r2
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f009 fd89 	bl	80126a4 <HAL_ADC_ConfigChannel>
 8008b92:	1e03      	subs	r3, r0, #0
 8008b94:	d001      	beq.n	8008b9a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8008b96:	f002 fb8b 	bl	800b2b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008b9a:	003b      	movs	r3, r7
 8008b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008bc8 <MX_ADC_Init+0xe4>)
 8008b9e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008ba0:	003a      	movs	r2, r7
 8008ba2:	4b06      	ldr	r3, [pc, #24]	@ (8008bbc <MX_ADC_Init+0xd8>)
 8008ba4:	0011      	movs	r1, r2
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f009 fd7c 	bl	80126a4 <HAL_ADC_ConfigChannel>
 8008bac:	1e03      	subs	r3, r0, #0
 8008bae:	d001      	beq.n	8008bb4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8008bb0:	f002 fb7e 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8008bb4:	46c0      	nop			@ (mov r8, r8)
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	b002      	add	sp, #8
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20000b58 	.word	0x20000b58
 8008bc0:	40012400 	.word	0x40012400
 8008bc4:	38004000 	.word	0x38004000
 8008bc8:	3c008000 	.word	0x3c008000

08008bcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008bcc:	b590      	push	{r4, r7, lr}
 8008bce:	b089      	sub	sp, #36	@ 0x24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd4:	240c      	movs	r4, #12
 8008bd6:	193b      	adds	r3, r7, r4
 8008bd8:	0018      	movs	r0, r3
 8008bda:	2314      	movs	r3, #20
 8008bdc:	001a      	movs	r2, r3
 8008bde:	2100      	movs	r1, #0
 8008be0:	f01a ff9a 	bl	8023b18 <memset>
  if(adcHandle->Instance==ADC1)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a14      	ldr	r2, [pc, #80]	@ (8008c3c <HAL_ADC_MspInit+0x70>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d121      	bne.n	8008c32 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008bee:	4b14      	ldr	r3, [pc, #80]	@ (8008c40 <HAL_ADC_MspInit+0x74>)
 8008bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bf2:	4b13      	ldr	r3, [pc, #76]	@ (8008c40 <HAL_ADC_MspInit+0x74>)
 8008bf4:	2180      	movs	r1, #128	@ 0x80
 8008bf6:	0089      	lsls	r1, r1, #2
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bfc:	4b10      	ldr	r3, [pc, #64]	@ (8008c40 <HAL_ADC_MspInit+0x74>)
 8008bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c00:	4b0f      	ldr	r3, [pc, #60]	@ (8008c40 <HAL_ADC_MspInit+0x74>)
 8008c02:	2104      	movs	r1, #4
 8008c04:	430a      	orrs	r2, r1
 8008c06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c08:	4b0d      	ldr	r3, [pc, #52]	@ (8008c40 <HAL_ADC_MspInit+0x74>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	4013      	ands	r3, r2
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8008c14:	193b      	adds	r3, r7, r4
 8008c16:	2230      	movs	r2, #48	@ 0x30
 8008c18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c1a:	193b      	adds	r3, r7, r4
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c20:	193b      	adds	r3, r7, r4
 8008c22:	2200      	movs	r2, #0
 8008c24:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c26:	193b      	adds	r3, r7, r4
 8008c28:	4a06      	ldr	r2, [pc, #24]	@ (8008c44 <HAL_ADC_MspInit+0x78>)
 8008c2a:	0019      	movs	r1, r3
 8008c2c:	0010      	movs	r0, r2
 8008c2e:	f00a fb57 	bl	80132e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	46bd      	mov	sp, r7
 8008c36:	b009      	add	sp, #36	@ 0x24
 8008c38:	bd90      	pop	{r4, r7, pc}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
 8008c3c:	40012400 	.word	0x40012400
 8008c40:	40021000 	.word	0x40021000
 8008c44:	50000800 	.word	0x50000800

08008c48 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c48:	b590      	push	{r4, r7, lr}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6039      	str	r1, [r7, #0]
 8008c50:	0011      	movs	r1, r2
 8008c52:	1dfb      	adds	r3, r7, #7
 8008c54:	1c02      	adds	r2, r0, #0
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	1dbb      	adds	r3, r7, #6
 8008c5a:	1c0a      	adds	r2, r1, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 8008c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <ReadDirRegister+0x40>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 8008c66:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <ReadDirRegister+0x40>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	1dba      	adds	r2, r7, #6
 8008c6c:	7814      	ldrb	r4, [r2, #0]
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	1dfa      	adds	r2, r7, #7
 8008c72:	7810      	ldrb	r0, [r2, #0]
 8008c74:	0022      	movs	r2, r4
 8008c76:	4798      	blx	r3
 8008c78:	0003      	movs	r3, r0
 8008c7a:	e000      	b.n	8008c7e <ReadDirRegister+0x36>
  }
  return false;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	0018      	movs	r0, r3
 8008c80:	46bd      	mov	sp, r7
 8008c82:	b003      	add	sp, #12
 8008c84:	bd90      	pop	{r4, r7, pc}
 8008c86:	46c0      	nop			@ (mov r8, r8)
 8008c88:	20000bc0 	.word	0x20000bc0

08008c8c <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6039      	str	r1, [r7, #0]
 8008c94:	0011      	movs	r1, r2
 8008c96:	1dfb      	adds	r3, r7, #7
 8008c98:	1c02      	adds	r2, r0, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	1dbb      	adds	r3, r7, #6
 8008c9e:	1c0a      	adds	r2, r1, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ccc <ReadRegister+0x40>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8008caa:	4b08      	ldr	r3, [pc, #32]	@ (8008ccc <ReadRegister+0x40>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	1dba      	adds	r2, r7, #6
 8008cb0:	7814      	ldrb	r4, [r2, #0]
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	1dfa      	adds	r2, r7, #7
 8008cb6:	7810      	ldrb	r0, [r2, #0]
 8008cb8:	0022      	movs	r2, r4
 8008cba:	4798      	blx	r3
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	e000      	b.n	8008cc2 <ReadRegister+0x36>
  }
  return false;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	0018      	movs	r0, r3
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b003      	add	sp, #12
 8008cc8:	bd90      	pop	{r4, r7, pc}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	20000bb8 	.word	0x20000bb8

08008cd0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6039      	str	r1, [r7, #0]
 8008cd8:	0011      	movs	r1, r2
 8008cda:	1dfb      	adds	r3, r7, #7
 8008cdc:	1c02      	adds	r2, r0, #0
 8008cde:	701a      	strb	r2, [r3, #0]
 8008ce0:	1dbb      	adds	r3, r7, #6
 8008ce2:	1c0a      	adds	r2, r1, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8008d10 <WriteRegister+0x40>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8008cee:	4b08      	ldr	r3, [pc, #32]	@ (8008d10 <WriteRegister+0x40>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	1dba      	adds	r2, r7, #6
 8008cf4:	7814      	ldrb	r4, [r2, #0]
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	1dfa      	adds	r2, r7, #7
 8008cfa:	7810      	ldrb	r0, [r2, #0]
 8008cfc:	0022      	movs	r2, r4
 8008cfe:	4798      	blx	r3
 8008d00:	0003      	movs	r3, r0
 8008d02:	e000      	b.n	8008d06 <WriteRegister+0x36>
  }
  return false;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	0018      	movs	r0, r3
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	b003      	add	sp, #12
 8008d0c:	bd90      	pop	{r4, r7, pc}
 8008d0e:	46c0      	nop			@ (mov r8, r8)
 8008d10:	20000bbc 	.word	0x20000bbc

08008d14 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	000a      	movs	r2, r1
 8008d1e:	1cfb      	adds	r3, r7, #3
 8008d20:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8008d22:	230f      	movs	r3, #15
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	22ff      	movs	r2, #255	@ 0xff
 8008d28:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008d2a:	230e      	movs	r3, #14
 8008d2c:	18fb      	adds	r3, r7, r3
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e037      	b.n	8008da4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008d34:	230e      	movs	r3, #14
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	18d3      	adds	r3, r2, r3
 8008d3e:	7819      	ldrb	r1, [r3, #0]
 8008d40:	220f      	movs	r2, #15
 8008d42:	18bb      	adds	r3, r7, r2
 8008d44:	18ba      	adds	r2, r7, r2
 8008d46:	7812      	ldrb	r2, [r2, #0]
 8008d48:	404a      	eors	r2, r1
 8008d4a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008d4c:	230d      	movs	r3, #13
 8008d4e:	18fb      	adds	r3, r7, r3
 8008d50:	2200      	movs	r2, #0
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	e01b      	b.n	8008d8e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8008d56:	210f      	movs	r1, #15
 8008d58:	187b      	adds	r3, r7, r1
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	da09      	bge.n	8008d76 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8008d62:	187b      	adds	r3, r7, r1
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	b25b      	sxtb	r3, r3
 8008d6a:	2231      	movs	r2, #49	@ 0x31
 8008d6c:	4053      	eors	r3, r2
 8008d6e:	b25a      	sxtb	r2, r3
 8008d70:	187b      	adds	r3, r7, r1
 8008d72:	701a      	strb	r2, [r3, #0]
 8008d74:	e005      	b.n	8008d82 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008d76:	230f      	movs	r3, #15
 8008d78:	18fa      	adds	r2, r7, r3
 8008d7a:	18fb      	adds	r3, r7, r3
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	18db      	adds	r3, r3, r3
 8008d80:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d82:	210d      	movs	r1, #13
 8008d84:	187b      	adds	r3, r7, r1
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	187b      	adds	r3, r7, r1
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	230d      	movs	r3, #13
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b07      	cmp	r3, #7
 8008d96:	d9de      	bls.n	8008d56 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d98:	210e      	movs	r1, #14
 8008d9a:	187b      	adds	r3, r7, r1
 8008d9c:	781a      	ldrb	r2, [r3, #0]
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	3201      	adds	r2, #1
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	230e      	movs	r3, #14
 8008da6:	18fa      	adds	r2, r7, r3
 8008da8:	1cfb      	adds	r3, r7, #3
 8008daa:	7812      	ldrb	r2, [r2, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d3c0      	bcc.n	8008d34 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008db2:	230f      	movs	r3, #15
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	781b      	ldrb	r3, [r3, #0]
}
 8008db8:	0018      	movs	r0, r3
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	b004      	add	sp, #16
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8008dc8:	f009 f994 	bl	80120f4 <HAL_GetTick>
 8008dcc:	0002      	movs	r2, r0
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	18d2      	adds	r2, r2, r3
 8008dd2:	4b03      	ldr	r3, [pc, #12]	@ (8008de0 <setAHT20TimeStamp+0x20>)
 8008dd4:	601a      	str	r2, [r3, #0]
}
 8008dd6:	46c0      	nop			@ (mov r8, r8)
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	b002      	add	sp, #8
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	46c0      	nop			@ (mov r8, r8)
 8008de0:	20000bb4 	.word	0x20000bb4

08008de4 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 8008df0:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <AHT_Init+0x28>)
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 8008df6:	4b06      	ldr	r3, [pc, #24]	@ (8008e10 <AHT_Init+0x2c>)
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008dfc:	4b05      	ldr	r3, [pc, #20]	@ (8008e14 <AHT_Init+0x30>)
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	46c0      	nop			@ (mov r8, r8)
 8008e04:	46bd      	mov	sp, r7
 8008e06:	b004      	add	sp, #16
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	46c0      	nop			@ (mov r8, r8)
 8008e0c:	20000bc0 	.word	0x20000bc0
 8008e10:	20000bb8 	.word	0x20000bb8
 8008e14:	20000bbc 	.word	0x20000bbc

08008e18 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	0002      	movs	r2, r0
 8008e20:	1dfb      	adds	r3, r7, #7
 8008e22:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8008e24:	4b18      	ldr	r3, [pc, #96]	@ (8008e88 <AHT20_register_reset+0x70>)
 8008e26:	1dfa      	adds	r2, r7, #7
 8008e28:	7812      	ldrb	r2, [r2, #0]
 8008e2a:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8008e2c:	4b16      	ldr	r3, [pc, #88]	@ (8008e88 <AHT20_register_reset+0x70>)
 8008e2e:	2203      	movs	r2, #3
 8008e30:	0019      	movs	r1, r3
 8008e32:	2038      	movs	r0, #56	@ 0x38
 8008e34:	f7ff ff4c 	bl	8008cd0 <WriteRegister>
  HAL_Delay(15);
 8008e38:	200f      	movs	r0, #15
 8008e3a:	f009 f965 	bl	8012108 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8008e3e:	4b13      	ldr	r3, [pc, #76]	@ (8008e8c <AHT20_register_reset+0x74>)
 8008e40:	2203      	movs	r2, #3
 8008e42:	0019      	movs	r1, r3
 8008e44:	2038      	movs	r0, #56	@ 0x38
 8008e46:	f7ff ff21 	bl	8008c8c <ReadRegister>
  HAL_Delay(15);
 8008e4a:	200f      	movs	r0, #15
 8008e4c:	f009 f95c 	bl	8012108 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8008e50:	4b0e      	ldr	r3, [pc, #56]	@ (8008e8c <AHT20_register_reset+0x74>)
 8008e52:	22b0      	movs	r2, #176	@ 0xb0
 8008e54:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8008e56:	4b0d      	ldr	r3, [pc, #52]	@ (8008e8c <AHT20_register_reset+0x74>)
 8008e58:	789b      	ldrb	r3, [r3, #2]
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e8c <AHT20_register_reset+0x74>)
 8008e5e:	78db      	ldrb	r3, [r3, #3]
 8008e60:	4a0b      	ldr	r2, [pc, #44]	@ (8008e90 <AHT20_register_reset+0x78>)
 8008e62:	490c      	ldr	r1, [pc, #48]	@ (8008e94 <AHT20_register_reset+0x7c>)
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	0003      	movs	r3, r0
 8008e68:	2003      	movs	r0, #3
 8008e6a:	f008 fcf7 	bl	801185c <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8008e6e:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <AHT20_register_reset+0x74>)
 8008e70:	2203      	movs	r2, #3
 8008e72:	0019      	movs	r1, r3
 8008e74:	2038      	movs	r0, #56	@ 0x38
 8008e76:	f7ff ff2b 	bl	8008cd0 <WriteRegister>
  HAL_Delay(15);
 8008e7a:	200f      	movs	r0, #15
 8008e7c:	f009 f944 	bl	8012108 <HAL_Delay>
}
 8008e80:	46c0      	nop			@ (mov r8, r8)
 8008e82:	46bd      	mov	sp, r7
 8008e84:	b002      	add	sp, #8
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000090 	.word	0x20000090
 8008e8c:	20000bc4 	.word	0x20000bc4
 8008e90:	08029070 	.word	0x08029070
 8008e94:	080290c0 	.word	0x080290c0

08008e98 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8008e9c:	201b      	movs	r0, #27
 8008e9e:	f7ff ffbb 	bl	8008e18 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8008ea2:	201c      	movs	r0, #28
 8008ea4:	f7ff ffb8 	bl	8008e18 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8008ea8:	201e      	movs	r0, #30
 8008eaa:	f7ff ffb5 	bl	8008e18 <AHT20_register_reset>
}
 8008eae:	46c0      	nop			@ (mov r8, r8)
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008eec <AHT20_read_status+0x38>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	2038      	movs	r0, #56	@ 0x38
 8008ec0:	f7ff ff06 	bl	8008cd0 <WriteRegister>
  HAL_Delay(10);
 8008ec4:	200a      	movs	r0, #10
 8008ec6:	f009 f91f 	bl	8012108 <HAL_Delay>
  airtemphumraw[0] = 0;
 8008eca:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <AHT20_read_status+0x3c>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8008ed0:	4b07      	ldr	r3, [pc, #28]	@ (8008ef0 <AHT20_read_status+0x3c>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	2038      	movs	r0, #56	@ 0x38
 8008ed8:	f7ff fed8 	bl	8008c8c <ReadRegister>
  HAL_Delay(10);
 8008edc:	200a      	movs	r0, #10
 8008ede:	f009 f913 	bl	8012108 <HAL_Delay>
  return airtemphumraw[0];
 8008ee2:	4b03      	ldr	r3, [pc, #12]	@ (8008ef0 <AHT20_read_status+0x3c>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
}
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	2000008c 	.word	0x2000008c
 8008ef0:	20000bc4 	.word	0x20000bc4

08008ef4 <AHT20_init>:

bool AHT20_init(void) {
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 8008efa:	f009 f8fb 	bl	80120f4 <HAL_GetTick>
 8008efe:	0003      	movs	r3, r0
 8008f00:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b77      	cmp	r3, #119	@ 0x77
 8008f06:	d805      	bhi.n	8008f14 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2278      	movs	r2, #120	@ 0x78
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f009 f8fa 	bl	8012108 <HAL_Delay>
  }
  AHT20_read_status();
 8008f14:	f7ff ffce 	bl	8008eb4 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8008f18:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <AHT20_init+0x60>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8008f58 <AHT20_init+0x64>)
 8008f1e:	490f      	ldr	r1, [pc, #60]	@ (8008f5c <AHT20_init+0x68>)
 8008f20:	2003      	movs	r0, #3
 8008f22:	f008 fc9b 	bl	801185c <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 8008f26:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <AHT20_init+0x60>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	001a      	movs	r2, r3
 8008f2c:	2318      	movs	r3, #24
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b18      	cmp	r3, #24
 8008f32:	d00a      	beq.n	8008f4a <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8008f34:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <AHT20_init+0x6c>)
 8008f36:	2203      	movs	r2, #3
 8008f38:	0019      	movs	r1, r3
 8008f3a:	2038      	movs	r0, #56	@ 0x38
 8008f3c:	f7ff fec8 	bl	8008cd0 <WriteRegister>
    HAL_Delay(10);
 8008f40:	200a      	movs	r0, #10
 8008f42:	f009 f8e1 	bl	8012108 <HAL_Delay>
    AHT20_Start_Init();
 8008f46:	f7ff ffa7 	bl	8008e98 <AHT20_Start_Init>
  }
  return true;
 8008f4a:	2301      	movs	r3, #1
}
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	b002      	add	sp, #8
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000bc4 	.word	0x20000bc4
 8008f58:	080290c4 	.word	0x080290c4
 8008f5c:	080290c0 	.word	0x080290c0
 8008f60:	20000084 	.word	0x20000084

08008f64 <AHT20_calibrate>:


bool AHT20_calibrate() {
 8008f64:	b590      	push	{r4, r7, lr}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008f6a:	1dfc      	adds	r4, r7, #7
 8008f6c:	4b10      	ldr	r3, [pc, #64]	@ (8008fb0 <AHT20_calibrate+0x4c>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	0019      	movs	r1, r3
 8008f72:	2038      	movs	r0, #56	@ 0x38
 8008f74:	f7ff feac 	bl	8008cd0 <WriteRegister>
 8008f78:	0003      	movs	r3, r0
 8008f7a:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8008f7c:	1dfb      	adds	r3, r7, #7
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2201      	movs	r2, #1
 8008f82:	4053      	eors	r3, r2
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb4 <AHT20_calibrate+0x50>)
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb8 <AHT20_calibrate+0x54>)
 8008f8e:	0019      	movs	r1, r3
 8008f90:	2001      	movs	r0, #1
 8008f92:	f008 fc63 	bl	801185c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 8008f96:	f009 f8ad 	bl	80120f4 <HAL_GetTick>
 8008f9a:	0003      	movs	r3, r0
 8008f9c:	3332      	adds	r3, #50	@ 0x32
 8008f9e:	001a      	movs	r2, r3
 8008fa0:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <AHT20_calibrate+0x58>)
 8008fa2:	601a      	str	r2, [r3, #0]
  return response;
 8008fa4:	1dfb      	adds	r3, r7, #7
 8008fa6:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b003      	add	sp, #12
 8008fae:	bd90      	pop	{r4, r7, pc}
 8008fb0:	2000008c 	.word	0x2000008c
 8008fb4:	080290ec 	.word	0x080290ec
 8008fb8:	08029124 	.word	0x08029124
 8008fbc:	20000bb4 	.word	0x20000bb4

08008fc0 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 8008fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff0 <AHT20_DeviceConnected+0x30>)
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff4 <AHT20_DeviceConnected+0x34>)
 8008fc8:	0019      	movs	r1, r3
 8008fca:	2003      	movs	r0, #3
 8008fcc:	f008 fc46 	bl	801185c <CreateLine>
   AHT20_init();
 8008fd0:	f7ff ff90 	bl	8008ef4 <AHT20_init>
   HAL_Delay(10);
 8008fd4:	200a      	movs	r0, #10
 8008fd6:	f009 f897 	bl	8012108 <HAL_Delay>
   AHT20_calibrate();
 8008fda:	f7ff ffc3 	bl	8008f64 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 8008fde:	f7ff ff69 	bl	8008eb4 <AHT20_read_status>
 8008fe2:	0003      	movs	r3, r0
 8008fe4:	1e5a      	subs	r2, r3, #1
 8008fe6:	4193      	sbcs	r3, r2
 8008fe8:	b2db      	uxtb	r3, r3
 }
 8008fea:	0018      	movs	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	08029128 	.word	0x08029128
 8008ff4:	080290c0 	.word	0x080290c0

08008ff8 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 8008ffe:	1dfc      	adds	r4, r7, #7
 8009000:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <AHT20_StartMeasurement+0x4c>)
 8009002:	2203      	movs	r2, #3
 8009004:	0019      	movs	r1, r3
 8009006:	2038      	movs	r0, #56	@ 0x38
 8009008:	f7ff fe62 	bl	8008cd0 <WriteRegister>
 800900c:	0003      	movs	r3, r0
 800900e:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 8009010:	1dfb      	adds	r3, r7, #7
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	4053      	eors	r3, r2
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800901e:	4a0a      	ldr	r2, [pc, #40]	@ (8009048 <AHT20_StartMeasurement+0x50>)
 8009020:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <AHT20_StartMeasurement+0x54>)
 8009022:	0019      	movs	r1, r3
 8009024:	2001      	movs	r0, #1
 8009026:	f008 fc19 	bl	801185c <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800902a:	f009 f863 	bl	80120f4 <HAL_GetTick>
 800902e:	0003      	movs	r3, r0
 8009030:	33fa      	adds	r3, #250	@ 0xfa
 8009032:	001a      	movs	r2, r3
 8009034:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <AHT20_StartMeasurement+0x58>)
 8009036:	601a      	str	r2, [r3, #0]
  return response;
 8009038:	1dfb      	adds	r3, r7, #7
 800903a:	781b      	ldrb	r3, [r3, #0]
}
 800903c:	0018      	movs	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	b003      	add	sp, #12
 8009042:	bd90      	pop	{r4, r7, pc}
 8009044:	20000088 	.word	0x20000088
 8009048:	08029140 	.word	0x08029140
 800904c:	08029124 	.word	0x08029124
 8009050:	20000bb4 	.word	0x20000bb4

08009054 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8009054:	b590      	push	{r4, r7, lr}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800905a:	f009 f84b 	bl	80120f4 <HAL_GetTick>
 800905e:	0003      	movs	r3, r0
 8009060:	22fa      	movs	r2, #250	@ 0xfa
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	189a      	adds	r2, r3, r2
 8009066:	4b2c      	ldr	r3, [pc, #176]	@ (8009118 <AHT20_GetMeasurementValues+0xc4>)
 8009068:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800906a:	e01f      	b.n	80090ac <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800906c:	4a2b      	ldr	r2, [pc, #172]	@ (800911c <AHT20_GetMeasurementValues+0xc8>)
 800906e:	4b2c      	ldr	r3, [pc, #176]	@ (8009120 <AHT20_GetMeasurementValues+0xcc>)
 8009070:	0019      	movs	r1, r3
 8009072:	2002      	movs	r0, #2
 8009074:	f008 fbf2 	bl	801185c <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 8009078:	4b27      	ldr	r3, [pc, #156]	@ (8009118 <AHT20_GetMeasurementValues+0xc4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	0018      	movs	r0, r3
 800907e:	f008 fb97 	bl	80117b0 <TimestampIsReached>
 8009082:	1e03      	subs	r3, r0, #0
 8009084:	d00f      	beq.n	80090a6 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 8009086:	4a27      	ldr	r2, [pc, #156]	@ (8009124 <AHT20_GetMeasurementValues+0xd0>)
 8009088:	4b27      	ldr	r3, [pc, #156]	@ (8009128 <AHT20_GetMeasurementValues+0xd4>)
 800908a:	0019      	movs	r1, r3
 800908c:	2001      	movs	r0, #1
 800908e:	f008 fbe5 	bl	801185c <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 8009092:	f009 f82f 	bl	80120f4 <HAL_GetTick>
 8009096:	0003      	movs	r3, r0
 8009098:	22fa      	movs	r2, #250	@ 0xfa
 800909a:	00d2      	lsls	r2, r2, #3
 800909c:	189a      	adds	r2, r3, r2
 800909e:	4b1e      	ldr	r3, [pc, #120]	@ (8009118 <AHT20_GetMeasurementValues+0xc4>)
 80090a0:	601a      	str	r2, [r3, #0]
      return false;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e034      	b.n	8009110 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 80090a6:	200a      	movs	r0, #10
 80090a8:	f009 f82e 	bl	8012108 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 80090ac:	f7ff ff02 	bl	8008eb4 <AHT20_read_status>
 80090b0:	0003      	movs	r3, r0
 80090b2:	001a      	movs	r2, r3
 80090b4:	2380      	movs	r3, #128	@ 0x80
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b80      	cmp	r3, #128	@ 0x80
 80090ba:	d0d7      	beq.n	800906c <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 80090bc:	200a      	movs	r0, #10
 80090be:	f009 f823 	bl	8012108 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 80090c2:	1dfb      	adds	r3, r7, #7
 80090c4:	2200      	movs	r2, #0
 80090c6:	701a      	strb	r2, [r3, #0]
 80090c8:	e009      	b.n	80090de <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 80090ca:	1dfb      	adds	r3, r7, #7
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	4a17      	ldr	r2, [pc, #92]	@ (800912c <AHT20_GetMeasurementValues+0xd8>)
 80090d0:	2100      	movs	r1, #0
 80090d2:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 80090d4:	1dfb      	adds	r3, r7, #7
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	1dfb      	adds	r3, r7, #7
 80090da:	3201      	adds	r2, #1
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	1dfb      	adds	r3, r7, #7
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	2b06      	cmp	r3, #6
 80090e4:	d9f1      	bls.n	80090ca <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 80090e6:	1dbc      	adds	r4, r7, #6
 80090e8:	4b10      	ldr	r3, [pc, #64]	@ (800912c <AHT20_GetMeasurementValues+0xd8>)
 80090ea:	2207      	movs	r2, #7
 80090ec:	0019      	movs	r1, r3
 80090ee:	2038      	movs	r0, #56	@ 0x38
 80090f0:	f7ff fdaa 	bl	8008c48 <ReadDirRegister>
 80090f4:	0003      	movs	r3, r0
 80090f6:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 80090f8:	200a      	movs	r0, #10
 80090fa:	f009 f805 	bl	8012108 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 80090fe:	f008 fff9 	bl	80120f4 <HAL_GetTick>
 8009102:	0003      	movs	r3, r0
 8009104:	3364      	adds	r3, #100	@ 0x64
 8009106:	001a      	movs	r2, r3
 8009108:	4b03      	ldr	r3, [pc, #12]	@ (8009118 <AHT20_GetMeasurementValues+0xc4>)
 800910a:	601a      	str	r2, [r3, #0]
  return response;
 800910c:	1dbb      	adds	r3, r7, #6
 800910e:	781b      	ldrb	r3, [r3, #0]
}
 8009110:	0018      	movs	r0, r3
 8009112:	46bd      	mov	sp, r7
 8009114:	b003      	add	sp, #12
 8009116:	bd90      	pop	{r4, r7, pc}
 8009118:	20000bb4 	.word	0x20000bb4
 800911c:	0802916c 	.word	0x0802916c
 8009120:	08029194 	.word	0x08029194
 8009124:	08029198 	.word	0x08029198
 8009128:	08029124 	.word	0x08029124
 800912c:	20000bc4 	.word	0x20000bc4

08009130 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 8009130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009132:	46c6      	mov	lr, r8
 8009134:	b500      	push	{lr}
 8009136:	b08a      	sub	sp, #40	@ 0x28
 8009138:	af06      	add	r7, sp, #24
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800913e:	4b5a      	ldr	r3, [pc, #360]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009140:	799c      	ldrb	r4, [r3, #6]
 8009142:	4b59      	ldr	r3, [pc, #356]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009144:	2106      	movs	r1, #6
 8009146:	0018      	movs	r0, r3
 8009148:	f7ff fde4 	bl	8008d14 <CalculateCRC>
 800914c:	0003      	movs	r3, r0
 800914e:	429c      	cmp	r4, r3
 8009150:	d044      	beq.n	80091dc <AHT20_Calculate+0xac>
 8009152:	4b55      	ldr	r3, [pc, #340]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009154:	799b      	ldrb	r3, [r3, #6]
 8009156:	2bff      	cmp	r3, #255	@ 0xff
 8009158:	d040      	beq.n	80091dc <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800915a:	4b53      	ldr	r3, [pc, #332]	@ (80092a8 <AHT20_Calculate+0x178>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	4698      	mov	r8, r3
 8009160:	4b51      	ldr	r3, [pc, #324]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	0018      	movs	r0, r3
 8009166:	4b50      	ldr	r3, [pc, #320]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009168:	789b      	ldrb	r3, [r3, #2]
 800916a:	001c      	movs	r4, r3
 800916c:	4b4e      	ldr	r3, [pc, #312]	@ (80092a8 <AHT20_Calculate+0x178>)
 800916e:	78db      	ldrb	r3, [r3, #3]
 8009170:	001d      	movs	r5, r3
 8009172:	4b4d      	ldr	r3, [pc, #308]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	001e      	movs	r6, r3
 8009178:	4b4b      	ldr	r3, [pc, #300]	@ (80092a8 <AHT20_Calculate+0x178>)
 800917a:	795b      	ldrb	r3, [r3, #5]
 800917c:	469c      	mov	ip, r3
 800917e:	4b4a      	ldr	r3, [pc, #296]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009180:	799b      	ldrb	r3, [r3, #6]
 8009182:	4a4a      	ldr	r2, [pc, #296]	@ (80092ac <AHT20_Calculate+0x17c>)
 8009184:	494a      	ldr	r1, [pc, #296]	@ (80092b0 <AHT20_Calculate+0x180>)
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	4663      	mov	r3, ip
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	9603      	str	r6, [sp, #12]
 800918e:	9502      	str	r5, [sp, #8]
 8009190:	9401      	str	r4, [sp, #4]
 8009192:	9000      	str	r0, [sp, #0]
 8009194:	4643      	mov	r3, r8
 8009196:	2003      	movs	r0, #3
 8009198:	f008 fb60 	bl	801185c <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800919c:	4b42      	ldr	r3, [pc, #264]	@ (80092a8 <AHT20_Calculate+0x178>)
 800919e:	799b      	ldrb	r3, [r3, #6]
 80091a0:	001c      	movs	r4, r3
 80091a2:	4b41      	ldr	r3, [pc, #260]	@ (80092a8 <AHT20_Calculate+0x178>)
 80091a4:	2106      	movs	r1, #6
 80091a6:	0018      	movs	r0, r3
 80091a8:	f7ff fdb4 	bl	8008d14 <CalculateCRC>
 80091ac:	0003      	movs	r3, r0
 80091ae:	4a41      	ldr	r2, [pc, #260]	@ (80092b4 <AHT20_Calculate+0x184>)
 80091b0:	4941      	ldr	r1, [pc, #260]	@ (80092b8 <AHT20_Calculate+0x188>)
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	0023      	movs	r3, r4
 80091b6:	2001      	movs	r0, #1
 80091b8:	f008 fb50 	bl	801185c <CreateLine>
    *airtemp = 0.0;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 80091c8:	f008 ff94 	bl	80120f4 <HAL_GetTick>
 80091cc:	0003      	movs	r3, r0
 80091ce:	22fa      	movs	r2, #250	@ 0xfa
 80091d0:	00d2      	lsls	r2, r2, #3
 80091d2:	189a      	adds	r2, r3, r2
 80091d4:	4b39      	ldr	r3, [pc, #228]	@ (80092bc <AHT20_Calculate+0x18c>)
 80091d6:	601a      	str	r2, [r3, #0]
    return false;
 80091d8:	2300      	movs	r3, #0
 80091da:	e05f      	b.n	800929c <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 80091dc:	4b38      	ldr	r3, [pc, #224]	@ (80092c0 <AHT20_Calculate+0x190>)
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 80091e2:	4b31      	ldr	r3, [pc, #196]	@ (80092a8 <AHT20_Calculate+0x178>)
 80091e4:	78db      	ldrb	r3, [r3, #3]
 80091e6:	041a      	lsls	r2, r3, #16
 80091e8:	23f0      	movs	r3, #240	@ 0xf0
 80091ea:	031b      	lsls	r3, r3, #12
 80091ec:	401a      	ands	r2, r3
 80091ee:	4b2e      	ldr	r3, [pc, #184]	@ (80092a8 <AHT20_Calculate+0x178>)
 80091f0:	791b      	ldrb	r3, [r3, #4]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	18d3      	adds	r3, r2, r3
 80091f6:	4a2c      	ldr	r2, [pc, #176]	@ (80092a8 <AHT20_Calculate+0x178>)
 80091f8:	7952      	ldrb	r2, [r2, #5]
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f7f8 fa32 	bl	8001668 <__aeabi_ui2f>
 8009204:	1c03      	adds	r3, r0, #0
 8009206:	2193      	movs	r1, #147	@ 0x93
 8009208:	05c9      	lsls	r1, r1, #23
 800920a:	1c18      	adds	r0, r3, #0
 800920c:	f7f7 fce2 	bl	8000bd4 <__aeabi_fdiv>
 8009210:	1c03      	adds	r3, r0, #0
 8009212:	492c      	ldr	r1, [pc, #176]	@ (80092c4 <AHT20_Calculate+0x194>)
 8009214:	1c18      	adds	r0, r3, #0
 8009216:	f7f7 fec3 	bl	8000fa0 <__aeabi_fmul>
 800921a:	1c03      	adds	r3, r0, #0
 800921c:	492a      	ldr	r1, [pc, #168]	@ (80092c8 <AHT20_Calculate+0x198>)
 800921e:	1c18      	adds	r0, r3, #0
 8009220:	f7f7 fffc 	bl	800121c <__aeabi_fsub>
 8009224:	1c03      	adds	r3, r0, #0
 8009226:	1c1a      	adds	r2, r3, #0
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800922c:	4b1e      	ldr	r3, [pc, #120]	@ (80092a8 <AHT20_Calculate+0x178>)
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	031a      	lsls	r2, r3, #12
 8009232:	4b1d      	ldr	r3, [pc, #116]	@ (80092a8 <AHT20_Calculate+0x178>)
 8009234:	789b      	ldrb	r3, [r3, #2]
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	18d3      	adds	r3, r2, r3
 800923a:	4a1b      	ldr	r2, [pc, #108]	@ (80092a8 <AHT20_Calculate+0x178>)
 800923c:	78d2      	ldrb	r2, [r2, #3]
 800923e:	0912      	lsrs	r2, r2, #4
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	189b      	adds	r3, r3, r2
 8009244:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8009246:	68b8      	ldr	r0, [r7, #8]
 8009248:	f7f8 fa0e 	bl	8001668 <__aeabi_ui2f>
 800924c:	1c03      	adds	r3, r0, #0
 800924e:	2193      	movs	r1, #147	@ 0x93
 8009250:	05c9      	lsls	r1, r1, #23
 8009252:	1c18      	adds	r0, r3, #0
 8009254:	f7f7 fcbe 	bl	8000bd4 <__aeabi_fdiv>
 8009258:	1c03      	adds	r3, r0, #0
 800925a:	491c      	ldr	r1, [pc, #112]	@ (80092cc <AHT20_Calculate+0x19c>)
 800925c:	1c18      	adds	r0, r3, #0
 800925e:	f7f7 fe9f 	bl	8000fa0 <__aeabi_fmul>
 8009262:	1c03      	adds	r3, r0, #0
 8009264:	1c1a      	adds	r2, r3, #0
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	1c18      	adds	r0, r3, #0
 8009270:	f7fa f8f8 	bl	8003464 <__aeabi_f2d>
 8009274:	0004      	movs	r4, r0
 8009276:	000d      	movs	r5, r1
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	1c18      	adds	r0, r3, #0
 800927e:	f7fa f8f1 	bl	8003464 <__aeabi_f2d>
 8009282:	0002      	movs	r2, r0
 8009284:	000b      	movs	r3, r1
 8009286:	4812      	ldr	r0, [pc, #72]	@ (80092d0 <AHT20_Calculate+0x1a0>)
 8009288:	4909      	ldr	r1, [pc, #36]	@ (80092b0 <AHT20_Calculate+0x180>)
 800928a:	9202      	str	r2, [sp, #8]
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	9400      	str	r4, [sp, #0]
 8009290:	9501      	str	r5, [sp, #4]
 8009292:	0002      	movs	r2, r0
 8009294:	2003      	movs	r0, #3
 8009296:	f008 fae1 	bl	801185c <CreateLine>
  return true;
 800929a:	2301      	movs	r3, #1
}
 800929c:	0018      	movs	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	b004      	add	sp, #16
 80092a2:	bc80      	pop	{r7}
 80092a4:	46b8      	mov	r8, r7
 80092a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a8:	20000bc4 	.word	0x20000bc4
 80092ac:	080291bc 	.word	0x080291bc
 80092b0:	080290c0 	.word	0x080290c0
 80092b4:	0802923c 	.word	0x0802923c
 80092b8:	08029124 	.word	0x08029124
 80092bc:	20000bb4 	.word	0x20000bb4
 80092c0:	20000bcb 	.word	0x20000bcb
 80092c4:	43480000 	.word	0x43480000
 80092c8:	42480000 	.word	0x42480000
 80092cc:	42c80000 	.word	0x42c80000
 80092d0:	08029264 	.word	0x08029264

080092d4 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 80092da:	4b4d      	ldr	r3, [pc, #308]	@ (8009410 <AHT_Upkeep+0x13c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	0018      	movs	r0, r3
 80092e0:	f008 fa66 	bl	80117b0 <TimestampIsReached>
 80092e4:	0003      	movs	r3, r0
 80092e6:	001a      	movs	r2, r3
 80092e8:	2301      	movs	r3, #1
 80092ea:	4053      	eors	r3, r2
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <AHT_Upkeep+0x24>
    return AHTState;
 80092f2:	4b48      	ldr	r3, [pc, #288]	@ (8009414 <AHT_Upkeep+0x140>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	e087      	b.n	8009408 <AHT_Upkeep+0x134>
  }
  switch(AHTState) {
 80092f8:	4b46      	ldr	r3, [pc, #280]	@ (8009414 <AHT_Upkeep+0x140>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d85d      	bhi.n	80093bc <AHT_Upkeep+0xe8>
 8009300:	009a      	lsls	r2, r3, #2
 8009302:	4b45      	ldr	r3, [pc, #276]	@ (8009418 <AHT_Upkeep+0x144>)
 8009304:	18d3      	adds	r3, r2, r3
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800930a:	4a44      	ldr	r2, [pc, #272]	@ (800941c <AHT_Upkeep+0x148>)
 800930c:	4b44      	ldr	r3, [pc, #272]	@ (8009420 <AHT_Upkeep+0x14c>)
 800930e:	0019      	movs	r1, r3
 8009310:	2003      	movs	r0, #3
 8009312:	f008 faa3 	bl	801185c <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 8009316:	f008 feed 	bl	80120f4 <HAL_GetTick>
 800931a:	0003      	movs	r3, r0
 800931c:	4a41      	ldr	r2, [pc, #260]	@ (8009424 <AHT_Upkeep+0x150>)
 800931e:	189a      	adds	r2, r3, r2
 8009320:	4b3b      	ldr	r3, [pc, #236]	@ (8009410 <AHT_Upkeep+0x13c>)
 8009322:	601a      	str	r2, [r3, #0]
    break;
 8009324:	e06e      	b.n	8009404 <AHT_Upkeep+0x130>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8009326:	f002 fc05 	bl	800bb34 <getSensorLock>
 800932a:	1e03      	subs	r3, r0, #0
 800932c:	d165      	bne.n	80093fa <AHT_Upkeep+0x126>
      break;
    }
    setSensorLock(AHT20);
 800932e:	2003      	movs	r0, #3
 8009330:	f002 fbf0 	bl	800bb14 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 8009334:	f7ff fe60 	bl	8008ff8 <AHT20_StartMeasurement>
 8009338:	0003      	movs	r3, r0
 800933a:	001a      	movs	r2, r3
 800933c:	2301      	movs	r3, #1
 800933e:	4053      	eors	r3, r2
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <AHT_Upkeep+0x7a>
      AHTState = AHT20_ERROR;
 8009346:	4b33      	ldr	r3, [pc, #204]	@ (8009414 <AHT_Upkeep+0x140>)
 8009348:	22ff      	movs	r2, #255	@ 0xff
 800934a:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 800934c:	e05a      	b.n	8009404 <AHT_Upkeep+0x130>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800934e:	4b31      	ldr	r3, [pc, #196]	@ (8009414 <AHT_Upkeep+0x140>)
 8009350:	2202      	movs	r2, #2
 8009352:	701a      	strb	r2, [r3, #0]
    break;
 8009354:	e056      	b.n	8009404 <AHT_Upkeep+0x130>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 8009356:	f7ff fe7d 	bl	8009054 <AHT20_GetMeasurementValues>
 800935a:	1e03      	subs	r3, r0, #0
 800935c:	d04f      	beq.n	80093fe <AHT_Upkeep+0x12a>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 800935e:	2000      	movs	r0, #0
 8009360:	f002 fbd8 	bl	800bb14 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 8009364:	4b2b      	ldr	r3, [pc, #172]	@ (8009414 <AHT_Upkeep+0x140>)
 8009366:	2203      	movs	r2, #3
 8009368:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800936a:	e048      	b.n	80093fe <AHT_Upkeep+0x12a>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800936c:	003a      	movs	r2, r7
 800936e:	1d3b      	adds	r3, r7, #4
 8009370:	0011      	movs	r1, r2
 8009372:	0018      	movs	r0, r3
 8009374:	f7ff fedc 	bl	8009130 <AHT20_Calculate>
 8009378:	0003      	movs	r3, r0
 800937a:	001a      	movs	r2, r3
 800937c:	2301      	movs	r3, #1
 800937e:	4053      	eors	r3, r2
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d005      	beq.n	8009392 <AHT_Upkeep+0xbe>
      AHTState = AHT20_ERROR;
 8009386:	4b23      	ldr	r3, [pc, #140]	@ (8009414 <AHT_Upkeep+0x140>)
 8009388:	22ff      	movs	r2, #255	@ 0xff
 800938a:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800938c:	4b21      	ldr	r3, [pc, #132]	@ (8009414 <AHT_Upkeep+0x140>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	e03a      	b.n	8009408 <AHT_Upkeep+0x134>
    }
//    setHIDS(airtemp, airhum);
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	683a      	ldr	r2, [r7, #0]
 8009396:	1c11      	adds	r1, r2, #0
 8009398:	1c18      	adds	r0, r3, #0
 800939a:	f7fa fe07 	bl	8003fac <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800939e:	4b1d      	ldr	r3, [pc, #116]	@ (8009414 <AHT_Upkeep+0x140>)
 80093a0:	2205      	movs	r2, #5
 80093a2:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 80093a4:	f008 fea6 	bl	80120f4 <HAL_GetTick>
 80093a8:	0003      	movs	r3, r0
 80093aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009428 <AHT_Upkeep+0x154>)
 80093ac:	189a      	adds	r2, r3, r2
 80093ae:	4b18      	ldr	r3, [pc, #96]	@ (8009410 <AHT_Upkeep+0x13c>)
 80093b0:	601a      	str	r2, [r3, #0]
    break;
 80093b2:	e027      	b.n	8009404 <AHT_Upkeep+0x130>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 80093b4:	4b17      	ldr	r3, [pc, #92]	@ (8009414 <AHT_Upkeep+0x140>)
 80093b6:	2201      	movs	r2, #1
 80093b8:	701a      	strb	r2, [r3, #0]
  break;
 80093ba:	e023      	b.n	8009404 <AHT_Upkeep+0x130>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 80093bc:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <AHT_Upkeep+0x140>)
 80093be:	2201      	movs	r2, #1
 80093c0:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 80093c2:	f002 fbb7 	bl	800bb34 <getSensorLock>
 80093c6:	0003      	movs	r3, r0
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d102      	bne.n	80093d2 <AHT_Upkeep+0xfe>
      setSensorLock(FREE);
 80093cc:	2000      	movs	r0, #0
 80093ce:	f002 fba1 	bl	800bb14 <setSensorLock>
    }
    AHTerrors++;
 80093d2:	4b16      	ldr	r3, [pc, #88]	@ (800942c <AHT_Upkeep+0x158>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	3301      	adds	r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	4b14      	ldr	r3, [pc, #80]	@ (800942c <AHT_Upkeep+0x158>)
 80093dc:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 80093de:	4b13      	ldr	r3, [pc, #76]	@ (800942c <AHT_Upkeep+0x158>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b19      	cmp	r3, #25
 80093e4:	d90d      	bls.n	8009402 <AHT_Upkeep+0x12e>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 80093e6:	4a12      	ldr	r2, [pc, #72]	@ (8009430 <AHT_Upkeep+0x15c>)
 80093e8:	4b12      	ldr	r3, [pc, #72]	@ (8009434 <AHT_Upkeep+0x160>)
 80093ea:	0019      	movs	r1, r3
 80093ec:	2001      	movs	r0, #1
 80093ee:	f008 fa35 	bl	801185c <CreateLine>
      AHTState = AHT_STATE_OFF;
 80093f2:	4b08      	ldr	r3, [pc, #32]	@ (8009414 <AHT_Upkeep+0x140>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80093f8:	e003      	b.n	8009402 <AHT_Upkeep+0x12e>
      break;
 80093fa:	46c0      	nop			@ (mov r8, r8)
 80093fc:	e002      	b.n	8009404 <AHT_Upkeep+0x130>
    break;
 80093fe:	46c0      	nop			@ (mov r8, r8)
 8009400:	e000      	b.n	8009404 <AHT_Upkeep+0x130>
    break;
 8009402:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 8009404:	4b03      	ldr	r3, [pc, #12]	@ (8009414 <AHT_Upkeep+0x140>)
 8009406:	781b      	ldrb	r3, [r3, #0]
}
 8009408:	0018      	movs	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	b002      	add	sp, #8
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20000bb4 	.word	0x20000bb4
 8009414:	20000093 	.word	0x20000093
 8009418:	0802affc 	.word	0x0802affc
 800941c:	08029298 	.word	0x08029298
 8009420:	080290c0 	.word	0x080290c0
 8009424:	000dbba0 	.word	0x000dbba0
 8009428:	0000ea60 	.word	0x0000ea60
 800942c:	20000bcb 	.word	0x20000bcb
 8009430:	080292c0 	.word	0x080292c0
 8009434:	08029124 	.word	0x08029124

08009438 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8009438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943a:	b087      	sub	sp, #28
 800943c:	af02      	add	r7, sp, #8
 800943e:	0004      	movs	r4, r0
 8009440:	0008      	movs	r0, r1
 8009442:	60ba      	str	r2, [r7, #8]
 8009444:	0019      	movs	r1, r3
 8009446:	260e      	movs	r6, #14
 8009448:	19bb      	adds	r3, r7, r6
 800944a:	1c22      	adds	r2, r4, #0
 800944c:	801a      	strh	r2, [r3, #0]
 800944e:	230c      	movs	r3, #12
 8009450:	18fb      	adds	r3, r7, r3
 8009452:	1c02      	adds	r2, r0, #0
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	1dbb      	adds	r3, r7, #6
 8009458:	1c0a      	adds	r2, r1, #0
 800945a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800945c:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <WriteMemRegister+0x58>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d010      	beq.n	8009486 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 8009464:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <WriteMemRegister+0x58>)
 8009466:	681c      	ldr	r4, [r3, #0]
 8009468:	4b0a      	ldr	r3, [pc, #40]	@ (8009494 <WriteMemRegister+0x5c>)
 800946a:	7818      	ldrb	r0, [r3, #0]
 800946c:	68bd      	ldr	r5, [r7, #8]
 800946e:	230c      	movs	r3, #12
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	881a      	ldrh	r2, [r3, #0]
 8009474:	19bb      	adds	r3, r7, r6
 8009476:	8819      	ldrh	r1, [r3, #0]
 8009478:	1dbb      	adds	r3, r7, #6
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	002b      	movs	r3, r5
 8009480:	47a0      	blx	r4
 8009482:	0003      	movs	r3, r0
 8009484:	e000      	b.n	8009488 <WriteMemRegister+0x50>
  }
  return false;
 8009486:	2300      	movs	r3, #0
}
 8009488:	0018      	movs	r0, r3
 800948a:	46bd      	mov	sp, r7
 800948c:	b005      	add	sp, #20
 800948e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009490:	20000bcc 	.word	0x20000bcc
 8009494:	20000094 	.word	0x20000094

08009498 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8009498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949a:	b087      	sub	sp, #28
 800949c:	af02      	add	r7, sp, #8
 800949e:	0004      	movs	r4, r0
 80094a0:	0008      	movs	r0, r1
 80094a2:	60ba      	str	r2, [r7, #8]
 80094a4:	0019      	movs	r1, r3
 80094a6:	260e      	movs	r6, #14
 80094a8:	19bb      	adds	r3, r7, r6
 80094aa:	1c22      	adds	r2, r4, #0
 80094ac:	801a      	strh	r2, [r3, #0]
 80094ae:	230c      	movs	r3, #12
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	1c02      	adds	r2, r0, #0
 80094b4:	801a      	strh	r2, [r3, #0]
 80094b6:	1dbb      	adds	r3, r7, #6
 80094b8:	1c0a      	adds	r2, r1, #0
 80094ba:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80094bc:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <ReadMemRegister+0x58>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d010      	beq.n	80094e6 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 80094c4:	4b0a      	ldr	r3, [pc, #40]	@ (80094f0 <ReadMemRegister+0x58>)
 80094c6:	681c      	ldr	r4, [r3, #0]
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <ReadMemRegister+0x5c>)
 80094ca:	7818      	ldrb	r0, [r3, #0]
 80094cc:	68bd      	ldr	r5, [r7, #8]
 80094ce:	230c      	movs	r3, #12
 80094d0:	18fb      	adds	r3, r7, r3
 80094d2:	881a      	ldrh	r2, [r3, #0]
 80094d4:	19bb      	adds	r3, r7, r6
 80094d6:	8819      	ldrh	r1, [r3, #0]
 80094d8:	1dbb      	adds	r3, r7, #6
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	002b      	movs	r3, r5
 80094e0:	47a0      	blx	r4
 80094e2:	0003      	movs	r3, r0
 80094e4:	e000      	b.n	80094e8 <ReadMemRegister+0x50>
  }
  return false;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	0018      	movs	r0, r3
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b005      	add	sp, #20
 80094ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f0:	20000bd0 	.word	0x20000bd0
 80094f4:	20000094 	.word	0x20000094

080094f8 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 8009500:	f008 fdf8 	bl	80120f4 <HAL_GetTick>
 8009504:	0002      	movs	r2, r0
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	18d2      	adds	r2, r2, r3
 800950a:	4b03      	ldr	r3, [pc, #12]	@ (8009518 <setBMP280TimeStamp+0x20>)
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	46c0      	nop			@ (mov r8, r8)
 8009510:	46bd      	mov	sp, r7
 8009512:	b002      	add	sp, #8
 8009514:	bd80      	pop	{r7, pc}
 8009516:	46c0      	nop			@ (mov r8, r8)
 8009518:	20000bf8 	.word	0x20000bf8

0800951c <BMP280_reset>:

static void BMP280_reset() {
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 8009522:	1dfb      	adds	r3, r7, #7
 8009524:	22b6      	movs	r2, #182	@ 0xb6
 8009526:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 8009528:	1dfa      	adds	r2, r7, #7
 800952a:	2301      	movs	r3, #1
 800952c:	2101      	movs	r1, #1
 800952e:	20e0      	movs	r0, #224	@ 0xe0
 8009530:	f7ff ff82 	bl	8009438 <WriteMemRegister>
  Info("BMP280 has been reset");
 8009534:	4a06      	ldr	r2, [pc, #24]	@ (8009550 <BMP280_reset+0x34>)
 8009536:	4b07      	ldr	r3, [pc, #28]	@ (8009554 <BMP280_reset+0x38>)
 8009538:	0019      	movs	r1, r3
 800953a:	2002      	movs	r0, #2
 800953c:	f008 f98e 	bl	801185c <CreateLine>
  HAL_Delay(100);
 8009540:	2064      	movs	r0, #100	@ 0x64
 8009542:	f008 fde1 	bl	8012108 <HAL_Delay>
}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	46bd      	mov	sp, r7
 800954a:	b002      	add	sp, #8
 800954c:	bd80      	pop	{r7, pc}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	08029304 	.word	0x08029304
 8009554:	0802931c 	.word	0x0802931c

08009558 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 8009558:	b590      	push	{r4, r7, lr}
 800955a:	b083      	sub	sp, #12
 800955c:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800955e:	4aae      	ldr	r2, [pc, #696]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009560:	231a      	movs	r3, #26
 8009562:	2101      	movs	r1, #1
 8009564:	2088      	movs	r0, #136	@ 0x88
 8009566:	f7ff ff97 	bl	8009498 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800956a:	4bab      	ldr	r3, [pc, #684]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	b29b      	uxth	r3, r3
 8009572:	4aa9      	ldr	r2, [pc, #676]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009574:	7812      	ldrb	r2, [r2, #0]
 8009576:	189b      	adds	r3, r3, r2
 8009578:	b29a      	uxth	r2, r3
 800957a:	4ba8      	ldr	r3, [pc, #672]	@ (800981c <BMP280_get_calibration+0x2c4>)
 800957c:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800957e:	4ba6      	ldr	r3, [pc, #664]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009580:	78db      	ldrb	r3, [r3, #3]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	b29b      	uxth	r3, r3
 8009586:	4aa4      	ldr	r2, [pc, #656]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009588:	7892      	ldrb	r2, [r2, #2]
 800958a:	189b      	adds	r3, r3, r2
 800958c:	b29b      	uxth	r3, r3
 800958e:	b21a      	sxth	r2, r3
 8009590:	4ba2      	ldr	r3, [pc, #648]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009592:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 8009594:	4ba0      	ldr	r3, [pc, #640]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009596:	795b      	ldrb	r3, [r3, #5]
 8009598:	021b      	lsls	r3, r3, #8
 800959a:	b29b      	uxth	r3, r3
 800959c:	4a9e      	ldr	r2, [pc, #632]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800959e:	7912      	ldrb	r2, [r2, #4]
 80095a0:	189b      	adds	r3, r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	b21a      	sxth	r2, r3
 80095a6:	4b9d      	ldr	r3, [pc, #628]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80095a8:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 80095aa:	4b9b      	ldr	r3, [pc, #620]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095ac:	79db      	ldrb	r3, [r3, #7]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	4a99      	ldr	r2, [pc, #612]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095b4:	7992      	ldrb	r2, [r2, #6]
 80095b6:	189b      	adds	r3, r3, r2
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	4b98      	ldr	r3, [pc, #608]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80095bc:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 80095be:	4b96      	ldr	r3, [pc, #600]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095c0:	7a5b      	ldrb	r3, [r3, #9]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	4a94      	ldr	r2, [pc, #592]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095c8:	7a12      	ldrb	r2, [r2, #8]
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	b21a      	sxth	r2, r3
 80095d0:	4b92      	ldr	r3, [pc, #584]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80095d2:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 80095d4:	4b90      	ldr	r3, [pc, #576]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095d6:	7adb      	ldrb	r3, [r3, #11]
 80095d8:	021b      	lsls	r3, r3, #8
 80095da:	b29b      	uxth	r3, r3
 80095dc:	4a8e      	ldr	r2, [pc, #568]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095de:	7a92      	ldrb	r2, [r2, #10]
 80095e0:	189b      	adds	r3, r3, r2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	b21a      	sxth	r2, r3
 80095e6:	4b8d      	ldr	r3, [pc, #564]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80095e8:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 80095ea:	4b8b      	ldr	r3, [pc, #556]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095ec:	7b5b      	ldrb	r3, [r3, #13]
 80095ee:	021b      	lsls	r3, r3, #8
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	4a89      	ldr	r2, [pc, #548]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80095f4:	7b12      	ldrb	r2, [r2, #12]
 80095f6:	189b      	adds	r3, r3, r2
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	b21a      	sxth	r2, r3
 80095fc:	4b87      	ldr	r3, [pc, #540]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80095fe:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 8009600:	4b85      	ldr	r3, [pc, #532]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009602:	7bdb      	ldrb	r3, [r3, #15]
 8009604:	021b      	lsls	r3, r3, #8
 8009606:	b29b      	uxth	r3, r3
 8009608:	4a83      	ldr	r2, [pc, #524]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800960a:	7b92      	ldrb	r2, [r2, #14]
 800960c:	189b      	adds	r3, r3, r2
 800960e:	b29b      	uxth	r3, r3
 8009610:	b21a      	sxth	r2, r3
 8009612:	4b82      	ldr	r3, [pc, #520]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009614:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 8009616:	4b80      	ldr	r3, [pc, #512]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009618:	7c5b      	ldrb	r3, [r3, #17]
 800961a:	021b      	lsls	r3, r3, #8
 800961c:	b29b      	uxth	r3, r3
 800961e:	4a7e      	ldr	r2, [pc, #504]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009620:	7c12      	ldrb	r2, [r2, #16]
 8009622:	189b      	adds	r3, r3, r2
 8009624:	b29b      	uxth	r3, r3
 8009626:	b21a      	sxth	r2, r3
 8009628:	4b7c      	ldr	r3, [pc, #496]	@ (800981c <BMP280_get_calibration+0x2c4>)
 800962a:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800962c:	4b7a      	ldr	r3, [pc, #488]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800962e:	7cdb      	ldrb	r3, [r3, #19]
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	b29b      	uxth	r3, r3
 8009634:	4a78      	ldr	r2, [pc, #480]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009636:	7c92      	ldrb	r2, [r2, #18]
 8009638:	189b      	adds	r3, r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	b21a      	sxth	r2, r3
 800963e:	4b77      	ldr	r3, [pc, #476]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009640:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 8009642:	4b75      	ldr	r3, [pc, #468]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009644:	7d5b      	ldrb	r3, [r3, #21]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	b29b      	uxth	r3, r3
 800964a:	4a73      	ldr	r2, [pc, #460]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800964c:	7d12      	ldrb	r2, [r2, #20]
 800964e:	189b      	adds	r3, r3, r2
 8009650:	b29b      	uxth	r3, r3
 8009652:	b21a      	sxth	r2, r3
 8009654:	4b71      	ldr	r3, [pc, #452]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009656:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 8009658:	4b6f      	ldr	r3, [pc, #444]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800965a:	7ddb      	ldrb	r3, [r3, #23]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	b29b      	uxth	r3, r3
 8009660:	4a6d      	ldr	r2, [pc, #436]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009662:	7d92      	ldrb	r2, [r2, #22]
 8009664:	189b      	adds	r3, r3, r2
 8009666:	b29b      	uxth	r3, r3
 8009668:	b21a      	sxth	r2, r3
 800966a:	4b6c      	ldr	r3, [pc, #432]	@ (800981c <BMP280_get_calibration+0x2c4>)
 800966c:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800966e:	4a6c      	ldr	r2, [pc, #432]	@ (8009820 <BMP280_get_calibration+0x2c8>)
 8009670:	4b6c      	ldr	r3, [pc, #432]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 8009672:	0019      	movs	r1, r3
 8009674:	2003      	movs	r0, #3
 8009676:	f008 f8f1 	bl	801185c <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800967a:	4b67      	ldr	r3, [pc, #412]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	001c      	movs	r4, r3
 8009680:	4b65      	ldr	r3, [pc, #404]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	0018      	movs	r0, r3
 8009686:	4b65      	ldr	r3, [pc, #404]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	4a67      	ldr	r2, [pc, #412]	@ (8009828 <BMP280_get_calibration+0x2d0>)
 800968c:	4965      	ldr	r1, [pc, #404]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	9000      	str	r0, [sp, #0]
 8009692:	0023      	movs	r3, r4
 8009694:	2003      	movs	r0, #3
 8009696:	f008 f8e1 	bl	801185c <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800969a:	4b5f      	ldr	r3, [pc, #380]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800969c:	78db      	ldrb	r3, [r3, #3]
 800969e:	001c      	movs	r4, r3
 80096a0:	4b5d      	ldr	r3, [pc, #372]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80096a2:	789b      	ldrb	r3, [r3, #2]
 80096a4:	0018      	movs	r0, r3
 80096a6:	4b5d      	ldr	r3, [pc, #372]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80096a8:	2202      	movs	r2, #2
 80096aa:	5e9b      	ldrsh	r3, [r3, r2]
 80096ac:	4a5f      	ldr	r2, [pc, #380]	@ (800982c <BMP280_get_calibration+0x2d4>)
 80096ae:	495d      	ldr	r1, [pc, #372]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	9000      	str	r0, [sp, #0]
 80096b4:	0023      	movs	r3, r4
 80096b6:	2003      	movs	r0, #3
 80096b8:	f008 f8d0 	bl	801185c <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 80096bc:	4b56      	ldr	r3, [pc, #344]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80096be:	795b      	ldrb	r3, [r3, #5]
 80096c0:	001c      	movs	r4, r3
 80096c2:	4b55      	ldr	r3, [pc, #340]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80096c4:	791b      	ldrb	r3, [r3, #4]
 80096c6:	0018      	movs	r0, r3
 80096c8:	4b54      	ldr	r3, [pc, #336]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80096ca:	2204      	movs	r2, #4
 80096cc:	5e9b      	ldrsh	r3, [r3, r2]
 80096ce:	4a58      	ldr	r2, [pc, #352]	@ (8009830 <BMP280_get_calibration+0x2d8>)
 80096d0:	4954      	ldr	r1, [pc, #336]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	9000      	str	r0, [sp, #0]
 80096d6:	0023      	movs	r3, r4
 80096d8:	2003      	movs	r0, #3
 80096da:	f008 f8bf 	bl	801185c <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 80096de:	4b4e      	ldr	r3, [pc, #312]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80096e0:	79db      	ldrb	r3, [r3, #7]
 80096e2:	001c      	movs	r4, r3
 80096e4:	4b4c      	ldr	r3, [pc, #304]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80096e6:	799b      	ldrb	r3, [r3, #6]
 80096e8:	0018      	movs	r0, r3
 80096ea:	4b4c      	ldr	r3, [pc, #304]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80096ec:	88db      	ldrh	r3, [r3, #6]
 80096ee:	4a51      	ldr	r2, [pc, #324]	@ (8009834 <BMP280_get_calibration+0x2dc>)
 80096f0:	494c      	ldr	r1, [pc, #304]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 80096f2:	9301      	str	r3, [sp, #4]
 80096f4:	9000      	str	r0, [sp, #0]
 80096f6:	0023      	movs	r3, r4
 80096f8:	2003      	movs	r0, #3
 80096fa:	f008 f8af 	bl	801185c <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 80096fe:	4b46      	ldr	r3, [pc, #280]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009700:	7a5b      	ldrb	r3, [r3, #9]
 8009702:	001c      	movs	r4, r3
 8009704:	4b44      	ldr	r3, [pc, #272]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009706:	7a1b      	ldrb	r3, [r3, #8]
 8009708:	0018      	movs	r0, r3
 800970a:	4b44      	ldr	r3, [pc, #272]	@ (800981c <BMP280_get_calibration+0x2c4>)
 800970c:	2208      	movs	r2, #8
 800970e:	5e9b      	ldrsh	r3, [r3, r2]
 8009710:	4a49      	ldr	r2, [pc, #292]	@ (8009838 <BMP280_get_calibration+0x2e0>)
 8009712:	4944      	ldr	r1, [pc, #272]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	9000      	str	r0, [sp, #0]
 8009718:	0023      	movs	r3, r4
 800971a:	2003      	movs	r0, #3
 800971c:	f008 f89e 	bl	801185c <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 8009720:	4b3d      	ldr	r3, [pc, #244]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009722:	7adb      	ldrb	r3, [r3, #11]
 8009724:	001c      	movs	r4, r3
 8009726:	4b3c      	ldr	r3, [pc, #240]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009728:	7a9b      	ldrb	r3, [r3, #10]
 800972a:	0018      	movs	r0, r3
 800972c:	4b3b      	ldr	r3, [pc, #236]	@ (800981c <BMP280_get_calibration+0x2c4>)
 800972e:	220a      	movs	r2, #10
 8009730:	5e9b      	ldrsh	r3, [r3, r2]
 8009732:	4a42      	ldr	r2, [pc, #264]	@ (800983c <BMP280_get_calibration+0x2e4>)
 8009734:	493b      	ldr	r1, [pc, #236]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	9000      	str	r0, [sp, #0]
 800973a:	0023      	movs	r3, r4
 800973c:	2003      	movs	r0, #3
 800973e:	f008 f88d 	bl	801185c <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 8009742:	4b35      	ldr	r3, [pc, #212]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009744:	7b5b      	ldrb	r3, [r3, #13]
 8009746:	001c      	movs	r4, r3
 8009748:	4b33      	ldr	r3, [pc, #204]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800974a:	7b1b      	ldrb	r3, [r3, #12]
 800974c:	0018      	movs	r0, r3
 800974e:	4b33      	ldr	r3, [pc, #204]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009750:	220c      	movs	r2, #12
 8009752:	5e9b      	ldrsh	r3, [r3, r2]
 8009754:	4a3a      	ldr	r2, [pc, #232]	@ (8009840 <BMP280_get_calibration+0x2e8>)
 8009756:	4933      	ldr	r1, [pc, #204]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	9000      	str	r0, [sp, #0]
 800975c:	0023      	movs	r3, r4
 800975e:	2003      	movs	r0, #3
 8009760:	f008 f87c 	bl	801185c <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 8009764:	4b2c      	ldr	r3, [pc, #176]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009766:	7bdb      	ldrb	r3, [r3, #15]
 8009768:	001c      	movs	r4, r3
 800976a:	4b2b      	ldr	r3, [pc, #172]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800976c:	7b9b      	ldrb	r3, [r3, #14]
 800976e:	0018      	movs	r0, r3
 8009770:	4b2a      	ldr	r3, [pc, #168]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009772:	220e      	movs	r2, #14
 8009774:	5e9b      	ldrsh	r3, [r3, r2]
 8009776:	4a33      	ldr	r2, [pc, #204]	@ (8009844 <BMP280_get_calibration+0x2ec>)
 8009778:	492a      	ldr	r1, [pc, #168]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	9000      	str	r0, [sp, #0]
 800977e:	0023      	movs	r3, r4
 8009780:	2003      	movs	r0, #3
 8009782:	f008 f86b 	bl	801185c <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 8009786:	4b24      	ldr	r3, [pc, #144]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 8009788:	7c5b      	ldrb	r3, [r3, #17]
 800978a:	001c      	movs	r4, r3
 800978c:	4b22      	ldr	r3, [pc, #136]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 800978e:	7c1b      	ldrb	r3, [r3, #16]
 8009790:	0018      	movs	r0, r3
 8009792:	4b22      	ldr	r3, [pc, #136]	@ (800981c <BMP280_get_calibration+0x2c4>)
 8009794:	2210      	movs	r2, #16
 8009796:	5e9b      	ldrsh	r3, [r3, r2]
 8009798:	4a2b      	ldr	r2, [pc, #172]	@ (8009848 <BMP280_get_calibration+0x2f0>)
 800979a:	4922      	ldr	r1, [pc, #136]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	9000      	str	r0, [sp, #0]
 80097a0:	0023      	movs	r3, r4
 80097a2:	2003      	movs	r0, #3
 80097a4:	f008 f85a 	bl	801185c <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 80097a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80097aa:	7cdb      	ldrb	r3, [r3, #19]
 80097ac:	001c      	movs	r4, r3
 80097ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80097b0:	7c9b      	ldrb	r3, [r3, #18]
 80097b2:	0018      	movs	r0, r3
 80097b4:	4b19      	ldr	r3, [pc, #100]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80097b6:	2212      	movs	r2, #18
 80097b8:	5e9b      	ldrsh	r3, [r3, r2]
 80097ba:	4a24      	ldr	r2, [pc, #144]	@ (800984c <BMP280_get_calibration+0x2f4>)
 80097bc:	4919      	ldr	r1, [pc, #100]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	9000      	str	r0, [sp, #0]
 80097c2:	0023      	movs	r3, r4
 80097c4:	2003      	movs	r0, #3
 80097c6:	f008 f849 	bl	801185c <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 80097ca:	4b13      	ldr	r3, [pc, #76]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80097cc:	7d5b      	ldrb	r3, [r3, #21]
 80097ce:	001c      	movs	r4, r3
 80097d0:	4b11      	ldr	r3, [pc, #68]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80097d2:	7d1b      	ldrb	r3, [r3, #20]
 80097d4:	0018      	movs	r0, r3
 80097d6:	4b11      	ldr	r3, [pc, #68]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80097d8:	2214      	movs	r2, #20
 80097da:	5e9b      	ldrsh	r3, [r3, r2]
 80097dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009850 <BMP280_get_calibration+0x2f8>)
 80097de:	4911      	ldr	r1, [pc, #68]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	9000      	str	r0, [sp, #0]
 80097e4:	0023      	movs	r3, r4
 80097e6:	2003      	movs	r0, #3
 80097e8:	f008 f838 	bl	801185c <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 80097ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80097ee:	7ddb      	ldrb	r3, [r3, #23]
 80097f0:	001c      	movs	r4, r3
 80097f2:	4b09      	ldr	r3, [pc, #36]	@ (8009818 <BMP280_get_calibration+0x2c0>)
 80097f4:	7d9b      	ldrb	r3, [r3, #22]
 80097f6:	0018      	movs	r0, r3
 80097f8:	4b08      	ldr	r3, [pc, #32]	@ (800981c <BMP280_get_calibration+0x2c4>)
 80097fa:	2216      	movs	r2, #22
 80097fc:	5e9b      	ldrsh	r3, [r3, r2]
 80097fe:	4a15      	ldr	r2, [pc, #84]	@ (8009854 <BMP280_get_calibration+0x2fc>)
 8009800:	4908      	ldr	r1, [pc, #32]	@ (8009824 <BMP280_get_calibration+0x2cc>)
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	9000      	str	r0, [sp, #0]
 8009806:	0023      	movs	r3, r4
 8009808:	2003      	movs	r0, #3
 800980a:	f008 f827 	bl	801185c <CreateLine>
}
 800980e:	46c0      	nop			@ (mov r8, r8)
 8009810:	46bd      	mov	sp, r7
 8009812:	b001      	add	sp, #4
 8009814:	bd90      	pop	{r4, r7, pc}
 8009816:	46c0      	nop			@ (mov r8, r8)
 8009818:	20000bfc 	.word	0x20000bfc
 800981c:	20000bd4 	.word	0x20000bd4
 8009820:	08029320 	.word	0x08029320
 8009824:	0802933c 	.word	0x0802933c
 8009828:	08029340 	.word	0x08029340
 800982c:	08029374 	.word	0x08029374
 8009830:	080293a8 	.word	0x080293a8
 8009834:	080293dc 	.word	0x080293dc
 8009838:	08029410 	.word	0x08029410
 800983c:	08029444 	.word	0x08029444
 8009840:	08029478 	.word	0x08029478
 8009844:	080294ac 	.word	0x080294ac
 8009848:	080294e0 	.word	0x080294e0
 800984c:	08029514 	.word	0x08029514
 8009850:	08029548 	.word	0x08029548
 8009854:	0802957c 	.word	0x0802957c

08009858 <BMP280_probe>:

static bool BMP280_probe() {
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800985e:	4b34      	ldr	r3, [pc, #208]	@ (8009930 <BMP280_probe+0xd8>)
 8009860:	2276      	movs	r2, #118	@ 0x76
 8009862:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8009864:	1dba      	adds	r2, r7, #6
 8009866:	2301      	movs	r3, #1
 8009868:	2101      	movs	r1, #1
 800986a:	20d0      	movs	r0, #208	@ 0xd0
 800986c:	f7ff fe14 	bl	8009498 <ReadMemRegister>
 8009870:	0003      	movs	r3, r0
 8009872:	001a      	movs	r2, r3
 8009874:	1dfb      	adds	r3, r7, #7
 8009876:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 8009878:	1dfb      	adds	r3, r7, #7
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b25b      	sxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <BMP280_probe+0x40>
 8009882:	1dbb      	adds	r3, r7, #6
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d006      	beq.n	8009898 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800988a:	1dbb      	adds	r3, r7, #6
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	4a29      	ldr	r2, [pc, #164]	@ (8009934 <BMP280_probe+0xdc>)
 8009890:	4929      	ldr	r1, [pc, #164]	@ (8009938 <BMP280_probe+0xe0>)
 8009892:	2003      	movs	r0, #3
 8009894:	f007 ffe2 	bl	801185c <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 8009898:	1dbb      	adds	r3, r7, #6
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b58      	cmp	r3, #88	@ 0x58
 800989e:	d01f      	beq.n	80098e0 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 80098a0:	4b23      	ldr	r3, [pc, #140]	@ (8009930 <BMP280_probe+0xd8>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	3301      	adds	r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	4b21      	ldr	r3, [pc, #132]	@ (8009930 <BMP280_probe+0xd8>)
 80098aa:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 80098ac:	1dba      	adds	r2, r7, #6
 80098ae:	2301      	movs	r3, #1
 80098b0:	2101      	movs	r1, #1
 80098b2:	20d0      	movs	r0, #208	@ 0xd0
 80098b4:	f7ff fdf0 	bl	8009498 <ReadMemRegister>
 80098b8:	0003      	movs	r3, r0
 80098ba:	001a      	movs	r2, r3
 80098bc:	1dfb      	adds	r3, r7, #7
 80098be:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 80098c0:	1dfb      	adds	r3, r7, #7
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	b25b      	sxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <BMP280_probe+0x88>
 80098ca:	1dbb      	adds	r3, r7, #6
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d006      	beq.n	80098e0 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 80098d2:	1dbb      	adds	r3, r7, #6
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	4a17      	ldr	r2, [pc, #92]	@ (8009934 <BMP280_probe+0xdc>)
 80098d8:	4917      	ldr	r1, [pc, #92]	@ (8009938 <BMP280_probe+0xe0>)
 80098da:	2003      	movs	r0, #3
 80098dc:	f007 ffbe 	bl	801185c <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 80098e0:	1dbb      	adds	r3, r7, #6
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b58      	cmp	r3, #88	@ 0x58
 80098e6:	d110      	bne.n	800990a <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 80098e8:	1dbb      	adds	r3, r7, #6
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	0018      	movs	r0, r3
 80098ee:	4b10      	ldr	r3, [pc, #64]	@ (8009930 <BMP280_probe+0xd8>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	4a12      	ldr	r2, [pc, #72]	@ (800993c <BMP280_probe+0xe4>)
 80098f4:	4912      	ldr	r1, [pc, #72]	@ (8009940 <BMP280_probe+0xe8>)
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	0003      	movs	r3, r0
 80098fa:	2002      	movs	r0, #2
 80098fc:	f007 ffae 	bl	801185c <CreateLine>
      BMP280_reset(); // get an initial state
 8009900:	f7ff fe0c 	bl	800951c <BMP280_reset>
      BMP280_get_calibration();
 8009904:	f7ff fe28 	bl	8009558 <BMP280_get_calibration>
 8009908:	e008      	b.n	800991c <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800990a:	4b09      	ldr	r3, [pc, #36]	@ (8009930 <BMP280_probe+0xd8>)
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 8009910:	4a0c      	ldr	r2, [pc, #48]	@ (8009944 <BMP280_probe+0xec>)
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <BMP280_probe+0xf0>)
 8009914:	0019      	movs	r1, r3
 8009916:	2001      	movs	r0, #1
 8009918:	f007 ffa0 	bl	801185c <CreateLine>
    }
    return bmp280I2Caddr;
 800991c:	4b04      	ldr	r3, [pc, #16]	@ (8009930 <BMP280_probe+0xd8>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	1e5a      	subs	r2, r3, #1
 8009922:	4193      	sbcs	r3, r2
 8009924:	b2db      	uxtb	r3, r3
}
 8009926:	0018      	movs	r0, r3
 8009928:	46bd      	mov	sp, r7
 800992a:	b002      	add	sp, #8
 800992c:	bd80      	pop	{r7, pc}
 800992e:	46c0      	nop			@ (mov r8, r8)
 8009930:	20000094 	.word	0x20000094
 8009934:	080295b0 	.word	0x080295b0
 8009938:	0802933c 	.word	0x0802933c
 800993c:	080295e0 	.word	0x080295e0
 8009940:	0802931c 	.word	0x0802931c
 8009944:	08029618 	.word	0x08029618
 8009948:	0802962c 	.word	0x0802962c

0800994c <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  return BMP280_probe();
 8009950:	f7ff ff82 	bl	8009858 <BMP280_probe>
 8009954:	0003      	movs	r3, r0
}
 8009956:	0018      	movs	r0, r3
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 8009966:	4b05      	ldr	r3, [pc, #20]	@ (800997c <BMP_Init+0x20>)
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800996c:	4b04      	ldr	r3, [pc, #16]	@ (8009980 <BMP_Init+0x24>)
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	601a      	str	r2, [r3, #0]
}
 8009972:	46c0      	nop			@ (mov r8, r8)
 8009974:	46bd      	mov	sp, r7
 8009976:	b002      	add	sp, #8
 8009978:	bd80      	pop	{r7, pc}
 800997a:	46c0      	nop			@ (mov r8, r8)
 800997c:	20000bd0 	.word	0x20000bd0
 8009980:	20000bcc 	.word	0x20000bcc

08009984 <BMP280_set_config>:


static bool BMP280_set_config() {
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800998a:	1dbb      	adds	r3, r7, #6
 800998c:	228c      	movs	r2, #140	@ 0x8c
 800998e:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 8009990:	1dba      	adds	r2, r7, #6
 8009992:	2301      	movs	r3, #1
 8009994:	2101      	movs	r1, #1
 8009996:	20f5      	movs	r0, #245	@ 0xf5
 8009998:	f7ff fd4e 	bl	8009438 <WriteMemRegister>
 800999c:	0003      	movs	r3, r0
 800999e:	001a      	movs	r2, r3
 80099a0:	1dfb      	adds	r3, r7, #7
 80099a2:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 80099a4:	f008 fba6 	bl	80120f4 <HAL_GetTick>
 80099a8:	0003      	movs	r3, r0
 80099aa:	330a      	adds	r3, #10
 80099ac:	001a      	movs	r2, r3
 80099ae:	4b06      	ldr	r3, [pc, #24]	@ (80099c8 <BMP280_set_config+0x44>)
 80099b0:	601a      	str	r2, [r3, #0]
  return rslt;
 80099b2:	1dfb      	adds	r3, r7, #7
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b25b      	sxtb	r3, r3
 80099b8:	1e5a      	subs	r2, r3, #1
 80099ba:	4193      	sbcs	r3, r2
 80099bc:	b2db      	uxtb	r3, r3
}
 80099be:	0018      	movs	r0, r3
 80099c0:	46bd      	mov	sp, r7
 80099c2:	b002      	add	sp, #8
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	20000bf8 	.word	0x20000bf8

080099cc <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 80099d2:	1dbb      	adds	r3, r7, #6
 80099d4:	2208      	movs	r2, #8
 80099d6:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 80099d8:	4b22      	ldr	r3, [pc, #136]	@ (8009a64 <BMP280_set_mode+0x98>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	224c      	movs	r2, #76	@ 0x4c
 80099de:	4313      	orrs	r3, r2
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	1d7b      	adds	r3, r7, #5
 80099e4:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 80099e6:	1d7a      	adds	r2, r7, #5
 80099e8:	2301      	movs	r3, #1
 80099ea:	2101      	movs	r1, #1
 80099ec:	20f4      	movs	r0, #244	@ 0xf4
 80099ee:	f7ff fd23 	bl	8009438 <WriteMemRegister>
 80099f2:	0003      	movs	r3, r0
 80099f4:	001a      	movs	r2, r3
 80099f6:	1dfb      	adds	r3, r7, #7
 80099f8:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 80099fa:	f008 fb7b 	bl	80120f4 <HAL_GetTick>
 80099fe:	0003      	movs	r3, r0
 8009a00:	22fa      	movs	r2, #250	@ 0xfa
 8009a02:	0092      	lsls	r2, r2, #2
 8009a04:	189a      	adds	r2, r3, r2
 8009a06:	4b18      	ldr	r3, [pc, #96]	@ (8009a68 <BMP280_set_mode+0x9c>)
 8009a08:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 8009a0a:	e016      	b.n	8009a3a <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 8009a0c:	1dba      	adds	r2, r7, #6
 8009a0e:	2301      	movs	r3, #1
 8009a10:	2101      	movs	r1, #1
 8009a12:	20f3      	movs	r0, #243	@ 0xf3
 8009a14:	f7ff fd40 	bl	8009498 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 8009a18:	4b13      	ldr	r3, [pc, #76]	@ (8009a68 <BMP280_set_mode+0x9c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f007 fec7 	bl	80117b0 <TimestampIsReached>
 8009a22:	1e03      	subs	r3, r0, #0
 8009a24:	d006      	beq.n	8009a34 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 8009a26:	4a11      	ldr	r2, [pc, #68]	@ (8009a6c <BMP280_set_mode+0xa0>)
 8009a28:	4b11      	ldr	r3, [pc, #68]	@ (8009a70 <BMP280_set_mode+0xa4>)
 8009a2a:	0019      	movs	r1, r3
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	f007 ff15 	bl	801185c <CreateLine>
      break;
 8009a32:	e008      	b.n	8009a46 <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 8009a34:	2001      	movs	r0, #1
 8009a36:	f008 fb67 	bl	8012108 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 8009a3a:	1dbb      	adds	r3, r7, #6
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	001a      	movs	r2, r3
 8009a40:	2308      	movs	r3, #8
 8009a42:	4013      	ands	r3, r2
 8009a44:	d1e2      	bne.n	8009a0c <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 8009a46:	f008 fb55 	bl	80120f4 <HAL_GetTick>
 8009a4a:	0002      	movs	r2, r0
 8009a4c:	4b06      	ldr	r3, [pc, #24]	@ (8009a68 <BMP280_set_mode+0x9c>)
 8009a4e:	601a      	str	r2, [r3, #0]
  return rslt;
 8009a50:	1dfb      	adds	r3, r7, #7
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	b25b      	sxtb	r3, r3
 8009a56:	1e5a      	subs	r2, r3, #1
 8009a58:	4193      	sbcs	r3, r2
 8009a5a:	b2db      	uxtb	r3, r3
}
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b002      	add	sp, #8
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20000095 	.word	0x20000095
 8009a68:	20000bf8 	.word	0x20000bf8
 8009a6c:	08029630 	.word	0x08029630
 8009a70:	0802962c 	.word	0x0802962c

08009a74 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 8009a7a:	1dba      	adds	r2, r7, #6
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	2101      	movs	r1, #1
 8009a80:	20f4      	movs	r0, #244	@ 0xf4
 8009a82:	f7ff fd09 	bl	8009498 <ReadMemRegister>
 8009a86:	0003      	movs	r3, r0
 8009a88:	001a      	movs	r2, r3
 8009a8a:	1dfb      	adds	r3, r7, #7
 8009a8c:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 8009a8e:	1dbb      	adds	r3, r7, #6
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	2203      	movs	r2, #3
 8009a94:	4013      	ands	r3, r2
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	1dbb      	adds	r3, r7, #6
 8009a9a:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8009a9c:	f008 fb2a 	bl	80120f4 <HAL_GetTick>
 8009aa0:	0003      	movs	r3, r0
 8009aa2:	330a      	adds	r3, #10
 8009aa4:	001a      	movs	r2, r3
 8009aa6:	4b08      	ldr	r3, [pc, #32]	@ (8009ac8 <BMP280_get_mode+0x54>)
 8009aa8:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 8009aaa:	1dfb      	adds	r3, r7, #7
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	b25b      	sxtb	r3, r3
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d102      	bne.n	8009aba <BMP280_get_mode+0x46>
    bmpData = 255;
 8009ab4:	1dbb      	adds	r3, r7, #6
 8009ab6:	22ff      	movs	r2, #255	@ 0xff
 8009ab8:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 8009aba:	1dbb      	adds	r3, r7, #6
 8009abc:	781b      	ldrb	r3, [r3, #0]
}
 8009abe:	0018      	movs	r0, r3
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	b002      	add	sp, #8
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	46c0      	nop			@ (mov r8, r8)
 8009ac8:	20000bf8 	.word	0x20000bf8

08009acc <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 8009acc:	b5b0      	push	{r4, r5, r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 8009ad2:	1d3a      	adds	r2, r7, #4
 8009ad4:	2306      	movs	r3, #6
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	20f7      	movs	r0, #247	@ 0xf7
 8009ada:	f7ff fcdd 	bl	8009498 <ReadMemRegister>
 8009ade:	0003      	movs	r3, r0
 8009ae0:	001a      	movs	r2, r3
 8009ae2:	230f      	movs	r3, #15
 8009ae4:	18fb      	adds	r3, r7, r3
 8009ae6:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8009ae8:	1d3b      	adds	r3, r7, #4
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b80      	cmp	r3, #128	@ 0x80
 8009aee:	d00f      	beq.n	8009b10 <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8009af0:	1d3b      	adds	r3, r7, #4
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	031a      	lsls	r2, r3, #12
 8009af6:	1d3b      	adds	r3, r7, #4
 8009af8:	785b      	ldrb	r3, [r3, #1]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	18d3      	adds	r3, r2, r3
 8009afe:	1d3a      	adds	r2, r7, #4
 8009b00:	7892      	ldrb	r2, [r2, #2]
 8009b02:	0912      	lsrs	r2, r2, #4
 8009b04:	b2d2      	uxtb	r2, r2
 8009b06:	189b      	adds	r3, r3, r2
 8009b08:	001a      	movs	r2, r3
 8009b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb8 <BMP280_get_measurement_values+0xec>)
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e019      	b.n	8009b44 <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8009b10:	4a2a      	ldr	r2, [pc, #168]	@ (8009bbc <BMP280_get_measurement_values+0xf0>)
 8009b12:	4b2b      	ldr	r3, [pc, #172]	@ (8009bc0 <BMP280_get_measurement_values+0xf4>)
 8009b14:	0019      	movs	r1, r3
 8009b16:	2001      	movs	r0, #1
 8009b18:	f007 fea0 	bl	801185c <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8009b1c:	1d3b      	adds	r3, r7, #4
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	001d      	movs	r5, r3
 8009b22:	1d3b      	adds	r3, r7, #4
 8009b24:	785b      	ldrb	r3, [r3, #1]
 8009b26:	0018      	movs	r0, r3
 8009b28:	1d3b      	adds	r3, r7, #4
 8009b2a:	789b      	ldrb	r3, [r3, #2]
 8009b2c:	001c      	movs	r4, r3
 8009b2e:	4b22      	ldr	r3, [pc, #136]	@ (8009bb8 <BMP280_get_measurement_values+0xec>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a24      	ldr	r2, [pc, #144]	@ (8009bc4 <BMP280_get_measurement_values+0xf8>)
 8009b34:	4924      	ldr	r1, [pc, #144]	@ (8009bc8 <BMP280_get_measurement_values+0xfc>)
 8009b36:	9302      	str	r3, [sp, #8]
 8009b38:	9401      	str	r4, [sp, #4]
 8009b3a:	9000      	str	r0, [sp, #0]
 8009b3c:	002b      	movs	r3, r5
 8009b3e:	2003      	movs	r0, #3
 8009b40:	f007 fe8c 	bl	801185c <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 8009b44:	1d3b      	adds	r3, r7, #4
 8009b46:	78db      	ldrb	r3, [r3, #3]
 8009b48:	2b80      	cmp	r3, #128	@ 0x80
 8009b4a:	d00f      	beq.n	8009b6c <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8009b4c:	1d3b      	adds	r3, r7, #4
 8009b4e:	78db      	ldrb	r3, [r3, #3]
 8009b50:	031a      	lsls	r2, r3, #12
 8009b52:	1d3b      	adds	r3, r7, #4
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	18d3      	adds	r3, r2, r3
 8009b5a:	1d3a      	adds	r2, r7, #4
 8009b5c:	7952      	ldrb	r2, [r2, #5]
 8009b5e:	0912      	lsrs	r2, r2, #4
 8009b60:	b2d2      	uxtb	r2, r2
 8009b62:	189b      	adds	r3, r3, r2
 8009b64:	001a      	movs	r2, r3
 8009b66:	4b19      	ldr	r3, [pc, #100]	@ (8009bcc <BMP280_get_measurement_values+0x100>)
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	e019      	b.n	8009ba0 <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8009b6c:	4a18      	ldr	r2, [pc, #96]	@ (8009bd0 <BMP280_get_measurement_values+0x104>)
 8009b6e:	4b14      	ldr	r3, [pc, #80]	@ (8009bc0 <BMP280_get_measurement_values+0xf4>)
 8009b70:	0019      	movs	r1, r3
 8009b72:	2001      	movs	r0, #1
 8009b74:	f007 fe72 	bl	801185c <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 8009b78:	1d3b      	adds	r3, r7, #4
 8009b7a:	78db      	ldrb	r3, [r3, #3]
 8009b7c:	001d      	movs	r5, r3
 8009b7e:	1d3b      	adds	r3, r7, #4
 8009b80:	791b      	ldrb	r3, [r3, #4]
 8009b82:	0018      	movs	r0, r3
 8009b84:	1d3b      	adds	r3, r7, #4
 8009b86:	795b      	ldrb	r3, [r3, #5]
 8009b88:	001c      	movs	r4, r3
 8009b8a:	4b10      	ldr	r3, [pc, #64]	@ (8009bcc <BMP280_get_measurement_values+0x100>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a11      	ldr	r2, [pc, #68]	@ (8009bd4 <BMP280_get_measurement_values+0x108>)
 8009b90:	490d      	ldr	r1, [pc, #52]	@ (8009bc8 <BMP280_get_measurement_values+0xfc>)
 8009b92:	9302      	str	r3, [sp, #8]
 8009b94:	9401      	str	r4, [sp, #4]
 8009b96:	9000      	str	r0, [sp, #0]
 8009b98:	002b      	movs	r3, r5
 8009b9a:	2003      	movs	r0, #3
 8009b9c:	f007 fe5e 	bl	801185c <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 8009ba0:	230f      	movs	r3, #15
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b25b      	sxtb	r3, r3
 8009ba8:	1e5a      	subs	r2, r3, #1
 8009baa:	4193      	sbcs	r3, r2
 8009bac:	b2db      	uxtb	r3, r3
}
 8009bae:	0018      	movs	r0, r3
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	b004      	add	sp, #16
 8009bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb6:	46c0      	nop			@ (mov r8, r8)
 8009bb8:	20000bf4 	.word	0x20000bf4
 8009bbc:	0802965c 	.word	0x0802965c
 8009bc0:	0802962c 	.word	0x0802962c
 8009bc4:	080296a0 	.word	0x080296a0
 8009bc8:	0802933c 	.word	0x0802933c
 8009bcc:	20000bf0 	.word	0x20000bf0
 8009bd0:	080296e8 	.word	0x080296e8
 8009bd4:	08029724 	.word	0x08029724

08009bd8 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8009bde:	4b1e      	ldr	r3, [pc, #120]	@ (8009c58 <BMP280_calc_temperature+0x80>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	10da      	asrs	r2, r3, #3
 8009be8:	4b1c      	ldr	r3, [pc, #112]	@ (8009c5c <BMP280_calc_temperature+0x84>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8009c5c <BMP280_calc_temperature+0x84>)
 8009bf2:	2102      	movs	r1, #2
 8009bf4:	5e52      	ldrsh	r2, [r2, r1]
 8009bf6:	4353      	muls	r3, r2
 8009bf8:	12db      	asrs	r3, r3, #11
 8009bfa:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	111b      	asrs	r3, r3, #4
 8009c00:	4a16      	ldr	r2, [pc, #88]	@ (8009c5c <BMP280_calc_temperature+0x84>)
 8009c02:	8812      	ldrh	r2, [r2, #0]
 8009c04:	1a9b      	subs	r3, r3, r2
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	1112      	asrs	r2, r2, #4
 8009c0a:	4914      	ldr	r1, [pc, #80]	@ (8009c5c <BMP280_calc_temperature+0x84>)
 8009c0c:	8809      	ldrh	r1, [r1, #0]
 8009c0e:	1a52      	subs	r2, r2, r1
 8009c10:	4353      	muls	r3, r2
 8009c12:	131b      	asrs	r3, r3, #12
 8009c14:	4a11      	ldr	r2, [pc, #68]	@ (8009c5c <BMP280_calc_temperature+0x84>)
 8009c16:	2104      	movs	r1, #4
 8009c18:	5e52      	ldrsh	r2, [r2, r1]
 8009c1a:	4353      	muls	r3, r2
 8009c1c:	139b      	asrs	r3, r3, #14
 8009c1e:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	18d2      	adds	r2, r2, r3
 8009c26:	4b0e      	ldr	r3, [pc, #56]	@ (8009c60 <BMP280_calc_temperature+0x88>)
 8009c28:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <BMP280_calc_temperature+0x88>)
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	0013      	movs	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	189b      	adds	r3, r3, r2
 8009c34:	3380      	adds	r3, #128	@ 0x80
 8009c36:	121b      	asrs	r3, r3, #8
 8009c38:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8009c3a:	68b8      	ldr	r0, [r7, #8]
 8009c3c:	f7f7 fcc8 	bl	80015d0 <__aeabi_i2f>
 8009c40:	1c03      	adds	r3, r0, #0
 8009c42:	4908      	ldr	r1, [pc, #32]	@ (8009c64 <BMP280_calc_temperature+0x8c>)
 8009c44:	1c18      	adds	r0, r3, #0
 8009c46:	f7f6 ffc5 	bl	8000bd4 <__aeabi_fdiv>
 8009c4a:	1c03      	adds	r3, r0, #0
 8009c4c:	607b      	str	r3, [r7, #4]
  return airTemp;
 8009c4e:	687b      	ldr	r3, [r7, #4]
}
 8009c50:	1c18      	adds	r0, r3, #0
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b006      	add	sp, #24
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20000bf0 	.word	0x20000bf0
 8009c5c:	20000bd4 	.word	0x20000bd4
 8009c60:	20000bec 	.word	0x20000bec
 8009c64:	42c80000 	.word	0x42c80000

08009c68 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8009c6e:	4b4e      	ldr	r3, [pc, #312]	@ (8009da8 <BMP280_calc_pressure+0x140>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8009c74:	4b4d      	ldr	r3, [pc, #308]	@ (8009dac <BMP280_calc_pressure+0x144>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	105b      	asrs	r3, r3, #1
 8009c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8009db0 <BMP280_calc_pressure+0x148>)
 8009c7c:	4694      	mov	ip, r2
 8009c7e:	4463      	add	r3, ip
 8009c80:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	109b      	asrs	r3, r3, #2
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	1092      	asrs	r2, r2, #2
 8009c8a:	4353      	muls	r3, r2
 8009c8c:	12db      	asrs	r3, r3, #11
 8009c8e:	4a49      	ldr	r2, [pc, #292]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009c90:	2110      	movs	r1, #16
 8009c92:	5e52      	ldrsh	r2, [r2, r1]
 8009c94:	4353      	muls	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8009c98:	4b46      	ldr	r3, [pc, #280]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009c9a:	220e      	movs	r2, #14
 8009c9c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c9e:	001a      	movs	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4353      	muls	r3, r2
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	18d3      	adds	r3, r2, r3
 8009caa:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	109a      	asrs	r2, r3, #2
 8009cb0:	4b40      	ldr	r3, [pc, #256]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009cb2:	210c      	movs	r1, #12
 8009cb4:	5e5b      	ldrsh	r3, [r3, r1]
 8009cb6:	041b      	lsls	r3, r3, #16
 8009cb8:	18d3      	adds	r3, r2, r3
 8009cba:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8009cbc:	4b3d      	ldr	r3, [pc, #244]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009cbe:	220a      	movs	r2, #10
 8009cc0:	5e9b      	ldrsh	r3, [r3, r2]
 8009cc2:	0019      	movs	r1, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	109b      	asrs	r3, r3, #2
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	1092      	asrs	r2, r2, #2
 8009ccc:	4353      	muls	r3, r2
 8009cce:	135b      	asrs	r3, r3, #13
 8009cd0:	434b      	muls	r3, r1
 8009cd2:	10da      	asrs	r2, r3, #3
 8009cd4:	4b37      	ldr	r3, [pc, #220]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009cd6:	2108      	movs	r1, #8
 8009cd8:	5e5b      	ldrsh	r3, [r3, r1]
 8009cda:	0019      	movs	r1, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	434b      	muls	r3, r1
 8009ce0:	105b      	asrs	r3, r3, #1
 8009ce2:	18d3      	adds	r3, r2, r3
 8009ce4:	149b      	asrs	r3, r3, #18
 8009ce6:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2280      	movs	r2, #128	@ 0x80
 8009cec:	0212      	lsls	r2, r2, #8
 8009cee:	4694      	mov	ip, r2
 8009cf0:	4463      	add	r3, ip
 8009cf2:	4a30      	ldr	r2, [pc, #192]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009cf4:	88d2      	ldrh	r2, [r2, #6]
 8009cf6:	4353      	muls	r3, r2
 8009cf8:	13db      	asrs	r3, r3, #15
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <BMP280_calc_pressure+0x9e>
    return 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e04b      	b.n	8009d9e <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2280      	movs	r2, #128	@ 0x80
 8009d0a:	0352      	lsls	r2, r2, #13
 8009d0c:	1ad2      	subs	r2, r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	131b      	asrs	r3, r3, #12
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	001a      	movs	r2, r3
 8009d16:	4b28      	ldr	r3, [pc, #160]	@ (8009db8 <BMP280_calc_pressure+0x150>)
 8009d18:	4353      	muls	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	db09      	blt.n	8009d36 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	005b      	lsls	r3, r3, #1
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	0011      	movs	r1, r2
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f7f6 fa3a 	bl	80001a4 <__udivsi3>
 8009d30:	0003      	movs	r3, r0
 8009d32:	617b      	str	r3, [r7, #20]
 8009d34:	e007      	b.n	8009d46 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	0019      	movs	r1, r3
 8009d3a:	6978      	ldr	r0, [r7, #20]
 8009d3c:	f7f6 fa32 	bl	80001a4 <__udivsi3>
 8009d40:	0003      	movs	r3, r0
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8009d46:	4b1b      	ldr	r3, [pc, #108]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009d48:	2216      	movs	r2, #22
 8009d4a:	5e9b      	ldrsh	r3, [r3, r2]
 8009d4c:	0019      	movs	r1, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	08db      	lsrs	r3, r3, #3
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	08d2      	lsrs	r2, r2, #3
 8009d56:	4353      	muls	r3, r2
 8009d58:	0b5b      	lsrs	r3, r3, #13
 8009d5a:	434b      	muls	r3, r1
 8009d5c:	131b      	asrs	r3, r3, #12
 8009d5e:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	089b      	lsrs	r3, r3, #2
 8009d64:	001a      	movs	r2, r3
 8009d66:	4b13      	ldr	r3, [pc, #76]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009d68:	2114      	movs	r1, #20
 8009d6a:	5e5b      	ldrsh	r3, [r3, r1]
 8009d6c:	4353      	muls	r3, r2
 8009d6e:	135b      	asrs	r3, r3, #13
 8009d70:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	18d3      	adds	r3, r2, r3
 8009d78:	4a0e      	ldr	r2, [pc, #56]	@ (8009db4 <BMP280_calc_pressure+0x14c>)
 8009d7a:	2112      	movs	r1, #18
 8009d7c:	5e52      	ldrsh	r2, [r2, r1]
 8009d7e:	189b      	adds	r3, r3, r2
 8009d80:	111a      	asrs	r2, r3, #4
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	18d3      	adds	r3, r2, r3
 8009d86:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8009d88:	6978      	ldr	r0, [r7, #20]
 8009d8a:	f7f7 fc6d 	bl	8001668 <__aeabi_ui2f>
 8009d8e:	1c03      	adds	r3, r0, #0
 8009d90:	490a      	ldr	r1, [pc, #40]	@ (8009dbc <BMP280_calc_pressure+0x154>)
 8009d92:	1c18      	adds	r0, r3, #0
 8009d94:	f7f6 ff1e 	bl	8000bd4 <__aeabi_fdiv>
 8009d98:	1c03      	adds	r3, r0, #0
 8009d9a:	607b      	str	r3, [r7, #4]
  return airhPa;
 8009d9c:	687b      	ldr	r3, [r7, #4]
}
 8009d9e:	1c18      	adds	r0, r3, #0
 8009da0:	46bd      	mov	sp, r7
 8009da2:	b006      	add	sp, #24
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	46c0      	nop			@ (mov r8, r8)
 8009da8:	20000bf4 	.word	0x20000bf4
 8009dac:	20000bec 	.word	0x20000bec
 8009db0:	ffff0600 	.word	0xffff0600
 8009db4:	20000bd4 	.word	0x20000bd4
 8009db8:	00000c35 	.word	0x00000c35
 8009dbc:	42c80000 	.word	0x42c80000

08009dc0 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8009dc0:	b5b0      	push	{r4, r5, r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8009dc6:	4b97      	ldr	r3, [pc, #604]	@ (800a024 <BMP_Upkeep+0x264>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f007 fcf0 	bl	80117b0 <TimestampIsReached>
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	001a      	movs	r2, r3
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4053      	eors	r3, r2
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <BMP_Upkeep+0x24>
    return BMPState;
 8009dde:	4b92      	ldr	r3, [pc, #584]	@ (800a028 <BMP_Upkeep+0x268>)
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	e11b      	b.n	800a01c <BMP_Upkeep+0x25c>
  }
  switch(BMPState) {
 8009de4:	4b90      	ldr	r3, [pc, #576]	@ (800a028 <BMP_Upkeep+0x268>)
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b09      	cmp	r3, #9
 8009dea:	d900      	bls.n	8009dee <BMP_Upkeep+0x2e>
 8009dec:	e101      	b.n	8009ff2 <BMP_Upkeep+0x232>
 8009dee:	009a      	lsls	r2, r3, #2
 8009df0:	4b8e      	ldr	r3, [pc, #568]	@ (800a02c <BMP_Upkeep+0x26c>)
 8009df2:	18d3      	adds	r3, r2, r3
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8009df8:	4a8d      	ldr	r2, [pc, #564]	@ (800a030 <BMP_Upkeep+0x270>)
 8009dfa:	4b8e      	ldr	r3, [pc, #568]	@ (800a034 <BMP_Upkeep+0x274>)
 8009dfc:	0019      	movs	r1, r3
 8009dfe:	2003      	movs	r0, #3
 8009e00:	f007 fd2c 	bl	801185c <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8009e04:	f008 f976 	bl	80120f4 <HAL_GetTick>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	4a8b      	ldr	r2, [pc, #556]	@ (800a038 <BMP_Upkeep+0x278>)
 8009e0c:	189a      	adds	r2, r3, r2
 8009e0e:	4b85      	ldr	r3, [pc, #532]	@ (800a024 <BMP_Upkeep+0x264>)
 8009e10:	601a      	str	r2, [r3, #0]
    break;
 8009e12:	e101      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 8009e14:	f001 fe8e 	bl	800bb34 <getSensorLock>
 8009e18:	1e03      	subs	r3, r0, #0
 8009e1a:	d000      	beq.n	8009e1e <BMP_Upkeep+0x5e>
 8009e1c:	e0f5      	b.n	800a00a <BMP_Upkeep+0x24a>
      break;
    }
    BMP280_reset();
 8009e1e:	f7ff fb7d 	bl	800951c <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 8009e22:	4b81      	ldr	r3, [pc, #516]	@ (800a028 <BMP_Upkeep+0x268>)
 8009e24:	2201      	movs	r2, #1
 8009e26:	701a      	strb	r2, [r3, #0]
    break;
 8009e28:	e0f6      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8009e2a:	f001 fe83 	bl	800bb34 <getSensorLock>
 8009e2e:	1e03      	subs	r3, r0, #0
 8009e30:	d000      	beq.n	8009e34 <BMP_Upkeep+0x74>
 8009e32:	e0ec      	b.n	800a00e <BMP_Upkeep+0x24e>
      break;
    }
    setSensorLock(BMP280);
 8009e34:	2004      	movs	r0, #4
 8009e36:	f001 fe6d 	bl	800bb14 <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8009e3a:	200a      	movs	r0, #10
 8009e3c:	f008 f964 	bl	8012108 <HAL_Delay>
    if (BMP280_set_config()) {
 8009e40:	f7ff fda0 	bl	8009984 <BMP280_set_config>
 8009e44:	1e03      	subs	r3, r0, #0
 8009e46:	d003      	beq.n	8009e50 <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009e48:	4b77      	ldr	r3, [pc, #476]	@ (800a028 <BMP_Upkeep+0x268>)
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8009e4e:	e0e3      	b.n	800a018 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009e50:	4b75      	ldr	r3, [pc, #468]	@ (800a028 <BMP_Upkeep+0x268>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
  break;
 8009e56:	e0df      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8009e58:	f001 fe6c 	bl	800bb34 <getSensorLock>
 8009e5c:	1e03      	subs	r3, r0, #0
 8009e5e:	d035      	beq.n	8009ecc <BMP_Upkeep+0x10c>
 8009e60:	f001 fe68 	bl	800bb34 <getSensorLock>
 8009e64:	0003      	movs	r3, r0
 8009e66:	2b04      	cmp	r3, #4
 8009e68:	d030      	beq.n	8009ecc <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 8009e6a:	1dfc      	adds	r4, r7, #7
 8009e6c:	f001 fe62 	bl	800bb34 <getSensorLock>
 8009e70:	0003      	movs	r3, r0
 8009e72:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 8009e74:	1dfb      	adds	r3, r7, #7
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d019      	beq.n	8009eb0 <BMP_Upkeep+0xf0>
 8009e7c:	1dfb      	adds	r3, r7, #7
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d013      	beq.n	8009eac <BMP_Upkeep+0xec>
 8009e84:	1dfb      	adds	r3, r7, #7
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d00d      	beq.n	8009ea8 <BMP_Upkeep+0xe8>
 8009e8c:	1dfb      	adds	r3, r7, #7
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d007      	beq.n	8009ea4 <BMP_Upkeep+0xe4>
 8009e94:	1dfb      	adds	r3, r7, #7
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d101      	bne.n	8009ea0 <BMP_Upkeep+0xe0>
 8009e9c:	4b67      	ldr	r3, [pc, #412]	@ (800a03c <BMP_Upkeep+0x27c>)
 8009e9e:	e008      	b.n	8009eb2 <BMP_Upkeep+0xf2>
 8009ea0:	4b67      	ldr	r3, [pc, #412]	@ (800a040 <BMP_Upkeep+0x280>)
 8009ea2:	e006      	b.n	8009eb2 <BMP_Upkeep+0xf2>
 8009ea4:	4b67      	ldr	r3, [pc, #412]	@ (800a044 <BMP_Upkeep+0x284>)
 8009ea6:	e004      	b.n	8009eb2 <BMP_Upkeep+0xf2>
 8009ea8:	4b67      	ldr	r3, [pc, #412]	@ (800a048 <BMP_Upkeep+0x288>)
 8009eaa:	e002      	b.n	8009eb2 <BMP_Upkeep+0xf2>
 8009eac:	4b67      	ldr	r3, [pc, #412]	@ (800a04c <BMP_Upkeep+0x28c>)
 8009eae:	e000      	b.n	8009eb2 <BMP_Upkeep+0xf2>
 8009eb0:	4b67      	ldr	r3, [pc, #412]	@ (800a050 <BMP_Upkeep+0x290>)
 8009eb2:	4a68      	ldr	r2, [pc, #416]	@ (800a054 <BMP_Upkeep+0x294>)
 8009eb4:	495f      	ldr	r1, [pc, #380]	@ (800a034 <BMP_Upkeep+0x274>)
 8009eb6:	2003      	movs	r0, #3
 8009eb8:	f007 fcd0 	bl	801185c <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 8009ebc:	f008 f91a 	bl	80120f4 <HAL_GetTick>
 8009ec0:	0003      	movs	r3, r0
 8009ec2:	3361      	adds	r3, #97	@ 0x61
 8009ec4:	001a      	movs	r2, r3
 8009ec6:	4b57      	ldr	r3, [pc, #348]	@ (800a024 <BMP_Upkeep+0x264>)
 8009ec8:	601a      	str	r2, [r3, #0]
      break;
 8009eca:	e0a5      	b.n	800a018 <BMP_Upkeep+0x258>
    }
    if (getSensorLock() == FREE) {
 8009ecc:	f001 fe32 	bl	800bb34 <getSensorLock>
 8009ed0:	1e03      	subs	r3, r0, #0
 8009ed2:	d105      	bne.n	8009ee0 <BMP_Upkeep+0x120>
      HAL_Delay(10);
 8009ed4:	200a      	movs	r0, #10
 8009ed6:	f008 f917 	bl	8012108 <HAL_Delay>
      setSensorLock(BMP280);
 8009eda:	2004      	movs	r0, #4
 8009edc:	f001 fe1a 	bl	800bb14 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 8009ee0:	f7ff fd74 	bl	80099cc <BMP280_set_mode>
 8009ee4:	1e03      	subs	r3, r0, #0
 8009ee6:	d003      	beq.n	8009ef0 <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009ee8:	4b4f      	ldr	r3, [pc, #316]	@ (800a028 <BMP_Upkeep+0x268>)
 8009eea:	2205      	movs	r2, #5
 8009eec:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 8009eee:	e093      	b.n	800a018 <BMP_Upkeep+0x258>
      Error("Error while setting BMP280 to forced mode");
 8009ef0:	4a59      	ldr	r2, [pc, #356]	@ (800a058 <BMP_Upkeep+0x298>)
 8009ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800a05c <BMP_Upkeep+0x29c>)
 8009ef4:	0019      	movs	r1, r3
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	f007 fcb0 	bl	801185c <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8009efc:	4b4a      	ldr	r3, [pc, #296]	@ (800a028 <BMP_Upkeep+0x268>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
    break;
 8009f02:	e089      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 8009f04:	f7ff fde2 	bl	8009acc <BMP280_get_measurement_values>
 8009f08:	1e03      	subs	r3, r0, #0
 8009f0a:	d006      	beq.n	8009f1a <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	f001 fe01 	bl	800bb14 <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 8009f12:	4b45      	ldr	r3, [pc, #276]	@ (800a028 <BMP_Upkeep+0x268>)
 8009f14:	2203      	movs	r2, #3
 8009f16:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8009f18:	e07e      	b.n	800a018 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009f1a:	4b43      	ldr	r3, [pc, #268]	@ (800a028 <BMP_Upkeep+0x268>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8009f20:	4a4f      	ldr	r2, [pc, #316]	@ (800a060 <BMP_Upkeep+0x2a0>)
 8009f22:	4b4e      	ldr	r3, [pc, #312]	@ (800a05c <BMP_Upkeep+0x29c>)
 8009f24:	0019      	movs	r1, r3
 8009f26:	2001      	movs	r0, #1
 8009f28:	f007 fc98 	bl	801185c <CreateLine>
  break;
 8009f2c:	e074      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8009f2e:	f7ff fe53 	bl	8009bd8 <BMP280_calc_temperature>
 8009f32:	1c03      	adds	r3, r0, #0
 8009f34:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 8009f36:	f7ff fe97 	bl	8009c68 <BMP280_calc_pressure>
 8009f3a:	1c03      	adds	r3, r0, #0
 8009f3c:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 8009f3e:	4949      	ldr	r1, [pc, #292]	@ (800a064 <BMP_Upkeep+0x2a4>)
 8009f40:	68b8      	ldr	r0, [r7, #8]
 8009f42:	f7f6 fb09 	bl	8000558 <__aeabi_fcmpgt>
 8009f46:	1e03      	subs	r3, r0, #0
 8009f48:	d025      	beq.n	8009f96 <BMP_Upkeep+0x1d6>
 8009f4a:	4947      	ldr	r1, [pc, #284]	@ (800a068 <BMP_Upkeep+0x2a8>)
 8009f4c:	68b8      	ldr	r0, [r7, #8]
 8009f4e:	f7f6 faef 	bl	8000530 <__aeabi_fcmplt>
 8009f52:	1e03      	subs	r3, r0, #0
 8009f54:	d01f      	beq.n	8009f96 <BMP_Upkeep+0x1d6>
      sethPa(airhpa);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	1c18      	adds	r0, r3, #0
 8009f5a:	f7fa fb3d 	bl	80045d8 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7f9 fa80 	bl	8003464 <__aeabi_f2d>
 8009f64:	0004      	movs	r4, r0
 8009f66:	000d      	movs	r5, r1
 8009f68:	68b8      	ldr	r0, [r7, #8]
 8009f6a:	f7f9 fa7b 	bl	8003464 <__aeabi_f2d>
 8009f6e:	0002      	movs	r2, r0
 8009f70:	000b      	movs	r3, r1
 8009f72:	483e      	ldr	r0, [pc, #248]	@ (800a06c <BMP_Upkeep+0x2ac>)
 8009f74:	493e      	ldr	r1, [pc, #248]	@ (800a070 <BMP_Upkeep+0x2b0>)
 8009f76:	9202      	str	r2, [sp, #8]
 8009f78:	9303      	str	r3, [sp, #12]
 8009f7a:	9400      	str	r4, [sp, #0]
 8009f7c:	9501      	str	r5, [sp, #4]
 8009f7e:	0002      	movs	r2, r0
 8009f80:	2002      	movs	r0, #2
 8009f82:	f007 fc6b 	bl	801185c <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 8009f86:	f008 f8b5 	bl	80120f4 <HAL_GetTick>
 8009f8a:	0003      	movs	r3, r0
 8009f8c:	4a39      	ldr	r2, [pc, #228]	@ (800a074 <BMP_Upkeep+0x2b4>)
 8009f8e:	189a      	adds	r2, r3, r2
 8009f90:	4b24      	ldr	r3, [pc, #144]	@ (800a024 <BMP_Upkeep+0x264>)
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	e00d      	b.n	8009fb2 <BMP_Upkeep+0x1f2>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 8009f96:	4a38      	ldr	r2, [pc, #224]	@ (800a078 <BMP_Upkeep+0x2b8>)
 8009f98:	4b30      	ldr	r3, [pc, #192]	@ (800a05c <BMP_Upkeep+0x29c>)
 8009f9a:	0019      	movs	r1, r3
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	f007 fc5d 	bl	801185c <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 2000;
 8009fa2:	f008 f8a7 	bl	80120f4 <HAL_GetTick>
 8009fa6:	0003      	movs	r3, r0
 8009fa8:	22fa      	movs	r2, #250	@ 0xfa
 8009faa:	00d2      	lsls	r2, r2, #3
 8009fac:	189a      	adds	r2, r3, r2
 8009fae:	4b1d      	ldr	r3, [pc, #116]	@ (800a024 <BMP_Upkeep+0x264>)
 8009fb0:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 8009fb2:	4b1d      	ldr	r3, [pc, #116]	@ (800a028 <BMP_Upkeep+0x268>)
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	701a      	strb	r2, [r3, #0]
    break;
 8009fb8:	e02e      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 8009fba:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <BMP_Upkeep+0x268>)
 8009fbc:	2209      	movs	r2, #9
 8009fbe:	701a      	strb	r2, [r3, #0]
    break;
 8009fc0:	e02a      	b.n	800a018 <BMP_Upkeep+0x258>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 8009fc2:	f001 fdb7 	bl	800bb34 <getSensorLock>
 8009fc6:	1e03      	subs	r3, r0, #0
 8009fc8:	d123      	bne.n	800a012 <BMP_Upkeep+0x252>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 8009fca:	f7ff fd53 	bl	8009a74 <BMP280_get_mode>
 8009fce:	0003      	movs	r3, r0
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d103      	bne.n	8009fdc <BMP_Upkeep+0x21c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009fd4:	4b14      	ldr	r3, [pc, #80]	@ (800a028 <BMP_Upkeep+0x268>)
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e002      	b.n	8009fe2 <BMP_Upkeep+0x222>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009fdc:	4b12      	ldr	r3, [pc, #72]	@ (800a028 <BMP_Upkeep+0x268>)
 8009fde:	2202      	movs	r2, #2
 8009fe0:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 8009fe2:	f008 f887 	bl	80120f4 <HAL_GetTick>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	3317      	adds	r3, #23
 8009fea:	001a      	movs	r2, r3
 8009fec:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <BMP_Upkeep+0x264>)
 8009fee:	601a      	str	r2, [r3, #0]
    break;
 8009ff0:	e012      	b.n	800a018 <BMP_Upkeep+0x258>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <BMP_Upkeep+0x268>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 8009ff8:	f001 fd9c 	bl	800bb34 <getSensorLock>
 8009ffc:	0003      	movs	r3, r0
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d009      	beq.n	800a016 <BMP_Upkeep+0x256>
      setSensorLock(FREE);
 800a002:	2000      	movs	r0, #0
 800a004:	f001 fd86 	bl	800bb14 <setSensorLock>
    }
    break;
 800a008:	e005      	b.n	800a016 <BMP_Upkeep+0x256>
      break;
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	e004      	b.n	800a018 <BMP_Upkeep+0x258>
      break;
 800a00e:	46c0      	nop			@ (mov r8, r8)
 800a010:	e002      	b.n	800a018 <BMP_Upkeep+0x258>
      break;
 800a012:	46c0      	nop			@ (mov r8, r8)
 800a014:	e000      	b.n	800a018 <BMP_Upkeep+0x258>
    break;
 800a016:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800a018:	4b03      	ldr	r3, [pc, #12]	@ (800a028 <BMP_Upkeep+0x268>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
}
 800a01c:	0018      	movs	r0, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	b004      	add	sp, #16
 800a022:	bdb0      	pop	{r4, r5, r7, pc}
 800a024:	20000bf8 	.word	0x20000bf8
 800a028:	20000096 	.word	0x20000096
 800a02c:	0802b014 	.word	0x0802b014
 800a030:	0802976c 	.word	0x0802976c
 800a034:	0802933c 	.word	0x0802933c
 800a038:	002f9b80 	.word	0x002f9b80
 800a03c:	080297a8 	.word	0x080297a8
 800a040:	080297b0 	.word	0x080297b0
 800a044:	080297b8 	.word	0x080297b8
 800a048:	080297c0 	.word	0x080297c0
 800a04c:	080297c8 	.word	0x080297c8
 800a050:	080297d0 	.word	0x080297d0
 800a054:	080297d8 	.word	0x080297d8
 800a058:	08029800 	.word	0x08029800
 800a05c:	0802962c 	.word	0x0802962c
 800a060:	0802982c 	.word	0x0802982c
 800a064:	44548000 	.word	0x44548000
 800a068:	44898000 	.word	0x44898000
 800a06c:	08029864 	.word	0x08029864
 800a070:	0802931c 	.word	0x0802931c
 800a074:	0000ea60 	.word	0x0000ea60
 800a078:	0802989c 	.word	0x0802989c

0800a07c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a082:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <MX_DMA_Init+0x48>)
 800a084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a086:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <MX_DMA_Init+0x48>)
 800a088:	2101      	movs	r1, #1
 800a08a:	430a      	orrs	r2, r1
 800a08c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a08e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c4 <MX_DMA_Init+0x48>)
 800a090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a092:	2201      	movs	r2, #1
 800a094:	4013      	ands	r3, r2
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	200a      	movs	r0, #10
 800a0a0:	f008 fccc 	bl	8012a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a0a4:	200a      	movs	r0, #10
 800a0a6:	f008 fcde 	bl	8012a66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2103      	movs	r1, #3
 800a0ae:	200b      	movs	r0, #11
 800a0b0:	f008 fcc4 	bl	8012a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800a0b4:	200b      	movs	r0, #11
 800a0b6:	f008 fcd6 	bl	8012a66 <HAL_NVIC_EnableIRQ>

}
 800a0ba:	46c0      	nop			@ (mov r8, r8)
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	b002      	add	sp, #8
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	46c0      	nop			@ (mov r8, r8)
 800a0c4:	40021000 	.word	0x40021000

0800a0c8 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800a0c8:	b590      	push	{r4, r7, lr}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	1dbb      	adds	r3, r7, #6
 800a0d4:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800a0d6:	4b17      	ldr	r3, [pc, #92]	@ (800a134 <WriteUint8ArrayEeprom+0x6c>)
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800a0dc:	f009 f840 	bl	8013160 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800a0e0:	2316      	movs	r3, #22
 800a0e2:	18fb      	adds	r3, r7, r3
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	e015      	b.n	800a116 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800a0ea:	4b12      	ldr	r3, [pc, #72]	@ (800a134 <WriteUint8ArrayEeprom+0x6c>)
 800a0ec:	6819      	ldr	r1, [r3, #0]
 800a0ee:	2416      	movs	r4, #22
 800a0f0:	193b      	adds	r3, r7, r4
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	18d3      	adds	r3, r2, r3
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	001a      	movs	r2, r3
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f009 f897 	bl	8013230 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800a102:	4b0c      	ldr	r3, [pc, #48]	@ (800a134 <WriteUint8ArrayEeprom+0x6c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	4b0a      	ldr	r3, [pc, #40]	@ (800a134 <WriteUint8ArrayEeprom+0x6c>)
 800a10a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a10c:	193b      	adds	r3, r7, r4
 800a10e:	881a      	ldrh	r2, [r3, #0]
 800a110:	193b      	adds	r3, r7, r4
 800a112:	3201      	adds	r2, #1
 800a114:	801a      	strh	r2, [r3, #0]
 800a116:	2316      	movs	r3, #22
 800a118:	18fa      	adds	r2, r7, r3
 800a11a:	1dbb      	adds	r3, r7, #6
 800a11c:	8812      	ldrh	r2, [r2, #0]
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d3e2      	bcc.n	800a0ea <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800a124:	f009 f84a 	bl	80131bc <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800a128:	4b02      	ldr	r3, [pc, #8]	@ (800a134 <WriteUint8ArrayEeprom+0x6c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
}
 800a12c:	0018      	movs	r0, r3
 800a12e:	46bd      	mov	sp, r7
 800a130:	b007      	add	sp, #28
 800a132:	bd90      	pop	{r4, r7, pc}
 800a134:	20000c1c 	.word	0x20000c1c

0800a138 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	0019      	movs	r1, r3
 800a144:	1dbb      	adds	r3, r7, #6
 800a146:	801a      	strh	r2, [r3, #0]
 800a148:	1d3b      	adds	r3, r7, #4
 800a14a:	1c0a      	adds	r2, r1, #0
 800a14c:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800a14e:	1dba      	adds	r2, r7, #6
 800a150:	1d3b      	adds	r3, r7, #4
 800a152:	8812      	ldrh	r2, [r2, #0]
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d806      	bhi.n	800a168 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800a15a:	1dbb      	adds	r3, r7, #6
 800a15c:	881a      	ldrh	r2, [r3, #0]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	0018      	movs	r0, r3
 800a164:	f7ff ffb0 	bl	800a0c8 <WriteUint8ArrayEeprom>
    }
}
 800a168:	46c0      	nop			@ (mov r8, r8)
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b004      	add	sp, #16
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	1dbb      	adds	r3, r7, #6
 800a17c:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a17e:	2316      	movs	r3, #22
 800a180:	18fb      	adds	r3, r7, r3
 800a182:	2200      	movs	r2, #0
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	e010      	b.n	800a1aa <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800a188:	2016      	movs	r0, #22
 800a18a:	183b      	adds	r3, r7, r0
 800a18c:	881a      	ldrh	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	18d3      	adds	r3, r2, r3
 800a192:	0019      	movs	r1, r3
 800a194:	183b      	adds	r3, r7, r0
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	18d3      	adds	r3, r2, r3
 800a19c:	780a      	ldrb	r2, [r1, #0]
 800a19e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a1a0:	183b      	adds	r3, r7, r0
 800a1a2:	881a      	ldrh	r2, [r3, #0]
 800a1a4:	183b      	adds	r3, r7, r0
 800a1a6:	3201      	adds	r2, #1
 800a1a8:	801a      	strh	r2, [r3, #0]
 800a1aa:	2316      	movs	r3, #22
 800a1ac:	18fa      	adds	r2, r7, r3
 800a1ae:	1dbb      	adds	r3, r7, #6
 800a1b0:	8812      	ldrh	r2, [r2, #0]
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d3e7      	bcc.n	800a188 <ReadUint8ArrayEEprom+0x18>
    }
}
 800a1b8:	46c0      	nop			@ (mov r8, r8)
 800a1ba:	46c0      	nop			@ (mov r8, r8)
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	b006      	add	sp, #24
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800a1c2:	b590      	push	{r4, r7, lr}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	000a      	movs	r2, r1
 800a1cc:	1cbb      	adds	r3, r7, #2
 800a1ce:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800a1d0:	f008 ffc6 	bl	8013160 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800a1d4:	230e      	movs	r3, #14
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	2200      	movs	r2, #0
 800a1da:	801a      	strh	r2, [r3, #0]
 800a1dc:	e00c      	b.n	800a1f8 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800a1de:	240e      	movs	r4, #14
 800a1e0:	193b      	adds	r3, r7, r4
 800a1e2:	881a      	ldrh	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	18d3      	adds	r3, r2, r3
 800a1e8:	0018      	movs	r0, r3
 800a1ea:	f008 fff5 	bl	80131d8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800a1ee:	193b      	adds	r3, r7, r4
 800a1f0:	193a      	adds	r2, r7, r4
 800a1f2:	8812      	ldrh	r2, [r2, #0]
 800a1f4:	3204      	adds	r2, #4
 800a1f6:	801a      	strh	r2, [r3, #0]
 800a1f8:	230e      	movs	r3, #14
 800a1fa:	18fa      	adds	r2, r7, r3
 800a1fc:	1cbb      	adds	r3, r7, #2
 800a1fe:	8812      	ldrh	r2, [r2, #0]
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d3eb      	bcc.n	800a1de <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800a206:	f008 ffd9 	bl	80131bc <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800a20a:	46c0      	nop			@ (mov r8, r8)
 800a20c:	46bd      	mov	sp, r7
 800a20e:	b005      	add	sp, #20
 800a210:	bd90      	pop	{r4, r7, pc}
	...

0800a214 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b7f      	cmp	r3, #127	@ 0x7f
 800a224:	d901      	bls.n	800a22a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800a226:	237f      	movs	r3, #127	@ 0x7f
 800a228:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800a22a:	2017      	movs	r0, #23
 800a22c:	183b      	adds	r3, r7, r0
 800a22e:	490d      	ldr	r1, [pc, #52]	@ (800a264 <accessLUT10log10+0x50>)
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	188a      	adds	r2, r1, r2
 800a234:	7812      	ldrb	r2, [r2, #0]
 800a236:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800a238:	0001      	movs	r1, r0
 800a23a:	187b      	adds	r3, r7, r1
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2206      	movs	r2, #6
 800a240:	4113      	asrs	r3, r2
 800a242:	001a      	movs	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800a248:	187b      	adds	r3, r7, r1
 800a24a:	781a      	ldrb	r2, [r3, #0]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2106      	movs	r1, #6
 800a252:	408b      	lsls	r3, r1
 800a254:	1ad2      	subs	r2, r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
}
 800a25a:	46c0      	nop			@ (mov r8, r8)
 800a25c:	46bd      	mov	sp, r7
 800a25e:	b006      	add	sp, #24
 800a260:	bd80      	pop	{r7, pc}
 800a262:	46c0      	nop			@ (mov r8, r8)
 800a264:	0802b03c 	.word	0x0802b03c

0800a268 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800a268:	b5b0      	push	{r4, r5, r7, lr}
 800a26a:	b090      	sub	sp, #64	@ 0x40
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6138      	str	r0, [r7, #16]
 800a270:	6179      	str	r1, [r7, #20]
 800a272:	60fa      	str	r2, [r7, #12]
 800a274:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800a276:	2308      	movs	r3, #8
 800a278:	001a      	movs	r2, r3
 800a27a:	3a20      	subs	r2, #32
 800a27c:	2a00      	cmp	r2, #0
 800a27e:	db03      	blt.n	800a288 <efficient10log10+0x20>
 800a280:	2101      	movs	r1, #1
 800a282:	4091      	lsls	r1, r2
 800a284:	000d      	movs	r5, r1
 800a286:	e008      	b.n	800a29a <efficient10log10+0x32>
 800a288:	2220      	movs	r2, #32
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	2101      	movs	r1, #1
 800a28e:	40d1      	lsrs	r1, r2
 800a290:	000a      	movs	r2, r1
 800a292:	2100      	movs	r1, #0
 800a294:	4099      	lsls	r1, r3
 800a296:	000d      	movs	r5, r1
 800a298:	4315      	orrs	r5, r2
 800a29a:	2201      	movs	r2, #1
 800a29c:	409a      	lsls	r2, r3
 800a29e:	0014      	movs	r4, r2
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	4252      	negs	r2, r2
 800a2a4:	17d3      	asrs	r3, r2, #31
 800a2a6:	1912      	adds	r2, r2, r4
 800a2a8:	416b      	adcs	r3, r5
 800a2aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800a2ae:	2336      	movs	r3, #54	@ 0x36
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	189b      	adds	r3, r3, r2
 800a2b4:	19db      	adds	r3, r3, r7
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800a2ba:	e017      	b.n	800a2ec <efficient10log10+0x84>
    {
        P = P >> 1;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	07db      	lsls	r3, r3, #31
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	0852      	lsrs	r2, r2, #1
 800a2c4:	603a      	str	r2, [r7, #0]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	603a      	str	r2, [r7, #0]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	085b      	lsrs	r3, r3, #1
 800a2d0:	607b      	str	r3, [r7, #4]
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	687c      	ldr	r4, [r7, #4]
 800a2d6:	613b      	str	r3, [r7, #16]
 800a2d8:	617c      	str	r4, [r7, #20]
        bShift++;
 800a2da:	2136      	movs	r1, #54	@ 0x36
 800a2dc:	2008      	movs	r0, #8
 800a2de:	180b      	adds	r3, r1, r0
 800a2e0:	19db      	adds	r3, r3, r7
 800a2e2:	881a      	ldrh	r2, [r3, #0]
 800a2e4:	180b      	adds	r3, r1, r0
 800a2e6:	19db      	adds	r3, r3, r7
 800a2e8:	3201      	adds	r2, #1
 800a2ea:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d8e3      	bhi.n	800a2bc <efficient10log10+0x54>
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d103      	bne.n	800a304 <efficient10log10+0x9c>
 800a2fc:	693a      	ldr	r2, [r7, #16]
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	429a      	cmp	r2, r3
 800a302:	d8db      	bhi.n	800a2bc <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	2308      	movs	r3, #8
 800a308:	3b01      	subs	r3, #1
 800a30a:	2101      	movs	r1, #1
 800a30c:	4099      	lsls	r1, r3
 800a30e:	000b      	movs	r3, r1
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800a318:	2300      	movs	r3, #0
 800a31a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800a31c:	231c      	movs	r3, #28
 800a31e:	2408      	movs	r4, #8
 800a320:	191b      	adds	r3, r3, r4
 800a322:	19da      	adds	r2, r3, r7
 800a324:	2320      	movs	r3, #32
 800a326:	191b      	adds	r3, r3, r4
 800a328:	19d9      	adds	r1, r3, r7
 800a32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32c:	0018      	movs	r0, r3
 800a32e:	f7ff ff71 	bl	800a214 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800a332:	2215      	movs	r2, #21
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800a338:	2036      	movs	r0, #54	@ 0x36
 800a33a:	1902      	adds	r2, r0, r4
 800a33c:	19d2      	adds	r2, r2, r7
 800a33e:	8812      	ldrh	r2, [r2, #0]
 800a340:	2103      	movs	r1, #3
 800a342:	434a      	muls	r2, r1
 800a344:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800a346:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800a348:	0021      	movs	r1, r4
 800a34a:	1843      	adds	r3, r0, r1
 800a34c:	19db      	adds	r3, r3, r7
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	2201      	movs	r2, #1
 800a352:	4353      	muls	r3, r2
 800a354:	2203      	movs	r2, #3
 800a356:	4113      	asrs	r3, r2
 800a358:	001a      	movs	r2, r3
 800a35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a35c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800a35e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800a360:	2314      	movs	r3, #20
 800a362:	185b      	adds	r3, r3, r1
 800a364:	19da      	adds	r2, r3, r7
 800a366:	2318      	movs	r3, #24
 800a368:	185b      	adds	r3, r3, r1
 800a36a:	19db      	adds	r3, r3, r7
 800a36c:	0011      	movs	r1, r2
 800a36e:	0018      	movs	r0, r3
 800a370:	f000 f80a 	bl	800a388 <correctIntFracNumber>
    integerPart[0] = intPart;
 800a374:	6a3a      	ldr	r2, [r7, #32]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800a37a:	69fa      	ldr	r2, [r7, #28]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	601a      	str	r2, [r3, #0]
}
 800a380:	46c0      	nop			@ (mov r8, r8)
 800a382:	46bd      	mov	sp, r7
 800a384:	b010      	add	sp, #64	@ 0x40
 800a386:	bdb0      	pop	{r4, r5, r7, pc}

0800a388 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800a392:	e00a      	b.n	800a3aa <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3b0a      	subs	r3, #10
 800a3a4:	001a      	movs	r2, r3
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b09      	cmp	r3, #9
 800a3b0:	dcf0      	bgt.n	800a394 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800a3b2:	e00a      	b.n	800a3ca <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	1e5a      	subs	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	330a      	adds	r3, #10
 800a3c4:	001a      	movs	r2, r3
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3309      	adds	r3, #9
 800a3d0:	dbf0      	blt.n	800a3b4 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da0f      	bge.n	800a3fa <correctIntFracNumber+0x72>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dd0b      	ble.n	800a3fa <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3b0a      	subs	r3, #10
 800a3f2:	001a      	movs	r2, r3
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800a3f8:	e012      	b.n	800a420 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dd0e      	ble.n	800a420 <correctIntFracNumber+0x98>
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	da0a      	bge.n	800a420 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	1e5a      	subs	r2, r3, #1
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	330a      	adds	r3, #10
 800a41a:	001a      	movs	r2, r3
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	601a      	str	r2, [r3, #0]
}
 800a420:	46c0      	nop			@ (mov r8, r8)
 800a422:	46bd      	mov	sp, r7
 800a424:	b002      	add	sp, #8
 800a426:	bd80      	pop	{r7, pc}

0800a428 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b08b      	sub	sp, #44	@ 0x2c
 800a42c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a42e:	2414      	movs	r4, #20
 800a430:	193b      	adds	r3, r7, r4
 800a432:	0018      	movs	r0, r3
 800a434:	2314      	movs	r3, #20
 800a436:	001a      	movs	r2, r3
 800a438:	2100      	movs	r1, #0
 800a43a:	f019 fb6d 	bl	8023b18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a43e:	4b8a      	ldr	r3, [pc, #552]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a442:	4b89      	ldr	r3, [pc, #548]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a444:	2104      	movs	r1, #4
 800a446:	430a      	orrs	r2, r1
 800a448:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a44a:	4b87      	ldr	r3, [pc, #540]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44e:	2204      	movs	r2, #4
 800a450:	4013      	ands	r3, r2
 800a452:	613b      	str	r3, [r7, #16]
 800a454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a456:	4b84      	ldr	r3, [pc, #528]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45a:	4b83      	ldr	r3, [pc, #524]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a45c:	2180      	movs	r1, #128	@ 0x80
 800a45e:	430a      	orrs	r2, r1
 800a460:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a462:	4b81      	ldr	r3, [pc, #516]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	2280      	movs	r2, #128	@ 0x80
 800a468:	4013      	ands	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a46e:	4b7e      	ldr	r3, [pc, #504]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a472:	4b7d      	ldr	r3, [pc, #500]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a474:	2101      	movs	r1, #1
 800a476:	430a      	orrs	r2, r1
 800a478:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a47a:	4b7b      	ldr	r3, [pc, #492]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47e:	2201      	movs	r2, #1
 800a480:	4013      	ands	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]
 800a484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a486:	4b78      	ldr	r3, [pc, #480]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a48a:	4b77      	ldr	r3, [pc, #476]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a48c:	2102      	movs	r1, #2
 800a48e:	430a      	orrs	r2, r1
 800a490:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a492:	4b75      	ldr	r3, [pc, #468]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a496:	2202      	movs	r2, #2
 800a498:	4013      	ands	r3, r2
 800a49a:	607b      	str	r3, [r7, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a49e:	4b72      	ldr	r3, [pc, #456]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a2:	4b71      	ldr	r3, [pc, #452]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a4a4:	2108      	movs	r1, #8
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a4aa:	4b6f      	ldr	r3, [pc, #444]	@ (800a668 <MX_GPIO_Init+0x240>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ae:	2208      	movs	r2, #8
 800a4b0:	4013      	ands	r3, r2
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800a4b6:	4b6d      	ldr	r3, [pc, #436]	@ (800a66c <MX_GPIO_Init+0x244>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	2101      	movs	r1, #1
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f009 f8aa 	bl	8013616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800a4c2:	4b6a      	ldr	r3, [pc, #424]	@ (800a66c <MX_GPIO_Init+0x244>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	2102      	movs	r1, #2
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	f009 f8a4 	bl	8013616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800a4ce:	4968      	ldr	r1, [pc, #416]	@ (800a670 <MX_GPIO_Init+0x248>)
 800a4d0:	4b68      	ldr	r3, [pc, #416]	@ (800a674 <MX_GPIO_Init+0x24c>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f009 f89e 	bl	8013616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800a4da:	2380      	movs	r3, #128	@ 0x80
 800a4dc:	011b      	lsls	r3, r3, #4
 800a4de:	4866      	ldr	r0, [pc, #408]	@ (800a678 <MX_GPIO_Init+0x250>)
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	0019      	movs	r1, r3
 800a4e4:	f009 f897 	bl	8013616 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800a4e8:	2380      	movs	r3, #128	@ 0x80
 800a4ea:	015b      	lsls	r3, r3, #5
 800a4ec:	4862      	ldr	r0, [pc, #392]	@ (800a678 <MX_GPIO_Init+0x250>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	0019      	movs	r1, r3
 800a4f2:	f009 f890 	bl	8013616 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800a4f6:	193b      	adds	r3, r7, r4
 800a4f8:	4a60      	ldr	r2, [pc, #384]	@ (800a67c <MX_GPIO_Init+0x254>)
 800a4fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4fc:	193b      	adds	r3, r7, r4
 800a4fe:	2203      	movs	r2, #3
 800a500:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a502:	193b      	adds	r3, r7, r4
 800a504:	2200      	movs	r2, #0
 800a506:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a508:	193b      	adds	r3, r7, r4
 800a50a:	4a5b      	ldr	r2, [pc, #364]	@ (800a678 <MX_GPIO_Init+0x250>)
 800a50c:	0019      	movs	r1, r3
 800a50e:	0010      	movs	r0, r2
 800a510:	f008 fee6 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800a514:	193b      	adds	r3, r7, r4
 800a516:	2203      	movs	r2, #3
 800a518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a51a:	193b      	adds	r3, r7, r4
 800a51c:	2201      	movs	r2, #1
 800a51e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a520:	193b      	adds	r3, r7, r4
 800a522:	2200      	movs	r2, #0
 800a524:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a526:	193b      	adds	r3, r7, r4
 800a528:	2200      	movs	r2, #0
 800a52a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a52c:	193b      	adds	r3, r7, r4
 800a52e:	4a4f      	ldr	r2, [pc, #316]	@ (800a66c <MX_GPIO_Init+0x244>)
 800a530:	0019      	movs	r1, r3
 800a532:	0010      	movs	r0, r2
 800a534:	f008 fed4 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a538:	193b      	adds	r3, r7, r4
 800a53a:	2270      	movs	r2, #112	@ 0x70
 800a53c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a53e:	193b      	adds	r3, r7, r4
 800a540:	2203      	movs	r2, #3
 800a542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a544:	193b      	adds	r3, r7, r4
 800a546:	2200      	movs	r2, #0
 800a548:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a54a:	193a      	adds	r2, r7, r4
 800a54c:	23a0      	movs	r3, #160	@ 0xa0
 800a54e:	05db      	lsls	r3, r3, #23
 800a550:	0011      	movs	r1, r2
 800a552:	0018      	movs	r0, r3
 800a554:	f008 fec4 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800a558:	193b      	adds	r3, r7, r4
 800a55a:	22c0      	movs	r2, #192	@ 0xc0
 800a55c:	0052      	lsls	r2, r2, #1
 800a55e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a560:	193b      	adds	r3, r7, r4
 800a562:	2200      	movs	r2, #0
 800a564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a566:	193b      	adds	r3, r7, r4
 800a568:	2200      	movs	r2, #0
 800a56a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a56c:	193a      	adds	r2, r7, r4
 800a56e:	23a0      	movs	r3, #160	@ 0xa0
 800a570:	05db      	lsls	r3, r3, #23
 800a572:	0011      	movs	r1, r2
 800a574:	0018      	movs	r0, r3
 800a576:	f008 feb3 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800a57a:	193b      	adds	r3, r7, r4
 800a57c:	4a3c      	ldr	r2, [pc, #240]	@ (800a670 <MX_GPIO_Init+0x248>)
 800a57e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a580:	193b      	adds	r3, r7, r4
 800a582:	2201      	movs	r2, #1
 800a584:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a586:	193b      	adds	r3, r7, r4
 800a588:	2200      	movs	r2, #0
 800a58a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a58c:	193b      	adds	r3, r7, r4
 800a58e:	2200      	movs	r2, #0
 800a590:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a592:	193b      	adds	r3, r7, r4
 800a594:	4a37      	ldr	r2, [pc, #220]	@ (800a674 <MX_GPIO_Init+0x24c>)
 800a596:	0019      	movs	r1, r3
 800a598:	0010      	movs	r0, r2
 800a59a:	f008 fea1 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800a59e:	193b      	adds	r3, r7, r4
 800a5a0:	4a37      	ldr	r2, [pc, #220]	@ (800a680 <MX_GPIO_Init+0x258>)
 800a5a2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a5a4:	193b      	adds	r3, r7, r4
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5aa:	193b      	adds	r3, r7, r4
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5b0:	193b      	adds	r3, r7, r4
 800a5b2:	4a30      	ldr	r2, [pc, #192]	@ (800a674 <MX_GPIO_Init+0x24c>)
 800a5b4:	0019      	movs	r1, r3
 800a5b6:	0010      	movs	r0, r2
 800a5b8:	f008 fe92 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800a5bc:	0021      	movs	r1, r4
 800a5be:	187b      	adds	r3, r7, r1
 800a5c0:	2280      	movs	r2, #128	@ 0x80
 800a5c2:	0092      	lsls	r2, r2, #2
 800a5c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5c6:	000c      	movs	r4, r1
 800a5c8:	193b      	adds	r3, r7, r4
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ce:	193b      	adds	r3, r7, r4
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800a5d4:	193b      	adds	r3, r7, r4
 800a5d6:	4a28      	ldr	r2, [pc, #160]	@ (800a678 <MX_GPIO_Init+0x250>)
 800a5d8:	0019      	movs	r1, r3
 800a5da:	0010      	movs	r0, r2
 800a5dc:	f008 fe80 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800a5e0:	193b      	adds	r3, r7, r4
 800a5e2:	2280      	movs	r2, #128	@ 0x80
 800a5e4:	0212      	lsls	r2, r2, #8
 800a5e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a5e8:	193b      	adds	r3, r7, r4
 800a5ea:	2288      	movs	r2, #136	@ 0x88
 800a5ec:	0352      	lsls	r2, r2, #13
 800a5ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f0:	193b      	adds	r3, r7, r4
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800a5f6:	193a      	adds	r2, r7, r4
 800a5f8:	23a0      	movs	r3, #160	@ 0xa0
 800a5fa:	05db      	lsls	r3, r3, #23
 800a5fc:	0011      	movs	r1, r2
 800a5fe:	0018      	movs	r0, r3
 800a600:	f008 fe6e 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800a604:	0021      	movs	r1, r4
 800a606:	187b      	adds	r3, r7, r1
 800a608:	22c0      	movs	r2, #192	@ 0xc0
 800a60a:	0152      	lsls	r2, r2, #5
 800a60c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a60e:	000c      	movs	r4, r1
 800a610:	193b      	adds	r3, r7, r4
 800a612:	2201      	movs	r2, #1
 800a614:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a616:	193b      	adds	r3, r7, r4
 800a618:	2200      	movs	r2, #0
 800a61a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a61c:	193b      	adds	r3, r7, r4
 800a61e:	2200      	movs	r2, #0
 800a620:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a622:	193b      	adds	r3, r7, r4
 800a624:	4a14      	ldr	r2, [pc, #80]	@ (800a678 <MX_GPIO_Init+0x250>)
 800a626:	0019      	movs	r1, r3
 800a628:	0010      	movs	r0, r2
 800a62a:	f008 fe59 	bl	80132e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800a62e:	0021      	movs	r1, r4
 800a630:	187b      	adds	r3, r7, r1
 800a632:	2204      	movs	r2, #4
 800a634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a636:	187b      	adds	r3, r7, r1
 800a638:	2200      	movs	r2, #0
 800a63a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a63c:	187b      	adds	r3, r7, r1
 800a63e:	2201      	movs	r2, #1
 800a640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800a642:	187b      	adds	r3, r7, r1
 800a644:	4a0f      	ldr	r2, [pc, #60]	@ (800a684 <MX_GPIO_Init+0x25c>)
 800a646:	0019      	movs	r1, r3
 800a648:	0010      	movs	r0, r2
 800a64a:	f008 fe49 	bl	80132e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	2007      	movs	r0, #7
 800a654:	f008 f9f2 	bl	8012a3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a658:	2007      	movs	r0, #7
 800a65a:	f008 fa04 	bl	8012a66 <HAL_NVIC_EnableIRQ>

}
 800a65e:	46c0      	nop			@ (mov r8, r8)
 800a660:	46bd      	mov	sp, r7
 800a662:	b00b      	add	sp, #44	@ 0x2c
 800a664:	bd90      	pop	{r4, r7, pc}
 800a666:	46c0      	nop			@ (mov r8, r8)
 800a668:	40021000 	.word	0x40021000
 800a66c:	50001c00 	.word	0x50001c00
 800a670:	00000301 	.word	0x00000301
 800a674:	50000400 	.word	0x50000400
 800a678:	50000800 	.word	0x50000800
 800a67c:	0000200c 	.word	0x0000200c
 800a680:	0000403e 	.word	0x0000403e
 800a684:	50000c00 	.word	0x50000c00

0800a688 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2100      	movs	r1, #0
 800a696:	0018      	movs	r0, r3
 800a698:	f00f fe30 	bl	801a2fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2108      	movs	r1, #8
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	f00f fe2b 	bl	801a2fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	210c      	movs	r1, #12
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	f00f fe26 	bl	801a2fc <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800a6b0:	2380      	movs	r3, #128	@ 0x80
 800a6b2:	05db      	lsls	r3, r3, #23
 800a6b4:	22fa      	movs	r2, #250	@ 0xfa
 800a6b6:	0112      	lsls	r2, r2, #4
 800a6b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800a6ba:	2380      	movs	r3, #128	@ 0x80
 800a6bc:	05db      	lsls	r3, r3, #23
 800a6be:	22fa      	movs	r2, #250	@ 0xfa
 800a6c0:	0112      	lsls	r2, r2, #4
 800a6c2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800a6c4:	2380      	movs	r3, #128	@ 0x80
 800a6c6:	05db      	lsls	r3, r3, #23
 800a6c8:	22fa      	movs	r2, #250	@ 0xfa
 800a6ca:	0112      	lsls	r2, r2, #4
 800a6cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800a6ce:	2380      	movs	r3, #128	@ 0x80
 800a6d0:	05db      	lsls	r3, r3, #23
 800a6d2:	22fa      	movs	r2, #250	@ 0xfa
 800a6d4:	0112      	lsls	r2, r2, #4
 800a6d6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	2100      	movs	r1, #0
 800a6dc:	0018      	movs	r0, r3
 800a6de:	f00f fe0d 	bl	801a2fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2104      	movs	r1, #4
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f00f fe08 	bl	801a2fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2108      	movs	r1, #8
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f00f fe03 	bl	801a2fc <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800a6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a720 <GPIO_InitPWMLEDs+0x98>)
 800a6f8:	22fa      	movs	r2, #250	@ 0xfa
 800a6fa:	0112      	lsls	r2, r2, #4
 800a6fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800a6fe:	4b08      	ldr	r3, [pc, #32]	@ (800a720 <GPIO_InitPWMLEDs+0x98>)
 800a700:	22fa      	movs	r2, #250	@ 0xfa
 800a702:	0112      	lsls	r2, r2, #4
 800a704:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800a706:	4b06      	ldr	r3, [pc, #24]	@ (800a720 <GPIO_InitPWMLEDs+0x98>)
 800a708:	22fa      	movs	r2, #250	@ 0xfa
 800a70a:	0112      	lsls	r2, r2, #4
 800a70c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800a70e:	4b04      	ldr	r3, [pc, #16]	@ (800a720 <GPIO_InitPWMLEDs+0x98>)
 800a710:	22fa      	movs	r2, #250	@ 0xfa
 800a712:	0112      	lsls	r2, r2, #4
 800a714:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a716:	46c0      	nop			@ (mov r8, r8)
 800a718:	46bd      	mov	sp, r7
 800a71a:	b002      	add	sp, #8
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	46c0      	nop			@ (mov r8, r8)
 800a720:	40000400 	.word	0x40000400

0800a724 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a72a:	1d3b      	adds	r3, r7, #4
 800a72c:	0018      	movs	r0, r3
 800a72e:	2314      	movs	r3, #20
 800a730:	001a      	movs	r2, r3
 800a732:	2100      	movs	r1, #0
 800a734:	f019 f9f0 	bl	8023b18 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a738:	1d3b      	adds	r3, r7, #4
 800a73a:	2205      	movs	r2, #5
 800a73c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a73e:	1d3b      	adds	r3, r7, #4
 800a740:	2203      	movs	r2, #3
 800a742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a744:	1d3b      	adds	r3, r7, #4
 800a746:	2200      	movs	r2, #0
 800a748:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a74a:	1d3a      	adds	r2, r7, #4
 800a74c:	23a0      	movs	r3, #160	@ 0xa0
 800a74e:	05db      	lsls	r3, r3, #23
 800a750:	0011      	movs	r1, r2
 800a752:	0018      	movs	r0, r3
 800a754:	f008 fdc4 	bl	80132e0 <HAL_GPIO_Init>
}
 800a758:	46c0      	nop			@ (mov r8, r8)
 800a75a:	46bd      	mov	sp, r7
 800a75c:	b006      	add	sp, #24
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a764:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a766:	4a1c      	ldr	r2, [pc, #112]	@ (800a7d8 <MX_I2C1_Init+0x78>)
 800a768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800a76a:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a76c:	4a1b      	ldr	r2, [pc, #108]	@ (800a7dc <MX_I2C1_Init+0x7c>)
 800a76e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a770:	4b18      	ldr	r3, [pc, #96]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a772:	2200      	movs	r2, #0
 800a774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a776:	4b17      	ldr	r3, [pc, #92]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a778:	2201      	movs	r2, #1
 800a77a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a77c:	4b15      	ldr	r3, [pc, #84]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a77e:	2200      	movs	r2, #0
 800a780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a782:	4b14      	ldr	r3, [pc, #80]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a784:	2200      	movs	r2, #0
 800a786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a788:	4b12      	ldr	r3, [pc, #72]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a78e:	4b11      	ldr	r3, [pc, #68]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a790:	2200      	movs	r2, #0
 800a792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a794:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a796:	2200      	movs	r2, #0
 800a798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a79a:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a79c:	0018      	movs	r0, r3
 800a79e:	f008 ff73 	bl	8013688 <HAL_I2C_Init>
 800a7a2:	1e03      	subs	r3, r0, #0
 800a7a4:	d001      	beq.n	800a7aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a7a6:	f000 fd83 	bl	800b2b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a7aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	f00b fddc 	bl	801636c <HAL_I2CEx_ConfigAnalogFilter>
 800a7b4:	1e03      	subs	r3, r0, #0
 800a7b6:	d001      	beq.n	800a7bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a7b8:	f000 fd7a 	bl	800b2b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a7bc:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <MX_I2C1_Init+0x74>)
 800a7be:	2100      	movs	r1, #0
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f00b fe1f 	bl	8016404 <HAL_I2CEx_ConfigDigitalFilter>
 800a7c6:	1e03      	subs	r3, r0, #0
 800a7c8:	d001      	beq.n	800a7ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a7ca:	f000 fd71 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a7ce:	46c0      	nop			@ (mov r8, r8)
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20000c20 	.word	0x20000c20
 800a7d8:	40005400 	.word	0x40005400
 800a7dc:	00503d58 	.word	0x00503d58

0800a7e0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a7e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a7e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a858 <MX_I2C2_Init+0x78>)
 800a7e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800a7ea:	4b1a      	ldr	r3, [pc, #104]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a7ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a85c <MX_I2C2_Init+0x7c>)
 800a7ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a7f0:	4b18      	ldr	r3, [pc, #96]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a7f6:	4b17      	ldr	r3, [pc, #92]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a7fc:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a802:	4b14      	ldr	r3, [pc, #80]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a804:	2200      	movs	r2, #0
 800a806:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a808:	4b12      	ldr	r3, [pc, #72]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a80e:	4b11      	ldr	r3, [pc, #68]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a810:	2200      	movs	r2, #0
 800a812:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a814:	4b0f      	ldr	r3, [pc, #60]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a816:	2200      	movs	r2, #0
 800a818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a81a:	4b0e      	ldr	r3, [pc, #56]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a81c:	0018      	movs	r0, r3
 800a81e:	f008 ff33 	bl	8013688 <HAL_I2C_Init>
 800a822:	1e03      	subs	r3, r0, #0
 800a824:	d001      	beq.n	800a82a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a826:	f000 fd43 	bl	800b2b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a82a:	4b0a      	ldr	r3, [pc, #40]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a82c:	2100      	movs	r1, #0
 800a82e:	0018      	movs	r0, r3
 800a830:	f00b fd9c 	bl	801636c <HAL_I2CEx_ConfigAnalogFilter>
 800a834:	1e03      	subs	r3, r0, #0
 800a836:	d001      	beq.n	800a83c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a838:	f000 fd3a 	bl	800b2b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a83c:	4b05      	ldr	r3, [pc, #20]	@ (800a854 <MX_I2C2_Init+0x74>)
 800a83e:	2100      	movs	r1, #0
 800a840:	0018      	movs	r0, r3
 800a842:	f00b fddf 	bl	8016404 <HAL_I2CEx_ConfigDigitalFilter>
 800a846:	1e03      	subs	r3, r0, #0
 800a848:	d001      	beq.n	800a84e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a84a:	f000 fd31 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a84e:	46c0      	nop			@ (mov r8, r8)
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20000c74 	.word	0x20000c74
 800a858:	40005800 	.word	0x40005800
 800a85c:	00503d58 	.word	0x00503d58

0800a860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b08b      	sub	sp, #44	@ 0x2c
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a868:	2414      	movs	r4, #20
 800a86a:	193b      	adds	r3, r7, r4
 800a86c:	0018      	movs	r0, r3
 800a86e:	2314      	movs	r3, #20
 800a870:	001a      	movs	r2, r3
 800a872:	2100      	movs	r1, #0
 800a874:	f019 f950 	bl	8023b18 <memset>
  if(i2cHandle->Instance==I2C1)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a5d      	ldr	r2, [pc, #372]	@ (800a9f4 <HAL_I2C_MspInit+0x194>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d000      	beq.n	800a884 <HAL_I2C_MspInit+0x24>
 800a882:	e083      	b.n	800a98c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a884:	4b5c      	ldr	r3, [pc, #368]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a888:	4b5b      	ldr	r3, [pc, #364]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a88a:	2102      	movs	r1, #2
 800a88c:	430a      	orrs	r2, r1
 800a88e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a890:	4b59      	ldr	r3, [pc, #356]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a894:	2202      	movs	r2, #2
 800a896:	4013      	ands	r3, r2
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a89c:	0021      	movs	r1, r4
 800a89e:	187b      	adds	r3, r7, r1
 800a8a0:	22c0      	movs	r2, #192	@ 0xc0
 800a8a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8a4:	187b      	adds	r3, r7, r1
 800a8a6:	2212      	movs	r2, #18
 800a8a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8aa:	187b      	adds	r3, r7, r1
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	2203      	movs	r2, #3
 800a8b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800a8b6:	187b      	adds	r3, r7, r1
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8bc:	187b      	adds	r3, r7, r1
 800a8be:	4a4f      	ldr	r2, [pc, #316]	@ (800a9fc <HAL_I2C_MspInit+0x19c>)
 800a8c0:	0019      	movs	r1, r3
 800a8c2:	0010      	movs	r0, r2
 800a8c4:	f008 fd0c 	bl	80132e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a8c8:	4b4b      	ldr	r3, [pc, #300]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8cc:	4b4a      	ldr	r3, [pc, #296]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a8ce:	2180      	movs	r1, #128	@ 0x80
 800a8d0:	0389      	lsls	r1, r1, #14
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800a8d6:	4b4a      	ldr	r3, [pc, #296]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8d8:	4a4a      	ldr	r2, [pc, #296]	@ (800aa04 <HAL_I2C_MspInit+0x1a4>)
 800a8da:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800a8dc:	4b48      	ldr	r3, [pc, #288]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8de:	2206      	movs	r2, #6
 800a8e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a8e2:	4b47      	ldr	r3, [pc, #284]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8e8:	4b45      	ldr	r3, [pc, #276]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a8ee:	4b44      	ldr	r3, [pc, #272]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8f0:	2280      	movs	r2, #128	@ 0x80
 800a8f2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8f4:	4b42      	ldr	r3, [pc, #264]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8fa:	4b41      	ldr	r3, [pc, #260]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800a900:	4b3f      	ldr	r3, [pc, #252]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a902:	2200      	movs	r2, #0
 800a904:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a906:	4b3e      	ldr	r3, [pc, #248]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a908:	2200      	movs	r2, #0
 800a90a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800a90c:	4b3c      	ldr	r3, [pc, #240]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a90e:	0018      	movs	r0, r3
 800a910:	f008 f8ca 	bl	8012aa8 <HAL_DMA_Init>
 800a914:	1e03      	subs	r3, r0, #0
 800a916:	d001      	beq.n	800a91c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800a918:	f000 fcca 	bl	800b2b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a38      	ldr	r2, [pc, #224]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a920:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a922:	4b37      	ldr	r3, [pc, #220]	@ (800aa00 <HAL_I2C_MspInit+0x1a0>)
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800a928:	4b37      	ldr	r3, [pc, #220]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a92a:	4a38      	ldr	r2, [pc, #224]	@ (800aa0c <HAL_I2C_MspInit+0x1ac>)
 800a92c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800a92e:	4b36      	ldr	r3, [pc, #216]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a930:	2206      	movs	r2, #6
 800a932:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a934:	4b34      	ldr	r3, [pc, #208]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a936:	2210      	movs	r2, #16
 800a938:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a93a:	4b33      	ldr	r3, [pc, #204]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a940:	4b31      	ldr	r3, [pc, #196]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a942:	2280      	movs	r2, #128	@ 0x80
 800a944:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a946:	4b30      	ldr	r3, [pc, #192]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a948:	2200      	movs	r2, #0
 800a94a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a94c:	4b2e      	ldr	r3, [pc, #184]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a94e:	2200      	movs	r2, #0
 800a950:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800a952:	4b2d      	ldr	r3, [pc, #180]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a954:	2200      	movs	r2, #0
 800a956:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a958:	4b2b      	ldr	r3, [pc, #172]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800a95e:	4b2a      	ldr	r3, [pc, #168]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a960:	0018      	movs	r0, r3
 800a962:	f008 f8a1 	bl	8012aa8 <HAL_DMA_Init>
 800a966:	1e03      	subs	r3, r0, #0
 800a968:	d001      	beq.n	800a96e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800a96a:	f000 fca1 	bl	800b2b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a25      	ldr	r2, [pc, #148]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38
 800a974:	4b24      	ldr	r3, [pc, #144]	@ (800aa08 <HAL_I2C_MspInit+0x1a8>)
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800a97a:	2200      	movs	r2, #0
 800a97c:	2100      	movs	r1, #0
 800a97e:	2017      	movs	r0, #23
 800a980:	f008 f85c 	bl	8012a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800a984:	2017      	movs	r0, #23
 800a986:	f008 f86e 	bl	8012a66 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a98a:	e02e      	b.n	800a9ea <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a1f      	ldr	r2, [pc, #124]	@ (800aa10 <HAL_I2C_MspInit+0x1b0>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d129      	bne.n	800a9ea <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a996:	4b18      	ldr	r3, [pc, #96]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a99a:	4b17      	ldr	r3, [pc, #92]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a99c:	2102      	movs	r1, #2
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a9a2:	4b15      	ldr	r3, [pc, #84]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a6:	2202      	movs	r2, #2
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a9ae:	2114      	movs	r1, #20
 800a9b0:	187b      	adds	r3, r7, r1
 800a9b2:	22c0      	movs	r2, #192	@ 0xc0
 800a9b4:	0112      	lsls	r2, r2, #4
 800a9b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a9b8:	187b      	adds	r3, r7, r1
 800a9ba:	2212      	movs	r2, #18
 800a9bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9be:	187b      	adds	r3, r7, r1
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9c4:	187b      	adds	r3, r7, r1
 800a9c6:	2203      	movs	r2, #3
 800a9c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800a9ca:	187b      	adds	r3, r7, r1
 800a9cc:	2206      	movs	r2, #6
 800a9ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9d0:	187b      	adds	r3, r7, r1
 800a9d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a9fc <HAL_I2C_MspInit+0x19c>)
 800a9d4:	0019      	movs	r1, r3
 800a9d6:	0010      	movs	r0, r2
 800a9d8:	f008 fc82 	bl	80132e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a9dc:	4b06      	ldr	r3, [pc, #24]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a9de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9e0:	4b05      	ldr	r3, [pc, #20]	@ (800a9f8 <HAL_I2C_MspInit+0x198>)
 800a9e2:	2180      	movs	r1, #128	@ 0x80
 800a9e4:	03c9      	lsls	r1, r1, #15
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b00b      	add	sp, #44	@ 0x2c
 800a9f0:	bd90      	pop	{r4, r7, pc}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	40005400 	.word	0x40005400
 800a9f8:	40021000 	.word	0x40021000
 800a9fc:	50000400 	.word	0x50000400
 800aa00:	20000cc8 	.word	0x20000cc8
 800aa04:	40020030 	.word	0x40020030
 800aa08:	20000d10 	.word	0x20000d10
 800aa0c:	4002001c 	.word	0x4002001c
 800aa10:	40005800 	.word	0x40005800

0800aa14 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800aa18:	4b10      	ldr	r3, [pc, #64]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa1a:	4a11      	ldr	r2, [pc, #68]	@ (800aa60 <MX_I2S2_Init+0x4c>)
 800aa1c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa20:	22c0      	movs	r2, #192	@ 0xc0
 800aa22:	0092      	lsls	r2, r2, #2
 800aa24:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800aa26:	4b0d      	ldr	r3, [pc, #52]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa28:	2200      	movs	r2, #0
 800aa2a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa2e:	2203      	movs	r2, #3
 800aa30:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800aa32:	4b0a      	ldr	r3, [pc, #40]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800aa38:	4b08      	ldr	r3, [pc, #32]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa3a:	22fa      	movs	r2, #250	@ 0xfa
 800aa3c:	0192      	lsls	r2, r2, #6
 800aa3e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800aa40:	4b06      	ldr	r3, [pc, #24]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800aa46:	4b05      	ldr	r3, [pc, #20]	@ (800aa5c <MX_I2S2_Init+0x48>)
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f00b fd27 	bl	801649c <HAL_I2S_Init>
 800aa4e:	1e03      	subs	r3, r0, #0
 800aa50:	d001      	beq.n	800aa56 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800aa52:	f000 fc2d 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800aa56:	46c0      	nop			@ (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20000d58 	.word	0x20000d58
 800aa60:	40003800 	.word	0x40003800

0800aa64 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800aa64:	b590      	push	{r4, r7, lr}
 800aa66:	b089      	sub	sp, #36	@ 0x24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa6c:	240c      	movs	r4, #12
 800aa6e:	193b      	adds	r3, r7, r4
 800aa70:	0018      	movs	r0, r3
 800aa72:	2314      	movs	r3, #20
 800aa74:	001a      	movs	r2, r3
 800aa76:	2100      	movs	r1, #0
 800aa78:	f019 f84e 	bl	8023b18 <memset>
  if(i2sHandle->Instance==SPI2)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a2d      	ldr	r2, [pc, #180]	@ (800ab38 <HAL_I2S_MspInit+0xd4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d154      	bne.n	800ab30 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800aa86:	4b2d      	ldr	r3, [pc, #180]	@ (800ab3c <HAL_I2S_MspInit+0xd8>)
 800aa88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa8a:	4b2c      	ldr	r3, [pc, #176]	@ (800ab3c <HAL_I2S_MspInit+0xd8>)
 800aa8c:	2180      	movs	r1, #128	@ 0x80
 800aa8e:	01c9      	lsls	r1, r1, #7
 800aa90:	430a      	orrs	r2, r1
 800aa92:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa94:	4b29      	ldr	r3, [pc, #164]	@ (800ab3c <HAL_I2S_MspInit+0xd8>)
 800aa96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa98:	4b28      	ldr	r3, [pc, #160]	@ (800ab3c <HAL_I2S_MspInit+0xd8>)
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aaa0:	4b26      	ldr	r3, [pc, #152]	@ (800ab3c <HAL_I2S_MspInit+0xd8>)
 800aaa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	60bb      	str	r3, [r7, #8]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800aaac:	193b      	adds	r3, r7, r4
 800aaae:	22b0      	movs	r2, #176	@ 0xb0
 800aab0:	0212      	lsls	r2, r2, #8
 800aab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab4:	0021      	movs	r1, r4
 800aab6:	187b      	adds	r3, r7, r1
 800aab8:	2202      	movs	r2, #2
 800aaba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aabc:	187b      	adds	r3, r7, r1
 800aabe:	2200      	movs	r2, #0
 800aac0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aac2:	187b      	adds	r3, r7, r1
 800aac4:	2200      	movs	r2, #0
 800aac6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800aac8:	187b      	adds	r3, r7, r1
 800aaca:	2200      	movs	r2, #0
 800aacc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aace:	187b      	adds	r3, r7, r1
 800aad0:	4a1b      	ldr	r2, [pc, #108]	@ (800ab40 <HAL_I2S_MspInit+0xdc>)
 800aad2:	0019      	movs	r1, r3
 800aad4:	0010      	movs	r0, r2
 800aad6:	f008 fc03 	bl	80132e0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800aada:	4b1a      	ldr	r3, [pc, #104]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800aadc:	4a1a      	ldr	r2, [pc, #104]	@ (800ab48 <HAL_I2S_MspInit+0xe4>)
 800aade:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800aae0:	4b18      	ldr	r3, [pc, #96]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800aae2:	2202      	movs	r2, #2
 800aae4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aae6:	4b17      	ldr	r3, [pc, #92]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aaec:	4b15      	ldr	r3, [pc, #84]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aaf2:	4b14      	ldr	r3, [pc, #80]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800aaf4:	2280      	movs	r2, #128	@ 0x80
 800aaf6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aaf8:	4b12      	ldr	r3, [pc, #72]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800aafa:	2280      	movs	r2, #128	@ 0x80
 800aafc:	0052      	lsls	r2, r2, #1
 800aafe:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ab00:	4b10      	ldr	r3, [pc, #64]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800ab02:	2280      	movs	r2, #128	@ 0x80
 800ab04:	00d2      	lsls	r2, r2, #3
 800ab06:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ab08:	4b0e      	ldr	r3, [pc, #56]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800ab0a:	2220      	movs	r2, #32
 800ab0c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ab14:	4b0b      	ldr	r3, [pc, #44]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800ab16:	0018      	movs	r0, r3
 800ab18:	f007 ffc6 	bl	8012aa8 <HAL_DMA_Init>
 800ab1c:	1e03      	subs	r3, r0, #0
 800ab1e:	d001      	beq.n	800ab24 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800ab20:	f000 fbc6 	bl	800b2b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a07      	ldr	r2, [pc, #28]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800ab28:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab2a:	4b06      	ldr	r3, [pc, #24]	@ (800ab44 <HAL_I2S_MspInit+0xe0>)
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800ab30:	46c0      	nop			@ (mov r8, r8)
 800ab32:	46bd      	mov	sp, r7
 800ab34:	b009      	add	sp, #36	@ 0x24
 800ab36:	bd90      	pop	{r4, r7, pc}
 800ab38:	40003800 	.word	0x40003800
 800ab3c:	40021000 	.word	0x40021000
 800ab40:	50000400 	.word	0x50000400
 800ab44:	20000d94 	.word	0x20000d94
 800ab48:	40020044 	.word	0x40020044

0800ab4c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  testDone = true;
 800ab50:	4b14      	ldr	r3, [pc, #80]	@ (800aba4 <SetTestDone+0x58>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800ab56:	23fa      	movs	r3, #250	@ 0xfa
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	0018      	movs	r0, r3
 800ab5c:	f007 fad4 	bl	8012108 <HAL_Delay>
  SetDBLED(false, false, true);
 800ab60:	2201      	movs	r2, #1
 800ab62:	2100      	movs	r1, #0
 800ab64:	2000      	movs	r0, #0
 800ab66:	f005 fc45 	bl	80103f4 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800ab6a:	4a0f      	ldr	r2, [pc, #60]	@ (800aba8 <SetTestDone+0x5c>)
 800ab6c:	23fa      	movs	r3, #250	@ 0xfa
 800ab6e:	0119      	lsls	r1, r3, #4
 800ab70:	23fa      	movs	r3, #250	@ 0xfa
 800ab72:	011b      	lsls	r3, r3, #4
 800ab74:	0018      	movs	r0, r3
 800ab76:	f005 fc09 	bl	801038c <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800ab7a:	4a0b      	ldr	r2, [pc, #44]	@ (800aba8 <SetTestDone+0x5c>)
 800ab7c:	23fa      	movs	r3, #250	@ 0xfa
 800ab7e:	0119      	lsls	r1, r3, #4
 800ab80:	23fa      	movs	r3, #250	@ 0xfa
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	0018      	movs	r0, r3
 800ab86:	f005 fc7f 	bl	8010488 <SetVocLED>
  HAL_Delay(500);
 800ab8a:	23fa      	movs	r3, #250	@ 0xfa
 800ab8c:	005b      	lsls	r3, r3, #1
 800ab8e:	0018      	movs	r0, r3
 800ab90:	f007 faba 	bl	8012108 <HAL_Delay>
  SetLEDsOff();
 800ab94:	f005 fdb8 	bl	8010708 <SetLEDsOff>
  InitDone();
 800ab98:	f005 fb4c 	bl	8010234 <InitDone>
}
 800ab9c:	46c0      	nop			@ (mov r8, r8)
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	46c0      	nop			@ (mov r8, r8)
 800aba4:	20000ddc 	.word	0x20000ddc
 800aba8:	00000bb8 	.word	0x00000bb8

0800abac <FlashLEDs>:

void FlashLEDs(){
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800abb2:	1dfb      	adds	r3, r7, #7
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
 800abb8:	e021      	b.n	800abfe <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800abba:	2201      	movs	r2, #1
 800abbc:	2101      	movs	r1, #1
 800abbe:	2001      	movs	r0, #1
 800abc0:	f005 fc18 	bl	80103f4 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800abc4:	4a12      	ldr	r2, [pc, #72]	@ (800ac10 <FlashLEDs+0x64>)
 800abc6:	23fa      	movs	r3, #250	@ 0xfa
 800abc8:	0119      	lsls	r1, r3, #4
 800abca:	23fa      	movs	r3, #250	@ 0xfa
 800abcc:	011b      	lsls	r3, r3, #4
 800abce:	0018      	movs	r0, r3
 800abd0:	f005 fbdc 	bl	801038c <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800abd4:	4a0e      	ldr	r2, [pc, #56]	@ (800ac10 <FlashLEDs+0x64>)
 800abd6:	23fa      	movs	r3, #250	@ 0xfa
 800abd8:	0119      	lsls	r1, r3, #4
 800abda:	23fa      	movs	r3, #250	@ 0xfa
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	0018      	movs	r0, r3
 800abe0:	f005 fc52 	bl	8010488 <SetVocLED>
    HAL_Delay(250);
 800abe4:	20fa      	movs	r0, #250	@ 0xfa
 800abe6:	f007 fa8f 	bl	8012108 <HAL_Delay>
    SetLEDsOff();
 800abea:	f005 fd8d 	bl	8010708 <SetLEDsOff>
    HAL_Delay(250);
 800abee:	20fa      	movs	r0, #250	@ 0xfa
 800abf0:	f007 fa8a 	bl	8012108 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800abf4:	1dfb      	adds	r3, r7, #7
 800abf6:	781a      	ldrb	r2, [r3, #0]
 800abf8:	1dfb      	adds	r3, r7, #7
 800abfa:	3201      	adds	r2, #1
 800abfc:	701a      	strb	r2, [r3, #0]
 800abfe:	1dfb      	adds	r3, r7, #7
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d9d9      	bls.n	800abba <FlashLEDs+0xe>
  }
}
 800ac06:	46c0      	nop			@ (mov r8, r8)
 800ac08:	46c0      	nop			@ (mov r8, r8)
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	00000bb8 	.word	0x00000bb8

0800ac14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ac1a:	f007 fa05 	bl	8012028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ac1e:	f000 f9f7 	bl	800b010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ac22:	f7ff fc01 	bl	800a428 <MX_GPIO_Init>
  MX_DMA_Init();
 800ac26:	f7ff fa29 	bl	800a07c <MX_DMA_Init>
  MX_I2C1_Init();
 800ac2a:	f7ff fd99 	bl	800a760 <MX_I2C1_Init>
  MX_I2S2_Init();
 800ac2e:	f7ff fef1 	bl	800aa14 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800ac32:	f006 fc25 	bl	8011480 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800ac36:	f7ff fdd3 	bl	800a7e0 <MX_I2C2_Init>
  MX_TIM2_Init();
 800ac3a:	f006 fa19 	bl	8011070 <MX_TIM2_Init>
  MX_TIM3_Init();
 800ac3e:	f006 fa8b 	bl	8011158 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800ac42:	f006 fc4d 	bl	80114e0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800ac46:	f7fd ff4d 	bl	8008ae4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800ac4a:	f015 fc51 	bl	80204f0 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800ac4e:	f001 fa99 	bl	800c184 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800ac52:	f006 fbdf 	bl	8011414 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800ac56:	f006 fafd 	bl	8011254 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800ac5a:	4ac7      	ldr	r2, [pc, #796]	@ (800af78 <main+0x364>)
 800ac5c:	4bc7      	ldr	r3, [pc, #796]	@ (800af7c <main+0x368>)
 800ac5e:	0011      	movs	r1, r2
 800ac60:	0018      	movs	r0, r3
 800ac62:	f7ff fd11 	bl	800a688 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800ac66:	f006 fe7d 	bl	8011964 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800ac6a:	f006 f889 	bl	8010d80 <Battery_Upkeep>
 800ac6e:	0003      	movs	r3, r0
 800ac70:	001a      	movs	r2, r3
 800ac72:	4bc3      	ldr	r3, [pc, #780]	@ (800af80 <main+0x36c>)
 800ac74:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800ac76:	4bc2      	ldr	r3, [pc, #776]	@ (800af80 <main+0x36c>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d113      	bne.n	800aca6 <main+0x92>
    SetAllREDLED();
 800ac7e:	f005 fd5f 	bl	8010740 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800ac82:	f7fd f837 	bl	8007cf4 <ReadBatteryVoltage>
 800ac86:	1c03      	adds	r3, r0, #0
 800ac88:	1c18      	adds	r0, r3, #0
 800ac8a:	f7f8 fbeb 	bl	8003464 <__aeabi_f2d>
 800ac8e:	0002      	movs	r2, r0
 800ac90:	000b      	movs	r3, r1
 800ac92:	48bc      	ldr	r0, [pc, #752]	@ (800af84 <main+0x370>)
 800ac94:	49bc      	ldr	r1, [pc, #752]	@ (800af88 <main+0x374>)
 800ac96:	9200      	str	r2, [sp, #0]
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	0002      	movs	r2, r0
 800ac9c:	2002      	movs	r0, #2
 800ac9e:	f006 fddd 	bl	801185c <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800aca2:	f7fd fc4d 	bl	8008540 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800aca6:	f7fd f8fb 	bl	8007ea0 <UserButton_Pressed>
 800acaa:	1e03      	subs	r3, r0, #0
 800acac:	d004      	beq.n	800acb8 <main+0xa4>
    EnableESPProg();
 800acae:	f015 fcef 	bl	8020690 <EnableESPProg>
    ESP_Programming = true;
 800acb2:	4bb6      	ldr	r3, [pc, #728]	@ (800af8c <main+0x378>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800acb8:	2003      	movs	r0, #3
 800acba:	f006 fe39 	bl	8011930 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800acbe:	49b4      	ldr	r1, [pc, #720]	@ (800af90 <main+0x37c>)
 800acc0:	4bb4      	ldr	r3, [pc, #720]	@ (800af94 <main+0x380>)
 800acc2:	2201      	movs	r2, #1
 800acc4:	0018      	movs	r0, r3
 800acc6:	f00f ff79 	bl	801abbc <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800acca:	4bb3      	ldr	r3, [pc, #716]	@ (800af98 <main+0x384>)
 800accc:	0018      	movs	r0, r3
 800acce:	f7fd fd0f 	bl	80086f0 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800acd2:	4ab2      	ldr	r2, [pc, #712]	@ (800af9c <main+0x388>)
 800acd4:	49b2      	ldr	r1, [pc, #712]	@ (800afa0 <main+0x38c>)
 800acd6:	48b3      	ldr	r0, [pc, #716]	@ (800afa4 <main+0x390>)
 800acd8:	230b      	movs	r3, #11
 800acda:	f004 fc21 	bl	800f520 <soundInit>
 800acde:	0003      	movs	r3, r0
 800ace0:	001a      	movs	r2, r3
 800ace2:	2301      	movs	r3, #1
 800ace4:	4053      	eors	r3, r2
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d005      	beq.n	800acf8 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800acec:	4aae      	ldr	r2, [pc, #696]	@ (800afa8 <main+0x394>)
 800acee:	4baf      	ldr	r3, [pc, #700]	@ (800afac <main+0x398>)
 800acf0:	21f9      	movs	r1, #249	@ 0xf9
 800acf2:	0018      	movs	r0, r3
 800acf4:	f006 fe6a 	bl	80119cc <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800acf8:	4bad      	ldr	r3, [pc, #692]	@ (800afb0 <main+0x39c>)
 800acfa:	4aae      	ldr	r2, [pc, #696]	@ (800afb4 <main+0x3a0>)
 800acfc:	49a8      	ldr	r1, [pc, #672]	@ (800afa0 <main+0x38c>)
 800acfe:	48ae      	ldr	r0, [pc, #696]	@ (800afb8 <main+0x3a4>)
 800ad00:	f000 fbb4 	bl	800b46c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800ad04:	f007 f9f6 	bl	80120f4 <HAL_GetTick>
 800ad08:	0003      	movs	r3, r0
 800ad0a:	4aac      	ldr	r2, [pc, #688]	@ (800afbc <main+0x3a8>)
 800ad0c:	189a      	adds	r2, r3, r2
 800ad0e:	4bac      	ldr	r3, [pc, #688]	@ (800afc0 <main+0x3ac>)
 800ad10:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800ad12:	f7fd f8a5 	bl	8007e60 <Check_USB_PowerOn>
 800ad16:	0003      	movs	r3, r0
 800ad18:	1e5a      	subs	r2, r3, #1
 800ad1a:	4193      	sbcs	r3, r2
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4053      	eors	r3, r2
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	1c1a      	adds	r2, r3, #0
 800ad26:	2301      	movs	r3, #1
 800ad28:	4013      	ands	r3, r2
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	4ba5      	ldr	r3, [pc, #660]	@ (800afc4 <main+0x3b0>)
 800ad2e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800ad30:	f7fd f896 	bl	8007e60 <Check_USB_PowerOn>
 800ad34:	1e03      	subs	r3, r0, #0
 800ad36:	d003      	beq.n	800ad40 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800ad38:	4ba3      	ldr	r3, [pc, #652]	@ (800afc8 <main+0x3b4>)
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	f7fc fc0c 	bl	8007558 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800ad40:	4ba2      	ldr	r3, [pc, #648]	@ (800afcc <main+0x3b8>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	0018      	movs	r0, r3
 800ad46:	f006 fd33 	bl	80117b0 <TimestampIsReached>
 800ad4a:	1e03      	subs	r3, r0, #0
 800ad4c:	d00e      	beq.n	800ad6c <main+0x158>
      charge = Battery_Upkeep();
 800ad4e:	f006 f817 	bl	8010d80 <Battery_Upkeep>
 800ad52:	0003      	movs	r3, r0
 800ad54:	001a      	movs	r2, r3
 800ad56:	4b8a      	ldr	r3, [pc, #552]	@ (800af80 <main+0x36c>)
 800ad58:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800ad5a:	f007 f9cb 	bl	80120f4 <HAL_GetTick>
 800ad5e:	0003      	movs	r3, r0
 800ad60:	4a9b      	ldr	r2, [pc, #620]	@ (800afd0 <main+0x3bc>)
 800ad62:	189a      	adds	r2, r3, r2
 800ad64:	4b99      	ldr	r3, [pc, #612]	@ (800afcc <main+0x3b8>)
 800ad66:	601a      	str	r2, [r3, #0]
      showTime();
 800ad68:	f7fd f8aa 	bl	8007ec0 <showTime>

    }
    configCheck();
 800ad6c:	f005 fe6c 	bl	8010a48 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 800ad70:	4b98      	ldr	r3, [pc, #608]	@ (800afd4 <main+0x3c0>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800ad76:	4b82      	ldr	r3, [pc, #520]	@ (800af80 <main+0x36c>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d003      	beq.n	800ad86 <main+0x172>
 800ad7e:	4b80      	ldr	r3, [pc, #512]	@ (800af80 <main+0x36c>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d104      	bne.n	800ad90 <main+0x17c>
          FlashLEDs();
 800ad86:	f7ff ff11 	bl	800abac <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 800ad8a:	4b93      	ldr	r3, [pc, #588]	@ (800afd8 <main+0x3c4>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ad90:	4b7b      	ldr	r3, [pc, #492]	@ (800af80 <main+0x36c>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <main+0x198>
 800ad98:	4b90      	ldr	r3, [pc, #576]	@ (800afdc <main+0x3c8>)
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b09      	cmp	r3, #9
 800ad9e:	d105      	bne.n	800adac <main+0x198>
          batteryEmpty = true;
 800ada0:	4b8f      	ldr	r3, [pc, #572]	@ (800afe0 <main+0x3cc>)
 800ada2:	2201      	movs	r2, #1
 800ada4:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800ada6:	f7fd fbcb 	bl	8008540 <Enter_Standby_Mode>
 800adaa:	e002      	b.n	800adb2 <main+0x19e>
        }
        else{
          batteryEmpty = false;
 800adac:	4b8c      	ldr	r3, [pc, #560]	@ (800afe0 <main+0x3cc>)
 800adae:	2200      	movs	r2, #0
 800adb0:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800adb2:	4b8c      	ldr	r3, [pc, #560]	@ (800afe4 <main+0x3d0>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d100      	bne.n	800adbc <main+0x1a8>
 800adba:	e088      	b.n	800aece <main+0x2ba>
 800adbc:	4b73      	ldr	r3, [pc, #460]	@ (800af8c <main+0x378>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2201      	movs	r2, #1
 800adc2:	4053      	eors	r3, r2
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d100      	bne.n	800adcc <main+0x1b8>
 800adca:	e080      	b.n	800aece <main+0x2ba>
 800adcc:	4b84      	ldr	r3, [pc, #528]	@ (800afe0 <main+0x3cc>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2201      	movs	r2, #1
 800add2:	4053      	eors	r3, r2
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d100      	bne.n	800addc <main+0x1c8>
 800adda:	e078      	b.n	800aece <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800addc:	4b79      	ldr	r3, [pc, #484]	@ (800afc4 <main+0x3b0>)
 800adde:	781a      	ldrb	r2, [r3, #0]
 800ade0:	4b81      	ldr	r3, [pc, #516]	@ (800afe8 <main+0x3d4>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d020      	beq.n	800ae2a <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 800ade8:	f000 fad2 	bl	800b390 <IsSGPPresent>
 800adec:	1e03      	subs	r3, r0, #0
 800adee:	d009      	beq.n	800ae04 <main+0x1f0>
 800adf0:	4b7d      	ldr	r3, [pc, #500]	@ (800afe8 <main+0x3d4>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	2201      	movs	r2, #1
 800adf6:	4053      	eors	r3, r2
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d002      	beq.n	800ae04 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800adfe:	2001      	movs	r0, #1
 800ae00:	f000 fad0 	bl	800b3a4 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800ae04:	4b79      	ldr	r3, [pc, #484]	@ (800afec <main+0x3d8>)
 800ae06:	791b      	ldrb	r3, [r3, #4]
 800ae08:	2b34      	cmp	r3, #52	@ 0x34
 800ae0a:	d003      	beq.n	800ae14 <main+0x200>
 800ae0c:	4b77      	ldr	r3, [pc, #476]	@ (800afec <main+0x3d8>)
 800ae0e:	791b      	ldrb	r3, [r3, #4]
 800ae10:	2b35      	cmp	r3, #53	@ 0x35
 800ae12:	d106      	bne.n	800ae22 <main+0x20e>
 800ae14:	4b74      	ldr	r3, [pc, #464]	@ (800afe8 <main+0x3d4>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f000 fac1 	bl	800b3a4 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 800ae22:	4b71      	ldr	r3, [pc, #452]	@ (800afe8 <main+0x3d4>)
 800ae24:	781a      	ldrb	r2, [r3, #0]
 800ae26:	4b67      	ldr	r3, [pc, #412]	@ (800afc4 <main+0x3b0>)
 800ae28:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800ae2a:	f000 fe8d 	bl	800bb48 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800ae2e:	4b6a      	ldr	r3, [pc, #424]	@ (800afd8 <main+0x3c4>)
 800ae30:	78db      	ldrb	r3, [r3, #3]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d005      	beq.n	800ae42 <main+0x22e>
        MICstate = Mic_Upkeep();
 800ae36:	f001 f891 	bl	800bf5c <Mic_Upkeep>
 800ae3a:	0003      	movs	r3, r0
 800ae3c:	001a      	movs	r2, r3
 800ae3e:	4b6c      	ldr	r3, [pc, #432]	@ (800aff0 <main+0x3dc>)
 800ae40:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800ae42:	4b4f      	ldr	r3, [pc, #316]	@ (800af80 <main+0x36c>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d803      	bhi.n	800ae52 <main+0x23e>
 800ae4a:	4b62      	ldr	r3, [pc, #392]	@ (800afd4 <main+0x3c0>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d016      	beq.n	800ae80 <main+0x26c>
 800ae52:	4b61      	ldr	r3, [pc, #388]	@ (800afd8 <main+0x3c4>)
 800ae54:	789b      	ldrb	r3, [r3, #2]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d012      	beq.n	800ae80 <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ae5a:	f001 fa21 	bl	800c2a0 <sen5x_Get_sen5x_enable_state>
 800ae5e:	0003      	movs	r3, r0
 800ae60:	001a      	movs	r2, r3
 800ae62:	2301      	movs	r3, #1
 800ae64:	4053      	eors	r3, r2
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d006      	beq.n	800ae7a <main+0x266>
 800ae6c:	4b5e      	ldr	r3, [pc, #376]	@ (800afe8 <main+0x3d4>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ae74:	2000      	movs	r0, #0
 800ae76:	f001 fa4f 	bl	800c318 <sen5x_enable>
        }
        sen5x_statemachine();
 800ae7a:	f001 ff99 	bl	800cdb0 <sen5x_statemachine>
 800ae7e:	e020      	b.n	800aec2 <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800ae80:	4b3f      	ldr	r3, [pc, #252]	@ (800af80 <main+0x36c>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d81c      	bhi.n	800aec2 <main+0x2ae>
 800ae88:	4b52      	ldr	r3, [pc, #328]	@ (800afd4 <main+0x3c0>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	4053      	eors	r3, r2
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d015      	beq.n	800aec2 <main+0x2ae>
 800ae96:	4b50      	ldr	r3, [pc, #320]	@ (800afd8 <main+0x3c4>)
 800ae98:	789b      	ldrb	r3, [r3, #2]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d011      	beq.n	800aec2 <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 800ae9e:	4a55      	ldr	r2, [pc, #340]	@ (800aff4 <main+0x3e0>)
 800aea0:	4b39      	ldr	r3, [pc, #228]	@ (800af88 <main+0x374>)
 800aea2:	0019      	movs	r1, r3
 800aea4:	2002      	movs	r0, #2
 800aea6:	f006 fcd9 	bl	801185c <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800aeaa:	4b4b      	ldr	r3, [pc, #300]	@ (800afd8 <main+0x3c4>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800aeb0:	4b51      	ldr	r3, [pc, #324]	@ (800aff8 <main+0x3e4>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800aeb6:	4b51      	ldr	r3, [pc, #324]	@ (800affc <main+0x3e8>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <main+0x2ae>
          sen5x_Power_Off();
 800aebe:	f001 fab7 	bl	800c430 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800aec2:	f7fb fb57 	bl	8006574 <ESP_Upkeep>
 800aec6:	0003      	movs	r3, r0
 800aec8:	001a      	movs	r2, r3
 800aeca:	4b44      	ldr	r3, [pc, #272]	@ (800afdc <main+0x3c8>)
 800aecc:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800aece:	4b45      	ldr	r3, [pc, #276]	@ (800afe4 <main+0x3d0>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2201      	movs	r2, #1
 800aed4:	4053      	eors	r3, r2
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00f      	beq.n	800aefc <main+0x2e8>
 800aedc:	4b2b      	ldr	r3, [pc, #172]	@ (800af8c <main+0x378>)
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2201      	movs	r2, #1
 800aee2:	4053      	eors	r3, r2
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d008      	beq.n	800aefc <main+0x2e8>
 800aeea:	4b3d      	ldr	r3, [pc, #244]	@ (800afe0 <main+0x3cc>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2201      	movs	r2, #1
 800aef0:	4053      	eors	r3, r2
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <main+0x2e8>
      Device_Test();  // for device with startup time
 800aef8:	f000 fc90 	bl	800b81c <Device_Test>
    }
    if (!usbPluggedIn) {
 800aefc:	4b3a      	ldr	r3, [pc, #232]	@ (800afe8 <main+0x3d4>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2201      	movs	r2, #1
 800af02:	4053      	eors	r3, r2
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d01c      	beq.n	800af44 <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800af0a:	4b3d      	ldr	r3, [pc, #244]	@ (800b000 <main+0x3ec>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	2201      	movs	r2, #1
 800af10:	4053      	eors	r3, r2
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d015      	beq.n	800af44 <main+0x330>
 800af18:	f000 fcfe 	bl	800b918 <AllDevicesReady>
 800af1c:	1e03      	subs	r3, r0, #0
 800af1e:	d011      	beq.n	800af44 <main+0x330>
 800af20:	4b38      	ldr	r3, [pc, #224]	@ (800b004 <main+0x3f0>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00d      	beq.n	800af44 <main+0x330>
        EnabledConnectedDevices();
 800af28:	f000 fd90 	bl	800ba4c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800af2c:	4b36      	ldr	r3, [pc, #216]	@ (800b008 <main+0x3f4>)
 800af2e:	795b      	ldrb	r3, [r3, #5]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <main+0x326>
 800af34:	23d7      	movs	r3, #215	@ 0xd7
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	e001      	b.n	800af3e <main+0x32a>
 800af3a:	23dc      	movs	r3, #220	@ 0xdc
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	0018      	movs	r0, r3
 800af40:	f7fd fb1e 	bl	8008580 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800af44:	4b12      	ldr	r3, [pc, #72]	@ (800af90 <main+0x37c>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <main+0x33c>
      check_cli_command();
 800af4c:	f000 f8ea 	bl	800b124 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800af50:	f7fc ff86 	bl	8007e60 <Check_USB_PowerOn>
 800af54:	1e03      	subs	r3, r0, #0
 800af56:	d100      	bne.n	800af5a <main+0x346>
 800af58:	e6f2      	b.n	800ad40 <main+0x12c>
 800af5a:	4b2c      	ldr	r3, [pc, #176]	@ (800b00c <main+0x3f8>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	2201      	movs	r2, #1
 800af60:	4053      	eors	r3, r2
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	d100      	bne.n	800af6a <main+0x356>
 800af68:	e6ea      	b.n	800ad40 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800af6a:	f015 fb9b 	bl	80206a4 <GetUsbRxPointer>
 800af6e:	0003      	movs	r3, r0
 800af70:	0018      	movs	r0, r3
 800af72:	f7fc fd33 	bl	80079dc <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800af76:	e6e3      	b.n	800ad40 <main+0x12c>
 800af78:	20001e8c 	.word	0x20001e8c
 800af7c:	20001e4c 	.word	0x20001e4c
 800af80:	20000df8 	.word	0x20000df8
 800af84:	080298d0 	.word	0x080298d0
 800af88:	080298f4 	.word	0x080298f4
 800af8c:	20000ddd 	.word	0x20000ddd
 800af90:	20000de4 	.word	0x20000de4
 800af94:	20001fc4 	.word	0x20001fc4
 800af98:	20000e78 	.word	0x20000e78
 800af9c:	20001ecc 	.word	0x20001ecc
 800afa0:	20000d58 	.word	0x20000d58
 800afa4:	20000d94 	.word	0x20000d94
 800afa8:	080298f8 	.word	0x080298f8
 800afac:	0802b10c 	.word	0x0802b10c
 800afb0:	2000207c 	.word	0x2000207c
 800afb4:	20000b58 	.word	0x20000b58
 800afb8:	20000c20 	.word	0x20000c20
 800afbc:	000061a8 	.word	0x000061a8
 800afc0:	20000df4 	.word	0x20000df4
 800afc4:	20000ddf 	.word	0x20000ddf
 800afc8:	0802990c 	.word	0x0802990c
 800afcc:	20000098 	.word	0x20000098
 800afd0:	0000c350 	.word	0x0000c350
 800afd4:	20000097 	.word	0x20000097
 800afd8:	20000dfc 	.word	0x20000dfc
 800afdc:	20000de1 	.word	0x20000de1
 800afe0:	20000dde 	.word	0x20000dde
 800afe4:	20000ddc 	.word	0x20000ddc
 800afe8:	20001e2d 	.word	0x20001e2d
 800afec:	20000ea0 	.word	0x20000ea0
 800aff0:	20000de0 	.word	0x20000de0
 800aff4:	08029940 	.word	0x08029940
 800aff8:	20000e9e 	.word	0x20000e9e
 800affc:	20000e9d 	.word	0x20000e9d
 800b000:	20001e2e 	.word	0x20001e2e
 800b004:	200005bc 	.word	0x200005bc
 800b008:	20000e04 	.word	0x20000e04
 800b00c:	200005b7 	.word	0x200005b7

0800b010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b09d      	sub	sp, #116	@ 0x74
 800b014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b016:	2438      	movs	r4, #56	@ 0x38
 800b018:	193b      	adds	r3, r7, r4
 800b01a:	0018      	movs	r0, r3
 800b01c:	2338      	movs	r3, #56	@ 0x38
 800b01e:	001a      	movs	r2, r3
 800b020:	2100      	movs	r1, #0
 800b022:	f018 fd79 	bl	8023b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b026:	2324      	movs	r3, #36	@ 0x24
 800b028:	18fb      	adds	r3, r7, r3
 800b02a:	0018      	movs	r0, r3
 800b02c:	2314      	movs	r3, #20
 800b02e:	001a      	movs	r2, r3
 800b030:	2100      	movs	r1, #0
 800b032:	f018 fd71 	bl	8023b18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b036:	003b      	movs	r3, r7
 800b038:	0018      	movs	r0, r3
 800b03a:	2324      	movs	r3, #36	@ 0x24
 800b03c:	001a      	movs	r2, r3
 800b03e:	2100      	movs	r1, #0
 800b040:	f018 fd6a 	bl	8023b18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b044:	4b34      	ldr	r3, [pc, #208]	@ (800b118 <SystemClock_Config+0x108>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a34      	ldr	r2, [pc, #208]	@ (800b11c <SystemClock_Config+0x10c>)
 800b04a:	401a      	ands	r2, r3
 800b04c:	4b32      	ldr	r3, [pc, #200]	@ (800b118 <SystemClock_Config+0x108>)
 800b04e:	2180      	movs	r1, #128	@ 0x80
 800b050:	0109      	lsls	r1, r1, #4
 800b052:	430a      	orrs	r2, r1
 800b054:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800b056:	f00d fb85 	bl	8018764 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800b05a:	4b31      	ldr	r3, [pc, #196]	@ (800b120 <SystemClock_Config+0x110>)
 800b05c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b05e:	4a2f      	ldr	r2, [pc, #188]	@ (800b11c <SystemClock_Config+0x10c>)
 800b060:	401a      	ands	r2, r3
 800b062:	4b2f      	ldr	r3, [pc, #188]	@ (800b120 <SystemClock_Config+0x110>)
 800b064:	2180      	movs	r1, #128	@ 0x80
 800b066:	0149      	lsls	r1, r1, #5
 800b068:	430a      	orrs	r2, r1
 800b06a:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800b06c:	193b      	adds	r3, r7, r4
 800b06e:	2226      	movs	r2, #38	@ 0x26
 800b070:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b072:	193b      	adds	r3, r7, r4
 800b074:	2280      	movs	r2, #128	@ 0x80
 800b076:	0052      	lsls	r2, r2, #1
 800b078:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b07a:	0021      	movs	r1, r4
 800b07c:	187b      	adds	r3, r7, r1
 800b07e:	2201      	movs	r2, #1
 800b080:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b082:	187b      	adds	r3, r7, r1
 800b084:	2210      	movs	r2, #16
 800b086:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800b088:	187b      	adds	r3, r7, r1
 800b08a:	2201      	movs	r2, #1
 800b08c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800b08e:	187b      	adds	r3, r7, r1
 800b090:	2200      	movs	r2, #0
 800b092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b094:	187b      	adds	r3, r7, r1
 800b096:	0018      	movs	r0, r3
 800b098:	f00d fbf4 	bl	8018884 <HAL_RCC_OscConfig>
 800b09c:	1e03      	subs	r3, r0, #0
 800b09e:	d001      	beq.n	800b0a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b0a0:	f000 f906 	bl	800b2b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b0a4:	2124      	movs	r1, #36	@ 0x24
 800b0a6:	187b      	adds	r3, r7, r1
 800b0a8:	220f      	movs	r2, #15
 800b0aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b0ac:	187b      	adds	r3, r7, r1
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b0b2:	187b      	adds	r3, r7, r1
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b0b8:	187b      	adds	r3, r7, r1
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b0be:	187b      	adds	r3, r7, r1
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b0c4:	187b      	adds	r3, r7, r1
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	0018      	movs	r0, r3
 800b0ca:	f00d ffaf 	bl	801902c <HAL_RCC_ClockConfig>
 800b0ce:	1e03      	subs	r3, r0, #0
 800b0d0:	d001      	beq.n	800b0d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800b0d2:	f000 f8ed 	bl	800b2b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800b0d6:	003b      	movs	r3, r7
 800b0d8:	226d      	movs	r2, #109	@ 0x6d
 800b0da:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b0dc:	003b      	movs	r3, r7
 800b0de:	2200      	movs	r2, #0
 800b0e0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b0e2:	003b      	movs	r3, r7
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b0e8:	003b      	movs	r3, r7
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b0ee:	003b      	movs	r3, r7
 800b0f0:	2280      	movs	r2, #128	@ 0x80
 800b0f2:	0252      	lsls	r2, r2, #9
 800b0f4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b0f6:	003b      	movs	r3, r7
 800b0f8:	2280      	movs	r2, #128	@ 0x80
 800b0fa:	04d2      	lsls	r2, r2, #19
 800b0fc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b0fe:	003b      	movs	r3, r7
 800b100:	0018      	movs	r0, r3
 800b102:	f00e f9b7 	bl	8019474 <HAL_RCCEx_PeriphCLKConfig>
 800b106:	1e03      	subs	r3, r0, #0
 800b108:	d001      	beq.n	800b10e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800b10a:	f000 f8d1 	bl	800b2b0 <Error_Handler>
  }
}
 800b10e:	46c0      	nop			@ (mov r8, r8)
 800b110:	46bd      	mov	sp, r7
 800b112:	b01d      	add	sp, #116	@ 0x74
 800b114:	bd90      	pop	{r4, r7, pc}
 800b116:	46c0      	nop			@ (mov r8, r8)
 800b118:	40007000 	.word	0x40007000
 800b11c:	ffffe7ff 	.word	0xffffe7ff
 800b120:	40021000 	.word	0x40021000

0800b124 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800b128:	4b34      	ldr	r3, [pc, #208]	@ (800b1fc <check_cli_command+0xd8>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	3b61      	subs	r3, #97	@ 0x61
 800b12e:	2b13      	cmp	r3, #19
 800b130:	d833      	bhi.n	800b19a <check_cli_command+0x76>
 800b132:	009a      	lsls	r2, r3, #2
 800b134:	4b32      	ldr	r3, [pc, #200]	@ (800b200 <check_cli_command+0xdc>)
 800b136:	18d3      	adds	r3, r2, r3
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800b13c:	4b31      	ldr	r3, [pc, #196]	@ (800b204 <check_cli_command+0xe0>)
 800b13e:	0018      	movs	r0, r3
 800b140:	f018 fb7a 	bl	8023838 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800b144:	2003      	movs	r0, #3
 800b146:	f006 fbf3 	bl	8011930 <SetVerboseLevel>
      break;
 800b14a:	e051      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800b14c:	f7fc fa44 	bl	80075d8 <PC_show_Keys>
    break;
 800b150:	e04e      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800b152:	f7f9 f969 	bl	8004428 <forceNTPupdate>
    break;
 800b156:	e04b      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800b158:	4b2b      	ldr	r3, [pc, #172]	@ (800b208 <check_cli_command+0xe4>)
 800b15a:	0018      	movs	r0, r3
 800b15c:	f018 fb6c 	bl	8023838 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800b160:	2002      	movs	r0, #2
 800b162:	f006 fbe5 	bl	8011930 <SetVerboseLevel>
      break;
 800b166:	e043      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800b168:	4b28      	ldr	r3, [pc, #160]	@ (800b20c <check_cli_command+0xe8>)
 800b16a:	0018      	movs	r0, r3
 800b16c:	f018 fb64 	bl	8023838 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800b170:	2001      	movs	r0, #1
 800b172:	f006 fbdd 	bl	8011930 <SetVerboseLevel>
      break;
 800b176:	e03b      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800b178:	4b25      	ldr	r3, [pc, #148]	@ (800b210 <check_cli_command+0xec>)
 800b17a:	0018      	movs	r0, r3
 800b17c:	f018 fb5c 	bl	8023838 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800b180:	2000      	movs	r0, #0
 800b182:	f006 fbd5 	bl	8011930 <SetVerboseLevel>
      break;
 800b186:	e033      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800b188:	f006 ffb4 	bl	80120f4 <HAL_GetTick>
 800b18c:	0002      	movs	r2, r0
 800b18e:	4b21      	ldr	r3, [pc, #132]	@ (800b214 <check_cli_command+0xf0>)
 800b190:	601a      	str	r2, [r3, #0]
      break;
 800b192:	e02d      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800b194:	f7fc fe94 	bl	8007ec0 <showTime>
      break;
 800b198:	e02a      	b.n	800b1f0 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800b19a:	4a1f      	ldr	r2, [pc, #124]	@ (800b218 <check_cli_command+0xf4>)
 800b19c:	4b1f      	ldr	r3, [pc, #124]	@ (800b21c <check_cli_command+0xf8>)
 800b19e:	0019      	movs	r1, r3
 800b1a0:	2001      	movs	r0, #1
 800b1a2:	f006 fb5b 	bl	801185c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800b1a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b220 <check_cli_command+0xfc>)
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f018 fb45 	bl	8023838 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800b1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b224 <check_cli_command+0x100>)
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f018 fb41 	bl	8023838 <puts>
      printf("e - show EEPROM\r\n");
 800b1b6:	4b1c      	ldr	r3, [pc, #112]	@ (800b228 <check_cli_command+0x104>)
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f018 fb3d 	bl	8023838 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800b1be:	4b1b      	ldr	r3, [pc, #108]	@ (800b22c <check_cli_command+0x108>)
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f018 fb39 	bl	8023838 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800b1c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b230 <check_cli_command+0x10c>)
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f018 fb35 	bl	8023838 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800b1ce:	4b19      	ldr	r3, [pc, #100]	@ (800b234 <check_cli_command+0x110>)
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	f018 fb31 	bl	8023838 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800b1d6:	4b18      	ldr	r3, [pc, #96]	@ (800b238 <check_cli_command+0x114>)
 800b1d8:	0018      	movs	r0, r3
 800b1da:	f018 fb2d 	bl	8023838 <puts>
      printf("s - Start particle measurement\r\n");
 800b1de:	4b17      	ldr	r3, [pc, #92]	@ (800b23c <check_cli_command+0x118>)
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f018 fb29 	bl	8023838 <puts>
      printf("t - Show actual systemtime\r\n");
 800b1e6:	4b16      	ldr	r3, [pc, #88]	@ (800b240 <check_cli_command+0x11c>)
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f018 fb25 	bl	8023838 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800b1ee:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800b1f0:	4b02      	ldr	r3, [pc, #8]	@ (800b1fc <check_cli_command+0xd8>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	701a      	strb	r2, [r3, #0]
}
 800b1f6:	46c0      	nop			@ (mov r8, r8)
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	20000de4 	.word	0x20000de4
 800b200:	0802b0bc 	.word	0x0802b0bc
 800b204:	08029970 	.word	0x08029970
 800b208:	0802998c 	.word	0x0802998c
 800b20c:	080299a8 	.word	0x080299a8
 800b210:	080299c8 	.word	0x080299c8
 800b214:	20000eac 	.word	0x20000eac
 800b218:	080299e4 	.word	0x080299e4
 800b21c:	08029a14 	.word	0x08029a14
 800b220:	08029a18 	.word	0x08029a18
 800b224:	08029a30 	.word	0x08029a30
 800b228:	08029a50 	.word	0x08029a50
 800b22c:	08029a64 	.word	0x08029a64
 800b230:	08029a88 	.word	0x08029a88
 800b234:	08029aa8 	.word	0x08029aa8
 800b238:	08029acc 	.word	0x08029acc
 800b23c:	08029aec 	.word	0x08029aec
 800b240:	08029b0c 	.word	0x08029b0c

0800b244 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800b24c:	4907      	ldr	r1, [pc, #28]	@ (800b26c <HAL_UART_RxCpltCallback+0x28>)
 800b24e:	4b08      	ldr	r3, [pc, #32]	@ (800b270 <HAL_UART_RxCpltCallback+0x2c>)
 800b250:	2201      	movs	r2, #1
 800b252:	0018      	movs	r0, r3
 800b254:	f00f fcb2 	bl	801abbc <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800b258:	4904      	ldr	r1, [pc, #16]	@ (800b26c <HAL_UART_RxCpltCallback+0x28>)
 800b25a:	4b05      	ldr	r3, [pc, #20]	@ (800b270 <HAL_UART_RxCpltCallback+0x2c>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	0018      	movs	r0, r3
 800b260:	f00f fcac 	bl	801abbc <HAL_UART_Receive_IT>
}
 800b264:	46c0      	nop			@ (mov r8, r8)
 800b266:	46bd      	mov	sp, r7
 800b268:	b002      	add	sp, #8
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	20000de4 	.word	0x20000de4
 800b270:	20001fc4 	.word	0x20001fc4

0800b274 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	0002      	movs	r2, r0
 800b27c:	1dbb      	adds	r3, r7, #6
 800b27e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800b280:	1dbb      	adds	r3, r7, #6
 800b282:	881a      	ldrh	r2, [r3, #0]
 800b284:	2380      	movs	r3, #128	@ 0x80
 800b286:	021b      	lsls	r3, r3, #8
 800b288:	429a      	cmp	r2, r3
 800b28a:	d10b      	bne.n	800b2a4 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800b28c:	f005 fd8c 	bl	8010da8 <setuserToggle>
    if (GetPMSensorPresence()) {
 800b290:	f000 f860 	bl	800b354 <GetPMSensorPresence>
 800b294:	1e03      	subs	r3, r0, #0
 800b296:	d005      	beq.n	800b2a4 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800b298:	4b04      	ldr	r3, [pc, #16]	@ (800b2ac <HAL_GPIO_EXTI_Callback+0x38>)
 800b29a:	2201      	movs	r2, #1
 800b29c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800b29e:	2000      	movs	r0, #0
 800b2a0:	f001 f808 	bl	800c2b4 <sen5x_Set_sen5x_state>
    }
  }
}
 800b2a4:	46c0      	nop			@ (mov r8, r8)
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	b002      	add	sp, #8
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	20000dfc 	.word	0x20000dfc

0800b2b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800b2b4:	f005 fa44 	bl	8010740 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b2b8:	b672      	cpsid	i
}
 800b2ba:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800b2bc:	4a05      	ldr	r2, [pc, #20]	@ (800b2d4 <Error_Handler+0x24>)
 800b2be:	4b06      	ldr	r3, [pc, #24]	@ (800b2d8 <Error_Handler+0x28>)
 800b2c0:	0019      	movs	r1, r3
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	f006 faca 	bl	801185c <CreateLine>

    HAL_Delay(2500);
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <Error_Handler+0x2c>)
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f006 ff1c 	bl	8012108 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800b2d0:	46c0      	nop			@ (mov r8, r8)
 800b2d2:	e7f3      	b.n	800b2bc <Error_Handler+0xc>
 800b2d4:	08029b28 	.word	0x08029b28
 800b2d8:	08029a14 	.word	0x08029a14
 800b2dc:	000009c4 	.word	0x000009c4

0800b2e0 <testInit>:
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;

void testInit(){
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800b2e4:	4b19      	ldr	r3, [pc, #100]	@ (800b34c <testInit+0x6c>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800b2ea:	4b18      	ldr	r3, [pc, #96]	@ (800b34c <testInit+0x6c>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800b2f0:	4b16      	ldr	r3, [pc, #88]	@ (800b34c <testInit+0x6c>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800b2f6:	4b15      	ldr	r3, [pc, #84]	@ (800b34c <testInit+0x6c>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800b2fc:	4b13      	ldr	r3, [pc, #76]	@ (800b34c <testInit+0x6c>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800b302:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <testInit+0x6c>)
 800b304:	2200      	movs	r2, #0
 800b306:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800b308:	4b10      	ldr	r3, [pc, #64]	@ (800b34c <testInit+0x6c>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800b30e:	4b0f      	ldr	r3, [pc, #60]	@ (800b34c <testInit+0x6c>)
 800b310:	2200      	movs	r2, #0
 800b312:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800b314:	4b0d      	ldr	r3, [pc, #52]	@ (800b34c <testInit+0x6c>)
 800b316:	2200      	movs	r2, #0
 800b318:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800b31a:	4b0d      	ldr	r3, [pc, #52]	@ (800b350 <testInit+0x70>)
 800b31c:	2201      	movs	r2, #1
 800b31e:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800b320:	4b0b      	ldr	r3, [pc, #44]	@ (800b350 <testInit+0x70>)
 800b322:	2201      	movs	r2, #1
 800b324:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800b326:	4b0a      	ldr	r3, [pc, #40]	@ (800b350 <testInit+0x70>)
 800b328:	2201      	movs	r2, #1
 800b32a:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800b32c:	4b08      	ldr	r3, [pc, #32]	@ (800b350 <testInit+0x70>)
 800b32e:	2201      	movs	r2, #1
 800b330:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800b332:	4b07      	ldr	r3, [pc, #28]	@ (800b350 <testInit+0x70>)
 800b334:	2201      	movs	r2, #1
 800b336:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800b338:	4b05      	ldr	r3, [pc, #20]	@ (800b350 <testInit+0x70>)
 800b33a:	2201      	movs	r2, #1
 800b33c:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800b33e:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <testInit+0x70>)
 800b340:	2201      	movs	r2, #1
 800b342:	719a      	strb	r2, [r3, #6]
}
 800b344:	46c0      	nop			@ (mov r8, r8)
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	46c0      	nop			@ (mov r8, r8)
 800b34c:	20000e04 	.word	0x20000e04
 800b350:	20000dfc 	.word	0x20000dfc

0800b354 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800b358:	4b02      	ldr	r3, [pc, #8]	@ (800b364 <GetPMSensorPresence+0x10>)
 800b35a:	795b      	ldrb	r3, [r3, #5]
}
 800b35c:	0018      	movs	r0, r3
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	46c0      	nop			@ (mov r8, r8)
 800b364:	20000e04 	.word	0x20000e04

0800b368 <DisablePMSensor>:

void DisablePMSensor() {
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800b36c:	4b02      	ldr	r3, [pc, #8]	@ (800b378 <DisablePMSensor+0x10>)
 800b36e:	2200      	movs	r2, #0
 800b370:	715a      	strb	r2, [r3, #5]
}
 800b372:	46c0      	nop			@ (mov r8, r8)
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20000e04 	.word	0x20000e04

0800b37c <IsBMP280SensorPresent>:

bool IsAHT20SensorPresent() {
  return SensorProbe.AHT20_Present;
}

bool IsBMP280SensorPresent() {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800b380:	4b02      	ldr	r3, [pc, #8]	@ (800b38c <IsBMP280SensorPresent+0x10>)
 800b382:	791b      	ldrb	r3, [r3, #4]
}
 800b384:	0018      	movs	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	46c0      	nop			@ (mov r8, r8)
 800b38c:	20000e04 	.word	0x20000e04

0800b390 <IsSGPPresent>:

bool IsENS160SensorPresent() {
  return SensorProbe.ENS160_Present;
}

bool IsSGPPresent() {
 800b390:	b580      	push	{r7, lr}
 800b392:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800b394:	4b02      	ldr	r3, [pc, #8]	@ (800b3a0 <IsSGPPresent+0x10>)
 800b396:	785b      	ldrb	r3, [r3, #1]
}
 800b398:	0018      	movs	r0, r3
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	46c0      	nop			@ (mov r8, r8)
 800b3a0:	20000e04 	.word	0x20000e04

0800b3a4 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	0002      	movs	r2, r0
 800b3ac:	1dfb      	adds	r3, r7, #7
 800b3ae:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e0 <SetVOCSensorDIS_ENA+0x3c>)
 800b3b2:	1dfa      	adds	r2, r7, #7
 800b3b4:	7812      	ldrb	r2, [r2, #0]
 800b3b6:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e4 <SetVOCSensorDIS_ENA+0x40>)
 800b3ba:	1dfa      	adds	r2, r7, #7
 800b3bc:	7812      	ldrb	r2, [r2, #0]
 800b3be:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800b3c0:	1dfb      	adds	r3, r7, #7
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <SetVOCSensorDIS_ENA+0x28>
 800b3c8:	4b07      	ldr	r3, [pc, #28]	@ (800b3e8 <SetVOCSensorDIS_ENA+0x44>)
 800b3ca:	e000      	b.n	800b3ce <SetVOCSensorDIS_ENA+0x2a>
 800b3cc:	4b07      	ldr	r3, [pc, #28]	@ (800b3ec <SetVOCSensorDIS_ENA+0x48>)
 800b3ce:	4a08      	ldr	r2, [pc, #32]	@ (800b3f0 <SetVOCSensorDIS_ENA+0x4c>)
 800b3d0:	4908      	ldr	r1, [pc, #32]	@ (800b3f4 <SetVOCSensorDIS_ENA+0x50>)
 800b3d2:	2003      	movs	r0, #3
 800b3d4:	f006 fa42 	bl	801185c <CreateLine>
}
 800b3d8:	46c0      	nop			@ (mov r8, r8)
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b002      	add	sp, #8
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	20000e04 	.word	0x20000e04
 800b3e4:	20000dfc 	.word	0x20000dfc
 800b3e8:	08029b54 	.word	0x08029b54
 800b3ec:	08029b5c 	.word	0x08029b5c
 800b3f0:	08029b68 	.word	0x08029b68
 800b3f4:	08029b7c 	.word	0x08029b7c

0800b3f8 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800b3fc:	4b02      	ldr	r3, [pc, #8]	@ (800b408 <IsPMSensorEnabled+0x10>)
 800b3fe:	789b      	ldrb	r3, [r3, #2]
}
 800b400:	0018      	movs	r0, r3
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	46c0      	nop			@ (mov r8, r8)
 800b408:	20000dfc 	.word	0x20000dfc

0800b40c <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	0002      	movs	r2, r0
 800b414:	1dfb      	adds	r3, r7, #7
 800b416:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800b418:	4b05      	ldr	r3, [pc, #20]	@ (800b430 <SetVOCSensorStatus+0x24>)
 800b41a:	7a1b      	ldrb	r3, [r3, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800b420:	4b04      	ldr	r3, [pc, #16]	@ (800b434 <SetVOCSensorStatus+0x28>)
 800b422:	1dfa      	adds	r2, r7, #7
 800b424:	7812      	ldrb	r2, [r2, #0]
 800b426:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800b428:	46c0      	nop			@ (mov r8, r8)
 800b42a:	46bd      	mov	sp, r7
 800b42c:	b002      	add	sp, #8
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20000e04 	.word	0x20000e04
 800b434:	20000dfc 	.word	0x20000dfc

0800b438 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	0002      	movs	r2, r0
 800b440:	1dfb      	adds	r3, r7, #7
 800b442:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800b444:	4b03      	ldr	r3, [pc, #12]	@ (800b454 <SetPMSensorStatus+0x1c>)
 800b446:	1dfa      	adds	r2, r7, #7
 800b448:	7812      	ldrb	r2, [r2, #0]
 800b44a:	709a      	strb	r2, [r3, #2]
}
 800b44c:	46c0      	nop			@ (mov r8, r8)
 800b44e:	46bd      	mov	sp, r7
 800b450:	b002      	add	sp, #8
 800b452:	bd80      	pop	{r7, pc}
 800b454:	20000dfc 	.word	0x20000dfc

0800b458 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800b458:	b580      	push	{r7, lr}
 800b45a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <SetESPMeasurementDone+0x10>)
 800b45e:	2201      	movs	r2, #1
 800b460:	71da      	strb	r2, [r3, #7]
}
 800b462:	46c0      	nop			@ (mov r8, r8)
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	20000e04 	.word	0x20000e04

0800b46c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	603b      	str	r3, [r7, #0]
  testInit();
 800b47a:	f7ff ff31 	bl	800b2e0 <testInit>
  I2CSensors_Init(sensorI2C);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	0018      	movs	r0, r3
 800b482:	f7fb fd27 	bl	8006ed4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800b486:	f006 fc1b 	bl	8011cc0 <HIDS_DeviceConnected>
 800b48a:	0003      	movs	r3, r0
 800b48c:	001a      	movs	r2, r3
 800b48e:	2301      	movs	r3, #1
 800b490:	4053      	eors	r3, r2
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d00c      	beq.n	800b4b2 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800b498:	4abf      	ldr	r2, [pc, #764]	@ (800b798 <Device_Init+0x32c>)
 800b49a:	4bc0      	ldr	r3, [pc, #768]	@ (800b79c <Device_Init+0x330>)
 800b49c:	0019      	movs	r1, r3
 800b49e:	2001      	movs	r0, #1
 800b4a0:	f006 f9dc 	bl	801185c <CreateLine>
     SensorProbe.HT_Present = false;
 800b4a4:	4bbe      	ldr	r3, [pc, #760]	@ (800b7a0 <Device_Init+0x334>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800b4aa:	4bbe      	ldr	r3, [pc, #760]	@ (800b7a4 <Device_Init+0x338>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	e008      	b.n	800b4c4 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800b4b2:	4bbb      	ldr	r3, [pc, #748]	@ (800b7a0 <Device_Init+0x334>)
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800b4b8:	4abb      	ldr	r2, [pc, #748]	@ (800b7a8 <Device_Init+0x33c>)
 800b4ba:	4bbc      	ldr	r3, [pc, #752]	@ (800b7ac <Device_Init+0x340>)
 800b4bc:	0019      	movs	r1, r3
 800b4be:	2003      	movs	r0, #3
 800b4c0:	f006 f9cc 	bl	801185c <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800b4c4:	f7fe fa42 	bl	800994c <BMP280_DeviceConnected>
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	001a      	movs	r2, r3
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	4053      	eors	r3, r2
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00c      	beq.n	800b4f0 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800b4d6:	4ab6      	ldr	r2, [pc, #728]	@ (800b7b0 <Device_Init+0x344>)
 800b4d8:	4bb0      	ldr	r3, [pc, #704]	@ (800b79c <Device_Init+0x330>)
 800b4da:	0019      	movs	r1, r3
 800b4dc:	2001      	movs	r0, #1
 800b4de:	f006 f9bd 	bl	801185c <CreateLine>
     SensorProbe.BMP280_Present = false;
 800b4e2:	4baf      	ldr	r3, [pc, #700]	@ (800b7a0 <Device_Init+0x334>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800b4e8:	4bae      	ldr	r3, [pc, #696]	@ (800b7a4 <Device_Init+0x338>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	715a      	strb	r2, [r3, #5]
 800b4ee:	e008      	b.n	800b502 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800b4f0:	4bab      	ldr	r3, [pc, #684]	@ (800b7a0 <Device_Init+0x334>)
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800b4f6:	4aaf      	ldr	r2, [pc, #700]	@ (800b7b4 <Device_Init+0x348>)
 800b4f8:	4bac      	ldr	r3, [pc, #688]	@ (800b7ac <Device_Init+0x340>)
 800b4fa:	0019      	movs	r1, r3
 800b4fc:	2003      	movs	r0, #3
 800b4fe:	f006 f9ad 	bl	801185c <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800b502:	f003 fc53 	bl	800edac <SGP_DeviceConnected>
 800b506:	0003      	movs	r3, r0
 800b508:	001a      	movs	r2, r3
 800b50a:	2301      	movs	r3, #1
 800b50c:	4053      	eors	r3, r2
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00c      	beq.n	800b52e <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800b514:	4ba2      	ldr	r3, [pc, #648]	@ (800b7a0 <Device_Init+0x334>)
 800b516:	2200      	movs	r2, #0
 800b518:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800b51a:	4aa7      	ldr	r2, [pc, #668]	@ (800b7b8 <Device_Init+0x34c>)
 800b51c:	4b9f      	ldr	r3, [pc, #636]	@ (800b79c <Device_Init+0x330>)
 800b51e:	0019      	movs	r1, r3
 800b520:	2001      	movs	r0, #1
 800b522:	f006 f99b 	bl	801185c <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800b526:	4b9f      	ldr	r3, [pc, #636]	@ (800b7a4 <Device_Init+0x338>)
 800b528:	2200      	movs	r2, #0
 800b52a:	705a      	strb	r2, [r3, #1]
 800b52c:	e00b      	b.n	800b546 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800b52e:	4b9c      	ldr	r3, [pc, #624]	@ (800b7a0 <Device_Init+0x334>)
 800b530:	2201      	movs	r2, #1
 800b532:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800b534:	4b9a      	ldr	r3, [pc, #616]	@ (800b7a0 <Device_Init+0x334>)
 800b536:	2201      	movs	r2, #1
 800b538:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800b53a:	4aa0      	ldr	r2, [pc, #640]	@ (800b7bc <Device_Init+0x350>)
 800b53c:	4b9b      	ldr	r3, [pc, #620]	@ (800b7ac <Device_Init+0x340>)
 800b53e:	0019      	movs	r1, r3
 800b540:	2003      	movs	r0, #3
 800b542:	f006 f98b 	bl	801185c <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800b546:	f7f8 fa6f 	bl	8003a28 <ENS_DeviceConnected>
 800b54a:	0003      	movs	r3, r0
 800b54c:	001a      	movs	r2, r3
 800b54e:	2301      	movs	r3, #1
 800b550:	4053      	eors	r3, r2
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00c      	beq.n	800b572 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800b558:	4b91      	ldr	r3, [pc, #580]	@ (800b7a0 <Device_Init+0x334>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800b55e:	4a98      	ldr	r2, [pc, #608]	@ (800b7c0 <Device_Init+0x354>)
 800b560:	4b8e      	ldr	r3, [pc, #568]	@ (800b79c <Device_Init+0x330>)
 800b562:	0019      	movs	r1, r3
 800b564:	2001      	movs	r0, #1
 800b566:	f006 f979 	bl	801185c <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800b56a:	4b8e      	ldr	r3, [pc, #568]	@ (800b7a4 <Device_Init+0x338>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	719a      	strb	r2, [r3, #6]
 800b570:	e008      	b.n	800b584 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800b572:	4b8b      	ldr	r3, [pc, #556]	@ (800b7a0 <Device_Init+0x334>)
 800b574:	2201      	movs	r2, #1
 800b576:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800b578:	4a92      	ldr	r2, [pc, #584]	@ (800b7c4 <Device_Init+0x358>)
 800b57a:	4b8c      	ldr	r3, [pc, #560]	@ (800b7ac <Device_Init+0x340>)
 800b57c:	0019      	movs	r1, r3
 800b57e:	2003      	movs	r0, #3
 800b580:	f006 f96c 	bl	801185c <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800b584:	f7fd fd1c 	bl	8008fc0 <AHT20_DeviceConnected>
 800b588:	0003      	movs	r3, r0
 800b58a:	001a      	movs	r2, r3
 800b58c:	2301      	movs	r3, #1
 800b58e:	4053      	eors	r3, r2
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00c      	beq.n	800b5b0 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800b596:	4a8c      	ldr	r2, [pc, #560]	@ (800b7c8 <Device_Init+0x35c>)
 800b598:	4b80      	ldr	r3, [pc, #512]	@ (800b79c <Device_Init+0x330>)
 800b59a:	0019      	movs	r1, r3
 800b59c:	2001      	movs	r0, #1
 800b59e:	f006 f95d 	bl	801185c <CreateLine>
     SensorProbe.AHT20_Present = false;
 800b5a2:	4b7f      	ldr	r3, [pc, #508]	@ (800b7a0 <Device_Init+0x334>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800b5a8:	4b7e      	ldr	r3, [pc, #504]	@ (800b7a4 <Device_Init+0x338>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	711a      	strb	r2, [r3, #4]
 800b5ae:	e008      	b.n	800b5c2 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800b5b0:	4b7b      	ldr	r3, [pc, #492]	@ (800b7a0 <Device_Init+0x334>)
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800b5b6:	4a85      	ldr	r2, [pc, #532]	@ (800b7cc <Device_Init+0x360>)
 800b5b8:	4b7c      	ldr	r3, [pc, #496]	@ (800b7ac <Device_Init+0x340>)
 800b5ba:	0019      	movs	r1, r3
 800b5bc:	2003      	movs	r0, #3
 800b5be:	f006 f94d 	bl	801185c <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800b5c2:	4b77      	ldr	r3, [pc, #476]	@ (800b7a0 <Device_Init+0x334>)
 800b5c4:	785b      	ldrb	r3, [r3, #1]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d009      	beq.n	800b5de <Device_Init+0x172>
 800b5ca:	4b75      	ldr	r3, [pc, #468]	@ (800b7a0 <Device_Init+0x334>)
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <Device_Init+0x172>
    SetDBLED(false, true, false);
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2101      	movs	r1, #1
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	f004 ff0c 	bl	80103f4 <SetDBLED>
 800b5dc:	e018      	b.n	800b610 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	f004 ff06 	bl	80103f4 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800b5e8:	4b79      	ldr	r3, [pc, #484]	@ (800b7d0 <Device_Init+0x364>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	f008 f811 	bl	8013616 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800b5f4:	2380      	movs	r3, #128	@ 0x80
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	4875      	ldr	r0, [pc, #468]	@ (800b7d0 <Device_Init+0x364>)
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	0019      	movs	r1, r3
 800b5fe:	f008 f80a 	bl	8013616 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800b602:	2380      	movs	r3, #128	@ 0x80
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4872      	ldr	r0, [pc, #456]	@ (800b7d0 <Device_Init+0x364>)
 800b608:	2201      	movs	r2, #1
 800b60a:	0019      	movs	r1, r3
 800b60c:	f008 f803 	bl	8013616 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800b610:	4b64      	ldr	r3, [pc, #400]	@ (800b7a4 <Device_Init+0x338>)
 800b612:	78db      	ldrb	r3, [r3, #3]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d028      	beq.n	800b66a <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800b618:	4a6e      	ldr	r2, [pc, #440]	@ (800b7d4 <Device_Init+0x368>)
 800b61a:	4b6f      	ldr	r3, [pc, #444]	@ (800b7d8 <Device_Init+0x36c>)
 800b61c:	0019      	movs	r1, r3
 800b61e:	2002      	movs	r0, #2
 800b620:	f006 f91c 	bl	801185c <CreateLine>
    if (!enableMicrophone(true)) {
 800b624:	2001      	movs	r0, #1
 800b626:	f003 ffe3 	bl	800f5f0 <enableMicrophone>
 800b62a:	0003      	movs	r3, r0
 800b62c:	001a      	movs	r2, r3
 800b62e:	2301      	movs	r3, #1
 800b630:	4053      	eors	r3, r2
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00c      	beq.n	800b652 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800b638:	4a68      	ldr	r2, [pc, #416]	@ (800b7dc <Device_Init+0x370>)
 800b63a:	4b58      	ldr	r3, [pc, #352]	@ (800b79c <Device_Init+0x330>)
 800b63c:	0019      	movs	r1, r3
 800b63e:	2001      	movs	r0, #1
 800b640:	f006 f90c 	bl	801185c <CreateLine>
      SensorProbe.MIC_Present = false;
 800b644:	4b56      	ldr	r3, [pc, #344]	@ (800b7a0 <Device_Init+0x334>)
 800b646:	2200      	movs	r2, #0
 800b648:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800b64a:	4b56      	ldr	r3, [pc, #344]	@ (800b7a4 <Device_Init+0x338>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	70da      	strb	r2, [r3, #3]
 800b650:	e00b      	b.n	800b66a <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800b652:	4b53      	ldr	r3, [pc, #332]	@ (800b7a0 <Device_Init+0x334>)
 800b654:	2201      	movs	r2, #1
 800b656:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800b658:	4b52      	ldr	r3, [pc, #328]	@ (800b7a4 <Device_Init+0x338>)
 800b65a:	2201      	movs	r2, #1
 800b65c:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800b65e:	4a60      	ldr	r2, [pc, #384]	@ (800b7e0 <Device_Init+0x374>)
 800b660:	4b52      	ldr	r3, [pc, #328]	@ (800b7ac <Device_Init+0x340>)
 800b662:	0019      	movs	r1, r3
 800b664:	2003      	movs	r0, #3
 800b666:	f006 f8f9 	bl	801185c <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800b66a:	f000 ff17 	bl	800c49c <probe_sen5x>
 800b66e:	1e03      	subs	r3, r0, #0
 800b670:	d122      	bne.n	800b6b8 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800b672:	4a5c      	ldr	r2, [pc, #368]	@ (800b7e4 <Device_Init+0x378>)
 800b674:	4b4d      	ldr	r3, [pc, #308]	@ (800b7ac <Device_Init+0x340>)
 800b676:	0019      	movs	r1, r3
 800b678:	2003      	movs	r0, #3
 800b67a:	f006 f8ef 	bl	801185c <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800b67e:	4b48      	ldr	r3, [pc, #288]	@ (800b7a0 <Device_Init+0x334>)
 800b680:	2201      	movs	r2, #1
 800b682:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800b684:	4b47      	ldr	r3, [pc, #284]	@ (800b7a4 <Device_Init+0x338>)
 800b686:	2201      	movs	r2, #1
 800b688:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800b68a:	4b57      	ldr	r3, [pc, #348]	@ (800b7e8 <Device_Init+0x37c>)
 800b68c:	791b      	ldrb	r3, [r3, #4]
 800b68e:	2b34      	cmp	r3, #52	@ 0x34
 800b690:	d003      	beq.n	800b69a <Device_Init+0x22e>
 800b692:	4b55      	ldr	r3, [pc, #340]	@ (800b7e8 <Device_Init+0x37c>)
 800b694:	791b      	ldrb	r3, [r3, #4]
 800b696:	2b35      	cmp	r3, #53	@ 0x35
 800b698:	d11c      	bne.n	800b6d4 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800b69a:	4a54      	ldr	r2, [pc, #336]	@ (800b7ec <Device_Init+0x380>)
 800b69c:	4b4e      	ldr	r3, [pc, #312]	@ (800b7d8 <Device_Init+0x36c>)
 800b69e:	0019      	movs	r1, r3
 800b6a0:	2002      	movs	r0, #2
 800b6a2:	f006 f8db 	bl	801185c <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800b6a6:	4b3f      	ldr	r3, [pc, #252]	@ (800b7a4 <Device_Init+0x338>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800b6ac:	4b3c      	ldr	r3, [pc, #240]	@ (800b7a0 <Device_Init+0x334>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800b6b2:	f003 fd5f 	bl	800f174 <SGP_SoftReset>
 800b6b6:	e00d      	b.n	800b6d4 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800b6b8:	f000 feba 	bl	800c430 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800b6bc:	4a4c      	ldr	r2, [pc, #304]	@ (800b7f0 <Device_Init+0x384>)
 800b6be:	4b3b      	ldr	r3, [pc, #236]	@ (800b7ac <Device_Init+0x340>)
 800b6c0:	0019      	movs	r1, r3
 800b6c2:	2003      	movs	r0, #3
 800b6c4:	f006 f8ca 	bl	801185c <CreateLine>
    SensorProbe.PM_Present = false;
 800b6c8:	4b35      	ldr	r3, [pc, #212]	@ (800b7a0 <Device_Init+0x334>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800b6ce:	4b35      	ldr	r3, [pc, #212]	@ (800b7a4 <Device_Init+0x338>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800b6d4:	4b32      	ldr	r3, [pc, #200]	@ (800b7a0 <Device_Init+0x334>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <Device_Init+0x274>
 800b6dc:	4b45      	ldr	r3, [pc, #276]	@ (800b7f4 <Device_Init+0x388>)
 800b6de:	e000      	b.n	800b6e2 <Device_Init+0x276>
 800b6e0:	4b45      	ldr	r3, [pc, #276]	@ (800b7f8 <Device_Init+0x38c>)
 800b6e2:	4a46      	ldr	r2, [pc, #280]	@ (800b7fc <Device_Init+0x390>)
 800b6e4:	493c      	ldr	r1, [pc, #240]	@ (800b7d8 <Device_Init+0x36c>)
 800b6e6:	2002      	movs	r0, #2
 800b6e8:	f006 f8b8 	bl	801185c <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800b6ec:	4b2c      	ldr	r3, [pc, #176]	@ (800b7a0 <Device_Init+0x334>)
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <Device_Init+0x28c>
 800b6f4:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f4 <Device_Init+0x388>)
 800b6f6:	e000      	b.n	800b6fa <Device_Init+0x28e>
 800b6f8:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f8 <Device_Init+0x38c>)
 800b6fa:	4a41      	ldr	r2, [pc, #260]	@ (800b800 <Device_Init+0x394>)
 800b6fc:	4936      	ldr	r1, [pc, #216]	@ (800b7d8 <Device_Init+0x36c>)
 800b6fe:	2002      	movs	r0, #2
 800b700:	f006 f8ac 	bl	801185c <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800b704:	4b26      	ldr	r3, [pc, #152]	@ (800b7a0 <Device_Init+0x334>)
 800b706:	789b      	ldrb	r3, [r3, #2]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <Device_Init+0x2a4>
 800b70c:	4b39      	ldr	r3, [pc, #228]	@ (800b7f4 <Device_Init+0x388>)
 800b70e:	e000      	b.n	800b712 <Device_Init+0x2a6>
 800b710:	4b39      	ldr	r3, [pc, #228]	@ (800b7f8 <Device_Init+0x38c>)
 800b712:	4a3c      	ldr	r2, [pc, #240]	@ (800b804 <Device_Init+0x398>)
 800b714:	4930      	ldr	r1, [pc, #192]	@ (800b7d8 <Device_Init+0x36c>)
 800b716:	2002      	movs	r0, #2
 800b718:	f006 f8a0 	bl	801185c <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800b71c:	4b20      	ldr	r3, [pc, #128]	@ (800b7a0 <Device_Init+0x334>)
 800b71e:	791b      	ldrb	r3, [r3, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <Device_Init+0x2bc>
 800b724:	4b33      	ldr	r3, [pc, #204]	@ (800b7f4 <Device_Init+0x388>)
 800b726:	e000      	b.n	800b72a <Device_Init+0x2be>
 800b728:	4b33      	ldr	r3, [pc, #204]	@ (800b7f8 <Device_Init+0x38c>)
 800b72a:	4a37      	ldr	r2, [pc, #220]	@ (800b808 <Device_Init+0x39c>)
 800b72c:	492a      	ldr	r1, [pc, #168]	@ (800b7d8 <Device_Init+0x36c>)
 800b72e:	2002      	movs	r0, #2
 800b730:	f006 f894 	bl	801185c <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800b734:	4b1a      	ldr	r3, [pc, #104]	@ (800b7a0 <Device_Init+0x334>)
 800b736:	78db      	ldrb	r3, [r3, #3]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <Device_Init+0x2d4>
 800b73c:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f4 <Device_Init+0x388>)
 800b73e:	e000      	b.n	800b742 <Device_Init+0x2d6>
 800b740:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f8 <Device_Init+0x38c>)
 800b742:	4a32      	ldr	r2, [pc, #200]	@ (800b80c <Device_Init+0x3a0>)
 800b744:	4924      	ldr	r1, [pc, #144]	@ (800b7d8 <Device_Init+0x36c>)
 800b746:	2002      	movs	r0, #2
 800b748:	f006 f888 	bl	801185c <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800b74c:	4b14      	ldr	r3, [pc, #80]	@ (800b7a0 <Device_Init+0x334>)
 800b74e:	795b      	ldrb	r3, [r3, #5]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <Device_Init+0x2ec>
 800b754:	4b27      	ldr	r3, [pc, #156]	@ (800b7f4 <Device_Init+0x388>)
 800b756:	e000      	b.n	800b75a <Device_Init+0x2ee>
 800b758:	4b27      	ldr	r3, [pc, #156]	@ (800b7f8 <Device_Init+0x38c>)
 800b75a:	4a2d      	ldr	r2, [pc, #180]	@ (800b810 <Device_Init+0x3a4>)
 800b75c:	491e      	ldr	r1, [pc, #120]	@ (800b7d8 <Device_Init+0x36c>)
 800b75e:	2002      	movs	r0, #2
 800b760:	f006 f87c 	bl	801185c <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800b764:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a0 <Device_Init+0x334>)
 800b766:	799b      	ldrb	r3, [r3, #6]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <Device_Init+0x304>
 800b76c:	4b21      	ldr	r3, [pc, #132]	@ (800b7f4 <Device_Init+0x388>)
 800b76e:	e000      	b.n	800b772 <Device_Init+0x306>
 800b770:	4b21      	ldr	r3, [pc, #132]	@ (800b7f8 <Device_Init+0x38c>)
 800b772:	4a28      	ldr	r2, [pc, #160]	@ (800b814 <Device_Init+0x3a8>)
 800b774:	4918      	ldr	r1, [pc, #96]	@ (800b7d8 <Device_Init+0x36c>)
 800b776:	2002      	movs	r0, #2
 800b778:	f006 f870 	bl	801185c <CreateLine>
  ESP_Init(espUart);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	0018      	movs	r0, r3
 800b780:	f7f9 f826 	bl	80047d0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800b784:	4a24      	ldr	r2, [pc, #144]	@ (800b818 <Device_Init+0x3ac>)
 800b786:	4b09      	ldr	r3, [pc, #36]	@ (800b7ac <Device_Init+0x340>)
 800b788:	0019      	movs	r1, r3
 800b78a:	2003      	movs	r0, #3
 800b78c:	f006 f866 	bl	801185c <CreateLine>
}
 800b790:	46c0      	nop			@ (mov r8, r8)
 800b792:	46bd      	mov	sp, r7
 800b794:	b004      	add	sp, #16
 800b796:	bd80      	pop	{r7, pc}
 800b798:	08029b80 	.word	0x08029b80
 800b79c:	08029bb0 	.word	0x08029bb0
 800b7a0:	20000e04 	.word	0x20000e04
 800b7a4:	20000dfc 	.word	0x20000dfc
 800b7a8:	08029bb4 	.word	0x08029bb4
 800b7ac:	08029b7c 	.word	0x08029b7c
 800b7b0:	08029be0 	.word	0x08029be0
 800b7b4:	08029c14 	.word	0x08029c14
 800b7b8:	08029c44 	.word	0x08029c44
 800b7bc:	08029c60 	.word	0x08029c60
 800b7c0:	08029c78 	.word	0x08029c78
 800b7c4:	08029c94 	.word	0x08029c94
 800b7c8:	08029cac 	.word	0x08029cac
 800b7cc:	08029ce0 	.word	0x08029ce0
 800b7d0:	50000400 	.word	0x50000400
 800b7d4:	08029d14 	.word	0x08029d14
 800b7d8:	08029d38 	.word	0x08029d38
 800b7dc:	08029d3c 	.word	0x08029d3c
 800b7e0:	08029d68 	.word	0x08029d68
 800b7e4:	08029d94 	.word	0x08029d94
 800b7e8:	20000ea0 	.word	0x20000ea0
 800b7ec:	08029dac 	.word	0x08029dac
 800b7f0:	08029dfc 	.word	0x08029dfc
 800b7f4:	08029e20 	.word	0x08029e20
 800b7f8:	08029e24 	.word	0x08029e24
 800b7fc:	08029e28 	.word	0x08029e28
 800b800:	08029e44 	.word	0x08029e44
 800b804:	08029e60 	.word	0x08029e60
 800b808:	08029e80 	.word	0x08029e80
 800b80c:	08029ea0 	.word	0x08029ea0
 800b810:	08029ec0 	.word	0x08029ec0
 800b814:	08029edc 	.word	0x08029edc
 800b818:	08029ef8 	.word	0x08029ef8

0800b81c <Device_Test>:

void Device_Test(){
 800b81c:	b580      	push	{r7, lr}
 800b81e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800b820:	4b34      	ldr	r3, [pc, #208]	@ (800b8f4 <Device_Test+0xd8>)
 800b822:	799b      	ldrb	r3, [r3, #6]
 800b824:	2201      	movs	r2, #1
 800b826:	4053      	eors	r3, r2
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d027      	beq.n	800b87e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800b82e:	f000 fb65 	bl	800befc <MIC_TestMeasurementDone>
 800b832:	1e03      	subs	r3, r0, #0
 800b834:	d011      	beq.n	800b85a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800b836:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f4 <Device_Test+0xd8>)
 800b838:	2201      	movs	r2, #1
 800b83a:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800b83c:	4b2e      	ldr	r3, [pc, #184]	@ (800b8f8 <Device_Test+0xdc>)
 800b83e:	2201      	movs	r2, #1
 800b840:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800b842:	f004 fd5b 	bl	80102fc <Calculate_LED_ON>
 800b846:	0003      	movs	r3, r0
 800b848:	0019      	movs	r1, r3
 800b84a:	23fa      	movs	r3, #250	@ 0xfa
 800b84c:	011a      	lsls	r2, r3, #4
 800b84e:	23fa      	movs	r3, #250	@ 0xfa
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	0018      	movs	r0, r3
 800b854:	f004 fd9a 	bl	801038c <SetStatusLED>
 800b858:	e011      	b.n	800b87e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800b85a:	f003 fea5 	bl	800f5a8 <micSettlingComplete>
 800b85e:	1e03      	subs	r3, r0, #0
 800b860:	d00d      	beq.n	800b87e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800b862:	4b25      	ldr	r3, [pc, #148]	@ (800b8f8 <Device_Test+0xdc>)
 800b864:	2201      	movs	r2, #1
 800b866:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800b868:	f004 fd48 	bl	80102fc <Calculate_LED_ON>
 800b86c:	0003      	movs	r3, r0
 800b86e:	0018      	movs	r0, r3
 800b870:	23fa      	movs	r3, #250	@ 0xfa
 800b872:	011a      	lsls	r2, r3, #4
 800b874:	23fa      	movs	r3, #250	@ 0xfa
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	0019      	movs	r1, r3
 800b87a:	f004 fd87 	bl	801038c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800b87e:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f4 <Device_Test+0xd8>)
 800b880:	79db      	ldrb	r3, [r3, #7]
 800b882:	2201      	movs	r2, #1
 800b884:	4053      	eors	r3, r2
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800b88c:	f7fa fd58 	bl	8006340 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800b890:	4b18      	ldr	r3, [pc, #96]	@ (800b8f4 <Device_Test+0xd8>)
 800b892:	79db      	ldrb	r3, [r3, #7]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <Device_Test+0x84>
 800b898:	4b16      	ldr	r3, [pc, #88]	@ (800b8f4 <Device_Test+0xd8>)
 800b89a:	799b      	ldrb	r3, [r3, #6]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <Device_Test+0x92>
 800b8a0:	4b16      	ldr	r3, [pc, #88]	@ (800b8fc <Device_Test+0xe0>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	0018      	movs	r0, r3
 800b8a6:	f005 ff83 	bl	80117b0 <TimestampIsReached>
 800b8aa:	1e03      	subs	r3, r0, #0
 800b8ac:	d01f      	beq.n	800b8ee <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800b8ae:	4b11      	ldr	r3, [pc, #68]	@ (800b8f4 <Device_Test+0xd8>)
 800b8b0:	79db      	ldrb	r3, [r3, #7]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d001      	beq.n	800b8ba <Device_Test+0x9e>
 800b8b6:	4b12      	ldr	r3, [pc, #72]	@ (800b900 <Device_Test+0xe4>)
 800b8b8:	e000      	b.n	800b8bc <Device_Test+0xa0>
 800b8ba:	4b12      	ldr	r3, [pc, #72]	@ (800b904 <Device_Test+0xe8>)
 800b8bc:	4a12      	ldr	r2, [pc, #72]	@ (800b908 <Device_Test+0xec>)
 800b8be:	4913      	ldr	r1, [pc, #76]	@ (800b90c <Device_Test+0xf0>)
 800b8c0:	2002      	movs	r0, #2
 800b8c2:	f005 ffcb 	bl	801185c <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f4 <Device_Test+0xd8>)
 800b8c8:	799b      	ldrb	r3, [r3, #6]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <Device_Test+0xb6>
 800b8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b900 <Device_Test+0xe4>)
 800b8d0:	e000      	b.n	800b8d4 <Device_Test+0xb8>
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <Device_Test+0xe8>)
 800b8d4:	4a0e      	ldr	r2, [pc, #56]	@ (800b910 <Device_Test+0xf4>)
 800b8d6:	490d      	ldr	r1, [pc, #52]	@ (800b90c <Device_Test+0xf0>)
 800b8d8:	2002      	movs	r0, #2
 800b8da:	f005 ffbf 	bl	801185c <CreateLine>
    Info("Test completed");
 800b8de:	4a0d      	ldr	r2, [pc, #52]	@ (800b914 <Device_Test+0xf8>)
 800b8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b90c <Device_Test+0xf0>)
 800b8e2:	0019      	movs	r1, r3
 800b8e4:	2002      	movs	r0, #2
 800b8e6:	f005 ffb9 	bl	801185c <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800b8ea:	f7ff f92f 	bl	800ab4c <SetTestDone>
  }
}
 800b8ee:	46c0      	nop			@ (mov r8, r8)
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20000e04 	.word	0x20000e04
 800b8f8:	20000dfc 	.word	0x20000dfc
 800b8fc:	20000df4 	.word	0x20000df4
 800b900:	08029f1c 	.word	0x08029f1c
 800b904:	08029f24 	.word	0x08029f24
 800b908:	08029f2c 	.word	0x08029f2c
 800b90c:	08029d38 	.word	0x08029d38
 800b910:	08029f40 	.word	0x08029f40
 800b914:	08029f54 	.word	0x08029f54

0800b918 <AllDevicesReady>:

bool AllDevicesReady() {
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800b91c:	4b40      	ldr	r3, [pc, #256]	@ (800ba20 <AllDevicesReady+0x108>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	0018      	movs	r0, r3
 800b922:	f005 ff45 	bl	80117b0 <TimestampIsReached>
 800b926:	1e03      	subs	r3, r0, #0
 800b928:	d100      	bne.n	800b92c <AllDevicesReady+0x14>
 800b92a:	e075      	b.n	800ba18 <AllDevicesReady+0x100>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800b92c:	4b3d      	ldr	r3, [pc, #244]	@ (800ba24 <AllDevicesReady+0x10c>)
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b06      	cmp	r3, #6
 800b932:	d102      	bne.n	800b93a <AllDevicesReady+0x22>
      Sensor.HT_measurementEnabled = false;
 800b934:	4b3c      	ldr	r3, [pc, #240]	@ (800ba28 <AllDevicesReady+0x110>)
 800b936:	2200      	movs	r2, #0
 800b938:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800b93a:	4b3c      	ldr	r3, [pc, #240]	@ (800ba2c <AllDevicesReady+0x114>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	2b05      	cmp	r3, #5
 800b940:	d006      	beq.n	800b950 <AllDevicesReady+0x38>
 800b942:	4b3b      	ldr	r3, [pc, #236]	@ (800ba30 <AllDevicesReady+0x118>)
 800b944:	789b      	ldrb	r3, [r3, #2]
 800b946:	2201      	movs	r2, #1
 800b948:	4053      	eors	r3, r2
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <AllDevicesReady+0x3e>
      Sensor.AHT_measurementEnabled = false;
 800b950:	4b35      	ldr	r3, [pc, #212]	@ (800ba28 <AllDevicesReady+0x110>)
 800b952:	2200      	movs	r2, #0
 800b954:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800b956:	4b37      	ldr	r3, [pc, #220]	@ (800ba34 <AllDevicesReady+0x11c>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b08      	cmp	r3, #8
 800b95c:	d006      	beq.n	800b96c <AllDevicesReady+0x54>
 800b95e:	4b34      	ldr	r3, [pc, #208]	@ (800ba30 <AllDevicesReady+0x118>)
 800b960:	791b      	ldrb	r3, [r3, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	4053      	eors	r3, r2
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <AllDevicesReady+0x5a>
      Sensor.BMP_measurementEnabled = false;
 800b96c:	4b2e      	ldr	r3, [pc, #184]	@ (800ba28 <AllDevicesReady+0x110>)
 800b96e:	2200      	movs	r2, #0
 800b970:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800b972:	4b31      	ldr	r3, [pc, #196]	@ (800ba38 <AllDevicesReady+0x120>)
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	2b08      	cmp	r3, #8
 800b978:	d006      	beq.n	800b988 <AllDevicesReady+0x70>
 800b97a:	4b2d      	ldr	r3, [pc, #180]	@ (800ba30 <AllDevicesReady+0x118>)
 800b97c:	78db      	ldrb	r3, [r3, #3]
 800b97e:	2201      	movs	r2, #1
 800b980:	4053      	eors	r3, r2
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <AllDevicesReady+0x76>
      Sensor.ENS_measurementEnabled = false;
 800b988:	4b27      	ldr	r3, [pc, #156]	@ (800ba28 <AllDevicesReady+0x110>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800b98e:	4b2b      	ldr	r3, [pc, #172]	@ (800ba3c <AllDevicesReady+0x124>)
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b07      	cmp	r3, #7
 800b994:	d006      	beq.n	800b9a4 <AllDevicesReady+0x8c>
 800b996:	4b26      	ldr	r3, [pc, #152]	@ (800ba30 <AllDevicesReady+0x118>)
 800b998:	7a1b      	ldrb	r3, [r3, #8]
 800b99a:	2201      	movs	r2, #1
 800b99c:	4053      	eors	r3, r2
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <AllDevicesReady+0x92>
      Sensor.VOC_measurementEnabled = false;
 800b9a4:	4b20      	ldr	r3, [pc, #128]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800b9aa:	4b25      	ldr	r3, [pc, #148]	@ (800ba40 <AllDevicesReady+0x128>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d102      	bne.n	800b9b8 <AllDevicesReady+0xa0>
      Sensor.PM_measurementEnabled = false;
 800b9b2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800b9b8:	4b22      	ldr	r3, [pc, #136]	@ (800ba44 <AllDevicesReady+0x12c>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d102      	bne.n	800b9c6 <AllDevicesReady+0xae>
      Sensor.MIC_measurementEnabled = false;
 800b9c0:	4b19      	ldr	r3, [pc, #100]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800b9c6:	4b20      	ldr	r3, [pc, #128]	@ (800ba48 <AllDevicesReady+0x130>)
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b09      	cmp	r3, #9
 800b9cc:	d124      	bne.n	800ba18 <AllDevicesReady+0x100>
      return !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800b9ce:	4b16      	ldr	r3, [pc, #88]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9d0:	781a      	ldrb	r2, [r3, #0]
 800b9d2:	4b15      	ldr	r3, [pc, #84]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	4b13      	ldr	r3, [pc, #76]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9dc:	791b      	ldrb	r3, [r3, #4]
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	4b11      	ldr	r3, [pc, #68]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9e4:	795b      	ldrb	r3, [r3, #5]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800b9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9ec:	799b      	ldrb	r3, [r3, #6]
      return !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800b9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9f4:	789b      	ldrb	r3, [r3, #2]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	b2da      	uxtb	r2, r3
 800b9fa:	4b0b      	ldr	r3, [pc, #44]	@ (800ba28 <AllDevicesReady+0x110>)
 800b9fc:	78db      	ldrb	r3, [r3, #3]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	1e5a      	subs	r2, r3, #1
 800ba04:	4193      	sbcs	r3, r2
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2201      	movs	r2, #1
 800ba0a:	4053      	eors	r3, r2
 800ba0c:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800ba0e:	1c1a      	adds	r2, r3, #0
 800ba10:	2301      	movs	r3, #1
 800ba12:	4013      	ands	r3, r2
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	e000      	b.n	800ba1a <AllDevicesReady+0x102>
    }
  }
  return false;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20000df4 	.word	0x20000df4
 800ba24:	20000e0f 	.word	0x20000e0f
 800ba28:	20000dfc 	.word	0x20000dfc
 800ba2c:	20000e10 	.word	0x20000e10
 800ba30:	20000e04 	.word	0x20000e04
 800ba34:	20000e11 	.word	0x20000e11
 800ba38:	20000e12 	.word	0x20000e12
 800ba3c:	20000e0e 	.word	0x20000e0e
 800ba40:	2000009d 	.word	0x2000009d
 800ba44:	20000de0 	.word	0x20000de0
 800ba48:	20000de1 	.word	0x20000de1

0800ba4c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800ba50:	4b1b      	ldr	r3, [pc, #108]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800ba58:	4b1a      	ldr	r3, [pc, #104]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800ba5e:	4b18      	ldr	r3, [pc, #96]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800ba60:	789b      	ldrb	r3, [r3, #2]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800ba66:	4b17      	ldr	r3, [pc, #92]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800ba68:	2201      	movs	r2, #1
 800ba6a:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800ba6c:	4b14      	ldr	r3, [pc, #80]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800ba6e:	791b      	ldrb	r3, [r3, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800ba74:	4b13      	ldr	r3, [pc, #76]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800ba76:	2201      	movs	r2, #1
 800ba78:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800ba7a:	4b11      	ldr	r3, [pc, #68]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800ba7c:	78db      	ldrb	r3, [r3, #3]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800ba82:	4b10      	ldr	r3, [pc, #64]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800ba88:	4b0d      	ldr	r3, [pc, #52]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800ba8a:	785b      	ldrb	r3, [r3, #1]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d006      	beq.n	800ba9e <EnabledConnectedDevices+0x52>
 800ba90:	4b0b      	ldr	r3, [pc, #44]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800ba92:	7a1b      	ldrb	r3, [r3, #8]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800ba98:	4b0a      	ldr	r3, [pc, #40]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800ba9e:	4b08      	ldr	r3, [pc, #32]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800baa0:	795b      	ldrb	r3, [r3, #5]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800baa6:	4b07      	ldr	r3, [pc, #28]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800baa8:	2201      	movs	r2, #1
 800baaa:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800baac:	4b04      	ldr	r3, [pc, #16]	@ (800bac0 <EnabledConnectedDevices+0x74>)
 800baae:	799b      	ldrb	r3, [r3, #6]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800bab4:	4b03      	ldr	r3, [pc, #12]	@ (800bac4 <EnabledConnectedDevices+0x78>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	70da      	strb	r2, [r3, #3]
  }
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	20000e04 	.word	0x20000e04
 800bac4:	20000dfc 	.word	0x20000dfc

0800bac8 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800bacc:	4a0e      	ldr	r2, [pc, #56]	@ (800bb08 <DisableConnectedDevices+0x40>)
 800bace:	4b0f      	ldr	r3, [pc, #60]	@ (800bb0c <DisableConnectedDevices+0x44>)
 800bad0:	0019      	movs	r1, r3
 800bad2:	2003      	movs	r0, #3
 800bad4:	f005 fec2 	bl	801185c <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800bad8:	4b0d      	ldr	r3, [pc, #52]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800bade:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800bae4:	4b0a      	ldr	r3, [pc, #40]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800bae6:	2200      	movs	r2, #0
 800bae8:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800baea:	4b09      	ldr	r3, [pc, #36]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800baec:	2200      	movs	r2, #0
 800baee:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800baf6:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800bafc:	4b04      	ldr	r3, [pc, #16]	@ (800bb10 <DisableConnectedDevices+0x48>)
 800bafe:	2200      	movs	r2, #0
 800bb00:	70da      	strb	r2, [r3, #3]
}
 800bb02:	46c0      	nop			@ (mov r8, r8)
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	08029f64 	.word	0x08029f64
 800bb0c:	08029b7c 	.word	0x08029b7c
 800bb10:	20000dfc 	.word	0x20000dfc

0800bb14 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	0002      	movs	r2, r0
 800bb1c:	1dfb      	adds	r3, r7, #7
 800bb1e:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800bb20:	4b03      	ldr	r3, [pc, #12]	@ (800bb30 <setSensorLock+0x1c>)
 800bb22:	1dfa      	adds	r2, r7, #7
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	701a      	strb	r2, [r3, #0]
}
 800bb28:	46c0      	nop			@ (mov r8, r8)
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	b002      	add	sp, #8
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20000e0d 	.word	0x20000e0d

0800bb34 <getSensorLock>:

uint8_t getSensorLock() {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800bb38:	4b02      	ldr	r3, [pc, #8]	@ (800bb44 <getSensorLock+0x10>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
}
 800bb3c:	0018      	movs	r0, r3
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	46c0      	nop			@ (mov r8, r8)
 800bb44:	20000e0d 	.word	0x20000e0d

0800bb48 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800bb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb8 <UpkeepI2Csensors+0x70>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800bb54:	f006 f9a6 	bl	8011ea4 <HIDS_Upkeep>
 800bb58:	0003      	movs	r3, r0
 800bb5a:	001a      	movs	r2, r3
 800bb5c:	4b17      	ldr	r3, [pc, #92]	@ (800bbbc <UpkeepI2Csensors+0x74>)
 800bb5e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800bb60:	4b15      	ldr	r3, [pc, #84]	@ (800bbb8 <UpkeepI2Csensors+0x70>)
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d005      	beq.n	800bb74 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800bb68:	f003 fb2a 	bl	800f1c0 <SGP_Upkeep>
 800bb6c:	0003      	movs	r3, r0
 800bb6e:	001a      	movs	r2, r3
 800bb70:	4b13      	ldr	r3, [pc, #76]	@ (800bbc0 <UpkeepI2Csensors+0x78>)
 800bb72:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800bb74:	4b10      	ldr	r3, [pc, #64]	@ (800bbb8 <UpkeepI2Csensors+0x70>)
 800bb76:	791b      	ldrb	r3, [r3, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800bb7c:	f7fd fbaa 	bl	80092d4 <AHT_Upkeep>
 800bb80:	0003      	movs	r3, r0
 800bb82:	001a      	movs	r2, r3
 800bb84:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc4 <UpkeepI2Csensors+0x7c>)
 800bb86:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800bb88:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb8 <UpkeepI2Csensors+0x70>)
 800bb8a:	795b      	ldrb	r3, [r3, #5]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d005      	beq.n	800bb9c <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800bb90:	f7fe f916 	bl	8009dc0 <BMP_Upkeep>
 800bb94:	0003      	movs	r3, r0
 800bb96:	001a      	movs	r2, r3
 800bb98:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc8 <UpkeepI2Csensors+0x80>)
 800bb9a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800bb9c:	4b06      	ldr	r3, [pc, #24]	@ (800bbb8 <UpkeepI2Csensors+0x70>)
 800bb9e:	799b      	ldrb	r3, [r3, #6]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800bba4:	f7f8 fa36 	bl	8004014 <ENS_Upkeep>
 800bba8:	0003      	movs	r3, r0
 800bbaa:	001a      	movs	r2, r3
 800bbac:	4b07      	ldr	r3, [pc, #28]	@ (800bbcc <UpkeepI2Csensors+0x84>)
 800bbae:	701a      	strb	r2, [r3, #0]
  }
}
 800bbb0:	46c0      	nop			@ (mov r8, r8)
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	46c0      	nop			@ (mov r8, r8)
 800bbb8:	20000dfc 	.word	0x20000dfc
 800bbbc:	20000e0f 	.word	0x20000e0f
 800bbc0:	20000e0e 	.word	0x20000e0e
 800bbc4:	20000e10 	.word	0x20000e10
 800bbc8:	20000e11 	.word	0x20000e11
 800bbcc:	20000e12 	.word	0x20000e12

0800bbd0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800bbd4:	4b02      	ldr	r3, [pc, #8]	@ (800bbe0 <ResetdBAmax+0x10>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
}
 800bbda:	46c0      	nop			@ (mov r8, r8)
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	20000e58 	.word	0x20000e58

0800bbe4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800bbec:	f006 fa82 	bl	80120f4 <HAL_GetTick>
 800bbf0:	0002      	movs	r2, r0
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	18d2      	adds	r2, r2, r3
 800bbf6:	4b03      	ldr	r3, [pc, #12]	@ (800bc04 <setMICTimeStamp+0x20>)
 800bbf8:	601a      	str	r2, [r3, #0]
}
 800bbfa:	46c0      	nop			@ (mov r8, r8)
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	b002      	add	sp, #8
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	46c0      	nop			@ (mov r8, r8)
 800bc04:	20000e60 	.word	0x20000e60

0800bc08 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  counter = 0;
 800bc0c:	4b05      	ldr	r3, [pc, #20]	@ (800bc24 <ResetDBACalculator+0x1c>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800bc12:	4b05      	ldr	r3, [pc, #20]	@ (800bc28 <ResetDBACalculator+0x20>)
 800bc14:	2201      	movs	r2, #1
 800bc16:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800bc18:	4b04      	ldr	r3, [pc, #16]	@ (800bc2c <ResetDBACalculator+0x24>)
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	701a      	strb	r2, [r3, #0]
}
 800bc1e:	46c0      	nop			@ (mov r8, r8)
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000e5c 	.word	0x20000e5c
 800bc28:	2000009c 	.word	0x2000009c
 800bc2c:	20000e5d 	.word	0x20000e5d

0800bc30 <MIC_Print>:

void MIC_Print(void) {
 800bc30:	b5b0      	push	{r4, r5, r7, lr}
 800bc32:	b08a      	sub	sp, #40	@ 0x28
 800bc34:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800bc36:	4b9f      	ldr	r3, [pc, #636]	@ (800beb4 <MIC_Print+0x284>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	4b9f      	ldr	r3, [pc, #636]	@ (800beb8 <MIC_Print+0x288>)
 800bc3c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800bc3e:	4b9f      	ldr	r3, [pc, #636]	@ (800bebc <MIC_Print+0x28c>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	001a      	movs	r2, r3
 800bc44:	4b9c      	ldr	r3, [pc, #624]	@ (800beb8 <MIC_Print+0x288>)
 800bc46:	6819      	ldr	r1, [r3, #0]
 800bc48:	4b9d      	ldr	r3, [pc, #628]	@ (800bec0 <MIC_Print+0x290>)
 800bc4a:	0092      	lsls	r2, r2, #2
 800bc4c:	50d1      	str	r1, [r2, r3]
  counter++;
 800bc4e:	4b9b      	ldr	r3, [pc, #620]	@ (800bebc <MIC_Print+0x28c>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	3301      	adds	r3, #1
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	4b99      	ldr	r3, [pc, #612]	@ (800bebc <MIC_Print+0x28c>)
 800bc58:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800bc5a:	4b98      	ldr	r3, [pc, #608]	@ (800bebc <MIC_Print+0x28c>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	2b09      	cmp	r3, #9
 800bc60:	d80b      	bhi.n	800bc7a <MIC_Print+0x4a>
 800bc62:	4b98      	ldr	r3, [pc, #608]	@ (800bec4 <MIC_Print+0x294>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2201      	movs	r2, #1
 800bc68:	4053      	eors	r3, r2
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d004      	beq.n	800bc7a <MIC_Print+0x4a>
    denominator = counter;
 800bc70:	4b92      	ldr	r3, [pc, #584]	@ (800bebc <MIC_Print+0x28c>)
 800bc72:	781a      	ldrb	r2, [r3, #0]
 800bc74:	4b94      	ldr	r3, [pc, #592]	@ (800bec8 <MIC_Print+0x298>)
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	e005      	b.n	800bc86 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800bc7a:	4b93      	ldr	r3, [pc, #588]	@ (800bec8 <MIC_Print+0x298>)
 800bc7c:	220a      	movs	r2, #10
 800bc7e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800bc80:	4b90      	ldr	r3, [pc, #576]	@ (800bec4 <MIC_Print+0x294>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800bc86:	4b91      	ldr	r3, [pc, #580]	@ (800becc <MIC_Print+0x29c>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800bc8c:	230f      	movs	r3, #15
 800bc8e:	18fb      	adds	r3, r7, r3
 800bc90:	2200      	movs	r2, #0
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	e042      	b.n	800bd1c <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800bc96:	240f      	movs	r4, #15
 800bc98:	193b      	adds	r3, r7, r4
 800bc9a:	781a      	ldrb	r2, [r3, #0]
 800bc9c:	4b88      	ldr	r3, [pc, #544]	@ (800bec0 <MIC_Print+0x290>)
 800bc9e:	0092      	lsls	r2, r2, #2
 800bca0:	58d2      	ldr	r2, [r2, r3]
 800bca2:	4b8a      	ldr	r3, [pc, #552]	@ (800becc <MIC_Print+0x29c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	1c19      	adds	r1, r3, #0
 800bca8:	1c10      	adds	r0, r2, #0
 800bcaa:	f7f4 fe09 	bl	80008c0 <__aeabi_fadd>
 800bcae:	1c03      	adds	r3, r0, #0
 800bcb0:	1c1a      	adds	r2, r3, #0
 800bcb2:	4b86      	ldr	r3, [pc, #536]	@ (800becc <MIC_Print+0x29c>)
 800bcb4:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800bcb6:	193b      	adds	r3, r7, r4
 800bcb8:	781a      	ldrb	r2, [r3, #0]
 800bcba:	4b81      	ldr	r3, [pc, #516]	@ (800bec0 <MIC_Print+0x290>)
 800bcbc:	0092      	lsls	r2, r2, #2
 800bcbe:	58d2      	ldr	r2, [r2, r3]
 800bcc0:	4b83      	ldr	r3, [pc, #524]	@ (800bed0 <MIC_Print+0x2a0>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	1c19      	adds	r1, r3, #0
 800bcc6:	1c10      	adds	r0, r2, #0
 800bcc8:	f7f4 fc46 	bl	8000558 <__aeabi_fcmpgt>
 800bccc:	1e03      	subs	r3, r0, #0
 800bcce:	d006      	beq.n	800bcde <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800bcd0:	193b      	adds	r3, r7, r4
 800bcd2:	781a      	ldrb	r2, [r3, #0]
 800bcd4:	4b7a      	ldr	r3, [pc, #488]	@ (800bec0 <MIC_Print+0x290>)
 800bcd6:	0092      	lsls	r2, r2, #2
 800bcd8:	58d2      	ldr	r2, [r2, r3]
 800bcda:	4b7d      	ldr	r3, [pc, #500]	@ (800bed0 <MIC_Print+0x2a0>)
 800bcdc:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800bcde:	4b7b      	ldr	r3, [pc, #492]	@ (800becc <MIC_Print+0x29c>)
 800bce0:	681c      	ldr	r4, [r3, #0]
 800bce2:	4b79      	ldr	r3, [pc, #484]	@ (800bec8 <MIC_Print+0x298>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	0018      	movs	r0, r3
 800bce8:	f7f5 fcbe 	bl	8001668 <__aeabi_ui2f>
 800bcec:	1c03      	adds	r3, r0, #0
 800bcee:	1c19      	adds	r1, r3, #0
 800bcf0:	1c20      	adds	r0, r4, #0
 800bcf2:	f7f4 ff6f 	bl	8000bd4 <__aeabi_fdiv>
 800bcf6:	1c03      	adds	r3, r0, #0
 800bcf8:	1c1a      	adds	r2, r3, #0
 800bcfa:	4b76      	ldr	r3, [pc, #472]	@ (800bed4 <MIC_Print+0x2a4>)
 800bcfc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800bcfe:	4b6e      	ldr	r3, [pc, #440]	@ (800beb8 <MIC_Print+0x288>)
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	4b73      	ldr	r3, [pc, #460]	@ (800bed0 <MIC_Print+0x2a0>)
 800bd04:	6819      	ldr	r1, [r3, #0]
 800bd06:	4b73      	ldr	r3, [pc, #460]	@ (800bed4 <MIC_Print+0x2a4>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	1c1a      	adds	r2, r3, #0
 800bd0c:	f7f8 fc7e 	bl	800460c <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800bd10:	210f      	movs	r1, #15
 800bd12:	187b      	adds	r3, r7, r1
 800bd14:	781a      	ldrb	r2, [r3, #0]
 800bd16:	187b      	adds	r3, r7, r1
 800bd18:	3201      	adds	r2, #1
 800bd1a:	701a      	strb	r2, [r3, #0]
 800bd1c:	4b6a      	ldr	r3, [pc, #424]	@ (800bec8 <MIC_Print+0x298>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	220f      	movs	r2, #15
 800bd22:	18ba      	adds	r2, r7, r2
 800bd24:	7812      	ldrb	r2, [r2, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d3b5      	bcc.n	800bc96 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800bd2a:	4b63      	ldr	r3, [pc, #396]	@ (800beb8 <MIC_Print+0x288>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	1c18      	adds	r0, r3, #0
 800bd30:	f7f7 fb98 	bl	8003464 <__aeabi_f2d>
 800bd34:	6038      	str	r0, [r7, #0]
 800bd36:	6079      	str	r1, [r7, #4]
 800bd38:	4b65      	ldr	r3, [pc, #404]	@ (800bed0 <MIC_Print+0x2a0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	1c18      	adds	r0, r3, #0
 800bd3e:	f7f7 fb91 	bl	8003464 <__aeabi_f2d>
 800bd42:	0004      	movs	r4, r0
 800bd44:	000d      	movs	r5, r1
 800bd46:	4b63      	ldr	r3, [pc, #396]	@ (800bed4 <MIC_Print+0x2a4>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	1c18      	adds	r0, r3, #0
 800bd4c:	f7f7 fb8a 	bl	8003464 <__aeabi_f2d>
 800bd50:	0002      	movs	r2, r0
 800bd52:	000b      	movs	r3, r1
 800bd54:	4960      	ldr	r1, [pc, #384]	@ (800bed8 <MIC_Print+0x2a8>)
 800bd56:	9204      	str	r2, [sp, #16]
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	9402      	str	r4, [sp, #8]
 800bd5c:	9503      	str	r5, [sp, #12]
 800bd5e:	4b5f      	ldr	r3, [pc, #380]	@ (800bedc <MIC_Print+0x2ac>)
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	0008      	movs	r0, r1
 800bd68:	f017 fd00 	bl	802376c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800bd6c:	4b53      	ldr	r3, [pc, #332]	@ (800bebc <MIC_Print+0x28c>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b0a      	cmp	r3, #10
 800bd72:	d902      	bls.n	800bd7a <MIC_Print+0x14a>
    counter = 0;
 800bd74:	4b51      	ldr	r3, [pc, #324]	@ (800bebc <MIC_Print+0x28c>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800bd7a:	4b4f      	ldr	r3, [pc, #316]	@ (800beb8 <MIC_Print+0x288>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4958      	ldr	r1, [pc, #352]	@ (800bee0 <MIC_Print+0x2b0>)
 800bd80:	1c18      	adds	r0, r3, #0
 800bd82:	f7f4 fbf3 	bl	800056c <__aeabi_fcmpge>
 800bd86:	1e03      	subs	r3, r0, #0
 800bd88:	d004      	beq.n	800bd94 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	2001      	movs	r0, #1
 800bd90:	f004 fb30 	bl	80103f4 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800bd94:	4b48      	ldr	r3, [pc, #288]	@ (800beb8 <MIC_Print+0x288>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4952      	ldr	r1, [pc, #328]	@ (800bee4 <MIC_Print+0x2b4>)
 800bd9a:	1c18      	adds	r0, r3, #0
 800bd9c:	f7f4 fbe6 	bl	800056c <__aeabi_fcmpge>
 800bda0:	1e03      	subs	r3, r0, #0
 800bda2:	d00c      	beq.n	800bdbe <MIC_Print+0x18e>
 800bda4:	4b44      	ldr	r3, [pc, #272]	@ (800beb8 <MIC_Print+0x288>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	494d      	ldr	r1, [pc, #308]	@ (800bee0 <MIC_Print+0x2b0>)
 800bdaa:	1c18      	adds	r0, r3, #0
 800bdac:	f7f4 fbc0 	bl	8000530 <__aeabi_fcmplt>
 800bdb0:	1e03      	subs	r3, r0, #0
 800bdb2:	d004      	beq.n	800bdbe <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	2001      	movs	r0, #1
 800bdba:	f004 fb1b 	bl	80103f4 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800bdbe:	4b3e      	ldr	r3, [pc, #248]	@ (800beb8 <MIC_Print+0x288>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4949      	ldr	r1, [pc, #292]	@ (800bee8 <MIC_Print+0x2b8>)
 800bdc4:	1c18      	adds	r0, r3, #0
 800bdc6:	f7f4 fbd1 	bl	800056c <__aeabi_fcmpge>
 800bdca:	1e03      	subs	r3, r0, #0
 800bdcc:	d00c      	beq.n	800bde8 <MIC_Print+0x1b8>
 800bdce:	4b3a      	ldr	r3, [pc, #232]	@ (800beb8 <MIC_Print+0x288>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4944      	ldr	r1, [pc, #272]	@ (800bee4 <MIC_Print+0x2b4>)
 800bdd4:	1c18      	adds	r0, r3, #0
 800bdd6:	f7f4 fbab 	bl	8000530 <__aeabi_fcmplt>
 800bdda:	1e03      	subs	r3, r0, #0
 800bddc:	d004      	beq.n	800bde8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800bdde:	2200      	movs	r2, #0
 800bde0:	2101      	movs	r1, #1
 800bde2:	2001      	movs	r0, #1
 800bde4:	f004 fb06 	bl	80103f4 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800bde8:	4b33      	ldr	r3, [pc, #204]	@ (800beb8 <MIC_Print+0x288>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	493f      	ldr	r1, [pc, #252]	@ (800beec <MIC_Print+0x2bc>)
 800bdee:	1c18      	adds	r0, r3, #0
 800bdf0:	f7f4 fbbc 	bl	800056c <__aeabi_fcmpge>
 800bdf4:	1e03      	subs	r3, r0, #0
 800bdf6:	d00c      	beq.n	800be12 <MIC_Print+0x1e2>
 800bdf8:	4b2f      	ldr	r3, [pc, #188]	@ (800beb8 <MIC_Print+0x288>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	493a      	ldr	r1, [pc, #232]	@ (800bee8 <MIC_Print+0x2b8>)
 800bdfe:	1c18      	adds	r0, r3, #0
 800be00:	f7f4 fb96 	bl	8000530 <__aeabi_fcmplt>
 800be04:	1e03      	subs	r3, r0, #0
 800be06:	d004      	beq.n	800be12 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800be08:	2200      	movs	r2, #0
 800be0a:	2101      	movs	r1, #1
 800be0c:	2000      	movs	r0, #0
 800be0e:	f004 faf1 	bl	80103f4 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800be12:	4b29      	ldr	r3, [pc, #164]	@ (800beb8 <MIC_Print+0x288>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4936      	ldr	r1, [pc, #216]	@ (800bef0 <MIC_Print+0x2c0>)
 800be18:	1c18      	adds	r0, r3, #0
 800be1a:	f7f4 fba7 	bl	800056c <__aeabi_fcmpge>
 800be1e:	1e03      	subs	r3, r0, #0
 800be20:	d00c      	beq.n	800be3c <MIC_Print+0x20c>
 800be22:	4b25      	ldr	r3, [pc, #148]	@ (800beb8 <MIC_Print+0x288>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4931      	ldr	r1, [pc, #196]	@ (800beec <MIC_Print+0x2bc>)
 800be28:	1c18      	adds	r0, r3, #0
 800be2a:	f7f4 fb81 	bl	8000530 <__aeabi_fcmplt>
 800be2e:	1e03      	subs	r3, r0, #0
 800be30:	d004      	beq.n	800be3c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800be32:	2201      	movs	r2, #1
 800be34:	2101      	movs	r1, #1
 800be36:	2000      	movs	r0, #0
 800be38:	f004 fadc 	bl	80103f4 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800be3c:	4b1e      	ldr	r3, [pc, #120]	@ (800beb8 <MIC_Print+0x288>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	492c      	ldr	r1, [pc, #176]	@ (800bef4 <MIC_Print+0x2c4>)
 800be42:	1c18      	adds	r0, r3, #0
 800be44:	f7f4 fb92 	bl	800056c <__aeabi_fcmpge>
 800be48:	1e03      	subs	r3, r0, #0
 800be4a:	d00c      	beq.n	800be66 <MIC_Print+0x236>
 800be4c:	4b1a      	ldr	r3, [pc, #104]	@ (800beb8 <MIC_Print+0x288>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4927      	ldr	r1, [pc, #156]	@ (800bef0 <MIC_Print+0x2c0>)
 800be52:	1c18      	adds	r0, r3, #0
 800be54:	f7f4 fb6c 	bl	8000530 <__aeabi_fcmplt>
 800be58:	1e03      	subs	r3, r0, #0
 800be5a:	d004      	beq.n	800be66 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800be5c:	2201      	movs	r2, #1
 800be5e:	2100      	movs	r1, #0
 800be60:	2000      	movs	r0, #0
 800be62:	f004 fac7 	bl	80103f4 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800be66:	4b14      	ldr	r3, [pc, #80]	@ (800beb8 <MIC_Print+0x288>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4923      	ldr	r1, [pc, #140]	@ (800bef8 <MIC_Print+0x2c8>)
 800be6c:	1c18      	adds	r0, r3, #0
 800be6e:	f7f4 fb7d 	bl	800056c <__aeabi_fcmpge>
 800be72:	1e03      	subs	r3, r0, #0
 800be74:	d00c      	beq.n	800be90 <MIC_Print+0x260>
 800be76:	4b10      	ldr	r3, [pc, #64]	@ (800beb8 <MIC_Print+0x288>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	491e      	ldr	r1, [pc, #120]	@ (800bef4 <MIC_Print+0x2c4>)
 800be7c:	1c18      	adds	r0, r3, #0
 800be7e:	f7f4 fb57 	bl	8000530 <__aeabi_fcmplt>
 800be82:	1e03      	subs	r3, r0, #0
 800be84:	d004      	beq.n	800be90 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800be86:	2201      	movs	r2, #1
 800be88:	2100      	movs	r1, #0
 800be8a:	2001      	movs	r0, #1
 800be8c:	f004 fab2 	bl	80103f4 <SetDBLED>
  }
  if(dBA < 35){//off
 800be90:	4b09      	ldr	r3, [pc, #36]	@ (800beb8 <MIC_Print+0x288>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4918      	ldr	r1, [pc, #96]	@ (800bef8 <MIC_Print+0x2c8>)
 800be96:	1c18      	adds	r0, r3, #0
 800be98:	f7f4 fb4a 	bl	8000530 <__aeabi_fcmplt>
 800be9c:	1e03      	subs	r3, r0, #0
 800be9e:	d100      	bne.n	800bea2 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800bea0:	e004      	b.n	800beac <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800bea2:	2200      	movs	r2, #0
 800bea4:	2100      	movs	r1, #0
 800bea6:	2000      	movs	r0, #0
 800bea8:	f004 faa4 	bl	80103f4 <SetDBLED>
}
 800beac:	46c0      	nop			@ (mov r8, r8)
 800beae:	46bd      	mov	sp, r7
 800beb0:	b004      	add	sp, #16
 800beb2:	bdb0      	pop	{r4, r5, r7, pc}
 800beb4:	20000e54 	.word	0x20000e54
 800beb8:	20000e20 	.word	0x20000e20
 800bebc:	20000e5c 	.word	0x20000e5c
 800bec0:	20000e24 	.word	0x20000e24
 800bec4:	20000e5d 	.word	0x20000e5d
 800bec8:	2000009c 	.word	0x2000009c
 800becc:	20000e50 	.word	0x20000e50
 800bed0:	20000e58 	.word	0x20000e58
 800bed4:	20000e4c 	.word	0x20000e4c
 800bed8:	08029f78 	.word	0x08029f78
 800bedc:	20000e14 	.word	0x20000e14
 800bee0:	42b40000 	.word	0x42b40000
 800bee4:	42a00000 	.word	0x42a00000
 800bee8:	428c0000 	.word	0x428c0000
 800beec:	42700000 	.word	0x42700000
 800bef0:	42480000 	.word	0x42480000
 800bef4:	42200000 	.word	0x42200000
 800bef8:	420c0000 	.word	0x420c0000

0800befc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800bf02:	4b11      	ldr	r3, [pc, #68]	@ (800bf48 <MIC_TestMeasurementDone+0x4c>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	4a10      	ldr	r2, [pc, #64]	@ (800bf4c <MIC_TestMeasurementDone+0x50>)
 800bf0a:	4911      	ldr	r1, [pc, #68]	@ (800bf50 <MIC_TestMeasurementDone+0x54>)
 800bf0c:	2002      	movs	r0, #2
 800bf0e:	f005 fca5 	bl	801185c <CreateLine>
  if(DataReady) {
 800bf12:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <MIC_TestMeasurementDone+0x4c>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d010      	beq.n	800bf3e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800bf1c:	1dfb      	adds	r3, r7, #7
 800bf1e:	4a0d      	ldr	r2, [pc, #52]	@ (800bf54 <MIC_TestMeasurementDone+0x58>)
 800bf20:	7812      	ldrb	r2, [r2, #0]
 800bf22:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800bf24:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <MIC_TestMeasurementDone+0x58>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	4a0b      	ldr	r2, [pc, #44]	@ (800bf58 <MIC_TestMeasurementDone+0x5c>)
 800bf2c:	4908      	ldr	r1, [pc, #32]	@ (800bf50 <MIC_TestMeasurementDone+0x54>)
 800bf2e:	2002      	movs	r0, #2
 800bf30:	f005 fc94 	bl	801185c <CreateLine>
    ResetMICIndicator();
 800bf34:	f004 fb4c 	bl	80105d0 <ResetMICIndicator>
    return Check;
 800bf38:	1dfb      	adds	r3, r7, #7
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	e000      	b.n	800bf40 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	0018      	movs	r0, r3
 800bf42:	46bd      	mov	sp, r7
 800bf44:	b002      	add	sp, #8
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20000f91 	.word	0x20000f91
 800bf4c:	08029fc0 	.word	0x08029fc0
 800bf50:	08029fec 	.word	0x08029fec
 800bf54:	20000f92 	.word	0x20000f92
 800bf58:	08029ff0 	.word	0x08029ff0

0800bf5c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800bf62:	4b78      	ldr	r3, [pc, #480]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d100      	bne.n	800bf6c <Mic_Upkeep+0x10>
 800bf6a:	e0b8      	b.n	800c0de <Mic_Upkeep+0x182>
 800bf6c:	dd00      	ble.n	800bf70 <Mic_Upkeep+0x14>
 800bf6e:	e0d3      	b.n	800c118 <Mic_Upkeep+0x1bc>
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d037      	beq.n	800bfe4 <Mic_Upkeep+0x88>
 800bf74:	dd00      	ble.n	800bf78 <Mic_Upkeep+0x1c>
 800bf76:	e0cf      	b.n	800c118 <Mic_Upkeep+0x1bc>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <Mic_Upkeep+0x26>
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d014      	beq.n	800bfaa <Mic_Upkeep+0x4e>
 800bf80:	e0ca      	b.n	800c118 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800bf82:	2001      	movs	r0, #1
 800bf84:	f003 fb34 	bl	800f5f0 <enableMicrophone>
 800bf88:	0003      	movs	r3, r0
 800bf8a:	001a      	movs	r2, r3
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	4053      	eors	r3, r2
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d005      	beq.n	800bfa2 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800bf96:	4a6c      	ldr	r2, [pc, #432]	@ (800c148 <Mic_Upkeep+0x1ec>)
 800bf98:	4b6c      	ldr	r3, [pc, #432]	@ (800c14c <Mic_Upkeep+0x1f0>)
 800bf9a:	217f      	movs	r1, #127	@ 0x7f
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f005 fd15 	bl	80119cc <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800bfa2:	4b68      	ldr	r3, [pc, #416]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	701a      	strb	r2, [r3, #0]
    break;
 800bfa8:	e0c5      	b.n	800c136 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800bfaa:	f003 fafd 	bl	800f5a8 <micSettlingComplete>
 800bfae:	1e03      	subs	r3, r0, #0
 800bfb0:	d105      	bne.n	800bfbe <Mic_Upkeep+0x62>
 800bfb2:	4b67      	ldr	r3, [pc, #412]	@ (800c150 <Mic_Upkeep+0x1f4>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d100      	bne.n	800bfbe <Mic_Upkeep+0x62>
 800bfbc:	e0b6      	b.n	800c12c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800bfbe:	f003 fb81 	bl	800f6c4 <startSPLcalculation>
 800bfc2:	0003      	movs	r3, r0
 800bfc4:	001a      	movs	r2, r3
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	4053      	eors	r3, r2
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d005      	beq.n	800bfdc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800bfd0:	4a5d      	ldr	r2, [pc, #372]	@ (800c148 <Mic_Upkeep+0x1ec>)
 800bfd2:	4b5e      	ldr	r3, [pc, #376]	@ (800c14c <Mic_Upkeep+0x1f0>)
 800bfd4:	2188      	movs	r1, #136	@ 0x88
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f005 fcf8 	bl	80119cc <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800bfdc:	4b59      	ldr	r3, [pc, #356]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800bfde:	2202      	movs	r2, #2
 800bfe0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bfe2:	e0a3      	b.n	800c12c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800bfe4:	4b5b      	ldr	r3, [pc, #364]	@ (800c154 <Mic_Upkeep+0x1f8>)
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	2101      	movs	r1, #1
 800bfea:	0018      	movs	r0, r3
 800bfec:	f003 f9be 	bl	800f36c <getSoundData>
 800bff0:	1e03      	subs	r3, r0, #0
 800bff2:	d100      	bne.n	800bff6 <Mic_Upkeep+0x9a>
 800bff4:	e09c      	b.n	800c130 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800bff6:	f003 fab7 	bl	800f568 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800bffa:	4b56      	ldr	r3, [pc, #344]	@ (800c154 <Mic_Upkeep+0x1f8>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	001a      	movs	r2, r3
 800c000:	4b54      	ldr	r3, [pc, #336]	@ (800c154 <Mic_Upkeep+0x1f8>)
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	4954      	ldr	r1, [pc, #336]	@ (800c158 <Mic_Upkeep+0x1fc>)
 800c006:	0038      	movs	r0, r7
 800c008:	f017 fc20 	bl	802384c <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800c00c:	4b51      	ldr	r3, [pc, #324]	@ (800c154 <Mic_Upkeep+0x1f8>)
 800c00e:	89db      	ldrh	r3, [r3, #14]
 800c010:	001a      	movs	r2, r3
 800c012:	4b50      	ldr	r3, [pc, #320]	@ (800c154 <Mic_Upkeep+0x1f8>)
 800c014:	7c1b      	ldrb	r3, [r3, #16]
 800c016:	4951      	ldr	r1, [pc, #324]	@ (800c15c <Mic_Upkeep+0x200>)
 800c018:	4851      	ldr	r0, [pc, #324]	@ (800c160 <Mic_Upkeep+0x204>)
 800c01a:	f017 fc17 	bl	802384c <siprintf>
      dBValue = atof(dBbuffer);
 800c01e:	003b      	movs	r3, r7
 800c020:	0018      	movs	r0, r3
 800c022:	f015 ffc3 	bl	8021fac <atof>
 800c026:	0002      	movs	r2, r0
 800c028:	000b      	movs	r3, r1
 800c02a:	0010      	movs	r0, r2
 800c02c:	0019      	movs	r1, r3
 800c02e:	f7f7 fa61 	bl	80034f4 <__aeabi_d2f>
 800c032:	1c02      	adds	r2, r0, #0
 800c034:	4b4b      	ldr	r3, [pc, #300]	@ (800c164 <Mic_Upkeep+0x208>)
 800c036:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800c038:	4b4a      	ldr	r3, [pc, #296]	@ (800c164 <Mic_Upkeep+0x208>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	494a      	ldr	r1, [pc, #296]	@ (800c168 <Mic_Upkeep+0x20c>)
 800c03e:	1c18      	adds	r0, r3, #0
 800c040:	f7f4 ffae 	bl	8000fa0 <__aeabi_fmul>
 800c044:	1c03      	adds	r3, r0, #0
 800c046:	1c18      	adds	r0, r3, #0
 800c048:	f7f7 fa0c 	bl	8003464 <__aeabi_f2d>
 800c04c:	2200      	movs	r2, #0
 800c04e:	4b47      	ldr	r3, [pc, #284]	@ (800c16c <Mic_Upkeep+0x210>)
 800c050:	f7f5 fb4c 	bl	80016ec <__aeabi_dadd>
 800c054:	0002      	movs	r2, r0
 800c056:	000b      	movs	r3, r1
 800c058:	0010      	movs	r0, r2
 800c05a:	0019      	movs	r1, r3
 800c05c:	f7f7 f974 	bl	8003348 <__aeabi_d2iz>
 800c060:	0003      	movs	r3, r0
 800c062:	0018      	movs	r0, r3
 800c064:	f7f7 f9ac 	bl	80033c0 <__aeabi_i2d>
 800c068:	2200      	movs	r2, #0
 800c06a:	4b41      	ldr	r3, [pc, #260]	@ (800c170 <Mic_Upkeep+0x214>)
 800c06c:	f7f5 fea2 	bl	8001db4 <__aeabi_ddiv>
 800c070:	0002      	movs	r2, r0
 800c072:	000b      	movs	r3, r1
 800c074:	0010      	movs	r0, r2
 800c076:	0019      	movs	r1, r3
 800c078:	f7f7 fa3c 	bl	80034f4 <__aeabi_d2f>
 800c07c:	1c02      	adds	r2, r0, #0
 800c07e:	4b39      	ldr	r3, [pc, #228]	@ (800c164 <Mic_Upkeep+0x208>)
 800c080:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800c082:	f7ff fdd5 	bl	800bc30 <MIC_Print>
      if (!startSPLcalculation()) {
 800c086:	f003 fb1d 	bl	800f6c4 <startSPLcalculation>
 800c08a:	0003      	movs	r3, r0
 800c08c:	001a      	movs	r2, r3
 800c08e:	2301      	movs	r3, #1
 800c090:	4053      	eors	r3, r2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800c098:	4a2b      	ldr	r2, [pc, #172]	@ (800c148 <Mic_Upkeep+0x1ec>)
 800c09a:	4b2c      	ldr	r3, [pc, #176]	@ (800c14c <Mic_Upkeep+0x1f0>)
 800c09c:	2198      	movs	r1, #152	@ 0x98
 800c09e:	0018      	movs	r0, r3
 800c0a0:	f005 fc94 	bl	80119cc <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	f003 faa3 	bl	800f5f0 <enableMicrophone>
 800c0aa:	0003      	movs	r3, r0
 800c0ac:	001a      	movs	r2, r3
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	4053      	eors	r3, r2
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d005      	beq.n	800c0c4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800c0b8:	4a23      	ldr	r2, [pc, #140]	@ (800c148 <Mic_Upkeep+0x1ec>)
 800c0ba:	4b24      	ldr	r3, [pc, #144]	@ (800c14c <Mic_Upkeep+0x1f0>)
 800c0bc:	219b      	movs	r1, #155	@ 0x9b
 800c0be:	0018      	movs	r0, r3
 800c0c0:	f005 fc84 	bl	80119cc <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800c0c4:	f006 f816 	bl	80120f4 <HAL_GetTick>
 800c0c8:	0003      	movs	r3, r0
 800c0ca:	4a2a      	ldr	r2, [pc, #168]	@ (800c174 <Mic_Upkeep+0x218>)
 800c0cc:	189a      	adds	r2, r3, r2
 800c0ce:	4b2a      	ldr	r3, [pc, #168]	@ (800c178 <Mic_Upkeep+0x21c>)
 800c0d0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800c0d2:	4b1c      	ldr	r3, [pc, #112]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800c0d4:	2203      	movs	r2, #3
 800c0d6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800c0d8:	f004 fa7a 	bl	80105d0 <ResetMICIndicator>
    }
    break;
 800c0dc:	e028      	b.n	800c130 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800c0de:	4b26      	ldr	r3, [pc, #152]	@ (800c178 <Mic_Upkeep+0x21c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	0018      	movs	r0, r3
 800c0e4:	f005 fb64 	bl	80117b0 <TimestampIsReached>
 800c0e8:	1e03      	subs	r3, r0, #0
 800c0ea:	d023      	beq.n	800c134 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800c0ec:	2001      	movs	r0, #1
 800c0ee:	f003 fa7f 	bl	800f5f0 <enableMicrophone>
 800c0f2:	0003      	movs	r3, r0
 800c0f4:	001a      	movs	r2, r3
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	4053      	eors	r3, r2
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800c100:	4a11      	ldr	r2, [pc, #68]	@ (800c148 <Mic_Upkeep+0x1ec>)
 800c102:	4b12      	ldr	r3, [pc, #72]	@ (800c14c <Mic_Upkeep+0x1f0>)
 800c104:	21a6      	movs	r1, #166	@ 0xa6
 800c106:	0018      	movs	r0, r3
 800c108:	f005 fc60 	bl	80119cc <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800c10c:	4b0d      	ldr	r3, [pc, #52]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800c10e:	2201      	movs	r2, #1
 800c110:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800c112:	f004 fa1b 	bl	801054c <SetMICIndicator>
    }
    break;
 800c116:	e00d      	b.n	800c134 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800c118:	4a18      	ldr	r2, [pc, #96]	@ (800c17c <Mic_Upkeep+0x220>)
 800c11a:	4b19      	ldr	r3, [pc, #100]	@ (800c180 <Mic_Upkeep+0x224>)
 800c11c:	0019      	movs	r1, r3
 800c11e:	2003      	movs	r0, #3
 800c120:	f005 fb9c 	bl	801185c <CreateLine>
    MicState = MIC_STATE_INIT;
 800c124:	4b07      	ldr	r3, [pc, #28]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800c126:	2200      	movs	r2, #0
 800c128:	701a      	strb	r2, [r3, #0]
    break;
 800c12a:	e004      	b.n	800c136 <Mic_Upkeep+0x1da>
    break;
 800c12c:	46c0      	nop			@ (mov r8, r8)
 800c12e:	e002      	b.n	800c136 <Mic_Upkeep+0x1da>
    break;
 800c130:	46c0      	nop			@ (mov r8, r8)
 800c132:	e000      	b.n	800c136 <Mic_Upkeep+0x1da>
    break;
 800c134:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800c136:	4b03      	ldr	r3, [pc, #12]	@ (800c144 <Mic_Upkeep+0x1e8>)
 800c138:	781b      	ldrb	r3, [r3, #0]
}
 800c13a:	0018      	movs	r0, r3
 800c13c:	46bd      	mov	sp, r7
 800c13e:	b002      	add	sp, #8
 800c140:	bd80      	pop	{r7, pc}
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	20000e76 	.word	0x20000e76
 800c148:	0802a008 	.word	0x0802a008
 800c14c:	0802b114 	.word	0x0802b114
 800c150:	20000f91 	.word	0x20000f91
 800c154:	20000e64 	.word	0x20000e64
 800c158:	0802a024 	.word	0x0802a024
 800c15c:	0802a02c 	.word	0x0802a02c
 800c160:	20000e14 	.word	0x20000e14
 800c164:	20000e54 	.word	0x20000e54
 800c168:	42c80000 	.word	0x42c80000
 800c16c:	3fe00000 	.word	0x3fe00000
 800c170:	40590000 	.word	0x40590000
 800c174:	000002f3 	.word	0x000002f3
 800c178:	20000e60 	.word	0x20000e60
 800c17c:	0802a034 	.word	0x0802a034
 800c180:	0802a054 	.word	0x0802a054

0800c184 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c18a:	1d3b      	adds	r3, r7, #4
 800c18c:	0018      	movs	r0, r3
 800c18e:	2314      	movs	r3, #20
 800c190:	001a      	movs	r2, r3
 800c192:	2100      	movs	r1, #0
 800c194:	f017 fcc0 	bl	8023b18 <memset>
  RTC_DateTypeDef sDate = {0};
 800c198:	003b      	movs	r3, r7
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c19e:	4b2e      	ldr	r3, [pc, #184]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1a0:	4a2e      	ldr	r2, [pc, #184]	@ (800c25c <MX_RTC_Init+0xd8>)
 800c1a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c1a4:	4b2c      	ldr	r3, [pc, #176]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1ac:	227f      	movs	r2, #127	@ 0x7f
 800c1ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c1b0:	4b29      	ldr	r3, [pc, #164]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1b2:	22ff      	movs	r2, #255	@ 0xff
 800c1b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c1b6:	4b28      	ldr	r3, [pc, #160]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c1bc:	4b26      	ldr	r3, [pc, #152]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c1c2:	4b25      	ldr	r3, [pc, #148]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c1c8:	4b23      	ldr	r3, [pc, #140]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c1ce:	4b22      	ldr	r3, [pc, #136]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f00d faab 	bl	801972c <HAL_RTC_Init>
 800c1d6:	1e03      	subs	r3, r0, #0
 800c1d8:	d001      	beq.n	800c1de <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800c1da:	f7ff f869 	bl	800b2b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800c1de:	1d3b      	adds	r3, r7, #4
 800c1e0:	220d      	movs	r2, #13
 800c1e2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800c1e4:	1d3b      	adds	r3, r7, #4
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800c1ea:	1d3b      	adds	r3, r7, #4
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c1f0:	1d3b      	adds	r3, r7, #4
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c1f6:	1d3b      	adds	r3, r7, #4
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c1fc:	1d39      	adds	r1, r7, #4
 800c1fe:	4b16      	ldr	r3, [pc, #88]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c200:	2200      	movs	r2, #0
 800c202:	0018      	movs	r0, r3
 800c204:	f00d fb2e 	bl	8019864 <HAL_RTC_SetTime>
 800c208:	1e03      	subs	r3, r0, #0
 800c20a:	d001      	beq.n	800c210 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800c20c:	f7ff f850 	bl	800b2b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800c210:	003b      	movs	r3, r7
 800c212:	2206      	movs	r2, #6
 800c214:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800c216:	003b      	movs	r3, r7
 800c218:	2211      	movs	r2, #17
 800c21a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800c21c:	003b      	movs	r3, r7
 800c21e:	2217      	movs	r2, #23
 800c220:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800c222:	003b      	movs	r3, r7
 800c224:	2218      	movs	r2, #24
 800c226:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c228:	0039      	movs	r1, r7
 800c22a:	4b0b      	ldr	r3, [pc, #44]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	0018      	movs	r0, r3
 800c230:	f00d fc20 	bl	8019a74 <HAL_RTC_SetDate>
 800c234:	1e03      	subs	r3, r0, #0
 800c236:	d001      	beq.n	800c23c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800c238:	f7ff f83a 	bl	800b2b0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800c23c:	4b06      	ldr	r3, [pc, #24]	@ (800c258 <MX_RTC_Init+0xd4>)
 800c23e:	2200      	movs	r2, #0
 800c240:	2100      	movs	r1, #0
 800c242:	0018      	movs	r0, r3
 800c244:	f00d fdd0 	bl	8019de8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800c248:	1e03      	subs	r3, r0, #0
 800c24a:	d001      	beq.n	800c250 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800c24c:	f7ff f830 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c250:	46c0      	nop			@ (mov r8, r8)
 800c252:	46bd      	mov	sp, r7
 800c254:	b006      	add	sp, #24
 800c256:	bd80      	pop	{r7, pc}
 800c258:	20000e78 	.word	0x20000e78
 800c25c:	40002800 	.word	0x40002800

0800c260 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a0a      	ldr	r2, [pc, #40]	@ (800c298 <HAL_RTC_MspInit+0x38>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d10e      	bne.n	800c290 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c272:	4b0a      	ldr	r3, [pc, #40]	@ (800c29c <HAL_RTC_MspInit+0x3c>)
 800c274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c276:	4b09      	ldr	r3, [pc, #36]	@ (800c29c <HAL_RTC_MspInit+0x3c>)
 800c278:	2180      	movs	r1, #128	@ 0x80
 800c27a:	02c9      	lsls	r1, r1, #11
 800c27c:	430a      	orrs	r2, r1
 800c27e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800c280:	2200      	movs	r2, #0
 800c282:	2100      	movs	r1, #0
 800c284:	2002      	movs	r0, #2
 800c286:	f006 fbd9 	bl	8012a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800c28a:	2002      	movs	r0, #2
 800c28c:	f006 fbeb 	bl	8012a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800c290:	46c0      	nop			@ (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b002      	add	sp, #8
 800c296:	bd80      	pop	{r7, pc}
 800c298:	40002800 	.word	0x40002800
 800c29c:	40021000 	.word	0x40021000

0800c2a0 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800c2a4:	4b02      	ldr	r3, [pc, #8]	@ (800c2b0 <sen5x_Get_sen5x_enable_state+0x10>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
}
 800c2a8:	0018      	movs	r0, r3
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	46c0      	nop			@ (mov r8, r8)
 800c2b0:	20000e9f 	.word	0x20000e9f

0800c2b4 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	0002      	movs	r2, r0
 800c2bc:	1dfb      	adds	r3, r7, #7
 800c2be:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800c2c0:	4b03      	ldr	r3, [pc, #12]	@ (800c2d0 <sen5x_Set_sen5x_state+0x1c>)
 800c2c2:	1dfa      	adds	r2, r7, #7
 800c2c4:	7812      	ldrb	r2, [r2, #0]
 800c2c6:	701a      	strb	r2, [r3, #0]
}
 800c2c8:	46c0      	nop			@ (mov r8, r8)
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	b002      	add	sp, #8
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20000e9f 	.word	0x20000e9f

0800c2d4 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800c2dc:	f005 ff0a 	bl	80120f4 <HAL_GetTick>
 800c2e0:	0002      	movs	r2, r0
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	18d2      	adds	r2, r2, r3
 800c2e6:	4b03      	ldr	r3, [pc, #12]	@ (800c2f4 <setsen5xReadTimer+0x20>)
 800c2e8:	601a      	str	r2, [r3, #0]
}
 800c2ea:	46c0      	nop			@ (mov r8, r8)
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	b002      	add	sp, #8
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	46c0      	nop			@ (mov r8, r8)
 800c2f4:	20000eac 	.word	0x20000eac

0800c2f8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	0002      	movs	r2, r0
 800c300:	1dfb      	adds	r3, r7, #7
 800c302:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800c304:	4b03      	ldr	r3, [pc, #12]	@ (800c314 <setsen5xSamplecounter+0x1c>)
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	46bd      	mov	sp, r7
 800c30e:	b002      	add	sp, #8
 800c310:	bd80      	pop	{r7, pc}
 800c312:	46c0      	nop			@ (mov r8, r8)
 800c314:	20000ea8 	.word	0x20000ea8

0800c318 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800c320:	f7ff f86a 	bl	800b3f8 <IsPMSensorEnabled>
 800c324:	1e03      	subs	r3, r0, #0
 800c326:	d035      	beq.n	800c394 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800c328:	f003 ff8e 	bl	8010248 <batteryChargeCheck>
 800c32c:	0003      	movs	r3, r0
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d103      	bne.n	800c33a <sen5x_enable+0x22>
      sen5x_Enable = true;
 800c332:	4b20      	ldr	r3, [pc, #128]	@ (800c3b4 <sen5x_enable+0x9c>)
 800c334:	2201      	movs	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
 800c338:	e00d      	b.n	800c356 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800c33a:	4b1e      	ldr	r3, [pc, #120]	@ (800c3b4 <sen5x_enable+0x9c>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	1e5a      	subs	r2, r3, #1
 800c340:	4193      	sbcs	r3, r2
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2201      	movs	r2, #1
 800c346:	4053      	eors	r3, r2
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	1c1a      	adds	r2, r3, #0
 800c34c:	2301      	movs	r3, #1
 800c34e:	4013      	ands	r3, r2
 800c350:	b2da      	uxtb	r2, r3
 800c352:	4b18      	ldr	r3, [pc, #96]	@ (800c3b4 <sen5x_enable+0x9c>)
 800c354:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800c356:	4b17      	ldr	r3, [pc, #92]	@ (800c3b4 <sen5x_enable+0x9c>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d003      	beq.n	800c366 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800c35e:	2000      	movs	r0, #0
 800c360:	f7ff ffb8 	bl	800c2d4 <setsen5xReadTimer>
 800c364:	e009      	b.n	800c37a <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800c366:	f005 fec5 	bl	80120f4 <HAL_GetTick>
 800c36a:	0002      	movs	r2, r0
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2164      	movs	r1, #100	@ 0x64
 800c370:	434b      	muls	r3, r1
 800c372:	18d3      	adds	r3, r2, r3
 800c374:	0018      	movs	r0, r3
 800c376:	f7ff ffad 	bl	800c2d4 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800c37a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3b4 <sen5x_enable+0x9c>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <sen5x_enable+0x6e>
 800c382:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b8 <sen5x_enable+0xa0>)
 800c384:	e000      	b.n	800c388 <sen5x_enable+0x70>
 800c386:	4b0d      	ldr	r3, [pc, #52]	@ (800c3bc <sen5x_enable+0xa4>)
 800c388:	4a0d      	ldr	r2, [pc, #52]	@ (800c3c0 <sen5x_enable+0xa8>)
 800c38a:	490e      	ldr	r1, [pc, #56]	@ (800c3c4 <sen5x_enable+0xac>)
 800c38c:	2002      	movs	r0, #2
 800c38e:	f005 fa65 	bl	801185c <CreateLine>
 800c392:	e005      	b.n	800c3a0 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800c394:	4a0c      	ldr	r2, [pc, #48]	@ (800c3c8 <sen5x_enable+0xb0>)
 800c396:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c4 <sen5x_enable+0xac>)
 800c398:	0019      	movs	r1, r3
 800c39a:	2002      	movs	r0, #2
 800c39c:	f005 fa5e 	bl	801185c <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800c3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c3cc <sen5x_enable+0xb4>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800c3a6:	4b03      	ldr	r3, [pc, #12]	@ (800c3b4 <sen5x_enable+0x9c>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
}
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	b002      	add	sp, #8
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	46c0      	nop			@ (mov r8, r8)
 800c3b4:	20000e9f 	.word	0x20000e9f
 800c3b8:	0802a058 	.word	0x0802a058
 800c3bc:	0802a060 	.word	0x0802a060
 800c3c0:	0802a06c 	.word	0x0802a06c
 800c3c4:	0802a088 	.word	0x0802a088
 800c3c8:	0802a08c 	.word	0x0802a08c
 800c3cc:	2000009d 	.word	0x2000009d

0800c3d0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800c3d4:	2380      	movs	r3, #128	@ 0x80
 800c3d6:	015b      	lsls	r3, r3, #5
 800c3d8:	480f      	ldr	r0, [pc, #60]	@ (800c418 <sen5x_Power_On+0x48>)
 800c3da:	2201      	movs	r2, #1
 800c3dc:	0019      	movs	r1, r3
 800c3de:	f007 f91a 	bl	8013616 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800c3e2:	4a0e      	ldr	r2, [pc, #56]	@ (800c41c <sen5x_Power_On+0x4c>)
 800c3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c420 <sen5x_Power_On+0x50>)
 800c3e6:	0019      	movs	r1, r3
 800c3e8:	2003      	movs	r0, #3
 800c3ea:	f005 fa37 	bl	801185c <CreateLine>
  HAL_Delay(150);
 800c3ee:	2096      	movs	r0, #150	@ 0x96
 800c3f0:	f005 fe8a 	bl	8012108 <HAL_Delay>
  if (sen5x_device_reset()) {
 800c3f4:	f001 f98c 	bl	800d710 <sen5x_device_reset>
 800c3f8:	1e03      	subs	r3, r0, #0
 800c3fa:	d006      	beq.n	800c40a <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800c3fc:	4a09      	ldr	r2, [pc, #36]	@ (800c424 <sen5x_Power_On+0x54>)
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c428 <sen5x_Power_On+0x58>)
 800c400:	0019      	movs	r1, r3
 800c402:	2001      	movs	r0, #1
 800c404:	f005 fa2a 	bl	801185c <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800c408:	e002      	b.n	800c410 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800c40a:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <sen5x_Power_On+0x5c>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	701a      	strb	r2, [r3, #0]
}
 800c410:	46c0      	nop			@ (mov r8, r8)
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	46c0      	nop			@ (mov r8, r8)
 800c418:	50000800 	.word	0x50000800
 800c41c:	0802a0ac 	.word	0x0802a0ac
 800c420:	0802a0c8 	.word	0x0802a0c8
 800c424:	0802a0cc 	.word	0x0802a0cc
 800c428:	0802a0f4 	.word	0x0802a0f4
 800c42c:	20000e9d 	.word	0x20000e9d

0800c430 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800c434:	4b0e      	ldr	r3, [pc, #56]	@ (800c470 <sen5x_Power_Off+0x40>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d006      	beq.n	800c44a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800c43c:	4a0d      	ldr	r2, [pc, #52]	@ (800c474 <sen5x_Power_Off+0x44>)
 800c43e:	4b0e      	ldr	r3, [pc, #56]	@ (800c478 <sen5x_Power_Off+0x48>)
 800c440:	0019      	movs	r1, r3
 800c442:	2003      	movs	r0, #3
 800c444:	f005 fa0a 	bl	801185c <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800c448:	e00f      	b.n	800c46a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800c44a:	4a0c      	ldr	r2, [pc, #48]	@ (800c47c <sen5x_Power_Off+0x4c>)
 800c44c:	4b0a      	ldr	r3, [pc, #40]	@ (800c478 <sen5x_Power_Off+0x48>)
 800c44e:	0019      	movs	r1, r3
 800c450:	2003      	movs	r0, #3
 800c452:	f005 fa03 	bl	801185c <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c456:	2380      	movs	r3, #128	@ 0x80
 800c458:	015b      	lsls	r3, r3, #5
 800c45a:	4809      	ldr	r0, [pc, #36]	@ (800c480 <sen5x_Power_Off+0x50>)
 800c45c:	2200      	movs	r2, #0
 800c45e:	0019      	movs	r1, r3
 800c460:	f007 f8d9 	bl	8013616 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800c464:	4b07      	ldr	r3, [pc, #28]	@ (800c484 <sen5x_Power_Off+0x54>)
 800c466:	2200      	movs	r2, #0
 800c468:	701a      	strb	r2, [r3, #0]
}
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	20000e9e 	.word	0x20000e9e
 800c474:	0802a0f8 	.word	0x0802a0f8
 800c478:	0802a0c8 	.word	0x0802a0c8
 800c47c:	0802a128 	.word	0x0802a128
 800c480:	50000800 	.word	0x50000800
 800c484:	20000e9d 	.word	0x20000e9d

0800c488 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800c488:	b580      	push	{r7, lr}
 800c48a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800c48c:	4b02      	ldr	r3, [pc, #8]	@ (800c498 <reset_fanCleaningDone+0x10>)
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
}
 800c492:	46c0      	nop			@ (mov r8, r8)
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20000e9c 	.word	0x20000e9c

0800c49c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800c49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c49e:	b093      	sub	sp, #76	@ 0x4c
 800c4a0:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800c4a2:	2436      	movs	r4, #54	@ 0x36
 800c4a4:	193b      	adds	r3, r7, r4
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800c4aa:	2335      	movs	r3, #53	@ 0x35
 800c4ac:	18fb      	adds	r3, r7, r3
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800c4b2:	2334      	movs	r3, #52	@ 0x34
 800c4b4:	18fb      	adds	r3, r7, r3
 800c4b6:	2220      	movs	r2, #32
 800c4b8:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800c4ba:	f7ff ff89 	bl	800c3d0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800c4be:	0025      	movs	r5, r4
 800c4c0:	193c      	adds	r4, r7, r4
 800c4c2:	f001 f925 	bl	800d710 <sen5x_device_reset>
 800c4c6:	0003      	movs	r3, r0
 800c4c8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c4ca:	002c      	movs	r4, r5
 800c4cc:	193b      	adds	r3, r7, r4
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	5e9b      	ldrsh	r3, [r3, r2]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00b      	beq.n	800c4ee <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800c4d6:	193b      	adds	r3, r7, r4
 800c4d8:	2200      	movs	r2, #0
 800c4da:	5e9b      	ldrsh	r3, [r3, r2]
 800c4dc:	4a75      	ldr	r2, [pc, #468]	@ (800c6b4 <probe_sen5x+0x218>)
 800c4de:	4976      	ldr	r1, [pc, #472]	@ (800c6b8 <probe_sen5x+0x21c>)
 800c4e0:	2001      	movs	r0, #1
 800c4e2:	f005 f9bb 	bl	801185c <CreateLine>
      return error;
 800c4e6:	193b      	adds	r3, r7, r4
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	5e9b      	ldrsh	r3, [r3, r2]
 800c4ec:	e0de      	b.n	800c6ac <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800c4ee:	2536      	movs	r5, #54	@ 0x36
 800c4f0:	197c      	adds	r4, r7, r5
 800c4f2:	2335      	movs	r3, #53	@ 0x35
 800c4f4:	18fb      	adds	r3, r7, r3
 800c4f6:	781a      	ldrb	r2, [r3, #0]
 800c4f8:	230c      	movs	r3, #12
 800c4fa:	18fb      	adds	r3, r7, r3
 800c4fc:	0011      	movs	r1, r2
 800c4fe:	0018      	movs	r0, r3
 800c500:	f000 fff2 	bl	800d4e8 <sen5x_get_serial_number>
 800c504:	0003      	movs	r3, r0
 800c506:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c508:	197b      	adds	r3, r7, r5
 800c50a:	2200      	movs	r2, #0
 800c50c:	5e9b      	ldrsh	r3, [r3, r2]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00b      	beq.n	800c52a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800c512:	197b      	adds	r3, r7, r5
 800c514:	2200      	movs	r2, #0
 800c516:	5e9a      	ldrsh	r2, [r3, r2]
 800c518:	4b68      	ldr	r3, [pc, #416]	@ (800c6bc <probe_sen5x+0x220>)
 800c51a:	0011      	movs	r1, r2
 800c51c:	0018      	movs	r0, r3
 800c51e:	f017 f925 	bl	802376c <iprintf>
      return error;
 800c522:	197b      	adds	r3, r7, r5
 800c524:	2200      	movs	r2, #0
 800c526:	5e9b      	ldrsh	r3, [r3, r2]
 800c528:	e0c0      	b.n	800c6ac <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800c52a:	230c      	movs	r3, #12
 800c52c:	18fa      	adds	r2, r7, r3
 800c52e:	4b64      	ldr	r3, [pc, #400]	@ (800c6c0 <probe_sen5x+0x224>)
 800c530:	0011      	movs	r1, r2
 800c532:	0018      	movs	r0, r3
 800c534:	f017 f91a 	bl	802376c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800c538:	2536      	movs	r5, #54	@ 0x36
 800c53a:	197c      	adds	r4, r7, r5
 800c53c:	2334      	movs	r3, #52	@ 0x34
 800c53e:	18fb      	adds	r3, r7, r3
 800c540:	781a      	ldrb	r2, [r3, #0]
 800c542:	4b60      	ldr	r3, [pc, #384]	@ (800c6c4 <probe_sen5x+0x228>)
 800c544:	0011      	movs	r1, r2
 800c546:	0018      	movs	r0, r3
 800c548:	f000 ff78 	bl	800d43c <sen5x_get_product_name>
 800c54c:	0003      	movs	r3, r0
 800c54e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c550:	197b      	adds	r3, r7, r5
 800c552:	2200      	movs	r2, #0
 800c554:	5e9b      	ldrsh	r3, [r3, r2]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00b      	beq.n	800c572 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800c55a:	197b      	adds	r3, r7, r5
 800c55c:	2200      	movs	r2, #0
 800c55e:	5e9a      	ldrsh	r2, [r3, r2]
 800c560:	4b59      	ldr	r3, [pc, #356]	@ (800c6c8 <probe_sen5x+0x22c>)
 800c562:	0011      	movs	r1, r2
 800c564:	0018      	movs	r0, r3
 800c566:	f017 f901 	bl	802376c <iprintf>
      return error;
 800c56a:	197b      	adds	r3, r7, r5
 800c56c:	2200      	movs	r2, #0
 800c56e:	5e9b      	ldrsh	r3, [r3, r2]
 800c570:	e09c      	b.n	800c6ac <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800c572:	4a54      	ldr	r2, [pc, #336]	@ (800c6c4 <probe_sen5x+0x228>)
 800c574:	4b55      	ldr	r3, [pc, #340]	@ (800c6cc <probe_sen5x+0x230>)
 800c576:	0011      	movs	r1, r2
 800c578:	0018      	movs	r0, r3
 800c57a:	f017 f8f7 	bl	802376c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800c57e:	2636      	movs	r6, #54	@ 0x36
 800c580:	19bc      	adds	r4, r7, r6
 800c582:	2308      	movs	r3, #8
 800c584:	18fd      	adds	r5, r7, r3
 800c586:	2309      	movs	r3, #9
 800c588:	18fa      	adds	r2, r7, r3
 800c58a:	230a      	movs	r3, #10
 800c58c:	18f9      	adds	r1, r7, r3
 800c58e:	230b      	movs	r3, #11
 800c590:	18f8      	adds	r0, r7, r3
 800c592:	1d7b      	adds	r3, r7, #5
 800c594:	9302      	str	r3, [sp, #8]
 800c596:	1dbb      	adds	r3, r7, #6
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	1dfb      	adds	r3, r7, #7
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	002b      	movs	r3, r5
 800c5a0:	f000 fff8 	bl	800d594 <sen5x_get_version>
 800c5a4:	0003      	movs	r3, r0
 800c5a6:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800c5a8:	19bb      	adds	r3, r7, r6
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	5e9b      	ldrsh	r3, [r3, r2]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00b      	beq.n	800c5ca <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800c5b2:	19bb      	adds	r3, r7, r6
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	5e9a      	ldrsh	r2, [r3, r2]
 800c5b8:	4b45      	ldr	r3, [pc, #276]	@ (800c6d0 <probe_sen5x+0x234>)
 800c5ba:	0011      	movs	r1, r2
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f017 f8d5 	bl	802376c <iprintf>
      return error;
 800c5c2:	19bb      	adds	r3, r7, r6
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	5e9b      	ldrsh	r3, [r3, r2]
 800c5c8:	e070      	b.n	800c6ac <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800c5ca:	230b      	movs	r3, #11
 800c5cc:	18fb      	adds	r3, r7, r3
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	0019      	movs	r1, r3
 800c5d2:	230a      	movs	r3, #10
 800c5d4:	18fb      	adds	r3, r7, r3
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	001a      	movs	r2, r3
 800c5da:	2308      	movs	r3, #8
 800c5dc:	18fb      	adds	r3, r7, r3
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	001c      	movs	r4, r3
 800c5e2:	1dfb      	adds	r3, r7, #7
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	483b      	ldr	r0, [pc, #236]	@ (800c6d4 <probe_sen5x+0x238>)
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	0023      	movs	r3, r4
 800c5ec:	f017 f8be 	bl	802376c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800c5f4:	262e      	movs	r6, #46	@ 0x2e
 800c5f6:	19bb      	adds	r3, r7, r6
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800c5fc:	232c      	movs	r3, #44	@ 0x2c
 800c5fe:	18fb      	adds	r3, r7, r3
 800c600:	2200      	movs	r2, #0
 800c602:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800c604:	4934      	ldr	r1, [pc, #208]	@ (800c6d8 <probe_sen5x+0x23c>)
 800c606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c608:	f7f4 fcca 	bl	8000fa0 <__aeabi_fmul>
 800c60c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800c60e:	1c18      	adds	r0, r3, #0
 800c610:	f7f4 ffbe 	bl	8001590 <__aeabi_f2iz>
 800c614:	0003      	movs	r3, r0
 800c616:	b218      	sxth	r0, r3
 800c618:	2536      	movs	r5, #54	@ 0x36
 800c61a:	197c      	adds	r4, r7, r5
 800c61c:	232c      	movs	r3, #44	@ 0x2c
 800c61e:	18fb      	adds	r3, r7, r3
 800c620:	881a      	ldrh	r2, [r3, #0]
 800c622:	19bb      	adds	r3, r7, r6
 800c624:	2100      	movs	r1, #0
 800c626:	5e5b      	ldrsh	r3, [r3, r1]
 800c628:	0019      	movs	r1, r3
 800c62a:	f000 fea3 	bl	800d374 <sen5x_set_temperature_offset_parameters>
 800c62e:	0003      	movs	r3, r0
 800c630:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c632:	197b      	adds	r3, r7, r5
 800c634:	2200      	movs	r2, #0
 800c636:	5e9b      	ldrsh	r3, [r3, r2]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00b      	beq.n	800c654 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800c63c:	197b      	adds	r3, r7, r5
 800c63e:	2200      	movs	r2, #0
 800c640:	5e9b      	ldrsh	r3, [r3, r2]
 800c642:	4a26      	ldr	r2, [pc, #152]	@ (800c6dc <probe_sen5x+0x240>)
 800c644:	491c      	ldr	r1, [pc, #112]	@ (800c6b8 <probe_sen5x+0x21c>)
 800c646:	2001      	movs	r0, #1
 800c648:	f005 f908 	bl	801185c <CreateLine>
      return error;
 800c64c:	197b      	adds	r3, r7, r5
 800c64e:	2200      	movs	r2, #0
 800c650:	5e9b      	ldrsh	r3, [r3, r2]
 800c652:	e02b      	b.n	800c6ac <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800c654:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c656:	f7f6 ff05 	bl	8003464 <__aeabi_f2d>
 800c65a:	0002      	movs	r2, r0
 800c65c:	000b      	movs	r3, r1
 800c65e:	4820      	ldr	r0, [pc, #128]	@ (800c6e0 <probe_sen5x+0x244>)
 800c660:	4920      	ldr	r1, [pc, #128]	@ (800c6e4 <probe_sen5x+0x248>)
 800c662:	9200      	str	r2, [sp, #0]
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	0002      	movs	r2, r0
 800c668:	2002      	movs	r0, #2
 800c66a:	f005 f8f7 	bl	801185c <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800c66e:	f7fb fbf7 	bl	8007e60 <Check_USB_PowerOn>
 800c672:	0003      	movs	r3, r0
 800c674:	001a      	movs	r2, r3
 800c676:	2301      	movs	r3, #1
 800c678:	4053      	eors	r3, r2
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800c680:	f7ff fed6 	bl	800c430 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800c684:	f005 fd36 	bl	80120f4 <HAL_GetTick>
 800c688:	0003      	movs	r3, r0
 800c68a:	22fa      	movs	r2, #250	@ 0xfa
 800c68c:	00d2      	lsls	r2, r2, #3
 800c68e:	189a      	adds	r2, r3, r2
 800c690:	4b15      	ldr	r3, [pc, #84]	@ (800c6e8 <probe_sen5x+0x24c>)
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	e006      	b.n	800c6a4 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800c696:	f005 fd2d 	bl	80120f4 <HAL_GetTick>
 800c69a:	0003      	movs	r3, r0
 800c69c:	4a13      	ldr	r2, [pc, #76]	@ (800c6ec <probe_sen5x+0x250>)
 800c69e:	189a      	adds	r2, r3, r2
 800c6a0:	4b11      	ldr	r3, [pc, #68]	@ (800c6e8 <probe_sen5x+0x24c>)
 800c6a2:	601a      	str	r2, [r3, #0]
  }
  return error;
 800c6a4:	2336      	movs	r3, #54	@ 0x36
 800c6a6:	18fb      	adds	r3, r7, r3
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	b00f      	add	sp, #60	@ 0x3c
 800c6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b4:	0802a144 	.word	0x0802a144
 800c6b8:	0802a0f4 	.word	0x0802a0f4
 800c6bc:	0802a170 	.word	0x0802a170
 800c6c0:	0802a1a0 	.word	0x0802a1a0
 800c6c4:	20000ea0 	.word	0x20000ea0
 800c6c8:	0802a1b4 	.word	0x0802a1b4
 800c6cc:	0802a1e4 	.word	0x0802a1e4
 800c6d0:	0802a1f8 	.word	0x0802a1f8
 800c6d4:	0802a224 	.word	0x0802a224
 800c6d8:	43480000 	.word	0x43480000
 800c6dc:	0802a248 	.word	0x0802a248
 800c6e0:	0802a288 	.word	0x0802a288
 800c6e4:	0802a088 	.word	0x0802a088
 800c6e8:	20000eac 	.word	0x20000eac
 800c6ec:	00006d60 	.word	0x00006d60

0800c6f0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800c6f0:	b590      	push	{r4, r7, lr}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800c6f6:	1dbb      	adds	r3, r7, #6
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800c6fc:	4b1b      	ldr	r3, [pc, #108]	@ (800c76c <sen5x_lightup_measurement+0x7c>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00b      	beq.n	800c71c <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800c704:	4a1a      	ldr	r2, [pc, #104]	@ (800c770 <sen5x_lightup_measurement+0x80>)
 800c706:	4b1b      	ldr	r3, [pc, #108]	@ (800c774 <sen5x_lightup_measurement+0x84>)
 800c708:	0019      	movs	r1, r3
 800c70a:	2002      	movs	r0, #2
 800c70c:	f005 f8a6 	bl	801185c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800c710:	1dbc      	adds	r4, r7, #6
 800c712:	f000 fcbb 	bl	800d08c <sen5x_start_measurement_without_pm>
 800c716:	0003      	movs	r3, r0
 800c718:	8023      	strh	r3, [r4, #0]
 800c71a:	e00a      	b.n	800c732 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800c71c:	4a16      	ldr	r2, [pc, #88]	@ (800c778 <sen5x_lightup_measurement+0x88>)
 800c71e:	4b15      	ldr	r3, [pc, #84]	@ (800c774 <sen5x_lightup_measurement+0x84>)
 800c720:	0019      	movs	r1, r3
 800c722:	2002      	movs	r0, #2
 800c724:	f005 f89a 	bl	801185c <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800c728:	1dbc      	adds	r4, r7, #6
 800c72a:	f000 fc81 	bl	800d030 <sen5x_start_measurement>
 800c72e:	0003      	movs	r3, r0
 800c730:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800c732:	1dbb      	adds	r3, r7, #6
 800c734:	2200      	movs	r2, #0
 800c736:	5e9b      	ldrsh	r3, [r3, r2]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d008      	beq.n	800c74e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800c73c:	1dbb      	adds	r3, r7, #6
 800c73e:	2200      	movs	r2, #0
 800c740:	5e9b      	ldrsh	r3, [r3, r2]
 800c742:	4a0e      	ldr	r2, [pc, #56]	@ (800c77c <sen5x_lightup_measurement+0x8c>)
 800c744:	490e      	ldr	r1, [pc, #56]	@ (800c780 <sen5x_lightup_measurement+0x90>)
 800c746:	2001      	movs	r0, #1
 800c748:	f005 f888 	bl	801185c <CreateLine>
 800c74c:	e007      	b.n	800c75e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800c74e:	f7fb fbb7 	bl	8007ec0 <showTime>
    Info("sen5x_start_measurement executed");
 800c752:	4a0c      	ldr	r2, [pc, #48]	@ (800c784 <sen5x_lightup_measurement+0x94>)
 800c754:	4b07      	ldr	r3, [pc, #28]	@ (800c774 <sen5x_lightup_measurement+0x84>)
 800c756:	0019      	movs	r1, r3
 800c758:	2002      	movs	r0, #2
 800c75a:	f005 f87f 	bl	801185c <CreateLine>
  }
  return error;
 800c75e:	1dbb      	adds	r3, r7, #6
 800c760:	2200      	movs	r2, #0
 800c762:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c764:	0018      	movs	r0, r3
 800c766:	46bd      	mov	sp, r7
 800c768:	b003      	add	sp, #12
 800c76a:	bd90      	pop	{r4, r7, pc}
 800c76c:	20000e9e 	.word	0x20000e9e
 800c770:	0802a2c0 	.word	0x0802a2c0
 800c774:	0802a088 	.word	0x0802a088
 800c778:	0802a2ec 	.word	0x0802a2ec
 800c77c:	0802a30c 	.word	0x0802a30c
 800c780:	0802a0f4 	.word	0x0802a0f4
 800c784:	0802a33c 	.word	0x0802a33c

0800c788 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800c788:	b590      	push	{r4, r7, lr}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800c78e:	1dbb      	adds	r3, r7, #6
 800c790:	2200      	movs	r2, #0
 800c792:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800c794:	4b21      	ldr	r3, [pc, #132]	@ (800c81c <sen5x_extinguish_measurement+0x94>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d01e      	beq.n	800c7da <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800c79c:	4a20      	ldr	r2, [pc, #128]	@ (800c820 <sen5x_extinguish_measurement+0x98>)
 800c79e:	4b21      	ldr	r3, [pc, #132]	@ (800c824 <sen5x_extinguish_measurement+0x9c>)
 800c7a0:	0019      	movs	r1, r3
 800c7a2:	2002      	movs	r0, #2
 800c7a4:	f005 f85a 	bl	801185c <CreateLine>
    Info("PM measurement is disabled");
 800c7a8:	4a1f      	ldr	r2, [pc, #124]	@ (800c828 <sen5x_extinguish_measurement+0xa0>)
 800c7aa:	4b1e      	ldr	r3, [pc, #120]	@ (800c824 <sen5x_extinguish_measurement+0x9c>)
 800c7ac:	0019      	movs	r1, r3
 800c7ae:	2002      	movs	r0, #2
 800c7b0:	f005 f854 	bl	801185c <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800c7b4:	1dbc      	adds	r4, r7, #6
 800c7b6:	f000 fc69 	bl	800d08c <sen5x_start_measurement_without_pm>
 800c7ba:	0003      	movs	r3, r0
 800c7bc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c7be:	1dbb      	adds	r3, r7, #6
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	5e9b      	ldrsh	r3, [r3, r2]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d022      	beq.n	800c80e <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800c7c8:	1dbb      	adds	r3, r7, #6
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	5e9b      	ldrsh	r3, [r3, r2]
 800c7ce:	4a17      	ldr	r2, [pc, #92]	@ (800c82c <sen5x_extinguish_measurement+0xa4>)
 800c7d0:	4917      	ldr	r1, [pc, #92]	@ (800c830 <sen5x_extinguish_measurement+0xa8>)
 800c7d2:	2001      	movs	r0, #1
 800c7d4:	f005 f842 	bl	801185c <CreateLine>
 800c7d8:	e019      	b.n	800c80e <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800c7da:	1dbc      	adds	r4, r7, #6
 800c7dc:	f000 fc84 	bl	800d0e8 <sen5x_stop_measurement>
 800c7e0:	0003      	movs	r3, r0
 800c7e2:	8023      	strh	r3, [r4, #0]
    showTime();
 800c7e4:	f7fb fb6c 	bl	8007ec0 <showTime>
    Info("sen5x_stop_measurement executed");
 800c7e8:	4a12      	ldr	r2, [pc, #72]	@ (800c834 <sen5x_extinguish_measurement+0xac>)
 800c7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c824 <sen5x_extinguish_measurement+0x9c>)
 800c7ec:	0019      	movs	r1, r3
 800c7ee:	2002      	movs	r0, #2
 800c7f0:	f005 f834 	bl	801185c <CreateLine>
    if (error) {
 800c7f4:	1dbb      	adds	r3, r7, #6
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	5e9b      	ldrsh	r3, [r3, r2]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d007      	beq.n	800c80e <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800c7fe:	1dbb      	adds	r3, r7, #6
 800c800:	2200      	movs	r2, #0
 800c802:	5e9b      	ldrsh	r3, [r3, r2]
 800c804:	4a0c      	ldr	r2, [pc, #48]	@ (800c838 <sen5x_extinguish_measurement+0xb0>)
 800c806:	490a      	ldr	r1, [pc, #40]	@ (800c830 <sen5x_extinguish_measurement+0xa8>)
 800c808:	2001      	movs	r0, #1
 800c80a:	f005 f827 	bl	801185c <CreateLine>
    }
  }
  return error;
 800c80e:	1dbb      	adds	r3, r7, #6
 800c810:	2200      	movs	r2, #0
 800c812:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c814:	0018      	movs	r0, r3
 800c816:	46bd      	mov	sp, r7
 800c818:	b003      	add	sp, #12
 800c81a:	bd90      	pop	{r4, r7, pc}
 800c81c:	20000e9e 	.word	0x20000e9e
 800c820:	0802a360 	.word	0x0802a360
 800c824:	0802a088 	.word	0x0802a088
 800c828:	0802a398 	.word	0x0802a398
 800c82c:	0802a3b4 	.word	0x0802a3b4
 800c830:	0802a0f4 	.word	0x0802a0f4
 800c834:	0802a3f4 	.word	0x0802a3f4
 800c838:	0802a414 	.word	0x0802a414

0800c83c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83e:	b08d      	sub	sp, #52	@ 0x34
 800c840:	af04      	add	r7, sp, #16
 800c842:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800c844:	261e      	movs	r6, #30
 800c846:	19bb      	adds	r3, r7, r6
 800c848:	2200      	movs	r2, #0
 800c84a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800c84c:	19bc      	adds	r4, r7, r6
 800c84e:	2316      	movs	r3, #22
 800c850:	18fd      	adds	r5, r7, r3
 800c852:	2318      	movs	r3, #24
 800c854:	18fa      	adds	r2, r7, r3
 800c856:	231a      	movs	r3, #26
 800c858:	18f9      	adds	r1, r7, r3
 800c85a:	231c      	movs	r3, #28
 800c85c:	18f8      	adds	r0, r7, r3
 800c85e:	230e      	movs	r3, #14
 800c860:	18fb      	adds	r3, r7, r3
 800c862:	9303      	str	r3, [sp, #12]
 800c864:	2310      	movs	r3, #16
 800c866:	18fb      	adds	r3, r7, r3
 800c868:	9302      	str	r3, [sp, #8]
 800c86a:	2312      	movs	r3, #18
 800c86c:	18fb      	adds	r3, r7, r3
 800c86e:	9301      	str	r3, [sp, #4]
 800c870:	2314      	movs	r3, #20
 800c872:	18fb      	adds	r3, r7, r3
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	002b      	movs	r3, r5
 800c878:	f000 fcb8 	bl	800d1ec <sen5x_read_measured_values>
 800c87c:	0003      	movs	r3, r0
 800c87e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800c880:	19bb      	adds	r3, r7, r6
 800c882:	2200      	movs	r2, #0
 800c884:	5e9b      	ldrsh	r3, [r3, r2]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d003      	beq.n	800c892 <sen5x_read_measurement+0x56>
    return error;
 800c88a:	19bb      	adds	r3, r7, r6
 800c88c:	2200      	movs	r2, #0
 800c88e:	5e9b      	ldrsh	r3, [r3, r2]
 800c890:	e02c      	b.n	800c8ec <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800c892:	231c      	movs	r3, #28
 800c894:	18fb      	adds	r3, r7, r3
 800c896:	881a      	ldrh	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800c89c:	231a      	movs	r3, #26
 800c89e:	18fb      	adds	r3, r7, r3
 800c8a0:	881a      	ldrh	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800c8a6:	2318      	movs	r3, #24
 800c8a8:	18fb      	adds	r3, r7, r3
 800c8aa:	881a      	ldrh	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800c8b0:	2316      	movs	r3, #22
 800c8b2:	18fb      	adds	r3, r7, r3
 800c8b4:	881a      	ldrh	r2, [r3, #0]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800c8ba:	2314      	movs	r3, #20
 800c8bc:	18fb      	adds	r3, r7, r3
 800c8be:	2200      	movs	r2, #0
 800c8c0:	5e9a      	ldrsh	r2, [r3, r2]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800c8c6:	2312      	movs	r3, #18
 800c8c8:	18fb      	adds	r3, r7, r3
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	5e9a      	ldrsh	r2, [r3, r2]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800c8d2:	2310      	movs	r3, #16
 800c8d4:	18fb      	adds	r3, r7, r3
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	5e9a      	ldrsh	r2, [r3, r2]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800c8de:	230e      	movs	r3, #14
 800c8e0:	18fb      	adds	r3, r7, r3
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	5e9a      	ldrsh	r2, [r3, r2]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	81da      	strh	r2, [r3, #14]
  return 0;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	b009      	add	sp, #36	@ 0x24
 800c8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8f4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800c8f8:	4b63      	ldr	r3, [pc, #396]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	4a63      	ldr	r2, [pc, #396]	@ (800ca8c <sen5x_printvalues+0x198>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d013      	beq.n	800c92a <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800c902:	4b61      	ldr	r3, [pc, #388]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c904:	881b      	ldrh	r3, [r3, #0]
 800c906:	0018      	movs	r0, r3
 800c908:	f7f4 fe62 	bl	80015d0 <__aeabi_i2f>
 800c90c:	1c03      	adds	r3, r0, #0
 800c90e:	4960      	ldr	r1, [pc, #384]	@ (800ca90 <sen5x_printvalues+0x19c>)
 800c910:	1c18      	adds	r0, r3, #0
 800c912:	f7f4 f95f 	bl	8000bd4 <__aeabi_fdiv>
 800c916:	1c03      	adds	r3, r0, #0
 800c918:	1c18      	adds	r0, r3, #0
 800c91a:	f7f6 fda3 	bl	8003464 <__aeabi_f2d>
 800c91e:	0002      	movs	r2, r0
 800c920:	000b      	movs	r3, r1
 800c922:	495c      	ldr	r1, [pc, #368]	@ (800ca94 <sen5x_printvalues+0x1a0>)
 800c924:	0008      	movs	r0, r1
 800c926:	f016 ff21 	bl	802376c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800c92a:	4b57      	ldr	r3, [pc, #348]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c92c:	885b      	ldrh	r3, [r3, #2]
 800c92e:	4a57      	ldr	r2, [pc, #348]	@ (800ca8c <sen5x_printvalues+0x198>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d013      	beq.n	800c95c <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800c934:	4b54      	ldr	r3, [pc, #336]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c936:	885b      	ldrh	r3, [r3, #2]
 800c938:	0018      	movs	r0, r3
 800c93a:	f7f4 fe49 	bl	80015d0 <__aeabi_i2f>
 800c93e:	1c03      	adds	r3, r0, #0
 800c940:	4953      	ldr	r1, [pc, #332]	@ (800ca90 <sen5x_printvalues+0x19c>)
 800c942:	1c18      	adds	r0, r3, #0
 800c944:	f7f4 f946 	bl	8000bd4 <__aeabi_fdiv>
 800c948:	1c03      	adds	r3, r0, #0
 800c94a:	1c18      	adds	r0, r3, #0
 800c94c:	f7f6 fd8a 	bl	8003464 <__aeabi_f2d>
 800c950:	0002      	movs	r2, r0
 800c952:	000b      	movs	r3, r1
 800c954:	4950      	ldr	r1, [pc, #320]	@ (800ca98 <sen5x_printvalues+0x1a4>)
 800c956:	0008      	movs	r0, r1
 800c958:	f016 ff08 	bl	802376c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800c95c:	4b4a      	ldr	r3, [pc, #296]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c95e:	889b      	ldrh	r3, [r3, #4]
 800c960:	4a4a      	ldr	r2, [pc, #296]	@ (800ca8c <sen5x_printvalues+0x198>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d013      	beq.n	800c98e <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800c966:	4b48      	ldr	r3, [pc, #288]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c968:	889b      	ldrh	r3, [r3, #4]
 800c96a:	0018      	movs	r0, r3
 800c96c:	f7f4 fe30 	bl	80015d0 <__aeabi_i2f>
 800c970:	1c03      	adds	r3, r0, #0
 800c972:	4947      	ldr	r1, [pc, #284]	@ (800ca90 <sen5x_printvalues+0x19c>)
 800c974:	1c18      	adds	r0, r3, #0
 800c976:	f7f4 f92d 	bl	8000bd4 <__aeabi_fdiv>
 800c97a:	1c03      	adds	r3, r0, #0
 800c97c:	1c18      	adds	r0, r3, #0
 800c97e:	f7f6 fd71 	bl	8003464 <__aeabi_f2d>
 800c982:	0002      	movs	r2, r0
 800c984:	000b      	movs	r3, r1
 800c986:	4945      	ldr	r1, [pc, #276]	@ (800ca9c <sen5x_printvalues+0x1a8>)
 800c988:	0008      	movs	r0, r1
 800c98a:	f016 feef 	bl	802376c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800c98e:	4b3e      	ldr	r3, [pc, #248]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c990:	88db      	ldrh	r3, [r3, #6]
 800c992:	4a3e      	ldr	r2, [pc, #248]	@ (800ca8c <sen5x_printvalues+0x198>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d013      	beq.n	800c9c0 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800c998:	4b3b      	ldr	r3, [pc, #236]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c99a:	88db      	ldrh	r3, [r3, #6]
 800c99c:	0018      	movs	r0, r3
 800c99e:	f7f4 fe17 	bl	80015d0 <__aeabi_i2f>
 800c9a2:	1c03      	adds	r3, r0, #0
 800c9a4:	493a      	ldr	r1, [pc, #232]	@ (800ca90 <sen5x_printvalues+0x19c>)
 800c9a6:	1c18      	adds	r0, r3, #0
 800c9a8:	f7f4 f914 	bl	8000bd4 <__aeabi_fdiv>
 800c9ac:	1c03      	adds	r3, r0, #0
 800c9ae:	1c18      	adds	r0, r3, #0
 800c9b0:	f7f6 fd58 	bl	8003464 <__aeabi_f2d>
 800c9b4:	0002      	movs	r2, r0
 800c9b6:	000b      	movs	r3, r1
 800c9b8:	4939      	ldr	r1, [pc, #228]	@ (800caa0 <sen5x_printvalues+0x1ac>)
 800c9ba:	0008      	movs	r0, r1
 800c9bc:	f016 fed6 	bl	802376c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800c9c0:	4b31      	ldr	r3, [pc, #196]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c9c2:	2208      	movs	r2, #8
 800c9c4:	5e9b      	ldrsh	r3, [r3, r2]
 800c9c6:	4a37      	ldr	r2, [pc, #220]	@ (800caa4 <sen5x_printvalues+0x1b0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d014      	beq.n	800c9f6 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800c9cc:	4b2e      	ldr	r3, [pc, #184]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c9ce:	2208      	movs	r2, #8
 800c9d0:	5e9b      	ldrsh	r3, [r3, r2]
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f7f4 fdfc 	bl	80015d0 <__aeabi_i2f>
 800c9d8:	1c03      	adds	r3, r0, #0
 800c9da:	4933      	ldr	r1, [pc, #204]	@ (800caa8 <sen5x_printvalues+0x1b4>)
 800c9dc:	1c18      	adds	r0, r3, #0
 800c9de:	f7f4 f8f9 	bl	8000bd4 <__aeabi_fdiv>
 800c9e2:	1c03      	adds	r3, r0, #0
 800c9e4:	1c18      	adds	r0, r3, #0
 800c9e6:	f7f6 fd3d 	bl	8003464 <__aeabi_f2d>
 800c9ea:	0002      	movs	r2, r0
 800c9ec:	000b      	movs	r3, r1
 800c9ee:	492f      	ldr	r1, [pc, #188]	@ (800caac <sen5x_printvalues+0x1b8>)
 800c9f0:	0008      	movs	r0, r1
 800c9f2:	f016 febb 	bl	802376c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800c9f6:	4b24      	ldr	r3, [pc, #144]	@ (800ca88 <sen5x_printvalues+0x194>)
 800c9f8:	220a      	movs	r2, #10
 800c9fa:	5e9b      	ldrsh	r3, [r3, r2]
 800c9fc:	4a29      	ldr	r2, [pc, #164]	@ (800caa4 <sen5x_printvalues+0x1b0>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d014      	beq.n	800ca2c <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800ca02:	4b21      	ldr	r3, [pc, #132]	@ (800ca88 <sen5x_printvalues+0x194>)
 800ca04:	220a      	movs	r2, #10
 800ca06:	5e9b      	ldrsh	r3, [r3, r2]
 800ca08:	0018      	movs	r0, r3
 800ca0a:	f7f4 fde1 	bl	80015d0 <__aeabi_i2f>
 800ca0e:	1c03      	adds	r3, r0, #0
 800ca10:	4927      	ldr	r1, [pc, #156]	@ (800cab0 <sen5x_printvalues+0x1bc>)
 800ca12:	1c18      	adds	r0, r3, #0
 800ca14:	f7f4 f8de 	bl	8000bd4 <__aeabi_fdiv>
 800ca18:	1c03      	adds	r3, r0, #0
 800ca1a:	1c18      	adds	r0, r3, #0
 800ca1c:	f7f6 fd22 	bl	8003464 <__aeabi_f2d>
 800ca20:	0002      	movs	r2, r0
 800ca22:	000b      	movs	r3, r1
 800ca24:	4923      	ldr	r1, [pc, #140]	@ (800cab4 <sen5x_printvalues+0x1c0>)
 800ca26:	0008      	movs	r0, r1
 800ca28:	f016 fea0 	bl	802376c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ca2c:	4b16      	ldr	r3, [pc, #88]	@ (800ca88 <sen5x_printvalues+0x194>)
 800ca2e:	220c      	movs	r2, #12
 800ca30:	5e9b      	ldrsh	r3, [r3, r2]
 800ca32:	4a1c      	ldr	r2, [pc, #112]	@ (800caa4 <sen5x_printvalues+0x1b0>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d00e      	beq.n	800ca56 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800ca38:	4b13      	ldr	r3, [pc, #76]	@ (800ca88 <sen5x_printvalues+0x194>)
 800ca3a:	220c      	movs	r2, #12
 800ca3c:	5e9b      	ldrsh	r3, [r3, r2]
 800ca3e:	210a      	movs	r1, #10
 800ca40:	0018      	movs	r0, r3
 800ca42:	f7f3 fc39 	bl	80002b8 <__divsi3>
 800ca46:	0003      	movs	r3, r0
 800ca48:	b21b      	sxth	r3, r3
 800ca4a:	001a      	movs	r2, r3
 800ca4c:	4b1a      	ldr	r3, [pc, #104]	@ (800cab8 <sen5x_printvalues+0x1c4>)
 800ca4e:	0011      	movs	r1, r2
 800ca50:	0018      	movs	r0, r3
 800ca52:	f016 fe8b 	bl	802376c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ca56:	4b0c      	ldr	r3, [pc, #48]	@ (800ca88 <sen5x_printvalues+0x194>)
 800ca58:	220e      	movs	r2, #14
 800ca5a:	5e9b      	ldrsh	r3, [r3, r2]
 800ca5c:	4a11      	ldr	r2, [pc, #68]	@ (800caa4 <sen5x_printvalues+0x1b0>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00e      	beq.n	800ca80 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800ca62:	4b09      	ldr	r3, [pc, #36]	@ (800ca88 <sen5x_printvalues+0x194>)
 800ca64:	220e      	movs	r2, #14
 800ca66:	5e9b      	ldrsh	r3, [r3, r2]
 800ca68:	210a      	movs	r1, #10
 800ca6a:	0018      	movs	r0, r3
 800ca6c:	f7f3 fc24 	bl	80002b8 <__divsi3>
 800ca70:	0003      	movs	r3, r0
 800ca72:	b21b      	sxth	r3, r3
 800ca74:	001a      	movs	r2, r3
 800ca76:	4b11      	ldr	r3, [pc, #68]	@ (800cabc <sen5x_printvalues+0x1c8>)
 800ca78:	0011      	movs	r1, r2
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	f016 fe76 	bl	802376c <iprintf>
  }
}
 800ca80:	46c0      	nop			@ (mov r8, r8)
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	46c0      	nop			@ (mov r8, r8)
 800ca88:	20000eb0 	.word	0x20000eb0
 800ca8c:	0000ffff 	.word	0x0000ffff
 800ca90:	41200000 	.word	0x41200000
 800ca94:	0802a444 	.word	0x0802a444
 800ca98:	0802a470 	.word	0x0802a470
 800ca9c:	0802a49c 	.word	0x0802a49c
 800caa0:	0802a4c8 	.word	0x0802a4c8
 800caa4:	00007fff 	.word	0x00007fff
 800caa8:	42c80000 	.word	0x42c80000
 800caac:	0802a4f4 	.word	0x0802a4f4
 800cab0:	43480000 	.word	0x43480000
 800cab4:	0802a518 	.word	0x0802a518
 800cab8:	0802a540 	.word	0x0802a540
 800cabc:	0802a558 	.word	0x0802a558

0800cac0 <sen5xStore>:

void sen5xStore() {
 800cac0:	b580      	push	{r7, lr}
 800cac2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800cac4:	4b2e      	ldr	r3, [pc, #184]	@ (800cb80 <sen5xStore+0xc0>)
 800cac6:	885b      	ldrh	r3, [r3, #2]
 800cac8:	4a2e      	ldr	r2, [pc, #184]	@ (800cb84 <sen5xStore+0xc4>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d004      	beq.n	800cad8 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800cace:	4b2c      	ldr	r3, [pc, #176]	@ (800cb80 <sen5xStore+0xc0>)
 800cad0:	885b      	ldrh	r3, [r3, #2]
 800cad2:	0018      	movs	r0, r3
 800cad4:	f7f7 fdb0 	bl	8004638 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800cad8:	4b29      	ldr	r3, [pc, #164]	@ (800cb80 <sen5xStore+0xc0>)
 800cada:	88db      	ldrh	r3, [r3, #6]
 800cadc:	4a29      	ldr	r2, [pc, #164]	@ (800cb84 <sen5xStore+0xc4>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d004      	beq.n	800caec <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800cae2:	4b27      	ldr	r3, [pc, #156]	@ (800cb80 <sen5xStore+0xc0>)
 800cae4:	88db      	ldrh	r3, [r3, #6]
 800cae6:	0018      	movs	r0, r3
 800cae8:	f7f7 fdd2 	bl	8004690 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800caec:	4b26      	ldr	r3, [pc, #152]	@ (800cb88 <sen5xStore+0xc8>)
 800caee:	791b      	ldrb	r3, [r3, #4]
 800caf0:	2b34      	cmp	r3, #52	@ 0x34
 800caf2:	d003      	beq.n	800cafc <sen5xStore+0x3c>
 800caf4:	4b24      	ldr	r3, [pc, #144]	@ (800cb88 <sen5xStore+0xc8>)
 800caf6:	791b      	ldrb	r3, [r3, #4]
 800caf8:	2b35      	cmp	r3, #53	@ 0x35
 800cafa:	d13d      	bne.n	800cb78 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800cafc:	4b23      	ldr	r3, [pc, #140]	@ (800cb8c <sen5xStore+0xcc>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2201      	movs	r2, #1
 800cb02:	4053      	eors	r3, r2
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d103      	bne.n	800cb12 <sen5xStore+0x52>
 800cb0a:	4b21      	ldr	r3, [pc, #132]	@ (800cb90 <sen5xStore+0xd0>)
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d032      	beq.n	800cb78 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800cb12:	4b1b      	ldr	r3, [pc, #108]	@ (800cb80 <sen5xStore+0xc0>)
 800cb14:	220c      	movs	r2, #12
 800cb16:	5e9b      	ldrsh	r3, [r3, r2]
 800cb18:	4a1e      	ldr	r2, [pc, #120]	@ (800cb94 <sen5xStore+0xd4>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d019      	beq.n	800cb52 <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800cb1e:	4b18      	ldr	r3, [pc, #96]	@ (800cb80 <sen5xStore+0xc0>)
 800cb20:	220c      	movs	r2, #12
 800cb22:	5e9b      	ldrsh	r3, [r3, r2]
 800cb24:	210a      	movs	r1, #10
 800cb26:	0018      	movs	r0, r3
 800cb28:	f7f3 fbc6 	bl	80002b8 <__divsi3>
 800cb2c:	0003      	movs	r3, r0
 800cb2e:	b21b      	sxth	r3, r3
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	0018      	movs	r0, r3
 800cb34:	f003 fe42 	bl	80107bc <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800cb38:	4b11      	ldr	r3, [pc, #68]	@ (800cb80 <sen5xStore+0xc0>)
 800cb3a:	220c      	movs	r2, #12
 800cb3c:	5e9b      	ldrsh	r3, [r3, r2]
 800cb3e:	210a      	movs	r1, #10
 800cb40:	0018      	movs	r0, r3
 800cb42:	f7f3 fbb9 	bl	80002b8 <__divsi3>
 800cb46:	0003      	movs	r3, r0
 800cb48:	b21b      	sxth	r3, r3
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	f7f7 fd29 	bl	80045a4 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800cb52:	4b0b      	ldr	r3, [pc, #44]	@ (800cb80 <sen5xStore+0xc0>)
 800cb54:	220e      	movs	r2, #14
 800cb56:	5e9b      	ldrsh	r3, [r3, r2]
 800cb58:	4a0e      	ldr	r2, [pc, #56]	@ (800cb94 <sen5xStore+0xd4>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d00c      	beq.n	800cb78 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800cb5e:	4b08      	ldr	r3, [pc, #32]	@ (800cb80 <sen5xStore+0xc0>)
 800cb60:	220e      	movs	r2, #14
 800cb62:	5e9b      	ldrsh	r3, [r3, r2]
 800cb64:	210a      	movs	r1, #10
 800cb66:	0018      	movs	r0, r3
 800cb68:	f7f3 fba6 	bl	80002b8 <__divsi3>
 800cb6c:	0003      	movs	r3, r0
 800cb6e:	b21b      	sxth	r3, r3
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	0018      	movs	r0, r3
 800cb74:	f7f7 fdb8 	bl	80046e8 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800cb78:	46c0      	nop			@ (mov r8, r8)
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	46c0      	nop			@ (mov r8, r8)
 800cb80:	20000eb0 	.word	0x20000eb0
 800cb84:	0000ffff 	.word	0x0000ffff
 800cb88:	20000ea0 	.word	0x20000ea0
 800cb8c:	20000e9e 	.word	0x20000e9e
 800cb90:	20001e2d 	.word	0x20001e2d
 800cb94:	00007fff 	.word	0x00007fff

0800cb98 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800cb98:	b590      	push	{r4, r7, lr}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af02      	add	r7, sp, #8
 800cb9e:	6039      	str	r1, [r7, #0]
 800cba0:	0011      	movs	r1, r2
 800cba2:	1dfb      	adds	r3, r7, #7
 800cba4:	1c02      	adds	r2, r0, #0
 800cba6:	701a      	strb	r2, [r3, #0]
 800cba8:	1d3b      	adds	r3, r7, #4
 800cbaa:	1c0a      	adds	r2, r1, #0
 800cbac:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800cbae:	1dfb      	adds	r3, r7, #7
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	18db      	adds	r3, r3, r3
 800cbb6:	b299      	uxth	r1, r3
 800cbb8:	1d3b      	adds	r3, r7, #4
 800cbba:	881b      	ldrh	r3, [r3, #0]
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	4805      	ldr	r0, [pc, #20]	@ (800cbd4 <sensirion_i2c_hal_read+0x3c>)
 800cbc0:	2464      	movs	r4, #100	@ 0x64
 800cbc2:	9400      	str	r4, [sp, #0]
 800cbc4:	f006 fefe 	bl	80139c4 <HAL_I2C_Master_Receive>
 800cbc8:	0003      	movs	r3, r0
 800cbca:	b25b      	sxtb	r3, r3
}
 800cbcc:	0018      	movs	r0, r3
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	b003      	add	sp, #12
 800cbd2:	bd90      	pop	{r4, r7, pc}
 800cbd4:	20000c74 	.word	0x20000c74

0800cbd8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800cbd8:	b590      	push	{r4, r7, lr}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	6039      	str	r1, [r7, #0]
 800cbe0:	0011      	movs	r1, r2
 800cbe2:	1dfb      	adds	r3, r7, #7
 800cbe4:	1c02      	adds	r2, r0, #0
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	1d3b      	adds	r3, r7, #4
 800cbea:	1c0a      	adds	r2, r1, #0
 800cbec:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800cbee:	1dfb      	adds	r3, r7, #7
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	18db      	adds	r3, r3, r3
 800cbf6:	b299      	uxth	r1, r3
 800cbf8:	1d3b      	adds	r3, r7, #4
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	4805      	ldr	r0, [pc, #20]	@ (800cc14 <sensirion_i2c_hal_write+0x3c>)
 800cc00:	2464      	movs	r4, #100	@ 0x64
 800cc02:	9400      	str	r4, [sp, #0]
 800cc04:	f006 fdd6 	bl	80137b4 <HAL_I2C_Master_Transmit>
 800cc08:	0003      	movs	r3, r0
 800cc0a:	b25b      	sxtb	r3, r3
}
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	b003      	add	sp, #12
 800cc12:	bd90      	pop	{r4, r7, pc}
 800cc14:	20000c74 	.word	0x20000c74

0800cc18 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	22fa      	movs	r2, #250	@ 0xfa
 800cc24:	0091      	lsls	r1, r2, #2
 800cc26:	0018      	movs	r0, r3
 800cc28:	f7f3 fabc 	bl	80001a4 <__udivsi3>
 800cc2c:	0003      	movs	r3, r0
 800cc2e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	22fa      	movs	r2, #250	@ 0xfa
 800cc34:	0091      	lsls	r1, r2, #2
 800cc36:	0018      	movs	r0, r3
 800cc38:	f7f3 fb3a 	bl	80002b0 <__aeabi_uidivmod>
 800cc3c:	1e0b      	subs	r3, r1, #0
 800cc3e:	d002      	beq.n	800cc46 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	3301      	adds	r3, #1
 800cc44:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	0018      	movs	r0, r3
 800cc4a:	f005 fa5d 	bl	8012108 <HAL_Delay>
}
 800cc4e:	46c0      	nop			@ (mov r8, r8)
 800cc50:	46bd      	mov	sp, r7
 800cc52:	b004      	add	sp, #16
 800cc54:	bd80      	pop	{r7, pc}
	...

0800cc58 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800cc62:	1d3b      	adds	r3, r7, #4
 800cc64:	0018      	movs	r0, r3
 800cc66:	f000 fd01 	bl	800d66c <sen5x_read_device_status>
 800cc6a:	1e03      	subs	r3, r0, #0
 800cc6c:	d007      	beq.n	800cc7e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800cc6e:	4a28      	ldr	r2, [pc, #160]	@ (800cd10 <sen5x_check_for_errors+0xb8>)
 800cc70:	4b28      	ldr	r3, [pc, #160]	@ (800cd14 <sen5x_check_for_errors+0xbc>)
 800cc72:	0019      	movs	r1, r3
 800cc74:	2001      	movs	r0, #1
 800cc76:	f004 fdf1 	bl	801185c <CreateLine>
    return true;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e043      	b.n	800cd06 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <sen5x_check_for_errors+0x30>
    return false;
 800cc84:	2300      	movs	r3, #0
 800cc86:	e03e      	b.n	800cd06 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	2380      	movs	r3, #128	@ 0x80
 800cc8c:	039b      	lsls	r3, r3, #14
 800cc8e:	4013      	ands	r3, r2
 800cc90:	d005      	beq.n	800cc9e <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800cc92:	4a21      	ldr	r2, [pc, #132]	@ (800cd18 <sen5x_check_for_errors+0xc0>)
 800cc94:	4b21      	ldr	r3, [pc, #132]	@ (800cd1c <sen5x_check_for_errors+0xc4>)
 800cc96:	0019      	movs	r1, r3
 800cc98:	2003      	movs	r0, #3
 800cc9a:	f004 fddf 	bl	801185c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	2380      	movs	r3, #128	@ 0x80
 800cca2:	031b      	lsls	r3, r3, #12
 800cca4:	4013      	ands	r3, r2
 800cca6:	d005      	beq.n	800ccb4 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800cca8:	4a1d      	ldr	r2, [pc, #116]	@ (800cd20 <sen5x_check_for_errors+0xc8>)
 800ccaa:	4b1c      	ldr	r3, [pc, #112]	@ (800cd1c <sen5x_check_for_errors+0xc4>)
 800ccac:	0019      	movs	r1, r3
 800ccae:	2003      	movs	r0, #3
 800ccb0:	f004 fdd4 	bl	801185c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2280      	movs	r2, #128	@ 0x80
 800ccb8:	4013      	ands	r3, r2
 800ccba:	d005      	beq.n	800ccc8 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800ccbc:	4a19      	ldr	r2, [pc, #100]	@ (800cd24 <sen5x_check_for_errors+0xcc>)
 800ccbe:	4b17      	ldr	r3, [pc, #92]	@ (800cd1c <sen5x_check_for_errors+0xc4>)
 800ccc0:	0019      	movs	r1, r3
 800ccc2:	2003      	movs	r0, #3
 800ccc4:	f004 fdca 	bl	801185c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2240      	movs	r2, #64	@ 0x40
 800cccc:	4013      	ands	r3, r2
 800ccce:	d005      	beq.n	800ccdc <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800ccd0:	4a15      	ldr	r2, [pc, #84]	@ (800cd28 <sen5x_check_for_errors+0xd0>)
 800ccd2:	4b12      	ldr	r3, [pc, #72]	@ (800cd1c <sen5x_check_for_errors+0xc4>)
 800ccd4:	0019      	movs	r1, r3
 800ccd6:	2003      	movs	r0, #3
 800ccd8:	f004 fdc0 	bl	801185c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2220      	movs	r2, #32
 800cce0:	4013      	ands	r3, r2
 800cce2:	d005      	beq.n	800ccf0 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800cce4:	4a11      	ldr	r2, [pc, #68]	@ (800cd2c <sen5x_check_for_errors+0xd4>)
 800cce6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd1c <sen5x_check_for_errors+0xc4>)
 800cce8:	0019      	movs	r1, r3
 800ccea:	2003      	movs	r0, #3
 800ccec:	f004 fdb6 	bl	801185c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2210      	movs	r2, #16
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	d005      	beq.n	800cd04 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800ccf8:	4a0d      	ldr	r2, [pc, #52]	@ (800cd30 <sen5x_check_for_errors+0xd8>)
 800ccfa:	4b08      	ldr	r3, [pc, #32]	@ (800cd1c <sen5x_check_for_errors+0xc4>)
 800ccfc:	0019      	movs	r1, r3
 800ccfe:	2003      	movs	r0, #3
 800cd00:	f004 fdac 	bl	801185c <CreateLine>
  }
  return 1;
 800cd04:	2301      	movs	r3, #1
}
 800cd06:	0018      	movs	r0, r3
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	b002      	add	sp, #8
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	46c0      	nop			@ (mov r8, r8)
 800cd10:	0802a570 	.word	0x0802a570
 800cd14:	0802a0f4 	.word	0x0802a0f4
 800cd18:	0802a59c 	.word	0x0802a59c
 800cd1c:	0802a0c8 	.word	0x0802a0c8
 800cd20:	0802a5bc 	.word	0x0802a5bc
 800cd24:	0802a5d8 	.word	0x0802a5d8
 800cd28:	0802a5fc 	.word	0x0802a5fc
 800cd2c:	0802a61c 	.word	0x0802a61c
 800cd30:	0802a630 	.word	0x0802a630

0800cd34 <set_light_on_state>:

void set_light_on_state(void) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800cd38:	4b15      	ldr	r3, [pc, #84]	@ (800cd90 <set_light_on_state+0x5c>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	4053      	eors	r3, r2
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d008      	beq.n	800cd58 <set_light_on_state+0x24>
    sen5x_Power_On();
 800cd46:	f7ff fb43 	bl	800c3d0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800cd4a:	4a12      	ldr	r2, [pc, #72]	@ (800cd94 <set_light_on_state+0x60>)
 800cd4c:	4b12      	ldr	r3, [pc, #72]	@ (800cd98 <set_light_on_state+0x64>)
 800cd4e:	0019      	movs	r1, r3
 800cd50:	2003      	movs	r0, #3
 800cd52:	f004 fd83 	bl	801185c <CreateLine>
 800cd56:	e00a      	b.n	800cd6e <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800cd58:	f005 f9cc 	bl	80120f4 <HAL_GetTick>
 800cd5c:	0002      	movs	r2, r0
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd9c <set_light_on_state+0x68>)
 800cd60:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800cd62:	4a0f      	ldr	r2, [pc, #60]	@ (800cda0 <set_light_on_state+0x6c>)
 800cd64:	4b0c      	ldr	r3, [pc, #48]	@ (800cd98 <set_light_on_state+0x64>)
 800cd66:	0019      	movs	r1, r3
 800cd68:	2003      	movs	r0, #3
 800cd6a:	f004 fd77 	bl	801185c <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800cd6e:	f7ff fcbf 	bl	800c6f0 <sen5x_lightup_measurement>
 800cd72:	1e03      	subs	r3, r0, #0
 800cd74:	d005      	beq.n	800cd82 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800cd76:	4a0b      	ldr	r2, [pc, #44]	@ (800cda4 <set_light_on_state+0x70>)
 800cd78:	4b0b      	ldr	r3, [pc, #44]	@ (800cda8 <set_light_on_state+0x74>)
 800cd7a:	0019      	movs	r1, r3
 800cd7c:	2001      	movs	r0, #1
 800cd7e:	f004 fd6d 	bl	801185c <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800cd82:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <set_light_on_state+0x78>)
 800cd84:	2203      	movs	r2, #3
 800cd86:	701a      	strb	r2, [r3, #0]
}
 800cd88:	46c0      	nop			@ (mov r8, r8)
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	20000e9d 	.word	0x20000e9d
 800cd94:	0802a66c 	.word	0x0802a66c
 800cd98:	0802a0c8 	.word	0x0802a0c8
 800cd9c:	20000eac 	.word	0x20000eac
 800cda0:	0802a698 	.word	0x0802a698
 800cda4:	0802a6b0 	.word	0x0802a6b0
 800cda8:	0802a0f4 	.word	0x0802a0f4
 800cdac:	2000009d 	.word	0x2000009d

0800cdb0 <sen5x_statemachine>:

void sen5x_statemachine() {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800cdb6:	1dfb      	adds	r3, r7, #7
 800cdb8:	2200      	movs	r2, #0
 800cdba:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800cdbc:	4b86      	ldr	r3, [pc, #536]	@ (800cfd8 <sen5x_statemachine+0x228>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	0018      	movs	r0, r3
 800cdc2:	f004 fcf5 	bl	80117b0 <TimestampIsReached>
 800cdc6:	1e03      	subs	r3, r0, #0
 800cdc8:	d100      	bne.n	800cdcc <sen5x_statemachine+0x1c>
 800cdca:	e100      	b.n	800cfce <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800cdcc:	4b83      	ldr	r3, [pc, #524]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	2b05      	cmp	r3, #5
 800cdd2:	d900      	bls.n	800cdd6 <sen5x_statemachine+0x26>
 800cdd4:	e0fb      	b.n	800cfce <sen5x_statemachine+0x21e>
 800cdd6:	009a      	lsls	r2, r3, #2
 800cdd8:	4b81      	ldr	r3, [pc, #516]	@ (800cfe0 <sen5x_statemachine+0x230>)
 800cdda:	18d3      	adds	r3, r2, r3
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800cde0:	4a80      	ldr	r2, [pc, #512]	@ (800cfe4 <sen5x_statemachine+0x234>)
 800cde2:	4b81      	ldr	r3, [pc, #516]	@ (800cfe8 <sen5x_statemachine+0x238>)
 800cde4:	0019      	movs	r1, r3
 800cde6:	2001      	movs	r0, #1
 800cde8:	f004 fd38 	bl	801185c <CreateLine>
      SetPMSensorStatus(false);
 800cdec:	2000      	movs	r0, #0
 800cdee:	f7fe fb23 	bl	800b438 <SetPMSensorStatus>
      DisablePMSensor();
 800cdf2:	f7fe fab9 	bl	800b368 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800cdf6:	f005 f97d 	bl	80120f4 <HAL_GetTick>
 800cdfa:	0003      	movs	r3, r0
 800cdfc:	4a7b      	ldr	r2, [pc, #492]	@ (800cfec <sen5x_statemachine+0x23c>)
 800cdfe:	189a      	adds	r2, r3, r2
 800ce00:	4b75      	ldr	r3, [pc, #468]	@ (800cfd8 <sen5x_statemachine+0x228>)
 800ce02:	601a      	str	r2, [r3, #0]
      break;
 800ce04:	e0e3      	b.n	800cfce <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800ce06:	f005 f975 	bl	80120f4 <HAL_GetTick>
 800ce0a:	0003      	movs	r3, r0
 800ce0c:	4a78      	ldr	r2, [pc, #480]	@ (800cff0 <sen5x_statemachine+0x240>)
 800ce0e:	189a      	adds	r2, r3, r2
 800ce10:	4b71      	ldr	r3, [pc, #452]	@ (800cfd8 <sen5x_statemachine+0x228>)
 800ce12:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800ce14:	f7ff ff8e 	bl	800cd34 <set_light_on_state>
      break;
 800ce18:	e0d9      	b.n	800cfce <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800ce1a:	4b70      	ldr	r3, [pc, #448]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800ce1c:	2202      	movs	r2, #2
 800ce1e:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800ce20:	4b74      	ldr	r3, [pc, #464]	@ (800cff4 <sen5x_statemachine+0x244>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b05      	cmp	r3, #5
 800ce26:	d905      	bls.n	800ce34 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800ce28:	4b6c      	ldr	r3, [pc, #432]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800ce2e:	f7ff faff 	bl	800c430 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800ce32:	e0c9      	b.n	800cfc8 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800ce34:	f7ff ff10 	bl	800cc58 <sen5x_check_for_errors>
 800ce38:	1e03      	subs	r3, r0, #0
 800ce3a:	d01f      	beq.n	800ce7c <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800ce3c:	f000 fc68 	bl	800d710 <sen5x_device_reset>
 800ce40:	1e03      	subs	r3, r0, #0
 800ce42:	d00f      	beq.n	800ce64 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800ce44:	4a6c      	ldr	r2, [pc, #432]	@ (800cff8 <sen5x_statemachine+0x248>)
 800ce46:	4b68      	ldr	r3, [pc, #416]	@ (800cfe8 <sen5x_statemachine+0x238>)
 800ce48:	0019      	movs	r1, r3
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	f004 fd06 	bl	801185c <CreateLine>
            sen5xErrors++;
 800ce50:	4b68      	ldr	r3, [pc, #416]	@ (800cff4 <sen5x_statemachine+0x244>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	3301      	adds	r3, #1
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	4b66      	ldr	r3, [pc, #408]	@ (800cff4 <sen5x_statemachine+0x244>)
 800ce5a:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800ce5c:	4b5f      	ldr	r3, [pc, #380]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800ce5e:	2203      	movs	r2, #3
 800ce60:	701a      	strb	r2, [r3, #0]
 800ce62:	e005      	b.n	800ce70 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800ce64:	4a65      	ldr	r2, [pc, #404]	@ (800cffc <sen5x_statemachine+0x24c>)
 800ce66:	4b66      	ldr	r3, [pc, #408]	@ (800d000 <sen5x_statemachine+0x250>)
 800ce68:	0019      	movs	r1, r3
 800ce6a:	2002      	movs	r0, #2
 800ce6c:	f004 fcf6 	bl	801185c <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800ce70:	f005 f940 	bl	80120f4 <HAL_GetTick>
 800ce74:	0002      	movs	r2, r0
 800ce76:	4b58      	ldr	r3, [pc, #352]	@ (800cfd8 <sen5x_statemachine+0x228>)
 800ce78:	601a      	str	r2, [r3, #0]
      break;
 800ce7a:	e0a5      	b.n	800cfc8 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800ce7c:	4b5d      	ldr	r3, [pc, #372]	@ (800cff4 <sen5x_statemachine+0x244>)
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d100      	bne.n	800ce86 <sen5x_statemachine+0xd6>
 800ce84:	e0a0      	b.n	800cfc8 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800ce86:	4b5b      	ldr	r3, [pc, #364]	@ (800cff4 <sen5x_statemachine+0x244>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800ce8c:	4a5d      	ldr	r2, [pc, #372]	@ (800d004 <sen5x_statemachine+0x254>)
 800ce8e:	4b5e      	ldr	r3, [pc, #376]	@ (800d008 <sen5x_statemachine+0x258>)
 800ce90:	0019      	movs	r1, r3
 800ce92:	2003      	movs	r0, #3
 800ce94:	f004 fce2 	bl	801185c <CreateLine>
      break;
 800ce98:	e096      	b.n	800cfc8 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800ce9a:	1dfb      	adds	r3, r7, #7
 800ce9c:	0018      	movs	r0, r3
 800ce9e:	f000 f953 	bl	800d148 <sen5x_read_data_ready>
      if (data_ready) {
 800cea2:	1dfb      	adds	r3, r7, #7
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d02c      	beq.n	800cf04 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800ceaa:	f003 fbe7 	bl	801067c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800ceae:	4b57      	ldr	r3, [pc, #348]	@ (800d00c <sen5x_statemachine+0x25c>)
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f7ff fcc3 	bl	800c83c <sen5x_read_measurement>
 800ceb6:	1e03      	subs	r3, r0, #0
 800ceb8:	d00b      	beq.n	800ced2 <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800ceba:	4a55      	ldr	r2, [pc, #340]	@ (800d010 <sen5x_statemachine+0x260>)
 800cebc:	4b4a      	ldr	r3, [pc, #296]	@ (800cfe8 <sen5x_statemachine+0x238>)
 800cebe:	0019      	movs	r1, r3
 800cec0:	2001      	movs	r0, #1
 800cec2:	f004 fccb 	bl	801185c <CreateLine>
          sen5xErrors++;
 800cec6:	4b4b      	ldr	r3, [pc, #300]	@ (800cff4 <sen5x_statemachine+0x244>)
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	3301      	adds	r3, #1
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	4b49      	ldr	r3, [pc, #292]	@ (800cff4 <sen5x_statemachine+0x244>)
 800ced0:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800ced2:	4b50      	ldr	r3, [pc, #320]	@ (800d014 <sen5x_statemachine+0x264>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	3301      	adds	r3, #1
 800ced8:	b2da      	uxtb	r2, r3
 800ceda:	4b4e      	ldr	r3, [pc, #312]	@ (800d014 <sen5x_statemachine+0x264>)
 800cedc:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800cede:	4b4d      	ldr	r3, [pc, #308]	@ (800d014 <sen5x_statemachine+0x264>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b1f      	cmp	r3, #31
 800cee4:	d102      	bne.n	800ceec <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800cee6:	4b4b      	ldr	r3, [pc, #300]	@ (800d014 <sen5x_statemachine+0x264>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800ceec:	4b49      	ldr	r3, [pc, #292]	@ (800d014 <sen5x_statemachine+0x264>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d901      	bls.n	800cef8 <sen5x_statemachine+0x148>
          sen5xStore();
 800cef4:	f7ff fde4 	bl	800cac0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800cef8:	4b46      	ldr	r3, [pc, #280]	@ (800d014 <sen5x_statemachine+0x264>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d101      	bne.n	800cf04 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800cf00:	f7ff fcf8 	bl	800c8f4 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800cf04:	4b44      	ldr	r3, [pc, #272]	@ (800d018 <sen5x_statemachine+0x268>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d103      	bne.n	800cf14 <sen5x_statemachine+0x164>
 800cf0c:	4b41      	ldr	r3, [pc, #260]	@ (800d014 <sen5x_statemachine+0x264>)
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d95b      	bls.n	800cfcc <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800cf14:	4b31      	ldr	r3, [pc, #196]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800cf16:	2204      	movs	r2, #4
 800cf18:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cf1a:	e057      	b.n	800cfcc <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800cf1c:	f7fb fa90 	bl	8008440 <RTC_GetWeekday>
 800cf20:	0003      	movs	r3, r0
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d11a      	bne.n	800cf5c <sen5x_statemachine+0x1ac>
 800cf26:	4b3d      	ldr	r3, [pc, #244]	@ (800d01c <sen5x_statemachine+0x26c>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	4053      	eors	r3, r2
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d013      	beq.n	800cf5c <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800cf34:	f000 f9ee 	bl	800d314 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800cf38:	4a39      	ldr	r2, [pc, #228]	@ (800d020 <sen5x_statemachine+0x270>)
 800cf3a:	4b31      	ldr	r3, [pc, #196]	@ (800d000 <sen5x_statemachine+0x250>)
 800cf3c:	0019      	movs	r1, r3
 800cf3e:	2002      	movs	r0, #2
 800cf40:	f004 fc8c 	bl	801185c <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800cf44:	f005 f8d6 	bl	80120f4 <HAL_GetTick>
 800cf48:	0003      	movs	r3, r0
 800cf4a:	4a36      	ldr	r2, [pc, #216]	@ (800d024 <sen5x_statemachine+0x274>)
 800cf4c:	189a      	adds	r2, r3, r2
 800cf4e:	4b22      	ldr	r3, [pc, #136]	@ (800cfd8 <sen5x_statemachine+0x228>)
 800cf50:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800cf52:	4b32      	ldr	r3, [pc, #200]	@ (800d01c <sen5x_statemachine+0x26c>)
 800cf54:	2201      	movs	r2, #1
 800cf56:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800cf58:	f7ff fbca 	bl	800c6f0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800cf5c:	4b1f      	ldr	r3, [pc, #124]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800cf5e:	2205      	movs	r2, #5
 800cf60:	701a      	strb	r2, [r3, #0]
      break;
 800cf62:	e034      	b.n	800cfce <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800cf64:	4b2c      	ldr	r3, [pc, #176]	@ (800d018 <sen5x_statemachine+0x268>)
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	4053      	eors	r3, r2
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d01c      	beq.n	800cfac <sen5x_statemachine+0x1fc>
 800cf72:	4b2d      	ldr	r3, [pc, #180]	@ (800d028 <sen5x_statemachine+0x278>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2201      	movs	r2, #1
 800cf78:	4053      	eors	r3, r2
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d015      	beq.n	800cfac <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800cf80:	f7ff fc02 	bl	800c788 <sen5x_extinguish_measurement>
 800cf84:	1e03      	subs	r3, r0, #0
 800cf86:	d005      	beq.n	800cf94 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800cf88:	4a28      	ldr	r2, [pc, #160]	@ (800d02c <sen5x_statemachine+0x27c>)
 800cf8a:	4b17      	ldr	r3, [pc, #92]	@ (800cfe8 <sen5x_statemachine+0x238>)
 800cf8c:	0019      	movs	r1, r3
 800cf8e:	2001      	movs	r0, #1
 800cf90:	f004 fc64 	bl	801185c <CreateLine>
        }
        sen5xSamples = 0;
 800cf94:	4b1f      	ldr	r3, [pc, #124]	@ (800d014 <sen5x_statemachine+0x264>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800cf9a:	f7ff fa49 	bl	800c430 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	f7fe fa4a 	bl	800b438 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800cfa4:	4b0d      	ldr	r3, [pc, #52]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	e002      	b.n	800cfb2 <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800cfac:	4b0b      	ldr	r3, [pc, #44]	@ (800cfdc <sen5x_statemachine+0x22c>)
 800cfae:	2203      	movs	r2, #3
 800cfb0:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800cfb2:	f003 fb89 	bl	80106c8 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800cfb6:	f005 f89d 	bl	80120f4 <HAL_GetTick>
 800cfba:	0003      	movs	r3, r0
 800cfbc:	22fa      	movs	r2, #250	@ 0xfa
 800cfbe:	0092      	lsls	r2, r2, #2
 800cfc0:	189a      	adds	r2, r3, r2
 800cfc2:	4b05      	ldr	r3, [pc, #20]	@ (800cfd8 <sen5x_statemachine+0x228>)
 800cfc4:	601a      	str	r2, [r3, #0]
    }
  }
}
 800cfc6:	e002      	b.n	800cfce <sen5x_statemachine+0x21e>
      break;
 800cfc8:	46c0      	nop			@ (mov r8, r8)
 800cfca:	e000      	b.n	800cfce <sen5x_statemachine+0x21e>
      break;
 800cfcc:	46c0      	nop			@ (mov r8, r8)
}
 800cfce:	46c0      	nop			@ (mov r8, r8)
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	b002      	add	sp, #8
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	46c0      	nop			@ (mov r8, r8)
 800cfd8:	20000eac 	.word	0x20000eac
 800cfdc:	2000009d 	.word	0x2000009d
 800cfe0:	0802b120 	.word	0x0802b120
 800cfe4:	0802a6dc 	.word	0x0802a6dc
 800cfe8:	0802a0f4 	.word	0x0802a0f4
 800cfec:	002fefd8 	.word	0x002fefd8
 800cff0:	00005910 	.word	0x00005910
 800cff4:	20000ea9 	.word	0x20000ea9
 800cff8:	0802a70c 	.word	0x0802a70c
 800cffc:	0802a724 	.word	0x0802a724
 800d000:	0802a088 	.word	0x0802a088
 800d004:	0802a73c 	.word	0x0802a73c
 800d008:	0802a0c8 	.word	0x0802a0c8
 800d00c:	20000eb0 	.word	0x20000eb0
 800d010:	0802a750 	.word	0x0802a750
 800d014:	20000ea8 	.word	0x20000ea8
 800d018:	20001e2d 	.word	0x20001e2d
 800d01c:	20000e9c 	.word	0x20000e9c
 800d020:	0802a780 	.word	0x0802a780
 800d024:	00002710 	.word	0x00002710
 800d028:	20001e2e 	.word	0x20001e2e
 800d02c:	0802a798 	.word	0x0802a798

0800d030 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800d030:	b590      	push	{r4, r7, lr}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d036:	1dbb      	adds	r3, r7, #6
 800d038:	2200      	movs	r2, #0
 800d03a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800d03c:	1dbc      	adds	r4, r7, #6
 800d03e:	1dbb      	adds	r3, r7, #6
 800d040:	8819      	ldrh	r1, [r3, #0]
 800d042:	003b      	movs	r3, r7
 800d044:	2221      	movs	r2, #33	@ 0x21
 800d046:	0018      	movs	r0, r3
 800d048:	f001 fb56 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d04c:	0003      	movs	r3, r0
 800d04e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d050:	1d3c      	adds	r4, r7, #4
 800d052:	1dbb      	adds	r3, r7, #6
 800d054:	881a      	ldrh	r2, [r3, #0]
 800d056:	003b      	movs	r3, r7
 800d058:	0019      	movs	r1, r3
 800d05a:	2069      	movs	r0, #105	@ 0x69
 800d05c:	f001 fbd0 	bl	800e800 <sensirion_i2c_write_data>
 800d060:	0003      	movs	r3, r0
 800d062:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d064:	1d3b      	adds	r3, r7, #4
 800d066:	2200      	movs	r2, #0
 800d068:	5e9b      	ldrsh	r3, [r3, r2]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d003      	beq.n	800d076 <sen5x_start_measurement+0x46>
        return error;
 800d06e:	1d3b      	adds	r3, r7, #4
 800d070:	2200      	movs	r2, #0
 800d072:	5e9b      	ldrsh	r3, [r3, r2]
 800d074:	e004      	b.n	800d080 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800d076:	4b04      	ldr	r3, [pc, #16]	@ (800d088 <sen5x_start_measurement+0x58>)
 800d078:	0018      	movs	r0, r3
 800d07a:	f7ff fdcd 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	0018      	movs	r0, r3
 800d082:	46bd      	mov	sp, r7
 800d084:	b003      	add	sp, #12
 800d086:	bd90      	pop	{r4, r7, pc}
 800d088:	0000c350 	.word	0x0000c350

0800d08c <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d092:	1dbb      	adds	r3, r7, #6
 800d094:	2200      	movs	r2, #0
 800d096:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800d098:	1dbc      	adds	r4, r7, #6
 800d09a:	1dbb      	adds	r3, r7, #6
 800d09c:	8819      	ldrh	r1, [r3, #0]
 800d09e:	003b      	movs	r3, r7
 800d0a0:	2237      	movs	r2, #55	@ 0x37
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f001 fb28 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d0a8:	0003      	movs	r3, r0
 800d0aa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d0ac:	1d3c      	adds	r4, r7, #4
 800d0ae:	1dbb      	adds	r3, r7, #6
 800d0b0:	881a      	ldrh	r2, [r3, #0]
 800d0b2:	003b      	movs	r3, r7
 800d0b4:	0019      	movs	r1, r3
 800d0b6:	2069      	movs	r0, #105	@ 0x69
 800d0b8:	f001 fba2 	bl	800e800 <sensirion_i2c_write_data>
 800d0bc:	0003      	movs	r3, r0
 800d0be:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d0c0:	1d3b      	adds	r3, r7, #4
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	5e9b      	ldrsh	r3, [r3, r2]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800d0ca:	1d3b      	adds	r3, r7, #4
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	5e9b      	ldrsh	r3, [r3, r2]
 800d0d0:	e004      	b.n	800d0dc <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800d0d2:	4b04      	ldr	r3, [pc, #16]	@ (800d0e4 <sen5x_start_measurement_without_pm+0x58>)
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f7ff fd9f 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	0018      	movs	r0, r3
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	b003      	add	sp, #12
 800d0e2:	bd90      	pop	{r4, r7, pc}
 800d0e4:	0000c350 	.word	0x0000c350

0800d0e8 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800d0e8:	b590      	push	{r4, r7, lr}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d0ee:	1dbb      	adds	r3, r7, #6
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800d0f4:	1dbc      	adds	r4, r7, #6
 800d0f6:	2382      	movs	r3, #130	@ 0x82
 800d0f8:	005a      	lsls	r2, r3, #1
 800d0fa:	1dbb      	adds	r3, r7, #6
 800d0fc:	8819      	ldrh	r1, [r3, #0]
 800d0fe:	003b      	movs	r3, r7
 800d100:	0018      	movs	r0, r3
 800d102:	f001 faf9 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d106:	0003      	movs	r3, r0
 800d108:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d10a:	1d3c      	adds	r4, r7, #4
 800d10c:	1dbb      	adds	r3, r7, #6
 800d10e:	881a      	ldrh	r2, [r3, #0]
 800d110:	003b      	movs	r3, r7
 800d112:	0019      	movs	r1, r3
 800d114:	2069      	movs	r0, #105	@ 0x69
 800d116:	f001 fb73 	bl	800e800 <sensirion_i2c_write_data>
 800d11a:	0003      	movs	r3, r0
 800d11c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d11e:	1d3b      	adds	r3, r7, #4
 800d120:	2200      	movs	r2, #0
 800d122:	5e9b      	ldrsh	r3, [r3, r2]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d003      	beq.n	800d130 <sen5x_stop_measurement+0x48>
        return error;
 800d128:	1d3b      	adds	r3, r7, #4
 800d12a:	2200      	movs	r2, #0
 800d12c:	5e9b      	ldrsh	r3, [r3, r2]
 800d12e:	e004      	b.n	800d13a <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800d130:	4b04      	ldr	r3, [pc, #16]	@ (800d144 <sen5x_stop_measurement+0x5c>)
 800d132:	0018      	movs	r0, r3
 800d134:	f7ff fd70 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	0018      	movs	r0, r3
 800d13c:	46bd      	mov	sp, r7
 800d13e:	b003      	add	sp, #12
 800d140:	bd90      	pop	{r4, r7, pc}
 800d142:	46c0      	nop			@ (mov r8, r8)
 800d144:	00030d40 	.word	0x00030d40

0800d148 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800d148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800d150:	250e      	movs	r5, #14
 800d152:	197b      	adds	r3, r7, r5
 800d154:	2200      	movs	r2, #0
 800d156:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800d158:	197c      	adds	r4, r7, r5
 800d15a:	4a22      	ldr	r2, [pc, #136]	@ (800d1e4 <sen5x_read_data_ready+0x9c>)
 800d15c:	197b      	adds	r3, r7, r5
 800d15e:	8819      	ldrh	r1, [r3, #0]
 800d160:	2308      	movs	r3, #8
 800d162:	18fb      	adds	r3, r7, r3
 800d164:	0018      	movs	r0, r3
 800d166:	f001 fac7 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d16a:	0003      	movs	r3, r0
 800d16c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d16e:	260c      	movs	r6, #12
 800d170:	19bc      	adds	r4, r7, r6
 800d172:	197b      	adds	r3, r7, r5
 800d174:	881a      	ldrh	r2, [r3, #0]
 800d176:	2308      	movs	r3, #8
 800d178:	18fb      	adds	r3, r7, r3
 800d17a:	0019      	movs	r1, r3
 800d17c:	2069      	movs	r0, #105	@ 0x69
 800d17e:	f001 fb3f 	bl	800e800 <sensirion_i2c_write_data>
 800d182:	0003      	movs	r3, r0
 800d184:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d186:	19bb      	adds	r3, r7, r6
 800d188:	2200      	movs	r2, #0
 800d18a:	5e9b      	ldrsh	r3, [r3, r2]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d003      	beq.n	800d198 <sen5x_read_data_ready+0x50>
        return error;
 800d190:	19bb      	adds	r3, r7, r6
 800d192:	2200      	movs	r2, #0
 800d194:	5e9b      	ldrsh	r3, [r3, r2]
 800d196:	e020      	b.n	800d1da <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d198:	4b13      	ldr	r3, [pc, #76]	@ (800d1e8 <sen5x_read_data_ready+0xa0>)
 800d19a:	0018      	movs	r0, r3
 800d19c:	f7ff fd3c 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800d1a0:	250c      	movs	r5, #12
 800d1a2:	197c      	adds	r4, r7, r5
 800d1a4:	2308      	movs	r3, #8
 800d1a6:	18fb      	adds	r3, r7, r3
 800d1a8:	2202      	movs	r2, #2
 800d1aa:	0019      	movs	r1, r3
 800d1ac:	2069      	movs	r0, #105	@ 0x69
 800d1ae:	f001 fb3f 	bl	800e830 <sensirion_i2c_read_data_inplace>
 800d1b2:	0003      	movs	r3, r0
 800d1b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d1b6:	197b      	adds	r3, r7, r5
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	5e9b      	ldrsh	r3, [r3, r2]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <sen5x_read_data_ready+0x80>
        return error;
 800d1c0:	197b      	adds	r3, r7, r5
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	5e9b      	ldrsh	r3, [r3, r2]
 800d1c6:	e008      	b.n	800d1da <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800d1c8:	2308      	movs	r3, #8
 800d1ca:	18fb      	adds	r3, r7, r3
 800d1cc:	785b      	ldrb	r3, [r3, #1]
 800d1ce:	1e5a      	subs	r2, r3, #1
 800d1d0:	4193      	sbcs	r3, r2
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	0018      	movs	r0, r3
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	b005      	add	sp, #20
 800d1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e2:	46c0      	nop			@ (mov r8, r8)
 800d1e4:	00000202 	.word	0x00000202
 800d1e8:	00004e20 	.word	0x00004e20

0800d1ec <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800d1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ee:	b08d      	sub	sp, #52	@ 0x34
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	607a      	str	r2, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800d1fa:	252e      	movs	r5, #46	@ 0x2e
 800d1fc:	197b      	adds	r3, r7, r5
 800d1fe:	2200      	movs	r2, #0
 800d200:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800d202:	197c      	adds	r4, r7, r5
 800d204:	23f1      	movs	r3, #241	@ 0xf1
 800d206:	009a      	lsls	r2, r3, #2
 800d208:	197b      	adds	r3, r7, r5
 800d20a:	8819      	ldrh	r1, [r3, #0]
 800d20c:	2314      	movs	r3, #20
 800d20e:	18fb      	adds	r3, r7, r3
 800d210:	0018      	movs	r0, r3
 800d212:	f001 fa71 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d216:	0003      	movs	r3, r0
 800d218:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d21a:	262c      	movs	r6, #44	@ 0x2c
 800d21c:	19bc      	adds	r4, r7, r6
 800d21e:	197b      	adds	r3, r7, r5
 800d220:	881a      	ldrh	r2, [r3, #0]
 800d222:	2314      	movs	r3, #20
 800d224:	18fb      	adds	r3, r7, r3
 800d226:	0019      	movs	r1, r3
 800d228:	2069      	movs	r0, #105	@ 0x69
 800d22a:	f001 fae9 	bl	800e800 <sensirion_i2c_write_data>
 800d22e:	0003      	movs	r3, r0
 800d230:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d232:	19bb      	adds	r3, r7, r6
 800d234:	2200      	movs	r2, #0
 800d236:	5e9b      	ldrsh	r3, [r3, r2]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <sen5x_read_measured_values+0x58>
        return error;
 800d23c:	19bb      	adds	r3, r7, r6
 800d23e:	2200      	movs	r2, #0
 800d240:	5e9b      	ldrsh	r3, [r3, r2]
 800d242:	e060      	b.n	800d306 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d244:	4b32      	ldr	r3, [pc, #200]	@ (800d310 <sen5x_read_measured_values+0x124>)
 800d246:	0018      	movs	r0, r3
 800d248:	f7ff fce6 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800d24c:	252c      	movs	r5, #44	@ 0x2c
 800d24e:	197c      	adds	r4, r7, r5
 800d250:	2314      	movs	r3, #20
 800d252:	18fb      	adds	r3, r7, r3
 800d254:	2210      	movs	r2, #16
 800d256:	0019      	movs	r1, r3
 800d258:	2069      	movs	r0, #105	@ 0x69
 800d25a:	f001 fae9 	bl	800e830 <sensirion_i2c_read_data_inplace>
 800d25e:	0003      	movs	r3, r0
 800d260:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d262:	197b      	adds	r3, r7, r5
 800d264:	2200      	movs	r2, #0
 800d266:	5e9b      	ldrsh	r3, [r3, r2]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <sen5x_read_measured_values+0x88>
        return error;
 800d26c:	197b      	adds	r3, r7, r5
 800d26e:	2200      	movs	r2, #0
 800d270:	5e9b      	ldrsh	r3, [r3, r2]
 800d272:	e048      	b.n	800d306 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800d274:	2414      	movs	r4, #20
 800d276:	193b      	adds	r3, r7, r4
 800d278:	0018      	movs	r0, r3
 800d27a:	f000 fa79 	bl	800d770 <sensirion_common_bytes_to_uint16_t>
 800d27e:	0003      	movs	r3, r0
 800d280:	001a      	movs	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800d286:	193b      	adds	r3, r7, r4
 800d288:	3302      	adds	r3, #2
 800d28a:	0018      	movs	r0, r3
 800d28c:	f000 fa70 	bl	800d770 <sensirion_common_bytes_to_uint16_t>
 800d290:	0003      	movs	r3, r0
 800d292:	001a      	movs	r2, r3
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800d298:	193b      	adds	r3, r7, r4
 800d29a:	3304      	adds	r3, #4
 800d29c:	0018      	movs	r0, r3
 800d29e:	f000 fa67 	bl	800d770 <sensirion_common_bytes_to_uint16_t>
 800d2a2:	0003      	movs	r3, r0
 800d2a4:	001a      	movs	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800d2aa:	193b      	adds	r3, r7, r4
 800d2ac:	3306      	adds	r3, #6
 800d2ae:	0018      	movs	r0, r3
 800d2b0:	f000 fa5e 	bl	800d770 <sensirion_common_bytes_to_uint16_t>
 800d2b4:	0003      	movs	r3, r0
 800d2b6:	001a      	movs	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800d2bc:	193b      	adds	r3, r7, r4
 800d2be:	3308      	adds	r3, #8
 800d2c0:	0018      	movs	r0, r3
 800d2c2:	f000 fa81 	bl	800d7c8 <sensirion_common_bytes_to_int16_t>
 800d2c6:	0003      	movs	r3, r0
 800d2c8:	001a      	movs	r2, r3
 800d2ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2cc:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800d2ce:	193b      	adds	r3, r7, r4
 800d2d0:	330a      	adds	r3, #10
 800d2d2:	0018      	movs	r0, r3
 800d2d4:	f000 fa78 	bl	800d7c8 <sensirion_common_bytes_to_int16_t>
 800d2d8:	0003      	movs	r3, r0
 800d2da:	001a      	movs	r2, r3
 800d2dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2de:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800d2e0:	193b      	adds	r3, r7, r4
 800d2e2:	330c      	adds	r3, #12
 800d2e4:	0018      	movs	r0, r3
 800d2e6:	f000 fa6f 	bl	800d7c8 <sensirion_common_bytes_to_int16_t>
 800d2ea:	0003      	movs	r3, r0
 800d2ec:	001a      	movs	r2, r3
 800d2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f0:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800d2f2:	193b      	adds	r3, r7, r4
 800d2f4:	330e      	adds	r3, #14
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	f000 fa66 	bl	800d7c8 <sensirion_common_bytes_to_int16_t>
 800d2fc:	0003      	movs	r3, r0
 800d2fe:	001a      	movs	r2, r3
 800d300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d302:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800d304:	2300      	movs	r3, #0
}
 800d306:	0018      	movs	r0, r3
 800d308:	46bd      	mov	sp, r7
 800d30a:	b00d      	add	sp, #52	@ 0x34
 800d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30e:	46c0      	nop			@ (mov r8, r8)
 800d310:	00004e20 	.word	0x00004e20

0800d314 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800d314:	b590      	push	{r4, r7, lr}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d31a:	1dbb      	adds	r3, r7, #6
 800d31c:	2200      	movs	r2, #0
 800d31e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800d320:	1dbc      	adds	r4, r7, #6
 800d322:	4a12      	ldr	r2, [pc, #72]	@ (800d36c <sen5x_start_fan_cleaning+0x58>)
 800d324:	1dbb      	adds	r3, r7, #6
 800d326:	8819      	ldrh	r1, [r3, #0]
 800d328:	003b      	movs	r3, r7
 800d32a:	0018      	movs	r0, r3
 800d32c:	f001 f9e4 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d330:	0003      	movs	r3, r0
 800d332:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d334:	1d3c      	adds	r4, r7, #4
 800d336:	1dbb      	adds	r3, r7, #6
 800d338:	881a      	ldrh	r2, [r3, #0]
 800d33a:	003b      	movs	r3, r7
 800d33c:	0019      	movs	r1, r3
 800d33e:	2069      	movs	r0, #105	@ 0x69
 800d340:	f001 fa5e 	bl	800e800 <sensirion_i2c_write_data>
 800d344:	0003      	movs	r3, r0
 800d346:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d348:	1d3b      	adds	r3, r7, #4
 800d34a:	2200      	movs	r2, #0
 800d34c:	5e9b      	ldrsh	r3, [r3, r2]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d003      	beq.n	800d35a <sen5x_start_fan_cleaning+0x46>
        return error;
 800d352:	1d3b      	adds	r3, r7, #4
 800d354:	2200      	movs	r2, #0
 800d356:	5e9b      	ldrsh	r3, [r3, r2]
 800d358:	e004      	b.n	800d364 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800d35a:	4b05      	ldr	r3, [pc, #20]	@ (800d370 <sen5x_start_fan_cleaning+0x5c>)
 800d35c:	0018      	movs	r0, r3
 800d35e:	f7ff fc5b 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d362:	2300      	movs	r3, #0
}
 800d364:	0018      	movs	r0, r3
 800d366:	46bd      	mov	sp, r7
 800d368:	b003      	add	sp, #12
 800d36a:	bd90      	pop	{r4, r7, pc}
 800d36c:	00005607 	.word	0x00005607
 800d370:	00004e20 	.word	0x00004e20

0800d374 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800d374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d376:	b087      	sub	sp, #28
 800d378:	af00      	add	r7, sp, #0
 800d37a:	0004      	movs	r4, r0
 800d37c:	0008      	movs	r0, r1
 800d37e:	0011      	movs	r1, r2
 800d380:	1dbb      	adds	r3, r7, #6
 800d382:	1c22      	adds	r2, r4, #0
 800d384:	801a      	strh	r2, [r3, #0]
 800d386:	1d3b      	adds	r3, r7, #4
 800d388:	1c02      	adds	r2, r0, #0
 800d38a:	801a      	strh	r2, [r3, #0]
 800d38c:	1cbb      	adds	r3, r7, #2
 800d38e:	1c0a      	adds	r2, r1, #0
 800d390:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800d392:	2516      	movs	r5, #22
 800d394:	197b      	adds	r3, r7, r5
 800d396:	2200      	movs	r2, #0
 800d398:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800d39a:	197c      	adds	r4, r7, r5
 800d39c:	4a25      	ldr	r2, [pc, #148]	@ (800d434 <sen5x_set_temperature_offset_parameters+0xc0>)
 800d39e:	197b      	adds	r3, r7, r5
 800d3a0:	8819      	ldrh	r1, [r3, #0]
 800d3a2:	2608      	movs	r6, #8
 800d3a4:	19bb      	adds	r3, r7, r6
 800d3a6:	0018      	movs	r0, r3
 800d3a8:	f001 f9a6 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d3ac:	0003      	movs	r3, r0
 800d3ae:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800d3b0:	197c      	adds	r4, r7, r5
 800d3b2:	1dbb      	adds	r3, r7, #6
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	5e9a      	ldrsh	r2, [r3, r2]
 800d3b8:	197b      	adds	r3, r7, r5
 800d3ba:	8819      	ldrh	r1, [r3, #0]
 800d3bc:	19bb      	adds	r3, r7, r6
 800d3be:	0018      	movs	r0, r3
 800d3c0:	f001 fa05 	bl	800e7ce <sensirion_i2c_add_int16_t_to_buffer>
 800d3c4:	0003      	movs	r3, r0
 800d3c6:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800d3c8:	197c      	adds	r4, r7, r5
 800d3ca:	1d3b      	adds	r3, r7, #4
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	5e9a      	ldrsh	r2, [r3, r2]
 800d3d0:	197b      	adds	r3, r7, r5
 800d3d2:	8819      	ldrh	r1, [r3, #0]
 800d3d4:	19bb      	adds	r3, r7, r6
 800d3d6:	0018      	movs	r0, r3
 800d3d8:	f001 f9f9 	bl	800e7ce <sensirion_i2c_add_int16_t_to_buffer>
 800d3dc:	0003      	movs	r3, r0
 800d3de:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800d3e0:	197c      	adds	r4, r7, r5
 800d3e2:	1cbb      	adds	r3, r7, #2
 800d3e4:	881a      	ldrh	r2, [r3, #0]
 800d3e6:	197b      	adds	r3, r7, r5
 800d3e8:	8819      	ldrh	r1, [r3, #0]
 800d3ea:	19bb      	adds	r3, r7, r6
 800d3ec:	0018      	movs	r0, r3
 800d3ee:	f001 f9af 	bl	800e750 <sensirion_i2c_add_uint16_t_to_buffer>
 800d3f2:	0003      	movs	r3, r0
 800d3f4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d3f6:	2214      	movs	r2, #20
 800d3f8:	18bc      	adds	r4, r7, r2
 800d3fa:	197b      	adds	r3, r7, r5
 800d3fc:	881a      	ldrh	r2, [r3, #0]
 800d3fe:	19bb      	adds	r3, r7, r6
 800d400:	0019      	movs	r1, r3
 800d402:	2069      	movs	r0, #105	@ 0x69
 800d404:	f001 f9fc 	bl	800e800 <sensirion_i2c_write_data>
 800d408:	0003      	movs	r3, r0
 800d40a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d40c:	2214      	movs	r2, #20
 800d40e:	18bb      	adds	r3, r7, r2
 800d410:	2100      	movs	r1, #0
 800d412:	5e5b      	ldrsh	r3, [r3, r1]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d003      	beq.n	800d420 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800d418:	18bb      	adds	r3, r7, r2
 800d41a:	2200      	movs	r2, #0
 800d41c:	5e9b      	ldrsh	r3, [r3, r2]
 800d41e:	e004      	b.n	800d42a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800d420:	4b05      	ldr	r3, [pc, #20]	@ (800d438 <sen5x_set_temperature_offset_parameters+0xc4>)
 800d422:	0018      	movs	r0, r3
 800d424:	f7ff fbf8 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	0018      	movs	r0, r3
 800d42c:	46bd      	mov	sp, r7
 800d42e:	b007      	add	sp, #28
 800d430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d432:	46c0      	nop			@ (mov r8, r8)
 800d434:	000060b2 	.word	0x000060b2
 800d438:	00004e20 	.word	0x00004e20

0800d43c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43e:	b091      	sub	sp, #68	@ 0x44
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	000a      	movs	r2, r1
 800d446:	1cfb      	adds	r3, r7, #3
 800d448:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800d44a:	253e      	movs	r5, #62	@ 0x3e
 800d44c:	197b      	adds	r3, r7, r5
 800d44e:	2200      	movs	r2, #0
 800d450:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800d452:	197c      	adds	r4, r7, r5
 800d454:	4a22      	ldr	r2, [pc, #136]	@ (800d4e0 <sen5x_get_product_name+0xa4>)
 800d456:	197b      	adds	r3, r7, r5
 800d458:	8819      	ldrh	r1, [r3, #0]
 800d45a:	230c      	movs	r3, #12
 800d45c:	18fb      	adds	r3, r7, r3
 800d45e:	0018      	movs	r0, r3
 800d460:	f001 f94a 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d464:	0003      	movs	r3, r0
 800d466:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d468:	263c      	movs	r6, #60	@ 0x3c
 800d46a:	19bc      	adds	r4, r7, r6
 800d46c:	197b      	adds	r3, r7, r5
 800d46e:	881a      	ldrh	r2, [r3, #0]
 800d470:	230c      	movs	r3, #12
 800d472:	18fb      	adds	r3, r7, r3
 800d474:	0019      	movs	r1, r3
 800d476:	2069      	movs	r0, #105	@ 0x69
 800d478:	f001 f9c2 	bl	800e800 <sensirion_i2c_write_data>
 800d47c:	0003      	movs	r3, r0
 800d47e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d480:	19bb      	adds	r3, r7, r6
 800d482:	2200      	movs	r2, #0
 800d484:	5e9b      	ldrsh	r3, [r3, r2]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <sen5x_get_product_name+0x56>
        return error;
 800d48a:	19bb      	adds	r3, r7, r6
 800d48c:	2200      	movs	r2, #0
 800d48e:	5e9b      	ldrsh	r3, [r3, r2]
 800d490:	e021      	b.n	800d4d6 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800d492:	4b14      	ldr	r3, [pc, #80]	@ (800d4e4 <sen5x_get_product_name+0xa8>)
 800d494:	0018      	movs	r0, r3
 800d496:	f7ff fbbf 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800d49a:	253c      	movs	r5, #60	@ 0x3c
 800d49c:	197c      	adds	r4, r7, r5
 800d49e:	230c      	movs	r3, #12
 800d4a0:	18fb      	adds	r3, r7, r3
 800d4a2:	2220      	movs	r2, #32
 800d4a4:	0019      	movs	r1, r3
 800d4a6:	2069      	movs	r0, #105	@ 0x69
 800d4a8:	f001 f9c2 	bl	800e830 <sensirion_i2c_read_data_inplace>
 800d4ac:	0003      	movs	r3, r0
 800d4ae:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d4b0:	197b      	adds	r3, r7, r5
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	5e9b      	ldrsh	r3, [r3, r2]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <sen5x_get_product_name+0x86>
        return error;
 800d4ba:	197b      	adds	r3, r7, r5
 800d4bc:	2200      	movs	r2, #0
 800d4be:	5e9b      	ldrsh	r3, [r3, r2]
 800d4c0:	e009      	b.n	800d4d6 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800d4c2:	1cfb      	adds	r3, r7, #3
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	6879      	ldr	r1, [r7, #4]
 800d4ca:	230c      	movs	r3, #12
 800d4cc:	18fb      	adds	r3, r7, r3
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	f000 f988 	bl	800d7e4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	b011      	add	sp, #68	@ 0x44
 800d4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4de:	46c0      	nop			@ (mov r8, r8)
 800d4e0:	0000d014 	.word	0x0000d014
 800d4e4:	0000c350 	.word	0x0000c350

0800d4e8 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ea:	b091      	sub	sp, #68	@ 0x44
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	000a      	movs	r2, r1
 800d4f2:	1cfb      	adds	r3, r7, #3
 800d4f4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800d4f6:	253e      	movs	r5, #62	@ 0x3e
 800d4f8:	197b      	adds	r3, r7, r5
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800d4fe:	197c      	adds	r4, r7, r5
 800d500:	4a22      	ldr	r2, [pc, #136]	@ (800d58c <sen5x_get_serial_number+0xa4>)
 800d502:	197b      	adds	r3, r7, r5
 800d504:	8819      	ldrh	r1, [r3, #0]
 800d506:	230c      	movs	r3, #12
 800d508:	18fb      	adds	r3, r7, r3
 800d50a:	0018      	movs	r0, r3
 800d50c:	f001 f8f4 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d510:	0003      	movs	r3, r0
 800d512:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d514:	263c      	movs	r6, #60	@ 0x3c
 800d516:	19bc      	adds	r4, r7, r6
 800d518:	197b      	adds	r3, r7, r5
 800d51a:	881a      	ldrh	r2, [r3, #0]
 800d51c:	230c      	movs	r3, #12
 800d51e:	18fb      	adds	r3, r7, r3
 800d520:	0019      	movs	r1, r3
 800d522:	2069      	movs	r0, #105	@ 0x69
 800d524:	f001 f96c 	bl	800e800 <sensirion_i2c_write_data>
 800d528:	0003      	movs	r3, r0
 800d52a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d52c:	19bb      	adds	r3, r7, r6
 800d52e:	2200      	movs	r2, #0
 800d530:	5e9b      	ldrsh	r3, [r3, r2]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <sen5x_get_serial_number+0x56>
        return error;
 800d536:	19bb      	adds	r3, r7, r6
 800d538:	2200      	movs	r2, #0
 800d53a:	5e9b      	ldrsh	r3, [r3, r2]
 800d53c:	e021      	b.n	800d582 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800d53e:	4b14      	ldr	r3, [pc, #80]	@ (800d590 <sen5x_get_serial_number+0xa8>)
 800d540:	0018      	movs	r0, r3
 800d542:	f7ff fb69 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800d546:	253c      	movs	r5, #60	@ 0x3c
 800d548:	197c      	adds	r4, r7, r5
 800d54a:	230c      	movs	r3, #12
 800d54c:	18fb      	adds	r3, r7, r3
 800d54e:	2220      	movs	r2, #32
 800d550:	0019      	movs	r1, r3
 800d552:	2069      	movs	r0, #105	@ 0x69
 800d554:	f001 f96c 	bl	800e830 <sensirion_i2c_read_data_inplace>
 800d558:	0003      	movs	r3, r0
 800d55a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d55c:	197b      	adds	r3, r7, r5
 800d55e:	2200      	movs	r2, #0
 800d560:	5e9b      	ldrsh	r3, [r3, r2]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <sen5x_get_serial_number+0x86>
        return error;
 800d566:	197b      	adds	r3, r7, r5
 800d568:	2200      	movs	r2, #0
 800d56a:	5e9b      	ldrsh	r3, [r3, r2]
 800d56c:	e009      	b.n	800d582 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800d56e:	1cfb      	adds	r3, r7, #3
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	b29a      	uxth	r2, r3
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	230c      	movs	r3, #12
 800d578:	18fb      	adds	r3, r7, r3
 800d57a:	0018      	movs	r0, r3
 800d57c:	f000 f932 	bl	800d7e4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800d580:	2300      	movs	r3, #0
}
 800d582:	0018      	movs	r0, r3
 800d584:	46bd      	mov	sp, r7
 800d586:	b011      	add	sp, #68	@ 0x44
 800d588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d58a:	46c0      	nop			@ (mov r8, r8)
 800d58c:	0000d033 	.word	0x0000d033
 800d590:	0000c350 	.word	0x0000c350

0800d594 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800d594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d596:	b089      	sub	sp, #36	@ 0x24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800d5a2:	251e      	movs	r5, #30
 800d5a4:	197b      	adds	r3, r7, r5
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800d5aa:	197c      	adds	r4, r7, r5
 800d5ac:	23d1      	movs	r3, #209	@ 0xd1
 800d5ae:	021a      	lsls	r2, r3, #8
 800d5b0:	197b      	adds	r3, r7, r5
 800d5b2:	8819      	ldrh	r1, [r3, #0]
 800d5b4:	2310      	movs	r3, #16
 800d5b6:	18fb      	adds	r3, r7, r3
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	f001 f89d 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d5be:	0003      	movs	r3, r0
 800d5c0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d5c2:	261c      	movs	r6, #28
 800d5c4:	19bc      	adds	r4, r7, r6
 800d5c6:	197b      	adds	r3, r7, r5
 800d5c8:	881a      	ldrh	r2, [r3, #0]
 800d5ca:	2310      	movs	r3, #16
 800d5cc:	18fb      	adds	r3, r7, r3
 800d5ce:	0019      	movs	r1, r3
 800d5d0:	2069      	movs	r0, #105	@ 0x69
 800d5d2:	f001 f915 	bl	800e800 <sensirion_i2c_write_data>
 800d5d6:	0003      	movs	r3, r0
 800d5d8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d5da:	19bb      	adds	r3, r7, r6
 800d5dc:	2200      	movs	r2, #0
 800d5de:	5e9b      	ldrsh	r3, [r3, r2]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d003      	beq.n	800d5ec <sen5x_get_version+0x58>
        return error;
 800d5e4:	19bb      	adds	r3, r7, r6
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	5e9b      	ldrsh	r3, [r3, r2]
 800d5ea:	e038      	b.n	800d65e <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d5ec:	4b1e      	ldr	r3, [pc, #120]	@ (800d668 <sen5x_get_version+0xd4>)
 800d5ee:	0018      	movs	r0, r3
 800d5f0:	f7ff fb12 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800d5f4:	251c      	movs	r5, #28
 800d5f6:	197c      	adds	r4, r7, r5
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	18fb      	adds	r3, r7, r3
 800d5fc:	2208      	movs	r2, #8
 800d5fe:	0019      	movs	r1, r3
 800d600:	2069      	movs	r0, #105	@ 0x69
 800d602:	f001 f915 	bl	800e830 <sensirion_i2c_read_data_inplace>
 800d606:	0003      	movs	r3, r0
 800d608:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d60a:	197b      	adds	r3, r7, r5
 800d60c:	2200      	movs	r2, #0
 800d60e:	5e9b      	ldrsh	r3, [r3, r2]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <sen5x_get_version+0x88>
        return error;
 800d614:	197b      	adds	r3, r7, r5
 800d616:	2200      	movs	r2, #0
 800d618:	5e9b      	ldrsh	r3, [r3, r2]
 800d61a:	e020      	b.n	800d65e <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800d61c:	2110      	movs	r1, #16
 800d61e:	187b      	adds	r3, r7, r1
 800d620:	781a      	ldrb	r2, [r3, #0]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800d626:	187b      	adds	r3, r7, r1
 800d628:	785a      	ldrb	r2, [r3, #1]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800d62e:	187b      	adds	r3, r7, r1
 800d630:	789b      	ldrb	r3, [r3, #2]
 800d632:	1e5a      	subs	r2, r3, #1
 800d634:	4193      	sbcs	r3, r2
 800d636:	b2da      	uxtb	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800d63c:	187b      	adds	r3, r7, r1
 800d63e:	78da      	ldrb	r2, [r3, #3]
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800d644:	187b      	adds	r3, r7, r1
 800d646:	791a      	ldrb	r2, [r3, #4]
 800d648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800d64c:	187b      	adds	r3, r7, r1
 800d64e:	795a      	ldrb	r2, [r3, #5]
 800d650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d652:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800d654:	187b      	adds	r3, r7, r1
 800d656:	799a      	ldrb	r2, [r3, #6]
 800d658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d65a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	0018      	movs	r0, r3
 800d660:	46bd      	mov	sp, r7
 800d662:	b009      	add	sp, #36	@ 0x24
 800d664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d666:	46c0      	nop			@ (mov r8, r8)
 800d668:	00004e20 	.word	0x00004e20

0800d66c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800d674:	2516      	movs	r5, #22
 800d676:	197b      	adds	r3, r7, r5
 800d678:	2200      	movs	r2, #0
 800d67a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800d67c:	197c      	adds	r4, r7, r5
 800d67e:	4a22      	ldr	r2, [pc, #136]	@ (800d708 <sen5x_read_device_status+0x9c>)
 800d680:	197b      	adds	r3, r7, r5
 800d682:	8819      	ldrh	r1, [r3, #0]
 800d684:	230c      	movs	r3, #12
 800d686:	18fb      	adds	r3, r7, r3
 800d688:	0018      	movs	r0, r3
 800d68a:	f001 f835 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d68e:	0003      	movs	r3, r0
 800d690:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d692:	2614      	movs	r6, #20
 800d694:	19bc      	adds	r4, r7, r6
 800d696:	197b      	adds	r3, r7, r5
 800d698:	881a      	ldrh	r2, [r3, #0]
 800d69a:	230c      	movs	r3, #12
 800d69c:	18fb      	adds	r3, r7, r3
 800d69e:	0019      	movs	r1, r3
 800d6a0:	2069      	movs	r0, #105	@ 0x69
 800d6a2:	f001 f8ad 	bl	800e800 <sensirion_i2c_write_data>
 800d6a6:	0003      	movs	r3, r0
 800d6a8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d6aa:	19bb      	adds	r3, r7, r6
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	5e9b      	ldrsh	r3, [r3, r2]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d003      	beq.n	800d6bc <sen5x_read_device_status+0x50>
        return error;
 800d6b4:	19bb      	adds	r3, r7, r6
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	5e9b      	ldrsh	r3, [r3, r2]
 800d6ba:	e020      	b.n	800d6fe <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d6bc:	4b13      	ldr	r3, [pc, #76]	@ (800d70c <sen5x_read_device_status+0xa0>)
 800d6be:	0018      	movs	r0, r3
 800d6c0:	f7ff faaa 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800d6c4:	2514      	movs	r5, #20
 800d6c6:	197c      	adds	r4, r7, r5
 800d6c8:	230c      	movs	r3, #12
 800d6ca:	18fb      	adds	r3, r7, r3
 800d6cc:	2204      	movs	r2, #4
 800d6ce:	0019      	movs	r1, r3
 800d6d0:	2069      	movs	r0, #105	@ 0x69
 800d6d2:	f001 f8ad 	bl	800e830 <sensirion_i2c_read_data_inplace>
 800d6d6:	0003      	movs	r3, r0
 800d6d8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d6da:	197b      	adds	r3, r7, r5
 800d6dc:	2200      	movs	r2, #0
 800d6de:	5e9b      	ldrsh	r3, [r3, r2]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d003      	beq.n	800d6ec <sen5x_read_device_status+0x80>
        return error;
 800d6e4:	197b      	adds	r3, r7, r5
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	5e9b      	ldrsh	r3, [r3, r2]
 800d6ea:	e008      	b.n	800d6fe <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800d6ec:	230c      	movs	r3, #12
 800d6ee:	18fb      	adds	r3, r7, r3
 800d6f0:	0018      	movs	r0, r3
 800d6f2:	f000 f850 	bl	800d796 <sensirion_common_bytes_to_uint32_t>
 800d6f6:	0002      	movs	r2, r0
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	0018      	movs	r0, r3
 800d700:	46bd      	mov	sp, r7
 800d702:	b007      	add	sp, #28
 800d704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d706:	46c0      	nop			@ (mov r8, r8)
 800d708:	0000d206 	.word	0x0000d206
 800d70c:	00004e20 	.word	0x00004e20

0800d710 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d716:	1dbb      	adds	r3, r7, #6
 800d718:	2200      	movs	r2, #0
 800d71a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800d71c:	1dbc      	adds	r4, r7, #6
 800d71e:	4a12      	ldr	r2, [pc, #72]	@ (800d768 <sen5x_device_reset+0x58>)
 800d720:	1dbb      	adds	r3, r7, #6
 800d722:	8819      	ldrh	r1, [r3, #0]
 800d724:	003b      	movs	r3, r7
 800d726:	0018      	movs	r0, r3
 800d728:	f000 ffe6 	bl	800e6f8 <sensirion_i2c_add_command_to_buffer>
 800d72c:	0003      	movs	r3, r0
 800d72e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d730:	1d3c      	adds	r4, r7, #4
 800d732:	1dbb      	adds	r3, r7, #6
 800d734:	881a      	ldrh	r2, [r3, #0]
 800d736:	003b      	movs	r3, r7
 800d738:	0019      	movs	r1, r3
 800d73a:	2069      	movs	r0, #105	@ 0x69
 800d73c:	f001 f860 	bl	800e800 <sensirion_i2c_write_data>
 800d740:	0003      	movs	r3, r0
 800d742:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d744:	1d3b      	adds	r3, r7, #4
 800d746:	2200      	movs	r2, #0
 800d748:	5e9b      	ldrsh	r3, [r3, r2]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d003      	beq.n	800d756 <sen5x_device_reset+0x46>
        return error;
 800d74e:	1d3b      	adds	r3, r7, #4
 800d750:	2200      	movs	r2, #0
 800d752:	5e9b      	ldrsh	r3, [r3, r2]
 800d754:	e004      	b.n	800d760 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800d756:	4b05      	ldr	r3, [pc, #20]	@ (800d76c <sen5x_device_reset+0x5c>)
 800d758:	0018      	movs	r0, r3
 800d75a:	f7ff fa5d 	bl	800cc18 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	0018      	movs	r0, r3
 800d762:	46bd      	mov	sp, r7
 800d764:	b003      	add	sp, #12
 800d766:	bd90      	pop	{r4, r7, pc}
 800d768:	0000d304 	.word	0x0000d304
 800d76c:	00030d40 	.word	0x00030d40

0800d770 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	021b      	lsls	r3, r3, #8
 800d77e:	b21a      	sxth	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3301      	adds	r3, #1
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b21b      	sxth	r3, r3
 800d788:	4313      	orrs	r3, r2
 800d78a:	b21b      	sxth	r3, r3
 800d78c:	b29b      	uxth	r3, r3
}
 800d78e:	0018      	movs	r0, r3
 800d790:	46bd      	mov	sp, r7
 800d792:	b002      	add	sp, #8
 800d794:	bd80      	pop	{r7, pc}

0800d796 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	061a      	lsls	r2, r3, #24
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	041b      	lsls	r3, r3, #16
 800d7ac:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3302      	adds	r3, #2
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800d7b6:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	3203      	adds	r2, #3
 800d7bc:	7812      	ldrb	r2, [r2, #0]
 800d7be:	4313      	orrs	r3, r2
}
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	b002      	add	sp, #8
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	0018      	movs	r0, r3
 800d7d4:	f7ff ffcc 	bl	800d770 <sensirion_common_bytes_to_uint16_t>
 800d7d8:	0003      	movs	r3, r0
 800d7da:	b21b      	sxth	r3, r3
}
 800d7dc:	0018      	movs	r0, r3
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	b002      	add	sp, #8
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	1dbb      	adds	r3, r7, #6
 800d7f0:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800d7f2:	2316      	movs	r3, #22
 800d7f4:	18fb      	adds	r3, r7, r3
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	801a      	strh	r2, [r3, #0]
 800d7fa:	e00f      	b.n	800d81c <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800d7fc:	2016      	movs	r0, #22
 800d7fe:	183b      	adds	r3, r7, r0
 800d800:	881b      	ldrh	r3, [r3, #0]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	18d2      	adds	r2, r2, r3
 800d806:	183b      	adds	r3, r7, r0
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	68b9      	ldr	r1, [r7, #8]
 800d80c:	18cb      	adds	r3, r1, r3
 800d80e:	7812      	ldrb	r2, [r2, #0]
 800d810:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800d812:	183b      	adds	r3, r7, r0
 800d814:	881a      	ldrh	r2, [r3, #0]
 800d816:	183b      	adds	r3, r7, r0
 800d818:	3201      	adds	r2, #1
 800d81a:	801a      	strh	r2, [r3, #0]
 800d81c:	2316      	movs	r3, #22
 800d81e:	18fa      	adds	r2, r7, r3
 800d820:	1dbb      	adds	r3, r7, #6
 800d822:	8812      	ldrh	r2, [r2, #0]
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	429a      	cmp	r2, r3
 800d828:	d3e8      	bcc.n	800d7fc <sensirion_common_copy_bytes+0x18>
    }
}
 800d82a:	46c0      	nop			@ (mov r8, r8)
 800d82c:	46c0      	nop			@ (mov r8, r8)
 800d82e:	46bd      	mov	sp, r7
 800d830:	b006      	add	sp, #24
 800d832:	bd80      	pop	{r7, pc}

0800d834 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2b01      	cmp	r3, #1
 800d850:	d113      	bne.n	800d87a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	22fe      	movs	r2, #254	@ 0xfe
 800d856:	0592      	lsls	r2, r2, #22
 800d858:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	4a1a      	ldr	r2, [pc, #104]	@ (800d8c8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800d85e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	4a1a      	ldr	r2, [pc, #104]	@ (800d8cc <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800d864:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4a19      	ldr	r2, [pc, #100]	@ (800d8d0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800d86a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	4a19      	ldr	r2, [pc, #100]	@ (800d8d4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800d870:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	4a18      	ldr	r2, [pc, #96]	@ (800d8d8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800d876:	61da      	str	r2, [r3, #28]
 800d878:	e011      	b.n	800d89e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	4a17      	ldr	r2, [pc, #92]	@ (800d8dc <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800d87e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4a17      	ldr	r2, [pc, #92]	@ (800d8e0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800d884:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	4a16      	ldr	r2, [pc, #88]	@ (800d8e4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800d88a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	4a16      	ldr	r2, [pc, #88]	@ (800d8e8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800d890:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	4a15      	ldr	r2, [pc, #84]	@ (800d8ec <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800d896:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	4a15      	ldr	r2, [pc, #84]	@ (800d8f0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800d89c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	4a14      	ldr	r2, [pc, #80]	@ (800d8f4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800d8a2:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	4a14      	ldr	r2, [pc, #80]	@ (800d8f8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800d8a8:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4a12      	ldr	r2, [pc, #72]	@ (800d8f8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800d8ae:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	4a12      	ldr	r2, [pc, #72]	@ (800d8fc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800d8b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	f000 f833 	bl	800d924 <GasIndexAlgorithm_reset>
}
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	b004      	add	sp, #16
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	46c0      	nop			@ (mov r8, r8)
 800d8c8:	00002710 	.word	0x00002710
 800d8cc:	44340000 	.word	0x44340000
 800d8d0:	46859800 	.word	0x46859800
 800d8d4:	46a05000 	.word	0x46a05000
 800d8d8:	41f00000 	.word	0x41f00000
 800d8dc:	42c80000 	.word	0x42c80000
 800d8e0:	00004e20 	.word	0x00004e20
 800d8e4:	43340000 	.word	0x43340000
 800d8e8:	4528c000 	.word	0x4528c000
 800d8ec:	45a32000 	.word	0x45a32000
 800d8f0:	43aa0000 	.word	0x43aa0000
 800d8f4:	43660000 	.word	0x43660000
 800d8f8:	41400000 	.word	0x41400000
 800d8fc:	42480000 	.word	0x42480000

0800d900 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800d90a:	4a05      	ldr	r2, [pc, #20]	@ (800d920 <GasIndexAlgorithm_init+0x20>)
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	0018      	movs	r0, r3
 800d912:	f7ff ff8f 	bl	800d834 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800d916:	46c0      	nop			@ (mov r8, r8)
 800d918:	46bd      	mov	sp, r7
 800d91a:	b002      	add	sp, #8
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	46c0      	nop			@ (mov r8, r8)
 800d920:	44610000 	.word	0x44610000

0800d924 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	0018      	movs	r0, r3
 800d942:	f000 f805 	bl	800d950 <GasIndexAlgorithm__init_instances>
}
 800d946:	46c0      	nop			@ (mov r8, r8)
 800d948:	46bd      	mov	sp, r7
 800d94a:	b002      	add	sp, #8
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800d950:	b590      	push	{r4, r7, lr}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	0018      	movs	r0, r3
 800d95c:	f000 f8e8 	bl	800db30 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	0018      	movs	r0, r3
 800d964:	f000 f9a6 	bl	800dcb4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800d968:	1c04      	adds	r4, r0, #0
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	0018      	movs	r0, r3
 800d96e:	f000 f9ab 	bl	800dcc8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800d972:	1c02      	adds	r2, r0, #0
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	1c21      	adds	r1, r4, #0
 800d978:	0018      	movs	r0, r3
 800d97a:	f000 fc3b 	bl	800e1f4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d107      	bne.n	800d996 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800d986:	23fe      	movs	r3, #254	@ 0xfe
 800d988:	059b      	lsls	r3, r3, #22
 800d98a:	4a0a      	ldr	r2, [pc, #40]	@ (800d9b4 <GasIndexAlgorithm__init_instances+0x64>)
 800d98c:	490a      	ldr	r1, [pc, #40]	@ (800d9b8 <GasIndexAlgorithm__init_instances+0x68>)
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fc86 	bl	800e2a0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800d994:	e005      	b.n	800d9a2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800d996:	4b09      	ldr	r3, [pc, #36]	@ (800d9bc <GasIndexAlgorithm__init_instances+0x6c>)
 800d998:	4a09      	ldr	r2, [pc, #36]	@ (800d9c0 <GasIndexAlgorithm__init_instances+0x70>)
 800d99a:	490a      	ldr	r1, [pc, #40]	@ (800d9c4 <GasIndexAlgorithm__init_instances+0x74>)
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fc7f 	bl	800e2a0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	f000 fd35 	bl	800e414 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800d9aa:	46c0      	nop			@ (mov r8, r8)
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	b003      	add	sp, #12
 800d9b0:	bd90      	pop	{r4, r7, pc}
 800d9b2:	46c0      	nop			@ (mov r8, r8)
 800d9b4:	bc257a78 	.word	0xbc257a78
 800d9b8:	44198000 	.word	0x44198000
 800d9bc:	42c80000 	.word	0x42c80000
 800d9c0:	bbd4fdf4 	.word	0xbbd4fdf4
 800d9c4:	43550000 	.word	0x43550000

0800d9c8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800d9c8:	b590      	push	{r4, r7, lr}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d8:	4952      	ldr	r1, [pc, #328]	@ (800db24 <GasIndexAlgorithm_process+0x15c>)
 800d9da:	1c18      	adds	r0, r3, #0
 800d9dc:	f7f2 fdb2 	bl	8000544 <__aeabi_fcmple>
 800d9e0:	1e03      	subs	r3, r0, #0
 800d9e2:	d00c      	beq.n	800d9fe <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	1c19      	adds	r1, r3, #0
 800d9ee:	1c10      	adds	r0, r2, #0
 800d9f0:	f7f2 ff66 	bl	80008c0 <__aeabi_fadd>
 800d9f4:	1c03      	adds	r3, r0, #0
 800d9f6:	1c1a      	adds	r2, r3, #0
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9fc:	e080      	b.n	800db00 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	dd25      	ble.n	800da50 <GasIndexAlgorithm_process+0x88>
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	4a48      	ldr	r2, [pc, #288]	@ (800db28 <GasIndexAlgorithm_process+0x160>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	dc21      	bgt.n	800da50 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	429a      	cmp	r2, r3
 800da14:	dc04      	bgt.n	800da20 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	3301      	adds	r3, #1
 800da1c:	60bb      	str	r3, [r7, #8]
 800da1e:	e00d      	b.n	800da3c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	4a41      	ldr	r2, [pc, #260]	@ (800db2c <GasIndexAlgorithm_process+0x164>)
 800da26:	4694      	mov	ip, r2
 800da28:	4463      	add	r3, ip
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	dd05      	ble.n	800da3c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	4a3d      	ldr	r2, [pc, #244]	@ (800db2c <GasIndexAlgorithm_process+0x164>)
 800da36:	4694      	mov	ip, r2
 800da38:	4463      	add	r3, ip
 800da3a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	0018      	movs	r0, r3
 800da46:	f7f3 fdc3 	bl	80015d0 <__aeabi_i2f>
 800da4a:	1c02      	adds	r2, r0, #0
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d005      	beq.n	800da64 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	0018      	movs	r0, r3
 800da5c:	f000 f945 	bl	800dcea <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800da60:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800da62:	d014      	beq.n	800da8e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	1c11      	adds	r1, r2, #0
 800da6c:	0018      	movs	r0, r3
 800da6e:	f000 fbd1 	bl	800e214 <GasIndexAlgorithm__mox_model__process>
 800da72:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	1c11      	adds	r1, r2, #0
 800da80:	0018      	movs	r0, r3
 800da82:	f000 fc25 	bl	800e2d0 <GasIndexAlgorithm__sigmoid_scaled__process>
 800da86:	1c02      	adds	r2, r0, #0
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	639a      	str	r2, [r3, #56]	@ 0x38
 800da8c:	e003      	b.n	800da96 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	689a      	ldr	r2, [r3, #8]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	1c11      	adds	r1, r2, #0
 800da9e:	0018      	movs	r0, r3
 800daa0:	f000 fcec 	bl	800e47c <GasIndexAlgorithm__adaptive_lowpass__process>
 800daa4:	1c02      	adds	r2, r0, #0
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daae:	21fc      	movs	r1, #252	@ 0xfc
 800dab0:	0589      	lsls	r1, r1, #22
 800dab2:	1c18      	adds	r0, r3, #0
 800dab4:	f7f2 fd3c 	bl	8000530 <__aeabi_fcmplt>
 800dab8:	1e03      	subs	r3, r0, #0
 800daba:	d003      	beq.n	800dac4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	22fc      	movs	r2, #252	@ 0xfc
 800dac0:	0592      	lsls	r2, r2, #22
 800dac2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac8:	2100      	movs	r1, #0
 800daca:	1c18      	adds	r0, r3, #0
 800dacc:	f7f2 fd44 	bl	8000558 <__aeabi_fcmpgt>
 800dad0:	1e03      	subs	r3, r0, #0
 800dad2:	d015      	beq.n	800db00 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	1c11      	adds	r1, r2, #0
 800dadc:	0018      	movs	r0, r3
 800dade:	f000 fa4f 	bl	800df80 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	0018      	movs	r0, r3
 800dae6:	f000 f8e5 	bl	800dcb4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800daea:	1c04      	adds	r4, r0, #0
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	0018      	movs	r0, r3
 800daf0:	f000 f8ea 	bl	800dcc8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800daf4:	1c02      	adds	r2, r0, #0
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	1c21      	adds	r1, r4, #0
 800dafa:	0018      	movs	r0, r3
 800dafc:	f000 fb7a 	bl	800e1f4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db04:	21fc      	movs	r1, #252	@ 0xfc
 800db06:	0589      	lsls	r1, r1, #22
 800db08:	1c18      	adds	r0, r3, #0
 800db0a:	f7f2 fed9 	bl	80008c0 <__aeabi_fadd>
 800db0e:	1c03      	adds	r3, r0, #0
 800db10:	1c18      	adds	r0, r3, #0
 800db12:	f7f3 fd3d 	bl	8001590 <__aeabi_f2iz>
 800db16:	0002      	movs	r2, r0
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	601a      	str	r2, [r3, #0]
    return;
 800db1c:	46c0      	nop			@ (mov r8, r8)
}
 800db1e:	46bd      	mov	sp, r7
 800db20:	b005      	add	sp, #20
 800db22:	bd90      	pop	{r4, r7, pc}
 800db24:	42340000 	.word	0x42340000
 800db28:	0000fde7 	.word	0x0000fde7
 800db2c:	00007fff 	.word	0x00007fff

0800db30 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800db30:	b5b0      	push	{r4, r5, r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	223c      	movs	r2, #60	@ 0x3c
 800db3c:	2100      	movs	r1, #0
 800db3e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4952      	ldr	r1, [pc, #328]	@ (800dca4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db5a:	1c18      	adds	r0, r3, #0
 800db5c:	f7f3 f83a 	bl	8000bd4 <__aeabi_fdiv>
 800db60:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800db62:	2188      	movs	r1, #136	@ 0x88
 800db64:	05c9      	lsls	r1, r1, #23
 800db66:	1c18      	adds	r0, r3, #0
 800db68:	f7f3 fa1a 	bl	8000fa0 <__aeabi_fmul>
 800db6c:	1c03      	adds	r3, r0, #0
 800db6e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	494a      	ldr	r1, [pc, #296]	@ (800dca4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db7a:	1c18      	adds	r0, r3, #0
 800db7c:	f7f3 f82a 	bl	8000bd4 <__aeabi_fdiv>
 800db80:	1c03      	adds	r3, r0, #0
 800db82:	1c19      	adds	r1, r3, #0
 800db84:	1c20      	adds	r0, r4, #0
 800db86:	f7f2 fe9b 	bl	80008c0 <__aeabi_fadd>
 800db8a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800db8c:	1c19      	adds	r1, r3, #0
 800db8e:	1c28      	adds	r0, r5, #0
 800db90:	f7f3 f820 	bl	8000bd4 <__aeabi_fdiv>
 800db94:	1c03      	adds	r3, r0, #0
 800db96:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	4940      	ldr	r1, [pc, #256]	@ (800dca4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800dba2:	1c18      	adds	r0, r3, #0
 800dba4:	f7f3 f816 	bl	8000bd4 <__aeabi_fdiv>
 800dba8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800dbaa:	2185      	movs	r1, #133	@ 0x85
 800dbac:	05c9      	lsls	r1, r1, #23
 800dbae:	1c18      	adds	r0, r3, #0
 800dbb0:	f7f3 f9f6 	bl	8000fa0 <__aeabi_fmul>
 800dbb4:	1c03      	adds	r3, r0, #0
 800dbb6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	4938      	ldr	r1, [pc, #224]	@ (800dca4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800dbc2:	1c18      	adds	r0, r3, #0
 800dbc4:	f7f3 f806 	bl	8000bd4 <__aeabi_fdiv>
 800dbc8:	1c03      	adds	r3, r0, #0
 800dbca:	1c19      	adds	r1, r3, #0
 800dbcc:	1c20      	adds	r0, r4, #0
 800dbce:	f7f2 fe77 	bl	80008c0 <__aeabi_fadd>
 800dbd2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800dbd4:	1c19      	adds	r1, r3, #0
 800dbd6:	1c28      	adds	r0, r5, #0
 800dbd8:	f7f2 fffc 	bl	8000bd4 <__aeabi_fdiv>
 800dbdc:	1c03      	adds	r3, r0, #0
 800dbde:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d118      	bne.n	800dc1e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800dbf0:	2188      	movs	r1, #136	@ 0x88
 800dbf2:	05c9      	lsls	r1, r1, #23
 800dbf4:	1c18      	adds	r0, r3, #0
 800dbf6:	f7f3 f9d3 	bl	8000fa0 <__aeabi_fmul>
 800dbfa:	1c03      	adds	r3, r0, #0
 800dbfc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800dc02:	4929      	ldr	r1, [pc, #164]	@ (800dca8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800dc04:	1c18      	adds	r0, r3, #0
 800dc06:	f7f2 fe5b 	bl	80008c0 <__aeabi_fadd>
 800dc0a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800dc0c:	1c19      	adds	r1, r3, #0
 800dc0e:	1c20      	adds	r0, r4, #0
 800dc10:	f7f2 ffe0 	bl	8000bd4 <__aeabi_fdiv>
 800dc14:	1c03      	adds	r3, r0, #0
 800dc16:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	655a      	str	r2, [r3, #84]	@ 0x54
 800dc1c:	e017      	b.n	800dc4e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800dc22:	2188      	movs	r1, #136	@ 0x88
 800dc24:	05c9      	lsls	r1, r1, #23
 800dc26:	1c18      	adds	r0, r3, #0
 800dc28:	f7f3 f9ba 	bl	8000fa0 <__aeabi_fmul>
 800dc2c:	1c03      	adds	r3, r0, #0
 800dc2e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800dc34:	491d      	ldr	r1, [pc, #116]	@ (800dcac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800dc36:	1c18      	adds	r0, r3, #0
 800dc38:	f7f2 fe42 	bl	80008c0 <__aeabi_fadd>
 800dc3c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800dc3e:	1c19      	adds	r1, r3, #0
 800dc40:	1c20      	adds	r0, r4, #0
 800dc42:	f7f2 ffc7 	bl	8000bd4 <__aeabi_fdiv>
 800dc46:	1c03      	adds	r3, r0, #0
 800dc48:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800dc52:	2185      	movs	r1, #133	@ 0x85
 800dc54:	05c9      	lsls	r1, r1, #23
 800dc56:	1c18      	adds	r0, r3, #0
 800dc58:	f7f3 f9a2 	bl	8000fa0 <__aeabi_fmul>
 800dc5c:	1c03      	adds	r3, r0, #0
 800dc5e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	4912      	ldr	r1, [pc, #72]	@ (800dcb0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800dc66:	1c18      	adds	r0, r3, #0
 800dc68:	f7f2 fe2a 	bl	80008c0 <__aeabi_fadd>
 800dc6c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800dc6e:	1c19      	adds	r1, r3, #0
 800dc70:	1c20      	adds	r0, r4, #0
 800dc72:	f7f2 ffaf 	bl	8000bd4 <__aeabi_fdiv>
 800dc76:	1c03      	adds	r3, r0, #0
 800dc78:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800dc9c:	46c0      	nop			@ (mov r8, r8)
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	b002      	add	sp, #8
 800dca2:	bdb0      	pop	{r4, r5, r7, pc}
 800dca4:	45610000 	.word	0x45610000
 800dca8:	44960000 	.word	0x44960000
 800dcac:	41a00000 	.word	0x41a00000
 800dcb0:	451c4000 	.word	0x451c4000

0800dcb4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800dcc0:	1c18      	adds	r0, r3, #0
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	b002      	add	sp, #8
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800dcd8:	1c19      	adds	r1, r3, #0
 800dcda:	1c10      	adds	r0, r2, #0
 800dcdc:	f7f2 fdf0 	bl	80008c0 <__aeabi_fadd>
 800dce0:	1c03      	adds	r3, r0, #0
}
 800dce2:	1c18      	adds	r0, r3, #0
 800dce4:	46bd      	mov	sp, r7
 800dce6:	b002      	add	sp, #8
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	223c      	movs	r2, #60	@ 0x3c
 800dcf6:	5c9b      	ldrb	r3, [r3, r2]
}
 800dcf8:	0018      	movs	r0, r3
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	b002      	add	sp, #8
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800dd00:	b5b0      	push	{r4, r5, r7, lr}
 800dd02:	b08c      	sub	sp, #48	@ 0x30
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800dd0c:	1c19      	adds	r1, r3, #0
 800dd0e:	4895      	ldr	r0, [pc, #596]	@ (800df64 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800dd10:	f7f3 fa84 	bl	800121c <__aeabi_fsub>
 800dd14:	1c03      	adds	r3, r0, #0
 800dd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd1c:	1c19      	adds	r1, r3, #0
 800dd1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd20:	f7f2 fc1a 	bl	8000558 <__aeabi_fcmpgt>
 800dd24:	1e03      	subs	r3, r0, #0
 800dd26:	d00b      	beq.n	800dd40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800dd30:	1c19      	adds	r1, r3, #0
 800dd32:	1c10      	adds	r0, r2, #0
 800dd34:	f7f2 fdc4 	bl	80008c0 <__aeabi_fadd>
 800dd38:	1c03      	adds	r3, r0, #0
 800dd3a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd44:	1c19      	adds	r1, r3, #0
 800dd46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd48:	f7f2 fc06 	bl	8000558 <__aeabi_fcmpgt>
 800dd4c:	1e03      	subs	r3, r0, #0
 800dd4e:	d00b      	beq.n	800dd68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800dd58:	1c19      	adds	r1, r3, #0
 800dd5a:	1c10      	adds	r0, r2, #0
 800dd5c:	f7f2 fdb0 	bl	80008c0 <__aeabi_fadd>
 800dd60:	1c03      	adds	r3, r0, #0
 800dd62:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6959      	ldr	r1, [r3, #20]
 800dd6c:	4a7e      	ldr	r2, [pc, #504]	@ (800df68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	0018      	movs	r0, r3
 800dd72:	f000 f9f1 	bl	800e158 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	1c11      	adds	r1, r2, #0
 800dd7e:	0018      	movs	r0, r3
 800dd80:	f000 f9fa 	bl	800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dd84:	1c03      	adds	r3, r0, #0
 800dd86:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800dd94:	1c19      	adds	r1, r3, #0
 800dd96:	1c10      	adds	r0, r2, #0
 800dd98:	f7f3 fa40 	bl	800121c <__aeabi_fsub>
 800dd9c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800dd9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dda0:	1c18      	adds	r0, r3, #0
 800dda2:	f7f3 f8fd 	bl	8000fa0 <__aeabi_fmul>
 800dda6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800dda8:	1c19      	adds	r1, r3, #0
 800ddaa:	1c20      	adds	r0, r4, #0
 800ddac:	f7f2 fd88 	bl	80008c0 <__aeabi_fadd>
 800ddb0:	1c03      	adds	r3, r0, #0
 800ddb2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ddbc:	1c19      	adds	r1, r3, #0
 800ddbe:	486b      	ldr	r0, [pc, #428]	@ (800df6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ddc0:	f7f3 fa2c 	bl	800121c <__aeabi_fsub>
 800ddc4:	1c03      	adds	r3, r0, #0
 800ddc6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	1c11      	adds	r1, r2, #0
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	f000 f9d1 	bl	800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ddd6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ddd8:	1c19      	adds	r1, r3, #0
 800ddda:	1c28      	adds	r0, r5, #0
 800dddc:	f7f3 f8e0 	bl	8000fa0 <__aeabi_fmul>
 800dde0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800dde2:	1c19      	adds	r1, r3, #0
 800dde4:	1c20      	adds	r0, r4, #0
 800dde6:	f7f2 fd6b 	bl	80008c0 <__aeabi_fadd>
 800ddea:	1c03      	adds	r3, r0, #0
 800ddec:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ddee:	4a60      	ldr	r2, [pc, #384]	@ (800df70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ddf0:	6a39      	ldr	r1, [r7, #32]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	0018      	movs	r0, r3
 800ddf6:	f000 f9af 	bl	800e158 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	1c11      	adds	r1, r2, #0
 800de02:	0018      	movs	r0, r3
 800de04:	f000 f9b8 	bl	800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de08:	1c03      	adds	r3, r0, #0
 800de0a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800de0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de0e:	69f8      	ldr	r0, [r7, #28]
 800de10:	f7f3 f8c6 	bl	8000fa0 <__aeabi_fmul>
 800de14:	1c03      	adds	r3, r0, #0
 800de16:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6999      	ldr	r1, [r3, #24]
 800de20:	4a51      	ldr	r2, [pc, #324]	@ (800df68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	0018      	movs	r0, r3
 800de26:	f000 f997 	bl	800e158 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	1c11      	adds	r1, r2, #0
 800de32:	0018      	movs	r0, r3
 800de34:	f000 f9a0 	bl	800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de38:	1c03      	adds	r3, r0, #0
 800de3a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800de48:	1c19      	adds	r1, r3, #0
 800de4a:	1c10      	adds	r0, r2, #0
 800de4c:	f7f3 f9e6 	bl	800121c <__aeabi_fsub>
 800de50:	1c03      	adds	r3, r0, #0
 800de52:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800de54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de56:	69b8      	ldr	r0, [r7, #24]
 800de58:	f7f3 f9e0 	bl	800121c <__aeabi_fsub>
 800de5c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800de5e:	1c19      	adds	r1, r3, #0
 800de60:	1c28      	adds	r0, r5, #0
 800de62:	f7f3 f89d 	bl	8000fa0 <__aeabi_fmul>
 800de66:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800de68:	1c19      	adds	r1, r3, #0
 800de6a:	1c20      	adds	r0, r4, #0
 800de6c:	f7f2 fd28 	bl	80008c0 <__aeabi_fadd>
 800de70:	1c03      	adds	r3, r0, #0
 800de72:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800de7c:	1c19      	adds	r1, r3, #0
 800de7e:	483b      	ldr	r0, [pc, #236]	@ (800df6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800de80:	f7f3 f9cc 	bl	800121c <__aeabi_fsub>
 800de84:	1c03      	adds	r3, r0, #0
 800de86:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	1c11      	adds	r1, r2, #0
 800de90:	0018      	movs	r0, r3
 800de92:	f000 f971 	bl	800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de96:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800de98:	1c19      	adds	r1, r3, #0
 800de9a:	1c28      	adds	r0, r5, #0
 800de9c:	f7f3 f880 	bl	8000fa0 <__aeabi_fmul>
 800dea0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800dea2:	1c19      	adds	r1, r3, #0
 800dea4:	1c20      	adds	r0, r4, #0
 800dea6:	f7f2 fd0b 	bl	80008c0 <__aeabi_fadd>
 800deaa:	1c03      	adds	r3, r0, #0
 800deac:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800deae:	4a30      	ldr	r2, [pc, #192]	@ (800df70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800deb0:	6939      	ldr	r1, [r7, #16]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	0018      	movs	r0, r3
 800deb6:	f000 f94f 	bl	800e158 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	1c11      	adds	r1, r2, #0
 800dec2:	0018      	movs	r0, r3
 800dec4:	f000 f958 	bl	800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dec8:	1c03      	adds	r3, r0, #0
 800deca:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800decc:	6979      	ldr	r1, [r7, #20]
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f7f3 f866 	bl	8000fa0 <__aeabi_fmul>
 800ded4:	1c03      	adds	r3, r0, #0
 800ded6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4923      	ldr	r1, [pc, #140]	@ (800df74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800dee6:	1c18      	adds	r0, r3, #0
 800dee8:	f7f2 fe74 	bl	8000bd4 <__aeabi_fdiv>
 800deec:	1c03      	adds	r3, r0, #0
 800deee:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800def0:	69f9      	ldr	r1, [r7, #28]
 800def2:	20fe      	movs	r0, #254	@ 0xfe
 800def4:	0580      	lsls	r0, r0, #22
 800def6:	f7f3 f991 	bl	800121c <__aeabi_fsub>
 800defa:	1c03      	adds	r3, r0, #0
 800defc:	491e      	ldr	r1, [pc, #120]	@ (800df78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800defe:	1c18      	adds	r0, r3, #0
 800df00:	f7f3 f84e 	bl	8000fa0 <__aeabi_fmul>
 800df04:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800df06:	491d      	ldr	r1, [pc, #116]	@ (800df7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800df08:	1c18      	adds	r0, r3, #0
 800df0a:	f7f3 f987 	bl	800121c <__aeabi_fsub>
 800df0e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800df10:	1c19      	adds	r1, r3, #0
 800df12:	1c28      	adds	r0, r5, #0
 800df14:	f7f3 f844 	bl	8000fa0 <__aeabi_fmul>
 800df18:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800df1a:	1c19      	adds	r1, r3, #0
 800df1c:	1c20      	adds	r0, r4, #0
 800df1e:	f7f2 fccf 	bl	80008c0 <__aeabi_fadd>
 800df22:	1c03      	adds	r3, r0, #0
 800df24:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df2e:	2100      	movs	r1, #0
 800df30:	1c18      	adds	r0, r3, #0
 800df32:	f7f2 fafd 	bl	8000530 <__aeabi_fcmplt>
 800df36:	1e03      	subs	r3, r0, #0
 800df38:	d002      	beq.n	800df40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800df48:	1c19      	adds	r1, r3, #0
 800df4a:	1c10      	adds	r0, r2, #0
 800df4c:	f7f2 fb04 	bl	8000558 <__aeabi_fcmpgt>
 800df50:	1e03      	subs	r3, r0, #0
 800df52:	d100      	bne.n	800df56 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800df54:	e002      	b.n	800df5c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800df5c:	46c0      	nop			@ (mov r8, r8)
 800df5e:	46bd      	mov	sp, r7
 800df60:	b00c      	add	sp, #48	@ 0x30
 800df62:	bdb0      	pop	{r4, r5, r7, pc}
 800df64:	46fffe00 	.word	0x46fffe00
 800df68:	3c23d70a 	.word	0x3c23d70a
 800df6c:	43ff0000 	.word	0x43ff0000
 800df70:	3db851ec 	.word	0x3db851ec
 800df74:	42700000 	.word	0x42700000
 800df78:	3fa66666 	.word	0x3fa66666
 800df7c:	3e99999a 	.word	0x3e99999a

0800df80 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800df80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df82:	b087      	sub	sp, #28
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	223c      	movs	r2, #60	@ 0x3c
 800df8e:	5c9b      	ldrb	r3, [r3, r2]
 800df90:	2201      	movs	r2, #1
 800df92:	4053      	eors	r3, r2
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00a      	beq.n	800dfb0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	223c      	movs	r2, #60	@ 0x3c
 800df9e:	2101      	movs	r1, #1
 800dfa0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800dfae:	e0c8      	b.n	800e142 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfb4:	4965      	ldr	r1, [pc, #404]	@ (800e14c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800dfb6:	1c18      	adds	r0, r3, #0
 800dfb8:	f7f2 fad8 	bl	800056c <__aeabi_fcmpge>
 800dfbc:	1e03      	subs	r3, r0, #0
 800dfbe:	d107      	bne.n	800dfd0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800dfc4:	4962      	ldr	r1, [pc, #392]	@ (800e150 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800dfc6:	1c18      	adds	r0, r3, #0
 800dfc8:	f7f2 fabc 	bl	8000544 <__aeabi_fcmple>
 800dfcc:	1e03      	subs	r3, r0, #0
 800dfce:	d00e      	beq.n	800dfee <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800dfd8:	1c19      	adds	r1, r3, #0
 800dfda:	1c10      	adds	r0, r2, #0
 800dfdc:	f7f2 fc70 	bl	80008c0 <__aeabi_fadd>
 800dfe0:	1c03      	adds	r3, r0, #0
 800dfe2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dff2:	1c19      	adds	r1, r3, #0
 800dff4:	6838      	ldr	r0, [r7, #0]
 800dff6:	f7f3 f911 	bl	800121c <__aeabi_fsub>
 800dffa:	1c03      	adds	r3, r0, #0
 800dffc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	0018      	movs	r0, r3
 800e002:	f7ff fe7d 	bl	800dd00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e00a:	1c19      	adds	r1, r3, #0
 800e00c:	6838      	ldr	r0, [r7, #0]
 800e00e:	f7f3 f905 	bl	800121c <__aeabi_fsub>
 800e012:	1c03      	adds	r3, r0, #0
 800e014:	2185      	movs	r1, #133	@ 0x85
 800e016:	05c9      	lsls	r1, r1, #23
 800e018:	1c18      	adds	r0, r3, #0
 800e01a:	f7f2 fddb 	bl	8000bd4 <__aeabi_fdiv>
 800e01e:	1c03      	adds	r3, r0, #0
 800e020:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800e022:	2100      	movs	r1, #0
 800e024:	68f8      	ldr	r0, [r7, #12]
 800e026:	f7f2 fa83 	bl	8000530 <__aeabi_fcmplt>
 800e02a:	1e03      	subs	r3, r0, #0
 800e02c:	d008      	beq.n	800e040 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e032:	68f9      	ldr	r1, [r7, #12]
 800e034:	1c18      	adds	r0, r3, #0
 800e036:	f7f3 f8f1 	bl	800121c <__aeabi_fsub>
 800e03a:	1c03      	adds	r3, r0, #0
 800e03c:	617b      	str	r3, [r7, #20]
 800e03e:	e007      	b.n	800e050 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e044:	1c19      	adds	r1, r3, #0
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7f2 fc3a 	bl	80008c0 <__aeabi_fadd>
 800e04c:	1c03      	adds	r3, r0, #0
 800e04e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800e050:	23fe      	movs	r3, #254	@ 0xfe
 800e052:	059b      	lsls	r3, r3, #22
 800e054:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800e056:	493f      	ldr	r1, [pc, #252]	@ (800e154 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800e058:	6978      	ldr	r0, [r7, #20]
 800e05a:	f7f2 fa7d 	bl	8000558 <__aeabi_fcmpgt>
 800e05e:	1e03      	subs	r3, r0, #0
 800e060:	d010      	beq.n	800e084 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800e062:	493c      	ldr	r1, [pc, #240]	@ (800e154 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800e064:	6978      	ldr	r0, [r7, #20]
 800e066:	f7f2 fdb5 	bl	8000bd4 <__aeabi_fdiv>
 800e06a:	1c03      	adds	r3, r0, #0
 800e06c:	1c1c      	adds	r4, r3, #0
 800e06e:	4939      	ldr	r1, [pc, #228]	@ (800e154 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800e070:	6978      	ldr	r0, [r7, #20]
 800e072:	f7f2 fdaf 	bl	8000bd4 <__aeabi_fdiv>
 800e076:	1c03      	adds	r3, r0, #0
 800e078:	1c19      	adds	r1, r3, #0
 800e07a:	1c20      	adds	r0, r4, #0
 800e07c:	f7f2 ff90 	bl	8000fa0 <__aeabi_fmul>
 800e080:	1c03      	adds	r3, r0, #0
 800e082:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800e088:	1c19      	adds	r1, r3, #0
 800e08a:	2085      	movs	r0, #133	@ 0x85
 800e08c:	05c0      	lsls	r0, r0, #23
 800e08e:	f7f3 f8c5 	bl	800121c <__aeabi_fsub>
 800e092:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800e094:	6939      	ldr	r1, [r7, #16]
 800e096:	1c18      	adds	r0, r3, #0
 800e098:	f7f2 ff82 	bl	8000fa0 <__aeabi_fmul>
 800e09c:	1c03      	adds	r3, r0, #0
 800e09e:	1c18      	adds	r0, r3, #0
 800e0a0:	f018 fb72 	bl	8026788 <sqrtf>
 800e0a4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800e0ae:	2185      	movs	r1, #133	@ 0x85
 800e0b0:	05c9      	lsls	r1, r1, #23
 800e0b2:	6938      	ldr	r0, [r7, #16]
 800e0b4:	f7f2 ff74 	bl	8000fa0 <__aeabi_fmul>
 800e0b8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800e0ba:	1c19      	adds	r1, r3, #0
 800e0bc:	1c28      	adds	r0, r5, #0
 800e0be:	f7f2 fd89 	bl	8000bd4 <__aeabi_fdiv>
 800e0c2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800e0c4:	1c19      	adds	r1, r3, #0
 800e0c6:	1c20      	adds	r0, r4, #0
 800e0c8:	f7f2 ff6a 	bl	8000fa0 <__aeabi_fmul>
 800e0cc:	1c03      	adds	r3, r0, #0
 800e0ce:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0d4:	68f9      	ldr	r1, [r7, #12]
 800e0d6:	1c18      	adds	r0, r3, #0
 800e0d8:	f7f2 ff62 	bl	8000fa0 <__aeabi_fmul>
 800e0dc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800e0de:	6939      	ldr	r1, [r7, #16]
 800e0e0:	1c18      	adds	r0, r3, #0
 800e0e2:	f7f2 fd77 	bl	8000bd4 <__aeabi_fdiv>
 800e0e6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800e0e8:	68f9      	ldr	r1, [r7, #12]
 800e0ea:	1c18      	adds	r0, r3, #0
 800e0ec:	f7f2 ff58 	bl	8000fa0 <__aeabi_fmul>
 800e0f0:	1c03      	adds	r3, r0, #0
             sqrtf(
 800e0f2:	1c19      	adds	r1, r3, #0
 800e0f4:	1c20      	adds	r0, r4, #0
 800e0f6:	f7f2 fbe3 	bl	80008c0 <__aeabi_fadd>
 800e0fa:	1c03      	adds	r3, r0, #0
 800e0fc:	1c18      	adds	r0, r3, #0
 800e0fe:	f018 fb43 	bl	8026788 <sqrtf>
 800e102:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800e104:	1c19      	adds	r1, r3, #0
 800e106:	1c30      	adds	r0, r6, #0
 800e108:	f7f2 ff4a 	bl	8000fa0 <__aeabi_fmul>
 800e10c:	1c03      	adds	r3, r0, #0
 800e10e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e11c:	68f9      	ldr	r1, [r7, #12]
 800e11e:	1c18      	adds	r0, r3, #0
 800e120:	f7f2 ff3e 	bl	8000fa0 <__aeabi_fmul>
 800e124:	1c03      	adds	r3, r0, #0
 800e126:	2182      	movs	r1, #130	@ 0x82
 800e128:	05c9      	lsls	r1, r1, #23
 800e12a:	1c18      	adds	r0, r3, #0
 800e12c:	f7f2 fd52 	bl	8000bd4 <__aeabi_fdiv>
 800e130:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800e132:	1c19      	adds	r1, r3, #0
 800e134:	1c20      	adds	r0, r4, #0
 800e136:	f7f2 fbc3 	bl	80008c0 <__aeabi_fadd>
 800e13a:	1c03      	adds	r3, r0, #0
 800e13c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e142:	46c0      	nop			@ (mov r8, r8)
 800e144:	46bd      	mov	sp, r7
 800e146:	b007      	add	sp, #28
 800e148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e14a:	46c0      	nop			@ (mov r8, r8)
 800e14c:	42c80000 	.word	0x42c80000
 800e150:	c2c80000 	.word	0xc2c80000
 800e154:	44b40000 	.word	0x44b40000

0800e158 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e170:	46c0      	nop			@ (mov r8, r8)
 800e172:	46bd      	mov	sp, r7
 800e174:	b004      	add	sp, #16
 800e176:	bd80      	pop	{r7, pc}

0800e178 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800e178:	b590      	push	{r4, r7, lr}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e18a:	1c19      	adds	r1, r3, #0
 800e18c:	6838      	ldr	r0, [r7, #0]
 800e18e:	f7f3 f845 	bl	800121c <__aeabi_fsub>
 800e192:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800e194:	1c19      	adds	r1, r3, #0
 800e196:	1c20      	adds	r0, r4, #0
 800e198:	f7f2 ff02 	bl	8000fa0 <__aeabi_fmul>
 800e19c:	1c03      	adds	r3, r0, #0
 800e19e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800e1a0:	4912      	ldr	r1, [pc, #72]	@ (800e1ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7f2 f9c4 	bl	8000530 <__aeabi_fcmplt>
 800e1a8:	1e03      	subs	r3, r0, #0
 800e1aa:	d002      	beq.n	800e1b2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800e1ac:	23fe      	movs	r3, #254	@ 0xfe
 800e1ae:	059b      	lsls	r3, r3, #22
 800e1b0:	e018      	b.n	800e1e4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800e1b2:	490f      	ldr	r1, [pc, #60]	@ (800e1f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800e1b4:	68f8      	ldr	r0, [r7, #12]
 800e1b6:	f7f2 f9cf 	bl	8000558 <__aeabi_fcmpgt>
 800e1ba:	1e03      	subs	r3, r0, #0
 800e1bc:	d001      	beq.n	800e1c2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e010      	b.n	800e1e4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	1c18      	adds	r0, r3, #0
 800e1c6:	f018 fab7 	bl	8026738 <expf>
 800e1ca:	1c03      	adds	r3, r0, #0
 800e1cc:	21fe      	movs	r1, #254	@ 0xfe
 800e1ce:	0589      	lsls	r1, r1, #22
 800e1d0:	1c18      	adds	r0, r3, #0
 800e1d2:	f7f2 fb75 	bl	80008c0 <__aeabi_fadd>
 800e1d6:	1c03      	adds	r3, r0, #0
 800e1d8:	1c19      	adds	r1, r3, #0
 800e1da:	20fe      	movs	r0, #254	@ 0xfe
 800e1dc:	0580      	lsls	r0, r0, #22
 800e1de:	f7f2 fcf9 	bl	8000bd4 <__aeabi_fdiv>
 800e1e2:	1c03      	adds	r3, r0, #0
    }
}
 800e1e4:	1c18      	adds	r0, r3, #0
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	b005      	add	sp, #20
 800e1ea:	bd90      	pop	{r4, r7, pc}
 800e1ec:	c2480000 	.word	0xc2480000
 800e1f0:	42480000 	.word	0x42480000

0800e1f4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800e20c:	46c0      	nop			@ (mov r8, r8)
 800e20e:	46bd      	mov	sp, r7
 800e210:	b004      	add	sp, #16
 800e212:	bd80      	pop	{r7, pc}

0800e214 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800e214:	b590      	push	{r4, r7, lr}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2b01      	cmp	r3, #1
 800e224:	d114      	bne.n	800e250 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e22a:	1c19      	adds	r1, r3, #0
 800e22c:	6838      	ldr	r0, [r7, #0]
 800e22e:	f7f2 fff5 	bl	800121c <__aeabi_fsub>
 800e232:	1c03      	adds	r3, r0, #0
 800e234:	4918      	ldr	r1, [pc, #96]	@ (800e298 <GasIndexAlgorithm__mox_model__process+0x84>)
 800e236:	1c18      	adds	r0, r3, #0
 800e238:	f7f2 fccc 	bl	8000bd4 <__aeabi_fdiv>
 800e23c:	1c03      	adds	r3, r0, #0
 800e23e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800e244:	1c19      	adds	r1, r3, #0
 800e246:	1c10      	adds	r0, r2, #0
 800e248:	f7f2 feaa 	bl	8000fa0 <__aeabi_fmul>
 800e24c:	1c03      	adds	r3, r0, #0
 800e24e:	e01f      	b.n	800e290 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e254:	1c19      	adds	r1, r3, #0
 800e256:	6838      	ldr	r0, [r7, #0]
 800e258:	f7f2 ffe0 	bl	800121c <__aeabi_fsub>
 800e25c:	1c03      	adds	r3, r0, #0
 800e25e:	1c1a      	adds	r2, r3, #0
 800e260:	2380      	movs	r3, #128	@ 0x80
 800e262:	061b      	lsls	r3, r3, #24
 800e264:	4053      	eors	r3, r2
 800e266:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e26c:	490b      	ldr	r1, [pc, #44]	@ (800e29c <GasIndexAlgorithm__mox_model__process+0x88>)
 800e26e:	1c18      	adds	r0, r3, #0
 800e270:	f7f2 fb26 	bl	80008c0 <__aeabi_fadd>
 800e274:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e276:	1c19      	adds	r1, r3, #0
 800e278:	1c20      	adds	r0, r4, #0
 800e27a:	f7f2 fcab 	bl	8000bd4 <__aeabi_fdiv>
 800e27e:	1c03      	adds	r3, r0, #0
 800e280:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800e286:	1c19      	adds	r1, r3, #0
 800e288:	1c10      	adds	r0, r2, #0
 800e28a:	f7f2 fe89 	bl	8000fa0 <__aeabi_fmul>
 800e28e:	1c03      	adds	r3, r0, #0
    }
}
 800e290:	1c18      	adds	r0, r3, #0
 800e292:	46bd      	mov	sp, r7
 800e294:	b003      	add	sp, #12
 800e296:	bd90      	pop	{r4, r7, pc}
 800e298:	44fa0000 	.word	0x44fa0000
 800e29c:	435c0000 	.word	0x435c0000

0800e2a0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2180      	movs	r1, #128	@ 0x80
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2184      	movs	r1, #132	@ 0x84
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2188      	movs	r1, #136	@ 0x88
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	505a      	str	r2, [r3, r1]
}
 800e2c6:	46c0      	nop			@ (mov r8, r8)
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	b004      	add	sp, #16
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800e2d0:	b590      	push	{r4, r7, lr}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2280      	movs	r2, #128	@ 0x80
 800e2de:	589c      	ldr	r4, [r3, r2]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2284      	movs	r2, #132	@ 0x84
 800e2e4:	589b      	ldr	r3, [r3, r2]
 800e2e6:	1c19      	adds	r1, r3, #0
 800e2e8:	6838      	ldr	r0, [r7, #0]
 800e2ea:	f7f2 ff97 	bl	800121c <__aeabi_fsub>
 800e2ee:	1c03      	adds	r3, r0, #0
 800e2f0:	1c19      	adds	r1, r3, #0
 800e2f2:	1c20      	adds	r0, r4, #0
 800e2f4:	f7f2 fe54 	bl	8000fa0 <__aeabi_fmul>
 800e2f8:	1c03      	adds	r3, r0, #0
 800e2fa:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800e2fc:	4940      	ldr	r1, [pc, #256]	@ (800e400 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800e2fe:	68b8      	ldr	r0, [r7, #8]
 800e300:	f7f2 f916 	bl	8000530 <__aeabi_fcmplt>
 800e304:	1e03      	subs	r3, r0, #0
 800e306:	d001      	beq.n	800e30c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800e308:	4b3e      	ldr	r3, [pc, #248]	@ (800e404 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e30a:	e075      	b.n	800e3f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800e30c:	493e      	ldr	r1, [pc, #248]	@ (800e408 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800e30e:	68b8      	ldr	r0, [r7, #8]
 800e310:	f7f2 f922 	bl	8000558 <__aeabi_fcmpgt>
 800e314:	1e03      	subs	r3, r0, #0
 800e316:	d001      	beq.n	800e31c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800e318:	2300      	movs	r3, #0
 800e31a:	e06d      	b.n	800e3f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800e31c:	2100      	movs	r1, #0
 800e31e:	6838      	ldr	r0, [r7, #0]
 800e320:	f7f2 f924 	bl	800056c <__aeabi_fcmpge>
 800e324:	1e03      	subs	r3, r0, #0
 800e326:	d047      	beq.n	800e3b8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2288      	movs	r2, #136	@ 0x88
 800e32c:	589b      	ldr	r3, [r3, r2]
 800e32e:	21fe      	movs	r1, #254	@ 0xfe
 800e330:	0589      	lsls	r1, r1, #22
 800e332:	1c18      	adds	r0, r3, #0
 800e334:	f7f2 f8f6 	bl	8000524 <__aeabi_fcmpeq>
 800e338:	1e03      	subs	r3, r0, #0
 800e33a:	d00e      	beq.n	800e35a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	1c19      	adds	r1, r3, #0
 800e342:	20fe      	movs	r0, #254	@ 0xfe
 800e344:	0580      	lsls	r0, r0, #22
 800e346:	f7f2 ff69 	bl	800121c <__aeabi_fsub>
 800e34a:	1c03      	adds	r3, r0, #0
 800e34c:	492f      	ldr	r1, [pc, #188]	@ (800e40c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800e34e:	1c18      	adds	r0, r3, #0
 800e350:	f7f2 fe26 	bl	8000fa0 <__aeabi_fmul>
 800e354:	1c03      	adds	r3, r0, #0
 800e356:	60fb      	str	r3, [r7, #12]
 800e358:	e012      	b.n	800e380 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	492c      	ldr	r1, [pc, #176]	@ (800e410 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800e360:	1c18      	adds	r0, r3, #0
 800e362:	f7f2 fe1d 	bl	8000fa0 <__aeabi_fmul>
 800e366:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800e368:	1c19      	adds	r1, r3, #0
 800e36a:	4826      	ldr	r0, [pc, #152]	@ (800e404 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e36c:	f7f2 ff56 	bl	800121c <__aeabi_fsub>
 800e370:	1c03      	adds	r3, r0, #0
 800e372:	2181      	movs	r1, #129	@ 0x81
 800e374:	05c9      	lsls	r1, r1, #23
 800e376:	1c18      	adds	r0, r3, #0
 800e378:	f7f2 fc2c 	bl	8000bd4 <__aeabi_fdiv>
 800e37c:	1c03      	adds	r3, r0, #0
 800e37e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800e380:	4920      	ldr	r1, [pc, #128]	@ (800e404 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f7f2 fa9c 	bl	80008c0 <__aeabi_fadd>
 800e388:	1c03      	adds	r3, r0, #0
 800e38a:	1c1c      	adds	r4, r3, #0
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	1c18      	adds	r0, r3, #0
 800e390:	f018 f9d2 	bl	8026738 <expf>
 800e394:	1c03      	adds	r3, r0, #0
 800e396:	21fe      	movs	r1, #254	@ 0xfe
 800e398:	0589      	lsls	r1, r1, #22
 800e39a:	1c18      	adds	r0, r3, #0
 800e39c:	f7f2 fa90 	bl	80008c0 <__aeabi_fadd>
 800e3a0:	1c03      	adds	r3, r0, #0
 800e3a2:	1c19      	adds	r1, r3, #0
 800e3a4:	1c20      	adds	r0, r4, #0
 800e3a6:	f7f2 fc15 	bl	8000bd4 <__aeabi_fdiv>
 800e3aa:	1c03      	adds	r3, r0, #0
 800e3ac:	68f9      	ldr	r1, [r7, #12]
 800e3ae:	1c18      	adds	r0, r3, #0
 800e3b0:	f7f2 ff34 	bl	800121c <__aeabi_fsub>
 800e3b4:	1c03      	adds	r3, r0, #0
 800e3b6:	e01f      	b.n	800e3f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2188      	movs	r1, #136	@ 0x88
 800e3c0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800e3c2:	1c19      	adds	r1, r3, #0
 800e3c4:	1c10      	adds	r0, r2, #0
 800e3c6:	f7f2 fc05 	bl	8000bd4 <__aeabi_fdiv>
 800e3ca:	1c03      	adds	r3, r0, #0
 800e3cc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	1c18      	adds	r0, r3, #0
 800e3d2:	f018 f9b1 	bl	8026738 <expf>
 800e3d6:	1c03      	adds	r3, r0, #0
 800e3d8:	21fe      	movs	r1, #254	@ 0xfe
 800e3da:	0589      	lsls	r1, r1, #22
 800e3dc:	1c18      	adds	r0, r3, #0
 800e3de:	f7f2 fa6f 	bl	80008c0 <__aeabi_fadd>
 800e3e2:	1c03      	adds	r3, r0, #0
 800e3e4:	1c19      	adds	r1, r3, #0
 800e3e6:	4807      	ldr	r0, [pc, #28]	@ (800e404 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e3e8:	f7f2 fbf4 	bl	8000bd4 <__aeabi_fdiv>
 800e3ec:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800e3ee:	1c19      	adds	r1, r3, #0
 800e3f0:	1c20      	adds	r0, r4, #0
 800e3f2:	f7f2 fdd5 	bl	8000fa0 <__aeabi_fmul>
 800e3f6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800e3f8:	1c18      	adds	r0, r3, #0
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	b005      	add	sp, #20
 800e3fe:	bd90      	pop	{r4, r7, pc}
 800e400:	c2480000 	.word	0xc2480000
 800e404:	43fa0000 	.word	0x43fa0000
 800e408:	42480000 	.word	0x42480000
 800e40c:	3f8041ab 	.word	0x3f8041ab
 800e410:	40a00000 	.word	0x40a00000

0800e414 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	4913      	ldr	r1, [pc, #76]	@ (800e474 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800e426:	1c18      	adds	r0, r3, #0
 800e428:	f7f2 fa4a 	bl	80008c0 <__aeabi_fadd>
 800e42c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800e42e:	1c19      	adds	r1, r3, #0
 800e430:	1c20      	adds	r0, r4, #0
 800e432:	f7f2 fbcf 	bl	8000bd4 <__aeabi_fdiv>
 800e436:	1c03      	adds	r3, r0, #0
 800e438:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	228c      	movs	r2, #140	@ 0x8c
 800e43e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	490b      	ldr	r1, [pc, #44]	@ (800e478 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800e44a:	1c18      	adds	r0, r3, #0
 800e44c:	f7f2 fa38 	bl	80008c0 <__aeabi_fadd>
 800e450:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800e452:	1c19      	adds	r1, r3, #0
 800e454:	1c20      	adds	r0, r4, #0
 800e456:	f7f2 fbbd 	bl	8000bd4 <__aeabi_fdiv>
 800e45a:	1c03      	adds	r3, r0, #0
 800e45c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2290      	movs	r2, #144	@ 0x90
 800e462:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2294      	movs	r2, #148	@ 0x94
 800e468:	2100      	movs	r1, #0
 800e46a:	5499      	strb	r1, [r3, r2]
}
 800e46c:	46c0      	nop			@ (mov r8, r8)
 800e46e:	46bd      	mov	sp, r7
 800e470:	b003      	add	sp, #12
 800e472:	bd90      	pop	{r4, r7, pc}
 800e474:	41a00000 	.word	0x41a00000
 800e478:	43fa0000 	.word	0x43fa0000

0800e47c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b087      	sub	sp, #28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2294      	movs	r2, #148	@ 0x94
 800e48a:	5c9b      	ldrb	r3, [r3, r2]
 800e48c:	2201      	movs	r2, #1
 800e48e:	4053      	eors	r3, r2
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00f      	beq.n	800e4b6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2198      	movs	r1, #152	@ 0x98
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	219c      	movs	r1, #156	@ 0x9c
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	21a0      	movs	r1, #160	@ 0xa0
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2294      	movs	r2, #148	@ 0x94
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	228c      	movs	r2, #140	@ 0x8c
 800e4ba:	589b      	ldr	r3, [r3, r2]
 800e4bc:	1c19      	adds	r1, r3, #0
 800e4be:	20fe      	movs	r0, #254	@ 0xfe
 800e4c0:	0580      	lsls	r0, r0, #22
 800e4c2:	f7f2 feab 	bl	800121c <__aeabi_fsub>
 800e4c6:	1c03      	adds	r3, r0, #0
 800e4c8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2298      	movs	r2, #152	@ 0x98
 800e4ce:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800e4d0:	1c19      	adds	r1, r3, #0
 800e4d2:	f7f2 fd65 	bl	8000fa0 <__aeabi_fmul>
 800e4d6:	1c03      	adds	r3, r0, #0
 800e4d8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	228c      	movs	r2, #140	@ 0x8c
 800e4de:	589b      	ldr	r3, [r3, r2]
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	1c18      	adds	r0, r3, #0
 800e4e4:	f7f2 fd5c 	bl	8000fa0 <__aeabi_fmul>
 800e4e8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800e4ea:	1c19      	adds	r1, r3, #0
 800e4ec:	1c20      	adds	r0, r4, #0
 800e4ee:	f7f2 f9e7 	bl	80008c0 <__aeabi_fadd>
 800e4f2:	1c03      	adds	r3, r0, #0
 800e4f4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2298      	movs	r2, #152	@ 0x98
 800e4fa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2290      	movs	r2, #144	@ 0x90
 800e500:	589b      	ldr	r3, [r3, r2]
 800e502:	1c19      	adds	r1, r3, #0
 800e504:	20fe      	movs	r0, #254	@ 0xfe
 800e506:	0580      	lsls	r0, r0, #22
 800e508:	f7f2 fe88 	bl	800121c <__aeabi_fsub>
 800e50c:	1c03      	adds	r3, r0, #0
 800e50e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	229c      	movs	r2, #156	@ 0x9c
 800e514:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800e516:	1c19      	adds	r1, r3, #0
 800e518:	f7f2 fd42 	bl	8000fa0 <__aeabi_fmul>
 800e51c:	1c03      	adds	r3, r0, #0
 800e51e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2290      	movs	r2, #144	@ 0x90
 800e524:	589b      	ldr	r3, [r3, r2]
 800e526:	6839      	ldr	r1, [r7, #0]
 800e528:	1c18      	adds	r0, r3, #0
 800e52a:	f7f2 fd39 	bl	8000fa0 <__aeabi_fmul>
 800e52e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800e530:	1c19      	adds	r1, r3, #0
 800e532:	1c20      	adds	r0, r4, #0
 800e534:	f7f2 f9c4 	bl	80008c0 <__aeabi_fadd>
 800e538:	1c03      	adds	r3, r0, #0
 800e53a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	229c      	movs	r2, #156	@ 0x9c
 800e540:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2298      	movs	r2, #152	@ 0x98
 800e546:	589a      	ldr	r2, [r3, r2]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	219c      	movs	r1, #156	@ 0x9c
 800e54c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800e54e:	1c19      	adds	r1, r3, #0
 800e550:	1c10      	adds	r0, r2, #0
 800e552:	f7f2 fe63 	bl	800121c <__aeabi_fsub>
 800e556:	1c03      	adds	r3, r0, #0
 800e558:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800e55a:	2100      	movs	r1, #0
 800e55c:	6978      	ldr	r0, [r7, #20]
 800e55e:	f7f1 ffe7 	bl	8000530 <__aeabi_fcmplt>
 800e562:	1e03      	subs	r3, r0, #0
 800e564:	d004      	beq.n	800e570 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2280      	movs	r2, #128	@ 0x80
 800e56a:	0612      	lsls	r2, r2, #24
 800e56c:	4053      	eors	r3, r2
 800e56e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800e570:	4923      	ldr	r1, [pc, #140]	@ (800e600 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800e572:	6978      	ldr	r0, [r7, #20]
 800e574:	f7f2 fd14 	bl	8000fa0 <__aeabi_fmul>
 800e578:	1c03      	adds	r3, r0, #0
 800e57a:	1c18      	adds	r0, r3, #0
 800e57c:	f018 f8dc 	bl	8026738 <expf>
 800e580:	1c03      	adds	r3, r0, #0
 800e582:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800e584:	491f      	ldr	r1, [pc, #124]	@ (800e604 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800e586:	6938      	ldr	r0, [r7, #16]
 800e588:	f7f2 fd0a 	bl	8000fa0 <__aeabi_fmul>
 800e58c:	1c03      	adds	r3, r0, #0
 800e58e:	491e      	ldr	r1, [pc, #120]	@ (800e608 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800e590:	1c18      	adds	r0, r3, #0
 800e592:	f7f2 f995 	bl	80008c0 <__aeabi_fadd>
 800e596:	1c03      	adds	r3, r0, #0
 800e598:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685c      	ldr	r4, [r3, #4]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	68f9      	ldr	r1, [r7, #12]
 800e5a4:	1c18      	adds	r0, r3, #0
 800e5a6:	f7f2 f98b 	bl	80008c0 <__aeabi_fadd>
 800e5aa:	1c03      	adds	r3, r0, #0
 800e5ac:	1c19      	adds	r1, r3, #0
 800e5ae:	1c20      	adds	r0, r4, #0
 800e5b0:	f7f2 fb10 	bl	8000bd4 <__aeabi_fdiv>
 800e5b4:	1c03      	adds	r3, r0, #0
 800e5b6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800e5b8:	68b9      	ldr	r1, [r7, #8]
 800e5ba:	20fe      	movs	r0, #254	@ 0xfe
 800e5bc:	0580      	lsls	r0, r0, #22
 800e5be:	f7f2 fe2d 	bl	800121c <__aeabi_fsub>
 800e5c2:	1c03      	adds	r3, r0, #0
 800e5c4:	1c18      	adds	r0, r3, #0
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	22a0      	movs	r2, #160	@ 0xa0
 800e5ca:	589b      	ldr	r3, [r3, r2]
 800e5cc:	1c19      	adds	r1, r3, #0
 800e5ce:	f7f2 fce7 	bl	8000fa0 <__aeabi_fmul>
 800e5d2:	1c03      	adds	r3, r0, #0
 800e5d4:	1c1c      	adds	r4, r3, #0
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	68b8      	ldr	r0, [r7, #8]
 800e5da:	f7f2 fce1 	bl	8000fa0 <__aeabi_fmul>
 800e5de:	1c03      	adds	r3, r0, #0
 800e5e0:	1c19      	adds	r1, r3, #0
 800e5e2:	1c20      	adds	r0, r4, #0
 800e5e4:	f7f2 f96c 	bl	80008c0 <__aeabi_fadd>
 800e5e8:	1c03      	adds	r3, r0, #0
 800e5ea:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	22a0      	movs	r2, #160	@ 0xa0
 800e5f0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	22a0      	movs	r2, #160	@ 0xa0
 800e5f6:	589b      	ldr	r3, [r3, r2]
}
 800e5f8:	1c18      	adds	r0, r3, #0
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	b007      	add	sp, #28
 800e5fe:	bd90      	pop	{r4, r7, pc}
 800e600:	be4ccccd 	.word	0xbe4ccccd
 800e604:	43f00000 	.word	0x43f00000
 800e608:	41a00000 	.word	0x41a00000

0800e60c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	000a      	movs	r2, r1
 800e616:	1cbb      	adds	r3, r7, #2
 800e618:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800e61a:	230d      	movs	r3, #13
 800e61c:	18fb      	adds	r3, r7, r3
 800e61e:	22ff      	movs	r2, #255	@ 0xff
 800e620:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800e622:	230e      	movs	r3, #14
 800e624:	18fb      	adds	r3, r7, r3
 800e626:	2200      	movs	r2, #0
 800e628:	801a      	strh	r2, [r3, #0]
 800e62a:	e037      	b.n	800e69c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800e62c:	230e      	movs	r3, #14
 800e62e:	18fb      	adds	r3, r7, r3
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	18d3      	adds	r3, r2, r3
 800e636:	7819      	ldrb	r1, [r3, #0]
 800e638:	220d      	movs	r2, #13
 800e63a:	18bb      	adds	r3, r7, r2
 800e63c:	18ba      	adds	r2, r7, r2
 800e63e:	7812      	ldrb	r2, [r2, #0]
 800e640:	404a      	eors	r2, r1
 800e642:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800e644:	230c      	movs	r3, #12
 800e646:	18fb      	adds	r3, r7, r3
 800e648:	2208      	movs	r2, #8
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	e01b      	b.n	800e686 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800e64e:	210d      	movs	r1, #13
 800e650:	187b      	adds	r3, r7, r1
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	b25b      	sxtb	r3, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	da09      	bge.n	800e66e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800e65a:	187b      	adds	r3, r7, r1
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	005b      	lsls	r3, r3, #1
 800e660:	b25b      	sxtb	r3, r3
 800e662:	2231      	movs	r2, #49	@ 0x31
 800e664:	4053      	eors	r3, r2
 800e666:	b25a      	sxtb	r2, r3
 800e668:	187b      	adds	r3, r7, r1
 800e66a:	701a      	strb	r2, [r3, #0]
 800e66c:	e005      	b.n	800e67a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800e66e:	230d      	movs	r3, #13
 800e670:	18fa      	adds	r2, r7, r3
 800e672:	18fb      	adds	r3, r7, r3
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	18db      	adds	r3, r3, r3
 800e678:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800e67a:	220c      	movs	r2, #12
 800e67c:	18bb      	adds	r3, r7, r2
 800e67e:	18ba      	adds	r2, r7, r2
 800e680:	7812      	ldrb	r2, [r2, #0]
 800e682:	3a01      	subs	r2, #1
 800e684:	701a      	strb	r2, [r3, #0]
 800e686:	230c      	movs	r3, #12
 800e688:	18fb      	adds	r3, r7, r3
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1de      	bne.n	800e64e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800e690:	220e      	movs	r2, #14
 800e692:	18bb      	adds	r3, r7, r2
 800e694:	18ba      	adds	r2, r7, r2
 800e696:	8812      	ldrh	r2, [r2, #0]
 800e698:	3201      	adds	r2, #1
 800e69a:	801a      	strh	r2, [r3, #0]
 800e69c:	230e      	movs	r3, #14
 800e69e:	18fa      	adds	r2, r7, r3
 800e6a0:	1cbb      	adds	r3, r7, #2
 800e6a2:	8812      	ldrh	r2, [r2, #0]
 800e6a4:	881b      	ldrh	r3, [r3, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d3c0      	bcc.n	800e62c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800e6aa:	230d      	movs	r3, #13
 800e6ac:	18fb      	adds	r3, r7, r3
 800e6ae:	781b      	ldrb	r3, [r3, #0]
}
 800e6b0:	0018      	movs	r0, r3
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	b004      	add	sp, #16
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	0008      	movs	r0, r1
 800e6c2:	0011      	movs	r1, r2
 800e6c4:	1cbb      	adds	r3, r7, #2
 800e6c6:	1c02      	adds	r2, r0, #0
 800e6c8:	801a      	strh	r2, [r3, #0]
 800e6ca:	1c7b      	adds	r3, r7, #1
 800e6cc:	1c0a      	adds	r2, r1, #0
 800e6ce:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800e6d0:	1cbb      	adds	r3, r7, #2
 800e6d2:	881a      	ldrh	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	0011      	movs	r1, r2
 800e6d8:	0018      	movs	r0, r3
 800e6da:	f7ff ff97 	bl	800e60c <sensirion_i2c_generate_crc>
 800e6de:	0003      	movs	r3, r0
 800e6e0:	001a      	movs	r2, r3
 800e6e2:	1c7b      	adds	r3, r7, #1
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d001      	beq.n	800e6ee <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e000      	b.n	800e6f0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	0018      	movs	r0, r3
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	b002      	add	sp, #8
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	0008      	movs	r0, r1
 800e702:	0011      	movs	r1, r2
 800e704:	1cbb      	adds	r3, r7, #2
 800e706:	1c02      	adds	r2, r0, #0
 800e708:	801a      	strh	r2, [r3, #0]
 800e70a:	003b      	movs	r3, r7
 800e70c:	1c0a      	adds	r2, r1, #0
 800e70e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800e710:	003b      	movs	r3, r7
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	0a1b      	lsrs	r3, r3, #8
 800e716:	b299      	uxth	r1, r3
 800e718:	1cbb      	adds	r3, r7, #2
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	1cba      	adds	r2, r7, #2
 800e71e:	1c58      	adds	r0, r3, #1
 800e720:	8010      	strh	r0, [r2, #0]
 800e722:	001a      	movs	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	189b      	adds	r3, r3, r2
 800e728:	b2ca      	uxtb	r2, r1
 800e72a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800e72c:	1cbb      	adds	r3, r7, #2
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	1cba      	adds	r2, r7, #2
 800e732:	1c59      	adds	r1, r3, #1
 800e734:	8011      	strh	r1, [r2, #0]
 800e736:	001a      	movs	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	189b      	adds	r3, r3, r2
 800e73c:	003a      	movs	r2, r7
 800e73e:	8812      	ldrh	r2, [r2, #0]
 800e740:	b2d2      	uxtb	r2, r2
 800e742:	701a      	strb	r2, [r3, #0]
    return offset;
 800e744:	1cbb      	adds	r3, r7, #2
 800e746:	881b      	ldrh	r3, [r3, #0]
}
 800e748:	0018      	movs	r0, r3
 800e74a:	46bd      	mov	sp, r7
 800e74c:	b002      	add	sp, #8
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800e750:	b590      	push	{r4, r7, lr}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	0008      	movs	r0, r1
 800e75a:	0011      	movs	r1, r2
 800e75c:	1cbb      	adds	r3, r7, #2
 800e75e:	1c02      	adds	r2, r0, #0
 800e760:	801a      	strh	r2, [r3, #0]
 800e762:	003b      	movs	r3, r7
 800e764:	1c0a      	adds	r2, r1, #0
 800e766:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800e768:	003b      	movs	r3, r7
 800e76a:	881b      	ldrh	r3, [r3, #0]
 800e76c:	0a1b      	lsrs	r3, r3, #8
 800e76e:	b299      	uxth	r1, r3
 800e770:	1cbb      	adds	r3, r7, #2
 800e772:	881b      	ldrh	r3, [r3, #0]
 800e774:	1cba      	adds	r2, r7, #2
 800e776:	1c58      	adds	r0, r3, #1
 800e778:	8010      	strh	r0, [r2, #0]
 800e77a:	001a      	movs	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	189b      	adds	r3, r3, r2
 800e780:	b2ca      	uxtb	r2, r1
 800e782:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800e784:	1cbb      	adds	r3, r7, #2
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	1cba      	adds	r2, r7, #2
 800e78a:	1c59      	adds	r1, r3, #1
 800e78c:	8011      	strh	r1, [r2, #0]
 800e78e:	001a      	movs	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	189b      	adds	r3, r3, r2
 800e794:	003a      	movs	r2, r7
 800e796:	8812      	ldrh	r2, [r2, #0]
 800e798:	b2d2      	uxtb	r2, r2
 800e79a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800e79c:	1cbb      	adds	r3, r7, #2
 800e79e:	881b      	ldrh	r3, [r3, #0]
 800e7a0:	3b02      	subs	r3, #2
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800e7a6:	1cbb      	adds	r3, r7, #2
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	18d4      	adds	r4, r2, r3
 800e7ae:	2102      	movs	r1, #2
 800e7b0:	f7ff ff2c 	bl	800e60c <sensirion_i2c_generate_crc>
 800e7b4:	0003      	movs	r3, r0
 800e7b6:	7023      	strb	r3, [r4, #0]
    offset++;
 800e7b8:	1cbb      	adds	r3, r7, #2
 800e7ba:	881a      	ldrh	r2, [r3, #0]
 800e7bc:	1cbb      	adds	r3, r7, #2
 800e7be:	3201      	adds	r2, #1
 800e7c0:	801a      	strh	r2, [r3, #0]

    return offset;
 800e7c2:	1cbb      	adds	r3, r7, #2
 800e7c4:	881b      	ldrh	r3, [r3, #0]
}
 800e7c6:	0018      	movs	r0, r3
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	b003      	add	sp, #12
 800e7cc:	bd90      	pop	{r4, r7, pc}

0800e7ce <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b082      	sub	sp, #8
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
 800e7d6:	0008      	movs	r0, r1
 800e7d8:	0011      	movs	r1, r2
 800e7da:	1cbb      	adds	r3, r7, #2
 800e7dc:	1c02      	adds	r2, r0, #0
 800e7de:	801a      	strh	r2, [r3, #0]
 800e7e0:	003b      	movs	r3, r7
 800e7e2:	1c0a      	adds	r2, r1, #0
 800e7e4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800e7e6:	003b      	movs	r3, r7
 800e7e8:	881a      	ldrh	r2, [r3, #0]
 800e7ea:	1cbb      	adds	r3, r7, #2
 800e7ec:	8819      	ldrh	r1, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	0018      	movs	r0, r3
 800e7f2:	f7ff ffad 	bl	800e750 <sensirion_i2c_add_uint16_t_to_buffer>
 800e7f6:	0003      	movs	r3, r0
}
 800e7f8:	0018      	movs	r0, r3
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	b002      	add	sp, #8
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6039      	str	r1, [r7, #0]
 800e808:	0011      	movs	r1, r2
 800e80a:	1dfb      	adds	r3, r7, #7
 800e80c:	1c02      	adds	r2, r0, #0
 800e80e:	701a      	strb	r2, [r3, #0]
 800e810:	1d3b      	adds	r3, r7, #4
 800e812:	1c0a      	adds	r2, r1, #0
 800e814:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800e816:	1d3b      	adds	r3, r7, #4
 800e818:	881a      	ldrh	r2, [r3, #0]
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	1dfb      	adds	r3, r7, #7
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	0018      	movs	r0, r3
 800e822:	f7fe f9d9 	bl	800cbd8 <sensirion_i2c_hal_write>
 800e826:	0003      	movs	r3, r0
}
 800e828:	0018      	movs	r0, r3
 800e82a:	46bd      	mov	sp, r7
 800e82c:	b002      	add	sp, #8
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800e830:	b5b0      	push	{r4, r5, r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6039      	str	r1, [r7, #0]
 800e838:	0011      	movs	r1, r2
 800e83a:	1dfb      	adds	r3, r7, #7
 800e83c:	1c02      	adds	r2, r0, #0
 800e83e:	701a      	strb	r2, [r3, #0]
 800e840:	1d3b      	adds	r3, r7, #4
 800e842:	1c0a      	adds	r2, r1, #0
 800e844:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800e846:	1d3b      	adds	r3, r7, #4
 800e848:	881b      	ldrh	r3, [r3, #0]
 800e84a:	085b      	lsrs	r3, r3, #1
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	220a      	movs	r2, #10
 800e850:	18ba      	adds	r2, r7, r2
 800e852:	1c19      	adds	r1, r3, #0
 800e854:	1c0b      	adds	r3, r1, #0
 800e856:	18db      	adds	r3, r3, r3
 800e858:	185b      	adds	r3, r3, r1
 800e85a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800e85c:	1d3b      	adds	r3, r7, #4
 800e85e:	881b      	ldrh	r3, [r3, #0]
 800e860:	2201      	movs	r2, #1
 800e862:	4013      	ands	r3, r2
 800e864:	b29b      	uxth	r3, r3
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800e86a:	2304      	movs	r3, #4
 800e86c:	e06b      	b.n	800e946 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800e86e:	230a      	movs	r3, #10
 800e870:	18fb      	adds	r3, r7, r3
 800e872:	881a      	ldrh	r2, [r3, #0]
 800e874:	6839      	ldr	r1, [r7, #0]
 800e876:	1dfb      	adds	r3, r7, #7
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	0018      	movs	r0, r3
 800e87c:	f7fe f98c 	bl	800cb98 <sensirion_i2c_hal_read>
 800e880:	0003      	movs	r3, r0
 800e882:	001a      	movs	r2, r3
 800e884:	2108      	movs	r1, #8
 800e886:	187b      	adds	r3, r7, r1
 800e888:	801a      	strh	r2, [r3, #0]
    if (error) {
 800e88a:	000a      	movs	r2, r1
 800e88c:	18bb      	adds	r3, r7, r2
 800e88e:	2100      	movs	r1, #0
 800e890:	5e5b      	ldrsh	r3, [r3, r1]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800e896:	18bb      	adds	r3, r7, r2
 800e898:	2200      	movs	r2, #0
 800e89a:	5e9b      	ldrsh	r3, [r3, r2]
 800e89c:	e053      	b.n	800e946 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800e89e:	230e      	movs	r3, #14
 800e8a0:	18fb      	adds	r3, r7, r3
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	801a      	strh	r2, [r3, #0]
 800e8a6:	230c      	movs	r3, #12
 800e8a8:	18fb      	adds	r3, r7, r3
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	801a      	strh	r2, [r3, #0]
 800e8ae:	e041      	b.n	800e934 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800e8b0:	210e      	movs	r1, #14
 800e8b2:	187b      	adds	r3, r7, r1
 800e8b4:	881b      	ldrh	r3, [r3, #0]
 800e8b6:	683a      	ldr	r2, [r7, #0]
 800e8b8:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800e8ba:	187b      	adds	r3, r7, r1
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	3302      	adds	r3, #2
 800e8c0:	683a      	ldr	r2, [r7, #0]
 800e8c2:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	001a      	movs	r2, r3
 800e8c8:	2102      	movs	r1, #2
 800e8ca:	f7ff fef5 	bl	800e6b8 <sensirion_i2c_check_crc>
 800e8ce:	0003      	movs	r3, r0
 800e8d0:	001a      	movs	r2, r3
 800e8d2:	2108      	movs	r1, #8
 800e8d4:	187b      	adds	r3, r7, r1
 800e8d6:	801a      	strh	r2, [r3, #0]
        if (error) {
 800e8d8:	000a      	movs	r2, r1
 800e8da:	18bb      	adds	r3, r7, r2
 800e8dc:	2100      	movs	r1, #0
 800e8de:	5e5b      	ldrsh	r3, [r3, r1]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d003      	beq.n	800e8ec <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800e8e4:	18bb      	adds	r3, r7, r2
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	5e9b      	ldrsh	r3, [r3, r2]
 800e8ea:	e02c      	b.n	800e946 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800e8ec:	240e      	movs	r4, #14
 800e8ee:	193b      	adds	r3, r7, r4
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	18d2      	adds	r2, r2, r3
 800e8f6:	250c      	movs	r5, #12
 800e8f8:	197b      	adds	r3, r7, r5
 800e8fa:	881b      	ldrh	r3, [r3, #0]
 800e8fc:	1979      	adds	r1, r7, r5
 800e8fe:	1c58      	adds	r0, r3, #1
 800e900:	8008      	strh	r0, [r1, #0]
 800e902:	0019      	movs	r1, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	185b      	adds	r3, r3, r1
 800e908:	7812      	ldrb	r2, [r2, #0]
 800e90a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800e90c:	193b      	adds	r3, r7, r4
 800e90e:	881b      	ldrh	r3, [r3, #0]
 800e910:	3301      	adds	r3, #1
 800e912:	683a      	ldr	r2, [r7, #0]
 800e914:	18d2      	adds	r2, r2, r3
 800e916:	197b      	adds	r3, r7, r5
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	1979      	adds	r1, r7, r5
 800e91c:	1c58      	adds	r0, r3, #1
 800e91e:	8008      	strh	r0, [r1, #0]
 800e920:	0019      	movs	r1, r3
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	185b      	adds	r3, r3, r1
 800e926:	7812      	ldrb	r2, [r2, #0]
 800e928:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800e92a:	193b      	adds	r3, r7, r4
 800e92c:	193a      	adds	r2, r7, r4
 800e92e:	8812      	ldrh	r2, [r2, #0]
 800e930:	3203      	adds	r2, #3
 800e932:	801a      	strh	r2, [r3, #0]
 800e934:	230e      	movs	r3, #14
 800e936:	18fa      	adds	r2, r7, r3
 800e938:	230a      	movs	r3, #10
 800e93a:	18fb      	adds	r3, r7, r3
 800e93c:	8812      	ldrh	r2, [r2, #0]
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d3b5      	bcc.n	800e8b0 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800e944:	2300      	movs	r3, #0
}
 800e946:	0018      	movs	r0, r3
 800e948:	46bd      	mov	sp, r7
 800e94a:	b004      	add	sp, #16
 800e94c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e950 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800e950:	b590      	push	{r4, r7, lr}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6039      	str	r1, [r7, #0]
 800e958:	0011      	movs	r1, r2
 800e95a:	1dfb      	adds	r3, r7, #7
 800e95c:	1c02      	adds	r2, r0, #0
 800e95e:	701a      	strb	r2, [r3, #0]
 800e960:	1dbb      	adds	r3, r7, #6
 800e962:	1c0a      	adds	r2, r1, #0
 800e964:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800e966:	4b08      	ldr	r3, [pc, #32]	@ (800e988 <ReadRegister+0x38>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d008      	beq.n	800e980 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800e96e:	4b06      	ldr	r3, [pc, #24]	@ (800e988 <ReadRegister+0x38>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	1dba      	adds	r2, r7, #6
 800e974:	7814      	ldrb	r4, [r2, #0]
 800e976:	6839      	ldr	r1, [r7, #0]
 800e978:	1dfa      	adds	r2, r7, #7
 800e97a:	7810      	ldrb	r0, [r2, #0]
 800e97c:	0022      	movs	r2, r4
 800e97e:	4798      	blx	r3
  }
}
 800e980:	46c0      	nop			@ (mov r8, r8)
 800e982:	46bd      	mov	sp, r7
 800e984:	b003      	add	sp, #12
 800e986:	bd90      	pop	{r4, r7, pc}
 800e988:	20000ec4 	.word	0x20000ec4

0800e98c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6039      	str	r1, [r7, #0]
 800e994:	0011      	movs	r1, r2
 800e996:	1dfb      	adds	r3, r7, #7
 800e998:	1c02      	adds	r2, r0, #0
 800e99a:	701a      	strb	r2, [r3, #0]
 800e99c:	1dbb      	adds	r3, r7, #6
 800e99e:	1c0a      	adds	r2, r1, #0
 800e9a0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e9a2:	4b08      	ldr	r3, [pc, #32]	@ (800e9c4 <WriteRegister+0x38>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d008      	beq.n	800e9bc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800e9aa:	4b06      	ldr	r3, [pc, #24]	@ (800e9c4 <WriteRegister+0x38>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	1dba      	adds	r2, r7, #6
 800e9b0:	7814      	ldrb	r4, [r2, #0]
 800e9b2:	6839      	ldr	r1, [r7, #0]
 800e9b4:	1dfa      	adds	r2, r7, #7
 800e9b6:	7810      	ldrb	r0, [r2, #0]
 800e9b8:	0022      	movs	r2, r4
 800e9ba:	4798      	blx	r3
  }
}
 800e9bc:	46c0      	nop			@ (mov r8, r8)
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	b003      	add	sp, #12
 800e9c2:	bd90      	pop	{r4, r7, pc}
 800e9c4:	20000ec8 	.word	0x20000ec8

0800e9c8 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800e9d0:	f003 fb90 	bl	80120f4 <HAL_GetTick>
 800e9d4:	0002      	movs	r2, r0
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	18d2      	adds	r2, r2, r3
 800e9da:	4b03      	ldr	r3, [pc, #12]	@ (800e9e8 <setSGP40TimeStamp+0x20>)
 800e9dc:	601a      	str	r2, [r3, #0]
}
 800e9de:	46c0      	nop			@ (mov r8, r8)
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	b002      	add	sp, #8
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	46c0      	nop			@ (mov r8, r8)
 800e9e8:	20000ed8 	.word	0x20000ed8

0800e9ec <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800e9f0:	4b02      	ldr	r3, [pc, #8]	@ (800e9fc <ResetSGP40samplecounter+0x10>)
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	701a      	strb	r2, [r3, #0]
}
 800e9f6:	46c0      	nop			@ (mov r8, r8)
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	20000ed6 	.word	0x20000ed6

0800ea00 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800ea0a:	4b07      	ldr	r3, [pc, #28]	@ (800ea28 <SGP_Init+0x28>)
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800ea10:	4b06      	ldr	r3, [pc, #24]	@ (800ea2c <SGP_Init+0x2c>)
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800ea16:	4b06      	ldr	r3, [pc, #24]	@ (800ea30 <SGP_Init+0x30>)
 800ea18:	2100      	movs	r1, #0
 800ea1a:	0018      	movs	r0, r3
 800ea1c:	f7fe ff70 	bl	800d900 <GasIndexAlgorithm_init>
}
 800ea20:	46c0      	nop			@ (mov r8, r8)
 800ea22:	46bd      	mov	sp, r7
 800ea24:	b002      	add	sp, #8
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20000ec4 	.word	0x20000ec4
 800ea2c:	20000ec8 	.word	0x20000ec8
 800ea30:	20000ee0 	.word	0x20000ee0

0800ea34 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800ea34:	b580      	push	{r7, lr}
 800ea36:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800ea38:	4b07      	ldr	r3, [pc, #28]	@ (800ea58 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d004      	beq.n	800ea4a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800ea40:	4b06      	ldr	r3, [pc, #24]	@ (800ea5c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800ea42:	22fe      	movs	r2, #254	@ 0xfe
 800ea44:	0592      	lsls	r2, r2, #22
 800ea46:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800ea48:	e002      	b.n	800ea50 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800ea4a:	4b04      	ldr	r3, [pc, #16]	@ (800ea5c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800ea4c:	4a04      	ldr	r2, [pc, #16]	@ (800ea60 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800ea4e:	605a      	str	r2, [r3, #4]
}
 800ea50:	46c0      	nop			@ (mov r8, r8)
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	46c0      	nop			@ (mov r8, r8)
 800ea58:	20001e2d 	.word	0x20001e2d
 800ea5c:	20000ee0 	.word	0x20000ee0
 800ea60:	44610000 	.word	0x44610000

0800ea64 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800ea68:	4b13      	ldr	r3, [pc, #76]	@ (800eab8 <SGP_StartMeasurement+0x54>)
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d00d      	beq.n	800ea8c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ea70:	4b12      	ldr	r3, [pc, #72]	@ (800eabc <SGP_StartMeasurement+0x58>)
 800ea72:	2208      	movs	r2, #8
 800ea74:	0019      	movs	r1, r3
 800ea76:	2059      	movs	r0, #89	@ 0x59
 800ea78:	f7ff ff88 	bl	800e98c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800ea7c:	f003 fb3a 	bl	80120f4 <HAL_GetTick>
 800ea80:	0003      	movs	r3, r0
 800ea82:	331e      	adds	r3, #30
 800ea84:	001a      	movs	r2, r3
 800ea86:	4b0e      	ldr	r3, [pc, #56]	@ (800eac0 <SGP_StartMeasurement+0x5c>)
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	e00c      	b.n	800eaa6 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ea8c:	4b0d      	ldr	r3, [pc, #52]	@ (800eac4 <SGP_StartMeasurement+0x60>)
 800ea8e:	2208      	movs	r2, #8
 800ea90:	0019      	movs	r1, r3
 800ea92:	2059      	movs	r0, #89	@ 0x59
 800ea94:	f7ff ff7a 	bl	800e98c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800ea98:	f003 fb2c 	bl	80120f4 <HAL_GetTick>
 800ea9c:	0003      	movs	r3, r0
 800ea9e:	33aa      	adds	r3, #170	@ 0xaa
 800eaa0:	001a      	movs	r2, r3
 800eaa2:	4b09      	ldr	r3, [pc, #36]	@ (800eac8 <SGP_StartMeasurement+0x64>)
 800eaa4:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800eaa6:	4b09      	ldr	r3, [pc, #36]	@ (800eacc <SGP_StartMeasurement+0x68>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800eaac:	4b08      	ldr	r3, [pc, #32]	@ (800ead0 <SGP_StartMeasurement+0x6c>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	701a      	strb	r2, [r3, #0]
}
 800eab2:	46c0      	nop			@ (mov r8, r8)
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	20000f88 	.word	0x20000f88
 800eabc:	200000b0 	.word	0x200000b0
 800eac0:	200000c4 	.word	0x200000c4
 800eac4:	200000a8 	.word	0x200000a8
 800eac8:	200000bc 	.word	0x200000bc
 800eacc:	20000edc 	.word	0x20000edc
 800ead0:	20000edd 	.word	0x20000edd

0800ead4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800ead4:	b580      	push	{r7, lr}
 800ead6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800ead8:	4b04      	ldr	r3, [pc, #16]	@ (800eaec <SGP_HeatedUp+0x18>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	0018      	movs	r0, r3
 800eade:	f002 fe67 	bl	80117b0 <TimestampIsReached>
 800eae2:	0003      	movs	r3, r0
}
 800eae4:	0018      	movs	r0, r3
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	46c0      	nop			@ (mov r8, r8)
 800eaec:	200000bc 	.word	0x200000bc

0800eaf0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800eaf4:	4b04      	ldr	r3, [pc, #16]	@ (800eb08 <SGP_MeasurementReady+0x18>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	0018      	movs	r0, r3
 800eafa:	f002 fe59 	bl	80117b0 <TimestampIsReached>
 800eafe:	0003      	movs	r3, r0
}
 800eb00:	0018      	movs	r0, r3
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	46c0      	nop			@ (mov r8, r8)
 800eb08:	200000c4 	.word	0x200000c4

0800eb0c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800eb10:	4b04      	ldr	r3, [pc, #16]	@ (800eb24 <SGP_MeasurementDone+0x18>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	0018      	movs	r0, r3
 800eb16:	f002 fe4b 	bl	80117b0 <TimestampIsReached>
 800eb1a:	0003      	movs	r3, r0
}
 800eb1c:	0018      	movs	r0, r3
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	46c0      	nop			@ (mov r8, r8)
 800eb24:	200000c0 	.word	0x200000c0

0800eb28 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800eb2c:	4b04      	ldr	r3, [pc, #16]	@ (800eb40 <SGP_TurnHeaterOff+0x18>)
 800eb2e:	2202      	movs	r2, #2
 800eb30:	0019      	movs	r1, r3
 800eb32:	2059      	movs	r0, #89	@ 0x59
 800eb34:	f7ff ff2a 	bl	800e98c <WriteRegister>
}
 800eb38:	46c0      	nop			@ (mov r8, r8)
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	46c0      	nop			@ (mov r8, r8)
 800eb40:	200000a0 	.word	0x200000a0

0800eb44 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800eb44:	b590      	push	{r4, r7, lr}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af02      	add	r7, sp, #8
 800eb4a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800eb4c:	f7ff ffc2 	bl	800ead4 <SGP_HeatedUp>
 800eb50:	1e03      	subs	r3, r0, #0
 800eb52:	d032      	beq.n	800ebba <SGP_GetMeasurementValues+0x76>
 800eb54:	4b7f      	ldr	r3, [pc, #508]	@ (800ed54 <SGP_GetMeasurementValues+0x210>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	4053      	eors	r3, r2
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d02b      	beq.n	800ebba <SGP_GetMeasurementValues+0x76>
 800eb62:	4b7d      	ldr	r3, [pc, #500]	@ (800ed58 <SGP_GetMeasurementValues+0x214>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	2201      	movs	r2, #1
 800eb68:	4053      	eors	r3, r2
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d024      	beq.n	800ebba <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800eb70:	4b78      	ldr	r3, [pc, #480]	@ (800ed54 <SGP_GetMeasurementValues+0x210>)
 800eb72:	2201      	movs	r2, #1
 800eb74:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800eb76:	4b79      	ldr	r3, [pc, #484]	@ (800ed5c <SGP_GetMeasurementValues+0x218>)
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00d      	beq.n	800eb9a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800eb7e:	4b78      	ldr	r3, [pc, #480]	@ (800ed60 <SGP_GetMeasurementValues+0x21c>)
 800eb80:	2208      	movs	r2, #8
 800eb82:	0019      	movs	r1, r3
 800eb84:	2059      	movs	r0, #89	@ 0x59
 800eb86:	f7ff ff01 	bl	800e98c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800eb8a:	f003 fab3 	bl	80120f4 <HAL_GetTick>
 800eb8e:	0003      	movs	r3, r0
 800eb90:	331e      	adds	r3, #30
 800eb92:	001a      	movs	r2, r3
 800eb94:	4b73      	ldr	r3, [pc, #460]	@ (800ed64 <SGP_GetMeasurementValues+0x220>)
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	e00c      	b.n	800ebb4 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800eb9a:	4b73      	ldr	r3, [pc, #460]	@ (800ed68 <SGP_GetMeasurementValues+0x224>)
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	0019      	movs	r1, r3
 800eba0:	2059      	movs	r0, #89	@ 0x59
 800eba2:	f7ff fef3 	bl	800e98c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800eba6:	f003 faa5 	bl	80120f4 <HAL_GetTick>
 800ebaa:	0003      	movs	r3, r0
 800ebac:	331e      	adds	r3, #30
 800ebae:	001a      	movs	r2, r3
 800ebb0:	4b6c      	ldr	r3, [pc, #432]	@ (800ed64 <SGP_GetMeasurementValues+0x220>)
 800ebb2:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800ebb4:	4b68      	ldr	r3, [pc, #416]	@ (800ed58 <SGP_GetMeasurementValues+0x214>)
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800ebba:	4b66      	ldr	r3, [pc, #408]	@ (800ed54 <SGP_GetMeasurementValues+0x210>)
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d100      	bne.n	800ebc4 <SGP_GetMeasurementValues+0x80>
 800ebc2:	e0ab      	b.n	800ed1c <SGP_GetMeasurementValues+0x1d8>
 800ebc4:	f7ff ff94 	bl	800eaf0 <SGP_MeasurementReady>
 800ebc8:	1e03      	subs	r3, r0, #0
 800ebca:	d100      	bne.n	800ebce <SGP_GetMeasurementValues+0x8a>
 800ebcc:	e0a6      	b.n	800ed1c <SGP_GetMeasurementValues+0x1d8>
 800ebce:	4b67      	ldr	r3, [pc, #412]	@ (800ed6c <SGP_GetMeasurementValues+0x228>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	4053      	eors	r3, r2
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d100      	bne.n	800ebde <SGP_GetMeasurementValues+0x9a>
 800ebdc:	e09e      	b.n	800ed1c <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800ebde:	4b63      	ldr	r3, [pc, #396]	@ (800ed6c <SGP_GetMeasurementValues+0x228>)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800ebe4:	4b62      	ldr	r3, [pc, #392]	@ (800ed70 <SGP_GetMeasurementValues+0x22c>)
 800ebe6:	2203      	movs	r2, #3
 800ebe8:	0019      	movs	r1, r3
 800ebea:	2059      	movs	r0, #89	@ 0x59
 800ebec:	f7ff feb0 	bl	800e950 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800ebf0:	4b5f      	ldr	r3, [pc, #380]	@ (800ed70 <SGP_GetMeasurementValues+0x22c>)
 800ebf2:	2203      	movs	r2, #3
 800ebf4:	2103      	movs	r1, #3
 800ebf6:	0018      	movs	r0, r3
 800ebf8:	f000 f918 	bl	800ee2c <CheckCRC>
 800ebfc:	0003      	movs	r3, r0
 800ebfe:	001a      	movs	r2, r3
 800ec00:	2301      	movs	r3, #1
 800ec02:	4053      	eors	r3, r2
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d02a      	beq.n	800ec60 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800ec0a:	4a5a      	ldr	r2, [pc, #360]	@ (800ed74 <SGP_GetMeasurementValues+0x230>)
 800ec0c:	4b5a      	ldr	r3, [pc, #360]	@ (800ed78 <SGP_GetMeasurementValues+0x234>)
 800ec0e:	0019      	movs	r1, r3
 800ec10:	2001      	movs	r0, #1
 800ec12:	f002 fe23 	bl	801185c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ec16:	4a59      	ldr	r2, [pc, #356]	@ (800ed7c <SGP_GetMeasurementValues+0x238>)
 800ec18:	4b59      	ldr	r3, [pc, #356]	@ (800ed80 <SGP_GetMeasurementValues+0x23c>)
 800ec1a:	0019      	movs	r1, r3
 800ec1c:	2002      	movs	r0, #2
 800ec1e:	f002 fe1d 	bl	801185c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ec22:	230f      	movs	r3, #15
 800ec24:	18fb      	adds	r3, r7, r3
 800ec26:	2200      	movs	r2, #0
 800ec28:	701a      	strb	r2, [r3, #0]
 800ec2a:	e012      	b.n	800ec52 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ec2c:	240f      	movs	r4, #15
 800ec2e:	193b      	adds	r3, r7, r4
 800ec30:	7818      	ldrb	r0, [r3, #0]
 800ec32:	193b      	adds	r3, r7, r4
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	4a4e      	ldr	r2, [pc, #312]	@ (800ed70 <SGP_GetMeasurementValues+0x22c>)
 800ec38:	5cd3      	ldrb	r3, [r2, r3]
 800ec3a:	4a52      	ldr	r2, [pc, #328]	@ (800ed84 <SGP_GetMeasurementValues+0x240>)
 800ec3c:	4952      	ldr	r1, [pc, #328]	@ (800ed88 <SGP_GetMeasurementValues+0x244>)
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	0003      	movs	r3, r0
 800ec42:	2003      	movs	r0, #3
 800ec44:	f002 fe0a 	bl	801185c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ec48:	193b      	adds	r3, r7, r4
 800ec4a:	781a      	ldrb	r2, [r3, #0]
 800ec4c:	193b      	adds	r3, r7, r4
 800ec4e:	3201      	adds	r2, #1
 800ec50:	701a      	strb	r2, [r3, #0]
 800ec52:	230f      	movs	r3, #15
 800ec54:	18fb      	adds	r3, r7, r3
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	2b02      	cmp	r3, #2
 800ec5a:	d9e7      	bls.n	800ec2c <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e075      	b.n	800ed4c <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800ec60:	f003 fa48 	bl	80120f4 <HAL_GetTick>
 800ec64:	0003      	movs	r3, r0
 800ec66:	22fa      	movs	r2, #250	@ 0xfa
 800ec68:	0092      	lsls	r2, r2, #2
 800ec6a:	189a      	adds	r2, r3, r2
 800ec6c:	4b47      	ldr	r3, [pc, #284]	@ (800ed8c <SGP_GetMeasurementValues+0x248>)
 800ec6e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800ec70:	f7ff ff5a 	bl	800eb28 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800ec74:	4b46      	ldr	r3, [pc, #280]	@ (800ed90 <SGP_GetMeasurementValues+0x24c>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	3301      	adds	r3, #1
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	4b44      	ldr	r3, [pc, #272]	@ (800ed90 <SGP_GetMeasurementValues+0x24c>)
 800ec7e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800ec80:	4b43      	ldr	r3, [pc, #268]	@ (800ed90 <SGP_GetMeasurementValues+0x24c>)
 800ec82:	781a      	ldrb	r2, [r3, #0]
 800ec84:	4b43      	ldr	r3, [pc, #268]	@ (800ed94 <SGP_GetMeasurementValues+0x250>)
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d347      	bcc.n	800ed1c <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800ec8c:	4b38      	ldr	r3, [pc, #224]	@ (800ed70 <SGP_GetMeasurementValues+0x22c>)
 800ec8e:	785b      	ldrb	r3, [r3, #1]
 800ec90:	021b      	lsls	r3, r3, #8
 800ec92:	b21a      	sxth	r2, r3
 800ec94:	4b36      	ldr	r3, [pc, #216]	@ (800ed70 <SGP_GetMeasurementValues+0x22c>)
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	b21b      	sxth	r3, r3
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	b21a      	sxth	r2, r3
 800ec9e:	240c      	movs	r4, #12
 800eca0:	193b      	adds	r3, r7, r4
 800eca2:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800eca4:	2300      	movs	r3, #0
 800eca6:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800eca8:	193b      	adds	r3, r7, r4
 800ecaa:	8819      	ldrh	r1, [r3, #0]
 800ecac:	2308      	movs	r3, #8
 800ecae:	18fa      	adds	r2, r7, r3
 800ecb0:	4b39      	ldr	r3, [pc, #228]	@ (800ed98 <SGP_GetMeasurementValues+0x254>)
 800ecb2:	0018      	movs	r0, r3
 800ecb4:	f7fe fe88 	bl	800d9c8 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800ecb8:	68ba      	ldr	r2, [r7, #8]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800ecbe:	4b37      	ldr	r3, [pc, #220]	@ (800ed9c <SGP_GetMeasurementValues+0x258>)
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	b2da      	uxtb	r2, r3
 800ecc6:	4b35      	ldr	r3, [pc, #212]	@ (800ed9c <SGP_GetMeasurementValues+0x258>)
 800ecc8:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800ecca:	4b34      	ldr	r3, [pc, #208]	@ (800ed9c <SGP_GetMeasurementValues+0x258>)
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d10d      	bne.n	800ecee <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800ecd2:	193b      	adds	r3, r7, r4
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	4a32      	ldr	r2, [pc, #200]	@ (800eda0 <SGP_GetMeasurementValues+0x25c>)
 800ecd8:	492b      	ldr	r1, [pc, #172]	@ (800ed88 <SGP_GetMeasurementValues+0x244>)
 800ecda:	2003      	movs	r0, #3
 800ecdc:	f002 fdbe 	bl	801185c <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	4a30      	ldr	r2, [pc, #192]	@ (800eda4 <SGP_GetMeasurementValues+0x260>)
 800ece4:	4928      	ldr	r1, [pc, #160]	@ (800ed88 <SGP_GetMeasurementValues+0x244>)
 800ece6:	2003      	movs	r0, #3
 800ece8:	f002 fdb8 	bl	801185c <CreateLine>
 800ecec:	e006      	b.n	800ecfc <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800ecee:	4b2b      	ldr	r3, [pc, #172]	@ (800ed9c <SGP_GetMeasurementValues+0x258>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	2b0b      	cmp	r3, #11
 800ecf4:	d102      	bne.n	800ecfc <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800ecf6:	4b29      	ldr	r3, [pc, #164]	@ (800ed9c <SGP_GetMeasurementValues+0x258>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	0018      	movs	r0, r3
 800ed02:	f001 fd5b 	bl	80107bc <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800ed06:	4b22      	ldr	r3, [pc, #136]	@ (800ed90 <SGP_GetMeasurementValues+0x24c>)
 800ed08:	2200      	movs	r2, #0
 800ed0a:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800ed0c:	4b13      	ldr	r3, [pc, #76]	@ (800ed5c <SGP_GetMeasurementValues+0x218>)
 800ed0e:	2200      	movs	r2, #0
 800ed10:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800ed12:	4b11      	ldr	r3, [pc, #68]	@ (800ed58 <SGP_GetMeasurementValues+0x214>)
 800ed14:	2200      	movs	r2, #0
 800ed16:	701a      	strb	r2, [r3, #0]
      return true;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e017      	b.n	800ed4c <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800ed1c:	f7ff fef6 	bl	800eb0c <SGP_MeasurementDone>
 800ed20:	1e03      	subs	r3, r0, #0
 800ed22:	d012      	beq.n	800ed4a <SGP_GetMeasurementValues+0x206>
 800ed24:	4b0b      	ldr	r3, [pc, #44]	@ (800ed54 <SGP_GetMeasurementValues+0x210>)
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00e      	beq.n	800ed4a <SGP_GetMeasurementValues+0x206>
 800ed2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed6c <SGP_GetMeasurementValues+0x228>)
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00a      	beq.n	800ed4a <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800ed34:	4a1c      	ldr	r2, [pc, #112]	@ (800eda8 <SGP_GetMeasurementValues+0x264>)
 800ed36:	4b14      	ldr	r3, [pc, #80]	@ (800ed88 <SGP_GetMeasurementValues+0x244>)
 800ed38:	0019      	movs	r1, r3
 800ed3a:	2003      	movs	r0, #3
 800ed3c:	f002 fd8e 	bl	801185c <CreateLine>
    SGP_StartMeasurement();
 800ed40:	f7ff fe90 	bl	800ea64 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800ed44:	4b04      	ldr	r3, [pc, #16]	@ (800ed58 <SGP_GetMeasurementValues+0x214>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	0018      	movs	r0, r3
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	b005      	add	sp, #20
 800ed52:	bd90      	pop	{r4, r7, pc}
 800ed54:	20000edc 	.word	0x20000edc
 800ed58:	20000f89 	.word	0x20000f89
 800ed5c:	20000f88 	.word	0x20000f88
 800ed60:	200000b0 	.word	0x200000b0
 800ed64:	200000c4 	.word	0x200000c4
 800ed68:	200000a8 	.word	0x200000a8
 800ed6c:	20000edd 	.word	0x20000edd
 800ed70:	20000ecc 	.word	0x20000ecc
 800ed74:	0802a7c8 	.word	0x0802a7c8
 800ed78:	0802a7f0 	.word	0x0802a7f0
 800ed7c:	0802a7f4 	.word	0x0802a7f4
 800ed80:	0802a814 	.word	0x0802a814
 800ed84:	0802a818 	.word	0x0802a818
 800ed88:	0802a838 	.word	0x0802a838
 800ed8c:	200000c0 	.word	0x200000c0
 800ed90:	20000ed5 	.word	0x20000ed5
 800ed94:	200000ba 	.word	0x200000ba
 800ed98:	20000ee0 	.word	0x20000ee0
 800ed9c:	20000ed6 	.word	0x20000ed6
 800eda0:	0802a83c 	.word	0x0802a83c
 800eda4:	0802a858 	.word	0x0802a858
 800eda8:	0802a874 	.word	0x0802a874

0800edac <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800edb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee1c <SGP_DeviceConnected+0x70>)
 800edb4:	2202      	movs	r2, #2
 800edb6:	0019      	movs	r1, r3
 800edb8:	2059      	movs	r0, #89	@ 0x59
 800edba:	f7ff fde7 	bl	800e98c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800edbe:	2001      	movs	r0, #1
 800edc0:	f003 f9a2 	bl	8012108 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800edc4:	4b16      	ldr	r3, [pc, #88]	@ (800ee20 <SGP_DeviceConnected+0x74>)
 800edc6:	2209      	movs	r2, #9
 800edc8:	0019      	movs	r1, r3
 800edca:	2059      	movs	r0, #89	@ 0x59
 800edcc:	f7ff fdc0 	bl	800e950 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800edd0:	1dfb      	adds	r3, r7, #7
 800edd2:	2200      	movs	r2, #0
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	e011      	b.n	800edfc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800edd8:	1dfb      	adds	r3, r7, #7
 800edda:	7818      	ldrb	r0, [r3, #0]
 800eddc:	1dfb      	adds	r3, r7, #7
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	4a0f      	ldr	r2, [pc, #60]	@ (800ee20 <SGP_DeviceConnected+0x74>)
 800ede2:	5cd3      	ldrb	r3, [r2, r3]
 800ede4:	4a0f      	ldr	r2, [pc, #60]	@ (800ee24 <SGP_DeviceConnected+0x78>)
 800ede6:	4910      	ldr	r1, [pc, #64]	@ (800ee28 <SGP_DeviceConnected+0x7c>)
 800ede8:	9300      	str	r3, [sp, #0]
 800edea:	0003      	movs	r3, r0
 800edec:	2002      	movs	r0, #2
 800edee:	f002 fd35 	bl	801185c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800edf2:	1dfb      	adds	r3, r7, #7
 800edf4:	781a      	ldrb	r2, [r3, #0]
 800edf6:	1dfb      	adds	r3, r7, #7
 800edf8:	3201      	adds	r2, #1
 800edfa:	701a      	strb	r2, [r3, #0]
 800edfc:	1dfb      	adds	r3, r7, #7
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	2b08      	cmp	r3, #8
 800ee02:	d9e9      	bls.n	800edd8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800ee04:	4b06      	ldr	r3, [pc, #24]	@ (800ee20 <SGP_DeviceConnected+0x74>)
 800ee06:	2203      	movs	r2, #3
 800ee08:	2109      	movs	r1, #9
 800ee0a:	0018      	movs	r0, r3
 800ee0c:	f000 f80e 	bl	800ee2c <CheckCRC>
 800ee10:	0003      	movs	r3, r0
}
 800ee12:	0018      	movs	r0, r3
 800ee14:	46bd      	mov	sp, r7
 800ee16:	b002      	add	sp, #8
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	46c0      	nop			@ (mov r8, r8)
 800ee1c:	200000a4 	.word	0x200000a4
 800ee20:	20000ecc 	.word	0x20000ecc
 800ee24:	0802a894 	.word	0x0802a894
 800ee28:	0802a814 	.word	0x0802a814

0800ee2c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800ee2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee2e:	b08f      	sub	sp, #60	@ 0x3c
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee34:	0008      	movs	r0, r1
 800ee36:	0011      	movs	r1, r2
 800ee38:	2323      	movs	r3, #35	@ 0x23
 800ee3a:	18fb      	adds	r3, r7, r3
 800ee3c:	1c02      	adds	r2, r0, #0
 800ee3e:	701a      	strb	r2, [r3, #0]
 800ee40:	2322      	movs	r3, #34	@ 0x22
 800ee42:	18fb      	adds	r3, r7, r3
 800ee44:	1c0a      	adds	r2, r1, #0
 800ee46:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ee48:	2317      	movs	r3, #23
 800ee4a:	2220      	movs	r2, #32
 800ee4c:	189b      	adds	r3, r3, r2
 800ee4e:	19db      	adds	r3, r3, r7
 800ee50:	2200      	movs	r2, #0
 800ee52:	701a      	strb	r2, [r3, #0]
 800ee54:	e09f      	b.n	800ef96 <CheckCRC+0x16a>
 800ee56:	466b      	mov	r3, sp
 800ee58:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800ee5a:	2322      	movs	r3, #34	@ 0x22
 800ee5c:	18fb      	adds	r3, r7, r3
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	001a      	movs	r2, r3
 800ee62:	3a01      	subs	r2, #1
 800ee64:	633a      	str	r2, [r7, #48]	@ 0x30
 800ee66:	60bb      	str	r3, [r7, #8]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	60fa      	str	r2, [r7, #12]
 800ee6c:	68b8      	ldr	r0, [r7, #8]
 800ee6e:	68f9      	ldr	r1, [r7, #12]
 800ee70:	0002      	movs	r2, r0
 800ee72:	0f52      	lsrs	r2, r2, #29
 800ee74:	000c      	movs	r4, r1
 800ee76:	00e4      	lsls	r4, r4, #3
 800ee78:	61fc      	str	r4, [r7, #28]
 800ee7a:	69fc      	ldr	r4, [r7, #28]
 800ee7c:	4314      	orrs	r4, r2
 800ee7e:	61fc      	str	r4, [r7, #28]
 800ee80:	0002      	movs	r2, r0
 800ee82:	00d2      	lsls	r2, r2, #3
 800ee84:	61ba      	str	r2, [r7, #24]
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	6838      	ldr	r0, [r7, #0]
 800ee8e:	6879      	ldr	r1, [r7, #4]
 800ee90:	0002      	movs	r2, r0
 800ee92:	0f52      	lsrs	r2, r2, #29
 800ee94:	000c      	movs	r4, r1
 800ee96:	00e4      	lsls	r4, r4, #3
 800ee98:	617c      	str	r4, [r7, #20]
 800ee9a:	697c      	ldr	r4, [r7, #20]
 800ee9c:	4314      	orrs	r4, r2
 800ee9e:	617c      	str	r4, [r7, #20]
 800eea0:	0002      	movs	r2, r0
 800eea2:	00d2      	lsls	r2, r2, #3
 800eea4:	613a      	str	r2, [r7, #16]
 800eea6:	3307      	adds	r3, #7
 800eea8:	08db      	lsrs	r3, r3, #3
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	466a      	mov	r2, sp
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	469d      	mov	sp, r3
 800eeb2:	466b      	mov	r3, sp
 800eeb4:	3300      	adds	r3, #0
 800eeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800eeb8:	2316      	movs	r3, #22
 800eeba:	2220      	movs	r2, #32
 800eebc:	189b      	adds	r3, r3, r2
 800eebe:	19db      	adds	r3, r3, r7
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
 800eec4:	e01e      	b.n	800ef04 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800eec6:	2317      	movs	r3, #23
 800eec8:	2220      	movs	r2, #32
 800eeca:	189b      	adds	r3, r3, r2
 800eecc:	19db      	adds	r3, r3, r7
 800eece:	781a      	ldrb	r2, [r3, #0]
 800eed0:	2116      	movs	r1, #22
 800eed2:	2320      	movs	r3, #32
 800eed4:	18cb      	adds	r3, r1, r3
 800eed6:	19db      	adds	r3, r3, r7
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	18d3      	adds	r3, r2, r3
 800eedc:	001a      	movs	r2, r3
 800eede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee0:	189a      	adds	r2, r3, r2
 800eee2:	0008      	movs	r0, r1
 800eee4:	2320      	movs	r3, #32
 800eee6:	18cb      	adds	r3, r1, r3
 800eee8:	19db      	adds	r3, r3, r7
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	7811      	ldrb	r1, [r2, #0]
 800eeee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eef0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800eef2:	2320      	movs	r3, #32
 800eef4:	18c3      	adds	r3, r0, r3
 800eef6:	19db      	adds	r3, r3, r7
 800eef8:	781a      	ldrb	r2, [r3, #0]
 800eefa:	2320      	movs	r3, #32
 800eefc:	18c3      	adds	r3, r0, r3
 800eefe:	19db      	adds	r3, r3, r7
 800ef00:	3201      	adds	r2, #1
 800ef02:	701a      	strb	r2, [r3, #0]
 800ef04:	2316      	movs	r3, #22
 800ef06:	2220      	movs	r2, #32
 800ef08:	189b      	adds	r3, r3, r2
 800ef0a:	19da      	adds	r2, r3, r7
 800ef0c:	2322      	movs	r3, #34	@ 0x22
 800ef0e:	18fb      	adds	r3, r7, r3
 800ef10:	7812      	ldrb	r2, [r2, #0]
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d3d6      	bcc.n	800eec6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800ef18:	2417      	movs	r4, #23
 800ef1a:	2320      	movs	r3, #32
 800ef1c:	18e3      	adds	r3, r4, r3
 800ef1e:	19db      	adds	r3, r3, r7
 800ef20:	781a      	ldrb	r2, [r3, #0]
 800ef22:	2322      	movs	r3, #34	@ 0x22
 800ef24:	18fb      	adds	r3, r7, r3
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	18d3      	adds	r3, r2, r3
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef2e:	18d2      	adds	r2, r2, r3
 800ef30:	250b      	movs	r5, #11
 800ef32:	2320      	movs	r3, #32
 800ef34:	18eb      	adds	r3, r5, r3
 800ef36:	19db      	adds	r3, r3, r7
 800ef38:	7812      	ldrb	r2, [r2, #0]
 800ef3a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800ef3c:	2322      	movs	r3, #34	@ 0x22
 800ef3e:	18fb      	adds	r3, r7, r3
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	3b01      	subs	r3, #1
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef48:	0011      	movs	r1, r2
 800ef4a:	0018      	movs	r0, r3
 800ef4c:	f000 f838 	bl	800efc0 <CalculateCRC>
 800ef50:	0003      	movs	r3, r0
 800ef52:	001a      	movs	r2, r3
 800ef54:	2320      	movs	r3, #32
 800ef56:	18eb      	adds	r3, r5, r3
 800ef58:	19db      	adds	r3, r3, r7
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d00c      	beq.n	800ef7a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800ef60:	2320      	movs	r3, #32
 800ef62:	18e3      	adds	r3, r4, r3
 800ef64:	19db      	adds	r3, r3, r7
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	4a13      	ldr	r2, [pc, #76]	@ (800efb8 <CheckCRC+0x18c>)
 800ef6c:	4913      	ldr	r1, [pc, #76]	@ (800efbc <CheckCRC+0x190>)
 800ef6e:	2001      	movs	r0, #1
 800ef70:	f002 fc74 	bl	801185c <CreateLine>
      return false;
 800ef74:	2300      	movs	r3, #0
 800ef76:	46b5      	mov	sp, r6
 800ef78:	e019      	b.n	800efae <CheckCRC+0x182>
 800ef7a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ef7c:	2217      	movs	r2, #23
 800ef7e:	2320      	movs	r3, #32
 800ef80:	18d3      	adds	r3, r2, r3
 800ef82:	19db      	adds	r3, r3, r7
 800ef84:	2120      	movs	r1, #32
 800ef86:	1852      	adds	r2, r2, r1
 800ef88:	19d1      	adds	r1, r2, r7
 800ef8a:	2222      	movs	r2, #34	@ 0x22
 800ef8c:	18ba      	adds	r2, r7, r2
 800ef8e:	7809      	ldrb	r1, [r1, #0]
 800ef90:	7812      	ldrb	r2, [r2, #0]
 800ef92:	188a      	adds	r2, r1, r2
 800ef94:	701a      	strb	r2, [r3, #0]
 800ef96:	2317      	movs	r3, #23
 800ef98:	2220      	movs	r2, #32
 800ef9a:	189b      	adds	r3, r3, r2
 800ef9c:	19da      	adds	r2, r3, r7
 800ef9e:	2323      	movs	r3, #35	@ 0x23
 800efa0:	18fb      	adds	r3, r7, r3
 800efa2:	7812      	ldrb	r2, [r2, #0]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d200      	bcs.n	800efac <CheckCRC+0x180>
 800efaa:	e754      	b.n	800ee56 <CheckCRC+0x2a>
    }
  }
  return true;
 800efac:	2301      	movs	r3, #1
}
 800efae:	0018      	movs	r0, r3
 800efb0:	46bd      	mov	sp, r7
 800efb2:	b00f      	add	sp, #60	@ 0x3c
 800efb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb6:	46c0      	nop			@ (mov r8, r8)
 800efb8:	0802a8b4 	.word	0x0802a8b4
 800efbc:	0802a7f0 	.word	0x0802a7f0

0800efc0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	000a      	movs	r2, r1
 800efca:	1cfb      	adds	r3, r7, #3
 800efcc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800efce:	230f      	movs	r3, #15
 800efd0:	18fb      	adds	r3, r7, r3
 800efd2:	22ff      	movs	r2, #255	@ 0xff
 800efd4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800efd6:	230e      	movs	r3, #14
 800efd8:	18fb      	adds	r3, r7, r3
 800efda:	2200      	movs	r2, #0
 800efdc:	701a      	strb	r2, [r3, #0]
 800efde:	e037      	b.n	800f050 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800efe0:	230e      	movs	r3, #14
 800efe2:	18fb      	adds	r3, r7, r3
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	18d3      	adds	r3, r2, r3
 800efea:	7819      	ldrb	r1, [r3, #0]
 800efec:	220f      	movs	r2, #15
 800efee:	18bb      	adds	r3, r7, r2
 800eff0:	18ba      	adds	r2, r7, r2
 800eff2:	7812      	ldrb	r2, [r2, #0]
 800eff4:	404a      	eors	r2, r1
 800eff6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800eff8:	230d      	movs	r3, #13
 800effa:	18fb      	adds	r3, r7, r3
 800effc:	2200      	movs	r2, #0
 800effe:	701a      	strb	r2, [r3, #0]
 800f000:	e01b      	b.n	800f03a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800f002:	210f      	movs	r1, #15
 800f004:	187b      	adds	r3, r7, r1
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	b25b      	sxtb	r3, r3
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	da09      	bge.n	800f022 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800f00e:	187b      	adds	r3, r7, r1
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	b25b      	sxtb	r3, r3
 800f016:	2231      	movs	r2, #49	@ 0x31
 800f018:	4053      	eors	r3, r2
 800f01a:	b25a      	sxtb	r2, r3
 800f01c:	187b      	adds	r3, r7, r1
 800f01e:	701a      	strb	r2, [r3, #0]
 800f020:	e005      	b.n	800f02e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800f022:	230f      	movs	r3, #15
 800f024:	18fa      	adds	r2, r7, r3
 800f026:	18fb      	adds	r3, r7, r3
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	18db      	adds	r3, r3, r3
 800f02c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800f02e:	210d      	movs	r1, #13
 800f030:	187b      	adds	r3, r7, r1
 800f032:	781a      	ldrb	r2, [r3, #0]
 800f034:	187b      	adds	r3, r7, r1
 800f036:	3201      	adds	r2, #1
 800f038:	701a      	strb	r2, [r3, #0]
 800f03a:	230d      	movs	r3, #13
 800f03c:	18fb      	adds	r3, r7, r3
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2b07      	cmp	r3, #7
 800f042:	d9de      	bls.n	800f002 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800f044:	210e      	movs	r1, #14
 800f046:	187b      	adds	r3, r7, r1
 800f048:	781a      	ldrb	r2, [r3, #0]
 800f04a:	187b      	adds	r3, r7, r1
 800f04c:	3201      	adds	r2, #1
 800f04e:	701a      	strb	r2, [r3, #0]
 800f050:	230e      	movs	r3, #14
 800f052:	18fa      	adds	r2, r7, r3
 800f054:	1cfb      	adds	r3, r7, #3
 800f056:	7812      	ldrb	r2, [r2, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d3c0      	bcc.n	800efe0 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800f05e:	230f      	movs	r3, #15
 800f060:	18fb      	adds	r3, r7, r3
 800f062:	781b      	ldrb	r3, [r3, #0]
}
 800f064:	0018      	movs	r0, r3
 800f066:	46bd      	mov	sp, r7
 800f068:	b004      	add	sp, #16
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4936      	ldr	r1, [pc, #216]	@ (800f154 <SGP_SetHT+0xe8>)
 800f07c:	1c18      	adds	r0, r3, #0
 800f07e:	f7f1 fc1f 	bl	80008c0 <__aeabi_fadd>
 800f082:	1c03      	adds	r3, r0, #0
 800f084:	4934      	ldr	r1, [pc, #208]	@ (800f158 <SGP_SetHT+0xec>)
 800f086:	1c18      	adds	r0, r3, #0
 800f088:	f7f1 fda4 	bl	8000bd4 <__aeabi_fdiv>
 800f08c:	1c03      	adds	r3, r0, #0
 800f08e:	4933      	ldr	r1, [pc, #204]	@ (800f15c <SGP_SetHT+0xf0>)
 800f090:	1c18      	adds	r0, r3, #0
 800f092:	f7f1 ff85 	bl	8000fa0 <__aeabi_fmul>
 800f096:	1c03      	adds	r3, r0, #0
 800f098:	1c18      	adds	r0, r3, #0
 800f09a:	f7f1 fabf 	bl	800061c <__aeabi_f2uiz>
 800f09e:	0003      	movs	r3, r0
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	4b2f      	ldr	r3, [pc, #188]	@ (800f160 <SGP_SetHT+0xf4>)
 800f0a4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	492e      	ldr	r1, [pc, #184]	@ (800f164 <SGP_SetHT+0xf8>)
 800f0ac:	1c18      	adds	r0, r3, #0
 800f0ae:	f7f1 fd91 	bl	8000bd4 <__aeabi_fdiv>
 800f0b2:	1c03      	adds	r3, r0, #0
 800f0b4:	4929      	ldr	r1, [pc, #164]	@ (800f15c <SGP_SetHT+0xf0>)
 800f0b6:	1c18      	adds	r0, r3, #0
 800f0b8:	f7f1 ff72 	bl	8000fa0 <__aeabi_fmul>
 800f0bc:	1c03      	adds	r3, r0, #0
 800f0be:	1c18      	adds	r0, r3, #0
 800f0c0:	f7f1 faac 	bl	800061c <__aeabi_f2uiz>
 800f0c4:	0003      	movs	r3, r0
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	4b27      	ldr	r3, [pc, #156]	@ (800f168 <SGP_SetHT+0xfc>)
 800f0ca:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800f0cc:	4b26      	ldr	r3, [pc, #152]	@ (800f168 <SGP_SetHT+0xfc>)
 800f0ce:	881b      	ldrh	r3, [r3, #0]
 800f0d0:	0a1b      	lsrs	r3, r3, #8
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	4b25      	ldr	r3, [pc, #148]	@ (800f16c <SGP_SetHT+0x100>)
 800f0d8:	709a      	strb	r2, [r3, #2]
 800f0da:	4b24      	ldr	r3, [pc, #144]	@ (800f16c <SGP_SetHT+0x100>)
 800f0dc:	789a      	ldrb	r2, [r3, #2]
 800f0de:	210c      	movs	r1, #12
 800f0e0:	187b      	adds	r3, r7, r1
 800f0e2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800f0e4:	4b20      	ldr	r3, [pc, #128]	@ (800f168 <SGP_SetHT+0xfc>)
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	b2da      	uxtb	r2, r3
 800f0ea:	4b20      	ldr	r3, [pc, #128]	@ (800f16c <SGP_SetHT+0x100>)
 800f0ec:	70da      	strb	r2, [r3, #3]
 800f0ee:	4b1f      	ldr	r3, [pc, #124]	@ (800f16c <SGP_SetHT+0x100>)
 800f0f0:	78da      	ldrb	r2, [r3, #3]
 800f0f2:	187b      	adds	r3, r7, r1
 800f0f4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800f0f6:	187b      	adds	r3, r7, r1
 800f0f8:	2102      	movs	r1, #2
 800f0fa:	0018      	movs	r0, r3
 800f0fc:	f7ff ff60 	bl	800efc0 <CalculateCRC>
 800f100:	0003      	movs	r3, r0
 800f102:	001a      	movs	r2, r3
 800f104:	4b19      	ldr	r3, [pc, #100]	@ (800f16c <SGP_SetHT+0x100>)
 800f106:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800f108:	4b15      	ldr	r3, [pc, #84]	@ (800f160 <SGP_SetHT+0xf4>)
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	0a1b      	lsrs	r3, r3, #8
 800f10e:	b29b      	uxth	r3, r3
 800f110:	b2da      	uxtb	r2, r3
 800f112:	4b16      	ldr	r3, [pc, #88]	@ (800f16c <SGP_SetHT+0x100>)
 800f114:	715a      	strb	r2, [r3, #5]
 800f116:	4b15      	ldr	r3, [pc, #84]	@ (800f16c <SGP_SetHT+0x100>)
 800f118:	795a      	ldrb	r2, [r3, #5]
 800f11a:	2108      	movs	r1, #8
 800f11c:	187b      	adds	r3, r7, r1
 800f11e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800f120:	4b0f      	ldr	r3, [pc, #60]	@ (800f160 <SGP_SetHT+0xf4>)
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	b2da      	uxtb	r2, r3
 800f126:	4b11      	ldr	r3, [pc, #68]	@ (800f16c <SGP_SetHT+0x100>)
 800f128:	719a      	strb	r2, [r3, #6]
 800f12a:	4b10      	ldr	r3, [pc, #64]	@ (800f16c <SGP_SetHT+0x100>)
 800f12c:	799a      	ldrb	r2, [r3, #6]
 800f12e:	187b      	adds	r3, r7, r1
 800f130:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800f132:	187b      	adds	r3, r7, r1
 800f134:	2102      	movs	r1, #2
 800f136:	0018      	movs	r0, r3
 800f138:	f7ff ff42 	bl	800efc0 <CalculateCRC>
 800f13c:	0003      	movs	r3, r0
 800f13e:	001a      	movs	r2, r3
 800f140:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <SGP_SetHT+0x100>)
 800f142:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800f144:	4b0a      	ldr	r3, [pc, #40]	@ (800f170 <SGP_SetHT+0x104>)
 800f146:	2201      	movs	r2, #1
 800f148:	701a      	strb	r2, [r3, #0]
}
 800f14a:	46c0      	nop			@ (mov r8, r8)
 800f14c:	46bd      	mov	sp, r7
 800f14e:	b004      	add	sp, #16
 800f150:	bd80      	pop	{r7, pc}
 800f152:	46c0      	nop			@ (mov r8, r8)
 800f154:	42340000 	.word	0x42340000
 800f158:	432f0000 	.word	0x432f0000
 800f15c:	477fff00 	.word	0x477fff00
 800f160:	20000f86 	.word	0x20000f86
 800f164:	42c80000 	.word	0x42c80000
 800f168:	20000f84 	.word	0x20000f84
 800f16c:	200000b0 	.word	0x200000b0
 800f170:	20000f88 	.word	0x20000f88

0800f174 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800f174:	b580      	push	{r7, lr}
 800f176:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800f178:	4a09      	ldr	r2, [pc, #36]	@ (800f1a0 <SGP_SoftReset+0x2c>)
 800f17a:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a4 <SGP_SoftReset+0x30>)
 800f17c:	0019      	movs	r1, r3
 800f17e:	2003      	movs	r0, #3
 800f180:	f002 fb6c 	bl	801185c <CreateLine>
  SGP_TurnHeaterOff();
 800f184:	f7ff fcd0 	bl	800eb28 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800f188:	200a      	movs	r0, #10
 800f18a:	f002 ffbd 	bl	8012108 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800f18e:	4b06      	ldr	r3, [pc, #24]	@ (800f1a8 <SGP_SoftReset+0x34>)
 800f190:	2202      	movs	r2, #2
 800f192:	0019      	movs	r1, r3
 800f194:	2059      	movs	r0, #89	@ 0x59
 800f196:	f7ff fbf9 	bl	800e98c <WriteRegister>
}
 800f19a:	46c0      	nop			@ (mov r8, r8)
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	0802a95c 	.word	0x0802a95c
 800f1a4:	0802a838 	.word	0x0802a838
 800f1a8:	200000b8 	.word	0x200000b8

0800f1ac <ResetVOCresult>:

void ResetVOCresult(void) {
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800f1b0:	4b02      	ldr	r3, [pc, #8]	@ (800f1bc <ResetVOCresult+0x10>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	601a      	str	r2, [r3, #0]
}
 800f1b6:	46c0      	nop			@ (mov r8, r8)
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20000f8c 	.word	0x20000f8c

0800f1c0 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800f1c4:	4b42      	ldr	r3, [pc, #264]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	2b07      	cmp	r3, #7
 800f1ca:	d869      	bhi.n	800f2a0 <SGP_Upkeep+0xe0>
 800f1cc:	009a      	lsls	r2, r3, #2
 800f1ce:	4b41      	ldr	r3, [pc, #260]	@ (800f2d4 <SGP_Upkeep+0x114>)
 800f1d0:	18d3      	adds	r3, r2, r3
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800f1d6:	4a40      	ldr	r2, [pc, #256]	@ (800f2d8 <SGP_Upkeep+0x118>)
 800f1d8:	4b40      	ldr	r3, [pc, #256]	@ (800f2dc <SGP_Upkeep+0x11c>)
 800f1da:	0019      	movs	r1, r3
 800f1dc:	2003      	movs	r0, #3
 800f1de:	f002 fb3d 	bl	801185c <CreateLine>
    break;
 800f1e2:	e070      	b.n	800f2c6 <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800f1e4:	f7ff ffe2 	bl	800f1ac <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800f1e8:	4b39      	ldr	r3, [pc, #228]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	701a      	strb	r2, [r3, #0]
    break;
 800f1ee:	e06a      	b.n	800f2c6 <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800f1f0:	f7fc fca0 	bl	800bb34 <getSensorLock>
 800f1f4:	1e03      	subs	r3, r0, #0
 800f1f6:	d15f      	bne.n	800f2b8 <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800f1f8:	2002      	movs	r0, #2
 800f1fa:	f7fc fc8b 	bl	800bb14 <setSensorLock>
    SetMeasurementIndicator();
 800f1fe:	f001 f977 	bl	80104f0 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800f202:	f7ff fc2f 	bl	800ea64 <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800f206:	4b32      	ldr	r3, [pc, #200]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f208:	2202      	movs	r2, #2
 800f20a:	701a      	strb	r2, [r3, #0]
    break;
 800f20c:	e05b      	b.n	800f2c6 <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800f20e:	4b34      	ldr	r3, [pc, #208]	@ (800f2e0 <SGP_Upkeep+0x120>)
 800f210:	0018      	movs	r0, r3
 800f212:	f7ff fc97 	bl	800eb44 <SGP_GetMeasurementValues>
 800f216:	1e03      	subs	r3, r0, #0
 800f218:	d050      	beq.n	800f2bc <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800f21a:	4b2d      	ldr	r3, [pc, #180]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f21c:	2203      	movs	r2, #3
 800f21e:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800f220:	2000      	movs	r0, #0
 800f222:	f7fc fc77 	bl	800bb14 <setSensorLock>
    }
    break;
 800f226:	e049      	b.n	800f2bc <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800f228:	4b2d      	ldr	r3, [pc, #180]	@ (800f2e0 <SGP_Upkeep+0x120>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	0018      	movs	r0, r3
 800f230:	f7f5 f9b8 	bl	80045a4 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800f234:	4b26      	ldr	r3, [pc, #152]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f236:	2206      	movs	r2, #6
 800f238:	701a      	strb	r2, [r3, #0]
    break;
 800f23a:	e044      	b.n	800f2c6 <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800f23c:	4b24      	ldr	r3, [pc, #144]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f23e:	2207      	movs	r2, #7
 800f240:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800f242:	4b28      	ldr	r3, [pc, #160]	@ (800f2e4 <SGP_Upkeep+0x124>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d112      	bne.n	800f270 <SGP_Upkeep+0xb0>
 800f24a:	4b27      	ldr	r3, [pc, #156]	@ (800f2e8 <SGP_Upkeep+0x128>)
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	2201      	movs	r2, #1
 800f250:	4053      	eors	r3, r2
 800f252:	b2db      	uxtb	r3, r3
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00b      	beq.n	800f270 <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800f258:	4b24      	ldr	r3, [pc, #144]	@ (800f2ec <SGP_Upkeep+0x12c>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d004      	beq.n	800f26a <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800f260:	f7ff ff88 	bl	800f174 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800f264:	2000      	movs	r0, #0
 800f266:	f7fc f8d1 	bl	800b40c <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800f26a:	4b20      	ldr	r3, [pc, #128]	@ (800f2ec <SGP_Upkeep+0x12c>)
 800f26c:	2201      	movs	r2, #1
 800f26e:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800f270:	f002 ff40 	bl	80120f4 <HAL_GetTick>
 800f274:	0003      	movs	r3, r0
 800f276:	22c8      	movs	r2, #200	@ 0xc8
 800f278:	0092      	lsls	r2, r2, #2
 800f27a:	189a      	adds	r2, r3, r2
 800f27c:	4b1c      	ldr	r3, [pc, #112]	@ (800f2f0 <SGP_Upkeep+0x130>)
 800f27e:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800f280:	f001 f94e 	bl	8010520 <ResetMeasurementIndicator>
  break;
 800f284:	e01f      	b.n	800f2c6 <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800f286:	4b1a      	ldr	r3, [pc, #104]	@ (800f2f0 <SGP_Upkeep+0x130>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	0018      	movs	r0, r3
 800f28c:	f002 fa90 	bl	80117b0 <TimestampIsReached>
 800f290:	1e03      	subs	r3, r0, #0
 800f292:	d015      	beq.n	800f2c0 <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800f294:	f7ff fbce 	bl	800ea34 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800f298:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f29e:	e00f      	b.n	800f2c0 <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800f2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800f2a6:	f7fc fc45 	bl	800bb34 <getSensorLock>
 800f2aa:	0003      	movs	r3, r0
 800f2ac:	2b02      	cmp	r3, #2
 800f2ae:	d109      	bne.n	800f2c4 <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	f7fc fc2f 	bl	800bb14 <setSensorLock>
    }
    break;
 800f2b6:	e005      	b.n	800f2c4 <SGP_Upkeep+0x104>
      break;
 800f2b8:	46c0      	nop			@ (mov r8, r8)
 800f2ba:	e004      	b.n	800f2c6 <SGP_Upkeep+0x106>
    break;
 800f2bc:	46c0      	nop			@ (mov r8, r8)
 800f2be:	e002      	b.n	800f2c6 <SGP_Upkeep+0x106>
    break;
 800f2c0:	46c0      	nop			@ (mov r8, r8)
 800f2c2:	e000      	b.n	800f2c6 <SGP_Upkeep+0x106>
    break;
 800f2c4:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800f2c6:	4b02      	ldr	r3, [pc, #8]	@ (800f2d0 <SGP_Upkeep+0x110>)
 800f2c8:	781b      	ldrb	r3, [r3, #0]
}
 800f2ca:	0018      	movs	r0, r3
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	20000f90 	.word	0x20000f90
 800f2d4:	0802b138 	.word	0x0802b138
 800f2d8:	0802a974 	.word	0x0802a974
 800f2dc:	0802a838 	.word	0x0802a838
 800f2e0:	20000f8c 	.word	0x20000f8c
 800f2e4:	20000ed6 	.word	0x20000ed6
 800f2e8:	20001e2d 	.word	0x20001e2d
 800f2ec:	20000ec0 	.word	0x20000ec0
 800f2f0:	20000ed8 	.word	0x20000ed8

0800f2f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	0002      	movs	r2, r0
 800f2fc:	1dfb      	adds	r3, r7, #7
 800f2fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f300:	1dfb      	adds	r3, r7, #7
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	2b7f      	cmp	r3, #127	@ 0x7f
 800f306:	d809      	bhi.n	800f31c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f308:	1dfb      	adds	r3, r7, #7
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	001a      	movs	r2, r3
 800f30e:	231f      	movs	r3, #31
 800f310:	401a      	ands	r2, r3
 800f312:	4b04      	ldr	r3, [pc, #16]	@ (800f324 <__NVIC_EnableIRQ+0x30>)
 800f314:	2101      	movs	r1, #1
 800f316:	4091      	lsls	r1, r2
 800f318:	000a      	movs	r2, r1
 800f31a:	601a      	str	r2, [r3, #0]
  }
}
 800f31c:	46c0      	nop			@ (mov r8, r8)
 800f31e:	46bd      	mov	sp, r7
 800f320:	b002      	add	sp, #8
 800f322:	bd80      	pop	{r7, pc}
 800f324:	e000e100 	.word	0xe000e100

0800f328 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	0002      	movs	r2, r0
 800f330:	1dfb      	adds	r3, r7, #7
 800f332:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f334:	1dfb      	adds	r3, r7, #7
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	2b7f      	cmp	r3, #127	@ 0x7f
 800f33a:	d810      	bhi.n	800f35e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f33c:	1dfb      	adds	r3, r7, #7
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	001a      	movs	r2, r3
 800f342:	231f      	movs	r3, #31
 800f344:	4013      	ands	r3, r2
 800f346:	4908      	ldr	r1, [pc, #32]	@ (800f368 <__NVIC_DisableIRQ+0x40>)
 800f348:	2201      	movs	r2, #1
 800f34a:	409a      	lsls	r2, r3
 800f34c:	0013      	movs	r3, r2
 800f34e:	2280      	movs	r2, #128	@ 0x80
 800f350:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f352:	f3bf 8f4f 	dsb	sy
}
 800f356:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f358:	f3bf 8f6f 	isb	sy
}
 800f35c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800f35e:	46c0      	nop			@ (mov r8, r8)
 800f360:	46bd      	mov	sp, r7
 800f362:	b002      	add	sp, #8
 800f364:	bd80      	pop	{r7, pc}
 800f366:	46c0      	nop			@ (mov r8, r8)
 800f368:	e000e100 	.word	0xe000e100

0800f36c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800f36c:	b5b0      	push	{r4, r5, r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af02      	add	r7, sp, #8
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	0008      	movs	r0, r1
 800f376:	0011      	movs	r1, r2
 800f378:	1cfb      	adds	r3, r7, #3
 800f37a:	1c02      	adds	r2, r0, #0
 800f37c:	701a      	strb	r2, [r3, #0]
 800f37e:	1cbb      	adds	r3, r7, #2
 800f380:	1c0a      	adds	r2, r1, #0
 800f382:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800f384:	4b5b      	ldr	r3, [pc, #364]	@ (800f4f4 <getSoundData+0x188>)
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2201      	movs	r2, #1
 800f38c:	4053      	eors	r3, r2
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	d107      	bne.n	800f3a4 <getSoundData+0x38>
 800f394:	4b58      	ldr	r3, [pc, #352]	@ (800f4f8 <getSoundData+0x18c>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	2201      	movs	r2, #1
 800f39c:	4053      	eors	r3, r2
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <getSoundData+0x3c>
    {
        return false;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	e0a0      	b.n	800f4ea <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800f3a8:	4b54      	ldr	r3, [pc, #336]	@ (800f4fc <getSoundData+0x190>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d005      	beq.n	800f3be <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800f3b2:	4b53      	ldr	r3, [pc, #332]	@ (800f500 <getSoundData+0x194>)
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	b25b      	sxtb	r3, r3
 800f3b8:	0018      	movs	r0, r3
 800f3ba:	f7ff ffb5 	bl	800f328 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800f3be:	f3bf 8f4f 	dsb	sy
}
 800f3c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f3c4:	f3bf 8f6f 	isb	sy
}
 800f3c8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800f3ca:	1cfb      	adds	r3, r7, #3
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d04c      	beq.n	800f46c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800f3d2:	4b4c      	ldr	r3, [pc, #304]	@ (800f504 <getSoundData+0x198>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d11b      	bne.n	800f412 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	617b      	str	r3, [r7, #20]
 800f3ea:	e00e      	b.n	800f40a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	18d3      	adds	r3, r2, r3
 800f3f2:	3302      	adds	r3, #2
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	18d3      	adds	r3, r2, r3
 800f3fe:	3308      	adds	r3, #8
 800f400:	2200      	movs	r2, #0
 800f402:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	3301      	adds	r3, #1
 800f408:	617b      	str	r3, [r7, #20]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	2b05      	cmp	r3, #5
 800f40e:	d9ed      	bls.n	800f3ec <getSoundData+0x80>
 800f410:	e02c      	b.n	800f46c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	1c59      	adds	r1, r3, #1
 800f418:	4b3b      	ldr	r3, [pc, #236]	@ (800f508 <getSoundData+0x19c>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	4b3b      	ldr	r3, [pc, #236]	@ (800f50c <getSoundData+0x1a0>)
 800f41e:	681c      	ldr	r4, [r3, #0]
 800f420:	4b38      	ldr	r3, [pc, #224]	@ (800f504 <getSoundData+0x198>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	0023      	movs	r3, r4
 800f428:	f000 fde8 	bl	800fffc <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f42c:	2300      	movs	r3, #0
 800f42e:	613b      	str	r3, [r7, #16]
 800f430:	e019      	b.n	800f466 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	693b      	ldr	r3, [r7, #16]
 800f436:	18d3      	adds	r3, r2, r3
 800f438:	1c98      	adds	r0, r3, #2
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	3308      	adds	r3, #8
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800f442:	4b33      	ldr	r3, [pc, #204]	@ (800f510 <getSoundData+0x1a4>)
 800f444:	693a      	ldr	r2, [r7, #16]
 800f446:	0092      	lsls	r2, r2, #2
 800f448:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800f44a:	4b32      	ldr	r3, [pc, #200]	@ (800f514 <getSoundData+0x1a8>)
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	0092      	lsls	r2, r2, #2
 800f450:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800f452:	4b2c      	ldr	r3, [pc, #176]	@ (800f504 <getSoundData+0x198>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	0013      	movs	r3, r2
 800f45a:	0022      	movs	r2, r4
 800f45c:	f000 fdce 	bl	800fffc <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	3301      	adds	r3, #1
 800f464:	613b      	str	r3, [r7, #16]
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2b05      	cmp	r3, #5
 800f46a:	d9e2      	bls.n	800f432 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800f46c:	1cbb      	adds	r3, r7, #2
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d028      	beq.n	800f4c6 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800f474:	240e      	movs	r4, #14
 800f476:	193b      	adds	r3, r7, r4
 800f478:	2200      	movs	r2, #0
 800f47a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800f47c:	250d      	movs	r5, #13
 800f47e:	197b      	adds	r3, r7, r5
 800f480:	2200      	movs	r2, #0
 800f482:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800f484:	4b24      	ldr	r3, [pc, #144]	@ (800f518 <getSoundData+0x1ac>)
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	4924      	ldr	r1, [pc, #144]	@ (800f51c <getSoundData+0x1b0>)
 800f48a:	197b      	adds	r3, r7, r5
 800f48c:	193a      	adds	r2, r7, r4
 800f48e:	f000 fe59 	bl	8010144 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800f492:	193b      	adds	r3, r7, r4
 800f494:	881a      	ldrh	r2, [r3, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	21ff      	movs	r1, #255	@ 0xff
 800f49a:	4011      	ands	r1, r2
 800f49c:	000c      	movs	r4, r1
 800f49e:	7b99      	ldrb	r1, [r3, #14]
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	4001      	ands	r1, r0
 800f4a4:	1c08      	adds	r0, r1, #0
 800f4a6:	1c21      	adds	r1, r4, #0
 800f4a8:	4301      	orrs	r1, r0
 800f4aa:	7399      	strb	r1, [r3, #14]
 800f4ac:	0a12      	lsrs	r2, r2, #8
 800f4ae:	b290      	uxth	r0, r2
 800f4b0:	7bda      	ldrb	r2, [r3, #15]
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	400a      	ands	r2, r1
 800f4b6:	1c11      	adds	r1, r2, #0
 800f4b8:	1c02      	adds	r2, r0, #0
 800f4ba:	430a      	orrs	r2, r1
 800f4bc:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800f4be:	197b      	adds	r3, r7, r5
 800f4c0:	781a      	ldrb	r2, [r3, #0]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800f4c6:	f000 f86f 	bl	800f5a8 <micSettlingComplete>
 800f4ca:	0003      	movs	r3, r0
 800f4cc:	001a      	movs	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800f4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f4fc <getSoundData+0x190>)
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d005      	beq.n	800f4e8 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800f4dc:	4b08      	ldr	r3, [pc, #32]	@ (800f500 <getSoundData+0x194>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	b25b      	sxtb	r3, r3
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	f7ff ff06 	bl	800f2f4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800f4e8:	2301      	movs	r3, #1
}
 800f4ea:	0018      	movs	r0, r3
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	b006      	add	sp, #24
 800f4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f2:	46c0      	nop			@ (mov r8, r8)
 800f4f4:	20000f92 	.word	0x20000f92
 800f4f8:	20000f95 	.word	0x20000f95
 800f4fc:	20000f94 	.word	0x20000f94
 800f500:	200019e4 	.word	0x200019e4
 800f504:	20001a20 	.word	0x20001a20
 800f508:	200019e8 	.word	0x200019e8
 800f50c:	200019ec 	.word	0x200019ec
 800f510:	200019f0 	.word	0x200019f0
 800f514:	20001a08 	.word	0x20001a08
 800f518:	20000f9c 	.word	0x20000f9c
 800f51c:	3b5c7333 	.word	0x3b5c7333

0800f520 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	001a      	movs	r2, r3
 800f52e:	1cfb      	adds	r3, r7, #3
 800f530:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800f532:	4b09      	ldr	r3, [pc, #36]	@ (800f558 <soundInit+0x38>)
 800f534:	68ba      	ldr	r2, [r7, #8]
 800f536:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800f538:	4b08      	ldr	r3, [pc, #32]	@ (800f55c <soundInit+0x3c>)
 800f53a:	687a      	ldr	r2, [r7, #4]
 800f53c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800f53e:	4b08      	ldr	r3, [pc, #32]	@ (800f560 <soundInit+0x40>)
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800f544:	4b07      	ldr	r3, [pc, #28]	@ (800f564 <soundInit+0x44>)
 800f546:	2200      	movs	r2, #0
 800f548:	569a      	ldrsb	r2, [r3, r2]
 800f54a:	4b06      	ldr	r3, [pc, #24]	@ (800f564 <soundInit+0x44>)
 800f54c:	701a      	strb	r2, [r3, #0]

    return true;
 800f54e:	2301      	movs	r3, #1
}
 800f550:	0018      	movs	r0, r3
 800f552:	46bd      	mov	sp, r7
 800f554:	b004      	add	sp, #16
 800f556:	bd80      	pop	{r7, pc}
 800f558:	200019dc 	.word	0x200019dc
 800f55c:	200019d8 	.word	0x200019d8
 800f560:	200019e0 	.word	0x200019e0
 800f564:	200019e4 	.word	0x200019e4

0800f568 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800f56c:	4b02      	ldr	r3, [pc, #8]	@ (800f578 <clearMaximumAmplitude+0x10>)
 800f56e:	2200      	movs	r2, #0
 800f570:	601a      	str	r2, [r3, #0]
}
 800f572:	46c0      	nop			@ (mov r8, r8)
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	20000f9c 	.word	0x20000f9c

0800f57c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800f580:	4b08      	ldr	r3, [pc, #32]	@ (800f5a4 <startMicSettlingPeriod+0x28>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2200      	movs	r2, #0
 800f588:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800f58a:	4b06      	ldr	r3, [pc, #24]	@ (800f5a4 <startMicSettlingPeriod+0x28>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	0018      	movs	r0, r3
 800f590:	f00a fe0c 	bl	801a1ac <HAL_TIM_Base_Start>
 800f594:	1e03      	subs	r3, r0, #0
 800f596:	d001      	beq.n	800f59c <startMicSettlingPeriod+0x20>
    {
        return false;
 800f598:	2300      	movs	r3, #0
 800f59a:	e000      	b.n	800f59e <startMicSettlingPeriod+0x22>
    }
    return true;
 800f59c:	2301      	movs	r3, #1
}
 800f59e:	0018      	movs	r0, r3
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	200019d8 	.word	0x200019d8

0800f5a8 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800f5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e8 <micSettlingComplete+0x40>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	691b      	ldr	r3, [r3, #16]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	401a      	ands	r2, r3
 800f5ba:	1dfb      	adds	r3, r7, #7
 800f5bc:	3a01      	subs	r2, #1
 800f5be:	4251      	negs	r1, r2
 800f5c0:	414a      	adcs	r2, r1
 800f5c2:	701a      	strb	r2, [r3, #0]
    if (complete)
 800f5c4:	1dfb      	adds	r3, r7, #7
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d007      	beq.n	800f5dc <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800f5cc:	4b06      	ldr	r3, [pc, #24]	@ (800f5e8 <micSettlingComplete+0x40>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	0018      	movs	r0, r3
 800f5d2:	f00a fe35 	bl	801a240 <HAL_TIM_Base_Stop>
      DataReady = true;
 800f5d6:	4b05      	ldr	r3, [pc, #20]	@ (800f5ec <micSettlingComplete+0x44>)
 800f5d8:	2201      	movs	r2, #1
 800f5da:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800f5dc:	1dfb      	adds	r3, r7, #7
 800f5de:	781b      	ldrb	r3, [r3, #0]
}
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	b002      	add	sp, #8
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	200019d8 	.word	0x200019d8
 800f5ec:	20000f91 	.word	0x20000f91

0800f5f0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	0002      	movs	r2, r0
 800f5f8:	1dfb      	adds	r3, r7, #7
 800f5fa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800f5fc:	4b29      	ldr	r3, [pc, #164]	@ (800f6a4 <enableMicrophone+0xb4>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	b2db      	uxtb	r3, r3
 800f602:	1dfa      	adds	r2, r7, #7
 800f604:	7812      	ldrb	r2, [r2, #0]
 800f606:	429a      	cmp	r2, r3
 800f608:	d101      	bne.n	800f60e <enableMicrophone+0x1e>
    {
        return true;
 800f60a:	2301      	movs	r3, #1
 800f60c:	e045      	b.n	800f69a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800f60e:	1dfb      	adds	r3, r7, #7
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d025      	beq.n	800f662 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800f616:	f7ff ffb1 	bl	800f57c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800f61a:	4b23      	ldr	r3, [pc, #140]	@ (800f6a8 <enableMicrophone+0xb8>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2280      	movs	r2, #128	@ 0x80
 800f620:	0092      	lsls	r2, r2, #2
 800f622:	4922      	ldr	r1, [pc, #136]	@ (800f6ac <enableMicrophone+0xbc>)
 800f624:	0018      	movs	r0, r3
 800f626:	f007 f82b 	bl	8016680 <HAL_I2S_Receive_DMA>
 800f62a:	1e03      	subs	r3, r0, #0
 800f62c:	d001      	beq.n	800f632 <enableMicrophone+0x42>
        {
            return false;
 800f62e:	2300      	movs	r3, #0
 800f630:	e033      	b.n	800f69a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800f632:	f7ff ff99 	bl	800f568 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800f636:	4b1e      	ldr	r3, [pc, #120]	@ (800f6b0 <enableMicrophone+0xc0>)
 800f638:	2200      	movs	r2, #0
 800f63a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800f63c:	4b1d      	ldr	r3, [pc, #116]	@ (800f6b4 <enableMicrophone+0xc4>)
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	b25b      	sxtb	r3, r3
 800f642:	0018      	movs	r0, r3
 800f644:	f7ff fe56 	bl	800f2f4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800f648:	4b1b      	ldr	r3, [pc, #108]	@ (800f6b8 <enableMicrophone+0xc8>)
 800f64a:	2201      	movs	r2, #1
 800f64c:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800f64e:	4b15      	ldr	r3, [pc, #84]	@ (800f6a4 <enableMicrophone+0xb4>)
 800f650:	2201      	movs	r2, #1
 800f652:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800f654:	4b19      	ldr	r3, [pc, #100]	@ (800f6bc <enableMicrophone+0xcc>)
 800f656:	2200      	movs	r2, #0
 800f658:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800f65a:	4b19      	ldr	r3, [pc, #100]	@ (800f6c0 <enableMicrophone+0xd0>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	701a      	strb	r2, [r3, #0]
 800f660:	e01a      	b.n	800f698 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800f662:	4b14      	ldr	r3, [pc, #80]	@ (800f6b4 <enableMicrophone+0xc4>)
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	b25b      	sxtb	r3, r3
 800f668:	0018      	movs	r0, r3
 800f66a:	f7ff fe5d 	bl	800f328 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800f66e:	4b12      	ldr	r3, [pc, #72]	@ (800f6b8 <enableMicrophone+0xc8>)
 800f670:	2200      	movs	r2, #0
 800f672:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800f674:	4b11      	ldr	r3, [pc, #68]	@ (800f6bc <enableMicrophone+0xcc>)
 800f676:	2200      	movs	r2, #0
 800f678:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800f67a:	4b11      	ldr	r3, [pc, #68]	@ (800f6c0 <enableMicrophone+0xd0>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800f680:	4b09      	ldr	r3, [pc, #36]	@ (800f6a8 <enableMicrophone+0xb8>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	0018      	movs	r0, r3
 800f686:	f007 f8bd 	bl	8016804 <HAL_I2S_DMAStop>
 800f68a:	1e03      	subs	r3, r0, #0
 800f68c:	d001      	beq.n	800f692 <enableMicrophone+0xa2>
        {
            return false;
 800f68e:	2300      	movs	r3, #0
 800f690:	e003      	b.n	800f69a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800f692:	4b04      	ldr	r3, [pc, #16]	@ (800f6a4 <enableMicrophone+0xb4>)
 800f694:	2200      	movs	r2, #0
 800f696:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800f698:	2301      	movs	r3, #1
}
 800f69a:	0018      	movs	r0, r3
 800f69c:	46bd      	mov	sp, r7
 800f69e:	b002      	add	sp, #8
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	46c0      	nop			@ (mov r8, r8)
 800f6a4:	20000f92 	.word	0x20000f92
 800f6a8:	200019dc 	.word	0x200019dc
 800f6ac:	20000fd8 	.word	0x20000fd8
 800f6b0:	20000f98 	.word	0x20000f98
 800f6b4:	200019e4 	.word	0x200019e4
 800f6b8:	20000f94 	.word	0x20000f94
 800f6bc:	20000f93 	.word	0x20000f93
 800f6c0:	20000f95 	.word	0x20000f95

0800f6c4 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800f6c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f6fc <startSPLcalculation+0x38>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	4053      	eors	r3, r2
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d001      	beq.n	800f6dc <startSPLcalculation+0x18>
    {
        return false;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	e00c      	b.n	800f6f6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800f6dc:	4b08      	ldr	r3, [pc, #32]	@ (800f700 <startSPLcalculation+0x3c>)
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d001      	beq.n	800f6ea <startSPLcalculation+0x26>
    {
        return true;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e005      	b.n	800f6f6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800f6ea:	f000 fb63 	bl	800fdb4 <resetSPLstate>
    SPLcalcEnabled = true;
 800f6ee:	4b04      	ldr	r3, [pc, #16]	@ (800f700 <startSPLcalculation+0x3c>)
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	701a      	strb	r2, [r3, #0]
    return true;
 800f6f4:	2301      	movs	r3, #1
}
 800f6f6:	0018      	movs	r0, r3
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	20000f92 	.word	0x20000f92
 800f700:	20000f93 	.word	0x20000f93

0800f704 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f70c:	4b05      	ldr	r3, [pc, #20]	@ (800f724 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	429a      	cmp	r2, r3
 800f714:	d102      	bne.n	800f71c <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800f716:	2000      	movs	r0, #0
 800f718:	f000 f81a 	bl	800f750 <processHalfDMAbuffer>
  }
}
 800f71c:	46c0      	nop			@ (mov r8, r8)
 800f71e:	46bd      	mov	sp, r7
 800f720:	b002      	add	sp, #8
 800f722:	bd80      	pop	{r7, pc}
 800f724:	200019dc 	.word	0x200019dc

0800f728 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f730:	4b06      	ldr	r3, [pc, #24]	@ (800f74c <HAL_I2S_RxCpltCallback+0x24>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	429a      	cmp	r2, r3
 800f738:	d104      	bne.n	800f744 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800f73a:	2380      	movs	r3, #128	@ 0x80
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	0018      	movs	r0, r3
 800f740:	f000 f806 	bl	800f750 <processHalfDMAbuffer>
  }
}
 800f744:	46c0      	nop			@ (mov r8, r8)
 800f746:	46bd      	mov	sp, r7
 800f748:	b002      	add	sp, #8
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	200019dc 	.word	0x200019dc

0800f750 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	005a      	lsls	r2, r3, #1
 800f75c:	4b15      	ldr	r3, [pc, #84]	@ (800f7b4 <processHalfDMAbuffer+0x64>)
 800f75e:	18d3      	adds	r3, r2, r3
 800f760:	4a15      	ldr	r2, [pc, #84]	@ (800f7b8 <processHalfDMAbuffer+0x68>)
 800f762:	2180      	movs	r1, #128	@ 0x80
 800f764:	0089      	lsls	r1, r1, #2
 800f766:	0018      	movs	r0, r3
 800f768:	f000 fd35 	bl	80101d6 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800f76c:	4b13      	ldr	r3, [pc, #76]	@ (800f7bc <processHalfDMAbuffer+0x6c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	425a      	negs	r2, r3
 800f772:	4153      	adcs	r3, r2
 800f774:	b2da      	uxtb	r2, r3
 800f776:	4b11      	ldr	r3, [pc, #68]	@ (800f7bc <processHalfDMAbuffer+0x6c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	2109      	movs	r1, #9
 800f77c:	4299      	cmp	r1, r3
 800f77e:	419b      	sbcs	r3, r3
 800f780:	425b      	negs	r3, r3
 800f782:	b2db      	uxtb	r3, r3
 800f784:	480c      	ldr	r0, [pc, #48]	@ (800f7b8 <processHalfDMAbuffer+0x68>)
 800f786:	2180      	movs	r1, #128	@ 0x80
 800f788:	f000 fb46 	bl	800fe18 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800f78c:	4b0b      	ldr	r3, [pc, #44]	@ (800f7bc <processHalfDMAbuffer+0x6c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	2b09      	cmp	r3, #9
 800f792:	d804      	bhi.n	800f79e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800f794:	4b09      	ldr	r3, [pc, #36]	@ (800f7bc <processHalfDMAbuffer+0x6c>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	4b08      	ldr	r3, [pc, #32]	@ (800f7bc <processHalfDMAbuffer+0x6c>)
 800f79c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800f79e:	4b08      	ldr	r3, [pc, #32]	@ (800f7c0 <processHalfDMAbuffer+0x70>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800f7a8:	f000 f826 	bl	800f7f8 <calculateSPLQ31>
    }
}
 800f7ac:	46c0      	nop			@ (mov r8, r8)
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	b002      	add	sp, #8
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	20000fd8 	.word	0x20000fd8
 800f7b8:	200017d8 	.word	0x200017d8
 800f7bc:	20000f98 	.word	0x20000f98
 800f7c0:	20000f93 	.word	0x20000f93

0800f7c4 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f7cc:	4b07      	ldr	r3, [pc, #28]	@ (800f7ec <HAL_I2S_ErrorCallback+0x28>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d106      	bne.n	800f7e4 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800f7d6:	4a06      	ldr	r2, [pc, #24]	@ (800f7f0 <HAL_I2S_ErrorCallback+0x2c>)
 800f7d8:	239e      	movs	r3, #158	@ 0x9e
 800f7da:	0059      	lsls	r1, r3, #1
 800f7dc:	4b05      	ldr	r3, [pc, #20]	@ (800f7f4 <HAL_I2S_ErrorCallback+0x30>)
 800f7de:	0018      	movs	r0, r3
 800f7e0:	f002 f8f4 	bl	80119cc <errorHandler>
  }
}
 800f7e4:	46c0      	nop			@ (mov r8, r8)
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	b002      	add	sp, #8
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	200019dc 	.word	0x200019dc
 800f7f0:	0802a99c 	.word	0x0802a99c
 800f7f4:	0802b228 	.word	0x0802b228

0800f7f8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800f7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7fa:	b0b3      	sub	sp, #204	@ 0xcc
 800f7fc:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800f7fe:	4ae2      	ldr	r2, [pc, #904]	@ (800fb88 <calculateSPLQ31+0x390>)
 800f800:	2338      	movs	r3, #56	@ 0x38
 800f802:	2030      	movs	r0, #48	@ 0x30
 800f804:	181b      	adds	r3, r3, r0
 800f806:	19d9      	adds	r1, r3, r7
 800f808:	2334      	movs	r3, #52	@ 0x34
 800f80a:	181b      	adds	r3, r3, r0
 800f80c:	19d8      	adds	r0, r3, r7
 800f80e:	2380      	movs	r3, #128	@ 0x80
 800f810:	f000 fc36 	bl	8010080 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800f814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f816:	2b00      	cmp	r3, #0
 800f818:	da00      	bge.n	800f81c <calculateSPLQ31+0x24>
 800f81a:	3301      	adds	r3, #1
 800f81c:	105b      	asrs	r3, r3, #1
 800f81e:	001a      	movs	r2, r3
 800f820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f822:	2b00      	cmp	r3, #0
 800f824:	da00      	bge.n	800f828 <calculateSPLQ31+0x30>
 800f826:	3301      	adds	r3, #1
 800f828:	105b      	asrs	r3, r3, #1
 800f82a:	18d3      	adds	r3, r2, r3
 800f82c:	2188      	movs	r1, #136	@ 0x88
 800f82e:	187a      	adds	r2, r7, r1
 800f830:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800f832:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f834:	187b      	adds	r3, r7, r1
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	3304      	adds	r3, #4
 800f83c:	2284      	movs	r2, #132	@ 0x84
 800f83e:	18b9      	adds	r1, r7, r2
 800f840:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800f842:	18bb      	adds	r3, r7, r2
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4ad1      	ldr	r2, [pc, #836]	@ (800fb8c <calculateSPLQ31+0x394>)
 800f848:	0019      	movs	r1, r3
 800f84a:	0010      	movs	r0, r2
 800f84c:	f000 fc58 	bl	8010100 <getPo2factor>
 800f850:	0003      	movs	r3, r0
 800f852:	2280      	movs	r2, #128	@ 0x80
 800f854:	18ba      	adds	r2, r7, r2
 800f856:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800f858:	2300      	movs	r3, #0
 800f85a:	2284      	movs	r2, #132	@ 0x84
 800f85c:	2130      	movs	r1, #48	@ 0x30
 800f85e:	1852      	adds	r2, r2, r1
 800f860:	19d2      	adds	r2, r2, r7
 800f862:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800f864:	2300      	movs	r3, #0
 800f866:	2280      	movs	r2, #128	@ 0x80
 800f868:	1852      	adds	r2, r2, r1
 800f86a:	19d2      	adds	r2, r2, r7
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	e032      	b.n	800f8d6 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800f870:	4ac5      	ldr	r2, [pc, #788]	@ (800fb88 <calculateSPLQ31+0x390>)
 800f872:	2680      	movs	r6, #128	@ 0x80
 800f874:	2330      	movs	r3, #48	@ 0x30
 800f876:	18f1      	adds	r1, r6, r3
 800f878:	19cb      	adds	r3, r1, r7
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	589a      	ldr	r2, [r3, r2]
 800f880:	2188      	movs	r1, #136	@ 0x88
 800f882:	1879      	adds	r1, r7, r1
 800f884:	680b      	ldr	r3, [r1, #0]
 800f886:	1ad2      	subs	r2, r2, r3
 800f888:	2180      	movs	r1, #128	@ 0x80
 800f88a:	1879      	adds	r1, r7, r1
 800f88c:	680b      	ldr	r3, [r1, #0]
 800f88e:	409a      	lsls	r2, r3
 800f890:	0011      	movs	r1, r2
 800f892:	4abf      	ldr	r2, [pc, #764]	@ (800fb90 <calculateSPLQ31+0x398>)
 800f894:	2084      	movs	r0, #132	@ 0x84
 800f896:	2330      	movs	r3, #48	@ 0x30
 800f898:	18c3      	adds	r3, r0, r3
 800f89a:	19db      	adds	r3, r3, r7
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800f8a2:	2230      	movs	r2, #48	@ 0x30
 800f8a4:	1883      	adds	r3, r0, r2
 800f8a6:	19db      	adds	r3, r3, r7
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	49b8      	ldr	r1, [pc, #736]	@ (800fb90 <calculateSPLQ31+0x398>)
 800f8ae:	009a      	lsls	r2, r3, #2
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	5053      	str	r3, [r2, r1]
        count += 2;
 800f8b4:	2230      	movs	r2, #48	@ 0x30
 800f8b6:	1883      	adds	r3, r0, r2
 800f8b8:	19db      	adds	r3, r3, r7
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	3302      	adds	r3, #2
 800f8be:	0011      	movs	r1, r2
 800f8c0:	1882      	adds	r2, r0, r2
 800f8c2:	19d2      	adds	r2, r2, r7
 800f8c4:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800f8c6:	000a      	movs	r2, r1
 800f8c8:	18b3      	adds	r3, r6, r2
 800f8ca:	19db      	adds	r3, r3, r7
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	18b2      	adds	r2, r6, r2
 800f8d2:	19d2      	adds	r2, r2, r7
 800f8d4:	6013      	str	r3, [r2, #0]
 800f8d6:	2380      	movs	r3, #128	@ 0x80
 800f8d8:	2630      	movs	r6, #48	@ 0x30
 800f8da:	199b      	adds	r3, r3, r6
 800f8dc:	19db      	adds	r3, r3, r7
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8e2:	d9c5      	bls.n	800f870 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800f8e4:	4bab      	ldr	r3, [pc, #684]	@ (800fb94 <calculateSPLQ31+0x39c>)
 800f8e6:	6818      	ldr	r0, [r3, #0]
 800f8e8:	49a9      	ldr	r1, [pc, #676]	@ (800fb90 <calculateSPLQ31+0x398>)
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f011 fd23 	bl	8021338 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800f8f2:	4aa9      	ldr	r2, [pc, #676]	@ (800fb98 <calculateSPLQ31+0x3a0>)
 800f8f4:	2338      	movs	r3, #56	@ 0x38
 800f8f6:	199b      	adds	r3, r3, r6
 800f8f8:	19d9      	adds	r1, r3, r7
 800f8fa:	2334      	movs	r3, #52	@ 0x34
 800f8fc:	199b      	adds	r3, r3, r6
 800f8fe:	19d8      	adds	r0, r3, r7
 800f900:	237e      	movs	r3, #126	@ 0x7e
 800f902:	f000 fbbd 	bl	8010080 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800f906:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f908:	2380      	movs	r3, #128	@ 0x80
 800f90a:	061b      	lsls	r3, r3, #24
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d101      	bne.n	800f914 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800f910:	4b9e      	ldr	r3, [pc, #632]	@ (800fb8c <calculateSPLQ31+0x394>)
 800f912:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800f914:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f916:	2380      	movs	r3, #128	@ 0x80
 800f918:	061b      	lsls	r3, r3, #24
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d101      	bne.n	800f922 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800f91e:	4b9b      	ldr	r3, [pc, #620]	@ (800fb8c <calculateSPLQ31+0x394>)
 800f920:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800f922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f924:	17da      	asrs	r2, r3, #31
 800f926:	189b      	adds	r3, r3, r2
 800f928:	4053      	eors	r3, r2
 800f92a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800f92c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f92e:	17da      	asrs	r2, r3, #31
 800f930:	189b      	adds	r3, r3, r2
 800f932:	4053      	eors	r3, r2
 800f934:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800f936:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f938:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f93a:	429a      	cmp	r2, r3
 800f93c:	dd01      	ble.n	800f942 <calculateSPLQ31+0x14a>
    {
        max = min;
 800f93e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f940:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800f942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f944:	3304      	adds	r3, #4
 800f946:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800f948:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f94a:	4a90      	ldr	r2, [pc, #576]	@ (800fb8c <calculateSPLQ31+0x394>)
 800f94c:	0019      	movs	r1, r3
 800f94e:	0010      	movs	r0, r2
 800f950:	f000 fbd6 	bl	8010100 <getPo2factor>
 800f954:	0003      	movs	r3, r0
 800f956:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800f958:	2302      	movs	r3, #2
 800f95a:	22ac      	movs	r2, #172	@ 0xac
 800f95c:	18ba      	adds	r2, r7, r2
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	e012      	b.n	800f988 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800f962:	4a8b      	ldr	r2, [pc, #556]	@ (800fb90 <calculateSPLQ31+0x398>)
 800f964:	20ac      	movs	r0, #172	@ 0xac
 800f966:	183b      	adds	r3, r7, r0
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	589a      	ldr	r2, [r3, r2]
 800f96e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f970:	409a      	lsls	r2, r3
 800f972:	0011      	movs	r1, r2
 800f974:	4a86      	ldr	r2, [pc, #536]	@ (800fb90 <calculateSPLQ31+0x398>)
 800f976:	183b      	adds	r3, r7, r0
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800f97e:	183b      	adds	r3, r7, r0
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3301      	adds	r3, #1
 800f984:	183a      	adds	r2, r7, r0
 800f986:	6013      	str	r3, [r2, #0]
 800f988:	23ac      	movs	r3, #172	@ 0xac
 800f98a:	18fb      	adds	r3, r7, r3
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f990:	d9e7      	bls.n	800f962 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800f992:	4b7d      	ldr	r3, [pc, #500]	@ (800fb88 <calculateSPLQ31+0x390>)
 800f994:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800f996:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800f998:	4b7d      	ldr	r3, [pc, #500]	@ (800fb90 <calculateSPLQ31+0x398>)
 800f99a:	2240      	movs	r2, #64	@ 0x40
 800f99c:	0018      	movs	r0, r3
 800f99e:	f012 fa75 	bl	8021e8c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800f9a2:	2330      	movs	r3, #48	@ 0x30
 800f9a4:	18fb      	adds	r3, r7, r3
 800f9a6:	0018      	movs	r0, r3
 800f9a8:	2330      	movs	r3, #48	@ 0x30
 800f9aa:	001a      	movs	r2, r3
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	f014 f8b3 	bl	8023b18 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	21a0      	movs	r1, #160	@ 0xa0
 800f9b8:	1879      	adds	r1, r7, r1
 800f9ba:	600a      	str	r2, [r1, #0]
 800f9bc:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800f9be:	2301      	movs	r3, #1
 800f9c0:	229c      	movs	r2, #156	@ 0x9c
 800f9c2:	18ba      	adds	r2, r7, r2
 800f9c4:	6013      	str	r3, [r2, #0]
 800f9c6:	e05b      	b.n	800fa80 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800f9c8:	269c      	movs	r6, #156	@ 0x9c
 800f9ca:	19bb      	adds	r3, r7, r6
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	009a      	lsls	r2, r3, #2
 800f9d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9d2:	189b      	adds	r3, r3, r2
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	613b      	str	r3, [r7, #16]
 800f9d8:	17db      	asrs	r3, r3, #31
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	4b6f      	ldr	r3, [pc, #444]	@ (800fb9c <calculateSPLQ31+0x3a4>)
 800f9de:	681a      	ldr	r2, [r3, #0]
 800f9e0:	19bb      	adds	r3, r7, r6
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	005b      	lsls	r3, r3, #1
 800f9e6:	18d3      	adds	r3, r2, r3
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	60bb      	str	r3, [r7, #8]
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6938      	ldr	r0, [r7, #16]
 800f9f6:	6979      	ldr	r1, [r7, #20]
 800f9f8:	f7f0 fde2 	bl	80005c0 <__aeabi_lmul>
 800f9fc:	0002      	movs	r2, r0
 800f9fe:	000b      	movs	r3, r1
 800fa00:	0010      	movs	r0, r2
 800fa02:	0019      	movs	r1, r3
 800fa04:	23a0      	movs	r3, #160	@ 0xa0
 800fa06:	18fa      	adds	r2, r7, r3
 800fa08:	6853      	ldr	r3, [r2, #4]
 800fa0a:	6812      	ldr	r2, [r2, #0]
 800fa0c:	1812      	adds	r2, r2, r0
 800fa0e:	414b      	adcs	r3, r1
 800fa10:	21a0      	movs	r1, #160	@ 0xa0
 800fa12:	1879      	adds	r1, r7, r1
 800fa14:	600a      	str	r2, [r1, #0]
 800fa16:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800fa18:	4b61      	ldr	r3, [pc, #388]	@ (800fba0 <calculateSPLQ31+0x3a8>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	19bb      	adds	r3, r7, r6
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	18d3      	adds	r3, r2, r3
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	2b06      	cmp	r3, #6
 800fa26:	d025      	beq.n	800fa74 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800fa28:	4b5d      	ldr	r3, [pc, #372]	@ (800fba0 <calculateSPLQ31+0x3a8>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	19bb      	adds	r3, r7, r6
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	18d3      	adds	r3, r2, r3
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	2230      	movs	r2, #48	@ 0x30
 800fa36:	18ba      	adds	r2, r7, r2
 800fa38:	00db      	lsls	r3, r3, #3
 800fa3a:	18d3      	adds	r3, r2, r3
 800fa3c:	6818      	ldr	r0, [r3, #0]
 800fa3e:	6859      	ldr	r1, [r3, #4]
 800fa40:	19bb      	adds	r3, r7, r6
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	009a      	lsls	r2, r3, #2
 800fa46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa48:	189b      	adds	r3, r3, r2
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	603b      	str	r3, [r7, #0]
 800fa4e:	17db      	asrs	r3, r3, #31
 800fa50:	607b      	str	r3, [r7, #4]
 800fa52:	4b53      	ldr	r3, [pc, #332]	@ (800fba0 <calculateSPLQ31+0x3a8>)
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	19be      	adds	r6, r7, r6
 800fa58:	6833      	ldr	r3, [r6, #0]
 800fa5a:	18d3      	adds	r3, r2, r3
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	001e      	movs	r6, r3
 800fa60:	683a      	ldr	r2, [r7, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	1880      	adds	r0, r0, r2
 800fa66:	4159      	adcs	r1, r3
 800fa68:	2330      	movs	r3, #48	@ 0x30
 800fa6a:	18fa      	adds	r2, r7, r3
 800fa6c:	00f3      	lsls	r3, r6, #3
 800fa6e:	18d3      	adds	r3, r2, r3
 800fa70:	6018      	str	r0, [r3, #0]
 800fa72:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800fa74:	229c      	movs	r2, #156	@ 0x9c
 800fa76:	18bb      	adds	r3, r7, r2
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	18ba      	adds	r2, r7, r2
 800fa7e:	6013      	str	r3, [r2, #0]
 800fa80:	239c      	movs	r3, #156	@ 0x9c
 800fa82:	18fb      	adds	r3, r7, r3
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa88:	d99e      	bls.n	800f9c8 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800fa8a:	2380      	movs	r3, #128	@ 0x80
 800fa8c:	18fb      	adds	r3, r7, r3
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	005b      	lsls	r3, r3, #1
 800fa92:	001a      	movs	r2, r3
 800fa94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa96:	005b      	lsls	r3, r3, #1
 800fa98:	18d3      	adds	r3, r2, r3
 800fa9a:	3b22      	subs	r3, #34	@ 0x22
 800fa9c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800fa9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800faa0:	17da      	asrs	r2, r3, #31
 800faa2:	189b      	adds	r3, r3, r2
 800faa4:	4053      	eors	r3, r2
 800faa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800faa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800faaa:	2b00      	cmp	r3, #0
 800faac:	da62      	bge.n	800fb74 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800faae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fab0:	3b20      	subs	r3, #32
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	db05      	blt.n	800fac2 <calculateSPLQ31+0x2ca>
 800fab6:	22a0      	movs	r2, #160	@ 0xa0
 800fab8:	18ba      	adds	r2, r7, r2
 800faba:	6812      	ldr	r2, [r2, #0]
 800fabc:	409a      	lsls	r2, r3
 800fabe:	627a      	str	r2, [r7, #36]	@ 0x24
 800fac0:	e010      	b.n	800fae4 <calculateSPLQ31+0x2ec>
 800fac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fac4:	2220      	movs	r2, #32
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	22a0      	movs	r2, #160	@ 0xa0
 800faca:	18ba      	adds	r2, r7, r2
 800facc:	6812      	ldr	r2, [r2, #0]
 800face:	40da      	lsrs	r2, r3
 800fad0:	0013      	movs	r3, r2
 800fad2:	22a4      	movs	r2, #164	@ 0xa4
 800fad4:	18ba      	adds	r2, r7, r2
 800fad6:	6811      	ldr	r1, [r2, #0]
 800fad8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fada:	4091      	lsls	r1, r2
 800fadc:	6279      	str	r1, [r7, #36]	@ 0x24
 800fade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fae0:	431a      	orrs	r2, r3
 800fae2:	627a      	str	r2, [r7, #36]	@ 0x24
 800fae4:	21a0      	movs	r1, #160	@ 0xa0
 800fae6:	187b      	adds	r3, r7, r1
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faec:	409a      	lsls	r2, r3
 800faee:	623a      	str	r2, [r7, #32]
 800faf0:	6a3b      	ldr	r3, [r7, #32]
 800faf2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800faf4:	187a      	adds	r2, r7, r1
 800faf6:	6013      	str	r3, [r2, #0]
 800faf8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fafa:	2300      	movs	r3, #0
 800fafc:	2298      	movs	r2, #152	@ 0x98
 800fafe:	18ba      	adds	r2, r7, r2
 800fb00:	6013      	str	r3, [r2, #0]
 800fb02:	e031      	b.n	800fb68 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800fb04:	2330      	movs	r3, #48	@ 0x30
 800fb06:	18fa      	adds	r2, r7, r3
 800fb08:	2398      	movs	r3, #152	@ 0x98
 800fb0a:	18fb      	adds	r3, r7, r3
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	00db      	lsls	r3, r3, #3
 800fb10:	18d3      	adds	r3, r2, r3
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb18:	3920      	subs	r1, #32
 800fb1a:	2900      	cmp	r1, #0
 800fb1c:	db03      	blt.n	800fb26 <calculateSPLQ31+0x32e>
 800fb1e:	0010      	movs	r0, r2
 800fb20:	4088      	lsls	r0, r1
 800fb22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fb24:	e00c      	b.n	800fb40 <calculateSPLQ31+0x348>
 800fb26:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb28:	2020      	movs	r0, #32
 800fb2a:	1a41      	subs	r1, r0, r1
 800fb2c:	0010      	movs	r0, r2
 800fb2e:	40c8      	lsrs	r0, r1
 800fb30:	0001      	movs	r1, r0
 800fb32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fb34:	001c      	movs	r4, r3
 800fb36:	4084      	lsls	r4, r0
 800fb38:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800fb3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb3c:	4308      	orrs	r0, r1
 800fb3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fb40:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb42:	0013      	movs	r3, r2
 800fb44:	408b      	lsls	r3, r1
 800fb46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb48:	2330      	movs	r3, #48	@ 0x30
 800fb4a:	18fa      	adds	r2, r7, r3
 800fb4c:	2098      	movs	r0, #152	@ 0x98
 800fb4e:	183b      	adds	r3, r7, r0
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	00db      	lsls	r3, r3, #3
 800fb54:	18d3      	adds	r3, r2, r3
 800fb56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb5a:	6019      	str	r1, [r3, #0]
 800fb5c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fb5e:	183b      	adds	r3, r7, r0
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3301      	adds	r3, #1
 800fb64:	183a      	adds	r2, r7, r0
 800fb66:	6013      	str	r3, [r2, #0]
 800fb68:	2398      	movs	r3, #152	@ 0x98
 800fb6a:	18fb      	adds	r3, r7, r3
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2b05      	cmp	r3, #5
 800fb70:	d9c8      	bls.n	800fb04 <calculateSPLQ31+0x30c>
 800fb72:	e06b      	b.n	800fc4c <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800fb74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb76:	3b20      	subs	r3, #32
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	db13      	blt.n	800fba4 <calculateSPLQ31+0x3ac>
 800fb7c:	22a4      	movs	r2, #164	@ 0xa4
 800fb7e:	18ba      	adds	r2, r7, r2
 800fb80:	6812      	ldr	r2, [r2, #0]
 800fb82:	40da      	lsrs	r2, r3
 800fb84:	61ba      	str	r2, [r7, #24]
 800fb86:	e01e      	b.n	800fbc6 <calculateSPLQ31+0x3ce>
 800fb88:	200017d8 	.word	0x200017d8
 800fb8c:	7fffffff 	.word	0x7fffffff
 800fb90:	20001a24 	.word	0x20001a24
 800fb94:	200000c8 	.word	0x200000c8
 800fb98:	20001a2c 	.word	0x20001a2c
 800fb9c:	200000cc 	.word	0x200000cc
 800fba0:	200000d8 	.word	0x200000d8
 800fba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fba6:	2220      	movs	r2, #32
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	22a4      	movs	r2, #164	@ 0xa4
 800fbac:	18ba      	adds	r2, r7, r2
 800fbae:	6812      	ldr	r2, [r2, #0]
 800fbb0:	409a      	lsls	r2, r3
 800fbb2:	0013      	movs	r3, r2
 800fbb4:	22a0      	movs	r2, #160	@ 0xa0
 800fbb6:	18ba      	adds	r2, r7, r2
 800fbb8:	6811      	ldr	r1, [r2, #0]
 800fbba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbbc:	40d1      	lsrs	r1, r2
 800fbbe:	61b9      	str	r1, [r7, #24]
 800fbc0:	69ba      	ldr	r2, [r7, #24]
 800fbc2:	431a      	orrs	r2, r3
 800fbc4:	61ba      	str	r2, [r7, #24]
 800fbc6:	23a4      	movs	r3, #164	@ 0xa4
 800fbc8:	18fb      	adds	r3, r7, r3
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbce:	40da      	lsrs	r2, r3
 800fbd0:	61fa      	str	r2, [r7, #28]
 800fbd2:	69ba      	ldr	r2, [r7, #24]
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	21a0      	movs	r1, #160	@ 0xa0
 800fbd8:	1879      	adds	r1, r7, r1
 800fbda:	600a      	str	r2, [r1, #0]
 800fbdc:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fbde:	2300      	movs	r3, #0
 800fbe0:	2294      	movs	r2, #148	@ 0x94
 800fbe2:	18ba      	adds	r2, r7, r2
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	e02c      	b.n	800fc42 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800fbe8:	2330      	movs	r3, #48	@ 0x30
 800fbea:	18fa      	adds	r2, r7, r3
 800fbec:	2394      	movs	r3, #148	@ 0x94
 800fbee:	18fb      	adds	r3, r7, r3
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	18d3      	adds	r3, r2, r3
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fbfc:	3920      	subs	r1, #32
 800fbfe:	2900      	cmp	r1, #0
 800fc00:	db03      	blt.n	800fc0a <calculateSPLQ31+0x412>
 800fc02:	0018      	movs	r0, r3
 800fc04:	40c8      	lsrs	r0, r1
 800fc06:	0004      	movs	r4, r0
 800fc08:	e00a      	b.n	800fc20 <calculateSPLQ31+0x428>
 800fc0a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fc0c:	2020      	movs	r0, #32
 800fc0e:	1a41      	subs	r1, r0, r1
 800fc10:	0018      	movs	r0, r3
 800fc12:	4088      	lsls	r0, r1
 800fc14:	0001      	movs	r1, r0
 800fc16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc18:	0016      	movs	r6, r2
 800fc1a:	40c6      	lsrs	r6, r0
 800fc1c:	0034      	movs	r4, r6
 800fc1e:	430c      	orrs	r4, r1
 800fc20:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fc22:	40cb      	lsrs	r3, r1
 800fc24:	001d      	movs	r5, r3
 800fc26:	2330      	movs	r3, #48	@ 0x30
 800fc28:	18fa      	adds	r2, r7, r3
 800fc2a:	2194      	movs	r1, #148	@ 0x94
 800fc2c:	187b      	adds	r3, r7, r1
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	00db      	lsls	r3, r3, #3
 800fc32:	18d3      	adds	r3, r2, r3
 800fc34:	601c      	str	r4, [r3, #0]
 800fc36:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fc38:	187b      	adds	r3, r7, r1
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	187a      	adds	r2, r7, r1
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	2394      	movs	r3, #148	@ 0x94
 800fc44:	18fb      	adds	r3, r7, r3
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b05      	cmp	r3, #5
 800fc4a:	d9cd      	bls.n	800fbe8 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800fc4c:	230f      	movs	r3, #15
 800fc4e:	425d      	negs	r5, r3
 800fc50:	2305      	movs	r3, #5
 800fc52:	425e      	negs	r6, r3
 800fc54:	4b4a      	ldr	r3, [pc, #296]	@ (800fd80 <calculateSPLQ31+0x588>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	4b4a      	ldr	r3, [pc, #296]	@ (800fd84 <calculateSPLQ31+0x58c>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	21a0      	movs	r1, #160	@ 0xa0
 800fc62:	1879      	adds	r1, r7, r1
 800fc64:	6808      	ldr	r0, [r1, #0]
 800fc66:	6849      	ldr	r1, [r1, #4]
 800fc68:	4c47      	ldr	r4, [pc, #284]	@ (800fd88 <calculateSPLQ31+0x590>)
 800fc6a:	9403      	str	r4, [sp, #12]
 800fc6c:	4c47      	ldr	r4, [pc, #284]	@ (800fd8c <calculateSPLQ31+0x594>)
 800fc6e:	9402      	str	r4, [sp, #8]
 800fc70:	9301      	str	r3, [sp, #4]
 800fc72:	9200      	str	r2, [sp, #0]
 800fc74:	0033      	movs	r3, r6
 800fc76:	002a      	movs	r2, r5
 800fc78:	f000 fa86 	bl	8010188 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	2290      	movs	r2, #144	@ 0x90
 800fc80:	18ba      	adds	r2, r7, r2
 800fc82:	6013      	str	r3, [r2, #0]
 800fc84:	e026      	b.n	800fcd4 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800fc86:	2330      	movs	r3, #48	@ 0x30
 800fc88:	18fa      	adds	r2, r7, r3
 800fc8a:	2490      	movs	r4, #144	@ 0x90
 800fc8c:	193b      	adds	r3, r7, r4
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	00db      	lsls	r3, r3, #3
 800fc92:	18d3      	adds	r3, r2, r3
 800fc94:	6818      	ldr	r0, [r3, #0]
 800fc96:	6859      	ldr	r1, [r3, #4]
 800fc98:	230f      	movs	r3, #15
 800fc9a:	425d      	negs	r5, r3
 800fc9c:	2305      	movs	r3, #5
 800fc9e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800fca0:	193b      	adds	r3, r7, r4
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	009a      	lsls	r2, r3, #2
 800fca6:	4b3a      	ldr	r3, [pc, #232]	@ (800fd90 <calculateSPLQ31+0x598>)
 800fca8:	18d3      	adds	r3, r2, r3
 800fcaa:	193a      	adds	r2, r7, r4
 800fcac:	6812      	ldr	r2, [r2, #0]
 800fcae:	0094      	lsls	r4, r2, #2
 800fcb0:	4a38      	ldr	r2, [pc, #224]	@ (800fd94 <calculateSPLQ31+0x59c>)
 800fcb2:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800fcb4:	9203      	str	r2, [sp, #12]
 800fcb6:	9302      	str	r3, [sp, #8]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9301      	str	r3, [sp, #4]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	0033      	movs	r3, r6
 800fcc2:	002a      	movs	r2, r5
 800fcc4:	f000 fa60 	bl	8010188 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fcc8:	2490      	movs	r4, #144	@ 0x90
 800fcca:	193b      	adds	r3, r7, r4
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	193a      	adds	r2, r7, r4
 800fcd2:	6013      	str	r3, [r2, #0]
 800fcd4:	2390      	movs	r3, #144	@ 0x90
 800fcd6:	18fb      	adds	r3, r7, r3
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b05      	cmp	r3, #5
 800fcdc:	d9d3      	bls.n	800fc86 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800fcde:	4b2b      	ldr	r3, [pc, #172]	@ (800fd8c <calculateSPLQ31+0x594>)
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	4b2d      	ldr	r3, [pc, #180]	@ (800fd98 <calculateSPLQ31+0x5a0>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	18d2      	adds	r2, r2, r3
 800fce8:	4b2b      	ldr	r3, [pc, #172]	@ (800fd98 <calculateSPLQ31+0x5a0>)
 800fcea:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800fcec:	4b26      	ldr	r3, [pc, #152]	@ (800fd88 <calculateSPLQ31+0x590>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	4b2a      	ldr	r3, [pc, #168]	@ (800fd9c <calculateSPLQ31+0x5a4>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	18d2      	adds	r2, r2, r3
 800fcf6:	4b29      	ldr	r3, [pc, #164]	@ (800fd9c <calculateSPLQ31+0x5a4>)
 800fcf8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	228c      	movs	r2, #140	@ 0x8c
 800fcfe:	18ba      	adds	r2, r7, r2
 800fd00:	6013      	str	r3, [r2, #0]
 800fd02:	e025      	b.n	800fd50 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800fd04:	4b22      	ldr	r3, [pc, #136]	@ (800fd90 <calculateSPLQ31+0x598>)
 800fd06:	208c      	movs	r0, #140	@ 0x8c
 800fd08:	183a      	adds	r2, r7, r0
 800fd0a:	6812      	ldr	r2, [r2, #0]
 800fd0c:	0092      	lsls	r2, r2, #2
 800fd0e:	58d2      	ldr	r2, [r2, r3]
 800fd10:	4b23      	ldr	r3, [pc, #140]	@ (800fda0 <calculateSPLQ31+0x5a8>)
 800fd12:	1839      	adds	r1, r7, r0
 800fd14:	6809      	ldr	r1, [r1, #0]
 800fd16:	0089      	lsls	r1, r1, #2
 800fd18:	58cb      	ldr	r3, [r1, r3]
 800fd1a:	18d1      	adds	r1, r2, r3
 800fd1c:	4b20      	ldr	r3, [pc, #128]	@ (800fda0 <calculateSPLQ31+0x5a8>)
 800fd1e:	183a      	adds	r2, r7, r0
 800fd20:	6812      	ldr	r2, [r2, #0]
 800fd22:	0092      	lsls	r2, r2, #2
 800fd24:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800fd26:	4b1b      	ldr	r3, [pc, #108]	@ (800fd94 <calculateSPLQ31+0x59c>)
 800fd28:	183a      	adds	r2, r7, r0
 800fd2a:	6812      	ldr	r2, [r2, #0]
 800fd2c:	0092      	lsls	r2, r2, #2
 800fd2e:	58d2      	ldr	r2, [r2, r3]
 800fd30:	4b1c      	ldr	r3, [pc, #112]	@ (800fda4 <calculateSPLQ31+0x5ac>)
 800fd32:	1839      	adds	r1, r7, r0
 800fd34:	6809      	ldr	r1, [r1, #0]
 800fd36:	0089      	lsls	r1, r1, #2
 800fd38:	58cb      	ldr	r3, [r1, r3]
 800fd3a:	18d1      	adds	r1, r2, r3
 800fd3c:	4b19      	ldr	r3, [pc, #100]	@ (800fda4 <calculateSPLQ31+0x5ac>)
 800fd3e:	183a      	adds	r2, r7, r0
 800fd40:	6812      	ldr	r2, [r2, #0]
 800fd42:	0092      	lsls	r2, r2, #2
 800fd44:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fd46:	183b      	adds	r3, r7, r0
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	183a      	adds	r2, r7, r0
 800fd4e:	6013      	str	r3, [r2, #0]
 800fd50:	238c      	movs	r3, #140	@ 0x8c
 800fd52:	18fb      	adds	r3, r7, r3
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b05      	cmp	r3, #5
 800fd58:	d9d4      	bls.n	800fd04 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800fd5a:	4b13      	ldr	r3, [pc, #76]	@ (800fda8 <calculateSPLQ31+0x5b0>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	4b11      	ldr	r3, [pc, #68]	@ (800fda8 <calculateSPLQ31+0x5b0>)
 800fd62:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800fd64:	4b10      	ldr	r3, [pc, #64]	@ (800fda8 <calculateSPLQ31+0x5b0>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b0f      	cmp	r3, #15
 800fd6a:	d905      	bls.n	800fd78 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800fd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800fdac <calculateSPLQ31+0x5b4>)
 800fd6e:	2201      	movs	r2, #1
 800fd70:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800fd72:	4b0f      	ldr	r3, [pc, #60]	@ (800fdb0 <calculateSPLQ31+0x5b8>)
 800fd74:	2200      	movs	r2, #0
 800fd76:	701a      	strb	r2, [r3, #0]
    }
}
 800fd78:	46c0      	nop			@ (mov r8, r8)
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	b02f      	add	sp, #188	@ 0xbc
 800fd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd80:	200000d0 	.word	0x200000d0
 800fd84:	200000d4 	.word	0x200000d4
 800fd88:	20000fa4 	.word	0x20000fa4
 800fd8c:	20000fa0 	.word	0x20000fa0
 800fd90:	20000fa8 	.word	0x20000fa8
 800fd94:	20000fc0 	.word	0x20000fc0
 800fd98:	200019e8 	.word	0x200019e8
 800fd9c:	200019ec 	.word	0x200019ec
 800fda0:	200019f0 	.word	0x200019f0
 800fda4:	20001a08 	.word	0x20001a08
 800fda8:	20001a20 	.word	0x20001a20
 800fdac:	20000f95 	.word	0x20000f95
 800fdb0:	20000f93 	.word	0x20000f93

0800fdb4 <resetSPLstate>:

static void resetSPLstate(void)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800fdba:	4b11      	ldr	r3, [pc, #68]	@ (800fe00 <resetSPLstate+0x4c>)
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800fdc0:	4b10      	ldr	r3, [pc, #64]	@ (800fe04 <resetSPLstate+0x50>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800fdc6:	4b10      	ldr	r3, [pc, #64]	@ (800fe08 <resetSPLstate+0x54>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fdcc:	2300      	movs	r3, #0
 800fdce:	607b      	str	r3, [r7, #4]
 800fdd0:	e00c      	b.n	800fdec <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800fdd2:	4b0e      	ldr	r3, [pc, #56]	@ (800fe0c <resetSPLstate+0x58>)
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	0092      	lsls	r2, r2, #2
 800fdd8:	2100      	movs	r1, #0
 800fdda:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800fddc:	4b0c      	ldr	r3, [pc, #48]	@ (800fe10 <resetSPLstate+0x5c>)
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	0092      	lsls	r2, r2, #2
 800fde2:	2100      	movs	r1, #0
 800fde4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3301      	adds	r3, #1
 800fdea:	607b      	str	r3, [r7, #4]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b05      	cmp	r3, #5
 800fdf0:	d9ef      	bls.n	800fdd2 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800fdf2:	4b08      	ldr	r3, [pc, #32]	@ (800fe14 <resetSPLstate+0x60>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	701a      	strb	r2, [r3, #0]
}
 800fdf8:	46c0      	nop			@ (mov r8, r8)
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	b002      	add	sp, #8
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	200019e8 	.word	0x200019e8
 800fe04:	200019ec 	.word	0x200019ec
 800fe08:	20001a20 	.word	0x20001a20
 800fe0c:	200019f0 	.word	0x200019f0
 800fe10:	20001a08 	.word	0x20001a08
 800fe14:	20000f95 	.word	0x20000f95

0800fe18 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800fe18:	b5b0      	push	{r4, r5, r7, lr}
 800fe1a:	b090      	sub	sp, #64	@ 0x40
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	0019      	movs	r1, r3
 800fe24:	1dfb      	adds	r3, r7, #7
 800fe26:	701a      	strb	r2, [r3, #0]
 800fe28:	1dbb      	adds	r3, r7, #6
 800fe2a:	1c0a      	adds	r2, r1, #0
 800fe2c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800fe2e:	1dfb      	adds	r3, r7, #7
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d005      	beq.n	800fe42 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800fe36:	4b3b      	ldr	r3, [pc, #236]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800fe3c:	4b3a      	ldr	r3, [pc, #232]	@ (800ff28 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800fe46:	2300      	movs	r3, #0
 800fe48:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800fe4a:	2305      	movs	r3, #5
 800fe4c:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800fe4e:	2300      	movs	r3, #0
 800fe50:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe52:	e040      	b.n	800fed6 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800fe54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	18d3      	adds	r3, r2, r3
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe60:	409a      	lsls	r2, r3
 800fe62:	0013      	movs	r3, r2
 800fe64:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800fe66:	4b30      	ldr	r3, [pc, #192]	@ (800ff28 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	425a      	negs	r2, r3
 800fe6c:	4b2e      	ldr	r3, [pc, #184]	@ (800ff28 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe6e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800fe70:	2418      	movs	r4, #24
 800fe72:	193a      	adds	r2, r7, r4
 800fe74:	492c      	ldr	r1, [pc, #176]	@ (800ff28 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe76:	231c      	movs	r3, #28
 800fe78:	18f8      	adds	r0, r7, r3
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	f012 f85e 	bl	8021f3c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800fe80:	2514      	movs	r5, #20
 800fe82:	197a      	adds	r2, r7, r5
 800fe84:	1939      	adds	r1, r7, r4
 800fe86:	4829      	ldr	r0, [pc, #164]	@ (800ff2c <getFilteredMaxAmplitudeQ31+0x114>)
 800fe88:	2301      	movs	r3, #1
 800fe8a:	f012 f825 	bl	8021ed8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800fe8e:	2410      	movs	r4, #16
 800fe90:	193a      	adds	r2, r7, r4
 800fe92:	4924      	ldr	r1, [pc, #144]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe94:	4826      	ldr	r0, [pc, #152]	@ (800ff30 <getFilteredMaxAmplitudeQ31+0x118>)
 800fe96:	2301      	movs	r3, #1
 800fe98:	f012 f81e 	bl	8021ed8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800fe9c:	4a21      	ldr	r2, [pc, #132]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe9e:	1939      	adds	r1, r7, r4
 800fea0:	1978      	adds	r0, r7, r5
 800fea2:	2301      	movs	r3, #1
 800fea4:	f012 f84a 	bl	8021f3c <arm_add_q31>

        lastData = fx;
 800fea8:	69fa      	ldr	r2, [r7, #28]
 800feaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ff28 <getFilteredMaxAmplitudeQ31+0x110>)
 800feac:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800feae:	4b1d      	ldr	r3, [pc, #116]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800feb4:	429a      	cmp	r2, r3
 800feb6:	da03      	bge.n	800fec0 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800feb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800febe:	e007      	b.n	800fed0 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800fec0:	4b18      	ldr	r3, [pc, #96]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fec6:	429a      	cmp	r2, r3
 800fec8:	dd02      	ble.n	800fed0 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800feca:	4b16      	ldr	r3, [pc, #88]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800fed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed2:	3301      	adds	r3, #1
 800fed4:	637b      	str	r3, [r7, #52]	@ 0x34
 800fed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d3ba      	bcc.n	800fe54 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800fede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fee0:	17da      	asrs	r2, r3, #31
 800fee2:	189b      	adds	r3, r3, r2
 800fee4:	4053      	eors	r3, r2
 800fee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800fee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feea:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800feec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d200      	bcs.n	800fef6 <getFilteredMaxAmplitudeQ31+0xde>
 800fef4:	0013      	movs	r3, r2
 800fef6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800fef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fefc:	40da      	lsrs	r2, r3
 800fefe:	0013      	movs	r3, r2
 800ff00:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800ff02:	1dbb      	adds	r3, r7, #6
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d007      	beq.n	800ff1a <getFilteredMaxAmplitudeQ31+0x102>
 800ff0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ff34 <getFilteredMaxAmplitudeQ31+0x11c>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	6a3a      	ldr	r2, [r7, #32]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d902      	bls.n	800ff1a <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800ff14:	4b07      	ldr	r3, [pc, #28]	@ (800ff34 <getFilteredMaxAmplitudeQ31+0x11c>)
 800ff16:	6a3a      	ldr	r2, [r7, #32]
 800ff18:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
}
 800ff1c:	0018      	movs	r0, r3
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	b010      	add	sp, #64	@ 0x40
 800ff22:	bdb0      	pop	{r4, r5, r7, pc}
 800ff24:	20001e24 	.word	0x20001e24
 800ff28:	20001e28 	.word	0x20001e28
 800ff2c:	0802b220 	.word	0x0802b220
 800ff30:	0802b224 	.word	0x0802b224
 800ff34:	20000f9c 	.word	0x20000f9c

0800ff38 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800ff44:	4913      	ldr	r1, [pc, #76]	@ (800ff94 <floatToIntAndFrac2dp+0x5c>)
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f7f1 f82a 	bl	8000fa0 <__aeabi_fmul>
 800ff4c:	1c03      	adds	r3, r0, #0
 800ff4e:	1c18      	adds	r0, r3, #0
 800ff50:	f016 fcc0 	bl	80268d4 <roundf>
 800ff54:	1c03      	adds	r3, r0, #0
 800ff56:	1c18      	adds	r0, r3, #0
 800ff58:	f7f0 fb60 	bl	800061c <__aeabi_f2uiz>
 800ff5c:	0003      	movs	r3, r0
 800ff5e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	2164      	movs	r1, #100	@ 0x64
 800ff64:	0018      	movs	r0, r3
 800ff66:	f7f0 f91d 	bl	80001a4 <__udivsi3>
 800ff6a:	0003      	movs	r3, r0
 800ff6c:	001a      	movs	r2, r3
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	2164      	movs	r1, #100	@ 0x64
 800ff7e:	434b      	muls	r3, r1
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	701a      	strb	r2, [r3, #0]
}
 800ff8a:	46c0      	nop			@ (mov r8, r8)
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	b006      	add	sp, #24
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	46c0      	nop			@ (mov r8, r8)
 800ff94:	42c80000 	.word	0x42c80000

0800ff98 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b086      	sub	sp, #24
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	60f8      	str	r0, [r7, #12]
 800ffa0:	60b9      	str	r1, [r7, #8]
 800ffa2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ffa4:	4914      	ldr	r1, [pc, #80]	@ (800fff8 <floatToIntAndFrac1dp+0x60>)
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f7f0 fffa 	bl	8000fa0 <__aeabi_fmul>
 800ffac:	1c03      	adds	r3, r0, #0
 800ffae:	1c18      	adds	r0, r3, #0
 800ffb0:	f016 fc90 	bl	80268d4 <roundf>
 800ffb4:	1c03      	adds	r3, r0, #0
 800ffb6:	1c18      	adds	r0, r3, #0
 800ffb8:	f7f0 fb30 	bl	800061c <__aeabi_f2uiz>
 800ffbc:	0003      	movs	r3, r0
 800ffbe:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	210a      	movs	r1, #10
 800ffc4:	0018      	movs	r0, r3
 800ffc6:	f7f0 f8ed 	bl	80001a4 <__udivsi3>
 800ffca:	0003      	movs	r3, r0
 800ffcc:	001a      	movs	r2, r3
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	1c19      	adds	r1, r3, #0
 800ffde:	0089      	lsls	r1, r1, #2
 800ffe0:	18cb      	adds	r3, r1, r3
 800ffe2:	18db      	adds	r3, r3, r3
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	701a      	strb	r2, [r3, #0]
}
 800ffee:	46c0      	nop			@ (mov r8, r8)
 800fff0:	46bd      	mov	sp, r7
 800fff2:	b006      	add	sp, #24
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	46c0      	nop			@ (mov r8, r8)
 800fff8:	41200000 	.word	0x41200000

0800fffc <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800fffc:	b590      	push	{r4, r7, lr}
 800fffe:	b087      	sub	sp, #28
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7f1 fae0 	bl	80015d0 <__aeabi_i2f>
 8010010:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8010012:	6838      	ldr	r0, [r7, #0]
 8010014:	f7f1 fadc 	bl	80015d0 <__aeabi_i2f>
 8010018:	1c03      	adds	r3, r0, #0
 801001a:	4918      	ldr	r1, [pc, #96]	@ (801007c <sumToIntAverage+0x80>)
 801001c:	1c18      	adds	r0, r3, #0
 801001e:	f7f0 fdd9 	bl	8000bd4 <__aeabi_fdiv>
 8010022:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8010024:	1c19      	adds	r1, r3, #0
 8010026:	1c20      	adds	r0, r4, #0
 8010028:	f7f0 fc4a 	bl	80008c0 <__aeabi_fadd>
 801002c:	1c03      	adds	r3, r0, #0
 801002e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8010030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010032:	f7f1 fb19 	bl	8001668 <__aeabi_ui2f>
 8010036:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8010038:	1c19      	adds	r1, r3, #0
 801003a:	1c20      	adds	r0, r4, #0
 801003c:	f7f0 fdca 	bl	8000bd4 <__aeabi_fdiv>
 8010040:	1c03      	adds	r3, r0, #0
 8010042:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	2310      	movs	r3, #16
 801004c:	18f9      	adds	r1, r7, r3
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	1c18      	adds	r0, r3, #0
 8010052:	f7ff ffa1 	bl	800ff98 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2bff      	cmp	r3, #255	@ 0xff
 801005a:	d906      	bls.n	801006a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	22ff      	movs	r2, #255	@ 0xff
 8010060:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2209      	movs	r2, #9
 8010066:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8010068:	e003      	b.n	8010072 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	b2da      	uxtb	r2, r3
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	701a      	strb	r2, [r3, #0]
}
 8010072:	46c0      	nop			@ (mov r8, r8)
 8010074:	46bd      	mov	sp, r7
 8010076:	b007      	add	sp, #28
 8010078:	bd90      	pop	{r4, r7, pc}
 801007a:	46c0      	nop			@ (mov r8, r8)
 801007c:	41200000 	.word	0x41200000

08010080 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
 801008c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2280      	movs	r2, #128	@ 0x80
 8010092:	0612      	lsls	r2, r2, #24
 8010094:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	4a18      	ldr	r2, [pc, #96]	@ (80100fc <findMinMax+0x7c>)
 801009a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801009c:	2300      	movs	r3, #0
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	e022      	b.n	80100e8 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	18d3      	adds	r3, r2, r3
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	da06      	bge.n	80100c2 <findMinMax+0x42>
        {
            min[0] = array[i];
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	18d3      	adds	r3, r2, r3
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	18d3      	adds	r3, r2, r3
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	dd06      	ble.n	80100e2 <findMinMax+0x62>
        {
            max[0] = array[i];
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	18d3      	adds	r3, r2, r3
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	3301      	adds	r3, #1
 80100e6:	617b      	str	r3, [r7, #20]
 80100e8:	697a      	ldr	r2, [r7, #20]
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d3d8      	bcc.n	80100a2 <findMinMax+0x22>
        }
    }
}
 80100f0:	46c0      	nop			@ (mov r8, r8)
 80100f2:	46c0      	nop			@ (mov r8, r8)
 80100f4:	46bd      	mov	sp, r7
 80100f6:	b006      	add	sp, #24
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	46c0      	nop			@ (mov r8, r8)
 80100fc:	7fffffff 	.word	0x7fffffff

08010100 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d302      	bcc.n	801011c <getPo2factor+0x1c>
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d107      	bne.n	801012c <getPo2factor+0x2c>
    {
        return 0;
 801011c:	2300      	movs	r3, #0
 801011e:	e00d      	b.n	801013c <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	085b      	lsrs	r3, r3, #1
 8010124:	607b      	str	r3, [r7, #4]
        bitShift++;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	3301      	adds	r3, #1
 801012a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 801012c:	687a      	ldr	r2, [r7, #4]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	429a      	cmp	r2, r3
 8010132:	d2f5      	bcs.n	8010120 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	3b01      	subs	r3, #1
 8010138:	60fb      	str	r3, [r7, #12]
    return bitShift;
 801013a:	68fb      	ldr	r3, [r7, #12]
}
 801013c:	0018      	movs	r0, r3
 801013e:	46bd      	mov	sp, r7
 8010140:	b004      	add	sp, #16
 8010142:	bd80      	pop	{r7, pc}

08010144 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b086      	sub	sp, #24
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
 8010150:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8010152:	68f8      	ldr	r0, [r7, #12]
 8010154:	f7f1 fa88 	bl	8001668 <__aeabi_ui2f>
 8010158:	1c03      	adds	r3, r0, #0
 801015a:	1c19      	adds	r1, r3, #0
 801015c:	68b8      	ldr	r0, [r7, #8]
 801015e:	f7f0 ff1f 	bl	8000fa0 <__aeabi_fmul>
 8010162:	1c03      	adds	r3, r0, #0
 8010164:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8010166:	2300      	movs	r3, #0
 8010168:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 801016a:	683a      	ldr	r2, [r7, #0]
 801016c:	2310      	movs	r3, #16
 801016e:	18f9      	adds	r1, r7, r3
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	1c18      	adds	r0, r3, #0
 8010174:	f7ff fee0 	bl	800ff38 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	b29a      	uxth	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	801a      	strh	r2, [r3, #0]
}
 8010180:	46c0      	nop			@ (mov r8, r8)
 8010182:	46bd      	mov	sp, r7
 8010184:	b006      	add	sp, #24
 8010186:	bd80      	pop	{r7, pc}

08010188 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	60b8      	str	r0, [r7, #8]
 8010190:	60f9      	str	r1, [r7, #12]
 8010192:	607a      	str	r2, [r7, #4]
 8010194:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8010196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010198:	6a3a      	ldr	r2, [r7, #32]
 801019a:	68b8      	ldr	r0, [r7, #8]
 801019c:	68f9      	ldr	r1, [r7, #12]
 801019e:	f7fa f863 	bl	800a268 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	18d2      	adds	r2, r2, r3
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	18d2      	adds	r2, r2, r3
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 80101b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b4:	681a      	ldr	r2, [r3, #0]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	18d2      	adds	r2, r2, r3
 80101ba:	69fb      	ldr	r3, [r7, #28]
 80101bc:	18d2      	adds	r2, r2, r3
 80101be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c0:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 80101c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101c4:	6a3b      	ldr	r3, [r7, #32]
 80101c6:	0011      	movs	r1, r2
 80101c8:	0018      	movs	r0, r3
 80101ca:	f7fa f8dd 	bl	800a388 <correctIntFracNumber>
}
 80101ce:	46c0      	nop			@ (mov r8, r8)
 80101d0:	46bd      	mov	sp, r7
 80101d2:	b004      	add	sp, #16
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b086      	sub	sp, #24
 80101da:	af00      	add	r7, sp, #0
 80101dc:	60f8      	str	r0, [r7, #12]
 80101de:	60b9      	str	r1, [r7, #8]
 80101e0:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80101e6:	2300      	movs	r3, #0
 80101e8:	613b      	str	r3, [r7, #16]
 80101ea:	e019      	b.n	8010220 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	005b      	lsls	r3, r3, #1
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	18d3      	adds	r3, r2, r3
 80101f4:	881b      	ldrh	r3, [r3, #0]
 80101f6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80101f8:	693a      	ldr	r2, [r7, #16]
 80101fa:	3201      	adds	r2, #1
 80101fc:	0052      	lsls	r2, r2, #1
 80101fe:	68f9      	ldr	r1, [r7, #12]
 8010200:	188a      	adds	r2, r1, r2
 8010202:	8812      	ldrh	r2, [r2, #0]
 8010204:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010206:	0019      	movs	r1, r3
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	687a      	ldr	r2, [r7, #4]
 801020e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8010210:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010212:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	3301      	adds	r3, #1
 8010218:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	3304      	adds	r3, #4
 801021e:	613b      	str	r3, [r7, #16]
 8010220:	693a      	ldr	r2, [r7, #16]
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	429a      	cmp	r2, r3
 8010226:	d3e1      	bcc.n	80101ec <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8010228:	46c0      	nop			@ (mov r8, r8)
 801022a:	46c0      	nop			@ (mov r8, r8)
 801022c:	46bd      	mov	sp, r7
 801022e:	b006      	add	sp, #24
 8010230:	bd80      	pop	{r7, pc}
	...

08010234 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8010234:	b580      	push	{r7, lr}
 8010236:	af00      	add	r7, sp, #0
  init = false;
 8010238:	4b02      	ldr	r3, [pc, #8]	@ (8010244 <InitDone+0x10>)
 801023a:	2200      	movs	r2, #0
 801023c:	701a      	strb	r2, [r3, #0]
}
 801023e:	46c0      	nop			@ (mov r8, r8)
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	200000dc 	.word	0x200000dc

08010248 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 801024e:	f7f7 fd51 	bl	8007cf4 <ReadBatteryVoltage>
 8010252:	1c02      	adds	r2, r0, #0
 8010254:	4b25      	ldr	r3, [pc, #148]	@ (80102ec <batteryChargeCheck+0xa4>)
 8010256:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8010258:	4b24      	ldr	r3, [pc, #144]	@ (80102ec <batteryChargeCheck+0xa4>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4924      	ldr	r1, [pc, #144]	@ (80102f0 <batteryChargeCheck+0xa8>)
 801025e:	1c18      	adds	r0, r3, #0
 8010260:	f7f0 f966 	bl	8000530 <__aeabi_fcmplt>
 8010264:	1e03      	subs	r3, r0, #0
 8010266:	d002      	beq.n	801026e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8010268:	1dfb      	adds	r3, r7, #7
 801026a:	2200      	movs	r2, #0
 801026c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 801026e:	4b1f      	ldr	r3, [pc, #124]	@ (80102ec <batteryChargeCheck+0xa4>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	491f      	ldr	r1, [pc, #124]	@ (80102f0 <batteryChargeCheck+0xa8>)
 8010274:	1c18      	adds	r0, r3, #0
 8010276:	f7f0 f979 	bl	800056c <__aeabi_fcmpge>
 801027a:	1e03      	subs	r3, r0, #0
 801027c:	d00d      	beq.n	801029a <batteryChargeCheck+0x52>
 801027e:	4b1b      	ldr	r3, [pc, #108]	@ (80102ec <batteryChargeCheck+0xa4>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	1c18      	adds	r0, r3, #0
 8010284:	f7f3 f8ee 	bl	8003464 <__aeabi_f2d>
 8010288:	4a1a      	ldr	r2, [pc, #104]	@ (80102f4 <batteryChargeCheck+0xac>)
 801028a:	4b1b      	ldr	r3, [pc, #108]	@ (80102f8 <batteryChargeCheck+0xb0>)
 801028c:	f7f0 f916 	bl	80004bc <__aeabi_dcmplt>
 8010290:	1e03      	subs	r3, r0, #0
 8010292:	d002      	beq.n	801029a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8010294:	1dfb      	adds	r3, r7, #7
 8010296:	2201      	movs	r2, #1
 8010298:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 801029a:	4b14      	ldr	r3, [pc, #80]	@ (80102ec <batteryChargeCheck+0xa4>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	1c18      	adds	r0, r3, #0
 80102a0:	f7f3 f8e0 	bl	8003464 <__aeabi_f2d>
 80102a4:	4a13      	ldr	r2, [pc, #76]	@ (80102f4 <batteryChargeCheck+0xac>)
 80102a6:	4b14      	ldr	r3, [pc, #80]	@ (80102f8 <batteryChargeCheck+0xb0>)
 80102a8:	f7f0 f926 	bl	80004f8 <__aeabi_dcmpge>
 80102ac:	1e03      	subs	r3, r0, #0
 80102ae:	d00b      	beq.n	80102c8 <batteryChargeCheck+0x80>
 80102b0:	4b0e      	ldr	r3, [pc, #56]	@ (80102ec <batteryChargeCheck+0xa4>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	2181      	movs	r1, #129	@ 0x81
 80102b6:	05c9      	lsls	r1, r1, #23
 80102b8:	1c18      	adds	r0, r3, #0
 80102ba:	f7f0 f939 	bl	8000530 <__aeabi_fcmplt>
 80102be:	1e03      	subs	r3, r0, #0
 80102c0:	d002      	beq.n	80102c8 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 80102c2:	1dfb      	adds	r3, r7, #7
 80102c4:	2202      	movs	r2, #2
 80102c6:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 80102c8:	4b08      	ldr	r3, [pc, #32]	@ (80102ec <batteryChargeCheck+0xa4>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2181      	movs	r1, #129	@ 0x81
 80102ce:	05c9      	lsls	r1, r1, #23
 80102d0:	1c18      	adds	r0, r3, #0
 80102d2:	f7f0 f94b 	bl	800056c <__aeabi_fcmpge>
 80102d6:	1e03      	subs	r3, r0, #0
 80102d8:	d002      	beq.n	80102e0 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 80102da:	1dfb      	adds	r3, r7, #7
 80102dc:	2203      	movs	r2, #3
 80102de:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 80102e0:	1dfb      	adds	r3, r7, #7
 80102e2:	781b      	ldrb	r3, [r3, #0]
}
 80102e4:	0018      	movs	r0, r3
 80102e6:	46bd      	mov	sp, r7
 80102e8:	b002      	add	sp, #8
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	20001e3c 	.word	0x20001e3c
 80102f0:	40600000 	.word	0x40600000
 80102f4:	9999999a 	.word	0x9999999a
 80102f8:	400d9999 	.word	0x400d9999

080102fc <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80102fc:	b5b0      	push	{r4, r5, r7, lr}
 80102fe:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8010300:	f7f7 fd5a 	bl	8007db8 <ReadSolarVoltage>
 8010304:	0003      	movs	r3, r0
 8010306:	001a      	movs	r2, r3
 8010308:	4b1a      	ldr	r3, [pc, #104]	@ (8010374 <Calculate_LED_ON+0x78>)
 801030a:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 801030c:	4b19      	ldr	r3, [pc, #100]	@ (8010374 <Calculate_LED_ON+0x78>)
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	4a19      	ldr	r2, [pc, #100]	@ (8010378 <Calculate_LED_ON+0x7c>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d802      	bhi.n	801031c <Calculate_LED_ON+0x20>
    solmV = 2900;
 8010316:	4b17      	ldr	r3, [pc, #92]	@ (8010374 <Calculate_LED_ON+0x78>)
 8010318:	4a18      	ldr	r2, [pc, #96]	@ (801037c <Calculate_LED_ON+0x80>)
 801031a:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 801031c:	4b15      	ldr	r3, [pc, #84]	@ (8010374 <Calculate_LED_ON+0x78>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	4a17      	ldr	r2, [pc, #92]	@ (8010380 <Calculate_LED_ON+0x84>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d902      	bls.n	801032c <Calculate_LED_ON+0x30>
    solmV = 4700;
 8010326:	4b13      	ldr	r3, [pc, #76]	@ (8010374 <Calculate_LED_ON+0x78>)
 8010328:	4a15      	ldr	r2, [pc, #84]	@ (8010380 <Calculate_LED_ON+0x84>)
 801032a:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 801032c:	4b11      	ldr	r3, [pc, #68]	@ (8010374 <Calculate_LED_ON+0x78>)
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	0018      	movs	r0, r3
 8010332:	f7f3 f845 	bl	80033c0 <__aeabi_i2d>
 8010336:	0004      	movs	r4, r0
 8010338:	000d      	movs	r5, r1
 801033a:	4b0e      	ldr	r3, [pc, #56]	@ (8010374 <Calculate_LED_ON+0x78>)
 801033c:	881b      	ldrh	r3, [r3, #0]
 801033e:	001a      	movs	r2, r3
 8010340:	4b10      	ldr	r3, [pc, #64]	@ (8010384 <Calculate_LED_ON+0x88>)
 8010342:	1a9b      	subs	r3, r3, r2
 8010344:	0018      	movs	r0, r3
 8010346:	f7f3 f83b 	bl	80033c0 <__aeabi_i2d>
 801034a:	2200      	movs	r2, #0
 801034c:	4b0e      	ldr	r3, [pc, #56]	@ (8010388 <Calculate_LED_ON+0x8c>)
 801034e:	f7f2 f975 	bl	800263c <__aeabi_dmul>
 8010352:	0002      	movs	r2, r0
 8010354:	000b      	movs	r3, r1
 8010356:	0020      	movs	r0, r4
 8010358:	0029      	movs	r1, r5
 801035a:	f7f1 f9c7 	bl	80016ec <__aeabi_dadd>
 801035e:	0002      	movs	r2, r0
 8010360:	000b      	movs	r3, r1
 8010362:	0010      	movs	r0, r2
 8010364:	0019      	movs	r1, r3
 8010366:	f7f0 f971 	bl	800064c <__aeabi_d2uiz>
 801036a:	0003      	movs	r3, r0
 801036c:	b29b      	uxth	r3, r3
}
 801036e:	0018      	movs	r0, r3
 8010370:	46bd      	mov	sp, r7
 8010372:	bdb0      	pop	{r4, r5, r7, pc}
 8010374:	20001e40 	.word	0x20001e40
 8010378:	00000b53 	.word	0x00000b53
 801037c:	00000b54 	.word	0x00000b54
 8010380:	0000125c 	.word	0x0000125c
 8010384:	00000dee 	.word	0x00000dee
 8010388:	3ff80000 	.word	0x3ff80000

0801038c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 801038c:	b590      	push	{r4, r7, lr}
 801038e:	b083      	sub	sp, #12
 8010390:	af00      	add	r7, sp, #0
 8010392:	0004      	movs	r4, r0
 8010394:	0008      	movs	r0, r1
 8010396:	0011      	movs	r1, r2
 8010398:	1dbb      	adds	r3, r7, #6
 801039a:	1c22      	adds	r2, r4, #0
 801039c:	801a      	strh	r2, [r3, #0]
 801039e:	1d3b      	adds	r3, r7, #4
 80103a0:	1c02      	adds	r2, r0, #0
 80103a2:	801a      	strh	r2, [r3, #0]
 80103a4:	1cbb      	adds	r3, r7, #2
 80103a6:	1c0a      	adds	r2, r1, #0
 80103a8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80103aa:	4b0f      	ldr	r3, [pc, #60]	@ (80103e8 <SetStatusLED+0x5c>)
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d107      	bne.n	80103c2 <SetStatusLED+0x36>
 80103b2:	4b0e      	ldr	r3, [pc, #56]	@ (80103ec <SetStatusLED+0x60>)
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d103      	bne.n	80103c2 <SetStatusLED+0x36>
 80103ba:	4b0d      	ldr	r3, [pc, #52]	@ (80103f0 <SetStatusLED+0x64>)
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00e      	beq.n	80103e0 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 80103c2:	2380      	movs	r3, #128	@ 0x80
 80103c4:	05db      	lsls	r3, r3, #23
 80103c6:	1dba      	adds	r2, r7, #6
 80103c8:	8812      	ldrh	r2, [r2, #0]
 80103ca:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80103cc:	2380      	movs	r3, #128	@ 0x80
 80103ce:	05db      	lsls	r3, r3, #23
 80103d0:	1d3a      	adds	r2, r7, #4
 80103d2:	8812      	ldrh	r2, [r2, #0]
 80103d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80103d6:	2380      	movs	r3, #128	@ 0x80
 80103d8:	05db      	lsls	r3, r3, #23
 80103da:	1cba      	adds	r2, r7, #2
 80103dc:	8812      	ldrh	r2, [r2, #0]
 80103de:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80103e0:	46c0      	nop			@ (mov r8, r8)
 80103e2:	46bd      	mov	sp, r7
 80103e4:	b003      	add	sp, #12
 80103e6:	bd90      	pop	{r4, r7, pc}
 80103e8:	20001e2d 	.word	0x20001e2d
 80103ec:	200000dc 	.word	0x200000dc
 80103f0:	20001e2e 	.word	0x20001e2e

080103f4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80103f4:	b590      	push	{r4, r7, lr}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	0004      	movs	r4, r0
 80103fc:	0008      	movs	r0, r1
 80103fe:	0011      	movs	r1, r2
 8010400:	1dfb      	adds	r3, r7, #7
 8010402:	1c22      	adds	r2, r4, #0
 8010404:	701a      	strb	r2, [r3, #0]
 8010406:	1dbb      	adds	r3, r7, #6
 8010408:	1c02      	adds	r2, r0, #0
 801040a:	701a      	strb	r2, [r3, #0]
 801040c:	1d7b      	adds	r3, r7, #5
 801040e:	1c0a      	adds	r2, r1, #0
 8010410:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8010412:	4b19      	ldr	r3, [pc, #100]	@ (8010478 <SetDBLED+0x84>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d107      	bne.n	801042a <SetDBLED+0x36>
 801041a:	4b18      	ldr	r3, [pc, #96]	@ (801047c <SetDBLED+0x88>)
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d103      	bne.n	801042a <SetDBLED+0x36>
 8010422:	4b17      	ldr	r3, [pc, #92]	@ (8010480 <SetDBLED+0x8c>)
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d022      	beq.n	8010470 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 801042a:	1dfb      	adds	r3, r7, #7
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2201      	movs	r2, #1
 8010430:	4053      	eors	r3, r2
 8010432:	b2db      	uxtb	r3, r3
 8010434:	001a      	movs	r2, r3
 8010436:	4b13      	ldr	r3, [pc, #76]	@ (8010484 <SetDBLED+0x90>)
 8010438:	2101      	movs	r1, #1
 801043a:	0018      	movs	r0, r3
 801043c:	f003 f8eb 	bl	8013616 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8010440:	1dbb      	adds	r3, r7, #6
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2201      	movs	r2, #1
 8010446:	4053      	eors	r3, r2
 8010448:	b2db      	uxtb	r3, r3
 801044a:	001a      	movs	r2, r3
 801044c:	2380      	movs	r3, #128	@ 0x80
 801044e:	005b      	lsls	r3, r3, #1
 8010450:	480c      	ldr	r0, [pc, #48]	@ (8010484 <SetDBLED+0x90>)
 8010452:	0019      	movs	r1, r3
 8010454:	f003 f8df 	bl	8013616 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8010458:	1d7b      	adds	r3, r7, #5
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	2201      	movs	r2, #1
 801045e:	4053      	eors	r3, r2
 8010460:	b2db      	uxtb	r3, r3
 8010462:	001a      	movs	r2, r3
 8010464:	2380      	movs	r3, #128	@ 0x80
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	4806      	ldr	r0, [pc, #24]	@ (8010484 <SetDBLED+0x90>)
 801046a:	0019      	movs	r1, r3
 801046c:	f003 f8d3 	bl	8013616 <HAL_GPIO_WritePin>
  }
}
 8010470:	46c0      	nop			@ (mov r8, r8)
 8010472:	46bd      	mov	sp, r7
 8010474:	b003      	add	sp, #12
 8010476:	bd90      	pop	{r4, r7, pc}
 8010478:	20001e2d 	.word	0x20001e2d
 801047c:	200000dc 	.word	0x200000dc
 8010480:	20001e2e 	.word	0x20001e2e
 8010484:	50000400 	.word	0x50000400

08010488 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8010488:	b590      	push	{r4, r7, lr}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	0004      	movs	r4, r0
 8010490:	0008      	movs	r0, r1
 8010492:	0011      	movs	r1, r2
 8010494:	1dbb      	adds	r3, r7, #6
 8010496:	1c22      	adds	r2, r4, #0
 8010498:	801a      	strh	r2, [r3, #0]
 801049a:	1d3b      	adds	r3, r7, #4
 801049c:	1c02      	adds	r2, r0, #0
 801049e:	801a      	strh	r2, [r3, #0]
 80104a0:	1cbb      	adds	r3, r7, #2
 80104a2:	1c0a      	adds	r2, r1, #0
 80104a4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80104a6:	4b0e      	ldr	r3, [pc, #56]	@ (80104e0 <SetVocLED+0x58>)
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d107      	bne.n	80104be <SetVocLED+0x36>
 80104ae:	4b0d      	ldr	r3, [pc, #52]	@ (80104e4 <SetVocLED+0x5c>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d103      	bne.n	80104be <SetVocLED+0x36>
 80104b6:	4b0c      	ldr	r3, [pc, #48]	@ (80104e8 <SetVocLED+0x60>)
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d00b      	beq.n	80104d6 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 80104be:	4b0b      	ldr	r3, [pc, #44]	@ (80104ec <SetVocLED+0x64>)
 80104c0:	1dba      	adds	r2, r7, #6
 80104c2:	8812      	ldrh	r2, [r2, #0]
 80104c4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 80104c6:	4b09      	ldr	r3, [pc, #36]	@ (80104ec <SetVocLED+0x64>)
 80104c8:	1d3a      	adds	r2, r7, #4
 80104ca:	8812      	ldrh	r2, [r2, #0]
 80104cc:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 80104ce:	4b07      	ldr	r3, [pc, #28]	@ (80104ec <SetVocLED+0x64>)
 80104d0:	1cba      	adds	r2, r7, #2
 80104d2:	8812      	ldrh	r2, [r2, #0]
 80104d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80104d6:	46c0      	nop			@ (mov r8, r8)
 80104d8:	46bd      	mov	sp, r7
 80104da:	b003      	add	sp, #12
 80104dc:	bd90      	pop	{r4, r7, pc}
 80104de:	46c0      	nop			@ (mov r8, r8)
 80104e0:	20001e2d 	.word	0x20001e2d
 80104e4:	200000dc 	.word	0x200000dc
 80104e8:	20001e2e 	.word	0x20001e2e
 80104ec:	40000400 	.word	0x40000400

080104f0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 80104f0:	b580      	push	{r7, lr}
 80104f2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80104f4:	4b08      	ldr	r3, [pc, #32]	@ (8010518 <SetMeasurementIndicator+0x28>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d103      	bne.n	8010504 <SetMeasurementIndicator+0x14>
 80104fc:	4b07      	ldr	r3, [pc, #28]	@ (801051c <SetMeasurementIndicator+0x2c>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8010504:	f7ff fefa 	bl	80102fc <Calculate_LED_ON>
 8010508:	0003      	movs	r3, r0
 801050a:	001a      	movs	r2, r3
 801050c:	2380      	movs	r3, #128	@ 0x80
 801050e:	05db      	lsls	r3, r3, #23
 8010510:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8010512:	46c0      	nop			@ (mov r8, r8)
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	20001e2d 	.word	0x20001e2d
 801051c:	20001e2e 	.word	0x20001e2e

08010520 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8010520:	b580      	push	{r7, lr}
 8010522:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010524:	4b07      	ldr	r3, [pc, #28]	@ (8010544 <ResetMeasurementIndicator+0x24>)
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d103      	bne.n	8010534 <ResetMeasurementIndicator+0x14>
 801052c:	4b06      	ldr	r3, [pc, #24]	@ (8010548 <ResetMeasurementIndicator+0x28>)
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d004      	beq.n	801053e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8010534:	2380      	movs	r3, #128	@ 0x80
 8010536:	05db      	lsls	r3, r3, #23
 8010538:	22fa      	movs	r2, #250	@ 0xfa
 801053a:	0112      	lsls	r2, r2, #4
 801053c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801053e:	46c0      	nop			@ (mov r8, r8)
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	20001e2d 	.word	0x20001e2d
 8010548:	20001e2e 	.word	0x20001e2e

0801054c <SetMICIndicator>:
void SetMICIndicator(){
 801054c:	b580      	push	{r7, lr}
 801054e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010550:	4b19      	ldr	r3, [pc, #100]	@ (80105b8 <SetMICIndicator+0x6c>)
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d103      	bne.n	8010560 <SetMICIndicator+0x14>
 8010558:	4b18      	ldr	r3, [pc, #96]	@ (80105bc <SetMICIndicator+0x70>)
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d007      	beq.n	8010570 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8010560:	f7ff fecc 	bl	80102fc <Calculate_LED_ON>
 8010564:	0003      	movs	r3, r0
 8010566:	001a      	movs	r2, r3
 8010568:	2380      	movs	r3, #128	@ 0x80
 801056a:	05db      	lsls	r3, r3, #23
 801056c:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 801056e:	e01f      	b.n	80105b0 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8010570:	4b13      	ldr	r3, [pc, #76]	@ (80105c0 <SetMICIndicator+0x74>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	1c18      	adds	r0, r3, #0
 8010576:	f7f2 ff75 	bl	8003464 <__aeabi_f2d>
 801057a:	4a12      	ldr	r2, [pc, #72]	@ (80105c4 <SetMICIndicator+0x78>)
 801057c:	4b12      	ldr	r3, [pc, #72]	@ (80105c8 <SetMICIndicator+0x7c>)
 801057e:	f7ef ffb1 	bl	80004e4 <__aeabi_dcmpgt>
 8010582:	1e03      	subs	r3, r0, #0
 8010584:	d00a      	beq.n	801059c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8010586:	f7ff feb9 	bl	80102fc <Calculate_LED_ON>
 801058a:	0003      	movs	r3, r0
 801058c:	001a      	movs	r2, r3
 801058e:	2380      	movs	r3, #128	@ 0x80
 8010590:	05db      	lsls	r3, r3, #23
 8010592:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8010594:	4b0d      	ldr	r3, [pc, #52]	@ (80105cc <SetMICIndicator+0x80>)
 8010596:	2202      	movs	r2, #2
 8010598:	701a      	strb	r2, [r3, #0]
}
 801059a:	e009      	b.n	80105b0 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 801059c:	f7ff feae 	bl	80102fc <Calculate_LED_ON>
 80105a0:	0003      	movs	r3, r0
 80105a2:	001a      	movs	r2, r3
 80105a4:	2380      	movs	r3, #128	@ 0x80
 80105a6:	05db      	lsls	r3, r3, #23
 80105a8:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 80105aa:	4b08      	ldr	r3, [pc, #32]	@ (80105cc <SetMICIndicator+0x80>)
 80105ac:	2201      	movs	r2, #1
 80105ae:	701a      	strb	r2, [r3, #0]
}
 80105b0:	46c0      	nop			@ (mov r8, r8)
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	46c0      	nop			@ (mov r8, r8)
 80105b8:	20001e2d 	.word	0x20001e2d
 80105bc:	20001e2e 	.word	0x20001e2e
 80105c0:	20001e3c 	.word	0x20001e3c
 80105c4:	9999999a 	.word	0x9999999a
 80105c8:	400d9999 	.word	0x400d9999
 80105cc:	20001e30 	.word	0x20001e30

080105d0 <ResetMICIndicator>:
void ResetMICIndicator(){
 80105d0:	b580      	push	{r7, lr}
 80105d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80105d4:	4b0f      	ldr	r3, [pc, #60]	@ (8010614 <ResetMICIndicator+0x44>)
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d103      	bne.n	80105e4 <ResetMICIndicator+0x14>
 80105dc:	4b0e      	ldr	r3, [pc, #56]	@ (8010618 <ResetMICIndicator+0x48>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 80105e4:	2380      	movs	r3, #128	@ 0x80
 80105e6:	05db      	lsls	r3, r3, #23
 80105e8:	22fa      	movs	r2, #250	@ 0xfa
 80105ea:	0112      	lsls	r2, r2, #4
 80105ec:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 80105ee:	e00e      	b.n	801060e <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 80105f0:	4b0a      	ldr	r3, [pc, #40]	@ (801061c <ResetMICIndicator+0x4c>)
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	2b02      	cmp	r3, #2
 80105f6:	d105      	bne.n	8010604 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 80105f8:	2380      	movs	r3, #128	@ 0x80
 80105fa:	05db      	lsls	r3, r3, #23
 80105fc:	22fa      	movs	r2, #250	@ 0xfa
 80105fe:	0112      	lsls	r2, r2, #4
 8010600:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010602:	e004      	b.n	801060e <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8010604:	2380      	movs	r3, #128	@ 0x80
 8010606:	05db      	lsls	r3, r3, #23
 8010608:	22fa      	movs	r2, #250	@ 0xfa
 801060a:	0112      	lsls	r2, r2, #4
 801060c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801060e:	46c0      	nop			@ (mov r8, r8)
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20001e2d 	.word	0x20001e2d
 8010618:	20001e2e 	.word	0x20001e2e
 801061c:	20001e30 	.word	0x20001e30

08010620 <SetESPIndicator>:
void SetESPIndicator(){
 8010620:	b580      	push	{r7, lr}
 8010622:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010624:	4b08      	ldr	r3, [pc, #32]	@ (8010648 <SetESPIndicator+0x28>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d103      	bne.n	8010634 <SetESPIndicator+0x14>
 801062c:	4b07      	ldr	r3, [pc, #28]	@ (801064c <SetESPIndicator+0x2c>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d006      	beq.n	8010642 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8010634:	f7ff fe62 	bl	80102fc <Calculate_LED_ON>
 8010638:	0003      	movs	r3, r0
 801063a:	001a      	movs	r2, r3
 801063c:	2380      	movs	r3, #128	@ 0x80
 801063e:	05db      	lsls	r3, r3, #23
 8010640:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8010642:	46c0      	nop			@ (mov r8, r8)
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}
 8010648:	20001e2d 	.word	0x20001e2d
 801064c:	20001e2e 	.word	0x20001e2e

08010650 <ResetESPIndicator>:
void ResetESPIndicator(){
 8010650:	b580      	push	{r7, lr}
 8010652:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010654:	4b07      	ldr	r3, [pc, #28]	@ (8010674 <ResetESPIndicator+0x24>)
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d103      	bne.n	8010664 <ResetESPIndicator+0x14>
 801065c:	4b06      	ldr	r3, [pc, #24]	@ (8010678 <ResetESPIndicator+0x28>)
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d004      	beq.n	801066e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8010664:	2380      	movs	r3, #128	@ 0x80
 8010666:	05db      	lsls	r3, r3, #23
 8010668:	22fa      	movs	r2, #250	@ 0xfa
 801066a:	0112      	lsls	r2, r2, #4
 801066c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801066e:	46c0      	nop			@ (mov r8, r8)
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	20001e2d 	.word	0x20001e2d
 8010678:	20001e2e 	.word	0x20001e2e

0801067c <SetPMIndicator>:

void SetPMIndicator() {
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010680:	4b0f      	ldr	r3, [pc, #60]	@ (80106c0 <SetPMIndicator+0x44>)
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d103      	bne.n	8010690 <SetPMIndicator+0x14>
 8010688:	4b0e      	ldr	r3, [pc, #56]	@ (80106c4 <SetPMIndicator+0x48>)
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d014      	beq.n	80106ba <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8010690:	f7ff fe34 	bl	80102fc <Calculate_LED_ON>
 8010694:	0003      	movs	r3, r0
 8010696:	001a      	movs	r2, r3
 8010698:	2380      	movs	r3, #128	@ 0x80
 801069a:	05db      	lsls	r3, r3, #23
 801069c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801069e:	f7ff fe2d 	bl	80102fc <Calculate_LED_ON>
 80106a2:	0003      	movs	r3, r0
 80106a4:	001a      	movs	r2, r3
 80106a6:	2380      	movs	r3, #128	@ 0x80
 80106a8:	05db      	lsls	r3, r3, #23
 80106aa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 80106ac:	f7ff fe26 	bl	80102fc <Calculate_LED_ON>
 80106b0:	0003      	movs	r3, r0
 80106b2:	001a      	movs	r2, r3
 80106b4:	2380      	movs	r3, #128	@ 0x80
 80106b6:	05db      	lsls	r3, r3, #23
 80106b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80106ba:	46c0      	nop			@ (mov r8, r8)
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20001e2d 	.word	0x20001e2d
 80106c4:	20001e2e 	.word	0x20001e2e

080106c8 <ResetPMIndicator>:

void ResetPMIndicator() {
 80106c8:	b580      	push	{r7, lr}
 80106ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80106cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010700 <ResetPMIndicator+0x38>)
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d103      	bne.n	80106dc <ResetPMIndicator+0x14>
 80106d4:	4b0b      	ldr	r3, [pc, #44]	@ (8010704 <ResetPMIndicator+0x3c>)
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00e      	beq.n	80106fa <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 80106dc:	2380      	movs	r3, #128	@ 0x80
 80106de:	05db      	lsls	r3, r3, #23
 80106e0:	22fa      	movs	r2, #250	@ 0xfa
 80106e2:	0112      	lsls	r2, r2, #4
 80106e4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 80106e6:	2380      	movs	r3, #128	@ 0x80
 80106e8:	05db      	lsls	r3, r3, #23
 80106ea:	22fa      	movs	r2, #250	@ 0xfa
 80106ec:	0112      	lsls	r2, r2, #4
 80106ee:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 80106f0:	2380      	movs	r3, #128	@ 0x80
 80106f2:	05db      	lsls	r3, r3, #23
 80106f4:	22fa      	movs	r2, #250	@ 0xfa
 80106f6:	0112      	lsls	r2, r2, #4
 80106f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80106fa:	46c0      	nop			@ (mov r8, r8)
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	20001e2d 	.word	0x20001e2d
 8010704:	20001e2e 	.word	0x20001e2e

08010708 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8010708:	b580      	push	{r7, lr}
 801070a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 801070c:	23fa      	movs	r3, #250	@ 0xfa
 801070e:	011a      	lsls	r2, r3, #4
 8010710:	23fa      	movs	r3, #250	@ 0xfa
 8010712:	0119      	lsls	r1, r3, #4
 8010714:	23fa      	movs	r3, #250	@ 0xfa
 8010716:	011b      	lsls	r3, r3, #4
 8010718:	0018      	movs	r0, r3
 801071a:	f7ff fe37 	bl	801038c <SetStatusLED>
  SetDBLED(false,false,false);
 801071e:	2200      	movs	r2, #0
 8010720:	2100      	movs	r1, #0
 8010722:	2000      	movs	r0, #0
 8010724:	f7ff fe66 	bl	80103f4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8010728:	23fa      	movs	r3, #250	@ 0xfa
 801072a:	011a      	lsls	r2, r3, #4
 801072c:	23fa      	movs	r3, #250	@ 0xfa
 801072e:	0119      	lsls	r1, r3, #4
 8010730:	23fa      	movs	r3, #250	@ 0xfa
 8010732:	011b      	lsls	r3, r3, #4
 8010734:	0018      	movs	r0, r3
 8010736:	f7ff fea7 	bl	8010488 <SetVocLED>
return;
 801073a:	46c0      	nop			@ (mov r8, r8)
}
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <SetAllREDLED>:

void SetAllREDLED() {
 8010740:	b580      	push	{r7, lr}
 8010742:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8010744:	2380      	movs	r3, #128	@ 0x80
 8010746:	05db      	lsls	r3, r3, #23
 8010748:	4a19      	ldr	r2, [pc, #100]	@ (80107b0 <SetAllREDLED+0x70>)
 801074a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 801074c:	2380      	movs	r3, #128	@ 0x80
 801074e:	05db      	lsls	r3, r3, #23
 8010750:	22fa      	movs	r2, #250	@ 0xfa
 8010752:	0112      	lsls	r2, r2, #4
 8010754:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8010756:	2380      	movs	r3, #128	@ 0x80
 8010758:	05db      	lsls	r3, r3, #23
 801075a:	22fa      	movs	r2, #250	@ 0xfa
 801075c:	0112      	lsls	r2, r2, #4
 801075e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8010760:	4b14      	ldr	r3, [pc, #80]	@ (80107b4 <SetAllREDLED+0x74>)
 8010762:	4a13      	ldr	r2, [pc, #76]	@ (80107b0 <SetAllREDLED+0x70>)
 8010764:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8010766:	4b13      	ldr	r3, [pc, #76]	@ (80107b4 <SetAllREDLED+0x74>)
 8010768:	22fa      	movs	r2, #250	@ 0xfa
 801076a:	0112      	lsls	r2, r2, #4
 801076c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 801076e:	4b11      	ldr	r3, [pc, #68]	@ (80107b4 <SetAllREDLED+0x74>)
 8010770:	22fa      	movs	r2, #250	@ 0xfa
 8010772:	0112      	lsls	r2, r2, #4
 8010774:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8010776:	4b10      	ldr	r3, [pc, #64]	@ (80107b8 <SetAllREDLED+0x78>)
 8010778:	2200      	movs	r2, #0
 801077a:	2101      	movs	r1, #1
 801077c:	0018      	movs	r0, r3
 801077e:	f002 ff4a 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8010782:	2380      	movs	r3, #128	@ 0x80
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	480c      	ldr	r0, [pc, #48]	@ (80107b8 <SetAllREDLED+0x78>)
 8010788:	2201      	movs	r2, #1
 801078a:	0019      	movs	r1, r3
 801078c:	f002 ff43 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8010790:	2380      	movs	r3, #128	@ 0x80
 8010792:	009b      	lsls	r3, r3, #2
 8010794:	4808      	ldr	r0, [pc, #32]	@ (80107b8 <SetAllREDLED+0x78>)
 8010796:	2201      	movs	r2, #1
 8010798:	0019      	movs	r1, r3
 801079a:	f002 ff3c 	bl	8013616 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 801079e:	23fa      	movs	r3, #250	@ 0xfa
 80107a0:	009b      	lsls	r3, r3, #2
 80107a2:	0018      	movs	r0, r3
 80107a4:	f001 fcb0 	bl	8012108 <HAL_Delay>
}
 80107a8:	46c0      	nop			@ (mov r8, r8)
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	46c0      	nop			@ (mov r8, r8)
 80107b0:	00000bb8 	.word	0x00000bb8
 80107b4:	40000400 	.word	0x40000400
 80107b8:	50000400 	.word	0x50000400

080107bc <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 80107bc:	b5b0      	push	{r4, r5, r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	0002      	movs	r2, r0
 80107c4:	1dbb      	adds	r3, r7, #6
 80107c6:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 80107c8:	1dbb      	adds	r3, r7, #6
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d05a      	beq.n	8010886 <SetVOCindicator+0xca>
 80107d0:	1dbb      	adds	r3, r7, #6
 80107d2:	881b      	ldrh	r3, [r3, #0]
 80107d4:	2b64      	cmp	r3, #100	@ 0x64
 80107d6:	d856      	bhi.n	8010886 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 80107d8:	1dbb      	adds	r3, r7, #6
 80107da:	881b      	ldrh	r3, [r3, #0]
 80107dc:	0018      	movs	r0, r3
 80107de:	f7f2 fdef 	bl	80033c0 <__aeabi_i2d>
 80107e2:	2200      	movs	r2, #0
 80107e4:	4b5f      	ldr	r3, [pc, #380]	@ (8010964 <SetVOCindicator+0x1a8>)
 80107e6:	f7f1 fae5 	bl	8001db4 <__aeabi_ddiv>
 80107ea:	0002      	movs	r2, r0
 80107ec:	000b      	movs	r3, r1
 80107ee:	2000      	movs	r0, #0
 80107f0:	495d      	ldr	r1, [pc, #372]	@ (8010968 <SetVOCindicator+0x1ac>)
 80107f2:	f7f2 f9eb 	bl	8002bcc <__aeabi_dsub>
 80107f6:	0002      	movs	r2, r0
 80107f8:	000b      	movs	r3, r1
 80107fa:	0014      	movs	r4, r2
 80107fc:	001d      	movs	r5, r3
 80107fe:	4b5b      	ldr	r3, [pc, #364]	@ (801096c <SetVOCindicator+0x1b0>)
 8010800:	881b      	ldrh	r3, [r3, #0]
 8010802:	0018      	movs	r0, r3
 8010804:	f7f2 fddc 	bl	80033c0 <__aeabi_i2d>
 8010808:	0002      	movs	r2, r0
 801080a:	000b      	movs	r3, r1
 801080c:	0020      	movs	r0, r4
 801080e:	0029      	movs	r1, r5
 8010810:	f7f1 ff14 	bl	800263c <__aeabi_dmul>
 8010814:	0002      	movs	r2, r0
 8010816:	000b      	movs	r3, r1
 8010818:	0010      	movs	r0, r2
 801081a:	0019      	movs	r1, r3
 801081c:	f7ef ff16 	bl	800064c <__aeabi_d2uiz>
 8010820:	0003      	movs	r3, r0
 8010822:	b29a      	uxth	r2, r3
 8010824:	4b52      	ldr	r3, [pc, #328]	@ (8010970 <SetVOCindicator+0x1b4>)
 8010826:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8010828:	1dbb      	adds	r3, r7, #6
 801082a:	881b      	ldrh	r3, [r3, #0]
 801082c:	0018      	movs	r0, r3
 801082e:	f7f2 fdc7 	bl	80033c0 <__aeabi_i2d>
 8010832:	2200      	movs	r2, #0
 8010834:	4b4b      	ldr	r3, [pc, #300]	@ (8010964 <SetVOCindicator+0x1a8>)
 8010836:	f7f1 fabd 	bl	8001db4 <__aeabi_ddiv>
 801083a:	0002      	movs	r2, r0
 801083c:	000b      	movs	r3, r1
 801083e:	0014      	movs	r4, r2
 8010840:	001d      	movs	r5, r3
 8010842:	4b4a      	ldr	r3, [pc, #296]	@ (801096c <SetVOCindicator+0x1b0>)
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	0018      	movs	r0, r3
 8010848:	f7f2 fdba 	bl	80033c0 <__aeabi_i2d>
 801084c:	0002      	movs	r2, r0
 801084e:	000b      	movs	r3, r1
 8010850:	0020      	movs	r0, r4
 8010852:	0029      	movs	r1, r5
 8010854:	f7f1 fef2 	bl	800263c <__aeabi_dmul>
 8010858:	0002      	movs	r2, r0
 801085a:	000b      	movs	r3, r1
 801085c:	0010      	movs	r0, r2
 801085e:	0019      	movs	r1, r3
 8010860:	f7ef fef4 	bl	800064c <__aeabi_d2uiz>
 8010864:	0003      	movs	r3, r0
 8010866:	b29a      	uxth	r2, r3
 8010868:	4b42      	ldr	r3, [pc, #264]	@ (8010974 <SetVOCindicator+0x1b8>)
 801086a:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 801086c:	4b3f      	ldr	r3, [pc, #252]	@ (801096c <SetVOCindicator+0x1b0>)
 801086e:	881a      	ldrh	r2, [r3, #0]
 8010870:	4b41      	ldr	r3, [pc, #260]	@ (8010978 <SetVOCindicator+0x1bc>)
 8010872:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8010874:	4b40      	ldr	r3, [pc, #256]	@ (8010978 <SetVOCindicator+0x1bc>)
 8010876:	8818      	ldrh	r0, [r3, #0]
 8010878:	4b3d      	ldr	r3, [pc, #244]	@ (8010970 <SetVOCindicator+0x1b4>)
 801087a:	8819      	ldrh	r1, [r3, #0]
 801087c:	4b3d      	ldr	r3, [pc, #244]	@ (8010974 <SetVOCindicator+0x1b8>)
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	001a      	movs	r2, r3
 8010882:	f7ff fe01 	bl	8010488 <SetVocLED>
  }
  if(VOCi > 100){
 8010886:	1dbb      	adds	r3, r7, #6
 8010888:	881b      	ldrh	r3, [r3, #0]
 801088a:	2b64      	cmp	r3, #100	@ 0x64
 801088c:	d966      	bls.n	801095c <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 801088e:	1dbb      	adds	r3, r7, #6
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	0018      	movs	r0, r3
 8010894:	f7f2 fd94 	bl	80033c0 <__aeabi_i2d>
 8010898:	2200      	movs	r2, #0
 801089a:	4b32      	ldr	r3, [pc, #200]	@ (8010964 <SetVOCindicator+0x1a8>)
 801089c:	f7f2 f996 	bl	8002bcc <__aeabi_dsub>
 80108a0:	0002      	movs	r2, r0
 80108a2:	000b      	movs	r3, r1
 80108a4:	0010      	movs	r0, r2
 80108a6:	0019      	movs	r1, r3
 80108a8:	2200      	movs	r2, #0
 80108aa:	4b34      	ldr	r3, [pc, #208]	@ (801097c <SetVOCindicator+0x1c0>)
 80108ac:	f7f1 fa82 	bl	8001db4 <__aeabi_ddiv>
 80108b0:	0002      	movs	r2, r0
 80108b2:	000b      	movs	r3, r1
 80108b4:	0014      	movs	r4, r2
 80108b6:	001d      	movs	r5, r3
 80108b8:	4b2c      	ldr	r3, [pc, #176]	@ (801096c <SetVOCindicator+0x1b0>)
 80108ba:	881b      	ldrh	r3, [r3, #0]
 80108bc:	0018      	movs	r0, r3
 80108be:	f7f2 fd7f 	bl	80033c0 <__aeabi_i2d>
 80108c2:	0002      	movs	r2, r0
 80108c4:	000b      	movs	r3, r1
 80108c6:	0020      	movs	r0, r4
 80108c8:	0029      	movs	r1, r5
 80108ca:	f7f1 feb7 	bl	800263c <__aeabi_dmul>
 80108ce:	0002      	movs	r2, r0
 80108d0:	000b      	movs	r3, r1
 80108d2:	0010      	movs	r0, r2
 80108d4:	0019      	movs	r1, r3
 80108d6:	f7ef feb9 	bl	800064c <__aeabi_d2uiz>
 80108da:	0003      	movs	r3, r0
 80108dc:	b29a      	uxth	r2, r3
 80108de:	4b24      	ldr	r3, [pc, #144]	@ (8010970 <SetVOCindicator+0x1b4>)
 80108e0:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 80108e2:	1dbb      	adds	r3, r7, #6
 80108e4:	881b      	ldrh	r3, [r3, #0]
 80108e6:	0018      	movs	r0, r3
 80108e8:	f7f2 fd6a 	bl	80033c0 <__aeabi_i2d>
 80108ec:	2200      	movs	r2, #0
 80108ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010964 <SetVOCindicator+0x1a8>)
 80108f0:	f7f2 f96c 	bl	8002bcc <__aeabi_dsub>
 80108f4:	0002      	movs	r2, r0
 80108f6:	000b      	movs	r3, r1
 80108f8:	0010      	movs	r0, r2
 80108fa:	0019      	movs	r1, r3
 80108fc:	2200      	movs	r2, #0
 80108fe:	4b1f      	ldr	r3, [pc, #124]	@ (801097c <SetVOCindicator+0x1c0>)
 8010900:	f7f1 fa58 	bl	8001db4 <__aeabi_ddiv>
 8010904:	0002      	movs	r2, r0
 8010906:	000b      	movs	r3, r1
 8010908:	2000      	movs	r0, #0
 801090a:	4917      	ldr	r1, [pc, #92]	@ (8010968 <SetVOCindicator+0x1ac>)
 801090c:	f7f2 f95e 	bl	8002bcc <__aeabi_dsub>
 8010910:	0002      	movs	r2, r0
 8010912:	000b      	movs	r3, r1
 8010914:	0014      	movs	r4, r2
 8010916:	001d      	movs	r5, r3
 8010918:	4b14      	ldr	r3, [pc, #80]	@ (801096c <SetVOCindicator+0x1b0>)
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	0018      	movs	r0, r3
 801091e:	f7f2 fd4f 	bl	80033c0 <__aeabi_i2d>
 8010922:	0002      	movs	r2, r0
 8010924:	000b      	movs	r3, r1
 8010926:	0020      	movs	r0, r4
 8010928:	0029      	movs	r1, r5
 801092a:	f7f1 fe87 	bl	800263c <__aeabi_dmul>
 801092e:	0002      	movs	r2, r0
 8010930:	000b      	movs	r3, r1
 8010932:	0010      	movs	r0, r2
 8010934:	0019      	movs	r1, r3
 8010936:	f7ef fe89 	bl	800064c <__aeabi_d2uiz>
 801093a:	0003      	movs	r3, r0
 801093c:	b29a      	uxth	r2, r3
 801093e:	4b0e      	ldr	r3, [pc, #56]	@ (8010978 <SetVOCindicator+0x1bc>)
 8010940:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 8010942:	4b0a      	ldr	r3, [pc, #40]	@ (801096c <SetVOCindicator+0x1b0>)
 8010944:	881a      	ldrh	r2, [r3, #0]
 8010946:	4b0b      	ldr	r3, [pc, #44]	@ (8010974 <SetVOCindicator+0x1b8>)
 8010948:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 801094a:	4b0b      	ldr	r3, [pc, #44]	@ (8010978 <SetVOCindicator+0x1bc>)
 801094c:	8818      	ldrh	r0, [r3, #0]
 801094e:	4b08      	ldr	r3, [pc, #32]	@ (8010970 <SetVOCindicator+0x1b4>)
 8010950:	8819      	ldrh	r1, [r3, #0]
 8010952:	4b08      	ldr	r3, [pc, #32]	@ (8010974 <SetVOCindicator+0x1b8>)
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	001a      	movs	r2, r3
 8010958:	f7ff fd96 	bl	8010488 <SetVocLED>
  }

}
 801095c:	46c0      	nop			@ (mov r8, r8)
 801095e:	46bd      	mov	sp, r7
 8010960:	b002      	add	sp, #8
 8010962:	bdb0      	pop	{r4, r5, r7, pc}
 8010964:	40590000 	.word	0x40590000
 8010968:	3ff00000 	.word	0x3ff00000
 801096c:	200000de 	.word	0x200000de
 8010970:	20001e42 	.word	0x20001e42
 8010974:	20001e44 	.word	0x20001e44
 8010978:	20001e46 	.word	0x20001e46
 801097c:	40790000 	.word	0x40790000

08010980 <powerCheck>:

Battery_Status powerCheck(){
 8010980:	b590      	push	{r4, r7, lr}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8010986:	f7f7 fa6b 	bl	8007e60 <Check_USB_PowerOn>
 801098a:	0003      	movs	r3, r0
 801098c:	001a      	movs	r2, r3
 801098e:	2301      	movs	r3, #1
 8010990:	4053      	eors	r3, r2
 8010992:	b2db      	uxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	d005      	beq.n	80109a4 <powerCheck+0x24>
    status = batteryChargeCheck();
 8010998:	1dfc      	adds	r4, r7, #7
 801099a:	f7ff fc55 	bl	8010248 <batteryChargeCheck>
 801099e:	0003      	movs	r3, r0
 80109a0:	7023      	strb	r3, [r4, #0]
 80109a2:	e002      	b.n	80109aa <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80109a4:	1dfb      	adds	r3, r7, #7
 80109a6:	2204      	movs	r2, #4
 80109a8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80109aa:	1dfb      	adds	r3, r7, #7
 80109ac:	781b      	ldrb	r3, [r3, #0]
}
 80109ae:	0018      	movs	r0, r3
 80109b0:	46bd      	mov	sp, r7
 80109b2:	b003      	add	sp, #12
 80109b4:	bd90      	pop	{r4, r7, pc}
	...

080109b8 <powerDisplay>:

void powerDisplay(Battery_Status status){
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	0002      	movs	r2, r0
 80109c0:	1dfb      	adds	r3, r7, #7
 80109c2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 80109c4:	1dfb      	adds	r3, r7, #7
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	d105      	bne.n	80109d8 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 80109cc:	4a18      	ldr	r2, [pc, #96]	@ (8010a30 <powerDisplay+0x78>)
 80109ce:	4b19      	ldr	r3, [pc, #100]	@ (8010a34 <powerDisplay+0x7c>)
 80109d0:	0019      	movs	r1, r3
 80109d2:	2003      	movs	r0, #3
 80109d4:	f000 ff42 	bl	801185c <CreateLine>

  }
  if(status == BATTERY_FULL){
 80109d8:	1dfb      	adds	r3, r7, #7
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	2b03      	cmp	r3, #3
 80109de:	d105      	bne.n	80109ec <powerDisplay+0x34>
    Debug("Battery fully charged");
 80109e0:	4a15      	ldr	r2, [pc, #84]	@ (8010a38 <powerDisplay+0x80>)
 80109e2:	4b14      	ldr	r3, [pc, #80]	@ (8010a34 <powerDisplay+0x7c>)
 80109e4:	0019      	movs	r1, r3
 80109e6:	2003      	movs	r0, #3
 80109e8:	f000 ff38 	bl	801185c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 80109ec:	1dfb      	adds	r3, r7, #7
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b02      	cmp	r3, #2
 80109f2:	d105      	bne.n	8010a00 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 80109f4:	4a11      	ldr	r2, [pc, #68]	@ (8010a3c <powerDisplay+0x84>)
 80109f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010a34 <powerDisplay+0x7c>)
 80109f8:	0019      	movs	r1, r3
 80109fa:	2003      	movs	r0, #3
 80109fc:	f000 ff2e 	bl	801185c <CreateLine>
  }
  if(status == BATTERY_LOW){
 8010a00:	1dfb      	adds	r3, r7, #7
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d105      	bne.n	8010a14 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8010a08:	4a0d      	ldr	r2, [pc, #52]	@ (8010a40 <powerDisplay+0x88>)
 8010a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a34 <powerDisplay+0x7c>)
 8010a0c:	0019      	movs	r1, r3
 8010a0e:	2003      	movs	r0, #3
 8010a10:	f000 ff24 	bl	801185c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8010a14:	1dfb      	adds	r3, r7, #7
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d105      	bne.n	8010a28 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8010a1c:	4a09      	ldr	r2, [pc, #36]	@ (8010a44 <powerDisplay+0x8c>)
 8010a1e:	4b05      	ldr	r3, [pc, #20]	@ (8010a34 <powerDisplay+0x7c>)
 8010a20:	0019      	movs	r1, r3
 8010a22:	2003      	movs	r0, #3
 8010a24:	f000 ff1a 	bl	801185c <CreateLine>
  }
}
 8010a28:	46c0      	nop			@ (mov r8, r8)
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	b002      	add	sp, #8
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	0802a9bc 	.word	0x0802a9bc
 8010a34:	0802a9e0 	.word	0x0802a9e0
 8010a38:	0802a9e4 	.word	0x0802a9e4
 8010a3c:	0802a9fc 	.word	0x0802a9fc
 8010a40:	0802aa1c 	.word	0x0802aa1c
 8010a44:	0802aa34 	.word	0x0802aa34

08010a48 <configCheck>:

void configCheck(){
 8010a48:	b590      	push	{r4, r7, lr}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8010a4e:	f7f7 fa16 	bl	8007e7e <BootButton_Pressed>
 8010a52:	1e03      	subs	r3, r0, #0
 8010a54:	d007      	beq.n	8010a66 <configCheck+0x1e>
 8010a56:	f7f7 fa23 	bl	8007ea0 <UserButton_Pressed>
 8010a5a:	1e03      	subs	r3, r0, #0
 8010a5c:	d003      	beq.n	8010a66 <configCheck+0x1e>
    configSet = true;
 8010a5e:	4bb2      	ldr	r3, [pc, #712]	@ (8010d28 <configCheck+0x2e0>)
 8010a60:	2201      	movs	r2, #1
 8010a62:	701a      	strb	r2, [r3, #0]
 8010a64:	e00a      	b.n	8010a7c <configCheck+0x34>
  }
  else{
    configSet = false;
 8010a66:	4bb0      	ldr	r3, [pc, #704]	@ (8010d28 <configCheck+0x2e0>)
 8010a68:	2200      	movs	r2, #0
 8010a6a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8010a6c:	f001 fb42 	bl	80120f4 <HAL_GetTick>
 8010a70:	0003      	movs	r3, r0
 8010a72:	22fa      	movs	r2, #250	@ 0xfa
 8010a74:	00d2      	lsls	r2, r2, #3
 8010a76:	189a      	adds	r2, r3, r2
 8010a78:	4bac      	ldr	r3, [pc, #688]	@ (8010d2c <configCheck+0x2e4>)
 8010a7a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8010a7c:	4baa      	ldr	r3, [pc, #680]	@ (8010d28 <configCheck+0x2e0>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00d      	beq.n	8010aa0 <configCheck+0x58>
 8010a84:	4ba9      	ldr	r3, [pc, #676]	@ (8010d2c <configCheck+0x2e4>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	0018      	movs	r0, r3
 8010a8a:	f000 fe91 	bl	80117b0 <TimestampIsReached>
 8010a8e:	1e03      	subs	r3, r0, #0
 8010a90:	d006      	beq.n	8010aa0 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8010a92:	f7f3 fe5d 	bl	8004750 <SetConfigMode>
    SetDBLED(true, true, true);
 8010a96:	2201      	movs	r2, #1
 8010a98:	2101      	movs	r1, #1
 8010a9a:	2001      	movs	r0, #1
 8010a9c:	f7ff fcaa 	bl	80103f4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8010aa0:	f7f7 f9ed 	bl	8007e7e <BootButton_Pressed>
 8010aa4:	0003      	movs	r3, r0
 8010aa6:	001a      	movs	r2, r3
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	4053      	eors	r3, r2
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d054      	beq.n	8010b5c <configCheck+0x114>
 8010ab2:	f7f7 f9f5 	bl	8007ea0 <UserButton_Pressed>
 8010ab6:	1e03      	subs	r3, r0, #0
 8010ab8:	d050      	beq.n	8010b5c <configCheck+0x114>
 8010aba:	4b9d      	ldr	r3, [pc, #628]	@ (8010d30 <configCheck+0x2e8>)
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	4053      	eors	r3, r2
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d049      	beq.n	8010b5c <configCheck+0x114>
 8010ac8:	f7f3 fe62 	bl	8004790 <GetReconfigMode>
 8010acc:	0003      	movs	r3, r0
 8010ace:	001a      	movs	r2, r3
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	4053      	eors	r3, r2
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d040      	beq.n	8010b5c <configCheck+0x114>
    SetLEDsOff();
 8010ada:	f7ff fe15 	bl	8010708 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8010ade:	4a95      	ldr	r2, [pc, #596]	@ (8010d34 <configCheck+0x2ec>)
 8010ae0:	4994      	ldr	r1, [pc, #592]	@ (8010d34 <configCheck+0x2ec>)
 8010ae2:	4b94      	ldr	r3, [pc, #592]	@ (8010d34 <configCheck+0x2ec>)
 8010ae4:	0018      	movs	r0, r3
 8010ae6:	f7ff fccf 	bl	8010488 <SetVocLED>
    HAL_Delay(1500);
 8010aea:	4b93      	ldr	r3, [pc, #588]	@ (8010d38 <configCheck+0x2f0>)
 8010aec:	0018      	movs	r0, r3
 8010aee:	f001 fb0b 	bl	8012108 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8010af2:	23fa      	movs	r3, #250	@ 0xfa
 8010af4:	011a      	lsls	r2, r3, #4
 8010af6:	23fa      	movs	r3, #250	@ 0xfa
 8010af8:	0119      	lsls	r1, r3, #4
 8010afa:	23fa      	movs	r3, #250	@ 0xfa
 8010afc:	011b      	lsls	r3, r3, #4
 8010afe:	0018      	movs	r0, r3
 8010b00:	f7ff fcc2 	bl	8010488 <SetVocLED>
    userToggle = !userToggle;
 8010b04:	4b8d      	ldr	r3, [pc, #564]	@ (8010d3c <configCheck+0x2f4>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	1e5a      	subs	r2, r3, #1
 8010b0a:	4193      	sbcs	r3, r2
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2201      	movs	r2, #1
 8010b10:	4053      	eors	r3, r2
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	1c1a      	adds	r2, r3, #0
 8010b16:	2301      	movs	r3, #1
 8010b18:	4013      	ands	r3, r2
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	4b87      	ldr	r3, [pc, #540]	@ (8010d3c <configCheck+0x2f4>)
 8010b1e:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8010b20:	4b86      	ldr	r3, [pc, #536]	@ (8010d3c <configCheck+0x2f4>)
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <configCheck+0xe4>
      EnabledConnectedDevices();
 8010b28:	f7fa ff90 	bl	800ba4c <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8010b2c:	4b83      	ldr	r3, [pc, #524]	@ (8010d3c <configCheck+0x2f4>)
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d001      	beq.n	8010b38 <configCheck+0xf0>
 8010b34:	4b82      	ldr	r3, [pc, #520]	@ (8010d40 <configCheck+0x2f8>)
 8010b36:	e000      	b.n	8010b3a <configCheck+0xf2>
 8010b38:	4b82      	ldr	r3, [pc, #520]	@ (8010d44 <configCheck+0x2fc>)
 8010b3a:	4a83      	ldr	r2, [pc, #524]	@ (8010d48 <configCheck+0x300>)
 8010b3c:	4983      	ldr	r1, [pc, #524]	@ (8010d4c <configCheck+0x304>)
 8010b3e:	2003      	movs	r0, #3
 8010b40:	f000 fe8c 	bl	801185c <CreateLine>
    userbuttonHeld = true;
 8010b44:	4b7a      	ldr	r3, [pc, #488]	@ (8010d30 <configCheck+0x2e8>)
 8010b46:	2201      	movs	r2, #1
 8010b48:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8010b4a:	f001 fad3 	bl	80120f4 <HAL_GetTick>
 8010b4e:	0003      	movs	r3, r0
 8010b50:	22fa      	movs	r2, #250	@ 0xfa
 8010b52:	00d2      	lsls	r2, r2, #3
 8010b54:	189a      	adds	r2, r3, r2
 8010b56:	4b7e      	ldr	r3, [pc, #504]	@ (8010d50 <configCheck+0x308>)
 8010b58:	601a      	str	r2, [r3, #0]
 8010b5a:	e002      	b.n	8010b62 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 8010b5c:	4b74      	ldr	r3, [pc, #464]	@ (8010d30 <configCheck+0x2e8>)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8010b62:	f7f7 f98c 	bl	8007e7e <BootButton_Pressed>
 8010b66:	0003      	movs	r3, r0
 8010b68:	001a      	movs	r2, r3
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	4053      	eors	r3, r2
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d100      	bne.n	8010b76 <configCheck+0x12e>
 8010b74:	e0a4      	b.n	8010cc0 <configCheck+0x278>
 8010b76:	4b6e      	ldr	r3, [pc, #440]	@ (8010d30 <configCheck+0x2e8>)
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d100      	bne.n	8010b80 <configCheck+0x138>
 8010b7e:	e09f      	b.n	8010cc0 <configCheck+0x278>
 8010b80:	4b73      	ldr	r3, [pc, #460]	@ (8010d50 <configCheck+0x308>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	0018      	movs	r0, r3
 8010b86:	f000 fe13 	bl	80117b0 <TimestampIsReached>
 8010b8a:	1e03      	subs	r3, r0, #0
 8010b8c:	d100      	bne.n	8010b90 <configCheck+0x148>
 8010b8e:	e097      	b.n	8010cc0 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010b90:	f7fa fbe0 	bl	800b354 <GetPMSensorPresence>
 8010b94:	1e03      	subs	r3, r0, #0
 8010b96:	d100      	bne.n	8010b9a <configCheck+0x152>
 8010b98:	e082      	b.n	8010ca0 <configCheck+0x258>
 8010b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8010d54 <configCheck+0x30c>)
 8010b9c:	791b      	ldrb	r3, [r3, #4]
 8010b9e:	2b34      	cmp	r3, #52	@ 0x34
 8010ba0:	d004      	beq.n	8010bac <configCheck+0x164>
 8010ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8010d54 <configCheck+0x30c>)
 8010ba4:	791b      	ldrb	r3, [r3, #4]
 8010ba6:	2b35      	cmp	r3, #53	@ 0x35
 8010ba8:	d000      	beq.n	8010bac <configCheck+0x164>
 8010baa:	e079      	b.n	8010ca0 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8010bac:	4b6a      	ldr	r3, [pc, #424]	@ (8010d58 <configCheck+0x310>)
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	1e5a      	subs	r2, r3, #1
 8010bb2:	4193      	sbcs	r3, r2
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	2201      	movs	r2, #1
 8010bb8:	4053      	eors	r3, r2
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	1c1a      	adds	r2, r3, #0
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	4013      	ands	r3, r2
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	4b64      	ldr	r3, [pc, #400]	@ (8010d58 <configCheck+0x310>)
 8010bc6:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8010bc8:	4b63      	ldr	r3, [pc, #396]	@ (8010d58 <configCheck+0x310>)
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d005      	beq.n	8010bdc <configCheck+0x194>
 8010bd0:	1dbc      	adds	r4, r7, #6
 8010bd2:	f7ff fb93 	bl	80102fc <Calculate_LED_ON>
 8010bd6:	0003      	movs	r3, r0
 8010bd8:	8023      	strh	r3, [r4, #0]
 8010bda:	e003      	b.n	8010be4 <configCheck+0x19c>
        else color = 4000;
 8010bdc:	1dbb      	adds	r3, r7, #6
 8010bde:	22fa      	movs	r2, #250	@ 0xfa
 8010be0:	0112      	lsls	r2, r2, #4
 8010be2:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8010be4:	4b5c      	ldr	r3, [pc, #368]	@ (8010d58 <configCheck+0x310>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d001      	beq.n	8010bf0 <configCheck+0x1a8>
 8010bec:	4b5b      	ldr	r3, [pc, #364]	@ (8010d5c <configCheck+0x314>)
 8010bee:	e000      	b.n	8010bf2 <configCheck+0x1aa>
 8010bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8010d60 <configCheck+0x318>)
 8010bf2:	4a5c      	ldr	r2, [pc, #368]	@ (8010d64 <configCheck+0x31c>)
 8010bf4:	495c      	ldr	r1, [pc, #368]	@ (8010d68 <configCheck+0x320>)
 8010bf6:	2002      	movs	r0, #2
 8010bf8:	f000 fe30 	bl	801185c <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8010bfc:	1d7b      	adds	r3, r7, #5
 8010bfe:	2200      	movs	r2, #0
 8010c00:	701a      	strb	r2, [r3, #0]
 8010c02:	e028      	b.n	8010c56 <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8010c04:	f7ff fb7a 	bl	80102fc <Calculate_LED_ON>
 8010c08:	0003      	movs	r3, r0
 8010c0a:	001a      	movs	r2, r3
 8010c0c:	4b57      	ldr	r3, [pc, #348]	@ (8010d6c <configCheck+0x324>)
 8010c0e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8010c10:	4b56      	ldr	r3, [pc, #344]	@ (8010d6c <configCheck+0x324>)
 8010c12:	1dba      	adds	r2, r7, #6
 8010c14:	8812      	ldrh	r2, [r2, #0]
 8010c16:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8010c18:	4b54      	ldr	r3, [pc, #336]	@ (8010d6c <configCheck+0x324>)
 8010c1a:	1dba      	adds	r2, r7, #6
 8010c1c:	8812      	ldrh	r2, [r2, #0]
 8010c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8010c20:	23c8      	movs	r3, #200	@ 0xc8
 8010c22:	005b      	lsls	r3, r3, #1
 8010c24:	0018      	movs	r0, r3
 8010c26:	f001 fa6f 	bl	8012108 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8010c2a:	4b50      	ldr	r3, [pc, #320]	@ (8010d6c <configCheck+0x324>)
 8010c2c:	22fa      	movs	r2, #250	@ 0xfa
 8010c2e:	0112      	lsls	r2, r2, #4
 8010c30:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8010c32:	4b4e      	ldr	r3, [pc, #312]	@ (8010d6c <configCheck+0x324>)
 8010c34:	22fa      	movs	r2, #250	@ 0xfa
 8010c36:	0112      	lsls	r2, r2, #4
 8010c38:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8010c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8010d6c <configCheck+0x324>)
 8010c3c:	22fa      	movs	r2, #250	@ 0xfa
 8010c3e:	0112      	lsls	r2, r2, #4
 8010c40:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8010c42:	23c8      	movs	r3, #200	@ 0xc8
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	0018      	movs	r0, r3
 8010c48:	f001 fa5e 	bl	8012108 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8010c4c:	1d7b      	adds	r3, r7, #5
 8010c4e:	781a      	ldrb	r2, [r3, #0]
 8010c50:	1d7b      	adds	r3, r7, #5
 8010c52:	3201      	adds	r2, #1
 8010c54:	701a      	strb	r2, [r3, #0]
 8010c56:	1d7b      	adds	r3, r7, #5
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d9d2      	bls.n	8010c04 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8010c5e:	4b37      	ldr	r3, [pc, #220]	@ (8010d3c <configCheck+0x2f4>)
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	1e5a      	subs	r2, r3, #1
 8010c64:	4193      	sbcs	r3, r2
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	2201      	movs	r2, #1
 8010c6a:	4053      	eors	r3, r2
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	1c1a      	adds	r2, r3, #0
 8010c70:	2301      	movs	r3, #1
 8010c72:	4013      	ands	r3, r2
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	4b31      	ldr	r3, [pc, #196]	@ (8010d3c <configCheck+0x2f4>)
 8010c78:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8010c7a:	4b30      	ldr	r3, [pc, #192]	@ (8010d3c <configCheck+0x2f4>)
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d001      	beq.n	8010c86 <configCheck+0x23e>
 8010c82:	4b36      	ldr	r3, [pc, #216]	@ (8010d5c <configCheck+0x314>)
 8010c84:	e000      	b.n	8010c88 <configCheck+0x240>
 8010c86:	4b36      	ldr	r3, [pc, #216]	@ (8010d60 <configCheck+0x318>)
 8010c88:	4a39      	ldr	r2, [pc, #228]	@ (8010d70 <configCheck+0x328>)
 8010c8a:	4937      	ldr	r1, [pc, #220]	@ (8010d68 <configCheck+0x320>)
 8010c8c:	2002      	movs	r0, #2
 8010c8e:	f000 fde5 	bl	801185c <CreateLine>
      if (usbPluggedIn) {
 8010c92:	4b38      	ldr	r3, [pc, #224]	@ (8010d74 <configCheck+0x32c>)
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d009      	beq.n	8010cae <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8010c9a:	f7fc f84b 	bl	800cd34 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010c9e:	e006      	b.n	8010cae <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8010ca0:	4a35      	ldr	r2, [pc, #212]	@ (8010d78 <configCheck+0x330>)
 8010ca2:	4b31      	ldr	r3, [pc, #196]	@ (8010d68 <configCheck+0x320>)
 8010ca4:	0019      	movs	r1, r3
 8010ca6:	2002      	movs	r0, #2
 8010ca8:	f000 fdd8 	bl	801185c <CreateLine>
 8010cac:	e000      	b.n	8010cb0 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010cae:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8010cb0:	46c0      	nop			@ (mov r8, r8)
 8010cb2:	f7f7 f8f5 	bl	8007ea0 <UserButton_Pressed>
 8010cb6:	1e03      	subs	r3, r0, #0
 8010cb8:	d1fb      	bne.n	8010cb2 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 8010cba:	4b1d      	ldr	r3, [pc, #116]	@ (8010d30 <configCheck+0x2e8>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8010cc0:	f7f7 f8dd 	bl	8007e7e <BootButton_Pressed>
 8010cc4:	0003      	movs	r3, r0
 8010cc6:	001a      	movs	r2, r3
 8010cc8:	2301      	movs	r3, #1
 8010cca:	4053      	eors	r3, r2
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d00b      	beq.n	8010cea <configCheck+0x2a2>
 8010cd2:	f7f7 f8e5 	bl	8007ea0 <UserButton_Pressed>
 8010cd6:	0003      	movs	r3, r0
 8010cd8:	001a      	movs	r2, r3
 8010cda:	2301      	movs	r3, #1
 8010cdc:	4053      	eors	r3, r2
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d002      	beq.n	8010cea <configCheck+0x2a2>
    userbuttonHeld = false;
 8010ce4:	4b12      	ldr	r3, [pc, #72]	@ (8010d30 <configCheck+0x2e8>)
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8010cea:	f7f7 f8b9 	bl	8007e60 <Check_USB_PowerOn>
 8010cee:	1e03      	subs	r3, r0, #0
 8010cf0:	d003      	beq.n	8010cfa <configCheck+0x2b2>
    usbPluggedIn = true;
 8010cf2:	4b20      	ldr	r3, [pc, #128]	@ (8010d74 <configCheck+0x32c>)
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8010cf8:	e012      	b.n	8010d20 <configCheck+0x2d8>
    if(!userToggle && !init){
 8010cfa:	4b10      	ldr	r3, [pc, #64]	@ (8010d3c <configCheck+0x2f4>)
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2201      	movs	r2, #1
 8010d00:	4053      	eors	r3, r2
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d008      	beq.n	8010d1a <configCheck+0x2d2>
 8010d08:	4b1c      	ldr	r3, [pc, #112]	@ (8010d7c <configCheck+0x334>)
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	4053      	eors	r3, r2
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d001      	beq.n	8010d1a <configCheck+0x2d2>
      SetLEDsOff();
 8010d16:	f7ff fcf7 	bl	8010708 <SetLEDsOff>
    usbPluggedIn = false;
 8010d1a:	4b16      	ldr	r3, [pc, #88]	@ (8010d74 <configCheck+0x32c>)
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	701a      	strb	r2, [r3, #0]
}
 8010d20:	46c0      	nop			@ (mov r8, r8)
 8010d22:	46bd      	mov	sp, r7
 8010d24:	b003      	add	sp, #12
 8010d26:	bd90      	pop	{r4, r7, pc}
 8010d28:	20001e2c 	.word	0x20001e2c
 8010d2c:	20001e34 	.word	0x20001e34
 8010d30:	20001e2f 	.word	0x20001e2f
 8010d34:	00000bb8 	.word	0x00000bb8
 8010d38:	000005dc 	.word	0x000005dc
 8010d3c:	20001e2e 	.word	0x20001e2e
 8010d40:	0802aa58 	.word	0x0802aa58
 8010d44:	0802aa5c 	.word	0x0802aa5c
 8010d48:	0802aa60 	.word	0x0802aa60
 8010d4c:	0802a9e0 	.word	0x0802a9e0
 8010d50:	20001e38 	.word	0x20001e38
 8010d54:	20000ea0 	.word	0x20000ea0
 8010d58:	20000e9e 	.word	0x20000e9e
 8010d5c:	0802aa80 	.word	0x0802aa80
 8010d60:	0802aa88 	.word	0x0802aa88
 8010d64:	0802aa94 	.word	0x0802aa94
 8010d68:	0802aab4 	.word	0x0802aab4
 8010d6c:	40000400 	.word	0x40000400
 8010d70:	0802aab8 	.word	0x0802aab8
 8010d74:	20001e2d 	.word	0x20001e2d
 8010d78:	0802aad0 	.word	0x0802aad0
 8010d7c:	200000dc 	.word	0x200000dc

08010d80 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8010d80:	b590      	push	{r4, r7, lr}
 8010d82:	b083      	sub	sp, #12
 8010d84:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8010d86:	1dfc      	adds	r4, r7, #7
 8010d88:	f7ff fdfa 	bl	8010980 <powerCheck>
 8010d8c:	0003      	movs	r3, r0
 8010d8e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8010d90:	1dfb      	adds	r3, r7, #7
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	0018      	movs	r0, r3
 8010d96:	f7ff fe0f 	bl	80109b8 <powerDisplay>
  return status;
 8010d9a:	1dfb      	adds	r3, r7, #7
 8010d9c:	781b      	ldrb	r3, [r3, #0]
}
 8010d9e:	0018      	movs	r0, r3
 8010da0:	46bd      	mov	sp, r7
 8010da2:	b003      	add	sp, #12
 8010da4:	bd90      	pop	{r4, r7, pc}
	...

08010da8 <setuserToggle>:

void setuserToggle(void) {
 8010da8:	b580      	push	{r7, lr}
 8010daa:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8010dac:	f7ff fde8 	bl	8010980 <powerCheck>
 8010db0:	0003      	movs	r3, r0
 8010db2:	2b04      	cmp	r3, #4
 8010db4:	d004      	beq.n	8010dc0 <setuserToggle+0x18>
    userToggle = true;
 8010db6:	4b04      	ldr	r3, [pc, #16]	@ (8010dc8 <setuserToggle+0x20>)
 8010db8:	2201      	movs	r2, #1
 8010dba:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8010dbc:	f7fa fe46 	bl	800ba4c <EnabledConnectedDevices>
  }
}
 8010dc0:	46c0      	nop			@ (mov r8, r8)
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	46c0      	nop			@ (mov r8, r8)
 8010dc8:	20001e2e 	.word	0x20001e2e

08010dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010dd0:	4b07      	ldr	r3, [pc, #28]	@ (8010df0 <HAL_MspInit+0x24>)
 8010dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010dd4:	4b06      	ldr	r3, [pc, #24]	@ (8010df0 <HAL_MspInit+0x24>)
 8010dd6:	2101      	movs	r1, #1
 8010dd8:	430a      	orrs	r2, r1
 8010dda:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8010ddc:	4b04      	ldr	r3, [pc, #16]	@ (8010df0 <HAL_MspInit+0x24>)
 8010dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010de0:	4b03      	ldr	r3, [pc, #12]	@ (8010df0 <HAL_MspInit+0x24>)
 8010de2:	2180      	movs	r1, #128	@ 0x80
 8010de4:	0549      	lsls	r1, r1, #21
 8010de6:	430a      	orrs	r2, r1
 8010de8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010dea:	46c0      	nop			@ (mov r8, r8)
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	40021000 	.word	0x40021000

08010df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010df8:	46c0      	nop			@ (mov r8, r8)
 8010dfa:	e7fd      	b.n	8010df8 <NMI_Handler+0x4>

08010dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010e00:	46c0      	nop			@ (mov r8, r8)
 8010e02:	e7fd      	b.n	8010e00 <HardFault_Handler+0x4>

08010e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8010e08:	46c0      	nop			@ (mov r8, r8)
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010e12:	46c0      	nop			@ (mov r8, r8)
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010e1c:	f001 f958 	bl	80120d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8010e20:	46c0      	nop			@ (mov r8, r8)
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}
	...

08010e28 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8010e2c:	4b03      	ldr	r3, [pc, #12]	@ (8010e3c <RTC_IRQHandler+0x14>)
 8010e2e:	0018      	movs	r0, r3
 8010e30:	f009 f916 	bl	801a060 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8010e34:	46c0      	nop			@ (mov r8, r8)
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	46c0      	nop			@ (mov r8, r8)
 8010e3c:	20000e78 	.word	0x20000e78

08010e40 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8010e44:	2380      	movs	r3, #128	@ 0x80
 8010e46:	021b      	lsls	r3, r3, #8
 8010e48:	0018      	movs	r0, r3
 8010e4a:	f002 fc01 	bl	8013650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8010e4e:	46c0      	nop			@ (mov r8, r8)
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8010e58:	4b05      	ldr	r3, [pc, #20]	@ (8010e70 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8010e5a:	0018      	movs	r0, r3
 8010e5c:	f001 ff89 	bl	8012d72 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8010e60:	4b04      	ldr	r3, [pc, #16]	@ (8010e74 <DMA1_Channel2_3_IRQHandler+0x20>)
 8010e62:	0018      	movs	r0, r3
 8010e64:	f001 ff85 	bl	8012d72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8010e68:	46c0      	nop			@ (mov r8, r8)
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	46c0      	nop			@ (mov r8, r8)
 8010e70:	20000d10 	.word	0x20000d10
 8010e74:	20000cc8 	.word	0x20000cc8

08010e78 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8010e7c:	4b07      	ldr	r3, [pc, #28]	@ (8010e9c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8010e7e:	0018      	movs	r0, r3
 8010e80:	f001 ff77 	bl	8012d72 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8010e84:	4b06      	ldr	r3, [pc, #24]	@ (8010ea0 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8010e86:	0018      	movs	r0, r3
 8010e88:	f001 ff73 	bl	8012d72 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8010e8c:	4b05      	ldr	r3, [pc, #20]	@ (8010ea4 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8010e8e:	0018      	movs	r0, r3
 8010e90:	f001 ff6f 	bl	8012d72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8010e94:	46c0      	nop			@ (mov r8, r8)
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	46c0      	nop			@ (mov r8, r8)
 8010e9c:	20000d94 	.word	0x20000d94
 8010ea0:	20002134 	.word	0x20002134
 8010ea4:	2000217c 	.word	0x2000217c

08010ea8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8010eac:	4b03      	ldr	r3, [pc, #12]	@ (8010ebc <USART4_5_IRQHandler+0x14>)
 8010eae:	0018      	movs	r0, r3
 8010eb0:	f009 ffd0 	bl	801ae54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8010eb4:	46c0      	nop			@ (mov r8, r8)
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	46c0      	nop			@ (mov r8, r8)
 8010ebc:	2000207c 	.word	0x2000207c

08010ec0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8010ec4:	4b09      	ldr	r3, [pc, #36]	@ (8010eec <I2C1_IRQHandler+0x2c>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	699a      	ldr	r2, [r3, #24]
 8010eca:	23e0      	movs	r3, #224	@ 0xe0
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	4013      	ands	r3, r2
 8010ed0:	d004      	beq.n	8010edc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8010ed2:	4b06      	ldr	r3, [pc, #24]	@ (8010eec <I2C1_IRQHandler+0x2c>)
 8010ed4:	0018      	movs	r0, r3
 8010ed6:	f003 fad9 	bl	801448c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8010eda:	e003      	b.n	8010ee4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8010edc:	4b03      	ldr	r3, [pc, #12]	@ (8010eec <I2C1_IRQHandler+0x2c>)
 8010ede:	0018      	movs	r0, r3
 8010ee0:	f003 faba 	bl	8014458 <HAL_I2C_EV_IRQHandler>
}
 8010ee4:	46c0      	nop			@ (mov r8, r8)
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	46c0      	nop			@ (mov r8, r8)
 8010eec:	20000c20 	.word	0x20000c20

08010ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010ef4:	4b03      	ldr	r3, [pc, #12]	@ (8010f04 <USART1_IRQHandler+0x14>)
 8010ef6:	0018      	movs	r0, r3
 8010ef8:	f009 ffac 	bl	801ae54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010efc:	46c0      	nop			@ (mov r8, r8)
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	46c0      	nop			@ (mov r8, r8)
 8010f04:	20001fc4 	.word	0x20001fc4

08010f08 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8010f0c:	4b03      	ldr	r3, [pc, #12]	@ (8010f1c <USB_IRQHandler+0x14>)
 8010f0e:	0018      	movs	r0, r3
 8010f10:	f005 fefc 	bl	8016d0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8010f14:	46c0      	nop			@ (mov r8, r8)
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	46c0      	nop			@ (mov r8, r8)
 8010f1c:	20002f90 	.word	0x20002f90

08010f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	af00      	add	r7, sp, #0
  return 1;
 8010f24:	2301      	movs	r3, #1
}
 8010f26:	0018      	movs	r0, r3
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <_kill>:

int _kill(int pid, int sig)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010f36:	f012 fe93 	bl	8023c60 <__errno>
 8010f3a:	0003      	movs	r3, r0
 8010f3c:	2216      	movs	r2, #22
 8010f3e:	601a      	str	r2, [r3, #0]
  return -1;
 8010f40:	2301      	movs	r3, #1
 8010f42:	425b      	negs	r3, r3
}
 8010f44:	0018      	movs	r0, r3
 8010f46:	46bd      	mov	sp, r7
 8010f48:	b002      	add	sp, #8
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <_exit>:

void _exit (int status)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010f54:	2301      	movs	r3, #1
 8010f56:	425a      	negs	r2, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	0011      	movs	r1, r2
 8010f5c:	0018      	movs	r0, r3
 8010f5e:	f7ff ffe5 	bl	8010f2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8010f62:	46c0      	nop			@ (mov r8, r8)
 8010f64:	e7fd      	b.n	8010f62 <_exit+0x16>

08010f66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b086      	sub	sp, #24
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	60f8      	str	r0, [r7, #12]
 8010f6e:	60b9      	str	r1, [r7, #8]
 8010f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f72:	2300      	movs	r3, #0
 8010f74:	617b      	str	r3, [r7, #20]
 8010f76:	e00a      	b.n	8010f8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010f78:	e000      	b.n	8010f7c <_read+0x16>
 8010f7a:	bf00      	nop
 8010f7c:	0001      	movs	r1, r0
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	1c5a      	adds	r2, r3, #1
 8010f82:	60ba      	str	r2, [r7, #8]
 8010f84:	b2ca      	uxtb	r2, r1
 8010f86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	617b      	str	r3, [r7, #20]
 8010f8e:	697a      	ldr	r2, [r7, #20]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	dbf0      	blt.n	8010f78 <_read+0x12>
  }

  return len;
 8010f96:	687b      	ldr	r3, [r7, #4]
}
 8010f98:	0018      	movs	r0, r3
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	b006      	add	sp, #24
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010fa8:	2301      	movs	r3, #1
 8010faa:	425b      	negs	r3, r3
}
 8010fac:	0018      	movs	r0, r3
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	b002      	add	sp, #8
 8010fb2:	bd80      	pop	{r7, pc}

08010fb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	2280      	movs	r2, #128	@ 0x80
 8010fc2:	0192      	lsls	r2, r2, #6
 8010fc4:	605a      	str	r2, [r3, #4]
  return 0;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	0018      	movs	r0, r3
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	b002      	add	sp, #8
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <_isatty>:

int _isatty(int file)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010fd8:	2301      	movs	r3, #1
}
 8010fda:	0018      	movs	r0, r3
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	b002      	add	sp, #8
 8010fe0:	bd80      	pop	{r7, pc}

08010fe2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b084      	sub	sp, #16
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	60f8      	str	r0, [r7, #12]
 8010fea:	60b9      	str	r1, [r7, #8]
 8010fec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	0018      	movs	r0, r3
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	b004      	add	sp, #16
 8010ff6:	bd80      	pop	{r7, pc}

08010ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b086      	sub	sp, #24
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8011000:	4a14      	ldr	r2, [pc, #80]	@ (8011054 <_sbrk+0x5c>)
 8011002:	4b15      	ldr	r3, [pc, #84]	@ (8011058 <_sbrk+0x60>)
 8011004:	1ad3      	subs	r3, r2, r3
 8011006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801100c:	4b13      	ldr	r3, [pc, #76]	@ (801105c <_sbrk+0x64>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d102      	bne.n	801101a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011014:	4b11      	ldr	r3, [pc, #68]	@ (801105c <_sbrk+0x64>)
 8011016:	4a12      	ldr	r2, [pc, #72]	@ (8011060 <_sbrk+0x68>)
 8011018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801101a:	4b10      	ldr	r3, [pc, #64]	@ (801105c <_sbrk+0x64>)
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	18d3      	adds	r3, r2, r3
 8011022:	693a      	ldr	r2, [r7, #16]
 8011024:	429a      	cmp	r2, r3
 8011026:	d207      	bcs.n	8011038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011028:	f012 fe1a 	bl	8023c60 <__errno>
 801102c:	0003      	movs	r3, r0
 801102e:	220c      	movs	r2, #12
 8011030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8011032:	2301      	movs	r3, #1
 8011034:	425b      	negs	r3, r3
 8011036:	e009      	b.n	801104c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011038:	4b08      	ldr	r3, [pc, #32]	@ (801105c <_sbrk+0x64>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801103e:	4b07      	ldr	r3, [pc, #28]	@ (801105c <_sbrk+0x64>)
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	18d2      	adds	r2, r2, r3
 8011046:	4b05      	ldr	r3, [pc, #20]	@ (801105c <_sbrk+0x64>)
 8011048:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 801104a:	68fb      	ldr	r3, [r7, #12]
}
 801104c:	0018      	movs	r0, r3
 801104e:	46bd      	mov	sp, r7
 8011050:	b006      	add	sp, #24
 8011052:	bd80      	pop	{r7, pc}
 8011054:	20005000 	.word	0x20005000
 8011058:	00000400 	.word	0x00000400
 801105c:	20001e48 	.word	0x20001e48
 8011060:	200035f0 	.word	0x200035f0

08011064 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011068:	46c0      	nop			@ (mov r8, r8)
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
	...

08011070 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011076:	2310      	movs	r3, #16
 8011078:	18fb      	adds	r3, r7, r3
 801107a:	0018      	movs	r0, r3
 801107c:	2308      	movs	r3, #8
 801107e:	001a      	movs	r2, r3
 8011080:	2100      	movs	r1, #0
 8011082:	f012 fd49 	bl	8023b18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011086:	003b      	movs	r3, r7
 8011088:	0018      	movs	r0, r3
 801108a:	2310      	movs	r3, #16
 801108c:	001a      	movs	r2, r3
 801108e:	2100      	movs	r1, #0
 8011090:	f012 fd42 	bl	8023b18 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8011094:	4b2e      	ldr	r3, [pc, #184]	@ (8011150 <MX_TIM2_Init+0xe0>)
 8011096:	2280      	movs	r2, #128	@ 0x80
 8011098:	05d2      	lsls	r2, r2, #23
 801109a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801109c:	4b2c      	ldr	r3, [pc, #176]	@ (8011150 <MX_TIM2_Init+0xe0>)
 801109e:	2200      	movs	r2, #0
 80110a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80110a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011150 <MX_TIM2_Init+0xe0>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80110a8:	4b29      	ldr	r3, [pc, #164]	@ (8011150 <MX_TIM2_Init+0xe0>)
 80110aa:	4a2a      	ldr	r2, [pc, #168]	@ (8011154 <MX_TIM2_Init+0xe4>)
 80110ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80110ae:	4b28      	ldr	r3, [pc, #160]	@ (8011150 <MX_TIM2_Init+0xe0>)
 80110b0:	2200      	movs	r2, #0
 80110b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80110b4:	4b26      	ldr	r3, [pc, #152]	@ (8011150 <MX_TIM2_Init+0xe0>)
 80110b6:	2200      	movs	r2, #0
 80110b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80110ba:	4b25      	ldr	r3, [pc, #148]	@ (8011150 <MX_TIM2_Init+0xe0>)
 80110bc:	0018      	movs	r0, r3
 80110be:	f009 f8dd 	bl	801a27c <HAL_TIM_PWM_Init>
 80110c2:	1e03      	subs	r3, r0, #0
 80110c4:	d001      	beq.n	80110ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80110c6:	f7fa f8f3 	bl	800b2b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80110ca:	2110      	movs	r1, #16
 80110cc:	187b      	adds	r3, r7, r1
 80110ce:	2200      	movs	r2, #0
 80110d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80110d2:	187b      	adds	r3, r7, r1
 80110d4:	2200      	movs	r2, #0
 80110d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80110d8:	187a      	adds	r2, r7, r1
 80110da:	4b1d      	ldr	r3, [pc, #116]	@ (8011150 <MX_TIM2_Init+0xe0>)
 80110dc:	0011      	movs	r1, r2
 80110de:	0018      	movs	r0, r3
 80110e0:	f009 fbea 	bl	801a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80110e4:	1e03      	subs	r3, r0, #0
 80110e6:	d001      	beq.n	80110ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80110e8:	f7fa f8e2 	bl	800b2b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80110ec:	003b      	movs	r3, r7
 80110ee:	2260      	movs	r2, #96	@ 0x60
 80110f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80110f2:	003b      	movs	r3, r7
 80110f4:	2200      	movs	r2, #0
 80110f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80110f8:	003b      	movs	r3, r7
 80110fa:	2200      	movs	r2, #0
 80110fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80110fe:	003b      	movs	r3, r7
 8011100:	2200      	movs	r2, #0
 8011102:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011104:	0039      	movs	r1, r7
 8011106:	4b12      	ldr	r3, [pc, #72]	@ (8011150 <MX_TIM2_Init+0xe0>)
 8011108:	2200      	movs	r2, #0
 801110a:	0018      	movs	r0, r3
 801110c:	f009 f988 	bl	801a420 <HAL_TIM_PWM_ConfigChannel>
 8011110:	1e03      	subs	r3, r0, #0
 8011112:	d001      	beq.n	8011118 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8011114:	f7fa f8cc 	bl	800b2b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011118:	0039      	movs	r1, r7
 801111a:	4b0d      	ldr	r3, [pc, #52]	@ (8011150 <MX_TIM2_Init+0xe0>)
 801111c:	2208      	movs	r2, #8
 801111e:	0018      	movs	r0, r3
 8011120:	f009 f97e 	bl	801a420 <HAL_TIM_PWM_ConfigChannel>
 8011124:	1e03      	subs	r3, r0, #0
 8011126:	d001      	beq.n	801112c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8011128:	f7fa f8c2 	bl	800b2b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801112c:	0039      	movs	r1, r7
 801112e:	4b08      	ldr	r3, [pc, #32]	@ (8011150 <MX_TIM2_Init+0xe0>)
 8011130:	220c      	movs	r2, #12
 8011132:	0018      	movs	r0, r3
 8011134:	f009 f974 	bl	801a420 <HAL_TIM_PWM_ConfigChannel>
 8011138:	1e03      	subs	r3, r0, #0
 801113a:	d001      	beq.n	8011140 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 801113c:	f7fa f8b8 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8011140:	4b03      	ldr	r3, [pc, #12]	@ (8011150 <MX_TIM2_Init+0xe0>)
 8011142:	0018      	movs	r0, r3
 8011144:	f000 f8fe 	bl	8011344 <HAL_TIM_MspPostInit>

}
 8011148:	46c0      	nop			@ (mov r8, r8)
 801114a:	46bd      	mov	sp, r7
 801114c:	b006      	add	sp, #24
 801114e:	bd80      	pop	{r7, pc}
 8011150:	20001e4c 	.word	0x20001e4c
 8011154:	0000ffff 	.word	0x0000ffff

08011158 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b086      	sub	sp, #24
 801115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801115e:	2310      	movs	r3, #16
 8011160:	18fb      	adds	r3, r7, r3
 8011162:	0018      	movs	r0, r3
 8011164:	2308      	movs	r3, #8
 8011166:	001a      	movs	r2, r3
 8011168:	2100      	movs	r1, #0
 801116a:	f012 fcd5 	bl	8023b18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801116e:	003b      	movs	r3, r7
 8011170:	0018      	movs	r0, r3
 8011172:	2310      	movs	r3, #16
 8011174:	001a      	movs	r2, r3
 8011176:	2100      	movs	r1, #0
 8011178:	f012 fcce 	bl	8023b18 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801117c:	4b32      	ldr	r3, [pc, #200]	@ (8011248 <MX_TIM3_Init+0xf0>)
 801117e:	4a33      	ldr	r2, [pc, #204]	@ (801124c <MX_TIM3_Init+0xf4>)
 8011180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8011182:	4b31      	ldr	r3, [pc, #196]	@ (8011248 <MX_TIM3_Init+0xf0>)
 8011184:	2200      	movs	r2, #0
 8011186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011188:	4b2f      	ldr	r3, [pc, #188]	@ (8011248 <MX_TIM3_Init+0xf0>)
 801118a:	2200      	movs	r2, #0
 801118c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801118e:	4b2e      	ldr	r3, [pc, #184]	@ (8011248 <MX_TIM3_Init+0xf0>)
 8011190:	4a2f      	ldr	r2, [pc, #188]	@ (8011250 <MX_TIM3_Init+0xf8>)
 8011192:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011194:	4b2c      	ldr	r3, [pc, #176]	@ (8011248 <MX_TIM3_Init+0xf0>)
 8011196:	2200      	movs	r2, #0
 8011198:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801119a:	4b2b      	ldr	r3, [pc, #172]	@ (8011248 <MX_TIM3_Init+0xf0>)
 801119c:	2200      	movs	r2, #0
 801119e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80111a0:	4b29      	ldr	r3, [pc, #164]	@ (8011248 <MX_TIM3_Init+0xf0>)
 80111a2:	0018      	movs	r0, r3
 80111a4:	f009 f86a 	bl	801a27c <HAL_TIM_PWM_Init>
 80111a8:	1e03      	subs	r3, r0, #0
 80111aa:	d001      	beq.n	80111b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80111ac:	f7fa f880 	bl	800b2b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80111b0:	2110      	movs	r1, #16
 80111b2:	187b      	adds	r3, r7, r1
 80111b4:	2200      	movs	r2, #0
 80111b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80111b8:	187b      	adds	r3, r7, r1
 80111ba:	2200      	movs	r2, #0
 80111bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80111be:	187a      	adds	r2, r7, r1
 80111c0:	4b21      	ldr	r3, [pc, #132]	@ (8011248 <MX_TIM3_Init+0xf0>)
 80111c2:	0011      	movs	r1, r2
 80111c4:	0018      	movs	r0, r3
 80111c6:	f009 fb77 	bl	801a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80111ca:	1e03      	subs	r3, r0, #0
 80111cc:	d001      	beq.n	80111d2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80111ce:	f7fa f86f 	bl	800b2b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80111d2:	003b      	movs	r3, r7
 80111d4:	2260      	movs	r2, #96	@ 0x60
 80111d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80111d8:	003b      	movs	r3, r7
 80111da:	2200      	movs	r2, #0
 80111dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80111de:	003b      	movs	r3, r7
 80111e0:	2200      	movs	r2, #0
 80111e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80111e4:	003b      	movs	r3, r7
 80111e6:	2200      	movs	r2, #0
 80111e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80111ea:	0039      	movs	r1, r7
 80111ec:	4b16      	ldr	r3, [pc, #88]	@ (8011248 <MX_TIM3_Init+0xf0>)
 80111ee:	2200      	movs	r2, #0
 80111f0:	0018      	movs	r0, r3
 80111f2:	f009 f915 	bl	801a420 <HAL_TIM_PWM_ConfigChannel>
 80111f6:	1e03      	subs	r3, r0, #0
 80111f8:	d001      	beq.n	80111fe <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80111fa:	f7fa f859 	bl	800b2b0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80111fe:	4b12      	ldr	r3, [pc, #72]	@ (8011248 <MX_TIM3_Init+0xf0>)
 8011200:	2104      	movs	r1, #4
 8011202:	0018      	movs	r0, r3
 8011204:	f009 fbb6 	bl	801a974 <HAL_TIMEx_RemapConfig>
 8011208:	1e03      	subs	r3, r0, #0
 801120a:	d001      	beq.n	8011210 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 801120c:	f7fa f850 	bl	800b2b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011210:	0039      	movs	r1, r7
 8011212:	4b0d      	ldr	r3, [pc, #52]	@ (8011248 <MX_TIM3_Init+0xf0>)
 8011214:	2204      	movs	r2, #4
 8011216:	0018      	movs	r0, r3
 8011218:	f009 f902 	bl	801a420 <HAL_TIM_PWM_ConfigChannel>
 801121c:	1e03      	subs	r3, r0, #0
 801121e:	d001      	beq.n	8011224 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8011220:	f7fa f846 	bl	800b2b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011224:	0039      	movs	r1, r7
 8011226:	4b08      	ldr	r3, [pc, #32]	@ (8011248 <MX_TIM3_Init+0xf0>)
 8011228:	2208      	movs	r2, #8
 801122a:	0018      	movs	r0, r3
 801122c:	f009 f8f8 	bl	801a420 <HAL_TIM_PWM_ConfigChannel>
 8011230:	1e03      	subs	r3, r0, #0
 8011232:	d001      	beq.n	8011238 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8011234:	f7fa f83c 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8011238:	4b03      	ldr	r3, [pc, #12]	@ (8011248 <MX_TIM3_Init+0xf0>)
 801123a:	0018      	movs	r0, r3
 801123c:	f000 f882 	bl	8011344 <HAL_TIM_MspPostInit>

}
 8011240:	46c0      	nop			@ (mov r8, r8)
 8011242:	46bd      	mov	sp, r7
 8011244:	b006      	add	sp, #24
 8011246:	bd80      	pop	{r7, pc}
 8011248:	20001e8c 	.word	0x20001e8c
 801124c:	40000400 	.word	0x40000400
 8011250:	0000ffff 	.word	0x0000ffff

08011254 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801125a:	003b      	movs	r3, r7
 801125c:	0018      	movs	r0, r3
 801125e:	2308      	movs	r3, #8
 8011260:	001a      	movs	r2, r3
 8011262:	2100      	movs	r1, #0
 8011264:	f012 fc58 	bl	8023b18 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8011268:	4b15      	ldr	r3, [pc, #84]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 801126a:	4a16      	ldr	r2, [pc, #88]	@ (80112c4 <MX_TIM6_Init+0x70>)
 801126c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801126e:	4b14      	ldr	r3, [pc, #80]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 8011270:	220a      	movs	r2, #10
 8011272:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011274:	4b12      	ldr	r3, [pc, #72]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 8011276:	2200      	movs	r2, #0
 8011278:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 801127a:	4b11      	ldr	r3, [pc, #68]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 801127c:	4a12      	ldr	r2, [pc, #72]	@ (80112c8 <MX_TIM6_Init+0x74>)
 801127e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011280:	4b0f      	ldr	r3, [pc, #60]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 8011282:	2200      	movs	r2, #0
 8011284:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011286:	4b0e      	ldr	r3, [pc, #56]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 8011288:	0018      	movs	r0, r3
 801128a:	f008 ff4f 	bl	801a12c <HAL_TIM_Base_Init>
 801128e:	1e03      	subs	r3, r0, #0
 8011290:	d001      	beq.n	8011296 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8011292:	f7fa f80d 	bl	800b2b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011296:	003b      	movs	r3, r7
 8011298:	2200      	movs	r2, #0
 801129a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801129c:	003b      	movs	r3, r7
 801129e:	2200      	movs	r2, #0
 80112a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80112a2:	003a      	movs	r2, r7
 80112a4:	4b06      	ldr	r3, [pc, #24]	@ (80112c0 <MX_TIM6_Init+0x6c>)
 80112a6:	0011      	movs	r1, r2
 80112a8:	0018      	movs	r0, r3
 80112aa:	f009 fb05 	bl	801a8b8 <HAL_TIMEx_MasterConfigSynchronization>
 80112ae:	1e03      	subs	r3, r0, #0
 80112b0:	d001      	beq.n	80112b6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80112b2:	f7f9 fffd 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80112b6:	46c0      	nop			@ (mov r8, r8)
 80112b8:	46bd      	mov	sp, r7
 80112ba:	b002      	add	sp, #8
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	46c0      	nop			@ (mov r8, r8)
 80112c0:	20001ecc 	.word	0x20001ecc
 80112c4:	40001000 	.word	0x40001000
 80112c8:	0000ffff 	.word	0x0000ffff

080112cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	2380      	movs	r3, #128	@ 0x80
 80112da:	05db      	lsls	r3, r3, #23
 80112dc:	429a      	cmp	r2, r3
 80112de:	d106      	bne.n	80112ee <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80112e0:	4b0a      	ldr	r3, [pc, #40]	@ (801130c <HAL_TIM_PWM_MspInit+0x40>)
 80112e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112e4:	4b09      	ldr	r3, [pc, #36]	@ (801130c <HAL_TIM_PWM_MspInit+0x40>)
 80112e6:	2101      	movs	r1, #1
 80112e8:	430a      	orrs	r2, r1
 80112ea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80112ec:	e00a      	b.n	8011304 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	4a07      	ldr	r2, [pc, #28]	@ (8011310 <HAL_TIM_PWM_MspInit+0x44>)
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d105      	bne.n	8011304 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80112f8:	4b04      	ldr	r3, [pc, #16]	@ (801130c <HAL_TIM_PWM_MspInit+0x40>)
 80112fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112fc:	4b03      	ldr	r3, [pc, #12]	@ (801130c <HAL_TIM_PWM_MspInit+0x40>)
 80112fe:	2102      	movs	r1, #2
 8011300:	430a      	orrs	r2, r1
 8011302:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011304:	46c0      	nop			@ (mov r8, r8)
 8011306:	46bd      	mov	sp, r7
 8011308:	b002      	add	sp, #8
 801130a:	bd80      	pop	{r7, pc}
 801130c:	40021000 	.word	0x40021000
 8011310:	40000400 	.word	0x40000400

08011314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4a06      	ldr	r2, [pc, #24]	@ (801133c <HAL_TIM_Base_MspInit+0x28>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d105      	bne.n	8011332 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011326:	4b06      	ldr	r3, [pc, #24]	@ (8011340 <HAL_TIM_Base_MspInit+0x2c>)
 8011328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801132a:	4b05      	ldr	r3, [pc, #20]	@ (8011340 <HAL_TIM_Base_MspInit+0x2c>)
 801132c:	2110      	movs	r1, #16
 801132e:	430a      	orrs	r2, r1
 8011330:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8011332:	46c0      	nop			@ (mov r8, r8)
 8011334:	46bd      	mov	sp, r7
 8011336:	b002      	add	sp, #8
 8011338:	bd80      	pop	{r7, pc}
 801133a:	46c0      	nop			@ (mov r8, r8)
 801133c:	40001000 	.word	0x40001000
 8011340:	40021000 	.word	0x40021000

08011344 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011344:	b590      	push	{r4, r7, lr}
 8011346:	b08b      	sub	sp, #44	@ 0x2c
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801134c:	2414      	movs	r4, #20
 801134e:	193b      	adds	r3, r7, r4
 8011350:	0018      	movs	r0, r3
 8011352:	2314      	movs	r3, #20
 8011354:	001a      	movs	r2, r3
 8011356:	2100      	movs	r1, #0
 8011358:	f012 fbde 	bl	8023b18 <memset>
  if(timHandle->Instance==TIM2)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	2380      	movs	r3, #128	@ 0x80
 8011362:	05db      	lsls	r3, r3, #23
 8011364:	429a      	cmp	r2, r3
 8011366:	d123      	bne.n	80113b0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011368:	4b27      	ldr	r3, [pc, #156]	@ (8011408 <HAL_TIM_MspPostInit+0xc4>)
 801136a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136c:	4b26      	ldr	r3, [pc, #152]	@ (8011408 <HAL_TIM_MspPostInit+0xc4>)
 801136e:	2101      	movs	r1, #1
 8011370:	430a      	orrs	r2, r1
 8011372:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011374:	4b24      	ldr	r3, [pc, #144]	@ (8011408 <HAL_TIM_MspPostInit+0xc4>)
 8011376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011378:	2201      	movs	r2, #1
 801137a:	4013      	ands	r3, r2
 801137c:	613b      	str	r3, [r7, #16]
 801137e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8011380:	0021      	movs	r1, r4
 8011382:	187b      	adds	r3, r7, r1
 8011384:	220d      	movs	r2, #13
 8011386:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011388:	187b      	adds	r3, r7, r1
 801138a:	2202      	movs	r2, #2
 801138c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801138e:	187b      	adds	r3, r7, r1
 8011390:	2200      	movs	r2, #0
 8011392:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011394:	187b      	adds	r3, r7, r1
 8011396:	2200      	movs	r2, #0
 8011398:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 801139a:	187b      	adds	r3, r7, r1
 801139c:	2202      	movs	r2, #2
 801139e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80113a0:	187a      	adds	r2, r7, r1
 80113a2:	23a0      	movs	r3, #160	@ 0xa0
 80113a4:	05db      	lsls	r3, r3, #23
 80113a6:	0011      	movs	r1, r2
 80113a8:	0018      	movs	r0, r3
 80113aa:	f001 ff99 	bl	80132e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80113ae:	e027      	b.n	8011400 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4a15      	ldr	r2, [pc, #84]	@ (801140c <HAL_TIM_MspPostInit+0xc8>)
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d122      	bne.n	8011400 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80113ba:	4b13      	ldr	r3, [pc, #76]	@ (8011408 <HAL_TIM_MspPostInit+0xc4>)
 80113bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113be:	4b12      	ldr	r3, [pc, #72]	@ (8011408 <HAL_TIM_MspPostInit+0xc4>)
 80113c0:	2104      	movs	r1, #4
 80113c2:	430a      	orrs	r2, r1
 80113c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80113c6:	4b10      	ldr	r3, [pc, #64]	@ (8011408 <HAL_TIM_MspPostInit+0xc4>)
 80113c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113ca:	2204      	movs	r2, #4
 80113cc:	4013      	ands	r3, r2
 80113ce:	60fb      	str	r3, [r7, #12]
 80113d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80113d2:	2114      	movs	r1, #20
 80113d4:	187b      	adds	r3, r7, r1
 80113d6:	22e0      	movs	r2, #224	@ 0xe0
 80113d8:	0052      	lsls	r2, r2, #1
 80113da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113dc:	187b      	adds	r3, r7, r1
 80113de:	2202      	movs	r2, #2
 80113e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113e2:	187b      	adds	r3, r7, r1
 80113e4:	2200      	movs	r2, #0
 80113e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113e8:	187b      	adds	r3, r7, r1
 80113ea:	2200      	movs	r2, #0
 80113ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80113ee:	187b      	adds	r3, r7, r1
 80113f0:	2202      	movs	r2, #2
 80113f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113f4:	187b      	adds	r3, r7, r1
 80113f6:	4a06      	ldr	r2, [pc, #24]	@ (8011410 <HAL_TIM_MspPostInit+0xcc>)
 80113f8:	0019      	movs	r1, r3
 80113fa:	0010      	movs	r0, r2
 80113fc:	f001 ff70 	bl	80132e0 <HAL_GPIO_Init>
}
 8011400:	46c0      	nop			@ (mov r8, r8)
 8011402:	46bd      	mov	sp, r7
 8011404:	b00b      	add	sp, #44	@ 0x2c
 8011406:	bd90      	pop	{r4, r7, pc}
 8011408:	40021000 	.word	0x40021000
 801140c:	40000400 	.word	0x40000400
 8011410:	50000800 	.word	0x50000800

08011414 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8011418:	4b17      	ldr	r3, [pc, #92]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 801141a:	4a18      	ldr	r2, [pc, #96]	@ (801147c <MX_LPUART1_UART_Init+0x68>)
 801141c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801141e:	4b16      	ldr	r3, [pc, #88]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011420:	22e1      	movs	r2, #225	@ 0xe1
 8011422:	0252      	lsls	r2, r2, #9
 8011424:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011426:	4b14      	ldr	r3, [pc, #80]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011428:	2200      	movs	r2, #0
 801142a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801142c:	4b12      	ldr	r3, [pc, #72]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 801142e:	2200      	movs	r2, #0
 8011430:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8011432:	4b11      	ldr	r3, [pc, #68]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011434:	2200      	movs	r2, #0
 8011436:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8011438:	4b0f      	ldr	r3, [pc, #60]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 801143a:	220c      	movs	r2, #12
 801143c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801143e:	4b0e      	ldr	r3, [pc, #56]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011440:	2200      	movs	r2, #0
 8011442:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011444:	4b0c      	ldr	r3, [pc, #48]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011446:	2200      	movs	r2, #0
 8011448:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 801144a:	4b0b      	ldr	r3, [pc, #44]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 801144c:	2218      	movs	r2, #24
 801144e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8011450:	4b09      	ldr	r3, [pc, #36]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011452:	2280      	movs	r2, #128	@ 0x80
 8011454:	0212      	lsls	r2, r2, #8
 8011456:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8011458:	4b07      	ldr	r3, [pc, #28]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 801145a:	2280      	movs	r2, #128	@ 0x80
 801145c:	0152      	lsls	r2, r2, #5
 801145e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8011460:	4b05      	ldr	r3, [pc, #20]	@ (8011478 <MX_LPUART1_UART_Init+0x64>)
 8011462:	0018      	movs	r0, r3
 8011464:	f009 faa4 	bl	801a9b0 <HAL_UART_Init>
 8011468:	1e03      	subs	r3, r0, #0
 801146a:	d001      	beq.n	8011470 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 801146c:	f7f9 ff20 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8011470:	46c0      	nop			@ (mov r8, r8)
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	46c0      	nop			@ (mov r8, r8)
 8011478:	20001f0c 	.word	0x20001f0c
 801147c:	40004800 	.word	0x40004800

08011480 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011484:	4b14      	ldr	r3, [pc, #80]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 8011486:	4a15      	ldr	r2, [pc, #84]	@ (80114dc <MX_USART1_UART_Init+0x5c>)
 8011488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801148a:	4b13      	ldr	r3, [pc, #76]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 801148c:	22e1      	movs	r2, #225	@ 0xe1
 801148e:	0252      	lsls	r2, r2, #9
 8011490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011492:	4b11      	ldr	r3, [pc, #68]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 8011494:	2200      	movs	r2, #0
 8011496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011498:	4b0f      	ldr	r3, [pc, #60]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 801149a:	2200      	movs	r2, #0
 801149c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801149e:	4b0e      	ldr	r3, [pc, #56]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80114a4:	4b0c      	ldr	r3, [pc, #48]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114a6:	220c      	movs	r2, #12
 80114a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80114aa:	4b0b      	ldr	r3, [pc, #44]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114ac:	2200      	movs	r2, #0
 80114ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80114b0:	4b09      	ldr	r3, [pc, #36]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114b2:	2200      	movs	r2, #0
 80114b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80114b6:	4b08      	ldr	r3, [pc, #32]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80114bc:	4b06      	ldr	r3, [pc, #24]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114be:	2200      	movs	r2, #0
 80114c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80114c2:	4b05      	ldr	r3, [pc, #20]	@ (80114d8 <MX_USART1_UART_Init+0x58>)
 80114c4:	0018      	movs	r0, r3
 80114c6:	f009 fa73 	bl	801a9b0 <HAL_UART_Init>
 80114ca:	1e03      	subs	r3, r0, #0
 80114cc:	d001      	beq.n	80114d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80114ce:	f7f9 feef 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80114d2:	46c0      	nop			@ (mov r8, r8)
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20001fc4 	.word	0x20001fc4
 80114dc:	40013800 	.word	0x40013800

080114e0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80114e4:	4b14      	ldr	r3, [pc, #80]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 80114e6:	4a15      	ldr	r2, [pc, #84]	@ (801153c <MX_USART4_UART_Init+0x5c>)
 80114e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80114ea:	4b13      	ldr	r3, [pc, #76]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 80114ec:	22e1      	movs	r2, #225	@ 0xe1
 80114ee:	0252      	lsls	r2, r2, #9
 80114f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80114f2:	4b11      	ldr	r3, [pc, #68]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80114f8:	4b0f      	ldr	r3, [pc, #60]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80114fe:	4b0e      	ldr	r3, [pc, #56]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 8011500:	2200      	movs	r2, #0
 8011502:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8011504:	4b0c      	ldr	r3, [pc, #48]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 8011506:	220c      	movs	r2, #12
 8011508:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801150a:	4b0b      	ldr	r3, [pc, #44]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 801150c:	2200      	movs	r2, #0
 801150e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8011510:	4b09      	ldr	r3, [pc, #36]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 8011512:	2200      	movs	r2, #0
 8011514:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011516:	4b08      	ldr	r3, [pc, #32]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 8011518:	2200      	movs	r2, #0
 801151a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801151c:	4b06      	ldr	r3, [pc, #24]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 801151e:	2200      	movs	r2, #0
 8011520:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8011522:	4b05      	ldr	r3, [pc, #20]	@ (8011538 <MX_USART4_UART_Init+0x58>)
 8011524:	0018      	movs	r0, r3
 8011526:	f009 fa43 	bl	801a9b0 <HAL_UART_Init>
 801152a:	1e03      	subs	r3, r0, #0
 801152c:	d001      	beq.n	8011532 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801152e:	f7f9 febf 	bl	800b2b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8011532:	46c0      	nop			@ (mov r8, r8)
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	2000207c 	.word	0x2000207c
 801153c:	40004c00 	.word	0x40004c00

08011540 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011540:	b590      	push	{r4, r7, lr}
 8011542:	b08d      	sub	sp, #52	@ 0x34
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011548:	241c      	movs	r4, #28
 801154a:	193b      	adds	r3, r7, r4
 801154c:	0018      	movs	r0, r3
 801154e:	2314      	movs	r3, #20
 8011550:	001a      	movs	r2, r3
 8011552:	2100      	movs	r1, #0
 8011554:	f012 fae0 	bl	8023b18 <memset>
  if(uartHandle->Instance==LPUART1)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a8b      	ldr	r2, [pc, #556]	@ (801178c <HAL_UART_MspInit+0x24c>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d129      	bne.n	80115b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8011562:	4b8b      	ldr	r3, [pc, #556]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011566:	4b8a      	ldr	r3, [pc, #552]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011568:	2180      	movs	r1, #128	@ 0x80
 801156a:	02c9      	lsls	r1, r1, #11
 801156c:	430a      	orrs	r2, r1
 801156e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011570:	4b87      	ldr	r3, [pc, #540]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011574:	4b86      	ldr	r3, [pc, #536]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011576:	2104      	movs	r1, #4
 8011578:	430a      	orrs	r2, r1
 801157a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801157c:	4b84      	ldr	r3, [pc, #528]	@ (8011790 <HAL_UART_MspInit+0x250>)
 801157e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011580:	2204      	movs	r2, #4
 8011582:	4013      	ands	r3, r2
 8011584:	61bb      	str	r3, [r7, #24]
 8011586:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011588:	0021      	movs	r1, r4
 801158a:	187b      	adds	r3, r7, r1
 801158c:	2203      	movs	r2, #3
 801158e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011590:	187b      	adds	r3, r7, r1
 8011592:	2202      	movs	r2, #2
 8011594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011596:	187b      	adds	r3, r7, r1
 8011598:	2200      	movs	r2, #0
 801159a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801159c:	187b      	adds	r3, r7, r1
 801159e:	2203      	movs	r2, #3
 80115a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80115a2:	187b      	adds	r3, r7, r1
 80115a4:	2206      	movs	r2, #6
 80115a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80115a8:	187b      	adds	r3, r7, r1
 80115aa:	4a7a      	ldr	r2, [pc, #488]	@ (8011794 <HAL_UART_MspInit+0x254>)
 80115ac:	0019      	movs	r1, r3
 80115ae:	0010      	movs	r0, r2
 80115b0:	f001 fe96 	bl	80132e0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80115b4:	e0e5      	b.n	8011782 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4a77      	ldr	r2, [pc, #476]	@ (8011798 <HAL_UART_MspInit+0x258>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d133      	bne.n	8011628 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80115c0:	4b73      	ldr	r3, [pc, #460]	@ (8011790 <HAL_UART_MspInit+0x250>)
 80115c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80115c4:	4b72      	ldr	r3, [pc, #456]	@ (8011790 <HAL_UART_MspInit+0x250>)
 80115c6:	2180      	movs	r1, #128	@ 0x80
 80115c8:	01c9      	lsls	r1, r1, #7
 80115ca:	430a      	orrs	r2, r1
 80115cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ce:	4b70      	ldr	r3, [pc, #448]	@ (8011790 <HAL_UART_MspInit+0x250>)
 80115d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115d2:	4b6f      	ldr	r3, [pc, #444]	@ (8011790 <HAL_UART_MspInit+0x250>)
 80115d4:	2101      	movs	r1, #1
 80115d6:	430a      	orrs	r2, r1
 80115d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80115da:	4b6d      	ldr	r3, [pc, #436]	@ (8011790 <HAL_UART_MspInit+0x250>)
 80115dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115de:	2201      	movs	r2, #1
 80115e0:	4013      	ands	r3, r2
 80115e2:	617b      	str	r3, [r7, #20]
 80115e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80115e6:	211c      	movs	r1, #28
 80115e8:	187b      	adds	r3, r7, r1
 80115ea:	22c0      	movs	r2, #192	@ 0xc0
 80115ec:	00d2      	lsls	r2, r2, #3
 80115ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115f0:	187b      	adds	r3, r7, r1
 80115f2:	2202      	movs	r2, #2
 80115f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f6:	187b      	adds	r3, r7, r1
 80115f8:	2200      	movs	r2, #0
 80115fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115fc:	187b      	adds	r3, r7, r1
 80115fe:	2203      	movs	r2, #3
 8011600:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8011602:	187b      	adds	r3, r7, r1
 8011604:	2204      	movs	r2, #4
 8011606:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011608:	187a      	adds	r2, r7, r1
 801160a:	23a0      	movs	r3, #160	@ 0xa0
 801160c:	05db      	lsls	r3, r3, #23
 801160e:	0011      	movs	r1, r2
 8011610:	0018      	movs	r0, r3
 8011612:	f001 fe65 	bl	80132e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8011616:	2200      	movs	r2, #0
 8011618:	2100      	movs	r1, #0
 801161a:	201b      	movs	r0, #27
 801161c:	f001 fa0e 	bl	8012a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011620:	201b      	movs	r0, #27
 8011622:	f001 fa20 	bl	8012a66 <HAL_NVIC_EnableIRQ>
}
 8011626:	e0ac      	b.n	8011782 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4a5b      	ldr	r2, [pc, #364]	@ (801179c <HAL_UART_MspInit+0x25c>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d000      	beq.n	8011634 <HAL_UART_MspInit+0xf4>
 8011632:	e0a6      	b.n	8011782 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8011634:	4b56      	ldr	r3, [pc, #344]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011638:	4b55      	ldr	r3, [pc, #340]	@ (8011790 <HAL_UART_MspInit+0x250>)
 801163a:	2180      	movs	r1, #128	@ 0x80
 801163c:	0309      	lsls	r1, r1, #12
 801163e:	430a      	orrs	r2, r1
 8011640:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011642:	4b53      	ldr	r3, [pc, #332]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011646:	4b52      	ldr	r3, [pc, #328]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011648:	2101      	movs	r1, #1
 801164a:	430a      	orrs	r2, r1
 801164c:	62da      	str	r2, [r3, #44]	@ 0x2c
 801164e:	4b50      	ldr	r3, [pc, #320]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011652:	2201      	movs	r2, #1
 8011654:	4013      	ands	r3, r2
 8011656:	613b      	str	r3, [r7, #16]
 8011658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801165a:	4b4d      	ldr	r3, [pc, #308]	@ (8011790 <HAL_UART_MspInit+0x250>)
 801165c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801165e:	4b4c      	ldr	r3, [pc, #304]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011660:	2104      	movs	r1, #4
 8011662:	430a      	orrs	r2, r1
 8011664:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011666:	4b4a      	ldr	r3, [pc, #296]	@ (8011790 <HAL_UART_MspInit+0x250>)
 8011668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801166a:	2204      	movs	r2, #4
 801166c:	4013      	ands	r3, r2
 801166e:	60fb      	str	r3, [r7, #12]
 8011670:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8011672:	241c      	movs	r4, #28
 8011674:	193b      	adds	r3, r7, r4
 8011676:	2202      	movs	r2, #2
 8011678:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801167a:	193b      	adds	r3, r7, r4
 801167c:	2202      	movs	r2, #2
 801167e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011680:	193b      	adds	r3, r7, r4
 8011682:	2200      	movs	r2, #0
 8011684:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011686:	193b      	adds	r3, r7, r4
 8011688:	2203      	movs	r2, #3
 801168a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 801168c:	193b      	adds	r3, r7, r4
 801168e:	2206      	movs	r2, #6
 8011690:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011692:	193a      	adds	r2, r7, r4
 8011694:	23a0      	movs	r3, #160	@ 0xa0
 8011696:	05db      	lsls	r3, r3, #23
 8011698:	0011      	movs	r1, r2
 801169a:	0018      	movs	r0, r3
 801169c:	f001 fe20 	bl	80132e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80116a0:	0021      	movs	r1, r4
 80116a2:	187b      	adds	r3, r7, r1
 80116a4:	2280      	movs	r2, #128	@ 0x80
 80116a6:	00d2      	lsls	r2, r2, #3
 80116a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116aa:	187b      	adds	r3, r7, r1
 80116ac:	2202      	movs	r2, #2
 80116ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116b0:	187b      	adds	r3, r7, r1
 80116b2:	2200      	movs	r2, #0
 80116b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116b6:	187b      	adds	r3, r7, r1
 80116b8:	2203      	movs	r2, #3
 80116ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80116bc:	187b      	adds	r3, r7, r1
 80116be:	2206      	movs	r2, #6
 80116c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80116c2:	187b      	adds	r3, r7, r1
 80116c4:	4a33      	ldr	r2, [pc, #204]	@ (8011794 <HAL_UART_MspInit+0x254>)
 80116c6:	0019      	movs	r1, r3
 80116c8:	0010      	movs	r0, r2
 80116ca:	f001 fe09 	bl	80132e0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80116ce:	4b34      	ldr	r3, [pc, #208]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116d0:	4a34      	ldr	r2, [pc, #208]	@ (80117a4 <HAL_UART_MspInit+0x264>)
 80116d2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80116d4:	4b32      	ldr	r3, [pc, #200]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116d6:	220c      	movs	r2, #12
 80116d8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80116da:	4b31      	ldr	r3, [pc, #196]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116dc:	2200      	movs	r2, #0
 80116de:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80116e0:	4b2f      	ldr	r3, [pc, #188]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116e2:	2200      	movs	r2, #0
 80116e4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80116e6:	4b2e      	ldr	r3, [pc, #184]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116e8:	2280      	movs	r2, #128	@ 0x80
 80116ea:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80116ec:	4b2c      	ldr	r3, [pc, #176]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80116f2:	4b2b      	ldr	r3, [pc, #172]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116f4:	2200      	movs	r2, #0
 80116f6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80116f8:	4b29      	ldr	r3, [pc, #164]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 80116fa:	2220      	movs	r2, #32
 80116fc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80116fe:	4b28      	ldr	r3, [pc, #160]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 8011700:	2200      	movs	r2, #0
 8011702:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8011704:	4b26      	ldr	r3, [pc, #152]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 8011706:	0018      	movs	r0, r3
 8011708:	f001 f9ce 	bl	8012aa8 <HAL_DMA_Init>
 801170c:	1e03      	subs	r3, r0, #0
 801170e:	d001      	beq.n	8011714 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8011710:	f7f9 fdce 	bl	800b2b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	4a22      	ldr	r2, [pc, #136]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 8011718:	675a      	str	r2, [r3, #116]	@ 0x74
 801171a:	4b21      	ldr	r3, [pc, #132]	@ (80117a0 <HAL_UART_MspInit+0x260>)
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8011720:	4b21      	ldr	r3, [pc, #132]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011722:	4a22      	ldr	r2, [pc, #136]	@ (80117ac <HAL_UART_MspInit+0x26c>)
 8011724:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8011726:	4b20      	ldr	r3, [pc, #128]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011728:	220c      	movs	r2, #12
 801172a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801172c:	4b1e      	ldr	r3, [pc, #120]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 801172e:	2210      	movs	r2, #16
 8011730:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011732:	4b1d      	ldr	r3, [pc, #116]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011734:	2200      	movs	r2, #0
 8011736:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011738:	4b1b      	ldr	r3, [pc, #108]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 801173a:	2280      	movs	r2, #128	@ 0x80
 801173c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801173e:	4b1a      	ldr	r3, [pc, #104]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011740:	2200      	movs	r2, #0
 8011742:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011744:	4b18      	ldr	r3, [pc, #96]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011746:	2200      	movs	r2, #0
 8011748:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 801174a:	4b17      	ldr	r3, [pc, #92]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 801174c:	2200      	movs	r2, #0
 801174e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8011750:	4b15      	ldr	r3, [pc, #84]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011752:	2200      	movs	r2, #0
 8011754:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8011756:	4b14      	ldr	r3, [pc, #80]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 8011758:	0018      	movs	r0, r3
 801175a:	f001 f9a5 	bl	8012aa8 <HAL_DMA_Init>
 801175e:	1e03      	subs	r3, r0, #0
 8011760:	d001      	beq.n	8011766 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8011762:	f7f9 fda5 	bl	800b2b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	4a0f      	ldr	r2, [pc, #60]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 801176a:	671a      	str	r2, [r3, #112]	@ 0x70
 801176c:	4b0e      	ldr	r3, [pc, #56]	@ (80117a8 <HAL_UART_MspInit+0x268>)
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8011772:	2200      	movs	r2, #0
 8011774:	2100      	movs	r1, #0
 8011776:	200e      	movs	r0, #14
 8011778:	f001 f960 	bl	8012a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 801177c:	200e      	movs	r0, #14
 801177e:	f001 f972 	bl	8012a66 <HAL_NVIC_EnableIRQ>
}
 8011782:	46c0      	nop			@ (mov r8, r8)
 8011784:	46bd      	mov	sp, r7
 8011786:	b00d      	add	sp, #52	@ 0x34
 8011788:	bd90      	pop	{r4, r7, pc}
 801178a:	46c0      	nop			@ (mov r8, r8)
 801178c:	40004800 	.word	0x40004800
 8011790:	40021000 	.word	0x40021000
 8011794:	50000800 	.word	0x50000800
 8011798:	40013800 	.word	0x40013800
 801179c:	40004c00 	.word	0x40004c00
 80117a0:	20002134 	.word	0x20002134
 80117a4:	4002006c 	.word	0x4002006c
 80117a8:	2000217c 	.word	0x2000217c
 80117ac:	40020080 	.word	0x40020080

080117b0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b086      	sub	sp, #24
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80117b8:	f000 fc9c 	bl	80120f4 <HAL_GetTick>
 80117bc:	0003      	movs	r3, r0
 80117be:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80117c0:	4b1c      	ldr	r3, [pc, #112]	@ (8011834 <TimestampIsReached+0x84>)
 80117c2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80117c4:	697a      	ldr	r2, [r7, #20]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d307      	bcc.n	80117dc <TimestampIsReached+0x2c>
 80117cc:	697a      	ldr	r2, [r7, #20]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	1ad3      	subs	r3, r2, r3
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d901      	bls.n	80117dc <TimestampIsReached+0x2c>
 80117d8:	2201      	movs	r2, #1
 80117da:	e000      	b.n	80117de <TimestampIsReached+0x2e>
 80117dc:	2200      	movs	r2, #0
 80117de:	230f      	movs	r3, #15
 80117e0:	18fb      	adds	r3, r7, r3
 80117e2:	701a      	strb	r2, [r3, #0]
 80117e4:	781a      	ldrb	r2, [r3, #0]
 80117e6:	2101      	movs	r1, #1
 80117e8:	400a      	ands	r2, r1
 80117ea:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80117ec:	697a      	ldr	r2, [r7, #20]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d207      	bcs.n	8011804 <TimestampIsReached+0x54>
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	693a      	ldr	r2, [r7, #16]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d201      	bcs.n	8011804 <TimestampIsReached+0x54>
 8011800:	2201      	movs	r2, #1
 8011802:	e000      	b.n	8011806 <TimestampIsReached+0x56>
 8011804:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8011806:	200e      	movs	r0, #14
 8011808:	183b      	adds	r3, r7, r0
 801180a:	701a      	strb	r2, [r3, #0]
 801180c:	781a      	ldrb	r2, [r3, #0]
 801180e:	2101      	movs	r1, #1
 8011810:	400a      	ands	r2, r1
 8011812:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8011814:	230f      	movs	r3, #15
 8011816:	18fb      	adds	r3, r7, r3
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d103      	bne.n	8011826 <TimestampIsReached+0x76>
 801181e:	183b      	adds	r3, r7, r0
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8011826:	2301      	movs	r3, #1
 8011828:	e000      	b.n	801182c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 801182a:	2300      	movs	r3, #0
}
 801182c:	0018      	movs	r0, r3
 801182e:	46bd      	mov	sp, r7
 8011830:	b006      	add	sp, #24
 8011832:	bd80      	pop	{r7, pc}
 8011834:	7fffffff 	.word	0x7fffffff

08011838 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8011840:	f000 fc58 	bl	80120f4 <HAL_GetTick>
 8011844:	0002      	movs	r2, r0
 8011846:	4904      	ldr	r1, [pc, #16]	@ (8011858 <AddTimestamp+0x20>)
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	0018      	movs	r0, r3
 801184c:	f011 fffe 	bl	802384c <siprintf>
}
 8011850:	46c0      	nop			@ (mov r8, r8)
 8011852:	46bd      	mov	sp, r7
 8011854:	b002      	add	sp, #8
 8011856:	bd80      	pop	{r7, pc}
 8011858:	0802ab04 	.word	0x0802ab04

0801185c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 801185c:	b40c      	push	{r2, r3}
 801185e:	b5b0      	push	{r4, r5, r7, lr}
 8011860:	b0a4      	sub	sp, #144	@ 0x90
 8011862:	af00      	add	r7, sp, #0
 8011864:	0002      	movs	r2, r0
 8011866:	6039      	str	r1, [r7, #0]
 8011868:	1dfb      	adds	r3, r7, #7
 801186a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 801186c:	4b23      	ldr	r3, [pc, #140]	@ (80118fc <CreateLine+0xa0>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	1dfa      	adds	r2, r7, #7
 8011872:	7812      	ldrb	r2, [r2, #0]
 8011874:	429a      	cmp	r2, r3
 8011876:	d839      	bhi.n	80118ec <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8011878:	683a      	ldr	r2, [r7, #0]
 801187a:	4921      	ldr	r1, [pc, #132]	@ (8011900 <CreateLine+0xa4>)
 801187c:	240c      	movs	r4, #12
 801187e:	193b      	adds	r3, r7, r4
 8011880:	0018      	movs	r0, r3
 8011882:	f011 ffe3 	bl	802384c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8011886:	4b1d      	ldr	r3, [pc, #116]	@ (80118fc <CreateLine+0xa0>)
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d909      	bls.n	80118a2 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 801188e:	193b      	adds	r3, r7, r4
 8011890:	0018      	movs	r0, r3
 8011892:	f7ee fc6b 	bl	800016c <strlen>
 8011896:	0002      	movs	r2, r0
 8011898:	193b      	adds	r3, r7, r4
 801189a:	189b      	adds	r3, r3, r2
 801189c:	0018      	movs	r0, r3
 801189e:	f7ff ffcb 	bl	8011838 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80118a2:	240c      	movs	r4, #12
 80118a4:	193b      	adds	r3, r7, r4
 80118a6:	0018      	movs	r0, r3
 80118a8:	f7ee fc60 	bl	800016c <strlen>
 80118ac:	0003      	movs	r3, r0
 80118ae:	218c      	movs	r1, #140	@ 0x8c
 80118b0:	187a      	adds	r2, r7, r1
 80118b2:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80118b4:	239c      	movs	r3, #156	@ 0x9c
 80118b6:	2508      	movs	r5, #8
 80118b8:	195b      	adds	r3, r3, r5
 80118ba:	19db      	adds	r3, r3, r7
 80118bc:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80118be:	193a      	adds	r2, r7, r4
 80118c0:	187b      	adds	r3, r7, r1
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	18d0      	adds	r0, r2, r3
 80118c6:	187b      	adds	r3, r7, r1
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2280      	movs	r2, #128	@ 0x80
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	0019      	movs	r1, r3
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	2298      	movs	r2, #152	@ 0x98
 80118d4:	1952      	adds	r2, r2, r5
 80118d6:	19d2      	adds	r2, r2, r7
 80118d8:	6812      	ldr	r2, [r2, #0]
 80118da:	f012 f84f 	bl	802397c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80118de:	193a      	adds	r2, r7, r4
 80118e0:	4b08      	ldr	r3, [pc, #32]	@ (8011904 <CreateLine+0xa8>)
 80118e2:	0011      	movs	r1, r2
 80118e4:	0018      	movs	r0, r3
 80118e6:	f011 ff41 	bl	802376c <iprintf>
 80118ea:	e000      	b.n	80118ee <CreateLine+0x92>
    return;
 80118ec:	46c0      	nop			@ (mov r8, r8)
}
 80118ee:	46bd      	mov	sp, r7
 80118f0:	b024      	add	sp, #144	@ 0x90
 80118f2:	bcb0      	pop	{r4, r5, r7}
 80118f4:	bc08      	pop	{r3}
 80118f6:	b002      	add	sp, #8
 80118f8:	4718      	bx	r3
 80118fa:	46c0      	nop			@ (mov r8, r8)
 80118fc:	200000e4 	.word	0x200000e4
 8011900:	0802ab10 	.word	0x0802ab10
 8011904:	0802ab14 	.word	0x0802ab14

08011908 <_write>:

int _write(int fd, void *buf, size_t count) {
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	b29a      	uxth	r2, r3
 8011918:	68b9      	ldr	r1, [r7, #8]
 801191a:	4804      	ldr	r0, [pc, #16]	@ (801192c <_write+0x24>)
 801191c:	2364      	movs	r3, #100	@ 0x64
 801191e:	f009 f8ad 	bl	801aa7c <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 8011922:	687b      	ldr	r3, [r7, #4]
}
 8011924:	0018      	movs	r0, r3
 8011926:	46bd      	mov	sp, r7
 8011928:	b004      	add	sp, #16
 801192a:	bd80      	pop	{r7, pc}
 801192c:	20001fc4 	.word	0x20001fc4

08011930 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	0002      	movs	r2, r0
 8011938:	1dfb      	adds	r3, r7, #7
 801193a:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 801193c:	4b03      	ldr	r3, [pc, #12]	@ (801194c <SetVerboseLevel+0x1c>)
 801193e:	1dfa      	adds	r2, r7, #7
 8011940:	7812      	ldrb	r2, [r2, #0]
 8011942:	701a      	strb	r2, [r3, #0]
}
 8011944:	46c0      	nop			@ (mov r8, r8)
 8011946:	46bd      	mov	sp, r7
 8011948:	b002      	add	sp, #8
 801194a:	bd80      	pop	{r7, pc}
 801194c:	200000e4 	.word	0x200000e4

08011950 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8011950:	b580      	push	{r7, lr}
 8011952:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8011954:	4b02      	ldr	r3, [pc, #8]	@ (8011960 <GetVerboseLevel+0x10>)
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	0018      	movs	r0, r3
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	46c0      	nop			@ (mov r8, r8)
 8011960:	200000e4 	.word	0x200000e4

08011964 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 801196a:	4a0f      	ldr	r2, [pc, #60]	@ (80119a8 <BinaryReleaseInfo+0x44>)
 801196c:	4b0f      	ldr	r3, [pc, #60]	@ (80119ac <BinaryReleaseInfo+0x48>)
 801196e:	0019      	movs	r1, r3
 8011970:	2002      	movs	r0, #2
 8011972:	f7ff ff73 	bl	801185c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8011976:	480e      	ldr	r0, [pc, #56]	@ (80119b0 <BinaryReleaseInfo+0x4c>)
 8011978:	4a0e      	ldr	r2, [pc, #56]	@ (80119b4 <BinaryReleaseInfo+0x50>)
 801197a:	490c      	ldr	r1, [pc, #48]	@ (80119ac <BinaryReleaseInfo+0x48>)
 801197c:	4b0e      	ldr	r3, [pc, #56]	@ (80119b8 <BinaryReleaseInfo+0x54>)
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	0003      	movs	r3, r0
 8011982:	2002      	movs	r0, #2
 8011984:	f7ff ff6a 	bl	801185c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8011988:	4b0c      	ldr	r3, [pc, #48]	@ (80119bc <BinaryReleaseInfo+0x58>)
 801198a:	4a0d      	ldr	r2, [pc, #52]	@ (80119c0 <BinaryReleaseInfo+0x5c>)
 801198c:	4907      	ldr	r1, [pc, #28]	@ (80119ac <BinaryReleaseInfo+0x48>)
 801198e:	2002      	movs	r0, #2
 8011990:	f7ff ff64 	bl	801185c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8011994:	4b0b      	ldr	r3, [pc, #44]	@ (80119c4 <BinaryReleaseInfo+0x60>)
 8011996:	4a0c      	ldr	r2, [pc, #48]	@ (80119c8 <BinaryReleaseInfo+0x64>)
 8011998:	4904      	ldr	r1, [pc, #16]	@ (80119ac <BinaryReleaseInfo+0x48>)
 801199a:	2002      	movs	r0, #2
 801199c:	f7ff ff5e 	bl	801185c <CreateLine>
}
 80119a0:	46c0      	nop			@ (mov r8, r8)
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	46c0      	nop			@ (mov r8, r8)
 80119a8:	0802ab1c 	.word	0x0802ab1c
 80119ac:	0802ab48 	.word	0x0802ab48
 80119b0:	0802ab4c 	.word	0x0802ab4c
 80119b4:	0802ab58 	.word	0x0802ab58
 80119b8:	0802ab6c 	.word	0x0802ab6c
 80119bc:	0802ab78 	.word	0x0802ab78
 80119c0:	0802ab84 	.word	0x0802ab84
 80119c4:	0802ab8c 	.word	0x0802ab8c
 80119c8:	0802ab94 	.word	0x0802ab94

080119cc <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	60b9      	str	r1, [r7, #8]
 80119d6:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	68ba      	ldr	r2, [r7, #8]
 80119dc:	68f9      	ldr	r1, [r7, #12]
 80119de:	4803      	ldr	r0, [pc, #12]	@ (80119ec <errorHandler+0x20>)
 80119e0:	f011 fec4 	bl	802376c <iprintf>
//    while (true)
//    {
//    }
}
 80119e4:	46c0      	nop			@ (mov r8, r8)
 80119e6:	46bd      	mov	sp, r7
 80119e8:	b004      	add	sp, #16
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	0802abac 	.word	0x0802abac

080119f0 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80119f0:	b590      	push	{r4, r7, lr}
 80119f2:	b083      	sub	sp, #12
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6039      	str	r1, [r7, #0]
 80119f8:	0011      	movs	r1, r2
 80119fa:	1dfb      	adds	r3, r7, #7
 80119fc:	1c02      	adds	r2, r0, #0
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	1dbb      	adds	r3, r7, #6
 8011a02:	1c0a      	adds	r2, r1, #0
 8011a04:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8011a06:	4b0a      	ldr	r3, [pc, #40]	@ (8011a30 <ReadRegister+0x40>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00a      	beq.n	8011a24 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8011a0e:	4b08      	ldr	r3, [pc, #32]	@ (8011a30 <ReadRegister+0x40>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	1dba      	adds	r2, r7, #6
 8011a14:	7814      	ldrb	r4, [r2, #0]
 8011a16:	6839      	ldr	r1, [r7, #0]
 8011a18:	1dfa      	adds	r2, r7, #7
 8011a1a:	7810      	ldrb	r0, [r2, #0]
 8011a1c:	0022      	movs	r2, r4
 8011a1e:	4798      	blx	r3
 8011a20:	0003      	movs	r3, r0
 8011a22:	e000      	b.n	8011a26 <ReadRegister+0x36>
	}
	return false;
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	0018      	movs	r0, r3
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	b003      	add	sp, #12
 8011a2c:	bd90      	pop	{r4, r7, pc}
 8011a2e:	46c0      	nop			@ (mov r8, r8)
 8011a30:	200021cc 	.word	0x200021cc

08011a34 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6039      	str	r1, [r7, #0]
 8011a3c:	0011      	movs	r1, r2
 8011a3e:	1dfb      	adds	r3, r7, #7
 8011a40:	1c02      	adds	r2, r0, #0
 8011a42:	701a      	strb	r2, [r3, #0]
 8011a44:	1dbb      	adds	r3, r7, #6
 8011a46:	1c0a      	adds	r2, r1, #0
 8011a48:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8011a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8011a74 <WriteRegister+0x40>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00a      	beq.n	8011a68 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8011a52:	4b08      	ldr	r3, [pc, #32]	@ (8011a74 <WriteRegister+0x40>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	1dba      	adds	r2, r7, #6
 8011a58:	7814      	ldrb	r4, [r2, #0]
 8011a5a:	6839      	ldr	r1, [r7, #0]
 8011a5c:	1dfa      	adds	r2, r7, #7
 8011a5e:	7810      	ldrb	r0, [r2, #0]
 8011a60:	0022      	movs	r2, r4
 8011a62:	4798      	blx	r3
 8011a64:	0003      	movs	r3, r0
 8011a66:	e000      	b.n	8011a6a <WriteRegister+0x36>
  }
  return false;
 8011a68:	2300      	movs	r3, #0
}
 8011a6a:	0018      	movs	r0, r3
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	b003      	add	sp, #12
 8011a70:	bd90      	pop	{r4, r7, pc}
 8011a72:	46c0      	nop			@ (mov r8, r8)
 8011a74:	200021d0 	.word	0x200021d0

08011a78 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	000a      	movs	r2, r1
 8011a82:	1cfb      	adds	r3, r7, #3
 8011a84:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8011a86:	230f      	movs	r3, #15
 8011a88:	18fb      	adds	r3, r7, r3
 8011a8a:	22ff      	movs	r2, #255	@ 0xff
 8011a8c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011a8e:	230e      	movs	r3, #14
 8011a90:	18fb      	adds	r3, r7, r3
 8011a92:	2200      	movs	r2, #0
 8011a94:	701a      	strb	r2, [r3, #0]
 8011a96:	e037      	b.n	8011b08 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011a98:	230e      	movs	r3, #14
 8011a9a:	18fb      	adds	r3, r7, r3
 8011a9c:	781b      	ldrb	r3, [r3, #0]
 8011a9e:	687a      	ldr	r2, [r7, #4]
 8011aa0:	18d3      	adds	r3, r2, r3
 8011aa2:	7819      	ldrb	r1, [r3, #0]
 8011aa4:	220f      	movs	r2, #15
 8011aa6:	18bb      	adds	r3, r7, r2
 8011aa8:	18ba      	adds	r2, r7, r2
 8011aaa:	7812      	ldrb	r2, [r2, #0]
 8011aac:	404a      	eors	r2, r1
 8011aae:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011ab0:	230d      	movs	r3, #13
 8011ab2:	18fb      	adds	r3, r7, r3
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	701a      	strb	r2, [r3, #0]
 8011ab8:	e01b      	b.n	8011af2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8011aba:	210f      	movs	r1, #15
 8011abc:	187b      	adds	r3, r7, r1
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	b25b      	sxtb	r3, r3
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	da09      	bge.n	8011ada <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8011ac6:	187b      	adds	r3, r7, r1
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	005b      	lsls	r3, r3, #1
 8011acc:	b25b      	sxtb	r3, r3
 8011ace:	2231      	movs	r2, #49	@ 0x31
 8011ad0:	4053      	eors	r3, r2
 8011ad2:	b25a      	sxtb	r2, r3
 8011ad4:	187b      	adds	r3, r7, r1
 8011ad6:	701a      	strb	r2, [r3, #0]
 8011ad8:	e005      	b.n	8011ae6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8011ada:	230f      	movs	r3, #15
 8011adc:	18fa      	adds	r2, r7, r3
 8011ade:	18fb      	adds	r3, r7, r3
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	18db      	adds	r3, r3, r3
 8011ae4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011ae6:	210d      	movs	r1, #13
 8011ae8:	187b      	adds	r3, r7, r1
 8011aea:	781a      	ldrb	r2, [r3, #0]
 8011aec:	187b      	adds	r3, r7, r1
 8011aee:	3201      	adds	r2, #1
 8011af0:	701a      	strb	r2, [r3, #0]
 8011af2:	230d      	movs	r3, #13
 8011af4:	18fb      	adds	r3, r7, r3
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	2b07      	cmp	r3, #7
 8011afa:	d9de      	bls.n	8011aba <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8011afc:	210e      	movs	r1, #14
 8011afe:	187b      	adds	r3, r7, r1
 8011b00:	781a      	ldrb	r2, [r3, #0]
 8011b02:	187b      	adds	r3, r7, r1
 8011b04:	3201      	adds	r2, #1
 8011b06:	701a      	strb	r2, [r3, #0]
 8011b08:	230e      	movs	r3, #14
 8011b0a:	18fa      	adds	r2, r7, r3
 8011b0c:	1cfb      	adds	r3, r7, #3
 8011b0e:	7812      	ldrb	r2, [r2, #0]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d3c0      	bcc.n	8011a98 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8011b16:	230f      	movs	r3, #15
 8011b18:	18fb      	adds	r3, r7, r3
 8011b1a:	781b      	ldrb	r3, [r3, #0]
}
 8011b1c:	0018      	movs	r0, r3
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	b004      	add	sp, #16
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8011b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8011b58 <HIDS_Init+0x34>)
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8011b34:	4b09      	ldr	r3, [pc, #36]	@ (8011b5c <HIDS_Init+0x38>)
 8011b36:	683a      	ldr	r2, [r7, #0]
 8011b38:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8011b3a:	4b09      	ldr	r3, [pc, #36]	@ (8011b60 <HIDS_Init+0x3c>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	0018      	movs	r0, r3
 8011b40:	f000 f840 	bl	8011bc4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8011b44:	4b07      	ldr	r3, [pc, #28]	@ (8011b64 <HIDS_Init+0x40>)
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	0018      	movs	r0, r3
 8011b4a:	f000 f82b 	bl	8011ba4 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8011b4e:	46c0      	nop			@ (mov r8, r8)
 8011b50:	46bd      	mov	sp, r7
 8011b52:	b002      	add	sp, #8
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	46c0      	nop			@ (mov r8, r8)
 8011b58:	200021cc 	.word	0x200021cc
 8011b5c:	200021d0 	.word	0x200021d0
 8011b60:	200000e6 	.word	0x200000e6
 8011b64:	200000e5 	.word	0x200000e5

08011b68 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8011b6c:	f000 fac2 	bl	80120f4 <HAL_GetTick>
 8011b70:	0002      	movs	r2, r0
 8011b72:	4b08      	ldr	r3, [pc, #32]	@ (8011b94 <HIDS_StartMeasurement+0x2c>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	18d2      	adds	r2, r2, r3
 8011b78:	4b07      	ldr	r3, [pc, #28]	@ (8011b98 <HIDS_StartMeasurement+0x30>)
 8011b7a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8011b7c:	4b07      	ldr	r3, [pc, #28]	@ (8011b9c <HIDS_StartMeasurement+0x34>)
 8011b7e:	2201      	movs	r2, #1
 8011b80:	0019      	movs	r1, r3
 8011b82:	2044      	movs	r0, #68	@ 0x44
 8011b84:	f7ff ff56 	bl	8011a34 <WriteRegister>
  MeasurementDone = false;
 8011b88:	4b05      	ldr	r3, [pc, #20]	@ (8011ba0 <HIDS_StartMeasurement+0x38>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	701a      	strb	r2, [r3, #0]
}
 8011b8e:	46c0      	nop			@ (mov r8, r8)
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	200000ec 	.word	0x200000ec
 8011b98:	200000e8 	.word	0x200000e8
 8011b9c:	200000e6 	.word	0x200000e6
 8011ba0:	200021e2 	.word	0x200021e2

08011ba4 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	0002      	movs	r2, r0
 8011bac:	1dfb      	adds	r3, r7, #7
 8011bae:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8011bb0:	4b03      	ldr	r3, [pc, #12]	@ (8011bc0 <HIDS_SetHeaterMode+0x1c>)
 8011bb2:	1dfa      	adds	r2, r7, #7
 8011bb4:	7812      	ldrb	r2, [r2, #0]
 8011bb6:	701a      	strb	r2, [r3, #0]
}
 8011bb8:	46c0      	nop			@ (mov r8, r8)
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	b002      	add	sp, #8
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	200000e5 	.word	0x200000e5

08011bc4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	0002      	movs	r2, r0
 8011bcc:	1dfb      	adds	r3, r7, #7
 8011bce:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8011bd0:	4b03      	ldr	r3, [pc, #12]	@ (8011be0 <HIDS_SetMeasurementMode+0x1c>)
 8011bd2:	1dfa      	adds	r2, r7, #7
 8011bd4:	7812      	ldrb	r2, [r2, #0]
 8011bd6:	701a      	strb	r2, [r3, #0]
}
 8011bd8:	46c0      	nop			@ (mov r8, r8)
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	b002      	add	sp, #8
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	200000e6 	.word	0x200000e6

08011be4 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8011bec:	f000 fa82 	bl	80120f4 <HAL_GetTick>
 8011bf0:	0002      	movs	r2, r0
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	18d2      	adds	r2, r2, r3
 8011bf6:	4b03      	ldr	r3, [pc, #12]	@ (8011c04 <setHIDSTimeStamp+0x20>)
 8011bf8:	601a      	str	r2, [r3, #0]
}
 8011bfa:	46c0      	nop			@ (mov r8, r8)
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	b002      	add	sp, #8
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	46c0      	nop			@ (mov r8, r8)
 8011c04:	200021e4 	.word	0x200021e4

08011c08 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8011c08:	b590      	push	{r4, r7, lr}
 8011c0a:	b085      	sub	sp, #20
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	781a      	ldrb	r2, [r3, #0]
 8011c14:	210c      	movs	r1, #12
 8011c16:	187b      	adds	r3, r7, r1
 8011c18:	701a      	strb	r2, [r3, #0]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	785a      	ldrb	r2, [r3, #1]
 8011c1e:	187b      	adds	r3, r7, r1
 8011c20:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8011c22:	240f      	movs	r4, #15
 8011c24:	193b      	adds	r3, r7, r4
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	7892      	ldrb	r2, [r2, #2]
 8011c2a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8011c2c:	187b      	adds	r3, r7, r1
 8011c2e:	2102      	movs	r1, #2
 8011c30:	0018      	movs	r0, r3
 8011c32:	f7ff ff21 	bl	8011a78 <CalculateCRC>
 8011c36:	0003      	movs	r3, r0
 8011c38:	001a      	movs	r2, r3
 8011c3a:	193b      	adds	r3, r7, r4
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d007      	beq.n	8011c52 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8011c42:	4a1a      	ldr	r2, [pc, #104]	@ (8011cac <CheckCRC+0xa4>)
 8011c44:	4b1a      	ldr	r3, [pc, #104]	@ (8011cb0 <CheckCRC+0xa8>)
 8011c46:	0019      	movs	r1, r3
 8011c48:	2001      	movs	r0, #1
 8011c4a:	f7ff fe07 	bl	801185c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	e027      	b.n	8011ca2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	78da      	ldrb	r2, [r3, #3]
 8011c56:	2108      	movs	r1, #8
 8011c58:	187b      	adds	r3, r7, r1
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	791a      	ldrb	r2, [r3, #4]
 8011c60:	187b      	adds	r3, r7, r1
 8011c62:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8011c64:	240e      	movs	r4, #14
 8011c66:	193b      	adds	r3, r7, r4
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	7952      	ldrb	r2, [r2, #5]
 8011c6c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8011c6e:	187b      	adds	r3, r7, r1
 8011c70:	2102      	movs	r1, #2
 8011c72:	0018      	movs	r0, r3
 8011c74:	f7ff ff00 	bl	8011a78 <CalculateCRC>
 8011c78:	0003      	movs	r3, r0
 8011c7a:	001a      	movs	r2, r3
 8011c7c:	193b      	adds	r3, r7, r4
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d00d      	beq.n	8011ca0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8011c84:	4a0b      	ldr	r2, [pc, #44]	@ (8011cb4 <CheckCRC+0xac>)
 8011c86:	4b0a      	ldr	r3, [pc, #40]	@ (8011cb0 <CheckCRC+0xa8>)
 8011c88:	0019      	movs	r1, r3
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	f7ff fde6 	bl	801185c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8011c90:	4a09      	ldr	r2, [pc, #36]	@ (8011cb8 <CheckCRC+0xb0>)
 8011c92:	4b0a      	ldr	r3, [pc, #40]	@ (8011cbc <CheckCRC+0xb4>)
 8011c94:	217d      	movs	r1, #125	@ 0x7d
 8011c96:	0018      	movs	r0, r3
 8011c98:	f7ff fe98 	bl	80119cc <errorHandler>
		return false;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	e000      	b.n	8011ca2 <CheckCRC+0x9a>
	}
	return true;
 8011ca0:	2301      	movs	r3, #1
}
 8011ca2:	0018      	movs	r0, r3
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	b005      	add	sp, #20
 8011ca8:	bd90      	pop	{r4, r7, pc}
 8011caa:	46c0      	nop			@ (mov r8, r8)
 8011cac:	0802abf8 	.word	0x0802abf8
 8011cb0:	0802ac20 	.word	0x0802ac20
 8011cb4:	0802ac24 	.word	0x0802ac24
 8011cb8:	0802ac50 	.word	0x0802ac50
 8011cbc:	0802b280 	.word	0x0802b280

08011cc0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8011cc6:	1dbb      	adds	r3, r7, #6
 8011cc8:	2289      	movs	r2, #137	@ 0x89
 8011cca:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8011ccc:	1dbb      	adds	r3, r7, #6
 8011cce:	2201      	movs	r2, #1
 8011cd0:	0019      	movs	r1, r3
 8011cd2:	2044      	movs	r0, #68	@ 0x44
 8011cd4:	f7ff feae 	bl	8011a34 <WriteRegister>
	HAL_Delay(30);
 8011cd8:	201e      	movs	r0, #30
 8011cda:	f000 fa15 	bl	8012108 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8011cde:	4b14      	ldr	r3, [pc, #80]	@ (8011d30 <HIDS_DeviceConnected+0x70>)
 8011ce0:	2206      	movs	r2, #6
 8011ce2:	0019      	movs	r1, r3
 8011ce4:	2044      	movs	r0, #68	@ 0x44
 8011ce6:	f7ff fe83 	bl	80119f0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8011cea:	1dfb      	adds	r3, r7, #7
 8011cec:	2200      	movs	r2, #0
 8011cee:	701a      	strb	r2, [r3, #0]
 8011cf0:	e011      	b.n	8011d16 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8011cf2:	1dfb      	adds	r3, r7, #7
 8011cf4:	7818      	ldrb	r0, [r3, #0]
 8011cf6:	1dfb      	adds	r3, r7, #7
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8011d30 <HIDS_DeviceConnected+0x70>)
 8011cfc:	5cd3      	ldrb	r3, [r2, r3]
 8011cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8011d34 <HIDS_DeviceConnected+0x74>)
 8011d00:	490d      	ldr	r1, [pc, #52]	@ (8011d38 <HIDS_DeviceConnected+0x78>)
 8011d02:	9300      	str	r3, [sp, #0]
 8011d04:	0003      	movs	r3, r0
 8011d06:	2002      	movs	r0, #2
 8011d08:	f7ff fda8 	bl	801185c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8011d0c:	1dfb      	adds	r3, r7, #7
 8011d0e:	781a      	ldrb	r2, [r3, #0]
 8011d10:	1dfb      	adds	r3, r7, #7
 8011d12:	3201      	adds	r2, #1
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	1dfb      	adds	r3, r7, #7
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	2b05      	cmp	r3, #5
 8011d1c:	d9e9      	bls.n	8011cf2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8011d1e:	4b04      	ldr	r3, [pc, #16]	@ (8011d30 <HIDS_DeviceConnected+0x70>)
 8011d20:	0018      	movs	r0, r3
 8011d22:	f7ff ff71 	bl	8011c08 <CheckCRC>
 8011d26:	0003      	movs	r3, r0
}
 8011d28:	0018      	movs	r0, r3
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	b002      	add	sp, #8
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	200021d4 	.word	0x200021d4
 8011d34:	0802ac68 	.word	0x0802ac68
 8011d38:	0802abf4 	.word	0x0802abf4

08011d3c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8011d40:	4b04      	ldr	r3, [pc, #16]	@ (8011d54 <HIDS_MeasurementReady+0x18>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	0018      	movs	r0, r3
 8011d46:	f7ff fd33 	bl	80117b0 <TimestampIsReached>
 8011d4a:	0003      	movs	r3, r0
}
 8011d4c:	0018      	movs	r0, r3
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	46c0      	nop			@ (mov r8, r8)
 8011d54:	200000e8 	.word	0x200000e8

08011d58 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8011d62:	4b41      	ldr	r3, [pc, #260]	@ (8011e68 <HIDS_GetMeasurementValues+0x110>)
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d001      	beq.n	8011d6e <HIDS_GetMeasurementValues+0x16>
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e077      	b.n	8011e5e <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8011d6e:	f7ff ffe5 	bl	8011d3c <HIDS_MeasurementReady>
 8011d72:	0003      	movs	r3, r0
 8011d74:	001a      	movs	r2, r3
 8011d76:	2301      	movs	r3, #1
 8011d78:	4053      	eors	r3, r2
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d001      	beq.n	8011d84 <HIDS_GetMeasurementValues+0x2c>
 8011d80:	2300      	movs	r3, #0
 8011d82:	e06c      	b.n	8011e5e <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8011d84:	4b39      	ldr	r3, [pc, #228]	@ (8011e6c <HIDS_GetMeasurementValues+0x114>)
 8011d86:	2206      	movs	r2, #6
 8011d88:	0019      	movs	r1, r3
 8011d8a:	2044      	movs	r0, #68	@ 0x44
 8011d8c:	f7ff fe30 	bl	80119f0 <ReadRegister>
 8011d90:	0003      	movs	r3, r0
 8011d92:	001a      	movs	r2, r3
 8011d94:	2301      	movs	r3, #1
 8011d96:	4053      	eors	r3, r2
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d005      	beq.n	8011daa <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8011d9e:	4a34      	ldr	r2, [pc, #208]	@ (8011e70 <HIDS_GetMeasurementValues+0x118>)
 8011da0:	4b34      	ldr	r3, [pc, #208]	@ (8011e74 <HIDS_GetMeasurementValues+0x11c>)
 8011da2:	0019      	movs	r1, r3
 8011da4:	2001      	movs	r0, #1
 8011da6:	f7ff fd59 	bl	801185c <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8011daa:	4b30      	ldr	r3, [pc, #192]	@ (8011e6c <HIDS_GetMeasurementValues+0x114>)
 8011dac:	0018      	movs	r0, r3
 8011dae:	f7ff ff2b 	bl	8011c08 <CheckCRC>
 8011db2:	0003      	movs	r3, r0
 8011db4:	001a      	movs	r2, r3
 8011db6:	2301      	movs	r3, #1
 8011db8:	4053      	eors	r3, r2
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d001      	beq.n	8011dc4 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e04c      	b.n	8011e5e <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8011dc4:	4b29      	ldr	r3, [pc, #164]	@ (8011e6c <HIDS_GetMeasurementValues+0x114>)
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	021b      	lsls	r3, r3, #8
 8011dca:	4a28      	ldr	r2, [pc, #160]	@ (8011e6c <HIDS_GetMeasurementValues+0x114>)
 8011dcc:	7852      	ldrb	r2, [r2, #1]
 8011dce:	4313      	orrs	r3, r2
 8011dd0:	22af      	movs	r2, #175	@ 0xaf
 8011dd2:	4353      	muls	r3, r2
 8011dd4:	0018      	movs	r0, r3
 8011dd6:	f7f1 faf3 	bl	80033c0 <__aeabi_i2d>
 8011dda:	2200      	movs	r2, #0
 8011ddc:	4b26      	ldr	r3, [pc, #152]	@ (8011e78 <HIDS_GetMeasurementValues+0x120>)
 8011dde:	f7ef ffe9 	bl	8001db4 <__aeabi_ddiv>
 8011de2:	0002      	movs	r2, r0
 8011de4:	000b      	movs	r3, r1
 8011de6:	0010      	movs	r0, r2
 8011de8:	0019      	movs	r1, r3
 8011dea:	f7f1 fb83 	bl	80034f4 <__aeabi_d2f>
 8011dee:	1c03      	adds	r3, r0, #0
 8011df0:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8011df2:	4922      	ldr	r1, [pc, #136]	@ (8011e7c <HIDS_GetMeasurementValues+0x124>)
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ef fa11 	bl	800121c <__aeabi_fsub>
 8011dfa:	1c03      	adds	r3, r0, #0
 8011dfc:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8011dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8011e6c <HIDS_GetMeasurementValues+0x114>)
 8011e00:	78db      	ldrb	r3, [r3, #3]
 8011e02:	021b      	lsls	r3, r3, #8
 8011e04:	4a19      	ldr	r2, [pc, #100]	@ (8011e6c <HIDS_GetMeasurementValues+0x114>)
 8011e06:	7912      	ldrb	r2, [r2, #4]
 8011e08:	431a      	orrs	r2, r3
 8011e0a:	0013      	movs	r3, r2
 8011e0c:	015b      	lsls	r3, r3, #5
 8011e0e:	1a9b      	subs	r3, r3, r2
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	189b      	adds	r3, r3, r2
 8011e14:	0018      	movs	r0, r3
 8011e16:	f7f1 fad3 	bl	80033c0 <__aeabi_i2d>
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	4b16      	ldr	r3, [pc, #88]	@ (8011e78 <HIDS_GetMeasurementValues+0x120>)
 8011e1e:	f7ef ffc9 	bl	8001db4 <__aeabi_ddiv>
 8011e22:	0002      	movs	r2, r0
 8011e24:	000b      	movs	r3, r1
 8011e26:	0010      	movs	r0, r2
 8011e28:	0019      	movs	r1, r3
 8011e2a:	f7f1 fb63 	bl	80034f4 <__aeabi_d2f>
 8011e2e:	1c03      	adds	r3, r0, #0
 8011e30:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8011e32:	4913      	ldr	r1, [pc, #76]	@ (8011e80 <HIDS_GetMeasurementValues+0x128>)
 8011e34:	68b8      	ldr	r0, [r7, #8]
 8011e36:	f7ef f9f1 	bl	800121c <__aeabi_fsub>
 8011e3a:	1c03      	adds	r3, r0, #0
 8011e3c:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	68fa      	ldr	r2, [r7, #12]
 8011e42:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	68ba      	ldr	r2, [r7, #8]
 8011e48:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8011e4a:	687a      	ldr	r2, [r7, #4]
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	0011      	movs	r1, r2
 8011e50:	0018      	movs	r0, r3
 8011e52:	f7fd f90b 	bl	800f06c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8011e56:	4b04      	ldr	r3, [pc, #16]	@ (8011e68 <HIDS_GetMeasurementValues+0x110>)
 8011e58:	2201      	movs	r2, #1
 8011e5a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8011e5c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8011e5e:	0018      	movs	r0, r3
 8011e60:	46bd      	mov	sp, r7
 8011e62:	b004      	add	sp, #16
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	46c0      	nop			@ (mov r8, r8)
 8011e68:	200021e2 	.word	0x200021e2
 8011e6c:	200021dc 	.word	0x200021dc
 8011e70:	0802ac88 	.word	0x0802ac88
 8011e74:	0802ac20 	.word	0x0802ac20
 8011e78:	40efffe0 	.word	0x40efffe0
 8011e7c:	42340000 	.word	0x42340000
 8011e80:	40c00000 	.word	0x40c00000

08011e84 <ResetHIDSresults>:

void ResetHIDSresults() {
 8011e84:	b580      	push	{r7, lr}
 8011e86:	af00      	add	r7, sp, #0
  humid = 0.0;
 8011e88:	4b04      	ldr	r3, [pc, #16]	@ (8011e9c <ResetHIDSresults+0x18>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8011e8e:	4b04      	ldr	r3, [pc, #16]	@ (8011ea0 <ResetHIDSresults+0x1c>)
 8011e90:	2200      	movs	r2, #0
 8011e92:	601a      	str	r2, [r3, #0]
}
 8011e94:	46c0      	nop			@ (mov r8, r8)
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	46c0      	nop			@ (mov r8, r8)
 8011e9c:	200021c4 	.word	0x200021c4
 8011ea0:	200021c8 	.word	0x200021c8

08011ea4 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8011ea4:	b5b0      	push	{r4, r5, r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8011eaa:	4b40      	ldr	r3, [pc, #256]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	2b06      	cmp	r3, #6
 8011eb0:	d900      	bls.n	8011eb4 <HIDS_Upkeep+0x10>
 8011eb2:	e06e      	b.n	8011f92 <HIDS_Upkeep+0xee>
 8011eb4:	009a      	lsls	r2, r3, #2
 8011eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8011fb0 <HIDS_Upkeep+0x10c>)
 8011eb8:	18d3      	adds	r3, r2, r3
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8011ebe:	4a3d      	ldr	r2, [pc, #244]	@ (8011fb4 <HIDS_Upkeep+0x110>)
 8011ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8011fb8 <HIDS_Upkeep+0x114>)
 8011ec2:	0019      	movs	r1, r3
 8011ec4:	2003      	movs	r0, #3
 8011ec6:	f7ff fcc9 	bl	801185c <CreateLine>
      break;
 8011eca:	e069      	b.n	8011fa0 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8011ecc:	f7ff ffda 	bl	8011e84 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8011ed0:	4b36      	ldr	r3, [pc, #216]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	701a      	strb	r2, [r3, #0]
      break;
 8011ed6:	e063      	b.n	8011fa0 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8011ed8:	f7fe fb0a 	bl	80104f0 <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8011edc:	2001      	movs	r0, #1
 8011ede:	f7f9 fe19 	bl	800bb14 <setSensorLock>
      HIDS_StartMeasurement();
 8011ee2:	f7ff fe41 	bl	8011b68 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8011ee6:	4b31      	ldr	r3, [pc, #196]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011ee8:	2202      	movs	r2, #2
 8011eea:	701a      	strb	r2, [r3, #0]
      break;
 8011eec:	e058      	b.n	8011fa0 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8011eee:	4a33      	ldr	r2, [pc, #204]	@ (8011fbc <HIDS_Upkeep+0x118>)
 8011ef0:	4b33      	ldr	r3, [pc, #204]	@ (8011fc0 <HIDS_Upkeep+0x11c>)
 8011ef2:	0011      	movs	r1, r2
 8011ef4:	0018      	movs	r0, r3
 8011ef6:	f7ff ff2f 	bl	8011d58 <HIDS_GetMeasurementValues>
 8011efa:	1e03      	subs	r3, r0, #0
 8011efc:	d04d      	beq.n	8011f9a <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8011efe:	4b2b      	ldr	r3, [pc, #172]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011f00:	2203      	movs	r2, #3
 8011f02:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 8011f04:	2000      	movs	r0, #0
 8011f06:	f7f9 fe05 	bl	800bb14 <setSensorLock>
      }
      break;
 8011f0a:	e046      	b.n	8011f9a <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8011f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8011fc0 <HIDS_Upkeep+0x11c>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	1c18      	adds	r0, r3, #0
 8011f12:	f7f1 faa7 	bl	8003464 <__aeabi_f2d>
 8011f16:	0004      	movs	r4, r0
 8011f18:	000d      	movs	r5, r1
 8011f1a:	4b28      	ldr	r3, [pc, #160]	@ (8011fbc <HIDS_Upkeep+0x118>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	1c18      	adds	r0, r3, #0
 8011f20:	f7f1 faa0 	bl	8003464 <__aeabi_f2d>
 8011f24:	0002      	movs	r2, r0
 8011f26:	000b      	movs	r3, r1
 8011f28:	4826      	ldr	r0, [pc, #152]	@ (8011fc4 <HIDS_Upkeep+0x120>)
 8011f2a:	4923      	ldr	r1, [pc, #140]	@ (8011fb8 <HIDS_Upkeep+0x114>)
 8011f2c:	9202      	str	r2, [sp, #8]
 8011f2e:	9303      	str	r3, [sp, #12]
 8011f30:	9400      	str	r4, [sp, #0]
 8011f32:	9501      	str	r5, [sp, #4]
 8011f34:	0002      	movs	r2, r0
 8011f36:	2003      	movs	r0, #3
 8011f38:	f7ff fc90 	bl	801185c <CreateLine>
      setHIDS(temp, humid);
 8011f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8011fbc <HIDS_Upkeep+0x118>)
 8011f3e:	681a      	ldr	r2, [r3, #0]
 8011f40:	4b1f      	ldr	r3, [pc, #124]	@ (8011fc0 <HIDS_Upkeep+0x11c>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	1c19      	adds	r1, r3, #0
 8011f46:	1c10      	adds	r0, r2, #0
 8011f48:	f7f2 fb1a 	bl	8004580 <setHIDS>
      ResetMeasurementIndicator();
 8011f4c:	f7fe fae8 	bl	8010520 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8011f50:	f000 f8d0 	bl	80120f4 <HAL_GetTick>
 8011f54:	0004      	movs	r4, r0
 8011f56:	f7f5 ff83 	bl	8007e60 <Check_USB_PowerOn>
 8011f5a:	1e03      	subs	r3, r0, #0
 8011f5c:	d103      	bne.n	8011f66 <HIDS_Upkeep+0xc2>
 8011f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8011fc8 <HIDS_Upkeep+0x124>)
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d001      	beq.n	8011f6a <HIDS_Upkeep+0xc6>
 8011f66:	4b19      	ldr	r3, [pc, #100]	@ (8011fcc <HIDS_Upkeep+0x128>)
 8011f68:	e001      	b.n	8011f6e <HIDS_Upkeep+0xca>
 8011f6a:	23fa      	movs	r3, #250	@ 0xfa
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	191a      	adds	r2, r3, r4
 8011f70:	4b17      	ldr	r3, [pc, #92]	@ (8011fd0 <HIDS_Upkeep+0x12c>)
 8011f72:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 8011f74:	4b0d      	ldr	r3, [pc, #52]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011f76:	2206      	movs	r2, #6
 8011f78:	701a      	strb	r2, [r3, #0]
      break;
 8011f7a:	e011      	b.n	8011fa0 <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8011f7c:	4b14      	ldr	r3, [pc, #80]	@ (8011fd0 <HIDS_Upkeep+0x12c>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	0018      	movs	r0, r3
 8011f82:	f7ff fc15 	bl	80117b0 <TimestampIsReached>
 8011f86:	1e03      	subs	r3, r0, #0
 8011f88:	d009      	beq.n	8011f9e <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 8011f8a:	4b08      	ldr	r3, [pc, #32]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011f90:	e005      	b.n	8011f9e <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8011f92:	4b06      	ldr	r3, [pc, #24]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011f94:	2200      	movs	r2, #0
 8011f96:	701a      	strb	r2, [r3, #0]
      break;
 8011f98:	e002      	b.n	8011fa0 <HIDS_Upkeep+0xfc>
      break;
 8011f9a:	46c0      	nop			@ (mov r8, r8)
 8011f9c:	e000      	b.n	8011fa0 <HIDS_Upkeep+0xfc>
      break;
 8011f9e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8011fa0:	4b02      	ldr	r3, [pc, #8]	@ (8011fac <HIDS_Upkeep+0x108>)
 8011fa2:	781b      	ldrb	r3, [r3, #0]
}
 8011fa4:	0018      	movs	r0, r3
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8011faa:	46c0      	nop			@ (mov r8, r8)
 8011fac:	200021e8 	.word	0x200021e8
 8011fb0:	0802b264 	.word	0x0802b264
 8011fb4:	0802acbc 	.word	0x0802acbc
 8011fb8:	0802acf0 	.word	0x0802acf0
 8011fbc:	200021c8 	.word	0x200021c8
 8011fc0:	200021c4 	.word	0x200021c4
 8011fc4:	0802acf4 	.word	0x0802acf4
 8011fc8:	20001e2e 	.word	0x20001e2e
 8011fcc:	00002710 	.word	0x00002710
 8011fd0:	200021e4 	.word	0x200021e4

08011fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8011fd4:	480d      	ldr	r0, [pc, #52]	@ (801200c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8011fd6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011fd8:	f7ff f844 	bl	8011064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011fdc:	480c      	ldr	r0, [pc, #48]	@ (8012010 <LoopForever+0x6>)
  ldr r1, =_edata
 8011fde:	490d      	ldr	r1, [pc, #52]	@ (8012014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8012018 <LoopForever+0xe>)
  movs r3, #0
 8011fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011fe4:	e002      	b.n	8011fec <LoopCopyDataInit>

08011fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011fea:	3304      	adds	r3, #4

08011fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011ff0:	d3f9      	bcc.n	8011fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011ff2:	4a0a      	ldr	r2, [pc, #40]	@ (801201c <LoopForever+0x12>)
  ldr r4, =_ebss
 8011ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8012020 <LoopForever+0x16>)
  movs r3, #0
 8011ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011ff8:	e001      	b.n	8011ffe <LoopFillZerobss>

08011ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011ffc:	3204      	adds	r2, #4

08011ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012000:	d3fb      	bcc.n	8011ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012002:	f011 fe33 	bl	8023c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012006:	f7f8 fe05 	bl	800ac14 <main>

0801200a <LoopForever>:

LoopForever:
    b LoopForever
 801200a:	e7fe      	b.n	801200a <LoopForever>
   ldr   r0, =_estack
 801200c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8012010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012014:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8012018:	0802bc30 	.word	0x0802bc30
  ldr r2, =_sbss
 801201c:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 8012020:	200035f0 	.word	0x200035f0

08012024 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012024:	e7fe      	b.n	8012024 <ADC1_COMP_IRQHandler>
	...

08012028 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801202e:	1dfb      	adds	r3, r7, #7
 8012030:	2200      	movs	r2, #0
 8012032:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8012034:	4b0b      	ldr	r3, [pc, #44]	@ (8012064 <HAL_Init+0x3c>)
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	4b0a      	ldr	r3, [pc, #40]	@ (8012064 <HAL_Init+0x3c>)
 801203a:	2140      	movs	r1, #64	@ 0x40
 801203c:	430a      	orrs	r2, r1
 801203e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012040:	2003      	movs	r0, #3
 8012042:	f000 f811 	bl	8012068 <HAL_InitTick>
 8012046:	1e03      	subs	r3, r0, #0
 8012048:	d003      	beq.n	8012052 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 801204a:	1dfb      	adds	r3, r7, #7
 801204c:	2201      	movs	r2, #1
 801204e:	701a      	strb	r2, [r3, #0]
 8012050:	e001      	b.n	8012056 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012052:	f7fe febb 	bl	8010dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012056:	1dfb      	adds	r3, r7, #7
 8012058:	781b      	ldrb	r3, [r3, #0]
}
 801205a:	0018      	movs	r0, r3
 801205c:	46bd      	mov	sp, r7
 801205e:	b002      	add	sp, #8
 8012060:	bd80      	pop	{r7, pc}
 8012062:	46c0      	nop			@ (mov r8, r8)
 8012064:	40022000 	.word	0x40022000

08012068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012068:	b590      	push	{r4, r7, lr}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8012070:	4b14      	ldr	r3, [pc, #80]	@ (80120c4 <HAL_InitTick+0x5c>)
 8012072:	681c      	ldr	r4, [r3, #0]
 8012074:	4b14      	ldr	r3, [pc, #80]	@ (80120c8 <HAL_InitTick+0x60>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	0019      	movs	r1, r3
 801207a:	23fa      	movs	r3, #250	@ 0xfa
 801207c:	0098      	lsls	r0, r3, #2
 801207e:	f7ee f891 	bl	80001a4 <__udivsi3>
 8012082:	0003      	movs	r3, r0
 8012084:	0019      	movs	r1, r3
 8012086:	0020      	movs	r0, r4
 8012088:	f7ee f88c 	bl	80001a4 <__udivsi3>
 801208c:	0003      	movs	r3, r0
 801208e:	0018      	movs	r0, r3
 8012090:	f000 fcfd 	bl	8012a8e <HAL_SYSTICK_Config>
 8012094:	1e03      	subs	r3, r0, #0
 8012096:	d001      	beq.n	801209c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8012098:	2301      	movs	r3, #1
 801209a:	e00f      	b.n	80120bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b03      	cmp	r3, #3
 80120a0:	d80b      	bhi.n	80120ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80120a2:	6879      	ldr	r1, [r7, #4]
 80120a4:	2301      	movs	r3, #1
 80120a6:	425b      	negs	r3, r3
 80120a8:	2200      	movs	r2, #0
 80120aa:	0018      	movs	r0, r3
 80120ac:	f000 fcc6 	bl	8012a3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80120b0:	4b06      	ldr	r3, [pc, #24]	@ (80120cc <HAL_InitTick+0x64>)
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	e000      	b.n	80120bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80120ba:	2301      	movs	r3, #1
}
 80120bc:	0018      	movs	r0, r3
 80120be:	46bd      	mov	sp, r7
 80120c0:	b003      	add	sp, #12
 80120c2:	bd90      	pop	{r4, r7, pc}
 80120c4:	200000e0 	.word	0x200000e0
 80120c8:	200000f4 	.word	0x200000f4
 80120cc:	200000f0 	.word	0x200000f0

080120d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80120d4:	4b05      	ldr	r3, [pc, #20]	@ (80120ec <HAL_IncTick+0x1c>)
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	001a      	movs	r2, r3
 80120da:	4b05      	ldr	r3, [pc, #20]	@ (80120f0 <HAL_IncTick+0x20>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	18d2      	adds	r2, r2, r3
 80120e0:	4b03      	ldr	r3, [pc, #12]	@ (80120f0 <HAL_IncTick+0x20>)
 80120e2:	601a      	str	r2, [r3, #0]
}
 80120e4:	46c0      	nop			@ (mov r8, r8)
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	46c0      	nop			@ (mov r8, r8)
 80120ec:	200000f4 	.word	0x200000f4
 80120f0:	200021ec 	.word	0x200021ec

080120f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	af00      	add	r7, sp, #0
  return uwTick;
 80120f8:	4b02      	ldr	r3, [pc, #8]	@ (8012104 <HAL_GetTick+0x10>)
 80120fa:	681b      	ldr	r3, [r3, #0]
}
 80120fc:	0018      	movs	r0, r3
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	46c0      	nop			@ (mov r8, r8)
 8012104:	200021ec 	.word	0x200021ec

08012108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012110:	f7ff fff0 	bl	80120f4 <HAL_GetTick>
 8012114:	0003      	movs	r3, r0
 8012116:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	3301      	adds	r3, #1
 8012120:	d005      	beq.n	801212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012122:	4b0a      	ldr	r3, [pc, #40]	@ (801214c <HAL_Delay+0x44>)
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	001a      	movs	r2, r3
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	189b      	adds	r3, r3, r2
 801212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801212e:	46c0      	nop			@ (mov r8, r8)
 8012130:	f7ff ffe0 	bl	80120f4 <HAL_GetTick>
 8012134:	0002      	movs	r2, r0
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	1ad3      	subs	r3, r2, r3
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	429a      	cmp	r2, r3
 801213e:	d8f7      	bhi.n	8012130 <HAL_Delay+0x28>
  {
  }
}
 8012140:	46c0      	nop			@ (mov r8, r8)
 8012142:	46c0      	nop			@ (mov r8, r8)
 8012144:	46bd      	mov	sp, r7
 8012146:	b004      	add	sp, #16
 8012148:	bd80      	pop	{r7, pc}
 801214a:	46c0      	nop			@ (mov r8, r8)
 801214c:	200000f4 	.word	0x200000f4

08012150 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8012154:	4b04      	ldr	r3, [pc, #16]	@ (8012168 <HAL_SuspendTick+0x18>)
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	4b03      	ldr	r3, [pc, #12]	@ (8012168 <HAL_SuspendTick+0x18>)
 801215a:	2102      	movs	r1, #2
 801215c:	438a      	bics	r2, r1
 801215e:	601a      	str	r2, [r3, #0]
}
 8012160:	46c0      	nop			@ (mov r8, r8)
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	46c0      	nop			@ (mov r8, r8)
 8012168:	e000e010 	.word	0xe000e010

0801216c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8012170:	4b04      	ldr	r3, [pc, #16]	@ (8012184 <HAL_ResumeTick+0x18>)
 8012172:	681a      	ldr	r2, [r3, #0]
 8012174:	4b03      	ldr	r3, [pc, #12]	@ (8012184 <HAL_ResumeTick+0x18>)
 8012176:	2102      	movs	r1, #2
 8012178:	430a      	orrs	r2, r1
 801217a:	601a      	str	r2, [r3, #0]
}
 801217c:	46c0      	nop			@ (mov r8, r8)
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	46c0      	nop			@ (mov r8, r8)
 8012184:	e000e010 	.word	0xe000e010

08012188 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 801218c:	4b02      	ldr	r3, [pc, #8]	@ (8012198 <HAL_GetUIDw0+0x10>)
 801218e:	681b      	ldr	r3, [r3, #0]
}
 8012190:	0018      	movs	r0, r3
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	46c0      	nop			@ (mov r8, r8)
 8012198:	1ff80050 	.word	0x1ff80050

0801219c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80121a0:	4b02      	ldr	r3, [pc, #8]	@ (80121ac <HAL_GetUIDw1+0x10>)
 80121a2:	681b      	ldr	r3, [r3, #0]
}
 80121a4:	0018      	movs	r0, r3
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	46c0      	nop			@ (mov r8, r8)
 80121ac:	1ff80054 	.word	0x1ff80054

080121b0 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80121b4:	4b02      	ldr	r3, [pc, #8]	@ (80121c0 <HAL_GetUIDw2+0x10>)
 80121b6:	681b      	ldr	r3, [r3, #0]
}
 80121b8:	0018      	movs	r0, r3
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	46c0      	nop			@ (mov r8, r8)
 80121c0:	1ff80064 	.word	0x1ff80064

080121c4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d101      	bne.n	80121d6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80121d2:	2301      	movs	r3, #1
 80121d4:	e159      	b.n	801248a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d10a      	bne.n	80121f4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2200      	movs	r2, #0
 80121e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2250      	movs	r2, #80	@ 0x50
 80121e8:	2100      	movs	r1, #0
 80121ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	0018      	movs	r0, r3
 80121f0:	f7f6 fcec 	bl	8008bcc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121f8:	2210      	movs	r2, #16
 80121fa:	4013      	ands	r3, r2
 80121fc:	2b10      	cmp	r3, #16
 80121fe:	d005      	beq.n	801220c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	689b      	ldr	r3, [r3, #8]
 8012206:	2204      	movs	r2, #4
 8012208:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 801220a:	d00b      	beq.n	8012224 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012210:	2210      	movs	r2, #16
 8012212:	431a      	orrs	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2250      	movs	r2, #80	@ 0x50
 801221c:	2100      	movs	r1, #0
 801221e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012220:	2301      	movs	r3, #1
 8012222:	e132      	b.n	801248a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012228:	4a9a      	ldr	r2, [pc, #616]	@ (8012494 <HAL_ADC_Init+0x2d0>)
 801222a:	4013      	ands	r3, r2
 801222c:	2202      	movs	r2, #2
 801222e:	431a      	orrs	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	2203      	movs	r2, #3
 801223c:	4013      	ands	r3, r2
 801223e:	2b01      	cmp	r3, #1
 8012240:	d108      	bne.n	8012254 <HAL_ADC_Init+0x90>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2201      	movs	r2, #1
 801224a:	4013      	ands	r3, r2
 801224c:	2b01      	cmp	r3, #1
 801224e:	d101      	bne.n	8012254 <HAL_ADC_Init+0x90>
 8012250:	2301      	movs	r3, #1
 8012252:	e000      	b.n	8012256 <HAL_ADC_Init+0x92>
 8012254:	2300      	movs	r3, #0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d149      	bne.n	80122ee <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	685a      	ldr	r2, [r3, #4]
 801225e:	23c0      	movs	r3, #192	@ 0xc0
 8012260:	061b      	lsls	r3, r3, #24
 8012262:	429a      	cmp	r2, r3
 8012264:	d00b      	beq.n	801227e <HAL_ADC_Init+0xba>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	685a      	ldr	r2, [r3, #4]
 801226a:	2380      	movs	r3, #128	@ 0x80
 801226c:	05db      	lsls	r3, r3, #23
 801226e:	429a      	cmp	r2, r3
 8012270:	d005      	beq.n	801227e <HAL_ADC_Init+0xba>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	2380      	movs	r3, #128	@ 0x80
 8012278:	061b      	lsls	r3, r3, #24
 801227a:	429a      	cmp	r2, r3
 801227c:	d111      	bne.n	80122a2 <HAL_ADC_Init+0xde>
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	691a      	ldr	r2, [r3, #16]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	0092      	lsls	r2, r2, #2
 801228a:	0892      	lsrs	r2, r2, #2
 801228c:	611a      	str	r2, [r3, #16]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	6919      	ldr	r1, [r3, #16]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	685a      	ldr	r2, [r3, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	430a      	orrs	r2, r1
 801229e:	611a      	str	r2, [r3, #16]
 80122a0:	e014      	b.n	80122cc <HAL_ADC_Init+0x108>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	691a      	ldr	r2, [r3, #16]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	0092      	lsls	r2, r2, #2
 80122ae:	0892      	lsrs	r2, r2, #2
 80122b0:	611a      	str	r2, [r3, #16]
 80122b2:	4b79      	ldr	r3, [pc, #484]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	4b78      	ldr	r3, [pc, #480]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122b8:	4978      	ldr	r1, [pc, #480]	@ (801249c <HAL_ADC_Init+0x2d8>)
 80122ba:	400a      	ands	r2, r1
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	4b76      	ldr	r3, [pc, #472]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122c0:	6819      	ldr	r1, [r3, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	685a      	ldr	r2, [r3, #4]
 80122c6:	4b74      	ldr	r3, [pc, #464]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122c8:	430a      	orrs	r2, r1
 80122ca:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	68da      	ldr	r2, [r3, #12]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2118      	movs	r1, #24
 80122d8:	438a      	bics	r2, r1
 80122da:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	68d9      	ldr	r1, [r3, #12]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	689a      	ldr	r2, [r3, #8]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	430a      	orrs	r2, r1
 80122ec:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80122ee:	4b6a      	ldr	r3, [pc, #424]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	4b69      	ldr	r3, [pc, #420]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122f4:	496a      	ldr	r1, [pc, #424]	@ (80124a0 <HAL_ADC_Init+0x2dc>)
 80122f6:	400a      	ands	r2, r1
 80122f8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80122fa:	4b67      	ldr	r3, [pc, #412]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 80122fc:	6819      	ldr	r1, [r3, #0]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012302:	065a      	lsls	r2, r3, #25
 8012304:	4b64      	ldr	r3, [pc, #400]	@ (8012498 <HAL_ADC_Init+0x2d4>)
 8012306:	430a      	orrs	r2, r1
 8012308:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	689a      	ldr	r2, [r3, #8]
 8012310:	2380      	movs	r3, #128	@ 0x80
 8012312:	055b      	lsls	r3, r3, #21
 8012314:	4013      	ands	r3, r2
 8012316:	d108      	bne.n	801232a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	689a      	ldr	r2, [r3, #8]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2180      	movs	r1, #128	@ 0x80
 8012324:	0549      	lsls	r1, r1, #21
 8012326:	430a      	orrs	r2, r1
 8012328:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68da      	ldr	r2, [r3, #12]
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	495b      	ldr	r1, [pc, #364]	@ (80124a4 <HAL_ADC_Init+0x2e0>)
 8012336:	400a      	ands	r2, r1
 8012338:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	68d9      	ldr	r1, [r3, #12]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	2b02      	cmp	r3, #2
 801234a:	d101      	bne.n	8012350 <HAL_ADC_Init+0x18c>
 801234c:	2304      	movs	r3, #4
 801234e:	e000      	b.n	8012352 <HAL_ADC_Init+0x18e>
 8012350:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8012352:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2020      	movs	r0, #32
 8012358:	5c1b      	ldrb	r3, [r3, r0]
 801235a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 801235c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	202c      	movs	r0, #44	@ 0x2c
 8012362:	5c1b      	ldrb	r3, [r3, r0]
 8012364:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8012366:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801236c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	699b      	ldr	r3, [r3, #24]
 8012372:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8012374:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	69db      	ldr	r3, [r3, #28]
 801237a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801237c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	430a      	orrs	r2, r1
 8012384:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801238a:	23c2      	movs	r3, #194	@ 0xc2
 801238c:	33ff      	adds	r3, #255	@ 0xff
 801238e:	429a      	cmp	r2, r3
 8012390:	d00b      	beq.n	80123aa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	68d9      	ldr	r1, [r3, #12]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80123a0:	431a      	orrs	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	430a      	orrs	r2, r1
 80123a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2221      	movs	r2, #33	@ 0x21
 80123ae:	5c9b      	ldrb	r3, [r3, r2]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d11a      	bne.n	80123ea <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2220      	movs	r2, #32
 80123b8:	5c9b      	ldrb	r3, [r3, r2]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d109      	bne.n	80123d2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	68da      	ldr	r2, [r3, #12]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2180      	movs	r1, #128	@ 0x80
 80123ca:	0249      	lsls	r1, r1, #9
 80123cc:	430a      	orrs	r2, r1
 80123ce:	60da      	str	r2, [r3, #12]
 80123d0:	e00b      	b.n	80123ea <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123d6:	2220      	movs	r2, #32
 80123d8:	431a      	orrs	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123e2:	2201      	movs	r2, #1
 80123e4:	431a      	orrs	r2, r3
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	d11f      	bne.n	8012432 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	691a      	ldr	r2, [r3, #16]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	492a      	ldr	r1, [pc, #168]	@ (80124a8 <HAL_ADC_Init+0x2e4>)
 80123fe:	400a      	ands	r2, r1
 8012400:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	6919      	ldr	r1, [r3, #16]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8012410:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8012416:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	430a      	orrs	r2, r1
 801241e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	691a      	ldr	r2, [r3, #16]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2101      	movs	r1, #1
 801242c:	430a      	orrs	r2, r1
 801242e:	611a      	str	r2, [r3, #16]
 8012430:	e00e      	b.n	8012450 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	691b      	ldr	r3, [r3, #16]
 8012438:	2201      	movs	r2, #1
 801243a:	4013      	ands	r3, r2
 801243c:	2b01      	cmp	r3, #1
 801243e:	d107      	bne.n	8012450 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	691a      	ldr	r2, [r3, #16]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2101      	movs	r1, #1
 801244c:	438a      	bics	r2, r1
 801244e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	695a      	ldr	r2, [r3, #20]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	2107      	movs	r1, #7
 801245c:	438a      	bics	r2, r1
 801245e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	6959      	ldr	r1, [r3, #20]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	430a      	orrs	r2, r1
 8012470:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2200      	movs	r2, #0
 8012476:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801247c:	2203      	movs	r2, #3
 801247e:	4393      	bics	r3, r2
 8012480:	2201      	movs	r2, #1
 8012482:	431a      	orrs	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8012488:	2300      	movs	r3, #0
}
 801248a:	0018      	movs	r0, r3
 801248c:	46bd      	mov	sp, r7
 801248e:	b002      	add	sp, #8
 8012490:	bd80      	pop	{r7, pc}
 8012492:	46c0      	nop			@ (mov r8, r8)
 8012494:	fffffefd 	.word	0xfffffefd
 8012498:	40012708 	.word	0x40012708
 801249c:	ffc3ffff 	.word	0xffc3ffff
 80124a0:	fdffffff 	.word	0xfdffffff
 80124a4:	fffe0219 	.word	0xfffe0219
 80124a8:	fffffc03 	.word	0xfffffc03

080124ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80124ac:	b590      	push	{r4, r7, lr}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80124b4:	230f      	movs	r3, #15
 80124b6:	18fb      	adds	r3, r7, r3
 80124b8:	2200      	movs	r2, #0
 80124ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	2204      	movs	r2, #4
 80124c4:	4013      	ands	r3, r2
 80124c6:	d138      	bne.n	801253a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2250      	movs	r2, #80	@ 0x50
 80124cc:	5c9b      	ldrb	r3, [r3, r2]
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d101      	bne.n	80124d6 <HAL_ADC_Start+0x2a>
 80124d2:	2302      	movs	r3, #2
 80124d4:	e038      	b.n	8012548 <HAL_ADC_Start+0x9c>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2250      	movs	r2, #80	@ 0x50
 80124da:	2101      	movs	r1, #1
 80124dc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	69db      	ldr	r3, [r3, #28]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d007      	beq.n	80124f6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80124e6:	230f      	movs	r3, #15
 80124e8:	18fc      	adds	r4, r7, r3
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	0018      	movs	r0, r3
 80124ee:	f000 f95f 	bl	80127b0 <ADC_Enable>
 80124f2:	0003      	movs	r3, r0
 80124f4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80124f6:	230f      	movs	r3, #15
 80124f8:	18fb      	adds	r3, r7, r3
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d120      	bne.n	8012542 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012504:	4a12      	ldr	r2, [pc, #72]	@ (8012550 <HAL_ADC_Start+0xa4>)
 8012506:	4013      	ands	r3, r2
 8012508:	2280      	movs	r2, #128	@ 0x80
 801250a:	0052      	lsls	r2, r2, #1
 801250c:	431a      	orrs	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2250      	movs	r2, #80	@ 0x50
 801251c:	2100      	movs	r1, #0
 801251e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	221c      	movs	r2, #28
 8012526:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	689a      	ldr	r2, [r3, #8]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2104      	movs	r1, #4
 8012534:	430a      	orrs	r2, r1
 8012536:	609a      	str	r2, [r3, #8]
 8012538:	e003      	b.n	8012542 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801253a:	230f      	movs	r3, #15
 801253c:	18fb      	adds	r3, r7, r3
 801253e:	2202      	movs	r2, #2
 8012540:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8012542:	230f      	movs	r3, #15
 8012544:	18fb      	adds	r3, r7, r3
 8012546:	781b      	ldrb	r3, [r3, #0]
}
 8012548:	0018      	movs	r0, r3
 801254a:	46bd      	mov	sp, r7
 801254c:	b005      	add	sp, #20
 801254e:	bd90      	pop	{r4, r7, pc}
 8012550:	fffff0fe 	.word	0xfffff0fe

08012554 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8012562:	2300      	movs	r3, #0
 8012564:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	695b      	ldr	r3, [r3, #20]
 801256a:	2b08      	cmp	r3, #8
 801256c:	d102      	bne.n	8012574 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801256e:	2308      	movs	r3, #8
 8012570:	60fb      	str	r3, [r7, #12]
 8012572:	e014      	b.n	801259e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	68db      	ldr	r3, [r3, #12]
 801257a:	2201      	movs	r2, #1
 801257c:	4013      	ands	r3, r2
 801257e:	2b01      	cmp	r3, #1
 8012580:	d10b      	bne.n	801259a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012586:	2220      	movs	r2, #32
 8012588:	431a      	orrs	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2250      	movs	r2, #80	@ 0x50
 8012592:	2100      	movs	r1, #0
 8012594:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8012596:	2301      	movs	r3, #1
 8012598:	e072      	b.n	8012680 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801259a:	230c      	movs	r3, #12
 801259c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801259e:	f7ff fda9 	bl	80120f4 <HAL_GetTick>
 80125a2:	0003      	movs	r3, r0
 80125a4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80125a6:	e01f      	b.n	80125e8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	3301      	adds	r3, #1
 80125ac:	d01c      	beq.n	80125e8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d007      	beq.n	80125c4 <HAL_ADC_PollForConversion+0x70>
 80125b4:	f7ff fd9e 	bl	80120f4 <HAL_GetTick>
 80125b8:	0002      	movs	r2, r0
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	1ad3      	subs	r3, r2, r3
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d211      	bcs.n	80125e8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	68fa      	ldr	r2, [r7, #12]
 80125cc:	4013      	ands	r3, r2
 80125ce:	d10b      	bne.n	80125e8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125d4:	2204      	movs	r2, #4
 80125d6:	431a      	orrs	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2250      	movs	r2, #80	@ 0x50
 80125e0:	2100      	movs	r1, #0
 80125e2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80125e4:	2303      	movs	r3, #3
 80125e6:	e04b      	b.n	8012680 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	68fa      	ldr	r2, [r7, #12]
 80125f0:	4013      	ands	r3, r2
 80125f2:	d0d9      	beq.n	80125a8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125f8:	2280      	movs	r2, #128	@ 0x80
 80125fa:	0092      	lsls	r2, r2, #2
 80125fc:	431a      	orrs	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	68da      	ldr	r2, [r3, #12]
 8012608:	23c0      	movs	r3, #192	@ 0xc0
 801260a:	011b      	lsls	r3, r3, #4
 801260c:	4013      	ands	r3, r2
 801260e:	d12e      	bne.n	801266e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2220      	movs	r2, #32
 8012614:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8012616:	2b00      	cmp	r3, #0
 8012618:	d129      	bne.n	801266e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	2208      	movs	r2, #8
 8012622:	4013      	ands	r3, r2
 8012624:	2b08      	cmp	r3, #8
 8012626:	d122      	bne.n	801266e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	689b      	ldr	r3, [r3, #8]
 801262e:	2204      	movs	r2, #4
 8012630:	4013      	ands	r3, r2
 8012632:	d110      	bne.n	8012656 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	685a      	ldr	r2, [r3, #4]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	210c      	movs	r1, #12
 8012640:	438a      	bics	r2, r1
 8012642:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012648:	4a0f      	ldr	r2, [pc, #60]	@ (8012688 <HAL_ADC_PollForConversion+0x134>)
 801264a:	4013      	ands	r3, r2
 801264c:	2201      	movs	r2, #1
 801264e:	431a      	orrs	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	655a      	str	r2, [r3, #84]	@ 0x54
 8012654:	e00b      	b.n	801266e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801265a:	2220      	movs	r2, #32
 801265c:	431a      	orrs	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012666:	2201      	movs	r2, #1
 8012668:	431a      	orrs	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	699b      	ldr	r3, [r3, #24]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d103      	bne.n	801267e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	220c      	movs	r2, #12
 801267c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801267e:	2300      	movs	r3, #0
}
 8012680:	0018      	movs	r0, r3
 8012682:	46bd      	mov	sp, r7
 8012684:	b004      	add	sp, #16
 8012686:	bd80      	pop	{r7, pc}
 8012688:	fffffefe 	.word	0xfffffefe

0801268c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801269a:	0018      	movs	r0, r3
 801269c:	46bd      	mov	sp, r7
 801269e:	b002      	add	sp, #8
 80126a0:	bd80      	pop	{r7, pc}
	...

080126a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2250      	movs	r2, #80	@ 0x50
 80126b2:	5c9b      	ldrb	r3, [r3, r2]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d101      	bne.n	80126bc <HAL_ADC_ConfigChannel+0x18>
 80126b8:	2302      	movs	r3, #2
 80126ba:	e06c      	b.n	8012796 <HAL_ADC_ConfigChannel+0xf2>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2250      	movs	r2, #80	@ 0x50
 80126c0:	2101      	movs	r1, #1
 80126c2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	689b      	ldr	r3, [r3, #8]
 80126ca:	2204      	movs	r2, #4
 80126cc:	4013      	ands	r3, r2
 80126ce:	d00b      	beq.n	80126e8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126d4:	2220      	movs	r2, #32
 80126d6:	431a      	orrs	r2, r3
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2250      	movs	r2, #80	@ 0x50
 80126e0:	2100      	movs	r1, #0
 80126e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80126e4:	2301      	movs	r3, #1
 80126e6:	e056      	b.n	8012796 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	4a2c      	ldr	r2, [pc, #176]	@ (80127a0 <HAL_ADC_ConfigChannel+0xfc>)
 80126ee:	4293      	cmp	r3, r2
 80126f0:	d028      	beq.n	8012744 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	035b      	lsls	r3, r3, #13
 80126fe:	0b5a      	lsrs	r2, r3, #13
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	430a      	orrs	r2, r1
 8012706:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	681a      	ldr	r2, [r3, #0]
 801270c:	2380      	movs	r3, #128	@ 0x80
 801270e:	02db      	lsls	r3, r3, #11
 8012710:	4013      	ands	r3, r2
 8012712:	d009      	beq.n	8012728 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8012714:	4b23      	ldr	r3, [pc, #140]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 8012716:	681a      	ldr	r2, [r3, #0]
 8012718:	4b22      	ldr	r3, [pc, #136]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 801271a:	2180      	movs	r1, #128	@ 0x80
 801271c:	0409      	lsls	r1, r1, #16
 801271e:	430a      	orrs	r2, r1
 8012720:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8012722:	200a      	movs	r0, #10
 8012724:	f000 f8ac 	bl	8012880 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	681a      	ldr	r2, [r3, #0]
 801272c:	2380      	movs	r3, #128	@ 0x80
 801272e:	029b      	lsls	r3, r3, #10
 8012730:	4013      	ands	r3, r2
 8012732:	d02b      	beq.n	801278c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8012734:	4b1b      	ldr	r3, [pc, #108]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	4b1a      	ldr	r3, [pc, #104]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 801273a:	2180      	movs	r1, #128	@ 0x80
 801273c:	03c9      	lsls	r1, r1, #15
 801273e:	430a      	orrs	r2, r1
 8012740:	601a      	str	r2, [r3, #0]
 8012742:	e023      	b.n	801278c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	035b      	lsls	r3, r3, #13
 8012750:	0b5b      	lsrs	r3, r3, #13
 8012752:	43d9      	mvns	r1, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	400a      	ands	r2, r1
 801275a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	2380      	movs	r3, #128	@ 0x80
 8012762:	02db      	lsls	r3, r3, #11
 8012764:	4013      	ands	r3, r2
 8012766:	d005      	beq.n	8012774 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8012768:	4b0e      	ldr	r3, [pc, #56]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 801276a:	681a      	ldr	r2, [r3, #0]
 801276c:	4b0d      	ldr	r3, [pc, #52]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 801276e:	490e      	ldr	r1, [pc, #56]	@ (80127a8 <HAL_ADC_ConfigChannel+0x104>)
 8012770:	400a      	ands	r2, r1
 8012772:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	681a      	ldr	r2, [r3, #0]
 8012778:	2380      	movs	r3, #128	@ 0x80
 801277a:	029b      	lsls	r3, r3, #10
 801277c:	4013      	ands	r3, r2
 801277e:	d005      	beq.n	801278c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8012780:	4b08      	ldr	r3, [pc, #32]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	4b07      	ldr	r3, [pc, #28]	@ (80127a4 <HAL_ADC_ConfigChannel+0x100>)
 8012786:	4909      	ldr	r1, [pc, #36]	@ (80127ac <HAL_ADC_ConfigChannel+0x108>)
 8012788:	400a      	ands	r2, r1
 801278a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2250      	movs	r2, #80	@ 0x50
 8012790:	2100      	movs	r1, #0
 8012792:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8012794:	2300      	movs	r3, #0
}
 8012796:	0018      	movs	r0, r3
 8012798:	46bd      	mov	sp, r7
 801279a:	b002      	add	sp, #8
 801279c:	bd80      	pop	{r7, pc}
 801279e:	46c0      	nop			@ (mov r8, r8)
 80127a0:	00001001 	.word	0x00001001
 80127a4:	40012708 	.word	0x40012708
 80127a8:	ff7fffff 	.word	0xff7fffff
 80127ac:	ffbfffff 	.word	0xffbfffff

080127b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80127b8:	2300      	movs	r3, #0
 80127ba:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	689b      	ldr	r3, [r3, #8]
 80127c2:	2203      	movs	r2, #3
 80127c4:	4013      	ands	r3, r2
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d108      	bne.n	80127dc <ADC_Enable+0x2c>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2201      	movs	r2, #1
 80127d2:	4013      	ands	r3, r2
 80127d4:	2b01      	cmp	r3, #1
 80127d6:	d101      	bne.n	80127dc <ADC_Enable+0x2c>
 80127d8:	2301      	movs	r3, #1
 80127da:	e000      	b.n	80127de <ADC_Enable+0x2e>
 80127dc:	2300      	movs	r3, #0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d146      	bne.n	8012870 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	689b      	ldr	r3, [r3, #8]
 80127e8:	4a24      	ldr	r2, [pc, #144]	@ (801287c <ADC_Enable+0xcc>)
 80127ea:	4013      	ands	r3, r2
 80127ec:	d00d      	beq.n	801280a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127f2:	2210      	movs	r2, #16
 80127f4:	431a      	orrs	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127fe:	2201      	movs	r2, #1
 8012800:	431a      	orrs	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8012806:	2301      	movs	r3, #1
 8012808:	e033      	b.n	8012872 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	689a      	ldr	r2, [r3, #8]
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2101      	movs	r1, #1
 8012816:	430a      	orrs	r2, r1
 8012818:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 801281a:	2001      	movs	r0, #1
 801281c:	f000 f830 	bl	8012880 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8012820:	f7ff fc68 	bl	80120f4 <HAL_GetTick>
 8012824:	0003      	movs	r3, r0
 8012826:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8012828:	e01b      	b.n	8012862 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801282a:	f7ff fc63 	bl	80120f4 <HAL_GetTick>
 801282e:	0002      	movs	r2, r0
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	1ad3      	subs	r3, r2, r3
 8012834:	2b0a      	cmp	r3, #10
 8012836:	d914      	bls.n	8012862 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2201      	movs	r2, #1
 8012840:	4013      	ands	r3, r2
 8012842:	2b01      	cmp	r3, #1
 8012844:	d00d      	beq.n	8012862 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801284a:	2210      	movs	r2, #16
 801284c:	431a      	orrs	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012856:	2201      	movs	r2, #1
 8012858:	431a      	orrs	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801285e:	2301      	movs	r3, #1
 8012860:	e007      	b.n	8012872 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	2201      	movs	r2, #1
 801286a:	4013      	ands	r3, r2
 801286c:	2b01      	cmp	r3, #1
 801286e:	d1dc      	bne.n	801282a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8012870:	2300      	movs	r3, #0
}
 8012872:	0018      	movs	r0, r3
 8012874:	46bd      	mov	sp, r7
 8012876:	b004      	add	sp, #16
 8012878:	bd80      	pop	{r7, pc}
 801287a:	46c0      	nop			@ (mov r8, r8)
 801287c:	80000017 	.word	0x80000017

08012880 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8012888:	4b0b      	ldr	r3, [pc, #44]	@ (80128b8 <ADC_DelayMicroSecond+0x38>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	490b      	ldr	r1, [pc, #44]	@ (80128bc <ADC_DelayMicroSecond+0x3c>)
 801288e:	0018      	movs	r0, r3
 8012890:	f7ed fc88 	bl	80001a4 <__udivsi3>
 8012894:	0003      	movs	r3, r0
 8012896:	001a      	movs	r2, r3
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4353      	muls	r3, r2
 801289c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801289e:	e002      	b.n	80128a6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	3b01      	subs	r3, #1
 80128a4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1f9      	bne.n	80128a0 <ADC_DelayMicroSecond+0x20>
  }
}
 80128ac:	46c0      	nop			@ (mov r8, r8)
 80128ae:	46c0      	nop			@ (mov r8, r8)
 80128b0:	46bd      	mov	sp, r7
 80128b2:	b004      	add	sp, #16
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	46c0      	nop			@ (mov r8, r8)
 80128b8:	200000e0 	.word	0x200000e0
 80128bc:	000f4240 	.word	0x000f4240

080128c0 <__NVIC_EnableIRQ>:
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	0002      	movs	r2, r0
 80128c8:	1dfb      	adds	r3, r7, #7
 80128ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80128cc:	1dfb      	adds	r3, r7, #7
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80128d2:	d809      	bhi.n	80128e8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80128d4:	1dfb      	adds	r3, r7, #7
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	001a      	movs	r2, r3
 80128da:	231f      	movs	r3, #31
 80128dc:	401a      	ands	r2, r3
 80128de:	4b04      	ldr	r3, [pc, #16]	@ (80128f0 <__NVIC_EnableIRQ+0x30>)
 80128e0:	2101      	movs	r1, #1
 80128e2:	4091      	lsls	r1, r2
 80128e4:	000a      	movs	r2, r1
 80128e6:	601a      	str	r2, [r3, #0]
}
 80128e8:	46c0      	nop			@ (mov r8, r8)
 80128ea:	46bd      	mov	sp, r7
 80128ec:	b002      	add	sp, #8
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	e000e100 	.word	0xe000e100

080128f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80128f4:	b590      	push	{r4, r7, lr}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	0002      	movs	r2, r0
 80128fc:	6039      	str	r1, [r7, #0]
 80128fe:	1dfb      	adds	r3, r7, #7
 8012900:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012902:	1dfb      	adds	r3, r7, #7
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	2b7f      	cmp	r3, #127	@ 0x7f
 8012908:	d828      	bhi.n	801295c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801290a:	4a2f      	ldr	r2, [pc, #188]	@ (80129c8 <__NVIC_SetPriority+0xd4>)
 801290c:	1dfb      	adds	r3, r7, #7
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	b25b      	sxtb	r3, r3
 8012912:	089b      	lsrs	r3, r3, #2
 8012914:	33c0      	adds	r3, #192	@ 0xc0
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	589b      	ldr	r3, [r3, r2]
 801291a:	1dfa      	adds	r2, r7, #7
 801291c:	7812      	ldrb	r2, [r2, #0]
 801291e:	0011      	movs	r1, r2
 8012920:	2203      	movs	r2, #3
 8012922:	400a      	ands	r2, r1
 8012924:	00d2      	lsls	r2, r2, #3
 8012926:	21ff      	movs	r1, #255	@ 0xff
 8012928:	4091      	lsls	r1, r2
 801292a:	000a      	movs	r2, r1
 801292c:	43d2      	mvns	r2, r2
 801292e:	401a      	ands	r2, r3
 8012930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	019b      	lsls	r3, r3, #6
 8012936:	22ff      	movs	r2, #255	@ 0xff
 8012938:	401a      	ands	r2, r3
 801293a:	1dfb      	adds	r3, r7, #7
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	0018      	movs	r0, r3
 8012940:	2303      	movs	r3, #3
 8012942:	4003      	ands	r3, r0
 8012944:	00db      	lsls	r3, r3, #3
 8012946:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012948:	481f      	ldr	r0, [pc, #124]	@ (80129c8 <__NVIC_SetPriority+0xd4>)
 801294a:	1dfb      	adds	r3, r7, #7
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	b25b      	sxtb	r3, r3
 8012950:	089b      	lsrs	r3, r3, #2
 8012952:	430a      	orrs	r2, r1
 8012954:	33c0      	adds	r3, #192	@ 0xc0
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801295a:	e031      	b.n	80129c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801295c:	4a1b      	ldr	r2, [pc, #108]	@ (80129cc <__NVIC_SetPriority+0xd8>)
 801295e:	1dfb      	adds	r3, r7, #7
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	0019      	movs	r1, r3
 8012964:	230f      	movs	r3, #15
 8012966:	400b      	ands	r3, r1
 8012968:	3b08      	subs	r3, #8
 801296a:	089b      	lsrs	r3, r3, #2
 801296c:	3306      	adds	r3, #6
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	18d3      	adds	r3, r2, r3
 8012972:	3304      	adds	r3, #4
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	1dfa      	adds	r2, r7, #7
 8012978:	7812      	ldrb	r2, [r2, #0]
 801297a:	0011      	movs	r1, r2
 801297c:	2203      	movs	r2, #3
 801297e:	400a      	ands	r2, r1
 8012980:	00d2      	lsls	r2, r2, #3
 8012982:	21ff      	movs	r1, #255	@ 0xff
 8012984:	4091      	lsls	r1, r2
 8012986:	000a      	movs	r2, r1
 8012988:	43d2      	mvns	r2, r2
 801298a:	401a      	ands	r2, r3
 801298c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	019b      	lsls	r3, r3, #6
 8012992:	22ff      	movs	r2, #255	@ 0xff
 8012994:	401a      	ands	r2, r3
 8012996:	1dfb      	adds	r3, r7, #7
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	0018      	movs	r0, r3
 801299c:	2303      	movs	r3, #3
 801299e:	4003      	ands	r3, r0
 80129a0:	00db      	lsls	r3, r3, #3
 80129a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80129a4:	4809      	ldr	r0, [pc, #36]	@ (80129cc <__NVIC_SetPriority+0xd8>)
 80129a6:	1dfb      	adds	r3, r7, #7
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	001c      	movs	r4, r3
 80129ac:	230f      	movs	r3, #15
 80129ae:	4023      	ands	r3, r4
 80129b0:	3b08      	subs	r3, #8
 80129b2:	089b      	lsrs	r3, r3, #2
 80129b4:	430a      	orrs	r2, r1
 80129b6:	3306      	adds	r3, #6
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	18c3      	adds	r3, r0, r3
 80129bc:	3304      	adds	r3, #4
 80129be:	601a      	str	r2, [r3, #0]
}
 80129c0:	46c0      	nop			@ (mov r8, r8)
 80129c2:	46bd      	mov	sp, r7
 80129c4:	b003      	add	sp, #12
 80129c6:	bd90      	pop	{r4, r7, pc}
 80129c8:	e000e100 	.word	0xe000e100
 80129cc:	e000ed00 	.word	0xe000ed00

080129d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80129d4:	f3bf 8f4f 	dsb	sy
}
 80129d8:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80129da:	4b04      	ldr	r3, [pc, #16]	@ (80129ec <__NVIC_SystemReset+0x1c>)
 80129dc:	4a04      	ldr	r2, [pc, #16]	@ (80129f0 <__NVIC_SystemReset+0x20>)
 80129de:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80129e0:	f3bf 8f4f 	dsb	sy
}
 80129e4:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80129e6:	46c0      	nop			@ (mov r8, r8)
 80129e8:	e7fd      	b.n	80129e6 <__NVIC_SystemReset+0x16>
 80129ea:	46c0      	nop			@ (mov r8, r8)
 80129ec:	e000ed00 	.word	0xe000ed00
 80129f0:	05fa0004 	.word	0x05fa0004

080129f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b082      	sub	sp, #8
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	1e5a      	subs	r2, r3, #1
 8012a00:	2380      	movs	r3, #128	@ 0x80
 8012a02:	045b      	lsls	r3, r3, #17
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d301      	bcc.n	8012a0c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e010      	b.n	8012a2e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a38 <SysTick_Config+0x44>)
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	3a01      	subs	r2, #1
 8012a12:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012a14:	2301      	movs	r3, #1
 8012a16:	425b      	negs	r3, r3
 8012a18:	2103      	movs	r1, #3
 8012a1a:	0018      	movs	r0, r3
 8012a1c:	f7ff ff6a 	bl	80128f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012a20:	4b05      	ldr	r3, [pc, #20]	@ (8012a38 <SysTick_Config+0x44>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012a26:	4b04      	ldr	r3, [pc, #16]	@ (8012a38 <SysTick_Config+0x44>)
 8012a28:	2207      	movs	r2, #7
 8012a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012a2c:	2300      	movs	r3, #0
}
 8012a2e:	0018      	movs	r0, r3
 8012a30:	46bd      	mov	sp, r7
 8012a32:	b002      	add	sp, #8
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	46c0      	nop			@ (mov r8, r8)
 8012a38:	e000e010 	.word	0xe000e010

08012a3c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60b9      	str	r1, [r7, #8]
 8012a44:	607a      	str	r2, [r7, #4]
 8012a46:	210f      	movs	r1, #15
 8012a48:	187b      	adds	r3, r7, r1
 8012a4a:	1c02      	adds	r2, r0, #0
 8012a4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8012a4e:	68ba      	ldr	r2, [r7, #8]
 8012a50:	187b      	adds	r3, r7, r1
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	b25b      	sxtb	r3, r3
 8012a56:	0011      	movs	r1, r2
 8012a58:	0018      	movs	r0, r3
 8012a5a:	f7ff ff4b 	bl	80128f4 <__NVIC_SetPriority>
}
 8012a5e:	46c0      	nop			@ (mov r8, r8)
 8012a60:	46bd      	mov	sp, r7
 8012a62:	b004      	add	sp, #16
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b082      	sub	sp, #8
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	0002      	movs	r2, r0
 8012a6e:	1dfb      	adds	r3, r7, #7
 8012a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012a72:	1dfb      	adds	r3, r7, #7
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	b25b      	sxtb	r3, r3
 8012a78:	0018      	movs	r0, r3
 8012a7a:	f7ff ff21 	bl	80128c0 <__NVIC_EnableIRQ>
}
 8012a7e:	46c0      	nop			@ (mov r8, r8)
 8012a80:	46bd      	mov	sp, r7
 8012a82:	b002      	add	sp, #8
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8012a86:	b580      	push	{r7, lr}
 8012a88:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8012a8a:	f7ff ffa1 	bl	80129d0 <__NVIC_SystemReset>

08012a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b082      	sub	sp, #8
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	0018      	movs	r0, r3
 8012a9a:	f7ff ffab 	bl	80129f4 <SysTick_Config>
 8012a9e:	0003      	movs	r3, r0
}
 8012aa0:	0018      	movs	r0, r3
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	b002      	add	sp, #8
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d101      	bne.n	8012aba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	e061      	b.n	8012b7e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4a32      	ldr	r2, [pc, #200]	@ (8012b88 <HAL_DMA_Init+0xe0>)
 8012ac0:	4694      	mov	ip, r2
 8012ac2:	4463      	add	r3, ip
 8012ac4:	2114      	movs	r1, #20
 8012ac6:	0018      	movs	r0, r3
 8012ac8:	f7ed fb6c 	bl	80001a4 <__udivsi3>
 8012acc:	0003      	movs	r3, r0
 8012ace:	009a      	lsls	r2, r3, #2
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8012b8c <HAL_DMA_Init+0xe4>)
 8012ad8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2225      	movs	r2, #37	@ 0x25
 8012ade:	2102      	movs	r1, #2
 8012ae0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	4a28      	ldr	r2, [pc, #160]	@ (8012b90 <HAL_DMA_Init+0xe8>)
 8012aee:	4013      	ands	r3, r2
 8012af0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8012afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	691b      	ldr	r3, [r3, #16]
 8012b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	699b      	ldr	r3, [r3, #24]
 8012b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6a1b      	ldr	r3, [r3, #32]
 8012b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8012b1a:	68fa      	ldr	r2, [r7, #12]
 8012b1c:	4313      	orrs	r3, r2
 8012b1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	689a      	ldr	r2, [r3, #8]
 8012b2c:	2380      	movs	r3, #128	@ 0x80
 8012b2e:	01db      	lsls	r3, r3, #7
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d018      	beq.n	8012b66 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8012b34:	4b17      	ldr	r3, [pc, #92]	@ (8012b94 <HAL_DMA_Init+0xec>)
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b3c:	211c      	movs	r1, #28
 8012b3e:	400b      	ands	r3, r1
 8012b40:	210f      	movs	r1, #15
 8012b42:	4099      	lsls	r1, r3
 8012b44:	000b      	movs	r3, r1
 8012b46:	43d9      	mvns	r1, r3
 8012b48:	4b12      	ldr	r3, [pc, #72]	@ (8012b94 <HAL_DMA_Init+0xec>)
 8012b4a:	400a      	ands	r2, r1
 8012b4c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8012b4e:	4b11      	ldr	r3, [pc, #68]	@ (8012b94 <HAL_DMA_Init+0xec>)
 8012b50:	6819      	ldr	r1, [r3, #0]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	685a      	ldr	r2, [r3, #4]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b5a:	201c      	movs	r0, #28
 8012b5c:	4003      	ands	r3, r0
 8012b5e:	409a      	lsls	r2, r3
 8012b60:	4b0c      	ldr	r3, [pc, #48]	@ (8012b94 <HAL_DMA_Init+0xec>)
 8012b62:	430a      	orrs	r2, r1
 8012b64:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2225      	movs	r2, #37	@ 0x25
 8012b70:	2101      	movs	r1, #1
 8012b72:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2224      	movs	r2, #36	@ 0x24
 8012b78:	2100      	movs	r1, #0
 8012b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b7c:	2300      	movs	r3, #0
}
 8012b7e:	0018      	movs	r0, r3
 8012b80:	46bd      	mov	sp, r7
 8012b82:	b004      	add	sp, #16
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	46c0      	nop			@ (mov r8, r8)
 8012b88:	bffdfff8 	.word	0xbffdfff8
 8012b8c:	40020000 	.word	0x40020000
 8012b90:	ffff800f 	.word	0xffff800f
 8012b94:	400200a8 	.word	0x400200a8

08012b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b086      	sub	sp, #24
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
 8012ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ba6:	2317      	movs	r3, #23
 8012ba8:	18fb      	adds	r3, r7, r3
 8012baa:	2200      	movs	r2, #0
 8012bac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	2224      	movs	r2, #36	@ 0x24
 8012bb2:	5c9b      	ldrb	r3, [r3, r2]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d101      	bne.n	8012bbc <HAL_DMA_Start_IT+0x24>
 8012bb8:	2302      	movs	r3, #2
 8012bba:	e04f      	b.n	8012c5c <HAL_DMA_Start_IT+0xc4>
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2224      	movs	r2, #36	@ 0x24
 8012bc0:	2101      	movs	r1, #1
 8012bc2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2225      	movs	r2, #37	@ 0x25
 8012bc8:	5c9b      	ldrb	r3, [r3, r2]
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d13a      	bne.n	8012c46 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2225      	movs	r2, #37	@ 0x25
 8012bd4:	2102      	movs	r1, #2
 8012bd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2101      	movs	r1, #1
 8012bea:	438a      	bics	r2, r1
 8012bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	68b9      	ldr	r1, [r7, #8]
 8012bf4:	68f8      	ldr	r0, [r7, #12]
 8012bf6:	f000 f976 	bl	8012ee6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d008      	beq.n	8012c14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	210e      	movs	r1, #14
 8012c0e:	430a      	orrs	r2, r1
 8012c10:	601a      	str	r2, [r3, #0]
 8012c12:	e00f      	b.n	8012c34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2104      	movs	r1, #4
 8012c20:	438a      	bics	r2, r1
 8012c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	210a      	movs	r1, #10
 8012c30:	430a      	orrs	r2, r1
 8012c32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	2101      	movs	r1, #1
 8012c40:	430a      	orrs	r2, r1
 8012c42:	601a      	str	r2, [r3, #0]
 8012c44:	e007      	b.n	8012c56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2224      	movs	r2, #36	@ 0x24
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8012c4e:	2317      	movs	r3, #23
 8012c50:	18fb      	adds	r3, r7, r3
 8012c52:	2202      	movs	r2, #2
 8012c54:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8012c56:	2317      	movs	r3, #23
 8012c58:	18fb      	adds	r3, r7, r3
 8012c5a:	781b      	ldrb	r3, [r3, #0]
}
 8012c5c:	0018      	movs	r0, r3
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	b006      	add	sp, #24
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b084      	sub	sp, #16
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c6c:	230f      	movs	r3, #15
 8012c6e:	18fb      	adds	r3, r7, r3
 8012c70:	2200      	movs	r2, #0
 8012c72:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2225      	movs	r2, #37	@ 0x25
 8012c78:	5c9b      	ldrb	r3, [r3, r2]
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d008      	beq.n	8012c92 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2204      	movs	r2, #4
 8012c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2224      	movs	r2, #36	@ 0x24
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8012c8e:	2301      	movs	r3, #1
 8012c90:	e024      	b.n	8012cdc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	681a      	ldr	r2, [r3, #0]
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	210e      	movs	r1, #14
 8012c9e:	438a      	bics	r2, r1
 8012ca0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2101      	movs	r1, #1
 8012cae:	438a      	bics	r2, r1
 8012cb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cb6:	221c      	movs	r2, #28
 8012cb8:	401a      	ands	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cbe:	2101      	movs	r1, #1
 8012cc0:	4091      	lsls	r1, r2
 8012cc2:	000a      	movs	r2, r1
 8012cc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2225      	movs	r2, #37	@ 0x25
 8012cca:	2101      	movs	r1, #1
 8012ccc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2224      	movs	r2, #36	@ 0x24
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	5499      	strb	r1, [r3, r2]

    return status;
 8012cd6:	230f      	movs	r3, #15
 8012cd8:	18fb      	adds	r3, r7, r3
 8012cda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012cdc:	0018      	movs	r0, r3
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	b004      	add	sp, #16
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012cec:	210f      	movs	r1, #15
 8012cee:	187b      	adds	r3, r7, r1
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2225      	movs	r2, #37	@ 0x25
 8012cf8:	5c9b      	ldrb	r3, [r3, r2]
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	2b02      	cmp	r3, #2
 8012cfe:	d006      	beq.n	8012d0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2204      	movs	r2, #4
 8012d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012d06:	187b      	adds	r3, r7, r1
 8012d08:	2201      	movs	r2, #1
 8012d0a:	701a      	strb	r2, [r3, #0]
 8012d0c:	e02a      	b.n	8012d64 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	210e      	movs	r1, #14
 8012d1a:	438a      	bics	r2, r1
 8012d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2101      	movs	r1, #1
 8012d2a:	438a      	bics	r2, r1
 8012d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d32:	221c      	movs	r2, #28
 8012d34:	401a      	ands	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d3a:	2101      	movs	r1, #1
 8012d3c:	4091      	lsls	r1, r2
 8012d3e:	000a      	movs	r2, r1
 8012d40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2225      	movs	r2, #37	@ 0x25
 8012d46:	2101      	movs	r1, #1
 8012d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2224      	movs	r2, #36	@ 0x24
 8012d4e:	2100      	movs	r1, #0
 8012d50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d004      	beq.n	8012d64 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	0010      	movs	r0, r2
 8012d62:	4798      	blx	r3
    }
  }
  return status;
 8012d64:	230f      	movs	r3, #15
 8012d66:	18fb      	adds	r3, r7, r3
 8012d68:	781b      	ldrb	r3, [r3, #0]
}
 8012d6a:	0018      	movs	r0, r3
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	b004      	add	sp, #16
 8012d70:	bd80      	pop	{r7, pc}

08012d72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012d72:	b580      	push	{r7, lr}
 8012d74:	b084      	sub	sp, #16
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d8e:	221c      	movs	r2, #28
 8012d90:	4013      	ands	r3, r2
 8012d92:	2204      	movs	r2, #4
 8012d94:	409a      	lsls	r2, r3
 8012d96:	0013      	movs	r3, r2
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	4013      	ands	r3, r2
 8012d9c:	d026      	beq.n	8012dec <HAL_DMA_IRQHandler+0x7a>
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	2204      	movs	r2, #4
 8012da2:	4013      	ands	r3, r2
 8012da4:	d022      	beq.n	8012dec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2220      	movs	r2, #32
 8012dae:	4013      	ands	r3, r2
 8012db0:	d107      	bne.n	8012dc2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2104      	movs	r1, #4
 8012dbe:	438a      	bics	r2, r1
 8012dc0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dc6:	221c      	movs	r2, #28
 8012dc8:	401a      	ands	r2, r3
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dce:	2104      	movs	r1, #4
 8012dd0:	4091      	lsls	r1, r2
 8012dd2:	000a      	movs	r2, r1
 8012dd4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d100      	bne.n	8012de0 <HAL_DMA_IRQHandler+0x6e>
 8012dde:	e071      	b.n	8012ec4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	0010      	movs	r0, r2
 8012de8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8012dea:	e06b      	b.n	8012ec4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012df0:	221c      	movs	r2, #28
 8012df2:	4013      	ands	r3, r2
 8012df4:	2202      	movs	r2, #2
 8012df6:	409a      	lsls	r2, r3
 8012df8:	0013      	movs	r3, r2
 8012dfa:	68fa      	ldr	r2, [r7, #12]
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	d02d      	beq.n	8012e5c <HAL_DMA_IRQHandler+0xea>
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	2202      	movs	r2, #2
 8012e04:	4013      	ands	r3, r2
 8012e06:	d029      	beq.n	8012e5c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2220      	movs	r2, #32
 8012e10:	4013      	ands	r3, r2
 8012e12:	d10b      	bne.n	8012e2c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	210a      	movs	r1, #10
 8012e20:	438a      	bics	r2, r1
 8012e22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2225      	movs	r2, #37	@ 0x25
 8012e28:	2101      	movs	r1, #1
 8012e2a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e30:	221c      	movs	r2, #28
 8012e32:	401a      	ands	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e38:	2102      	movs	r1, #2
 8012e3a:	4091      	lsls	r1, r2
 8012e3c:	000a      	movs	r2, r1
 8012e3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2224      	movs	r2, #36	@ 0x24
 8012e44:	2100      	movs	r1, #0
 8012e46:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d039      	beq.n	8012ec4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	0010      	movs	r0, r2
 8012e58:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8012e5a:	e033      	b.n	8012ec4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e60:	221c      	movs	r2, #28
 8012e62:	4013      	ands	r3, r2
 8012e64:	2208      	movs	r2, #8
 8012e66:	409a      	lsls	r2, r3
 8012e68:	0013      	movs	r3, r2
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	4013      	ands	r3, r2
 8012e6e:	d02a      	beq.n	8012ec6 <HAL_DMA_IRQHandler+0x154>
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	2208      	movs	r2, #8
 8012e74:	4013      	ands	r3, r2
 8012e76:	d026      	beq.n	8012ec6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	210e      	movs	r1, #14
 8012e84:	438a      	bics	r2, r1
 8012e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e8c:	221c      	movs	r2, #28
 8012e8e:	401a      	ands	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e94:	2101      	movs	r1, #1
 8012e96:	4091      	lsls	r1, r2
 8012e98:	000a      	movs	r2, r1
 8012e9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2225      	movs	r2, #37	@ 0x25
 8012ea6:	2101      	movs	r1, #1
 8012ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2224      	movs	r2, #36	@ 0x24
 8012eae:	2100      	movs	r1, #0
 8012eb0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d005      	beq.n	8012ec6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	0010      	movs	r0, r2
 8012ec2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012ec4:	46c0      	nop			@ (mov r8, r8)
 8012ec6:	46c0      	nop			@ (mov r8, r8)
}
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	b004      	add	sp, #16
 8012ecc:	bd80      	pop	{r7, pc}

08012ece <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8012ece:	b580      	push	{r7, lr}
 8012ed0:	b082      	sub	sp, #8
 8012ed2:	af00      	add	r7, sp, #0
 8012ed4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2225      	movs	r2, #37	@ 0x25
 8012eda:	5c9b      	ldrb	r3, [r3, r2]
 8012edc:	b2db      	uxtb	r3, r3
}
 8012ede:	0018      	movs	r0, r3
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	b002      	add	sp, #8
 8012ee4:	bd80      	pop	{r7, pc}

08012ee6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012ee6:	b580      	push	{r7, lr}
 8012ee8:	b084      	sub	sp, #16
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	60f8      	str	r0, [r7, #12]
 8012eee:	60b9      	str	r1, [r7, #8]
 8012ef0:	607a      	str	r2, [r7, #4]
 8012ef2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ef8:	221c      	movs	r2, #28
 8012efa:	401a      	ands	r2, r3
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f00:	2101      	movs	r1, #1
 8012f02:	4091      	lsls	r1, r2
 8012f04:	000a      	movs	r2, r1
 8012f06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	689b      	ldr	r3, [r3, #8]
 8012f14:	2b10      	cmp	r3, #16
 8012f16:	d108      	bne.n	8012f2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	68ba      	ldr	r2, [r7, #8]
 8012f26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012f28:	e007      	b.n	8012f3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	68ba      	ldr	r2, [r7, #8]
 8012f30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	60da      	str	r2, [r3, #12]
}
 8012f3a:	46c0      	nop			@ (mov r8, r8)
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	b004      	add	sp, #16
 8012f40:	bd80      	pop	{r7, pc}
	...

08012f44 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8012f4c:	f7ff f8d2 	bl	80120f4 <HAL_GetTick>
 8012f50:	0003      	movs	r3, r0
 8012f52:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012f54:	e00f      	b.n	8012f76 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	3301      	adds	r3, #1
 8012f5a:	d00c      	beq.n	8012f76 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d007      	beq.n	8012f72 <FLASH_WaitForLastOperation+0x2e>
 8012f62:	f7ff f8c7 	bl	80120f4 <HAL_GetTick>
 8012f66:	0002      	movs	r2, r0
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	1ad3      	subs	r3, r2, r3
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d201      	bcs.n	8012f76 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8012f72:	2303      	movs	r3, #3
 8012f74:	e052      	b.n	801301c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012f76:	4b2b      	ldr	r3, [pc, #172]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	4013      	ands	r3, r2
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d0e9      	beq.n	8012f56 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012f82:	4b28      	ldr	r3, [pc, #160]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012f84:	699b      	ldr	r3, [r3, #24]
 8012f86:	2202      	movs	r2, #2
 8012f88:	4013      	ands	r3, r2
 8012f8a:	2b02      	cmp	r3, #2
 8012f8c:	d102      	bne.n	8012f94 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012f8e:	4b25      	ldr	r3, [pc, #148]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012f90:	2202      	movs	r2, #2
 8012f92:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8012f94:	4b23      	ldr	r3, [pc, #140]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012f96:	699a      	ldr	r2, [r3, #24]
 8012f98:	2380      	movs	r3, #128	@ 0x80
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	401a      	ands	r2, r3
 8012f9e:	2380      	movs	r3, #128	@ 0x80
 8012fa0:	005b      	lsls	r3, r3, #1
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d035      	beq.n	8013012 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8012fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012fa8:	699a      	ldr	r2, [r3, #24]
 8012faa:	2380      	movs	r3, #128	@ 0x80
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8012fb0:	2380      	movs	r3, #128	@ 0x80
 8012fb2:	009b      	lsls	r3, r3, #2
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d02c      	beq.n	8013012 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8012fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012fba:	699a      	ldr	r2, [r3, #24]
 8012fbc:	2380      	movs	r3, #128	@ 0x80
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8012fc2:	2380      	movs	r3, #128	@ 0x80
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d023      	beq.n	8013012 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8012fca:	4b16      	ldr	r3, [pc, #88]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012fcc:	699a      	ldr	r2, [r3, #24]
 8012fce:	2380      	movs	r3, #128	@ 0x80
 8012fd0:	011b      	lsls	r3, r3, #4
 8012fd2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8012fd4:	2380      	movs	r3, #128	@ 0x80
 8012fd6:	011b      	lsls	r3, r3, #4
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d01a      	beq.n	8013012 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012fdc:	4b11      	ldr	r3, [pc, #68]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012fde:	699a      	ldr	r2, [r3, #24]
 8012fe0:	2380      	movs	r3, #128	@ 0x80
 8012fe2:	019b      	lsls	r3, r3, #6
 8012fe4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8012fe6:	2380      	movs	r3, #128	@ 0x80
 8012fe8:	019b      	lsls	r3, r3, #6
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d011      	beq.n	8013012 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8012fee:	4b0d      	ldr	r3, [pc, #52]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8012ff0:	699a      	ldr	r2, [r3, #24]
 8012ff2:	2380      	movs	r3, #128	@ 0x80
 8012ff4:	029b      	lsls	r3, r3, #10
 8012ff6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012ff8:	2380      	movs	r3, #128	@ 0x80
 8012ffa:	029b      	lsls	r3, r3, #10
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d008      	beq.n	8013012 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8013000:	4b08      	ldr	r3, [pc, #32]	@ (8013024 <FLASH_WaitForLastOperation+0xe0>)
 8013002:	699a      	ldr	r2, [r3, #24]
 8013004:	2380      	movs	r3, #128	@ 0x80
 8013006:	025b      	lsls	r3, r3, #9
 8013008:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801300a:	2380      	movs	r3, #128	@ 0x80
 801300c:	025b      	lsls	r3, r3, #9
 801300e:	429a      	cmp	r2, r3
 8013010:	d103      	bne.n	801301a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8013012:	f000 f809 	bl	8013028 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8013016:	2301      	movs	r3, #1
 8013018:	e000      	b.n	801301c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 801301a:	2300      	movs	r3, #0
}
 801301c:	0018      	movs	r0, r3
 801301e:	46bd      	mov	sp, r7
 8013020:	b004      	add	sp, #16
 8013022:	bd80      	pop	{r7, pc}
 8013024:	40022000 	.word	0x40022000

08013028 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8013032:	4b49      	ldr	r3, [pc, #292]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 8013034:	699a      	ldr	r2, [r3, #24]
 8013036:	2380      	movs	r3, #128	@ 0x80
 8013038:	005b      	lsls	r3, r3, #1
 801303a:	401a      	ands	r2, r3
 801303c:	2380      	movs	r3, #128	@ 0x80
 801303e:	005b      	lsls	r3, r3, #1
 8013040:	429a      	cmp	r2, r3
 8013042:	d10a      	bne.n	801305a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8013044:	4b45      	ldr	r3, [pc, #276]	@ (801315c <FLASH_SetErrorCode+0x134>)
 8013046:	695b      	ldr	r3, [r3, #20]
 8013048:	2202      	movs	r2, #2
 801304a:	431a      	orrs	r2, r3
 801304c:	4b43      	ldr	r3, [pc, #268]	@ (801315c <FLASH_SetErrorCode+0x134>)
 801304e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2280      	movs	r2, #128	@ 0x80
 8013054:	0052      	lsls	r2, r2, #1
 8013056:	4313      	orrs	r3, r2
 8013058:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 801305a:	4b3f      	ldr	r3, [pc, #252]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 801305c:	699a      	ldr	r2, [r3, #24]
 801305e:	2380      	movs	r3, #128	@ 0x80
 8013060:	009b      	lsls	r3, r3, #2
 8013062:	401a      	ands	r2, r3
 8013064:	2380      	movs	r3, #128	@ 0x80
 8013066:	009b      	lsls	r3, r3, #2
 8013068:	429a      	cmp	r2, r3
 801306a:	d10a      	bne.n	8013082 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801306c:	4b3b      	ldr	r3, [pc, #236]	@ (801315c <FLASH_SetErrorCode+0x134>)
 801306e:	695b      	ldr	r3, [r3, #20]
 8013070:	2201      	movs	r2, #1
 8013072:	431a      	orrs	r2, r3
 8013074:	4b39      	ldr	r3, [pc, #228]	@ (801315c <FLASH_SetErrorCode+0x134>)
 8013076:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2280      	movs	r2, #128	@ 0x80
 801307c:	0092      	lsls	r2, r2, #2
 801307e:	4313      	orrs	r3, r2
 8013080:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8013082:	4b35      	ldr	r3, [pc, #212]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 8013084:	699a      	ldr	r2, [r3, #24]
 8013086:	2380      	movs	r3, #128	@ 0x80
 8013088:	00db      	lsls	r3, r3, #3
 801308a:	401a      	ands	r2, r3
 801308c:	2380      	movs	r3, #128	@ 0x80
 801308e:	00db      	lsls	r3, r3, #3
 8013090:	429a      	cmp	r2, r3
 8013092:	d10a      	bne.n	80130aa <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8013094:	4b31      	ldr	r3, [pc, #196]	@ (801315c <FLASH_SetErrorCode+0x134>)
 8013096:	695b      	ldr	r3, [r3, #20]
 8013098:	2208      	movs	r2, #8
 801309a:	431a      	orrs	r2, r3
 801309c:	4b2f      	ldr	r3, [pc, #188]	@ (801315c <FLASH_SetErrorCode+0x134>)
 801309e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2280      	movs	r2, #128	@ 0x80
 80130a4:	00d2      	lsls	r2, r2, #3
 80130a6:	4313      	orrs	r3, r2
 80130a8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80130aa:	4b2b      	ldr	r3, [pc, #172]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 80130ac:	699a      	ldr	r2, [r3, #24]
 80130ae:	2380      	movs	r3, #128	@ 0x80
 80130b0:	011b      	lsls	r3, r3, #4
 80130b2:	401a      	ands	r2, r3
 80130b4:	2380      	movs	r3, #128	@ 0x80
 80130b6:	011b      	lsls	r3, r3, #4
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d10a      	bne.n	80130d2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80130bc:	4b27      	ldr	r3, [pc, #156]	@ (801315c <FLASH_SetErrorCode+0x134>)
 80130be:	695b      	ldr	r3, [r3, #20]
 80130c0:	2204      	movs	r2, #4
 80130c2:	431a      	orrs	r2, r3
 80130c4:	4b25      	ldr	r3, [pc, #148]	@ (801315c <FLASH_SetErrorCode+0x134>)
 80130c6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2280      	movs	r2, #128	@ 0x80
 80130cc:	0112      	lsls	r2, r2, #4
 80130ce:	4313      	orrs	r3, r2
 80130d0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80130d2:	4b21      	ldr	r3, [pc, #132]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 80130d4:	699a      	ldr	r2, [r3, #24]
 80130d6:	2380      	movs	r3, #128	@ 0x80
 80130d8:	019b      	lsls	r3, r3, #6
 80130da:	401a      	ands	r2, r3
 80130dc:	2380      	movs	r3, #128	@ 0x80
 80130de:	019b      	lsls	r3, r3, #6
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d10a      	bne.n	80130fa <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80130e4:	4b1d      	ldr	r3, [pc, #116]	@ (801315c <FLASH_SetErrorCode+0x134>)
 80130e6:	695b      	ldr	r3, [r3, #20]
 80130e8:	2210      	movs	r2, #16
 80130ea:	431a      	orrs	r2, r3
 80130ec:	4b1b      	ldr	r3, [pc, #108]	@ (801315c <FLASH_SetErrorCode+0x134>)
 80130ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2280      	movs	r2, #128	@ 0x80
 80130f4:	0192      	lsls	r2, r2, #6
 80130f6:	4313      	orrs	r3, r2
 80130f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80130fa:	4b17      	ldr	r3, [pc, #92]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 80130fc:	699a      	ldr	r2, [r3, #24]
 80130fe:	2380      	movs	r3, #128	@ 0x80
 8013100:	029b      	lsls	r3, r3, #10
 8013102:	401a      	ands	r2, r3
 8013104:	2380      	movs	r3, #128	@ 0x80
 8013106:	029b      	lsls	r3, r3, #10
 8013108:	429a      	cmp	r2, r3
 801310a:	d109      	bne.n	8013120 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 801310c:	4b13      	ldr	r3, [pc, #76]	@ (801315c <FLASH_SetErrorCode+0x134>)
 801310e:	695b      	ldr	r3, [r3, #20]
 8013110:	2220      	movs	r2, #32
 8013112:	431a      	orrs	r2, r3
 8013114:	4b11      	ldr	r3, [pc, #68]	@ (801315c <FLASH_SetErrorCode+0x134>)
 8013116:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2220      	movs	r2, #32
 801311c:	4313      	orrs	r3, r2
 801311e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8013120:	4b0d      	ldr	r3, [pc, #52]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 8013122:	699a      	ldr	r2, [r3, #24]
 8013124:	2380      	movs	r3, #128	@ 0x80
 8013126:	025b      	lsls	r3, r3, #9
 8013128:	401a      	ands	r2, r3
 801312a:	2380      	movs	r3, #128	@ 0x80
 801312c:	025b      	lsls	r3, r3, #9
 801312e:	429a      	cmp	r2, r3
 8013130:	d10a      	bne.n	8013148 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8013132:	4b0a      	ldr	r3, [pc, #40]	@ (801315c <FLASH_SetErrorCode+0x134>)
 8013134:	695b      	ldr	r3, [r3, #20]
 8013136:	2240      	movs	r2, #64	@ 0x40
 8013138:	431a      	orrs	r2, r3
 801313a:	4b08      	ldr	r3, [pc, #32]	@ (801315c <FLASH_SetErrorCode+0x134>)
 801313c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2280      	movs	r2, #128	@ 0x80
 8013142:	0252      	lsls	r2, r2, #9
 8013144:	4313      	orrs	r3, r2
 8013146:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8013148:	4b03      	ldr	r3, [pc, #12]	@ (8013158 <FLASH_SetErrorCode+0x130>)
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	619a      	str	r2, [r3, #24]
}  
 801314e:	46c0      	nop			@ (mov r8, r8)
 8013150:	46bd      	mov	sp, r7
 8013152:	b002      	add	sp, #8
 8013154:	bd80      	pop	{r7, pc}
 8013156:	46c0      	nop			@ (mov r8, r8)
 8013158:	40022000 	.word	0x40022000
 801315c:	200021f0 	.word	0x200021f0

08013160 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8013166:	4b12      	ldr	r3, [pc, #72]	@ (80131b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	4013      	ands	r3, r2
 801316e:	d019      	beq.n	80131a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013170:	f3ef 8310 	mrs	r3, PRIMASK
 8013174:	607b      	str	r3, [r7, #4]
  return(result);
 8013176:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8013178:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801317a:	b672      	cpsid	i
}
 801317c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 801317e:	4b0c      	ldr	r3, [pc, #48]	@ (80131b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013180:	4a0c      	ldr	r2, [pc, #48]	@ (80131b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8013182:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8013184:	4b0a      	ldr	r3, [pc, #40]	@ (80131b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013186:	4a0c      	ldr	r2, [pc, #48]	@ (80131b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8013188:	60da      	str	r2, [r3, #12]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	f383 8810 	msr	PRIMASK, r3
}
 8013194:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8013196:	4b06      	ldr	r3, [pc, #24]	@ (80131b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	2201      	movs	r2, #1
 801319c:	4013      	ands	r3, r2
 801319e:	d001      	beq.n	80131a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 80131a0:	2301      	movs	r3, #1
 80131a2:	e000      	b.n	80131a6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80131a4:	2300      	movs	r3, #0
}
 80131a6:	0018      	movs	r0, r3
 80131a8:	46bd      	mov	sp, r7
 80131aa:	b004      	add	sp, #16
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	46c0      	nop			@ (mov r8, r8)
 80131b0:	40022000 	.word	0x40022000
 80131b4:	89abcdef 	.word	0x89abcdef
 80131b8:	02030405 	.word	0x02030405

080131bc <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80131c0:	4b04      	ldr	r3, [pc, #16]	@ (80131d4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80131c2:	685a      	ldr	r2, [r3, #4]
 80131c4:	4b03      	ldr	r3, [pc, #12]	@ (80131d4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80131c6:	2101      	movs	r1, #1
 80131c8:	430a      	orrs	r2, r1
 80131ca:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	0018      	movs	r0, r3
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	40022000 	.word	0x40022000

080131d8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80131d8:	b5b0      	push	{r4, r5, r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80131e0:	250f      	movs	r5, #15
 80131e2:	197b      	adds	r3, r7, r5
 80131e4:	2200      	movs	r2, #0
 80131e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80131e8:	197c      	adds	r4, r7, r5
 80131ea:	4b0f      	ldr	r3, [pc, #60]	@ (8013228 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80131ec:	0018      	movs	r0, r3
 80131ee:	f7ff fea9 	bl	8012f44 <FLASH_WaitForLastOperation>
 80131f2:	0003      	movs	r3, r0
 80131f4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80131f6:	0029      	movs	r1, r5
 80131f8:	187b      	adds	r3, r7, r1
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10c      	bne.n	801321a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8013200:	4b0a      	ldr	r3, [pc, #40]	@ (801322c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8013202:	2200      	movs	r2, #0
 8013204:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2200      	movs	r2, #0
 801320a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801320c:	187c      	adds	r4, r7, r1
 801320e:	4b06      	ldr	r3, [pc, #24]	@ (8013228 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8013210:	0018      	movs	r0, r3
 8013212:	f7ff fe97 	bl	8012f44 <FLASH_WaitForLastOperation>
 8013216:	0003      	movs	r3, r0
 8013218:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801321a:	230f      	movs	r3, #15
 801321c:	18fb      	adds	r3, r7, r3
 801321e:	781b      	ldrb	r3, [r3, #0]
}  
 8013220:	0018      	movs	r0, r3
 8013222:	46bd      	mov	sp, r7
 8013224:	b004      	add	sp, #16
 8013226:	bdb0      	pop	{r4, r5, r7, pc}
 8013228:	0000c350 	.word	0x0000c350
 801322c:	200021f0 	.word	0x200021f0

08013230 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8013230:	b5b0      	push	{r4, r5, r7, lr}
 8013232:	b086      	sub	sp, #24
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801323c:	2317      	movs	r3, #23
 801323e:	18fb      	adds	r3, r7, r3
 8013240:	2201      	movs	r2, #1
 8013242:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013244:	4b24      	ldr	r3, [pc, #144]	@ (80132d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8013246:	7c1b      	ldrb	r3, [r3, #16]
 8013248:	2b01      	cmp	r3, #1
 801324a:	d101      	bne.n	8013250 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 801324c:	2302      	movs	r3, #2
 801324e:	e03e      	b.n	80132ce <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8013250:	4b21      	ldr	r3, [pc, #132]	@ (80132d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8013252:	2201      	movs	r2, #1
 8013254:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013256:	2517      	movs	r5, #23
 8013258:	197c      	adds	r4, r7, r5
 801325a:	4b20      	ldr	r3, [pc, #128]	@ (80132dc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801325c:	0018      	movs	r0, r3
 801325e:	f7ff fe71 	bl	8012f44 <FLASH_WaitForLastOperation>
 8013262:	0003      	movs	r3, r0
 8013264:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8013266:	197b      	adds	r3, r7, r5
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d129      	bne.n	80132c2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801326e:	4b1a      	ldr	r3, [pc, #104]	@ (80132d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8013270:	2200      	movs	r2, #0
 8013272:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2b02      	cmp	r3, #2
 8013278:	d103      	bne.n	8013282 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	601a      	str	r2, [r3, #0]
 8013280:	e013      	b.n	80132aa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d104      	bne.n	8013292 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	b292      	uxth	r2, r2
 801328e:	801a      	strh	r2, [r3, #0]
 8013290:	e00b      	b.n	80132aa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d104      	bne.n	80132a2 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	b2d2      	uxtb	r2, r2
 801329e:	701a      	strb	r2, [r3, #0]
 80132a0:	e003      	b.n	80132aa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 80132a2:	2317      	movs	r3, #23
 80132a4:	18fb      	adds	r3, r7, r3
 80132a6:	2201      	movs	r2, #1
 80132a8:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80132aa:	2217      	movs	r2, #23
 80132ac:	18bb      	adds	r3, r7, r2
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d106      	bne.n	80132c2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80132b4:	18bc      	adds	r4, r7, r2
 80132b6:	4b09      	ldr	r3, [pc, #36]	@ (80132dc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80132b8:	0018      	movs	r0, r3
 80132ba:	f7ff fe43 	bl	8012f44 <FLASH_WaitForLastOperation>
 80132be:	0003      	movs	r3, r0
 80132c0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80132c2:	4b05      	ldr	r3, [pc, #20]	@ (80132d8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	741a      	strb	r2, [r3, #16]

  return status;
 80132c8:	2317      	movs	r3, #23
 80132ca:	18fb      	adds	r3, r7, r3
 80132cc:	781b      	ldrb	r3, [r3, #0]
}
 80132ce:	0018      	movs	r0, r3
 80132d0:	46bd      	mov	sp, r7
 80132d2:	b006      	add	sp, #24
 80132d4:	bdb0      	pop	{r4, r5, r7, pc}
 80132d6:	46c0      	nop			@ (mov r8, r8)
 80132d8:	200021f0 	.word	0x200021f0
 80132dc:	0000c350 	.word	0x0000c350

080132e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80132ea:	2300      	movs	r3, #0
 80132ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80132ee:	2300      	movs	r3, #0
 80132f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80132f2:	2300      	movs	r3, #0
 80132f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80132f6:	e155      	b.n	80135a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2101      	movs	r1, #1
 80132fe:	697a      	ldr	r2, [r7, #20]
 8013300:	4091      	lsls	r1, r2
 8013302:	000a      	movs	r2, r1
 8013304:	4013      	ands	r3, r2
 8013306:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d100      	bne.n	8013310 <HAL_GPIO_Init+0x30>
 801330e:	e146      	b.n	801359e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	2203      	movs	r2, #3
 8013316:	4013      	ands	r3, r2
 8013318:	2b01      	cmp	r3, #1
 801331a:	d005      	beq.n	8013328 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801331c:	683b      	ldr	r3, [r7, #0]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	2203      	movs	r2, #3
 8013322:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013324:	2b02      	cmp	r3, #2
 8013326:	d130      	bne.n	801338a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	689b      	ldr	r3, [r3, #8]
 801332c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 801332e:	697b      	ldr	r3, [r7, #20]
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	2203      	movs	r2, #3
 8013334:	409a      	lsls	r2, r3
 8013336:	0013      	movs	r3, r2
 8013338:	43da      	mvns	r2, r3
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	4013      	ands	r3, r2
 801333e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	68da      	ldr	r2, [r3, #12]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	005b      	lsls	r3, r3, #1
 8013348:	409a      	lsls	r2, r3
 801334a:	0013      	movs	r3, r2
 801334c:	693a      	ldr	r2, [r7, #16]
 801334e:	4313      	orrs	r3, r2
 8013350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	693a      	ldr	r2, [r7, #16]
 8013356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	685b      	ldr	r3, [r3, #4]
 801335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801335e:	2201      	movs	r2, #1
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	409a      	lsls	r2, r3
 8013364:	0013      	movs	r3, r2
 8013366:	43da      	mvns	r2, r3
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	4013      	ands	r3, r2
 801336c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	091b      	lsrs	r3, r3, #4
 8013374:	2201      	movs	r2, #1
 8013376:	401a      	ands	r2, r3
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	409a      	lsls	r2, r3
 801337c:	0013      	movs	r3, r2
 801337e:	693a      	ldr	r2, [r7, #16]
 8013380:	4313      	orrs	r3, r2
 8013382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	693a      	ldr	r2, [r7, #16]
 8013388:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	685b      	ldr	r3, [r3, #4]
 801338e:	2203      	movs	r2, #3
 8013390:	4013      	ands	r3, r2
 8013392:	2b03      	cmp	r3, #3
 8013394:	d017      	beq.n	80133c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	005b      	lsls	r3, r3, #1
 80133a0:	2203      	movs	r2, #3
 80133a2:	409a      	lsls	r2, r3
 80133a4:	0013      	movs	r3, r2
 80133a6:	43da      	mvns	r2, r3
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	4013      	ands	r3, r2
 80133ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	689a      	ldr	r2, [r3, #8]
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	409a      	lsls	r2, r3
 80133b8:	0013      	movs	r3, r2
 80133ba:	693a      	ldr	r2, [r7, #16]
 80133bc:	4313      	orrs	r3, r2
 80133be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	693a      	ldr	r2, [r7, #16]
 80133c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	2203      	movs	r2, #3
 80133cc:	4013      	ands	r3, r2
 80133ce:	2b02      	cmp	r3, #2
 80133d0:	d123      	bne.n	801341a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	08da      	lsrs	r2, r3, #3
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	3208      	adds	r2, #8
 80133da:	0092      	lsls	r2, r2, #2
 80133dc:	58d3      	ldr	r3, [r2, r3]
 80133de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	2207      	movs	r2, #7
 80133e4:	4013      	ands	r3, r2
 80133e6:	009b      	lsls	r3, r3, #2
 80133e8:	220f      	movs	r2, #15
 80133ea:	409a      	lsls	r2, r3
 80133ec:	0013      	movs	r3, r2
 80133ee:	43da      	mvns	r2, r3
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	4013      	ands	r3, r2
 80133f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	691a      	ldr	r2, [r3, #16]
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	2107      	movs	r1, #7
 80133fe:	400b      	ands	r3, r1
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	409a      	lsls	r2, r3
 8013404:	0013      	movs	r3, r2
 8013406:	693a      	ldr	r2, [r7, #16]
 8013408:	4313      	orrs	r3, r2
 801340a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	08da      	lsrs	r2, r3, #3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	3208      	adds	r2, #8
 8013414:	0092      	lsls	r2, r2, #2
 8013416:	6939      	ldr	r1, [r7, #16]
 8013418:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	2203      	movs	r2, #3
 8013426:	409a      	lsls	r2, r3
 8013428:	0013      	movs	r3, r2
 801342a:	43da      	mvns	r2, r3
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	4013      	ands	r3, r2
 8013430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	2203      	movs	r2, #3
 8013438:	401a      	ands	r2, r3
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	005b      	lsls	r3, r3, #1
 801343e:	409a      	lsls	r2, r3
 8013440:	0013      	movs	r3, r2
 8013442:	693a      	ldr	r2, [r7, #16]
 8013444:	4313      	orrs	r3, r2
 8013446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	693a      	ldr	r2, [r7, #16]
 801344c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	685a      	ldr	r2, [r3, #4]
 8013452:	23c0      	movs	r3, #192	@ 0xc0
 8013454:	029b      	lsls	r3, r3, #10
 8013456:	4013      	ands	r3, r2
 8013458:	d100      	bne.n	801345c <HAL_GPIO_Init+0x17c>
 801345a:	e0a0      	b.n	801359e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801345c:	4b57      	ldr	r3, [pc, #348]	@ (80135bc <HAL_GPIO_Init+0x2dc>)
 801345e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013460:	4b56      	ldr	r3, [pc, #344]	@ (80135bc <HAL_GPIO_Init+0x2dc>)
 8013462:	2101      	movs	r1, #1
 8013464:	430a      	orrs	r2, r1
 8013466:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8013468:	4a55      	ldr	r2, [pc, #340]	@ (80135c0 <HAL_GPIO_Init+0x2e0>)
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	089b      	lsrs	r3, r3, #2
 801346e:	3302      	adds	r3, #2
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	589b      	ldr	r3, [r3, r2]
 8013474:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	2203      	movs	r2, #3
 801347a:	4013      	ands	r3, r2
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	220f      	movs	r2, #15
 8013480:	409a      	lsls	r2, r3
 8013482:	0013      	movs	r3, r2
 8013484:	43da      	mvns	r2, r3
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	4013      	ands	r3, r2
 801348a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	23a0      	movs	r3, #160	@ 0xa0
 8013490:	05db      	lsls	r3, r3, #23
 8013492:	429a      	cmp	r2, r3
 8013494:	d01f      	beq.n	80134d6 <HAL_GPIO_Init+0x1f6>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4a4a      	ldr	r2, [pc, #296]	@ (80135c4 <HAL_GPIO_Init+0x2e4>)
 801349a:	4293      	cmp	r3, r2
 801349c:	d019      	beq.n	80134d2 <HAL_GPIO_Init+0x1f2>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	4a49      	ldr	r2, [pc, #292]	@ (80135c8 <HAL_GPIO_Init+0x2e8>)
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d013      	beq.n	80134ce <HAL_GPIO_Init+0x1ee>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	4a48      	ldr	r2, [pc, #288]	@ (80135cc <HAL_GPIO_Init+0x2ec>)
 80134aa:	4293      	cmp	r3, r2
 80134ac:	d00d      	beq.n	80134ca <HAL_GPIO_Init+0x1ea>
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	4a47      	ldr	r2, [pc, #284]	@ (80135d0 <HAL_GPIO_Init+0x2f0>)
 80134b2:	4293      	cmp	r3, r2
 80134b4:	d007      	beq.n	80134c6 <HAL_GPIO_Init+0x1e6>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	4a46      	ldr	r2, [pc, #280]	@ (80135d4 <HAL_GPIO_Init+0x2f4>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d101      	bne.n	80134c2 <HAL_GPIO_Init+0x1e2>
 80134be:	2305      	movs	r3, #5
 80134c0:	e00a      	b.n	80134d8 <HAL_GPIO_Init+0x1f8>
 80134c2:	2306      	movs	r3, #6
 80134c4:	e008      	b.n	80134d8 <HAL_GPIO_Init+0x1f8>
 80134c6:	2304      	movs	r3, #4
 80134c8:	e006      	b.n	80134d8 <HAL_GPIO_Init+0x1f8>
 80134ca:	2303      	movs	r3, #3
 80134cc:	e004      	b.n	80134d8 <HAL_GPIO_Init+0x1f8>
 80134ce:	2302      	movs	r3, #2
 80134d0:	e002      	b.n	80134d8 <HAL_GPIO_Init+0x1f8>
 80134d2:	2301      	movs	r3, #1
 80134d4:	e000      	b.n	80134d8 <HAL_GPIO_Init+0x1f8>
 80134d6:	2300      	movs	r3, #0
 80134d8:	697a      	ldr	r2, [r7, #20]
 80134da:	2103      	movs	r1, #3
 80134dc:	400a      	ands	r2, r1
 80134de:	0092      	lsls	r2, r2, #2
 80134e0:	4093      	lsls	r3, r2
 80134e2:	693a      	ldr	r2, [r7, #16]
 80134e4:	4313      	orrs	r3, r2
 80134e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80134e8:	4935      	ldr	r1, [pc, #212]	@ (80135c0 <HAL_GPIO_Init+0x2e0>)
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	089b      	lsrs	r3, r3, #2
 80134ee:	3302      	adds	r3, #2
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	693a      	ldr	r2, [r7, #16]
 80134f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80134f6:	4b38      	ldr	r3, [pc, #224]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 80134f8:	689b      	ldr	r3, [r3, #8]
 80134fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	43da      	mvns	r2, r3
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	4013      	ands	r3, r2
 8013504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	685a      	ldr	r2, [r3, #4]
 801350a:	2380      	movs	r3, #128	@ 0x80
 801350c:	035b      	lsls	r3, r3, #13
 801350e:	4013      	ands	r3, r2
 8013510:	d003      	beq.n	801351a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8013512:	693a      	ldr	r2, [r7, #16]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	4313      	orrs	r3, r2
 8013518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 801351a:	4b2f      	ldr	r3, [pc, #188]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 801351c:	693a      	ldr	r2, [r7, #16]
 801351e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8013520:	4b2d      	ldr	r3, [pc, #180]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 8013522:	68db      	ldr	r3, [r3, #12]
 8013524:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	43da      	mvns	r2, r3
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	4013      	ands	r3, r2
 801352e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	685a      	ldr	r2, [r3, #4]
 8013534:	2380      	movs	r3, #128	@ 0x80
 8013536:	039b      	lsls	r3, r3, #14
 8013538:	4013      	ands	r3, r2
 801353a:	d003      	beq.n	8013544 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 801353c:	693a      	ldr	r2, [r7, #16]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	4313      	orrs	r3, r2
 8013542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8013544:	4b24      	ldr	r3, [pc, #144]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 8013546:	693a      	ldr	r2, [r7, #16]
 8013548:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 801354a:	4b23      	ldr	r3, [pc, #140]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	43da      	mvns	r2, r3
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	4013      	ands	r3, r2
 8013558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	685a      	ldr	r2, [r3, #4]
 801355e:	2380      	movs	r3, #128	@ 0x80
 8013560:	029b      	lsls	r3, r3, #10
 8013562:	4013      	ands	r3, r2
 8013564:	d003      	beq.n	801356e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8013566:	693a      	ldr	r2, [r7, #16]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	4313      	orrs	r3, r2
 801356c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801356e:	4b1a      	ldr	r3, [pc, #104]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 8013570:	693a      	ldr	r2, [r7, #16]
 8013572:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013574:	4b18      	ldr	r3, [pc, #96]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	43da      	mvns	r2, r3
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	4013      	ands	r3, r2
 8013582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	685a      	ldr	r2, [r3, #4]
 8013588:	2380      	movs	r3, #128	@ 0x80
 801358a:	025b      	lsls	r3, r3, #9
 801358c:	4013      	ands	r3, r2
 801358e:	d003      	beq.n	8013598 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8013590:	693a      	ldr	r2, [r7, #16]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	4313      	orrs	r3, r2
 8013596:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8013598:	4b0f      	ldr	r3, [pc, #60]	@ (80135d8 <HAL_GPIO_Init+0x2f8>)
 801359a:	693a      	ldr	r2, [r7, #16]
 801359c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	3301      	adds	r3, #1
 80135a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	40da      	lsrs	r2, r3
 80135ac:	1e13      	subs	r3, r2, #0
 80135ae:	d000      	beq.n	80135b2 <HAL_GPIO_Init+0x2d2>
 80135b0:	e6a2      	b.n	80132f8 <HAL_GPIO_Init+0x18>
  }
}
 80135b2:	46c0      	nop			@ (mov r8, r8)
 80135b4:	46c0      	nop			@ (mov r8, r8)
 80135b6:	46bd      	mov	sp, r7
 80135b8:	b006      	add	sp, #24
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	40021000 	.word	0x40021000
 80135c0:	40010000 	.word	0x40010000
 80135c4:	50000400 	.word	0x50000400
 80135c8:	50000800 	.word	0x50000800
 80135cc:	50000c00 	.word	0x50000c00
 80135d0:	50001000 	.word	0x50001000
 80135d4:	50001c00 	.word	0x50001c00
 80135d8:	40010400 	.word	0x40010400

080135dc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	000a      	movs	r2, r1
 80135e6:	1cbb      	adds	r3, r7, #2
 80135e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	691b      	ldr	r3, [r3, #16]
 80135ee:	1cba      	adds	r2, r7, #2
 80135f0:	8812      	ldrh	r2, [r2, #0]
 80135f2:	4013      	ands	r3, r2
 80135f4:	d004      	beq.n	8013600 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80135f6:	230f      	movs	r3, #15
 80135f8:	18fb      	adds	r3, r7, r3
 80135fa:	2201      	movs	r2, #1
 80135fc:	701a      	strb	r2, [r3, #0]
 80135fe:	e003      	b.n	8013608 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013600:	230f      	movs	r3, #15
 8013602:	18fb      	adds	r3, r7, r3
 8013604:	2200      	movs	r2, #0
 8013606:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8013608:	230f      	movs	r3, #15
 801360a:	18fb      	adds	r3, r7, r3
 801360c:	781b      	ldrb	r3, [r3, #0]
}
 801360e:	0018      	movs	r0, r3
 8013610:	46bd      	mov	sp, r7
 8013612:	b004      	add	sp, #16
 8013614:	bd80      	pop	{r7, pc}

08013616 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013616:	b580      	push	{r7, lr}
 8013618:	b082      	sub	sp, #8
 801361a:	af00      	add	r7, sp, #0
 801361c:	6078      	str	r0, [r7, #4]
 801361e:	0008      	movs	r0, r1
 8013620:	0011      	movs	r1, r2
 8013622:	1cbb      	adds	r3, r7, #2
 8013624:	1c02      	adds	r2, r0, #0
 8013626:	801a      	strh	r2, [r3, #0]
 8013628:	1c7b      	adds	r3, r7, #1
 801362a:	1c0a      	adds	r2, r1, #0
 801362c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801362e:	1c7b      	adds	r3, r7, #1
 8013630:	781b      	ldrb	r3, [r3, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d004      	beq.n	8013640 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013636:	1cbb      	adds	r3, r7, #2
 8013638:	881a      	ldrh	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801363e:	e003      	b.n	8013648 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8013640:	1cbb      	adds	r3, r7, #2
 8013642:	881a      	ldrh	r2, [r3, #0]
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8013648:	46c0      	nop			@ (mov r8, r8)
 801364a:	46bd      	mov	sp, r7
 801364c:	b002      	add	sp, #8
 801364e:	bd80      	pop	{r7, pc}

08013650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b082      	sub	sp, #8
 8013654:	af00      	add	r7, sp, #0
 8013656:	0002      	movs	r2, r0
 8013658:	1dbb      	adds	r3, r7, #6
 801365a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801365c:	4b09      	ldr	r3, [pc, #36]	@ (8013684 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801365e:	695b      	ldr	r3, [r3, #20]
 8013660:	1dba      	adds	r2, r7, #6
 8013662:	8812      	ldrh	r2, [r2, #0]
 8013664:	4013      	ands	r3, r2
 8013666:	d008      	beq.n	801367a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013668:	4b06      	ldr	r3, [pc, #24]	@ (8013684 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801366a:	1dba      	adds	r2, r7, #6
 801366c:	8812      	ldrh	r2, [r2, #0]
 801366e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013670:	1dbb      	adds	r3, r7, #6
 8013672:	881b      	ldrh	r3, [r3, #0]
 8013674:	0018      	movs	r0, r3
 8013676:	f7f7 fdfd 	bl	800b274 <HAL_GPIO_EXTI_Callback>
  }
}
 801367a:	46c0      	nop			@ (mov r8, r8)
 801367c:	46bd      	mov	sp, r7
 801367e:	b002      	add	sp, #8
 8013680:	bd80      	pop	{r7, pc}
 8013682:	46c0      	nop			@ (mov r8, r8)
 8013684:	40010400 	.word	0x40010400

08013688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b082      	sub	sp, #8
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d101      	bne.n	801369a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013696:	2301      	movs	r3, #1
 8013698:	e082      	b.n	80137a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2241      	movs	r2, #65	@ 0x41
 801369e:	5c9b      	ldrb	r3, [r3, r2]
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d107      	bne.n	80136b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2240      	movs	r2, #64	@ 0x40
 80136aa:	2100      	movs	r1, #0
 80136ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	0018      	movs	r0, r3
 80136b2:	f7f7 f8d5 	bl	800a860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2241      	movs	r2, #65	@ 0x41
 80136ba:	2124      	movs	r1, #36	@ 0x24
 80136bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2101      	movs	r1, #1
 80136ca:	438a      	bics	r2, r1
 80136cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	685a      	ldr	r2, [r3, #4]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	4934      	ldr	r1, [pc, #208]	@ (80137a8 <HAL_I2C_Init+0x120>)
 80136d8:	400a      	ands	r2, r1
 80136da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	689a      	ldr	r2, [r3, #8]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4931      	ldr	r1, [pc, #196]	@ (80137ac <HAL_I2C_Init+0x124>)
 80136e8:	400a      	ands	r2, r1
 80136ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	2b01      	cmp	r3, #1
 80136f2:	d108      	bne.n	8013706 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	689a      	ldr	r2, [r3, #8]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2180      	movs	r1, #128	@ 0x80
 80136fe:	0209      	lsls	r1, r1, #8
 8013700:	430a      	orrs	r2, r1
 8013702:	609a      	str	r2, [r3, #8]
 8013704:	e007      	b.n	8013716 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	689a      	ldr	r2, [r3, #8]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	2184      	movs	r1, #132	@ 0x84
 8013710:	0209      	lsls	r1, r1, #8
 8013712:	430a      	orrs	r2, r1
 8013714:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	68db      	ldr	r3, [r3, #12]
 801371a:	2b02      	cmp	r3, #2
 801371c:	d104      	bne.n	8013728 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2280      	movs	r2, #128	@ 0x80
 8013724:	0112      	lsls	r2, r2, #4
 8013726:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	685a      	ldr	r2, [r3, #4]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	491f      	ldr	r1, [pc, #124]	@ (80137b0 <HAL_I2C_Init+0x128>)
 8013734:	430a      	orrs	r2, r1
 8013736:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	68da      	ldr	r2, [r3, #12]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	491a      	ldr	r1, [pc, #104]	@ (80137ac <HAL_I2C_Init+0x124>)
 8013744:	400a      	ands	r2, r1
 8013746:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	691a      	ldr	r2, [r3, #16]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	695b      	ldr	r3, [r3, #20]
 8013750:	431a      	orrs	r2, r3
 8013752:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	699b      	ldr	r3, [r3, #24]
 8013758:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	430a      	orrs	r2, r1
 8013760:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	69d9      	ldr	r1, [r3, #28]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6a1a      	ldr	r2, [r3, #32]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	430a      	orrs	r2, r1
 8013770:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	2101      	movs	r1, #1
 801377e:	430a      	orrs	r2, r1
 8013780:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2200      	movs	r2, #0
 8013786:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	2241      	movs	r2, #65	@ 0x41
 801378c:	2120      	movs	r1, #32
 801378e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	2200      	movs	r2, #0
 8013794:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2242      	movs	r2, #66	@ 0x42
 801379a:	2100      	movs	r1, #0
 801379c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	0018      	movs	r0, r3
 80137a2:	46bd      	mov	sp, r7
 80137a4:	b002      	add	sp, #8
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	f0ffffff 	.word	0xf0ffffff
 80137ac:	ffff7fff 	.word	0xffff7fff
 80137b0:	02008000 	.word	0x02008000

080137b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80137b4:	b590      	push	{r4, r7, lr}
 80137b6:	b089      	sub	sp, #36	@ 0x24
 80137b8:	af02      	add	r7, sp, #8
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	0008      	movs	r0, r1
 80137be:	607a      	str	r2, [r7, #4]
 80137c0:	0019      	movs	r1, r3
 80137c2:	230a      	movs	r3, #10
 80137c4:	18fb      	adds	r3, r7, r3
 80137c6:	1c02      	adds	r2, r0, #0
 80137c8:	801a      	strh	r2, [r3, #0]
 80137ca:	2308      	movs	r3, #8
 80137cc:	18fb      	adds	r3, r7, r3
 80137ce:	1c0a      	adds	r2, r1, #0
 80137d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2241      	movs	r2, #65	@ 0x41
 80137d6:	5c9b      	ldrb	r3, [r3, r2]
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	2b20      	cmp	r3, #32
 80137dc:	d000      	beq.n	80137e0 <HAL_I2C_Master_Transmit+0x2c>
 80137de:	e0e7      	b.n	80139b0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2240      	movs	r2, #64	@ 0x40
 80137e4:	5c9b      	ldrb	r3, [r3, r2]
 80137e6:	2b01      	cmp	r3, #1
 80137e8:	d101      	bne.n	80137ee <HAL_I2C_Master_Transmit+0x3a>
 80137ea:	2302      	movs	r3, #2
 80137ec:	e0e1      	b.n	80139b2 <HAL_I2C_Master_Transmit+0x1fe>
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2240      	movs	r2, #64	@ 0x40
 80137f2:	2101      	movs	r1, #1
 80137f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80137f6:	f7fe fc7d 	bl	80120f4 <HAL_GetTick>
 80137fa:	0003      	movs	r3, r0
 80137fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80137fe:	2380      	movs	r3, #128	@ 0x80
 8013800:	0219      	lsls	r1, r3, #8
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	2319      	movs	r3, #25
 801380a:	2201      	movs	r2, #1
 801380c:	f002 fa30 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 8013810:	1e03      	subs	r3, r0, #0
 8013812:	d001      	beq.n	8013818 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8013814:	2301      	movs	r3, #1
 8013816:	e0cc      	b.n	80139b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2241      	movs	r2, #65	@ 0x41
 801381c:	2121      	movs	r1, #33	@ 0x21
 801381e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	2242      	movs	r2, #66	@ 0x42
 8013824:	2110      	movs	r1, #16
 8013826:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	2200      	movs	r2, #0
 801382c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2208      	movs	r2, #8
 8013838:	18ba      	adds	r2, r7, r2
 801383a:	8812      	ldrh	r2, [r2, #0]
 801383c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2200      	movs	r2, #0
 8013842:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013848:	b29b      	uxth	r3, r3
 801384a:	2bff      	cmp	r3, #255	@ 0xff
 801384c:	d911      	bls.n	8013872 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	22ff      	movs	r2, #255	@ 0xff
 8013852:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013858:	b2da      	uxtb	r2, r3
 801385a:	2380      	movs	r3, #128	@ 0x80
 801385c:	045c      	lsls	r4, r3, #17
 801385e:	230a      	movs	r3, #10
 8013860:	18fb      	adds	r3, r7, r3
 8013862:	8819      	ldrh	r1, [r3, #0]
 8013864:	68f8      	ldr	r0, [r7, #12]
 8013866:	4b55      	ldr	r3, [pc, #340]	@ (80139bc <HAL_I2C_Master_Transmit+0x208>)
 8013868:	9300      	str	r3, [sp, #0]
 801386a:	0023      	movs	r3, r4
 801386c:	f002 fc52 	bl	8016114 <I2C_TransferConfig>
 8013870:	e075      	b.n	801395e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013876:	b29a      	uxth	r2, r3
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013880:	b2da      	uxtb	r2, r3
 8013882:	2380      	movs	r3, #128	@ 0x80
 8013884:	049c      	lsls	r4, r3, #18
 8013886:	230a      	movs	r3, #10
 8013888:	18fb      	adds	r3, r7, r3
 801388a:	8819      	ldrh	r1, [r3, #0]
 801388c:	68f8      	ldr	r0, [r7, #12]
 801388e:	4b4b      	ldr	r3, [pc, #300]	@ (80139bc <HAL_I2C_Master_Transmit+0x208>)
 8013890:	9300      	str	r3, [sp, #0]
 8013892:	0023      	movs	r3, r4
 8013894:	f002 fc3e 	bl	8016114 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8013898:	e061      	b.n	801395e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801389a:	697a      	ldr	r2, [r7, #20]
 801389c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	0018      	movs	r0, r3
 80138a2:	f002 fa33 	bl	8015d0c <I2C_WaitOnTXISFlagUntilTimeout>
 80138a6:	1e03      	subs	r3, r0, #0
 80138a8:	d001      	beq.n	80138ae <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80138aa:	2301      	movs	r3, #1
 80138ac:	e081      	b.n	80139b2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138b2:	781a      	ldrb	r2, [r3, #0]
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138be:	1c5a      	adds	r2, r3, #1
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	3b01      	subs	r3, #1
 80138cc:	b29a      	uxth	r2, r3
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138d6:	3b01      	subs	r3, #1
 80138d8:	b29a      	uxth	r2, r3
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d03a      	beq.n	801395e <HAL_I2C_Master_Transmit+0x1aa>
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d136      	bne.n	801395e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80138f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	0013      	movs	r3, r2
 80138fa:	2200      	movs	r2, #0
 80138fc:	2180      	movs	r1, #128	@ 0x80
 80138fe:	f002 f9b7 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 8013902:	1e03      	subs	r3, r0, #0
 8013904:	d001      	beq.n	801390a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8013906:	2301      	movs	r3, #1
 8013908:	e053      	b.n	80139b2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801390e:	b29b      	uxth	r3, r3
 8013910:	2bff      	cmp	r3, #255	@ 0xff
 8013912:	d911      	bls.n	8013938 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	22ff      	movs	r2, #255	@ 0xff
 8013918:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801391e:	b2da      	uxtb	r2, r3
 8013920:	2380      	movs	r3, #128	@ 0x80
 8013922:	045c      	lsls	r4, r3, #17
 8013924:	230a      	movs	r3, #10
 8013926:	18fb      	adds	r3, r7, r3
 8013928:	8819      	ldrh	r1, [r3, #0]
 801392a:	68f8      	ldr	r0, [r7, #12]
 801392c:	2300      	movs	r3, #0
 801392e:	9300      	str	r3, [sp, #0]
 8013930:	0023      	movs	r3, r4
 8013932:	f002 fbef 	bl	8016114 <I2C_TransferConfig>
 8013936:	e012      	b.n	801395e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801393c:	b29a      	uxth	r2, r3
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013946:	b2da      	uxtb	r2, r3
 8013948:	2380      	movs	r3, #128	@ 0x80
 801394a:	049c      	lsls	r4, r3, #18
 801394c:	230a      	movs	r3, #10
 801394e:	18fb      	adds	r3, r7, r3
 8013950:	8819      	ldrh	r1, [r3, #0]
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	2300      	movs	r3, #0
 8013956:	9300      	str	r3, [sp, #0]
 8013958:	0023      	movs	r3, r4
 801395a:	f002 fbdb 	bl	8016114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013962:	b29b      	uxth	r3, r3
 8013964:	2b00      	cmp	r3, #0
 8013966:	d198      	bne.n	801389a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013968:	697a      	ldr	r2, [r7, #20]
 801396a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	0018      	movs	r0, r3
 8013970:	f002 fa12 	bl	8015d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013974:	1e03      	subs	r3, r0, #0
 8013976:	d001      	beq.n	801397c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8013978:	2301      	movs	r3, #1
 801397a:	e01a      	b.n	80139b2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2220      	movs	r2, #32
 8013982:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	685a      	ldr	r2, [r3, #4]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	490c      	ldr	r1, [pc, #48]	@ (80139c0 <HAL_I2C_Master_Transmit+0x20c>)
 8013990:	400a      	ands	r2, r1
 8013992:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	2241      	movs	r2, #65	@ 0x41
 8013998:	2120      	movs	r1, #32
 801399a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	2242      	movs	r2, #66	@ 0x42
 80139a0:	2100      	movs	r1, #0
 80139a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2240      	movs	r2, #64	@ 0x40
 80139a8:	2100      	movs	r1, #0
 80139aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80139ac:	2300      	movs	r3, #0
 80139ae:	e000      	b.n	80139b2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80139b0:	2302      	movs	r3, #2
  }
}
 80139b2:	0018      	movs	r0, r3
 80139b4:	46bd      	mov	sp, r7
 80139b6:	b007      	add	sp, #28
 80139b8:	bd90      	pop	{r4, r7, pc}
 80139ba:	46c0      	nop			@ (mov r8, r8)
 80139bc:	80002000 	.word	0x80002000
 80139c0:	fe00e800 	.word	0xfe00e800

080139c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80139c4:	b590      	push	{r4, r7, lr}
 80139c6:	b089      	sub	sp, #36	@ 0x24
 80139c8:	af02      	add	r7, sp, #8
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	0008      	movs	r0, r1
 80139ce:	607a      	str	r2, [r7, #4]
 80139d0:	0019      	movs	r1, r3
 80139d2:	230a      	movs	r3, #10
 80139d4:	18fb      	adds	r3, r7, r3
 80139d6:	1c02      	adds	r2, r0, #0
 80139d8:	801a      	strh	r2, [r3, #0]
 80139da:	2308      	movs	r3, #8
 80139dc:	18fb      	adds	r3, r7, r3
 80139de:	1c0a      	adds	r2, r1, #0
 80139e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2241      	movs	r2, #65	@ 0x41
 80139e6:	5c9b      	ldrb	r3, [r3, r2]
 80139e8:	b2db      	uxtb	r3, r3
 80139ea:	2b20      	cmp	r3, #32
 80139ec:	d000      	beq.n	80139f0 <HAL_I2C_Master_Receive+0x2c>
 80139ee:	e0e8      	b.n	8013bc2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	2240      	movs	r2, #64	@ 0x40
 80139f4:	5c9b      	ldrb	r3, [r3, r2]
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d101      	bne.n	80139fe <HAL_I2C_Master_Receive+0x3a>
 80139fa:	2302      	movs	r3, #2
 80139fc:	e0e2      	b.n	8013bc4 <HAL_I2C_Master_Receive+0x200>
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2240      	movs	r2, #64	@ 0x40
 8013a02:	2101      	movs	r1, #1
 8013a04:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013a06:	f7fe fb75 	bl	80120f4 <HAL_GetTick>
 8013a0a:	0003      	movs	r3, r0
 8013a0c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013a0e:	2380      	movs	r3, #128	@ 0x80
 8013a10:	0219      	lsls	r1, r3, #8
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	2319      	movs	r3, #25
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f002 f928 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 8013a20:	1e03      	subs	r3, r0, #0
 8013a22:	d001      	beq.n	8013a28 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e0cd      	b.n	8013bc4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	2241      	movs	r2, #65	@ 0x41
 8013a2c:	2122      	movs	r1, #34	@ 0x22
 8013a2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2242      	movs	r2, #66	@ 0x42
 8013a34:	2110      	movs	r1, #16
 8013a36:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2208      	movs	r2, #8
 8013a48:	18ba      	adds	r2, r7, r2
 8013a4a:	8812      	ldrh	r2, [r2, #0]
 8013a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	2bff      	cmp	r3, #255	@ 0xff
 8013a5c:	d911      	bls.n	8013a82 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	22ff      	movs	r2, #255	@ 0xff
 8013a62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a68:	b2da      	uxtb	r2, r3
 8013a6a:	2380      	movs	r3, #128	@ 0x80
 8013a6c:	045c      	lsls	r4, r3, #17
 8013a6e:	230a      	movs	r3, #10
 8013a70:	18fb      	adds	r3, r7, r3
 8013a72:	8819      	ldrh	r1, [r3, #0]
 8013a74:	68f8      	ldr	r0, [r7, #12]
 8013a76:	4b55      	ldr	r3, [pc, #340]	@ (8013bcc <HAL_I2C_Master_Receive+0x208>)
 8013a78:	9300      	str	r3, [sp, #0]
 8013a7a:	0023      	movs	r3, r4
 8013a7c:	f002 fb4a 	bl	8016114 <I2C_TransferConfig>
 8013a80:	e076      	b.n	8013b70 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a86:	b29a      	uxth	r2, r3
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	2380      	movs	r3, #128	@ 0x80
 8013a94:	049c      	lsls	r4, r3, #18
 8013a96:	230a      	movs	r3, #10
 8013a98:	18fb      	adds	r3, r7, r3
 8013a9a:	8819      	ldrh	r1, [r3, #0]
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8013bcc <HAL_I2C_Master_Receive+0x208>)
 8013aa0:	9300      	str	r3, [sp, #0]
 8013aa2:	0023      	movs	r3, r4
 8013aa4:	f002 fb36 	bl	8016114 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8013aa8:	e062      	b.n	8013b70 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013aaa:	697a      	ldr	r2, [r7, #20]
 8013aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	0018      	movs	r0, r3
 8013ab2:	f002 f9b5 	bl	8015e20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8013ab6:	1e03      	subs	r3, r0, #0
 8013ab8:	d001      	beq.n	8013abe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8013aba:	2301      	movs	r3, #1
 8013abc:	e082      	b.n	8013bc4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ac8:	b2d2      	uxtb	r2, r2
 8013aca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ad0:	1c5a      	adds	r2, r3, #1
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ada:	3b01      	subs	r3, #1
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	b29a      	uxth	r2, r3
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d03a      	beq.n	8013b70 <HAL_I2C_Master_Receive+0x1ac>
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d136      	bne.n	8013b70 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	9300      	str	r3, [sp, #0]
 8013b0a:	0013      	movs	r3, r2
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	2180      	movs	r1, #128	@ 0x80
 8013b10:	f002 f8ae 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 8013b14:	1e03      	subs	r3, r0, #0
 8013b16:	d001      	beq.n	8013b1c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	e053      	b.n	8013bc4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	2bff      	cmp	r3, #255	@ 0xff
 8013b24:	d911      	bls.n	8013b4a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	22ff      	movs	r2, #255	@ 0xff
 8013b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b30:	b2da      	uxtb	r2, r3
 8013b32:	2380      	movs	r3, #128	@ 0x80
 8013b34:	045c      	lsls	r4, r3, #17
 8013b36:	230a      	movs	r3, #10
 8013b38:	18fb      	adds	r3, r7, r3
 8013b3a:	8819      	ldrh	r1, [r3, #0]
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	9300      	str	r3, [sp, #0]
 8013b42:	0023      	movs	r3, r4
 8013b44:	f002 fae6 	bl	8016114 <I2C_TransferConfig>
 8013b48:	e012      	b.n	8013b70 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b58:	b2da      	uxtb	r2, r3
 8013b5a:	2380      	movs	r3, #128	@ 0x80
 8013b5c:	049c      	lsls	r4, r3, #18
 8013b5e:	230a      	movs	r3, #10
 8013b60:	18fb      	adds	r3, r7, r3
 8013b62:	8819      	ldrh	r1, [r3, #0]
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	2300      	movs	r3, #0
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	0023      	movs	r3, r4
 8013b6c:	f002 fad2 	bl	8016114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b74:	b29b      	uxth	r3, r3
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d197      	bne.n	8013aaa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013b7a:	697a      	ldr	r2, [r7, #20]
 8013b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	0018      	movs	r0, r3
 8013b82:	f002 f909 	bl	8015d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013b86:	1e03      	subs	r3, r0, #0
 8013b88:	d001      	beq.n	8013b8e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e01a      	b.n	8013bc4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	2220      	movs	r2, #32
 8013b94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	685a      	ldr	r2, [r3, #4]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	490b      	ldr	r1, [pc, #44]	@ (8013bd0 <HAL_I2C_Master_Receive+0x20c>)
 8013ba2:	400a      	ands	r2, r1
 8013ba4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2241      	movs	r2, #65	@ 0x41
 8013baa:	2120      	movs	r1, #32
 8013bac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2242      	movs	r2, #66	@ 0x42
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2240      	movs	r2, #64	@ 0x40
 8013bba:	2100      	movs	r1, #0
 8013bbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	e000      	b.n	8013bc4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8013bc2:	2302      	movs	r3, #2
  }
}
 8013bc4:	0018      	movs	r0, r3
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	b007      	add	sp, #28
 8013bca:	bd90      	pop	{r4, r7, pc}
 8013bcc:	80002400 	.word	0x80002400
 8013bd0:	fe00e800 	.word	0xfe00e800

08013bd4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8013bd4:	b5b0      	push	{r4, r5, r7, lr}
 8013bd6:	b088      	sub	sp, #32
 8013bd8:	af02      	add	r7, sp, #8
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	0008      	movs	r0, r1
 8013bde:	607a      	str	r2, [r7, #4]
 8013be0:	0019      	movs	r1, r3
 8013be2:	230a      	movs	r3, #10
 8013be4:	18fb      	adds	r3, r7, r3
 8013be6:	1c02      	adds	r2, r0, #0
 8013be8:	801a      	strh	r2, [r3, #0]
 8013bea:	2308      	movs	r3, #8
 8013bec:	18fb      	adds	r3, r7, r3
 8013bee:	1c0a      	adds	r2, r1, #0
 8013bf0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2241      	movs	r2, #65	@ 0x41
 8013bf6:	5c9b      	ldrb	r3, [r3, r2]
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	2b20      	cmp	r3, #32
 8013bfc:	d000      	beq.n	8013c00 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8013bfe:	e0dd      	b.n	8013dbc <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	699a      	ldr	r2, [r3, #24]
 8013c06:	2380      	movs	r3, #128	@ 0x80
 8013c08:	021b      	lsls	r3, r3, #8
 8013c0a:	401a      	ands	r2, r3
 8013c0c:	2380      	movs	r3, #128	@ 0x80
 8013c0e:	021b      	lsls	r3, r3, #8
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d101      	bne.n	8013c18 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8013c14:	2302      	movs	r3, #2
 8013c16:	e0d2      	b.n	8013dbe <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2240      	movs	r2, #64	@ 0x40
 8013c1c:	5c9b      	ldrb	r3, [r3, r2]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d101      	bne.n	8013c26 <HAL_I2C_Master_Transmit_DMA+0x52>
 8013c22:	2302      	movs	r3, #2
 8013c24:	e0cb      	b.n	8013dbe <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2240      	movs	r2, #64	@ 0x40
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2241      	movs	r2, #65	@ 0x41
 8013c32:	2121      	movs	r1, #33	@ 0x21
 8013c34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2242      	movs	r2, #66	@ 0x42
 8013c3a:	2110      	movs	r1, #16
 8013c3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2200      	movs	r2, #0
 8013c42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2208      	movs	r2, #8
 8013c4e:	18ba      	adds	r2, r7, r2
 8013c50:	8812      	ldrh	r2, [r2, #0]
 8013c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	4a5c      	ldr	r2, [pc, #368]	@ (8013dc8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8013c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	4a5b      	ldr	r2, [pc, #364]	@ (8013dcc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8013c5e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	2bff      	cmp	r3, #255	@ 0xff
 8013c68:	d906      	bls.n	8013c78 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	22ff      	movs	r2, #255	@ 0xff
 8013c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013c70:	2380      	movs	r3, #128	@ 0x80
 8013c72:	045b      	lsls	r3, r3, #17
 8013c74:	617b      	str	r3, [r7, #20]
 8013c76:	e007      	b.n	8013c88 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013c82:	2380      	movs	r3, #128	@ 0x80
 8013c84:	049b      	lsls	r3, r3, #18
 8013c86:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d100      	bne.n	8013c92 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8013c90:	e078      	b.n	8013d84 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d023      	beq.n	8013ce2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8013dd0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8013ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ca6:	4a4b      	ldr	r2, [pc, #300]	@ (8013dd4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8013ca8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cae:	2200      	movs	r2, #0
 8013cb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013cbe:	6879      	ldr	r1, [r7, #4]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	3328      	adds	r3, #40	@ 0x28
 8013cc6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013ccc:	2513      	movs	r5, #19
 8013cce:	197c      	adds	r4, r7, r5
 8013cd0:	f7fe ff62 	bl	8012b98 <HAL_DMA_Start_IT>
 8013cd4:	0003      	movs	r3, r0
 8013cd6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013cd8:	197b      	adds	r3, r7, r5
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d13d      	bne.n	8013d5c <HAL_I2C_Master_Transmit_DMA+0x188>
 8013ce0:	e013      	b.n	8013d0a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2241      	movs	r2, #65	@ 0x41
 8013ce6:	2120      	movs	r1, #32
 8013ce8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2242      	movs	r2, #66	@ 0x42
 8013cee:	2100      	movs	r1, #0
 8013cf0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cf6:	2280      	movs	r2, #128	@ 0x80
 8013cf8:	431a      	orrs	r2, r3
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2240      	movs	r2, #64	@ 0x40
 8013d02:	2100      	movs	r1, #0
 8013d04:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013d06:	2301      	movs	r3, #1
 8013d08:	e059      	b.n	8013dbe <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d0e:	b2da      	uxtb	r2, r3
 8013d10:	697c      	ldr	r4, [r7, #20]
 8013d12:	230a      	movs	r3, #10
 8013d14:	18fb      	adds	r3, r7, r3
 8013d16:	8819      	ldrh	r1, [r3, #0]
 8013d18:	68f8      	ldr	r0, [r7, #12]
 8013d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8013dd8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013d1c:	9300      	str	r3, [sp, #0]
 8013d1e:	0023      	movs	r3, r4
 8013d20:	f002 f9f8 	bl	8016114 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013d28:	b29a      	uxth	r2, r3
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d2e:	1ad3      	subs	r3, r2, r3
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2240      	movs	r2, #64	@ 0x40
 8013d3a:	2100      	movs	r1, #0
 8013d3c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2110      	movs	r1, #16
 8013d42:	0018      	movs	r0, r3
 8013d44:	f002 fa20 	bl	8016188 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	2180      	movs	r1, #128	@ 0x80
 8013d54:	01c9      	lsls	r1, r1, #7
 8013d56:	430a      	orrs	r2, r1
 8013d58:	601a      	str	r2, [r3, #0]
 8013d5a:	e02d      	b.n	8013db8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2241      	movs	r2, #65	@ 0x41
 8013d60:	2120      	movs	r1, #32
 8013d62:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2242      	movs	r2, #66	@ 0x42
 8013d68:	2100      	movs	r1, #0
 8013d6a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d70:	2210      	movs	r2, #16
 8013d72:	431a      	orrs	r2, r3
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2240      	movs	r2, #64	@ 0x40
 8013d7c:	2100      	movs	r1, #0
 8013d7e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013d80:	2301      	movs	r3, #1
 8013d82:	e01c      	b.n	8013dbe <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	4a15      	ldr	r2, [pc, #84]	@ (8013ddc <HAL_I2C_Master_Transmit_DMA+0x208>)
 8013d88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d8e:	b2da      	uxtb	r2, r3
 8013d90:	2380      	movs	r3, #128	@ 0x80
 8013d92:	049c      	lsls	r4, r3, #18
 8013d94:	230a      	movs	r3, #10
 8013d96:	18fb      	adds	r3, r7, r3
 8013d98:	8819      	ldrh	r1, [r3, #0]
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8013dd8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013d9e:	9300      	str	r3, [sp, #0]
 8013da0:	0023      	movs	r3, r4
 8013da2:	f002 f9b7 	bl	8016114 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2240      	movs	r2, #64	@ 0x40
 8013daa:	2100      	movs	r1, #0
 8013dac:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	2101      	movs	r1, #1
 8013db2:	0018      	movs	r0, r3
 8013db4:	f002 f9e8 	bl	8016188 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013db8:	2300      	movs	r3, #0
 8013dba:	e000      	b.n	8013dbe <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013dbc:	2302      	movs	r3, #2
  }
}
 8013dbe:	0018      	movs	r0, r3
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	b006      	add	sp, #24
 8013dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8013dc6:	46c0      	nop			@ (mov r8, r8)
 8013dc8:	ffff0000 	.word	0xffff0000
 8013dcc:	08014a45 	.word	0x08014a45
 8013dd0:	08015ac1 	.word	0x08015ac1
 8013dd4:	08015c01 	.word	0x08015c01
 8013dd8:	80002000 	.word	0x80002000
 8013ddc:	080145f1 	.word	0x080145f1

08013de0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8013de0:	b5b0      	push	{r4, r5, r7, lr}
 8013de2:	b088      	sub	sp, #32
 8013de4:	af02      	add	r7, sp, #8
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	0008      	movs	r0, r1
 8013dea:	607a      	str	r2, [r7, #4]
 8013dec:	0019      	movs	r1, r3
 8013dee:	230a      	movs	r3, #10
 8013df0:	18fb      	adds	r3, r7, r3
 8013df2:	1c02      	adds	r2, r0, #0
 8013df4:	801a      	strh	r2, [r3, #0]
 8013df6:	2308      	movs	r3, #8
 8013df8:	18fb      	adds	r3, r7, r3
 8013dfa:	1c0a      	adds	r2, r1, #0
 8013dfc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	2241      	movs	r2, #65	@ 0x41
 8013e02:	5c9b      	ldrb	r3, [r3, r2]
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	2b20      	cmp	r3, #32
 8013e08:	d000      	beq.n	8013e0c <HAL_I2C_Master_Receive_DMA+0x2c>
 8013e0a:	e0dd      	b.n	8013fc8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	699a      	ldr	r2, [r3, #24]
 8013e12:	2380      	movs	r3, #128	@ 0x80
 8013e14:	021b      	lsls	r3, r3, #8
 8013e16:	401a      	ands	r2, r3
 8013e18:	2380      	movs	r3, #128	@ 0x80
 8013e1a:	021b      	lsls	r3, r3, #8
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d101      	bne.n	8013e24 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8013e20:	2302      	movs	r3, #2
 8013e22:	e0d2      	b.n	8013fca <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2240      	movs	r2, #64	@ 0x40
 8013e28:	5c9b      	ldrb	r3, [r3, r2]
 8013e2a:	2b01      	cmp	r3, #1
 8013e2c:	d101      	bne.n	8013e32 <HAL_I2C_Master_Receive_DMA+0x52>
 8013e2e:	2302      	movs	r3, #2
 8013e30:	e0cb      	b.n	8013fca <HAL_I2C_Master_Receive_DMA+0x1ea>
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2240      	movs	r2, #64	@ 0x40
 8013e36:	2101      	movs	r1, #1
 8013e38:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2241      	movs	r2, #65	@ 0x41
 8013e3e:	2122      	movs	r1, #34	@ 0x22
 8013e40:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2242      	movs	r2, #66	@ 0x42
 8013e46:	2110      	movs	r1, #16
 8013e48:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2208      	movs	r2, #8
 8013e5a:	18ba      	adds	r2, r7, r2
 8013e5c:	8812      	ldrh	r2, [r2, #0]
 8013e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	4a5c      	ldr	r2, [pc, #368]	@ (8013fd4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8013e64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	4a5b      	ldr	r2, [pc, #364]	@ (8013fd8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8013e6a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e70:	b29b      	uxth	r3, r3
 8013e72:	2bff      	cmp	r3, #255	@ 0xff
 8013e74:	d906      	bls.n	8013e84 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	22ff      	movs	r2, #255	@ 0xff
 8013e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013e7c:	2380      	movs	r3, #128	@ 0x80
 8013e7e:	045b      	lsls	r3, r3, #17
 8013e80:	617b      	str	r3, [r7, #20]
 8013e82:	e007      	b.n	8013e94 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013e8e:	2380      	movs	r3, #128	@ 0x80
 8013e90:	049b      	lsls	r3, r3, #18
 8013e92:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d100      	bne.n	8013e9e <HAL_I2C_Master_Receive_DMA+0xbe>
 8013e9c:	e078      	b.n	8013f90 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d023      	beq.n	8013eee <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8013fdc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8013eac:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8013fe0 <HAL_I2C_Master_Receive_DMA+0x200>)
 8013eb4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eba:	2200      	movs	r2, #0
 8013ebc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	3324      	adds	r3, #36	@ 0x24
 8013ed0:	0019      	movs	r1, r3
 8013ed2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013ed8:	2513      	movs	r5, #19
 8013eda:	197c      	adds	r4, r7, r5
 8013edc:	f7fe fe5c 	bl	8012b98 <HAL_DMA_Start_IT>
 8013ee0:	0003      	movs	r3, r0
 8013ee2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013ee4:	197b      	adds	r3, r7, r5
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d13d      	bne.n	8013f68 <HAL_I2C_Master_Receive_DMA+0x188>
 8013eec:	e013      	b.n	8013f16 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	2241      	movs	r2, #65	@ 0x41
 8013ef2:	2120      	movs	r1, #32
 8013ef4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2242      	movs	r2, #66	@ 0x42
 8013efa:	2100      	movs	r1, #0
 8013efc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f02:	2280      	movs	r2, #128	@ 0x80
 8013f04:	431a      	orrs	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2240      	movs	r2, #64	@ 0x40
 8013f0e:	2100      	movs	r1, #0
 8013f10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013f12:	2301      	movs	r3, #1
 8013f14:	e059      	b.n	8013fca <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f1a:	b2da      	uxtb	r2, r3
 8013f1c:	697c      	ldr	r4, [r7, #20]
 8013f1e:	230a      	movs	r3, #10
 8013f20:	18fb      	adds	r3, r7, r3
 8013f22:	8819      	ldrh	r1, [r3, #0]
 8013f24:	68f8      	ldr	r0, [r7, #12]
 8013f26:	4b2f      	ldr	r3, [pc, #188]	@ (8013fe4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013f28:	9300      	str	r3, [sp, #0]
 8013f2a:	0023      	movs	r3, r4
 8013f2c:	f002 f8f2 	bl	8016114 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013f34:	b29a      	uxth	r2, r3
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f3a:	1ad3      	subs	r3, r2, r3
 8013f3c:	b29a      	uxth	r2, r3
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2240      	movs	r2, #64	@ 0x40
 8013f46:	2100      	movs	r1, #0
 8013f48:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2110      	movs	r1, #16
 8013f4e:	0018      	movs	r0, r3
 8013f50:	f002 f91a 	bl	8016188 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	2180      	movs	r1, #128	@ 0x80
 8013f60:	0209      	lsls	r1, r1, #8
 8013f62:	430a      	orrs	r2, r1
 8013f64:	601a      	str	r2, [r3, #0]
 8013f66:	e02d      	b.n	8013fc4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2241      	movs	r2, #65	@ 0x41
 8013f6c:	2120      	movs	r1, #32
 8013f6e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	2242      	movs	r2, #66	@ 0x42
 8013f74:	2100      	movs	r1, #0
 8013f76:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f7c:	2210      	movs	r2, #16
 8013f7e:	431a      	orrs	r2, r3
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	2240      	movs	r2, #64	@ 0x40
 8013f88:	2100      	movs	r1, #0
 8013f8a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	e01c      	b.n	8013fca <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	4a15      	ldr	r2, [pc, #84]	@ (8013fe8 <HAL_I2C_Master_Receive_DMA+0x208>)
 8013f94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f9a:	b2da      	uxtb	r2, r3
 8013f9c:	2380      	movs	r3, #128	@ 0x80
 8013f9e:	049c      	lsls	r4, r3, #18
 8013fa0:	230a      	movs	r3, #10
 8013fa2:	18fb      	adds	r3, r7, r3
 8013fa4:	8819      	ldrh	r1, [r3, #0]
 8013fa6:	68f8      	ldr	r0, [r7, #12]
 8013fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe4 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	0023      	movs	r3, r4
 8013fae:	f002 f8b1 	bl	8016114 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	2240      	movs	r2, #64	@ 0x40
 8013fb6:	2100      	movs	r1, #0
 8013fb8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	2101      	movs	r1, #1
 8013fbe:	0018      	movs	r0, r3
 8013fc0:	f002 f8e2 	bl	8016188 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	e000      	b.n	8013fca <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013fc8:	2302      	movs	r3, #2
  }
}
 8013fca:	0018      	movs	r0, r3
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	b006      	add	sp, #24
 8013fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8013fd2:	46c0      	nop			@ (mov r8, r8)
 8013fd4:	ffff0000 	.word	0xffff0000
 8013fd8:	08014a45 	.word	0x08014a45
 8013fdc:	08015b61 	.word	0x08015b61
 8013fe0:	08015c01 	.word	0x08015c01
 8013fe4:	80002400 	.word	0x80002400
 8013fe8:	080145f1 	.word	0x080145f1

08013fec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013fec:	b590      	push	{r4, r7, lr}
 8013fee:	b089      	sub	sp, #36	@ 0x24
 8013ff0:	af02      	add	r7, sp, #8
 8013ff2:	60f8      	str	r0, [r7, #12]
 8013ff4:	000c      	movs	r4, r1
 8013ff6:	0010      	movs	r0, r2
 8013ff8:	0019      	movs	r1, r3
 8013ffa:	230a      	movs	r3, #10
 8013ffc:	18fb      	adds	r3, r7, r3
 8013ffe:	1c22      	adds	r2, r4, #0
 8014000:	801a      	strh	r2, [r3, #0]
 8014002:	2308      	movs	r3, #8
 8014004:	18fb      	adds	r3, r7, r3
 8014006:	1c02      	adds	r2, r0, #0
 8014008:	801a      	strh	r2, [r3, #0]
 801400a:	1dbb      	adds	r3, r7, #6
 801400c:	1c0a      	adds	r2, r1, #0
 801400e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2241      	movs	r2, #65	@ 0x41
 8014014:	5c9b      	ldrb	r3, [r3, r2]
 8014016:	b2db      	uxtb	r3, r3
 8014018:	2b20      	cmp	r3, #32
 801401a:	d000      	beq.n	801401e <HAL_I2C_Mem_Read+0x32>
 801401c:	e110      	b.n	8014240 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 801401e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014020:	2b00      	cmp	r3, #0
 8014022:	d004      	beq.n	801402e <HAL_I2C_Mem_Read+0x42>
 8014024:	232c      	movs	r3, #44	@ 0x2c
 8014026:	18fb      	adds	r3, r7, r3
 8014028:	881b      	ldrh	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d105      	bne.n	801403a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	2280      	movs	r2, #128	@ 0x80
 8014032:	0092      	lsls	r2, r2, #2
 8014034:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8014036:	2301      	movs	r3, #1
 8014038:	e103      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2240      	movs	r2, #64	@ 0x40
 801403e:	5c9b      	ldrb	r3, [r3, r2]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d101      	bne.n	8014048 <HAL_I2C_Mem_Read+0x5c>
 8014044:	2302      	movs	r3, #2
 8014046:	e0fc      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	2240      	movs	r2, #64	@ 0x40
 801404c:	2101      	movs	r1, #1
 801404e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8014050:	f7fe f850 	bl	80120f4 <HAL_GetTick>
 8014054:	0003      	movs	r3, r0
 8014056:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014058:	2380      	movs	r3, #128	@ 0x80
 801405a:	0219      	lsls	r1, r3, #8
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	2319      	movs	r3, #25
 8014064:	2201      	movs	r2, #1
 8014066:	f001 fe03 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 801406a:	1e03      	subs	r3, r0, #0
 801406c:	d001      	beq.n	8014072 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 801406e:	2301      	movs	r3, #1
 8014070:	e0e7      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2241      	movs	r2, #65	@ 0x41
 8014076:	2122      	movs	r1, #34	@ 0x22
 8014078:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2242      	movs	r2, #66	@ 0x42
 801407e:	2140      	movs	r1, #64	@ 0x40
 8014080:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2200      	movs	r2, #0
 8014086:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801408c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	222c      	movs	r2, #44	@ 0x2c
 8014092:	18ba      	adds	r2, r7, r2
 8014094:	8812      	ldrh	r2, [r2, #0]
 8014096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2200      	movs	r2, #0
 801409c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801409e:	1dbb      	adds	r3, r7, #6
 80140a0:	881c      	ldrh	r4, [r3, #0]
 80140a2:	2308      	movs	r3, #8
 80140a4:	18fb      	adds	r3, r7, r3
 80140a6:	881a      	ldrh	r2, [r3, #0]
 80140a8:	230a      	movs	r3, #10
 80140aa:	18fb      	adds	r3, r7, r3
 80140ac:	8819      	ldrh	r1, [r3, #0]
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b6:	9300      	str	r3, [sp, #0]
 80140b8:	0023      	movs	r3, r4
 80140ba:	f000 ffc1 	bl	8015040 <I2C_RequestMemoryRead>
 80140be:	1e03      	subs	r3, r0, #0
 80140c0:	d005      	beq.n	80140ce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	2240      	movs	r2, #64	@ 0x40
 80140c6:	2100      	movs	r1, #0
 80140c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80140ca:	2301      	movs	r3, #1
 80140cc:	e0b9      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140d2:	b29b      	uxth	r3, r3
 80140d4:	2bff      	cmp	r3, #255	@ 0xff
 80140d6:	d911      	bls.n	80140fc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	22ff      	movs	r2, #255	@ 0xff
 80140dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80140e2:	b2da      	uxtb	r2, r3
 80140e4:	2380      	movs	r3, #128	@ 0x80
 80140e6:	045c      	lsls	r4, r3, #17
 80140e8:	230a      	movs	r3, #10
 80140ea:	18fb      	adds	r3, r7, r3
 80140ec:	8819      	ldrh	r1, [r3, #0]
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	4b56      	ldr	r3, [pc, #344]	@ (801424c <HAL_I2C_Mem_Read+0x260>)
 80140f2:	9300      	str	r3, [sp, #0]
 80140f4:	0023      	movs	r3, r4
 80140f6:	f002 f80d 	bl	8016114 <I2C_TransferConfig>
 80140fa:	e012      	b.n	8014122 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014100:	b29a      	uxth	r2, r3
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801410a:	b2da      	uxtb	r2, r3
 801410c:	2380      	movs	r3, #128	@ 0x80
 801410e:	049c      	lsls	r4, r3, #18
 8014110:	230a      	movs	r3, #10
 8014112:	18fb      	adds	r3, r7, r3
 8014114:	8819      	ldrh	r1, [r3, #0]
 8014116:	68f8      	ldr	r0, [r7, #12]
 8014118:	4b4c      	ldr	r3, [pc, #304]	@ (801424c <HAL_I2C_Mem_Read+0x260>)
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	0023      	movs	r3, r4
 801411e:	f001 fff9 	bl	8016114 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8014122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014124:	68f8      	ldr	r0, [r7, #12]
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	0013      	movs	r3, r2
 801412c:	2200      	movs	r2, #0
 801412e:	2104      	movs	r1, #4
 8014130:	f001 fd9e 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 8014134:	1e03      	subs	r3, r0, #0
 8014136:	d001      	beq.n	801413c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8014138:	2301      	movs	r3, #1
 801413a:	e082      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014146:	b2d2      	uxtb	r2, r2
 8014148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014158:	3b01      	subs	r3, #1
 801415a:	b29a      	uxth	r2, r3
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014164:	b29b      	uxth	r3, r3
 8014166:	3b01      	subs	r3, #1
 8014168:	b29a      	uxth	r2, r3
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014172:	b29b      	uxth	r3, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d03a      	beq.n	80141ee <HAL_I2C_Mem_Read+0x202>
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801417c:	2b00      	cmp	r3, #0
 801417e:	d136      	bne.n	80141ee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8014180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	9300      	str	r3, [sp, #0]
 8014188:	0013      	movs	r3, r2
 801418a:	2200      	movs	r2, #0
 801418c:	2180      	movs	r1, #128	@ 0x80
 801418e:	f001 fd6f 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 8014192:	1e03      	subs	r3, r0, #0
 8014194:	d001      	beq.n	801419a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8014196:	2301      	movs	r3, #1
 8014198:	e053      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801419e:	b29b      	uxth	r3, r3
 80141a0:	2bff      	cmp	r3, #255	@ 0xff
 80141a2:	d911      	bls.n	80141c8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	22ff      	movs	r2, #255	@ 0xff
 80141a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141ae:	b2da      	uxtb	r2, r3
 80141b0:	2380      	movs	r3, #128	@ 0x80
 80141b2:	045c      	lsls	r4, r3, #17
 80141b4:	230a      	movs	r3, #10
 80141b6:	18fb      	adds	r3, r7, r3
 80141b8:	8819      	ldrh	r1, [r3, #0]
 80141ba:	68f8      	ldr	r0, [r7, #12]
 80141bc:	2300      	movs	r3, #0
 80141be:	9300      	str	r3, [sp, #0]
 80141c0:	0023      	movs	r3, r4
 80141c2:	f001 ffa7 	bl	8016114 <I2C_TransferConfig>
 80141c6:	e012      	b.n	80141ee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141d6:	b2da      	uxtb	r2, r3
 80141d8:	2380      	movs	r3, #128	@ 0x80
 80141da:	049c      	lsls	r4, r3, #18
 80141dc:	230a      	movs	r3, #10
 80141de:	18fb      	adds	r3, r7, r3
 80141e0:	8819      	ldrh	r1, [r3, #0]
 80141e2:	68f8      	ldr	r0, [r7, #12]
 80141e4:	2300      	movs	r3, #0
 80141e6:	9300      	str	r3, [sp, #0]
 80141e8:	0023      	movs	r3, r4
 80141ea:	f001 ff93 	bl	8016114 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d194      	bne.n	8014122 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80141f8:	697a      	ldr	r2, [r7, #20]
 80141fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	0018      	movs	r0, r3
 8014200:	f001 fdca 	bl	8015d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014204:	1e03      	subs	r3, r0, #0
 8014206:	d001      	beq.n	801420c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8014208:	2301      	movs	r3, #1
 801420a:	e01a      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2220      	movs	r2, #32
 8014212:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	685a      	ldr	r2, [r3, #4]
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	490c      	ldr	r1, [pc, #48]	@ (8014250 <HAL_I2C_Mem_Read+0x264>)
 8014220:	400a      	ands	r2, r1
 8014222:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2241      	movs	r2, #65	@ 0x41
 8014228:	2120      	movs	r1, #32
 801422a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	2242      	movs	r2, #66	@ 0x42
 8014230:	2100      	movs	r1, #0
 8014232:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	2240      	movs	r2, #64	@ 0x40
 8014238:	2100      	movs	r1, #0
 801423a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801423c:	2300      	movs	r3, #0
 801423e:	e000      	b.n	8014242 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8014240:	2302      	movs	r3, #2
  }
}
 8014242:	0018      	movs	r0, r3
 8014244:	46bd      	mov	sp, r7
 8014246:	b007      	add	sp, #28
 8014248:	bd90      	pop	{r4, r7, pc}
 801424a:	46c0      	nop			@ (mov r8, r8)
 801424c:	80002400 	.word	0x80002400
 8014250:	fe00e800 	.word	0xfe00e800

08014254 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8014254:	b5b0      	push	{r4, r5, r7, lr}
 8014256:	b088      	sub	sp, #32
 8014258:	af02      	add	r7, sp, #8
 801425a:	60f8      	str	r0, [r7, #12]
 801425c:	000c      	movs	r4, r1
 801425e:	0010      	movs	r0, r2
 8014260:	0019      	movs	r1, r3
 8014262:	230a      	movs	r3, #10
 8014264:	18fb      	adds	r3, r7, r3
 8014266:	1c22      	adds	r2, r4, #0
 8014268:	801a      	strh	r2, [r3, #0]
 801426a:	2308      	movs	r3, #8
 801426c:	18fb      	adds	r3, r7, r3
 801426e:	1c02      	adds	r2, r0, #0
 8014270:	801a      	strh	r2, [r3, #0]
 8014272:	1dbb      	adds	r3, r7, #6
 8014274:	1c0a      	adds	r2, r1, #0
 8014276:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	2241      	movs	r2, #65	@ 0x41
 801427c:	5c9b      	ldrb	r3, [r3, r2]
 801427e:	b2db      	uxtb	r3, r3
 8014280:	2b20      	cmp	r3, #32
 8014282:	d000      	beq.n	8014286 <HAL_I2C_Mem_Write_DMA+0x32>
 8014284:	e0d8      	b.n	8014438 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8014286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014288:	2b00      	cmp	r3, #0
 801428a:	d004      	beq.n	8014296 <HAL_I2C_Mem_Write_DMA+0x42>
 801428c:	232c      	movs	r3, #44	@ 0x2c
 801428e:	18fb      	adds	r3, r7, r3
 8014290:	881b      	ldrh	r3, [r3, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d105      	bne.n	80142a2 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	2280      	movs	r2, #128	@ 0x80
 801429a:	0092      	lsls	r2, r2, #2
 801429c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801429e:	2301      	movs	r3, #1
 80142a0:	e0cb      	b.n	801443a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	699a      	ldr	r2, [r3, #24]
 80142a8:	2380      	movs	r3, #128	@ 0x80
 80142aa:	021b      	lsls	r3, r3, #8
 80142ac:	401a      	ands	r2, r3
 80142ae:	2380      	movs	r3, #128	@ 0x80
 80142b0:	021b      	lsls	r3, r3, #8
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d101      	bne.n	80142ba <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80142b6:	2302      	movs	r3, #2
 80142b8:	e0bf      	b.n	801443a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2240      	movs	r2, #64	@ 0x40
 80142be:	5c9b      	ldrb	r3, [r3, r2]
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d101      	bne.n	80142c8 <HAL_I2C_Mem_Write_DMA+0x74>
 80142c4:	2302      	movs	r3, #2
 80142c6:	e0b8      	b.n	801443a <HAL_I2C_Mem_Write_DMA+0x1e6>
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2240      	movs	r2, #64	@ 0x40
 80142cc:	2101      	movs	r1, #1
 80142ce:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	2241      	movs	r2, #65	@ 0x41
 80142d4:	2121      	movs	r1, #33	@ 0x21
 80142d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	2242      	movs	r2, #66	@ 0x42
 80142dc:	2140      	movs	r1, #64	@ 0x40
 80142de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	2200      	movs	r2, #0
 80142e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80142ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	222c      	movs	r2, #44	@ 0x2c
 80142f0:	18ba      	adds	r2, r7, r2
 80142f2:	8812      	ldrh	r2, [r2, #0]
 80142f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	4a52      	ldr	r2, [pc, #328]	@ (8014444 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 80142fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	4a52      	ldr	r2, [pc, #328]	@ (8014448 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8014300:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8014302:	230a      	movs	r3, #10
 8014304:	18fb      	adds	r3, r7, r3
 8014306:	881a      	ldrh	r2, [r3, #0]
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014310:	b29b      	uxth	r3, r3
 8014312:	2bff      	cmp	r3, #255	@ 0xff
 8014314:	d903      	bls.n	801431e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	22ff      	movs	r2, #255	@ 0xff
 801431a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801431c:	e004      	b.n	8014328 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014322:	b29a      	uxth	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014328:	1dbb      	adds	r3, r7, #6
 801432a:	881b      	ldrh	r3, [r3, #0]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d10b      	bne.n	8014348 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014330:	2308      	movs	r3, #8
 8014332:	18fb      	adds	r3, r7, r3
 8014334:	881b      	ldrh	r3, [r3, #0]
 8014336:	b2da      	uxtb	r2, r3
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	2201      	movs	r2, #1
 8014342:	4252      	negs	r2, r2
 8014344:	651a      	str	r2, [r3, #80]	@ 0x50
 8014346:	e00e      	b.n	8014366 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014348:	2108      	movs	r1, #8
 801434a:	187b      	adds	r3, r7, r1
 801434c:	881b      	ldrh	r3, [r3, #0]
 801434e:	0a1b      	lsrs	r3, r3, #8
 8014350:	b29b      	uxth	r3, r3
 8014352:	b2da      	uxtb	r2, r3
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 801435a:	187b      	adds	r3, r7, r1
 801435c:	881b      	ldrh	r3, [r3, #0]
 801435e:	b2db      	uxtb	r3, r3
 8014360:	001a      	movs	r2, r3
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801436a:	2b00      	cmp	r3, #0
 801436c:	d023      	beq.n	80143b6 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014372:	4a36      	ldr	r2, [pc, #216]	@ (801444c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8014374:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801437a:	4a35      	ldr	r2, [pc, #212]	@ (8014450 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 801437c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014382:	2200      	movs	r2, #0
 8014384:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801438a:	2200      	movs	r2, #0
 801438c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	3328      	adds	r3, #40	@ 0x28
 801439a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80143a0:	2517      	movs	r5, #23
 80143a2:	197c      	adds	r4, r7, r5
 80143a4:	f7fe fbf8 	bl	8012b98 <HAL_DMA_Start_IT>
 80143a8:	0003      	movs	r3, r0
 80143aa:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80143ac:	197b      	adds	r3, r7, r5
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d12d      	bne.n	8014410 <HAL_I2C_Mem_Write_DMA+0x1bc>
 80143b4:	e013      	b.n	80143de <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2241      	movs	r2, #65	@ 0x41
 80143ba:	2120      	movs	r1, #32
 80143bc:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2242      	movs	r2, #66	@ 0x42
 80143c2:	2100      	movs	r1, #0
 80143c4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143ca:	2280      	movs	r2, #128	@ 0x80
 80143cc:	431a      	orrs	r2, r3
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	2240      	movs	r2, #64	@ 0x40
 80143d6:	2100      	movs	r1, #0
 80143d8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80143da:	2301      	movs	r3, #1
 80143dc:	e02d      	b.n	801443a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80143de:	1dbb      	adds	r3, r7, #6
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	b2da      	uxtb	r2, r3
 80143e4:	2380      	movs	r3, #128	@ 0x80
 80143e6:	045c      	lsls	r4, r3, #17
 80143e8:	230a      	movs	r3, #10
 80143ea:	18fb      	adds	r3, r7, r3
 80143ec:	8819      	ldrh	r1, [r3, #0]
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	4b18      	ldr	r3, [pc, #96]	@ (8014454 <HAL_I2C_Mem_Write_DMA+0x200>)
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	0023      	movs	r3, r4
 80143f6:	f001 fe8d 	bl	8016114 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2240      	movs	r2, #64	@ 0x40
 80143fe:	2100      	movs	r1, #0
 8014400:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	2101      	movs	r1, #1
 8014406:	0018      	movs	r0, r3
 8014408:	f001 febe 	bl	8016188 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 801440c:	2300      	movs	r3, #0
 801440e:	e014      	b.n	801443a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	2241      	movs	r2, #65	@ 0x41
 8014414:	2120      	movs	r1, #32
 8014416:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2242      	movs	r2, #66	@ 0x42
 801441c:	2100      	movs	r1, #0
 801441e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014424:	2210      	movs	r2, #16
 8014426:	431a      	orrs	r2, r3
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2240      	movs	r2, #64	@ 0x40
 8014430:	2100      	movs	r1, #0
 8014432:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8014434:	2301      	movs	r3, #1
 8014436:	e000      	b.n	801443a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8014438:	2302      	movs	r3, #2
  }
}
 801443a:	0018      	movs	r0, r3
 801443c:	46bd      	mov	sp, r7
 801443e:	b006      	add	sp, #24
 8014440:	bdb0      	pop	{r4, r5, r7, pc}
 8014442:	46c0      	nop			@ (mov r8, r8)
 8014444:	ffff0000 	.word	0xffff0000
 8014448:	08014c3d 	.word	0x08014c3d
 801444c:	08015ac1 	.word	0x08015ac1
 8014450:	08015c01 	.word	0x08015c01
 8014454:	80002000 	.word	0x80002000

08014458 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	699b      	ldr	r3, [r3, #24]
 8014466:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014474:	2b00      	cmp	r3, #0
 8014476:	d005      	beq.n	8014484 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	68f9      	ldr	r1, [r7, #12]
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	4798      	blx	r3
  }
}
 8014484:	46c0      	nop			@ (mov r8, r8)
 8014486:	46bd      	mov	sp, r7
 8014488:	b004      	add	sp, #16
 801448a:	bd80      	pop	{r7, pc}

0801448c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	681b      	ldr	r3, [r3, #0]
 8014498:	699b      	ldr	r3, [r3, #24]
 801449a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80144a4:	697a      	ldr	r2, [r7, #20]
 80144a6:	2380      	movs	r3, #128	@ 0x80
 80144a8:	005b      	lsls	r3, r3, #1
 80144aa:	4013      	ands	r3, r2
 80144ac:	d00e      	beq.n	80144cc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	2280      	movs	r2, #128	@ 0x80
 80144b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80144b4:	d00a      	beq.n	80144cc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144ba:	2201      	movs	r2, #1
 80144bc:	431a      	orrs	r2, r3
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2280      	movs	r2, #128	@ 0x80
 80144c8:	0052      	lsls	r2, r2, #1
 80144ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80144cc:	697a      	ldr	r2, [r7, #20]
 80144ce:	2380      	movs	r3, #128	@ 0x80
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	4013      	ands	r3, r2
 80144d4:	d00e      	beq.n	80144f4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	2280      	movs	r2, #128	@ 0x80
 80144da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80144dc:	d00a      	beq.n	80144f4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144e2:	2208      	movs	r2, #8
 80144e4:	431a      	orrs	r2, r3
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2280      	movs	r2, #128	@ 0x80
 80144f0:	00d2      	lsls	r2, r2, #3
 80144f2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80144f4:	697a      	ldr	r2, [r7, #20]
 80144f6:	2380      	movs	r3, #128	@ 0x80
 80144f8:	009b      	lsls	r3, r3, #2
 80144fa:	4013      	ands	r3, r2
 80144fc:	d00e      	beq.n	801451c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	2280      	movs	r2, #128	@ 0x80
 8014502:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014504:	d00a      	beq.n	801451c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801450a:	2202      	movs	r2, #2
 801450c:	431a      	orrs	r2, r3
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	2280      	movs	r2, #128	@ 0x80
 8014518:	0092      	lsls	r2, r2, #2
 801451a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014520:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	220b      	movs	r2, #11
 8014526:	4013      	ands	r3, r2
 8014528:	d005      	beq.n	8014536 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801452a:	68fa      	ldr	r2, [r7, #12]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	0011      	movs	r1, r2
 8014530:	0018      	movs	r0, r3
 8014532:	f001 f977 	bl	8015824 <I2C_ITError>
  }
}
 8014536:	46c0      	nop			@ (mov r8, r8)
 8014538:	46bd      	mov	sp, r7
 801453a:	b006      	add	sp, #24
 801453c:	bd80      	pop	{r7, pc}

0801453e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b082      	sub	sp, #8
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014546:	46c0      	nop			@ (mov r8, r8)
 8014548:	46bd      	mov	sp, r7
 801454a:	b002      	add	sp, #8
 801454c:	bd80      	pop	{r7, pc}

0801454e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801454e:	b580      	push	{r7, lr}
 8014550:	b082      	sub	sp, #8
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014556:	46c0      	nop			@ (mov r8, r8)
 8014558:	46bd      	mov	sp, r7
 801455a:	b002      	add	sp, #8
 801455c:	bd80      	pop	{r7, pc}

0801455e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801455e:	b580      	push	{r7, lr}
 8014560:	b082      	sub	sp, #8
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014566:	46c0      	nop			@ (mov r8, r8)
 8014568:	46bd      	mov	sp, r7
 801456a:	b002      	add	sp, #8
 801456c:	bd80      	pop	{r7, pc}

0801456e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801456e:	b580      	push	{r7, lr}
 8014570:	b082      	sub	sp, #8
 8014572:	af00      	add	r7, sp, #0
 8014574:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014576:	46c0      	nop			@ (mov r8, r8)
 8014578:	46bd      	mov	sp, r7
 801457a:	b002      	add	sp, #8
 801457c:	bd80      	pop	{r7, pc}

0801457e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801457e:	b580      	push	{r7, lr}
 8014580:	b082      	sub	sp, #8
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
 8014586:	0008      	movs	r0, r1
 8014588:	0011      	movs	r1, r2
 801458a:	1cfb      	adds	r3, r7, #3
 801458c:	1c02      	adds	r2, r0, #0
 801458e:	701a      	strb	r2, [r3, #0]
 8014590:	003b      	movs	r3, r7
 8014592:	1c0a      	adds	r2, r1, #0
 8014594:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014596:	46c0      	nop			@ (mov r8, r8)
 8014598:	46bd      	mov	sp, r7
 801459a:	b002      	add	sp, #8
 801459c:	bd80      	pop	{r7, pc}

0801459e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801459e:	b580      	push	{r7, lr}
 80145a0:	b082      	sub	sp, #8
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80145a6:	46c0      	nop			@ (mov r8, r8)
 80145a8:	46bd      	mov	sp, r7
 80145aa:	b002      	add	sp, #8
 80145ac:	bd80      	pop	{r7, pc}

080145ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b082      	sub	sp, #8
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80145b6:	46c0      	nop			@ (mov r8, r8)
 80145b8:	46bd      	mov	sp, r7
 80145ba:	b002      	add	sp, #8
 80145bc:	bd80      	pop	{r7, pc}

080145be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80145be:	b580      	push	{r7, lr}
 80145c0:	b082      	sub	sp, #8
 80145c2:	af00      	add	r7, sp, #0
 80145c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80145c6:	46c0      	nop			@ (mov r8, r8)
 80145c8:	46bd      	mov	sp, r7
 80145ca:	b002      	add	sp, #8
 80145cc:	bd80      	pop	{r7, pc}

080145ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80145ce:	b580      	push	{r7, lr}
 80145d0:	b082      	sub	sp, #8
 80145d2:	af00      	add	r7, sp, #0
 80145d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80145d6:	46c0      	nop			@ (mov r8, r8)
 80145d8:	46bd      	mov	sp, r7
 80145da:	b002      	add	sp, #8
 80145dc:	bd80      	pop	{r7, pc}

080145de <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80145de:	b580      	push	{r7, lr}
 80145e0:	b082      	sub	sp, #8
 80145e2:	af00      	add	r7, sp, #0
 80145e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80145e6:	46c0      	nop			@ (mov r8, r8)
 80145e8:	46bd      	mov	sp, r7
 80145ea:	b002      	add	sp, #8
 80145ec:	bd80      	pop	{r7, pc}
	...

080145f0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80145f0:	b590      	push	{r4, r7, lr}
 80145f2:	b089      	sub	sp, #36	@ 0x24
 80145f4:	af02      	add	r7, sp, #8
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2240      	movs	r2, #64	@ 0x40
 8014604:	5c9b      	ldrb	r3, [r3, r2]
 8014606:	2b01      	cmp	r3, #1
 8014608:	d101      	bne.n	801460e <I2C_Master_ISR_IT+0x1e>
 801460a:	2302      	movs	r3, #2
 801460c:	e113      	b.n	8014836 <I2C_Master_ISR_IT+0x246>
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	2240      	movs	r2, #64	@ 0x40
 8014612:	2101      	movs	r1, #1
 8014614:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	2210      	movs	r2, #16
 801461a:	4013      	ands	r3, r2
 801461c:	d012      	beq.n	8014644 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2210      	movs	r2, #16
 8014622:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014624:	d00e      	beq.n	8014644 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2210      	movs	r2, #16
 801462c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014632:	2204      	movs	r2, #4
 8014634:	431a      	orrs	r2, r3
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	0018      	movs	r0, r3
 801463e:	f001 fa1c 	bl	8015a7a <I2C_Flush_TXDR>
 8014642:	e0e5      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	2204      	movs	r2, #4
 8014648:	4013      	ands	r3, r2
 801464a:	d021      	beq.n	8014690 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2204      	movs	r2, #4
 8014650:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014652:	d01d      	beq.n	8014690 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	2204      	movs	r2, #4
 8014658:	4393      	bics	r3, r2
 801465a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014666:	b2d2      	uxtb	r2, r2
 8014668:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801466e:	1c5a      	adds	r2, r3, #1
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014678:	3b01      	subs	r3, #1
 801467a:	b29a      	uxth	r2, r3
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014684:	b29b      	uxth	r3, r3
 8014686:	3b01      	subs	r3, #1
 8014688:	b29a      	uxth	r2, r3
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801468e:	e0bf      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	2202      	movs	r2, #2
 8014694:	4013      	ands	r3, r2
 8014696:	d01c      	beq.n	80146d2 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2202      	movs	r2, #2
 801469c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801469e:	d018      	beq.n	80146d2 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146a4:	781a      	ldrb	r2, [r3, #0]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146b0:	1c5a      	adds	r2, r3, #1
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146ba:	3b01      	subs	r3, #1
 80146bc:	b29a      	uxth	r2, r3
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	3b01      	subs	r3, #1
 80146ca:	b29a      	uxth	r2, r3
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80146d0:	e09e      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	2280      	movs	r2, #128	@ 0x80
 80146d6:	4013      	ands	r3, r2
 80146d8:	d100      	bne.n	80146dc <I2C_Master_ISR_IT+0xec>
 80146da:	e069      	b.n	80147b0 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2240      	movs	r2, #64	@ 0x40
 80146e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80146e2:	d065      	beq.n	80147b0 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d04a      	beq.n	8014784 <I2C_Master_ISR_IT+0x194>
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d146      	bne.n	8014784 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	2112      	movs	r1, #18
 8014700:	187b      	adds	r3, r7, r1
 8014702:	0592      	lsls	r2, r2, #22
 8014704:	0d92      	lsrs	r2, r2, #22
 8014706:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801470c:	b29b      	uxth	r3, r3
 801470e:	2bff      	cmp	r3, #255	@ 0xff
 8014710:	d910      	bls.n	8014734 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	22ff      	movs	r2, #255	@ 0xff
 8014716:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801471c:	b2da      	uxtb	r2, r3
 801471e:	2380      	movs	r3, #128	@ 0x80
 8014720:	045c      	lsls	r4, r3, #17
 8014722:	187b      	adds	r3, r7, r1
 8014724:	8819      	ldrh	r1, [r3, #0]
 8014726:	68f8      	ldr	r0, [r7, #12]
 8014728:	2300      	movs	r3, #0
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	0023      	movs	r3, r4
 801472e:	f001 fcf1 	bl	8016114 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014732:	e03c      	b.n	80147ae <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014738:	b29a      	uxth	r2, r3
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014742:	4a3f      	ldr	r2, [pc, #252]	@ (8014840 <I2C_Master_ISR_IT+0x250>)
 8014744:	4293      	cmp	r3, r2
 8014746:	d00e      	beq.n	8014766 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801474c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014752:	2312      	movs	r3, #18
 8014754:	18fb      	adds	r3, r7, r3
 8014756:	8819      	ldrh	r1, [r3, #0]
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	2300      	movs	r3, #0
 801475c:	9300      	str	r3, [sp, #0]
 801475e:	0023      	movs	r3, r4
 8014760:	f001 fcd8 	bl	8016114 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014764:	e023      	b.n	80147ae <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801476a:	b2da      	uxtb	r2, r3
 801476c:	2380      	movs	r3, #128	@ 0x80
 801476e:	049c      	lsls	r4, r3, #18
 8014770:	2312      	movs	r3, #18
 8014772:	18fb      	adds	r3, r7, r3
 8014774:	8819      	ldrh	r1, [r3, #0]
 8014776:	68f8      	ldr	r0, [r7, #12]
 8014778:	2300      	movs	r3, #0
 801477a:	9300      	str	r3, [sp, #0]
 801477c:	0023      	movs	r3, r4
 801477e:	f001 fcc9 	bl	8016114 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014782:	e014      	b.n	80147ae <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	685a      	ldr	r2, [r3, #4]
 801478a:	2380      	movs	r3, #128	@ 0x80
 801478c:	049b      	lsls	r3, r3, #18
 801478e:	401a      	ands	r2, r3
 8014790:	2380      	movs	r3, #128	@ 0x80
 8014792:	049b      	lsls	r3, r3, #18
 8014794:	429a      	cmp	r2, r3
 8014796:	d004      	beq.n	80147a2 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	0018      	movs	r0, r3
 801479c:	f000 fd56 	bl	801524c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80147a0:	e036      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2140      	movs	r1, #64	@ 0x40
 80147a6:	0018      	movs	r0, r3
 80147a8:	f001 f83c 	bl	8015824 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80147ac:	e030      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
 80147ae:	e02f      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	2240      	movs	r2, #64	@ 0x40
 80147b4:	4013      	ands	r3, r2
 80147b6:	d02b      	beq.n	8014810 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2240      	movs	r2, #64	@ 0x40
 80147bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80147be:	d027      	beq.n	8014810 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147c4:	b29b      	uxth	r3, r3
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d11d      	bne.n	8014806 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	685a      	ldr	r2, [r3, #4]
 80147d0:	2380      	movs	r3, #128	@ 0x80
 80147d2:	049b      	lsls	r3, r3, #18
 80147d4:	401a      	ands	r2, r3
 80147d6:	2380      	movs	r3, #128	@ 0x80
 80147d8:	049b      	lsls	r3, r3, #18
 80147da:	429a      	cmp	r2, r3
 80147dc:	d018      	beq.n	8014810 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147e2:	4a17      	ldr	r2, [pc, #92]	@ (8014840 <I2C_Master_ISR_IT+0x250>)
 80147e4:	4293      	cmp	r3, r2
 80147e6:	d109      	bne.n	80147fc <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	685a      	ldr	r2, [r3, #4]
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	2180      	movs	r1, #128	@ 0x80
 80147f4:	01c9      	lsls	r1, r1, #7
 80147f6:	430a      	orrs	r2, r1
 80147f8:	605a      	str	r2, [r3, #4]
 80147fa:	e009      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	0018      	movs	r0, r3
 8014800:	f000 fd24 	bl	801524c <I2C_ITMasterSeqCplt>
 8014804:	e004      	b.n	8014810 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2140      	movs	r1, #64	@ 0x40
 801480a:	0018      	movs	r0, r3
 801480c:	f001 f80a 	bl	8015824 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014810:	697b      	ldr	r3, [r7, #20]
 8014812:	2220      	movs	r2, #32
 8014814:	4013      	ands	r3, r2
 8014816:	d009      	beq.n	801482c <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2220      	movs	r2, #32
 801481c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801481e:	d005      	beq.n	801482c <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8014820:	697a      	ldr	r2, [r7, #20]
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	0011      	movs	r1, r2
 8014826:	0018      	movs	r0, r3
 8014828:	f000 fdb6 	bl	8015398 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2240      	movs	r2, #64	@ 0x40
 8014830:	2100      	movs	r1, #0
 8014832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014834:	2300      	movs	r3, #0
}
 8014836:	0018      	movs	r0, r3
 8014838:	46bd      	mov	sp, r7
 801483a:	b007      	add	sp, #28
 801483c:	bd90      	pop	{r4, r7, pc}
 801483e:	46c0      	nop			@ (mov r8, r8)
 8014840:	ffff0000 	.word	0xffff0000

08014844 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	60f8      	str	r0, [r7, #12]
 801484c:	60b9      	str	r1, [r7, #8]
 801484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014854:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2240      	movs	r2, #64	@ 0x40
 801485e:	5c9b      	ldrb	r3, [r3, r2]
 8014860:	2b01      	cmp	r3, #1
 8014862:	d101      	bne.n	8014868 <I2C_Slave_ISR_IT+0x24>
 8014864:	2302      	movs	r3, #2
 8014866:	e0e6      	b.n	8014a36 <I2C_Slave_ISR_IT+0x1f2>
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2240      	movs	r2, #64	@ 0x40
 801486c:	2101      	movs	r1, #1
 801486e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	2220      	movs	r2, #32
 8014874:	4013      	ands	r3, r2
 8014876:	d009      	beq.n	801488c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2220      	movs	r2, #32
 801487c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801487e:	d005      	beq.n	801488c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8014880:	693a      	ldr	r2, [r7, #16]
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	0011      	movs	r1, r2
 8014886:	0018      	movs	r0, r3
 8014888:	f000 fe54 	bl	8015534 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	2210      	movs	r2, #16
 8014890:	4013      	ands	r3, r2
 8014892:	d052      	beq.n	801493a <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2210      	movs	r2, #16
 8014898:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801489a:	d04e      	beq.n	801493a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d12d      	bne.n	8014902 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2241      	movs	r2, #65	@ 0x41
 80148aa:	5c9b      	ldrb	r3, [r3, r2]
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	2b28      	cmp	r3, #40	@ 0x28
 80148b0:	d10b      	bne.n	80148ca <I2C_Slave_ISR_IT+0x86>
 80148b2:	697a      	ldr	r2, [r7, #20]
 80148b4:	2380      	movs	r3, #128	@ 0x80
 80148b6:	049b      	lsls	r3, r3, #18
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d106      	bne.n	80148ca <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80148bc:	693a      	ldr	r2, [r7, #16]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	0011      	movs	r1, r2
 80148c2:	0018      	movs	r0, r3
 80148c4:	f000 ff56 	bl	8015774 <I2C_ITListenCplt>
 80148c8:	e036      	b.n	8014938 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2241      	movs	r2, #65	@ 0x41
 80148ce:	5c9b      	ldrb	r3, [r3, r2]
 80148d0:	b2db      	uxtb	r3, r3
 80148d2:	2b29      	cmp	r3, #41	@ 0x29
 80148d4:	d110      	bne.n	80148f8 <I2C_Slave_ISR_IT+0xb4>
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	4a59      	ldr	r2, [pc, #356]	@ (8014a40 <I2C_Slave_ISR_IT+0x1fc>)
 80148da:	4293      	cmp	r3, r2
 80148dc:	d00c      	beq.n	80148f8 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2210      	movs	r2, #16
 80148e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	0018      	movs	r0, r3
 80148ea:	f001 f8c6 	bl	8015a7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	0018      	movs	r0, r3
 80148f2:	f000 fced 	bl	80152d0 <I2C_ITSlaveSeqCplt>
 80148f6:	e01f      	b.n	8014938 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2210      	movs	r2, #16
 80148fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8014900:	e091      	b.n	8014a26 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2210      	movs	r2, #16
 8014908:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801490e:	2204      	movs	r2, #4
 8014910:	431a      	orrs	r2, r3
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d005      	beq.n	8014928 <I2C_Slave_ISR_IT+0xe4>
 801491c:	697a      	ldr	r2, [r7, #20]
 801491e:	2380      	movs	r3, #128	@ 0x80
 8014920:	045b      	lsls	r3, r3, #17
 8014922:	429a      	cmp	r2, r3
 8014924:	d000      	beq.n	8014928 <I2C_Slave_ISR_IT+0xe4>
 8014926:	e07e      	b.n	8014a26 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	0011      	movs	r1, r2
 8014930:	0018      	movs	r0, r3
 8014932:	f000 ff77 	bl	8015824 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014936:	e076      	b.n	8014a26 <I2C_Slave_ISR_IT+0x1e2>
 8014938:	e075      	b.n	8014a26 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	2204      	movs	r2, #4
 801493e:	4013      	ands	r3, r2
 8014940:	d02f      	beq.n	80149a2 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2204      	movs	r2, #4
 8014946:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014948:	d02b      	beq.n	80149a2 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801494e:	b29b      	uxth	r3, r3
 8014950:	2b00      	cmp	r3, #0
 8014952:	d018      	beq.n	8014986 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801495e:	b2d2      	uxtb	r2, r2
 8014960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014966:	1c5a      	adds	r2, r3, #1
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014970:	3b01      	subs	r3, #1
 8014972:	b29a      	uxth	r2, r3
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801497c:	b29b      	uxth	r3, r3
 801497e:	3b01      	subs	r3, #1
 8014980:	b29a      	uxth	r2, r3
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801498a:	b29b      	uxth	r3, r3
 801498c:	2b00      	cmp	r3, #0
 801498e:	d14c      	bne.n	8014a2a <I2C_Slave_ISR_IT+0x1e6>
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	4a2b      	ldr	r2, [pc, #172]	@ (8014a40 <I2C_Slave_ISR_IT+0x1fc>)
 8014994:	4293      	cmp	r3, r2
 8014996:	d048      	beq.n	8014a2a <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	0018      	movs	r0, r3
 801499c:	f000 fc98 	bl	80152d0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80149a0:	e043      	b.n	8014a2a <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	2208      	movs	r2, #8
 80149a6:	4013      	ands	r3, r2
 80149a8:	d00a      	beq.n	80149c0 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2208      	movs	r2, #8
 80149ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80149b0:	d006      	beq.n	80149c0 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80149b2:	693a      	ldr	r2, [r7, #16]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	0011      	movs	r1, r2
 80149b8:	0018      	movs	r0, r3
 80149ba:	f000 fba3 	bl	8015104 <I2C_ITAddrCplt>
 80149be:	e035      	b.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	2202      	movs	r2, #2
 80149c4:	4013      	ands	r3, r2
 80149c6:	d031      	beq.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	2202      	movs	r2, #2
 80149cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80149ce:	d02d      	beq.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149d4:	b29b      	uxth	r3, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d018      	beq.n	8014a0c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149de:	781a      	ldrb	r2, [r3, #0]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149ea:	1c5a      	adds	r2, r3, #1
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	3b01      	subs	r3, #1
 80149f8:	b29a      	uxth	r2, r3
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014a02:	3b01      	subs	r3, #1
 8014a04:	b29a      	uxth	r2, r3
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014a0a:	e00f      	b.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8014a0c:	697a      	ldr	r2, [r7, #20]
 8014a0e:	2380      	movs	r3, #128	@ 0x80
 8014a10:	045b      	lsls	r3, r3, #17
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d002      	beq.n	8014a1c <I2C_Slave_ISR_IT+0x1d8>
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d107      	bne.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	0018      	movs	r0, r3
 8014a20:	f000 fc56 	bl	80152d0 <I2C_ITSlaveSeqCplt>
 8014a24:	e002      	b.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8014a26:	46c0      	nop			@ (mov r8, r8)
 8014a28:	e000      	b.n	8014a2c <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8014a2a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	2240      	movs	r2, #64	@ 0x40
 8014a30:	2100      	movs	r1, #0
 8014a32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014a34:	2300      	movs	r3, #0
}
 8014a36:	0018      	movs	r0, r3
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	b006      	add	sp, #24
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	46c0      	nop			@ (mov r8, r8)
 8014a40:	ffff0000 	.word	0xffff0000

08014a44 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8014a44:	b590      	push	{r4, r7, lr}
 8014a46:	b089      	sub	sp, #36	@ 0x24
 8014a48:	af02      	add	r7, sp, #8
 8014a4a:	60f8      	str	r0, [r7, #12]
 8014a4c:	60b9      	str	r1, [r7, #8]
 8014a4e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2240      	movs	r2, #64	@ 0x40
 8014a54:	5c9b      	ldrb	r3, [r3, r2]
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d101      	bne.n	8014a5e <I2C_Master_ISR_DMA+0x1a>
 8014a5a:	2302      	movs	r3, #2
 8014a5c:	e0e7      	b.n	8014c2e <I2C_Master_ISR_DMA+0x1ea>
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	2240      	movs	r2, #64	@ 0x40
 8014a62:	2101      	movs	r1, #1
 8014a64:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2210      	movs	r2, #16
 8014a6a:	4013      	ands	r3, r2
 8014a6c:	d017      	beq.n	8014a9e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	2210      	movs	r2, #16
 8014a72:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014a74:	d013      	beq.n	8014a9e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2210      	movs	r2, #16
 8014a7c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a82:	2204      	movs	r2, #4
 8014a84:	431a      	orrs	r2, r3
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	2120      	movs	r1, #32
 8014a8e:	0018      	movs	r0, r3
 8014a90:	f001 fb7a 	bl	8016188 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	0018      	movs	r0, r3
 8014a98:	f000 ffef 	bl	8015a7a <I2C_Flush_TXDR>
 8014a9c:	e0c2      	b.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	2280      	movs	r2, #128	@ 0x80
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	d100      	bne.n	8014aa8 <I2C_Master_ISR_DMA+0x64>
 8014aa6:	e07c      	b.n	8014ba2 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	2240      	movs	r2, #64	@ 0x40
 8014aac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014aae:	d100      	bne.n	8014ab2 <I2C_Master_ISR_DMA+0x6e>
 8014ab0:	e077      	b.n	8014ba2 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2140      	movs	r1, #64	@ 0x40
 8014abe:	438a      	bics	r2, r1
 8014ac0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d055      	beq.n	8014b78 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014acc:	68fb      	ldr	r3, [r7, #12]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	685b      	ldr	r3, [r3, #4]
 8014ad2:	b29a      	uxth	r2, r3
 8014ad4:	2312      	movs	r3, #18
 8014ad6:	18fb      	adds	r3, r7, r3
 8014ad8:	0592      	lsls	r2, r2, #22
 8014ada:	0d92      	lsrs	r2, r2, #22
 8014adc:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	2bff      	cmp	r3, #255	@ 0xff
 8014ae6:	d906      	bls.n	8014af6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	22ff      	movs	r2, #255	@ 0xff
 8014aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8014aee:	2380      	movs	r3, #128	@ 0x80
 8014af0:	045b      	lsls	r3, r3, #17
 8014af2:	617b      	str	r3, [r7, #20]
 8014af4:	e010      	b.n	8014b18 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014afa:	b29a      	uxth	r2, r3
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b04:	4a4c      	ldr	r2, [pc, #304]	@ (8014c38 <I2C_Master_ISR_DMA+0x1f4>)
 8014b06:	4293      	cmp	r3, r2
 8014b08:	d003      	beq.n	8014b12 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b0e:	617b      	str	r3, [r7, #20]
 8014b10:	e002      	b.n	8014b18 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8014b12:	2380      	movs	r3, #128	@ 0x80
 8014b14:	049b      	lsls	r3, r3, #18
 8014b16:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b1c:	b2da      	uxtb	r2, r3
 8014b1e:	697c      	ldr	r4, [r7, #20]
 8014b20:	2312      	movs	r3, #18
 8014b22:	18fb      	adds	r3, r7, r3
 8014b24:	8819      	ldrh	r1, [r3, #0]
 8014b26:	68f8      	ldr	r0, [r7, #12]
 8014b28:	2300      	movs	r3, #0
 8014b2a:	9300      	str	r3, [sp, #0]
 8014b2c:	0023      	movs	r3, r4
 8014b2e:	f001 faf1 	bl	8016114 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b3c:	1ad3      	subs	r3, r2, r3
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2241      	movs	r2, #65	@ 0x41
 8014b48:	5c9b      	ldrb	r3, [r3, r2]
 8014b4a:	b2db      	uxtb	r3, r3
 8014b4c:	2b22      	cmp	r3, #34	@ 0x22
 8014b4e:	d109      	bne.n	8014b64 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	681a      	ldr	r2, [r3, #0]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	2180      	movs	r1, #128	@ 0x80
 8014b5c:	0209      	lsls	r1, r1, #8
 8014b5e:	430a      	orrs	r2, r1
 8014b60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014b62:	e05f      	b.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	681a      	ldr	r2, [r3, #0]
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2180      	movs	r1, #128	@ 0x80
 8014b70:	01c9      	lsls	r1, r1, #7
 8014b72:	430a      	orrs	r2, r1
 8014b74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014b76:	e055      	b.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	685a      	ldr	r2, [r3, #4]
 8014b7e:	2380      	movs	r3, #128	@ 0x80
 8014b80:	049b      	lsls	r3, r3, #18
 8014b82:	401a      	ands	r2, r3
 8014b84:	2380      	movs	r3, #128	@ 0x80
 8014b86:	049b      	lsls	r3, r3, #18
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d004      	beq.n	8014b96 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	0018      	movs	r0, r3
 8014b90:	f000 fb5c 	bl	801524c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8014b94:	e046      	b.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2140      	movs	r1, #64	@ 0x40
 8014b9a:	0018      	movs	r0, r3
 8014b9c:	f000 fe42 	bl	8015824 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014ba0:	e040      	b.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	2240      	movs	r2, #64	@ 0x40
 8014ba6:	4013      	ands	r3, r2
 8014ba8:	d02c      	beq.n	8014c04 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2240      	movs	r2, #64	@ 0x40
 8014bae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014bb0:	d028      	beq.n	8014c04 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d11d      	bne.n	8014bf8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	685a      	ldr	r2, [r3, #4]
 8014bc2:	2380      	movs	r3, #128	@ 0x80
 8014bc4:	049b      	lsls	r3, r3, #18
 8014bc6:	401a      	ands	r2, r3
 8014bc8:	2380      	movs	r3, #128	@ 0x80
 8014bca:	049b      	lsls	r3, r3, #18
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d028      	beq.n	8014c22 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bd4:	4a18      	ldr	r2, [pc, #96]	@ (8014c38 <I2C_Master_ISR_DMA+0x1f4>)
 8014bd6:	4293      	cmp	r3, r2
 8014bd8:	d109      	bne.n	8014bee <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	685a      	ldr	r2, [r3, #4]
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2180      	movs	r1, #128	@ 0x80
 8014be6:	01c9      	lsls	r1, r1, #7
 8014be8:	430a      	orrs	r2, r1
 8014bea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8014bec:	e019      	b.n	8014c22 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	0018      	movs	r0, r3
 8014bf2:	f000 fb2b 	bl	801524c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8014bf6:	e014      	b.n	8014c22 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	2140      	movs	r1, #64	@ 0x40
 8014bfc:	0018      	movs	r0, r3
 8014bfe:	f000 fe11 	bl	8015824 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014c02:	e00e      	b.n	8014c22 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	2220      	movs	r2, #32
 8014c08:	4013      	ands	r3, r2
 8014c0a:	d00b      	beq.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2220      	movs	r2, #32
 8014c10:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014c12:	d007      	beq.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014c14:	68ba      	ldr	r2, [r7, #8]
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	0011      	movs	r1, r2
 8014c1a:	0018      	movs	r0, r3
 8014c1c:	f000 fbbc 	bl	8015398 <I2C_ITMasterCplt>
 8014c20:	e000      	b.n	8014c24 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8014c22:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	2240      	movs	r2, #64	@ 0x40
 8014c28:	2100      	movs	r1, #0
 8014c2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	0018      	movs	r0, r3
 8014c30:	46bd      	mov	sp, r7
 8014c32:	b007      	add	sp, #28
 8014c34:	bd90      	pop	{r4, r7, pc}
 8014c36:	46c0      	nop			@ (mov r8, r8)
 8014c38:	ffff0000 	.word	0xffff0000

08014c3c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b089      	sub	sp, #36	@ 0x24
 8014c40:	af02      	add	r7, sp, #8
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8014c48:	4b88      	ldr	r3, [pc, #544]	@ (8014e6c <I2C_Mem_ISR_DMA+0x230>)
 8014c4a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	2240      	movs	r2, #64	@ 0x40
 8014c50:	5c9b      	ldrb	r3, [r3, r2]
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d101      	bne.n	8014c5a <I2C_Mem_ISR_DMA+0x1e>
 8014c56:	2302      	movs	r3, #2
 8014c58:	e104      	b.n	8014e64 <I2C_Mem_ISR_DMA+0x228>
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	2240      	movs	r2, #64	@ 0x40
 8014c5e:	2101      	movs	r1, #1
 8014c60:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	2210      	movs	r2, #16
 8014c66:	4013      	ands	r3, r2
 8014c68:	d017      	beq.n	8014c9a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2210      	movs	r2, #16
 8014c6e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014c70:	d013      	beq.n	8014c9a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	2210      	movs	r2, #16
 8014c78:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c7e:	2204      	movs	r2, #4
 8014c80:	431a      	orrs	r2, r3
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2120      	movs	r1, #32
 8014c8a:	0018      	movs	r0, r3
 8014c8c:	f001 fa7c 	bl	8016188 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	0018      	movs	r0, r3
 8014c94:	f000 fef1 	bl	8015a7a <I2C_Flush_TXDR>
 8014c98:	e0df      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	2202      	movs	r2, #2
 8014c9e:	4013      	ands	r3, r2
 8014ca0:	d00d      	beq.n	8014cbe <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	2202      	movs	r2, #2
 8014ca6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014ca8:	d009      	beq.n	8014cbe <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	68fa      	ldr	r2, [r7, #12]
 8014cb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8014cb2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	4252      	negs	r2, r2
 8014cba:	651a      	str	r2, [r3, #80]	@ 0x50
 8014cbc:	e0cd      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	2280      	movs	r2, #128	@ 0x80
 8014cc2:	4013      	ands	r3, r2
 8014cc4:	d05e      	beq.n	8014d84 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2240      	movs	r2, #64	@ 0x40
 8014cca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014ccc:	d05a      	beq.n	8014d84 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	2110      	movs	r1, #16
 8014cd2:	0018      	movs	r0, r3
 8014cd4:	f001 fa58 	bl	8016188 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d04a      	beq.n	8014d78 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	2bff      	cmp	r3, #255	@ 0xff
 8014cea:	d910      	bls.n	8014d0e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	22ff      	movs	r2, #255	@ 0xff
 8014cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014cf6:	b299      	uxth	r1, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cfc:	b2da      	uxtb	r2, r3
 8014cfe:	2380      	movs	r3, #128	@ 0x80
 8014d00:	045b      	lsls	r3, r3, #17
 8014d02:	68f8      	ldr	r0, [r7, #12]
 8014d04:	2400      	movs	r4, #0
 8014d06:	9400      	str	r4, [sp, #0]
 8014d08:	f001 fa04 	bl	8016114 <I2C_TransferConfig>
 8014d0c:	e011      	b.n	8014d32 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d12:	b29a      	uxth	r2, r3
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d1c:	b299      	uxth	r1, r3
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d22:	b2da      	uxtb	r2, r3
 8014d24:	2380      	movs	r3, #128	@ 0x80
 8014d26:	049b      	lsls	r3, r3, #18
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	2400      	movs	r4, #0
 8014d2c:	9400      	str	r4, [sp, #0]
 8014d2e:	f001 f9f1 	bl	8016114 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	b29a      	uxth	r2, r3
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	2241      	movs	r2, #65	@ 0x41
 8014d48:	5c9b      	ldrb	r3, [r3, r2]
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	2b22      	cmp	r3, #34	@ 0x22
 8014d4e:	d109      	bne.n	8014d64 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	2180      	movs	r1, #128	@ 0x80
 8014d5c:	0209      	lsls	r1, r1, #8
 8014d5e:	430a      	orrs	r2, r1
 8014d60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014d62:	e07a      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2180      	movs	r1, #128	@ 0x80
 8014d70:	01c9      	lsls	r1, r1, #7
 8014d72:	430a      	orrs	r2, r1
 8014d74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014d76:	e070      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2140      	movs	r1, #64	@ 0x40
 8014d7c:	0018      	movs	r0, r3
 8014d7e:	f000 fd51 	bl	8015824 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014d82:	e06a      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	2240      	movs	r2, #64	@ 0x40
 8014d88:	4013      	ands	r3, r2
 8014d8a:	d058      	beq.n	8014e3e <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2240      	movs	r2, #64	@ 0x40
 8014d90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014d92:	d054      	beq.n	8014e3e <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2241      	movs	r2, #65	@ 0x41
 8014d98:	5c9b      	ldrb	r3, [r3, r2]
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	2b22      	cmp	r3, #34	@ 0x22
 8014d9e:	d101      	bne.n	8014da4 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8014da0:	4b33      	ldr	r3, [pc, #204]	@ (8014e70 <I2C_Mem_ISR_DMA+0x234>)
 8014da2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	2bff      	cmp	r3, #255	@ 0xff
 8014dac:	d911      	bls.n	8014dd2 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	22ff      	movs	r2, #255	@ 0xff
 8014db2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014db8:	b299      	uxth	r1, r3
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dbe:	b2da      	uxtb	r2, r3
 8014dc0:	2380      	movs	r3, #128	@ 0x80
 8014dc2:	045c      	lsls	r4, r3, #17
 8014dc4:	68f8      	ldr	r0, [r7, #12]
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	9300      	str	r3, [sp, #0]
 8014dca:	0023      	movs	r3, r4
 8014dcc:	f001 f9a2 	bl	8016114 <I2C_TransferConfig>
 8014dd0:	e012      	b.n	8014df8 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014dd6:	b29a      	uxth	r2, r3
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014de0:	b299      	uxth	r1, r3
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014de6:	b2da      	uxtb	r2, r3
 8014de8:	2380      	movs	r3, #128	@ 0x80
 8014dea:	049c      	lsls	r4, r3, #18
 8014dec:	68f8      	ldr	r0, [r7, #12]
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	9300      	str	r3, [sp, #0]
 8014df2:	0023      	movs	r3, r4
 8014df4:	f001 f98e 	bl	8016114 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014dfc:	b29a      	uxth	r2, r3
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014e02:	1ad3      	subs	r3, r2, r3
 8014e04:	b29a      	uxth	r2, r3
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	2241      	movs	r2, #65	@ 0x41
 8014e0e:	5c9b      	ldrb	r3, [r3, r2]
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	2b22      	cmp	r3, #34	@ 0x22
 8014e14:	d109      	bne.n	8014e2a <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	2180      	movs	r1, #128	@ 0x80
 8014e22:	0209      	lsls	r1, r1, #8
 8014e24:	430a      	orrs	r2, r1
 8014e26:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e28:	e017      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2180      	movs	r1, #128	@ 0x80
 8014e36:	01c9      	lsls	r1, r1, #7
 8014e38:	430a      	orrs	r2, r1
 8014e3a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e3c:	e00d      	b.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	2220      	movs	r2, #32
 8014e42:	4013      	ands	r3, r2
 8014e44:	d009      	beq.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2220      	movs	r2, #32
 8014e4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e4c:	d005      	beq.n	8014e5a <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014e4e:	68ba      	ldr	r2, [r7, #8]
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	0011      	movs	r1, r2
 8014e54:	0018      	movs	r0, r3
 8014e56:	f000 fa9f 	bl	8015398 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	2240      	movs	r2, #64	@ 0x40
 8014e5e:	2100      	movs	r1, #0
 8014e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014e62:	2300      	movs	r3, #0
}
 8014e64:	0018      	movs	r0, r3
 8014e66:	46bd      	mov	sp, r7
 8014e68:	b007      	add	sp, #28
 8014e6a:	bd90      	pop	{r4, r7, pc}
 8014e6c:	80002000 	.word	0x80002000
 8014e70:	80002400 	.word	0x80002400

08014e74 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b088      	sub	sp, #32
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e84:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8014e86:	2300      	movs	r3, #0
 8014e88:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2240      	movs	r2, #64	@ 0x40
 8014e8e:	5c9b      	ldrb	r3, [r3, r2]
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d101      	bne.n	8014e98 <I2C_Slave_ISR_DMA+0x24>
 8014e94:	2302      	movs	r3, #2
 8014e96:	e0cd      	b.n	8015034 <I2C_Slave_ISR_DMA+0x1c0>
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2240      	movs	r2, #64	@ 0x40
 8014e9c:	2101      	movs	r1, #1
 8014e9e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	2220      	movs	r2, #32
 8014ea4:	4013      	ands	r3, r2
 8014ea6:	d009      	beq.n	8014ebc <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2220      	movs	r2, #32
 8014eac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014eae:	d005      	beq.n	8014ebc <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8014eb0:	68ba      	ldr	r2, [r7, #8]
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	0011      	movs	r1, r2
 8014eb6:	0018      	movs	r0, r3
 8014eb8:	f000 fb3c 	bl	8015534 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	2210      	movs	r2, #16
 8014ec0:	4013      	ands	r3, r2
 8014ec2:	d100      	bne.n	8014ec6 <I2C_Slave_ISR_DMA+0x52>
 8014ec4:	e0a3      	b.n	801500e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	2210      	movs	r2, #16
 8014eca:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014ecc:	d100      	bne.n	8014ed0 <I2C_Slave_ISR_DMA+0x5c>
 8014ece:	e09e      	b.n	801500e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014ed0:	687a      	ldr	r2, [r7, #4]
 8014ed2:	2380      	movs	r3, #128	@ 0x80
 8014ed4:	01db      	lsls	r3, r3, #7
 8014ed6:	4013      	ands	r3, r2
 8014ed8:	d105      	bne.n	8014ee6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8014eda:	687a      	ldr	r2, [r7, #4]
 8014edc:	2380      	movs	r3, #128	@ 0x80
 8014ede:	021b      	lsls	r3, r3, #8
 8014ee0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014ee2:	d100      	bne.n	8014ee6 <I2C_Slave_ISR_DMA+0x72>
 8014ee4:	e08c      	b.n	8015000 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d00c      	beq.n	8014f08 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8014eee:	687a      	ldr	r2, [r7, #4]
 8014ef0:	2380      	movs	r3, #128	@ 0x80
 8014ef2:	021b      	lsls	r3, r3, #8
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	d007      	beq.n	8014f08 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d101      	bne.n	8014f08 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8014f04:	2301      	movs	r3, #1
 8014f06:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d00c      	beq.n	8014f2a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8014f10:	687a      	ldr	r2, [r7, #4]
 8014f12:	2380      	movs	r3, #128	@ 0x80
 8014f14:	01db      	lsls	r3, r3, #7
 8014f16:	4013      	ands	r3, r2
 8014f18:	d007      	beq.n	8014f2a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	685b      	ldr	r3, [r3, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d101      	bne.n	8014f2a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8014f26:	2301      	movs	r3, #1
 8014f28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d12d      	bne.n	8014f8c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2241      	movs	r2, #65	@ 0x41
 8014f34:	5c9b      	ldrb	r3, [r3, r2]
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	2b28      	cmp	r3, #40	@ 0x28
 8014f3a:	d10b      	bne.n	8014f54 <I2C_Slave_ISR_DMA+0xe0>
 8014f3c:	69ba      	ldr	r2, [r7, #24]
 8014f3e:	2380      	movs	r3, #128	@ 0x80
 8014f40:	049b      	lsls	r3, r3, #18
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d106      	bne.n	8014f54 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8014f46:	68ba      	ldr	r2, [r7, #8]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	0011      	movs	r1, r2
 8014f4c:	0018      	movs	r0, r3
 8014f4e:	f000 fc11 	bl	8015774 <I2C_ITListenCplt>
 8014f52:	e054      	b.n	8014ffe <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2241      	movs	r2, #65	@ 0x41
 8014f58:	5c9b      	ldrb	r3, [r3, r2]
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	2b29      	cmp	r3, #41	@ 0x29
 8014f5e:	d110      	bne.n	8014f82 <I2C_Slave_ISR_DMA+0x10e>
 8014f60:	69bb      	ldr	r3, [r7, #24]
 8014f62:	4a36      	ldr	r2, [pc, #216]	@ (801503c <I2C_Slave_ISR_DMA+0x1c8>)
 8014f64:	4293      	cmp	r3, r2
 8014f66:	d00c      	beq.n	8014f82 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	2210      	movs	r2, #16
 8014f6e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	0018      	movs	r0, r3
 8014f74:	f000 fd81 	bl	8015a7a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	0018      	movs	r0, r3
 8014f7c:	f000 f9a8 	bl	80152d0 <I2C_ITSlaveSeqCplt>
 8014f80:	e03d      	b.n	8014ffe <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	2210      	movs	r2, #16
 8014f88:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8014f8a:	e03e      	b.n	801500a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2210      	movs	r2, #16
 8014f92:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f98:	2204      	movs	r2, #4
 8014f9a:	431a      	orrs	r2, r3
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8014fa0:	2317      	movs	r3, #23
 8014fa2:	18fb      	adds	r3, r7, r3
 8014fa4:	68fa      	ldr	r2, [r7, #12]
 8014fa6:	2141      	movs	r1, #65	@ 0x41
 8014fa8:	5c52      	ldrb	r2, [r2, r1]
 8014faa:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014fac:	69bb      	ldr	r3, [r7, #24]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d004      	beq.n	8014fbc <I2C_Slave_ISR_DMA+0x148>
 8014fb2:	69ba      	ldr	r2, [r7, #24]
 8014fb4:	2380      	movs	r3, #128	@ 0x80
 8014fb6:	045b      	lsls	r3, r3, #17
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d126      	bne.n	801500a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014fbc:	2217      	movs	r2, #23
 8014fbe:	18bb      	adds	r3, r7, r2
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	2b21      	cmp	r3, #33	@ 0x21
 8014fc4:	d003      	beq.n	8014fce <I2C_Slave_ISR_DMA+0x15a>
 8014fc6:	18bb      	adds	r3, r7, r2
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b29      	cmp	r3, #41	@ 0x29
 8014fcc:	d103      	bne.n	8014fd6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	2221      	movs	r2, #33	@ 0x21
 8014fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8014fd4:	e00b      	b.n	8014fee <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014fd6:	2217      	movs	r2, #23
 8014fd8:	18bb      	adds	r3, r7, r2
 8014fda:	781b      	ldrb	r3, [r3, #0]
 8014fdc:	2b22      	cmp	r3, #34	@ 0x22
 8014fde:	d003      	beq.n	8014fe8 <I2C_Slave_ISR_DMA+0x174>
 8014fe0:	18bb      	adds	r3, r7, r2
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fe6:	d102      	bne.n	8014fee <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2222      	movs	r2, #34	@ 0x22
 8014fec:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	0011      	movs	r1, r2
 8014ff6:	0018      	movs	r0, r3
 8014ff8:	f000 fc14 	bl	8015824 <I2C_ITError>
      if (treatdmanack == 1U)
 8014ffc:	e005      	b.n	801500a <I2C_Slave_ISR_DMA+0x196>
 8014ffe:	e004      	b.n	801500a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2210      	movs	r2, #16
 8015006:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015008:	e00f      	b.n	801502a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801500a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801500c:	e00d      	b.n	801502a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	2208      	movs	r2, #8
 8015012:	4013      	ands	r3, r2
 8015014:	d009      	beq.n	801502a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2208      	movs	r2, #8
 801501a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801501c:	d005      	beq.n	801502a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801501e:	68ba      	ldr	r2, [r7, #8]
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	0011      	movs	r1, r2
 8015024:	0018      	movs	r0, r3
 8015026:	f000 f86d 	bl	8015104 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2240      	movs	r2, #64	@ 0x40
 801502e:	2100      	movs	r1, #0
 8015030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015032:	2300      	movs	r3, #0
}
 8015034:	0018      	movs	r0, r3
 8015036:	46bd      	mov	sp, r7
 8015038:	b008      	add	sp, #32
 801503a:	bd80      	pop	{r7, pc}
 801503c:	ffff0000 	.word	0xffff0000

08015040 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8015040:	b5b0      	push	{r4, r5, r7, lr}
 8015042:	b086      	sub	sp, #24
 8015044:	af02      	add	r7, sp, #8
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	000c      	movs	r4, r1
 801504a:	0010      	movs	r0, r2
 801504c:	0019      	movs	r1, r3
 801504e:	250a      	movs	r5, #10
 8015050:	197b      	adds	r3, r7, r5
 8015052:	1c22      	adds	r2, r4, #0
 8015054:	801a      	strh	r2, [r3, #0]
 8015056:	2308      	movs	r3, #8
 8015058:	18fb      	adds	r3, r7, r3
 801505a:	1c02      	adds	r2, r0, #0
 801505c:	801a      	strh	r2, [r3, #0]
 801505e:	1dbb      	adds	r3, r7, #6
 8015060:	1c0a      	adds	r2, r1, #0
 8015062:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8015064:	1dbb      	adds	r3, r7, #6
 8015066:	881b      	ldrh	r3, [r3, #0]
 8015068:	b2da      	uxtb	r2, r3
 801506a:	197b      	adds	r3, r7, r5
 801506c:	8819      	ldrh	r1, [r3, #0]
 801506e:	68f8      	ldr	r0, [r7, #12]
 8015070:	4b23      	ldr	r3, [pc, #140]	@ (8015100 <I2C_RequestMemoryRead+0xc0>)
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	2300      	movs	r3, #0
 8015076:	f001 f84d 	bl	8016114 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801507a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801507c:	6a39      	ldr	r1, [r7, #32]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	0018      	movs	r0, r3
 8015082:	f000 fe43 	bl	8015d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8015086:	1e03      	subs	r3, r0, #0
 8015088:	d001      	beq.n	801508e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 801508a:	2301      	movs	r3, #1
 801508c:	e033      	b.n	80150f6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801508e:	1dbb      	adds	r3, r7, #6
 8015090:	881b      	ldrh	r3, [r3, #0]
 8015092:	2b01      	cmp	r3, #1
 8015094:	d107      	bne.n	80150a6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015096:	2308      	movs	r3, #8
 8015098:	18fb      	adds	r3, r7, r3
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	b2da      	uxtb	r2, r3
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80150a4:	e019      	b.n	80150da <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80150a6:	2308      	movs	r3, #8
 80150a8:	18fb      	adds	r3, r7, r3
 80150aa:	881b      	ldrh	r3, [r3, #0]
 80150ac:	0a1b      	lsrs	r3, r3, #8
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	b2da      	uxtb	r2, r3
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80150b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150ba:	6a39      	ldr	r1, [r7, #32]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	0018      	movs	r0, r3
 80150c0:	f000 fe24 	bl	8015d0c <I2C_WaitOnTXISFlagUntilTimeout>
 80150c4:	1e03      	subs	r3, r0, #0
 80150c6:	d001      	beq.n	80150cc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80150c8:	2301      	movs	r3, #1
 80150ca:	e014      	b.n	80150f6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80150cc:	2308      	movs	r3, #8
 80150ce:	18fb      	adds	r3, r7, r3
 80150d0:	881b      	ldrh	r3, [r3, #0]
 80150d2:	b2da      	uxtb	r2, r3
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80150da:	6a3a      	ldr	r2, [r7, #32]
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	0013      	movs	r3, r2
 80150e4:	2200      	movs	r2, #0
 80150e6:	2140      	movs	r1, #64	@ 0x40
 80150e8:	f000 fdc2 	bl	8015c70 <I2C_WaitOnFlagUntilTimeout>
 80150ec:	1e03      	subs	r3, r0, #0
 80150ee:	d001      	beq.n	80150f4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80150f0:	2301      	movs	r3, #1
 80150f2:	e000      	b.n	80150f6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	0018      	movs	r0, r3
 80150f8:	46bd      	mov	sp, r7
 80150fa:	b004      	add	sp, #16
 80150fc:	bdb0      	pop	{r4, r5, r7, pc}
 80150fe:	46c0      	nop			@ (mov r8, r8)
 8015100:	80002000 	.word	0x80002000

08015104 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015104:	b5b0      	push	{r4, r5, r7, lr}
 8015106:	b084      	sub	sp, #16
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2241      	movs	r2, #65	@ 0x41
 8015112:	5c9b      	ldrb	r3, [r3, r2]
 8015114:	b2db      	uxtb	r3, r3
 8015116:	001a      	movs	r2, r3
 8015118:	2328      	movs	r3, #40	@ 0x28
 801511a:	4013      	ands	r3, r2
 801511c:	2b28      	cmp	r3, #40	@ 0x28
 801511e:	d000      	beq.n	8015122 <I2C_ITAddrCplt+0x1e>
 8015120:	e088      	b.n	8015234 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	699b      	ldr	r3, [r3, #24]
 8015128:	0c1b      	lsrs	r3, r3, #16
 801512a:	b2da      	uxtb	r2, r3
 801512c:	250f      	movs	r5, #15
 801512e:	197b      	adds	r3, r7, r5
 8015130:	2101      	movs	r1, #1
 8015132:	400a      	ands	r2, r1
 8015134:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	699b      	ldr	r3, [r3, #24]
 801513c:	0c1b      	lsrs	r3, r3, #16
 801513e:	b29a      	uxth	r2, r3
 8015140:	200c      	movs	r0, #12
 8015142:	183b      	adds	r3, r7, r0
 8015144:	21fe      	movs	r1, #254	@ 0xfe
 8015146:	400a      	ands	r2, r1
 8015148:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	b29a      	uxth	r2, r3
 8015152:	240a      	movs	r4, #10
 8015154:	193b      	adds	r3, r7, r4
 8015156:	0592      	lsls	r2, r2, #22
 8015158:	0d92      	lsrs	r2, r2, #22
 801515a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	68db      	ldr	r3, [r3, #12]
 8015162:	b29a      	uxth	r2, r3
 8015164:	2308      	movs	r3, #8
 8015166:	18fb      	adds	r3, r7, r3
 8015168:	21fe      	movs	r1, #254	@ 0xfe
 801516a:	400a      	ands	r2, r1
 801516c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	2b02      	cmp	r3, #2
 8015174:	d148      	bne.n	8015208 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8015176:	0021      	movs	r1, r4
 8015178:	187b      	adds	r3, r7, r1
 801517a:	881b      	ldrh	r3, [r3, #0]
 801517c:	09db      	lsrs	r3, r3, #7
 801517e:	b29a      	uxth	r2, r3
 8015180:	183b      	adds	r3, r7, r0
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	4053      	eors	r3, r2
 8015186:	b29b      	uxth	r3, r3
 8015188:	001a      	movs	r2, r3
 801518a:	2306      	movs	r3, #6
 801518c:	4013      	ands	r3, r2
 801518e:	d120      	bne.n	80151d2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8015190:	183b      	adds	r3, r7, r0
 8015192:	187a      	adds	r2, r7, r1
 8015194:	8812      	ldrh	r2, [r2, #0]
 8015196:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801519c:	1c5a      	adds	r2, r3, #1
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151a6:	2b02      	cmp	r3, #2
 80151a8:	d14c      	bne.n	8015244 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	2200      	movs	r2, #0
 80151ae:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2208      	movs	r2, #8
 80151b6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2240      	movs	r2, #64	@ 0x40
 80151bc:	2100      	movs	r1, #0
 80151be:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80151c0:	183b      	adds	r3, r7, r0
 80151c2:	881a      	ldrh	r2, [r3, #0]
 80151c4:	197b      	adds	r3, r7, r5
 80151c6:	7819      	ldrb	r1, [r3, #0]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	0018      	movs	r0, r3
 80151cc:	f7ff f9d7 	bl	801457e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80151d0:	e038      	b.n	8015244 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80151d2:	240c      	movs	r4, #12
 80151d4:	193b      	adds	r3, r7, r4
 80151d6:	2208      	movs	r2, #8
 80151d8:	18ba      	adds	r2, r7, r2
 80151da:	8812      	ldrh	r2, [r2, #0]
 80151dc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80151de:	2380      	movs	r3, #128	@ 0x80
 80151e0:	021a      	lsls	r2, r3, #8
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	0011      	movs	r1, r2
 80151e6:	0018      	movs	r0, r3
 80151e8:	f001 f85c 	bl	80162a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2240      	movs	r2, #64	@ 0x40
 80151f0:	2100      	movs	r1, #0
 80151f2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80151f4:	193b      	adds	r3, r7, r4
 80151f6:	881a      	ldrh	r2, [r3, #0]
 80151f8:	230f      	movs	r3, #15
 80151fa:	18fb      	adds	r3, r7, r3
 80151fc:	7819      	ldrb	r1, [r3, #0]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	0018      	movs	r0, r3
 8015202:	f7ff f9bc 	bl	801457e <HAL_I2C_AddrCallback>
}
 8015206:	e01d      	b.n	8015244 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015208:	2380      	movs	r3, #128	@ 0x80
 801520a:	021a      	lsls	r2, r3, #8
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	0011      	movs	r1, r2
 8015210:	0018      	movs	r0, r3
 8015212:	f001 f847 	bl	80162a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2240      	movs	r2, #64	@ 0x40
 801521a:	2100      	movs	r1, #0
 801521c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801521e:	230c      	movs	r3, #12
 8015220:	18fb      	adds	r3, r7, r3
 8015222:	881a      	ldrh	r2, [r3, #0]
 8015224:	230f      	movs	r3, #15
 8015226:	18fb      	adds	r3, r7, r3
 8015228:	7819      	ldrb	r1, [r3, #0]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	0018      	movs	r0, r3
 801522e:	f7ff f9a6 	bl	801457e <HAL_I2C_AddrCallback>
}
 8015232:	e007      	b.n	8015244 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	2208      	movs	r2, #8
 801523a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2240      	movs	r2, #64	@ 0x40
 8015240:	2100      	movs	r1, #0
 8015242:	5499      	strb	r1, [r3, r2]
}
 8015244:	46c0      	nop			@ (mov r8, r8)
 8015246:	46bd      	mov	sp, r7
 8015248:	b004      	add	sp, #16
 801524a:	bdb0      	pop	{r4, r5, r7, pc}

0801524c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2242      	movs	r2, #66	@ 0x42
 8015258:	2100      	movs	r1, #0
 801525a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2241      	movs	r2, #65	@ 0x41
 8015260:	5c9b      	ldrb	r3, [r3, r2]
 8015262:	b2db      	uxtb	r3, r3
 8015264:	2b21      	cmp	r3, #33	@ 0x21
 8015266:	d117      	bne.n	8015298 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2241      	movs	r2, #65	@ 0x41
 801526c:	2120      	movs	r1, #32
 801526e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2211      	movs	r2, #17
 8015274:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2200      	movs	r2, #0
 801527a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2101      	movs	r1, #1
 8015280:	0018      	movs	r0, r3
 8015282:	f001 f80f 	bl	80162a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2240      	movs	r2, #64	@ 0x40
 801528a:	2100      	movs	r1, #0
 801528c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	0018      	movs	r0, r3
 8015292:	f7ff f954 	bl	801453e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015296:	e016      	b.n	80152c6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2241      	movs	r2, #65	@ 0x41
 801529c:	2120      	movs	r1, #32
 801529e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2212      	movs	r2, #18
 80152a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	2200      	movs	r2, #0
 80152aa:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2102      	movs	r1, #2
 80152b0:	0018      	movs	r0, r3
 80152b2:	f000 fff7 	bl	80162a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2240      	movs	r2, #64	@ 0x40
 80152ba:	2100      	movs	r1, #0
 80152bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	0018      	movs	r0, r3
 80152c2:	f7ff f944 	bl	801454e <HAL_I2C_MasterRxCpltCallback>
}
 80152c6:	46c0      	nop			@ (mov r8, r8)
 80152c8:	46bd      	mov	sp, r7
 80152ca:	b002      	add	sp, #8
 80152cc:	bd80      	pop	{r7, pc}
	...

080152d0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	2242      	movs	r2, #66	@ 0x42
 80152e4:	2100      	movs	r1, #0
 80152e6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80152e8:	68fa      	ldr	r2, [r7, #12]
 80152ea:	2380      	movs	r3, #128	@ 0x80
 80152ec:	01db      	lsls	r3, r3, #7
 80152ee:	4013      	ands	r3, r2
 80152f0:	d008      	beq.n	8015304 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	681a      	ldr	r2, [r3, #0]
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	4924      	ldr	r1, [pc, #144]	@ (8015390 <I2C_ITSlaveSeqCplt+0xc0>)
 80152fe:	400a      	ands	r2, r1
 8015300:	601a      	str	r2, [r3, #0]
 8015302:	e00c      	b.n	801531e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015304:	68fa      	ldr	r2, [r7, #12]
 8015306:	2380      	movs	r3, #128	@ 0x80
 8015308:	021b      	lsls	r3, r3, #8
 801530a:	4013      	ands	r3, r2
 801530c:	d007      	beq.n	801531e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	491e      	ldr	r1, [pc, #120]	@ (8015394 <I2C_ITSlaveSeqCplt+0xc4>)
 801531a:	400a      	ands	r2, r1
 801531c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2241      	movs	r2, #65	@ 0x41
 8015322:	5c9b      	ldrb	r3, [r3, r2]
 8015324:	b2db      	uxtb	r3, r3
 8015326:	2b29      	cmp	r3, #41	@ 0x29
 8015328:	d114      	bne.n	8015354 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	2241      	movs	r2, #65	@ 0x41
 801532e:	2128      	movs	r1, #40	@ 0x28
 8015330:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2221      	movs	r2, #33	@ 0x21
 8015336:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2101      	movs	r1, #1
 801533c:	0018      	movs	r0, r3
 801533e:	f000 ffb1 	bl	80162a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2240      	movs	r2, #64	@ 0x40
 8015346:	2100      	movs	r1, #0
 8015348:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	0018      	movs	r0, r3
 801534e:	f7ff f906 	bl	801455e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8015352:	e019      	b.n	8015388 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2241      	movs	r2, #65	@ 0x41
 8015358:	5c9b      	ldrb	r3, [r3, r2]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	2b2a      	cmp	r3, #42	@ 0x2a
 801535e:	d113      	bne.n	8015388 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2241      	movs	r2, #65	@ 0x41
 8015364:	2128      	movs	r1, #40	@ 0x28
 8015366:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2222      	movs	r2, #34	@ 0x22
 801536c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	2102      	movs	r1, #2
 8015372:	0018      	movs	r0, r3
 8015374:	f000 ff96 	bl	80162a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2240      	movs	r2, #64	@ 0x40
 801537c:	2100      	movs	r1, #0
 801537e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	0018      	movs	r0, r3
 8015384:	f7ff f8f3 	bl	801456e <HAL_I2C_SlaveRxCpltCallback>
}
 8015388:	46c0      	nop			@ (mov r8, r8)
 801538a:	46bd      	mov	sp, r7
 801538c:	b004      	add	sp, #16
 801538e:	bd80      	pop	{r7, pc}
 8015390:	ffffbfff 	.word	0xffffbfff
 8015394:	ffff7fff 	.word	0xffff7fff

08015398 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b086      	sub	sp, #24
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	2220      	movs	r2, #32
 80153ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2241      	movs	r2, #65	@ 0x41
 80153b2:	5c9b      	ldrb	r3, [r3, r2]
 80153b4:	b2db      	uxtb	r3, r3
 80153b6:	2b21      	cmp	r3, #33	@ 0x21
 80153b8:	d108      	bne.n	80153cc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2101      	movs	r1, #1
 80153be:	0018      	movs	r0, r3
 80153c0:	f000 ff70 	bl	80162a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2211      	movs	r2, #17
 80153c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80153ca:	e00d      	b.n	80153e8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2241      	movs	r2, #65	@ 0x41
 80153d0:	5c9b      	ldrb	r3, [r3, r2]
 80153d2:	b2db      	uxtb	r3, r3
 80153d4:	2b22      	cmp	r3, #34	@ 0x22
 80153d6:	d107      	bne.n	80153e8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2102      	movs	r1, #2
 80153dc:	0018      	movs	r0, r3
 80153de:	f000 ff61 	bl	80162a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2212      	movs	r2, #18
 80153e6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	685a      	ldr	r2, [r3, #4]
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	494e      	ldr	r1, [pc, #312]	@ (801552c <I2C_ITMasterCplt+0x194>)
 80153f4:	400a      	ands	r2, r1
 80153f6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2200      	movs	r2, #0
 80153fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	4a4b      	ldr	r2, [pc, #300]	@ (8015530 <I2C_ITMasterCplt+0x198>)
 8015402:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8015404:	697b      	ldr	r3, [r7, #20]
 8015406:	2210      	movs	r2, #16
 8015408:	4013      	ands	r3, r2
 801540a:	d009      	beq.n	8015420 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2210      	movs	r2, #16
 8015412:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015418:	2204      	movs	r2, #4
 801541a:	431a      	orrs	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2241      	movs	r2, #65	@ 0x41
 8015424:	5c9b      	ldrb	r3, [r3, r2]
 8015426:	b2db      	uxtb	r3, r3
 8015428:	2b60      	cmp	r3, #96	@ 0x60
 801542a:	d109      	bne.n	8015440 <I2C_ITMasterCplt+0xa8>
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	2204      	movs	r2, #4
 8015430:	4013      	ands	r3, r2
 8015432:	d005      	beq.n	8015440 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801543a:	b2db      	uxtb	r3, r3
 801543c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801543e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	0018      	movs	r0, r3
 8015444:	f000 fb19 	bl	8015a7a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801544c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2241      	movs	r2, #65	@ 0x41
 8015452:	5c9b      	ldrb	r3, [r3, r2]
 8015454:	b2db      	uxtb	r3, r3
 8015456:	2b60      	cmp	r3, #96	@ 0x60
 8015458:	d002      	beq.n	8015460 <I2C_ITMasterCplt+0xc8>
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d007      	beq.n	8015470 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	0011      	movs	r1, r2
 8015468:	0018      	movs	r0, r3
 801546a:	f000 f9db 	bl	8015824 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801546e:	e058      	b.n	8015522 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2241      	movs	r2, #65	@ 0x41
 8015474:	5c9b      	ldrb	r3, [r3, r2]
 8015476:	b2db      	uxtb	r3, r3
 8015478:	2b21      	cmp	r3, #33	@ 0x21
 801547a:	d126      	bne.n	80154ca <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2241      	movs	r2, #65	@ 0x41
 8015480:	2120      	movs	r1, #32
 8015482:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2200      	movs	r2, #0
 8015488:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	2242      	movs	r2, #66	@ 0x42
 801548e:	5c9b      	ldrb	r3, [r3, r2]
 8015490:	b2db      	uxtb	r3, r3
 8015492:	2b40      	cmp	r3, #64	@ 0x40
 8015494:	d10c      	bne.n	80154b0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2242      	movs	r2, #66	@ 0x42
 801549a:	2100      	movs	r1, #0
 801549c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2240      	movs	r2, #64	@ 0x40
 80154a2:	2100      	movs	r1, #0
 80154a4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	0018      	movs	r0, r3
 80154aa:	f7ff f880 	bl	80145ae <HAL_I2C_MemTxCpltCallback>
}
 80154ae:	e038      	b.n	8015522 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2242      	movs	r2, #66	@ 0x42
 80154b4:	2100      	movs	r1, #0
 80154b6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2240      	movs	r2, #64	@ 0x40
 80154bc:	2100      	movs	r1, #0
 80154be:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	0018      	movs	r0, r3
 80154c4:	f7ff f83b 	bl	801453e <HAL_I2C_MasterTxCpltCallback>
}
 80154c8:	e02b      	b.n	8015522 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2241      	movs	r2, #65	@ 0x41
 80154ce:	5c9b      	ldrb	r3, [r3, r2]
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	2b22      	cmp	r3, #34	@ 0x22
 80154d4:	d125      	bne.n	8015522 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	2241      	movs	r2, #65	@ 0x41
 80154da:	2120      	movs	r1, #32
 80154dc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	2200      	movs	r2, #0
 80154e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2242      	movs	r2, #66	@ 0x42
 80154e8:	5c9b      	ldrb	r3, [r3, r2]
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	2b40      	cmp	r3, #64	@ 0x40
 80154ee:	d10c      	bne.n	801550a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2242      	movs	r2, #66	@ 0x42
 80154f4:	2100      	movs	r1, #0
 80154f6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2240      	movs	r2, #64	@ 0x40
 80154fc:	2100      	movs	r1, #0
 80154fe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	0018      	movs	r0, r3
 8015504:	f7ff f85b 	bl	80145be <HAL_I2C_MemRxCpltCallback>
}
 8015508:	e00b      	b.n	8015522 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2242      	movs	r2, #66	@ 0x42
 801550e:	2100      	movs	r1, #0
 8015510:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2240      	movs	r2, #64	@ 0x40
 8015516:	2100      	movs	r1, #0
 8015518:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	0018      	movs	r0, r3
 801551e:	f7ff f816 	bl	801454e <HAL_I2C_MasterRxCpltCallback>
}
 8015522:	46c0      	nop			@ (mov r8, r8)
 8015524:	46bd      	mov	sp, r7
 8015526:	b006      	add	sp, #24
 8015528:	bd80      	pop	{r7, pc}
 801552a:	46c0      	nop			@ (mov r8, r8)
 801552c:	fe00e800 	.word	0xfe00e800
 8015530:	ffff0000 	.word	0xffff0000

08015534 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b086      	sub	sp, #24
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801554a:	200f      	movs	r0, #15
 801554c:	183b      	adds	r3, r7, r0
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	2141      	movs	r1, #65	@ 0x41
 8015552:	5c52      	ldrb	r2, [r2, r1]
 8015554:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2220      	movs	r2, #32
 801555c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801555e:	183b      	adds	r3, r7, r0
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	2b21      	cmp	r3, #33	@ 0x21
 8015564:	d003      	beq.n	801556e <I2C_ITSlaveCplt+0x3a>
 8015566:	183b      	adds	r3, r7, r0
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	2b29      	cmp	r3, #41	@ 0x29
 801556c:	d109      	bne.n	8015582 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801556e:	4a7b      	ldr	r2, [pc, #492]	@ (801575c <I2C_ITSlaveCplt+0x228>)
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	0011      	movs	r1, r2
 8015574:	0018      	movs	r0, r3
 8015576:	f000 fe95 	bl	80162a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2221      	movs	r2, #33	@ 0x21
 801557e:	631a      	str	r2, [r3, #48]	@ 0x30
 8015580:	e011      	b.n	80155a6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015582:	220f      	movs	r2, #15
 8015584:	18bb      	adds	r3, r7, r2
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	2b22      	cmp	r3, #34	@ 0x22
 801558a:	d003      	beq.n	8015594 <I2C_ITSlaveCplt+0x60>
 801558c:	18bb      	adds	r3, r7, r2
 801558e:	781b      	ldrb	r3, [r3, #0]
 8015590:	2b2a      	cmp	r3, #42	@ 0x2a
 8015592:	d108      	bne.n	80155a6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8015594:	4a72      	ldr	r2, [pc, #456]	@ (8015760 <I2C_ITSlaveCplt+0x22c>)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	0011      	movs	r1, r2
 801559a:	0018      	movs	r0, r3
 801559c:	f000 fe82 	bl	80162a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2222      	movs	r2, #34	@ 0x22
 80155a4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	685a      	ldr	r2, [r3, #4]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	2180      	movs	r1, #128	@ 0x80
 80155b2:	0209      	lsls	r1, r1, #8
 80155b4:	430a      	orrs	r2, r1
 80155b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4968      	ldr	r1, [pc, #416]	@ (8015764 <I2C_ITSlaveCplt+0x230>)
 80155c4:	400a      	ands	r2, r1
 80155c6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	0018      	movs	r0, r3
 80155cc:	f000 fa55 	bl	8015a7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80155d0:	693a      	ldr	r2, [r7, #16]
 80155d2:	2380      	movs	r3, #128	@ 0x80
 80155d4:	01db      	lsls	r3, r3, #7
 80155d6:	4013      	ands	r3, r2
 80155d8:	d013      	beq.n	8015602 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	4960      	ldr	r1, [pc, #384]	@ (8015768 <I2C_ITSlaveCplt+0x234>)
 80155e6:	400a      	ands	r2, r1
 80155e8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d01f      	beq.n	8015632 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	b29a      	uxth	r2, r3
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015600:	e017      	b.n	8015632 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015602:	693a      	ldr	r2, [r7, #16]
 8015604:	2380      	movs	r3, #128	@ 0x80
 8015606:	021b      	lsls	r3, r3, #8
 8015608:	4013      	ands	r3, r2
 801560a:	d012      	beq.n	8015632 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	681a      	ldr	r2, [r3, #0]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4955      	ldr	r1, [pc, #340]	@ (801576c <I2C_ITSlaveCplt+0x238>)
 8015618:	400a      	ands	r2, r1
 801561a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015620:	2b00      	cmp	r3, #0
 8015622:	d006      	beq.n	8015632 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	685b      	ldr	r3, [r3, #4]
 801562c:	b29a      	uxth	r2, r3
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	2204      	movs	r2, #4
 8015636:	4013      	ands	r3, r2
 8015638:	d020      	beq.n	801567c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	2204      	movs	r2, #4
 801563e:	4393      	bics	r3, r2
 8015640:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801564c:	b2d2      	uxtb	r2, r2
 801564e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015654:	1c5a      	adds	r2, r3, #1
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00c      	beq.n	801567c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015666:	3b01      	subs	r3, #1
 8015668:	b29a      	uxth	r2, r3
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015672:	b29b      	uxth	r3, r3
 8015674:	3b01      	subs	r3, #1
 8015676:	b29a      	uxth	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015680:	b29b      	uxth	r3, r3
 8015682:	2b00      	cmp	r3, #0
 8015684:	d005      	beq.n	8015692 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801568a:	2204      	movs	r2, #4
 801568c:	431a      	orrs	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2242      	movs	r2, #66	@ 0x42
 8015696:	2100      	movs	r1, #0
 8015698:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2200      	movs	r2, #0
 801569e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d013      	beq.n	80156d0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	0011      	movs	r1, r2
 80156b0:	0018      	movs	r0, r3
 80156b2:	f000 f8b7 	bl	8015824 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2241      	movs	r2, #65	@ 0x41
 80156ba:	5c9b      	ldrb	r3, [r3, r2]
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	2b28      	cmp	r3, #40	@ 0x28
 80156c0:	d147      	bne.n	8015752 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80156c2:	697a      	ldr	r2, [r7, #20]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	0011      	movs	r1, r2
 80156c8:	0018      	movs	r0, r3
 80156ca:	f000 f853 	bl	8015774 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80156ce:	e040      	b.n	8015752 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156d4:	4a26      	ldr	r2, [pc, #152]	@ (8015770 <I2C_ITSlaveCplt+0x23c>)
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d016      	beq.n	8015708 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	0018      	movs	r0, r3
 80156de:	f7ff fdf7 	bl	80152d0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	4a22      	ldr	r2, [pc, #136]	@ (8015770 <I2C_ITSlaveCplt+0x23c>)
 80156e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2241      	movs	r2, #65	@ 0x41
 80156ec:	2120      	movs	r1, #32
 80156ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2200      	movs	r2, #0
 80156f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	2240      	movs	r2, #64	@ 0x40
 80156fa:	2100      	movs	r1, #0
 80156fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	0018      	movs	r0, r3
 8015702:	f7fe ff4c 	bl	801459e <HAL_I2C_ListenCpltCallback>
}
 8015706:	e024      	b.n	8015752 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2241      	movs	r2, #65	@ 0x41
 801570c:	5c9b      	ldrb	r3, [r3, r2]
 801570e:	b2db      	uxtb	r3, r3
 8015710:	2b22      	cmp	r3, #34	@ 0x22
 8015712:	d10f      	bne.n	8015734 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2241      	movs	r2, #65	@ 0x41
 8015718:	2120      	movs	r1, #32
 801571a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	2200      	movs	r2, #0
 8015720:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2240      	movs	r2, #64	@ 0x40
 8015726:	2100      	movs	r1, #0
 8015728:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	0018      	movs	r0, r3
 801572e:	f7fe ff1e 	bl	801456e <HAL_I2C_SlaveRxCpltCallback>
}
 8015732:	e00e      	b.n	8015752 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	2241      	movs	r2, #65	@ 0x41
 8015738:	2120      	movs	r1, #32
 801573a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2200      	movs	r2, #0
 8015740:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2240      	movs	r2, #64	@ 0x40
 8015746:	2100      	movs	r1, #0
 8015748:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	0018      	movs	r0, r3
 801574e:	f7fe ff06 	bl	801455e <HAL_I2C_SlaveTxCpltCallback>
}
 8015752:	46c0      	nop			@ (mov r8, r8)
 8015754:	46bd      	mov	sp, r7
 8015756:	b006      	add	sp, #24
 8015758:	bd80      	pop	{r7, pc}
 801575a:	46c0      	nop			@ (mov r8, r8)
 801575c:	00008001 	.word	0x00008001
 8015760:	00008002 	.word	0x00008002
 8015764:	fe00e800 	.word	0xfe00e800
 8015768:	ffffbfff 	.word	0xffffbfff
 801576c:	ffff7fff 	.word	0xffff7fff
 8015770:	ffff0000 	.word	0xffff0000

08015774 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	4a26      	ldr	r2, [pc, #152]	@ (801581c <I2C_ITListenCplt+0xa8>)
 8015782:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2241      	movs	r2, #65	@ 0x41
 801578e:	2120      	movs	r1, #32
 8015790:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2242      	movs	r2, #66	@ 0x42
 8015796:	2100      	movs	r1, #0
 8015798:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	2204      	movs	r2, #4
 80157a4:	4013      	ands	r3, r2
 80157a6:	d022      	beq.n	80157ee <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157b2:	b2d2      	uxtb	r2, r2
 80157b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157ba:	1c5a      	adds	r2, r3, #1
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d012      	beq.n	80157ee <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157cc:	3b01      	subs	r3, #1
 80157ce:	b29a      	uxth	r2, r3
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157d8:	b29b      	uxth	r3, r3
 80157da:	3b01      	subs	r3, #1
 80157dc:	b29a      	uxth	r2, r3
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157e6:	2204      	movs	r2, #4
 80157e8:	431a      	orrs	r2, r3
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80157ee:	4a0c      	ldr	r2, [pc, #48]	@ (8015820 <I2C_ITListenCplt+0xac>)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	0011      	movs	r1, r2
 80157f4:	0018      	movs	r0, r3
 80157f6:	f000 fd55 	bl	80162a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	2210      	movs	r2, #16
 8015800:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	2240      	movs	r2, #64	@ 0x40
 8015806:	2100      	movs	r1, #0
 8015808:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	0018      	movs	r0, r3
 801580e:	f7fe fec6 	bl	801459e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8015812:	46c0      	nop			@ (mov r8, r8)
 8015814:	46bd      	mov	sp, r7
 8015816:	b002      	add	sp, #8
 8015818:	bd80      	pop	{r7, pc}
 801581a:	46c0      	nop			@ (mov r8, r8)
 801581c:	ffff0000 	.word	0xffff0000
 8015820:	00008003 	.word	0x00008003

08015824 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801582e:	200f      	movs	r0, #15
 8015830:	183b      	adds	r3, r7, r0
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	2141      	movs	r1, #65	@ 0x41
 8015836:	5c52      	ldrb	r2, [r2, r1]
 8015838:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	2242      	movs	r2, #66	@ 0x42
 801583e:	2100      	movs	r1, #0
 8015840:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	4a72      	ldr	r2, [pc, #456]	@ (8015a10 <I2C_ITError+0x1ec>)
 8015846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	2200      	movs	r2, #0
 801584c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	431a      	orrs	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801585a:	183b      	adds	r3, r7, r0
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	2b28      	cmp	r3, #40	@ 0x28
 8015860:	d007      	beq.n	8015872 <I2C_ITError+0x4e>
 8015862:	183b      	adds	r3, r7, r0
 8015864:	781b      	ldrb	r3, [r3, #0]
 8015866:	2b29      	cmp	r3, #41	@ 0x29
 8015868:	d003      	beq.n	8015872 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801586a:	183b      	adds	r3, r7, r0
 801586c:	781b      	ldrb	r3, [r3, #0]
 801586e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015870:	d10c      	bne.n	801588c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2103      	movs	r1, #3
 8015876:	0018      	movs	r0, r3
 8015878:	f000 fd14 	bl	80162a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2241      	movs	r2, #65	@ 0x41
 8015880:	2128      	movs	r1, #40	@ 0x28
 8015882:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a63      	ldr	r2, [pc, #396]	@ (8015a14 <I2C_ITError+0x1f0>)
 8015888:	635a      	str	r2, [r3, #52]	@ 0x34
 801588a:	e032      	b.n	80158f2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801588c:	4a62      	ldr	r2, [pc, #392]	@ (8015a18 <I2C_ITError+0x1f4>)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	0011      	movs	r1, r2
 8015892:	0018      	movs	r0, r3
 8015894:	f000 fd06 	bl	80162a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	0018      	movs	r0, r3
 801589c:	f000 f8ed 	bl	8015a7a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2241      	movs	r2, #65	@ 0x41
 80158a4:	5c9b      	ldrb	r3, [r3, r2]
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	2b60      	cmp	r3, #96	@ 0x60
 80158aa:	d01f      	beq.n	80158ec <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2241      	movs	r2, #65	@ 0x41
 80158b0:	2120      	movs	r1, #32
 80158b2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	699b      	ldr	r3, [r3, #24]
 80158ba:	2220      	movs	r2, #32
 80158bc:	4013      	ands	r3, r2
 80158be:	2b20      	cmp	r3, #32
 80158c0:	d114      	bne.n	80158ec <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	699b      	ldr	r3, [r3, #24]
 80158c8:	2210      	movs	r2, #16
 80158ca:	4013      	ands	r3, r2
 80158cc:	2b10      	cmp	r3, #16
 80158ce:	d109      	bne.n	80158e4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	2210      	movs	r2, #16
 80158d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158dc:	2204      	movs	r2, #4
 80158de:	431a      	orrs	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	2220      	movs	r2, #32
 80158ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2200      	movs	r2, #0
 80158f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d03b      	beq.n	8015978 <I2C_ITError+0x154>
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2b11      	cmp	r3, #17
 8015904:	d002      	beq.n	801590c <I2C_ITError+0xe8>
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	2b21      	cmp	r3, #33	@ 0x21
 801590a:	d135      	bne.n	8015978 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	681a      	ldr	r2, [r3, #0]
 8015912:	2380      	movs	r3, #128	@ 0x80
 8015914:	01db      	lsls	r3, r3, #7
 8015916:	401a      	ands	r2, r3
 8015918:	2380      	movs	r3, #128	@ 0x80
 801591a:	01db      	lsls	r3, r3, #7
 801591c:	429a      	cmp	r2, r3
 801591e:	d107      	bne.n	8015930 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	681a      	ldr	r2, [r3, #0]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	493c      	ldr	r1, [pc, #240]	@ (8015a1c <I2C_ITError+0x1f8>)
 801592c:	400a      	ands	r2, r1
 801592e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015934:	0018      	movs	r0, r3
 8015936:	f7fd faca 	bl	8012ece <HAL_DMA_GetState>
 801593a:	0003      	movs	r3, r0
 801593c:	2b01      	cmp	r3, #1
 801593e:	d016      	beq.n	801596e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015944:	4a36      	ldr	r2, [pc, #216]	@ (8015a20 <I2C_ITError+0x1fc>)
 8015946:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2240      	movs	r2, #64	@ 0x40
 801594c:	2100      	movs	r1, #0
 801594e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015954:	0018      	movs	r0, r3
 8015956:	f7fd f9c5 	bl	8012ce4 <HAL_DMA_Abort_IT>
 801595a:	1e03      	subs	r3, r0, #0
 801595c:	d051      	beq.n	8015a02 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015968:	0018      	movs	r0, r3
 801596a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801596c:	e049      	b.n	8015a02 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	0018      	movs	r0, r3
 8015972:	f000 f859 	bl	8015a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015976:	e044      	b.n	8015a02 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801597c:	2b00      	cmp	r3, #0
 801597e:	d03b      	beq.n	80159f8 <I2C_ITError+0x1d4>
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	2b12      	cmp	r3, #18
 8015984:	d002      	beq.n	801598c <I2C_ITError+0x168>
 8015986:	68bb      	ldr	r3, [r7, #8]
 8015988:	2b22      	cmp	r3, #34	@ 0x22
 801598a:	d135      	bne.n	80159f8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	681a      	ldr	r2, [r3, #0]
 8015992:	2380      	movs	r3, #128	@ 0x80
 8015994:	021b      	lsls	r3, r3, #8
 8015996:	401a      	ands	r2, r3
 8015998:	2380      	movs	r3, #128	@ 0x80
 801599a:	021b      	lsls	r3, r3, #8
 801599c:	429a      	cmp	r2, r3
 801599e:	d107      	bne.n	80159b0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	681a      	ldr	r2, [r3, #0]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	491e      	ldr	r1, [pc, #120]	@ (8015a24 <I2C_ITError+0x200>)
 80159ac:	400a      	ands	r2, r1
 80159ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159b4:	0018      	movs	r0, r3
 80159b6:	f7fd fa8a 	bl	8012ece <HAL_DMA_GetState>
 80159ba:	0003      	movs	r3, r0
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d016      	beq.n	80159ee <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159c4:	4a16      	ldr	r2, [pc, #88]	@ (8015a20 <I2C_ITError+0x1fc>)
 80159c6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2240      	movs	r2, #64	@ 0x40
 80159cc:	2100      	movs	r1, #0
 80159ce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159d4:	0018      	movs	r0, r3
 80159d6:	f7fd f985 	bl	8012ce4 <HAL_DMA_Abort_IT>
 80159da:	1e03      	subs	r3, r0, #0
 80159dc:	d013      	beq.n	8015a06 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159e8:	0018      	movs	r0, r3
 80159ea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80159ec:	e00b      	b.n	8015a06 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	0018      	movs	r0, r3
 80159f2:	f000 f819 	bl	8015a28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80159f6:	e006      	b.n	8015a06 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	0018      	movs	r0, r3
 80159fc:	f000 f814 	bl	8015a28 <I2C_TreatErrorCallback>
  }
}
 8015a00:	e002      	b.n	8015a08 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015a02:	46c0      	nop			@ (mov r8, r8)
 8015a04:	e000      	b.n	8015a08 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015a06:	46c0      	nop			@ (mov r8, r8)
}
 8015a08:	46c0      	nop			@ (mov r8, r8)
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	b004      	add	sp, #16
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	ffff0000 	.word	0xffff0000
 8015a14:	08014845 	.word	0x08014845
 8015a18:	00008003 	.word	0x00008003
 8015a1c:	ffffbfff 	.word	0xffffbfff
 8015a20:	08015c33 	.word	0x08015c33
 8015a24:	ffff7fff 	.word	0xffff7fff

08015a28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2241      	movs	r2, #65	@ 0x41
 8015a34:	5c9b      	ldrb	r3, [r3, r2]
 8015a36:	b2db      	uxtb	r3, r3
 8015a38:	2b60      	cmp	r3, #96	@ 0x60
 8015a3a:	d10f      	bne.n	8015a5c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2241      	movs	r2, #65	@ 0x41
 8015a40:	2120      	movs	r1, #32
 8015a42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2200      	movs	r2, #0
 8015a48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2240      	movs	r2, #64	@ 0x40
 8015a4e:	2100      	movs	r1, #0
 8015a50:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	0018      	movs	r0, r3
 8015a56:	f7fe fdc2 	bl	80145de <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015a5a:	e00a      	b.n	8015a72 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2240      	movs	r2, #64	@ 0x40
 8015a66:	2100      	movs	r1, #0
 8015a68:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	0018      	movs	r0, r3
 8015a6e:	f7fe fdae 	bl	80145ce <HAL_I2C_ErrorCallback>
}
 8015a72:	46c0      	nop			@ (mov r8, r8)
 8015a74:	46bd      	mov	sp, r7
 8015a76:	b002      	add	sp, #8
 8015a78:	bd80      	pop	{r7, pc}

08015a7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015a7a:	b580      	push	{r7, lr}
 8015a7c:	b082      	sub	sp, #8
 8015a7e:	af00      	add	r7, sp, #0
 8015a80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	699b      	ldr	r3, [r3, #24]
 8015a88:	2202      	movs	r2, #2
 8015a8a:	4013      	ands	r3, r2
 8015a8c:	2b02      	cmp	r3, #2
 8015a8e:	d103      	bne.n	8015a98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2200      	movs	r2, #0
 8015a96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	699b      	ldr	r3, [r3, #24]
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	4013      	ands	r3, r2
 8015aa2:	2b01      	cmp	r3, #1
 8015aa4:	d007      	beq.n	8015ab6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	699a      	ldr	r2, [r3, #24]
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	430a      	orrs	r2, r1
 8015ab4:	619a      	str	r2, [r3, #24]
  }
}
 8015ab6:	46c0      	nop			@ (mov r8, r8)
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	b002      	add	sp, #8
 8015abc:	bd80      	pop	{r7, pc}
	...

08015ac0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b084      	sub	sp, #16
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015acc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	681a      	ldr	r2, [r3, #0]
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	4920      	ldr	r1, [pc, #128]	@ (8015b5c <I2C_DMAMasterTransmitCplt+0x9c>)
 8015ada:	400a      	ands	r2, r1
 8015adc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d105      	bne.n	8015af4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2120      	movs	r1, #32
 8015aec:	0018      	movs	r0, r3
 8015aee:	f000 fb4b 	bl	8016188 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015af2:	e02e      	b.n	8015b52 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015af8:	68fa      	ldr	r2, [r7, #12]
 8015afa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015afc:	189a      	adds	r2, r3, r2
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	2bff      	cmp	r3, #255	@ 0xff
 8015b0a:	d903      	bls.n	8015b14 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	22ff      	movs	r2, #255	@ 0xff
 8015b10:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015b12:	e004      	b.n	8015b1e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b18:	b29a      	uxth	r2, r3
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b26:	0019      	movs	r1, r3
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	3328      	adds	r3, #40	@ 0x28
 8015b2e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015b34:	f7fd f830 	bl	8012b98 <HAL_DMA_Start_IT>
 8015b38:	1e03      	subs	r3, r0, #0
 8015b3a:	d005      	beq.n	8015b48 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2110      	movs	r1, #16
 8015b40:	0018      	movs	r0, r3
 8015b42:	f7ff fe6f 	bl	8015824 <I2C_ITError>
}
 8015b46:	e004      	b.n	8015b52 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	2140      	movs	r1, #64	@ 0x40
 8015b4c:	0018      	movs	r0, r3
 8015b4e:	f000 fb1b 	bl	8016188 <I2C_Enable_IRQ>
}
 8015b52:	46c0      	nop			@ (mov r8, r8)
 8015b54:	46bd      	mov	sp, r7
 8015b56:	b004      	add	sp, #16
 8015b58:	bd80      	pop	{r7, pc}
 8015b5a:	46c0      	nop			@ (mov r8, r8)
 8015b5c:	ffffbfff 	.word	0xffffbfff

08015b60 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b084      	sub	sp, #16
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b6c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	4920      	ldr	r1, [pc, #128]	@ (8015bfc <I2C_DMAMasterReceiveCplt+0x9c>)
 8015b7a:	400a      	ands	r2, r1
 8015b7c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d105      	bne.n	8015b94 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	2120      	movs	r1, #32
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	f000 fafb 	bl	8016188 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015b92:	e02e      	b.n	8015bf2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b98:	68fa      	ldr	r2, [r7, #12]
 8015b9a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015b9c:	189a      	adds	r2, r3, r2
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	2bff      	cmp	r3, #255	@ 0xff
 8015baa:	d903      	bls.n	8015bb4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	22ff      	movs	r2, #255	@ 0xff
 8015bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015bb2:	e004      	b.n	8015bbe <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bb8:	b29a      	uxth	r2, r3
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	3324      	adds	r3, #36	@ 0x24
 8015bc8:	0019      	movs	r1, r3
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bce:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015bd4:	f7fc ffe0 	bl	8012b98 <HAL_DMA_Start_IT>
 8015bd8:	1e03      	subs	r3, r0, #0
 8015bda:	d005      	beq.n	8015be8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2110      	movs	r1, #16
 8015be0:	0018      	movs	r0, r3
 8015be2:	f7ff fe1f 	bl	8015824 <I2C_ITError>
}
 8015be6:	e004      	b.n	8015bf2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	2140      	movs	r1, #64	@ 0x40
 8015bec:	0018      	movs	r0, r3
 8015bee:	f000 facb 	bl	8016188 <I2C_Enable_IRQ>
}
 8015bf2:	46c0      	nop			@ (mov r8, r8)
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	b004      	add	sp, #16
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	46c0      	nop			@ (mov r8, r8)
 8015bfc:	ffff7fff 	.word	0xffff7fff

08015c00 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c0c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	685a      	ldr	r2, [r3, #4]
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	2180      	movs	r1, #128	@ 0x80
 8015c1a:	0209      	lsls	r1, r1, #8
 8015c1c:	430a      	orrs	r2, r1
 8015c1e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	2110      	movs	r1, #16
 8015c24:	0018      	movs	r0, r3
 8015c26:	f7ff fdfd 	bl	8015824 <I2C_ITError>
}
 8015c2a:	46c0      	nop			@ (mov r8, r8)
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	b004      	add	sp, #16
 8015c30:	bd80      	pop	{r7, pc}

08015c32 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8015c32:	b580      	push	{r7, lr}
 8015c34:	b084      	sub	sp, #16
 8015c36:	af00      	add	r7, sp, #0
 8015c38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c3e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d003      	beq.n	8015c50 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d003      	beq.n	8015c60 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	0018      	movs	r0, r3
 8015c64:	f7ff fee0 	bl	8015a28 <I2C_TreatErrorCallback>
}
 8015c68:	46c0      	nop			@ (mov r8, r8)
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	b004      	add	sp, #16
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b084      	sub	sp, #16
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	603b      	str	r3, [r7, #0]
 8015c7c:	1dfb      	adds	r3, r7, #7
 8015c7e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015c80:	e030      	b.n	8015ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	3301      	adds	r3, #1
 8015c86:	d02d      	beq.n	8015ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015c88:	f7fc fa34 	bl	80120f4 <HAL_GetTick>
 8015c8c:	0002      	movs	r2, r0
 8015c8e:	69bb      	ldr	r3, [r7, #24]
 8015c90:	1ad3      	subs	r3, r2, r3
 8015c92:	683a      	ldr	r2, [r7, #0]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d302      	bcc.n	8015c9e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d122      	bne.n	8015ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	699b      	ldr	r3, [r3, #24]
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	4013      	ands	r3, r2
 8015ca8:	68ba      	ldr	r2, [r7, #8]
 8015caa:	1ad3      	subs	r3, r2, r3
 8015cac:	425a      	negs	r2, r3
 8015cae:	4153      	adcs	r3, r2
 8015cb0:	b2db      	uxtb	r3, r3
 8015cb2:	001a      	movs	r2, r3
 8015cb4:	1dfb      	adds	r3, r7, #7
 8015cb6:	781b      	ldrb	r3, [r3, #0]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d113      	bne.n	8015ce4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cc0:	2220      	movs	r2, #32
 8015cc2:	431a      	orrs	r2, r3
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	2241      	movs	r2, #65	@ 0x41
 8015ccc:	2120      	movs	r1, #32
 8015cce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2242      	movs	r2, #66	@ 0x42
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2240      	movs	r2, #64	@ 0x40
 8015cdc:	2100      	movs	r1, #0
 8015cde:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	e00f      	b.n	8015d04 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	699b      	ldr	r3, [r3, #24]
 8015cea:	68ba      	ldr	r2, [r7, #8]
 8015cec:	4013      	ands	r3, r2
 8015cee:	68ba      	ldr	r2, [r7, #8]
 8015cf0:	1ad3      	subs	r3, r2, r3
 8015cf2:	425a      	negs	r2, r3
 8015cf4:	4153      	adcs	r3, r2
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	001a      	movs	r2, r3
 8015cfa:	1dfb      	adds	r3, r7, #7
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d0bf      	beq.n	8015c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	0018      	movs	r0, r3
 8015d06:	46bd      	mov	sp, r7
 8015d08:	b004      	add	sp, #16
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015d18:	e032      	b.n	8015d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015d1a:	687a      	ldr	r2, [r7, #4]
 8015d1c:	68b9      	ldr	r1, [r7, #8]
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	0018      	movs	r0, r3
 8015d22:	f000 f8ff 	bl	8015f24 <I2C_IsErrorOccurred>
 8015d26:	1e03      	subs	r3, r0, #0
 8015d28:	d001      	beq.n	8015d2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	e030      	b.n	8015d90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	3301      	adds	r3, #1
 8015d32:	d025      	beq.n	8015d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015d34:	f7fc f9de 	bl	80120f4 <HAL_GetTick>
 8015d38:	0002      	movs	r2, r0
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	1ad3      	subs	r3, r2, r3
 8015d3e:	68ba      	ldr	r2, [r7, #8]
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d302      	bcc.n	8015d4a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d11a      	bne.n	8015d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	699b      	ldr	r3, [r3, #24]
 8015d50:	2202      	movs	r2, #2
 8015d52:	4013      	ands	r3, r2
 8015d54:	2b02      	cmp	r3, #2
 8015d56:	d013      	beq.n	8015d80 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d5c:	2220      	movs	r2, #32
 8015d5e:	431a      	orrs	r2, r3
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2241      	movs	r2, #65	@ 0x41
 8015d68:	2120      	movs	r1, #32
 8015d6a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	2242      	movs	r2, #66	@ 0x42
 8015d70:	2100      	movs	r1, #0
 8015d72:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2240      	movs	r2, #64	@ 0x40
 8015d78:	2100      	movs	r1, #0
 8015d7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	e007      	b.n	8015d90 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	699b      	ldr	r3, [r3, #24]
 8015d86:	2202      	movs	r2, #2
 8015d88:	4013      	ands	r3, r2
 8015d8a:	2b02      	cmp	r3, #2
 8015d8c:	d1c5      	bne.n	8015d1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8015d8e:	2300      	movs	r3, #0
}
 8015d90:	0018      	movs	r0, r3
 8015d92:	46bd      	mov	sp, r7
 8015d94:	b004      	add	sp, #16
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015da4:	e02f      	b.n	8015e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015da6:	687a      	ldr	r2, [r7, #4]
 8015da8:	68b9      	ldr	r1, [r7, #8]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	0018      	movs	r0, r3
 8015dae:	f000 f8b9 	bl	8015f24 <I2C_IsErrorOccurred>
 8015db2:	1e03      	subs	r3, r0, #0
 8015db4:	d001      	beq.n	8015dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015db6:	2301      	movs	r3, #1
 8015db8:	e02d      	b.n	8015e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015dba:	f7fc f99b 	bl	80120f4 <HAL_GetTick>
 8015dbe:	0002      	movs	r2, r0
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	1ad3      	subs	r3, r2, r3
 8015dc4:	68ba      	ldr	r2, [r7, #8]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d302      	bcc.n	8015dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d11a      	bne.n	8015e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	699b      	ldr	r3, [r3, #24]
 8015dd6:	2220      	movs	r2, #32
 8015dd8:	4013      	ands	r3, r2
 8015dda:	2b20      	cmp	r3, #32
 8015ddc:	d013      	beq.n	8015e06 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015de2:	2220      	movs	r2, #32
 8015de4:	431a      	orrs	r2, r3
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2241      	movs	r2, #65	@ 0x41
 8015dee:	2120      	movs	r1, #32
 8015df0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2242      	movs	r2, #66	@ 0x42
 8015df6:	2100      	movs	r1, #0
 8015df8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2240      	movs	r2, #64	@ 0x40
 8015dfe:	2100      	movs	r1, #0
 8015e00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015e02:	2301      	movs	r3, #1
 8015e04:	e007      	b.n	8015e16 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	699b      	ldr	r3, [r3, #24]
 8015e0c:	2220      	movs	r2, #32
 8015e0e:	4013      	ands	r3, r2
 8015e10:	2b20      	cmp	r3, #32
 8015e12:	d1c8      	bne.n	8015da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015e14:	2300      	movs	r3, #0
}
 8015e16:	0018      	movs	r0, r3
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	b004      	add	sp, #16
 8015e1c:	bd80      	pop	{r7, pc}
	...

08015e20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015e2c:	e06b      	b.n	8015f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	68b9      	ldr	r1, [r7, #8]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	0018      	movs	r0, r3
 8015e36:	f000 f875 	bl	8015f24 <I2C_IsErrorOccurred>
 8015e3a:	1e03      	subs	r3, r0, #0
 8015e3c:	d001      	beq.n	8015e42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e069      	b.n	8015f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	699b      	ldr	r3, [r3, #24]
 8015e48:	2220      	movs	r2, #32
 8015e4a:	4013      	ands	r3, r2
 8015e4c:	2b20      	cmp	r3, #32
 8015e4e:	d138      	bne.n	8015ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	699b      	ldr	r3, [r3, #24]
 8015e56:	2204      	movs	r2, #4
 8015e58:	4013      	ands	r3, r2
 8015e5a:	2b04      	cmp	r3, #4
 8015e5c:	d105      	bne.n	8015e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d001      	beq.n	8015e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8015e66:	2300      	movs	r3, #0
 8015e68:	e055      	b.n	8015f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	699b      	ldr	r3, [r3, #24]
 8015e70:	2210      	movs	r2, #16
 8015e72:	4013      	ands	r3, r2
 8015e74:	2b10      	cmp	r3, #16
 8015e76:	d107      	bne.n	8015e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	2210      	movs	r2, #16
 8015e7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2204      	movs	r2, #4
 8015e84:	645a      	str	r2, [r3, #68]	@ 0x44
 8015e86:	e002      	b.n	8015e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2220      	movs	r2, #32
 8015e94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	685a      	ldr	r2, [r3, #4]
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	491f      	ldr	r1, [pc, #124]	@ (8015f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8015ea2:	400a      	ands	r2, r1
 8015ea4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2241      	movs	r2, #65	@ 0x41
 8015eaa:	2120      	movs	r1, #32
 8015eac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2242      	movs	r2, #66	@ 0x42
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	2240      	movs	r2, #64	@ 0x40
 8015eba:	2100      	movs	r1, #0
 8015ebc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015ebe:	2301      	movs	r3, #1
 8015ec0:	e029      	b.n	8015f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015ec2:	f7fc f917 	bl	80120f4 <HAL_GetTick>
 8015ec6:	0002      	movs	r2, r0
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	68ba      	ldr	r2, [r7, #8]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d302      	bcc.n	8015ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d116      	bne.n	8015f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	699b      	ldr	r3, [r3, #24]
 8015ede:	2204      	movs	r2, #4
 8015ee0:	4013      	ands	r3, r2
 8015ee2:	2b04      	cmp	r3, #4
 8015ee4:	d00f      	beq.n	8015f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015eea:	2220      	movs	r2, #32
 8015eec:	431a      	orrs	r2, r3
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2241      	movs	r2, #65	@ 0x41
 8015ef6:	2120      	movs	r1, #32
 8015ef8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2240      	movs	r2, #64	@ 0x40
 8015efe:	2100      	movs	r1, #0
 8015f00:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015f02:	2301      	movs	r3, #1
 8015f04:	e007      	b.n	8015f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	699b      	ldr	r3, [r3, #24]
 8015f0c:	2204      	movs	r2, #4
 8015f0e:	4013      	ands	r3, r2
 8015f10:	2b04      	cmp	r3, #4
 8015f12:	d18c      	bne.n	8015e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	0018      	movs	r0, r3
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	b004      	add	sp, #16
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	46c0      	nop			@ (mov r8, r8)
 8015f20:	fe00e800 	.word	0xfe00e800

08015f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b08a      	sub	sp, #40	@ 0x28
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	60f8      	str	r0, [r7, #12]
 8015f2c:	60b9      	str	r1, [r7, #8]
 8015f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015f30:	2327      	movs	r3, #39	@ 0x27
 8015f32:	18fb      	adds	r3, r7, r3
 8015f34:	2200      	movs	r2, #0
 8015f36:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	699b      	ldr	r3, [r3, #24]
 8015f3e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8015f40:	2300      	movs	r3, #0
 8015f42:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	2210      	movs	r2, #16
 8015f4c:	4013      	ands	r3, r2
 8015f4e:	d100      	bne.n	8015f52 <I2C_IsErrorOccurred+0x2e>
 8015f50:	e079      	b.n	8016046 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	2210      	movs	r2, #16
 8015f58:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015f5a:	e057      	b.n	801600c <I2C_IsErrorOccurred+0xe8>
 8015f5c:	2227      	movs	r2, #39	@ 0x27
 8015f5e:	18bb      	adds	r3, r7, r2
 8015f60:	18ba      	adds	r2, r7, r2
 8015f62:	7812      	ldrb	r2, [r2, #0]
 8015f64:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015f66:	68bb      	ldr	r3, [r7, #8]
 8015f68:	3301      	adds	r3, #1
 8015f6a:	d04f      	beq.n	801600c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015f6c:	f7fc f8c2 	bl	80120f4 <HAL_GetTick>
 8015f70:	0002      	movs	r2, r0
 8015f72:	69fb      	ldr	r3, [r7, #28]
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	68ba      	ldr	r2, [r7, #8]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d302      	bcc.n	8015f82 <I2C_IsErrorOccurred+0x5e>
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d144      	bne.n	801600c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	685a      	ldr	r2, [r3, #4]
 8015f88:	2380      	movs	r3, #128	@ 0x80
 8015f8a:	01db      	lsls	r3, r3, #7
 8015f8c:	4013      	ands	r3, r2
 8015f8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8015f90:	2013      	movs	r0, #19
 8015f92:	183b      	adds	r3, r7, r0
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	2142      	movs	r1, #66	@ 0x42
 8015f98:	5c52      	ldrb	r2, [r2, r1]
 8015f9a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	699a      	ldr	r2, [r3, #24]
 8015fa2:	2380      	movs	r3, #128	@ 0x80
 8015fa4:	021b      	lsls	r3, r3, #8
 8015fa6:	401a      	ands	r2, r3
 8015fa8:	2380      	movs	r3, #128	@ 0x80
 8015faa:	021b      	lsls	r3, r3, #8
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d126      	bne.n	8015ffe <I2C_IsErrorOccurred+0xda>
 8015fb0:	697a      	ldr	r2, [r7, #20]
 8015fb2:	2380      	movs	r3, #128	@ 0x80
 8015fb4:	01db      	lsls	r3, r3, #7
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d021      	beq.n	8015ffe <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8015fba:	183b      	adds	r3, r7, r0
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	2b20      	cmp	r3, #32
 8015fc0:	d01d      	beq.n	8015ffe <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	685a      	ldr	r2, [r3, #4]
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2180      	movs	r1, #128	@ 0x80
 8015fce:	01c9      	lsls	r1, r1, #7
 8015fd0:	430a      	orrs	r2, r1
 8015fd2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8015fd4:	f7fc f88e 	bl	80120f4 <HAL_GetTick>
 8015fd8:	0003      	movs	r3, r0
 8015fda:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015fdc:	e00f      	b.n	8015ffe <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8015fde:	f7fc f889 	bl	80120f4 <HAL_GetTick>
 8015fe2:	0002      	movs	r2, r0
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	2b19      	cmp	r3, #25
 8015fea:	d908      	bls.n	8015ffe <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8015fec:	6a3b      	ldr	r3, [r7, #32]
 8015fee:	2220      	movs	r2, #32
 8015ff0:	4313      	orrs	r3, r2
 8015ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8015ff4:	2327      	movs	r3, #39	@ 0x27
 8015ff6:	18fb      	adds	r3, r7, r3
 8015ff8:	2201      	movs	r2, #1
 8015ffa:	701a      	strb	r2, [r3, #0]

              break;
 8015ffc:	e006      	b.n	801600c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	699b      	ldr	r3, [r3, #24]
 8016004:	2220      	movs	r2, #32
 8016006:	4013      	ands	r3, r2
 8016008:	2b20      	cmp	r3, #32
 801600a:	d1e8      	bne.n	8015fde <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	699b      	ldr	r3, [r3, #24]
 8016012:	2220      	movs	r2, #32
 8016014:	4013      	ands	r3, r2
 8016016:	2b20      	cmp	r3, #32
 8016018:	d004      	beq.n	8016024 <I2C_IsErrorOccurred+0x100>
 801601a:	2327      	movs	r3, #39	@ 0x27
 801601c:	18fb      	adds	r3, r7, r3
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d09b      	beq.n	8015f5c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016024:	2327      	movs	r3, #39	@ 0x27
 8016026:	18fb      	adds	r3, r7, r3
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d103      	bne.n	8016036 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	2220      	movs	r2, #32
 8016034:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016036:	6a3b      	ldr	r3, [r7, #32]
 8016038:	2204      	movs	r2, #4
 801603a:	4313      	orrs	r3, r2
 801603c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801603e:	2327      	movs	r3, #39	@ 0x27
 8016040:	18fb      	adds	r3, r7, r3
 8016042:	2201      	movs	r2, #1
 8016044:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	699b      	ldr	r3, [r3, #24]
 801604c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801604e:	69ba      	ldr	r2, [r7, #24]
 8016050:	2380      	movs	r3, #128	@ 0x80
 8016052:	005b      	lsls	r3, r3, #1
 8016054:	4013      	ands	r3, r2
 8016056:	d00c      	beq.n	8016072 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8016058:	6a3b      	ldr	r3, [r7, #32]
 801605a:	2201      	movs	r2, #1
 801605c:	4313      	orrs	r3, r2
 801605e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	2280      	movs	r2, #128	@ 0x80
 8016066:	0052      	lsls	r2, r2, #1
 8016068:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801606a:	2327      	movs	r3, #39	@ 0x27
 801606c:	18fb      	adds	r3, r7, r3
 801606e:	2201      	movs	r2, #1
 8016070:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8016072:	69ba      	ldr	r2, [r7, #24]
 8016074:	2380      	movs	r3, #128	@ 0x80
 8016076:	00db      	lsls	r3, r3, #3
 8016078:	4013      	ands	r3, r2
 801607a:	d00c      	beq.n	8016096 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801607c:	6a3b      	ldr	r3, [r7, #32]
 801607e:	2208      	movs	r2, #8
 8016080:	4313      	orrs	r3, r2
 8016082:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2280      	movs	r2, #128	@ 0x80
 801608a:	00d2      	lsls	r2, r2, #3
 801608c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801608e:	2327      	movs	r3, #39	@ 0x27
 8016090:	18fb      	adds	r3, r7, r3
 8016092:	2201      	movs	r2, #1
 8016094:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016096:	69ba      	ldr	r2, [r7, #24]
 8016098:	2380      	movs	r3, #128	@ 0x80
 801609a:	009b      	lsls	r3, r3, #2
 801609c:	4013      	ands	r3, r2
 801609e:	d00c      	beq.n	80160ba <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	2202      	movs	r2, #2
 80160a4:	4313      	orrs	r3, r2
 80160a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2280      	movs	r2, #128	@ 0x80
 80160ae:	0092      	lsls	r2, r2, #2
 80160b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80160b2:	2327      	movs	r3, #39	@ 0x27
 80160b4:	18fb      	adds	r3, r7, r3
 80160b6:	2201      	movs	r2, #1
 80160b8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80160ba:	2327      	movs	r3, #39	@ 0x27
 80160bc:	18fb      	adds	r3, r7, r3
 80160be:	781b      	ldrb	r3, [r3, #0]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d01d      	beq.n	8016100 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	0018      	movs	r0, r3
 80160c8:	f7ff fcd7 	bl	8015a7a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	685a      	ldr	r2, [r3, #4]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	490e      	ldr	r1, [pc, #56]	@ (8016110 <I2C_IsErrorOccurred+0x1ec>)
 80160d8:	400a      	ands	r2, r1
 80160da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80160e0:	6a3b      	ldr	r3, [r7, #32]
 80160e2:	431a      	orrs	r2, r3
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2241      	movs	r2, #65	@ 0x41
 80160ec:	2120      	movs	r1, #32
 80160ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2242      	movs	r2, #66	@ 0x42
 80160f4:	2100      	movs	r1, #0
 80160f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	2240      	movs	r2, #64	@ 0x40
 80160fc:	2100      	movs	r1, #0
 80160fe:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8016100:	2327      	movs	r3, #39	@ 0x27
 8016102:	18fb      	adds	r3, r7, r3
 8016104:	781b      	ldrb	r3, [r3, #0]
}
 8016106:	0018      	movs	r0, r3
 8016108:	46bd      	mov	sp, r7
 801610a:	b00a      	add	sp, #40	@ 0x28
 801610c:	bd80      	pop	{r7, pc}
 801610e:	46c0      	nop			@ (mov r8, r8)
 8016110:	fe00e800 	.word	0xfe00e800

08016114 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016114:	b590      	push	{r4, r7, lr}
 8016116:	b087      	sub	sp, #28
 8016118:	af00      	add	r7, sp, #0
 801611a:	60f8      	str	r0, [r7, #12]
 801611c:	0008      	movs	r0, r1
 801611e:	0011      	movs	r1, r2
 8016120:	607b      	str	r3, [r7, #4]
 8016122:	240a      	movs	r4, #10
 8016124:	193b      	adds	r3, r7, r4
 8016126:	1c02      	adds	r2, r0, #0
 8016128:	801a      	strh	r2, [r3, #0]
 801612a:	2009      	movs	r0, #9
 801612c:	183b      	adds	r3, r7, r0
 801612e:	1c0a      	adds	r2, r1, #0
 8016130:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016132:	193b      	adds	r3, r7, r4
 8016134:	881b      	ldrh	r3, [r3, #0]
 8016136:	059b      	lsls	r3, r3, #22
 8016138:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801613a:	183b      	adds	r3, r7, r0
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	0419      	lsls	r1, r3, #16
 8016140:	23ff      	movs	r3, #255	@ 0xff
 8016142:	041b      	lsls	r3, r3, #16
 8016144:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016146:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801614c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801614e:	4313      	orrs	r3, r2
 8016150:	005b      	lsls	r3, r3, #1
 8016152:	085b      	lsrs	r3, r3, #1
 8016154:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801615e:	0d51      	lsrs	r1, r2, #21
 8016160:	2280      	movs	r2, #128	@ 0x80
 8016162:	00d2      	lsls	r2, r2, #3
 8016164:	400a      	ands	r2, r1
 8016166:	4907      	ldr	r1, [pc, #28]	@ (8016184 <I2C_TransferConfig+0x70>)
 8016168:	430a      	orrs	r2, r1
 801616a:	43d2      	mvns	r2, r2
 801616c:	401a      	ands	r2, r3
 801616e:	0011      	movs	r1, r2
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	697a      	ldr	r2, [r7, #20]
 8016176:	430a      	orrs	r2, r1
 8016178:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801617a:	46c0      	nop			@ (mov r8, r8)
 801617c:	46bd      	mov	sp, r7
 801617e:	b007      	add	sp, #28
 8016180:	bd90      	pop	{r4, r7, pc}
 8016182:	46c0      	nop			@ (mov r8, r8)
 8016184:	03ff63ff 	.word	0x03ff63ff

08016188 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	000a      	movs	r2, r1
 8016192:	1cbb      	adds	r3, r7, #2
 8016194:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8016196:	2300      	movs	r3, #0
 8016198:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801619e:	4b3e      	ldr	r3, [pc, #248]	@ (8016298 <I2C_Enable_IRQ+0x110>)
 80161a0:	429a      	cmp	r2, r3
 80161a2:	d035      	beq.n	8016210 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80161a8:	4b3c      	ldr	r3, [pc, #240]	@ (801629c <I2C_Enable_IRQ+0x114>)
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d030      	beq.n	8016210 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80161b2:	4b3b      	ldr	r3, [pc, #236]	@ (80162a0 <I2C_Enable_IRQ+0x118>)
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d02b      	beq.n	8016210 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80161b8:	1cbb      	adds	r3, r7, #2
 80161ba:	2200      	movs	r2, #0
 80161bc:	5e9b      	ldrsh	r3, [r3, r2]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	da03      	bge.n	80161ca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	22b8      	movs	r2, #184	@ 0xb8
 80161c6:	4313      	orrs	r3, r2
 80161c8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80161ca:	1cbb      	adds	r3, r7, #2
 80161cc:	881b      	ldrh	r3, [r3, #0]
 80161ce:	2201      	movs	r2, #1
 80161d0:	4013      	ands	r3, r2
 80161d2:	d003      	beq.n	80161dc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	22f2      	movs	r2, #242	@ 0xf2
 80161d8:	4313      	orrs	r3, r2
 80161da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80161dc:	1cbb      	adds	r3, r7, #2
 80161de:	881b      	ldrh	r3, [r3, #0]
 80161e0:	2202      	movs	r2, #2
 80161e2:	4013      	ands	r3, r2
 80161e4:	d003      	beq.n	80161ee <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	22f4      	movs	r2, #244	@ 0xf4
 80161ea:	4313      	orrs	r3, r2
 80161ec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80161ee:	1cbb      	adds	r3, r7, #2
 80161f0:	881b      	ldrh	r3, [r3, #0]
 80161f2:	2b10      	cmp	r3, #16
 80161f4:	d103      	bne.n	80161fe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2290      	movs	r2, #144	@ 0x90
 80161fa:	4313      	orrs	r3, r2
 80161fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80161fe:	1cbb      	adds	r3, r7, #2
 8016200:	881b      	ldrh	r3, [r3, #0]
 8016202:	2b20      	cmp	r3, #32
 8016204:	d13c      	bne.n	8016280 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2220      	movs	r2, #32
 801620a:	4313      	orrs	r3, r2
 801620c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801620e:	e037      	b.n	8016280 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8016210:	1cbb      	adds	r3, r7, #2
 8016212:	2200      	movs	r2, #0
 8016214:	5e9b      	ldrsh	r3, [r3, r2]
 8016216:	2b00      	cmp	r3, #0
 8016218:	da03      	bge.n	8016222 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	22b8      	movs	r2, #184	@ 0xb8
 801621e:	4313      	orrs	r3, r2
 8016220:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8016222:	1cbb      	adds	r3, r7, #2
 8016224:	881b      	ldrh	r3, [r3, #0]
 8016226:	2201      	movs	r2, #1
 8016228:	4013      	ands	r3, r2
 801622a:	d003      	beq.n	8016234 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	22f2      	movs	r2, #242	@ 0xf2
 8016230:	4313      	orrs	r3, r2
 8016232:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8016234:	1cbb      	adds	r3, r7, #2
 8016236:	881b      	ldrh	r3, [r3, #0]
 8016238:	2202      	movs	r2, #2
 801623a:	4013      	ands	r3, r2
 801623c:	d003      	beq.n	8016246 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	22f4      	movs	r2, #244	@ 0xf4
 8016242:	4313      	orrs	r3, r2
 8016244:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016246:	1cbb      	adds	r3, r7, #2
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	2b10      	cmp	r3, #16
 801624c:	d103      	bne.n	8016256 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2290      	movs	r2, #144	@ 0x90
 8016252:	4313      	orrs	r3, r2
 8016254:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016256:	1cbb      	adds	r3, r7, #2
 8016258:	881b      	ldrh	r3, [r3, #0]
 801625a:	2b20      	cmp	r3, #32
 801625c:	d103      	bne.n	8016266 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2260      	movs	r2, #96	@ 0x60
 8016262:	4313      	orrs	r3, r2
 8016264:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801626a:	4b0d      	ldr	r3, [pc, #52]	@ (80162a0 <I2C_Enable_IRQ+0x118>)
 801626c:	429a      	cmp	r2, r3
 801626e:	d007      	beq.n	8016280 <I2C_Enable_IRQ+0xf8>
 8016270:	1cbb      	adds	r3, r7, #2
 8016272:	881b      	ldrh	r3, [r3, #0]
 8016274:	2b40      	cmp	r3, #64	@ 0x40
 8016276:	d103      	bne.n	8016280 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2240      	movs	r2, #64	@ 0x40
 801627c:	4313      	orrs	r3, r2
 801627e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	6819      	ldr	r1, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	68fa      	ldr	r2, [r7, #12]
 801628c:	430a      	orrs	r2, r1
 801628e:	601a      	str	r2, [r3, #0]
}
 8016290:	46c0      	nop			@ (mov r8, r8)
 8016292:	46bd      	mov	sp, r7
 8016294:	b004      	add	sp, #16
 8016296:	bd80      	pop	{r7, pc}
 8016298:	08014a45 	.word	0x08014a45
 801629c:	08014e75 	.word	0x08014e75
 80162a0:	08014c3d 	.word	0x08014c3d

080162a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b084      	sub	sp, #16
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
 80162ac:	000a      	movs	r2, r1
 80162ae:	1cbb      	adds	r3, r7, #2
 80162b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80162b2:	2300      	movs	r3, #0
 80162b4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80162b6:	1cbb      	adds	r3, r7, #2
 80162b8:	881b      	ldrh	r3, [r3, #0]
 80162ba:	2201      	movs	r2, #1
 80162bc:	4013      	ands	r3, r2
 80162be:	d010      	beq.n	80162e2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2242      	movs	r2, #66	@ 0x42
 80162c4:	4313      	orrs	r3, r2
 80162c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2241      	movs	r2, #65	@ 0x41
 80162cc:	5c9b      	ldrb	r3, [r3, r2]
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	001a      	movs	r2, r3
 80162d2:	2328      	movs	r3, #40	@ 0x28
 80162d4:	4013      	ands	r3, r2
 80162d6:	2b28      	cmp	r3, #40	@ 0x28
 80162d8:	d003      	beq.n	80162e2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	22b0      	movs	r2, #176	@ 0xb0
 80162de:	4313      	orrs	r3, r2
 80162e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80162e2:	1cbb      	adds	r3, r7, #2
 80162e4:	881b      	ldrh	r3, [r3, #0]
 80162e6:	2202      	movs	r2, #2
 80162e8:	4013      	ands	r3, r2
 80162ea:	d010      	beq.n	801630e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2244      	movs	r2, #68	@ 0x44
 80162f0:	4313      	orrs	r3, r2
 80162f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2241      	movs	r2, #65	@ 0x41
 80162f8:	5c9b      	ldrb	r3, [r3, r2]
 80162fa:	b2db      	uxtb	r3, r3
 80162fc:	001a      	movs	r2, r3
 80162fe:	2328      	movs	r3, #40	@ 0x28
 8016300:	4013      	ands	r3, r2
 8016302:	2b28      	cmp	r3, #40	@ 0x28
 8016304:	d003      	beq.n	801630e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	22b0      	movs	r2, #176	@ 0xb0
 801630a:	4313      	orrs	r3, r2
 801630c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801630e:	1cbb      	adds	r3, r7, #2
 8016310:	2200      	movs	r2, #0
 8016312:	5e9b      	ldrsh	r3, [r3, r2]
 8016314:	2b00      	cmp	r3, #0
 8016316:	da03      	bge.n	8016320 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	22b8      	movs	r2, #184	@ 0xb8
 801631c:	4313      	orrs	r3, r2
 801631e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016320:	1cbb      	adds	r3, r7, #2
 8016322:	881b      	ldrh	r3, [r3, #0]
 8016324:	2b10      	cmp	r3, #16
 8016326:	d103      	bne.n	8016330 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2290      	movs	r2, #144	@ 0x90
 801632c:	4313      	orrs	r3, r2
 801632e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016330:	1cbb      	adds	r3, r7, #2
 8016332:	881b      	ldrh	r3, [r3, #0]
 8016334:	2b20      	cmp	r3, #32
 8016336:	d103      	bne.n	8016340 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	2220      	movs	r2, #32
 801633c:	4313      	orrs	r3, r2
 801633e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8016340:	1cbb      	adds	r3, r7, #2
 8016342:	881b      	ldrh	r3, [r3, #0]
 8016344:	2b40      	cmp	r3, #64	@ 0x40
 8016346:	d103      	bne.n	8016350 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2240      	movs	r2, #64	@ 0x40
 801634c:	4313      	orrs	r3, r2
 801634e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	681a      	ldr	r2, [r3, #0]
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	43d9      	mvns	r1, r3
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	400a      	ands	r2, r1
 8016360:	601a      	str	r2, [r3, #0]
}
 8016362:	46c0      	nop			@ (mov r8, r8)
 8016364:	46bd      	mov	sp, r7
 8016366:	b004      	add	sp, #16
 8016368:	bd80      	pop	{r7, pc}
	...

0801636c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2241      	movs	r2, #65	@ 0x41
 801637a:	5c9b      	ldrb	r3, [r3, r2]
 801637c:	b2db      	uxtb	r3, r3
 801637e:	2b20      	cmp	r3, #32
 8016380:	d138      	bne.n	80163f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2240      	movs	r2, #64	@ 0x40
 8016386:	5c9b      	ldrb	r3, [r3, r2]
 8016388:	2b01      	cmp	r3, #1
 801638a:	d101      	bne.n	8016390 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801638c:	2302      	movs	r3, #2
 801638e:	e032      	b.n	80163f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2240      	movs	r2, #64	@ 0x40
 8016394:	2101      	movs	r1, #1
 8016396:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2241      	movs	r2, #65	@ 0x41
 801639c:	2124      	movs	r1, #36	@ 0x24
 801639e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	681a      	ldr	r2, [r3, #0]
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2101      	movs	r1, #1
 80163ac:	438a      	bics	r2, r1
 80163ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	681a      	ldr	r2, [r3, #0]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	4911      	ldr	r1, [pc, #68]	@ (8016400 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80163bc:	400a      	ands	r2, r1
 80163be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	6819      	ldr	r1, [r3, #0]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	683a      	ldr	r2, [r7, #0]
 80163cc:	430a      	orrs	r2, r1
 80163ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	681a      	ldr	r2, [r3, #0]
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	2101      	movs	r1, #1
 80163dc:	430a      	orrs	r2, r1
 80163de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2241      	movs	r2, #65	@ 0x41
 80163e4:	2120      	movs	r1, #32
 80163e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2240      	movs	r2, #64	@ 0x40
 80163ec:	2100      	movs	r1, #0
 80163ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80163f0:	2300      	movs	r3, #0
 80163f2:	e000      	b.n	80163f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80163f4:	2302      	movs	r3, #2
  }
}
 80163f6:	0018      	movs	r0, r3
 80163f8:	46bd      	mov	sp, r7
 80163fa:	b002      	add	sp, #8
 80163fc:	bd80      	pop	{r7, pc}
 80163fe:	46c0      	nop			@ (mov r8, r8)
 8016400:	ffffefff 	.word	0xffffefff

08016404 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b084      	sub	sp, #16
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2241      	movs	r2, #65	@ 0x41
 8016412:	5c9b      	ldrb	r3, [r3, r2]
 8016414:	b2db      	uxtb	r3, r3
 8016416:	2b20      	cmp	r3, #32
 8016418:	d139      	bne.n	801648e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	2240      	movs	r2, #64	@ 0x40
 801641e:	5c9b      	ldrb	r3, [r3, r2]
 8016420:	2b01      	cmp	r3, #1
 8016422:	d101      	bne.n	8016428 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016424:	2302      	movs	r3, #2
 8016426:	e033      	b.n	8016490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2240      	movs	r2, #64	@ 0x40
 801642c:	2101      	movs	r1, #1
 801642e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	2241      	movs	r2, #65	@ 0x41
 8016434:	2124      	movs	r1, #36	@ 0x24
 8016436:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	681a      	ldr	r2, [r3, #0]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	2101      	movs	r1, #1
 8016444:	438a      	bics	r2, r1
 8016446:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	4a11      	ldr	r2, [pc, #68]	@ (8016498 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8016454:	4013      	ands	r3, r2
 8016456:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	021b      	lsls	r3, r3, #8
 801645c:	68fa      	ldr	r2, [r7, #12]
 801645e:	4313      	orrs	r3, r2
 8016460:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	68fa      	ldr	r2, [r7, #12]
 8016468:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	2101      	movs	r1, #1
 8016476:	430a      	orrs	r2, r1
 8016478:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2241      	movs	r2, #65	@ 0x41
 801647e:	2120      	movs	r1, #32
 8016480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	2240      	movs	r2, #64	@ 0x40
 8016486:	2100      	movs	r1, #0
 8016488:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801648a:	2300      	movs	r3, #0
 801648c:	e000      	b.n	8016490 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801648e:	2302      	movs	r3, #2
  }
}
 8016490:	0018      	movs	r0, r3
 8016492:	46bd      	mov	sp, r7
 8016494:	b004      	add	sp, #16
 8016496:	bd80      	pop	{r7, pc}
 8016498:	fffff0ff 	.word	0xfffff0ff

0801649c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b088      	sub	sp, #32
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d101      	bne.n	80164ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80164aa:	2301      	movs	r3, #1
 80164ac:	e0e1      	b.n	8016672 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2235      	movs	r2, #53	@ 0x35
 80164b2:	5c9b      	ldrb	r3, [r3, r2]
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d107      	bne.n	80164ca <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2234      	movs	r2, #52	@ 0x34
 80164be:	2100      	movs	r1, #0
 80164c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	0018      	movs	r0, r3
 80164c6:	f7f4 facd 	bl	800aa64 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2235      	movs	r2, #53	@ 0x35
 80164ce:	2102      	movs	r1, #2
 80164d0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	69da      	ldr	r2, [r3, #28]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4967      	ldr	r1, [pc, #412]	@ (801667c <HAL_I2S_Init+0x1e0>)
 80164de:	400a      	ands	r2, r1
 80164e0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	2202      	movs	r2, #2
 80164e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	695b      	ldr	r3, [r3, #20]
 80164ee:	2b02      	cmp	r3, #2
 80164f0:	d073      	beq.n	80165da <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	68db      	ldr	r3, [r3, #12]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d102      	bne.n	8016500 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80164fa:	2310      	movs	r3, #16
 80164fc:	617b      	str	r3, [r7, #20]
 80164fe:	e001      	b.n	8016504 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8016500:	2320      	movs	r3, #32
 8016502:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	689b      	ldr	r3, [r3, #8]
 8016508:	2b20      	cmp	r3, #32
 801650a:	d802      	bhi.n	8016512 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8016512:	f002 fed3 	bl	80192bc <HAL_RCC_GetSysClockFreq>
 8016516:	0003      	movs	r3, r0
 8016518:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	691a      	ldr	r2, [r3, #16]
 801651e:	2380      	movs	r3, #128	@ 0x80
 8016520:	009b      	lsls	r3, r3, #2
 8016522:	429a      	cmp	r2, r3
 8016524:	d131      	bne.n	801658a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	68db      	ldr	r3, [r3, #12]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d016      	beq.n	801655c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	009b      	lsls	r3, r3, #2
 8016532:	0019      	movs	r1, r3
 8016534:	68f8      	ldr	r0, [r7, #12]
 8016536:	f7e9 fe35 	bl	80001a4 <__udivsi3>
 801653a:	0003      	movs	r3, r0
 801653c:	001a      	movs	r2, r3
 801653e:	0013      	movs	r3, r2
 8016540:	009b      	lsls	r3, r3, #2
 8016542:	189b      	adds	r3, r3, r2
 8016544:	005b      	lsls	r3, r3, #1
 8016546:	001a      	movs	r2, r3
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	695b      	ldr	r3, [r3, #20]
 801654c:	0019      	movs	r1, r3
 801654e:	0010      	movs	r0, r2
 8016550:	f7e9 fe28 	bl	80001a4 <__udivsi3>
 8016554:	0003      	movs	r3, r0
 8016556:	3305      	adds	r3, #5
 8016558:	613b      	str	r3, [r7, #16]
 801655a:	e02a      	b.n	80165b2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	00db      	lsls	r3, r3, #3
 8016560:	0019      	movs	r1, r3
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f7e9 fe1e 	bl	80001a4 <__udivsi3>
 8016568:	0003      	movs	r3, r0
 801656a:	001a      	movs	r2, r3
 801656c:	0013      	movs	r3, r2
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	189b      	adds	r3, r3, r2
 8016572:	005b      	lsls	r3, r3, #1
 8016574:	001a      	movs	r2, r3
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	695b      	ldr	r3, [r3, #20]
 801657a:	0019      	movs	r1, r3
 801657c:	0010      	movs	r0, r2
 801657e:	f7e9 fe11 	bl	80001a4 <__udivsi3>
 8016582:	0003      	movs	r3, r0
 8016584:	3305      	adds	r3, #5
 8016586:	613b      	str	r3, [r7, #16]
 8016588:	e013      	b.n	80165b2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801658a:	6979      	ldr	r1, [r7, #20]
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	f7e9 fe09 	bl	80001a4 <__udivsi3>
 8016592:	0003      	movs	r3, r0
 8016594:	001a      	movs	r2, r3
 8016596:	0013      	movs	r3, r2
 8016598:	009b      	lsls	r3, r3, #2
 801659a:	189b      	adds	r3, r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	001a      	movs	r2, r3
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	695b      	ldr	r3, [r3, #20]
 80165a4:	0019      	movs	r1, r3
 80165a6:	0010      	movs	r0, r2
 80165a8:	f7e9 fdfc 	bl	80001a4 <__udivsi3>
 80165ac:	0003      	movs	r3, r0
 80165ae:	3305      	adds	r3, #5
 80165b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	210a      	movs	r1, #10
 80165b6:	0018      	movs	r0, r3
 80165b8:	f7e9 fdf4 	bl	80001a4 <__udivsi3>
 80165bc:	0003      	movs	r3, r0
 80165be:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80165c0:	693b      	ldr	r3, [r7, #16]
 80165c2:	2201      	movs	r2, #1
 80165c4:	4013      	ands	r3, r2
 80165c6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80165c8:	693a      	ldr	r2, [r7, #16]
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	1ad3      	subs	r3, r2, r3
 80165ce:	085b      	lsrs	r3, r3, #1
 80165d0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	021b      	lsls	r3, r3, #8
 80165d6:	61bb      	str	r3, [r7, #24]
 80165d8:	e003      	b.n	80165e2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80165da:	2302      	movs	r3, #2
 80165dc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80165de:	2300      	movs	r3, #0
 80165e0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80165e2:	69fb      	ldr	r3, [r7, #28]
 80165e4:	2b01      	cmp	r3, #1
 80165e6:	d902      	bls.n	80165ee <HAL_I2S_Init+0x152>
 80165e8:	69fb      	ldr	r3, [r7, #28]
 80165ea:	2bff      	cmp	r3, #255	@ 0xff
 80165ec:	d907      	bls.n	80165fe <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165f2:	2210      	movs	r2, #16
 80165f4:	431a      	orrs	r2, r3
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80165fa:	2301      	movs	r3, #1
 80165fc:	e039      	b.n	8016672 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	691a      	ldr	r2, [r3, #16]
 8016602:	69bb      	ldr	r3, [r7, #24]
 8016604:	431a      	orrs	r2, r3
 8016606:	0011      	movs	r1, r2
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	69fa      	ldr	r2, [r7, #28]
 801660e:	430a      	orrs	r2, r1
 8016610:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	69db      	ldr	r3, [r3, #28]
 8016618:	4a18      	ldr	r2, [pc, #96]	@ (801667c <HAL_I2S_Init+0x1e0>)
 801661a:	401a      	ands	r2, r3
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	6859      	ldr	r1, [r3, #4]
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	689b      	ldr	r3, [r3, #8]
 8016624:	4319      	orrs	r1, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	68db      	ldr	r3, [r3, #12]
 801662a:	4319      	orrs	r1, r3
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	699b      	ldr	r3, [r3, #24]
 8016630:	430b      	orrs	r3, r1
 8016632:	431a      	orrs	r2, r3
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2180      	movs	r1, #128	@ 0x80
 801663a:	0109      	lsls	r1, r1, #4
 801663c:	430a      	orrs	r2, r1
 801663e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	689b      	ldr	r3, [r3, #8]
 8016644:	2b30      	cmp	r3, #48	@ 0x30
 8016646:	d003      	beq.n	8016650 <HAL_I2S_Init+0x1b4>
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	689b      	ldr	r3, [r3, #8]
 801664c:	2bb0      	cmp	r3, #176	@ 0xb0
 801664e:	d108      	bne.n	8016662 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	69da      	ldr	r2, [r3, #28]
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2180      	movs	r1, #128	@ 0x80
 801665c:	0149      	lsls	r1, r1, #5
 801665e:	430a      	orrs	r2, r1
 8016660:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2200      	movs	r2, #0
 8016666:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2235      	movs	r2, #53	@ 0x35
 801666c:	2101      	movs	r1, #1
 801666e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016670:	2300      	movs	r3, #0
}
 8016672:	0018      	movs	r0, r3
 8016674:	46bd      	mov	sp, r7
 8016676:	b008      	add	sp, #32
 8016678:	bd80      	pop	{r7, pc}
 801667a:	46c0      	nop			@ (mov r8, r8)
 801667c:	fffff040 	.word	0xfffff040

08016680 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b086      	sub	sp, #24
 8016684:	af00      	add	r7, sp, #0
 8016686:	60f8      	str	r0, [r7, #12]
 8016688:	60b9      	str	r1, [r7, #8]
 801668a:	1dbb      	adds	r3, r7, #6
 801668c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801668e:	68bb      	ldr	r3, [r7, #8]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d003      	beq.n	801669c <HAL_I2S_Receive_DMA+0x1c>
 8016694:	1dbb      	adds	r3, r7, #6
 8016696:	881b      	ldrh	r3, [r3, #0]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d101      	bne.n	80166a0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801669c:	2301      	movs	r3, #1
 801669e:	e0a6      	b.n	80167ee <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2234      	movs	r2, #52	@ 0x34
 80166a4:	5c9b      	ldrb	r3, [r3, r2]
 80166a6:	b2db      	uxtb	r3, r3
 80166a8:	2b01      	cmp	r3, #1
 80166aa:	d101      	bne.n	80166b0 <HAL_I2S_Receive_DMA+0x30>
 80166ac:	2302      	movs	r3, #2
 80166ae:	e09e      	b.n	80167ee <HAL_I2S_Receive_DMA+0x16e>
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	2234      	movs	r2, #52	@ 0x34
 80166b4:	2101      	movs	r1, #1
 80166b6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	2235      	movs	r2, #53	@ 0x35
 80166bc:	5c9b      	ldrb	r3, [r3, r2]
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d005      	beq.n	80166d0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	2234      	movs	r2, #52	@ 0x34
 80166c8:	2100      	movs	r1, #0
 80166ca:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80166cc:	2302      	movs	r3, #2
 80166ce:	e08e      	b.n	80167ee <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2235      	movs	r2, #53	@ 0x35
 80166d4:	2104      	movs	r1, #4
 80166d6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	2200      	movs	r2, #0
 80166dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	68ba      	ldr	r2, [r7, #8]
 80166e2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	69db      	ldr	r3, [r3, #28]
 80166ea:	2207      	movs	r2, #7
 80166ec:	4013      	ands	r3, r2
 80166ee:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80166f0:	697b      	ldr	r3, [r7, #20]
 80166f2:	2b03      	cmp	r3, #3
 80166f4:	d002      	beq.n	80166fc <HAL_I2S_Receive_DMA+0x7c>
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	2b05      	cmp	r3, #5
 80166fa:	d10c      	bne.n	8016716 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80166fc:	1dbb      	adds	r3, r7, #6
 80166fe:	881b      	ldrh	r3, [r3, #0]
 8016700:	18db      	adds	r3, r3, r3
 8016702:	b29a      	uxth	r2, r3
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8016708:	1dbb      	adds	r3, r7, #6
 801670a:	881b      	ldrh	r3, [r3, #0]
 801670c:	18db      	adds	r3, r3, r3
 801670e:	b29a      	uxth	r2, r3
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016714:	e007      	b.n	8016726 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	1dba      	adds	r2, r7, #6
 801671a:	8812      	ldrh	r2, [r2, #0]
 801671c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	1dba      	adds	r2, r7, #6
 8016722:	8812      	ldrh	r2, [r2, #0]
 8016724:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801672a:	4a33      	ldr	r2, [pc, #204]	@ (80167f8 <HAL_I2S_Receive_DMA+0x178>)
 801672c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016732:	4a32      	ldr	r2, [pc, #200]	@ (80167fc <HAL_I2S_Receive_DMA+0x17c>)
 8016734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801673a:	4a31      	ldr	r2, [pc, #196]	@ (8016800 <HAL_I2S_Receive_DMA+0x180>)
 801673c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	69da      	ldr	r2, [r3, #28]
 8016744:	23c0      	movs	r3, #192	@ 0xc0
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	401a      	ands	r2, r3
 801674a:	23c0      	movs	r3, #192	@ 0xc0
 801674c:	009b      	lsls	r3, r3, #2
 801674e:	429a      	cmp	r2, r3
 8016750:	d10a      	bne.n	8016768 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8016752:	2300      	movs	r3, #0
 8016754:	613b      	str	r3, [r7, #16]
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	613b      	str	r3, [r7, #16]
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	689b      	ldr	r3, [r3, #8]
 8016764:	613b      	str	r3, [r7, #16]
 8016766:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	330c      	adds	r3, #12
 8016772:	0019      	movs	r1, r3
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016778:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801677e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8016780:	f7fc fa0a 	bl	8012b98 <HAL_DMA_Start_IT>
 8016784:	1e03      	subs	r3, r0, #0
 8016786:	d00f      	beq.n	80167a8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801678c:	2208      	movs	r2, #8
 801678e:	431a      	orrs	r2, r3
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	2235      	movs	r2, #53	@ 0x35
 8016798:	2101      	movs	r1, #1
 801679a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	2234      	movs	r2, #52	@ 0x34
 80167a0:	2100      	movs	r1, #0
 80167a2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80167a4:	2301      	movs	r3, #1
 80167a6:	e022      	b.n	80167ee <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	69da      	ldr	r2, [r3, #28]
 80167ae:	2380      	movs	r3, #128	@ 0x80
 80167b0:	00db      	lsls	r3, r3, #3
 80167b2:	4013      	ands	r3, r2
 80167b4:	d108      	bne.n	80167c8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	69da      	ldr	r2, [r3, #28]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	2180      	movs	r1, #128	@ 0x80
 80167c2:	00c9      	lsls	r1, r1, #3
 80167c4:	430a      	orrs	r2, r1
 80167c6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	2201      	movs	r2, #1
 80167d0:	4013      	ands	r3, r2
 80167d2:	d107      	bne.n	80167e4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	685a      	ldr	r2, [r3, #4]
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2101      	movs	r1, #1
 80167e0:	430a      	orrs	r2, r1
 80167e2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	2234      	movs	r2, #52	@ 0x34
 80167e8:	2100      	movs	r1, #0
 80167ea:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80167ec:	2300      	movs	r3, #0
}
 80167ee:	0018      	movs	r0, r3
 80167f0:	46bd      	mov	sp, r7
 80167f2:	b006      	add	sp, #24
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	46c0      	nop			@ (mov r8, r8)
 80167f8:	080169e1 	.word	0x080169e1
 80167fc:	0801699d 	.word	0x0801699d
 8016800:	080169ff 	.word	0x080169ff

08016804 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b086      	sub	sp, #24
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801680c:	2317      	movs	r3, #23
 801680e:	18fb      	adds	r3, r7, r3
 8016810:	2200      	movs	r2, #0
 8016812:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	685a      	ldr	r2, [r3, #4]
 8016818:	2380      	movs	r3, #128	@ 0x80
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	429a      	cmp	r2, r3
 801681e:	d003      	beq.n	8016828 <HAL_I2S_DMAStop+0x24>
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d158      	bne.n	80168da <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801682c:	2b00      	cmp	r3, #0
 801682e:	d010      	beq.n	8016852 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016834:	0018      	movs	r0, r3
 8016836:	f7fc fa15 	bl	8012c64 <HAL_DMA_Abort>
 801683a:	1e03      	subs	r3, r0, #0
 801683c:	d009      	beq.n	8016852 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016842:	2208      	movs	r2, #8
 8016844:	431a      	orrs	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801684a:	2317      	movs	r3, #23
 801684c:	18fb      	adds	r3, r7, r3
 801684e:	2201      	movs	r2, #1
 8016850:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	2364      	movs	r3, #100	@ 0x64
 8016856:	2201      	movs	r2, #1
 8016858:	2102      	movs	r1, #2
 801685a:	f000 f8f7 	bl	8016a4c <I2S_WaitFlagStateUntilTimeout>
 801685e:	1e03      	subs	r3, r0, #0
 8016860:	d00d      	beq.n	801687e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016866:	2201      	movs	r2, #1
 8016868:	431a      	orrs	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2235      	movs	r2, #53	@ 0x35
 8016872:	2101      	movs	r1, #1
 8016874:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8016876:	2317      	movs	r3, #23
 8016878:	18fb      	adds	r3, r7, r3
 801687a:	2201      	movs	r2, #1
 801687c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	2364      	movs	r3, #100	@ 0x64
 8016882:	2200      	movs	r2, #0
 8016884:	2180      	movs	r1, #128	@ 0x80
 8016886:	f000 f8e1 	bl	8016a4c <I2S_WaitFlagStateUntilTimeout>
 801688a:	1e03      	subs	r3, r0, #0
 801688c:	d00d      	beq.n	80168aa <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016892:	2201      	movs	r2, #1
 8016894:	431a      	orrs	r2, r3
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2235      	movs	r2, #53	@ 0x35
 801689e:	2101      	movs	r1, #1
 80168a0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80168a2:	2317      	movs	r3, #23
 80168a4:	18fb      	adds	r3, r7, r3
 80168a6:	2201      	movs	r2, #1
 80168a8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	69da      	ldr	r2, [r3, #28]
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	4938      	ldr	r1, [pc, #224]	@ (8016998 <HAL_I2S_DMAStop+0x194>)
 80168b6:	400a      	ands	r2, r1
 80168b8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80168ba:	2300      	movs	r3, #0
 80168bc:	613b      	str	r3, [r7, #16]
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	689b      	ldr	r3, [r3, #8]
 80168c4:	613b      	str	r3, [r7, #16]
 80168c6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	685a      	ldr	r2, [r3, #4]
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2102      	movs	r1, #2
 80168d4:	438a      	bics	r2, r1
 80168d6:	605a      	str	r2, [r3, #4]
 80168d8:	e053      	b.n	8016982 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	685a      	ldr	r2, [r3, #4]
 80168de:	23c0      	movs	r3, #192	@ 0xc0
 80168e0:	009b      	lsls	r3, r3, #2
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d005      	beq.n	80168f2 <HAL_I2S_DMAStop+0xee>
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	685a      	ldr	r2, [r3, #4]
 80168ea:	2380      	movs	r3, #128	@ 0x80
 80168ec:	005b      	lsls	r3, r3, #1
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d147      	bne.n	8016982 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d010      	beq.n	801691c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168fe:	0018      	movs	r0, r3
 8016900:	f7fc f9b0 	bl	8012c64 <HAL_DMA_Abort>
 8016904:	1e03      	subs	r3, r0, #0
 8016906:	d009      	beq.n	801691c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801690c:	2208      	movs	r2, #8
 801690e:	431a      	orrs	r2, r3
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8016914:	2317      	movs	r3, #23
 8016916:	18fb      	adds	r3, r7, r3
 8016918:	2201      	movs	r2, #1
 801691a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	69da      	ldr	r2, [r3, #28]
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	491c      	ldr	r1, [pc, #112]	@ (8016998 <HAL_I2S_DMAStop+0x194>)
 8016928:	400a      	ands	r2, r1
 801692a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801692c:	2300      	movs	r3, #0
 801692e:	60fb      	str	r3, [r7, #12]
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	68db      	ldr	r3, [r3, #12]
 8016936:	60fb      	str	r3, [r7, #12]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	689b      	ldr	r3, [r3, #8]
 801693e:	60fb      	str	r3, [r7, #12]
 8016940:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	685a      	ldr	r2, [r3, #4]
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2101      	movs	r1, #1
 801694e:	438a      	bics	r2, r1
 8016950:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	685a      	ldr	r2, [r3, #4]
 8016956:	2380      	movs	r3, #128	@ 0x80
 8016958:	005b      	lsls	r3, r3, #1
 801695a:	429a      	cmp	r2, r3
 801695c:	d10e      	bne.n	801697c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016962:	2240      	movs	r2, #64	@ 0x40
 8016964:	431a      	orrs	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2235      	movs	r2, #53	@ 0x35
 801696e:	2101      	movs	r1, #1
 8016970:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8016972:	2317      	movs	r3, #23
 8016974:	18fb      	adds	r3, r7, r3
 8016976:	2201      	movs	r2, #1
 8016978:	701a      	strb	r2, [r3, #0]
 801697a:	e002      	b.n	8016982 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2235      	movs	r2, #53	@ 0x35
 8016986:	2101      	movs	r1, #1
 8016988:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801698a:	2317      	movs	r3, #23
 801698c:	18fb      	adds	r3, r7, r3
 801698e:	781b      	ldrb	r3, [r3, #0]
}
 8016990:	0018      	movs	r0, r3
 8016992:	46bd      	mov	sp, r7
 8016994:	b006      	add	sp, #24
 8016996:	bd80      	pop	{r7, pc}
 8016998:	fffffbff 	.word	0xfffffbff

0801699c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b084      	sub	sp, #16
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169a8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	69db      	ldr	r3, [r3, #28]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d10e      	bne.n	80169d0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	685a      	ldr	r2, [r3, #4]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	2101      	movs	r1, #1
 80169be:	438a      	bics	r2, r1
 80169c0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	2200      	movs	r2, #0
 80169c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	2235      	movs	r2, #53	@ 0x35
 80169cc:	2101      	movs	r1, #1
 80169ce:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	0018      	movs	r0, r3
 80169d4:	f7f8 fea8 	bl	800f728 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80169d8:	46c0      	nop			@ (mov r8, r8)
 80169da:	46bd      	mov	sp, r7
 80169dc:	b004      	add	sp, #16
 80169de:	bd80      	pop	{r7, pc}

080169e0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80169e0:	b580      	push	{r7, lr}
 80169e2:	b084      	sub	sp, #16
 80169e4:	af00      	add	r7, sp, #0
 80169e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169ec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	0018      	movs	r0, r3
 80169f2:	f7f8 fe87 	bl	800f704 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80169f6:	46c0      	nop			@ (mov r8, r8)
 80169f8:	46bd      	mov	sp, r7
 80169fa:	b004      	add	sp, #16
 80169fc:	bd80      	pop	{r7, pc}

080169fe <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b084      	sub	sp, #16
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a0a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	685a      	ldr	r2, [r3, #4]
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2103      	movs	r1, #3
 8016a18:	438a      	bics	r2, r1
 8016a1a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	2200      	movs	r2, #0
 8016a26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2235      	movs	r2, #53	@ 0x35
 8016a2c:	2101      	movs	r1, #1
 8016a2e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a34:	2208      	movs	r2, #8
 8016a36:	431a      	orrs	r2, r3
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	0018      	movs	r0, r3
 8016a40:	f7f8 fec0 	bl	800f7c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8016a44:	46c0      	nop			@ (mov r8, r8)
 8016a46:	46bd      	mov	sp, r7
 8016a48:	b004      	add	sp, #16
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b086      	sub	sp, #24
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	603b      	str	r3, [r7, #0]
 8016a58:	1dfb      	adds	r3, r7, #7
 8016a5a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8016a5c:	f7fb fb4a 	bl	80120f4 <HAL_GetTick>
 8016a60:	0003      	movs	r3, r0
 8016a62:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8016a64:	e017      	b.n	8016a96 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	d014      	beq.n	8016a96 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8016a6c:	f7fb fb42 	bl	80120f4 <HAL_GetTick>
 8016a70:	0002      	movs	r2, r0
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	1ad3      	subs	r3, r2, r3
 8016a76:	683a      	ldr	r2, [r7, #0]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d902      	bls.n	8016a82 <I2S_WaitFlagStateUntilTimeout+0x36>
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d109      	bne.n	8016a96 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	2235      	movs	r2, #53	@ 0x35
 8016a86:	2101      	movs	r1, #1
 8016a88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	2234      	movs	r2, #52	@ 0x34
 8016a8e:	2100      	movs	r1, #0
 8016a90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016a92:	2303      	movs	r3, #3
 8016a94:	e00f      	b.n	8016ab6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	689b      	ldr	r3, [r3, #8]
 8016a9c:	68ba      	ldr	r2, [r7, #8]
 8016a9e:	4013      	ands	r3, r2
 8016aa0:	68ba      	ldr	r2, [r7, #8]
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	425a      	negs	r2, r3
 8016aa6:	4153      	adcs	r3, r2
 8016aa8:	b2db      	uxtb	r3, r3
 8016aaa:	001a      	movs	r2, r3
 8016aac:	1dfb      	adds	r3, r7, #7
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d1d8      	bne.n	8016a66 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8016ab4:	2300      	movs	r3, #0
}
 8016ab6:	0018      	movs	r0, r3
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	b006      	add	sp, #24
 8016abc:	bd80      	pop	{r7, pc}
	...

08016ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ac2:	b08b      	sub	sp, #44	@ 0x2c
 8016ac4:	af06      	add	r7, sp, #24
 8016ac6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d101      	bne.n	8016ad2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	e0f0      	b.n	8016cb4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	4a79      	ldr	r2, [pc, #484]	@ (8016cbc <HAL_PCD_Init+0x1fc>)
 8016ad6:	5c9b      	ldrb	r3, [r3, r2]
 8016ad8:	b2db      	uxtb	r3, r3
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d108      	bne.n	8016af0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016ade:	687a      	ldr	r2, [r7, #4]
 8016ae0:	23aa      	movs	r3, #170	@ 0xaa
 8016ae2:	009b      	lsls	r3, r3, #2
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	0018      	movs	r0, r3
 8016aec:	f009 ff4a 	bl	8020984 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	4a72      	ldr	r2, [pc, #456]	@ (8016cbc <HAL_PCD_Init+0x1fc>)
 8016af4:	2103      	movs	r1, #3
 8016af6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	0018      	movs	r0, r3
 8016afe:	f005 fefd 	bl	801c8fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b02:	230f      	movs	r3, #15
 8016b04:	18fb      	adds	r3, r7, r3
 8016b06:	2200      	movs	r2, #0
 8016b08:	701a      	strb	r2, [r3, #0]
 8016b0a:	e049      	b.n	8016ba0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016b0c:	200f      	movs	r0, #15
 8016b0e:	183b      	adds	r3, r7, r0
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	6879      	ldr	r1, [r7, #4]
 8016b14:	1c5a      	adds	r2, r3, #1
 8016b16:	0013      	movs	r3, r2
 8016b18:	009b      	lsls	r3, r3, #2
 8016b1a:	189b      	adds	r3, r3, r2
 8016b1c:	00db      	lsls	r3, r3, #3
 8016b1e:	18cb      	adds	r3, r1, r3
 8016b20:	3301      	adds	r3, #1
 8016b22:	2201      	movs	r2, #1
 8016b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016b26:	183b      	adds	r3, r7, r0
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	6879      	ldr	r1, [r7, #4]
 8016b2c:	1c5a      	adds	r2, r3, #1
 8016b2e:	0013      	movs	r3, r2
 8016b30:	009b      	lsls	r3, r3, #2
 8016b32:	189b      	adds	r3, r3, r2
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	183a      	adds	r2, r7, r0
 8016b38:	7812      	ldrb	r2, [r2, #0]
 8016b3a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016b3c:	183b      	adds	r3, r7, r0
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	6879      	ldr	r1, [r7, #4]
 8016b42:	1c5a      	adds	r2, r3, #1
 8016b44:	0013      	movs	r3, r2
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	189b      	adds	r3, r3, r2
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	18cb      	adds	r3, r1, r3
 8016b4e:	3303      	adds	r3, #3
 8016b50:	2200      	movs	r2, #0
 8016b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016b54:	183b      	adds	r3, r7, r0
 8016b56:	781a      	ldrb	r2, [r3, #0]
 8016b58:	6879      	ldr	r1, [r7, #4]
 8016b5a:	0013      	movs	r3, r2
 8016b5c:	009b      	lsls	r3, r3, #2
 8016b5e:	189b      	adds	r3, r3, r2
 8016b60:	00db      	lsls	r3, r3, #3
 8016b62:	18cb      	adds	r3, r1, r3
 8016b64:	3338      	adds	r3, #56	@ 0x38
 8016b66:	2200      	movs	r2, #0
 8016b68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016b6a:	183b      	adds	r3, r7, r0
 8016b6c:	781a      	ldrb	r2, [r3, #0]
 8016b6e:	6879      	ldr	r1, [r7, #4]
 8016b70:	0013      	movs	r3, r2
 8016b72:	009b      	lsls	r3, r3, #2
 8016b74:	189b      	adds	r3, r3, r2
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	18cb      	adds	r3, r1, r3
 8016b7a:	333c      	adds	r3, #60	@ 0x3c
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016b80:	183b      	adds	r3, r7, r0
 8016b82:	781a      	ldrb	r2, [r3, #0]
 8016b84:	6879      	ldr	r1, [r7, #4]
 8016b86:	0013      	movs	r3, r2
 8016b88:	009b      	lsls	r3, r3, #2
 8016b8a:	189b      	adds	r3, r3, r2
 8016b8c:	00db      	lsls	r3, r3, #3
 8016b8e:	18cb      	adds	r3, r1, r3
 8016b90:	3340      	adds	r3, #64	@ 0x40
 8016b92:	2200      	movs	r2, #0
 8016b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b96:	183b      	adds	r3, r7, r0
 8016b98:	781a      	ldrb	r2, [r3, #0]
 8016b9a:	183b      	adds	r3, r7, r0
 8016b9c:	3201      	adds	r2, #1
 8016b9e:	701a      	strb	r2, [r3, #0]
 8016ba0:	210f      	movs	r1, #15
 8016ba2:	187b      	adds	r3, r7, r1
 8016ba4:	781a      	ldrb	r2, [r3, #0]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	429a      	cmp	r2, r3
 8016bac:	d3ae      	bcc.n	8016b0c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016bae:	187b      	adds	r3, r7, r1
 8016bb0:	2200      	movs	r2, #0
 8016bb2:	701a      	strb	r2, [r3, #0]
 8016bb4:	e056      	b.n	8016c64 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016bb6:	240f      	movs	r4, #15
 8016bb8:	193b      	adds	r3, r7, r4
 8016bba:	781a      	ldrb	r2, [r3, #0]
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	236a      	movs	r3, #106	@ 0x6a
 8016bc0:	33ff      	adds	r3, #255	@ 0xff
 8016bc2:	0019      	movs	r1, r3
 8016bc4:	0013      	movs	r3, r2
 8016bc6:	009b      	lsls	r3, r3, #2
 8016bc8:	189b      	adds	r3, r3, r2
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	18c3      	adds	r3, r0, r3
 8016bce:	185b      	adds	r3, r3, r1
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016bd4:	193b      	adds	r3, r7, r4
 8016bd6:	781a      	ldrb	r2, [r3, #0]
 8016bd8:	6878      	ldr	r0, [r7, #4]
 8016bda:	23b4      	movs	r3, #180	@ 0xb4
 8016bdc:	0059      	lsls	r1, r3, #1
 8016bde:	0013      	movs	r3, r2
 8016be0:	009b      	lsls	r3, r3, #2
 8016be2:	189b      	adds	r3, r3, r2
 8016be4:	00db      	lsls	r3, r3, #3
 8016be6:	18c3      	adds	r3, r0, r3
 8016be8:	185b      	adds	r3, r3, r1
 8016bea:	193a      	adds	r2, r7, r4
 8016bec:	7812      	ldrb	r2, [r2, #0]
 8016bee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016bf0:	193b      	adds	r3, r7, r4
 8016bf2:	781a      	ldrb	r2, [r3, #0]
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	236c      	movs	r3, #108	@ 0x6c
 8016bf8:	33ff      	adds	r3, #255	@ 0xff
 8016bfa:	0019      	movs	r1, r3
 8016bfc:	0013      	movs	r3, r2
 8016bfe:	009b      	lsls	r3, r3, #2
 8016c00:	189b      	adds	r3, r3, r2
 8016c02:	00db      	lsls	r3, r3, #3
 8016c04:	18c3      	adds	r3, r0, r3
 8016c06:	185b      	adds	r3, r3, r1
 8016c08:	2200      	movs	r2, #0
 8016c0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016c0c:	193b      	adds	r3, r7, r4
 8016c0e:	781a      	ldrb	r2, [r3, #0]
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	23bc      	movs	r3, #188	@ 0xbc
 8016c14:	0059      	lsls	r1, r3, #1
 8016c16:	0013      	movs	r3, r2
 8016c18:	009b      	lsls	r3, r3, #2
 8016c1a:	189b      	adds	r3, r3, r2
 8016c1c:	00db      	lsls	r3, r3, #3
 8016c1e:	18c3      	adds	r3, r0, r3
 8016c20:	185b      	adds	r3, r3, r1
 8016c22:	2200      	movs	r2, #0
 8016c24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016c26:	193b      	adds	r3, r7, r4
 8016c28:	781a      	ldrb	r2, [r3, #0]
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	23be      	movs	r3, #190	@ 0xbe
 8016c2e:	0059      	lsls	r1, r3, #1
 8016c30:	0013      	movs	r3, r2
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	189b      	adds	r3, r3, r2
 8016c36:	00db      	lsls	r3, r3, #3
 8016c38:	18c3      	adds	r3, r0, r3
 8016c3a:	185b      	adds	r3, r3, r1
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016c40:	193b      	adds	r3, r7, r4
 8016c42:	781a      	ldrb	r2, [r3, #0]
 8016c44:	6878      	ldr	r0, [r7, #4]
 8016c46:	23c0      	movs	r3, #192	@ 0xc0
 8016c48:	0059      	lsls	r1, r3, #1
 8016c4a:	0013      	movs	r3, r2
 8016c4c:	009b      	lsls	r3, r3, #2
 8016c4e:	189b      	adds	r3, r3, r2
 8016c50:	00db      	lsls	r3, r3, #3
 8016c52:	18c3      	adds	r3, r0, r3
 8016c54:	185b      	adds	r3, r3, r1
 8016c56:	2200      	movs	r2, #0
 8016c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016c5a:	193b      	adds	r3, r7, r4
 8016c5c:	781a      	ldrb	r2, [r3, #0]
 8016c5e:	193b      	adds	r3, r7, r4
 8016c60:	3201      	adds	r2, #1
 8016c62:	701a      	strb	r2, [r3, #0]
 8016c64:	230f      	movs	r3, #15
 8016c66:	18fb      	adds	r3, r7, r3
 8016c68:	781a      	ldrb	r2, [r3, #0]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	685b      	ldr	r3, [r3, #4]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d3a1      	bcc.n	8016bb6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6818      	ldr	r0, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	466a      	mov	r2, sp
 8016c7a:	0011      	movs	r1, r2
 8016c7c:	001a      	movs	r2, r3
 8016c7e:	3210      	adds	r2, #16
 8016c80:	ca70      	ldmia	r2!, {r4, r5, r6}
 8016c82:	c170      	stmia	r1!, {r4, r5, r6}
 8016c84:	ca30      	ldmia	r2!, {r4, r5}
 8016c86:	c130      	stmia	r1!, {r4, r5}
 8016c88:	6859      	ldr	r1, [r3, #4]
 8016c8a:	689a      	ldr	r2, [r3, #8]
 8016c8c:	68db      	ldr	r3, [r3, #12]
 8016c8e:	f005 fe4f 	bl	801c930 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2224      	movs	r2, #36	@ 0x24
 8016c96:	2100      	movs	r1, #0
 8016c98:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	4a07      	ldr	r2, [pc, #28]	@ (8016cbc <HAL_PCD_Init+0x1fc>)
 8016c9e:	2101      	movs	r1, #1
 8016ca0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	69db      	ldr	r3, [r3, #28]
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	d103      	bne.n	8016cb2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	0018      	movs	r0, r3
 8016cae:	f001 fd23 	bl	80186f8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016cb2:	2300      	movs	r3, #0
}
 8016cb4:	0018      	movs	r0, r3
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	b005      	add	sp, #20
 8016cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cbc:	000002a9 	.word	0x000002a9

08016cc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8016cc8:	687a      	ldr	r2, [r7, #4]
 8016cca:	23aa      	movs	r3, #170	@ 0xaa
 8016ccc:	009b      	lsls	r3, r3, #2
 8016cce:	5cd3      	ldrb	r3, [r2, r3]
 8016cd0:	2b01      	cmp	r3, #1
 8016cd2:	d101      	bne.n	8016cd8 <HAL_PCD_Start+0x18>
 8016cd4:	2302      	movs	r3, #2
 8016cd6:	e014      	b.n	8016d02 <HAL_PCD_Start+0x42>
 8016cd8:	687a      	ldr	r2, [r7, #4]
 8016cda:	23aa      	movs	r3, #170	@ 0xaa
 8016cdc:	009b      	lsls	r3, r3, #2
 8016cde:	2101      	movs	r1, #1
 8016ce0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	0018      	movs	r0, r3
 8016ce8:	f005 fdf2 	bl	801c8d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	0018      	movs	r0, r3
 8016cf2:	f007 fdf5 	bl	801e8e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8016cf6:	687a      	ldr	r2, [r7, #4]
 8016cf8:	23aa      	movs	r3, #170	@ 0xaa
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016d00:	2300      	movs	r3, #0
}
 8016d02:	0018      	movs	r0, r3
 8016d04:	46bd      	mov	sp, r7
 8016d06:	b002      	add	sp, #8
 8016d08:	bd80      	pop	{r7, pc}
	...

08016d0c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	0018      	movs	r0, r3
 8016d1a:	f007 fdf7 	bl	801e90c <USB_ReadInterrupts>
 8016d1e:	0003      	movs	r3, r0
 8016d20:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8016d22:	68fa      	ldr	r2, [r7, #12]
 8016d24:	2380      	movs	r3, #128	@ 0x80
 8016d26:	021b      	lsls	r3, r3, #8
 8016d28:	4013      	ands	r3, r2
 8016d2a:	d004      	beq.n	8016d36 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	0018      	movs	r0, r3
 8016d30:	f000 fb62 	bl	80173f8 <PCD_EP_ISR_Handler>

    return;
 8016d34:	e11d      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8016d36:	68fa      	ldr	r2, [r7, #12]
 8016d38:	2380      	movs	r3, #128	@ 0x80
 8016d3a:	00db      	lsls	r3, r3, #3
 8016d3c:	4013      	ands	r3, r2
 8016d3e:	d015      	beq.n	8016d6c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	2244      	movs	r2, #68	@ 0x44
 8016d46:	5a9b      	ldrh	r3, [r3, r2]
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	498a      	ldr	r1, [pc, #552]	@ (8016f78 <HAL_PCD_IRQHandler+0x26c>)
 8016d50:	400a      	ands	r2, r1
 8016d52:	b291      	uxth	r1, r2
 8016d54:	2244      	movs	r2, #68	@ 0x44
 8016d56:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	0018      	movs	r0, r3
 8016d5c:	f009 fe95 	bl	8020a8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2100      	movs	r1, #0
 8016d64:	0018      	movs	r0, r3
 8016d66:	f000 f915 	bl	8016f94 <HAL_PCD_SetAddress>

    return;
 8016d6a:	e102      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8016d6c:	68fa      	ldr	r2, [r7, #12]
 8016d6e:	2380      	movs	r3, #128	@ 0x80
 8016d70:	01db      	lsls	r3, r3, #7
 8016d72:	4013      	ands	r3, r2
 8016d74:	d00c      	beq.n	8016d90 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2244      	movs	r2, #68	@ 0x44
 8016d7c:	5a9b      	ldrh	r3, [r3, r2]
 8016d7e:	b29a      	uxth	r2, r3
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	497d      	ldr	r1, [pc, #500]	@ (8016f7c <HAL_PCD_IRQHandler+0x270>)
 8016d86:	400a      	ands	r2, r1
 8016d88:	b291      	uxth	r1, r2
 8016d8a:	2244      	movs	r2, #68	@ 0x44
 8016d8c:	5299      	strh	r1, [r3, r2]

    return;
 8016d8e:	e0f0      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8016d90:	68fa      	ldr	r2, [r7, #12]
 8016d92:	2380      	movs	r3, #128	@ 0x80
 8016d94:	019b      	lsls	r3, r3, #6
 8016d96:	4013      	ands	r3, r2
 8016d98:	d00c      	beq.n	8016db4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2244      	movs	r2, #68	@ 0x44
 8016da0:	5a9b      	ldrh	r3, [r3, r2]
 8016da2:	b29a      	uxth	r2, r3
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4975      	ldr	r1, [pc, #468]	@ (8016f80 <HAL_PCD_IRQHandler+0x274>)
 8016daa:	400a      	ands	r2, r1
 8016dac:	b291      	uxth	r1, r2
 8016dae:	2244      	movs	r2, #68	@ 0x44
 8016db0:	5299      	strh	r1, [r3, r2]

    return;
 8016db2:	e0de      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8016db4:	68fa      	ldr	r2, [r7, #12]
 8016db6:	2380      	movs	r3, #128	@ 0x80
 8016db8:	015b      	lsls	r3, r3, #5
 8016dba:	4013      	ands	r3, r2
 8016dbc:	d038      	beq.n	8016e30 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	2240      	movs	r2, #64	@ 0x40
 8016dc4:	5a9b      	ldrh	r3, [r3, r2]
 8016dc6:	b29a      	uxth	r2, r3
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	2104      	movs	r1, #4
 8016dce:	438a      	bics	r2, r1
 8016dd0:	b291      	uxth	r1, r2
 8016dd2:	2240      	movs	r2, #64	@ 0x40
 8016dd4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	2240      	movs	r2, #64	@ 0x40
 8016ddc:	5a9b      	ldrh	r3, [r3, r2]
 8016dde:	b29a      	uxth	r2, r3
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	2108      	movs	r1, #8
 8016de6:	438a      	bics	r2, r1
 8016de8:	b291      	uxth	r1, r2
 8016dea:	2240      	movs	r2, #64	@ 0x40
 8016dec:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8016dee:	687a      	ldr	r2, [r7, #4]
 8016df0:	23b8      	movs	r3, #184	@ 0xb8
 8016df2:	009b      	lsls	r3, r3, #2
 8016df4:	5cd3      	ldrb	r3, [r2, r3]
 8016df6:	2b01      	cmp	r3, #1
 8016df8:	d109      	bne.n	8016e0e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8016dfa:	687a      	ldr	r2, [r7, #4]
 8016dfc:	23b8      	movs	r3, #184	@ 0xb8
 8016dfe:	009b      	lsls	r3, r3, #2
 8016e00:	2100      	movs	r1, #0
 8016e02:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	2100      	movs	r1, #0
 8016e08:	0018      	movs	r0, r3
 8016e0a:	f001 fc9f 	bl	801874c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	0018      	movs	r0, r3
 8016e12:	f009 fe7b 	bl	8020b0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	2244      	movs	r2, #68	@ 0x44
 8016e1c:	5a9b      	ldrh	r3, [r3, r2]
 8016e1e:	b29a      	uxth	r2, r3
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	4957      	ldr	r1, [pc, #348]	@ (8016f84 <HAL_PCD_IRQHandler+0x278>)
 8016e26:	400a      	ands	r2, r1
 8016e28:	b291      	uxth	r1, r2
 8016e2a:	2244      	movs	r2, #68	@ 0x44
 8016e2c:	5299      	strh	r1, [r3, r2]

    return;
 8016e2e:	e0a0      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8016e30:	68fa      	ldr	r2, [r7, #12]
 8016e32:	2380      	movs	r3, #128	@ 0x80
 8016e34:	011b      	lsls	r3, r3, #4
 8016e36:	4013      	ands	r3, r2
 8016e38:	d028      	beq.n	8016e8c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	2240      	movs	r2, #64	@ 0x40
 8016e40:	5a9b      	ldrh	r3, [r3, r2]
 8016e42:	b29a      	uxth	r2, r3
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2108      	movs	r1, #8
 8016e4a:	430a      	orrs	r2, r1
 8016e4c:	b291      	uxth	r1, r2
 8016e4e:	2240      	movs	r2, #64	@ 0x40
 8016e50:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	2244      	movs	r2, #68	@ 0x44
 8016e58:	5a9b      	ldrh	r3, [r3, r2]
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	4949      	ldr	r1, [pc, #292]	@ (8016f88 <HAL_PCD_IRQHandler+0x27c>)
 8016e62:	400a      	ands	r2, r1
 8016e64:	b291      	uxth	r1, r2
 8016e66:	2244      	movs	r2, #68	@ 0x44
 8016e68:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2240      	movs	r2, #64	@ 0x40
 8016e70:	5a9b      	ldrh	r3, [r3, r2]
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	2104      	movs	r1, #4
 8016e7a:	430a      	orrs	r2, r1
 8016e7c:	b291      	uxth	r1, r2
 8016e7e:	2240      	movs	r2, #64	@ 0x40
 8016e80:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	0018      	movs	r0, r3
 8016e86:	f009 fe25 	bl	8020ad4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016e8a:	e072      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2280      	movs	r2, #128	@ 0x80
 8016e90:	4013      	ands	r3, r2
 8016e92:	d046      	beq.n	8016f22 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2244      	movs	r2, #68	@ 0x44
 8016e9a:	5a9b      	ldrh	r3, [r3, r2]
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	2180      	movs	r1, #128	@ 0x80
 8016ea4:	438a      	bics	r2, r1
 8016ea6:	b291      	uxth	r1, r2
 8016ea8:	2244      	movs	r2, #68	@ 0x44
 8016eaa:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	23b8      	movs	r3, #184	@ 0xb8
 8016eb0:	009b      	lsls	r3, r3, #2
 8016eb2:	5cd3      	ldrb	r3, [r2, r3]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d12f      	bne.n	8016f18 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	2240      	movs	r2, #64	@ 0x40
 8016ebe:	5a9b      	ldrh	r3, [r3, r2]
 8016ec0:	b29a      	uxth	r2, r3
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	2104      	movs	r1, #4
 8016ec8:	430a      	orrs	r2, r1
 8016eca:	b291      	uxth	r1, r2
 8016ecc:	2240      	movs	r2, #64	@ 0x40
 8016ece:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2240      	movs	r2, #64	@ 0x40
 8016ed6:	5a9b      	ldrh	r3, [r3, r2]
 8016ed8:	b29a      	uxth	r2, r3
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2108      	movs	r1, #8
 8016ee0:	430a      	orrs	r2, r1
 8016ee2:	b291      	uxth	r1, r2
 8016ee4:	2240      	movs	r2, #64	@ 0x40
 8016ee6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8016ee8:	687a      	ldr	r2, [r7, #4]
 8016eea:	23b8      	movs	r3, #184	@ 0xb8
 8016eec:	009b      	lsls	r3, r3, #2
 8016eee:	2101      	movs	r1, #1
 8016ef0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	2254      	movs	r2, #84	@ 0x54
 8016ef8:	5a9b      	ldrh	r3, [r3, r2]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	089b      	lsrs	r3, r3, #2
 8016efe:	223c      	movs	r2, #60	@ 0x3c
 8016f00:	4013      	ands	r3, r2
 8016f02:	0019      	movs	r1, r3
 8016f04:	687a      	ldr	r2, [r7, #4]
 8016f06:	23b9      	movs	r3, #185	@ 0xb9
 8016f08:	009b      	lsls	r3, r3, #2
 8016f0a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2101      	movs	r1, #1
 8016f10:	0018      	movs	r0, r3
 8016f12:	f001 fc1b 	bl	801874c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8016f16:	e02c      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	0018      	movs	r0, r3
 8016f1c:	f009 fdda 	bl	8020ad4 <HAL_PCD_SuspendCallback>
    return;
 8016f20:	e027      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8016f22:	68fa      	ldr	r2, [r7, #12]
 8016f24:	2380      	movs	r3, #128	@ 0x80
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	4013      	ands	r3, r2
 8016f2a:	d010      	beq.n	8016f4e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	2244      	movs	r2, #68	@ 0x44
 8016f32:	5a9b      	ldrh	r3, [r3, r2]
 8016f34:	b29a      	uxth	r2, r3
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	4914      	ldr	r1, [pc, #80]	@ (8016f8c <HAL_PCD_IRQHandler+0x280>)
 8016f3c:	400a      	ands	r2, r1
 8016f3e:	b291      	uxth	r1, r2
 8016f40:	2244      	movs	r2, #68	@ 0x44
 8016f42:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	0018      	movs	r0, r3
 8016f48:	f009 fd90 	bl	8020a6c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016f4c:	e011      	b.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8016f4e:	68fa      	ldr	r2, [r7, #12]
 8016f50:	2380      	movs	r3, #128	@ 0x80
 8016f52:	005b      	lsls	r3, r3, #1
 8016f54:	4013      	ands	r3, r2
 8016f56:	d00c      	beq.n	8016f72 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	2244      	movs	r2, #68	@ 0x44
 8016f5e:	5a9b      	ldrh	r3, [r3, r2]
 8016f60:	b29a      	uxth	r2, r3
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	490a      	ldr	r1, [pc, #40]	@ (8016f90 <HAL_PCD_IRQHandler+0x284>)
 8016f68:	400a      	ands	r2, r1
 8016f6a:	b291      	uxth	r1, r2
 8016f6c:	2244      	movs	r2, #68	@ 0x44
 8016f6e:	5299      	strh	r1, [r3, r2]

    return;
 8016f70:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016f72:	46bd      	mov	sp, r7
 8016f74:	b004      	add	sp, #16
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	fffffbff 	.word	0xfffffbff
 8016f7c:	ffffbfff 	.word	0xffffbfff
 8016f80:	ffffdfff 	.word	0xffffdfff
 8016f84:	ffffefff 	.word	0xffffefff
 8016f88:	fffff7ff 	.word	0xfffff7ff
 8016f8c:	fffffdff 	.word	0xfffffdff
 8016f90:	fffffeff 	.word	0xfffffeff

08016f94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b082      	sub	sp, #8
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	000a      	movs	r2, r1
 8016f9e:	1cfb      	adds	r3, r7, #3
 8016fa0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8016fa2:	687a      	ldr	r2, [r7, #4]
 8016fa4:	23aa      	movs	r3, #170	@ 0xaa
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	5cd3      	ldrb	r3, [r2, r3]
 8016faa:	2b01      	cmp	r3, #1
 8016fac:	d101      	bne.n	8016fb2 <HAL_PCD_SetAddress+0x1e>
 8016fae:	2302      	movs	r3, #2
 8016fb0:	e017      	b.n	8016fe2 <HAL_PCD_SetAddress+0x4e>
 8016fb2:	687a      	ldr	r2, [r7, #4]
 8016fb4:	23aa      	movs	r3, #170	@ 0xaa
 8016fb6:	009b      	lsls	r3, r3, #2
 8016fb8:	2101      	movs	r1, #1
 8016fba:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	1cfa      	adds	r2, r7, #3
 8016fc0:	2124      	movs	r1, #36	@ 0x24
 8016fc2:	7812      	ldrb	r2, [r2, #0]
 8016fc4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681a      	ldr	r2, [r3, #0]
 8016fca:	1cfb      	adds	r3, r7, #3
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	0019      	movs	r1, r3
 8016fd0:	0010      	movs	r0, r2
 8016fd2:	f007 fc71 	bl	801e8b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	23aa      	movs	r3, #170	@ 0xaa
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	2100      	movs	r1, #0
 8016fde:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016fe0:	2300      	movs	r3, #0
}
 8016fe2:	0018      	movs	r0, r3
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	b002      	add	sp, #8
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8016fea:	b590      	push	{r4, r7, lr}
 8016fec:	b085      	sub	sp, #20
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
 8016ff2:	000c      	movs	r4, r1
 8016ff4:	0010      	movs	r0, r2
 8016ff6:	0019      	movs	r1, r3
 8016ff8:	1cfb      	adds	r3, r7, #3
 8016ffa:	1c22      	adds	r2, r4, #0
 8016ffc:	701a      	strb	r2, [r3, #0]
 8016ffe:	003b      	movs	r3, r7
 8017000:	1c02      	adds	r2, r0, #0
 8017002:	801a      	strh	r2, [r3, #0]
 8017004:	1cbb      	adds	r3, r7, #2
 8017006:	1c0a      	adds	r2, r1, #0
 8017008:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801700a:	230b      	movs	r3, #11
 801700c:	18fb      	adds	r3, r7, r3
 801700e:	2200      	movs	r2, #0
 8017010:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8017012:	1cfb      	adds	r3, r7, #3
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	b25b      	sxtb	r3, r3
 8017018:	2b00      	cmp	r3, #0
 801701a:	da0f      	bge.n	801703c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801701c:	1cfb      	adds	r3, r7, #3
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	2207      	movs	r2, #7
 8017022:	4013      	ands	r3, r2
 8017024:	1c5a      	adds	r2, r3, #1
 8017026:	0013      	movs	r3, r2
 8017028:	009b      	lsls	r3, r3, #2
 801702a:	189b      	adds	r3, r3, r2
 801702c:	00db      	lsls	r3, r3, #3
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	18d3      	adds	r3, r2, r3
 8017032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	2201      	movs	r2, #1
 8017038:	705a      	strb	r2, [r3, #1]
 801703a:	e00f      	b.n	801705c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801703c:	1cfb      	adds	r3, r7, #3
 801703e:	781b      	ldrb	r3, [r3, #0]
 8017040:	2207      	movs	r2, #7
 8017042:	401a      	ands	r2, r3
 8017044:	0013      	movs	r3, r2
 8017046:	009b      	lsls	r3, r3, #2
 8017048:	189b      	adds	r3, r3, r2
 801704a:	00db      	lsls	r3, r3, #3
 801704c:	3369      	adds	r3, #105	@ 0x69
 801704e:	33ff      	adds	r3, #255	@ 0xff
 8017050:	687a      	ldr	r2, [r7, #4]
 8017052:	18d3      	adds	r3, r2, r3
 8017054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	2200      	movs	r2, #0
 801705a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801705c:	1cfb      	adds	r3, r7, #3
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	2207      	movs	r2, #7
 8017062:	4013      	ands	r3, r2
 8017064:	b2da      	uxtb	r2, r3
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801706a:	003b      	movs	r3, r7
 801706c:	881a      	ldrh	r2, [r3, #0]
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	1cba      	adds	r2, r7, #2
 8017076:	7812      	ldrb	r2, [r2, #0]
 8017078:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801707a:	1cbb      	adds	r3, r7, #2
 801707c:	781b      	ldrb	r3, [r3, #0]
 801707e:	2b02      	cmp	r3, #2
 8017080:	d102      	bne.n	8017088 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	2200      	movs	r2, #0
 8017086:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8017088:	687a      	ldr	r2, [r7, #4]
 801708a:	23aa      	movs	r3, #170	@ 0xaa
 801708c:	009b      	lsls	r3, r3, #2
 801708e:	5cd3      	ldrb	r3, [r2, r3]
 8017090:	2b01      	cmp	r3, #1
 8017092:	d101      	bne.n	8017098 <HAL_PCD_EP_Open+0xae>
 8017094:	2302      	movs	r3, #2
 8017096:	e013      	b.n	80170c0 <HAL_PCD_EP_Open+0xd6>
 8017098:	687a      	ldr	r2, [r7, #4]
 801709a:	23aa      	movs	r3, #170	@ 0xaa
 801709c:	009b      	lsls	r3, r3, #2
 801709e:	2101      	movs	r1, #1
 80170a0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	68fa      	ldr	r2, [r7, #12]
 80170a8:	0011      	movs	r1, r2
 80170aa:	0018      	movs	r0, r3
 80170ac:	f005 fc68 	bl	801c980 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80170b0:	687a      	ldr	r2, [r7, #4]
 80170b2:	23aa      	movs	r3, #170	@ 0xaa
 80170b4:	009b      	lsls	r3, r3, #2
 80170b6:	2100      	movs	r1, #0
 80170b8:	54d1      	strb	r1, [r2, r3]

  return ret;
 80170ba:	230b      	movs	r3, #11
 80170bc:	18fb      	adds	r3, r7, r3
 80170be:	781b      	ldrb	r3, [r3, #0]
}
 80170c0:	0018      	movs	r0, r3
 80170c2:	46bd      	mov	sp, r7
 80170c4:	b005      	add	sp, #20
 80170c6:	bd90      	pop	{r4, r7, pc}

080170c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b084      	sub	sp, #16
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
 80170d0:	000a      	movs	r2, r1
 80170d2:	1cfb      	adds	r3, r7, #3
 80170d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80170d6:	1cfb      	adds	r3, r7, #3
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	b25b      	sxtb	r3, r3
 80170dc:	2b00      	cmp	r3, #0
 80170de:	da0f      	bge.n	8017100 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80170e0:	1cfb      	adds	r3, r7, #3
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	2207      	movs	r2, #7
 80170e6:	4013      	ands	r3, r2
 80170e8:	1c5a      	adds	r2, r3, #1
 80170ea:	0013      	movs	r3, r2
 80170ec:	009b      	lsls	r3, r3, #2
 80170ee:	189b      	adds	r3, r3, r2
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	687a      	ldr	r2, [r7, #4]
 80170f4:	18d3      	adds	r3, r2, r3
 80170f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	2201      	movs	r2, #1
 80170fc:	705a      	strb	r2, [r3, #1]
 80170fe:	e00f      	b.n	8017120 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017100:	1cfb      	adds	r3, r7, #3
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	2207      	movs	r2, #7
 8017106:	401a      	ands	r2, r3
 8017108:	0013      	movs	r3, r2
 801710a:	009b      	lsls	r3, r3, #2
 801710c:	189b      	adds	r3, r3, r2
 801710e:	00db      	lsls	r3, r3, #3
 8017110:	3369      	adds	r3, #105	@ 0x69
 8017112:	33ff      	adds	r3, #255	@ 0xff
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	18d3      	adds	r3, r2, r3
 8017118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2200      	movs	r2, #0
 801711e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8017120:	1cfb      	adds	r3, r7, #3
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	2207      	movs	r2, #7
 8017126:	4013      	ands	r3, r2
 8017128:	b2da      	uxtb	r2, r3
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	23aa      	movs	r3, #170	@ 0xaa
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	5cd3      	ldrb	r3, [r2, r3]
 8017136:	2b01      	cmp	r3, #1
 8017138:	d101      	bne.n	801713e <HAL_PCD_EP_Close+0x76>
 801713a:	2302      	movs	r3, #2
 801713c:	e011      	b.n	8017162 <HAL_PCD_EP_Close+0x9a>
 801713e:	687a      	ldr	r2, [r7, #4]
 8017140:	23aa      	movs	r3, #170	@ 0xaa
 8017142:	009b      	lsls	r3, r3, #2
 8017144:	2101      	movs	r1, #1
 8017146:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	68fa      	ldr	r2, [r7, #12]
 801714e:	0011      	movs	r1, r2
 8017150:	0018      	movs	r0, r3
 8017152:	f005 ffb7 	bl	801d0c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017156:	687a      	ldr	r2, [r7, #4]
 8017158:	23aa      	movs	r3, #170	@ 0xaa
 801715a:	009b      	lsls	r3, r3, #2
 801715c:	2100      	movs	r1, #0
 801715e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8017160:	2300      	movs	r3, #0
}
 8017162:	0018      	movs	r0, r3
 8017164:	46bd      	mov	sp, r7
 8017166:	b004      	add	sp, #16
 8017168:	bd80      	pop	{r7, pc}

0801716a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801716a:	b580      	push	{r7, lr}
 801716c:	b086      	sub	sp, #24
 801716e:	af00      	add	r7, sp, #0
 8017170:	60f8      	str	r0, [r7, #12]
 8017172:	607a      	str	r2, [r7, #4]
 8017174:	603b      	str	r3, [r7, #0]
 8017176:	200b      	movs	r0, #11
 8017178:	183b      	adds	r3, r7, r0
 801717a:	1c0a      	adds	r2, r1, #0
 801717c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801717e:	0001      	movs	r1, r0
 8017180:	187b      	adds	r3, r7, r1
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	2207      	movs	r2, #7
 8017186:	401a      	ands	r2, r3
 8017188:	0013      	movs	r3, r2
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	189b      	adds	r3, r3, r2
 801718e:	00db      	lsls	r3, r3, #3
 8017190:	3369      	adds	r3, #105	@ 0x69
 8017192:	33ff      	adds	r3, #255	@ 0xff
 8017194:	68fa      	ldr	r2, [r7, #12]
 8017196:	18d3      	adds	r3, r2, r3
 8017198:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	687a      	ldr	r2, [r7, #4]
 801719e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80171a0:	697b      	ldr	r3, [r7, #20]
 80171a2:	683a      	ldr	r2, [r7, #0]
 80171a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80171a6:	697b      	ldr	r3, [r7, #20]
 80171a8:	2200      	movs	r2, #0
 80171aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	2200      	movs	r2, #0
 80171b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80171b2:	187b      	adds	r3, r7, r1
 80171b4:	781b      	ldrb	r3, [r3, #0]
 80171b6:	2207      	movs	r2, #7
 80171b8:	4013      	ands	r3, r2
 80171ba:	b2da      	uxtb	r2, r3
 80171bc:	697b      	ldr	r3, [r7, #20]
 80171be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	697a      	ldr	r2, [r7, #20]
 80171c6:	0011      	movs	r1, r2
 80171c8:	0018      	movs	r0, r3
 80171ca:	f006 f93b 	bl	801d444 <USB_EPStartXfer>

  return HAL_OK;
 80171ce:	2300      	movs	r3, #0
}
 80171d0:	0018      	movs	r0, r3
 80171d2:	46bd      	mov	sp, r7
 80171d4:	b006      	add	sp, #24
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	000a      	movs	r2, r1
 80171e2:	1cfb      	adds	r3, r7, #3
 80171e4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80171e6:	1cfb      	adds	r3, r7, #3
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	2207      	movs	r2, #7
 80171ec:	401a      	ands	r2, r3
 80171ee:	6878      	ldr	r0, [r7, #4]
 80171f0:	23c2      	movs	r3, #194	@ 0xc2
 80171f2:	0059      	lsls	r1, r3, #1
 80171f4:	0013      	movs	r3, r2
 80171f6:	009b      	lsls	r3, r3, #2
 80171f8:	189b      	adds	r3, r3, r2
 80171fa:	00db      	lsls	r3, r3, #3
 80171fc:	18c3      	adds	r3, r0, r3
 80171fe:	185b      	adds	r3, r3, r1
 8017200:	681b      	ldr	r3, [r3, #0]
}
 8017202:	0018      	movs	r0, r3
 8017204:	46bd      	mov	sp, r7
 8017206:	b002      	add	sp, #8
 8017208:	bd80      	pop	{r7, pc}

0801720a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801720a:	b580      	push	{r7, lr}
 801720c:	b086      	sub	sp, #24
 801720e:	af00      	add	r7, sp, #0
 8017210:	60f8      	str	r0, [r7, #12]
 8017212:	607a      	str	r2, [r7, #4]
 8017214:	603b      	str	r3, [r7, #0]
 8017216:	200b      	movs	r0, #11
 8017218:	183b      	adds	r3, r7, r0
 801721a:	1c0a      	adds	r2, r1, #0
 801721c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801721e:	183b      	adds	r3, r7, r0
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	2207      	movs	r2, #7
 8017224:	4013      	ands	r3, r2
 8017226:	1c5a      	adds	r2, r3, #1
 8017228:	0013      	movs	r3, r2
 801722a:	009b      	lsls	r3, r3, #2
 801722c:	189b      	adds	r3, r3, r2
 801722e:	00db      	lsls	r3, r3, #3
 8017230:	68fa      	ldr	r2, [r7, #12]
 8017232:	18d3      	adds	r3, r2, r3
 8017234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	683a      	ldr	r2, [r7, #0]
 8017240:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	2224      	movs	r2, #36	@ 0x24
 8017246:	2101      	movs	r1, #1
 8017248:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801724a:	697b      	ldr	r3, [r7, #20]
 801724c:	683a      	ldr	r2, [r7, #0]
 801724e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	2200      	movs	r2, #0
 8017254:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8017256:	697b      	ldr	r3, [r7, #20]
 8017258:	2201      	movs	r2, #1
 801725a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801725c:	183b      	adds	r3, r7, r0
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	2207      	movs	r2, #7
 8017262:	4013      	ands	r3, r2
 8017264:	b2da      	uxtb	r2, r3
 8017266:	697b      	ldr	r3, [r7, #20]
 8017268:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	697a      	ldr	r2, [r7, #20]
 8017270:	0011      	movs	r1, r2
 8017272:	0018      	movs	r0, r3
 8017274:	f006 f8e6 	bl	801d444 <USB_EPStartXfer>

  return HAL_OK;
 8017278:	2300      	movs	r3, #0
}
 801727a:	0018      	movs	r0, r3
 801727c:	46bd      	mov	sp, r7
 801727e:	b006      	add	sp, #24
 8017280:	bd80      	pop	{r7, pc}

08017282 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017282:	b580      	push	{r7, lr}
 8017284:	b084      	sub	sp, #16
 8017286:	af00      	add	r7, sp, #0
 8017288:	6078      	str	r0, [r7, #4]
 801728a:	000a      	movs	r2, r1
 801728c:	1cfb      	adds	r3, r7, #3
 801728e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8017290:	1cfb      	adds	r3, r7, #3
 8017292:	781b      	ldrb	r3, [r3, #0]
 8017294:	2207      	movs	r2, #7
 8017296:	401a      	ands	r2, r3
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	685b      	ldr	r3, [r3, #4]
 801729c:	429a      	cmp	r2, r3
 801729e:	d901      	bls.n	80172a4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80172a0:	2301      	movs	r3, #1
 80172a2:	e046      	b.n	8017332 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80172a4:	1cfb      	adds	r3, r7, #3
 80172a6:	781b      	ldrb	r3, [r3, #0]
 80172a8:	b25b      	sxtb	r3, r3
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	da0f      	bge.n	80172ce <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80172ae:	1cfb      	adds	r3, r7, #3
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	2207      	movs	r2, #7
 80172b4:	4013      	ands	r3, r2
 80172b6:	1c5a      	adds	r2, r3, #1
 80172b8:	0013      	movs	r3, r2
 80172ba:	009b      	lsls	r3, r3, #2
 80172bc:	189b      	adds	r3, r3, r2
 80172be:	00db      	lsls	r3, r3, #3
 80172c0:	687a      	ldr	r2, [r7, #4]
 80172c2:	18d3      	adds	r3, r2, r3
 80172c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	2201      	movs	r2, #1
 80172ca:	705a      	strb	r2, [r3, #1]
 80172cc:	e00d      	b.n	80172ea <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80172ce:	1cfb      	adds	r3, r7, #3
 80172d0:	781a      	ldrb	r2, [r3, #0]
 80172d2:	0013      	movs	r3, r2
 80172d4:	009b      	lsls	r3, r3, #2
 80172d6:	189b      	adds	r3, r3, r2
 80172d8:	00db      	lsls	r3, r3, #3
 80172da:	3369      	adds	r3, #105	@ 0x69
 80172dc:	33ff      	adds	r3, #255	@ 0xff
 80172de:	687a      	ldr	r2, [r7, #4]
 80172e0:	18d3      	adds	r3, r2, r3
 80172e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	2200      	movs	r2, #0
 80172e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	2201      	movs	r2, #1
 80172ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80172f0:	1cfb      	adds	r3, r7, #3
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	2207      	movs	r2, #7
 80172f6:	4013      	ands	r3, r2
 80172f8:	b2da      	uxtb	r2, r3
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80172fe:	687a      	ldr	r2, [r7, #4]
 8017300:	23aa      	movs	r3, #170	@ 0xaa
 8017302:	009b      	lsls	r3, r3, #2
 8017304:	5cd3      	ldrb	r3, [r2, r3]
 8017306:	2b01      	cmp	r3, #1
 8017308:	d101      	bne.n	801730e <HAL_PCD_EP_SetStall+0x8c>
 801730a:	2302      	movs	r3, #2
 801730c:	e011      	b.n	8017332 <HAL_PCD_EP_SetStall+0xb0>
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	23aa      	movs	r3, #170	@ 0xaa
 8017312:	009b      	lsls	r3, r3, #2
 8017314:	2101      	movs	r1, #1
 8017316:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	68fa      	ldr	r2, [r7, #12]
 801731e:	0011      	movs	r1, r2
 8017320:	0018      	movs	r0, r3
 8017322:	f007 f9c7 	bl	801e6b4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8017326:	687a      	ldr	r2, [r7, #4]
 8017328:	23aa      	movs	r3, #170	@ 0xaa
 801732a:	009b      	lsls	r3, r3, #2
 801732c:	2100      	movs	r1, #0
 801732e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8017330:	2300      	movs	r3, #0
}
 8017332:	0018      	movs	r0, r3
 8017334:	46bd      	mov	sp, r7
 8017336:	b004      	add	sp, #16
 8017338:	bd80      	pop	{r7, pc}

0801733a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801733a:	b580      	push	{r7, lr}
 801733c:	b084      	sub	sp, #16
 801733e:	af00      	add	r7, sp, #0
 8017340:	6078      	str	r0, [r7, #4]
 8017342:	000a      	movs	r2, r1
 8017344:	1cfb      	adds	r3, r7, #3
 8017346:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8017348:	1cfb      	adds	r3, r7, #3
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	220f      	movs	r2, #15
 801734e:	401a      	ands	r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	429a      	cmp	r2, r3
 8017356:	d901      	bls.n	801735c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8017358:	2301      	movs	r3, #1
 801735a:	e048      	b.n	80173ee <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801735c:	1cfb      	adds	r3, r7, #3
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	b25b      	sxtb	r3, r3
 8017362:	2b00      	cmp	r3, #0
 8017364:	da0f      	bge.n	8017386 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017366:	1cfb      	adds	r3, r7, #3
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	2207      	movs	r2, #7
 801736c:	4013      	ands	r3, r2
 801736e:	1c5a      	adds	r2, r3, #1
 8017370:	0013      	movs	r3, r2
 8017372:	009b      	lsls	r3, r3, #2
 8017374:	189b      	adds	r3, r3, r2
 8017376:	00db      	lsls	r3, r3, #3
 8017378:	687a      	ldr	r2, [r7, #4]
 801737a:	18d3      	adds	r3, r2, r3
 801737c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	2201      	movs	r2, #1
 8017382:	705a      	strb	r2, [r3, #1]
 8017384:	e00f      	b.n	80173a6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017386:	1cfb      	adds	r3, r7, #3
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	2207      	movs	r2, #7
 801738c:	401a      	ands	r2, r3
 801738e:	0013      	movs	r3, r2
 8017390:	009b      	lsls	r3, r3, #2
 8017392:	189b      	adds	r3, r3, r2
 8017394:	00db      	lsls	r3, r3, #3
 8017396:	3369      	adds	r3, #105	@ 0x69
 8017398:	33ff      	adds	r3, #255	@ 0xff
 801739a:	687a      	ldr	r2, [r7, #4]
 801739c:	18d3      	adds	r3, r2, r3
 801739e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	2200      	movs	r2, #0
 80173a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	2200      	movs	r2, #0
 80173aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80173ac:	1cfb      	adds	r3, r7, #3
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	2207      	movs	r2, #7
 80173b2:	4013      	ands	r3, r2
 80173b4:	b2da      	uxtb	r2, r3
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80173ba:	687a      	ldr	r2, [r7, #4]
 80173bc:	23aa      	movs	r3, #170	@ 0xaa
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	5cd3      	ldrb	r3, [r2, r3]
 80173c2:	2b01      	cmp	r3, #1
 80173c4:	d101      	bne.n	80173ca <HAL_PCD_EP_ClrStall+0x90>
 80173c6:	2302      	movs	r3, #2
 80173c8:	e011      	b.n	80173ee <HAL_PCD_EP_ClrStall+0xb4>
 80173ca:	687a      	ldr	r2, [r7, #4]
 80173cc:	23aa      	movs	r3, #170	@ 0xaa
 80173ce:	009b      	lsls	r3, r3, #2
 80173d0:	2101      	movs	r1, #1
 80173d2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	68fa      	ldr	r2, [r7, #12]
 80173da:	0011      	movs	r1, r2
 80173dc:	0018      	movs	r0, r3
 80173de:	f007 f9b9 	bl	801e754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80173e2:	687a      	ldr	r2, [r7, #4]
 80173e4:	23aa      	movs	r3, #170	@ 0xaa
 80173e6:	009b      	lsls	r3, r3, #2
 80173e8:	2100      	movs	r1, #0
 80173ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80173ec:	2300      	movs	r3, #0
}
 80173ee:	0018      	movs	r0, r3
 80173f0:	46bd      	mov	sp, r7
 80173f2:	b004      	add	sp, #16
 80173f4:	bd80      	pop	{r7, pc}
	...

080173f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80173f8:	b5b0      	push	{r4, r5, r7, lr}
 80173fa:	b096      	sub	sp, #88	@ 0x58
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8017400:	f000 fbec 	bl	8017bdc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681a      	ldr	r2, [r3, #0]
 8017408:	204e      	movs	r0, #78	@ 0x4e
 801740a:	183b      	adds	r3, r7, r0
 801740c:	2144      	movs	r1, #68	@ 0x44
 801740e:	5a52      	ldrh	r2, [r2, r1]
 8017410:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8017412:	183b      	adds	r3, r7, r0
 8017414:	881b      	ldrh	r3, [r3, #0]
 8017416:	b2da      	uxtb	r2, r3
 8017418:	244d      	movs	r4, #77	@ 0x4d
 801741a:	193b      	adds	r3, r7, r4
 801741c:	210f      	movs	r1, #15
 801741e:	400a      	ands	r2, r1
 8017420:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8017422:	193b      	adds	r3, r7, r4
 8017424:	781b      	ldrb	r3, [r3, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d000      	beq.n	801742c <PCD_EP_ISR_Handler+0x34>
 801742a:	e18f      	b.n	801774c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 801742c:	183b      	adds	r3, r7, r0
 801742e:	881b      	ldrh	r3, [r3, #0]
 8017430:	2210      	movs	r2, #16
 8017432:	4013      	ands	r3, r2
 8017434:	d155      	bne.n	80174e2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	881b      	ldrh	r3, [r3, #0]
 801743c:	b29a      	uxth	r2, r3
 801743e:	200e      	movs	r0, #14
 8017440:	183b      	adds	r3, r7, r0
 8017442:	49bb      	ldr	r1, [pc, #748]	@ (8017730 <PCD_EP_ISR_Handler+0x338>)
 8017444:	400a      	ands	r2, r1
 8017446:	801a      	strh	r2, [r3, #0]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	183a      	adds	r2, r7, r0
 801744e:	8812      	ldrh	r2, [r2, #0]
 8017450:	49b8      	ldr	r1, [pc, #736]	@ (8017734 <PCD_EP_ISR_Handler+0x33c>)
 8017452:	430a      	orrs	r2, r1
 8017454:	b292      	uxth	r2, r2
 8017456:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	3328      	adds	r3, #40	@ 0x28
 801745c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2250      	movs	r2, #80	@ 0x50
 8017464:	5a9b      	ldrh	r3, [r3, r2]
 8017466:	b29b      	uxth	r3, r3
 8017468:	001a      	movs	r2, r3
 801746a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801746c:	781b      	ldrb	r3, [r3, #0]
 801746e:	00db      	lsls	r3, r3, #3
 8017470:	18d2      	adds	r2, r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	18d3      	adds	r3, r2, r3
 8017478:	4aaf      	ldr	r2, [pc, #700]	@ (8017738 <PCD_EP_ISR_Handler+0x340>)
 801747a:	4694      	mov	ip, r2
 801747c:	4463      	add	r3, ip
 801747e:	881b      	ldrh	r3, [r3, #0]
 8017480:	059b      	lsls	r3, r3, #22
 8017482:	0d9a      	lsrs	r2, r3, #22
 8017484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017486:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8017488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801748a:	695a      	ldr	r2, [r3, #20]
 801748c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801748e:	69db      	ldr	r3, [r3, #28]
 8017490:	18d2      	adds	r2, r2, r3
 8017492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017494:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	2100      	movs	r1, #0
 801749a:	0018      	movs	r0, r3
 801749c:	f009 fac8 	bl	8020a30 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	2224      	movs	r2, #36	@ 0x24
 80174a4:	5c9b      	ldrb	r3, [r3, r2]
 80174a6:	b2db      	uxtb	r3, r3
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d101      	bne.n	80174b0 <PCD_EP_ISR_Handler+0xb8>
 80174ac:	f000 fb96 	bl	8017bdc <PCD_EP_ISR_Handler+0x7e4>
 80174b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174b2:	699b      	ldr	r3, [r3, #24]
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d001      	beq.n	80174bc <PCD_EP_ISR_Handler+0xc4>
 80174b8:	f000 fb90 	bl	8017bdc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2224      	movs	r2, #36	@ 0x24
 80174c0:	5c9b      	ldrb	r3, [r3, r2]
 80174c2:	b2db      	uxtb	r3, r3
 80174c4:	2280      	movs	r2, #128	@ 0x80
 80174c6:	4252      	negs	r2, r2
 80174c8:	4313      	orrs	r3, r2
 80174ca:	b2da      	uxtb	r2, r3
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	0011      	movs	r1, r2
 80174d2:	224c      	movs	r2, #76	@ 0x4c
 80174d4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2224      	movs	r2, #36	@ 0x24
 80174da:	2100      	movs	r1, #0
 80174dc:	5499      	strb	r1, [r3, r2]
 80174de:	f000 fb7d 	bl	8017bdc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	3369      	adds	r3, #105	@ 0x69
 80174e6:	33ff      	adds	r3, #255	@ 0xff
 80174e8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	214a      	movs	r1, #74	@ 0x4a
 80174f0:	187b      	adds	r3, r7, r1
 80174f2:	8812      	ldrh	r2, [r2, #0]
 80174f4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80174f6:	187b      	adds	r3, r7, r1
 80174f8:	881a      	ldrh	r2, [r3, #0]
 80174fa:	2380      	movs	r3, #128	@ 0x80
 80174fc:	011b      	lsls	r3, r3, #4
 80174fe:	4013      	ands	r3, r2
 8017500:	d037      	beq.n	8017572 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	2250      	movs	r2, #80	@ 0x50
 8017508:	5a9b      	ldrh	r3, [r3, r2]
 801750a:	b29b      	uxth	r3, r3
 801750c:	001a      	movs	r2, r3
 801750e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	00db      	lsls	r3, r3, #3
 8017514:	18d2      	adds	r2, r2, r3
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	18d3      	adds	r3, r2, r3
 801751c:	4a87      	ldr	r2, [pc, #540]	@ (801773c <PCD_EP_ISR_Handler+0x344>)
 801751e:	4694      	mov	ip, r2
 8017520:	4463      	add	r3, ip
 8017522:	881b      	ldrh	r3, [r3, #0]
 8017524:	059b      	lsls	r3, r3, #22
 8017526:	0d9a      	lsrs	r2, r3, #22
 8017528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801752a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6818      	ldr	r0, [r3, #0]
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	22ac      	movs	r2, #172	@ 0xac
 8017534:	0092      	lsls	r2, r2, #2
 8017536:	1899      	adds	r1, r3, r2
 8017538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801753a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801753c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801753e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8017540:	b29b      	uxth	r3, r3
 8017542:	f007 fa3a 	bl	801e9ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	881b      	ldrh	r3, [r3, #0]
 801754c:	b29a      	uxth	r2, r3
 801754e:	2010      	movs	r0, #16
 8017550:	183b      	adds	r3, r7, r0
 8017552:	497b      	ldr	r1, [pc, #492]	@ (8017740 <PCD_EP_ISR_Handler+0x348>)
 8017554:	400a      	ands	r2, r1
 8017556:	801a      	strh	r2, [r3, #0]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	183a      	adds	r2, r7, r0
 801755e:	8812      	ldrh	r2, [r2, #0]
 8017560:	2180      	movs	r1, #128	@ 0x80
 8017562:	430a      	orrs	r2, r1
 8017564:	b292      	uxth	r2, r2
 8017566:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	0018      	movs	r0, r3
 801756c:	f009 fa2a 	bl	80209c4 <HAL_PCD_SetupStageCallback>
 8017570:	e334      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8017572:	234a      	movs	r3, #74	@ 0x4a
 8017574:	18fb      	adds	r3, r7, r3
 8017576:	2200      	movs	r2, #0
 8017578:	5e9b      	ldrsh	r3, [r3, r2]
 801757a:	2b00      	cmp	r3, #0
 801757c:	db00      	blt.n	8017580 <PCD_EP_ISR_Handler+0x188>
 801757e:	e32d      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	881b      	ldrh	r3, [r3, #0]
 8017586:	b29a      	uxth	r2, r3
 8017588:	201e      	movs	r0, #30
 801758a:	183b      	adds	r3, r7, r0
 801758c:	496c      	ldr	r1, [pc, #432]	@ (8017740 <PCD_EP_ISR_Handler+0x348>)
 801758e:	400a      	ands	r2, r1
 8017590:	801a      	strh	r2, [r3, #0]
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	183a      	adds	r2, r7, r0
 8017598:	8812      	ldrh	r2, [r2, #0]
 801759a:	2180      	movs	r1, #128	@ 0x80
 801759c:	430a      	orrs	r2, r1
 801759e:	b292      	uxth	r2, r2
 80175a0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	2250      	movs	r2, #80	@ 0x50
 80175a8:	5a9b      	ldrh	r3, [r3, r2]
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	001a      	movs	r2, r3
 80175ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175b0:	781b      	ldrb	r3, [r3, #0]
 80175b2:	00db      	lsls	r3, r3, #3
 80175b4:	18d2      	adds	r2, r2, r3
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	18d3      	adds	r3, r2, r3
 80175bc:	4a5f      	ldr	r2, [pc, #380]	@ (801773c <PCD_EP_ISR_Handler+0x344>)
 80175be:	4694      	mov	ip, r2
 80175c0:	4463      	add	r3, ip
 80175c2:	881b      	ldrh	r3, [r3, #0]
 80175c4:	059b      	lsls	r3, r3, #22
 80175c6:	0d9a      	lsrs	r2, r3, #22
 80175c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80175cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ce:	69db      	ldr	r3, [r3, #28]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d01a      	beq.n	801760a <PCD_EP_ISR_Handler+0x212>
 80175d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175d6:	695b      	ldr	r3, [r3, #20]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d016      	beq.n	801760a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6818      	ldr	r0, [r3, #0]
 80175e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175e2:	6959      	ldr	r1, [r3, #20]
 80175e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80175e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	f007 f9e4 	bl	801e9ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80175f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175f4:	695a      	ldr	r2, [r3, #20]
 80175f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175f8:	69db      	ldr	r3, [r3, #28]
 80175fa:	18d2      	adds	r2, r2, r3
 80175fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	2100      	movs	r1, #0
 8017604:	0018      	movs	r0, r3
 8017606:	f009 f9f2 	bl	80209ee <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681a      	ldr	r2, [r3, #0]
 801760e:	214a      	movs	r1, #74	@ 0x4a
 8017610:	187b      	adds	r3, r7, r1
 8017612:	8812      	ldrh	r2, [r2, #0]
 8017614:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8017616:	187b      	adds	r3, r7, r1
 8017618:	881a      	ldrh	r2, [r3, #0]
 801761a:	2380      	movs	r3, #128	@ 0x80
 801761c:	011b      	lsls	r3, r3, #4
 801761e:	4013      	ands	r3, r2
 8017620:	d000      	beq.n	8017624 <PCD_EP_ISR_Handler+0x22c>
 8017622:	e2db      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
 8017624:	187b      	adds	r3, r7, r1
 8017626:	881a      	ldrh	r2, [r3, #0]
 8017628:	23c0      	movs	r3, #192	@ 0xc0
 801762a:	019b      	lsls	r3, r3, #6
 801762c:	401a      	ands	r2, r3
 801762e:	23c0      	movs	r3, #192	@ 0xc0
 8017630:	019b      	lsls	r3, r3, #6
 8017632:	429a      	cmp	r2, r3
 8017634:	d100      	bne.n	8017638 <PCD_EP_ISR_Handler+0x240>
 8017636:	e2d1      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	61bb      	str	r3, [r7, #24]
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2250      	movs	r2, #80	@ 0x50
 8017644:	5a9b      	ldrh	r3, [r3, r2]
 8017646:	b29b      	uxth	r3, r3
 8017648:	001a      	movs	r2, r3
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	189b      	adds	r3, r3, r2
 801764e:	61bb      	str	r3, [r7, #24]
 8017650:	69bb      	ldr	r3, [r7, #24]
 8017652:	4a3a      	ldr	r2, [pc, #232]	@ (801773c <PCD_EP_ISR_Handler+0x344>)
 8017654:	4694      	mov	ip, r2
 8017656:	4463      	add	r3, ip
 8017658:	617b      	str	r3, [r7, #20]
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	881b      	ldrh	r3, [r3, #0]
 801765e:	b29b      	uxth	r3, r3
 8017660:	059b      	lsls	r3, r3, #22
 8017662:	0d9b      	lsrs	r3, r3, #22
 8017664:	b29a      	uxth	r2, r3
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	801a      	strh	r2, [r3, #0]
 801766a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801766c:	691b      	ldr	r3, [r3, #16]
 801766e:	2b3e      	cmp	r3, #62	@ 0x3e
 8017670:	d91a      	bls.n	80176a8 <PCD_EP_ISR_Handler+0x2b0>
 8017672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017674:	691b      	ldr	r3, [r3, #16]
 8017676:	095b      	lsrs	r3, r3, #5
 8017678:	647b      	str	r3, [r7, #68]	@ 0x44
 801767a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801767c:	691b      	ldr	r3, [r3, #16]
 801767e:	221f      	movs	r2, #31
 8017680:	4013      	ands	r3, r2
 8017682:	d102      	bne.n	801768a <PCD_EP_ISR_Handler+0x292>
 8017684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017686:	3b01      	subs	r3, #1
 8017688:	647b      	str	r3, [r7, #68]	@ 0x44
 801768a:	697b      	ldr	r3, [r7, #20]
 801768c:	881b      	ldrh	r3, [r3, #0]
 801768e:	b29a      	uxth	r2, r3
 8017690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017692:	b29b      	uxth	r3, r3
 8017694:	029b      	lsls	r3, r3, #10
 8017696:	b29b      	uxth	r3, r3
 8017698:	4313      	orrs	r3, r2
 801769a:	b29b      	uxth	r3, r3
 801769c:	4a25      	ldr	r2, [pc, #148]	@ (8017734 <PCD_EP_ISR_Handler+0x33c>)
 801769e:	4313      	orrs	r3, r2
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	801a      	strh	r2, [r3, #0]
 80176a6:	e023      	b.n	80176f0 <PCD_EP_ISR_Handler+0x2f8>
 80176a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176aa:	691b      	ldr	r3, [r3, #16]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d108      	bne.n	80176c2 <PCD_EP_ISR_Handler+0x2ca>
 80176b0:	697b      	ldr	r3, [r7, #20]
 80176b2:	881b      	ldrh	r3, [r3, #0]
 80176b4:	b29b      	uxth	r3, r3
 80176b6:	4a1f      	ldr	r2, [pc, #124]	@ (8017734 <PCD_EP_ISR_Handler+0x33c>)
 80176b8:	4313      	orrs	r3, r2
 80176ba:	b29a      	uxth	r2, r3
 80176bc:	697b      	ldr	r3, [r7, #20]
 80176be:	801a      	strh	r2, [r3, #0]
 80176c0:	e016      	b.n	80176f0 <PCD_EP_ISR_Handler+0x2f8>
 80176c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176c4:	691b      	ldr	r3, [r3, #16]
 80176c6:	085b      	lsrs	r3, r3, #1
 80176c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80176ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176cc:	691b      	ldr	r3, [r3, #16]
 80176ce:	2201      	movs	r2, #1
 80176d0:	4013      	ands	r3, r2
 80176d2:	d002      	beq.n	80176da <PCD_EP_ISR_Handler+0x2e2>
 80176d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176d6:	3301      	adds	r3, #1
 80176d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	881b      	ldrh	r3, [r3, #0]
 80176de:	b29a      	uxth	r2, r3
 80176e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	029b      	lsls	r3, r3, #10
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	4313      	orrs	r3, r2
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	881b      	ldrh	r3, [r3, #0]
 80176f6:	b29a      	uxth	r2, r3
 80176f8:	2012      	movs	r0, #18
 80176fa:	183b      	adds	r3, r7, r0
 80176fc:	4911      	ldr	r1, [pc, #68]	@ (8017744 <PCD_EP_ISR_Handler+0x34c>)
 80176fe:	400a      	ands	r2, r1
 8017700:	801a      	strh	r2, [r3, #0]
 8017702:	183b      	adds	r3, r7, r0
 8017704:	183a      	adds	r2, r7, r0
 8017706:	8812      	ldrh	r2, [r2, #0]
 8017708:	2180      	movs	r1, #128	@ 0x80
 801770a:	0149      	lsls	r1, r1, #5
 801770c:	404a      	eors	r2, r1
 801770e:	801a      	strh	r2, [r3, #0]
 8017710:	183b      	adds	r3, r7, r0
 8017712:	183a      	adds	r2, r7, r0
 8017714:	8812      	ldrh	r2, [r2, #0]
 8017716:	2180      	movs	r1, #128	@ 0x80
 8017718:	0189      	lsls	r1, r1, #6
 801771a:	404a      	eors	r2, r1
 801771c:	801a      	strh	r2, [r3, #0]
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	183a      	adds	r2, r7, r0
 8017724:	8812      	ldrh	r2, [r2, #0]
 8017726:	4908      	ldr	r1, [pc, #32]	@ (8017748 <PCD_EP_ISR_Handler+0x350>)
 8017728:	430a      	orrs	r2, r1
 801772a:	b292      	uxth	r2, r2
 801772c:	801a      	strh	r2, [r3, #0]
 801772e:	e255      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
 8017730:	ffff8f0f 	.word	0xffff8f0f
 8017734:	ffff8000 	.word	0xffff8000
 8017738:	00000402 	.word	0x00000402
 801773c:	00000406 	.word	0x00000406
 8017740:	00000f8f 	.word	0x00000f8f
 8017744:	ffffbf8f 	.word	0xffffbf8f
 8017748:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	001a      	movs	r2, r3
 8017752:	204d      	movs	r0, #77	@ 0x4d
 8017754:	183b      	adds	r3, r7, r0
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	009b      	lsls	r3, r3, #2
 801775a:	18d2      	adds	r2, r2, r3
 801775c:	214a      	movs	r1, #74	@ 0x4a
 801775e:	187b      	adds	r3, r7, r1
 8017760:	8812      	ldrh	r2, [r2, #0]
 8017762:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8017764:	187b      	adds	r3, r7, r1
 8017766:	2200      	movs	r2, #0
 8017768:	5e9b      	ldrsh	r3, [r3, r2]
 801776a:	2b00      	cmp	r3, #0
 801776c:	db00      	blt.n	8017770 <PCD_EP_ISR_Handler+0x378>
 801776e:	e0fa      	b.n	8017966 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	001a      	movs	r2, r3
 8017776:	183b      	adds	r3, r7, r0
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	009b      	lsls	r3, r3, #2
 801777c:	18d3      	adds	r3, r2, r3
 801777e:	881b      	ldrh	r3, [r3, #0]
 8017780:	b29a      	uxth	r2, r3
 8017782:	2448      	movs	r4, #72	@ 0x48
 8017784:	193b      	adds	r3, r7, r4
 8017786:	49d1      	ldr	r1, [pc, #836]	@ (8017acc <PCD_EP_ISR_Handler+0x6d4>)
 8017788:	400a      	ands	r2, r1
 801778a:	801a      	strh	r2, [r3, #0]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	001a      	movs	r2, r3
 8017792:	183b      	adds	r3, r7, r0
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	009b      	lsls	r3, r3, #2
 8017798:	18d3      	adds	r3, r2, r3
 801779a:	193a      	adds	r2, r7, r4
 801779c:	8812      	ldrh	r2, [r2, #0]
 801779e:	2180      	movs	r1, #128	@ 0x80
 80177a0:	430a      	orrs	r2, r1
 80177a2:	b292      	uxth	r2, r2
 80177a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80177a6:	183b      	adds	r3, r7, r0
 80177a8:	781a      	ldrb	r2, [r3, #0]
 80177aa:	0013      	movs	r3, r2
 80177ac:	009b      	lsls	r3, r3, #2
 80177ae:	189b      	adds	r3, r3, r2
 80177b0:	00db      	lsls	r3, r3, #3
 80177b2:	3369      	adds	r3, #105	@ 0x69
 80177b4:	33ff      	adds	r3, #255	@ 0xff
 80177b6:	687a      	ldr	r2, [r7, #4]
 80177b8:	18d3      	adds	r3, r2, r3
 80177ba:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80177bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177be:	7b1b      	ldrb	r3, [r3, #12]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d125      	bne.n	8017810 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2250      	movs	r2, #80	@ 0x50
 80177ca:	5a9b      	ldrh	r3, [r3, r2]
 80177cc:	b29b      	uxth	r3, r3
 80177ce:	001a      	movs	r2, r3
 80177d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	00db      	lsls	r3, r3, #3
 80177d6:	18d2      	adds	r2, r2, r3
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	18d3      	adds	r3, r2, r3
 80177de:	4abc      	ldr	r2, [pc, #752]	@ (8017ad0 <PCD_EP_ISR_Handler+0x6d8>)
 80177e0:	4694      	mov	ip, r2
 80177e2:	4463      	add	r3, ip
 80177e4:	881a      	ldrh	r2, [r3, #0]
 80177e6:	2450      	movs	r4, #80	@ 0x50
 80177e8:	193b      	adds	r3, r7, r4
 80177ea:	0592      	lsls	r2, r2, #22
 80177ec:	0d92      	lsrs	r2, r2, #22
 80177ee:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80177f0:	193b      	adds	r3, r7, r4
 80177f2:	881b      	ldrh	r3, [r3, #0]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d100      	bne.n	80177fa <PCD_EP_ISR_Handler+0x402>
 80177f8:	e08d      	b.n	8017916 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	6818      	ldr	r0, [r3, #0]
 80177fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017800:	6959      	ldr	r1, [r3, #20]
 8017802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017804:	88da      	ldrh	r2, [r3, #6]
 8017806:	193b      	adds	r3, r7, r4
 8017808:	881b      	ldrh	r3, [r3, #0]
 801780a:	f007 f8d6 	bl	801e9ba <USB_ReadPMA>
 801780e:	e082      	b.n	8017916 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8017810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017812:	78db      	ldrb	r3, [r3, #3]
 8017814:	2b02      	cmp	r3, #2
 8017816:	d10c      	bne.n	8017832 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8017818:	2350      	movs	r3, #80	@ 0x50
 801781a:	18fc      	adds	r4, r7, r3
 801781c:	234a      	movs	r3, #74	@ 0x4a
 801781e:	18fb      	adds	r3, r7, r3
 8017820:	881a      	ldrh	r2, [r3, #0]
 8017822:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	0018      	movs	r0, r3
 8017828:	f000 f9ec 	bl	8017c04 <HAL_PCD_EP_DB_Receive>
 801782c:	0003      	movs	r3, r0
 801782e:	8023      	strh	r3, [r4, #0]
 8017830:	e071      	b.n	8017916 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	001a      	movs	r2, r3
 8017838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801783a:	781b      	ldrb	r3, [r3, #0]
 801783c:	009b      	lsls	r3, r3, #2
 801783e:	18d3      	adds	r3, r2, r3
 8017840:	881b      	ldrh	r3, [r3, #0]
 8017842:	b29a      	uxth	r2, r3
 8017844:	2052      	movs	r0, #82	@ 0x52
 8017846:	183b      	adds	r3, r7, r0
 8017848:	49a2      	ldr	r1, [pc, #648]	@ (8017ad4 <PCD_EP_ISR_Handler+0x6dc>)
 801784a:	400a      	ands	r2, r1
 801784c:	801a      	strh	r2, [r3, #0]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	001a      	movs	r2, r3
 8017854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	009b      	lsls	r3, r3, #2
 801785a:	18d3      	adds	r3, r2, r3
 801785c:	183a      	adds	r2, r7, r0
 801785e:	8812      	ldrh	r2, [r2, #0]
 8017860:	499d      	ldr	r1, [pc, #628]	@ (8017ad8 <PCD_EP_ISR_Handler+0x6e0>)
 8017862:	430a      	orrs	r2, r1
 8017864:	b292      	uxth	r2, r2
 8017866:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	001a      	movs	r2, r3
 801786e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	009b      	lsls	r3, r3, #2
 8017874:	18d3      	adds	r3, r2, r3
 8017876:	881b      	ldrh	r3, [r3, #0]
 8017878:	b29b      	uxth	r3, r3
 801787a:	001a      	movs	r2, r3
 801787c:	2380      	movs	r3, #128	@ 0x80
 801787e:	01db      	lsls	r3, r3, #7
 8017880:	4013      	ands	r3, r2
 8017882:	d024      	beq.n	80178ce <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	2250      	movs	r2, #80	@ 0x50
 801788a:	5a9b      	ldrh	r3, [r3, r2]
 801788c:	b29b      	uxth	r3, r3
 801788e:	001a      	movs	r2, r3
 8017890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	00db      	lsls	r3, r3, #3
 8017896:	18d2      	adds	r2, r2, r3
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	18d3      	adds	r3, r2, r3
 801789e:	4a8f      	ldr	r2, [pc, #572]	@ (8017adc <PCD_EP_ISR_Handler+0x6e4>)
 80178a0:	4694      	mov	ip, r2
 80178a2:	4463      	add	r3, ip
 80178a4:	881a      	ldrh	r2, [r3, #0]
 80178a6:	2450      	movs	r4, #80	@ 0x50
 80178a8:	193b      	adds	r3, r7, r4
 80178aa:	0592      	lsls	r2, r2, #22
 80178ac:	0d92      	lsrs	r2, r2, #22
 80178ae:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80178b0:	193b      	adds	r3, r7, r4
 80178b2:	881b      	ldrh	r3, [r3, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d02e      	beq.n	8017916 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	6818      	ldr	r0, [r3, #0]
 80178bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178be:	6959      	ldr	r1, [r3, #20]
 80178c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178c2:	891a      	ldrh	r2, [r3, #8]
 80178c4:	193b      	adds	r3, r7, r4
 80178c6:	881b      	ldrh	r3, [r3, #0]
 80178c8:	f007 f877 	bl	801e9ba <USB_ReadPMA>
 80178cc:	e023      	b.n	8017916 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	2250      	movs	r2, #80	@ 0x50
 80178d4:	5a9b      	ldrh	r3, [r3, r2]
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	001a      	movs	r2, r3
 80178da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	00db      	lsls	r3, r3, #3
 80178e0:	18d2      	adds	r2, r2, r3
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	18d3      	adds	r3, r2, r3
 80178e8:	4a79      	ldr	r2, [pc, #484]	@ (8017ad0 <PCD_EP_ISR_Handler+0x6d8>)
 80178ea:	4694      	mov	ip, r2
 80178ec:	4463      	add	r3, ip
 80178ee:	881a      	ldrh	r2, [r3, #0]
 80178f0:	2450      	movs	r4, #80	@ 0x50
 80178f2:	193b      	adds	r3, r7, r4
 80178f4:	0592      	lsls	r2, r2, #22
 80178f6:	0d92      	lsrs	r2, r2, #22
 80178f8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80178fa:	193b      	adds	r3, r7, r4
 80178fc:	881b      	ldrh	r3, [r3, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d009      	beq.n	8017916 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	6818      	ldr	r0, [r3, #0]
 8017906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017908:	6959      	ldr	r1, [r3, #20]
 801790a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801790c:	895a      	ldrh	r2, [r3, #10]
 801790e:	193b      	adds	r3, r7, r4
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	f007 f852 	bl	801e9ba <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8017916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017918:	69da      	ldr	r2, [r3, #28]
 801791a:	2150      	movs	r1, #80	@ 0x50
 801791c:	187b      	adds	r3, r7, r1
 801791e:	881b      	ldrh	r3, [r3, #0]
 8017920:	18d2      	adds	r2, r2, r3
 8017922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017924:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8017926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017928:	695a      	ldr	r2, [r3, #20]
 801792a:	187b      	adds	r3, r7, r1
 801792c:	881b      	ldrh	r3, [r3, #0]
 801792e:	18d2      	adds	r2, r2, r3
 8017930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017932:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8017934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017936:	699b      	ldr	r3, [r3, #24]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d005      	beq.n	8017948 <PCD_EP_ISR_Handler+0x550>
 801793c:	187b      	adds	r3, r7, r1
 801793e:	881a      	ldrh	r2, [r3, #0]
 8017940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017942:	691b      	ldr	r3, [r3, #16]
 8017944:	429a      	cmp	r2, r3
 8017946:	d207      	bcs.n	8017958 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8017948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801794a:	781a      	ldrb	r2, [r3, #0]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	0011      	movs	r1, r2
 8017950:	0018      	movs	r0, r3
 8017952:	f009 f84c 	bl	80209ee <HAL_PCD_DataOutStageCallback>
 8017956:	e006      	b.n	8017966 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801795e:	0011      	movs	r1, r2
 8017960:	0018      	movs	r0, r3
 8017962:	f005 fd6f 	bl	801d444 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8017966:	244a      	movs	r4, #74	@ 0x4a
 8017968:	193b      	adds	r3, r7, r4
 801796a:	881b      	ldrh	r3, [r3, #0]
 801796c:	2280      	movs	r2, #128	@ 0x80
 801796e:	4013      	ands	r3, r2
 8017970:	d100      	bne.n	8017974 <PCD_EP_ISR_Handler+0x57c>
 8017972:	e133      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8017974:	204d      	movs	r0, #77	@ 0x4d
 8017976:	183b      	adds	r3, r7, r0
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	1c5a      	adds	r2, r3, #1
 801797c:	0013      	movs	r3, r2
 801797e:	009b      	lsls	r3, r3, #2
 8017980:	189b      	adds	r3, r3, r2
 8017982:	00db      	lsls	r3, r3, #3
 8017984:	687a      	ldr	r2, [r7, #4]
 8017986:	18d3      	adds	r3, r2, r3
 8017988:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	001a      	movs	r2, r3
 8017990:	183b      	adds	r3, r7, r0
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	009b      	lsls	r3, r3, #2
 8017996:	18d3      	adds	r3, r2, r3
 8017998:	881b      	ldrh	r3, [r3, #0]
 801799a:	b29a      	uxth	r2, r3
 801799c:	2542      	movs	r5, #66	@ 0x42
 801799e:	197b      	adds	r3, r7, r5
 80179a0:	494f      	ldr	r1, [pc, #316]	@ (8017ae0 <PCD_EP_ISR_Handler+0x6e8>)
 80179a2:	400a      	ands	r2, r1
 80179a4:	801a      	strh	r2, [r3, #0]
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	001a      	movs	r2, r3
 80179ac:	183b      	adds	r3, r7, r0
 80179ae:	781b      	ldrb	r3, [r3, #0]
 80179b0:	009b      	lsls	r3, r3, #2
 80179b2:	18d3      	adds	r3, r2, r3
 80179b4:	197a      	adds	r2, r7, r5
 80179b6:	8812      	ldrh	r2, [r2, #0]
 80179b8:	494a      	ldr	r1, [pc, #296]	@ (8017ae4 <PCD_EP_ISR_Handler+0x6ec>)
 80179ba:	430a      	orrs	r2, r1
 80179bc:	b292      	uxth	r2, r2
 80179be:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80179c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179c2:	78db      	ldrb	r3, [r3, #3]
 80179c4:	2b01      	cmp	r3, #1
 80179c6:	d000      	beq.n	80179ca <PCD_EP_ISR_Handler+0x5d2>
 80179c8:	e0af      	b.n	8017b2a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80179ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179cc:	2200      	movs	r2, #0
 80179ce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80179d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179d2:	7b1b      	ldrb	r3, [r3, #12]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d100      	bne.n	80179da <PCD_EP_ISR_Handler+0x5e2>
 80179d8:	e09f      	b.n	8017b1a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80179da:	193b      	adds	r3, r7, r4
 80179dc:	881b      	ldrh	r3, [r3, #0]
 80179de:	2240      	movs	r2, #64	@ 0x40
 80179e0:	4013      	ands	r3, r2
 80179e2:	d046      	beq.n	8017a72 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80179e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179e6:	785b      	ldrb	r3, [r3, #1]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d125      	bne.n	8017a38 <PCD_EP_ISR_Handler+0x640>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	2250      	movs	r2, #80	@ 0x50
 80179f8:	5a9b      	ldrh	r3, [r3, r2]
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	001a      	movs	r2, r3
 80179fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a00:	189b      	adds	r3, r3, r2
 8017a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	00da      	lsls	r2, r3, #3
 8017a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a0c:	18d3      	adds	r3, r2, r3
 8017a0e:	4a33      	ldr	r2, [pc, #204]	@ (8017adc <PCD_EP_ISR_Handler+0x6e4>)
 8017a10:	4694      	mov	ip, r2
 8017a12:	4463      	add	r3, ip
 8017a14:	623b      	str	r3, [r7, #32]
 8017a16:	6a3b      	ldr	r3, [r7, #32]
 8017a18:	881b      	ldrh	r3, [r3, #0]
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	059b      	lsls	r3, r3, #22
 8017a1e:	0d9b      	lsrs	r3, r3, #22
 8017a20:	b29a      	uxth	r2, r3
 8017a22:	6a3b      	ldr	r3, [r7, #32]
 8017a24:	801a      	strh	r2, [r3, #0]
 8017a26:	6a3b      	ldr	r3, [r7, #32]
 8017a28:	881b      	ldrh	r3, [r3, #0]
 8017a2a:	b29b      	uxth	r3, r3
 8017a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8017ae4 <PCD_EP_ISR_Handler+0x6ec>)
 8017a2e:	4313      	orrs	r3, r2
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	6a3b      	ldr	r3, [r7, #32]
 8017a34:	801a      	strh	r2, [r3, #0]
 8017a36:	e070      	b.n	8017b1a <PCD_EP_ISR_Handler+0x722>
 8017a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a3a:	785b      	ldrb	r3, [r3, #1]
 8017a3c:	2b01      	cmp	r3, #1
 8017a3e:	d16c      	bne.n	8017b1a <PCD_EP_ISR_Handler+0x722>
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	2250      	movs	r2, #80	@ 0x50
 8017a4c:	5a9b      	ldrh	r3, [r3, r2]
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	001a      	movs	r2, r3
 8017a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a54:	189b      	adds	r3, r3, r2
 8017a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a5a:	781b      	ldrb	r3, [r3, #0]
 8017a5c:	00da      	lsls	r2, r3, #3
 8017a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a60:	18d3      	adds	r3, r2, r3
 8017a62:	4a1e      	ldr	r2, [pc, #120]	@ (8017adc <PCD_EP_ISR_Handler+0x6e4>)
 8017a64:	4694      	mov	ip, r2
 8017a66:	4463      	add	r3, ip
 8017a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	801a      	strh	r2, [r3, #0]
 8017a70:	e053      	b.n	8017b1a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a7a:	785b      	ldrb	r3, [r3, #1]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d133      	bne.n	8017ae8 <PCD_EP_ISR_Handler+0x6f0>
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	2250      	movs	r2, #80	@ 0x50
 8017a8c:	5a9b      	ldrh	r3, [r3, r2]
 8017a8e:	b29b      	uxth	r3, r3
 8017a90:	001a      	movs	r2, r3
 8017a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a94:	189b      	adds	r3, r3, r2
 8017a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	00da      	lsls	r2, r3, #3
 8017a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aa0:	18d3      	adds	r3, r2, r3
 8017aa2:	4a0b      	ldr	r2, [pc, #44]	@ (8017ad0 <PCD_EP_ISR_Handler+0x6d8>)
 8017aa4:	4694      	mov	ip, r2
 8017aa6:	4463      	add	r3, ip
 8017aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8017aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aac:	881b      	ldrh	r3, [r3, #0]
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	059b      	lsls	r3, r3, #22
 8017ab2:	0d9b      	lsrs	r3, r3, #22
 8017ab4:	b29a      	uxth	r2, r3
 8017ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ab8:	801a      	strh	r2, [r3, #0]
 8017aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017abc:	881b      	ldrh	r3, [r3, #0]
 8017abe:	b29b      	uxth	r3, r3
 8017ac0:	4a08      	ldr	r2, [pc, #32]	@ (8017ae4 <PCD_EP_ISR_Handler+0x6ec>)
 8017ac2:	4313      	orrs	r3, r2
 8017ac4:	b29a      	uxth	r2, r3
 8017ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ac8:	801a      	strh	r2, [r3, #0]
 8017aca:	e026      	b.n	8017b1a <PCD_EP_ISR_Handler+0x722>
 8017acc:	00000f8f 	.word	0x00000f8f
 8017ad0:	00000406 	.word	0x00000406
 8017ad4:	ffff8f8f 	.word	0xffff8f8f
 8017ad8:	ffff80c0 	.word	0xffff80c0
 8017adc:	00000402 	.word	0x00000402
 8017ae0:	ffff8f0f 	.word	0xffff8f0f
 8017ae4:	ffff8000 	.word	0xffff8000
 8017ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017aea:	785b      	ldrb	r3, [r3, #1]
 8017aec:	2b01      	cmp	r3, #1
 8017aee:	d114      	bne.n	8017b1a <PCD_EP_ISR_Handler+0x722>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	2250      	movs	r2, #80	@ 0x50
 8017af6:	5a9b      	ldrh	r3, [r3, r2]
 8017af8:	b29b      	uxth	r3, r3
 8017afa:	001a      	movs	r2, r3
 8017afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017afe:	189b      	adds	r3, r3, r2
 8017b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	00da      	lsls	r2, r3, #3
 8017b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b0a:	18d3      	adds	r3, r2, r3
 8017b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8017bfc <PCD_EP_ISR_Handler+0x804>)
 8017b0e:	4694      	mov	ip, r2
 8017b10:	4463      	add	r3, ip
 8017b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b16:	2200      	movs	r2, #0
 8017b18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b1c:	781a      	ldrb	r2, [r3, #0]
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	0011      	movs	r1, r2
 8017b22:	0018      	movs	r0, r3
 8017b24:	f008 ff84 	bl	8020a30 <HAL_PCD_DataInStageCallback>
 8017b28:	e058      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8017b2a:	234a      	movs	r3, #74	@ 0x4a
 8017b2c:	18fb      	adds	r3, r7, r3
 8017b2e:	881a      	ldrh	r2, [r3, #0]
 8017b30:	2380      	movs	r3, #128	@ 0x80
 8017b32:	005b      	lsls	r3, r3, #1
 8017b34:	4013      	ands	r3, r2
 8017b36:	d149      	bne.n	8017bcc <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	2250      	movs	r2, #80	@ 0x50
 8017b3e:	5a9b      	ldrh	r3, [r3, r2]
 8017b40:	b29b      	uxth	r3, r3
 8017b42:	001a      	movs	r2, r3
 8017b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	00db      	lsls	r3, r3, #3
 8017b4a:	18d2      	adds	r2, r2, r3
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	18d3      	adds	r3, r2, r3
 8017b52:	4a2b      	ldr	r2, [pc, #172]	@ (8017c00 <PCD_EP_ISR_Handler+0x808>)
 8017b54:	4694      	mov	ip, r2
 8017b56:	4463      	add	r3, ip
 8017b58:	881a      	ldrh	r2, [r3, #0]
 8017b5a:	2140      	movs	r1, #64	@ 0x40
 8017b5c:	187b      	adds	r3, r7, r1
 8017b5e:	0592      	lsls	r2, r2, #22
 8017b60:	0d92      	lsrs	r2, r2, #22
 8017b62:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8017b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b66:	699a      	ldr	r2, [r3, #24]
 8017b68:	187b      	adds	r3, r7, r1
 8017b6a:	881b      	ldrh	r3, [r3, #0]
 8017b6c:	429a      	cmp	r2, r3
 8017b6e:	d907      	bls.n	8017b80 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8017b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b72:	699a      	ldr	r2, [r3, #24]
 8017b74:	187b      	adds	r3, r7, r1
 8017b76:	881b      	ldrh	r3, [r3, #0]
 8017b78:	1ad2      	subs	r2, r2, r3
 8017b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b7c:	619a      	str	r2, [r3, #24]
 8017b7e:	e002      	b.n	8017b86 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8017b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b82:	2200      	movs	r2, #0
 8017b84:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8017b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b88:	699b      	ldr	r3, [r3, #24]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d107      	bne.n	8017b9e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b90:	781a      	ldrb	r2, [r3, #0]
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	0011      	movs	r1, r2
 8017b96:	0018      	movs	r0, r3
 8017b98:	f008 ff4a 	bl	8020a30 <HAL_PCD_DataInStageCallback>
 8017b9c:	e01e      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8017b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ba0:	695a      	ldr	r2, [r3, #20]
 8017ba2:	2140      	movs	r1, #64	@ 0x40
 8017ba4:	187b      	adds	r3, r7, r1
 8017ba6:	881b      	ldrh	r3, [r3, #0]
 8017ba8:	18d2      	adds	r2, r2, r3
 8017baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8017bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bb0:	69da      	ldr	r2, [r3, #28]
 8017bb2:	187b      	adds	r3, r7, r1
 8017bb4:	881b      	ldrh	r3, [r3, #0]
 8017bb6:	18d2      	adds	r2, r2, r3
 8017bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017bc2:	0011      	movs	r1, r2
 8017bc4:	0018      	movs	r0, r3
 8017bc6:	f005 fc3d 	bl	801d444 <USB_EPStartXfer>
 8017bca:	e007      	b.n	8017bdc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8017bcc:	234a      	movs	r3, #74	@ 0x4a
 8017bce:	18fb      	adds	r3, r7, r3
 8017bd0:	881a      	ldrh	r2, [r3, #0]
 8017bd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	0018      	movs	r0, r3
 8017bd8:	f000 f930 	bl	8017e3c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	2244      	movs	r2, #68	@ 0x44
 8017be2:	5a9b      	ldrh	r3, [r3, r2]
 8017be4:	b29b      	uxth	r3, r3
 8017be6:	b21b      	sxth	r3, r3
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	da01      	bge.n	8017bf0 <PCD_EP_ISR_Handler+0x7f8>
 8017bec:	f7ff fc0a 	bl	8017404 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8017bf0:	2300      	movs	r3, #0
}
 8017bf2:	0018      	movs	r0, r3
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	b016      	add	sp, #88	@ 0x58
 8017bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8017bfa:	46c0      	nop			@ (mov r8, r8)
 8017bfc:	00000406 	.word	0x00000406
 8017c00:	00000402 	.word	0x00000402

08017c04 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8017c04:	b590      	push	{r4, r7, lr}
 8017c06:	b089      	sub	sp, #36	@ 0x24
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	1dbb      	adds	r3, r7, #6
 8017c10:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017c12:	1dbb      	adds	r3, r7, #6
 8017c14:	881a      	ldrh	r2, [r3, #0]
 8017c16:	2380      	movs	r3, #128	@ 0x80
 8017c18:	01db      	lsls	r3, r3, #7
 8017c1a:	4013      	ands	r3, r2
 8017c1c:	d100      	bne.n	8017c20 <HAL_PCD_EP_DB_Receive+0x1c>
 8017c1e:	e07d      	b.n	8017d1c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2250      	movs	r2, #80	@ 0x50
 8017c26:	5a9b      	ldrh	r3, [r3, r2]
 8017c28:	b29b      	uxth	r3, r3
 8017c2a:	001a      	movs	r2, r3
 8017c2c:	68bb      	ldr	r3, [r7, #8]
 8017c2e:	781b      	ldrb	r3, [r3, #0]
 8017c30:	00db      	lsls	r3, r3, #3
 8017c32:	18d2      	adds	r2, r2, r3
 8017c34:	68fb      	ldr	r3, [r7, #12]
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	18d3      	adds	r3, r2, r3
 8017c3a:	4a7a      	ldr	r2, [pc, #488]	@ (8017e24 <HAL_PCD_EP_DB_Receive+0x220>)
 8017c3c:	4694      	mov	ip, r2
 8017c3e:	4463      	add	r3, ip
 8017c40:	881a      	ldrh	r2, [r3, #0]
 8017c42:	211a      	movs	r1, #26
 8017c44:	187b      	adds	r3, r7, r1
 8017c46:	0592      	lsls	r2, r2, #22
 8017c48:	0d92      	lsrs	r2, r2, #22
 8017c4a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8017c4c:	68bb      	ldr	r3, [r7, #8]
 8017c4e:	699a      	ldr	r2, [r3, #24]
 8017c50:	187b      	adds	r3, r7, r1
 8017c52:	881b      	ldrh	r3, [r3, #0]
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d307      	bcc.n	8017c68 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8017c58:	68bb      	ldr	r3, [r7, #8]
 8017c5a:	699a      	ldr	r2, [r3, #24]
 8017c5c:	187b      	adds	r3, r7, r1
 8017c5e:	881b      	ldrh	r3, [r3, #0]
 8017c60:	1ad2      	subs	r2, r2, r3
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	619a      	str	r2, [r3, #24]
 8017c66:	e002      	b.n	8017c6e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8017c6e:	68bb      	ldr	r3, [r7, #8]
 8017c70:	699b      	ldr	r3, [r3, #24]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d121      	bne.n	8017cba <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	001a      	movs	r2, r3
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	781b      	ldrb	r3, [r3, #0]
 8017c80:	009b      	lsls	r3, r3, #2
 8017c82:	18d3      	adds	r3, r2, r3
 8017c84:	881b      	ldrh	r3, [r3, #0]
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	2018      	movs	r0, #24
 8017c8a:	183b      	adds	r3, r7, r0
 8017c8c:	4966      	ldr	r1, [pc, #408]	@ (8017e28 <HAL_PCD_EP_DB_Receive+0x224>)
 8017c8e:	400a      	ands	r2, r1
 8017c90:	801a      	strh	r2, [r3, #0]
 8017c92:	183b      	adds	r3, r7, r0
 8017c94:	183a      	adds	r2, r7, r0
 8017c96:	8812      	ldrh	r2, [r2, #0]
 8017c98:	2180      	movs	r1, #128	@ 0x80
 8017c9a:	0189      	lsls	r1, r1, #6
 8017c9c:	404a      	eors	r2, r1
 8017c9e:	801a      	strh	r2, [r3, #0]
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	001a      	movs	r2, r3
 8017ca6:	68bb      	ldr	r3, [r7, #8]
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	009b      	lsls	r3, r3, #2
 8017cac:	18d3      	adds	r3, r2, r3
 8017cae:	183a      	adds	r2, r7, r0
 8017cb0:	8812      	ldrh	r2, [r2, #0]
 8017cb2:	495e      	ldr	r1, [pc, #376]	@ (8017e2c <HAL_PCD_EP_DB_Receive+0x228>)
 8017cb4:	430a      	orrs	r2, r1
 8017cb6:	b292      	uxth	r2, r2
 8017cb8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017cba:	1dbb      	adds	r3, r7, #6
 8017cbc:	881b      	ldrh	r3, [r3, #0]
 8017cbe:	2240      	movs	r2, #64	@ 0x40
 8017cc0:	4013      	ands	r3, r2
 8017cc2:	d01a      	beq.n	8017cfa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	001a      	movs	r2, r3
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	781b      	ldrb	r3, [r3, #0]
 8017cce:	009b      	lsls	r3, r3, #2
 8017cd0:	18d3      	adds	r3, r2, r3
 8017cd2:	881b      	ldrh	r3, [r3, #0]
 8017cd4:	b29a      	uxth	r2, r3
 8017cd6:	2016      	movs	r0, #22
 8017cd8:	183b      	adds	r3, r7, r0
 8017cda:	4955      	ldr	r1, [pc, #340]	@ (8017e30 <HAL_PCD_EP_DB_Receive+0x22c>)
 8017cdc:	400a      	ands	r2, r1
 8017cde:	801a      	strh	r2, [r3, #0]
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	001a      	movs	r2, r3
 8017ce6:	68bb      	ldr	r3, [r7, #8]
 8017ce8:	781b      	ldrb	r3, [r3, #0]
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	18d3      	adds	r3, r2, r3
 8017cee:	183a      	adds	r2, r7, r0
 8017cf0:	8812      	ldrh	r2, [r2, #0]
 8017cf2:	4950      	ldr	r1, [pc, #320]	@ (8017e34 <HAL_PCD_EP_DB_Receive+0x230>)
 8017cf4:	430a      	orrs	r2, r1
 8017cf6:	b292      	uxth	r2, r2
 8017cf8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8017cfa:	241a      	movs	r4, #26
 8017cfc:	193b      	adds	r3, r7, r4
 8017cfe:	881b      	ldrh	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d100      	bne.n	8017d06 <HAL_PCD_EP_DB_Receive+0x102>
 8017d04:	e086      	b.n	8017e14 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	6959      	ldr	r1, [r3, #20]
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	891a      	ldrh	r2, [r3, #8]
 8017d12:	193b      	adds	r3, r7, r4
 8017d14:	881b      	ldrh	r3, [r3, #0]
 8017d16:	f006 fe50 	bl	801e9ba <USB_ReadPMA>
 8017d1a:	e07b      	b.n	8017e14 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	2250      	movs	r2, #80	@ 0x50
 8017d22:	5a9b      	ldrh	r3, [r3, r2]
 8017d24:	b29b      	uxth	r3, r3
 8017d26:	001a      	movs	r2, r3
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	781b      	ldrb	r3, [r3, #0]
 8017d2c:	00db      	lsls	r3, r3, #3
 8017d2e:	18d2      	adds	r2, r2, r3
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	18d3      	adds	r3, r2, r3
 8017d36:	4a40      	ldr	r2, [pc, #256]	@ (8017e38 <HAL_PCD_EP_DB_Receive+0x234>)
 8017d38:	4694      	mov	ip, r2
 8017d3a:	4463      	add	r3, ip
 8017d3c:	881a      	ldrh	r2, [r3, #0]
 8017d3e:	211a      	movs	r1, #26
 8017d40:	187b      	adds	r3, r7, r1
 8017d42:	0592      	lsls	r2, r2, #22
 8017d44:	0d92      	lsrs	r2, r2, #22
 8017d46:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	699a      	ldr	r2, [r3, #24]
 8017d4c:	187b      	adds	r3, r7, r1
 8017d4e:	881b      	ldrh	r3, [r3, #0]
 8017d50:	429a      	cmp	r2, r3
 8017d52:	d307      	bcc.n	8017d64 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	699a      	ldr	r2, [r3, #24]
 8017d58:	187b      	adds	r3, r7, r1
 8017d5a:	881b      	ldrh	r3, [r3, #0]
 8017d5c:	1ad2      	subs	r2, r2, r3
 8017d5e:	68bb      	ldr	r3, [r7, #8]
 8017d60:	619a      	str	r2, [r3, #24]
 8017d62:	e002      	b.n	8017d6a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	2200      	movs	r2, #0
 8017d68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	699b      	ldr	r3, [r3, #24]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d121      	bne.n	8017db6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	001a      	movs	r2, r3
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	009b      	lsls	r3, r3, #2
 8017d7e:	18d3      	adds	r3, r2, r3
 8017d80:	881b      	ldrh	r3, [r3, #0]
 8017d82:	b29a      	uxth	r2, r3
 8017d84:	201e      	movs	r0, #30
 8017d86:	183b      	adds	r3, r7, r0
 8017d88:	4927      	ldr	r1, [pc, #156]	@ (8017e28 <HAL_PCD_EP_DB_Receive+0x224>)
 8017d8a:	400a      	ands	r2, r1
 8017d8c:	801a      	strh	r2, [r3, #0]
 8017d8e:	183b      	adds	r3, r7, r0
 8017d90:	183a      	adds	r2, r7, r0
 8017d92:	8812      	ldrh	r2, [r2, #0]
 8017d94:	2180      	movs	r1, #128	@ 0x80
 8017d96:	0189      	lsls	r1, r1, #6
 8017d98:	404a      	eors	r2, r1
 8017d9a:	801a      	strh	r2, [r3, #0]
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	001a      	movs	r2, r3
 8017da2:	68bb      	ldr	r3, [r7, #8]
 8017da4:	781b      	ldrb	r3, [r3, #0]
 8017da6:	009b      	lsls	r3, r3, #2
 8017da8:	18d3      	adds	r3, r2, r3
 8017daa:	183a      	adds	r2, r7, r0
 8017dac:	8812      	ldrh	r2, [r2, #0]
 8017dae:	491f      	ldr	r1, [pc, #124]	@ (8017e2c <HAL_PCD_EP_DB_Receive+0x228>)
 8017db0:	430a      	orrs	r2, r1
 8017db2:	b292      	uxth	r2, r2
 8017db4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8017db6:	1dbb      	adds	r3, r7, #6
 8017db8:	881b      	ldrh	r3, [r3, #0]
 8017dba:	2240      	movs	r2, #64	@ 0x40
 8017dbc:	4013      	ands	r3, r2
 8017dbe:	d11a      	bne.n	8017df6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	001a      	movs	r2, r3
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	781b      	ldrb	r3, [r3, #0]
 8017dca:	009b      	lsls	r3, r3, #2
 8017dcc:	18d3      	adds	r3, r2, r3
 8017dce:	881b      	ldrh	r3, [r3, #0]
 8017dd0:	b29a      	uxth	r2, r3
 8017dd2:	201c      	movs	r0, #28
 8017dd4:	183b      	adds	r3, r7, r0
 8017dd6:	4916      	ldr	r1, [pc, #88]	@ (8017e30 <HAL_PCD_EP_DB_Receive+0x22c>)
 8017dd8:	400a      	ands	r2, r1
 8017dda:	801a      	strh	r2, [r3, #0]
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	001a      	movs	r2, r3
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	009b      	lsls	r3, r3, #2
 8017de8:	18d3      	adds	r3, r2, r3
 8017dea:	183a      	adds	r2, r7, r0
 8017dec:	8812      	ldrh	r2, [r2, #0]
 8017dee:	4911      	ldr	r1, [pc, #68]	@ (8017e34 <HAL_PCD_EP_DB_Receive+0x230>)
 8017df0:	430a      	orrs	r2, r1
 8017df2:	b292      	uxth	r2, r2
 8017df4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8017df6:	241a      	movs	r4, #26
 8017df8:	193b      	adds	r3, r7, r4
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d009      	beq.n	8017e14 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	6818      	ldr	r0, [r3, #0]
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	6959      	ldr	r1, [r3, #20]
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	895a      	ldrh	r2, [r3, #10]
 8017e0c:	193b      	adds	r3, r7, r4
 8017e0e:	881b      	ldrh	r3, [r3, #0]
 8017e10:	f006 fdd3 	bl	801e9ba <USB_ReadPMA>
    }
  }

  return count;
 8017e14:	231a      	movs	r3, #26
 8017e16:	18fb      	adds	r3, r7, r3
 8017e18:	881b      	ldrh	r3, [r3, #0]
}
 8017e1a:	0018      	movs	r0, r3
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	b009      	add	sp, #36	@ 0x24
 8017e20:	bd90      	pop	{r4, r7, pc}
 8017e22:	46c0      	nop			@ (mov r8, r8)
 8017e24:	00000402 	.word	0x00000402
 8017e28:	ffffbf8f 	.word	0xffffbf8f
 8017e2c:	ffff8080 	.word	0xffff8080
 8017e30:	ffff8f8f 	.word	0xffff8f8f
 8017e34:	ffff80c0 	.word	0xffff80c0
 8017e38:	00000406 	.word	0x00000406

08017e3c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b0a4      	sub	sp, #144	@ 0x90
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	60f8      	str	r0, [r7, #12]
 8017e44:	60b9      	str	r1, [r7, #8]
 8017e46:	1dbb      	adds	r3, r7, #6
 8017e48:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017e4a:	1dbb      	adds	r3, r7, #6
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	2240      	movs	r2, #64	@ 0x40
 8017e50:	4013      	ands	r3, r2
 8017e52:	d100      	bne.n	8017e56 <HAL_PCD_EP_DB_Transmit+0x1a>
 8017e54:	e1e4      	b.n	8018220 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	2250      	movs	r2, #80	@ 0x50
 8017e5c:	5a9b      	ldrh	r3, [r3, r2]
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	001a      	movs	r2, r3
 8017e62:	68bb      	ldr	r3, [r7, #8]
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	00db      	lsls	r3, r3, #3
 8017e68:	18d2      	adds	r2, r2, r3
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	18d3      	adds	r3, r2, r3
 8017e70:	4ad0      	ldr	r2, [pc, #832]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8017e72:	4694      	mov	ip, r2
 8017e74:	4463      	add	r3, ip
 8017e76:	881a      	ldrh	r2, [r3, #0]
 8017e78:	2186      	movs	r1, #134	@ 0x86
 8017e7a:	187b      	adds	r3, r7, r1
 8017e7c:	0592      	lsls	r2, r2, #22
 8017e7e:	0d92      	lsrs	r2, r2, #22
 8017e80:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	699a      	ldr	r2, [r3, #24]
 8017e86:	187b      	adds	r3, r7, r1
 8017e88:	881b      	ldrh	r3, [r3, #0]
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d907      	bls.n	8017e9e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8017e8e:	68bb      	ldr	r3, [r7, #8]
 8017e90:	699a      	ldr	r2, [r3, #24]
 8017e92:	187b      	adds	r3, r7, r1
 8017e94:	881b      	ldrh	r3, [r3, #0]
 8017e96:	1ad2      	subs	r2, r2, r3
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	619a      	str	r2, [r3, #24]
 8017e9c:	e002      	b.n	8017ea4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8017e9e:	68bb      	ldr	r3, [r7, #8]
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	699b      	ldr	r3, [r3, #24]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d000      	beq.n	8017eae <HAL_PCD_EP_DB_Transmit+0x72>
 8017eac:	e0b5      	b.n	801801a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	785b      	ldrb	r3, [r3, #1]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d125      	bne.n	8017f02 <HAL_PCD_EP_DB_Transmit+0xc6>
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	2250      	movs	r2, #80	@ 0x50
 8017ec2:	5a9b      	ldrh	r3, [r3, r2]
 8017ec4:	b29b      	uxth	r3, r3
 8017ec6:	001a      	movs	r2, r3
 8017ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eca:	189b      	adds	r3, r3, r2
 8017ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	781b      	ldrb	r3, [r3, #0]
 8017ed2:	00da      	lsls	r2, r3, #3
 8017ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ed6:	18d3      	adds	r3, r2, r3
 8017ed8:	4ab6      	ldr	r2, [pc, #728]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8017eda:	4694      	mov	ip, r2
 8017edc:	4463      	add	r3, ip
 8017ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ee2:	881b      	ldrh	r3, [r3, #0]
 8017ee4:	b29b      	uxth	r3, r3
 8017ee6:	059b      	lsls	r3, r3, #22
 8017ee8:	0d9b      	lsrs	r3, r3, #22
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eee:	801a      	strh	r2, [r3, #0]
 8017ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef2:	881b      	ldrh	r3, [r3, #0]
 8017ef4:	b29b      	uxth	r3, r3
 8017ef6:	4ab0      	ldr	r2, [pc, #704]	@ (80181b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017ef8:	4313      	orrs	r3, r2
 8017efa:	b29a      	uxth	r2, r3
 8017efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017efe:	801a      	strh	r2, [r3, #0]
 8017f00:	e01b      	b.n	8017f3a <HAL_PCD_EP_DB_Transmit+0xfe>
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	785b      	ldrb	r3, [r3, #1]
 8017f06:	2b01      	cmp	r3, #1
 8017f08:	d117      	bne.n	8017f3a <HAL_PCD_EP_DB_Transmit+0xfe>
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	2250      	movs	r2, #80	@ 0x50
 8017f16:	5a9b      	ldrh	r3, [r3, r2]
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	001a      	movs	r2, r3
 8017f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f1e:	189b      	adds	r3, r3, r2
 8017f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	781b      	ldrb	r3, [r3, #0]
 8017f26:	00da      	lsls	r2, r3, #3
 8017f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f2a:	18d3      	adds	r3, r2, r3
 8017f2c:	4aa1      	ldr	r2, [pc, #644]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8017f2e:	4694      	mov	ip, r2
 8017f30:	4463      	add	r3, ip
 8017f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f36:	2200      	movs	r2, #0
 8017f38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f40:	68bb      	ldr	r3, [r7, #8]
 8017f42:	785b      	ldrb	r3, [r3, #1]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d125      	bne.n	8017f94 <HAL_PCD_EP_DB_Transmit+0x158>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	61fb      	str	r3, [r7, #28]
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	2250      	movs	r2, #80	@ 0x50
 8017f54:	5a9b      	ldrh	r3, [r3, r2]
 8017f56:	b29b      	uxth	r3, r3
 8017f58:	001a      	movs	r2, r3
 8017f5a:	69fb      	ldr	r3, [r7, #28]
 8017f5c:	189b      	adds	r3, r3, r2
 8017f5e:	61fb      	str	r3, [r7, #28]
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	00da      	lsls	r2, r3, #3
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	18d3      	adds	r3, r2, r3
 8017f6a:	4a94      	ldr	r2, [pc, #592]	@ (80181bc <HAL_PCD_EP_DB_Transmit+0x380>)
 8017f6c:	4694      	mov	ip, r2
 8017f6e:	4463      	add	r3, ip
 8017f70:	61bb      	str	r3, [r7, #24]
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	881b      	ldrh	r3, [r3, #0]
 8017f76:	b29b      	uxth	r3, r3
 8017f78:	059b      	lsls	r3, r3, #22
 8017f7a:	0d9b      	lsrs	r3, r3, #22
 8017f7c:	b29a      	uxth	r2, r3
 8017f7e:	69bb      	ldr	r3, [r7, #24]
 8017f80:	801a      	strh	r2, [r3, #0]
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	881b      	ldrh	r3, [r3, #0]
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	4a8b      	ldr	r2, [pc, #556]	@ (80181b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017f8a:	4313      	orrs	r3, r2
 8017f8c:	b29a      	uxth	r2, r3
 8017f8e:	69bb      	ldr	r3, [r7, #24]
 8017f90:	801a      	strh	r2, [r3, #0]
 8017f92:	e018      	b.n	8017fc6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	785b      	ldrb	r3, [r3, #1]
 8017f98:	2b01      	cmp	r3, #1
 8017f9a:	d114      	bne.n	8017fc6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	2250      	movs	r2, #80	@ 0x50
 8017fa2:	5a9b      	ldrh	r3, [r3, r2]
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	001a      	movs	r2, r3
 8017fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017faa:	189b      	adds	r3, r3, r2
 8017fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	781b      	ldrb	r3, [r3, #0]
 8017fb2:	00da      	lsls	r2, r3, #3
 8017fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb6:	18d3      	adds	r3, r2, r3
 8017fb8:	4a80      	ldr	r2, [pc, #512]	@ (80181bc <HAL_PCD_EP_DB_Transmit+0x380>)
 8017fba:	4694      	mov	ip, r2
 8017fbc:	4463      	add	r3, ip
 8017fbe:	623b      	str	r3, [r7, #32]
 8017fc0:	6a3b      	ldr	r3, [r7, #32]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017fc6:	68bb      	ldr	r3, [r7, #8]
 8017fc8:	781a      	ldrb	r2, [r3, #0]
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	0011      	movs	r1, r2
 8017fce:	0018      	movs	r0, r3
 8017fd0:	f008 fd2e 	bl	8020a30 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017fd4:	1dbb      	adds	r3, r7, #6
 8017fd6:	881a      	ldrh	r2, [r3, #0]
 8017fd8:	2380      	movs	r3, #128	@ 0x80
 8017fda:	01db      	lsls	r3, r3, #7
 8017fdc:	4013      	ands	r3, r2
 8017fde:	d100      	bne.n	8017fe2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8017fe0:	e309      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	001a      	movs	r2, r3
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	18d3      	adds	r3, r2, r3
 8017ff0:	881b      	ldrh	r3, [r3, #0]
 8017ff2:	b29a      	uxth	r2, r3
 8017ff4:	2016      	movs	r0, #22
 8017ff6:	183b      	adds	r3, r7, r0
 8017ff8:	4971      	ldr	r1, [pc, #452]	@ (80181c0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8017ffa:	400a      	ands	r2, r1
 8017ffc:	801a      	strh	r2, [r3, #0]
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	001a      	movs	r2, r3
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	781b      	ldrb	r3, [r3, #0]
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	18d3      	adds	r3, r2, r3
 801800c:	183a      	adds	r2, r7, r0
 801800e:	8812      	ldrh	r2, [r2, #0]
 8018010:	496c      	ldr	r1, [pc, #432]	@ (80181c4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8018012:	430a      	orrs	r2, r1
 8018014:	b292      	uxth	r2, r2
 8018016:	801a      	strh	r2, [r3, #0]
 8018018:	e2ed      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801801a:	1dbb      	adds	r3, r7, #6
 801801c:	881a      	ldrh	r2, [r3, #0]
 801801e:	2380      	movs	r3, #128	@ 0x80
 8018020:	01db      	lsls	r3, r3, #7
 8018022:	4013      	ands	r3, r2
 8018024:	d01a      	beq.n	801805c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	001a      	movs	r2, r3
 801802c:	68bb      	ldr	r3, [r7, #8]
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	009b      	lsls	r3, r3, #2
 8018032:	18d3      	adds	r3, r2, r3
 8018034:	881b      	ldrh	r3, [r3, #0]
 8018036:	b29a      	uxth	r2, r3
 8018038:	208a      	movs	r0, #138	@ 0x8a
 801803a:	183b      	adds	r3, r7, r0
 801803c:	4960      	ldr	r1, [pc, #384]	@ (80181c0 <HAL_PCD_EP_DB_Transmit+0x384>)
 801803e:	400a      	ands	r2, r1
 8018040:	801a      	strh	r2, [r3, #0]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	001a      	movs	r2, r3
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	009b      	lsls	r3, r3, #2
 801804e:	18d3      	adds	r3, r2, r3
 8018050:	183a      	adds	r2, r7, r0
 8018052:	8812      	ldrh	r2, [r2, #0]
 8018054:	495b      	ldr	r1, [pc, #364]	@ (80181c4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8018056:	430a      	orrs	r2, r1
 8018058:	b292      	uxth	r2, r2
 801805a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	2224      	movs	r2, #36	@ 0x24
 8018060:	5c9b      	ldrb	r3, [r3, r2]
 8018062:	2b01      	cmp	r3, #1
 8018064:	d000      	beq.n	8018068 <HAL_PCD_EP_DB_Transmit+0x22c>
 8018066:	e2c6      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8018068:	68bb      	ldr	r3, [r7, #8]
 801806a:	695a      	ldr	r2, [r3, #20]
 801806c:	2186      	movs	r1, #134	@ 0x86
 801806e:	187b      	adds	r3, r7, r1
 8018070:	881b      	ldrh	r3, [r3, #0]
 8018072:	18d2      	adds	r2, r2, r3
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	69da      	ldr	r2, [r3, #28]
 801807c:	187b      	adds	r3, r7, r1
 801807e:	881b      	ldrh	r3, [r3, #0]
 8018080:	18d2      	adds	r2, r2, r3
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	6a1a      	ldr	r2, [r3, #32]
 801808a:	68bb      	ldr	r3, [r7, #8]
 801808c:	691b      	ldr	r3, [r3, #16]
 801808e:	429a      	cmp	r2, r3
 8018090:	d30c      	bcc.n	80180ac <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	691b      	ldr	r3, [r3, #16]
 8018096:	218c      	movs	r1, #140	@ 0x8c
 8018098:	187a      	adds	r2, r7, r1
 801809a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801809c:	68bb      	ldr	r3, [r7, #8]
 801809e:	6a1a      	ldr	r2, [r3, #32]
 80180a0:	187b      	adds	r3, r7, r1
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	1ad2      	subs	r2, r2, r3
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	621a      	str	r2, [r3, #32]
 80180aa:	e01a      	b.n	80180e2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	6a1b      	ldr	r3, [r3, #32]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d10a      	bne.n	80180ca <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80180b4:	2386      	movs	r3, #134	@ 0x86
 80180b6:	18fb      	adds	r3, r7, r3
 80180b8:	881b      	ldrh	r3, [r3, #0]
 80180ba:	228c      	movs	r2, #140	@ 0x8c
 80180bc:	18ba      	adds	r2, r7, r2
 80180be:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	2224      	movs	r2, #36	@ 0x24
 80180c4:	2100      	movs	r1, #0
 80180c6:	5499      	strb	r1, [r3, r2]
 80180c8:	e00b      	b.n	80180e2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	2224      	movs	r2, #36	@ 0x24
 80180ce:	2100      	movs	r1, #0
 80180d0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80180d2:	68bb      	ldr	r3, [r7, #8]
 80180d4:	6a1b      	ldr	r3, [r3, #32]
 80180d6:	228c      	movs	r2, #140	@ 0x8c
 80180d8:	18ba      	adds	r2, r7, r2
 80180da:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	2200      	movs	r2, #0
 80180e0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	785b      	ldrb	r3, [r3, #1]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d000      	beq.n	80180ec <HAL_PCD_EP_DB_Transmit+0x2b0>
 80180ea:	e06d      	b.n	80181c8 <HAL_PCD_EP_DB_Transmit+0x38c>
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	2250      	movs	r2, #80	@ 0x50
 80180f8:	5a9b      	ldrh	r3, [r3, r2]
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	001a      	movs	r2, r3
 80180fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018100:	189b      	adds	r3, r3, r2
 8018102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	781b      	ldrb	r3, [r3, #0]
 8018108:	00da      	lsls	r2, r3, #3
 801810a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801810c:	18d3      	adds	r3, r2, r3
 801810e:	4a29      	ldr	r2, [pc, #164]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8018110:	4694      	mov	ip, r2
 8018112:	4463      	add	r3, ip
 8018114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018118:	881b      	ldrh	r3, [r3, #0]
 801811a:	b29b      	uxth	r3, r3
 801811c:	059b      	lsls	r3, r3, #22
 801811e:	0d9b      	lsrs	r3, r3, #22
 8018120:	b29a      	uxth	r2, r3
 8018122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018124:	801a      	strh	r2, [r3, #0]
 8018126:	228c      	movs	r2, #140	@ 0x8c
 8018128:	18bb      	adds	r3, r7, r2
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	2b3e      	cmp	r3, #62	@ 0x3e
 801812e:	d91a      	bls.n	8018166 <HAL_PCD_EP_DB_Transmit+0x32a>
 8018130:	18bb      	adds	r3, r7, r2
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	095b      	lsrs	r3, r3, #5
 8018136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018138:	18bb      	adds	r3, r7, r2
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	221f      	movs	r2, #31
 801813e:	4013      	ands	r3, r2
 8018140:	d102      	bne.n	8018148 <HAL_PCD_EP_DB_Transmit+0x30c>
 8018142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018144:	3b01      	subs	r3, #1
 8018146:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801814a:	881b      	ldrh	r3, [r3, #0]
 801814c:	b29a      	uxth	r2, r3
 801814e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018150:	b29b      	uxth	r3, r3
 8018152:	029b      	lsls	r3, r3, #10
 8018154:	b29b      	uxth	r3, r3
 8018156:	4313      	orrs	r3, r2
 8018158:	b29b      	uxth	r3, r3
 801815a:	4a17      	ldr	r2, [pc, #92]	@ (80181b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801815c:	4313      	orrs	r3, r2
 801815e:	b29a      	uxth	r2, r3
 8018160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018162:	801a      	strh	r2, [r3, #0]
 8018164:	e04f      	b.n	8018206 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8018166:	238c      	movs	r3, #140	@ 0x8c
 8018168:	18fb      	adds	r3, r7, r3
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d108      	bne.n	8018182 <HAL_PCD_EP_DB_Transmit+0x346>
 8018170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018172:	881b      	ldrh	r3, [r3, #0]
 8018174:	b29b      	uxth	r3, r3
 8018176:	4a10      	ldr	r2, [pc, #64]	@ (80181b8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8018178:	4313      	orrs	r3, r2
 801817a:	b29a      	uxth	r2, r3
 801817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801817e:	801a      	strh	r2, [r3, #0]
 8018180:	e041      	b.n	8018206 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8018182:	228c      	movs	r2, #140	@ 0x8c
 8018184:	18bb      	adds	r3, r7, r2
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	085b      	lsrs	r3, r3, #1
 801818a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801818c:	18bb      	adds	r3, r7, r2
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	2201      	movs	r2, #1
 8018192:	4013      	ands	r3, r2
 8018194:	d002      	beq.n	801819c <HAL_PCD_EP_DB_Transmit+0x360>
 8018196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018198:	3301      	adds	r3, #1
 801819a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801819c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801819e:	881b      	ldrh	r3, [r3, #0]
 80181a0:	b29a      	uxth	r2, r3
 80181a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	029b      	lsls	r3, r3, #10
 80181a8:	b29b      	uxth	r3, r3
 80181aa:	4313      	orrs	r3, r2
 80181ac:	b29a      	uxth	r2, r3
 80181ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181b0:	801a      	strh	r2, [r3, #0]
 80181b2:	e028      	b.n	8018206 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80181b4:	00000402 	.word	0x00000402
 80181b8:	ffff8000 	.word	0xffff8000
 80181bc:	00000406 	.word	0x00000406
 80181c0:	ffff8f8f 	.word	0xffff8f8f
 80181c4:	ffffc080 	.word	0xffffc080
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	785b      	ldrb	r3, [r3, #1]
 80181cc:	2b01      	cmp	r3, #1
 80181ce:	d11a      	bne.n	8018206 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2250      	movs	r2, #80	@ 0x50
 80181dc:	5a9b      	ldrh	r3, [r3, r2]
 80181de:	b29b      	uxth	r3, r3
 80181e0:	001a      	movs	r2, r3
 80181e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181e4:	189b      	adds	r3, r3, r2
 80181e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	781b      	ldrb	r3, [r3, #0]
 80181ec:	00da      	lsls	r2, r3, #3
 80181ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181f0:	18d3      	adds	r3, r2, r3
 80181f2:	4adb      	ldr	r2, [pc, #876]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x724>)
 80181f4:	4694      	mov	ip, r2
 80181f6:	4463      	add	r3, ip
 80181f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80181fa:	238c      	movs	r3, #140	@ 0x8c
 80181fc:	18fb      	adds	r3, r7, r3
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	b29a      	uxth	r2, r3
 8018202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018204:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	6818      	ldr	r0, [r3, #0]
 801820a:	68bb      	ldr	r3, [r7, #8]
 801820c:	6959      	ldr	r1, [r3, #20]
 801820e:	68bb      	ldr	r3, [r7, #8]
 8018210:	891a      	ldrh	r2, [r3, #8]
 8018212:	238c      	movs	r3, #140	@ 0x8c
 8018214:	18fb      	adds	r3, r7, r3
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	b29b      	uxth	r3, r3
 801821a:	f006 fb85 	bl	801e928 <USB_WritePMA>
 801821e:	e1ea      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2250      	movs	r2, #80	@ 0x50
 8018226:	5a9b      	ldrh	r3, [r3, r2]
 8018228:	b29b      	uxth	r3, r3
 801822a:	001a      	movs	r2, r3
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	00db      	lsls	r3, r3, #3
 8018232:	18d2      	adds	r2, r2, r3
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	18d3      	adds	r3, r2, r3
 801823a:	4aca      	ldr	r2, [pc, #808]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x728>)
 801823c:	4694      	mov	ip, r2
 801823e:	4463      	add	r3, ip
 8018240:	881a      	ldrh	r2, [r3, #0]
 8018242:	2186      	movs	r1, #134	@ 0x86
 8018244:	187b      	adds	r3, r7, r1
 8018246:	0592      	lsls	r2, r2, #22
 8018248:	0d92      	lsrs	r2, r2, #22
 801824a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	699a      	ldr	r2, [r3, #24]
 8018250:	187b      	adds	r3, r7, r1
 8018252:	881b      	ldrh	r3, [r3, #0]
 8018254:	429a      	cmp	r2, r3
 8018256:	d307      	bcc.n	8018268 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	699a      	ldr	r2, [r3, #24]
 801825c:	187b      	adds	r3, r7, r1
 801825e:	881b      	ldrh	r3, [r3, #0]
 8018260:	1ad2      	subs	r2, r2, r3
 8018262:	68bb      	ldr	r3, [r7, #8]
 8018264:	619a      	str	r2, [r3, #24]
 8018266:	e002      	b.n	801826e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	2200      	movs	r2, #0
 801826c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801826e:	68bb      	ldr	r3, [r7, #8]
 8018270:	699b      	ldr	r3, [r3, #24]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d000      	beq.n	8018278 <HAL_PCD_EP_DB_Transmit+0x43c>
 8018276:	e0bb      	b.n	80183f0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	785b      	ldrb	r3, [r3, #1]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d125      	bne.n	80182cc <HAL_PCD_EP_DB_Transmit+0x490>
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	2250      	movs	r2, #80	@ 0x50
 801828c:	5a9b      	ldrh	r3, [r3, r2]
 801828e:	b29b      	uxth	r3, r3
 8018290:	001a      	movs	r2, r3
 8018292:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018294:	189b      	adds	r3, r3, r2
 8018296:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	00da      	lsls	r2, r3, #3
 801829e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80182a0:	18d3      	adds	r3, r2, r3
 80182a2:	4aaf      	ldr	r2, [pc, #700]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x724>)
 80182a4:	4694      	mov	ip, r2
 80182a6:	4463      	add	r3, ip
 80182a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80182aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182ac:	881b      	ldrh	r3, [r3, #0]
 80182ae:	b29b      	uxth	r3, r3
 80182b0:	059b      	lsls	r3, r3, #22
 80182b2:	0d9b      	lsrs	r3, r3, #22
 80182b4:	b29a      	uxth	r2, r3
 80182b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182b8:	801a      	strh	r2, [r3, #0]
 80182ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182bc:	881b      	ldrh	r3, [r3, #0]
 80182be:	b29b      	uxth	r3, r3
 80182c0:	4aa9      	ldr	r2, [pc, #676]	@ (8018568 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80182c2:	4313      	orrs	r3, r2
 80182c4:	b29a      	uxth	r2, r3
 80182c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182c8:	801a      	strh	r2, [r3, #0]
 80182ca:	e01b      	b.n	8018304 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	785b      	ldrb	r3, [r3, #1]
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d117      	bne.n	8018304 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	2250      	movs	r2, #80	@ 0x50
 80182e0:	5a9b      	ldrh	r3, [r3, r2]
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	001a      	movs	r2, r3
 80182e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182e8:	189b      	adds	r3, r3, r2
 80182ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	781b      	ldrb	r3, [r3, #0]
 80182f0:	00da      	lsls	r2, r3, #3
 80182f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182f4:	18d3      	adds	r3, r2, r3
 80182f6:	4a9a      	ldr	r2, [pc, #616]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x724>)
 80182f8:	4694      	mov	ip, r2
 80182fa:	4463      	add	r3, ip
 80182fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80182fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8018300:	2200      	movs	r2, #0
 8018302:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	677b      	str	r3, [r7, #116]	@ 0x74
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	785b      	ldrb	r3, [r3, #1]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d12b      	bne.n	801836a <HAL_PCD_EP_DB_Transmit+0x52e>
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	2250      	movs	r2, #80	@ 0x50
 801831e:	5a9b      	ldrh	r3, [r3, r2]
 8018320:	b29b      	uxth	r3, r3
 8018322:	001a      	movs	r2, r3
 8018324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018326:	189b      	adds	r3, r3, r2
 8018328:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	00da      	lsls	r2, r3, #3
 8018330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018332:	18d3      	adds	r3, r2, r3
 8018334:	4a8b      	ldr	r2, [pc, #556]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x728>)
 8018336:	4694      	mov	ip, r2
 8018338:	4463      	add	r3, ip
 801833a:	2180      	movs	r1, #128	@ 0x80
 801833c:	187a      	adds	r2, r7, r1
 801833e:	6013      	str	r3, [r2, #0]
 8018340:	187b      	adds	r3, r7, r1
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	881b      	ldrh	r3, [r3, #0]
 8018346:	b29b      	uxth	r3, r3
 8018348:	059b      	lsls	r3, r3, #22
 801834a:	0d9b      	lsrs	r3, r3, #22
 801834c:	b29a      	uxth	r2, r3
 801834e:	187b      	adds	r3, r7, r1
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	801a      	strh	r2, [r3, #0]
 8018354:	187b      	adds	r3, r7, r1
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	881b      	ldrh	r3, [r3, #0]
 801835a:	b29b      	uxth	r3, r3
 801835c:	4a82      	ldr	r2, [pc, #520]	@ (8018568 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801835e:	4313      	orrs	r3, r2
 8018360:	b29a      	uxth	r2, r3
 8018362:	187b      	adds	r3, r7, r1
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	801a      	strh	r2, [r3, #0]
 8018368:	e018      	b.n	801839c <HAL_PCD_EP_DB_Transmit+0x560>
 801836a:	68bb      	ldr	r3, [r7, #8]
 801836c:	785b      	ldrb	r3, [r3, #1]
 801836e:	2b01      	cmp	r3, #1
 8018370:	d114      	bne.n	801839c <HAL_PCD_EP_DB_Transmit+0x560>
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	2250      	movs	r2, #80	@ 0x50
 8018378:	5a9b      	ldrh	r3, [r3, r2]
 801837a:	b29b      	uxth	r3, r3
 801837c:	001a      	movs	r2, r3
 801837e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018380:	189b      	adds	r3, r3, r2
 8018382:	677b      	str	r3, [r7, #116]	@ 0x74
 8018384:	68bb      	ldr	r3, [r7, #8]
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	00da      	lsls	r2, r3, #3
 801838a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801838c:	18d3      	adds	r3, r2, r3
 801838e:	4a75      	ldr	r2, [pc, #468]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x728>)
 8018390:	4694      	mov	ip, r2
 8018392:	4463      	add	r3, ip
 8018394:	673b      	str	r3, [r7, #112]	@ 0x70
 8018396:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018398:	2200      	movs	r2, #0
 801839a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	781a      	ldrb	r2, [r3, #0]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	0011      	movs	r1, r2
 80183a4:	0018      	movs	r0, r3
 80183a6:	f008 fb43 	bl	8020a30 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80183aa:	1dbb      	adds	r3, r7, #6
 80183ac:	881a      	ldrh	r2, [r3, #0]
 80183ae:	2380      	movs	r3, #128	@ 0x80
 80183b0:	01db      	lsls	r3, r3, #7
 80183b2:	4013      	ands	r3, r2
 80183b4:	d000      	beq.n	80183b8 <HAL_PCD_EP_DB_Transmit+0x57c>
 80183b6:	e11e      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	001a      	movs	r2, r3
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	009b      	lsls	r3, r3, #2
 80183c4:	18d3      	adds	r3, r2, r3
 80183c6:	881b      	ldrh	r3, [r3, #0]
 80183c8:	b29a      	uxth	r2, r3
 80183ca:	2088      	movs	r0, #136	@ 0x88
 80183cc:	183b      	adds	r3, r7, r0
 80183ce:	4967      	ldr	r1, [pc, #412]	@ (801856c <HAL_PCD_EP_DB_Transmit+0x730>)
 80183d0:	400a      	ands	r2, r1
 80183d2:	801a      	strh	r2, [r3, #0]
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	001a      	movs	r2, r3
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	009b      	lsls	r3, r3, #2
 80183e0:	18d3      	adds	r3, r2, r3
 80183e2:	183a      	adds	r2, r7, r0
 80183e4:	8812      	ldrh	r2, [r2, #0]
 80183e6:	4962      	ldr	r1, [pc, #392]	@ (8018570 <HAL_PCD_EP_DB_Transmit+0x734>)
 80183e8:	430a      	orrs	r2, r1
 80183ea:	b292      	uxth	r2, r2
 80183ec:	801a      	strh	r2, [r3, #0]
 80183ee:	e102      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80183f0:	1dbb      	adds	r3, r7, #6
 80183f2:	881a      	ldrh	r2, [r3, #0]
 80183f4:	2380      	movs	r3, #128	@ 0x80
 80183f6:	01db      	lsls	r3, r3, #7
 80183f8:	4013      	ands	r3, r2
 80183fa:	d11a      	bne.n	8018432 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	001a      	movs	r2, r3
 8018402:	68bb      	ldr	r3, [r7, #8]
 8018404:	781b      	ldrb	r3, [r3, #0]
 8018406:	009b      	lsls	r3, r3, #2
 8018408:	18d3      	adds	r3, r2, r3
 801840a:	881b      	ldrh	r3, [r3, #0]
 801840c:	b29a      	uxth	r2, r3
 801840e:	204e      	movs	r0, #78	@ 0x4e
 8018410:	183b      	adds	r3, r7, r0
 8018412:	4956      	ldr	r1, [pc, #344]	@ (801856c <HAL_PCD_EP_DB_Transmit+0x730>)
 8018414:	400a      	ands	r2, r1
 8018416:	801a      	strh	r2, [r3, #0]
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	001a      	movs	r2, r3
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	781b      	ldrb	r3, [r3, #0]
 8018422:	009b      	lsls	r3, r3, #2
 8018424:	18d3      	adds	r3, r2, r3
 8018426:	183a      	adds	r2, r7, r0
 8018428:	8812      	ldrh	r2, [r2, #0]
 801842a:	4951      	ldr	r1, [pc, #324]	@ (8018570 <HAL_PCD_EP_DB_Transmit+0x734>)
 801842c:	430a      	orrs	r2, r1
 801842e:	b292      	uxth	r2, r2
 8018430:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	2224      	movs	r2, #36	@ 0x24
 8018436:	5c9b      	ldrb	r3, [r3, r2]
 8018438:	2b01      	cmp	r3, #1
 801843a:	d000      	beq.n	801843e <HAL_PCD_EP_DB_Transmit+0x602>
 801843c:	e0db      	b.n	80185f6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	695a      	ldr	r2, [r3, #20]
 8018442:	2186      	movs	r1, #134	@ 0x86
 8018444:	187b      	adds	r3, r7, r1
 8018446:	881b      	ldrh	r3, [r3, #0]
 8018448:	18d2      	adds	r2, r2, r3
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	69da      	ldr	r2, [r3, #28]
 8018452:	187b      	adds	r3, r7, r1
 8018454:	881b      	ldrh	r3, [r3, #0]
 8018456:	18d2      	adds	r2, r2, r3
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	6a1a      	ldr	r2, [r3, #32]
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	691b      	ldr	r3, [r3, #16]
 8018464:	429a      	cmp	r2, r3
 8018466:	d30c      	bcc.n	8018482 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	691b      	ldr	r3, [r3, #16]
 801846c:	218c      	movs	r1, #140	@ 0x8c
 801846e:	187a      	adds	r2, r7, r1
 8018470:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	6a1a      	ldr	r2, [r3, #32]
 8018476:	187b      	adds	r3, r7, r1
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	1ad2      	subs	r2, r2, r3
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	621a      	str	r2, [r3, #32]
 8018480:	e01a      	b.n	80184b8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8018482:	68bb      	ldr	r3, [r7, #8]
 8018484:	6a1b      	ldr	r3, [r3, #32]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d10a      	bne.n	80184a0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801848a:	2386      	movs	r3, #134	@ 0x86
 801848c:	18fb      	adds	r3, r7, r3
 801848e:	881b      	ldrh	r3, [r3, #0]
 8018490:	228c      	movs	r2, #140	@ 0x8c
 8018492:	18ba      	adds	r2, r7, r2
 8018494:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	2224      	movs	r2, #36	@ 0x24
 801849a:	2100      	movs	r1, #0
 801849c:	5499      	strb	r1, [r3, r2]
 801849e:	e00b      	b.n	80184b8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	6a1b      	ldr	r3, [r3, #32]
 80184a4:	228c      	movs	r2, #140	@ 0x8c
 80184a6:	18ba      	adds	r2, r7, r2
 80184a8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	2200      	movs	r2, #0
 80184ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80184b0:	68bb      	ldr	r3, [r7, #8]
 80184b2:	2224      	movs	r2, #36	@ 0x24
 80184b4:	2100      	movs	r1, #0
 80184b6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	785b      	ldrb	r3, [r3, #1]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d000      	beq.n	80184c8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80184c6:	e06e      	b.n	80185a6 <HAL_PCD_EP_DB_Transmit+0x76a>
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	2250      	movs	r2, #80	@ 0x50
 80184d4:	5a9b      	ldrh	r3, [r3, r2]
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	001a      	movs	r2, r3
 80184da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184dc:	189b      	adds	r3, r3, r2
 80184de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	781b      	ldrb	r3, [r3, #0]
 80184e4:	00da      	lsls	r2, r3, #3
 80184e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184e8:	18d3      	adds	r3, r2, r3
 80184ea:	4a1e      	ldr	r2, [pc, #120]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x728>)
 80184ec:	4694      	mov	ip, r2
 80184ee:	4463      	add	r3, ip
 80184f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80184f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184f4:	881b      	ldrh	r3, [r3, #0]
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	059b      	lsls	r3, r3, #22
 80184fa:	0d9b      	lsrs	r3, r3, #22
 80184fc:	b29a      	uxth	r2, r3
 80184fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018500:	801a      	strh	r2, [r3, #0]
 8018502:	228c      	movs	r2, #140	@ 0x8c
 8018504:	18bb      	adds	r3, r7, r2
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	2b3e      	cmp	r3, #62	@ 0x3e
 801850a:	d91a      	bls.n	8018542 <HAL_PCD_EP_DB_Transmit+0x706>
 801850c:	18bb      	adds	r3, r7, r2
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	095b      	lsrs	r3, r3, #5
 8018512:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018514:	18bb      	adds	r3, r7, r2
 8018516:	681b      	ldr	r3, [r3, #0]
 8018518:	221f      	movs	r2, #31
 801851a:	4013      	ands	r3, r2
 801851c:	d102      	bne.n	8018524 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801851e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018520:	3b01      	subs	r3, #1
 8018522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018526:	881b      	ldrh	r3, [r3, #0]
 8018528:	b29a      	uxth	r2, r3
 801852a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801852c:	b29b      	uxth	r3, r3
 801852e:	029b      	lsls	r3, r3, #10
 8018530:	b29b      	uxth	r3, r3
 8018532:	4313      	orrs	r3, r2
 8018534:	b29b      	uxth	r3, r3
 8018536:	4a0c      	ldr	r2, [pc, #48]	@ (8018568 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8018538:	4313      	orrs	r3, r2
 801853a:	b29a      	uxth	r2, r3
 801853c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801853e:	801a      	strh	r2, [r3, #0]
 8018540:	e04d      	b.n	80185de <HAL_PCD_EP_DB_Transmit+0x7a2>
 8018542:	238c      	movs	r3, #140	@ 0x8c
 8018544:	18fb      	adds	r3, r7, r3
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d113      	bne.n	8018574 <HAL_PCD_EP_DB_Transmit+0x738>
 801854c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801854e:	881b      	ldrh	r3, [r3, #0]
 8018550:	b29b      	uxth	r3, r3
 8018552:	4a05      	ldr	r2, [pc, #20]	@ (8018568 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8018554:	4313      	orrs	r3, r2
 8018556:	b29a      	uxth	r2, r3
 8018558:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801855a:	801a      	strh	r2, [r3, #0]
 801855c:	e03f      	b.n	80185de <HAL_PCD_EP_DB_Transmit+0x7a2>
 801855e:	46c0      	nop			@ (mov r8, r8)
 8018560:	00000402 	.word	0x00000402
 8018564:	00000406 	.word	0x00000406
 8018568:	ffff8000 	.word	0xffff8000
 801856c:	ffff8f8f 	.word	0xffff8f8f
 8018570:	ffffc080 	.word	0xffffc080
 8018574:	228c      	movs	r2, #140	@ 0x8c
 8018576:	18bb      	adds	r3, r7, r2
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	085b      	lsrs	r3, r3, #1
 801857c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801857e:	18bb      	adds	r3, r7, r2
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	2201      	movs	r2, #1
 8018584:	4013      	ands	r3, r2
 8018586:	d002      	beq.n	801858e <HAL_PCD_EP_DB_Transmit+0x752>
 8018588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801858a:	3301      	adds	r3, #1
 801858c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801858e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018590:	881b      	ldrh	r3, [r3, #0]
 8018592:	b29a      	uxth	r2, r3
 8018594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018596:	b29b      	uxth	r3, r3
 8018598:	029b      	lsls	r3, r3, #10
 801859a:	b29b      	uxth	r3, r3
 801859c:	4313      	orrs	r3, r2
 801859e:	b29a      	uxth	r2, r3
 80185a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80185a2:	801a      	strh	r2, [r3, #0]
 80185a4:	e01b      	b.n	80185de <HAL_PCD_EP_DB_Transmit+0x7a2>
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	785b      	ldrb	r3, [r3, #1]
 80185aa:	2b01      	cmp	r3, #1
 80185ac:	d117      	bne.n	80185de <HAL_PCD_EP_DB_Transmit+0x7a2>
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	2250      	movs	r2, #80	@ 0x50
 80185b4:	5a9b      	ldrh	r3, [r3, r2]
 80185b6:	b29b      	uxth	r3, r3
 80185b8:	001a      	movs	r2, r3
 80185ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80185bc:	189b      	adds	r3, r3, r2
 80185be:	657b      	str	r3, [r7, #84]	@ 0x54
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	781b      	ldrb	r3, [r3, #0]
 80185c4:	00da      	lsls	r2, r3, #3
 80185c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80185c8:	18d3      	adds	r3, r2, r3
 80185ca:	4a21      	ldr	r2, [pc, #132]	@ (8018650 <HAL_PCD_EP_DB_Transmit+0x814>)
 80185cc:	4694      	mov	ip, r2
 80185ce:	4463      	add	r3, ip
 80185d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80185d2:	238c      	movs	r3, #140	@ 0x8c
 80185d4:	18fb      	adds	r3, r7, r3
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	b29a      	uxth	r2, r3
 80185da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	6818      	ldr	r0, [r3, #0]
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	6959      	ldr	r1, [r3, #20]
 80185e6:	68bb      	ldr	r3, [r7, #8]
 80185e8:	895a      	ldrh	r2, [r3, #10]
 80185ea:	238c      	movs	r3, #140	@ 0x8c
 80185ec:	18fb      	adds	r3, r7, r3
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	f006 f999 	bl	801e928 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	001a      	movs	r2, r3
 80185fc:	68bb      	ldr	r3, [r7, #8]
 80185fe:	781b      	ldrb	r3, [r3, #0]
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	18d3      	adds	r3, r2, r3
 8018604:	881b      	ldrh	r3, [r3, #0]
 8018606:	b29a      	uxth	r2, r3
 8018608:	2014      	movs	r0, #20
 801860a:	183b      	adds	r3, r7, r0
 801860c:	4911      	ldr	r1, [pc, #68]	@ (8018654 <HAL_PCD_EP_DB_Transmit+0x818>)
 801860e:	400a      	ands	r2, r1
 8018610:	801a      	strh	r2, [r3, #0]
 8018612:	183b      	adds	r3, r7, r0
 8018614:	183a      	adds	r2, r7, r0
 8018616:	8812      	ldrh	r2, [r2, #0]
 8018618:	2110      	movs	r1, #16
 801861a:	404a      	eors	r2, r1
 801861c:	801a      	strh	r2, [r3, #0]
 801861e:	183b      	adds	r3, r7, r0
 8018620:	183a      	adds	r2, r7, r0
 8018622:	8812      	ldrh	r2, [r2, #0]
 8018624:	2120      	movs	r1, #32
 8018626:	404a      	eors	r2, r1
 8018628:	801a      	strh	r2, [r3, #0]
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	001a      	movs	r2, r3
 8018630:	68bb      	ldr	r3, [r7, #8]
 8018632:	781b      	ldrb	r3, [r3, #0]
 8018634:	009b      	lsls	r3, r3, #2
 8018636:	18d3      	adds	r3, r2, r3
 8018638:	183a      	adds	r2, r7, r0
 801863a:	8812      	ldrh	r2, [r2, #0]
 801863c:	4906      	ldr	r1, [pc, #24]	@ (8018658 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801863e:	430a      	orrs	r2, r1
 8018640:	b292      	uxth	r2, r2
 8018642:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8018644:	2300      	movs	r3, #0
}
 8018646:	0018      	movs	r0, r3
 8018648:	46bd      	mov	sp, r7
 801864a:	b024      	add	sp, #144	@ 0x90
 801864c:	bd80      	pop	{r7, pc}
 801864e:	46c0      	nop			@ (mov r8, r8)
 8018650:	00000406 	.word	0x00000406
 8018654:	ffff8fbf 	.word	0xffff8fbf
 8018658:	ffff8080 	.word	0xffff8080

0801865c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801865c:	b590      	push	{r4, r7, lr}
 801865e:	b087      	sub	sp, #28
 8018660:	af00      	add	r7, sp, #0
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	0008      	movs	r0, r1
 8018666:	0011      	movs	r1, r2
 8018668:	607b      	str	r3, [r7, #4]
 801866a:	240a      	movs	r4, #10
 801866c:	193b      	adds	r3, r7, r4
 801866e:	1c02      	adds	r2, r0, #0
 8018670:	801a      	strh	r2, [r3, #0]
 8018672:	2308      	movs	r3, #8
 8018674:	18fb      	adds	r3, r7, r3
 8018676:	1c0a      	adds	r2, r1, #0
 8018678:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801867a:	0021      	movs	r1, r4
 801867c:	187b      	adds	r3, r7, r1
 801867e:	881b      	ldrh	r3, [r3, #0]
 8018680:	2280      	movs	r2, #128	@ 0x80
 8018682:	4013      	ands	r3, r2
 8018684:	b29b      	uxth	r3, r3
 8018686:	2b00      	cmp	r3, #0
 8018688:	d00c      	beq.n	80186a4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801868a:	187b      	adds	r3, r7, r1
 801868c:	881b      	ldrh	r3, [r3, #0]
 801868e:	2207      	movs	r2, #7
 8018690:	4013      	ands	r3, r2
 8018692:	1c5a      	adds	r2, r3, #1
 8018694:	0013      	movs	r3, r2
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	189b      	adds	r3, r3, r2
 801869a:	00db      	lsls	r3, r3, #3
 801869c:	68fa      	ldr	r2, [r7, #12]
 801869e:	18d3      	adds	r3, r2, r3
 80186a0:	617b      	str	r3, [r7, #20]
 80186a2:	e00b      	b.n	80186bc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80186a4:	230a      	movs	r3, #10
 80186a6:	18fb      	adds	r3, r7, r3
 80186a8:	881a      	ldrh	r2, [r3, #0]
 80186aa:	0013      	movs	r3, r2
 80186ac:	009b      	lsls	r3, r3, #2
 80186ae:	189b      	adds	r3, r3, r2
 80186b0:	00db      	lsls	r3, r3, #3
 80186b2:	3369      	adds	r3, #105	@ 0x69
 80186b4:	33ff      	adds	r3, #255	@ 0xff
 80186b6:	68fa      	ldr	r2, [r7, #12]
 80186b8:	18d3      	adds	r3, r2, r3
 80186ba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80186bc:	2308      	movs	r3, #8
 80186be:	18fb      	adds	r3, r7, r3
 80186c0:	881b      	ldrh	r3, [r3, #0]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d107      	bne.n	80186d6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	2200      	movs	r2, #0
 80186ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	b29a      	uxth	r2, r3
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	80da      	strh	r2, [r3, #6]
 80186d4:	e00b      	b.n	80186ee <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	2201      	movs	r2, #1
 80186da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	b29a      	uxth	r2, r3
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	0c1b      	lsrs	r3, r3, #16
 80186e8:	b29a      	uxth	r2, r3
 80186ea:	697b      	ldr	r3, [r7, #20]
 80186ec:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80186ee:	2300      	movs	r3, #0
}
 80186f0:	0018      	movs	r0, r3
 80186f2:	46bd      	mov	sp, r7
 80186f4:	b007      	add	sp, #28
 80186f6:	bd90      	pop	{r4, r7, pc}

080186f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b084      	sub	sp, #16
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	23ba      	movs	r3, #186	@ 0xba
 801870a:	009b      	lsls	r3, r3, #2
 801870c:	2101      	movs	r1, #1
 801870e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8018710:	687a      	ldr	r2, [r7, #4]
 8018712:	23b8      	movs	r3, #184	@ 0xb8
 8018714:	009b      	lsls	r3, r3, #2
 8018716:	2100      	movs	r1, #0
 8018718:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2254      	movs	r2, #84	@ 0x54
 801871e:	5a9b      	ldrh	r3, [r3, r2]
 8018720:	b29b      	uxth	r3, r3
 8018722:	2201      	movs	r2, #1
 8018724:	4313      	orrs	r3, r2
 8018726:	b299      	uxth	r1, r3
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	2254      	movs	r2, #84	@ 0x54
 801872c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	2254      	movs	r2, #84	@ 0x54
 8018732:	5a9b      	ldrh	r3, [r3, r2]
 8018734:	b29b      	uxth	r3, r3
 8018736:	2202      	movs	r2, #2
 8018738:	4313      	orrs	r3, r2
 801873a:	b299      	uxth	r1, r3
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	2254      	movs	r2, #84	@ 0x54
 8018740:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018742:	2300      	movs	r3, #0
}
 8018744:	0018      	movs	r0, r3
 8018746:	46bd      	mov	sp, r7
 8018748:	b004      	add	sp, #16
 801874a:	bd80      	pop	{r7, pc}

0801874c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b082      	sub	sp, #8
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
 8018754:	000a      	movs	r2, r1
 8018756:	1cfb      	adds	r3, r7, #3
 8018758:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801875a:	46c0      	nop			@ (mov r8, r8)
 801875c:	46bd      	mov	sp, r7
 801875e:	b002      	add	sp, #8
 8018760:	bd80      	pop	{r7, pc}
	...

08018764 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8018768:	4b04      	ldr	r3, [pc, #16]	@ (801877c <HAL_PWR_EnableBkUpAccess+0x18>)
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	4b03      	ldr	r3, [pc, #12]	@ (801877c <HAL_PWR_EnableBkUpAccess+0x18>)
 801876e:	2180      	movs	r1, #128	@ 0x80
 8018770:	0049      	lsls	r1, r1, #1
 8018772:	430a      	orrs	r2, r1
 8018774:	601a      	str	r2, [r3, #0]
}
 8018776:	46c0      	nop			@ (mov r8, r8)
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}
 801877c:	40007000 	.word	0x40007000

08018780 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8018784:	4b04      	ldr	r3, [pc, #16]	@ (8018798 <HAL_PWR_DisableBkUpAccess+0x18>)
 8018786:	681a      	ldr	r2, [r3, #0]
 8018788:	4b03      	ldr	r3, [pc, #12]	@ (8018798 <HAL_PWR_DisableBkUpAccess+0x18>)
 801878a:	4904      	ldr	r1, [pc, #16]	@ (801879c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801878c:	400a      	ands	r2, r1
 801878e:	601a      	str	r2, [r3, #0]
}
 8018790:	46c0      	nop			@ (mov r8, r8)
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
 8018796:	46c0      	nop			@ (mov r8, r8)
 8018798:	40007000 	.word	0x40007000
 801879c:	fffffeff 	.word	0xfffffeff

080187a0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b086      	sub	sp, #24
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	6078      	str	r0, [r7, #4]
 80187a8:	000a      	movs	r2, r1
 80187aa:	1cfb      	adds	r3, r7, #3
 80187ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80187ae:	2300      	movs	r3, #0
 80187b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80187b2:	4b25      	ldr	r3, [pc, #148]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187b4:	681a      	ldr	r2, [r3, #0]
 80187b6:	2380      	movs	r3, #128	@ 0x80
 80187b8:	009b      	lsls	r3, r3, #2
 80187ba:	4013      	ands	r3, r2
 80187bc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80187be:	4b23      	ldr	r3, [pc, #140]	@ (801884c <HAL_PWR_EnterSTOPMode+0xac>)
 80187c0:	6a1b      	ldr	r3, [r3, #32]
 80187c2:	2201      	movs	r2, #1
 80187c4:	4013      	ands	r3, r2
 80187c6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d008      	beq.n	80187e0 <HAL_PWR_EnterSTOPMode+0x40>
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d005      	beq.n	80187e0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80187d4:	4b1c      	ldr	r3, [pc, #112]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187d6:	681a      	ldr	r2, [r3, #0]
 80187d8:	4b1b      	ldr	r3, [pc, #108]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187da:	491d      	ldr	r1, [pc, #116]	@ (8018850 <HAL_PWR_EnterSTOPMode+0xb0>)
 80187dc:	400a      	ands	r2, r1
 80187de:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80187e0:	4b19      	ldr	r3, [pc, #100]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80187e6:	697b      	ldr	r3, [r7, #20]
 80187e8:	2203      	movs	r2, #3
 80187ea:	4393      	bics	r3, r2
 80187ec:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80187ee:	697a      	ldr	r2, [r7, #20]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4313      	orrs	r3, r2
 80187f4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80187f6:	4b14      	ldr	r3, [pc, #80]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187f8:	697a      	ldr	r2, [r7, #20]
 80187fa:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80187fc:	4b15      	ldr	r3, [pc, #84]	@ (8018854 <HAL_PWR_EnterSTOPMode+0xb4>)
 80187fe:	691a      	ldr	r2, [r3, #16]
 8018800:	4b14      	ldr	r3, [pc, #80]	@ (8018854 <HAL_PWR_EnterSTOPMode+0xb4>)
 8018802:	2104      	movs	r1, #4
 8018804:	430a      	orrs	r2, r1
 8018806:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8018808:	1cfb      	adds	r3, r7, #3
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	2b01      	cmp	r3, #1
 801880e:	d101      	bne.n	8018814 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8018810:	bf30      	wfi
 8018812:	e002      	b.n	801881a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8018814:	bf40      	sev
    __WFE();
 8018816:	bf20      	wfe
    __WFE();
 8018818:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801881a:	4b0e      	ldr	r3, [pc, #56]	@ (8018854 <HAL_PWR_EnterSTOPMode+0xb4>)
 801881c:	691a      	ldr	r2, [r3, #16]
 801881e:	4b0d      	ldr	r3, [pc, #52]	@ (8018854 <HAL_PWR_EnterSTOPMode+0xb4>)
 8018820:	2104      	movs	r1, #4
 8018822:	438a      	bics	r2, r1
 8018824:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8018826:	693b      	ldr	r3, [r7, #16]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d009      	beq.n	8018840 <HAL_PWR_EnterSTOPMode+0xa0>
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d006      	beq.n	8018840 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8018832:	4b05      	ldr	r3, [pc, #20]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 8018834:	681a      	ldr	r2, [r3, #0]
 8018836:	4b04      	ldr	r3, [pc, #16]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xa8>)
 8018838:	2180      	movs	r1, #128	@ 0x80
 801883a:	0089      	lsls	r1, r1, #2
 801883c:	430a      	orrs	r2, r1
 801883e:	601a      	str	r2, [r3, #0]
  }
}
 8018840:	46c0      	nop			@ (mov r8, r8)
 8018842:	46bd      	mov	sp, r7
 8018844:	b006      	add	sp, #24
 8018846:	bd80      	pop	{r7, pc}
 8018848:	40007000 	.word	0x40007000
 801884c:	40010000 	.word	0x40010000
 8018850:	fffffdff 	.word	0xfffffdff
 8018854:	e000ed00 	.word	0xe000ed00

08018858 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801885c:	4b07      	ldr	r3, [pc, #28]	@ (801887c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	4b06      	ldr	r3, [pc, #24]	@ (801887c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8018862:	2102      	movs	r1, #2
 8018864:	430a      	orrs	r2, r1
 8018866:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8018868:	4b05      	ldr	r3, [pc, #20]	@ (8018880 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801886a:	691a      	ldr	r2, [r3, #16]
 801886c:	4b04      	ldr	r3, [pc, #16]	@ (8018880 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801886e:	2104      	movs	r1, #4
 8018870:	430a      	orrs	r2, r1
 8018872:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8018874:	bf30      	wfi
}
 8018876:	46c0      	nop			@ (mov r8, r8)
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	40007000 	.word	0x40007000
 8018880:	e000ed00 	.word	0xe000ed00

08018884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018884:	b5b0      	push	{r4, r5, r7, lr}
 8018886:	b08a      	sub	sp, #40	@ 0x28
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2b00      	cmp	r3, #0
 8018890:	d102      	bne.n	8018898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8018892:	2301      	movs	r3, #1
 8018894:	f000 fbbf 	bl	8019016 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018898:	4bc9      	ldr	r3, [pc, #804]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 801889a:	68db      	ldr	r3, [r3, #12]
 801889c:	220c      	movs	r2, #12
 801889e:	4013      	ands	r3, r2
 80188a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80188a2:	4bc7      	ldr	r3, [pc, #796]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80188a4:	68da      	ldr	r2, [r3, #12]
 80188a6:	2380      	movs	r3, #128	@ 0x80
 80188a8:	025b      	lsls	r3, r3, #9
 80188aa:	4013      	ands	r3, r2
 80188ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	2201      	movs	r2, #1
 80188b4:	4013      	ands	r3, r2
 80188b6:	d100      	bne.n	80188ba <HAL_RCC_OscConfig+0x36>
 80188b8:	e07e      	b.n	80189b8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	2b08      	cmp	r3, #8
 80188be:	d007      	beq.n	80188d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80188c0:	69fb      	ldr	r3, [r7, #28]
 80188c2:	2b0c      	cmp	r3, #12
 80188c4:	d112      	bne.n	80188ec <HAL_RCC_OscConfig+0x68>
 80188c6:	69ba      	ldr	r2, [r7, #24]
 80188c8:	2380      	movs	r3, #128	@ 0x80
 80188ca:	025b      	lsls	r3, r3, #9
 80188cc:	429a      	cmp	r2, r3
 80188ce:	d10d      	bne.n	80188ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80188d0:	4bbb      	ldr	r3, [pc, #748]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80188d2:	681a      	ldr	r2, [r3, #0]
 80188d4:	2380      	movs	r3, #128	@ 0x80
 80188d6:	029b      	lsls	r3, r3, #10
 80188d8:	4013      	ands	r3, r2
 80188da:	d100      	bne.n	80188de <HAL_RCC_OscConfig+0x5a>
 80188dc:	e06b      	b.n	80189b6 <HAL_RCC_OscConfig+0x132>
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	685b      	ldr	r3, [r3, #4]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d167      	bne.n	80189b6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80188e6:	2301      	movs	r3, #1
 80188e8:	f000 fb95 	bl	8019016 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	685a      	ldr	r2, [r3, #4]
 80188f0:	2380      	movs	r3, #128	@ 0x80
 80188f2:	025b      	lsls	r3, r3, #9
 80188f4:	429a      	cmp	r2, r3
 80188f6:	d107      	bne.n	8018908 <HAL_RCC_OscConfig+0x84>
 80188f8:	4bb1      	ldr	r3, [pc, #708]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80188fa:	681a      	ldr	r2, [r3, #0]
 80188fc:	4bb0      	ldr	r3, [pc, #704]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80188fe:	2180      	movs	r1, #128	@ 0x80
 8018900:	0249      	lsls	r1, r1, #9
 8018902:	430a      	orrs	r2, r1
 8018904:	601a      	str	r2, [r3, #0]
 8018906:	e027      	b.n	8018958 <HAL_RCC_OscConfig+0xd4>
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	685a      	ldr	r2, [r3, #4]
 801890c:	23a0      	movs	r3, #160	@ 0xa0
 801890e:	02db      	lsls	r3, r3, #11
 8018910:	429a      	cmp	r2, r3
 8018912:	d10e      	bne.n	8018932 <HAL_RCC_OscConfig+0xae>
 8018914:	4baa      	ldr	r3, [pc, #680]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018916:	681a      	ldr	r2, [r3, #0]
 8018918:	4ba9      	ldr	r3, [pc, #676]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 801891a:	2180      	movs	r1, #128	@ 0x80
 801891c:	02c9      	lsls	r1, r1, #11
 801891e:	430a      	orrs	r2, r1
 8018920:	601a      	str	r2, [r3, #0]
 8018922:	4ba7      	ldr	r3, [pc, #668]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018924:	681a      	ldr	r2, [r3, #0]
 8018926:	4ba6      	ldr	r3, [pc, #664]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018928:	2180      	movs	r1, #128	@ 0x80
 801892a:	0249      	lsls	r1, r1, #9
 801892c:	430a      	orrs	r2, r1
 801892e:	601a      	str	r2, [r3, #0]
 8018930:	e012      	b.n	8018958 <HAL_RCC_OscConfig+0xd4>
 8018932:	4ba3      	ldr	r3, [pc, #652]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018934:	681a      	ldr	r2, [r3, #0]
 8018936:	4ba2      	ldr	r3, [pc, #648]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018938:	49a2      	ldr	r1, [pc, #648]	@ (8018bc4 <HAL_RCC_OscConfig+0x340>)
 801893a:	400a      	ands	r2, r1
 801893c:	601a      	str	r2, [r3, #0]
 801893e:	4ba0      	ldr	r3, [pc, #640]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018940:	681a      	ldr	r2, [r3, #0]
 8018942:	2380      	movs	r3, #128	@ 0x80
 8018944:	025b      	lsls	r3, r3, #9
 8018946:	4013      	ands	r3, r2
 8018948:	60fb      	str	r3, [r7, #12]
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	4b9c      	ldr	r3, [pc, #624]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 801894e:	681a      	ldr	r2, [r3, #0]
 8018950:	4b9b      	ldr	r3, [pc, #620]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018952:	499d      	ldr	r1, [pc, #628]	@ (8018bc8 <HAL_RCC_OscConfig+0x344>)
 8018954:	400a      	ands	r2, r1
 8018956:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	685b      	ldr	r3, [r3, #4]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d015      	beq.n	801898c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018960:	f7f9 fbc8 	bl	80120f4 <HAL_GetTick>
 8018964:	0003      	movs	r3, r0
 8018966:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8018968:	e009      	b.n	801897e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801896a:	f7f9 fbc3 	bl	80120f4 <HAL_GetTick>
 801896e:	0002      	movs	r2, r0
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	1ad3      	subs	r3, r2, r3
 8018974:	2b64      	cmp	r3, #100	@ 0x64
 8018976:	d902      	bls.n	801897e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018978:	2303      	movs	r3, #3
 801897a:	f000 fb4c 	bl	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801897e:	4b90      	ldr	r3, [pc, #576]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018980:	681a      	ldr	r2, [r3, #0]
 8018982:	2380      	movs	r3, #128	@ 0x80
 8018984:	029b      	lsls	r3, r3, #10
 8018986:	4013      	ands	r3, r2
 8018988:	d0ef      	beq.n	801896a <HAL_RCC_OscConfig+0xe6>
 801898a:	e015      	b.n	80189b8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801898c:	f7f9 fbb2 	bl	80120f4 <HAL_GetTick>
 8018990:	0003      	movs	r3, r0
 8018992:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8018994:	e008      	b.n	80189a8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8018996:	f7f9 fbad 	bl	80120f4 <HAL_GetTick>
 801899a:	0002      	movs	r2, r0
 801899c:	697b      	ldr	r3, [r7, #20]
 801899e:	1ad3      	subs	r3, r2, r3
 80189a0:	2b64      	cmp	r3, #100	@ 0x64
 80189a2:	d901      	bls.n	80189a8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80189a4:	2303      	movs	r3, #3
 80189a6:	e336      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80189a8:	4b85      	ldr	r3, [pc, #532]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80189aa:	681a      	ldr	r2, [r3, #0]
 80189ac:	2380      	movs	r3, #128	@ 0x80
 80189ae:	029b      	lsls	r3, r3, #10
 80189b0:	4013      	ands	r3, r2
 80189b2:	d1f0      	bne.n	8018996 <HAL_RCC_OscConfig+0x112>
 80189b4:	e000      	b.n	80189b8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80189b6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	2202      	movs	r2, #2
 80189be:	4013      	ands	r3, r2
 80189c0:	d100      	bne.n	80189c4 <HAL_RCC_OscConfig+0x140>
 80189c2:	e099      	b.n	8018af8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	68db      	ldr	r3, [r3, #12]
 80189c8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80189ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189cc:	2220      	movs	r2, #32
 80189ce:	4013      	ands	r3, r2
 80189d0:	d009      	beq.n	80189e6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80189d2:	4b7b      	ldr	r3, [pc, #492]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80189d4:	681a      	ldr	r2, [r3, #0]
 80189d6:	4b7a      	ldr	r3, [pc, #488]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80189d8:	2120      	movs	r1, #32
 80189da:	430a      	orrs	r2, r1
 80189dc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80189de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189e0:	2220      	movs	r2, #32
 80189e2:	4393      	bics	r3, r2
 80189e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80189e6:	69fb      	ldr	r3, [r7, #28]
 80189e8:	2b04      	cmp	r3, #4
 80189ea:	d005      	beq.n	80189f8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80189ec:	69fb      	ldr	r3, [r7, #28]
 80189ee:	2b0c      	cmp	r3, #12
 80189f0:	d13e      	bne.n	8018a70 <HAL_RCC_OscConfig+0x1ec>
 80189f2:	69bb      	ldr	r3, [r7, #24]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d13b      	bne.n	8018a70 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80189f8:	4b71      	ldr	r3, [pc, #452]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	2204      	movs	r2, #4
 80189fe:	4013      	ands	r3, r2
 8018a00:	d004      	beq.n	8018a0c <HAL_RCC_OscConfig+0x188>
 8018a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d101      	bne.n	8018a0c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8018a08:	2301      	movs	r3, #1
 8018a0a:	e304      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	4a6e      	ldr	r2, [pc, #440]	@ (8018bcc <HAL_RCC_OscConfig+0x348>)
 8018a12:	4013      	ands	r3, r2
 8018a14:	0019      	movs	r1, r3
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	691b      	ldr	r3, [r3, #16]
 8018a1a:	021a      	lsls	r2, r3, #8
 8018a1c:	4b68      	ldr	r3, [pc, #416]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a1e:	430a      	orrs	r2, r1
 8018a20:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8018a22:	4b67      	ldr	r3, [pc, #412]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2209      	movs	r2, #9
 8018a28:	4393      	bics	r3, r2
 8018a2a:	0019      	movs	r1, r3
 8018a2c:	4b64      	ldr	r3, [pc, #400]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a30:	430a      	orrs	r2, r1
 8018a32:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018a34:	f000 fc42 	bl	80192bc <HAL_RCC_GetSysClockFreq>
 8018a38:	0001      	movs	r1, r0
 8018a3a:	4b61      	ldr	r3, [pc, #388]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	091b      	lsrs	r3, r3, #4
 8018a40:	220f      	movs	r2, #15
 8018a42:	4013      	ands	r3, r2
 8018a44:	4a62      	ldr	r2, [pc, #392]	@ (8018bd0 <HAL_RCC_OscConfig+0x34c>)
 8018a46:	5cd3      	ldrb	r3, [r2, r3]
 8018a48:	000a      	movs	r2, r1
 8018a4a:	40da      	lsrs	r2, r3
 8018a4c:	4b61      	ldr	r3, [pc, #388]	@ (8018bd4 <HAL_RCC_OscConfig+0x350>)
 8018a4e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8018a50:	4b61      	ldr	r3, [pc, #388]	@ (8018bd8 <HAL_RCC_OscConfig+0x354>)
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	2513      	movs	r5, #19
 8018a56:	197c      	adds	r4, r7, r5
 8018a58:	0018      	movs	r0, r3
 8018a5a:	f7f9 fb05 	bl	8012068 <HAL_InitTick>
 8018a5e:	0003      	movs	r3, r0
 8018a60:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8018a62:	197b      	adds	r3, r7, r5
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d046      	beq.n	8018af8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8018a6a:	197b      	adds	r3, r7, r5
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	e2d2      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8018a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d027      	beq.n	8018ac6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8018a76:	4b52      	ldr	r3, [pc, #328]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	2209      	movs	r2, #9
 8018a7c:	4393      	bics	r3, r2
 8018a7e:	0019      	movs	r1, r3
 8018a80:	4b4f      	ldr	r3, [pc, #316]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a84:	430a      	orrs	r2, r1
 8018a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018a88:	f7f9 fb34 	bl	80120f4 <HAL_GetTick>
 8018a8c:	0003      	movs	r3, r0
 8018a8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018a90:	e008      	b.n	8018aa4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018a92:	f7f9 fb2f 	bl	80120f4 <HAL_GetTick>
 8018a96:	0002      	movs	r2, r0
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	1ad3      	subs	r3, r2, r3
 8018a9c:	2b02      	cmp	r3, #2
 8018a9e:	d901      	bls.n	8018aa4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8018aa0:	2303      	movs	r3, #3
 8018aa2:	e2b8      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018aa4:	4b46      	ldr	r3, [pc, #280]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	2204      	movs	r2, #4
 8018aaa:	4013      	ands	r3, r2
 8018aac:	d0f1      	beq.n	8018a92 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018aae:	4b44      	ldr	r3, [pc, #272]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018ab0:	685b      	ldr	r3, [r3, #4]
 8018ab2:	4a46      	ldr	r2, [pc, #280]	@ (8018bcc <HAL_RCC_OscConfig+0x348>)
 8018ab4:	4013      	ands	r3, r2
 8018ab6:	0019      	movs	r1, r3
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	691b      	ldr	r3, [r3, #16]
 8018abc:	021a      	lsls	r2, r3, #8
 8018abe:	4b40      	ldr	r3, [pc, #256]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018ac0:	430a      	orrs	r2, r1
 8018ac2:	605a      	str	r2, [r3, #4]
 8018ac4:	e018      	b.n	8018af8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018ac8:	681a      	ldr	r2, [r3, #0]
 8018aca:	4b3d      	ldr	r3, [pc, #244]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018acc:	2101      	movs	r1, #1
 8018ace:	438a      	bics	r2, r1
 8018ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ad2:	f7f9 fb0f 	bl	80120f4 <HAL_GetTick>
 8018ad6:	0003      	movs	r3, r0
 8018ad8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018ada:	e008      	b.n	8018aee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018adc:	f7f9 fb0a 	bl	80120f4 <HAL_GetTick>
 8018ae0:	0002      	movs	r2, r0
 8018ae2:	697b      	ldr	r3, [r7, #20]
 8018ae4:	1ad3      	subs	r3, r2, r3
 8018ae6:	2b02      	cmp	r3, #2
 8018ae8:	d901      	bls.n	8018aee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8018aea:	2303      	movs	r3, #3
 8018aec:	e293      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018aee:	4b34      	ldr	r3, [pc, #208]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	2204      	movs	r2, #4
 8018af4:	4013      	ands	r3, r2
 8018af6:	d1f1      	bne.n	8018adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	2210      	movs	r2, #16
 8018afe:	4013      	ands	r3, r2
 8018b00:	d100      	bne.n	8018b04 <HAL_RCC_OscConfig+0x280>
 8018b02:	e0a2      	b.n	8018c4a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018b04:	69fb      	ldr	r3, [r7, #28]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d140      	bne.n	8018b8c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8018b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b0c:	681a      	ldr	r2, [r3, #0]
 8018b0e:	2380      	movs	r3, #128	@ 0x80
 8018b10:	009b      	lsls	r3, r3, #2
 8018b12:	4013      	ands	r3, r2
 8018b14:	d005      	beq.n	8018b22 <HAL_RCC_OscConfig+0x29e>
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	69db      	ldr	r3, [r3, #28]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d101      	bne.n	8018b22 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8018b1e:	2301      	movs	r3, #1
 8018b20:	e279      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018b22:	4b27      	ldr	r3, [pc, #156]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	4a2d      	ldr	r2, [pc, #180]	@ (8018bdc <HAL_RCC_OscConfig+0x358>)
 8018b28:	4013      	ands	r3, r2
 8018b2a:	0019      	movs	r1, r3
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b30:	4b23      	ldr	r3, [pc, #140]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b32:	430a      	orrs	r2, r1
 8018b34:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018b36:	4b22      	ldr	r3, [pc, #136]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b38:	685b      	ldr	r3, [r3, #4]
 8018b3a:	021b      	lsls	r3, r3, #8
 8018b3c:	0a19      	lsrs	r1, r3, #8
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	6a1b      	ldr	r3, [r3, #32]
 8018b42:	061a      	lsls	r2, r3, #24
 8018b44:	4b1e      	ldr	r3, [pc, #120]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b46:	430a      	orrs	r2, r1
 8018b48:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b4e:	0b5b      	lsrs	r3, r3, #13
 8018b50:	3301      	adds	r3, #1
 8018b52:	2280      	movs	r2, #128	@ 0x80
 8018b54:	0212      	lsls	r2, r2, #8
 8018b56:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8018b58:	4b19      	ldr	r3, [pc, #100]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b5a:	68db      	ldr	r3, [r3, #12]
 8018b5c:	091b      	lsrs	r3, r3, #4
 8018b5e:	210f      	movs	r1, #15
 8018b60:	400b      	ands	r3, r1
 8018b62:	491b      	ldr	r1, [pc, #108]	@ (8018bd0 <HAL_RCC_OscConfig+0x34c>)
 8018b64:	5ccb      	ldrb	r3, [r1, r3]
 8018b66:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8018b68:	4b1a      	ldr	r3, [pc, #104]	@ (8018bd4 <HAL_RCC_OscConfig+0x350>)
 8018b6a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8018b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8018bd8 <HAL_RCC_OscConfig+0x354>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	2513      	movs	r5, #19
 8018b72:	197c      	adds	r4, r7, r5
 8018b74:	0018      	movs	r0, r3
 8018b76:	f7f9 fa77 	bl	8012068 <HAL_InitTick>
 8018b7a:	0003      	movs	r3, r0
 8018b7c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8018b7e:	197b      	adds	r3, r7, r5
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d061      	beq.n	8018c4a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8018b86:	197b      	adds	r3, r7, r5
 8018b88:	781b      	ldrb	r3, [r3, #0]
 8018b8a:	e244      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	69db      	ldr	r3, [r3, #28]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d040      	beq.n	8018c16 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8018b94:	4b0a      	ldr	r3, [pc, #40]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b96:	681a      	ldr	r2, [r3, #0]
 8018b98:	4b09      	ldr	r3, [pc, #36]	@ (8018bc0 <HAL_RCC_OscConfig+0x33c>)
 8018b9a:	2180      	movs	r1, #128	@ 0x80
 8018b9c:	0049      	lsls	r1, r1, #1
 8018b9e:	430a      	orrs	r2, r1
 8018ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ba2:	f7f9 faa7 	bl	80120f4 <HAL_GetTick>
 8018ba6:	0003      	movs	r3, r0
 8018ba8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018baa:	e019      	b.n	8018be0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018bac:	f7f9 faa2 	bl	80120f4 <HAL_GetTick>
 8018bb0:	0002      	movs	r2, r0
 8018bb2:	697b      	ldr	r3, [r7, #20]
 8018bb4:	1ad3      	subs	r3, r2, r3
 8018bb6:	2b02      	cmp	r3, #2
 8018bb8:	d912      	bls.n	8018be0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8018bba:	2303      	movs	r3, #3
 8018bbc:	e22b      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
 8018bbe:	46c0      	nop			@ (mov r8, r8)
 8018bc0:	40021000 	.word	0x40021000
 8018bc4:	fffeffff 	.word	0xfffeffff
 8018bc8:	fffbffff 	.word	0xfffbffff
 8018bcc:	ffffe0ff 	.word	0xffffe0ff
 8018bd0:	0802b240 	.word	0x0802b240
 8018bd4:	200000e0 	.word	0x200000e0
 8018bd8:	200000f0 	.word	0x200000f0
 8018bdc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018be0:	4bca      	ldr	r3, [pc, #808]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	2380      	movs	r3, #128	@ 0x80
 8018be6:	009b      	lsls	r3, r3, #2
 8018be8:	4013      	ands	r3, r2
 8018bea:	d0df      	beq.n	8018bac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018bec:	4bc7      	ldr	r3, [pc, #796]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018bee:	685b      	ldr	r3, [r3, #4]
 8018bf0:	4ac7      	ldr	r2, [pc, #796]	@ (8018f10 <HAL_RCC_OscConfig+0x68c>)
 8018bf2:	4013      	ands	r3, r2
 8018bf4:	0019      	movs	r1, r3
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018bfa:	4bc4      	ldr	r3, [pc, #784]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018bfc:	430a      	orrs	r2, r1
 8018bfe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018c00:	4bc2      	ldr	r3, [pc, #776]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c02:	685b      	ldr	r3, [r3, #4]
 8018c04:	021b      	lsls	r3, r3, #8
 8018c06:	0a19      	lsrs	r1, r3, #8
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6a1b      	ldr	r3, [r3, #32]
 8018c0c:	061a      	lsls	r2, r3, #24
 8018c0e:	4bbf      	ldr	r3, [pc, #764]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c10:	430a      	orrs	r2, r1
 8018c12:	605a      	str	r2, [r3, #4]
 8018c14:	e019      	b.n	8018c4a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8018c16:	4bbd      	ldr	r3, [pc, #756]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c18:	681a      	ldr	r2, [r3, #0]
 8018c1a:	4bbc      	ldr	r3, [pc, #752]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c1c:	49bd      	ldr	r1, [pc, #756]	@ (8018f14 <HAL_RCC_OscConfig+0x690>)
 8018c1e:	400a      	ands	r2, r1
 8018c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c22:	f7f9 fa67 	bl	80120f4 <HAL_GetTick>
 8018c26:	0003      	movs	r3, r0
 8018c28:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8018c2a:	e008      	b.n	8018c3e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018c2c:	f7f9 fa62 	bl	80120f4 <HAL_GetTick>
 8018c30:	0002      	movs	r2, r0
 8018c32:	697b      	ldr	r3, [r7, #20]
 8018c34:	1ad3      	subs	r3, r2, r3
 8018c36:	2b02      	cmp	r3, #2
 8018c38:	d901      	bls.n	8018c3e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8018c3a:	2303      	movs	r3, #3
 8018c3c:	e1eb      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8018c3e:	4bb3      	ldr	r3, [pc, #716]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c40:	681a      	ldr	r2, [r3, #0]
 8018c42:	2380      	movs	r3, #128	@ 0x80
 8018c44:	009b      	lsls	r3, r3, #2
 8018c46:	4013      	ands	r3, r2
 8018c48:	d1f0      	bne.n	8018c2c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	2208      	movs	r2, #8
 8018c50:	4013      	ands	r3, r2
 8018c52:	d036      	beq.n	8018cc2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	695b      	ldr	r3, [r3, #20]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d019      	beq.n	8018c90 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018c5c:	4bab      	ldr	r3, [pc, #684]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c60:	4baa      	ldr	r3, [pc, #680]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c62:	2101      	movs	r1, #1
 8018c64:	430a      	orrs	r2, r1
 8018c66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018c68:	f7f9 fa44 	bl	80120f4 <HAL_GetTick>
 8018c6c:	0003      	movs	r3, r0
 8018c6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8018c70:	e008      	b.n	8018c84 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018c72:	f7f9 fa3f 	bl	80120f4 <HAL_GetTick>
 8018c76:	0002      	movs	r2, r0
 8018c78:	697b      	ldr	r3, [r7, #20]
 8018c7a:	1ad3      	subs	r3, r2, r3
 8018c7c:	2b02      	cmp	r3, #2
 8018c7e:	d901      	bls.n	8018c84 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8018c80:	2303      	movs	r3, #3
 8018c82:	e1c8      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8018c84:	4ba1      	ldr	r3, [pc, #644]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c88:	2202      	movs	r2, #2
 8018c8a:	4013      	ands	r3, r2
 8018c8c:	d0f1      	beq.n	8018c72 <HAL_RCC_OscConfig+0x3ee>
 8018c8e:	e018      	b.n	8018cc2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018c90:	4b9e      	ldr	r3, [pc, #632]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c94:	4b9d      	ldr	r3, [pc, #628]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018c96:	2101      	movs	r1, #1
 8018c98:	438a      	bics	r2, r1
 8018c9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018c9c:	f7f9 fa2a 	bl	80120f4 <HAL_GetTick>
 8018ca0:	0003      	movs	r3, r0
 8018ca2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8018ca4:	e008      	b.n	8018cb8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018ca6:	f7f9 fa25 	bl	80120f4 <HAL_GetTick>
 8018caa:	0002      	movs	r2, r0
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	1ad3      	subs	r3, r2, r3
 8018cb0:	2b02      	cmp	r3, #2
 8018cb2:	d901      	bls.n	8018cb8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8018cb4:	2303      	movs	r3, #3
 8018cb6:	e1ae      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8018cb8:	4b94      	ldr	r3, [pc, #592]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cbc:	2202      	movs	r2, #2
 8018cbe:	4013      	ands	r3, r2
 8018cc0:	d1f1      	bne.n	8018ca6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	2204      	movs	r2, #4
 8018cc8:	4013      	ands	r3, r2
 8018cca:	d100      	bne.n	8018cce <HAL_RCC_OscConfig+0x44a>
 8018ccc:	e0ae      	b.n	8018e2c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018cce:	2023      	movs	r0, #35	@ 0x23
 8018cd0:	183b      	adds	r3, r7, r0
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018cda:	2380      	movs	r3, #128	@ 0x80
 8018cdc:	055b      	lsls	r3, r3, #21
 8018cde:	4013      	ands	r3, r2
 8018ce0:	d109      	bne.n	8018cf6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018ce2:	4b8a      	ldr	r3, [pc, #552]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018ce6:	4b89      	ldr	r3, [pc, #548]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018ce8:	2180      	movs	r1, #128	@ 0x80
 8018cea:	0549      	lsls	r1, r1, #21
 8018cec:	430a      	orrs	r2, r1
 8018cee:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8018cf0:	183b      	adds	r3, r7, r0
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018cf6:	4b88      	ldr	r3, [pc, #544]	@ (8018f18 <HAL_RCC_OscConfig+0x694>)
 8018cf8:	681a      	ldr	r2, [r3, #0]
 8018cfa:	2380      	movs	r3, #128	@ 0x80
 8018cfc:	005b      	lsls	r3, r3, #1
 8018cfe:	4013      	ands	r3, r2
 8018d00:	d11a      	bne.n	8018d38 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018d02:	4b85      	ldr	r3, [pc, #532]	@ (8018f18 <HAL_RCC_OscConfig+0x694>)
 8018d04:	681a      	ldr	r2, [r3, #0]
 8018d06:	4b84      	ldr	r3, [pc, #528]	@ (8018f18 <HAL_RCC_OscConfig+0x694>)
 8018d08:	2180      	movs	r1, #128	@ 0x80
 8018d0a:	0049      	lsls	r1, r1, #1
 8018d0c:	430a      	orrs	r2, r1
 8018d0e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018d10:	f7f9 f9f0 	bl	80120f4 <HAL_GetTick>
 8018d14:	0003      	movs	r3, r0
 8018d16:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018d18:	e008      	b.n	8018d2c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018d1a:	f7f9 f9eb 	bl	80120f4 <HAL_GetTick>
 8018d1e:	0002      	movs	r2, r0
 8018d20:	697b      	ldr	r3, [r7, #20]
 8018d22:	1ad3      	subs	r3, r2, r3
 8018d24:	2b64      	cmp	r3, #100	@ 0x64
 8018d26:	d901      	bls.n	8018d2c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8018d28:	2303      	movs	r3, #3
 8018d2a:	e174      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018d2c:	4b7a      	ldr	r3, [pc, #488]	@ (8018f18 <HAL_RCC_OscConfig+0x694>)
 8018d2e:	681a      	ldr	r2, [r3, #0]
 8018d30:	2380      	movs	r3, #128	@ 0x80
 8018d32:	005b      	lsls	r3, r3, #1
 8018d34:	4013      	ands	r3, r2
 8018d36:	d0f0      	beq.n	8018d1a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	689a      	ldr	r2, [r3, #8]
 8018d3c:	2380      	movs	r3, #128	@ 0x80
 8018d3e:	005b      	lsls	r3, r3, #1
 8018d40:	429a      	cmp	r2, r3
 8018d42:	d107      	bne.n	8018d54 <HAL_RCC_OscConfig+0x4d0>
 8018d44:	4b71      	ldr	r3, [pc, #452]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d48:	4b70      	ldr	r3, [pc, #448]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d4a:	2180      	movs	r1, #128	@ 0x80
 8018d4c:	0049      	lsls	r1, r1, #1
 8018d4e:	430a      	orrs	r2, r1
 8018d50:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d52:	e031      	b.n	8018db8 <HAL_RCC_OscConfig+0x534>
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	689b      	ldr	r3, [r3, #8]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d10c      	bne.n	8018d76 <HAL_RCC_OscConfig+0x4f2>
 8018d5c:	4b6b      	ldr	r3, [pc, #428]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d60:	4b6a      	ldr	r3, [pc, #424]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d62:	496c      	ldr	r1, [pc, #432]	@ (8018f14 <HAL_RCC_OscConfig+0x690>)
 8018d64:	400a      	ands	r2, r1
 8018d66:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d68:	4b68      	ldr	r3, [pc, #416]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d6c:	4b67      	ldr	r3, [pc, #412]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d6e:	496b      	ldr	r1, [pc, #428]	@ (8018f1c <HAL_RCC_OscConfig+0x698>)
 8018d70:	400a      	ands	r2, r1
 8018d72:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d74:	e020      	b.n	8018db8 <HAL_RCC_OscConfig+0x534>
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	689a      	ldr	r2, [r3, #8]
 8018d7a:	23a0      	movs	r3, #160	@ 0xa0
 8018d7c:	00db      	lsls	r3, r3, #3
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d10e      	bne.n	8018da0 <HAL_RCC_OscConfig+0x51c>
 8018d82:	4b62      	ldr	r3, [pc, #392]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d86:	4b61      	ldr	r3, [pc, #388]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d88:	2180      	movs	r1, #128	@ 0x80
 8018d8a:	00c9      	lsls	r1, r1, #3
 8018d8c:	430a      	orrs	r2, r1
 8018d8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d90:	4b5e      	ldr	r3, [pc, #376]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d94:	4b5d      	ldr	r3, [pc, #372]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018d96:	2180      	movs	r1, #128	@ 0x80
 8018d98:	0049      	lsls	r1, r1, #1
 8018d9a:	430a      	orrs	r2, r1
 8018d9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d9e:	e00b      	b.n	8018db8 <HAL_RCC_OscConfig+0x534>
 8018da0:	4b5a      	ldr	r3, [pc, #360]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018da2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018da4:	4b59      	ldr	r3, [pc, #356]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018da6:	495b      	ldr	r1, [pc, #364]	@ (8018f14 <HAL_RCC_OscConfig+0x690>)
 8018da8:	400a      	ands	r2, r1
 8018daa:	651a      	str	r2, [r3, #80]	@ 0x50
 8018dac:	4b57      	ldr	r3, [pc, #348]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018dae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018db0:	4b56      	ldr	r3, [pc, #344]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018db2:	495a      	ldr	r1, [pc, #360]	@ (8018f1c <HAL_RCC_OscConfig+0x698>)
 8018db4:	400a      	ands	r2, r1
 8018db6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	689b      	ldr	r3, [r3, #8]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d015      	beq.n	8018dec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018dc0:	f7f9 f998 	bl	80120f4 <HAL_GetTick>
 8018dc4:	0003      	movs	r3, r0
 8018dc6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018dc8:	e009      	b.n	8018dde <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018dca:	f7f9 f993 	bl	80120f4 <HAL_GetTick>
 8018dce:	0002      	movs	r2, r0
 8018dd0:	697b      	ldr	r3, [r7, #20]
 8018dd2:	1ad3      	subs	r3, r2, r3
 8018dd4:	4a52      	ldr	r2, [pc, #328]	@ (8018f20 <HAL_RCC_OscConfig+0x69c>)
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	d901      	bls.n	8018dde <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8018dda:	2303      	movs	r3, #3
 8018ddc:	e11b      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018dde:	4b4b      	ldr	r3, [pc, #300]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018de2:	2380      	movs	r3, #128	@ 0x80
 8018de4:	009b      	lsls	r3, r3, #2
 8018de6:	4013      	ands	r3, r2
 8018de8:	d0ef      	beq.n	8018dca <HAL_RCC_OscConfig+0x546>
 8018dea:	e014      	b.n	8018e16 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018dec:	f7f9 f982 	bl	80120f4 <HAL_GetTick>
 8018df0:	0003      	movs	r3, r0
 8018df2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018df4:	e009      	b.n	8018e0a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018df6:	f7f9 f97d 	bl	80120f4 <HAL_GetTick>
 8018dfa:	0002      	movs	r2, r0
 8018dfc:	697b      	ldr	r3, [r7, #20]
 8018dfe:	1ad3      	subs	r3, r2, r3
 8018e00:	4a47      	ldr	r2, [pc, #284]	@ (8018f20 <HAL_RCC_OscConfig+0x69c>)
 8018e02:	4293      	cmp	r3, r2
 8018e04:	d901      	bls.n	8018e0a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8018e06:	2303      	movs	r3, #3
 8018e08:	e105      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018e0a:	4b40      	ldr	r3, [pc, #256]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018e0e:	2380      	movs	r3, #128	@ 0x80
 8018e10:	009b      	lsls	r3, r3, #2
 8018e12:	4013      	ands	r3, r2
 8018e14:	d1ef      	bne.n	8018df6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8018e16:	2323      	movs	r3, #35	@ 0x23
 8018e18:	18fb      	adds	r3, r7, r3
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	2b01      	cmp	r3, #1
 8018e1e:	d105      	bne.n	8018e2c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018e20:	4b3a      	ldr	r3, [pc, #232]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018e24:	4b39      	ldr	r3, [pc, #228]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e26:	493f      	ldr	r1, [pc, #252]	@ (8018f24 <HAL_RCC_OscConfig+0x6a0>)
 8018e28:	400a      	ands	r2, r1
 8018e2a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2220      	movs	r2, #32
 8018e32:	4013      	ands	r3, r2
 8018e34:	d049      	beq.n	8018eca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	699b      	ldr	r3, [r3, #24]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d026      	beq.n	8018e8c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8018e3e:	4b33      	ldr	r3, [pc, #204]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e40:	689a      	ldr	r2, [r3, #8]
 8018e42:	4b32      	ldr	r3, [pc, #200]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e44:	2101      	movs	r1, #1
 8018e46:	430a      	orrs	r2, r1
 8018e48:	609a      	str	r2, [r3, #8]
 8018e4a:	4b30      	ldr	r3, [pc, #192]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e50:	2101      	movs	r1, #1
 8018e52:	430a      	orrs	r2, r1
 8018e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8018e56:	4b34      	ldr	r3, [pc, #208]	@ (8018f28 <HAL_RCC_OscConfig+0x6a4>)
 8018e58:	6a1a      	ldr	r2, [r3, #32]
 8018e5a:	4b33      	ldr	r3, [pc, #204]	@ (8018f28 <HAL_RCC_OscConfig+0x6a4>)
 8018e5c:	2180      	movs	r1, #128	@ 0x80
 8018e5e:	0189      	lsls	r1, r1, #6
 8018e60:	430a      	orrs	r2, r1
 8018e62:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018e64:	f7f9 f946 	bl	80120f4 <HAL_GetTick>
 8018e68:	0003      	movs	r3, r0
 8018e6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018e6c:	e008      	b.n	8018e80 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018e6e:	f7f9 f941 	bl	80120f4 <HAL_GetTick>
 8018e72:	0002      	movs	r2, r0
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	1ad3      	subs	r3, r2, r3
 8018e78:	2b02      	cmp	r3, #2
 8018e7a:	d901      	bls.n	8018e80 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8018e7c:	2303      	movs	r3, #3
 8018e7e:	e0ca      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018e80:	4b22      	ldr	r3, [pc, #136]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e82:	689b      	ldr	r3, [r3, #8]
 8018e84:	2202      	movs	r2, #2
 8018e86:	4013      	ands	r3, r2
 8018e88:	d0f1      	beq.n	8018e6e <HAL_RCC_OscConfig+0x5ea>
 8018e8a:	e01e      	b.n	8018eca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8018e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e8e:	689a      	ldr	r2, [r3, #8]
 8018e90:	4b1e      	ldr	r3, [pc, #120]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018e92:	2101      	movs	r1, #1
 8018e94:	438a      	bics	r2, r1
 8018e96:	609a      	str	r2, [r3, #8]
 8018e98:	4b23      	ldr	r3, [pc, #140]	@ (8018f28 <HAL_RCC_OscConfig+0x6a4>)
 8018e9a:	6a1a      	ldr	r2, [r3, #32]
 8018e9c:	4b22      	ldr	r3, [pc, #136]	@ (8018f28 <HAL_RCC_OscConfig+0x6a4>)
 8018e9e:	4923      	ldr	r1, [pc, #140]	@ (8018f2c <HAL_RCC_OscConfig+0x6a8>)
 8018ea0:	400a      	ands	r2, r1
 8018ea2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ea4:	f7f9 f926 	bl	80120f4 <HAL_GetTick>
 8018ea8:	0003      	movs	r3, r0
 8018eaa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018eac:	e008      	b.n	8018ec0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018eae:	f7f9 f921 	bl	80120f4 <HAL_GetTick>
 8018eb2:	0002      	movs	r2, r0
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	1ad3      	subs	r3, r2, r3
 8018eb8:	2b02      	cmp	r3, #2
 8018eba:	d901      	bls.n	8018ec0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8018ebc:	2303      	movs	r3, #3
 8018ebe:	e0aa      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018ec0:	4b12      	ldr	r3, [pc, #72]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018ec2:	689b      	ldr	r3, [r3, #8]
 8018ec4:	2202      	movs	r2, #2
 8018ec6:	4013      	ands	r3, r2
 8018ec8:	d1f1      	bne.n	8018eae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d100      	bne.n	8018ed4 <HAL_RCC_OscConfig+0x650>
 8018ed2:	e09f      	b.n	8019014 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018ed4:	69fb      	ldr	r3, [r7, #28]
 8018ed6:	2b0c      	cmp	r3, #12
 8018ed8:	d100      	bne.n	8018edc <HAL_RCC_OscConfig+0x658>
 8018eda:	e078      	b.n	8018fce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ee0:	2b02      	cmp	r3, #2
 8018ee2:	d159      	bne.n	8018f98 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018ee4:	4b09      	ldr	r3, [pc, #36]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018ee6:	681a      	ldr	r2, [r3, #0]
 8018ee8:	4b08      	ldr	r3, [pc, #32]	@ (8018f0c <HAL_RCC_OscConfig+0x688>)
 8018eea:	4911      	ldr	r1, [pc, #68]	@ (8018f30 <HAL_RCC_OscConfig+0x6ac>)
 8018eec:	400a      	ands	r2, r1
 8018eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ef0:	f7f9 f900 	bl	80120f4 <HAL_GetTick>
 8018ef4:	0003      	movs	r3, r0
 8018ef6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018ef8:	e01c      	b.n	8018f34 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018efa:	f7f9 f8fb 	bl	80120f4 <HAL_GetTick>
 8018efe:	0002      	movs	r2, r0
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	1ad3      	subs	r3, r2, r3
 8018f04:	2b02      	cmp	r3, #2
 8018f06:	d915      	bls.n	8018f34 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8018f08:	2303      	movs	r3, #3
 8018f0a:	e084      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
 8018f0c:	40021000 	.word	0x40021000
 8018f10:	ffff1fff 	.word	0xffff1fff
 8018f14:	fffffeff 	.word	0xfffffeff
 8018f18:	40007000 	.word	0x40007000
 8018f1c:	fffffbff 	.word	0xfffffbff
 8018f20:	00001388 	.word	0x00001388
 8018f24:	efffffff 	.word	0xefffffff
 8018f28:	40010000 	.word	0x40010000
 8018f2c:	ffffdfff 	.word	0xffffdfff
 8018f30:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018f34:	4b3a      	ldr	r3, [pc, #232]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f36:	681a      	ldr	r2, [r3, #0]
 8018f38:	2380      	movs	r3, #128	@ 0x80
 8018f3a:	049b      	lsls	r3, r3, #18
 8018f3c:	4013      	ands	r3, r2
 8018f3e:	d1dc      	bne.n	8018efa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018f40:	4b37      	ldr	r3, [pc, #220]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f42:	68db      	ldr	r3, [r3, #12]
 8018f44:	4a37      	ldr	r2, [pc, #220]	@ (8019024 <HAL_RCC_OscConfig+0x7a0>)
 8018f46:	4013      	ands	r3, r2
 8018f48:	0019      	movs	r1, r3
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f52:	431a      	orrs	r2, r3
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018f58:	431a      	orrs	r2, r3
 8018f5a:	4b31      	ldr	r3, [pc, #196]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f5c:	430a      	orrs	r2, r1
 8018f5e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018f60:	4b2f      	ldr	r3, [pc, #188]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	4b2e      	ldr	r3, [pc, #184]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f66:	2180      	movs	r1, #128	@ 0x80
 8018f68:	0449      	lsls	r1, r1, #17
 8018f6a:	430a      	orrs	r2, r1
 8018f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018f6e:	f7f9 f8c1 	bl	80120f4 <HAL_GetTick>
 8018f72:	0003      	movs	r3, r0
 8018f74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8018f76:	e008      	b.n	8018f8a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018f78:	f7f9 f8bc 	bl	80120f4 <HAL_GetTick>
 8018f7c:	0002      	movs	r2, r0
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	1ad3      	subs	r3, r2, r3
 8018f82:	2b02      	cmp	r3, #2
 8018f84:	d901      	bls.n	8018f8a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8018f86:	2303      	movs	r3, #3
 8018f88:	e045      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8018f8a:	4b25      	ldr	r3, [pc, #148]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f8c:	681a      	ldr	r2, [r3, #0]
 8018f8e:	2380      	movs	r3, #128	@ 0x80
 8018f90:	049b      	lsls	r3, r3, #18
 8018f92:	4013      	ands	r3, r2
 8018f94:	d0f0      	beq.n	8018f78 <HAL_RCC_OscConfig+0x6f4>
 8018f96:	e03d      	b.n	8019014 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018f98:	4b21      	ldr	r3, [pc, #132]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f9a:	681a      	ldr	r2, [r3, #0]
 8018f9c:	4b20      	ldr	r3, [pc, #128]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018f9e:	4922      	ldr	r1, [pc, #136]	@ (8019028 <HAL_RCC_OscConfig+0x7a4>)
 8018fa0:	400a      	ands	r2, r1
 8018fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018fa4:	f7f9 f8a6 	bl	80120f4 <HAL_GetTick>
 8018fa8:	0003      	movs	r3, r0
 8018faa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018fac:	e008      	b.n	8018fc0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018fae:	f7f9 f8a1 	bl	80120f4 <HAL_GetTick>
 8018fb2:	0002      	movs	r2, r0
 8018fb4:	697b      	ldr	r3, [r7, #20]
 8018fb6:	1ad3      	subs	r3, r2, r3
 8018fb8:	2b02      	cmp	r3, #2
 8018fba:	d901      	bls.n	8018fc0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8018fbc:	2303      	movs	r3, #3
 8018fbe:	e02a      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018fc0:	4b17      	ldr	r3, [pc, #92]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018fc2:	681a      	ldr	r2, [r3, #0]
 8018fc4:	2380      	movs	r3, #128	@ 0x80
 8018fc6:	049b      	lsls	r3, r3, #18
 8018fc8:	4013      	ands	r3, r2
 8018fca:	d1f0      	bne.n	8018fae <HAL_RCC_OscConfig+0x72a>
 8018fcc:	e022      	b.n	8019014 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fd2:	2b01      	cmp	r3, #1
 8018fd4:	d101      	bne.n	8018fda <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8018fd6:	2301      	movs	r3, #1
 8018fd8:	e01d      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8018fda:	4b11      	ldr	r3, [pc, #68]	@ (8019020 <HAL_RCC_OscConfig+0x79c>)
 8018fdc:	68db      	ldr	r3, [r3, #12]
 8018fde:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018fe0:	69ba      	ldr	r2, [r7, #24]
 8018fe2:	2380      	movs	r3, #128	@ 0x80
 8018fe4:	025b      	lsls	r3, r3, #9
 8018fe6:	401a      	ands	r2, r3
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d10f      	bne.n	8019010 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8018ff0:	69ba      	ldr	r2, [r7, #24]
 8018ff2:	23f0      	movs	r3, #240	@ 0xf0
 8018ff4:	039b      	lsls	r3, r3, #14
 8018ff6:	401a      	ands	r2, r3
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018ffc:	429a      	cmp	r2, r3
 8018ffe:	d107      	bne.n	8019010 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8019000:	69ba      	ldr	r2, [r7, #24]
 8019002:	23c0      	movs	r3, #192	@ 0xc0
 8019004:	041b      	lsls	r3, r3, #16
 8019006:	401a      	ands	r2, r3
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801900c:	429a      	cmp	r2, r3
 801900e:	d001      	beq.n	8019014 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8019010:	2301      	movs	r3, #1
 8019012:	e000      	b.n	8019016 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8019014:	2300      	movs	r3, #0
}
 8019016:	0018      	movs	r0, r3
 8019018:	46bd      	mov	sp, r7
 801901a:	b00a      	add	sp, #40	@ 0x28
 801901c:	bdb0      	pop	{r4, r5, r7, pc}
 801901e:	46c0      	nop			@ (mov r8, r8)
 8019020:	40021000 	.word	0x40021000
 8019024:	ff02ffff 	.word	0xff02ffff
 8019028:	feffffff 	.word	0xfeffffff

0801902c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801902c:	b5b0      	push	{r4, r5, r7, lr}
 801902e:	b084      	sub	sp, #16
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
 8019034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d101      	bne.n	8019040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801903c:	2301      	movs	r3, #1
 801903e:	e128      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019040:	4b96      	ldr	r3, [pc, #600]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	2201      	movs	r2, #1
 8019046:	4013      	ands	r3, r2
 8019048:	683a      	ldr	r2, [r7, #0]
 801904a:	429a      	cmp	r2, r3
 801904c:	d91e      	bls.n	801908c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801904e:	4b93      	ldr	r3, [pc, #588]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2201      	movs	r2, #1
 8019054:	4393      	bics	r3, r2
 8019056:	0019      	movs	r1, r3
 8019058:	4b90      	ldr	r3, [pc, #576]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 801905a:	683a      	ldr	r2, [r7, #0]
 801905c:	430a      	orrs	r2, r1
 801905e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8019060:	f7f9 f848 	bl	80120f4 <HAL_GetTick>
 8019064:	0003      	movs	r3, r0
 8019066:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019068:	e009      	b.n	801907e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801906a:	f7f9 f843 	bl	80120f4 <HAL_GetTick>
 801906e:	0002      	movs	r2, r0
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	4a8a      	ldr	r2, [pc, #552]	@ (80192a0 <HAL_RCC_ClockConfig+0x274>)
 8019076:	4293      	cmp	r3, r2
 8019078:	d901      	bls.n	801907e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801907a:	2303      	movs	r3, #3
 801907c:	e109      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801907e:	4b87      	ldr	r3, [pc, #540]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	2201      	movs	r2, #1
 8019084:	4013      	ands	r3, r2
 8019086:	683a      	ldr	r2, [r7, #0]
 8019088:	429a      	cmp	r2, r3
 801908a:	d1ee      	bne.n	801906a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	2202      	movs	r2, #2
 8019092:	4013      	ands	r3, r2
 8019094:	d009      	beq.n	80190aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019096:	4b83      	ldr	r3, [pc, #524]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019098:	68db      	ldr	r3, [r3, #12]
 801909a:	22f0      	movs	r2, #240	@ 0xf0
 801909c:	4393      	bics	r3, r2
 801909e:	0019      	movs	r1, r3
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	689a      	ldr	r2, [r3, #8]
 80190a4:	4b7f      	ldr	r3, [pc, #508]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80190a6:	430a      	orrs	r2, r1
 80190a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	2201      	movs	r2, #1
 80190b0:	4013      	ands	r3, r2
 80190b2:	d100      	bne.n	80190b6 <HAL_RCC_ClockConfig+0x8a>
 80190b4:	e089      	b.n	80191ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	685b      	ldr	r3, [r3, #4]
 80190ba:	2b02      	cmp	r3, #2
 80190bc:	d107      	bne.n	80190ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80190be:	4b79      	ldr	r3, [pc, #484]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80190c0:	681a      	ldr	r2, [r3, #0]
 80190c2:	2380      	movs	r3, #128	@ 0x80
 80190c4:	029b      	lsls	r3, r3, #10
 80190c6:	4013      	ands	r3, r2
 80190c8:	d120      	bne.n	801910c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80190ca:	2301      	movs	r3, #1
 80190cc:	e0e1      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	685b      	ldr	r3, [r3, #4]
 80190d2:	2b03      	cmp	r3, #3
 80190d4:	d107      	bne.n	80190e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80190d6:	4b73      	ldr	r3, [pc, #460]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80190d8:	681a      	ldr	r2, [r3, #0]
 80190da:	2380      	movs	r3, #128	@ 0x80
 80190dc:	049b      	lsls	r3, r3, #18
 80190de:	4013      	ands	r3, r2
 80190e0:	d114      	bne.n	801910c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80190e2:	2301      	movs	r3, #1
 80190e4:	e0d5      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	2b01      	cmp	r3, #1
 80190ec:	d106      	bne.n	80190fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80190ee:	4b6d      	ldr	r3, [pc, #436]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	2204      	movs	r2, #4
 80190f4:	4013      	ands	r3, r2
 80190f6:	d109      	bne.n	801910c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80190f8:	2301      	movs	r3, #1
 80190fa:	e0ca      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80190fc:	4b69      	ldr	r3, [pc, #420]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80190fe:	681a      	ldr	r2, [r3, #0]
 8019100:	2380      	movs	r3, #128	@ 0x80
 8019102:	009b      	lsls	r3, r3, #2
 8019104:	4013      	ands	r3, r2
 8019106:	d101      	bne.n	801910c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019108:	2301      	movs	r3, #1
 801910a:	e0c2      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801910c:	4b65      	ldr	r3, [pc, #404]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 801910e:	68db      	ldr	r3, [r3, #12]
 8019110:	2203      	movs	r2, #3
 8019112:	4393      	bics	r3, r2
 8019114:	0019      	movs	r1, r3
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	685a      	ldr	r2, [r3, #4]
 801911a:	4b62      	ldr	r3, [pc, #392]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 801911c:	430a      	orrs	r2, r1
 801911e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019120:	f7f8 ffe8 	bl	80120f4 <HAL_GetTick>
 8019124:	0003      	movs	r3, r0
 8019126:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	685b      	ldr	r3, [r3, #4]
 801912c:	2b02      	cmp	r3, #2
 801912e:	d111      	bne.n	8019154 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8019130:	e009      	b.n	8019146 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019132:	f7f8 ffdf 	bl	80120f4 <HAL_GetTick>
 8019136:	0002      	movs	r2, r0
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	1ad3      	subs	r3, r2, r3
 801913c:	4a58      	ldr	r2, [pc, #352]	@ (80192a0 <HAL_RCC_ClockConfig+0x274>)
 801913e:	4293      	cmp	r3, r2
 8019140:	d901      	bls.n	8019146 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8019142:	2303      	movs	r3, #3
 8019144:	e0a5      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8019146:	4b57      	ldr	r3, [pc, #348]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019148:	68db      	ldr	r3, [r3, #12]
 801914a:	220c      	movs	r2, #12
 801914c:	4013      	ands	r3, r2
 801914e:	2b08      	cmp	r3, #8
 8019150:	d1ef      	bne.n	8019132 <HAL_RCC_ClockConfig+0x106>
 8019152:	e03a      	b.n	80191ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	685b      	ldr	r3, [r3, #4]
 8019158:	2b03      	cmp	r3, #3
 801915a:	d111      	bne.n	8019180 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801915c:	e009      	b.n	8019172 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801915e:	f7f8 ffc9 	bl	80120f4 <HAL_GetTick>
 8019162:	0002      	movs	r2, r0
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	1ad3      	subs	r3, r2, r3
 8019168:	4a4d      	ldr	r2, [pc, #308]	@ (80192a0 <HAL_RCC_ClockConfig+0x274>)
 801916a:	4293      	cmp	r3, r2
 801916c:	d901      	bls.n	8019172 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801916e:	2303      	movs	r3, #3
 8019170:	e08f      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019172:	4b4c      	ldr	r3, [pc, #304]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019174:	68db      	ldr	r3, [r3, #12]
 8019176:	220c      	movs	r2, #12
 8019178:	4013      	ands	r3, r2
 801917a:	2b0c      	cmp	r3, #12
 801917c:	d1ef      	bne.n	801915e <HAL_RCC_ClockConfig+0x132>
 801917e:	e024      	b.n	80191ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	685b      	ldr	r3, [r3, #4]
 8019184:	2b01      	cmp	r3, #1
 8019186:	d11b      	bne.n	80191c0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8019188:	e009      	b.n	801919e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801918a:	f7f8 ffb3 	bl	80120f4 <HAL_GetTick>
 801918e:	0002      	movs	r2, r0
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	1ad3      	subs	r3, r2, r3
 8019194:	4a42      	ldr	r2, [pc, #264]	@ (80192a0 <HAL_RCC_ClockConfig+0x274>)
 8019196:	4293      	cmp	r3, r2
 8019198:	d901      	bls.n	801919e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801919a:	2303      	movs	r3, #3
 801919c:	e079      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801919e:	4b41      	ldr	r3, [pc, #260]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80191a0:	68db      	ldr	r3, [r3, #12]
 80191a2:	220c      	movs	r2, #12
 80191a4:	4013      	ands	r3, r2
 80191a6:	2b04      	cmp	r3, #4
 80191a8:	d1ef      	bne.n	801918a <HAL_RCC_ClockConfig+0x15e>
 80191aa:	e00e      	b.n	80191ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80191ac:	f7f8 ffa2 	bl	80120f4 <HAL_GetTick>
 80191b0:	0002      	movs	r2, r0
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	1ad3      	subs	r3, r2, r3
 80191b6:	4a3a      	ldr	r2, [pc, #232]	@ (80192a0 <HAL_RCC_ClockConfig+0x274>)
 80191b8:	4293      	cmp	r3, r2
 80191ba:	d901      	bls.n	80191c0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80191bc:	2303      	movs	r3, #3
 80191be:	e068      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80191c0:	4b38      	ldr	r3, [pc, #224]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	220c      	movs	r2, #12
 80191c6:	4013      	ands	r3, r2
 80191c8:	d1f0      	bne.n	80191ac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80191ca:	4b34      	ldr	r3, [pc, #208]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	2201      	movs	r2, #1
 80191d0:	4013      	ands	r3, r2
 80191d2:	683a      	ldr	r2, [r7, #0]
 80191d4:	429a      	cmp	r2, r3
 80191d6:	d21e      	bcs.n	8019216 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80191d8:	4b30      	ldr	r3, [pc, #192]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	2201      	movs	r2, #1
 80191de:	4393      	bics	r3, r2
 80191e0:	0019      	movs	r1, r3
 80191e2:	4b2e      	ldr	r3, [pc, #184]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 80191e4:	683a      	ldr	r2, [r7, #0]
 80191e6:	430a      	orrs	r2, r1
 80191e8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80191ea:	f7f8 ff83 	bl	80120f4 <HAL_GetTick>
 80191ee:	0003      	movs	r3, r0
 80191f0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80191f2:	e009      	b.n	8019208 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80191f4:	f7f8 ff7e 	bl	80120f4 <HAL_GetTick>
 80191f8:	0002      	movs	r2, r0
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	1ad3      	subs	r3, r2, r3
 80191fe:	4a28      	ldr	r2, [pc, #160]	@ (80192a0 <HAL_RCC_ClockConfig+0x274>)
 8019200:	4293      	cmp	r3, r2
 8019202:	d901      	bls.n	8019208 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8019204:	2303      	movs	r3, #3
 8019206:	e044      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019208:	4b24      	ldr	r3, [pc, #144]	@ (801929c <HAL_RCC_ClockConfig+0x270>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	2201      	movs	r2, #1
 801920e:	4013      	ands	r3, r2
 8019210:	683a      	ldr	r2, [r7, #0]
 8019212:	429a      	cmp	r2, r3
 8019214:	d1ee      	bne.n	80191f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2204      	movs	r2, #4
 801921c:	4013      	ands	r3, r2
 801921e:	d009      	beq.n	8019234 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019220:	4b20      	ldr	r3, [pc, #128]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019222:	68db      	ldr	r3, [r3, #12]
 8019224:	4a20      	ldr	r2, [pc, #128]	@ (80192a8 <HAL_RCC_ClockConfig+0x27c>)
 8019226:	4013      	ands	r3, r2
 8019228:	0019      	movs	r1, r3
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	68da      	ldr	r2, [r3, #12]
 801922e:	4b1d      	ldr	r3, [pc, #116]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019230:	430a      	orrs	r2, r1
 8019232:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2208      	movs	r2, #8
 801923a:	4013      	ands	r3, r2
 801923c:	d00a      	beq.n	8019254 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801923e:	4b19      	ldr	r3, [pc, #100]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019240:	68db      	ldr	r3, [r3, #12]
 8019242:	4a1a      	ldr	r2, [pc, #104]	@ (80192ac <HAL_RCC_ClockConfig+0x280>)
 8019244:	4013      	ands	r3, r2
 8019246:	0019      	movs	r1, r3
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	691b      	ldr	r3, [r3, #16]
 801924c:	00da      	lsls	r2, r3, #3
 801924e:	4b15      	ldr	r3, [pc, #84]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 8019250:	430a      	orrs	r2, r1
 8019252:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019254:	f000 f832 	bl	80192bc <HAL_RCC_GetSysClockFreq>
 8019258:	0001      	movs	r1, r0
 801925a:	4b12      	ldr	r3, [pc, #72]	@ (80192a4 <HAL_RCC_ClockConfig+0x278>)
 801925c:	68db      	ldr	r3, [r3, #12]
 801925e:	091b      	lsrs	r3, r3, #4
 8019260:	220f      	movs	r2, #15
 8019262:	4013      	ands	r3, r2
 8019264:	4a12      	ldr	r2, [pc, #72]	@ (80192b0 <HAL_RCC_ClockConfig+0x284>)
 8019266:	5cd3      	ldrb	r3, [r2, r3]
 8019268:	000a      	movs	r2, r1
 801926a:	40da      	lsrs	r2, r3
 801926c:	4b11      	ldr	r3, [pc, #68]	@ (80192b4 <HAL_RCC_ClockConfig+0x288>)
 801926e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8019270:	4b11      	ldr	r3, [pc, #68]	@ (80192b8 <HAL_RCC_ClockConfig+0x28c>)
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	250b      	movs	r5, #11
 8019276:	197c      	adds	r4, r7, r5
 8019278:	0018      	movs	r0, r3
 801927a:	f7f8 fef5 	bl	8012068 <HAL_InitTick>
 801927e:	0003      	movs	r3, r0
 8019280:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8019282:	197b      	adds	r3, r7, r5
 8019284:	781b      	ldrb	r3, [r3, #0]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d002      	beq.n	8019290 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801928a:	197b      	adds	r3, r7, r5
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	e000      	b.n	8019292 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8019290:	2300      	movs	r3, #0
}
 8019292:	0018      	movs	r0, r3
 8019294:	46bd      	mov	sp, r7
 8019296:	b004      	add	sp, #16
 8019298:	bdb0      	pop	{r4, r5, r7, pc}
 801929a:	46c0      	nop			@ (mov r8, r8)
 801929c:	40022000 	.word	0x40022000
 80192a0:	00001388 	.word	0x00001388
 80192a4:	40021000 	.word	0x40021000
 80192a8:	fffff8ff 	.word	0xfffff8ff
 80192ac:	ffffc7ff 	.word	0xffffc7ff
 80192b0:	0802b240 	.word	0x0802b240
 80192b4:	200000e0 	.word	0x200000e0
 80192b8:	200000f0 	.word	0x200000f0

080192bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80192bc:	b5b0      	push	{r4, r5, r7, lr}
 80192be:	b08e      	sub	sp, #56	@ 0x38
 80192c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80192c2:	4b4c      	ldr	r3, [pc, #304]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80192c4:	68db      	ldr	r3, [r3, #12]
 80192c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80192c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80192ca:	230c      	movs	r3, #12
 80192cc:	4013      	ands	r3, r2
 80192ce:	2b0c      	cmp	r3, #12
 80192d0:	d014      	beq.n	80192fc <HAL_RCC_GetSysClockFreq+0x40>
 80192d2:	d900      	bls.n	80192d6 <HAL_RCC_GetSysClockFreq+0x1a>
 80192d4:	e07b      	b.n	80193ce <HAL_RCC_GetSysClockFreq+0x112>
 80192d6:	2b04      	cmp	r3, #4
 80192d8:	d002      	beq.n	80192e0 <HAL_RCC_GetSysClockFreq+0x24>
 80192da:	2b08      	cmp	r3, #8
 80192dc:	d00b      	beq.n	80192f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80192de:	e076      	b.n	80193ce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80192e0:	4b44      	ldr	r3, [pc, #272]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2210      	movs	r2, #16
 80192e6:	4013      	ands	r3, r2
 80192e8:	d002      	beq.n	80192f0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80192ea:	4b43      	ldr	r3, [pc, #268]	@ (80193f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80192ec:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80192ee:	e07c      	b.n	80193ea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80192f0:	4b42      	ldr	r3, [pc, #264]	@ (80193fc <HAL_RCC_GetSysClockFreq+0x140>)
 80192f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80192f4:	e079      	b.n	80193ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80192f6:	4b42      	ldr	r3, [pc, #264]	@ (8019400 <HAL_RCC_GetSysClockFreq+0x144>)
 80192f8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80192fa:	e076      	b.n	80193ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80192fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192fe:	0c9a      	lsrs	r2, r3, #18
 8019300:	230f      	movs	r3, #15
 8019302:	401a      	ands	r2, r3
 8019304:	4b3f      	ldr	r3, [pc, #252]	@ (8019404 <HAL_RCC_GetSysClockFreq+0x148>)
 8019306:	5c9b      	ldrb	r3, [r3, r2]
 8019308:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801930a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801930c:	0d9a      	lsrs	r2, r3, #22
 801930e:	2303      	movs	r3, #3
 8019310:	4013      	ands	r3, r2
 8019312:	3301      	adds	r3, #1
 8019314:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019316:	4b37      	ldr	r3, [pc, #220]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x138>)
 8019318:	68da      	ldr	r2, [r3, #12]
 801931a:	2380      	movs	r3, #128	@ 0x80
 801931c:	025b      	lsls	r3, r3, #9
 801931e:	4013      	ands	r3, r2
 8019320:	d01a      	beq.n	8019358 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8019322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019324:	61bb      	str	r3, [r7, #24]
 8019326:	2300      	movs	r3, #0
 8019328:	61fb      	str	r3, [r7, #28]
 801932a:	4a35      	ldr	r2, [pc, #212]	@ (8019400 <HAL_RCC_GetSysClockFreq+0x144>)
 801932c:	2300      	movs	r3, #0
 801932e:	69b8      	ldr	r0, [r7, #24]
 8019330:	69f9      	ldr	r1, [r7, #28]
 8019332:	f7e7 f945 	bl	80005c0 <__aeabi_lmul>
 8019336:	0002      	movs	r2, r0
 8019338:	000b      	movs	r3, r1
 801933a:	0010      	movs	r0, r2
 801933c:	0019      	movs	r1, r3
 801933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019340:	613b      	str	r3, [r7, #16]
 8019342:	2300      	movs	r3, #0
 8019344:	617b      	str	r3, [r7, #20]
 8019346:	693a      	ldr	r2, [r7, #16]
 8019348:	697b      	ldr	r3, [r7, #20]
 801934a:	f7e7 f919 	bl	8000580 <__aeabi_uldivmod>
 801934e:	0002      	movs	r2, r0
 8019350:	000b      	movs	r3, r1
 8019352:	0013      	movs	r3, r2
 8019354:	637b      	str	r3, [r7, #52]	@ 0x34
 8019356:	e037      	b.n	80193c8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8019358:	4b26      	ldr	r3, [pc, #152]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x138>)
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	2210      	movs	r2, #16
 801935e:	4013      	ands	r3, r2
 8019360:	d01a      	beq.n	8019398 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8019362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019364:	60bb      	str	r3, [r7, #8]
 8019366:	2300      	movs	r3, #0
 8019368:	60fb      	str	r3, [r7, #12]
 801936a:	4a23      	ldr	r2, [pc, #140]	@ (80193f8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801936c:	2300      	movs	r3, #0
 801936e:	68b8      	ldr	r0, [r7, #8]
 8019370:	68f9      	ldr	r1, [r7, #12]
 8019372:	f7e7 f925 	bl	80005c0 <__aeabi_lmul>
 8019376:	0002      	movs	r2, r0
 8019378:	000b      	movs	r3, r1
 801937a:	0010      	movs	r0, r2
 801937c:	0019      	movs	r1, r3
 801937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019380:	603b      	str	r3, [r7, #0]
 8019382:	2300      	movs	r3, #0
 8019384:	607b      	str	r3, [r7, #4]
 8019386:	683a      	ldr	r2, [r7, #0]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	f7e7 f8f9 	bl	8000580 <__aeabi_uldivmod>
 801938e:	0002      	movs	r2, r0
 8019390:	000b      	movs	r3, r1
 8019392:	0013      	movs	r3, r2
 8019394:	637b      	str	r3, [r7, #52]	@ 0x34
 8019396:	e017      	b.n	80193c8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8019398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801939a:	0018      	movs	r0, r3
 801939c:	2300      	movs	r3, #0
 801939e:	0019      	movs	r1, r3
 80193a0:	4a16      	ldr	r2, [pc, #88]	@ (80193fc <HAL_RCC_GetSysClockFreq+0x140>)
 80193a2:	2300      	movs	r3, #0
 80193a4:	f7e7 f90c 	bl	80005c0 <__aeabi_lmul>
 80193a8:	0002      	movs	r2, r0
 80193aa:	000b      	movs	r3, r1
 80193ac:	0010      	movs	r0, r2
 80193ae:	0019      	movs	r1, r3
 80193b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193b2:	001c      	movs	r4, r3
 80193b4:	2300      	movs	r3, #0
 80193b6:	001d      	movs	r5, r3
 80193b8:	0022      	movs	r2, r4
 80193ba:	002b      	movs	r3, r5
 80193bc:	f7e7 f8e0 	bl	8000580 <__aeabi_uldivmod>
 80193c0:	0002      	movs	r2, r0
 80193c2:	000b      	movs	r3, r1
 80193c4:	0013      	movs	r3, r2
 80193c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80193c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193ca:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80193cc:	e00d      	b.n	80193ea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80193ce:	4b09      	ldr	r3, [pc, #36]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x138>)
 80193d0:	685b      	ldr	r3, [r3, #4]
 80193d2:	0b5b      	lsrs	r3, r3, #13
 80193d4:	2207      	movs	r2, #7
 80193d6:	4013      	ands	r3, r2
 80193d8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80193da:	6a3b      	ldr	r3, [r7, #32]
 80193dc:	3301      	adds	r3, #1
 80193de:	2280      	movs	r2, #128	@ 0x80
 80193e0:	0212      	lsls	r2, r2, #8
 80193e2:	409a      	lsls	r2, r3
 80193e4:	0013      	movs	r3, r2
 80193e6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80193e8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80193ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80193ec:	0018      	movs	r0, r3
 80193ee:	46bd      	mov	sp, r7
 80193f0:	b00e      	add	sp, #56	@ 0x38
 80193f2:	bdb0      	pop	{r4, r5, r7, pc}
 80193f4:	40021000 	.word	0x40021000
 80193f8:	003d0900 	.word	0x003d0900
 80193fc:	00f42400 	.word	0x00f42400
 8019400:	007a1200 	.word	0x007a1200
 8019404:	0802b258 	.word	0x0802b258

08019408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801940c:	4b02      	ldr	r3, [pc, #8]	@ (8019418 <HAL_RCC_GetHCLKFreq+0x10>)
 801940e:	681b      	ldr	r3, [r3, #0]
}
 8019410:	0018      	movs	r0, r3
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	46c0      	nop			@ (mov r8, r8)
 8019418:	200000e0 	.word	0x200000e0

0801941c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019420:	f7ff fff2 	bl	8019408 <HAL_RCC_GetHCLKFreq>
 8019424:	0001      	movs	r1, r0
 8019426:	4b06      	ldr	r3, [pc, #24]	@ (8019440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019428:	68db      	ldr	r3, [r3, #12]
 801942a:	0a1b      	lsrs	r3, r3, #8
 801942c:	2207      	movs	r2, #7
 801942e:	4013      	ands	r3, r2
 8019430:	4a04      	ldr	r2, [pc, #16]	@ (8019444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8019432:	5cd3      	ldrb	r3, [r2, r3]
 8019434:	40d9      	lsrs	r1, r3
 8019436:	000b      	movs	r3, r1
}
 8019438:	0018      	movs	r0, r3
 801943a:	46bd      	mov	sp, r7
 801943c:	bd80      	pop	{r7, pc}
 801943e:	46c0      	nop			@ (mov r8, r8)
 8019440:	40021000 	.word	0x40021000
 8019444:	0802b250 	.word	0x0802b250

08019448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801944c:	f7ff ffdc 	bl	8019408 <HAL_RCC_GetHCLKFreq>
 8019450:	0001      	movs	r1, r0
 8019452:	4b06      	ldr	r3, [pc, #24]	@ (801946c <HAL_RCC_GetPCLK2Freq+0x24>)
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	0adb      	lsrs	r3, r3, #11
 8019458:	2207      	movs	r2, #7
 801945a:	4013      	ands	r3, r2
 801945c:	4a04      	ldr	r2, [pc, #16]	@ (8019470 <HAL_RCC_GetPCLK2Freq+0x28>)
 801945e:	5cd3      	ldrb	r3, [r2, r3]
 8019460:	40d9      	lsrs	r1, r3
 8019462:	000b      	movs	r3, r1
}
 8019464:	0018      	movs	r0, r3
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}
 801946a:	46c0      	nop			@ (mov r8, r8)
 801946c:	40021000 	.word	0x40021000
 8019470:	0802b250 	.word	0x0802b250

08019474 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b086      	sub	sp, #24
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801947c:	2017      	movs	r0, #23
 801947e:	183b      	adds	r3, r7, r0
 8019480:	2200      	movs	r2, #0
 8019482:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	2220      	movs	r2, #32
 801948a:	4013      	ands	r3, r2
 801948c:	d100      	bne.n	8019490 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801948e:	e0c7      	b.n	8019620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019490:	4b9b      	ldr	r3, [pc, #620]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019494:	2380      	movs	r3, #128	@ 0x80
 8019496:	055b      	lsls	r3, r3, #21
 8019498:	4013      	ands	r3, r2
 801949a:	d109      	bne.n	80194b0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801949c:	4b98      	ldr	r3, [pc, #608]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801949e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80194a0:	4b97      	ldr	r3, [pc, #604]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194a2:	2180      	movs	r1, #128	@ 0x80
 80194a4:	0549      	lsls	r1, r1, #21
 80194a6:	430a      	orrs	r2, r1
 80194a8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80194aa:	183b      	adds	r3, r7, r0
 80194ac:	2201      	movs	r2, #1
 80194ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80194b0:	4b94      	ldr	r3, [pc, #592]	@ (8019704 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194b2:	681a      	ldr	r2, [r3, #0]
 80194b4:	2380      	movs	r3, #128	@ 0x80
 80194b6:	005b      	lsls	r3, r3, #1
 80194b8:	4013      	ands	r3, r2
 80194ba:	d11a      	bne.n	80194f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80194bc:	4b91      	ldr	r3, [pc, #580]	@ (8019704 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194be:	681a      	ldr	r2, [r3, #0]
 80194c0:	4b90      	ldr	r3, [pc, #576]	@ (8019704 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194c2:	2180      	movs	r1, #128	@ 0x80
 80194c4:	0049      	lsls	r1, r1, #1
 80194c6:	430a      	orrs	r2, r1
 80194c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80194ca:	f7f8 fe13 	bl	80120f4 <HAL_GetTick>
 80194ce:	0003      	movs	r3, r0
 80194d0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80194d2:	e008      	b.n	80194e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80194d4:	f7f8 fe0e 	bl	80120f4 <HAL_GetTick>
 80194d8:	0002      	movs	r2, r0
 80194da:	693b      	ldr	r3, [r7, #16]
 80194dc:	1ad3      	subs	r3, r2, r3
 80194de:	2b64      	cmp	r3, #100	@ 0x64
 80194e0:	d901      	bls.n	80194e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80194e2:	2303      	movs	r3, #3
 80194e4:	e107      	b.n	80196f6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80194e6:	4b87      	ldr	r3, [pc, #540]	@ (8019704 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194e8:	681a      	ldr	r2, [r3, #0]
 80194ea:	2380      	movs	r3, #128	@ 0x80
 80194ec:	005b      	lsls	r3, r3, #1
 80194ee:	4013      	ands	r3, r2
 80194f0:	d0f0      	beq.n	80194d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80194f2:	4b83      	ldr	r3, [pc, #524]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194f4:	681a      	ldr	r2, [r3, #0]
 80194f6:	23c0      	movs	r3, #192	@ 0xc0
 80194f8:	039b      	lsls	r3, r3, #14
 80194fa:	4013      	ands	r3, r2
 80194fc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	685a      	ldr	r2, [r3, #4]
 8019502:	23c0      	movs	r3, #192	@ 0xc0
 8019504:	039b      	lsls	r3, r3, #14
 8019506:	4013      	ands	r3, r2
 8019508:	68fa      	ldr	r2, [r7, #12]
 801950a:	429a      	cmp	r2, r3
 801950c:	d013      	beq.n	8019536 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	685a      	ldr	r2, [r3, #4]
 8019512:	23c0      	movs	r3, #192	@ 0xc0
 8019514:	029b      	lsls	r3, r3, #10
 8019516:	401a      	ands	r2, r3
 8019518:	23c0      	movs	r3, #192	@ 0xc0
 801951a:	029b      	lsls	r3, r3, #10
 801951c:	429a      	cmp	r2, r3
 801951e:	d10a      	bne.n	8019536 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8019520:	4b77      	ldr	r3, [pc, #476]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019522:	681a      	ldr	r2, [r3, #0]
 8019524:	2380      	movs	r3, #128	@ 0x80
 8019526:	029b      	lsls	r3, r3, #10
 8019528:	401a      	ands	r2, r3
 801952a:	2380      	movs	r3, #128	@ 0x80
 801952c:	029b      	lsls	r3, r3, #10
 801952e:	429a      	cmp	r2, r3
 8019530:	d101      	bne.n	8019536 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8019532:	2301      	movs	r3, #1
 8019534:	e0df      	b.n	80196f6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8019536:	4b72      	ldr	r3, [pc, #456]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801953a:	23c0      	movs	r3, #192	@ 0xc0
 801953c:	029b      	lsls	r3, r3, #10
 801953e:	4013      	ands	r3, r2
 8019540:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d03b      	beq.n	80195c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	685a      	ldr	r2, [r3, #4]
 801954c:	23c0      	movs	r3, #192	@ 0xc0
 801954e:	029b      	lsls	r3, r3, #10
 8019550:	4013      	ands	r3, r2
 8019552:	68fa      	ldr	r2, [r7, #12]
 8019554:	429a      	cmp	r2, r3
 8019556:	d033      	beq.n	80195c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	2220      	movs	r2, #32
 801955e:	4013      	ands	r3, r2
 8019560:	d02e      	beq.n	80195c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8019562:	4b67      	ldr	r3, [pc, #412]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019566:	4a68      	ldr	r2, [pc, #416]	@ (8019708 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8019568:	4013      	ands	r3, r2
 801956a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801956c:	4b64      	ldr	r3, [pc, #400]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801956e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019570:	4b63      	ldr	r3, [pc, #396]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019572:	2180      	movs	r1, #128	@ 0x80
 8019574:	0309      	lsls	r1, r1, #12
 8019576:	430a      	orrs	r2, r1
 8019578:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801957a:	4b61      	ldr	r3, [pc, #388]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801957c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801957e:	4b60      	ldr	r3, [pc, #384]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019580:	4962      	ldr	r1, [pc, #392]	@ (801970c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8019582:	400a      	ands	r2, r1
 8019584:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8019586:	4b5e      	ldr	r3, [pc, #376]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019588:	68fa      	ldr	r2, [r7, #12]
 801958a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801958c:	68fa      	ldr	r2, [r7, #12]
 801958e:	2380      	movs	r3, #128	@ 0x80
 8019590:	005b      	lsls	r3, r3, #1
 8019592:	4013      	ands	r3, r2
 8019594:	d014      	beq.n	80195c0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019596:	f7f8 fdad 	bl	80120f4 <HAL_GetTick>
 801959a:	0003      	movs	r3, r0
 801959c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801959e:	e009      	b.n	80195b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80195a0:	f7f8 fda8 	bl	80120f4 <HAL_GetTick>
 80195a4:	0002      	movs	r2, r0
 80195a6:	693b      	ldr	r3, [r7, #16]
 80195a8:	1ad3      	subs	r3, r2, r3
 80195aa:	4a59      	ldr	r2, [pc, #356]	@ (8019710 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80195ac:	4293      	cmp	r3, r2
 80195ae:	d901      	bls.n	80195b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80195b0:	2303      	movs	r3, #3
 80195b2:	e0a0      	b.n	80196f6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80195b4:	4b52      	ldr	r3, [pc, #328]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80195b8:	2380      	movs	r3, #128	@ 0x80
 80195ba:	009b      	lsls	r3, r3, #2
 80195bc:	4013      	ands	r3, r2
 80195be:	d0ef      	beq.n	80195a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	2220      	movs	r2, #32
 80195c6:	4013      	ands	r3, r2
 80195c8:	d01f      	beq.n	801960a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	685a      	ldr	r2, [r3, #4]
 80195ce:	23c0      	movs	r3, #192	@ 0xc0
 80195d0:	029b      	lsls	r3, r3, #10
 80195d2:	401a      	ands	r2, r3
 80195d4:	23c0      	movs	r3, #192	@ 0xc0
 80195d6:	029b      	lsls	r3, r3, #10
 80195d8:	429a      	cmp	r2, r3
 80195da:	d10c      	bne.n	80195f6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80195dc:	4b48      	ldr	r3, [pc, #288]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	4a4c      	ldr	r2, [pc, #304]	@ (8019714 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80195e2:	4013      	ands	r3, r2
 80195e4:	0019      	movs	r1, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	685a      	ldr	r2, [r3, #4]
 80195ea:	23c0      	movs	r3, #192	@ 0xc0
 80195ec:	039b      	lsls	r3, r3, #14
 80195ee:	401a      	ands	r2, r3
 80195f0:	4b43      	ldr	r3, [pc, #268]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195f2:	430a      	orrs	r2, r1
 80195f4:	601a      	str	r2, [r3, #0]
 80195f6:	4b42      	ldr	r3, [pc, #264]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	685a      	ldr	r2, [r3, #4]
 80195fe:	23c0      	movs	r3, #192	@ 0xc0
 8019600:	029b      	lsls	r3, r3, #10
 8019602:	401a      	ands	r2, r3
 8019604:	4b3e      	ldr	r3, [pc, #248]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019606:	430a      	orrs	r2, r1
 8019608:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801960a:	2317      	movs	r3, #23
 801960c:	18fb      	adds	r3, r7, r3
 801960e:	781b      	ldrb	r3, [r3, #0]
 8019610:	2b01      	cmp	r3, #1
 8019612:	d105      	bne.n	8019620 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019614:	4b3a      	ldr	r3, [pc, #232]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019618:	4b39      	ldr	r3, [pc, #228]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801961a:	493f      	ldr	r1, [pc, #252]	@ (8019718 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801961c:	400a      	ands	r2, r1
 801961e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	2201      	movs	r2, #1
 8019626:	4013      	ands	r3, r2
 8019628:	d009      	beq.n	801963e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801962a:	4b35      	ldr	r3, [pc, #212]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801962c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801962e:	2203      	movs	r2, #3
 8019630:	4393      	bics	r3, r2
 8019632:	0019      	movs	r1, r3
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	689a      	ldr	r2, [r3, #8]
 8019638:	4b31      	ldr	r3, [pc, #196]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801963a:	430a      	orrs	r2, r1
 801963c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	2202      	movs	r2, #2
 8019644:	4013      	ands	r3, r2
 8019646:	d009      	beq.n	801965c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019648:	4b2d      	ldr	r3, [pc, #180]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801964a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801964c:	220c      	movs	r2, #12
 801964e:	4393      	bics	r3, r2
 8019650:	0019      	movs	r1, r3
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	68da      	ldr	r2, [r3, #12]
 8019656:	4b2a      	ldr	r3, [pc, #168]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019658:	430a      	orrs	r2, r1
 801965a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	2204      	movs	r2, #4
 8019662:	4013      	ands	r3, r2
 8019664:	d009      	beq.n	801967a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8019666:	4b26      	ldr	r3, [pc, #152]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801966a:	4a2c      	ldr	r2, [pc, #176]	@ (801971c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801966c:	4013      	ands	r3, r2
 801966e:	0019      	movs	r1, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	691a      	ldr	r2, [r3, #16]
 8019674:	4b22      	ldr	r3, [pc, #136]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019676:	430a      	orrs	r2, r1
 8019678:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	2208      	movs	r2, #8
 8019680:	4013      	ands	r3, r2
 8019682:	d009      	beq.n	8019698 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019684:	4b1e      	ldr	r3, [pc, #120]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019688:	4a25      	ldr	r2, [pc, #148]	@ (8019720 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801968a:	4013      	ands	r3, r2
 801968c:	0019      	movs	r1, r3
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	695a      	ldr	r2, [r3, #20]
 8019692:	4b1b      	ldr	r3, [pc, #108]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019694:	430a      	orrs	r2, r1
 8019696:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681a      	ldr	r2, [r3, #0]
 801969c:	2380      	movs	r3, #128	@ 0x80
 801969e:	005b      	lsls	r3, r3, #1
 80196a0:	4013      	ands	r3, r2
 80196a2:	d009      	beq.n	80196b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80196a4:	4b16      	ldr	r3, [pc, #88]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80196a8:	4a17      	ldr	r2, [pc, #92]	@ (8019708 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80196aa:	4013      	ands	r3, r2
 80196ac:	0019      	movs	r1, r3
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	699a      	ldr	r2, [r3, #24]
 80196b2:	4b13      	ldr	r3, [pc, #76]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196b4:	430a      	orrs	r2, r1
 80196b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	2240      	movs	r2, #64	@ 0x40
 80196be:	4013      	ands	r3, r2
 80196c0:	d009      	beq.n	80196d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80196c2:	4b0f      	ldr	r3, [pc, #60]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80196c6:	4a17      	ldr	r2, [pc, #92]	@ (8019724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80196c8:	4013      	ands	r3, r2
 80196ca:	0019      	movs	r1, r3
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	6a1a      	ldr	r2, [r3, #32]
 80196d0:	4b0b      	ldr	r3, [pc, #44]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196d2:	430a      	orrs	r2, r1
 80196d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	2280      	movs	r2, #128	@ 0x80
 80196dc:	4013      	ands	r3, r2
 80196de:	d009      	beq.n	80196f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80196e0:	4b07      	ldr	r3, [pc, #28]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80196e4:	4a10      	ldr	r2, [pc, #64]	@ (8019728 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80196e6:	4013      	ands	r3, r2
 80196e8:	0019      	movs	r1, r3
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	69da      	ldr	r2, [r3, #28]
 80196ee:	4b04      	ldr	r3, [pc, #16]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196f0:	430a      	orrs	r2, r1
 80196f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80196f4:	2300      	movs	r3, #0
}
 80196f6:	0018      	movs	r0, r3
 80196f8:	46bd      	mov	sp, r7
 80196fa:	b006      	add	sp, #24
 80196fc:	bd80      	pop	{r7, pc}
 80196fe:	46c0      	nop			@ (mov r8, r8)
 8019700:	40021000 	.word	0x40021000
 8019704:	40007000 	.word	0x40007000
 8019708:	fffcffff 	.word	0xfffcffff
 801970c:	fff7ffff 	.word	0xfff7ffff
 8019710:	00001388 	.word	0x00001388
 8019714:	ffcfffff 	.word	0xffcfffff
 8019718:	efffffff 	.word	0xefffffff
 801971c:	fffff3ff 	.word	0xfffff3ff
 8019720:	ffffcfff 	.word	0xffffcfff
 8019724:	fbffffff 	.word	0xfbffffff
 8019728:	fff3ffff 	.word	0xfff3ffff

0801972c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801972c:	b5b0      	push	{r4, r5, r7, lr}
 801972e:	b084      	sub	sp, #16
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019734:	230f      	movs	r3, #15
 8019736:	18fb      	adds	r3, r7, r3
 8019738:	2201      	movs	r2, #1
 801973a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d101      	bne.n	8019746 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8019742:	2301      	movs	r3, #1
 8019744:	e088      	b.n	8019858 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	2221      	movs	r2, #33	@ 0x21
 801974a:	5c9b      	ldrb	r3, [r3, r2]
 801974c:	b2db      	uxtb	r3, r3
 801974e:	2b00      	cmp	r3, #0
 8019750:	d107      	bne.n	8019762 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	2220      	movs	r2, #32
 8019756:	2100      	movs	r1, #0
 8019758:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	0018      	movs	r0, r3
 801975e:	f7f2 fd7f 	bl	800c260 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	2221      	movs	r2, #33	@ 0x21
 8019766:	2102      	movs	r1, #2
 8019768:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	68db      	ldr	r3, [r3, #12]
 8019770:	2210      	movs	r2, #16
 8019772:	4013      	ands	r3, r2
 8019774:	2b10      	cmp	r3, #16
 8019776:	d05f      	beq.n	8019838 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	22ca      	movs	r2, #202	@ 0xca
 801977e:	625a      	str	r2, [r3, #36]	@ 0x24
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	2253      	movs	r2, #83	@ 0x53
 8019786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8019788:	250f      	movs	r5, #15
 801978a:	197c      	adds	r4, r7, r5
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	0018      	movs	r0, r3
 8019790:	f000 fa7c 	bl	8019c8c <RTC_EnterInitMode>
 8019794:	0003      	movs	r3, r0
 8019796:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8019798:	0028      	movs	r0, r5
 801979a:	183b      	adds	r3, r7, r0
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d12c      	bne.n	80197fc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	689a      	ldr	r2, [r3, #8]
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	492c      	ldr	r1, [pc, #176]	@ (8019860 <HAL_RTC_Init+0x134>)
 80197ae:	400a      	ands	r2, r1
 80197b0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	6899      	ldr	r1, [r3, #8]
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	685a      	ldr	r2, [r3, #4]
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	691b      	ldr	r3, [r3, #16]
 80197c0:	431a      	orrs	r2, r3
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	699b      	ldr	r3, [r3, #24]
 80197c6:	431a      	orrs	r2, r3
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	430a      	orrs	r2, r1
 80197ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	687a      	ldr	r2, [r7, #4]
 80197d6:	68d2      	ldr	r2, [r2, #12]
 80197d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	6919      	ldr	r1, [r3, #16]
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	689b      	ldr	r3, [r3, #8]
 80197e4:	041a      	lsls	r2, r3, #16
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	430a      	orrs	r2, r1
 80197ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80197ee:	183c      	adds	r4, r7, r0
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	0018      	movs	r0, r3
 80197f4:	f000 fa8e 	bl	8019d14 <RTC_ExitInitMode>
 80197f8:	0003      	movs	r3, r0
 80197fa:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80197fc:	230f      	movs	r3, #15
 80197fe:	18fb      	adds	r3, r7, r3
 8019800:	781b      	ldrb	r3, [r3, #0]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d113      	bne.n	801982e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	2103      	movs	r1, #3
 8019812:	438a      	bics	r2, r1
 8019814:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	69da      	ldr	r2, [r3, #28]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	695b      	ldr	r3, [r3, #20]
 8019824:	431a      	orrs	r2, r3
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	430a      	orrs	r2, r1
 801982c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	22ff      	movs	r2, #255	@ 0xff
 8019834:	625a      	str	r2, [r3, #36]	@ 0x24
 8019836:	e003      	b.n	8019840 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8019838:	230f      	movs	r3, #15
 801983a:	18fb      	adds	r3, r7, r3
 801983c:	2200      	movs	r2, #0
 801983e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8019840:	230f      	movs	r3, #15
 8019842:	18fb      	adds	r3, r7, r3
 8019844:	781b      	ldrb	r3, [r3, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d103      	bne.n	8019852 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	2221      	movs	r2, #33	@ 0x21
 801984e:	2101      	movs	r1, #1
 8019850:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8019852:	230f      	movs	r3, #15
 8019854:	18fb      	adds	r3, r7, r3
 8019856:	781b      	ldrb	r3, [r3, #0]
}
 8019858:	0018      	movs	r0, r3
 801985a:	46bd      	mov	sp, r7
 801985c:	b004      	add	sp, #16
 801985e:	bdb0      	pop	{r4, r5, r7, pc}
 8019860:	ff8fffbf 	.word	0xff8fffbf

08019864 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8019864:	b5b0      	push	{r4, r5, r7, lr}
 8019866:	b086      	sub	sp, #24
 8019868:	af00      	add	r7, sp, #0
 801986a:	60f8      	str	r0, [r7, #12]
 801986c:	60b9      	str	r1, [r7, #8]
 801986e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8019870:	2300      	movs	r3, #0
 8019872:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	2220      	movs	r2, #32
 8019878:	5c9b      	ldrb	r3, [r3, r2]
 801987a:	2b01      	cmp	r3, #1
 801987c:	d101      	bne.n	8019882 <HAL_RTC_SetTime+0x1e>
 801987e:	2302      	movs	r3, #2
 8019880:	e092      	b.n	80199a8 <HAL_RTC_SetTime+0x144>
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	2220      	movs	r2, #32
 8019886:	2101      	movs	r1, #1
 8019888:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	2221      	movs	r2, #33	@ 0x21
 801988e:	2102      	movs	r1, #2
 8019890:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d125      	bne.n	80198e4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	689b      	ldr	r3, [r3, #8]
 801989e:	2240      	movs	r2, #64	@ 0x40
 80198a0:	4013      	ands	r3, r2
 80198a2:	d102      	bne.n	80198aa <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	2200      	movs	r2, #0
 80198a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80198aa:	68bb      	ldr	r3, [r7, #8]
 80198ac:	781b      	ldrb	r3, [r3, #0]
 80198ae:	0018      	movs	r0, r3
 80198b0:	f000 fa5a 	bl	8019d68 <RTC_ByteToBcd2>
 80198b4:	0003      	movs	r3, r0
 80198b6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80198b8:	68bb      	ldr	r3, [r7, #8]
 80198ba:	785b      	ldrb	r3, [r3, #1]
 80198bc:	0018      	movs	r0, r3
 80198be:	f000 fa53 	bl	8019d68 <RTC_ByteToBcd2>
 80198c2:	0003      	movs	r3, r0
 80198c4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80198c6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	789b      	ldrb	r3, [r3, #2]
 80198cc:	0018      	movs	r0, r3
 80198ce:	f000 fa4b 	bl	8019d68 <RTC_ByteToBcd2>
 80198d2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80198d4:	0022      	movs	r2, r4
 80198d6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80198d8:	68bb      	ldr	r3, [r7, #8]
 80198da:	78db      	ldrb	r3, [r3, #3]
 80198dc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80198de:	4313      	orrs	r3, r2
 80198e0:	617b      	str	r3, [r7, #20]
 80198e2:	e017      	b.n	8019914 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	689b      	ldr	r3, [r3, #8]
 80198ea:	2240      	movs	r2, #64	@ 0x40
 80198ec:	4013      	ands	r3, r2
 80198ee:	d102      	bne.n	80198f6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	2200      	movs	r2, #0
 80198f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80198f6:	68bb      	ldr	r3, [r7, #8]
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	785b      	ldrb	r3, [r3, #1]
 8019900:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8019902:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8019904:	68ba      	ldr	r2, [r7, #8]
 8019906:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8019908:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	78db      	ldrb	r3, [r3, #3]
 801990e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8019910:	4313      	orrs	r3, r2
 8019912:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	22ca      	movs	r2, #202	@ 0xca
 801991a:	625a      	str	r2, [r3, #36]	@ 0x24
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	2253      	movs	r2, #83	@ 0x53
 8019922:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8019924:	2513      	movs	r5, #19
 8019926:	197c      	adds	r4, r7, r5
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	0018      	movs	r0, r3
 801992c:	f000 f9ae 	bl	8019c8c <RTC_EnterInitMode>
 8019930:	0003      	movs	r3, r0
 8019932:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8019934:	0028      	movs	r0, r5
 8019936:	183b      	adds	r3, r7, r0
 8019938:	781b      	ldrb	r3, [r3, #0]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d120      	bne.n	8019980 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801993e:	68fb      	ldr	r3, [r7, #12]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	697a      	ldr	r2, [r7, #20]
 8019944:	491a      	ldr	r1, [pc, #104]	@ (80199b0 <HAL_RTC_SetTime+0x14c>)
 8019946:	400a      	ands	r2, r1
 8019948:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	689a      	ldr	r2, [r3, #8]
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	4917      	ldr	r1, [pc, #92]	@ (80199b4 <HAL_RTC_SetTime+0x150>)
 8019956:	400a      	ands	r2, r1
 8019958:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	6899      	ldr	r1, [r3, #8]
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	68da      	ldr	r2, [r3, #12]
 8019964:	68bb      	ldr	r3, [r7, #8]
 8019966:	691b      	ldr	r3, [r3, #16]
 8019968:	431a      	orrs	r2, r3
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	430a      	orrs	r2, r1
 8019970:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8019972:	183c      	adds	r4, r7, r0
 8019974:	68fb      	ldr	r3, [r7, #12]
 8019976:	0018      	movs	r0, r3
 8019978:	f000 f9cc 	bl	8019d14 <RTC_ExitInitMode>
 801997c:	0003      	movs	r3, r0
 801997e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8019980:	2313      	movs	r3, #19
 8019982:	18fb      	adds	r3, r7, r3
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d103      	bne.n	8019992 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	2221      	movs	r2, #33	@ 0x21
 801998e:	2101      	movs	r1, #1
 8019990:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	22ff      	movs	r2, #255	@ 0xff
 8019998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	2220      	movs	r2, #32
 801999e:	2100      	movs	r1, #0
 80199a0:	5499      	strb	r1, [r3, r2]

  return status;
 80199a2:	2313      	movs	r3, #19
 80199a4:	18fb      	adds	r3, r7, r3
 80199a6:	781b      	ldrb	r3, [r3, #0]
}
 80199a8:	0018      	movs	r0, r3
 80199aa:	46bd      	mov	sp, r7
 80199ac:	b006      	add	sp, #24
 80199ae:	bdb0      	pop	{r4, r5, r7, pc}
 80199b0:	007f7f7f 	.word	0x007f7f7f
 80199b4:	fffbffff 	.word	0xfffbffff

080199b8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b086      	sub	sp, #24
 80199bc:	af00      	add	r7, sp, #0
 80199be:	60f8      	str	r0, [r7, #12]
 80199c0:	60b9      	str	r1, [r7, #8]
 80199c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80199c4:	2300      	movs	r3, #0
 80199c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80199ce:	68bb      	ldr	r3, [r7, #8]
 80199d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	691b      	ldr	r3, [r3, #16]
 80199d8:	045b      	lsls	r3, r3, #17
 80199da:	0c5a      	lsrs	r2, r3, #17
 80199dc:	68bb      	ldr	r3, [r7, #8]
 80199de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	4a22      	ldr	r2, [pc, #136]	@ (8019a70 <HAL_RTC_GetTime+0xb8>)
 80199e8:	4013      	ands	r3, r2
 80199ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80199ec:	697b      	ldr	r3, [r7, #20]
 80199ee:	0c1b      	lsrs	r3, r3, #16
 80199f0:	b2db      	uxtb	r3, r3
 80199f2:	223f      	movs	r2, #63	@ 0x3f
 80199f4:	4013      	ands	r3, r2
 80199f6:	b2da      	uxtb	r2, r3
 80199f8:	68bb      	ldr	r3, [r7, #8]
 80199fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80199fc:	697b      	ldr	r3, [r7, #20]
 80199fe:	0a1b      	lsrs	r3, r3, #8
 8019a00:	b2db      	uxtb	r3, r3
 8019a02:	227f      	movs	r2, #127	@ 0x7f
 8019a04:	4013      	ands	r3, r2
 8019a06:	b2da      	uxtb	r2, r3
 8019a08:	68bb      	ldr	r3, [r7, #8]
 8019a0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8019a0c:	697b      	ldr	r3, [r7, #20]
 8019a0e:	b2db      	uxtb	r3, r3
 8019a10:	227f      	movs	r2, #127	@ 0x7f
 8019a12:	4013      	ands	r3, r2
 8019a14:	b2da      	uxtb	r2, r3
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	0d9b      	lsrs	r3, r3, #22
 8019a1e:	b2db      	uxtb	r3, r3
 8019a20:	2201      	movs	r2, #1
 8019a22:	4013      	ands	r3, r2
 8019a24:	b2da      	uxtb	r2, r3
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d11a      	bne.n	8019a66 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	781b      	ldrb	r3, [r3, #0]
 8019a34:	0018      	movs	r0, r3
 8019a36:	f000 f9b8 	bl	8019daa <RTC_Bcd2ToByte>
 8019a3a:	0003      	movs	r3, r0
 8019a3c:	001a      	movs	r2, r3
 8019a3e:	68bb      	ldr	r3, [r7, #8]
 8019a40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8019a42:	68bb      	ldr	r3, [r7, #8]
 8019a44:	785b      	ldrb	r3, [r3, #1]
 8019a46:	0018      	movs	r0, r3
 8019a48:	f000 f9af 	bl	8019daa <RTC_Bcd2ToByte>
 8019a4c:	0003      	movs	r3, r0
 8019a4e:	001a      	movs	r2, r3
 8019a50:	68bb      	ldr	r3, [r7, #8]
 8019a52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8019a54:	68bb      	ldr	r3, [r7, #8]
 8019a56:	789b      	ldrb	r3, [r3, #2]
 8019a58:	0018      	movs	r0, r3
 8019a5a:	f000 f9a6 	bl	8019daa <RTC_Bcd2ToByte>
 8019a5e:	0003      	movs	r3, r0
 8019a60:	001a      	movs	r2, r3
 8019a62:	68bb      	ldr	r3, [r7, #8]
 8019a64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8019a66:	2300      	movs	r3, #0
}
 8019a68:	0018      	movs	r0, r3
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	b006      	add	sp, #24
 8019a6e:	bd80      	pop	{r7, pc}
 8019a70:	007f7f7f 	.word	0x007f7f7f

08019a74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8019a74:	b5b0      	push	{r4, r5, r7, lr}
 8019a76:	b086      	sub	sp, #24
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	60f8      	str	r0, [r7, #12]
 8019a7c:	60b9      	str	r1, [r7, #8]
 8019a7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8019a80:	2300      	movs	r3, #0
 8019a82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2220      	movs	r2, #32
 8019a88:	5c9b      	ldrb	r3, [r3, r2]
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	d101      	bne.n	8019a92 <HAL_RTC_SetDate+0x1e>
 8019a8e:	2302      	movs	r3, #2
 8019a90:	e07e      	b.n	8019b90 <HAL_RTC_SetDate+0x11c>
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	2220      	movs	r2, #32
 8019a96:	2101      	movs	r1, #1
 8019a98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2221      	movs	r2, #33	@ 0x21
 8019a9e:	2102      	movs	r1, #2
 8019aa0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d10e      	bne.n	8019ac6 <HAL_RTC_SetDate+0x52>
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	785b      	ldrb	r3, [r3, #1]
 8019aac:	001a      	movs	r2, r3
 8019aae:	2310      	movs	r3, #16
 8019ab0:	4013      	ands	r3, r2
 8019ab2:	d008      	beq.n	8019ac6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8019ab4:	68bb      	ldr	r3, [r7, #8]
 8019ab6:	785b      	ldrb	r3, [r3, #1]
 8019ab8:	2210      	movs	r2, #16
 8019aba:	4393      	bics	r3, r2
 8019abc:	b2db      	uxtb	r3, r3
 8019abe:	330a      	adds	r3, #10
 8019ac0:	b2da      	uxtb	r2, r3
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d11c      	bne.n	8019b06 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019acc:	68bb      	ldr	r3, [r7, #8]
 8019ace:	78db      	ldrb	r3, [r3, #3]
 8019ad0:	0018      	movs	r0, r3
 8019ad2:	f000 f949 	bl	8019d68 <RTC_ByteToBcd2>
 8019ad6:	0003      	movs	r3, r0
 8019ad8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	785b      	ldrb	r3, [r3, #1]
 8019ade:	0018      	movs	r0, r3
 8019ae0:	f000 f942 	bl	8019d68 <RTC_ByteToBcd2>
 8019ae4:	0003      	movs	r3, r0
 8019ae6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019ae8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8019aea:	68bb      	ldr	r3, [r7, #8]
 8019aec:	789b      	ldrb	r3, [r3, #2]
 8019aee:	0018      	movs	r0, r3
 8019af0:	f000 f93a 	bl	8019d68 <RTC_ByteToBcd2>
 8019af4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8019af6:	0022      	movs	r2, r4
 8019af8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8019afa:	68bb      	ldr	r3, [r7, #8]
 8019afc:	781b      	ldrb	r3, [r3, #0]
 8019afe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019b00:	4313      	orrs	r3, r2
 8019b02:	617b      	str	r3, [r7, #20]
 8019b04:	e00e      	b.n	8019b24 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019b06:	68bb      	ldr	r3, [r7, #8]
 8019b08:	78db      	ldrb	r3, [r3, #3]
 8019b0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	785b      	ldrb	r3, [r3, #1]
 8019b10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019b12:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8019b14:	68ba      	ldr	r2, [r7, #8]
 8019b16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8019b18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	781b      	ldrb	r3, [r3, #0]
 8019b1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019b20:	4313      	orrs	r3, r2
 8019b22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	22ca      	movs	r2, #202	@ 0xca
 8019b2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2253      	movs	r2, #83	@ 0x53
 8019b32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8019b34:	2513      	movs	r5, #19
 8019b36:	197c      	adds	r4, r7, r5
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	0018      	movs	r0, r3
 8019b3c:	f000 f8a6 	bl	8019c8c <RTC_EnterInitMode>
 8019b40:	0003      	movs	r3, r0
 8019b42:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8019b44:	0028      	movs	r0, r5
 8019b46:	183b      	adds	r3, r7, r0
 8019b48:	781b      	ldrb	r3, [r3, #0]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d10c      	bne.n	8019b68 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	697a      	ldr	r2, [r7, #20]
 8019b54:	4910      	ldr	r1, [pc, #64]	@ (8019b98 <HAL_RTC_SetDate+0x124>)
 8019b56:	400a      	ands	r2, r1
 8019b58:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8019b5a:	183c      	adds	r4, r7, r0
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	0018      	movs	r0, r3
 8019b60:	f000 f8d8 	bl	8019d14 <RTC_ExitInitMode>
 8019b64:	0003      	movs	r3, r0
 8019b66:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8019b68:	2313      	movs	r3, #19
 8019b6a:	18fb      	adds	r3, r7, r3
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d103      	bne.n	8019b7a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	2221      	movs	r2, #33	@ 0x21
 8019b76:	2101      	movs	r1, #1
 8019b78:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	22ff      	movs	r2, #255	@ 0xff
 8019b80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	2220      	movs	r2, #32
 8019b86:	2100      	movs	r1, #0
 8019b88:	5499      	strb	r1, [r3, r2]

  return status;
 8019b8a:	2313      	movs	r3, #19
 8019b8c:	18fb      	adds	r3, r7, r3
 8019b8e:	781b      	ldrb	r3, [r3, #0]
}
 8019b90:	0018      	movs	r0, r3
 8019b92:	46bd      	mov	sp, r7
 8019b94:	b006      	add	sp, #24
 8019b96:	bdb0      	pop	{r4, r5, r7, pc}
 8019b98:	00ffff3f 	.word	0x00ffff3f

08019b9c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b086      	sub	sp, #24
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	60f8      	str	r0, [r7, #12]
 8019ba4:	60b9      	str	r1, [r7, #8]
 8019ba6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	685b      	ldr	r3, [r3, #4]
 8019bb2:	4a21      	ldr	r2, [pc, #132]	@ (8019c38 <HAL_RTC_GetDate+0x9c>)
 8019bb4:	4013      	ands	r3, r2
 8019bb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8019bb8:	697b      	ldr	r3, [r7, #20]
 8019bba:	0c1b      	lsrs	r3, r3, #16
 8019bbc:	b2da      	uxtb	r2, r3
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	0a1b      	lsrs	r3, r3, #8
 8019bc6:	b2db      	uxtb	r3, r3
 8019bc8:	221f      	movs	r2, #31
 8019bca:	4013      	ands	r3, r2
 8019bcc:	b2da      	uxtb	r2, r3
 8019bce:	68bb      	ldr	r3, [r7, #8]
 8019bd0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8019bd2:	697b      	ldr	r3, [r7, #20]
 8019bd4:	b2db      	uxtb	r3, r3
 8019bd6:	223f      	movs	r2, #63	@ 0x3f
 8019bd8:	4013      	ands	r3, r2
 8019bda:	b2da      	uxtb	r2, r3
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8019be0:	697b      	ldr	r3, [r7, #20]
 8019be2:	0b5b      	lsrs	r3, r3, #13
 8019be4:	b2db      	uxtb	r3, r3
 8019be6:	2207      	movs	r2, #7
 8019be8:	4013      	ands	r3, r2
 8019bea:	b2da      	uxtb	r2, r3
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d11a      	bne.n	8019c2c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	78db      	ldrb	r3, [r3, #3]
 8019bfa:	0018      	movs	r0, r3
 8019bfc:	f000 f8d5 	bl	8019daa <RTC_Bcd2ToByte>
 8019c00:	0003      	movs	r3, r0
 8019c02:	001a      	movs	r2, r3
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	785b      	ldrb	r3, [r3, #1]
 8019c0c:	0018      	movs	r0, r3
 8019c0e:	f000 f8cc 	bl	8019daa <RTC_Bcd2ToByte>
 8019c12:	0003      	movs	r3, r0
 8019c14:	001a      	movs	r2, r3
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8019c1a:	68bb      	ldr	r3, [r7, #8]
 8019c1c:	789b      	ldrb	r3, [r3, #2]
 8019c1e:	0018      	movs	r0, r3
 8019c20:	f000 f8c3 	bl	8019daa <RTC_Bcd2ToByte>
 8019c24:	0003      	movs	r3, r0
 8019c26:	001a      	movs	r2, r3
 8019c28:	68bb      	ldr	r3, [r7, #8]
 8019c2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8019c2c:	2300      	movs	r3, #0
}
 8019c2e:	0018      	movs	r0, r3
 8019c30:	46bd      	mov	sp, r7
 8019c32:	b006      	add	sp, #24
 8019c34:	bd80      	pop	{r7, pc}
 8019c36:	46c0      	nop			@ (mov r8, r8)
 8019c38:	00ffff3f 	.word	0x00ffff3f

08019c3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b084      	sub	sp, #16
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019c44:	2300      	movs	r3, #0
 8019c46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8019c88 <HAL_RTC_WaitForSynchro+0x4c>)
 8019c4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019c50:	f7f8 fa50 	bl	80120f4 <HAL_GetTick>
 8019c54:	0003      	movs	r3, r0
 8019c56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8019c58:	e00a      	b.n	8019c70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019c5a:	f7f8 fa4b 	bl	80120f4 <HAL_GetTick>
 8019c5e:	0002      	movs	r2, r0
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	1ad2      	subs	r2, r2, r3
 8019c64:	23fa      	movs	r3, #250	@ 0xfa
 8019c66:	009b      	lsls	r3, r3, #2
 8019c68:	429a      	cmp	r2, r3
 8019c6a:	d901      	bls.n	8019c70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8019c6c:	2303      	movs	r3, #3
 8019c6e:	e006      	b.n	8019c7e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	68db      	ldr	r3, [r3, #12]
 8019c76:	2220      	movs	r2, #32
 8019c78:	4013      	ands	r3, r2
 8019c7a:	d0ee      	beq.n	8019c5a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8019c7c:	2300      	movs	r3, #0
}
 8019c7e:	0018      	movs	r0, r3
 8019c80:	46bd      	mov	sp, r7
 8019c82:	b004      	add	sp, #16
 8019c84:	bd80      	pop	{r7, pc}
 8019c86:	46c0      	nop			@ (mov r8, r8)
 8019c88:	0001ff5f 	.word	0x0001ff5f

08019c8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b084      	sub	sp, #16
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019c94:	2300      	movs	r3, #0
 8019c96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8019c98:	230f      	movs	r3, #15
 8019c9a:	18fb      	adds	r3, r7, r3
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	68db      	ldr	r3, [r3, #12]
 8019ca6:	2240      	movs	r2, #64	@ 0x40
 8019ca8:	4013      	ands	r3, r2
 8019caa:	d12c      	bne.n	8019d06 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	68da      	ldr	r2, [r3, #12]
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	2180      	movs	r1, #128	@ 0x80
 8019cb8:	430a      	orrs	r2, r1
 8019cba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019cbc:	f7f8 fa1a 	bl	80120f4 <HAL_GetTick>
 8019cc0:	0003      	movs	r3, r0
 8019cc2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8019cc4:	e014      	b.n	8019cf0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019cc6:	f7f8 fa15 	bl	80120f4 <HAL_GetTick>
 8019cca:	0002      	movs	r2, r0
 8019ccc:	68bb      	ldr	r3, [r7, #8]
 8019cce:	1ad2      	subs	r2, r2, r3
 8019cd0:	200f      	movs	r0, #15
 8019cd2:	183b      	adds	r3, r7, r0
 8019cd4:	1839      	adds	r1, r7, r0
 8019cd6:	7809      	ldrb	r1, [r1, #0]
 8019cd8:	7019      	strb	r1, [r3, #0]
 8019cda:	23fa      	movs	r3, #250	@ 0xfa
 8019cdc:	009b      	lsls	r3, r3, #2
 8019cde:	429a      	cmp	r2, r3
 8019ce0:	d906      	bls.n	8019cf0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2221      	movs	r2, #33	@ 0x21
 8019ce6:	2104      	movs	r1, #4
 8019ce8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8019cea:	183b      	adds	r3, r7, r0
 8019cec:	2201      	movs	r2, #1
 8019cee:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	68db      	ldr	r3, [r3, #12]
 8019cf6:	2240      	movs	r2, #64	@ 0x40
 8019cf8:	4013      	ands	r3, r2
 8019cfa:	d104      	bne.n	8019d06 <RTC_EnterInitMode+0x7a>
 8019cfc:	230f      	movs	r3, #15
 8019cfe:	18fb      	adds	r3, r7, r3
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	2b01      	cmp	r3, #1
 8019d04:	d1df      	bne.n	8019cc6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8019d06:	230f      	movs	r3, #15
 8019d08:	18fb      	adds	r3, r7, r3
 8019d0a:	781b      	ldrb	r3, [r3, #0]
}
 8019d0c:	0018      	movs	r0, r3
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	b004      	add	sp, #16
 8019d12:	bd80      	pop	{r7, pc}

08019d14 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8019d14:	b590      	push	{r4, r7, lr}
 8019d16:	b085      	sub	sp, #20
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019d1c:	240f      	movs	r4, #15
 8019d1e:	193b      	adds	r3, r7, r4
 8019d20:	2200      	movs	r2, #0
 8019d22:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	68da      	ldr	r2, [r3, #12]
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	2180      	movs	r1, #128	@ 0x80
 8019d30:	438a      	bics	r2, r1
 8019d32:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	689b      	ldr	r3, [r3, #8]
 8019d3a:	2220      	movs	r2, #32
 8019d3c:	4013      	ands	r3, r2
 8019d3e:	d10c      	bne.n	8019d5a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	0018      	movs	r0, r3
 8019d44:	f7ff ff7a 	bl	8019c3c <HAL_RTC_WaitForSynchro>
 8019d48:	1e03      	subs	r3, r0, #0
 8019d4a:	d006      	beq.n	8019d5a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2221      	movs	r2, #33	@ 0x21
 8019d50:	2104      	movs	r1, #4
 8019d52:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8019d54:	193b      	adds	r3, r7, r4
 8019d56:	2201      	movs	r2, #1
 8019d58:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8019d5a:	230f      	movs	r3, #15
 8019d5c:	18fb      	adds	r3, r7, r3
 8019d5e:	781b      	ldrb	r3, [r3, #0]
}
 8019d60:	0018      	movs	r0, r3
 8019d62:	46bd      	mov	sp, r7
 8019d64:	b005      	add	sp, #20
 8019d66:	bd90      	pop	{r4, r7, pc}

08019d68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	0002      	movs	r2, r0
 8019d70:	1dfb      	adds	r3, r7, #7
 8019d72:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8019d74:	2300      	movs	r3, #0
 8019d76:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8019d78:	e007      	b.n	8019d8a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8019d7a:	68fb      	ldr	r3, [r7, #12]
 8019d7c:	3301      	adds	r3, #1
 8019d7e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8019d80:	1dfb      	adds	r3, r7, #7
 8019d82:	1dfa      	adds	r2, r7, #7
 8019d84:	7812      	ldrb	r2, [r2, #0]
 8019d86:	3a0a      	subs	r2, #10
 8019d88:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8019d8a:	1dfb      	adds	r3, r7, #7
 8019d8c:	781b      	ldrb	r3, [r3, #0]
 8019d8e:	2b09      	cmp	r3, #9
 8019d90:	d8f3      	bhi.n	8019d7a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	b2db      	uxtb	r3, r3
 8019d96:	011b      	lsls	r3, r3, #4
 8019d98:	b2da      	uxtb	r2, r3
 8019d9a:	1dfb      	adds	r3, r7, #7
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	4313      	orrs	r3, r2
 8019da0:	b2db      	uxtb	r3, r3
}
 8019da2:	0018      	movs	r0, r3
 8019da4:	46bd      	mov	sp, r7
 8019da6:	b004      	add	sp, #16
 8019da8:	bd80      	pop	{r7, pc}

08019daa <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8019daa:	b580      	push	{r7, lr}
 8019dac:	b084      	sub	sp, #16
 8019dae:	af00      	add	r7, sp, #0
 8019db0:	0002      	movs	r2, r0
 8019db2:	1dfb      	adds	r3, r7, #7
 8019db4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8019db6:	2300      	movs	r3, #0
 8019db8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8019dba:	1dfb      	adds	r3, r7, #7
 8019dbc:	781b      	ldrb	r3, [r3, #0]
 8019dbe:	091b      	lsrs	r3, r3, #4
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	001a      	movs	r2, r3
 8019dc4:	0013      	movs	r3, r2
 8019dc6:	009b      	lsls	r3, r3, #2
 8019dc8:	189b      	adds	r3, r3, r2
 8019dca:	005b      	lsls	r3, r3, #1
 8019dcc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	b2da      	uxtb	r2, r3
 8019dd2:	1dfb      	adds	r3, r7, #7
 8019dd4:	781b      	ldrb	r3, [r3, #0]
 8019dd6:	210f      	movs	r1, #15
 8019dd8:	400b      	ands	r3, r1
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	18d3      	adds	r3, r2, r3
 8019dde:	b2db      	uxtb	r3, r3
}
 8019de0:	0018      	movs	r0, r3
 8019de2:	46bd      	mov	sp, r7
 8019de4:	b004      	add	sp, #16
 8019de6:	bd80      	pop	{r7, pc}

08019de8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b086      	sub	sp, #24
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	60f8      	str	r0, [r7, #12]
 8019df0:	60b9      	str	r1, [r7, #8]
 8019df2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8019df4:	4b64      	ldr	r3, [pc, #400]	@ (8019f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	22fa      	movs	r2, #250	@ 0xfa
 8019dfa:	01d1      	lsls	r1, r2, #7
 8019dfc:	0018      	movs	r0, r3
 8019dfe:	f7e6 f9d1 	bl	80001a4 <__udivsi3>
 8019e02:	0003      	movs	r3, r0
 8019e04:	001a      	movs	r2, r3
 8019e06:	0013      	movs	r3, r2
 8019e08:	015b      	lsls	r3, r3, #5
 8019e0a:	1a9b      	subs	r3, r3, r2
 8019e0c:	009b      	lsls	r3, r3, #2
 8019e0e:	189b      	adds	r3, r3, r2
 8019e10:	00db      	lsls	r3, r3, #3
 8019e12:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	2220      	movs	r2, #32
 8019e18:	5c9b      	ldrb	r3, [r3, r2]
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	d101      	bne.n	8019e22 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8019e1e:	2302      	movs	r3, #2
 8019e20:	e0ad      	b.n	8019f7e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	2220      	movs	r2, #32
 8019e26:	2101      	movs	r1, #1
 8019e28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	2221      	movs	r2, #33	@ 0x21
 8019e2e:	2102      	movs	r1, #2
 8019e30:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	22ca      	movs	r2, #202	@ 0xca
 8019e38:	625a      	str	r2, [r3, #36]	@ 0x24
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	2253      	movs	r2, #83	@ 0x53
 8019e40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	689a      	ldr	r2, [r3, #8]
 8019e48:	2380      	movs	r3, #128	@ 0x80
 8019e4a:	00db      	lsls	r3, r3, #3
 8019e4c:	4013      	ands	r3, r2
 8019e4e:	d019      	beq.n	8019e84 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	3b01      	subs	r3, #1
 8019e54:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8019e56:	697b      	ldr	r3, [r7, #20]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d10d      	bne.n	8019e78 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	22ff      	movs	r2, #255	@ 0xff
 8019e62:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	2221      	movs	r2, #33	@ 0x21
 8019e68:	2103      	movs	r1, #3
 8019e6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	2220      	movs	r2, #32
 8019e70:	2100      	movs	r1, #0
 8019e72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019e74:	2303      	movs	r3, #3
 8019e76:	e082      	b.n	8019f7e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	68db      	ldr	r3, [r3, #12]
 8019e7e:	2204      	movs	r2, #4
 8019e80:	4013      	ands	r3, r2
 8019e82:	d1e5      	bne.n	8019e50 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	689a      	ldr	r2, [r3, #8]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	493f      	ldr	r1, [pc, #252]	@ (8019f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8019e90:	400a      	ands	r2, r1
 8019e92:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	68db      	ldr	r3, [r3, #12]
 8019e9a:	22ff      	movs	r2, #255	@ 0xff
 8019e9c:	401a      	ands	r2, r3
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	493b      	ldr	r1, [pc, #236]	@ (8019f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8019ea4:	430a      	orrs	r2, r1
 8019ea6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8019ea8:	4b37      	ldr	r3, [pc, #220]	@ (8019f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	22fa      	movs	r2, #250	@ 0xfa
 8019eae:	01d1      	lsls	r1, r2, #7
 8019eb0:	0018      	movs	r0, r3
 8019eb2:	f7e6 f977 	bl	80001a4 <__udivsi3>
 8019eb6:	0003      	movs	r3, r0
 8019eb8:	001a      	movs	r2, r3
 8019eba:	0013      	movs	r3, r2
 8019ebc:	015b      	lsls	r3, r3, #5
 8019ebe:	1a9b      	subs	r3, r3, r2
 8019ec0:	009b      	lsls	r3, r3, #2
 8019ec2:	189b      	adds	r3, r3, r2
 8019ec4:	00db      	lsls	r3, r3, #3
 8019ec6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8019ec8:	697b      	ldr	r3, [r7, #20]
 8019eca:	3b01      	subs	r3, #1
 8019ecc:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8019ece:	697b      	ldr	r3, [r7, #20]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d10d      	bne.n	8019ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	22ff      	movs	r2, #255	@ 0xff
 8019eda:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	2221      	movs	r2, #33	@ 0x21
 8019ee0:	2103      	movs	r1, #3
 8019ee2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	2220      	movs	r2, #32
 8019ee8:	2100      	movs	r1, #0
 8019eea:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8019eec:	2303      	movs	r3, #3
 8019eee:	e046      	b.n	8019f7e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	68db      	ldr	r3, [r3, #12]
 8019ef6:	2204      	movs	r2, #4
 8019ef8:	4013      	ands	r3, r2
 8019efa:	d0e5      	beq.n	8019ec8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	689a      	ldr	r2, [r3, #8]
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	2107      	movs	r1, #7
 8019f08:	438a      	bics	r2, r1
 8019f0a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8019f0c:	68fb      	ldr	r3, [r7, #12]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	6899      	ldr	r1, [r3, #8]
 8019f12:	68fb      	ldr	r3, [r7, #12]
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	687a      	ldr	r2, [r7, #4]
 8019f18:	430a      	orrs	r2, r1
 8019f1a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	68ba      	ldr	r2, [r7, #8]
 8019f22:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8019f24:	4b1b      	ldr	r3, [pc, #108]	@ (8019f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f26:	681a      	ldr	r2, [r3, #0]
 8019f28:	4b1a      	ldr	r3, [pc, #104]	@ (8019f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f2a:	2180      	movs	r1, #128	@ 0x80
 8019f2c:	0349      	lsls	r1, r1, #13
 8019f2e:	430a      	orrs	r2, r1
 8019f30:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8019f32:	4b18      	ldr	r3, [pc, #96]	@ (8019f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f34:	689a      	ldr	r2, [r3, #8]
 8019f36:	4b17      	ldr	r3, [pc, #92]	@ (8019f94 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f38:	2180      	movs	r1, #128	@ 0x80
 8019f3a:	0349      	lsls	r1, r1, #13
 8019f3c:	430a      	orrs	r2, r1
 8019f3e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	689a      	ldr	r2, [r3, #8]
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	2180      	movs	r1, #128	@ 0x80
 8019f4c:	01c9      	lsls	r1, r1, #7
 8019f4e:	430a      	orrs	r2, r1
 8019f50:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	689a      	ldr	r2, [r3, #8]
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	2180      	movs	r1, #128	@ 0x80
 8019f5e:	00c9      	lsls	r1, r1, #3
 8019f60:	430a      	orrs	r2, r1
 8019f62:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	22ff      	movs	r2, #255	@ 0xff
 8019f6a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	2221      	movs	r2, #33	@ 0x21
 8019f70:	2101      	movs	r1, #1
 8019f72:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	2220      	movs	r2, #32
 8019f78:	2100      	movs	r1, #0
 8019f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019f7c:	2300      	movs	r3, #0
}
 8019f7e:	0018      	movs	r0, r3
 8019f80:	46bd      	mov	sp, r7
 8019f82:	b006      	add	sp, #24
 8019f84:	bd80      	pop	{r7, pc}
 8019f86:	46c0      	nop			@ (mov r8, r8)
 8019f88:	200000e0 	.word	0x200000e0
 8019f8c:	fffffbff 	.word	0xfffffbff
 8019f90:	fffffb7f 	.word	0xfffffb7f
 8019f94:	40010400 	.word	0x40010400

08019f98 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b084      	sub	sp, #16
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2220      	movs	r2, #32
 8019fa8:	5c9b      	ldrb	r3, [r3, r2]
 8019faa:	2b01      	cmp	r3, #1
 8019fac:	d101      	bne.n	8019fb2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8019fae:	2302      	movs	r3, #2
 8019fb0:	e04e      	b.n	801a050 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2220      	movs	r2, #32
 8019fb6:	2101      	movs	r1, #1
 8019fb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	2221      	movs	r2, #33	@ 0x21
 8019fbe:	2102      	movs	r1, #2
 8019fc0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	22ca      	movs	r2, #202	@ 0xca
 8019fc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	2253      	movs	r2, #83	@ 0x53
 8019fd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	689a      	ldr	r2, [r3, #8]
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	491e      	ldr	r1, [pc, #120]	@ (801a058 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8019fde:	400a      	ands	r2, r1
 8019fe0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	689a      	ldr	r2, [r3, #8]
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	491b      	ldr	r1, [pc, #108]	@ (801a05c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8019fee:	400a      	ands	r2, r1
 8019ff0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019ff2:	f7f8 f87f 	bl	80120f4 <HAL_GetTick>
 8019ff6:	0003      	movs	r3, r0
 8019ff8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8019ffa:	e016      	b.n	801a02a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019ffc:	f7f8 f87a 	bl	80120f4 <HAL_GetTick>
 801a000:	0002      	movs	r2, r0
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	1ad2      	subs	r2, r2, r3
 801a006:	23fa      	movs	r3, #250	@ 0xfa
 801a008:	009b      	lsls	r3, r3, #2
 801a00a:	429a      	cmp	r2, r3
 801a00c:	d90d      	bls.n	801a02a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	22ff      	movs	r2, #255	@ 0xff
 801a014:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	2221      	movs	r2, #33	@ 0x21
 801a01a:	2103      	movs	r1, #3
 801a01c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	2220      	movs	r2, #32
 801a022:	2100      	movs	r1, #0
 801a024:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801a026:	2303      	movs	r3, #3
 801a028:	e012      	b.n	801a050 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	68db      	ldr	r3, [r3, #12]
 801a030:	2204      	movs	r2, #4
 801a032:	4013      	ands	r3, r2
 801a034:	d0e2      	beq.n	8019ffc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	22ff      	movs	r2, #255	@ 0xff
 801a03c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	2221      	movs	r2, #33	@ 0x21
 801a042:	2101      	movs	r1, #1
 801a044:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	2220      	movs	r2, #32
 801a04a:	2100      	movs	r1, #0
 801a04c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a04e:	2300      	movs	r3, #0
}
 801a050:	0018      	movs	r0, r3
 801a052:	46bd      	mov	sp, r7
 801a054:	b004      	add	sp, #16
 801a056:	bd80      	pop	{r7, pc}
 801a058:	fffffbff 	.word	0xfffffbff
 801a05c:	ffffbfff 	.word	0xffffbfff

0801a060 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801a060:	b580      	push	{r7, lr}
 801a062:	b082      	sub	sp, #8
 801a064:	af00      	add	r7, sp, #0
 801a066:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801a068:	4b13      	ldr	r3, [pc, #76]	@ (801a0b8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801a06a:	2280      	movs	r2, #128	@ 0x80
 801a06c:	0352      	lsls	r2, r2, #13
 801a06e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	689a      	ldr	r2, [r3, #8]
 801a076:	2380      	movs	r3, #128	@ 0x80
 801a078:	01db      	lsls	r3, r3, #7
 801a07a:	4013      	ands	r3, r2
 801a07c:	d014      	beq.n	801a0a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	68da      	ldr	r2, [r3, #12]
 801a084:	2380      	movs	r3, #128	@ 0x80
 801a086:	00db      	lsls	r3, r3, #3
 801a088:	4013      	ands	r3, r2
 801a08a:	d00d      	beq.n	801a0a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	68db      	ldr	r3, [r3, #12]
 801a092:	22ff      	movs	r2, #255	@ 0xff
 801a094:	401a      	ands	r2, r3
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	4908      	ldr	r1, [pc, #32]	@ (801a0bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801a09c:	430a      	orrs	r2, r1
 801a09e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	0018      	movs	r0, r3
 801a0a4:	f000 f80c 	bl	801a0c0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2221      	movs	r2, #33	@ 0x21
 801a0ac:	2101      	movs	r1, #1
 801a0ae:	5499      	strb	r1, [r3, r2]
}
 801a0b0:	46c0      	nop			@ (mov r8, r8)
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	b002      	add	sp, #8
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	40010400 	.word	0x40010400
 801a0bc:	fffffb7f 	.word	0xfffffb7f

0801a0c0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b082      	sub	sp, #8
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801a0c8:	46c0      	nop			@ (mov r8, r8)
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	b002      	add	sp, #8
 801a0ce:	bd80      	pop	{r7, pc}

0801a0d0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b086      	sub	sp, #24
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	60f8      	str	r0, [r7, #12]
 801a0d8:	60b9      	str	r1, [r7, #8]
 801a0da:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	3350      	adds	r3, #80	@ 0x50
 801a0e6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	009b      	lsls	r3, r3, #2
 801a0ec:	697a      	ldr	r2, [r7, #20]
 801a0ee:	18d3      	adds	r3, r2, r3
 801a0f0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801a0f2:	697b      	ldr	r3, [r7, #20]
 801a0f4:	687a      	ldr	r2, [r7, #4]
 801a0f6:	601a      	str	r2, [r3, #0]
}
 801a0f8:	46c0      	nop			@ (mov r8, r8)
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	b006      	add	sp, #24
 801a0fe:	bd80      	pop	{r7, pc}

0801a100 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b084      	sub	sp, #16
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
 801a108:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801a10a:	2300      	movs	r3, #0
 801a10c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	3350      	adds	r3, #80	@ 0x50
 801a114:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801a116:	683b      	ldr	r3, [r7, #0]
 801a118:	009b      	lsls	r3, r3, #2
 801a11a:	68fa      	ldr	r2, [r7, #12]
 801a11c:	18d3      	adds	r3, r2, r3
 801a11e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	681b      	ldr	r3, [r3, #0]
}
 801a124:	0018      	movs	r0, r3
 801a126:	46bd      	mov	sp, r7
 801a128:	b004      	add	sp, #16
 801a12a:	bd80      	pop	{r7, pc}

0801a12c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	2b00      	cmp	r3, #0
 801a138:	d101      	bne.n	801a13e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a13a:	2301      	movs	r3, #1
 801a13c:	e032      	b.n	801a1a4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2239      	movs	r2, #57	@ 0x39
 801a142:	5c9b      	ldrb	r3, [r3, r2]
 801a144:	b2db      	uxtb	r3, r3
 801a146:	2b00      	cmp	r3, #0
 801a148:	d107      	bne.n	801a15a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	2238      	movs	r2, #56	@ 0x38
 801a14e:	2100      	movs	r1, #0
 801a150:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	0018      	movs	r0, r3
 801a156:	f7f7 f8dd 	bl	8011314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2239      	movs	r2, #57	@ 0x39
 801a15e:	2102      	movs	r1, #2
 801a160:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681a      	ldr	r2, [r3, #0]
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	3304      	adds	r3, #4
 801a16a:	0019      	movs	r1, r3
 801a16c:	0010      	movs	r0, r2
 801a16e:	f000 fa1d 	bl	801a5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	223e      	movs	r2, #62	@ 0x3e
 801a176:	2101      	movs	r1, #1
 801a178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	223a      	movs	r2, #58	@ 0x3a
 801a17e:	2101      	movs	r1, #1
 801a180:	5499      	strb	r1, [r3, r2]
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	223b      	movs	r2, #59	@ 0x3b
 801a186:	2101      	movs	r1, #1
 801a188:	5499      	strb	r1, [r3, r2]
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	223c      	movs	r2, #60	@ 0x3c
 801a18e:	2101      	movs	r1, #1
 801a190:	5499      	strb	r1, [r3, r2]
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	223d      	movs	r2, #61	@ 0x3d
 801a196:	2101      	movs	r1, #1
 801a198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	2239      	movs	r2, #57	@ 0x39
 801a19e:	2101      	movs	r1, #1
 801a1a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a1a2:	2300      	movs	r3, #0
}
 801a1a4:	0018      	movs	r0, r3
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	b002      	add	sp, #8
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b084      	sub	sp, #16
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	2239      	movs	r2, #57	@ 0x39
 801a1b8:	5c9b      	ldrb	r3, [r3, r2]
 801a1ba:	b2db      	uxtb	r3, r3
 801a1bc:	2b01      	cmp	r3, #1
 801a1be:	d001      	beq.n	801a1c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	e033      	b.n	801a22c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	2239      	movs	r2, #57	@ 0x39
 801a1c8:	2102      	movs	r1, #2
 801a1ca:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	681a      	ldr	r2, [r3, #0]
 801a1d0:	2380      	movs	r3, #128	@ 0x80
 801a1d2:	05db      	lsls	r3, r3, #23
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d00e      	beq.n	801a1f6 <HAL_TIM_Base_Start+0x4a>
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	4a15      	ldr	r2, [pc, #84]	@ (801a234 <HAL_TIM_Base_Start+0x88>)
 801a1de:	4293      	cmp	r3, r2
 801a1e0:	d009      	beq.n	801a1f6 <HAL_TIM_Base_Start+0x4a>
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4a14      	ldr	r2, [pc, #80]	@ (801a238 <HAL_TIM_Base_Start+0x8c>)
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d004      	beq.n	801a1f6 <HAL_TIM_Base_Start+0x4a>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	4a12      	ldr	r2, [pc, #72]	@ (801a23c <HAL_TIM_Base_Start+0x90>)
 801a1f2:	4293      	cmp	r3, r2
 801a1f4:	d111      	bne.n	801a21a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	689b      	ldr	r3, [r3, #8]
 801a1fc:	2207      	movs	r2, #7
 801a1fe:	4013      	ands	r3, r2
 801a200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a202:	68fb      	ldr	r3, [r7, #12]
 801a204:	2b06      	cmp	r3, #6
 801a206:	d010      	beq.n	801a22a <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	681a      	ldr	r2, [r3, #0]
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	2101      	movs	r1, #1
 801a214:	430a      	orrs	r2, r1
 801a216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a218:	e007      	b.n	801a22a <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	681a      	ldr	r2, [r3, #0]
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2101      	movs	r1, #1
 801a226:	430a      	orrs	r2, r1
 801a228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a22a:	2300      	movs	r3, #0
}
 801a22c:	0018      	movs	r0, r3
 801a22e:	46bd      	mov	sp, r7
 801a230:	b004      	add	sp, #16
 801a232:	bd80      	pop	{r7, pc}
 801a234:	40000400 	.word	0x40000400
 801a238:	40010800 	.word	0x40010800
 801a23c:	40011400 	.word	0x40011400

0801a240 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b082      	sub	sp, #8
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	6a1b      	ldr	r3, [r3, #32]
 801a24e:	4a0a      	ldr	r2, [pc, #40]	@ (801a278 <HAL_TIM_Base_Stop+0x38>)
 801a250:	4013      	ands	r3, r2
 801a252:	d107      	bne.n	801a264 <HAL_TIM_Base_Stop+0x24>
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	681a      	ldr	r2, [r3, #0]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	2101      	movs	r1, #1
 801a260:	438a      	bics	r2, r1
 801a262:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	2239      	movs	r2, #57	@ 0x39
 801a268:	2101      	movs	r1, #1
 801a26a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801a26c:	2300      	movs	r3, #0
}
 801a26e:	0018      	movs	r0, r3
 801a270:	46bd      	mov	sp, r7
 801a272:	b002      	add	sp, #8
 801a274:	bd80      	pop	{r7, pc}
 801a276:	46c0      	nop			@ (mov r8, r8)
 801a278:	00001111 	.word	0x00001111

0801a27c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d101      	bne.n	801a28e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a28a:	2301      	movs	r3, #1
 801a28c:	e032      	b.n	801a2f4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2239      	movs	r2, #57	@ 0x39
 801a292:	5c9b      	ldrb	r3, [r3, r2]
 801a294:	b2db      	uxtb	r3, r3
 801a296:	2b00      	cmp	r3, #0
 801a298:	d107      	bne.n	801a2aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	2238      	movs	r2, #56	@ 0x38
 801a29e:	2100      	movs	r1, #0
 801a2a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	0018      	movs	r0, r3
 801a2a6:	f7f7 f811 	bl	80112cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	2239      	movs	r2, #57	@ 0x39
 801a2ae:	2102      	movs	r1, #2
 801a2b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681a      	ldr	r2, [r3, #0]
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	3304      	adds	r3, #4
 801a2ba:	0019      	movs	r1, r3
 801a2bc:	0010      	movs	r0, r2
 801a2be:	f000 f975 	bl	801a5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	223e      	movs	r2, #62	@ 0x3e
 801a2c6:	2101      	movs	r1, #1
 801a2c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	223a      	movs	r2, #58	@ 0x3a
 801a2ce:	2101      	movs	r1, #1
 801a2d0:	5499      	strb	r1, [r3, r2]
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	223b      	movs	r2, #59	@ 0x3b
 801a2d6:	2101      	movs	r1, #1
 801a2d8:	5499      	strb	r1, [r3, r2]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	223c      	movs	r2, #60	@ 0x3c
 801a2de:	2101      	movs	r1, #1
 801a2e0:	5499      	strb	r1, [r3, r2]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	223d      	movs	r2, #61	@ 0x3d
 801a2e6:	2101      	movs	r1, #1
 801a2e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	2239      	movs	r2, #57	@ 0x39
 801a2ee:	2101      	movs	r1, #1
 801a2f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a2f2:	2300      	movs	r3, #0
}
 801a2f4:	0018      	movs	r0, r3
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	b002      	add	sp, #8
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b084      	sub	sp, #16
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
 801a304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a306:	683b      	ldr	r3, [r7, #0]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d108      	bne.n	801a31e <HAL_TIM_PWM_Start+0x22>
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	223a      	movs	r2, #58	@ 0x3a
 801a310:	5c9b      	ldrb	r3, [r3, r2]
 801a312:	b2db      	uxtb	r3, r3
 801a314:	3b01      	subs	r3, #1
 801a316:	1e5a      	subs	r2, r3, #1
 801a318:	4193      	sbcs	r3, r2
 801a31a:	b2db      	uxtb	r3, r3
 801a31c:	e01f      	b.n	801a35e <HAL_TIM_PWM_Start+0x62>
 801a31e:	683b      	ldr	r3, [r7, #0]
 801a320:	2b04      	cmp	r3, #4
 801a322:	d108      	bne.n	801a336 <HAL_TIM_PWM_Start+0x3a>
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	223b      	movs	r2, #59	@ 0x3b
 801a328:	5c9b      	ldrb	r3, [r3, r2]
 801a32a:	b2db      	uxtb	r3, r3
 801a32c:	3b01      	subs	r3, #1
 801a32e:	1e5a      	subs	r2, r3, #1
 801a330:	4193      	sbcs	r3, r2
 801a332:	b2db      	uxtb	r3, r3
 801a334:	e013      	b.n	801a35e <HAL_TIM_PWM_Start+0x62>
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	2b08      	cmp	r3, #8
 801a33a:	d108      	bne.n	801a34e <HAL_TIM_PWM_Start+0x52>
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	223c      	movs	r2, #60	@ 0x3c
 801a340:	5c9b      	ldrb	r3, [r3, r2]
 801a342:	b2db      	uxtb	r3, r3
 801a344:	3b01      	subs	r3, #1
 801a346:	1e5a      	subs	r2, r3, #1
 801a348:	4193      	sbcs	r3, r2
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	e007      	b.n	801a35e <HAL_TIM_PWM_Start+0x62>
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	223d      	movs	r2, #61	@ 0x3d
 801a352:	5c9b      	ldrb	r3, [r3, r2]
 801a354:	b2db      	uxtb	r3, r3
 801a356:	3b01      	subs	r3, #1
 801a358:	1e5a      	subs	r2, r3, #1
 801a35a:	4193      	sbcs	r3, r2
 801a35c:	b2db      	uxtb	r3, r3
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d001      	beq.n	801a366 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801a362:	2301      	movs	r3, #1
 801a364:	e052      	b.n	801a40c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a366:	683b      	ldr	r3, [r7, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d104      	bne.n	801a376 <HAL_TIM_PWM_Start+0x7a>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	223a      	movs	r2, #58	@ 0x3a
 801a370:	2102      	movs	r1, #2
 801a372:	5499      	strb	r1, [r3, r2]
 801a374:	e013      	b.n	801a39e <HAL_TIM_PWM_Start+0xa2>
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	2b04      	cmp	r3, #4
 801a37a:	d104      	bne.n	801a386 <HAL_TIM_PWM_Start+0x8a>
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	223b      	movs	r2, #59	@ 0x3b
 801a380:	2102      	movs	r1, #2
 801a382:	5499      	strb	r1, [r3, r2]
 801a384:	e00b      	b.n	801a39e <HAL_TIM_PWM_Start+0xa2>
 801a386:	683b      	ldr	r3, [r7, #0]
 801a388:	2b08      	cmp	r3, #8
 801a38a:	d104      	bne.n	801a396 <HAL_TIM_PWM_Start+0x9a>
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	223c      	movs	r2, #60	@ 0x3c
 801a390:	2102      	movs	r1, #2
 801a392:	5499      	strb	r1, [r3, r2]
 801a394:	e003      	b.n	801a39e <HAL_TIM_PWM_Start+0xa2>
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	223d      	movs	r2, #61	@ 0x3d
 801a39a:	2102      	movs	r1, #2
 801a39c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	6839      	ldr	r1, [r7, #0]
 801a3a4:	2201      	movs	r2, #1
 801a3a6:	0018      	movs	r0, r3
 801a3a8:	f000 fa62 	bl	801a870 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	681a      	ldr	r2, [r3, #0]
 801a3b0:	2380      	movs	r3, #128	@ 0x80
 801a3b2:	05db      	lsls	r3, r3, #23
 801a3b4:	429a      	cmp	r2, r3
 801a3b6:	d00e      	beq.n	801a3d6 <HAL_TIM_PWM_Start+0xda>
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	4a15      	ldr	r2, [pc, #84]	@ (801a414 <HAL_TIM_PWM_Start+0x118>)
 801a3be:	4293      	cmp	r3, r2
 801a3c0:	d009      	beq.n	801a3d6 <HAL_TIM_PWM_Start+0xda>
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	4a14      	ldr	r2, [pc, #80]	@ (801a418 <HAL_TIM_PWM_Start+0x11c>)
 801a3c8:	4293      	cmp	r3, r2
 801a3ca:	d004      	beq.n	801a3d6 <HAL_TIM_PWM_Start+0xda>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	4a12      	ldr	r2, [pc, #72]	@ (801a41c <HAL_TIM_PWM_Start+0x120>)
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	d111      	bne.n	801a3fa <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	689b      	ldr	r3, [r3, #8]
 801a3dc:	2207      	movs	r2, #7
 801a3de:	4013      	ands	r3, r2
 801a3e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	2b06      	cmp	r3, #6
 801a3e6:	d010      	beq.n	801a40a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	681a      	ldr	r2, [r3, #0]
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	2101      	movs	r1, #1
 801a3f4:	430a      	orrs	r2, r1
 801a3f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a3f8:	e007      	b.n	801a40a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	681a      	ldr	r2, [r3, #0]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	2101      	movs	r1, #1
 801a406:	430a      	orrs	r2, r1
 801a408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a40a:	2300      	movs	r3, #0
}
 801a40c:	0018      	movs	r0, r3
 801a40e:	46bd      	mov	sp, r7
 801a410:	b004      	add	sp, #16
 801a412:	bd80      	pop	{r7, pc}
 801a414:	40000400 	.word	0x40000400
 801a418:	40010800 	.word	0x40010800
 801a41c:	40011400 	.word	0x40011400

0801a420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b086      	sub	sp, #24
 801a424:	af00      	add	r7, sp, #0
 801a426:	60f8      	str	r0, [r7, #12]
 801a428:	60b9      	str	r1, [r7, #8]
 801a42a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a42c:	2317      	movs	r3, #23
 801a42e:	18fb      	adds	r3, r7, r3
 801a430:	2200      	movs	r2, #0
 801a432:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a434:	68fb      	ldr	r3, [r7, #12]
 801a436:	2238      	movs	r2, #56	@ 0x38
 801a438:	5c9b      	ldrb	r3, [r3, r2]
 801a43a:	2b01      	cmp	r3, #1
 801a43c:	d101      	bne.n	801a442 <HAL_TIM_PWM_ConfigChannel+0x22>
 801a43e:	2302      	movs	r3, #2
 801a440:	e0ad      	b.n	801a59e <HAL_TIM_PWM_ConfigChannel+0x17e>
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	2238      	movs	r2, #56	@ 0x38
 801a446:	2101      	movs	r1, #1
 801a448:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2b0c      	cmp	r3, #12
 801a44e:	d100      	bne.n	801a452 <HAL_TIM_PWM_ConfigChannel+0x32>
 801a450:	e076      	b.n	801a540 <HAL_TIM_PWM_ConfigChannel+0x120>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2b0c      	cmp	r3, #12
 801a456:	d900      	bls.n	801a45a <HAL_TIM_PWM_ConfigChannel+0x3a>
 801a458:	e095      	b.n	801a586 <HAL_TIM_PWM_ConfigChannel+0x166>
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	2b08      	cmp	r3, #8
 801a45e:	d04e      	beq.n	801a4fe <HAL_TIM_PWM_ConfigChannel+0xde>
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	2b08      	cmp	r3, #8
 801a464:	d900      	bls.n	801a468 <HAL_TIM_PWM_ConfigChannel+0x48>
 801a466:	e08e      	b.n	801a586 <HAL_TIM_PWM_ConfigChannel+0x166>
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d003      	beq.n	801a476 <HAL_TIM_PWM_ConfigChannel+0x56>
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	2b04      	cmp	r3, #4
 801a472:	d021      	beq.n	801a4b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 801a474:	e087      	b.n	801a586 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	68ba      	ldr	r2, [r7, #8]
 801a47c:	0011      	movs	r1, r2
 801a47e:	0018      	movs	r0, r3
 801a480:	f000 f8f2 	bl	801a668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	699a      	ldr	r2, [r3, #24]
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2108      	movs	r1, #8
 801a490:	430a      	orrs	r2, r1
 801a492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	699a      	ldr	r2, [r3, #24]
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2104      	movs	r1, #4
 801a4a0:	438a      	bics	r2, r1
 801a4a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	6999      	ldr	r1, [r3, #24]
 801a4aa:	68bb      	ldr	r3, [r7, #8]
 801a4ac:	68da      	ldr	r2, [r3, #12]
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	430a      	orrs	r2, r1
 801a4b4:	619a      	str	r2, [r3, #24]
      break;
 801a4b6:	e06b      	b.n	801a590 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	68ba      	ldr	r2, [r7, #8]
 801a4be:	0011      	movs	r1, r2
 801a4c0:	0018      	movs	r0, r3
 801a4c2:	f000 f90d 	bl	801a6e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	699a      	ldr	r2, [r3, #24]
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2180      	movs	r1, #128	@ 0x80
 801a4d2:	0109      	lsls	r1, r1, #4
 801a4d4:	430a      	orrs	r2, r1
 801a4d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	699a      	ldr	r2, [r3, #24]
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	4931      	ldr	r1, [pc, #196]	@ (801a5a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801a4e4:	400a      	ands	r2, r1
 801a4e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	6999      	ldr	r1, [r3, #24]
 801a4ee:	68bb      	ldr	r3, [r7, #8]
 801a4f0:	68db      	ldr	r3, [r3, #12]
 801a4f2:	021a      	lsls	r2, r3, #8
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	430a      	orrs	r2, r1
 801a4fa:	619a      	str	r2, [r3, #24]
      break;
 801a4fc:	e048      	b.n	801a590 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	68ba      	ldr	r2, [r7, #8]
 801a504:	0011      	movs	r1, r2
 801a506:	0018      	movs	r0, r3
 801a508:	f000 f92c 	bl	801a764 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	69da      	ldr	r2, [r3, #28]
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	2108      	movs	r1, #8
 801a518:	430a      	orrs	r2, r1
 801a51a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	69da      	ldr	r2, [r3, #28]
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	2104      	movs	r1, #4
 801a528:	438a      	bics	r2, r1
 801a52a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	69d9      	ldr	r1, [r3, #28]
 801a532:	68bb      	ldr	r3, [r7, #8]
 801a534:	68da      	ldr	r2, [r3, #12]
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	430a      	orrs	r2, r1
 801a53c:	61da      	str	r2, [r3, #28]
      break;
 801a53e:	e027      	b.n	801a590 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	68ba      	ldr	r2, [r7, #8]
 801a546:	0011      	movs	r1, r2
 801a548:	0018      	movs	r0, r3
 801a54a:	f000 f94b 	bl	801a7e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	69da      	ldr	r2, [r3, #28]
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	2180      	movs	r1, #128	@ 0x80
 801a55a:	0109      	lsls	r1, r1, #4
 801a55c:	430a      	orrs	r2, r1
 801a55e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	69da      	ldr	r2, [r3, #28]
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	490f      	ldr	r1, [pc, #60]	@ (801a5a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801a56c:	400a      	ands	r2, r1
 801a56e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	69d9      	ldr	r1, [r3, #28]
 801a576:	68bb      	ldr	r3, [r7, #8]
 801a578:	68db      	ldr	r3, [r3, #12]
 801a57a:	021a      	lsls	r2, r3, #8
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	430a      	orrs	r2, r1
 801a582:	61da      	str	r2, [r3, #28]
      break;
 801a584:	e004      	b.n	801a590 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801a586:	2317      	movs	r3, #23
 801a588:	18fb      	adds	r3, r7, r3
 801a58a:	2201      	movs	r2, #1
 801a58c:	701a      	strb	r2, [r3, #0]
      break;
 801a58e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	2238      	movs	r2, #56	@ 0x38
 801a594:	2100      	movs	r1, #0
 801a596:	5499      	strb	r1, [r3, r2]

  return status;
 801a598:	2317      	movs	r3, #23
 801a59a:	18fb      	adds	r3, r7, r3
 801a59c:	781b      	ldrb	r3, [r3, #0]
}
 801a59e:	0018      	movs	r0, r3
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	b006      	add	sp, #24
 801a5a4:	bd80      	pop	{r7, pc}
 801a5a6:	46c0      	nop			@ (mov r8, r8)
 801a5a8:	fffffbff 	.word	0xfffffbff

0801a5ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b084      	sub	sp, #16
 801a5b0:	af00      	add	r7, sp, #0
 801a5b2:	6078      	str	r0, [r7, #4]
 801a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	681b      	ldr	r3, [r3, #0]
 801a5ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a5bc:	687a      	ldr	r2, [r7, #4]
 801a5be:	2380      	movs	r3, #128	@ 0x80
 801a5c0:	05db      	lsls	r3, r3, #23
 801a5c2:	429a      	cmp	r2, r3
 801a5c4:	d00b      	beq.n	801a5de <TIM_Base_SetConfig+0x32>
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	4a23      	ldr	r2, [pc, #140]	@ (801a658 <TIM_Base_SetConfig+0xac>)
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	d007      	beq.n	801a5de <TIM_Base_SetConfig+0x32>
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	4a22      	ldr	r2, [pc, #136]	@ (801a65c <TIM_Base_SetConfig+0xb0>)
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	d003      	beq.n	801a5de <TIM_Base_SetConfig+0x32>
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	4a21      	ldr	r2, [pc, #132]	@ (801a660 <TIM_Base_SetConfig+0xb4>)
 801a5da:	4293      	cmp	r3, r2
 801a5dc:	d108      	bne.n	801a5f0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	2270      	movs	r2, #112	@ 0x70
 801a5e2:	4393      	bics	r3, r2
 801a5e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a5e6:	683b      	ldr	r3, [r7, #0]
 801a5e8:	685b      	ldr	r3, [r3, #4]
 801a5ea:	68fa      	ldr	r2, [r7, #12]
 801a5ec:	4313      	orrs	r3, r2
 801a5ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a5f0:	687a      	ldr	r2, [r7, #4]
 801a5f2:	2380      	movs	r3, #128	@ 0x80
 801a5f4:	05db      	lsls	r3, r3, #23
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d00b      	beq.n	801a612 <TIM_Base_SetConfig+0x66>
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	4a16      	ldr	r2, [pc, #88]	@ (801a658 <TIM_Base_SetConfig+0xac>)
 801a5fe:	4293      	cmp	r3, r2
 801a600:	d007      	beq.n	801a612 <TIM_Base_SetConfig+0x66>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	4a15      	ldr	r2, [pc, #84]	@ (801a65c <TIM_Base_SetConfig+0xb0>)
 801a606:	4293      	cmp	r3, r2
 801a608:	d003      	beq.n	801a612 <TIM_Base_SetConfig+0x66>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	4a14      	ldr	r2, [pc, #80]	@ (801a660 <TIM_Base_SetConfig+0xb4>)
 801a60e:	4293      	cmp	r3, r2
 801a610:	d108      	bne.n	801a624 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	4a13      	ldr	r2, [pc, #76]	@ (801a664 <TIM_Base_SetConfig+0xb8>)
 801a616:	4013      	ands	r3, r2
 801a618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	68db      	ldr	r3, [r3, #12]
 801a61e:	68fa      	ldr	r2, [r7, #12]
 801a620:	4313      	orrs	r3, r2
 801a622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2280      	movs	r2, #128	@ 0x80
 801a628:	4393      	bics	r3, r2
 801a62a:	001a      	movs	r2, r3
 801a62c:	683b      	ldr	r3, [r7, #0]
 801a62e:	691b      	ldr	r3, [r3, #16]
 801a630:	4313      	orrs	r3, r2
 801a632:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	68fa      	ldr	r2, [r7, #12]
 801a638:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	689a      	ldr	r2, [r3, #8]
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a642:	683b      	ldr	r3, [r7, #0]
 801a644:	681a      	ldr	r2, [r3, #0]
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	2201      	movs	r2, #1
 801a64e:	615a      	str	r2, [r3, #20]
}
 801a650:	46c0      	nop			@ (mov r8, r8)
 801a652:	46bd      	mov	sp, r7
 801a654:	b004      	add	sp, #16
 801a656:	bd80      	pop	{r7, pc}
 801a658:	40000400 	.word	0x40000400
 801a65c:	40010800 	.word	0x40010800
 801a660:	40011400 	.word	0x40011400
 801a664:	fffffcff 	.word	0xfffffcff

0801a668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b086      	sub	sp, #24
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
 801a670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	6a1b      	ldr	r3, [r3, #32]
 801a676:	2201      	movs	r2, #1
 801a678:	4393      	bics	r3, r2
 801a67a:	001a      	movs	r2, r3
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	6a1b      	ldr	r3, [r3, #32]
 801a684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	685b      	ldr	r3, [r3, #4]
 801a68a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	699b      	ldr	r3, [r3, #24]
 801a690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	2270      	movs	r2, #112	@ 0x70
 801a696:	4393      	bics	r3, r2
 801a698:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	2203      	movs	r2, #3
 801a69e:	4393      	bics	r3, r2
 801a6a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a6a2:	683b      	ldr	r3, [r7, #0]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	68fa      	ldr	r2, [r7, #12]
 801a6a8:	4313      	orrs	r3, r2
 801a6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a6ac:	697b      	ldr	r3, [r7, #20]
 801a6ae:	2202      	movs	r2, #2
 801a6b0:	4393      	bics	r3, r2
 801a6b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a6b4:	683b      	ldr	r3, [r7, #0]
 801a6b6:	689b      	ldr	r3, [r3, #8]
 801a6b8:	697a      	ldr	r2, [r7, #20]
 801a6ba:	4313      	orrs	r3, r2
 801a6bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	693a      	ldr	r2, [r7, #16]
 801a6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	68fa      	ldr	r2, [r7, #12]
 801a6c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a6ca:	683b      	ldr	r3, [r7, #0]
 801a6cc:	685a      	ldr	r2, [r3, #4]
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	697a      	ldr	r2, [r7, #20]
 801a6d6:	621a      	str	r2, [r3, #32]
}
 801a6d8:	46c0      	nop			@ (mov r8, r8)
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	b006      	add	sp, #24
 801a6de:	bd80      	pop	{r7, pc}

0801a6e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b086      	sub	sp, #24
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
 801a6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	6a1b      	ldr	r3, [r3, #32]
 801a6ee:	2210      	movs	r2, #16
 801a6f0:	4393      	bics	r3, r2
 801a6f2:	001a      	movs	r2, r3
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6a1b      	ldr	r3, [r3, #32]
 801a6fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	685b      	ldr	r3, [r3, #4]
 801a702:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	699b      	ldr	r3, [r3, #24]
 801a708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	4a13      	ldr	r2, [pc, #76]	@ (801a75c <TIM_OC2_SetConfig+0x7c>)
 801a70e:	4013      	ands	r3, r2
 801a710:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	4a12      	ldr	r2, [pc, #72]	@ (801a760 <TIM_OC2_SetConfig+0x80>)
 801a716:	4013      	ands	r3, r2
 801a718:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a71a:	683b      	ldr	r3, [r7, #0]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	021b      	lsls	r3, r3, #8
 801a720:	68fa      	ldr	r2, [r7, #12]
 801a722:	4313      	orrs	r3, r2
 801a724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	2220      	movs	r2, #32
 801a72a:	4393      	bics	r3, r2
 801a72c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a72e:	683b      	ldr	r3, [r7, #0]
 801a730:	689b      	ldr	r3, [r3, #8]
 801a732:	011b      	lsls	r3, r3, #4
 801a734:	697a      	ldr	r2, [r7, #20]
 801a736:	4313      	orrs	r3, r2
 801a738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	693a      	ldr	r2, [r7, #16]
 801a73e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	68fa      	ldr	r2, [r7, #12]
 801a744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a746:	683b      	ldr	r3, [r7, #0]
 801a748:	685a      	ldr	r2, [r3, #4]
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	697a      	ldr	r2, [r7, #20]
 801a752:	621a      	str	r2, [r3, #32]
}
 801a754:	46c0      	nop			@ (mov r8, r8)
 801a756:	46bd      	mov	sp, r7
 801a758:	b006      	add	sp, #24
 801a75a:	bd80      	pop	{r7, pc}
 801a75c:	ffff8fff 	.word	0xffff8fff
 801a760:	fffffcff 	.word	0xfffffcff

0801a764 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b086      	sub	sp, #24
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
 801a76c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	6a1b      	ldr	r3, [r3, #32]
 801a772:	4a1a      	ldr	r2, [pc, #104]	@ (801a7dc <TIM_OC3_SetConfig+0x78>)
 801a774:	401a      	ands	r2, r3
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	6a1b      	ldr	r3, [r3, #32]
 801a77e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	685b      	ldr	r3, [r3, #4]
 801a784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	69db      	ldr	r3, [r3, #28]
 801a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	2270      	movs	r2, #112	@ 0x70
 801a790:	4393      	bics	r3, r2
 801a792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	2203      	movs	r2, #3
 801a798:	4393      	bics	r3, r2
 801a79a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a79c:	683b      	ldr	r3, [r7, #0]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	68fa      	ldr	r2, [r7, #12]
 801a7a2:	4313      	orrs	r3, r2
 801a7a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a7a6:	697b      	ldr	r3, [r7, #20]
 801a7a8:	4a0d      	ldr	r2, [pc, #52]	@ (801a7e0 <TIM_OC3_SetConfig+0x7c>)
 801a7aa:	4013      	ands	r3, r2
 801a7ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a7ae:	683b      	ldr	r3, [r7, #0]
 801a7b0:	689b      	ldr	r3, [r3, #8]
 801a7b2:	021b      	lsls	r3, r3, #8
 801a7b4:	697a      	ldr	r2, [r7, #20]
 801a7b6:	4313      	orrs	r3, r2
 801a7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	693a      	ldr	r2, [r7, #16]
 801a7be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	68fa      	ldr	r2, [r7, #12]
 801a7c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a7c6:	683b      	ldr	r3, [r7, #0]
 801a7c8:	685a      	ldr	r2, [r3, #4]
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	697a      	ldr	r2, [r7, #20]
 801a7d2:	621a      	str	r2, [r3, #32]
}
 801a7d4:	46c0      	nop			@ (mov r8, r8)
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	b006      	add	sp, #24
 801a7da:	bd80      	pop	{r7, pc}
 801a7dc:	fffffeff 	.word	0xfffffeff
 801a7e0:	fffffdff 	.word	0xfffffdff

0801a7e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b086      	sub	sp, #24
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
 801a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6a1b      	ldr	r3, [r3, #32]
 801a7f2:	4a1b      	ldr	r2, [pc, #108]	@ (801a860 <TIM_OC4_SetConfig+0x7c>)
 801a7f4:	401a      	ands	r2, r3
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	6a1b      	ldr	r3, [r3, #32]
 801a7fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	685b      	ldr	r3, [r3, #4]
 801a804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	69db      	ldr	r3, [r3, #28]
 801a80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	4a15      	ldr	r2, [pc, #84]	@ (801a864 <TIM_OC4_SetConfig+0x80>)
 801a810:	4013      	ands	r3, r2
 801a812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	4a14      	ldr	r2, [pc, #80]	@ (801a868 <TIM_OC4_SetConfig+0x84>)
 801a818:	4013      	ands	r3, r2
 801a81a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a81c:	683b      	ldr	r3, [r7, #0]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	021b      	lsls	r3, r3, #8
 801a822:	68fa      	ldr	r2, [r7, #12]
 801a824:	4313      	orrs	r3, r2
 801a826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a828:	697b      	ldr	r3, [r7, #20]
 801a82a:	4a10      	ldr	r2, [pc, #64]	@ (801a86c <TIM_OC4_SetConfig+0x88>)
 801a82c:	4013      	ands	r3, r2
 801a82e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a830:	683b      	ldr	r3, [r7, #0]
 801a832:	689b      	ldr	r3, [r3, #8]
 801a834:	031b      	lsls	r3, r3, #12
 801a836:	697a      	ldr	r2, [r7, #20]
 801a838:	4313      	orrs	r3, r2
 801a83a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	693a      	ldr	r2, [r7, #16]
 801a840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	68fa      	ldr	r2, [r7, #12]
 801a846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a848:	683b      	ldr	r3, [r7, #0]
 801a84a:	685a      	ldr	r2, [r3, #4]
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	697a      	ldr	r2, [r7, #20]
 801a854:	621a      	str	r2, [r3, #32]
}
 801a856:	46c0      	nop			@ (mov r8, r8)
 801a858:	46bd      	mov	sp, r7
 801a85a:	b006      	add	sp, #24
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	46c0      	nop			@ (mov r8, r8)
 801a860:	ffffefff 	.word	0xffffefff
 801a864:	ffff8fff 	.word	0xffff8fff
 801a868:	fffffcff 	.word	0xfffffcff
 801a86c:	ffffdfff 	.word	0xffffdfff

0801a870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b086      	sub	sp, #24
 801a874:	af00      	add	r7, sp, #0
 801a876:	60f8      	str	r0, [r7, #12]
 801a878:	60b9      	str	r1, [r7, #8]
 801a87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a87c:	68bb      	ldr	r3, [r7, #8]
 801a87e:	221f      	movs	r2, #31
 801a880:	4013      	ands	r3, r2
 801a882:	2201      	movs	r2, #1
 801a884:	409a      	lsls	r2, r3
 801a886:	0013      	movs	r3, r2
 801a888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	6a1b      	ldr	r3, [r3, #32]
 801a88e:	697a      	ldr	r2, [r7, #20]
 801a890:	43d2      	mvns	r2, r2
 801a892:	401a      	ands	r2, r3
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	6a1a      	ldr	r2, [r3, #32]
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	211f      	movs	r1, #31
 801a8a0:	400b      	ands	r3, r1
 801a8a2:	6879      	ldr	r1, [r7, #4]
 801a8a4:	4099      	lsls	r1, r3
 801a8a6:	000b      	movs	r3, r1
 801a8a8:	431a      	orrs	r2, r3
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	621a      	str	r2, [r3, #32]
}
 801a8ae:	46c0      	nop			@ (mov r8, r8)
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	b006      	add	sp, #24
 801a8b4:	bd80      	pop	{r7, pc}
	...

0801a8b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b084      	sub	sp, #16
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	6078      	str	r0, [r7, #4]
 801a8c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	2238      	movs	r2, #56	@ 0x38
 801a8c6:	5c9b      	ldrb	r3, [r3, r2]
 801a8c8:	2b01      	cmp	r3, #1
 801a8ca:	d101      	bne.n	801a8d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a8cc:	2302      	movs	r3, #2
 801a8ce:	e047      	b.n	801a960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	2238      	movs	r2, #56	@ 0x38
 801a8d4:	2101      	movs	r1, #1
 801a8d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	2239      	movs	r2, #57	@ 0x39
 801a8dc:	2102      	movs	r1, #2
 801a8de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	685b      	ldr	r3, [r3, #4]
 801a8e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	689b      	ldr	r3, [r3, #8]
 801a8ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	2270      	movs	r2, #112	@ 0x70
 801a8f4:	4393      	bics	r3, r2
 801a8f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a8f8:	683b      	ldr	r3, [r7, #0]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	68fa      	ldr	r2, [r7, #12]
 801a8fe:	4313      	orrs	r3, r2
 801a900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	68fa      	ldr	r2, [r7, #12]
 801a908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	681a      	ldr	r2, [r3, #0]
 801a90e:	2380      	movs	r3, #128	@ 0x80
 801a910:	05db      	lsls	r3, r3, #23
 801a912:	429a      	cmp	r2, r3
 801a914:	d00e      	beq.n	801a934 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	4a13      	ldr	r2, [pc, #76]	@ (801a968 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801a91c:	4293      	cmp	r3, r2
 801a91e:	d009      	beq.n	801a934 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4a11      	ldr	r2, [pc, #68]	@ (801a96c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801a926:	4293      	cmp	r3, r2
 801a928:	d004      	beq.n	801a934 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	4a10      	ldr	r2, [pc, #64]	@ (801a970 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801a930:	4293      	cmp	r3, r2
 801a932:	d10c      	bne.n	801a94e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a934:	68bb      	ldr	r3, [r7, #8]
 801a936:	2280      	movs	r2, #128	@ 0x80
 801a938:	4393      	bics	r3, r2
 801a93a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a93c:	683b      	ldr	r3, [r7, #0]
 801a93e:	685b      	ldr	r3, [r3, #4]
 801a940:	68ba      	ldr	r2, [r7, #8]
 801a942:	4313      	orrs	r3, r2
 801a944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	68ba      	ldr	r2, [r7, #8]
 801a94c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	2239      	movs	r2, #57	@ 0x39
 801a952:	2101      	movs	r1, #1
 801a954:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2238      	movs	r2, #56	@ 0x38
 801a95a:	2100      	movs	r1, #0
 801a95c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a95e:	2300      	movs	r3, #0
}
 801a960:	0018      	movs	r0, r3
 801a962:	46bd      	mov	sp, r7
 801a964:	b004      	add	sp, #16
 801a966:	bd80      	pop	{r7, pc}
 801a968:	40000400 	.word	0x40000400
 801a96c:	40010800 	.word	0x40010800
 801a970:	40011400 	.word	0x40011400

0801a974 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
 801a97c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2238      	movs	r2, #56	@ 0x38
 801a982:	5c9b      	ldrb	r3, [r3, r2]
 801a984:	2b01      	cmp	r3, #1
 801a986:	d101      	bne.n	801a98c <HAL_TIMEx_RemapConfig+0x18>
 801a988:	2302      	movs	r3, #2
 801a98a:	e00c      	b.n	801a9a6 <HAL_TIMEx_RemapConfig+0x32>
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2238      	movs	r2, #56	@ 0x38
 801a990:	2101      	movs	r1, #1
 801a992:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	683a      	ldr	r2, [r7, #0]
 801a99a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	2238      	movs	r2, #56	@ 0x38
 801a9a0:	2100      	movs	r1, #0
 801a9a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a9a4:	2300      	movs	r3, #0
}
 801a9a6:	0018      	movs	r0, r3
 801a9a8:	46bd      	mov	sp, r7
 801a9aa:	b002      	add	sp, #8
 801a9ac:	bd80      	pop	{r7, pc}
	...

0801a9b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b082      	sub	sp, #8
 801a9b4:	af00      	add	r7, sp, #0
 801a9b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d101      	bne.n	801a9c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a9be:	2301      	movs	r3, #1
 801a9c0:	e053      	b.n	801aa6a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d116      	bne.n	801a9f8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	2278      	movs	r2, #120	@ 0x78
 801a9ce:	2100      	movs	r1, #0
 801a9d0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	0018      	movs	r0, r3
 801a9d6:	f000 fd65 	bl	801b4a4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	22b0      	movs	r2, #176	@ 0xb0
 801a9de:	589b      	ldr	r3, [r3, r2]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d103      	bne.n	801a9ec <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	21b0      	movs	r1, #176	@ 0xb0
 801a9e8:	4a22      	ldr	r2, [pc, #136]	@ (801aa74 <HAL_UART_Init+0xc4>)
 801a9ea:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	22b0      	movs	r2, #176	@ 0xb0
 801a9f0:	589b      	ldr	r3, [r3, r2]
 801a9f2:	687a      	ldr	r2, [r7, #4]
 801a9f4:	0010      	movs	r0, r2
 801a9f6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	2224      	movs	r2, #36	@ 0x24
 801a9fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	681a      	ldr	r2, [r3, #0]
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	2101      	movs	r1, #1
 801aa0a:	438a      	bics	r2, r1
 801aa0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	0018      	movs	r0, r3
 801aa12:	f000 fd8b 	bl	801b52c <UART_SetConfig>
 801aa16:	0003      	movs	r3, r0
 801aa18:	2b01      	cmp	r3, #1
 801aa1a:	d101      	bne.n	801aa20 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	e024      	b.n	801aa6a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d003      	beq.n	801aa30 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	0018      	movs	r0, r3
 801aa2c:	f001 f81c 	bl	801ba68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	685a      	ldr	r2, [r3, #4]
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	490f      	ldr	r1, [pc, #60]	@ (801aa78 <HAL_UART_Init+0xc8>)
 801aa3c:	400a      	ands	r2, r1
 801aa3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	689a      	ldr	r2, [r3, #8]
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	212a      	movs	r1, #42	@ 0x2a
 801aa4c:	438a      	bics	r2, r1
 801aa4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	681a      	ldr	r2, [r3, #0]
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2101      	movs	r1, #1
 801aa5c:	430a      	orrs	r2, r1
 801aa5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	0018      	movs	r0, r3
 801aa64:	f001 f8b4 	bl	801bbd0 <UART_CheckIdleState>
 801aa68:	0003      	movs	r3, r0
}
 801aa6a:	0018      	movs	r0, r3
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	b002      	add	sp, #8
 801aa70:	bd80      	pop	{r7, pc}
 801aa72:	46c0      	nop			@ (mov r8, r8)
 801aa74:	08011541 	.word	0x08011541
 801aa78:	ffffb7ff 	.word	0xffffb7ff

0801aa7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b08a      	sub	sp, #40	@ 0x28
 801aa80:	af02      	add	r7, sp, #8
 801aa82:	60f8      	str	r0, [r7, #12]
 801aa84:	60b9      	str	r1, [r7, #8]
 801aa86:	603b      	str	r3, [r7, #0]
 801aa88:	1dbb      	adds	r3, r7, #6
 801aa8a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801aa90:	2b20      	cmp	r3, #32
 801aa92:	d000      	beq.n	801aa96 <HAL_UART_Transmit+0x1a>
 801aa94:	e08c      	b.n	801abb0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d003      	beq.n	801aaa4 <HAL_UART_Transmit+0x28>
 801aa9c:	1dbb      	adds	r3, r7, #6
 801aa9e:	881b      	ldrh	r3, [r3, #0]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d101      	bne.n	801aaa8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801aaa4:	2301      	movs	r3, #1
 801aaa6:	e084      	b.n	801abb2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	689a      	ldr	r2, [r3, #8]
 801aaac:	2380      	movs	r3, #128	@ 0x80
 801aaae:	015b      	lsls	r3, r3, #5
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d109      	bne.n	801aac8 <HAL_UART_Transmit+0x4c>
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	691b      	ldr	r3, [r3, #16]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d105      	bne.n	801aac8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	2201      	movs	r2, #1
 801aac0:	4013      	ands	r3, r2
 801aac2:	d001      	beq.n	801aac8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801aac4:	2301      	movs	r3, #1
 801aac6:	e074      	b.n	801abb2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	2284      	movs	r2, #132	@ 0x84
 801aacc:	2100      	movs	r1, #0
 801aace:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	2221      	movs	r2, #33	@ 0x21
 801aad4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801aad6:	f7f7 fb0d 	bl	80120f4 <HAL_GetTick>
 801aada:	0003      	movs	r3, r0
 801aadc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	1dba      	adds	r2, r7, #6
 801aae2:	2150      	movs	r1, #80	@ 0x50
 801aae4:	8812      	ldrh	r2, [r2, #0]
 801aae6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	1dba      	adds	r2, r7, #6
 801aaec:	2152      	movs	r1, #82	@ 0x52
 801aaee:	8812      	ldrh	r2, [r2, #0]
 801aaf0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	689a      	ldr	r2, [r3, #8]
 801aaf6:	2380      	movs	r3, #128	@ 0x80
 801aaf8:	015b      	lsls	r3, r3, #5
 801aafa:	429a      	cmp	r2, r3
 801aafc:	d108      	bne.n	801ab10 <HAL_UART_Transmit+0x94>
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	691b      	ldr	r3, [r3, #16]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d104      	bne.n	801ab10 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801ab06:	2300      	movs	r3, #0
 801ab08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	61bb      	str	r3, [r7, #24]
 801ab0e:	e003      	b.n	801ab18 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801ab10:	68bb      	ldr	r3, [r7, #8]
 801ab12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ab14:	2300      	movs	r3, #0
 801ab16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ab18:	e02f      	b.n	801ab7a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ab1a:	697a      	ldr	r2, [r7, #20]
 801ab1c:	68f8      	ldr	r0, [r7, #12]
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	9300      	str	r3, [sp, #0]
 801ab22:	0013      	movs	r3, r2
 801ab24:	2200      	movs	r2, #0
 801ab26:	2180      	movs	r1, #128	@ 0x80
 801ab28:	f001 f8fa 	bl	801bd20 <UART_WaitOnFlagUntilTimeout>
 801ab2c:	1e03      	subs	r3, r0, #0
 801ab2e:	d004      	beq.n	801ab3a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	2220      	movs	r2, #32
 801ab34:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801ab36:	2303      	movs	r3, #3
 801ab38:	e03b      	b.n	801abb2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801ab3a:	69fb      	ldr	r3, [r7, #28]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d10b      	bne.n	801ab58 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ab40:	69bb      	ldr	r3, [r7, #24]
 801ab42:	881b      	ldrh	r3, [r3, #0]
 801ab44:	001a      	movs	r2, r3
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	05d2      	lsls	r2, r2, #23
 801ab4c:	0dd2      	lsrs	r2, r2, #23
 801ab4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801ab50:	69bb      	ldr	r3, [r7, #24]
 801ab52:	3302      	adds	r3, #2
 801ab54:	61bb      	str	r3, [r7, #24]
 801ab56:	e007      	b.n	801ab68 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	781a      	ldrb	r2, [r3, #0]
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801ab62:	69fb      	ldr	r3, [r7, #28]
 801ab64:	3301      	adds	r3, #1
 801ab66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	2252      	movs	r2, #82	@ 0x52
 801ab6c:	5a9b      	ldrh	r3, [r3, r2]
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	3b01      	subs	r3, #1
 801ab72:	b299      	uxth	r1, r3
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	2252      	movs	r2, #82	@ 0x52
 801ab78:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	2252      	movs	r2, #82	@ 0x52
 801ab7e:	5a9b      	ldrh	r3, [r3, r2]
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d1c9      	bne.n	801ab1a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801ab86:	697a      	ldr	r2, [r7, #20]
 801ab88:	68f8      	ldr	r0, [r7, #12]
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	9300      	str	r3, [sp, #0]
 801ab8e:	0013      	movs	r3, r2
 801ab90:	2200      	movs	r2, #0
 801ab92:	2140      	movs	r1, #64	@ 0x40
 801ab94:	f001 f8c4 	bl	801bd20 <UART_WaitOnFlagUntilTimeout>
 801ab98:	1e03      	subs	r3, r0, #0
 801ab9a:	d004      	beq.n	801aba6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2220      	movs	r2, #32
 801aba0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801aba2:	2303      	movs	r3, #3
 801aba4:	e005      	b.n	801abb2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	2220      	movs	r2, #32
 801abaa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801abac:	2300      	movs	r3, #0
 801abae:	e000      	b.n	801abb2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801abb0:	2302      	movs	r3, #2
  }
}
 801abb2:	0018      	movs	r0, r3
 801abb4:	46bd      	mov	sp, r7
 801abb6:	b008      	add	sp, #32
 801abb8:	bd80      	pop	{r7, pc}
	...

0801abbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b088      	sub	sp, #32
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	60f8      	str	r0, [r7, #12]
 801abc4:	60b9      	str	r1, [r7, #8]
 801abc6:	1dbb      	adds	r3, r7, #6
 801abc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	2280      	movs	r2, #128	@ 0x80
 801abce:	589b      	ldr	r3, [r3, r2]
 801abd0:	2b20      	cmp	r3, #32
 801abd2:	d14a      	bne.n	801ac6a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d003      	beq.n	801abe2 <HAL_UART_Receive_IT+0x26>
 801abda:	1dbb      	adds	r3, r7, #6
 801abdc:	881b      	ldrh	r3, [r3, #0]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d101      	bne.n	801abe6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801abe2:	2301      	movs	r3, #1
 801abe4:	e042      	b.n	801ac6c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	689a      	ldr	r2, [r3, #8]
 801abea:	2380      	movs	r3, #128	@ 0x80
 801abec:	015b      	lsls	r3, r3, #5
 801abee:	429a      	cmp	r2, r3
 801abf0:	d109      	bne.n	801ac06 <HAL_UART_Receive_IT+0x4a>
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	691b      	ldr	r3, [r3, #16]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d105      	bne.n	801ac06 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	2201      	movs	r2, #1
 801abfe:	4013      	ands	r3, r2
 801ac00:	d001      	beq.n	801ac06 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801ac02:	2301      	movs	r3, #1
 801ac04:	e032      	b.n	801ac6c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	2200      	movs	r2, #0
 801ac0a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	4a18      	ldr	r2, [pc, #96]	@ (801ac74 <HAL_UART_Receive_IT+0xb8>)
 801ac12:	4293      	cmp	r3, r2
 801ac14:	d020      	beq.n	801ac58 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	685a      	ldr	r2, [r3, #4]
 801ac1c:	2380      	movs	r3, #128	@ 0x80
 801ac1e:	041b      	lsls	r3, r3, #16
 801ac20:	4013      	ands	r3, r2
 801ac22:	d019      	beq.n	801ac58 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac24:	f3ef 8310 	mrs	r3, PRIMASK
 801ac28:	613b      	str	r3, [r7, #16]
  return(result);
 801ac2a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ac2c:	61fb      	str	r3, [r7, #28]
 801ac2e:	2301      	movs	r3, #1
 801ac30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	f383 8810 	msr	PRIMASK, r3
}
 801ac38:	46c0      	nop			@ (mov r8, r8)
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	681a      	ldr	r2, [r3, #0]
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	2180      	movs	r1, #128	@ 0x80
 801ac46:	04c9      	lsls	r1, r1, #19
 801ac48:	430a      	orrs	r2, r1
 801ac4a:	601a      	str	r2, [r3, #0]
 801ac4c:	69fb      	ldr	r3, [r7, #28]
 801ac4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac50:	69bb      	ldr	r3, [r7, #24]
 801ac52:	f383 8810 	msr	PRIMASK, r3
}
 801ac56:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801ac58:	1dbb      	adds	r3, r7, #6
 801ac5a:	881a      	ldrh	r2, [r3, #0]
 801ac5c:	68b9      	ldr	r1, [r7, #8]
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	0018      	movs	r0, r3
 801ac62:	f001 f8c7 	bl	801bdf4 <UART_Start_Receive_IT>
 801ac66:	0003      	movs	r3, r0
 801ac68:	e000      	b.n	801ac6c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801ac6a:	2302      	movs	r3, #2
  }
}
 801ac6c:	0018      	movs	r0, r3
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	b008      	add	sp, #32
 801ac72:	bd80      	pop	{r7, pc}
 801ac74:	40004800 	.word	0x40004800

0801ac78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b088      	sub	sp, #32
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	60f8      	str	r0, [r7, #12]
 801ac80:	60b9      	str	r1, [r7, #8]
 801ac82:	1dbb      	adds	r3, r7, #6
 801ac84:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ac86:	68fb      	ldr	r3, [r7, #12]
 801ac88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ac8a:	2b20      	cmp	r3, #32
 801ac8c:	d000      	beq.n	801ac90 <HAL_UART_Transmit_DMA+0x18>
 801ac8e:	e077      	b.n	801ad80 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d003      	beq.n	801ac9e <HAL_UART_Transmit_DMA+0x26>
 801ac96:	1dbb      	adds	r3, r7, #6
 801ac98:	881b      	ldrh	r3, [r3, #0]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d101      	bne.n	801aca2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801ac9e:	2301      	movs	r3, #1
 801aca0:	e06f      	b.n	801ad82 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	689a      	ldr	r2, [r3, #8]
 801aca6:	2380      	movs	r3, #128	@ 0x80
 801aca8:	015b      	lsls	r3, r3, #5
 801acaa:	429a      	cmp	r2, r3
 801acac:	d109      	bne.n	801acc2 <HAL_UART_Transmit_DMA+0x4a>
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	691b      	ldr	r3, [r3, #16]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d105      	bne.n	801acc2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801acb6:	68bb      	ldr	r3, [r7, #8]
 801acb8:	2201      	movs	r2, #1
 801acba:	4013      	ands	r3, r2
 801acbc:	d001      	beq.n	801acc2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801acbe:	2301      	movs	r3, #1
 801acc0:	e05f      	b.n	801ad82 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	68ba      	ldr	r2, [r7, #8]
 801acc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	1dba      	adds	r2, r7, #6
 801accc:	2150      	movs	r1, #80	@ 0x50
 801acce:	8812      	ldrh	r2, [r2, #0]
 801acd0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	1dba      	adds	r2, r7, #6
 801acd6:	2152      	movs	r1, #82	@ 0x52
 801acd8:	8812      	ldrh	r2, [r2, #0]
 801acda:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	2284      	movs	r2, #132	@ 0x84
 801ace0:	2100      	movs	r1, #0
 801ace2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	2221      	movs	r2, #33	@ 0x21
 801ace8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d027      	beq.n	801ad42 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acf6:	4a25      	ldr	r2, [pc, #148]	@ (801ad8c <HAL_UART_Transmit_DMA+0x114>)
 801acf8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acfe:	4a24      	ldr	r2, [pc, #144]	@ (801ad90 <HAL_UART_Transmit_DMA+0x118>)
 801ad00:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad06:	4a23      	ldr	r2, [pc, #140]	@ (801ad94 <HAL_UART_Transmit_DMA+0x11c>)
 801ad08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad0e:	2200      	movs	r2, #0
 801ad10:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad1a:	0019      	movs	r1, r3
 801ad1c:	68fb      	ldr	r3, [r7, #12]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	3328      	adds	r3, #40	@ 0x28
 801ad22:	001a      	movs	r2, r3
 801ad24:	1dbb      	adds	r3, r7, #6
 801ad26:	881b      	ldrh	r3, [r3, #0]
 801ad28:	f7f7 ff36 	bl	8012b98 <HAL_DMA_Start_IT>
 801ad2c:	1e03      	subs	r3, r0, #0
 801ad2e:	d008      	beq.n	801ad42 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	2284      	movs	r2, #132	@ 0x84
 801ad34:	2110      	movs	r1, #16
 801ad36:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	2220      	movs	r2, #32
 801ad3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801ad3e:	2301      	movs	r3, #1
 801ad40:	e01f      	b.n	801ad82 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	2240      	movs	r2, #64	@ 0x40
 801ad48:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad4a:	f3ef 8310 	mrs	r3, PRIMASK
 801ad4e:	613b      	str	r3, [r7, #16]
  return(result);
 801ad50:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ad52:	61fb      	str	r3, [r7, #28]
 801ad54:	2301      	movs	r3, #1
 801ad56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad58:	697b      	ldr	r3, [r7, #20]
 801ad5a:	f383 8810 	msr	PRIMASK, r3
}
 801ad5e:	46c0      	nop			@ (mov r8, r8)
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	689a      	ldr	r2, [r3, #8]
 801ad66:	68fb      	ldr	r3, [r7, #12]
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	2180      	movs	r1, #128	@ 0x80
 801ad6c:	430a      	orrs	r2, r1
 801ad6e:	609a      	str	r2, [r3, #8]
 801ad70:	69fb      	ldr	r3, [r7, #28]
 801ad72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad74:	69bb      	ldr	r3, [r7, #24]
 801ad76:	f383 8810 	msr	PRIMASK, r3
}
 801ad7a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	e000      	b.n	801ad82 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801ad80:	2302      	movs	r3, #2
  }
}
 801ad82:	0018      	movs	r0, r3
 801ad84:	46bd      	mov	sp, r7
 801ad86:	b008      	add	sp, #32
 801ad88:	bd80      	pop	{r7, pc}
 801ad8a:	46c0      	nop			@ (mov r8, r8)
 801ad8c:	0801c1d9 	.word	0x0801c1d9
 801ad90:	0801c275 	.word	0x0801c275
 801ad94:	0801c415 	.word	0x0801c415

0801ad98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b088      	sub	sp, #32
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	60f8      	str	r0, [r7, #12]
 801ada0:	60b9      	str	r1, [r7, #8]
 801ada2:	1dbb      	adds	r3, r7, #6
 801ada4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	2280      	movs	r2, #128	@ 0x80
 801adaa:	589b      	ldr	r3, [r3, r2]
 801adac:	2b20      	cmp	r3, #32
 801adae:	d14a      	bne.n	801ae46 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d003      	beq.n	801adbe <HAL_UART_Receive_DMA+0x26>
 801adb6:	1dbb      	adds	r3, r7, #6
 801adb8:	881b      	ldrh	r3, [r3, #0]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d101      	bne.n	801adc2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801adbe:	2301      	movs	r3, #1
 801adc0:	e042      	b.n	801ae48 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	689a      	ldr	r2, [r3, #8]
 801adc6:	2380      	movs	r3, #128	@ 0x80
 801adc8:	015b      	lsls	r3, r3, #5
 801adca:	429a      	cmp	r2, r3
 801adcc:	d109      	bne.n	801ade2 <HAL_UART_Receive_DMA+0x4a>
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	691b      	ldr	r3, [r3, #16]
 801add2:	2b00      	cmp	r3, #0
 801add4:	d105      	bne.n	801ade2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801add6:	68bb      	ldr	r3, [r7, #8]
 801add8:	2201      	movs	r2, #1
 801adda:	4013      	ands	r3, r2
 801addc:	d001      	beq.n	801ade2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801adde:	2301      	movs	r3, #1
 801ade0:	e032      	b.n	801ae48 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	2200      	movs	r2, #0
 801ade6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	4a18      	ldr	r2, [pc, #96]	@ (801ae50 <HAL_UART_Receive_DMA+0xb8>)
 801adee:	4293      	cmp	r3, r2
 801adf0:	d020      	beq.n	801ae34 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801adf2:	68fb      	ldr	r3, [r7, #12]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	685a      	ldr	r2, [r3, #4]
 801adf8:	2380      	movs	r3, #128	@ 0x80
 801adfa:	041b      	lsls	r3, r3, #16
 801adfc:	4013      	ands	r3, r2
 801adfe:	d019      	beq.n	801ae34 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae00:	f3ef 8310 	mrs	r3, PRIMASK
 801ae04:	613b      	str	r3, [r7, #16]
  return(result);
 801ae06:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ae08:	61fb      	str	r3, [r7, #28]
 801ae0a:	2301      	movs	r3, #1
 801ae0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae0e:	697b      	ldr	r3, [r7, #20]
 801ae10:	f383 8810 	msr	PRIMASK, r3
}
 801ae14:	46c0      	nop			@ (mov r8, r8)
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	681a      	ldr	r2, [r3, #0]
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	2180      	movs	r1, #128	@ 0x80
 801ae22:	04c9      	lsls	r1, r1, #19
 801ae24:	430a      	orrs	r2, r1
 801ae26:	601a      	str	r2, [r3, #0]
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae2c:	69bb      	ldr	r3, [r7, #24]
 801ae2e:	f383 8810 	msr	PRIMASK, r3
}
 801ae32:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801ae34:	1dbb      	adds	r3, r7, #6
 801ae36:	881a      	ldrh	r2, [r3, #0]
 801ae38:	68b9      	ldr	r1, [r7, #8]
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	0018      	movs	r0, r3
 801ae3e:	f001 f8a3 	bl	801bf88 <UART_Start_Receive_DMA>
 801ae42:	0003      	movs	r3, r0
 801ae44:	e000      	b.n	801ae48 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801ae46:	2302      	movs	r3, #2
  }
}
 801ae48:	0018      	movs	r0, r3
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	b008      	add	sp, #32
 801ae4e:	bd80      	pop	{r7, pc}
 801ae50:	40004800 	.word	0x40004800

0801ae54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ae54:	b590      	push	{r4, r7, lr}
 801ae56:	b0ab      	sub	sp, #172	@ 0xac
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	69db      	ldr	r3, [r3, #28]
 801ae62:	22a4      	movs	r2, #164	@ 0xa4
 801ae64:	18b9      	adds	r1, r7, r2
 801ae66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	20a0      	movs	r0, #160	@ 0xa0
 801ae70:	1839      	adds	r1, r7, r0
 801ae72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	689b      	ldr	r3, [r3, #8]
 801ae7a:	219c      	movs	r1, #156	@ 0x9c
 801ae7c:	1879      	adds	r1, r7, r1
 801ae7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ae80:	0011      	movs	r1, r2
 801ae82:	18bb      	adds	r3, r7, r2
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	4a9c      	ldr	r2, [pc, #624]	@ (801b0f8 <HAL_UART_IRQHandler+0x2a4>)
 801ae88:	4013      	ands	r3, r2
 801ae8a:	2298      	movs	r2, #152	@ 0x98
 801ae8c:	18bc      	adds	r4, r7, r2
 801ae8e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801ae90:	18bb      	adds	r3, r7, r2
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d114      	bne.n	801aec2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ae98:	187b      	adds	r3, r7, r1
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	2220      	movs	r2, #32
 801ae9e:	4013      	ands	r3, r2
 801aea0:	d00f      	beq.n	801aec2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801aea2:	183b      	adds	r3, r7, r0
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	2220      	movs	r2, #32
 801aea8:	4013      	ands	r3, r2
 801aeaa:	d00a      	beq.n	801aec2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d100      	bne.n	801aeb6 <HAL_UART_IRQHandler+0x62>
 801aeb4:	e2aa      	b.n	801b40c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aeba:	687a      	ldr	r2, [r7, #4]
 801aebc:	0010      	movs	r0, r2
 801aebe:	4798      	blx	r3
      }
      return;
 801aec0:	e2a4      	b.n	801b40c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801aec2:	2398      	movs	r3, #152	@ 0x98
 801aec4:	18fb      	adds	r3, r7, r3
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d100      	bne.n	801aece <HAL_UART_IRQHandler+0x7a>
 801aecc:	e11a      	b.n	801b104 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801aece:	239c      	movs	r3, #156	@ 0x9c
 801aed0:	18fb      	adds	r3, r7, r3
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	2201      	movs	r2, #1
 801aed6:	4013      	ands	r3, r2
 801aed8:	d106      	bne.n	801aee8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801aeda:	23a0      	movs	r3, #160	@ 0xa0
 801aedc:	18fb      	adds	r3, r7, r3
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	4a86      	ldr	r2, [pc, #536]	@ (801b0fc <HAL_UART_IRQHandler+0x2a8>)
 801aee2:	4013      	ands	r3, r2
 801aee4:	d100      	bne.n	801aee8 <HAL_UART_IRQHandler+0x94>
 801aee6:	e10d      	b.n	801b104 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801aee8:	23a4      	movs	r3, #164	@ 0xa4
 801aeea:	18fb      	adds	r3, r7, r3
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	2201      	movs	r2, #1
 801aef0:	4013      	ands	r3, r2
 801aef2:	d012      	beq.n	801af1a <HAL_UART_IRQHandler+0xc6>
 801aef4:	23a0      	movs	r3, #160	@ 0xa0
 801aef6:	18fb      	adds	r3, r7, r3
 801aef8:	681a      	ldr	r2, [r3, #0]
 801aefa:	2380      	movs	r3, #128	@ 0x80
 801aefc:	005b      	lsls	r3, r3, #1
 801aefe:	4013      	ands	r3, r2
 801af00:	d00b      	beq.n	801af1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	2201      	movs	r2, #1
 801af08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2284      	movs	r2, #132	@ 0x84
 801af0e:	589b      	ldr	r3, [r3, r2]
 801af10:	2201      	movs	r2, #1
 801af12:	431a      	orrs	r2, r3
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	2184      	movs	r1, #132	@ 0x84
 801af18:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801af1a:	23a4      	movs	r3, #164	@ 0xa4
 801af1c:	18fb      	adds	r3, r7, r3
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	2202      	movs	r2, #2
 801af22:	4013      	ands	r3, r2
 801af24:	d011      	beq.n	801af4a <HAL_UART_IRQHandler+0xf6>
 801af26:	239c      	movs	r3, #156	@ 0x9c
 801af28:	18fb      	adds	r3, r7, r3
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	2201      	movs	r2, #1
 801af2e:	4013      	ands	r3, r2
 801af30:	d00b      	beq.n	801af4a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	2202      	movs	r2, #2
 801af38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	2284      	movs	r2, #132	@ 0x84
 801af3e:	589b      	ldr	r3, [r3, r2]
 801af40:	2204      	movs	r2, #4
 801af42:	431a      	orrs	r2, r3
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2184      	movs	r1, #132	@ 0x84
 801af48:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801af4a:	23a4      	movs	r3, #164	@ 0xa4
 801af4c:	18fb      	adds	r3, r7, r3
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	2204      	movs	r2, #4
 801af52:	4013      	ands	r3, r2
 801af54:	d011      	beq.n	801af7a <HAL_UART_IRQHandler+0x126>
 801af56:	239c      	movs	r3, #156	@ 0x9c
 801af58:	18fb      	adds	r3, r7, r3
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	2201      	movs	r2, #1
 801af5e:	4013      	ands	r3, r2
 801af60:	d00b      	beq.n	801af7a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	2204      	movs	r2, #4
 801af68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	2284      	movs	r2, #132	@ 0x84
 801af6e:	589b      	ldr	r3, [r3, r2]
 801af70:	2202      	movs	r2, #2
 801af72:	431a      	orrs	r2, r3
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	2184      	movs	r1, #132	@ 0x84
 801af78:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801af7a:	23a4      	movs	r3, #164	@ 0xa4
 801af7c:	18fb      	adds	r3, r7, r3
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	2208      	movs	r2, #8
 801af82:	4013      	ands	r3, r2
 801af84:	d017      	beq.n	801afb6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801af86:	23a0      	movs	r3, #160	@ 0xa0
 801af88:	18fb      	adds	r3, r7, r3
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	2220      	movs	r2, #32
 801af8e:	4013      	ands	r3, r2
 801af90:	d105      	bne.n	801af9e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801af92:	239c      	movs	r3, #156	@ 0x9c
 801af94:	18fb      	adds	r3, r7, r3
 801af96:	681b      	ldr	r3, [r3, #0]
 801af98:	2201      	movs	r2, #1
 801af9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801af9c:	d00b      	beq.n	801afb6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	2208      	movs	r2, #8
 801afa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	2284      	movs	r2, #132	@ 0x84
 801afaa:	589b      	ldr	r3, [r3, r2]
 801afac:	2208      	movs	r2, #8
 801afae:	431a      	orrs	r2, r3
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2184      	movs	r1, #132	@ 0x84
 801afb4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801afb6:	23a4      	movs	r3, #164	@ 0xa4
 801afb8:	18fb      	adds	r3, r7, r3
 801afba:	681a      	ldr	r2, [r3, #0]
 801afbc:	2380      	movs	r3, #128	@ 0x80
 801afbe:	011b      	lsls	r3, r3, #4
 801afc0:	4013      	ands	r3, r2
 801afc2:	d013      	beq.n	801afec <HAL_UART_IRQHandler+0x198>
 801afc4:	23a0      	movs	r3, #160	@ 0xa0
 801afc6:	18fb      	adds	r3, r7, r3
 801afc8:	681a      	ldr	r2, [r3, #0]
 801afca:	2380      	movs	r3, #128	@ 0x80
 801afcc:	04db      	lsls	r3, r3, #19
 801afce:	4013      	ands	r3, r2
 801afd0:	d00c      	beq.n	801afec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	2280      	movs	r2, #128	@ 0x80
 801afd8:	0112      	lsls	r2, r2, #4
 801afda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	2284      	movs	r2, #132	@ 0x84
 801afe0:	589b      	ldr	r3, [r3, r2]
 801afe2:	2220      	movs	r2, #32
 801afe4:	431a      	orrs	r2, r3
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	2184      	movs	r1, #132	@ 0x84
 801afea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2284      	movs	r2, #132	@ 0x84
 801aff0:	589b      	ldr	r3, [r3, r2]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d100      	bne.n	801aff8 <HAL_UART_IRQHandler+0x1a4>
 801aff6:	e20b      	b.n	801b410 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801aff8:	23a4      	movs	r3, #164	@ 0xa4
 801affa:	18fb      	adds	r3, r7, r3
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	2220      	movs	r2, #32
 801b000:	4013      	ands	r3, r2
 801b002:	d00e      	beq.n	801b022 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b004:	23a0      	movs	r3, #160	@ 0xa0
 801b006:	18fb      	adds	r3, r7, r3
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	2220      	movs	r2, #32
 801b00c:	4013      	ands	r3, r2
 801b00e:	d008      	beq.n	801b022 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b014:	2b00      	cmp	r3, #0
 801b016:	d004      	beq.n	801b022 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b01c:	687a      	ldr	r2, [r7, #4]
 801b01e:	0010      	movs	r0, r2
 801b020:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2284      	movs	r2, #132	@ 0x84
 801b026:	589b      	ldr	r3, [r3, r2]
 801b028:	2194      	movs	r1, #148	@ 0x94
 801b02a:	187a      	adds	r2, r7, r1
 801b02c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	689b      	ldr	r3, [r3, #8]
 801b034:	2240      	movs	r2, #64	@ 0x40
 801b036:	4013      	ands	r3, r2
 801b038:	2b40      	cmp	r3, #64	@ 0x40
 801b03a:	d004      	beq.n	801b046 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b03c:	187b      	adds	r3, r7, r1
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	2228      	movs	r2, #40	@ 0x28
 801b042:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b044:	d04b      	beq.n	801b0de <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	0018      	movs	r0, r3
 801b04a:	f001 f861 	bl	801c110 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	689b      	ldr	r3, [r3, #8]
 801b054:	2240      	movs	r2, #64	@ 0x40
 801b056:	4013      	ands	r3, r2
 801b058:	2b40      	cmp	r3, #64	@ 0x40
 801b05a:	d139      	bne.n	801b0d0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b05c:	f3ef 8310 	mrs	r3, PRIMASK
 801b060:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801b062:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b064:	2090      	movs	r0, #144	@ 0x90
 801b066:	183a      	adds	r2, r7, r0
 801b068:	6013      	str	r3, [r2, #0]
 801b06a:	2301      	movs	r3, #1
 801b06c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b06e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b070:	f383 8810 	msr	PRIMASK, r3
}
 801b074:	46c0      	nop			@ (mov r8, r8)
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	689a      	ldr	r2, [r3, #8]
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	2140      	movs	r1, #64	@ 0x40
 801b082:	438a      	bics	r2, r1
 801b084:	609a      	str	r2, [r3, #8]
 801b086:	183b      	adds	r3, r7, r0
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b08c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b08e:	f383 8810 	msr	PRIMASK, r3
}
 801b092:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d012      	beq.n	801b0c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0a0:	4a17      	ldr	r2, [pc, #92]	@ (801b100 <HAL_UART_IRQHandler+0x2ac>)
 801b0a2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0a8:	0018      	movs	r0, r3
 801b0aa:	f7f7 fe1b 	bl	8012ce4 <HAL_DMA_Abort_IT>
 801b0ae:	1e03      	subs	r3, r0, #0
 801b0b0:	d020      	beq.n	801b0f4 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0bc:	0018      	movs	r0, r3
 801b0be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0c0:	e018      	b.n	801b0f4 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	2298      	movs	r2, #152	@ 0x98
 801b0c6:	589b      	ldr	r3, [r3, r2]
 801b0c8:	687a      	ldr	r2, [r7, #4]
 801b0ca:	0010      	movs	r0, r2
 801b0cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0ce:	e011      	b.n	801b0f4 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2298      	movs	r2, #152	@ 0x98
 801b0d4:	589b      	ldr	r3, [r3, r2]
 801b0d6:	687a      	ldr	r2, [r7, #4]
 801b0d8:	0010      	movs	r0, r2
 801b0da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0dc:	e00a      	b.n	801b0f4 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	2298      	movs	r2, #152	@ 0x98
 801b0e2:	589b      	ldr	r3, [r3, r2]
 801b0e4:	687a      	ldr	r2, [r7, #4]
 801b0e6:	0010      	movs	r0, r2
 801b0e8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	2284      	movs	r2, #132	@ 0x84
 801b0ee:	2100      	movs	r1, #0
 801b0f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801b0f2:	e18d      	b.n	801b410 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0f4:	46c0      	nop			@ (mov r8, r8)
    return;
 801b0f6:	e18b      	b.n	801b410 <HAL_UART_IRQHandler+0x5bc>
 801b0f8:	0000080f 	.word	0x0000080f
 801b0fc:	04000120 	.word	0x04000120
 801b100:	0801c49d 	.word	0x0801c49d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b108:	2b01      	cmp	r3, #1
 801b10a:	d000      	beq.n	801b10e <HAL_UART_IRQHandler+0x2ba>
 801b10c:	e13d      	b.n	801b38a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b10e:	23a4      	movs	r3, #164	@ 0xa4
 801b110:	18fb      	adds	r3, r7, r3
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	2210      	movs	r2, #16
 801b116:	4013      	ands	r3, r2
 801b118:	d100      	bne.n	801b11c <HAL_UART_IRQHandler+0x2c8>
 801b11a:	e136      	b.n	801b38a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b11c:	23a0      	movs	r3, #160	@ 0xa0
 801b11e:	18fb      	adds	r3, r7, r3
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	2210      	movs	r2, #16
 801b124:	4013      	ands	r3, r2
 801b126:	d100      	bne.n	801b12a <HAL_UART_IRQHandler+0x2d6>
 801b128:	e12f      	b.n	801b38a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	2210      	movs	r2, #16
 801b130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	689b      	ldr	r3, [r3, #8]
 801b138:	2240      	movs	r2, #64	@ 0x40
 801b13a:	4013      	ands	r3, r2
 801b13c:	2b40      	cmp	r3, #64	@ 0x40
 801b13e:	d000      	beq.n	801b142 <HAL_UART_IRQHandler+0x2ee>
 801b140:	e0a2      	b.n	801b288 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	685a      	ldr	r2, [r3, #4]
 801b14a:	217e      	movs	r1, #126	@ 0x7e
 801b14c:	187b      	adds	r3, r7, r1
 801b14e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801b150:	187b      	adds	r3, r7, r1
 801b152:	881b      	ldrh	r3, [r3, #0]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d100      	bne.n	801b15a <HAL_UART_IRQHandler+0x306>
 801b158:	e15c      	b.n	801b414 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	2258      	movs	r2, #88	@ 0x58
 801b15e:	5a9b      	ldrh	r3, [r3, r2]
 801b160:	187a      	adds	r2, r7, r1
 801b162:	8812      	ldrh	r2, [r2, #0]
 801b164:	429a      	cmp	r2, r3
 801b166:	d300      	bcc.n	801b16a <HAL_UART_IRQHandler+0x316>
 801b168:	e154      	b.n	801b414 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	187a      	adds	r2, r7, r1
 801b16e:	215a      	movs	r1, #90	@ 0x5a
 801b170:	8812      	ldrh	r2, [r2, #0]
 801b172:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	2220      	movs	r2, #32
 801b17e:	4013      	ands	r3, r2
 801b180:	d16f      	bne.n	801b262 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b182:	f3ef 8310 	mrs	r3, PRIMASK
 801b186:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b18a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801b18c:	2301      	movs	r3, #1
 801b18e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b192:	f383 8810 	msr	PRIMASK, r3
}
 801b196:	46c0      	nop			@ (mov r8, r8)
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	681a      	ldr	r2, [r3, #0]
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	49a0      	ldr	r1, [pc, #640]	@ (801b424 <HAL_UART_IRQHandler+0x5d0>)
 801b1a4:	400a      	ands	r2, r1
 801b1a6:	601a      	str	r2, [r3, #0]
 801b1a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1ae:	f383 8810 	msr	PRIMASK, r3
}
 801b1b2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1b4:	f3ef 8310 	mrs	r3, PRIMASK
 801b1b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801b1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b1bc:	677b      	str	r3, [r7, #116]	@ 0x74
 801b1be:	2301      	movs	r3, #1
 801b1c0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1c4:	f383 8810 	msr	PRIMASK, r3
}
 801b1c8:	46c0      	nop			@ (mov r8, r8)
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	689a      	ldr	r2, [r3, #8]
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	2101      	movs	r1, #1
 801b1d6:	438a      	bics	r2, r1
 801b1d8:	609a      	str	r2, [r3, #8]
 801b1da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b1dc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1e0:	f383 8810 	msr	PRIMASK, r3
}
 801b1e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1e6:	f3ef 8310 	mrs	r3, PRIMASK
 801b1ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801b1ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b1ee:	673b      	str	r3, [r7, #112]	@ 0x70
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1f6:	f383 8810 	msr	PRIMASK, r3
}
 801b1fa:	46c0      	nop			@ (mov r8, r8)
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	689a      	ldr	r2, [r3, #8]
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	2140      	movs	r1, #64	@ 0x40
 801b208:	438a      	bics	r2, r1
 801b20a:	609a      	str	r2, [r3, #8]
 801b20c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b20e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b212:	f383 8810 	msr	PRIMASK, r3
}
 801b216:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	2280      	movs	r2, #128	@ 0x80
 801b21c:	2120      	movs	r1, #32
 801b21e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	2200      	movs	r2, #0
 801b224:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b226:	f3ef 8310 	mrs	r3, PRIMASK
 801b22a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801b22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b22e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b230:	2301      	movs	r3, #1
 801b232:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b236:	f383 8810 	msr	PRIMASK, r3
}
 801b23a:	46c0      	nop			@ (mov r8, r8)
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	681a      	ldr	r2, [r3, #0]
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	2110      	movs	r1, #16
 801b248:	438a      	bics	r2, r1
 801b24a:	601a      	str	r2, [r3, #0]
 801b24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b24e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b252:	f383 8810 	msr	PRIMASK, r3
}
 801b256:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b25c:	0018      	movs	r0, r3
 801b25e:	f7f7 fd01 	bl	8012c64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2202      	movs	r2, #2
 801b266:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	22ac      	movs	r2, #172	@ 0xac
 801b26c:	589b      	ldr	r3, [r3, r2]
 801b26e:	687a      	ldr	r2, [r7, #4]
 801b270:	2158      	movs	r1, #88	@ 0x58
 801b272:	5a51      	ldrh	r1, [r2, r1]
 801b274:	687a      	ldr	r2, [r7, #4]
 801b276:	205a      	movs	r0, #90	@ 0x5a
 801b278:	5a12      	ldrh	r2, [r2, r0]
 801b27a:	b292      	uxth	r2, r2
 801b27c:	1a8a      	subs	r2, r1, r2
 801b27e:	b291      	uxth	r1, r2
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	0010      	movs	r0, r2
 801b284:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b286:	e0c5      	b.n	801b414 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	2258      	movs	r2, #88	@ 0x58
 801b28c:	5a99      	ldrh	r1, [r3, r2]
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	225a      	movs	r2, #90	@ 0x5a
 801b292:	5a9b      	ldrh	r3, [r3, r2]
 801b294:	b29a      	uxth	r2, r3
 801b296:	208e      	movs	r0, #142	@ 0x8e
 801b298:	183b      	adds	r3, r7, r0
 801b29a:	1a8a      	subs	r2, r1, r2
 801b29c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	225a      	movs	r2, #90	@ 0x5a
 801b2a2:	5a9b      	ldrh	r3, [r3, r2]
 801b2a4:	b29b      	uxth	r3, r3
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d100      	bne.n	801b2ac <HAL_UART_IRQHandler+0x458>
 801b2aa:	e0b5      	b.n	801b418 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801b2ac:	183b      	adds	r3, r7, r0
 801b2ae:	881b      	ldrh	r3, [r3, #0]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d100      	bne.n	801b2b6 <HAL_UART_IRQHandler+0x462>
 801b2b4:	e0b0      	b.n	801b418 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2b6:	f3ef 8310 	mrs	r3, PRIMASK
 801b2ba:	60fb      	str	r3, [r7, #12]
  return(result);
 801b2bc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b2be:	2488      	movs	r4, #136	@ 0x88
 801b2c0:	193a      	adds	r2, r7, r4
 801b2c2:	6013      	str	r3, [r2, #0]
 801b2c4:	2301      	movs	r3, #1
 801b2c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	f383 8810 	msr	PRIMASK, r3
}
 801b2ce:	46c0      	nop			@ (mov r8, r8)
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	681a      	ldr	r2, [r3, #0]
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	4953      	ldr	r1, [pc, #332]	@ (801b428 <HAL_UART_IRQHandler+0x5d4>)
 801b2dc:	400a      	ands	r2, r1
 801b2de:	601a      	str	r2, [r3, #0]
 801b2e0:	193b      	adds	r3, r7, r4
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2e6:	697b      	ldr	r3, [r7, #20]
 801b2e8:	f383 8810 	msr	PRIMASK, r3
}
 801b2ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2ee:	f3ef 8310 	mrs	r3, PRIMASK
 801b2f2:	61bb      	str	r3, [r7, #24]
  return(result);
 801b2f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b2f6:	2484      	movs	r4, #132	@ 0x84
 801b2f8:	193a      	adds	r2, r7, r4
 801b2fa:	6013      	str	r3, [r2, #0]
 801b2fc:	2301      	movs	r3, #1
 801b2fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b300:	69fb      	ldr	r3, [r7, #28]
 801b302:	f383 8810 	msr	PRIMASK, r3
}
 801b306:	46c0      	nop			@ (mov r8, r8)
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	689a      	ldr	r2, [r3, #8]
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	2101      	movs	r1, #1
 801b314:	438a      	bics	r2, r1
 801b316:	609a      	str	r2, [r3, #8]
 801b318:	193b      	adds	r3, r7, r4
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b31e:	6a3b      	ldr	r3, [r7, #32]
 801b320:	f383 8810 	msr	PRIMASK, r3
}
 801b324:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2280      	movs	r2, #128	@ 0x80
 801b32a:	2120      	movs	r1, #32
 801b32c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	2200      	movs	r2, #0
 801b332:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	2200      	movs	r2, #0
 801b338:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b33a:	f3ef 8310 	mrs	r3, PRIMASK
 801b33e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b342:	2480      	movs	r4, #128	@ 0x80
 801b344:	193a      	adds	r2, r7, r4
 801b346:	6013      	str	r3, [r2, #0]
 801b348:	2301      	movs	r3, #1
 801b34a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b34e:	f383 8810 	msr	PRIMASK, r3
}
 801b352:	46c0      	nop			@ (mov r8, r8)
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	681a      	ldr	r2, [r3, #0]
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	2110      	movs	r1, #16
 801b360:	438a      	bics	r2, r1
 801b362:	601a      	str	r2, [r3, #0]
 801b364:	193b      	adds	r3, r7, r4
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b36c:	f383 8810 	msr	PRIMASK, r3
}
 801b370:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	2202      	movs	r2, #2
 801b376:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	22ac      	movs	r2, #172	@ 0xac
 801b37c:	589b      	ldr	r3, [r3, r2]
 801b37e:	183a      	adds	r2, r7, r0
 801b380:	8811      	ldrh	r1, [r2, #0]
 801b382:	687a      	ldr	r2, [r7, #4]
 801b384:	0010      	movs	r0, r2
 801b386:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b388:	e046      	b.n	801b418 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b38a:	23a4      	movs	r3, #164	@ 0xa4
 801b38c:	18fb      	adds	r3, r7, r3
 801b38e:	681a      	ldr	r2, [r3, #0]
 801b390:	2380      	movs	r3, #128	@ 0x80
 801b392:	035b      	lsls	r3, r3, #13
 801b394:	4013      	ands	r3, r2
 801b396:	d012      	beq.n	801b3be <HAL_UART_IRQHandler+0x56a>
 801b398:	239c      	movs	r3, #156	@ 0x9c
 801b39a:	18fb      	adds	r3, r7, r3
 801b39c:	681a      	ldr	r2, [r3, #0]
 801b39e:	2380      	movs	r3, #128	@ 0x80
 801b3a0:	03db      	lsls	r3, r3, #15
 801b3a2:	4013      	ands	r3, r2
 801b3a4:	d00b      	beq.n	801b3be <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	2280      	movs	r2, #128	@ 0x80
 801b3ac:	0352      	lsls	r2, r2, #13
 801b3ae:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	22a8      	movs	r2, #168	@ 0xa8
 801b3b4:	589b      	ldr	r3, [r3, r2]
 801b3b6:	687a      	ldr	r2, [r7, #4]
 801b3b8:	0010      	movs	r0, r2
 801b3ba:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b3bc:	e02f      	b.n	801b41e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b3be:	23a4      	movs	r3, #164	@ 0xa4
 801b3c0:	18fb      	adds	r3, r7, r3
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	2280      	movs	r2, #128	@ 0x80
 801b3c6:	4013      	ands	r3, r2
 801b3c8:	d00f      	beq.n	801b3ea <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b3ca:	23a0      	movs	r3, #160	@ 0xa0
 801b3cc:	18fb      	adds	r3, r7, r3
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	2280      	movs	r2, #128	@ 0x80
 801b3d2:	4013      	ands	r3, r2
 801b3d4:	d009      	beq.n	801b3ea <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d01e      	beq.n	801b41c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b3e2:	687a      	ldr	r2, [r7, #4]
 801b3e4:	0010      	movs	r0, r2
 801b3e6:	4798      	blx	r3
    }
    return;
 801b3e8:	e018      	b.n	801b41c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b3ea:	23a4      	movs	r3, #164	@ 0xa4
 801b3ec:	18fb      	adds	r3, r7, r3
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	2240      	movs	r2, #64	@ 0x40
 801b3f2:	4013      	ands	r3, r2
 801b3f4:	d013      	beq.n	801b41e <HAL_UART_IRQHandler+0x5ca>
 801b3f6:	23a0      	movs	r3, #160	@ 0xa0
 801b3f8:	18fb      	adds	r3, r7, r3
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	2240      	movs	r2, #64	@ 0x40
 801b3fe:	4013      	ands	r3, r2
 801b400:	d00d      	beq.n	801b41e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	0018      	movs	r0, r3
 801b406:	f001 f862 	bl	801c4ce <UART_EndTransmit_IT>
    return;
 801b40a:	e008      	b.n	801b41e <HAL_UART_IRQHandler+0x5ca>
      return;
 801b40c:	46c0      	nop			@ (mov r8, r8)
 801b40e:	e006      	b.n	801b41e <HAL_UART_IRQHandler+0x5ca>
    return;
 801b410:	46c0      	nop			@ (mov r8, r8)
 801b412:	e004      	b.n	801b41e <HAL_UART_IRQHandler+0x5ca>
      return;
 801b414:	46c0      	nop			@ (mov r8, r8)
 801b416:	e002      	b.n	801b41e <HAL_UART_IRQHandler+0x5ca>
      return;
 801b418:	46c0      	nop			@ (mov r8, r8)
 801b41a:	e000      	b.n	801b41e <HAL_UART_IRQHandler+0x5ca>
    return;
 801b41c:	46c0      	nop			@ (mov r8, r8)
  }

}
 801b41e:	46bd      	mov	sp, r7
 801b420:	b02b      	add	sp, #172	@ 0xac
 801b422:	bd90      	pop	{r4, r7, pc}
 801b424:	fffffeff 	.word	0xfffffeff
 801b428:	fffffedf 	.word	0xfffffedf

0801b42c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b42c:	b580      	push	{r7, lr}
 801b42e:	b082      	sub	sp, #8
 801b430:	af00      	add	r7, sp, #0
 801b432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b434:	46c0      	nop			@ (mov r8, r8)
 801b436:	46bd      	mov	sp, r7
 801b438:	b002      	add	sp, #8
 801b43a:	bd80      	pop	{r7, pc}

0801b43c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b082      	sub	sp, #8
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b444:	46c0      	nop			@ (mov r8, r8)
 801b446:	46bd      	mov	sp, r7
 801b448:	b002      	add	sp, #8
 801b44a:	bd80      	pop	{r7, pc}

0801b44c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b44c:	b580      	push	{r7, lr}
 801b44e:	b082      	sub	sp, #8
 801b450:	af00      	add	r7, sp, #0
 801b452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b454:	46c0      	nop			@ (mov r8, r8)
 801b456:	46bd      	mov	sp, r7
 801b458:	b002      	add	sp, #8
 801b45a:	bd80      	pop	{r7, pc}

0801b45c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b082      	sub	sp, #8
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b464:	46c0      	nop			@ (mov r8, r8)
 801b466:	46bd      	mov	sp, r7
 801b468:	b002      	add	sp, #8
 801b46a:	bd80      	pop	{r7, pc}

0801b46c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b082      	sub	sp, #8
 801b470:	af00      	add	r7, sp, #0
 801b472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b474:	46c0      	nop			@ (mov r8, r8)
 801b476:	46bd      	mov	sp, r7
 801b478:	b002      	add	sp, #8
 801b47a:	bd80      	pop	{r7, pc}

0801b47c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b082      	sub	sp, #8
 801b480:	af00      	add	r7, sp, #0
 801b482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b484:	46c0      	nop			@ (mov r8, r8)
 801b486:	46bd      	mov	sp, r7
 801b488:	b002      	add	sp, #8
 801b48a:	bd80      	pop	{r7, pc}

0801b48c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b082      	sub	sp, #8
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
 801b494:	000a      	movs	r2, r1
 801b496:	1cbb      	adds	r3, r7, #2
 801b498:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b49a:	46c0      	nop			@ (mov r8, r8)
 801b49c:	46bd      	mov	sp, r7
 801b49e:	b002      	add	sp, #8
 801b4a0:	bd80      	pop	{r7, pc}
	...

0801b4a4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b082      	sub	sp, #8
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	2188      	movs	r1, #136	@ 0x88
 801b4b0:	4a14      	ldr	r2, [pc, #80]	@ (801b504 <UART_InitCallbacksToDefault+0x60>)
 801b4b2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	218c      	movs	r1, #140	@ 0x8c
 801b4b8:	4a13      	ldr	r2, [pc, #76]	@ (801b508 <UART_InitCallbacksToDefault+0x64>)
 801b4ba:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	2190      	movs	r1, #144	@ 0x90
 801b4c0:	4a12      	ldr	r2, [pc, #72]	@ (801b50c <UART_InitCallbacksToDefault+0x68>)
 801b4c2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2194      	movs	r1, #148	@ 0x94
 801b4c8:	4a11      	ldr	r2, [pc, #68]	@ (801b510 <UART_InitCallbacksToDefault+0x6c>)
 801b4ca:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2198      	movs	r1, #152	@ 0x98
 801b4d0:	4a10      	ldr	r2, [pc, #64]	@ (801b514 <UART_InitCallbacksToDefault+0x70>)
 801b4d2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	219c      	movs	r1, #156	@ 0x9c
 801b4d8:	4a0f      	ldr	r2, [pc, #60]	@ (801b518 <UART_InitCallbacksToDefault+0x74>)
 801b4da:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	21a0      	movs	r1, #160	@ 0xa0
 801b4e0:	4a0e      	ldr	r2, [pc, #56]	@ (801b51c <UART_InitCallbacksToDefault+0x78>)
 801b4e2:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	21a4      	movs	r1, #164	@ 0xa4
 801b4e8:	4a0d      	ldr	r2, [pc, #52]	@ (801b520 <UART_InitCallbacksToDefault+0x7c>)
 801b4ea:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	21a8      	movs	r1, #168	@ 0xa8
 801b4f0:	4a0c      	ldr	r2, [pc, #48]	@ (801b524 <UART_InitCallbacksToDefault+0x80>)
 801b4f2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	21ac      	movs	r1, #172	@ 0xac
 801b4f8:	4a0b      	ldr	r2, [pc, #44]	@ (801b528 <UART_InitCallbacksToDefault+0x84>)
 801b4fa:	505a      	str	r2, [r3, r1]

}
 801b4fc:	46c0      	nop			@ (mov r8, r8)
 801b4fe:	46bd      	mov	sp, r7
 801b500:	b002      	add	sp, #8
 801b502:	bd80      	pop	{r7, pc}
 801b504:	0801b43d 	.word	0x0801b43d
 801b508:	0801b42d 	.word	0x0801b42d
 801b50c:	0801b44d 	.word	0x0801b44d
 801b510:	0800b245 	.word	0x0800b245
 801b514:	080049f9 	.word	0x080049f9
 801b518:	0801b45d 	.word	0x0801b45d
 801b51c:	0801b46d 	.word	0x0801b46d
 801b520:	0801b47d 	.word	0x0801b47d
 801b524:	0801c8c1 	.word	0x0801c8c1
 801b528:	0801b48d 	.word	0x0801b48d

0801b52c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b52c:	b5b0      	push	{r4, r5, r7, lr}
 801b52e:	b08e      	sub	sp, #56	@ 0x38
 801b530:	af00      	add	r7, sp, #0
 801b532:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b534:	231a      	movs	r3, #26
 801b536:	2218      	movs	r2, #24
 801b538:	189b      	adds	r3, r3, r2
 801b53a:	19db      	adds	r3, r3, r7
 801b53c:	2200      	movs	r2, #0
 801b53e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	689a      	ldr	r2, [r3, #8]
 801b544:	69fb      	ldr	r3, [r7, #28]
 801b546:	691b      	ldr	r3, [r3, #16]
 801b548:	431a      	orrs	r2, r3
 801b54a:	69fb      	ldr	r3, [r7, #28]
 801b54c:	695b      	ldr	r3, [r3, #20]
 801b54e:	431a      	orrs	r2, r3
 801b550:	69fb      	ldr	r3, [r7, #28]
 801b552:	69db      	ldr	r3, [r3, #28]
 801b554:	4313      	orrs	r3, r2
 801b556:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b558:	69fb      	ldr	r3, [r7, #28]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	4ac3      	ldr	r2, [pc, #780]	@ (801b86c <UART_SetConfig+0x340>)
 801b560:	4013      	ands	r3, r2
 801b562:	0019      	movs	r1, r3
 801b564:	69fb      	ldr	r3, [r7, #28]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b56a:	430a      	orrs	r2, r1
 801b56c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b56e:	69fb      	ldr	r3, [r7, #28]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	685b      	ldr	r3, [r3, #4]
 801b574:	4abe      	ldr	r2, [pc, #760]	@ (801b870 <UART_SetConfig+0x344>)
 801b576:	4013      	ands	r3, r2
 801b578:	0019      	movs	r1, r3
 801b57a:	69fb      	ldr	r3, [r7, #28]
 801b57c:	68da      	ldr	r2, [r3, #12]
 801b57e:	69fb      	ldr	r3, [r7, #28]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	430a      	orrs	r2, r1
 801b584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b586:	69fb      	ldr	r3, [r7, #28]
 801b588:	699b      	ldr	r3, [r3, #24]
 801b58a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b58c:	69fb      	ldr	r3, [r7, #28]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	4ab8      	ldr	r2, [pc, #736]	@ (801b874 <UART_SetConfig+0x348>)
 801b592:	4293      	cmp	r3, r2
 801b594:	d004      	beq.n	801b5a0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b596:	69fb      	ldr	r3, [r7, #28]
 801b598:	6a1b      	ldr	r3, [r3, #32]
 801b59a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b59c:	4313      	orrs	r3, r2
 801b59e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b5a0:	69fb      	ldr	r3, [r7, #28]
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	689b      	ldr	r3, [r3, #8]
 801b5a6:	4ab4      	ldr	r2, [pc, #720]	@ (801b878 <UART_SetConfig+0x34c>)
 801b5a8:	4013      	ands	r3, r2
 801b5aa:	0019      	movs	r1, r3
 801b5ac:	69fb      	ldr	r3, [r7, #28]
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b5b2:	430a      	orrs	r2, r1
 801b5b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b5b6:	69fb      	ldr	r3, [r7, #28]
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	4ab0      	ldr	r2, [pc, #704]	@ (801b87c <UART_SetConfig+0x350>)
 801b5bc:	4293      	cmp	r3, r2
 801b5be:	d131      	bne.n	801b624 <UART_SetConfig+0xf8>
 801b5c0:	4baf      	ldr	r3, [pc, #700]	@ (801b880 <UART_SetConfig+0x354>)
 801b5c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b5c4:	2203      	movs	r2, #3
 801b5c6:	4013      	ands	r3, r2
 801b5c8:	2b03      	cmp	r3, #3
 801b5ca:	d01d      	beq.n	801b608 <UART_SetConfig+0xdc>
 801b5cc:	d823      	bhi.n	801b616 <UART_SetConfig+0xea>
 801b5ce:	2b02      	cmp	r3, #2
 801b5d0:	d00c      	beq.n	801b5ec <UART_SetConfig+0xc0>
 801b5d2:	d820      	bhi.n	801b616 <UART_SetConfig+0xea>
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d002      	beq.n	801b5de <UART_SetConfig+0xb2>
 801b5d8:	2b01      	cmp	r3, #1
 801b5da:	d00e      	beq.n	801b5fa <UART_SetConfig+0xce>
 801b5dc:	e01b      	b.n	801b616 <UART_SetConfig+0xea>
 801b5de:	231b      	movs	r3, #27
 801b5e0:	2218      	movs	r2, #24
 801b5e2:	189b      	adds	r3, r3, r2
 801b5e4:	19db      	adds	r3, r3, r7
 801b5e6:	2201      	movs	r2, #1
 801b5e8:	701a      	strb	r2, [r3, #0]
 801b5ea:	e0b4      	b.n	801b756 <UART_SetConfig+0x22a>
 801b5ec:	231b      	movs	r3, #27
 801b5ee:	2218      	movs	r2, #24
 801b5f0:	189b      	adds	r3, r3, r2
 801b5f2:	19db      	adds	r3, r3, r7
 801b5f4:	2202      	movs	r2, #2
 801b5f6:	701a      	strb	r2, [r3, #0]
 801b5f8:	e0ad      	b.n	801b756 <UART_SetConfig+0x22a>
 801b5fa:	231b      	movs	r3, #27
 801b5fc:	2218      	movs	r2, #24
 801b5fe:	189b      	adds	r3, r3, r2
 801b600:	19db      	adds	r3, r3, r7
 801b602:	2204      	movs	r2, #4
 801b604:	701a      	strb	r2, [r3, #0]
 801b606:	e0a6      	b.n	801b756 <UART_SetConfig+0x22a>
 801b608:	231b      	movs	r3, #27
 801b60a:	2218      	movs	r2, #24
 801b60c:	189b      	adds	r3, r3, r2
 801b60e:	19db      	adds	r3, r3, r7
 801b610:	2208      	movs	r2, #8
 801b612:	701a      	strb	r2, [r3, #0]
 801b614:	e09f      	b.n	801b756 <UART_SetConfig+0x22a>
 801b616:	231b      	movs	r3, #27
 801b618:	2218      	movs	r2, #24
 801b61a:	189b      	adds	r3, r3, r2
 801b61c:	19db      	adds	r3, r3, r7
 801b61e:	2210      	movs	r2, #16
 801b620:	701a      	strb	r2, [r3, #0]
 801b622:	e098      	b.n	801b756 <UART_SetConfig+0x22a>
 801b624:	69fb      	ldr	r3, [r7, #28]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	4a96      	ldr	r2, [pc, #600]	@ (801b884 <UART_SetConfig+0x358>)
 801b62a:	4293      	cmp	r3, r2
 801b62c:	d131      	bne.n	801b692 <UART_SetConfig+0x166>
 801b62e:	4b94      	ldr	r3, [pc, #592]	@ (801b880 <UART_SetConfig+0x354>)
 801b630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b632:	220c      	movs	r2, #12
 801b634:	4013      	ands	r3, r2
 801b636:	2b0c      	cmp	r3, #12
 801b638:	d01d      	beq.n	801b676 <UART_SetConfig+0x14a>
 801b63a:	d823      	bhi.n	801b684 <UART_SetConfig+0x158>
 801b63c:	2b08      	cmp	r3, #8
 801b63e:	d00c      	beq.n	801b65a <UART_SetConfig+0x12e>
 801b640:	d820      	bhi.n	801b684 <UART_SetConfig+0x158>
 801b642:	2b00      	cmp	r3, #0
 801b644:	d002      	beq.n	801b64c <UART_SetConfig+0x120>
 801b646:	2b04      	cmp	r3, #4
 801b648:	d00e      	beq.n	801b668 <UART_SetConfig+0x13c>
 801b64a:	e01b      	b.n	801b684 <UART_SetConfig+0x158>
 801b64c:	231b      	movs	r3, #27
 801b64e:	2218      	movs	r2, #24
 801b650:	189b      	adds	r3, r3, r2
 801b652:	19db      	adds	r3, r3, r7
 801b654:	2200      	movs	r2, #0
 801b656:	701a      	strb	r2, [r3, #0]
 801b658:	e07d      	b.n	801b756 <UART_SetConfig+0x22a>
 801b65a:	231b      	movs	r3, #27
 801b65c:	2218      	movs	r2, #24
 801b65e:	189b      	adds	r3, r3, r2
 801b660:	19db      	adds	r3, r3, r7
 801b662:	2202      	movs	r2, #2
 801b664:	701a      	strb	r2, [r3, #0]
 801b666:	e076      	b.n	801b756 <UART_SetConfig+0x22a>
 801b668:	231b      	movs	r3, #27
 801b66a:	2218      	movs	r2, #24
 801b66c:	189b      	adds	r3, r3, r2
 801b66e:	19db      	adds	r3, r3, r7
 801b670:	2204      	movs	r2, #4
 801b672:	701a      	strb	r2, [r3, #0]
 801b674:	e06f      	b.n	801b756 <UART_SetConfig+0x22a>
 801b676:	231b      	movs	r3, #27
 801b678:	2218      	movs	r2, #24
 801b67a:	189b      	adds	r3, r3, r2
 801b67c:	19db      	adds	r3, r3, r7
 801b67e:	2208      	movs	r2, #8
 801b680:	701a      	strb	r2, [r3, #0]
 801b682:	e068      	b.n	801b756 <UART_SetConfig+0x22a>
 801b684:	231b      	movs	r3, #27
 801b686:	2218      	movs	r2, #24
 801b688:	189b      	adds	r3, r3, r2
 801b68a:	19db      	adds	r3, r3, r7
 801b68c:	2210      	movs	r2, #16
 801b68e:	701a      	strb	r2, [r3, #0]
 801b690:	e061      	b.n	801b756 <UART_SetConfig+0x22a>
 801b692:	69fb      	ldr	r3, [r7, #28]
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	4a7c      	ldr	r2, [pc, #496]	@ (801b888 <UART_SetConfig+0x35c>)
 801b698:	4293      	cmp	r3, r2
 801b69a:	d106      	bne.n	801b6aa <UART_SetConfig+0x17e>
 801b69c:	231b      	movs	r3, #27
 801b69e:	2218      	movs	r2, #24
 801b6a0:	189b      	adds	r3, r3, r2
 801b6a2:	19db      	adds	r3, r3, r7
 801b6a4:	2200      	movs	r2, #0
 801b6a6:	701a      	strb	r2, [r3, #0]
 801b6a8:	e055      	b.n	801b756 <UART_SetConfig+0x22a>
 801b6aa:	69fb      	ldr	r3, [r7, #28]
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	4a77      	ldr	r2, [pc, #476]	@ (801b88c <UART_SetConfig+0x360>)
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	d106      	bne.n	801b6c2 <UART_SetConfig+0x196>
 801b6b4:	231b      	movs	r3, #27
 801b6b6:	2218      	movs	r2, #24
 801b6b8:	189b      	adds	r3, r3, r2
 801b6ba:	19db      	adds	r3, r3, r7
 801b6bc:	2200      	movs	r2, #0
 801b6be:	701a      	strb	r2, [r3, #0]
 801b6c0:	e049      	b.n	801b756 <UART_SetConfig+0x22a>
 801b6c2:	69fb      	ldr	r3, [r7, #28]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	4a6b      	ldr	r2, [pc, #428]	@ (801b874 <UART_SetConfig+0x348>)
 801b6c8:	4293      	cmp	r3, r2
 801b6ca:	d13e      	bne.n	801b74a <UART_SetConfig+0x21e>
 801b6cc:	4b6c      	ldr	r3, [pc, #432]	@ (801b880 <UART_SetConfig+0x354>)
 801b6ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b6d0:	23c0      	movs	r3, #192	@ 0xc0
 801b6d2:	011b      	lsls	r3, r3, #4
 801b6d4:	4013      	ands	r3, r2
 801b6d6:	22c0      	movs	r2, #192	@ 0xc0
 801b6d8:	0112      	lsls	r2, r2, #4
 801b6da:	4293      	cmp	r3, r2
 801b6dc:	d027      	beq.n	801b72e <UART_SetConfig+0x202>
 801b6de:	22c0      	movs	r2, #192	@ 0xc0
 801b6e0:	0112      	lsls	r2, r2, #4
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	d82a      	bhi.n	801b73c <UART_SetConfig+0x210>
 801b6e6:	2280      	movs	r2, #128	@ 0x80
 801b6e8:	0112      	lsls	r2, r2, #4
 801b6ea:	4293      	cmp	r3, r2
 801b6ec:	d011      	beq.n	801b712 <UART_SetConfig+0x1e6>
 801b6ee:	2280      	movs	r2, #128	@ 0x80
 801b6f0:	0112      	lsls	r2, r2, #4
 801b6f2:	4293      	cmp	r3, r2
 801b6f4:	d822      	bhi.n	801b73c <UART_SetConfig+0x210>
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d004      	beq.n	801b704 <UART_SetConfig+0x1d8>
 801b6fa:	2280      	movs	r2, #128	@ 0x80
 801b6fc:	00d2      	lsls	r2, r2, #3
 801b6fe:	4293      	cmp	r3, r2
 801b700:	d00e      	beq.n	801b720 <UART_SetConfig+0x1f4>
 801b702:	e01b      	b.n	801b73c <UART_SetConfig+0x210>
 801b704:	231b      	movs	r3, #27
 801b706:	2218      	movs	r2, #24
 801b708:	189b      	adds	r3, r3, r2
 801b70a:	19db      	adds	r3, r3, r7
 801b70c:	2200      	movs	r2, #0
 801b70e:	701a      	strb	r2, [r3, #0]
 801b710:	e021      	b.n	801b756 <UART_SetConfig+0x22a>
 801b712:	231b      	movs	r3, #27
 801b714:	2218      	movs	r2, #24
 801b716:	189b      	adds	r3, r3, r2
 801b718:	19db      	adds	r3, r3, r7
 801b71a:	2202      	movs	r2, #2
 801b71c:	701a      	strb	r2, [r3, #0]
 801b71e:	e01a      	b.n	801b756 <UART_SetConfig+0x22a>
 801b720:	231b      	movs	r3, #27
 801b722:	2218      	movs	r2, #24
 801b724:	189b      	adds	r3, r3, r2
 801b726:	19db      	adds	r3, r3, r7
 801b728:	2204      	movs	r2, #4
 801b72a:	701a      	strb	r2, [r3, #0]
 801b72c:	e013      	b.n	801b756 <UART_SetConfig+0x22a>
 801b72e:	231b      	movs	r3, #27
 801b730:	2218      	movs	r2, #24
 801b732:	189b      	adds	r3, r3, r2
 801b734:	19db      	adds	r3, r3, r7
 801b736:	2208      	movs	r2, #8
 801b738:	701a      	strb	r2, [r3, #0]
 801b73a:	e00c      	b.n	801b756 <UART_SetConfig+0x22a>
 801b73c:	231b      	movs	r3, #27
 801b73e:	2218      	movs	r2, #24
 801b740:	189b      	adds	r3, r3, r2
 801b742:	19db      	adds	r3, r3, r7
 801b744:	2210      	movs	r2, #16
 801b746:	701a      	strb	r2, [r3, #0]
 801b748:	e005      	b.n	801b756 <UART_SetConfig+0x22a>
 801b74a:	231b      	movs	r3, #27
 801b74c:	2218      	movs	r2, #24
 801b74e:	189b      	adds	r3, r3, r2
 801b750:	19db      	adds	r3, r3, r7
 801b752:	2210      	movs	r2, #16
 801b754:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b756:	69fb      	ldr	r3, [r7, #28]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	4a46      	ldr	r2, [pc, #280]	@ (801b874 <UART_SetConfig+0x348>)
 801b75c:	4293      	cmp	r3, r2
 801b75e:	d000      	beq.n	801b762 <UART_SetConfig+0x236>
 801b760:	e09a      	b.n	801b898 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801b762:	231b      	movs	r3, #27
 801b764:	2218      	movs	r2, #24
 801b766:	189b      	adds	r3, r3, r2
 801b768:	19db      	adds	r3, r3, r7
 801b76a:	781b      	ldrb	r3, [r3, #0]
 801b76c:	2b08      	cmp	r3, #8
 801b76e:	d01d      	beq.n	801b7ac <UART_SetConfig+0x280>
 801b770:	dc20      	bgt.n	801b7b4 <UART_SetConfig+0x288>
 801b772:	2b04      	cmp	r3, #4
 801b774:	d015      	beq.n	801b7a2 <UART_SetConfig+0x276>
 801b776:	dc1d      	bgt.n	801b7b4 <UART_SetConfig+0x288>
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d002      	beq.n	801b782 <UART_SetConfig+0x256>
 801b77c:	2b02      	cmp	r3, #2
 801b77e:	d005      	beq.n	801b78c <UART_SetConfig+0x260>
 801b780:	e018      	b.n	801b7b4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b782:	f7fd fe4b 	bl	801941c <HAL_RCC_GetPCLK1Freq>
 801b786:	0003      	movs	r3, r0
 801b788:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b78a:	e01c      	b.n	801b7c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b78c:	4b3c      	ldr	r3, [pc, #240]	@ (801b880 <UART_SetConfig+0x354>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2210      	movs	r2, #16
 801b792:	4013      	ands	r3, r2
 801b794:	d002      	beq.n	801b79c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b796:	4b3e      	ldr	r3, [pc, #248]	@ (801b890 <UART_SetConfig+0x364>)
 801b798:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b79a:	e014      	b.n	801b7c6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801b79c:	4b3d      	ldr	r3, [pc, #244]	@ (801b894 <UART_SetConfig+0x368>)
 801b79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b7a0:	e011      	b.n	801b7c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b7a2:	f7fd fd8b 	bl	80192bc <HAL_RCC_GetSysClockFreq>
 801b7a6:	0003      	movs	r3, r0
 801b7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b7aa:	e00c      	b.n	801b7c6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b7ac:	2380      	movs	r3, #128	@ 0x80
 801b7ae:	021b      	lsls	r3, r3, #8
 801b7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b7b2:	e008      	b.n	801b7c6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b7b8:	231a      	movs	r3, #26
 801b7ba:	2218      	movs	r2, #24
 801b7bc:	189b      	adds	r3, r3, r2
 801b7be:	19db      	adds	r3, r3, r7
 801b7c0:	2201      	movs	r2, #1
 801b7c2:	701a      	strb	r2, [r3, #0]
        break;
 801b7c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801b7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d100      	bne.n	801b7ce <UART_SetConfig+0x2a2>
 801b7cc:	e133      	b.n	801ba36 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b7ce:	69fb      	ldr	r3, [r7, #28]
 801b7d0:	685a      	ldr	r2, [r3, #4]
 801b7d2:	0013      	movs	r3, r2
 801b7d4:	005b      	lsls	r3, r3, #1
 801b7d6:	189b      	adds	r3, r3, r2
 801b7d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7da:	429a      	cmp	r2, r3
 801b7dc:	d305      	bcc.n	801b7ea <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801b7de:	69fb      	ldr	r3, [r7, #28]
 801b7e0:	685b      	ldr	r3, [r3, #4]
 801b7e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b7e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7e6:	429a      	cmp	r2, r3
 801b7e8:	d906      	bls.n	801b7f8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801b7ea:	231a      	movs	r3, #26
 801b7ec:	2218      	movs	r2, #24
 801b7ee:	189b      	adds	r3, r3, r2
 801b7f0:	19db      	adds	r3, r3, r7
 801b7f2:	2201      	movs	r2, #1
 801b7f4:	701a      	strb	r2, [r3, #0]
 801b7f6:	e11e      	b.n	801ba36 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801b7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7fa:	613b      	str	r3, [r7, #16]
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	617b      	str	r3, [r7, #20]
 801b800:	6939      	ldr	r1, [r7, #16]
 801b802:	697a      	ldr	r2, [r7, #20]
 801b804:	000b      	movs	r3, r1
 801b806:	0e1b      	lsrs	r3, r3, #24
 801b808:	0010      	movs	r0, r2
 801b80a:	0205      	lsls	r5, r0, #8
 801b80c:	431d      	orrs	r5, r3
 801b80e:	000b      	movs	r3, r1
 801b810:	021c      	lsls	r4, r3, #8
 801b812:	69fb      	ldr	r3, [r7, #28]
 801b814:	685b      	ldr	r3, [r3, #4]
 801b816:	085b      	lsrs	r3, r3, #1
 801b818:	60bb      	str	r3, [r7, #8]
 801b81a:	2300      	movs	r3, #0
 801b81c:	60fb      	str	r3, [r7, #12]
 801b81e:	68b8      	ldr	r0, [r7, #8]
 801b820:	68f9      	ldr	r1, [r7, #12]
 801b822:	1900      	adds	r0, r0, r4
 801b824:	4169      	adcs	r1, r5
 801b826:	69fb      	ldr	r3, [r7, #28]
 801b828:	685b      	ldr	r3, [r3, #4]
 801b82a:	603b      	str	r3, [r7, #0]
 801b82c:	2300      	movs	r3, #0
 801b82e:	607b      	str	r3, [r7, #4]
 801b830:	683a      	ldr	r2, [r7, #0]
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	f7e4 fea4 	bl	8000580 <__aeabi_uldivmod>
 801b838:	0002      	movs	r2, r0
 801b83a:	000b      	movs	r3, r1
 801b83c:	0013      	movs	r3, r2
 801b83e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b842:	23c0      	movs	r3, #192	@ 0xc0
 801b844:	009b      	lsls	r3, r3, #2
 801b846:	429a      	cmp	r2, r3
 801b848:	d309      	bcc.n	801b85e <UART_SetConfig+0x332>
 801b84a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b84c:	2380      	movs	r3, #128	@ 0x80
 801b84e:	035b      	lsls	r3, r3, #13
 801b850:	429a      	cmp	r2, r3
 801b852:	d204      	bcs.n	801b85e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801b854:	69fb      	ldr	r3, [r7, #28]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b85a:	60da      	str	r2, [r3, #12]
 801b85c:	e0eb      	b.n	801ba36 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801b85e:	231a      	movs	r3, #26
 801b860:	2218      	movs	r2, #24
 801b862:	189b      	adds	r3, r3, r2
 801b864:	19db      	adds	r3, r3, r7
 801b866:	2201      	movs	r2, #1
 801b868:	701a      	strb	r2, [r3, #0]
 801b86a:	e0e4      	b.n	801ba36 <UART_SetConfig+0x50a>
 801b86c:	efff69f3 	.word	0xefff69f3
 801b870:	ffffcfff 	.word	0xffffcfff
 801b874:	40004800 	.word	0x40004800
 801b878:	fffff4ff 	.word	0xfffff4ff
 801b87c:	40013800 	.word	0x40013800
 801b880:	40021000 	.word	0x40021000
 801b884:	40004400 	.word	0x40004400
 801b888:	40004c00 	.word	0x40004c00
 801b88c:	40005000 	.word	0x40005000
 801b890:	003d0900 	.word	0x003d0900
 801b894:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	69da      	ldr	r2, [r3, #28]
 801b89c:	2380      	movs	r3, #128	@ 0x80
 801b89e:	021b      	lsls	r3, r3, #8
 801b8a0:	429a      	cmp	r2, r3
 801b8a2:	d000      	beq.n	801b8a6 <UART_SetConfig+0x37a>
 801b8a4:	e070      	b.n	801b988 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801b8a6:	231b      	movs	r3, #27
 801b8a8:	2218      	movs	r2, #24
 801b8aa:	189b      	adds	r3, r3, r2
 801b8ac:	19db      	adds	r3, r3, r7
 801b8ae:	781b      	ldrb	r3, [r3, #0]
 801b8b0:	2b08      	cmp	r3, #8
 801b8b2:	d822      	bhi.n	801b8fa <UART_SetConfig+0x3ce>
 801b8b4:	009a      	lsls	r2, r3, #2
 801b8b6:	4b67      	ldr	r3, [pc, #412]	@ (801ba54 <UART_SetConfig+0x528>)
 801b8b8:	18d3      	adds	r3, r2, r3
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b8be:	f7fd fdad 	bl	801941c <HAL_RCC_GetPCLK1Freq>
 801b8c2:	0003      	movs	r3, r0
 801b8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8c6:	e021      	b.n	801b90c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b8c8:	f7fd fdbe 	bl	8019448 <HAL_RCC_GetPCLK2Freq>
 801b8cc:	0003      	movs	r3, r0
 801b8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8d0:	e01c      	b.n	801b90c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b8d2:	4b61      	ldr	r3, [pc, #388]	@ (801ba58 <UART_SetConfig+0x52c>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	2210      	movs	r2, #16
 801b8d8:	4013      	ands	r3, r2
 801b8da:	d002      	beq.n	801b8e2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b8dc:	4b5f      	ldr	r3, [pc, #380]	@ (801ba5c <UART_SetConfig+0x530>)
 801b8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b8e0:	e014      	b.n	801b90c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801b8e2:	4b5f      	ldr	r3, [pc, #380]	@ (801ba60 <UART_SetConfig+0x534>)
 801b8e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8e6:	e011      	b.n	801b90c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b8e8:	f7fd fce8 	bl	80192bc <HAL_RCC_GetSysClockFreq>
 801b8ec:	0003      	movs	r3, r0
 801b8ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8f0:	e00c      	b.n	801b90c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b8f2:	2380      	movs	r3, #128	@ 0x80
 801b8f4:	021b      	lsls	r3, r3, #8
 801b8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8f8:	e008      	b.n	801b90c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b8fe:	231a      	movs	r3, #26
 801b900:	2218      	movs	r2, #24
 801b902:	189b      	adds	r3, r3, r2
 801b904:	19db      	adds	r3, r3, r7
 801b906:	2201      	movs	r2, #1
 801b908:	701a      	strb	r2, [r3, #0]
        break;
 801b90a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d100      	bne.n	801b914 <UART_SetConfig+0x3e8>
 801b912:	e090      	b.n	801ba36 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801b914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b916:	005a      	lsls	r2, r3, #1
 801b918:	69fb      	ldr	r3, [r7, #28]
 801b91a:	685b      	ldr	r3, [r3, #4]
 801b91c:	085b      	lsrs	r3, r3, #1
 801b91e:	18d2      	adds	r2, r2, r3
 801b920:	69fb      	ldr	r3, [r7, #28]
 801b922:	685b      	ldr	r3, [r3, #4]
 801b924:	0019      	movs	r1, r3
 801b926:	0010      	movs	r0, r2
 801b928:	f7e4 fc3c 	bl	80001a4 <__udivsi3>
 801b92c:	0003      	movs	r3, r0
 801b92e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b932:	2b0f      	cmp	r3, #15
 801b934:	d921      	bls.n	801b97a <UART_SetConfig+0x44e>
 801b936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b938:	2380      	movs	r3, #128	@ 0x80
 801b93a:	025b      	lsls	r3, r3, #9
 801b93c:	429a      	cmp	r2, r3
 801b93e:	d21c      	bcs.n	801b97a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b942:	b29a      	uxth	r2, r3
 801b944:	200e      	movs	r0, #14
 801b946:	2418      	movs	r4, #24
 801b948:	1903      	adds	r3, r0, r4
 801b94a:	19db      	adds	r3, r3, r7
 801b94c:	210f      	movs	r1, #15
 801b94e:	438a      	bics	r2, r1
 801b950:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b954:	085b      	lsrs	r3, r3, #1
 801b956:	b29b      	uxth	r3, r3
 801b958:	2207      	movs	r2, #7
 801b95a:	4013      	ands	r3, r2
 801b95c:	b299      	uxth	r1, r3
 801b95e:	1903      	adds	r3, r0, r4
 801b960:	19db      	adds	r3, r3, r7
 801b962:	1902      	adds	r2, r0, r4
 801b964:	19d2      	adds	r2, r2, r7
 801b966:	8812      	ldrh	r2, [r2, #0]
 801b968:	430a      	orrs	r2, r1
 801b96a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801b96c:	69fb      	ldr	r3, [r7, #28]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	1902      	adds	r2, r0, r4
 801b972:	19d2      	adds	r2, r2, r7
 801b974:	8812      	ldrh	r2, [r2, #0]
 801b976:	60da      	str	r2, [r3, #12]
 801b978:	e05d      	b.n	801ba36 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801b97a:	231a      	movs	r3, #26
 801b97c:	2218      	movs	r2, #24
 801b97e:	189b      	adds	r3, r3, r2
 801b980:	19db      	adds	r3, r3, r7
 801b982:	2201      	movs	r2, #1
 801b984:	701a      	strb	r2, [r3, #0]
 801b986:	e056      	b.n	801ba36 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801b988:	231b      	movs	r3, #27
 801b98a:	2218      	movs	r2, #24
 801b98c:	189b      	adds	r3, r3, r2
 801b98e:	19db      	adds	r3, r3, r7
 801b990:	781b      	ldrb	r3, [r3, #0]
 801b992:	2b08      	cmp	r3, #8
 801b994:	d822      	bhi.n	801b9dc <UART_SetConfig+0x4b0>
 801b996:	009a      	lsls	r2, r3, #2
 801b998:	4b32      	ldr	r3, [pc, #200]	@ (801ba64 <UART_SetConfig+0x538>)
 801b99a:	18d3      	adds	r3, r2, r3
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b9a0:	f7fd fd3c 	bl	801941c <HAL_RCC_GetPCLK1Freq>
 801b9a4:	0003      	movs	r3, r0
 801b9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9a8:	e021      	b.n	801b9ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b9aa:	f7fd fd4d 	bl	8019448 <HAL_RCC_GetPCLK2Freq>
 801b9ae:	0003      	movs	r3, r0
 801b9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9b2:	e01c      	b.n	801b9ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b9b4:	4b28      	ldr	r3, [pc, #160]	@ (801ba58 <UART_SetConfig+0x52c>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	2210      	movs	r2, #16
 801b9ba:	4013      	ands	r3, r2
 801b9bc:	d002      	beq.n	801b9c4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b9be:	4b27      	ldr	r3, [pc, #156]	@ (801ba5c <UART_SetConfig+0x530>)
 801b9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b9c2:	e014      	b.n	801b9ee <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801b9c4:	4b26      	ldr	r3, [pc, #152]	@ (801ba60 <UART_SetConfig+0x534>)
 801b9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9c8:	e011      	b.n	801b9ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b9ca:	f7fd fc77 	bl	80192bc <HAL_RCC_GetSysClockFreq>
 801b9ce:	0003      	movs	r3, r0
 801b9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9d2:	e00c      	b.n	801b9ee <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b9d4:	2380      	movs	r3, #128	@ 0x80
 801b9d6:	021b      	lsls	r3, r3, #8
 801b9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9da:	e008      	b.n	801b9ee <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801b9dc:	2300      	movs	r3, #0
 801b9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b9e0:	231a      	movs	r3, #26
 801b9e2:	2218      	movs	r2, #24
 801b9e4:	189b      	adds	r3, r3, r2
 801b9e6:	19db      	adds	r3, r3, r7
 801b9e8:	2201      	movs	r2, #1
 801b9ea:	701a      	strb	r2, [r3, #0]
        break;
 801b9ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801b9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d020      	beq.n	801ba36 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801b9f4:	69fb      	ldr	r3, [r7, #28]
 801b9f6:	685b      	ldr	r3, [r3, #4]
 801b9f8:	085a      	lsrs	r2, r3, #1
 801b9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9fc:	18d2      	adds	r2, r2, r3
 801b9fe:	69fb      	ldr	r3, [r7, #28]
 801ba00:	685b      	ldr	r3, [r3, #4]
 801ba02:	0019      	movs	r1, r3
 801ba04:	0010      	movs	r0, r2
 801ba06:	f7e4 fbcd 	bl	80001a4 <__udivsi3>
 801ba0a:	0003      	movs	r3, r0
 801ba0c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ba0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba10:	2b0f      	cmp	r3, #15
 801ba12:	d90a      	bls.n	801ba2a <UART_SetConfig+0x4fe>
 801ba14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba16:	2380      	movs	r3, #128	@ 0x80
 801ba18:	025b      	lsls	r3, r3, #9
 801ba1a:	429a      	cmp	r2, r3
 801ba1c:	d205      	bcs.n	801ba2a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba20:	b29a      	uxth	r2, r3
 801ba22:	69fb      	ldr	r3, [r7, #28]
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	60da      	str	r2, [r3, #12]
 801ba28:	e005      	b.n	801ba36 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801ba2a:	231a      	movs	r3, #26
 801ba2c:	2218      	movs	r2, #24
 801ba2e:	189b      	adds	r3, r3, r2
 801ba30:	19db      	adds	r3, r3, r7
 801ba32:	2201      	movs	r2, #1
 801ba34:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ba36:	69fb      	ldr	r3, [r7, #28]
 801ba38:	2200      	movs	r2, #0
 801ba3a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801ba3c:	69fb      	ldr	r3, [r7, #28]
 801ba3e:	2200      	movs	r2, #0
 801ba40:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801ba42:	231a      	movs	r3, #26
 801ba44:	2218      	movs	r2, #24
 801ba46:	189b      	adds	r3, r3, r2
 801ba48:	19db      	adds	r3, r3, r7
 801ba4a:	781b      	ldrb	r3, [r3, #0]
}
 801ba4c:	0018      	movs	r0, r3
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	b00e      	add	sp, #56	@ 0x38
 801ba52:	bdb0      	pop	{r4, r5, r7, pc}
 801ba54:	0802b28c 	.word	0x0802b28c
 801ba58:	40021000 	.word	0x40021000
 801ba5c:	003d0900 	.word	0x003d0900
 801ba60:	00f42400 	.word	0x00f42400
 801ba64:	0802b2b0 	.word	0x0802b2b0

0801ba68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ba68:	b580      	push	{r7, lr}
 801ba6a:	b082      	sub	sp, #8
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba74:	2201      	movs	r2, #1
 801ba76:	4013      	ands	r3, r2
 801ba78:	d00b      	beq.n	801ba92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	685b      	ldr	r3, [r3, #4]
 801ba80:	4a4a      	ldr	r2, [pc, #296]	@ (801bbac <UART_AdvFeatureConfig+0x144>)
 801ba82:	4013      	ands	r3, r2
 801ba84:	0019      	movs	r1, r3
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	430a      	orrs	r2, r1
 801ba90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba96:	2202      	movs	r2, #2
 801ba98:	4013      	ands	r3, r2
 801ba9a:	d00b      	beq.n	801bab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	685b      	ldr	r3, [r3, #4]
 801baa2:	4a43      	ldr	r2, [pc, #268]	@ (801bbb0 <UART_AdvFeatureConfig+0x148>)
 801baa4:	4013      	ands	r3, r2
 801baa6:	0019      	movs	r1, r3
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	430a      	orrs	r2, r1
 801bab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bab8:	2204      	movs	r2, #4
 801baba:	4013      	ands	r3, r2
 801babc:	d00b      	beq.n	801bad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	685b      	ldr	r3, [r3, #4]
 801bac4:	4a3b      	ldr	r2, [pc, #236]	@ (801bbb4 <UART_AdvFeatureConfig+0x14c>)
 801bac6:	4013      	ands	r3, r2
 801bac8:	0019      	movs	r1, r3
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	430a      	orrs	r2, r1
 801bad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bada:	2208      	movs	r2, #8
 801badc:	4013      	ands	r3, r2
 801bade:	d00b      	beq.n	801baf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	685b      	ldr	r3, [r3, #4]
 801bae6:	4a34      	ldr	r2, [pc, #208]	@ (801bbb8 <UART_AdvFeatureConfig+0x150>)
 801bae8:	4013      	ands	r3, r2
 801baea:	0019      	movs	r1, r3
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	430a      	orrs	r2, r1
 801baf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bafc:	2210      	movs	r2, #16
 801bafe:	4013      	ands	r3, r2
 801bb00:	d00b      	beq.n	801bb1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	689b      	ldr	r3, [r3, #8]
 801bb08:	4a2c      	ldr	r2, [pc, #176]	@ (801bbbc <UART_AdvFeatureConfig+0x154>)
 801bb0a:	4013      	ands	r3, r2
 801bb0c:	0019      	movs	r1, r3
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	430a      	orrs	r2, r1
 801bb18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb1e:	2220      	movs	r2, #32
 801bb20:	4013      	ands	r3, r2
 801bb22:	d00b      	beq.n	801bb3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	681b      	ldr	r3, [r3, #0]
 801bb28:	689b      	ldr	r3, [r3, #8]
 801bb2a:	4a25      	ldr	r2, [pc, #148]	@ (801bbc0 <UART_AdvFeatureConfig+0x158>)
 801bb2c:	4013      	ands	r3, r2
 801bb2e:	0019      	movs	r1, r3
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	430a      	orrs	r2, r1
 801bb3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb40:	2240      	movs	r2, #64	@ 0x40
 801bb42:	4013      	ands	r3, r2
 801bb44:	d01d      	beq.n	801bb82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	685b      	ldr	r3, [r3, #4]
 801bb4c:	4a1d      	ldr	r2, [pc, #116]	@ (801bbc4 <UART_AdvFeatureConfig+0x15c>)
 801bb4e:	4013      	ands	r3, r2
 801bb50:	0019      	movs	r1, r3
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	430a      	orrs	r2, r1
 801bb5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bb62:	2380      	movs	r3, #128	@ 0x80
 801bb64:	035b      	lsls	r3, r3, #13
 801bb66:	429a      	cmp	r2, r3
 801bb68:	d10b      	bne.n	801bb82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	685b      	ldr	r3, [r3, #4]
 801bb70:	4a15      	ldr	r2, [pc, #84]	@ (801bbc8 <UART_AdvFeatureConfig+0x160>)
 801bb72:	4013      	ands	r3, r2
 801bb74:	0019      	movs	r1, r3
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	430a      	orrs	r2, r1
 801bb80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb86:	2280      	movs	r2, #128	@ 0x80
 801bb88:	4013      	ands	r3, r2
 801bb8a:	d00b      	beq.n	801bba4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	4a0e      	ldr	r2, [pc, #56]	@ (801bbcc <UART_AdvFeatureConfig+0x164>)
 801bb94:	4013      	ands	r3, r2
 801bb96:	0019      	movs	r1, r3
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	430a      	orrs	r2, r1
 801bba2:	605a      	str	r2, [r3, #4]
  }
}
 801bba4:	46c0      	nop			@ (mov r8, r8)
 801bba6:	46bd      	mov	sp, r7
 801bba8:	b002      	add	sp, #8
 801bbaa:	bd80      	pop	{r7, pc}
 801bbac:	fffdffff 	.word	0xfffdffff
 801bbb0:	fffeffff 	.word	0xfffeffff
 801bbb4:	fffbffff 	.word	0xfffbffff
 801bbb8:	ffff7fff 	.word	0xffff7fff
 801bbbc:	ffffefff 	.word	0xffffefff
 801bbc0:	ffffdfff 	.word	0xffffdfff
 801bbc4:	ffefffff 	.word	0xffefffff
 801bbc8:	ff9fffff 	.word	0xff9fffff
 801bbcc:	fff7ffff 	.word	0xfff7ffff

0801bbd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b092      	sub	sp, #72	@ 0x48
 801bbd4:	af02      	add	r7, sp, #8
 801bbd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2284      	movs	r2, #132	@ 0x84
 801bbdc:	2100      	movs	r1, #0
 801bbde:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bbe0:	f7f6 fa88 	bl	80120f4 <HAL_GetTick>
 801bbe4:	0003      	movs	r3, r0
 801bbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	2208      	movs	r2, #8
 801bbf0:	4013      	ands	r3, r2
 801bbf2:	2b08      	cmp	r3, #8
 801bbf4:	d12c      	bne.n	801bc50 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bbf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbf8:	2280      	movs	r2, #128	@ 0x80
 801bbfa:	0391      	lsls	r1, r2, #14
 801bbfc:	6878      	ldr	r0, [r7, #4]
 801bbfe:	4a46      	ldr	r2, [pc, #280]	@ (801bd18 <UART_CheckIdleState+0x148>)
 801bc00:	9200      	str	r2, [sp, #0]
 801bc02:	2200      	movs	r2, #0
 801bc04:	f000 f88c 	bl	801bd20 <UART_WaitOnFlagUntilTimeout>
 801bc08:	1e03      	subs	r3, r0, #0
 801bc0a:	d021      	beq.n	801bc50 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc0c:	f3ef 8310 	mrs	r3, PRIMASK
 801bc10:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801bc14:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bc16:	2301      	movs	r3, #1
 801bc18:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc1c:	f383 8810 	msr	PRIMASK, r3
}
 801bc20:	46c0      	nop			@ (mov r8, r8)
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	681a      	ldr	r2, [r3, #0]
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	2180      	movs	r1, #128	@ 0x80
 801bc2e:	438a      	bics	r2, r1
 801bc30:	601a      	str	r2, [r3, #0]
 801bc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc38:	f383 8810 	msr	PRIMASK, r3
}
 801bc3c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	2220      	movs	r2, #32
 801bc42:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	2278      	movs	r2, #120	@ 0x78
 801bc48:	2100      	movs	r1, #0
 801bc4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bc4c:	2303      	movs	r3, #3
 801bc4e:	e05f      	b.n	801bd10 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	2204      	movs	r2, #4
 801bc58:	4013      	ands	r3, r2
 801bc5a:	2b04      	cmp	r3, #4
 801bc5c:	d146      	bne.n	801bcec <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bc5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bc60:	2280      	movs	r2, #128	@ 0x80
 801bc62:	03d1      	lsls	r1, r2, #15
 801bc64:	6878      	ldr	r0, [r7, #4]
 801bc66:	4a2c      	ldr	r2, [pc, #176]	@ (801bd18 <UART_CheckIdleState+0x148>)
 801bc68:	9200      	str	r2, [sp, #0]
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	f000 f858 	bl	801bd20 <UART_WaitOnFlagUntilTimeout>
 801bc70:	1e03      	subs	r3, r0, #0
 801bc72:	d03b      	beq.n	801bcec <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc74:	f3ef 8310 	mrs	r3, PRIMASK
 801bc78:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bc7c:	637b      	str	r3, [r7, #52]	@ 0x34
 801bc7e:	2301      	movs	r3, #1
 801bc80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc82:	693b      	ldr	r3, [r7, #16]
 801bc84:	f383 8810 	msr	PRIMASK, r3
}
 801bc88:	46c0      	nop			@ (mov r8, r8)
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	681b      	ldr	r3, [r3, #0]
 801bc8e:	681a      	ldr	r2, [r3, #0]
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	4921      	ldr	r1, [pc, #132]	@ (801bd1c <UART_CheckIdleState+0x14c>)
 801bc96:	400a      	ands	r2, r1
 801bc98:	601a      	str	r2, [r3, #0]
 801bc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bc9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc9e:	697b      	ldr	r3, [r7, #20]
 801bca0:	f383 8810 	msr	PRIMASK, r3
}
 801bca4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bca6:	f3ef 8310 	mrs	r3, PRIMASK
 801bcaa:	61bb      	str	r3, [r7, #24]
  return(result);
 801bcac:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bcae:	633b      	str	r3, [r7, #48]	@ 0x30
 801bcb0:	2301      	movs	r3, #1
 801bcb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcb4:	69fb      	ldr	r3, [r7, #28]
 801bcb6:	f383 8810 	msr	PRIMASK, r3
}
 801bcba:	46c0      	nop			@ (mov r8, r8)
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	689a      	ldr	r2, [r3, #8]
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	2101      	movs	r1, #1
 801bcc8:	438a      	bics	r2, r1
 801bcca:	609a      	str	r2, [r3, #8]
 801bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcd0:	6a3b      	ldr	r3, [r7, #32]
 801bcd2:	f383 8810 	msr	PRIMASK, r3
}
 801bcd6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	2280      	movs	r2, #128	@ 0x80
 801bcdc:	2120      	movs	r1, #32
 801bcde:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2278      	movs	r2, #120	@ 0x78
 801bce4:	2100      	movs	r1, #0
 801bce6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bce8:	2303      	movs	r3, #3
 801bcea:	e011      	b.n	801bd10 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	2220      	movs	r2, #32
 801bcf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	2280      	movs	r2, #128	@ 0x80
 801bcf6:	2120      	movs	r1, #32
 801bcf8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	2200      	movs	r2, #0
 801bcfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	2200      	movs	r2, #0
 801bd04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	2278      	movs	r2, #120	@ 0x78
 801bd0a:	2100      	movs	r1, #0
 801bd0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bd0e:	2300      	movs	r3, #0
}
 801bd10:	0018      	movs	r0, r3
 801bd12:	46bd      	mov	sp, r7
 801bd14:	b010      	add	sp, #64	@ 0x40
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	01ffffff 	.word	0x01ffffff
 801bd1c:	fffffedf 	.word	0xfffffedf

0801bd20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b084      	sub	sp, #16
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	60f8      	str	r0, [r7, #12]
 801bd28:	60b9      	str	r1, [r7, #8]
 801bd2a:	603b      	str	r3, [r7, #0]
 801bd2c:	1dfb      	adds	r3, r7, #7
 801bd2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bd30:	e04b      	b.n	801bdca <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bd32:	69bb      	ldr	r3, [r7, #24]
 801bd34:	3301      	adds	r3, #1
 801bd36:	d048      	beq.n	801bdca <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bd38:	f7f6 f9dc 	bl	80120f4 <HAL_GetTick>
 801bd3c:	0002      	movs	r2, r0
 801bd3e:	683b      	ldr	r3, [r7, #0]
 801bd40:	1ad3      	subs	r3, r2, r3
 801bd42:	69ba      	ldr	r2, [r7, #24]
 801bd44:	429a      	cmp	r2, r3
 801bd46:	d302      	bcc.n	801bd4e <UART_WaitOnFlagUntilTimeout+0x2e>
 801bd48:	69bb      	ldr	r3, [r7, #24]
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d101      	bne.n	801bd52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801bd4e:	2303      	movs	r3, #3
 801bd50:	e04b      	b.n	801bdea <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	2204      	movs	r2, #4
 801bd5a:	4013      	ands	r3, r2
 801bd5c:	d035      	beq.n	801bdca <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	69db      	ldr	r3, [r3, #28]
 801bd64:	2208      	movs	r2, #8
 801bd66:	4013      	ands	r3, r2
 801bd68:	2b08      	cmp	r3, #8
 801bd6a:	d111      	bne.n	801bd90 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	2208      	movs	r2, #8
 801bd72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	0018      	movs	r0, r3
 801bd78:	f000 f9ca 	bl	801c110 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	2284      	movs	r2, #132	@ 0x84
 801bd80:	2108      	movs	r1, #8
 801bd82:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2278      	movs	r2, #120	@ 0x78
 801bd88:	2100      	movs	r1, #0
 801bd8a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801bd8c:	2301      	movs	r3, #1
 801bd8e:	e02c      	b.n	801bdea <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	69da      	ldr	r2, [r3, #28]
 801bd96:	2380      	movs	r3, #128	@ 0x80
 801bd98:	011b      	lsls	r3, r3, #4
 801bd9a:	401a      	ands	r2, r3
 801bd9c:	2380      	movs	r3, #128	@ 0x80
 801bd9e:	011b      	lsls	r3, r3, #4
 801bda0:	429a      	cmp	r2, r3
 801bda2:	d112      	bne.n	801bdca <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	2280      	movs	r2, #128	@ 0x80
 801bdaa:	0112      	lsls	r2, r2, #4
 801bdac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	0018      	movs	r0, r3
 801bdb2:	f000 f9ad 	bl	801c110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	2284      	movs	r2, #132	@ 0x84
 801bdba:	2120      	movs	r1, #32
 801bdbc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	2278      	movs	r2, #120	@ 0x78
 801bdc2:	2100      	movs	r1, #0
 801bdc4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801bdc6:	2303      	movs	r3, #3
 801bdc8:	e00f      	b.n	801bdea <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bdca:	68fb      	ldr	r3, [r7, #12]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	69db      	ldr	r3, [r3, #28]
 801bdd0:	68ba      	ldr	r2, [r7, #8]
 801bdd2:	4013      	ands	r3, r2
 801bdd4:	68ba      	ldr	r2, [r7, #8]
 801bdd6:	1ad3      	subs	r3, r2, r3
 801bdd8:	425a      	negs	r2, r3
 801bdda:	4153      	adcs	r3, r2
 801bddc:	b2db      	uxtb	r3, r3
 801bdde:	001a      	movs	r2, r3
 801bde0:	1dfb      	adds	r3, r7, #7
 801bde2:	781b      	ldrb	r3, [r3, #0]
 801bde4:	429a      	cmp	r2, r3
 801bde6:	d0a4      	beq.n	801bd32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801bde8:	2300      	movs	r3, #0
}
 801bdea:	0018      	movs	r0, r3
 801bdec:	46bd      	mov	sp, r7
 801bdee:	b004      	add	sp, #16
 801bdf0:	bd80      	pop	{r7, pc}
	...

0801bdf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b090      	sub	sp, #64	@ 0x40
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	60f8      	str	r0, [r7, #12]
 801bdfc:	60b9      	str	r1, [r7, #8]
 801bdfe:	1dbb      	adds	r3, r7, #6
 801be00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	68ba      	ldr	r2, [r7, #8]
 801be06:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	1dba      	adds	r2, r7, #6
 801be0c:	2158      	movs	r1, #88	@ 0x58
 801be0e:	8812      	ldrh	r2, [r2, #0]
 801be10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	1dba      	adds	r2, r7, #6
 801be16:	215a      	movs	r1, #90	@ 0x5a
 801be18:	8812      	ldrh	r2, [r2, #0]
 801be1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	2200      	movs	r2, #0
 801be20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	689a      	ldr	r2, [r3, #8]
 801be26:	2380      	movs	r3, #128	@ 0x80
 801be28:	015b      	lsls	r3, r3, #5
 801be2a:	429a      	cmp	r2, r3
 801be2c:	d10d      	bne.n	801be4a <UART_Start_Receive_IT+0x56>
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	691b      	ldr	r3, [r3, #16]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d104      	bne.n	801be40 <UART_Start_Receive_IT+0x4c>
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	225c      	movs	r2, #92	@ 0x5c
 801be3a:	4950      	ldr	r1, [pc, #320]	@ (801bf7c <UART_Start_Receive_IT+0x188>)
 801be3c:	5299      	strh	r1, [r3, r2]
 801be3e:	e02e      	b.n	801be9e <UART_Start_Receive_IT+0xaa>
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	225c      	movs	r2, #92	@ 0x5c
 801be44:	21ff      	movs	r1, #255	@ 0xff
 801be46:	5299      	strh	r1, [r3, r2]
 801be48:	e029      	b.n	801be9e <UART_Start_Receive_IT+0xaa>
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	689b      	ldr	r3, [r3, #8]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d10d      	bne.n	801be6e <UART_Start_Receive_IT+0x7a>
 801be52:	68fb      	ldr	r3, [r7, #12]
 801be54:	691b      	ldr	r3, [r3, #16]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d104      	bne.n	801be64 <UART_Start_Receive_IT+0x70>
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	225c      	movs	r2, #92	@ 0x5c
 801be5e:	21ff      	movs	r1, #255	@ 0xff
 801be60:	5299      	strh	r1, [r3, r2]
 801be62:	e01c      	b.n	801be9e <UART_Start_Receive_IT+0xaa>
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	225c      	movs	r2, #92	@ 0x5c
 801be68:	217f      	movs	r1, #127	@ 0x7f
 801be6a:	5299      	strh	r1, [r3, r2]
 801be6c:	e017      	b.n	801be9e <UART_Start_Receive_IT+0xaa>
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	689a      	ldr	r2, [r3, #8]
 801be72:	2380      	movs	r3, #128	@ 0x80
 801be74:	055b      	lsls	r3, r3, #21
 801be76:	429a      	cmp	r2, r3
 801be78:	d10d      	bne.n	801be96 <UART_Start_Receive_IT+0xa2>
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	691b      	ldr	r3, [r3, #16]
 801be7e:	2b00      	cmp	r3, #0
 801be80:	d104      	bne.n	801be8c <UART_Start_Receive_IT+0x98>
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	225c      	movs	r2, #92	@ 0x5c
 801be86:	217f      	movs	r1, #127	@ 0x7f
 801be88:	5299      	strh	r1, [r3, r2]
 801be8a:	e008      	b.n	801be9e <UART_Start_Receive_IT+0xaa>
 801be8c:	68fb      	ldr	r3, [r7, #12]
 801be8e:	225c      	movs	r2, #92	@ 0x5c
 801be90:	213f      	movs	r1, #63	@ 0x3f
 801be92:	5299      	strh	r1, [r3, r2]
 801be94:	e003      	b.n	801be9e <UART_Start_Receive_IT+0xaa>
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	225c      	movs	r2, #92	@ 0x5c
 801be9a:	2100      	movs	r1, #0
 801be9c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	2284      	movs	r2, #132	@ 0x84
 801bea2:	2100      	movs	r1, #0
 801bea4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	2280      	movs	r2, #128	@ 0x80
 801beaa:	2122      	movs	r1, #34	@ 0x22
 801beac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801beae:	f3ef 8310 	mrs	r3, PRIMASK
 801beb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801beb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801beb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801beb8:	2301      	movs	r3, #1
 801beba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bebe:	f383 8810 	msr	PRIMASK, r3
}
 801bec2:	46c0      	nop			@ (mov r8, r8)
 801bec4:	68fb      	ldr	r3, [r7, #12]
 801bec6:	681b      	ldr	r3, [r3, #0]
 801bec8:	689a      	ldr	r2, [r3, #8]
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	2101      	movs	r1, #1
 801bed0:	430a      	orrs	r2, r1
 801bed2:	609a      	str	r2, [r3, #8]
 801bed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bed6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801beda:	f383 8810 	msr	PRIMASK, r3
}
 801bede:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	689a      	ldr	r2, [r3, #8]
 801bee4:	2380      	movs	r3, #128	@ 0x80
 801bee6:	015b      	lsls	r3, r3, #5
 801bee8:	429a      	cmp	r2, r3
 801beea:	d107      	bne.n	801befc <UART_Start_Receive_IT+0x108>
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	691b      	ldr	r3, [r3, #16]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d103      	bne.n	801befc <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	4a22      	ldr	r2, [pc, #136]	@ (801bf80 <UART_Start_Receive_IT+0x18c>)
 801bef8:	669a      	str	r2, [r3, #104]	@ 0x68
 801befa:	e002      	b.n	801bf02 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801befc:	68fb      	ldr	r3, [r7, #12]
 801befe:	4a21      	ldr	r2, [pc, #132]	@ (801bf84 <UART_Start_Receive_IT+0x190>)
 801bf00:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	691b      	ldr	r3, [r3, #16]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d019      	beq.n	801bf3e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf0a:	f3ef 8310 	mrs	r3, PRIMASK
 801bf0e:	61fb      	str	r3, [r7, #28]
  return(result);
 801bf10:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801bf12:	637b      	str	r3, [r7, #52]	@ 0x34
 801bf14:	2301      	movs	r3, #1
 801bf16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf18:	6a3b      	ldr	r3, [r7, #32]
 801bf1a:	f383 8810 	msr	PRIMASK, r3
}
 801bf1e:	46c0      	nop			@ (mov r8, r8)
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	681a      	ldr	r2, [r3, #0]
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	2190      	movs	r1, #144	@ 0x90
 801bf2c:	0049      	lsls	r1, r1, #1
 801bf2e:	430a      	orrs	r2, r1
 801bf30:	601a      	str	r2, [r3, #0]
 801bf32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf34:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf38:	f383 8810 	msr	PRIMASK, r3
}
 801bf3c:	e018      	b.n	801bf70 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf3e:	f3ef 8310 	mrs	r3, PRIMASK
 801bf42:	613b      	str	r3, [r7, #16]
  return(result);
 801bf44:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bf46:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bf48:	2301      	movs	r3, #1
 801bf4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	f383 8810 	msr	PRIMASK, r3
}
 801bf52:	46c0      	nop			@ (mov r8, r8)
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	681a      	ldr	r2, [r3, #0]
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	2120      	movs	r1, #32
 801bf60:	430a      	orrs	r2, r1
 801bf62:	601a      	str	r2, [r3, #0]
 801bf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf68:	69bb      	ldr	r3, [r7, #24]
 801bf6a:	f383 8810 	msr	PRIMASK, r3
}
 801bf6e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801bf70:	2300      	movs	r3, #0
}
 801bf72:	0018      	movs	r0, r3
 801bf74:	46bd      	mov	sp, r7
 801bf76:	b010      	add	sp, #64	@ 0x40
 801bf78:	bd80      	pop	{r7, pc}
 801bf7a:	46c0      	nop			@ (mov r8, r8)
 801bf7c:	000001ff 	.word	0x000001ff
 801bf80:	0801c6f5 	.word	0x0801c6f5
 801bf84:	0801c529 	.word	0x0801c529

0801bf88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b090      	sub	sp, #64	@ 0x40
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	60f8      	str	r0, [r7, #12]
 801bf90:	60b9      	str	r1, [r7, #8]
 801bf92:	1dbb      	adds	r3, r7, #6
 801bf94:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	68ba      	ldr	r2, [r7, #8]
 801bf9a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801bf9c:	68fb      	ldr	r3, [r7, #12]
 801bf9e:	1dba      	adds	r2, r7, #6
 801bfa0:	2158      	movs	r1, #88	@ 0x58
 801bfa2:	8812      	ldrh	r2, [r2, #0]
 801bfa4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	2284      	movs	r2, #132	@ 0x84
 801bfaa:	2100      	movs	r1, #0
 801bfac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	2280      	movs	r2, #128	@ 0x80
 801bfb2:	2122      	movs	r1, #34	@ 0x22
 801bfb4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d028      	beq.n	801c010 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfc2:	4a3e      	ldr	r2, [pc, #248]	@ (801c0bc <UART_Start_Receive_DMA+0x134>)
 801bfc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfca:	4a3d      	ldr	r2, [pc, #244]	@ (801c0c0 <UART_Start_Receive_DMA+0x138>)
 801bfcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfd2:	4a3c      	ldr	r2, [pc, #240]	@ (801c0c4 <UART_Start_Receive_DMA+0x13c>)
 801bfd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfda:	2200      	movs	r2, #0
 801bfdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	3324      	adds	r3, #36	@ 0x24
 801bfe8:	0019      	movs	r1, r3
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bfee:	001a      	movs	r2, r3
 801bff0:	1dbb      	adds	r3, r7, #6
 801bff2:	881b      	ldrh	r3, [r3, #0]
 801bff4:	f7f6 fdd0 	bl	8012b98 <HAL_DMA_Start_IT>
 801bff8:	1e03      	subs	r3, r0, #0
 801bffa:	d009      	beq.n	801c010 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	2284      	movs	r2, #132	@ 0x84
 801c000:	2110      	movs	r1, #16
 801c002:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	2280      	movs	r2, #128	@ 0x80
 801c008:	2120      	movs	r1, #32
 801c00a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801c00c:	2301      	movs	r3, #1
 801c00e:	e050      	b.n	801c0b2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	691b      	ldr	r3, [r3, #16]
 801c014:	2b00      	cmp	r3, #0
 801c016:	d019      	beq.n	801c04c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c018:	f3ef 8310 	mrs	r3, PRIMASK
 801c01c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c022:	2301      	movs	r3, #1
 801c024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c028:	f383 8810 	msr	PRIMASK, r3
}
 801c02c:	46c0      	nop			@ (mov r8, r8)
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	681a      	ldr	r2, [r3, #0]
 801c034:	68fb      	ldr	r3, [r7, #12]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	2180      	movs	r1, #128	@ 0x80
 801c03a:	0049      	lsls	r1, r1, #1
 801c03c:	430a      	orrs	r2, r1
 801c03e:	601a      	str	r2, [r3, #0]
 801c040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c042:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c046:	f383 8810 	msr	PRIMASK, r3
}
 801c04a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c04c:	f3ef 8310 	mrs	r3, PRIMASK
 801c050:	613b      	str	r3, [r7, #16]
  return(result);
 801c052:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c054:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c056:	2301      	movs	r3, #1
 801c058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c05a:	697b      	ldr	r3, [r7, #20]
 801c05c:	f383 8810 	msr	PRIMASK, r3
}
 801c060:	46c0      	nop			@ (mov r8, r8)
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	689a      	ldr	r2, [r3, #8]
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	2101      	movs	r1, #1
 801c06e:	430a      	orrs	r2, r1
 801c070:	609a      	str	r2, [r3, #8]
 801c072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c076:	69bb      	ldr	r3, [r7, #24]
 801c078:	f383 8810 	msr	PRIMASK, r3
}
 801c07c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c07e:	f3ef 8310 	mrs	r3, PRIMASK
 801c082:	61fb      	str	r3, [r7, #28]
  return(result);
 801c084:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c086:	637b      	str	r3, [r7, #52]	@ 0x34
 801c088:	2301      	movs	r3, #1
 801c08a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c08c:	6a3b      	ldr	r3, [r7, #32]
 801c08e:	f383 8810 	msr	PRIMASK, r3
}
 801c092:	46c0      	nop			@ (mov r8, r8)
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	689a      	ldr	r2, [r3, #8]
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	2140      	movs	r1, #64	@ 0x40
 801c0a0:	430a      	orrs	r2, r1
 801c0a2:	609a      	str	r2, [r3, #8]
 801c0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c0a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0aa:	f383 8810 	msr	PRIMASK, r3
}
 801c0ae:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801c0b0:	2300      	movs	r3, #0
}
 801c0b2:	0018      	movs	r0, r3
 801c0b4:	46bd      	mov	sp, r7
 801c0b6:	b010      	add	sp, #64	@ 0x40
 801c0b8:	bd80      	pop	{r7, pc}
 801c0ba:	46c0      	nop			@ (mov r8, r8)
 801c0bc:	0801c299 	.word	0x0801c299
 801c0c0:	0801c3cd 	.word	0x0801c3cd
 801c0c4:	0801c415 	.word	0x0801c415

0801c0c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b086      	sub	sp, #24
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0d0:	f3ef 8310 	mrs	r3, PRIMASK
 801c0d4:	60bb      	str	r3, [r7, #8]
  return(result);
 801c0d6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c0d8:	617b      	str	r3, [r7, #20]
 801c0da:	2301      	movs	r3, #1
 801c0dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	f383 8810 	msr	PRIMASK, r3
}
 801c0e4:	46c0      	nop			@ (mov r8, r8)
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	681a      	ldr	r2, [r3, #0]
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	21c0      	movs	r1, #192	@ 0xc0
 801c0f2:	438a      	bics	r2, r1
 801c0f4:	601a      	str	r2, [r3, #0]
 801c0f6:	697b      	ldr	r3, [r7, #20]
 801c0f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0fa:	693b      	ldr	r3, [r7, #16]
 801c0fc:	f383 8810 	msr	PRIMASK, r3
}
 801c100:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	2220      	movs	r2, #32
 801c106:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801c108:	46c0      	nop			@ (mov r8, r8)
 801c10a:	46bd      	mov	sp, r7
 801c10c:	b006      	add	sp, #24
 801c10e:	bd80      	pop	{r7, pc}

0801c110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b08e      	sub	sp, #56	@ 0x38
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c118:	f3ef 8310 	mrs	r3, PRIMASK
 801c11c:	617b      	str	r3, [r7, #20]
  return(result);
 801c11e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c120:	637b      	str	r3, [r7, #52]	@ 0x34
 801c122:	2301      	movs	r3, #1
 801c124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c126:	69bb      	ldr	r3, [r7, #24]
 801c128:	f383 8810 	msr	PRIMASK, r3
}
 801c12c:	46c0      	nop			@ (mov r8, r8)
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	681a      	ldr	r2, [r3, #0]
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	4926      	ldr	r1, [pc, #152]	@ (801c1d4 <UART_EndRxTransfer+0xc4>)
 801c13a:	400a      	ands	r2, r1
 801c13c:	601a      	str	r2, [r3, #0]
 801c13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c142:	69fb      	ldr	r3, [r7, #28]
 801c144:	f383 8810 	msr	PRIMASK, r3
}
 801c148:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c14a:	f3ef 8310 	mrs	r3, PRIMASK
 801c14e:	623b      	str	r3, [r7, #32]
  return(result);
 801c150:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c152:	633b      	str	r3, [r7, #48]	@ 0x30
 801c154:	2301      	movs	r3, #1
 801c156:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c15a:	f383 8810 	msr	PRIMASK, r3
}
 801c15e:	46c0      	nop			@ (mov r8, r8)
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	689a      	ldr	r2, [r3, #8]
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	2101      	movs	r1, #1
 801c16c:	438a      	bics	r2, r1
 801c16e:	609a      	str	r2, [r3, #8]
 801c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c172:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c176:	f383 8810 	msr	PRIMASK, r3
}
 801c17a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c180:	2b01      	cmp	r3, #1
 801c182:	d118      	bne.n	801c1b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c184:	f3ef 8310 	mrs	r3, PRIMASK
 801c188:	60bb      	str	r3, [r7, #8]
  return(result);
 801c18a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c18e:	2301      	movs	r3, #1
 801c190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	f383 8810 	msr	PRIMASK, r3
}
 801c198:	46c0      	nop			@ (mov r8, r8)
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	681a      	ldr	r2, [r3, #0]
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	2110      	movs	r1, #16
 801c1a6:	438a      	bics	r2, r1
 801c1a8:	601a      	str	r2, [r3, #0]
 801c1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1ae:	693b      	ldr	r3, [r7, #16]
 801c1b0:	f383 8810 	msr	PRIMASK, r3
}
 801c1b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	2280      	movs	r2, #128	@ 0x80
 801c1ba:	2120      	movs	r1, #32
 801c1bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	2200      	movs	r2, #0
 801c1c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c1ca:	46c0      	nop			@ (mov r8, r8)
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	b00e      	add	sp, #56	@ 0x38
 801c1d0:	bd80      	pop	{r7, pc}
 801c1d2:	46c0      	nop			@ (mov r8, r8)
 801c1d4:	fffffedf 	.word	0xfffffedf

0801c1d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801c1d8:	b580      	push	{r7, lr}
 801c1da:	b08c      	sub	sp, #48	@ 0x30
 801c1dc:	af00      	add	r7, sp, #0
 801c1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	2220      	movs	r2, #32
 801c1ee:	4013      	ands	r3, r2
 801c1f0:	d135      	bne.n	801c25e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801c1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1f4:	2252      	movs	r2, #82	@ 0x52
 801c1f6:	2100      	movs	r1, #0
 801c1f8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1fa:	f3ef 8310 	mrs	r3, PRIMASK
 801c1fe:	60fb      	str	r3, [r7, #12]
  return(result);
 801c200:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c202:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c204:	2301      	movs	r3, #1
 801c206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c208:	693b      	ldr	r3, [r7, #16]
 801c20a:	f383 8810 	msr	PRIMASK, r3
}
 801c20e:	46c0      	nop			@ (mov r8, r8)
 801c210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	689a      	ldr	r2, [r3, #8]
 801c216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	2180      	movs	r1, #128	@ 0x80
 801c21c:	438a      	bics	r2, r1
 801c21e:	609a      	str	r2, [r3, #8]
 801c220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c224:	697b      	ldr	r3, [r7, #20]
 801c226:	f383 8810 	msr	PRIMASK, r3
}
 801c22a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c22c:	f3ef 8310 	mrs	r3, PRIMASK
 801c230:	61bb      	str	r3, [r7, #24]
  return(result);
 801c232:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c234:	627b      	str	r3, [r7, #36]	@ 0x24
 801c236:	2301      	movs	r3, #1
 801c238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c23a:	69fb      	ldr	r3, [r7, #28]
 801c23c:	f383 8810 	msr	PRIMASK, r3
}
 801c240:	46c0      	nop			@ (mov r8, r8)
 801c242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	681a      	ldr	r2, [r3, #0]
 801c248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	2140      	movs	r1, #64	@ 0x40
 801c24e:	430a      	orrs	r2, r1
 801c250:	601a      	str	r2, [r3, #0]
 801c252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c256:	6a3b      	ldr	r3, [r7, #32]
 801c258:	f383 8810 	msr	PRIMASK, r3
}
 801c25c:	e006      	b.n	801c26c <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801c25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c260:	228c      	movs	r2, #140	@ 0x8c
 801c262:	589b      	ldr	r3, [r3, r2]
 801c264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c266:	0010      	movs	r0, r2
 801c268:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c26a:	46c0      	nop			@ (mov r8, r8)
 801c26c:	46c0      	nop			@ (mov r8, r8)
 801c26e:	46bd      	mov	sp, r7
 801c270:	b00c      	add	sp, #48	@ 0x30
 801c272:	bd80      	pop	{r7, pc}

0801c274 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b084      	sub	sp, #16
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c280:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	2288      	movs	r2, #136	@ 0x88
 801c286:	589b      	ldr	r3, [r3, r2]
 801c288:	68fa      	ldr	r2, [r7, #12]
 801c28a:	0010      	movs	r0, r2
 801c28c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c28e:	46c0      	nop			@ (mov r8, r8)
 801c290:	46bd      	mov	sp, r7
 801c292:	b004      	add	sp, #16
 801c294:	bd80      	pop	{r7, pc}
	...

0801c298 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b094      	sub	sp, #80	@ 0x50
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	681b      	ldr	r3, [r3, #0]
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	2220      	movs	r2, #32
 801c2ae:	4013      	ands	r3, r2
 801c2b0:	d16f      	bne.n	801c392 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801c2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2b4:	225a      	movs	r2, #90	@ 0x5a
 801c2b6:	2100      	movs	r1, #0
 801c2b8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c2be:	61bb      	str	r3, [r7, #24]
  return(result);
 801c2c0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c2c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c2c4:	2301      	movs	r3, #1
 801c2c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2c8:	69fb      	ldr	r3, [r7, #28]
 801c2ca:	f383 8810 	msr	PRIMASK, r3
}
 801c2ce:	46c0      	nop			@ (mov r8, r8)
 801c2d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	681a      	ldr	r2, [r3, #0]
 801c2d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	493b      	ldr	r1, [pc, #236]	@ (801c3c8 <UART_DMAReceiveCplt+0x130>)
 801c2dc:	400a      	ands	r2, r1
 801c2de:	601a      	str	r2, [r3, #0]
 801c2e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c2e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2e4:	6a3b      	ldr	r3, [r7, #32]
 801c2e6:	f383 8810 	msr	PRIMASK, r3
}
 801c2ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ec:	f3ef 8310 	mrs	r3, PRIMASK
 801c2f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c2f4:	647b      	str	r3, [r7, #68]	@ 0x44
 801c2f6:	2301      	movs	r3, #1
 801c2f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2fc:	f383 8810 	msr	PRIMASK, r3
}
 801c300:	46c0      	nop			@ (mov r8, r8)
 801c302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	689a      	ldr	r2, [r3, #8]
 801c308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	2101      	movs	r1, #1
 801c30e:	438a      	bics	r2, r1
 801c310:	609a      	str	r2, [r3, #8]
 801c312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c318:	f383 8810 	msr	PRIMASK, r3
}
 801c31c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c31e:	f3ef 8310 	mrs	r3, PRIMASK
 801c322:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c326:	643b      	str	r3, [r7, #64]	@ 0x40
 801c328:	2301      	movs	r3, #1
 801c32a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c32e:	f383 8810 	msr	PRIMASK, r3
}
 801c332:	46c0      	nop			@ (mov r8, r8)
 801c334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	689a      	ldr	r2, [r3, #8]
 801c33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	2140      	movs	r1, #64	@ 0x40
 801c340:	438a      	bics	r2, r1
 801c342:	609a      	str	r2, [r3, #8]
 801c344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c346:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c34a:	f383 8810 	msr	PRIMASK, r3
}
 801c34e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c352:	2280      	movs	r2, #128	@ 0x80
 801c354:	2120      	movs	r1, #32
 801c356:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c35a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c35c:	2b01      	cmp	r3, #1
 801c35e:	d118      	bne.n	801c392 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c360:	f3ef 8310 	mrs	r3, PRIMASK
 801c364:	60fb      	str	r3, [r7, #12]
  return(result);
 801c366:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c36a:	2301      	movs	r3, #1
 801c36c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c36e:	693b      	ldr	r3, [r7, #16]
 801c370:	f383 8810 	msr	PRIMASK, r3
}
 801c374:	46c0      	nop			@ (mov r8, r8)
 801c376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	681a      	ldr	r2, [r3, #0]
 801c37c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	2110      	movs	r1, #16
 801c382:	438a      	bics	r2, r1
 801c384:	601a      	str	r2, [r3, #0]
 801c386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c38a:	697b      	ldr	r3, [r7, #20]
 801c38c:	f383 8810 	msr	PRIMASK, r3
}
 801c390:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c394:	2200      	movs	r2, #0
 801c396:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c39a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c39c:	2b01      	cmp	r3, #1
 801c39e:	d109      	bne.n	801c3b4 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801c3a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c3a2:	22ac      	movs	r2, #172	@ 0xac
 801c3a4:	589b      	ldr	r3, [r3, r2]
 801c3a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c3a8:	2158      	movs	r1, #88	@ 0x58
 801c3aa:	5a51      	ldrh	r1, [r2, r1]
 801c3ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c3ae:	0010      	movs	r0, r2
 801c3b0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c3b2:	e005      	b.n	801c3c0 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801c3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c3b6:	2294      	movs	r2, #148	@ 0x94
 801c3b8:	589b      	ldr	r3, [r3, r2]
 801c3ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c3bc:	0010      	movs	r0, r2
 801c3be:	4798      	blx	r3
}
 801c3c0:	46c0      	nop			@ (mov r8, r8)
 801c3c2:	46bd      	mov	sp, r7
 801c3c4:	b014      	add	sp, #80	@ 0x50
 801c3c6:	bd80      	pop	{r7, pc}
 801c3c8:	fffffeff 	.word	0xfffffeff

0801c3cc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b084      	sub	sp, #16
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c3d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	2201      	movs	r2, #1
 801c3de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c3e4:	2b01      	cmp	r3, #1
 801c3e6:	d10b      	bne.n	801c400 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	22ac      	movs	r2, #172	@ 0xac
 801c3ec:	589b      	ldr	r3, [r3, r2]
 801c3ee:	68fa      	ldr	r2, [r7, #12]
 801c3f0:	2158      	movs	r1, #88	@ 0x58
 801c3f2:	5a52      	ldrh	r2, [r2, r1]
 801c3f4:	0852      	lsrs	r2, r2, #1
 801c3f6:	b291      	uxth	r1, r2
 801c3f8:	68fa      	ldr	r2, [r7, #12]
 801c3fa:	0010      	movs	r0, r2
 801c3fc:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c3fe:	e005      	b.n	801c40c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801c400:	68fb      	ldr	r3, [r7, #12]
 801c402:	2290      	movs	r2, #144	@ 0x90
 801c404:	589b      	ldr	r3, [r3, r2]
 801c406:	68fa      	ldr	r2, [r7, #12]
 801c408:	0010      	movs	r0, r2
 801c40a:	4798      	blx	r3
}
 801c40c:	46c0      	nop			@ (mov r8, r8)
 801c40e:	46bd      	mov	sp, r7
 801c410:	b004      	add	sp, #16
 801c412:	bd80      	pop	{r7, pc}

0801c414 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c414:	b580      	push	{r7, lr}
 801c416:	b086      	sub	sp, #24
 801c418:	af00      	add	r7, sp, #0
 801c41a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c420:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801c422:	697b      	ldr	r3, [r7, #20]
 801c424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c426:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801c428:	697b      	ldr	r3, [r7, #20]
 801c42a:	2280      	movs	r2, #128	@ 0x80
 801c42c:	589b      	ldr	r3, [r3, r2]
 801c42e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	689b      	ldr	r3, [r3, #8]
 801c436:	2280      	movs	r2, #128	@ 0x80
 801c438:	4013      	ands	r3, r2
 801c43a:	2b80      	cmp	r3, #128	@ 0x80
 801c43c:	d10a      	bne.n	801c454 <UART_DMAError+0x40>
 801c43e:	693b      	ldr	r3, [r7, #16]
 801c440:	2b21      	cmp	r3, #33	@ 0x21
 801c442:	d107      	bne.n	801c454 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801c444:	697b      	ldr	r3, [r7, #20]
 801c446:	2252      	movs	r2, #82	@ 0x52
 801c448:	2100      	movs	r1, #0
 801c44a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801c44c:	697b      	ldr	r3, [r7, #20]
 801c44e:	0018      	movs	r0, r3
 801c450:	f7ff fe3a 	bl	801c0c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801c454:	697b      	ldr	r3, [r7, #20]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	689b      	ldr	r3, [r3, #8]
 801c45a:	2240      	movs	r2, #64	@ 0x40
 801c45c:	4013      	ands	r3, r2
 801c45e:	2b40      	cmp	r3, #64	@ 0x40
 801c460:	d10a      	bne.n	801c478 <UART_DMAError+0x64>
 801c462:	68fb      	ldr	r3, [r7, #12]
 801c464:	2b22      	cmp	r3, #34	@ 0x22
 801c466:	d107      	bne.n	801c478 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801c468:	697b      	ldr	r3, [r7, #20]
 801c46a:	225a      	movs	r2, #90	@ 0x5a
 801c46c:	2100      	movs	r1, #0
 801c46e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801c470:	697b      	ldr	r3, [r7, #20]
 801c472:	0018      	movs	r0, r3
 801c474:	f7ff fe4c 	bl	801c110 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c478:	697b      	ldr	r3, [r7, #20]
 801c47a:	2284      	movs	r2, #132	@ 0x84
 801c47c:	589b      	ldr	r3, [r3, r2]
 801c47e:	2210      	movs	r2, #16
 801c480:	431a      	orrs	r2, r3
 801c482:	697b      	ldr	r3, [r7, #20]
 801c484:	2184      	movs	r1, #132	@ 0x84
 801c486:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c488:	697b      	ldr	r3, [r7, #20]
 801c48a:	2298      	movs	r2, #152	@ 0x98
 801c48c:	589b      	ldr	r3, [r3, r2]
 801c48e:	697a      	ldr	r2, [r7, #20]
 801c490:	0010      	movs	r0, r2
 801c492:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c494:	46c0      	nop			@ (mov r8, r8)
 801c496:	46bd      	mov	sp, r7
 801c498:	b006      	add	sp, #24
 801c49a:	bd80      	pop	{r7, pc}

0801c49c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c49c:	b580      	push	{r7, lr}
 801c49e:	b084      	sub	sp, #16
 801c4a0:	af00      	add	r7, sp, #0
 801c4a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c4a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	225a      	movs	r2, #90	@ 0x5a
 801c4ae:	2100      	movs	r1, #0
 801c4b0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	2252      	movs	r2, #82	@ 0x52
 801c4b6:	2100      	movs	r1, #0
 801c4b8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	2298      	movs	r2, #152	@ 0x98
 801c4be:	589b      	ldr	r3, [r3, r2]
 801c4c0:	68fa      	ldr	r2, [r7, #12]
 801c4c2:	0010      	movs	r0, r2
 801c4c4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c4c6:	46c0      	nop			@ (mov r8, r8)
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	b004      	add	sp, #16
 801c4cc:	bd80      	pop	{r7, pc}

0801c4ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c4ce:	b580      	push	{r7, lr}
 801c4d0:	b086      	sub	sp, #24
 801c4d2:	af00      	add	r7, sp, #0
 801c4d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4d6:	f3ef 8310 	mrs	r3, PRIMASK
 801c4da:	60bb      	str	r3, [r7, #8]
  return(result);
 801c4dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c4de:	617b      	str	r3, [r7, #20]
 801c4e0:	2301      	movs	r3, #1
 801c4e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ea:	46c0      	nop			@ (mov r8, r8)
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	681a      	ldr	r2, [r3, #0]
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	2140      	movs	r1, #64	@ 0x40
 801c4f8:	438a      	bics	r2, r1
 801c4fa:	601a      	str	r2, [r3, #0]
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c500:	693b      	ldr	r3, [r7, #16]
 801c502:	f383 8810 	msr	PRIMASK, r3
}
 801c506:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	2220      	movs	r2, #32
 801c50c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	2200      	movs	r2, #0
 801c512:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	228c      	movs	r2, #140	@ 0x8c
 801c518:	589b      	ldr	r3, [r3, r2]
 801c51a:	687a      	ldr	r2, [r7, #4]
 801c51c:	0010      	movs	r0, r2
 801c51e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c520:	46c0      	nop			@ (mov r8, r8)
 801c522:	46bd      	mov	sp, r7
 801c524:	b006      	add	sp, #24
 801c526:	bd80      	pop	{r7, pc}

0801c528 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c528:	b580      	push	{r7, lr}
 801c52a:	b094      	sub	sp, #80	@ 0x50
 801c52c:	af00      	add	r7, sp, #0
 801c52e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c530:	204e      	movs	r0, #78	@ 0x4e
 801c532:	183b      	adds	r3, r7, r0
 801c534:	687a      	ldr	r2, [r7, #4]
 801c536:	215c      	movs	r1, #92	@ 0x5c
 801c538:	5a52      	ldrh	r2, [r2, r1]
 801c53a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	2280      	movs	r2, #128	@ 0x80
 801c540:	589b      	ldr	r3, [r3, r2]
 801c542:	2b22      	cmp	r3, #34	@ 0x22
 801c544:	d000      	beq.n	801c548 <UART_RxISR_8BIT+0x20>
 801c546:	e0c2      	b.n	801c6ce <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c54e:	214c      	movs	r1, #76	@ 0x4c
 801c550:	187b      	adds	r3, r7, r1
 801c552:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c554:	187b      	adds	r3, r7, r1
 801c556:	881b      	ldrh	r3, [r3, #0]
 801c558:	b2da      	uxtb	r2, r3
 801c55a:	183b      	adds	r3, r7, r0
 801c55c:	881b      	ldrh	r3, [r3, #0]
 801c55e:	b2d9      	uxtb	r1, r3
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c564:	400a      	ands	r2, r1
 801c566:	b2d2      	uxtb	r2, r2
 801c568:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c56e:	1c5a      	adds	r2, r3, #1
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	225a      	movs	r2, #90	@ 0x5a
 801c578:	5a9b      	ldrh	r3, [r3, r2]
 801c57a:	b29b      	uxth	r3, r3
 801c57c:	3b01      	subs	r3, #1
 801c57e:	b299      	uxth	r1, r3
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	225a      	movs	r2, #90	@ 0x5a
 801c584:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	225a      	movs	r2, #90	@ 0x5a
 801c58a:	5a9b      	ldrh	r3, [r3, r2]
 801c58c:	b29b      	uxth	r3, r3
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d000      	beq.n	801c594 <UART_RxISR_8BIT+0x6c>
 801c592:	e0a4      	b.n	801c6de <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c594:	f3ef 8310 	mrs	r3, PRIMASK
 801c598:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c59c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c59e:	2301      	movs	r3, #1
 801c5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5a4:	f383 8810 	msr	PRIMASK, r3
}
 801c5a8:	46c0      	nop			@ (mov r8, r8)
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	681a      	ldr	r2, [r3, #0]
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	494c      	ldr	r1, [pc, #304]	@ (801c6e8 <UART_RxISR_8BIT+0x1c0>)
 801c5b6:	400a      	ands	r2, r1
 801c5b8:	601a      	str	r2, [r3, #0]
 801c5ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5c0:	f383 8810 	msr	PRIMASK, r3
}
 801c5c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5c6:	f3ef 8310 	mrs	r3, PRIMASK
 801c5ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5ce:	647b      	str	r3, [r7, #68]	@ 0x44
 801c5d0:	2301      	movs	r3, #1
 801c5d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5d6:	f383 8810 	msr	PRIMASK, r3
}
 801c5da:	46c0      	nop			@ (mov r8, r8)
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	689a      	ldr	r2, [r3, #8]
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	2101      	movs	r1, #1
 801c5e8:	438a      	bics	r2, r1
 801c5ea:	609a      	str	r2, [r3, #8]
 801c5ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c5ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5f2:	f383 8810 	msr	PRIMASK, r3
}
 801c5f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	2280      	movs	r2, #128	@ 0x80
 801c5fc:	2120      	movs	r1, #32
 801c5fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	2200      	movs	r2, #0
 801c604:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	2200      	movs	r2, #0
 801c60a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	4a36      	ldr	r2, [pc, #216]	@ (801c6ec <UART_RxISR_8BIT+0x1c4>)
 801c612:	4293      	cmp	r3, r2
 801c614:	d01f      	beq.n	801c656 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	681b      	ldr	r3, [r3, #0]
 801c61a:	685a      	ldr	r2, [r3, #4]
 801c61c:	2380      	movs	r3, #128	@ 0x80
 801c61e:	041b      	lsls	r3, r3, #16
 801c620:	4013      	ands	r3, r2
 801c622:	d018      	beq.n	801c656 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c624:	f3ef 8310 	mrs	r3, PRIMASK
 801c628:	61bb      	str	r3, [r7, #24]
  return(result);
 801c62a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c62c:	643b      	str	r3, [r7, #64]	@ 0x40
 801c62e:	2301      	movs	r3, #1
 801c630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c632:	69fb      	ldr	r3, [r7, #28]
 801c634:	f383 8810 	msr	PRIMASK, r3
}
 801c638:	46c0      	nop			@ (mov r8, r8)
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	681a      	ldr	r2, [r3, #0]
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	492a      	ldr	r1, [pc, #168]	@ (801c6f0 <UART_RxISR_8BIT+0x1c8>)
 801c646:	400a      	ands	r2, r1
 801c648:	601a      	str	r2, [r3, #0]
 801c64a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c64c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c64e:	6a3b      	ldr	r3, [r7, #32]
 801c650:	f383 8810 	msr	PRIMASK, r3
}
 801c654:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c65a:	2b01      	cmp	r3, #1
 801c65c:	d130      	bne.n	801c6c0 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	2200      	movs	r2, #0
 801c662:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c664:	f3ef 8310 	mrs	r3, PRIMASK
 801c668:	60fb      	str	r3, [r7, #12]
  return(result);
 801c66a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c66e:	2301      	movs	r3, #1
 801c670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c672:	693b      	ldr	r3, [r7, #16]
 801c674:	f383 8810 	msr	PRIMASK, r3
}
 801c678:	46c0      	nop			@ (mov r8, r8)
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	681a      	ldr	r2, [r3, #0]
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	2110      	movs	r1, #16
 801c686:	438a      	bics	r2, r1
 801c688:	601a      	str	r2, [r3, #0]
 801c68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c68c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c68e:	697b      	ldr	r3, [r7, #20]
 801c690:	f383 8810 	msr	PRIMASK, r3
}
 801c694:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	69db      	ldr	r3, [r3, #28]
 801c69c:	2210      	movs	r2, #16
 801c69e:	4013      	ands	r3, r2
 801c6a0:	2b10      	cmp	r3, #16
 801c6a2:	d103      	bne.n	801c6ac <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	2210      	movs	r2, #16
 801c6aa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	22ac      	movs	r2, #172	@ 0xac
 801c6b0:	589b      	ldr	r3, [r3, r2]
 801c6b2:	687a      	ldr	r2, [r7, #4]
 801c6b4:	2158      	movs	r1, #88	@ 0x58
 801c6b6:	5a51      	ldrh	r1, [r2, r1]
 801c6b8:	687a      	ldr	r2, [r7, #4]
 801c6ba:	0010      	movs	r0, r2
 801c6bc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c6be:	e00e      	b.n	801c6de <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	2294      	movs	r2, #148	@ 0x94
 801c6c4:	589b      	ldr	r3, [r3, r2]
 801c6c6:	687a      	ldr	r2, [r7, #4]
 801c6c8:	0010      	movs	r0, r2
 801c6ca:	4798      	blx	r3
}
 801c6cc:	e007      	b.n	801c6de <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	699a      	ldr	r2, [r3, #24]
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	2108      	movs	r1, #8
 801c6da:	430a      	orrs	r2, r1
 801c6dc:	619a      	str	r2, [r3, #24]
}
 801c6de:	46c0      	nop			@ (mov r8, r8)
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	b014      	add	sp, #80	@ 0x50
 801c6e4:	bd80      	pop	{r7, pc}
 801c6e6:	46c0      	nop			@ (mov r8, r8)
 801c6e8:	fffffedf 	.word	0xfffffedf
 801c6ec:	40004800 	.word	0x40004800
 801c6f0:	fbffffff 	.word	0xfbffffff

0801c6f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b094      	sub	sp, #80	@ 0x50
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c6fc:	204e      	movs	r0, #78	@ 0x4e
 801c6fe:	183b      	adds	r3, r7, r0
 801c700:	687a      	ldr	r2, [r7, #4]
 801c702:	215c      	movs	r1, #92	@ 0x5c
 801c704:	5a52      	ldrh	r2, [r2, r1]
 801c706:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	2280      	movs	r2, #128	@ 0x80
 801c70c:	589b      	ldr	r3, [r3, r2]
 801c70e:	2b22      	cmp	r3, #34	@ 0x22
 801c710:	d000      	beq.n	801c714 <UART_RxISR_16BIT+0x20>
 801c712:	e0c2      	b.n	801c89a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c71a:	214c      	movs	r1, #76	@ 0x4c
 801c71c:	187b      	adds	r3, r7, r1
 801c71e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c724:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801c726:	187b      	adds	r3, r7, r1
 801c728:	183a      	adds	r2, r7, r0
 801c72a:	881b      	ldrh	r3, [r3, #0]
 801c72c:	8812      	ldrh	r2, [r2, #0]
 801c72e:	4013      	ands	r3, r2
 801c730:	b29a      	uxth	r2, r3
 801c732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c734:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c73a:	1c9a      	adds	r2, r3, #2
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	225a      	movs	r2, #90	@ 0x5a
 801c744:	5a9b      	ldrh	r3, [r3, r2]
 801c746:	b29b      	uxth	r3, r3
 801c748:	3b01      	subs	r3, #1
 801c74a:	b299      	uxth	r1, r3
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	225a      	movs	r2, #90	@ 0x5a
 801c750:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	225a      	movs	r2, #90	@ 0x5a
 801c756:	5a9b      	ldrh	r3, [r3, r2]
 801c758:	b29b      	uxth	r3, r3
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d000      	beq.n	801c760 <UART_RxISR_16BIT+0x6c>
 801c75e:	e0a4      	b.n	801c8aa <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c760:	f3ef 8310 	mrs	r3, PRIMASK
 801c764:	623b      	str	r3, [r7, #32]
  return(result);
 801c766:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c768:	647b      	str	r3, [r7, #68]	@ 0x44
 801c76a:	2301      	movs	r3, #1
 801c76c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c770:	f383 8810 	msr	PRIMASK, r3
}
 801c774:	46c0      	nop			@ (mov r8, r8)
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	681a      	ldr	r2, [r3, #0]
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	494c      	ldr	r1, [pc, #304]	@ (801c8b4 <UART_RxISR_16BIT+0x1c0>)
 801c782:	400a      	ands	r2, r1
 801c784:	601a      	str	r2, [r3, #0]
 801c786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c788:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c78c:	f383 8810 	msr	PRIMASK, r3
}
 801c790:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c792:	f3ef 8310 	mrs	r3, PRIMASK
 801c796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c79a:	643b      	str	r3, [r7, #64]	@ 0x40
 801c79c:	2301      	movs	r3, #1
 801c79e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7a2:	f383 8810 	msr	PRIMASK, r3
}
 801c7a6:	46c0      	nop			@ (mov r8, r8)
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	689a      	ldr	r2, [r3, #8]
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	2101      	movs	r1, #1
 801c7b4:	438a      	bics	r2, r1
 801c7b6:	609a      	str	r2, [r3, #8]
 801c7b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c7be:	f383 8810 	msr	PRIMASK, r3
}
 801c7c2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	2280      	movs	r2, #128	@ 0x80
 801c7c8:	2120      	movs	r1, #32
 801c7ca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	4a36      	ldr	r2, [pc, #216]	@ (801c8b8 <UART_RxISR_16BIT+0x1c4>)
 801c7de:	4293      	cmp	r3, r2
 801c7e0:	d01f      	beq.n	801c822 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	685a      	ldr	r2, [r3, #4]
 801c7e8:	2380      	movs	r3, #128	@ 0x80
 801c7ea:	041b      	lsls	r3, r3, #16
 801c7ec:	4013      	ands	r3, r2
 801c7ee:	d018      	beq.n	801c822 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7f0:	f3ef 8310 	mrs	r3, PRIMASK
 801c7f4:	617b      	str	r3, [r7, #20]
  return(result);
 801c7f6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c7fa:	2301      	movs	r3, #1
 801c7fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7fe:	69bb      	ldr	r3, [r7, #24]
 801c800:	f383 8810 	msr	PRIMASK, r3
}
 801c804:	46c0      	nop			@ (mov r8, r8)
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	681a      	ldr	r2, [r3, #0]
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	492a      	ldr	r1, [pc, #168]	@ (801c8bc <UART_RxISR_16BIT+0x1c8>)
 801c812:	400a      	ands	r2, r1
 801c814:	601a      	str	r2, [r3, #0]
 801c816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c81a:	69fb      	ldr	r3, [r7, #28]
 801c81c:	f383 8810 	msr	PRIMASK, r3
}
 801c820:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c826:	2b01      	cmp	r3, #1
 801c828:	d130      	bne.n	801c88c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	2200      	movs	r2, #0
 801c82e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c830:	f3ef 8310 	mrs	r3, PRIMASK
 801c834:	60bb      	str	r3, [r7, #8]
  return(result);
 801c836:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c838:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c83a:	2301      	movs	r3, #1
 801c83c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	f383 8810 	msr	PRIMASK, r3
}
 801c844:	46c0      	nop			@ (mov r8, r8)
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	681a      	ldr	r2, [r3, #0]
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	2110      	movs	r1, #16
 801c852:	438a      	bics	r2, r1
 801c854:	601a      	str	r2, [r3, #0]
 801c856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c858:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c85a:	693b      	ldr	r3, [r7, #16]
 801c85c:	f383 8810 	msr	PRIMASK, r3
}
 801c860:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	69db      	ldr	r3, [r3, #28]
 801c868:	2210      	movs	r2, #16
 801c86a:	4013      	ands	r3, r2
 801c86c:	2b10      	cmp	r3, #16
 801c86e:	d103      	bne.n	801c878 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	2210      	movs	r2, #16
 801c876:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	22ac      	movs	r2, #172	@ 0xac
 801c87c:	589b      	ldr	r3, [r3, r2]
 801c87e:	687a      	ldr	r2, [r7, #4]
 801c880:	2158      	movs	r1, #88	@ 0x58
 801c882:	5a51      	ldrh	r1, [r2, r1]
 801c884:	687a      	ldr	r2, [r7, #4]
 801c886:	0010      	movs	r0, r2
 801c888:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c88a:	e00e      	b.n	801c8aa <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	2294      	movs	r2, #148	@ 0x94
 801c890:	589b      	ldr	r3, [r3, r2]
 801c892:	687a      	ldr	r2, [r7, #4]
 801c894:	0010      	movs	r0, r2
 801c896:	4798      	blx	r3
}
 801c898:	e007      	b.n	801c8aa <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	699a      	ldr	r2, [r3, #24]
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	2108      	movs	r1, #8
 801c8a6:	430a      	orrs	r2, r1
 801c8a8:	619a      	str	r2, [r3, #24]
}
 801c8aa:	46c0      	nop			@ (mov r8, r8)
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	b014      	add	sp, #80	@ 0x50
 801c8b0:	bd80      	pop	{r7, pc}
 801c8b2:	46c0      	nop			@ (mov r8, r8)
 801c8b4:	fffffedf 	.word	0xfffffedf
 801c8b8:	40004800 	.word	0x40004800
 801c8bc:	fbffffff 	.word	0xfbffffff

0801c8c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b082      	sub	sp, #8
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c8c8:	46c0      	nop			@ (mov r8, r8)
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	b002      	add	sp, #8
 801c8ce:	bd80      	pop	{r7, pc}

0801c8d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801c8d0:	b580      	push	{r7, lr}
 801c8d2:	b084      	sub	sp, #16
 801c8d4:	af00      	add	r7, sp, #0
 801c8d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	2244      	movs	r2, #68	@ 0x44
 801c8dc:	2100      	movs	r1, #0
 801c8de:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c8e0:	4b05      	ldr	r3, [pc, #20]	@ (801c8f8 <USB_EnableGlobalInt+0x28>)
 801c8e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	b299      	uxth	r1, r3
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	2240      	movs	r2, #64	@ 0x40
 801c8ec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c8ee:	2300      	movs	r3, #0
}
 801c8f0:	0018      	movs	r0, r3
 801c8f2:	46bd      	mov	sp, r7
 801c8f4:	b004      	add	sp, #16
 801c8f6:	bd80      	pop	{r7, pc}
 801c8f8:	0000bf80 	.word	0x0000bf80

0801c8fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b084      	sub	sp, #16
 801c900:	af00      	add	r7, sp, #0
 801c902:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c904:	4b09      	ldr	r3, [pc, #36]	@ (801c92c <USB_DisableGlobalInt+0x30>)
 801c906:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	2240      	movs	r2, #64	@ 0x40
 801c90c:	5a9b      	ldrh	r3, [r3, r2]
 801c90e:	b29b      	uxth	r3, r3
 801c910:	68fa      	ldr	r2, [r7, #12]
 801c912:	b292      	uxth	r2, r2
 801c914:	43d2      	mvns	r2, r2
 801c916:	b292      	uxth	r2, r2
 801c918:	4013      	ands	r3, r2
 801c91a:	b299      	uxth	r1, r3
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2240      	movs	r2, #64	@ 0x40
 801c920:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c922:	2300      	movs	r3, #0
}
 801c924:	0018      	movs	r0, r3
 801c926:	46bd      	mov	sp, r7
 801c928:	b004      	add	sp, #16
 801c92a:	bd80      	pop	{r7, pc}
 801c92c:	0000bf80 	.word	0x0000bf80

0801c930 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801c930:	b084      	sub	sp, #16
 801c932:	b590      	push	{r4, r7, lr}
 801c934:	b083      	sub	sp, #12
 801c936:	af00      	add	r7, sp, #0
 801c938:	6078      	str	r0, [r7, #4]
 801c93a:	2004      	movs	r0, #4
 801c93c:	2410      	movs	r4, #16
 801c93e:	1900      	adds	r0, r0, r4
 801c940:	2408      	movs	r4, #8
 801c942:	46a4      	mov	ip, r4
 801c944:	44bc      	add	ip, r7
 801c946:	4460      	add	r0, ip
 801c948:	6001      	str	r1, [r0, #0]
 801c94a:	6042      	str	r2, [r0, #4]
 801c94c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	2240      	movs	r2, #64	@ 0x40
 801c952:	2101      	movs	r1, #1
 801c954:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	2240      	movs	r2, #64	@ 0x40
 801c95a:	2100      	movs	r1, #0
 801c95c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	2244      	movs	r2, #68	@ 0x44
 801c962:	2100      	movs	r1, #0
 801c964:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	2250      	movs	r2, #80	@ 0x50
 801c96a:	2100      	movs	r1, #0
 801c96c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c96e:	2300      	movs	r3, #0
}
 801c970:	0018      	movs	r0, r3
 801c972:	46bd      	mov	sp, r7
 801c974:	b003      	add	sp, #12
 801c976:	bc90      	pop	{r4, r7}
 801c978:	bc08      	pop	{r3}
 801c97a:	b004      	add	sp, #16
 801c97c:	4718      	bx	r3
	...

0801c980 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b09c      	sub	sp, #112	@ 0x70
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
 801c988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801c98a:	236f      	movs	r3, #111	@ 0x6f
 801c98c:	18fb      	adds	r3, r7, r3
 801c98e:	2200      	movs	r2, #0
 801c990:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801c992:	687a      	ldr	r2, [r7, #4]
 801c994:	683b      	ldr	r3, [r7, #0]
 801c996:	781b      	ldrb	r3, [r3, #0]
 801c998:	009b      	lsls	r3, r3, #2
 801c99a:	18d3      	adds	r3, r2, r3
 801c99c:	881b      	ldrh	r3, [r3, #0]
 801c99e:	b29a      	uxth	r2, r3
 801c9a0:	236c      	movs	r3, #108	@ 0x6c
 801c9a2:	18fb      	adds	r3, r7, r3
 801c9a4:	49a3      	ldr	r1, [pc, #652]	@ (801cc34 <USB_ActivateEndpoint+0x2b4>)
 801c9a6:	400a      	ands	r2, r1
 801c9a8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801c9aa:	683b      	ldr	r3, [r7, #0]
 801c9ac:	78db      	ldrb	r3, [r3, #3]
 801c9ae:	2b03      	cmp	r3, #3
 801c9b0:	d017      	beq.n	801c9e2 <USB_ActivateEndpoint+0x62>
 801c9b2:	dc28      	bgt.n	801ca06 <USB_ActivateEndpoint+0x86>
 801c9b4:	2b02      	cmp	r3, #2
 801c9b6:	d00e      	beq.n	801c9d6 <USB_ActivateEndpoint+0x56>
 801c9b8:	dc25      	bgt.n	801ca06 <USB_ActivateEndpoint+0x86>
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d002      	beq.n	801c9c4 <USB_ActivateEndpoint+0x44>
 801c9be:	2b01      	cmp	r3, #1
 801c9c0:	d018      	beq.n	801c9f4 <USB_ActivateEndpoint+0x74>
 801c9c2:	e020      	b.n	801ca06 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801c9c4:	226c      	movs	r2, #108	@ 0x6c
 801c9c6:	18bb      	adds	r3, r7, r2
 801c9c8:	18ba      	adds	r2, r7, r2
 801c9ca:	8812      	ldrh	r2, [r2, #0]
 801c9cc:	2180      	movs	r1, #128	@ 0x80
 801c9ce:	0089      	lsls	r1, r1, #2
 801c9d0:	430a      	orrs	r2, r1
 801c9d2:	801a      	strh	r2, [r3, #0]
      break;
 801c9d4:	e01c      	b.n	801ca10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801c9d6:	226c      	movs	r2, #108	@ 0x6c
 801c9d8:	18bb      	adds	r3, r7, r2
 801c9da:	18ba      	adds	r2, r7, r2
 801c9dc:	8812      	ldrh	r2, [r2, #0]
 801c9de:	801a      	strh	r2, [r3, #0]
      break;
 801c9e0:	e016      	b.n	801ca10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801c9e2:	226c      	movs	r2, #108	@ 0x6c
 801c9e4:	18bb      	adds	r3, r7, r2
 801c9e6:	18ba      	adds	r2, r7, r2
 801c9e8:	8812      	ldrh	r2, [r2, #0]
 801c9ea:	21c0      	movs	r1, #192	@ 0xc0
 801c9ec:	00c9      	lsls	r1, r1, #3
 801c9ee:	430a      	orrs	r2, r1
 801c9f0:	801a      	strh	r2, [r3, #0]
      break;
 801c9f2:	e00d      	b.n	801ca10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801c9f4:	226c      	movs	r2, #108	@ 0x6c
 801c9f6:	18bb      	adds	r3, r7, r2
 801c9f8:	18ba      	adds	r2, r7, r2
 801c9fa:	8812      	ldrh	r2, [r2, #0]
 801c9fc:	2180      	movs	r1, #128	@ 0x80
 801c9fe:	00c9      	lsls	r1, r1, #3
 801ca00:	430a      	orrs	r2, r1
 801ca02:	801a      	strh	r2, [r3, #0]
      break;
 801ca04:	e004      	b.n	801ca10 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801ca06:	236f      	movs	r3, #111	@ 0x6f
 801ca08:	18fb      	adds	r3, r7, r3
 801ca0a:	2201      	movs	r2, #1
 801ca0c:	701a      	strb	r2, [r3, #0]
      break;
 801ca0e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801ca10:	687a      	ldr	r2, [r7, #4]
 801ca12:	683b      	ldr	r3, [r7, #0]
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	009b      	lsls	r3, r3, #2
 801ca18:	18d3      	adds	r3, r2, r3
 801ca1a:	226c      	movs	r2, #108	@ 0x6c
 801ca1c:	18ba      	adds	r2, r7, r2
 801ca1e:	8812      	ldrh	r2, [r2, #0]
 801ca20:	4985      	ldr	r1, [pc, #532]	@ (801cc38 <USB_ActivateEndpoint+0x2b8>)
 801ca22:	430a      	orrs	r2, r1
 801ca24:	b292      	uxth	r2, r2
 801ca26:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801ca28:	687a      	ldr	r2, [r7, #4]
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	781b      	ldrb	r3, [r3, #0]
 801ca2e:	009b      	lsls	r3, r3, #2
 801ca30:	18d3      	adds	r3, r2, r3
 801ca32:	881b      	ldrh	r3, [r3, #0]
 801ca34:	b29b      	uxth	r3, r3
 801ca36:	b21b      	sxth	r3, r3
 801ca38:	4a80      	ldr	r2, [pc, #512]	@ (801cc3c <USB_ActivateEndpoint+0x2bc>)
 801ca3a:	4013      	ands	r3, r2
 801ca3c:	b21a      	sxth	r2, r3
 801ca3e:	683b      	ldr	r3, [r7, #0]
 801ca40:	781b      	ldrb	r3, [r3, #0]
 801ca42:	b21b      	sxth	r3, r3
 801ca44:	4313      	orrs	r3, r2
 801ca46:	b21a      	sxth	r2, r3
 801ca48:	2166      	movs	r1, #102	@ 0x66
 801ca4a:	187b      	adds	r3, r7, r1
 801ca4c:	801a      	strh	r2, [r3, #0]
 801ca4e:	687a      	ldr	r2, [r7, #4]
 801ca50:	683b      	ldr	r3, [r7, #0]
 801ca52:	781b      	ldrb	r3, [r3, #0]
 801ca54:	009b      	lsls	r3, r3, #2
 801ca56:	18d3      	adds	r3, r2, r3
 801ca58:	187a      	adds	r2, r7, r1
 801ca5a:	8812      	ldrh	r2, [r2, #0]
 801ca5c:	4976      	ldr	r1, [pc, #472]	@ (801cc38 <USB_ActivateEndpoint+0x2b8>)
 801ca5e:	430a      	orrs	r2, r1
 801ca60:	b292      	uxth	r2, r2
 801ca62:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801ca64:	683b      	ldr	r3, [r7, #0]
 801ca66:	7b1b      	ldrb	r3, [r3, #12]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d000      	beq.n	801ca6e <USB_ActivateEndpoint+0xee>
 801ca6c:	e178      	b.n	801cd60 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	785b      	ldrb	r3, [r3, #1]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d100      	bne.n	801ca78 <USB_ActivateEndpoint+0xf8>
 801ca76:	e07a      	b.n	801cb6e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	61bb      	str	r3, [r7, #24]
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	2250      	movs	r2, #80	@ 0x50
 801ca80:	5a9b      	ldrh	r3, [r3, r2]
 801ca82:	b29b      	uxth	r3, r3
 801ca84:	001a      	movs	r2, r3
 801ca86:	69bb      	ldr	r3, [r7, #24]
 801ca88:	189b      	adds	r3, r3, r2
 801ca8a:	61bb      	str	r3, [r7, #24]
 801ca8c:	683b      	ldr	r3, [r7, #0]
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	00da      	lsls	r2, r3, #3
 801ca92:	69bb      	ldr	r3, [r7, #24]
 801ca94:	18d3      	adds	r3, r2, r3
 801ca96:	2280      	movs	r2, #128	@ 0x80
 801ca98:	00d2      	lsls	r2, r2, #3
 801ca9a:	4694      	mov	ip, r2
 801ca9c:	4463      	add	r3, ip
 801ca9e:	617b      	str	r3, [r7, #20]
 801caa0:	683b      	ldr	r3, [r7, #0]
 801caa2:	88db      	ldrh	r3, [r3, #6]
 801caa4:	085b      	lsrs	r3, r3, #1
 801caa6:	b29b      	uxth	r3, r3
 801caa8:	18db      	adds	r3, r3, r3
 801caaa:	b29a      	uxth	r2, r3
 801caac:	697b      	ldr	r3, [r7, #20]
 801caae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801cab0:	687a      	ldr	r2, [r7, #4]
 801cab2:	683b      	ldr	r3, [r7, #0]
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	009b      	lsls	r3, r3, #2
 801cab8:	18d2      	adds	r2, r2, r3
 801caba:	2112      	movs	r1, #18
 801cabc:	187b      	adds	r3, r7, r1
 801cabe:	8812      	ldrh	r2, [r2, #0]
 801cac0:	801a      	strh	r2, [r3, #0]
 801cac2:	187b      	adds	r3, r7, r1
 801cac4:	881b      	ldrh	r3, [r3, #0]
 801cac6:	2240      	movs	r2, #64	@ 0x40
 801cac8:	4013      	ands	r3, r2
 801caca:	d016      	beq.n	801cafa <USB_ActivateEndpoint+0x17a>
 801cacc:	687a      	ldr	r2, [r7, #4]
 801cace:	683b      	ldr	r3, [r7, #0]
 801cad0:	781b      	ldrb	r3, [r3, #0]
 801cad2:	009b      	lsls	r3, r3, #2
 801cad4:	18d3      	adds	r3, r2, r3
 801cad6:	881b      	ldrh	r3, [r3, #0]
 801cad8:	b29a      	uxth	r2, r3
 801cada:	2010      	movs	r0, #16
 801cadc:	183b      	adds	r3, r7, r0
 801cade:	4957      	ldr	r1, [pc, #348]	@ (801cc3c <USB_ActivateEndpoint+0x2bc>)
 801cae0:	400a      	ands	r2, r1
 801cae2:	801a      	strh	r2, [r3, #0]
 801cae4:	687a      	ldr	r2, [r7, #4]
 801cae6:	683b      	ldr	r3, [r7, #0]
 801cae8:	781b      	ldrb	r3, [r3, #0]
 801caea:	009b      	lsls	r3, r3, #2
 801caec:	18d3      	adds	r3, r2, r3
 801caee:	183a      	adds	r2, r7, r0
 801caf0:	8812      	ldrh	r2, [r2, #0]
 801caf2:	4953      	ldr	r1, [pc, #332]	@ (801cc40 <USB_ActivateEndpoint+0x2c0>)
 801caf4:	430a      	orrs	r2, r1
 801caf6:	b292      	uxth	r2, r2
 801caf8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801cafa:	683b      	ldr	r3, [r7, #0]
 801cafc:	78db      	ldrb	r3, [r3, #3]
 801cafe:	2b01      	cmp	r3, #1
 801cb00:	d01d      	beq.n	801cb3e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801cb02:	687a      	ldr	r2, [r7, #4]
 801cb04:	683b      	ldr	r3, [r7, #0]
 801cb06:	781b      	ldrb	r3, [r3, #0]
 801cb08:	009b      	lsls	r3, r3, #2
 801cb0a:	18d3      	adds	r3, r2, r3
 801cb0c:	881b      	ldrh	r3, [r3, #0]
 801cb0e:	b29a      	uxth	r2, r3
 801cb10:	200c      	movs	r0, #12
 801cb12:	183b      	adds	r3, r7, r0
 801cb14:	494b      	ldr	r1, [pc, #300]	@ (801cc44 <USB_ActivateEndpoint+0x2c4>)
 801cb16:	400a      	ands	r2, r1
 801cb18:	801a      	strh	r2, [r3, #0]
 801cb1a:	183b      	adds	r3, r7, r0
 801cb1c:	183a      	adds	r2, r7, r0
 801cb1e:	8812      	ldrh	r2, [r2, #0]
 801cb20:	2120      	movs	r1, #32
 801cb22:	404a      	eors	r2, r1
 801cb24:	801a      	strh	r2, [r3, #0]
 801cb26:	687a      	ldr	r2, [r7, #4]
 801cb28:	683b      	ldr	r3, [r7, #0]
 801cb2a:	781b      	ldrb	r3, [r3, #0]
 801cb2c:	009b      	lsls	r3, r3, #2
 801cb2e:	18d3      	adds	r3, r2, r3
 801cb30:	183a      	adds	r2, r7, r0
 801cb32:	8812      	ldrh	r2, [r2, #0]
 801cb34:	4940      	ldr	r1, [pc, #256]	@ (801cc38 <USB_ActivateEndpoint+0x2b8>)
 801cb36:	430a      	orrs	r2, r1
 801cb38:	b292      	uxth	r2, r2
 801cb3a:	801a      	strh	r2, [r3, #0]
 801cb3c:	e2b4      	b.n	801d0a8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801cb3e:	687a      	ldr	r2, [r7, #4]
 801cb40:	683b      	ldr	r3, [r7, #0]
 801cb42:	781b      	ldrb	r3, [r3, #0]
 801cb44:	009b      	lsls	r3, r3, #2
 801cb46:	18d3      	adds	r3, r2, r3
 801cb48:	881b      	ldrh	r3, [r3, #0]
 801cb4a:	b29a      	uxth	r2, r3
 801cb4c:	200e      	movs	r0, #14
 801cb4e:	183b      	adds	r3, r7, r0
 801cb50:	493c      	ldr	r1, [pc, #240]	@ (801cc44 <USB_ActivateEndpoint+0x2c4>)
 801cb52:	400a      	ands	r2, r1
 801cb54:	801a      	strh	r2, [r3, #0]
 801cb56:	687a      	ldr	r2, [r7, #4]
 801cb58:	683b      	ldr	r3, [r7, #0]
 801cb5a:	781b      	ldrb	r3, [r3, #0]
 801cb5c:	009b      	lsls	r3, r3, #2
 801cb5e:	18d3      	adds	r3, r2, r3
 801cb60:	183a      	adds	r2, r7, r0
 801cb62:	8812      	ldrh	r2, [r2, #0]
 801cb64:	4934      	ldr	r1, [pc, #208]	@ (801cc38 <USB_ActivateEndpoint+0x2b8>)
 801cb66:	430a      	orrs	r2, r1
 801cb68:	b292      	uxth	r2, r2
 801cb6a:	801a      	strh	r2, [r3, #0]
 801cb6c:	e29c      	b.n	801d0a8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	633b      	str	r3, [r7, #48]	@ 0x30
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	2250      	movs	r2, #80	@ 0x50
 801cb76:	5a9b      	ldrh	r3, [r3, r2]
 801cb78:	b29b      	uxth	r3, r3
 801cb7a:	001a      	movs	r2, r3
 801cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb7e:	189b      	adds	r3, r3, r2
 801cb80:	633b      	str	r3, [r7, #48]	@ 0x30
 801cb82:	683b      	ldr	r3, [r7, #0]
 801cb84:	781b      	ldrb	r3, [r3, #0]
 801cb86:	00da      	lsls	r2, r3, #3
 801cb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb8a:	18d3      	adds	r3, r2, r3
 801cb8c:	4a2e      	ldr	r2, [pc, #184]	@ (801cc48 <USB_ActivateEndpoint+0x2c8>)
 801cb8e:	4694      	mov	ip, r2
 801cb90:	4463      	add	r3, ip
 801cb92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cb94:	683b      	ldr	r3, [r7, #0]
 801cb96:	88db      	ldrh	r3, [r3, #6]
 801cb98:	085b      	lsrs	r3, r3, #1
 801cb9a:	b29b      	uxth	r3, r3
 801cb9c:	18db      	adds	r3, r3, r3
 801cb9e:	b29a      	uxth	r2, r3
 801cba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cba2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cba8:	687b      	ldr	r3, [r7, #4]
 801cbaa:	2250      	movs	r2, #80	@ 0x50
 801cbac:	5a9b      	ldrh	r3, [r3, r2]
 801cbae:	b29b      	uxth	r3, r3
 801cbb0:	001a      	movs	r2, r3
 801cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb4:	189b      	adds	r3, r3, r2
 801cbb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cbb8:	683b      	ldr	r3, [r7, #0]
 801cbba:	781b      	ldrb	r3, [r3, #0]
 801cbbc:	00da      	lsls	r2, r3, #3
 801cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbc0:	18d3      	adds	r3, r2, r3
 801cbc2:	4a22      	ldr	r2, [pc, #136]	@ (801cc4c <USB_ActivateEndpoint+0x2cc>)
 801cbc4:	4694      	mov	ip, r2
 801cbc6:	4463      	add	r3, ip
 801cbc8:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbcc:	881b      	ldrh	r3, [r3, #0]
 801cbce:	b29b      	uxth	r3, r3
 801cbd0:	059b      	lsls	r3, r3, #22
 801cbd2:	0d9b      	lsrs	r3, r3, #22
 801cbd4:	b29a      	uxth	r2, r3
 801cbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbd8:	801a      	strh	r2, [r3, #0]
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	691b      	ldr	r3, [r3, #16]
 801cbde:	2b3e      	cmp	r3, #62	@ 0x3e
 801cbe0:	d91a      	bls.n	801cc18 <USB_ActivateEndpoint+0x298>
 801cbe2:	683b      	ldr	r3, [r7, #0]
 801cbe4:	691b      	ldr	r3, [r3, #16]
 801cbe6:	095b      	lsrs	r3, r3, #5
 801cbe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbea:	683b      	ldr	r3, [r7, #0]
 801cbec:	691b      	ldr	r3, [r3, #16]
 801cbee:	221f      	movs	r2, #31
 801cbf0:	4013      	ands	r3, r2
 801cbf2:	d102      	bne.n	801cbfa <USB_ActivateEndpoint+0x27a>
 801cbf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbf6:	3b01      	subs	r3, #1
 801cbf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbfc:	881b      	ldrh	r3, [r3, #0]
 801cbfe:	b29a      	uxth	r2, r3
 801cc00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc02:	b29b      	uxth	r3, r3
 801cc04:	029b      	lsls	r3, r3, #10
 801cc06:	b29b      	uxth	r3, r3
 801cc08:	4313      	orrs	r3, r2
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	4a10      	ldr	r2, [pc, #64]	@ (801cc50 <USB_ActivateEndpoint+0x2d0>)
 801cc0e:	4313      	orrs	r3, r2
 801cc10:	b29a      	uxth	r2, r3
 801cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc14:	801a      	strh	r2, [r3, #0]
 801cc16:	e034      	b.n	801cc82 <USB_ActivateEndpoint+0x302>
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	691b      	ldr	r3, [r3, #16]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d119      	bne.n	801cc54 <USB_ActivateEndpoint+0x2d4>
 801cc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc22:	881b      	ldrh	r3, [r3, #0]
 801cc24:	b29b      	uxth	r3, r3
 801cc26:	4a0a      	ldr	r2, [pc, #40]	@ (801cc50 <USB_ActivateEndpoint+0x2d0>)
 801cc28:	4313      	orrs	r3, r2
 801cc2a:	b29a      	uxth	r2, r3
 801cc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc2e:	801a      	strh	r2, [r3, #0]
 801cc30:	e027      	b.n	801cc82 <USB_ActivateEndpoint+0x302>
 801cc32:	46c0      	nop			@ (mov r8, r8)
 801cc34:	ffff898f 	.word	0xffff898f
 801cc38:	ffff8080 	.word	0xffff8080
 801cc3c:	ffff8f8f 	.word	0xffff8f8f
 801cc40:	ffff80c0 	.word	0xffff80c0
 801cc44:	ffff8fbf 	.word	0xffff8fbf
 801cc48:	00000404 	.word	0x00000404
 801cc4c:	00000406 	.word	0x00000406
 801cc50:	ffff8000 	.word	0xffff8000
 801cc54:	683b      	ldr	r3, [r7, #0]
 801cc56:	691b      	ldr	r3, [r3, #16]
 801cc58:	085b      	lsrs	r3, r3, #1
 801cc5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cc5c:	683b      	ldr	r3, [r7, #0]
 801cc5e:	691b      	ldr	r3, [r3, #16]
 801cc60:	2201      	movs	r2, #1
 801cc62:	4013      	ands	r3, r2
 801cc64:	d002      	beq.n	801cc6c <USB_ActivateEndpoint+0x2ec>
 801cc66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc68:	3301      	adds	r3, #1
 801cc6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc6e:	881b      	ldrh	r3, [r3, #0]
 801cc70:	b29a      	uxth	r2, r3
 801cc72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	029b      	lsls	r3, r3, #10
 801cc78:	b29b      	uxth	r3, r3
 801cc7a:	4313      	orrs	r3, r2
 801cc7c:	b29a      	uxth	r2, r3
 801cc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cc82:	687a      	ldr	r2, [r7, #4]
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	781b      	ldrb	r3, [r3, #0]
 801cc88:	009b      	lsls	r3, r3, #2
 801cc8a:	18d2      	adds	r2, r2, r3
 801cc8c:	2122      	movs	r1, #34	@ 0x22
 801cc8e:	187b      	adds	r3, r7, r1
 801cc90:	8812      	ldrh	r2, [r2, #0]
 801cc92:	801a      	strh	r2, [r3, #0]
 801cc94:	187b      	adds	r3, r7, r1
 801cc96:	881a      	ldrh	r2, [r3, #0]
 801cc98:	2380      	movs	r3, #128	@ 0x80
 801cc9a:	01db      	lsls	r3, r3, #7
 801cc9c:	4013      	ands	r3, r2
 801cc9e:	d016      	beq.n	801ccce <USB_ActivateEndpoint+0x34e>
 801cca0:	687a      	ldr	r2, [r7, #4]
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	781b      	ldrb	r3, [r3, #0]
 801cca6:	009b      	lsls	r3, r3, #2
 801cca8:	18d3      	adds	r3, r2, r3
 801ccaa:	881b      	ldrh	r3, [r3, #0]
 801ccac:	b29a      	uxth	r2, r3
 801ccae:	2020      	movs	r0, #32
 801ccb0:	183b      	adds	r3, r7, r0
 801ccb2:	49dd      	ldr	r1, [pc, #884]	@ (801d028 <USB_ActivateEndpoint+0x6a8>)
 801ccb4:	400a      	ands	r2, r1
 801ccb6:	801a      	strh	r2, [r3, #0]
 801ccb8:	687a      	ldr	r2, [r7, #4]
 801ccba:	683b      	ldr	r3, [r7, #0]
 801ccbc:	781b      	ldrb	r3, [r3, #0]
 801ccbe:	009b      	lsls	r3, r3, #2
 801ccc0:	18d3      	adds	r3, r2, r3
 801ccc2:	183a      	adds	r2, r7, r0
 801ccc4:	8812      	ldrh	r2, [r2, #0]
 801ccc6:	49d9      	ldr	r1, [pc, #868]	@ (801d02c <USB_ActivateEndpoint+0x6ac>)
 801ccc8:	430a      	orrs	r2, r1
 801ccca:	b292      	uxth	r2, r2
 801cccc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801ccce:	683b      	ldr	r3, [r7, #0]
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d125      	bne.n	801cd22 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ccd6:	687a      	ldr	r2, [r7, #4]
 801ccd8:	683b      	ldr	r3, [r7, #0]
 801ccda:	781b      	ldrb	r3, [r3, #0]
 801ccdc:	009b      	lsls	r3, r3, #2
 801ccde:	18d3      	adds	r3, r2, r3
 801cce0:	881b      	ldrh	r3, [r3, #0]
 801cce2:	b29a      	uxth	r2, r3
 801cce4:	201c      	movs	r0, #28
 801cce6:	183b      	adds	r3, r7, r0
 801cce8:	49d1      	ldr	r1, [pc, #836]	@ (801d030 <USB_ActivateEndpoint+0x6b0>)
 801ccea:	400a      	ands	r2, r1
 801ccec:	801a      	strh	r2, [r3, #0]
 801ccee:	183b      	adds	r3, r7, r0
 801ccf0:	183a      	adds	r2, r7, r0
 801ccf2:	8812      	ldrh	r2, [r2, #0]
 801ccf4:	2180      	movs	r1, #128	@ 0x80
 801ccf6:	0149      	lsls	r1, r1, #5
 801ccf8:	404a      	eors	r2, r1
 801ccfa:	801a      	strh	r2, [r3, #0]
 801ccfc:	183b      	adds	r3, r7, r0
 801ccfe:	183a      	adds	r2, r7, r0
 801cd00:	8812      	ldrh	r2, [r2, #0]
 801cd02:	2180      	movs	r1, #128	@ 0x80
 801cd04:	0189      	lsls	r1, r1, #6
 801cd06:	404a      	eors	r2, r1
 801cd08:	801a      	strh	r2, [r3, #0]
 801cd0a:	687a      	ldr	r2, [r7, #4]
 801cd0c:	683b      	ldr	r3, [r7, #0]
 801cd0e:	781b      	ldrb	r3, [r3, #0]
 801cd10:	009b      	lsls	r3, r3, #2
 801cd12:	18d3      	adds	r3, r2, r3
 801cd14:	183a      	adds	r2, r7, r0
 801cd16:	8812      	ldrh	r2, [r2, #0]
 801cd18:	49c6      	ldr	r1, [pc, #792]	@ (801d034 <USB_ActivateEndpoint+0x6b4>)
 801cd1a:	430a      	orrs	r2, r1
 801cd1c:	b292      	uxth	r2, r2
 801cd1e:	801a      	strh	r2, [r3, #0]
 801cd20:	e1c2      	b.n	801d0a8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801cd22:	687a      	ldr	r2, [r7, #4]
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	781b      	ldrb	r3, [r3, #0]
 801cd28:	009b      	lsls	r3, r3, #2
 801cd2a:	18d3      	adds	r3, r2, r3
 801cd2c:	881b      	ldrh	r3, [r3, #0]
 801cd2e:	b29a      	uxth	r2, r3
 801cd30:	201e      	movs	r0, #30
 801cd32:	183b      	adds	r3, r7, r0
 801cd34:	49be      	ldr	r1, [pc, #760]	@ (801d030 <USB_ActivateEndpoint+0x6b0>)
 801cd36:	400a      	ands	r2, r1
 801cd38:	801a      	strh	r2, [r3, #0]
 801cd3a:	183b      	adds	r3, r7, r0
 801cd3c:	183a      	adds	r2, r7, r0
 801cd3e:	8812      	ldrh	r2, [r2, #0]
 801cd40:	2180      	movs	r1, #128	@ 0x80
 801cd42:	0189      	lsls	r1, r1, #6
 801cd44:	404a      	eors	r2, r1
 801cd46:	801a      	strh	r2, [r3, #0]
 801cd48:	687a      	ldr	r2, [r7, #4]
 801cd4a:	683b      	ldr	r3, [r7, #0]
 801cd4c:	781b      	ldrb	r3, [r3, #0]
 801cd4e:	009b      	lsls	r3, r3, #2
 801cd50:	18d3      	adds	r3, r2, r3
 801cd52:	183a      	adds	r2, r7, r0
 801cd54:	8812      	ldrh	r2, [r2, #0]
 801cd56:	49b7      	ldr	r1, [pc, #732]	@ (801d034 <USB_ActivateEndpoint+0x6b4>)
 801cd58:	430a      	orrs	r2, r1
 801cd5a:	b292      	uxth	r2, r2
 801cd5c:	801a      	strh	r2, [r3, #0]
 801cd5e:	e1a3      	b.n	801d0a8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801cd60:	683b      	ldr	r3, [r7, #0]
 801cd62:	78db      	ldrb	r3, [r3, #3]
 801cd64:	2b02      	cmp	r3, #2
 801cd66:	d117      	bne.n	801cd98 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801cd68:	687a      	ldr	r2, [r7, #4]
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	781b      	ldrb	r3, [r3, #0]
 801cd6e:	009b      	lsls	r3, r3, #2
 801cd70:	18d3      	adds	r3, r2, r3
 801cd72:	881b      	ldrh	r3, [r3, #0]
 801cd74:	b29a      	uxth	r2, r3
 801cd76:	2062      	movs	r0, #98	@ 0x62
 801cd78:	183b      	adds	r3, r7, r0
 801cd7a:	49ab      	ldr	r1, [pc, #684]	@ (801d028 <USB_ActivateEndpoint+0x6a8>)
 801cd7c:	400a      	ands	r2, r1
 801cd7e:	801a      	strh	r2, [r3, #0]
 801cd80:	687a      	ldr	r2, [r7, #4]
 801cd82:	683b      	ldr	r3, [r7, #0]
 801cd84:	781b      	ldrb	r3, [r3, #0]
 801cd86:	009b      	lsls	r3, r3, #2
 801cd88:	18d3      	adds	r3, r2, r3
 801cd8a:	183a      	adds	r2, r7, r0
 801cd8c:	8812      	ldrh	r2, [r2, #0]
 801cd8e:	49aa      	ldr	r1, [pc, #680]	@ (801d038 <USB_ActivateEndpoint+0x6b8>)
 801cd90:	430a      	orrs	r2, r1
 801cd92:	b292      	uxth	r2, r2
 801cd94:	801a      	strh	r2, [r3, #0]
 801cd96:	e016      	b.n	801cdc6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801cd98:	687a      	ldr	r2, [r7, #4]
 801cd9a:	683b      	ldr	r3, [r7, #0]
 801cd9c:	781b      	ldrb	r3, [r3, #0]
 801cd9e:	009b      	lsls	r3, r3, #2
 801cda0:	18d3      	adds	r3, r2, r3
 801cda2:	881b      	ldrh	r3, [r3, #0]
 801cda4:	b29a      	uxth	r2, r3
 801cda6:	2064      	movs	r0, #100	@ 0x64
 801cda8:	183b      	adds	r3, r7, r0
 801cdaa:	49a4      	ldr	r1, [pc, #656]	@ (801d03c <USB_ActivateEndpoint+0x6bc>)
 801cdac:	400a      	ands	r2, r1
 801cdae:	801a      	strh	r2, [r3, #0]
 801cdb0:	687a      	ldr	r2, [r7, #4]
 801cdb2:	683b      	ldr	r3, [r7, #0]
 801cdb4:	781b      	ldrb	r3, [r3, #0]
 801cdb6:	009b      	lsls	r3, r3, #2
 801cdb8:	18d3      	adds	r3, r2, r3
 801cdba:	183a      	adds	r2, r7, r0
 801cdbc:	8812      	ldrh	r2, [r2, #0]
 801cdbe:	499d      	ldr	r1, [pc, #628]	@ (801d034 <USB_ActivateEndpoint+0x6b4>)
 801cdc0:	430a      	orrs	r2, r1
 801cdc2:	b292      	uxth	r2, r2
 801cdc4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	2250      	movs	r2, #80	@ 0x50
 801cdce:	5a9b      	ldrh	r3, [r3, r2]
 801cdd0:	b29b      	uxth	r3, r3
 801cdd2:	001a      	movs	r2, r3
 801cdd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cdd6:	189b      	adds	r3, r3, r2
 801cdd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	781b      	ldrb	r3, [r3, #0]
 801cdde:	00da      	lsls	r2, r3, #3
 801cde0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cde2:	18d3      	adds	r3, r2, r3
 801cde4:	2280      	movs	r2, #128	@ 0x80
 801cde6:	00d2      	lsls	r2, r2, #3
 801cde8:	4694      	mov	ip, r2
 801cdea:	4463      	add	r3, ip
 801cdec:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	891b      	ldrh	r3, [r3, #8]
 801cdf2:	085b      	lsrs	r3, r3, #1
 801cdf4:	b29b      	uxth	r3, r3
 801cdf6:	18db      	adds	r3, r3, r3
 801cdf8:	b29a      	uxth	r2, r3
 801cdfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cdfc:	801a      	strh	r2, [r3, #0]
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	657b      	str	r3, [r7, #84]	@ 0x54
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	2250      	movs	r2, #80	@ 0x50
 801ce06:	5a9b      	ldrh	r3, [r3, r2]
 801ce08:	b29b      	uxth	r3, r3
 801ce0a:	001a      	movs	r2, r3
 801ce0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce0e:	189b      	adds	r3, r3, r2
 801ce10:	657b      	str	r3, [r7, #84]	@ 0x54
 801ce12:	683b      	ldr	r3, [r7, #0]
 801ce14:	781b      	ldrb	r3, [r3, #0]
 801ce16:	00da      	lsls	r2, r3, #3
 801ce18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce1a:	18d3      	adds	r3, r2, r3
 801ce1c:	4a88      	ldr	r2, [pc, #544]	@ (801d040 <USB_ActivateEndpoint+0x6c0>)
 801ce1e:	4694      	mov	ip, r2
 801ce20:	4463      	add	r3, ip
 801ce22:	653b      	str	r3, [r7, #80]	@ 0x50
 801ce24:	683b      	ldr	r3, [r7, #0]
 801ce26:	895b      	ldrh	r3, [r3, #10]
 801ce28:	085b      	lsrs	r3, r3, #1
 801ce2a:	b29b      	uxth	r3, r3
 801ce2c:	18db      	adds	r3, r3, r3
 801ce2e:	b29a      	uxth	r2, r3
 801ce30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ce32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801ce34:	683b      	ldr	r3, [r7, #0]
 801ce36:	785b      	ldrb	r3, [r3, #1]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d000      	beq.n	801ce3e <USB_ActivateEndpoint+0x4be>
 801ce3c:	e087      	b.n	801cf4e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ce3e:	687a      	ldr	r2, [r7, #4]
 801ce40:	683b      	ldr	r3, [r7, #0]
 801ce42:	781b      	ldrb	r3, [r3, #0]
 801ce44:	009b      	lsls	r3, r3, #2
 801ce46:	18d2      	adds	r2, r2, r3
 801ce48:	2140      	movs	r1, #64	@ 0x40
 801ce4a:	187b      	adds	r3, r7, r1
 801ce4c:	8812      	ldrh	r2, [r2, #0]
 801ce4e:	801a      	strh	r2, [r3, #0]
 801ce50:	187b      	adds	r3, r7, r1
 801ce52:	881a      	ldrh	r2, [r3, #0]
 801ce54:	2380      	movs	r3, #128	@ 0x80
 801ce56:	01db      	lsls	r3, r3, #7
 801ce58:	4013      	ands	r3, r2
 801ce5a:	d016      	beq.n	801ce8a <USB_ActivateEndpoint+0x50a>
 801ce5c:	687a      	ldr	r2, [r7, #4]
 801ce5e:	683b      	ldr	r3, [r7, #0]
 801ce60:	781b      	ldrb	r3, [r3, #0]
 801ce62:	009b      	lsls	r3, r3, #2
 801ce64:	18d3      	adds	r3, r2, r3
 801ce66:	881b      	ldrh	r3, [r3, #0]
 801ce68:	b29a      	uxth	r2, r3
 801ce6a:	203e      	movs	r0, #62	@ 0x3e
 801ce6c:	183b      	adds	r3, r7, r0
 801ce6e:	496e      	ldr	r1, [pc, #440]	@ (801d028 <USB_ActivateEndpoint+0x6a8>)
 801ce70:	400a      	ands	r2, r1
 801ce72:	801a      	strh	r2, [r3, #0]
 801ce74:	687a      	ldr	r2, [r7, #4]
 801ce76:	683b      	ldr	r3, [r7, #0]
 801ce78:	781b      	ldrb	r3, [r3, #0]
 801ce7a:	009b      	lsls	r3, r3, #2
 801ce7c:	18d3      	adds	r3, r2, r3
 801ce7e:	183a      	adds	r2, r7, r0
 801ce80:	8812      	ldrh	r2, [r2, #0]
 801ce82:	496a      	ldr	r1, [pc, #424]	@ (801d02c <USB_ActivateEndpoint+0x6ac>)
 801ce84:	430a      	orrs	r2, r1
 801ce86:	b292      	uxth	r2, r2
 801ce88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ce8a:	687a      	ldr	r2, [r7, #4]
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	781b      	ldrb	r3, [r3, #0]
 801ce90:	009b      	lsls	r3, r3, #2
 801ce92:	18d2      	adds	r2, r2, r3
 801ce94:	213c      	movs	r1, #60	@ 0x3c
 801ce96:	187b      	adds	r3, r7, r1
 801ce98:	8812      	ldrh	r2, [r2, #0]
 801ce9a:	801a      	strh	r2, [r3, #0]
 801ce9c:	187b      	adds	r3, r7, r1
 801ce9e:	881b      	ldrh	r3, [r3, #0]
 801cea0:	2240      	movs	r2, #64	@ 0x40
 801cea2:	4013      	ands	r3, r2
 801cea4:	d016      	beq.n	801ced4 <USB_ActivateEndpoint+0x554>
 801cea6:	687a      	ldr	r2, [r7, #4]
 801cea8:	683b      	ldr	r3, [r7, #0]
 801ceaa:	781b      	ldrb	r3, [r3, #0]
 801ceac:	009b      	lsls	r3, r3, #2
 801ceae:	18d3      	adds	r3, r2, r3
 801ceb0:	881b      	ldrh	r3, [r3, #0]
 801ceb2:	b29a      	uxth	r2, r3
 801ceb4:	203a      	movs	r0, #58	@ 0x3a
 801ceb6:	183b      	adds	r3, r7, r0
 801ceb8:	495b      	ldr	r1, [pc, #364]	@ (801d028 <USB_ActivateEndpoint+0x6a8>)
 801ceba:	400a      	ands	r2, r1
 801cebc:	801a      	strh	r2, [r3, #0]
 801cebe:	687a      	ldr	r2, [r7, #4]
 801cec0:	683b      	ldr	r3, [r7, #0]
 801cec2:	781b      	ldrb	r3, [r3, #0]
 801cec4:	009b      	lsls	r3, r3, #2
 801cec6:	18d3      	adds	r3, r2, r3
 801cec8:	183a      	adds	r2, r7, r0
 801ceca:	8812      	ldrh	r2, [r2, #0]
 801cecc:	495d      	ldr	r1, [pc, #372]	@ (801d044 <USB_ActivateEndpoint+0x6c4>)
 801cece:	430a      	orrs	r2, r1
 801ced0:	b292      	uxth	r2, r2
 801ced2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ced4:	687a      	ldr	r2, [r7, #4]
 801ced6:	683b      	ldr	r3, [r7, #0]
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	009b      	lsls	r3, r3, #2
 801cedc:	18d3      	adds	r3, r2, r3
 801cede:	881b      	ldrh	r3, [r3, #0]
 801cee0:	b29a      	uxth	r2, r3
 801cee2:	2038      	movs	r0, #56	@ 0x38
 801cee4:	183b      	adds	r3, r7, r0
 801cee6:	4952      	ldr	r1, [pc, #328]	@ (801d030 <USB_ActivateEndpoint+0x6b0>)
 801cee8:	400a      	ands	r2, r1
 801ceea:	801a      	strh	r2, [r3, #0]
 801ceec:	183b      	adds	r3, r7, r0
 801ceee:	183a      	adds	r2, r7, r0
 801cef0:	8812      	ldrh	r2, [r2, #0]
 801cef2:	2180      	movs	r1, #128	@ 0x80
 801cef4:	0149      	lsls	r1, r1, #5
 801cef6:	404a      	eors	r2, r1
 801cef8:	801a      	strh	r2, [r3, #0]
 801cefa:	183b      	adds	r3, r7, r0
 801cefc:	183a      	adds	r2, r7, r0
 801cefe:	8812      	ldrh	r2, [r2, #0]
 801cf00:	2180      	movs	r1, #128	@ 0x80
 801cf02:	0189      	lsls	r1, r1, #6
 801cf04:	404a      	eors	r2, r1
 801cf06:	801a      	strh	r2, [r3, #0]
 801cf08:	687a      	ldr	r2, [r7, #4]
 801cf0a:	683b      	ldr	r3, [r7, #0]
 801cf0c:	781b      	ldrb	r3, [r3, #0]
 801cf0e:	009b      	lsls	r3, r3, #2
 801cf10:	18d3      	adds	r3, r2, r3
 801cf12:	183a      	adds	r2, r7, r0
 801cf14:	8812      	ldrh	r2, [r2, #0]
 801cf16:	4947      	ldr	r1, [pc, #284]	@ (801d034 <USB_ActivateEndpoint+0x6b4>)
 801cf18:	430a      	orrs	r2, r1
 801cf1a:	b292      	uxth	r2, r2
 801cf1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801cf1e:	687a      	ldr	r2, [r7, #4]
 801cf20:	683b      	ldr	r3, [r7, #0]
 801cf22:	781b      	ldrb	r3, [r3, #0]
 801cf24:	009b      	lsls	r3, r3, #2
 801cf26:	18d3      	adds	r3, r2, r3
 801cf28:	881b      	ldrh	r3, [r3, #0]
 801cf2a:	b29a      	uxth	r2, r3
 801cf2c:	2036      	movs	r0, #54	@ 0x36
 801cf2e:	183b      	adds	r3, r7, r0
 801cf30:	4945      	ldr	r1, [pc, #276]	@ (801d048 <USB_ActivateEndpoint+0x6c8>)
 801cf32:	400a      	ands	r2, r1
 801cf34:	801a      	strh	r2, [r3, #0]
 801cf36:	687a      	ldr	r2, [r7, #4]
 801cf38:	683b      	ldr	r3, [r7, #0]
 801cf3a:	781b      	ldrb	r3, [r3, #0]
 801cf3c:	009b      	lsls	r3, r3, #2
 801cf3e:	18d3      	adds	r3, r2, r3
 801cf40:	183a      	adds	r2, r7, r0
 801cf42:	8812      	ldrh	r2, [r2, #0]
 801cf44:	493b      	ldr	r1, [pc, #236]	@ (801d034 <USB_ActivateEndpoint+0x6b4>)
 801cf46:	430a      	orrs	r2, r1
 801cf48:	b292      	uxth	r2, r2
 801cf4a:	801a      	strh	r2, [r3, #0]
 801cf4c:	e0ac      	b.n	801d0a8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cf4e:	687a      	ldr	r2, [r7, #4]
 801cf50:	683b      	ldr	r3, [r7, #0]
 801cf52:	781b      	ldrb	r3, [r3, #0]
 801cf54:	009b      	lsls	r3, r3, #2
 801cf56:	18d2      	adds	r2, r2, r3
 801cf58:	214e      	movs	r1, #78	@ 0x4e
 801cf5a:	187b      	adds	r3, r7, r1
 801cf5c:	8812      	ldrh	r2, [r2, #0]
 801cf5e:	801a      	strh	r2, [r3, #0]
 801cf60:	187b      	adds	r3, r7, r1
 801cf62:	881a      	ldrh	r2, [r3, #0]
 801cf64:	2380      	movs	r3, #128	@ 0x80
 801cf66:	01db      	lsls	r3, r3, #7
 801cf68:	4013      	ands	r3, r2
 801cf6a:	d016      	beq.n	801cf9a <USB_ActivateEndpoint+0x61a>
 801cf6c:	687a      	ldr	r2, [r7, #4]
 801cf6e:	683b      	ldr	r3, [r7, #0]
 801cf70:	781b      	ldrb	r3, [r3, #0]
 801cf72:	009b      	lsls	r3, r3, #2
 801cf74:	18d3      	adds	r3, r2, r3
 801cf76:	881b      	ldrh	r3, [r3, #0]
 801cf78:	b29a      	uxth	r2, r3
 801cf7a:	204c      	movs	r0, #76	@ 0x4c
 801cf7c:	183b      	adds	r3, r7, r0
 801cf7e:	492a      	ldr	r1, [pc, #168]	@ (801d028 <USB_ActivateEndpoint+0x6a8>)
 801cf80:	400a      	ands	r2, r1
 801cf82:	801a      	strh	r2, [r3, #0]
 801cf84:	687a      	ldr	r2, [r7, #4]
 801cf86:	683b      	ldr	r3, [r7, #0]
 801cf88:	781b      	ldrb	r3, [r3, #0]
 801cf8a:	009b      	lsls	r3, r3, #2
 801cf8c:	18d3      	adds	r3, r2, r3
 801cf8e:	183a      	adds	r2, r7, r0
 801cf90:	8812      	ldrh	r2, [r2, #0]
 801cf92:	4926      	ldr	r1, [pc, #152]	@ (801d02c <USB_ActivateEndpoint+0x6ac>)
 801cf94:	430a      	orrs	r2, r1
 801cf96:	b292      	uxth	r2, r2
 801cf98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801cf9a:	687a      	ldr	r2, [r7, #4]
 801cf9c:	683b      	ldr	r3, [r7, #0]
 801cf9e:	781b      	ldrb	r3, [r3, #0]
 801cfa0:	009b      	lsls	r3, r3, #2
 801cfa2:	18d2      	adds	r2, r2, r3
 801cfa4:	214a      	movs	r1, #74	@ 0x4a
 801cfa6:	187b      	adds	r3, r7, r1
 801cfa8:	8812      	ldrh	r2, [r2, #0]
 801cfaa:	801a      	strh	r2, [r3, #0]
 801cfac:	187b      	adds	r3, r7, r1
 801cfae:	881b      	ldrh	r3, [r3, #0]
 801cfb0:	2240      	movs	r2, #64	@ 0x40
 801cfb2:	4013      	ands	r3, r2
 801cfb4:	d016      	beq.n	801cfe4 <USB_ActivateEndpoint+0x664>
 801cfb6:	687a      	ldr	r2, [r7, #4]
 801cfb8:	683b      	ldr	r3, [r7, #0]
 801cfba:	781b      	ldrb	r3, [r3, #0]
 801cfbc:	009b      	lsls	r3, r3, #2
 801cfbe:	18d3      	adds	r3, r2, r3
 801cfc0:	881b      	ldrh	r3, [r3, #0]
 801cfc2:	b29a      	uxth	r2, r3
 801cfc4:	2048      	movs	r0, #72	@ 0x48
 801cfc6:	183b      	adds	r3, r7, r0
 801cfc8:	4917      	ldr	r1, [pc, #92]	@ (801d028 <USB_ActivateEndpoint+0x6a8>)
 801cfca:	400a      	ands	r2, r1
 801cfcc:	801a      	strh	r2, [r3, #0]
 801cfce:	687a      	ldr	r2, [r7, #4]
 801cfd0:	683b      	ldr	r3, [r7, #0]
 801cfd2:	781b      	ldrb	r3, [r3, #0]
 801cfd4:	009b      	lsls	r3, r3, #2
 801cfd6:	18d3      	adds	r3, r2, r3
 801cfd8:	183a      	adds	r2, r7, r0
 801cfda:	8812      	ldrh	r2, [r2, #0]
 801cfdc:	4919      	ldr	r1, [pc, #100]	@ (801d044 <USB_ActivateEndpoint+0x6c4>)
 801cfde:	430a      	orrs	r2, r1
 801cfe0:	b292      	uxth	r2, r2
 801cfe2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801cfe4:	683b      	ldr	r3, [r7, #0]
 801cfe6:	78db      	ldrb	r3, [r3, #3]
 801cfe8:	2b01      	cmp	r3, #1
 801cfea:	d02f      	beq.n	801d04c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801cfec:	687a      	ldr	r2, [r7, #4]
 801cfee:	683b      	ldr	r3, [r7, #0]
 801cff0:	781b      	ldrb	r3, [r3, #0]
 801cff2:	009b      	lsls	r3, r3, #2
 801cff4:	18d3      	adds	r3, r2, r3
 801cff6:	881b      	ldrh	r3, [r3, #0]
 801cff8:	b29a      	uxth	r2, r3
 801cffa:	2044      	movs	r0, #68	@ 0x44
 801cffc:	183b      	adds	r3, r7, r0
 801cffe:	4912      	ldr	r1, [pc, #72]	@ (801d048 <USB_ActivateEndpoint+0x6c8>)
 801d000:	400a      	ands	r2, r1
 801d002:	801a      	strh	r2, [r3, #0]
 801d004:	183b      	adds	r3, r7, r0
 801d006:	183a      	adds	r2, r7, r0
 801d008:	8812      	ldrh	r2, [r2, #0]
 801d00a:	2120      	movs	r1, #32
 801d00c:	404a      	eors	r2, r1
 801d00e:	801a      	strh	r2, [r3, #0]
 801d010:	687a      	ldr	r2, [r7, #4]
 801d012:	683b      	ldr	r3, [r7, #0]
 801d014:	781b      	ldrb	r3, [r3, #0]
 801d016:	009b      	lsls	r3, r3, #2
 801d018:	18d3      	adds	r3, r2, r3
 801d01a:	183a      	adds	r2, r7, r0
 801d01c:	8812      	ldrh	r2, [r2, #0]
 801d01e:	4905      	ldr	r1, [pc, #20]	@ (801d034 <USB_ActivateEndpoint+0x6b4>)
 801d020:	430a      	orrs	r2, r1
 801d022:	b292      	uxth	r2, r2
 801d024:	801a      	strh	r2, [r3, #0]
 801d026:	e028      	b.n	801d07a <USB_ActivateEndpoint+0x6fa>
 801d028:	ffff8f8f 	.word	0xffff8f8f
 801d02c:	ffffc080 	.word	0xffffc080
 801d030:	ffffbf8f 	.word	0xffffbf8f
 801d034:	ffff8080 	.word	0xffff8080
 801d038:	ffff8180 	.word	0xffff8180
 801d03c:	ffff8e8f 	.word	0xffff8e8f
 801d040:	00000404 	.word	0x00000404
 801d044:	ffff80c0 	.word	0xffff80c0
 801d048:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d04c:	687a      	ldr	r2, [r7, #4]
 801d04e:	683b      	ldr	r3, [r7, #0]
 801d050:	781b      	ldrb	r3, [r3, #0]
 801d052:	009b      	lsls	r3, r3, #2
 801d054:	18d3      	adds	r3, r2, r3
 801d056:	881b      	ldrh	r3, [r3, #0]
 801d058:	b29a      	uxth	r2, r3
 801d05a:	2046      	movs	r0, #70	@ 0x46
 801d05c:	183b      	adds	r3, r7, r0
 801d05e:	4916      	ldr	r1, [pc, #88]	@ (801d0b8 <USB_ActivateEndpoint+0x738>)
 801d060:	400a      	ands	r2, r1
 801d062:	801a      	strh	r2, [r3, #0]
 801d064:	687a      	ldr	r2, [r7, #4]
 801d066:	683b      	ldr	r3, [r7, #0]
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	009b      	lsls	r3, r3, #2
 801d06c:	18d3      	adds	r3, r2, r3
 801d06e:	183a      	adds	r2, r7, r0
 801d070:	8812      	ldrh	r2, [r2, #0]
 801d072:	4912      	ldr	r1, [pc, #72]	@ (801d0bc <USB_ActivateEndpoint+0x73c>)
 801d074:	430a      	orrs	r2, r1
 801d076:	b292      	uxth	r2, r2
 801d078:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d07a:	687a      	ldr	r2, [r7, #4]
 801d07c:	683b      	ldr	r3, [r7, #0]
 801d07e:	781b      	ldrb	r3, [r3, #0]
 801d080:	009b      	lsls	r3, r3, #2
 801d082:	18d3      	adds	r3, r2, r3
 801d084:	881b      	ldrh	r3, [r3, #0]
 801d086:	b29a      	uxth	r2, r3
 801d088:	2042      	movs	r0, #66	@ 0x42
 801d08a:	183b      	adds	r3, r7, r0
 801d08c:	490c      	ldr	r1, [pc, #48]	@ (801d0c0 <USB_ActivateEndpoint+0x740>)
 801d08e:	400a      	ands	r2, r1
 801d090:	801a      	strh	r2, [r3, #0]
 801d092:	687a      	ldr	r2, [r7, #4]
 801d094:	683b      	ldr	r3, [r7, #0]
 801d096:	781b      	ldrb	r3, [r3, #0]
 801d098:	009b      	lsls	r3, r3, #2
 801d09a:	18d3      	adds	r3, r2, r3
 801d09c:	183a      	adds	r2, r7, r0
 801d09e:	8812      	ldrh	r2, [r2, #0]
 801d0a0:	4906      	ldr	r1, [pc, #24]	@ (801d0bc <USB_ActivateEndpoint+0x73c>)
 801d0a2:	430a      	orrs	r2, r1
 801d0a4:	b292      	uxth	r2, r2
 801d0a6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801d0a8:	236f      	movs	r3, #111	@ 0x6f
 801d0aa:	18fb      	adds	r3, r7, r3
 801d0ac:	781b      	ldrb	r3, [r3, #0]
}
 801d0ae:	0018      	movs	r0, r3
 801d0b0:	46bd      	mov	sp, r7
 801d0b2:	b01c      	add	sp, #112	@ 0x70
 801d0b4:	bd80      	pop	{r7, pc}
 801d0b6:	46c0      	nop			@ (mov r8, r8)
 801d0b8:	ffff8fbf 	.word	0xffff8fbf
 801d0bc:	ffff8080 	.word	0xffff8080
 801d0c0:	ffffbf8f 	.word	0xffffbf8f

0801d0c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b08c      	sub	sp, #48	@ 0x30
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
 801d0cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d0ce:	683b      	ldr	r3, [r7, #0]
 801d0d0:	7b1b      	ldrb	r3, [r3, #12]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d000      	beq.n	801d0d8 <USB_DeactivateEndpoint+0x14>
 801d0d6:	e07e      	b.n	801d1d6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801d0d8:	683b      	ldr	r3, [r7, #0]
 801d0da:	785b      	ldrb	r3, [r3, #1]
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	d03c      	beq.n	801d15a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d0e0:	687a      	ldr	r2, [r7, #4]
 801d0e2:	683b      	ldr	r3, [r7, #0]
 801d0e4:	781b      	ldrb	r3, [r3, #0]
 801d0e6:	009b      	lsls	r3, r3, #2
 801d0e8:	18d2      	adds	r2, r2, r3
 801d0ea:	210c      	movs	r1, #12
 801d0ec:	187b      	adds	r3, r7, r1
 801d0ee:	8812      	ldrh	r2, [r2, #0]
 801d0f0:	801a      	strh	r2, [r3, #0]
 801d0f2:	187b      	adds	r3, r7, r1
 801d0f4:	881b      	ldrh	r3, [r3, #0]
 801d0f6:	2240      	movs	r2, #64	@ 0x40
 801d0f8:	4013      	ands	r3, r2
 801d0fa:	d016      	beq.n	801d12a <USB_DeactivateEndpoint+0x66>
 801d0fc:	687a      	ldr	r2, [r7, #4]
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	781b      	ldrb	r3, [r3, #0]
 801d102:	009b      	lsls	r3, r3, #2
 801d104:	18d3      	adds	r3, r2, r3
 801d106:	881b      	ldrh	r3, [r3, #0]
 801d108:	b29a      	uxth	r2, r3
 801d10a:	200a      	movs	r0, #10
 801d10c:	183b      	adds	r3, r7, r0
 801d10e:	49c7      	ldr	r1, [pc, #796]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d110:	400a      	ands	r2, r1
 801d112:	801a      	strh	r2, [r3, #0]
 801d114:	687a      	ldr	r2, [r7, #4]
 801d116:	683b      	ldr	r3, [r7, #0]
 801d118:	781b      	ldrb	r3, [r3, #0]
 801d11a:	009b      	lsls	r3, r3, #2
 801d11c:	18d3      	adds	r3, r2, r3
 801d11e:	183a      	adds	r2, r7, r0
 801d120:	8812      	ldrh	r2, [r2, #0]
 801d122:	49c3      	ldr	r1, [pc, #780]	@ (801d430 <USB_DeactivateEndpoint+0x36c>)
 801d124:	430a      	orrs	r2, r1
 801d126:	b292      	uxth	r2, r2
 801d128:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d12a:	687a      	ldr	r2, [r7, #4]
 801d12c:	683b      	ldr	r3, [r7, #0]
 801d12e:	781b      	ldrb	r3, [r3, #0]
 801d130:	009b      	lsls	r3, r3, #2
 801d132:	18d3      	adds	r3, r2, r3
 801d134:	881b      	ldrh	r3, [r3, #0]
 801d136:	b29a      	uxth	r2, r3
 801d138:	2008      	movs	r0, #8
 801d13a:	183b      	adds	r3, r7, r0
 801d13c:	49bd      	ldr	r1, [pc, #756]	@ (801d434 <USB_DeactivateEndpoint+0x370>)
 801d13e:	400a      	ands	r2, r1
 801d140:	801a      	strh	r2, [r3, #0]
 801d142:	687a      	ldr	r2, [r7, #4]
 801d144:	683b      	ldr	r3, [r7, #0]
 801d146:	781b      	ldrb	r3, [r3, #0]
 801d148:	009b      	lsls	r3, r3, #2
 801d14a:	18d3      	adds	r3, r2, r3
 801d14c:	183a      	adds	r2, r7, r0
 801d14e:	8812      	ldrh	r2, [r2, #0]
 801d150:	49b9      	ldr	r1, [pc, #740]	@ (801d438 <USB_DeactivateEndpoint+0x374>)
 801d152:	430a      	orrs	r2, r1
 801d154:	b292      	uxth	r2, r2
 801d156:	801a      	strh	r2, [r3, #0]
 801d158:	e163      	b.n	801d422 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d15a:	687a      	ldr	r2, [r7, #4]
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	781b      	ldrb	r3, [r3, #0]
 801d160:	009b      	lsls	r3, r3, #2
 801d162:	18d2      	adds	r2, r2, r3
 801d164:	2112      	movs	r1, #18
 801d166:	187b      	adds	r3, r7, r1
 801d168:	8812      	ldrh	r2, [r2, #0]
 801d16a:	801a      	strh	r2, [r3, #0]
 801d16c:	187b      	adds	r3, r7, r1
 801d16e:	881a      	ldrh	r2, [r3, #0]
 801d170:	2380      	movs	r3, #128	@ 0x80
 801d172:	01db      	lsls	r3, r3, #7
 801d174:	4013      	ands	r3, r2
 801d176:	d016      	beq.n	801d1a6 <USB_DeactivateEndpoint+0xe2>
 801d178:	687a      	ldr	r2, [r7, #4]
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	781b      	ldrb	r3, [r3, #0]
 801d17e:	009b      	lsls	r3, r3, #2
 801d180:	18d3      	adds	r3, r2, r3
 801d182:	881b      	ldrh	r3, [r3, #0]
 801d184:	b29a      	uxth	r2, r3
 801d186:	2010      	movs	r0, #16
 801d188:	183b      	adds	r3, r7, r0
 801d18a:	49a8      	ldr	r1, [pc, #672]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d18c:	400a      	ands	r2, r1
 801d18e:	801a      	strh	r2, [r3, #0]
 801d190:	687a      	ldr	r2, [r7, #4]
 801d192:	683b      	ldr	r3, [r7, #0]
 801d194:	781b      	ldrb	r3, [r3, #0]
 801d196:	009b      	lsls	r3, r3, #2
 801d198:	18d3      	adds	r3, r2, r3
 801d19a:	183a      	adds	r2, r7, r0
 801d19c:	8812      	ldrh	r2, [r2, #0]
 801d19e:	49a7      	ldr	r1, [pc, #668]	@ (801d43c <USB_DeactivateEndpoint+0x378>)
 801d1a0:	430a      	orrs	r2, r1
 801d1a2:	b292      	uxth	r2, r2
 801d1a4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d1a6:	687a      	ldr	r2, [r7, #4]
 801d1a8:	683b      	ldr	r3, [r7, #0]
 801d1aa:	781b      	ldrb	r3, [r3, #0]
 801d1ac:	009b      	lsls	r3, r3, #2
 801d1ae:	18d3      	adds	r3, r2, r3
 801d1b0:	881b      	ldrh	r3, [r3, #0]
 801d1b2:	b29a      	uxth	r2, r3
 801d1b4:	200e      	movs	r0, #14
 801d1b6:	183b      	adds	r3, r7, r0
 801d1b8:	49a1      	ldr	r1, [pc, #644]	@ (801d440 <USB_DeactivateEndpoint+0x37c>)
 801d1ba:	400a      	ands	r2, r1
 801d1bc:	801a      	strh	r2, [r3, #0]
 801d1be:	687a      	ldr	r2, [r7, #4]
 801d1c0:	683b      	ldr	r3, [r7, #0]
 801d1c2:	781b      	ldrb	r3, [r3, #0]
 801d1c4:	009b      	lsls	r3, r3, #2
 801d1c6:	18d3      	adds	r3, r2, r3
 801d1c8:	183a      	adds	r2, r7, r0
 801d1ca:	8812      	ldrh	r2, [r2, #0]
 801d1cc:	499a      	ldr	r1, [pc, #616]	@ (801d438 <USB_DeactivateEndpoint+0x374>)
 801d1ce:	430a      	orrs	r2, r1
 801d1d0:	b292      	uxth	r2, r2
 801d1d2:	801a      	strh	r2, [r3, #0]
 801d1d4:	e125      	b.n	801d422 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	785b      	ldrb	r3, [r3, #1]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d000      	beq.n	801d1e0 <USB_DeactivateEndpoint+0x11c>
 801d1de:	e090      	b.n	801d302 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d1e0:	687a      	ldr	r2, [r7, #4]
 801d1e2:	683b      	ldr	r3, [r7, #0]
 801d1e4:	781b      	ldrb	r3, [r3, #0]
 801d1e6:	009b      	lsls	r3, r3, #2
 801d1e8:	18d2      	adds	r2, r2, r3
 801d1ea:	2120      	movs	r1, #32
 801d1ec:	187b      	adds	r3, r7, r1
 801d1ee:	8812      	ldrh	r2, [r2, #0]
 801d1f0:	801a      	strh	r2, [r3, #0]
 801d1f2:	187b      	adds	r3, r7, r1
 801d1f4:	881a      	ldrh	r2, [r3, #0]
 801d1f6:	2380      	movs	r3, #128	@ 0x80
 801d1f8:	01db      	lsls	r3, r3, #7
 801d1fa:	4013      	ands	r3, r2
 801d1fc:	d016      	beq.n	801d22c <USB_DeactivateEndpoint+0x168>
 801d1fe:	687a      	ldr	r2, [r7, #4]
 801d200:	683b      	ldr	r3, [r7, #0]
 801d202:	781b      	ldrb	r3, [r3, #0]
 801d204:	009b      	lsls	r3, r3, #2
 801d206:	18d3      	adds	r3, r2, r3
 801d208:	881b      	ldrh	r3, [r3, #0]
 801d20a:	b29a      	uxth	r2, r3
 801d20c:	201e      	movs	r0, #30
 801d20e:	183b      	adds	r3, r7, r0
 801d210:	4986      	ldr	r1, [pc, #536]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d212:	400a      	ands	r2, r1
 801d214:	801a      	strh	r2, [r3, #0]
 801d216:	687a      	ldr	r2, [r7, #4]
 801d218:	683b      	ldr	r3, [r7, #0]
 801d21a:	781b      	ldrb	r3, [r3, #0]
 801d21c:	009b      	lsls	r3, r3, #2
 801d21e:	18d3      	adds	r3, r2, r3
 801d220:	183a      	adds	r2, r7, r0
 801d222:	8812      	ldrh	r2, [r2, #0]
 801d224:	4985      	ldr	r1, [pc, #532]	@ (801d43c <USB_DeactivateEndpoint+0x378>)
 801d226:	430a      	orrs	r2, r1
 801d228:	b292      	uxth	r2, r2
 801d22a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d22c:	687a      	ldr	r2, [r7, #4]
 801d22e:	683b      	ldr	r3, [r7, #0]
 801d230:	781b      	ldrb	r3, [r3, #0]
 801d232:	009b      	lsls	r3, r3, #2
 801d234:	18d2      	adds	r2, r2, r3
 801d236:	211c      	movs	r1, #28
 801d238:	187b      	adds	r3, r7, r1
 801d23a:	8812      	ldrh	r2, [r2, #0]
 801d23c:	801a      	strh	r2, [r3, #0]
 801d23e:	187b      	adds	r3, r7, r1
 801d240:	881b      	ldrh	r3, [r3, #0]
 801d242:	2240      	movs	r2, #64	@ 0x40
 801d244:	4013      	ands	r3, r2
 801d246:	d016      	beq.n	801d276 <USB_DeactivateEndpoint+0x1b2>
 801d248:	687a      	ldr	r2, [r7, #4]
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	781b      	ldrb	r3, [r3, #0]
 801d24e:	009b      	lsls	r3, r3, #2
 801d250:	18d3      	adds	r3, r2, r3
 801d252:	881b      	ldrh	r3, [r3, #0]
 801d254:	b29a      	uxth	r2, r3
 801d256:	201a      	movs	r0, #26
 801d258:	183b      	adds	r3, r7, r0
 801d25a:	4974      	ldr	r1, [pc, #464]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d25c:	400a      	ands	r2, r1
 801d25e:	801a      	strh	r2, [r3, #0]
 801d260:	687a      	ldr	r2, [r7, #4]
 801d262:	683b      	ldr	r3, [r7, #0]
 801d264:	781b      	ldrb	r3, [r3, #0]
 801d266:	009b      	lsls	r3, r3, #2
 801d268:	18d3      	adds	r3, r2, r3
 801d26a:	183a      	adds	r2, r7, r0
 801d26c:	8812      	ldrh	r2, [r2, #0]
 801d26e:	4970      	ldr	r1, [pc, #448]	@ (801d430 <USB_DeactivateEndpoint+0x36c>)
 801d270:	430a      	orrs	r2, r1
 801d272:	b292      	uxth	r2, r2
 801d274:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801d276:	687a      	ldr	r2, [r7, #4]
 801d278:	683b      	ldr	r3, [r7, #0]
 801d27a:	781b      	ldrb	r3, [r3, #0]
 801d27c:	009b      	lsls	r3, r3, #2
 801d27e:	18d3      	adds	r3, r2, r3
 801d280:	881b      	ldrh	r3, [r3, #0]
 801d282:	b29a      	uxth	r2, r3
 801d284:	2018      	movs	r0, #24
 801d286:	183b      	adds	r3, r7, r0
 801d288:	4968      	ldr	r1, [pc, #416]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d28a:	400a      	ands	r2, r1
 801d28c:	801a      	strh	r2, [r3, #0]
 801d28e:	687a      	ldr	r2, [r7, #4]
 801d290:	683b      	ldr	r3, [r7, #0]
 801d292:	781b      	ldrb	r3, [r3, #0]
 801d294:	009b      	lsls	r3, r3, #2
 801d296:	18d3      	adds	r3, r2, r3
 801d298:	183a      	adds	r2, r7, r0
 801d29a:	8812      	ldrh	r2, [r2, #0]
 801d29c:	4964      	ldr	r1, [pc, #400]	@ (801d430 <USB_DeactivateEndpoint+0x36c>)
 801d29e:	430a      	orrs	r2, r1
 801d2a0:	b292      	uxth	r2, r2
 801d2a2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d2a4:	687a      	ldr	r2, [r7, #4]
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	781b      	ldrb	r3, [r3, #0]
 801d2aa:	009b      	lsls	r3, r3, #2
 801d2ac:	18d3      	adds	r3, r2, r3
 801d2ae:	881b      	ldrh	r3, [r3, #0]
 801d2b0:	b29a      	uxth	r2, r3
 801d2b2:	2016      	movs	r0, #22
 801d2b4:	183b      	adds	r3, r7, r0
 801d2b6:	4962      	ldr	r1, [pc, #392]	@ (801d440 <USB_DeactivateEndpoint+0x37c>)
 801d2b8:	400a      	ands	r2, r1
 801d2ba:	801a      	strh	r2, [r3, #0]
 801d2bc:	687a      	ldr	r2, [r7, #4]
 801d2be:	683b      	ldr	r3, [r7, #0]
 801d2c0:	781b      	ldrb	r3, [r3, #0]
 801d2c2:	009b      	lsls	r3, r3, #2
 801d2c4:	18d3      	adds	r3, r2, r3
 801d2c6:	183a      	adds	r2, r7, r0
 801d2c8:	8812      	ldrh	r2, [r2, #0]
 801d2ca:	495b      	ldr	r1, [pc, #364]	@ (801d438 <USB_DeactivateEndpoint+0x374>)
 801d2cc:	430a      	orrs	r2, r1
 801d2ce:	b292      	uxth	r2, r2
 801d2d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d2d2:	687a      	ldr	r2, [r7, #4]
 801d2d4:	683b      	ldr	r3, [r7, #0]
 801d2d6:	781b      	ldrb	r3, [r3, #0]
 801d2d8:	009b      	lsls	r3, r3, #2
 801d2da:	18d3      	adds	r3, r2, r3
 801d2dc:	881b      	ldrh	r3, [r3, #0]
 801d2de:	b29a      	uxth	r2, r3
 801d2e0:	2014      	movs	r0, #20
 801d2e2:	183b      	adds	r3, r7, r0
 801d2e4:	4953      	ldr	r1, [pc, #332]	@ (801d434 <USB_DeactivateEndpoint+0x370>)
 801d2e6:	400a      	ands	r2, r1
 801d2e8:	801a      	strh	r2, [r3, #0]
 801d2ea:	687a      	ldr	r2, [r7, #4]
 801d2ec:	683b      	ldr	r3, [r7, #0]
 801d2ee:	781b      	ldrb	r3, [r3, #0]
 801d2f0:	009b      	lsls	r3, r3, #2
 801d2f2:	18d3      	adds	r3, r2, r3
 801d2f4:	183a      	adds	r2, r7, r0
 801d2f6:	8812      	ldrh	r2, [r2, #0]
 801d2f8:	494f      	ldr	r1, [pc, #316]	@ (801d438 <USB_DeactivateEndpoint+0x374>)
 801d2fa:	430a      	orrs	r2, r1
 801d2fc:	b292      	uxth	r2, r2
 801d2fe:	801a      	strh	r2, [r3, #0]
 801d300:	e08f      	b.n	801d422 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d302:	687a      	ldr	r2, [r7, #4]
 801d304:	683b      	ldr	r3, [r7, #0]
 801d306:	781b      	ldrb	r3, [r3, #0]
 801d308:	009b      	lsls	r3, r3, #2
 801d30a:	18d2      	adds	r2, r2, r3
 801d30c:	212e      	movs	r1, #46	@ 0x2e
 801d30e:	187b      	adds	r3, r7, r1
 801d310:	8812      	ldrh	r2, [r2, #0]
 801d312:	801a      	strh	r2, [r3, #0]
 801d314:	187b      	adds	r3, r7, r1
 801d316:	881a      	ldrh	r2, [r3, #0]
 801d318:	2380      	movs	r3, #128	@ 0x80
 801d31a:	01db      	lsls	r3, r3, #7
 801d31c:	4013      	ands	r3, r2
 801d31e:	d016      	beq.n	801d34e <USB_DeactivateEndpoint+0x28a>
 801d320:	687a      	ldr	r2, [r7, #4]
 801d322:	683b      	ldr	r3, [r7, #0]
 801d324:	781b      	ldrb	r3, [r3, #0]
 801d326:	009b      	lsls	r3, r3, #2
 801d328:	18d3      	adds	r3, r2, r3
 801d32a:	881b      	ldrh	r3, [r3, #0]
 801d32c:	b29a      	uxth	r2, r3
 801d32e:	202c      	movs	r0, #44	@ 0x2c
 801d330:	183b      	adds	r3, r7, r0
 801d332:	493e      	ldr	r1, [pc, #248]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d334:	400a      	ands	r2, r1
 801d336:	801a      	strh	r2, [r3, #0]
 801d338:	687a      	ldr	r2, [r7, #4]
 801d33a:	683b      	ldr	r3, [r7, #0]
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	009b      	lsls	r3, r3, #2
 801d340:	18d3      	adds	r3, r2, r3
 801d342:	183a      	adds	r2, r7, r0
 801d344:	8812      	ldrh	r2, [r2, #0]
 801d346:	493d      	ldr	r1, [pc, #244]	@ (801d43c <USB_DeactivateEndpoint+0x378>)
 801d348:	430a      	orrs	r2, r1
 801d34a:	b292      	uxth	r2, r2
 801d34c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	683b      	ldr	r3, [r7, #0]
 801d352:	781b      	ldrb	r3, [r3, #0]
 801d354:	009b      	lsls	r3, r3, #2
 801d356:	18d2      	adds	r2, r2, r3
 801d358:	212a      	movs	r1, #42	@ 0x2a
 801d35a:	187b      	adds	r3, r7, r1
 801d35c:	8812      	ldrh	r2, [r2, #0]
 801d35e:	801a      	strh	r2, [r3, #0]
 801d360:	187b      	adds	r3, r7, r1
 801d362:	881b      	ldrh	r3, [r3, #0]
 801d364:	2240      	movs	r2, #64	@ 0x40
 801d366:	4013      	ands	r3, r2
 801d368:	d016      	beq.n	801d398 <USB_DeactivateEndpoint+0x2d4>
 801d36a:	687a      	ldr	r2, [r7, #4]
 801d36c:	683b      	ldr	r3, [r7, #0]
 801d36e:	781b      	ldrb	r3, [r3, #0]
 801d370:	009b      	lsls	r3, r3, #2
 801d372:	18d3      	adds	r3, r2, r3
 801d374:	881b      	ldrh	r3, [r3, #0]
 801d376:	b29a      	uxth	r2, r3
 801d378:	2028      	movs	r0, #40	@ 0x28
 801d37a:	183b      	adds	r3, r7, r0
 801d37c:	492b      	ldr	r1, [pc, #172]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d37e:	400a      	ands	r2, r1
 801d380:	801a      	strh	r2, [r3, #0]
 801d382:	687a      	ldr	r2, [r7, #4]
 801d384:	683b      	ldr	r3, [r7, #0]
 801d386:	781b      	ldrb	r3, [r3, #0]
 801d388:	009b      	lsls	r3, r3, #2
 801d38a:	18d3      	adds	r3, r2, r3
 801d38c:	183a      	adds	r2, r7, r0
 801d38e:	8812      	ldrh	r2, [r2, #0]
 801d390:	4927      	ldr	r1, [pc, #156]	@ (801d430 <USB_DeactivateEndpoint+0x36c>)
 801d392:	430a      	orrs	r2, r1
 801d394:	b292      	uxth	r2, r2
 801d396:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801d398:	687a      	ldr	r2, [r7, #4]
 801d39a:	683b      	ldr	r3, [r7, #0]
 801d39c:	781b      	ldrb	r3, [r3, #0]
 801d39e:	009b      	lsls	r3, r3, #2
 801d3a0:	18d3      	adds	r3, r2, r3
 801d3a2:	881b      	ldrh	r3, [r3, #0]
 801d3a4:	b29a      	uxth	r2, r3
 801d3a6:	2026      	movs	r0, #38	@ 0x26
 801d3a8:	183b      	adds	r3, r7, r0
 801d3aa:	4920      	ldr	r1, [pc, #128]	@ (801d42c <USB_DeactivateEndpoint+0x368>)
 801d3ac:	400a      	ands	r2, r1
 801d3ae:	801a      	strh	r2, [r3, #0]
 801d3b0:	687a      	ldr	r2, [r7, #4]
 801d3b2:	683b      	ldr	r3, [r7, #0]
 801d3b4:	781b      	ldrb	r3, [r3, #0]
 801d3b6:	009b      	lsls	r3, r3, #2
 801d3b8:	18d3      	adds	r3, r2, r3
 801d3ba:	183a      	adds	r2, r7, r0
 801d3bc:	8812      	ldrh	r2, [r2, #0]
 801d3be:	491f      	ldr	r1, [pc, #124]	@ (801d43c <USB_DeactivateEndpoint+0x378>)
 801d3c0:	430a      	orrs	r2, r1
 801d3c2:	b292      	uxth	r2, r2
 801d3c4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d3c6:	687a      	ldr	r2, [r7, #4]
 801d3c8:	683b      	ldr	r3, [r7, #0]
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	009b      	lsls	r3, r3, #2
 801d3ce:	18d3      	adds	r3, r2, r3
 801d3d0:	881b      	ldrh	r3, [r3, #0]
 801d3d2:	b29a      	uxth	r2, r3
 801d3d4:	2024      	movs	r0, #36	@ 0x24
 801d3d6:	183b      	adds	r3, r7, r0
 801d3d8:	4916      	ldr	r1, [pc, #88]	@ (801d434 <USB_DeactivateEndpoint+0x370>)
 801d3da:	400a      	ands	r2, r1
 801d3dc:	801a      	strh	r2, [r3, #0]
 801d3de:	687a      	ldr	r2, [r7, #4]
 801d3e0:	683b      	ldr	r3, [r7, #0]
 801d3e2:	781b      	ldrb	r3, [r3, #0]
 801d3e4:	009b      	lsls	r3, r3, #2
 801d3e6:	18d3      	adds	r3, r2, r3
 801d3e8:	183a      	adds	r2, r7, r0
 801d3ea:	8812      	ldrh	r2, [r2, #0]
 801d3ec:	4912      	ldr	r1, [pc, #72]	@ (801d438 <USB_DeactivateEndpoint+0x374>)
 801d3ee:	430a      	orrs	r2, r1
 801d3f0:	b292      	uxth	r2, r2
 801d3f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d3f4:	687a      	ldr	r2, [r7, #4]
 801d3f6:	683b      	ldr	r3, [r7, #0]
 801d3f8:	781b      	ldrb	r3, [r3, #0]
 801d3fa:	009b      	lsls	r3, r3, #2
 801d3fc:	18d3      	adds	r3, r2, r3
 801d3fe:	881b      	ldrh	r3, [r3, #0]
 801d400:	b29a      	uxth	r2, r3
 801d402:	2022      	movs	r0, #34	@ 0x22
 801d404:	183b      	adds	r3, r7, r0
 801d406:	490e      	ldr	r1, [pc, #56]	@ (801d440 <USB_DeactivateEndpoint+0x37c>)
 801d408:	400a      	ands	r2, r1
 801d40a:	801a      	strh	r2, [r3, #0]
 801d40c:	687a      	ldr	r2, [r7, #4]
 801d40e:	683b      	ldr	r3, [r7, #0]
 801d410:	781b      	ldrb	r3, [r3, #0]
 801d412:	009b      	lsls	r3, r3, #2
 801d414:	18d3      	adds	r3, r2, r3
 801d416:	183a      	adds	r2, r7, r0
 801d418:	8812      	ldrh	r2, [r2, #0]
 801d41a:	4907      	ldr	r1, [pc, #28]	@ (801d438 <USB_DeactivateEndpoint+0x374>)
 801d41c:	430a      	orrs	r2, r1
 801d41e:	b292      	uxth	r2, r2
 801d420:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801d422:	2300      	movs	r3, #0
}
 801d424:	0018      	movs	r0, r3
 801d426:	46bd      	mov	sp, r7
 801d428:	b00c      	add	sp, #48	@ 0x30
 801d42a:	bd80      	pop	{r7, pc}
 801d42c:	ffff8f8f 	.word	0xffff8f8f
 801d430:	ffff80c0 	.word	0xffff80c0
 801d434:	ffff8fbf 	.word	0xffff8fbf
 801d438:	ffff8080 	.word	0xffff8080
 801d43c:	ffffc080 	.word	0xffffc080
 801d440:	ffffbf8f 	.word	0xffffbf8f

0801d444 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d444:	b590      	push	{r4, r7, lr}
 801d446:	b0c3      	sub	sp, #268	@ 0x10c
 801d448:	af00      	add	r7, sp, #0
 801d44a:	6078      	str	r0, [r7, #4]
 801d44c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	785b      	ldrb	r3, [r3, #1]
 801d452:	2b01      	cmp	r3, #1
 801d454:	d001      	beq.n	801d45a <USB_EPStartXfer+0x16>
 801d456:	f000 fd2d 	bl	801deb4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801d45a:	683b      	ldr	r3, [r7, #0]
 801d45c:	699a      	ldr	r2, [r3, #24]
 801d45e:	683b      	ldr	r3, [r7, #0]
 801d460:	691b      	ldr	r3, [r3, #16]
 801d462:	429a      	cmp	r2, r3
 801d464:	d905      	bls.n	801d472 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801d466:	683b      	ldr	r3, [r7, #0]
 801d468:	691b      	ldr	r3, [r3, #16]
 801d46a:	1d7a      	adds	r2, r7, #5
 801d46c:	32ff      	adds	r2, #255	@ 0xff
 801d46e:	6013      	str	r3, [r2, #0]
 801d470:	e004      	b.n	801d47c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801d472:	683b      	ldr	r3, [r7, #0]
 801d474:	699b      	ldr	r3, [r3, #24]
 801d476:	1d7a      	adds	r2, r7, #5
 801d478:	32ff      	adds	r2, #255	@ 0xff
 801d47a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	7b1b      	ldrb	r3, [r3, #12]
 801d480:	2b00      	cmp	r3, #0
 801d482:	d125      	bne.n	801d4d0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801d484:	683b      	ldr	r3, [r7, #0]
 801d486:	6959      	ldr	r1, [r3, #20]
 801d488:	683b      	ldr	r3, [r7, #0]
 801d48a:	88da      	ldrh	r2, [r3, #6]
 801d48c:	1d7b      	adds	r3, r7, #5
 801d48e:	33ff      	adds	r3, #255	@ 0xff
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	b29b      	uxth	r3, r3
 801d494:	6878      	ldr	r0, [r7, #4]
 801d496:	f001 fa47 	bl	801e928 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	613b      	str	r3, [r7, #16]
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	2250      	movs	r2, #80	@ 0x50
 801d4a2:	5a9b      	ldrh	r3, [r3, r2]
 801d4a4:	b29b      	uxth	r3, r3
 801d4a6:	001a      	movs	r2, r3
 801d4a8:	693b      	ldr	r3, [r7, #16]
 801d4aa:	189b      	adds	r3, r3, r2
 801d4ac:	613b      	str	r3, [r7, #16]
 801d4ae:	683b      	ldr	r3, [r7, #0]
 801d4b0:	781b      	ldrb	r3, [r3, #0]
 801d4b2:	00da      	lsls	r2, r3, #3
 801d4b4:	693b      	ldr	r3, [r7, #16]
 801d4b6:	18d3      	adds	r3, r2, r3
 801d4b8:	4ad7      	ldr	r2, [pc, #860]	@ (801d818 <USB_EPStartXfer+0x3d4>)
 801d4ba:	4694      	mov	ip, r2
 801d4bc:	4463      	add	r3, ip
 801d4be:	60fb      	str	r3, [r7, #12]
 801d4c0:	1d7b      	adds	r3, r7, #5
 801d4c2:	33ff      	adds	r3, #255	@ 0xff
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	b29a      	uxth	r2, r3
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	801a      	strh	r2, [r3, #0]
 801d4cc:	f000 fccd 	bl	801de6a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801d4d0:	683b      	ldr	r3, [r7, #0]
 801d4d2:	78db      	ldrb	r3, [r3, #3]
 801d4d4:	2b02      	cmp	r3, #2
 801d4d6:	d000      	beq.n	801d4da <USB_EPStartXfer+0x96>
 801d4d8:	e362      	b.n	801dba0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801d4da:	683b      	ldr	r3, [r7, #0]
 801d4dc:	6a1a      	ldr	r2, [r3, #32]
 801d4de:	683b      	ldr	r3, [r7, #0]
 801d4e0:	691b      	ldr	r3, [r3, #16]
 801d4e2:	429a      	cmp	r2, r3
 801d4e4:	d800      	bhi.n	801d4e8 <USB_EPStartXfer+0xa4>
 801d4e6:	e309      	b.n	801dafc <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801d4e8:	687a      	ldr	r2, [r7, #4]
 801d4ea:	683b      	ldr	r3, [r7, #0]
 801d4ec:	781b      	ldrb	r3, [r3, #0]
 801d4ee:	009b      	lsls	r3, r3, #2
 801d4f0:	18d3      	adds	r3, r2, r3
 801d4f2:	881b      	ldrh	r3, [r3, #0]
 801d4f4:	b29a      	uxth	r2, r3
 801d4f6:	2056      	movs	r0, #86	@ 0x56
 801d4f8:	183b      	adds	r3, r7, r0
 801d4fa:	49c8      	ldr	r1, [pc, #800]	@ (801d81c <USB_EPStartXfer+0x3d8>)
 801d4fc:	400a      	ands	r2, r1
 801d4fe:	801a      	strh	r2, [r3, #0]
 801d500:	687a      	ldr	r2, [r7, #4]
 801d502:	683b      	ldr	r3, [r7, #0]
 801d504:	781b      	ldrb	r3, [r3, #0]
 801d506:	009b      	lsls	r3, r3, #2
 801d508:	18d3      	adds	r3, r2, r3
 801d50a:	183a      	adds	r2, r7, r0
 801d50c:	8812      	ldrh	r2, [r2, #0]
 801d50e:	49c4      	ldr	r1, [pc, #784]	@ (801d820 <USB_EPStartXfer+0x3dc>)
 801d510:	430a      	orrs	r2, r1
 801d512:	b292      	uxth	r2, r2
 801d514:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801d516:	683b      	ldr	r3, [r7, #0]
 801d518:	6a1a      	ldr	r2, [r3, #32]
 801d51a:	1d7b      	adds	r3, r7, #5
 801d51c:	33ff      	adds	r3, #255	@ 0xff
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	1ad2      	subs	r2, r2, r3
 801d522:	683b      	ldr	r3, [r7, #0]
 801d524:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801d526:	687a      	ldr	r2, [r7, #4]
 801d528:	683b      	ldr	r3, [r7, #0]
 801d52a:	781b      	ldrb	r3, [r3, #0]
 801d52c:	009b      	lsls	r3, r3, #2
 801d52e:	18d3      	adds	r3, r2, r3
 801d530:	881b      	ldrh	r3, [r3, #0]
 801d532:	b29b      	uxth	r3, r3
 801d534:	001a      	movs	r2, r3
 801d536:	2340      	movs	r3, #64	@ 0x40
 801d538:	4013      	ands	r3, r2
 801d53a:	d100      	bne.n	801d53e <USB_EPStartXfer+0xfa>
 801d53c:	e176      	b.n	801d82c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	633b      	str	r3, [r7, #48]	@ 0x30
 801d542:	683b      	ldr	r3, [r7, #0]
 801d544:	785b      	ldrb	r3, [r3, #1]
 801d546:	2b00      	cmp	r3, #0
 801d548:	d000      	beq.n	801d54c <USB_EPStartXfer+0x108>
 801d54a:	e074      	b.n	801d636 <USB_EPStartXfer+0x1f2>
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	2250      	movs	r2, #80	@ 0x50
 801d554:	5a9b      	ldrh	r3, [r3, r2]
 801d556:	b29b      	uxth	r3, r3
 801d558:	001a      	movs	r2, r3
 801d55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d55c:	189b      	adds	r3, r3, r2
 801d55e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d560:	683b      	ldr	r3, [r7, #0]
 801d562:	781b      	ldrb	r3, [r3, #0]
 801d564:	00da      	lsls	r2, r3, #3
 801d566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d568:	18d3      	adds	r3, r2, r3
 801d56a:	4aae      	ldr	r2, [pc, #696]	@ (801d824 <USB_EPStartXfer+0x3e0>)
 801d56c:	4694      	mov	ip, r2
 801d56e:	4463      	add	r3, ip
 801d570:	627b      	str	r3, [r7, #36]	@ 0x24
 801d572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d574:	881b      	ldrh	r3, [r3, #0]
 801d576:	b29b      	uxth	r3, r3
 801d578:	059b      	lsls	r3, r3, #22
 801d57a:	0d9b      	lsrs	r3, r3, #22
 801d57c:	b29a      	uxth	r2, r3
 801d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d580:	801a      	strh	r2, [r3, #0]
 801d582:	1d7b      	adds	r3, r7, #5
 801d584:	33ff      	adds	r3, #255	@ 0xff
 801d586:	681b      	ldr	r3, [r3, #0]
 801d588:	2b3e      	cmp	r3, #62	@ 0x3e
 801d58a:	d924      	bls.n	801d5d6 <USB_EPStartXfer+0x192>
 801d58c:	1d7b      	adds	r3, r7, #5
 801d58e:	33ff      	adds	r3, #255	@ 0xff
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	095b      	lsrs	r3, r3, #5
 801d594:	1c7a      	adds	r2, r7, #1
 801d596:	32ff      	adds	r2, #255	@ 0xff
 801d598:	6013      	str	r3, [r2, #0]
 801d59a:	1d7b      	adds	r3, r7, #5
 801d59c:	33ff      	adds	r3, #255	@ 0xff
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	221f      	movs	r2, #31
 801d5a2:	4013      	ands	r3, r2
 801d5a4:	d106      	bne.n	801d5b4 <USB_EPStartXfer+0x170>
 801d5a6:	1c7b      	adds	r3, r7, #1
 801d5a8:	33ff      	adds	r3, #255	@ 0xff
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	3b01      	subs	r3, #1
 801d5ae:	1c7a      	adds	r2, r7, #1
 801d5b0:	32ff      	adds	r2, #255	@ 0xff
 801d5b2:	6013      	str	r3, [r2, #0]
 801d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5b6:	881b      	ldrh	r3, [r3, #0]
 801d5b8:	b29a      	uxth	r2, r3
 801d5ba:	1c7b      	adds	r3, r7, #1
 801d5bc:	33ff      	adds	r3, #255	@ 0xff
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	029b      	lsls	r3, r3, #10
 801d5c4:	b29b      	uxth	r3, r3
 801d5c6:	4313      	orrs	r3, r2
 801d5c8:	b29b      	uxth	r3, r3
 801d5ca:	4a97      	ldr	r2, [pc, #604]	@ (801d828 <USB_EPStartXfer+0x3e4>)
 801d5cc:	4313      	orrs	r3, r2
 801d5ce:	b29a      	uxth	r2, r3
 801d5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5d2:	801a      	strh	r2, [r3, #0]
 801d5d4:	e04a      	b.n	801d66c <USB_EPStartXfer+0x228>
 801d5d6:	1d7b      	adds	r3, r7, #5
 801d5d8:	33ff      	adds	r3, #255	@ 0xff
 801d5da:	681b      	ldr	r3, [r3, #0]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d108      	bne.n	801d5f2 <USB_EPStartXfer+0x1ae>
 801d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5e2:	881b      	ldrh	r3, [r3, #0]
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	4a90      	ldr	r2, [pc, #576]	@ (801d828 <USB_EPStartXfer+0x3e4>)
 801d5e8:	4313      	orrs	r3, r2
 801d5ea:	b29a      	uxth	r2, r3
 801d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5ee:	801a      	strh	r2, [r3, #0]
 801d5f0:	e03c      	b.n	801d66c <USB_EPStartXfer+0x228>
 801d5f2:	1d7b      	adds	r3, r7, #5
 801d5f4:	33ff      	adds	r3, #255	@ 0xff
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	085b      	lsrs	r3, r3, #1
 801d5fa:	1c7a      	adds	r2, r7, #1
 801d5fc:	32ff      	adds	r2, #255	@ 0xff
 801d5fe:	6013      	str	r3, [r2, #0]
 801d600:	1d7b      	adds	r3, r7, #5
 801d602:	33ff      	adds	r3, #255	@ 0xff
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	2201      	movs	r2, #1
 801d608:	4013      	ands	r3, r2
 801d60a:	d006      	beq.n	801d61a <USB_EPStartXfer+0x1d6>
 801d60c:	1c7b      	adds	r3, r7, #1
 801d60e:	33ff      	adds	r3, #255	@ 0xff
 801d610:	681b      	ldr	r3, [r3, #0]
 801d612:	3301      	adds	r3, #1
 801d614:	1c7a      	adds	r2, r7, #1
 801d616:	32ff      	adds	r2, #255	@ 0xff
 801d618:	6013      	str	r3, [r2, #0]
 801d61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d61c:	881b      	ldrh	r3, [r3, #0]
 801d61e:	b29a      	uxth	r2, r3
 801d620:	1c7b      	adds	r3, r7, #1
 801d622:	33ff      	adds	r3, #255	@ 0xff
 801d624:	681b      	ldr	r3, [r3, #0]
 801d626:	b29b      	uxth	r3, r3
 801d628:	029b      	lsls	r3, r3, #10
 801d62a:	b29b      	uxth	r3, r3
 801d62c:	4313      	orrs	r3, r2
 801d62e:	b29a      	uxth	r2, r3
 801d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d632:	801a      	strh	r2, [r3, #0]
 801d634:	e01a      	b.n	801d66c <USB_EPStartXfer+0x228>
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	785b      	ldrb	r3, [r3, #1]
 801d63a:	2b01      	cmp	r3, #1
 801d63c:	d116      	bne.n	801d66c <USB_EPStartXfer+0x228>
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	2250      	movs	r2, #80	@ 0x50
 801d642:	5a9b      	ldrh	r3, [r3, r2]
 801d644:	b29b      	uxth	r3, r3
 801d646:	001a      	movs	r2, r3
 801d648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d64a:	189b      	adds	r3, r3, r2
 801d64c:	633b      	str	r3, [r7, #48]	@ 0x30
 801d64e:	683b      	ldr	r3, [r7, #0]
 801d650:	781b      	ldrb	r3, [r3, #0]
 801d652:	00da      	lsls	r2, r3, #3
 801d654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d656:	18d3      	adds	r3, r2, r3
 801d658:	4a72      	ldr	r2, [pc, #456]	@ (801d824 <USB_EPStartXfer+0x3e0>)
 801d65a:	4694      	mov	ip, r2
 801d65c:	4463      	add	r3, ip
 801d65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d660:	1d7b      	adds	r3, r7, #5
 801d662:	33ff      	adds	r3, #255	@ 0xff
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	b29a      	uxth	r2, r3
 801d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d66a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801d66c:	2076      	movs	r0, #118	@ 0x76
 801d66e:	183b      	adds	r3, r7, r0
 801d670:	683a      	ldr	r2, [r7, #0]
 801d672:	8952      	ldrh	r2, [r2, #10]
 801d674:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d676:	683b      	ldr	r3, [r7, #0]
 801d678:	6959      	ldr	r1, [r3, #20]
 801d67a:	1d7b      	adds	r3, r7, #5
 801d67c:	33ff      	adds	r3, #255	@ 0xff
 801d67e:	681b      	ldr	r3, [r3, #0]
 801d680:	b29c      	uxth	r4, r3
 801d682:	183b      	adds	r3, r7, r0
 801d684:	881a      	ldrh	r2, [r3, #0]
 801d686:	6878      	ldr	r0, [r7, #4]
 801d688:	0023      	movs	r3, r4
 801d68a:	f001 f94d 	bl	801e928 <USB_WritePMA>
            ep->xfer_buff += len;
 801d68e:	683b      	ldr	r3, [r7, #0]
 801d690:	695a      	ldr	r2, [r3, #20]
 801d692:	1d7b      	adds	r3, r7, #5
 801d694:	33ff      	adds	r3, #255	@ 0xff
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	18d2      	adds	r2, r2, r3
 801d69a:	683b      	ldr	r3, [r7, #0]
 801d69c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801d69e:	683b      	ldr	r3, [r7, #0]
 801d6a0:	6a1a      	ldr	r2, [r3, #32]
 801d6a2:	683b      	ldr	r3, [r7, #0]
 801d6a4:	691b      	ldr	r3, [r3, #16]
 801d6a6:	429a      	cmp	r2, r3
 801d6a8:	d908      	bls.n	801d6bc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801d6aa:	683b      	ldr	r3, [r7, #0]
 801d6ac:	6a1a      	ldr	r2, [r3, #32]
 801d6ae:	1d7b      	adds	r3, r7, #5
 801d6b0:	33ff      	adds	r3, #255	@ 0xff
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	1ad2      	subs	r2, r2, r3
 801d6b6:	683b      	ldr	r3, [r7, #0]
 801d6b8:	621a      	str	r2, [r3, #32]
 801d6ba:	e007      	b.n	801d6cc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	6a1b      	ldr	r3, [r3, #32]
 801d6c0:	1d7a      	adds	r2, r7, #5
 801d6c2:	32ff      	adds	r2, #255	@ 0xff
 801d6c4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801d6c6:	683b      	ldr	r3, [r7, #0]
 801d6c8:	2200      	movs	r2, #0
 801d6ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801d6cc:	683b      	ldr	r3, [r7, #0]
 801d6ce:	785b      	ldrb	r3, [r3, #1]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d000      	beq.n	801d6d6 <USB_EPStartXfer+0x292>
 801d6d4:	e070      	b.n	801d7b8 <USB_EPStartXfer+0x374>
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	61bb      	str	r3, [r7, #24]
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	2250      	movs	r2, #80	@ 0x50
 801d6de:	5a9b      	ldrh	r3, [r3, r2]
 801d6e0:	b29b      	uxth	r3, r3
 801d6e2:	001a      	movs	r2, r3
 801d6e4:	69bb      	ldr	r3, [r7, #24]
 801d6e6:	189b      	adds	r3, r3, r2
 801d6e8:	61bb      	str	r3, [r7, #24]
 801d6ea:	683b      	ldr	r3, [r7, #0]
 801d6ec:	781b      	ldrb	r3, [r3, #0]
 801d6ee:	00da      	lsls	r2, r3, #3
 801d6f0:	69bb      	ldr	r3, [r7, #24]
 801d6f2:	18d3      	adds	r3, r2, r3
 801d6f4:	4a48      	ldr	r2, [pc, #288]	@ (801d818 <USB_EPStartXfer+0x3d4>)
 801d6f6:	4694      	mov	ip, r2
 801d6f8:	4463      	add	r3, ip
 801d6fa:	617b      	str	r3, [r7, #20]
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	881b      	ldrh	r3, [r3, #0]
 801d700:	b29b      	uxth	r3, r3
 801d702:	059b      	lsls	r3, r3, #22
 801d704:	0d9b      	lsrs	r3, r3, #22
 801d706:	b29a      	uxth	r2, r3
 801d708:	697b      	ldr	r3, [r7, #20]
 801d70a:	801a      	strh	r2, [r3, #0]
 801d70c:	1d7b      	adds	r3, r7, #5
 801d70e:	33ff      	adds	r3, #255	@ 0xff
 801d710:	681b      	ldr	r3, [r3, #0]
 801d712:	2b3e      	cmp	r3, #62	@ 0x3e
 801d714:	d922      	bls.n	801d75c <USB_EPStartXfer+0x318>
 801d716:	1d7b      	adds	r3, r7, #5
 801d718:	33ff      	adds	r3, #255	@ 0xff
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	095b      	lsrs	r3, r3, #5
 801d71e:	21fc      	movs	r1, #252	@ 0xfc
 801d720:	187a      	adds	r2, r7, r1
 801d722:	6013      	str	r3, [r2, #0]
 801d724:	1d7b      	adds	r3, r7, #5
 801d726:	33ff      	adds	r3, #255	@ 0xff
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	221f      	movs	r2, #31
 801d72c:	4013      	ands	r3, r2
 801d72e:	d104      	bne.n	801d73a <USB_EPStartXfer+0x2f6>
 801d730:	187b      	adds	r3, r7, r1
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	3b01      	subs	r3, #1
 801d736:	187a      	adds	r2, r7, r1
 801d738:	6013      	str	r3, [r2, #0]
 801d73a:	697b      	ldr	r3, [r7, #20]
 801d73c:	881b      	ldrh	r3, [r3, #0]
 801d73e:	b29a      	uxth	r2, r3
 801d740:	23fc      	movs	r3, #252	@ 0xfc
 801d742:	18fb      	adds	r3, r7, r3
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	b29b      	uxth	r3, r3
 801d748:	029b      	lsls	r3, r3, #10
 801d74a:	b29b      	uxth	r3, r3
 801d74c:	4313      	orrs	r3, r2
 801d74e:	b29b      	uxth	r3, r3
 801d750:	4a35      	ldr	r2, [pc, #212]	@ (801d828 <USB_EPStartXfer+0x3e4>)
 801d752:	4313      	orrs	r3, r2
 801d754:	b29a      	uxth	r2, r3
 801d756:	697b      	ldr	r3, [r7, #20]
 801d758:	801a      	strh	r2, [r3, #0]
 801d75a:	e04a      	b.n	801d7f2 <USB_EPStartXfer+0x3ae>
 801d75c:	1d7b      	adds	r3, r7, #5
 801d75e:	33ff      	adds	r3, #255	@ 0xff
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d108      	bne.n	801d778 <USB_EPStartXfer+0x334>
 801d766:	697b      	ldr	r3, [r7, #20]
 801d768:	881b      	ldrh	r3, [r3, #0]
 801d76a:	b29b      	uxth	r3, r3
 801d76c:	4a2e      	ldr	r2, [pc, #184]	@ (801d828 <USB_EPStartXfer+0x3e4>)
 801d76e:	4313      	orrs	r3, r2
 801d770:	b29a      	uxth	r2, r3
 801d772:	697b      	ldr	r3, [r7, #20]
 801d774:	801a      	strh	r2, [r3, #0]
 801d776:	e03c      	b.n	801d7f2 <USB_EPStartXfer+0x3ae>
 801d778:	1d7b      	adds	r3, r7, #5
 801d77a:	33ff      	adds	r3, #255	@ 0xff
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	085b      	lsrs	r3, r3, #1
 801d780:	21fc      	movs	r1, #252	@ 0xfc
 801d782:	187a      	adds	r2, r7, r1
 801d784:	6013      	str	r3, [r2, #0]
 801d786:	1d7b      	adds	r3, r7, #5
 801d788:	33ff      	adds	r3, #255	@ 0xff
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	2201      	movs	r2, #1
 801d78e:	4013      	ands	r3, r2
 801d790:	d004      	beq.n	801d79c <USB_EPStartXfer+0x358>
 801d792:	187b      	adds	r3, r7, r1
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	3301      	adds	r3, #1
 801d798:	187a      	adds	r2, r7, r1
 801d79a:	6013      	str	r3, [r2, #0]
 801d79c:	697b      	ldr	r3, [r7, #20]
 801d79e:	881b      	ldrh	r3, [r3, #0]
 801d7a0:	b29a      	uxth	r2, r3
 801d7a2:	23fc      	movs	r3, #252	@ 0xfc
 801d7a4:	18fb      	adds	r3, r7, r3
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	b29b      	uxth	r3, r3
 801d7aa:	029b      	lsls	r3, r3, #10
 801d7ac:	b29b      	uxth	r3, r3
 801d7ae:	4313      	orrs	r3, r2
 801d7b0:	b29a      	uxth	r2, r3
 801d7b2:	697b      	ldr	r3, [r7, #20]
 801d7b4:	801a      	strh	r2, [r3, #0]
 801d7b6:	e01c      	b.n	801d7f2 <USB_EPStartXfer+0x3ae>
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	785b      	ldrb	r3, [r3, #1]
 801d7bc:	2b01      	cmp	r3, #1
 801d7be:	d118      	bne.n	801d7f2 <USB_EPStartXfer+0x3ae>
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	623b      	str	r3, [r7, #32]
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	2250      	movs	r2, #80	@ 0x50
 801d7c8:	5a9b      	ldrh	r3, [r3, r2]
 801d7ca:	b29b      	uxth	r3, r3
 801d7cc:	001a      	movs	r2, r3
 801d7ce:	6a3b      	ldr	r3, [r7, #32]
 801d7d0:	189b      	adds	r3, r3, r2
 801d7d2:	623b      	str	r3, [r7, #32]
 801d7d4:	683b      	ldr	r3, [r7, #0]
 801d7d6:	781b      	ldrb	r3, [r3, #0]
 801d7d8:	00da      	lsls	r2, r3, #3
 801d7da:	6a3b      	ldr	r3, [r7, #32]
 801d7dc:	18d3      	adds	r3, r2, r3
 801d7de:	4a0e      	ldr	r2, [pc, #56]	@ (801d818 <USB_EPStartXfer+0x3d4>)
 801d7e0:	4694      	mov	ip, r2
 801d7e2:	4463      	add	r3, ip
 801d7e4:	61fb      	str	r3, [r7, #28]
 801d7e6:	1d7b      	adds	r3, r7, #5
 801d7e8:	33ff      	adds	r3, #255	@ 0xff
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	b29a      	uxth	r2, r3
 801d7ee:	69fb      	ldr	r3, [r7, #28]
 801d7f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801d7f2:	2076      	movs	r0, #118	@ 0x76
 801d7f4:	183b      	adds	r3, r7, r0
 801d7f6:	683a      	ldr	r2, [r7, #0]
 801d7f8:	8912      	ldrh	r2, [r2, #8]
 801d7fa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d7fc:	683b      	ldr	r3, [r7, #0]
 801d7fe:	6959      	ldr	r1, [r3, #20]
 801d800:	1d7b      	adds	r3, r7, #5
 801d802:	33ff      	adds	r3, #255	@ 0xff
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	b29c      	uxth	r4, r3
 801d808:	183b      	adds	r3, r7, r0
 801d80a:	881a      	ldrh	r2, [r3, #0]
 801d80c:	6878      	ldr	r0, [r7, #4]
 801d80e:	0023      	movs	r3, r4
 801d810:	f001 f88a 	bl	801e928 <USB_WritePMA>
 801d814:	e329      	b.n	801de6a <USB_EPStartXfer+0xa26>
 801d816:	46c0      	nop			@ (mov r8, r8)
 801d818:	00000402 	.word	0x00000402
 801d81c:	ffff8f8f 	.word	0xffff8f8f
 801d820:	ffff8180 	.word	0xffff8180
 801d824:	00000406 	.word	0x00000406
 801d828:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801d82c:	683b      	ldr	r3, [r7, #0]
 801d82e:	785b      	ldrb	r3, [r3, #1]
 801d830:	2b00      	cmp	r3, #0
 801d832:	d000      	beq.n	801d836 <USB_EPStartXfer+0x3f2>
 801d834:	e070      	b.n	801d918 <USB_EPStartXfer+0x4d4>
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	2250      	movs	r2, #80	@ 0x50
 801d83e:	5a9b      	ldrh	r3, [r3, r2]
 801d840:	b29b      	uxth	r3, r3
 801d842:	001a      	movs	r2, r3
 801d844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d846:	189b      	adds	r3, r3, r2
 801d848:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d84a:	683b      	ldr	r3, [r7, #0]
 801d84c:	781b      	ldrb	r3, [r3, #0]
 801d84e:	00da      	lsls	r2, r3, #3
 801d850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d852:	18d3      	adds	r3, r2, r3
 801d854:	4acd      	ldr	r2, [pc, #820]	@ (801db8c <USB_EPStartXfer+0x748>)
 801d856:	4694      	mov	ip, r2
 801d858:	4463      	add	r3, ip
 801d85a:	647b      	str	r3, [r7, #68]	@ 0x44
 801d85c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d85e:	881b      	ldrh	r3, [r3, #0]
 801d860:	b29b      	uxth	r3, r3
 801d862:	059b      	lsls	r3, r3, #22
 801d864:	0d9b      	lsrs	r3, r3, #22
 801d866:	b29a      	uxth	r2, r3
 801d868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d86a:	801a      	strh	r2, [r3, #0]
 801d86c:	1d7b      	adds	r3, r7, #5
 801d86e:	33ff      	adds	r3, #255	@ 0xff
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	2b3e      	cmp	r3, #62	@ 0x3e
 801d874:	d922      	bls.n	801d8bc <USB_EPStartXfer+0x478>
 801d876:	1d7b      	adds	r3, r7, #5
 801d878:	33ff      	adds	r3, #255	@ 0xff
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	095b      	lsrs	r3, r3, #5
 801d87e:	21f8      	movs	r1, #248	@ 0xf8
 801d880:	187a      	adds	r2, r7, r1
 801d882:	6013      	str	r3, [r2, #0]
 801d884:	1d7b      	adds	r3, r7, #5
 801d886:	33ff      	adds	r3, #255	@ 0xff
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	221f      	movs	r2, #31
 801d88c:	4013      	ands	r3, r2
 801d88e:	d104      	bne.n	801d89a <USB_EPStartXfer+0x456>
 801d890:	187b      	adds	r3, r7, r1
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	3b01      	subs	r3, #1
 801d896:	187a      	adds	r2, r7, r1
 801d898:	6013      	str	r3, [r2, #0]
 801d89a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d89c:	881b      	ldrh	r3, [r3, #0]
 801d89e:	b29a      	uxth	r2, r3
 801d8a0:	23f8      	movs	r3, #248	@ 0xf8
 801d8a2:	18fb      	adds	r3, r7, r3
 801d8a4:	681b      	ldr	r3, [r3, #0]
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	029b      	lsls	r3, r3, #10
 801d8aa:	b29b      	uxth	r3, r3
 801d8ac:	4313      	orrs	r3, r2
 801d8ae:	b29b      	uxth	r3, r3
 801d8b0:	4ab7      	ldr	r2, [pc, #732]	@ (801db90 <USB_EPStartXfer+0x74c>)
 801d8b2:	4313      	orrs	r3, r2
 801d8b4:	b29a      	uxth	r2, r3
 801d8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8b8:	801a      	strh	r2, [r3, #0]
 801d8ba:	e04a      	b.n	801d952 <USB_EPStartXfer+0x50e>
 801d8bc:	1d7b      	adds	r3, r7, #5
 801d8be:	33ff      	adds	r3, #255	@ 0xff
 801d8c0:	681b      	ldr	r3, [r3, #0]
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d108      	bne.n	801d8d8 <USB_EPStartXfer+0x494>
 801d8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8c8:	881b      	ldrh	r3, [r3, #0]
 801d8ca:	b29b      	uxth	r3, r3
 801d8cc:	4ab0      	ldr	r2, [pc, #704]	@ (801db90 <USB_EPStartXfer+0x74c>)
 801d8ce:	4313      	orrs	r3, r2
 801d8d0:	b29a      	uxth	r2, r3
 801d8d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8d4:	801a      	strh	r2, [r3, #0]
 801d8d6:	e03c      	b.n	801d952 <USB_EPStartXfer+0x50e>
 801d8d8:	1d7b      	adds	r3, r7, #5
 801d8da:	33ff      	adds	r3, #255	@ 0xff
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	085b      	lsrs	r3, r3, #1
 801d8e0:	21f8      	movs	r1, #248	@ 0xf8
 801d8e2:	187a      	adds	r2, r7, r1
 801d8e4:	6013      	str	r3, [r2, #0]
 801d8e6:	1d7b      	adds	r3, r7, #5
 801d8e8:	33ff      	adds	r3, #255	@ 0xff
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	2201      	movs	r2, #1
 801d8ee:	4013      	ands	r3, r2
 801d8f0:	d004      	beq.n	801d8fc <USB_EPStartXfer+0x4b8>
 801d8f2:	187b      	adds	r3, r7, r1
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	3301      	adds	r3, #1
 801d8f8:	187a      	adds	r2, r7, r1
 801d8fa:	6013      	str	r3, [r2, #0]
 801d8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8fe:	881b      	ldrh	r3, [r3, #0]
 801d900:	b29a      	uxth	r2, r3
 801d902:	23f8      	movs	r3, #248	@ 0xf8
 801d904:	18fb      	adds	r3, r7, r3
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	b29b      	uxth	r3, r3
 801d90a:	029b      	lsls	r3, r3, #10
 801d90c:	b29b      	uxth	r3, r3
 801d90e:	4313      	orrs	r3, r2
 801d910:	b29a      	uxth	r2, r3
 801d912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d914:	801a      	strh	r2, [r3, #0]
 801d916:	e01c      	b.n	801d952 <USB_EPStartXfer+0x50e>
 801d918:	683b      	ldr	r3, [r7, #0]
 801d91a:	785b      	ldrb	r3, [r3, #1]
 801d91c:	2b01      	cmp	r3, #1
 801d91e:	d118      	bne.n	801d952 <USB_EPStartXfer+0x50e>
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	653b      	str	r3, [r7, #80]	@ 0x50
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	2250      	movs	r2, #80	@ 0x50
 801d928:	5a9b      	ldrh	r3, [r3, r2]
 801d92a:	b29b      	uxth	r3, r3
 801d92c:	001a      	movs	r2, r3
 801d92e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d930:	189b      	adds	r3, r3, r2
 801d932:	653b      	str	r3, [r7, #80]	@ 0x50
 801d934:	683b      	ldr	r3, [r7, #0]
 801d936:	781b      	ldrb	r3, [r3, #0]
 801d938:	00da      	lsls	r2, r3, #3
 801d93a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d93c:	18d3      	adds	r3, r2, r3
 801d93e:	4a93      	ldr	r2, [pc, #588]	@ (801db8c <USB_EPStartXfer+0x748>)
 801d940:	4694      	mov	ip, r2
 801d942:	4463      	add	r3, ip
 801d944:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d946:	1d7b      	adds	r3, r7, #5
 801d948:	33ff      	adds	r3, #255	@ 0xff
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	b29a      	uxth	r2, r3
 801d94e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d950:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801d952:	2076      	movs	r0, #118	@ 0x76
 801d954:	183b      	adds	r3, r7, r0
 801d956:	683a      	ldr	r2, [r7, #0]
 801d958:	8912      	ldrh	r2, [r2, #8]
 801d95a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d95c:	683b      	ldr	r3, [r7, #0]
 801d95e:	6959      	ldr	r1, [r3, #20]
 801d960:	1d7b      	adds	r3, r7, #5
 801d962:	33ff      	adds	r3, #255	@ 0xff
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	b29c      	uxth	r4, r3
 801d968:	183b      	adds	r3, r7, r0
 801d96a:	881a      	ldrh	r2, [r3, #0]
 801d96c:	6878      	ldr	r0, [r7, #4]
 801d96e:	0023      	movs	r3, r4
 801d970:	f000 ffda 	bl	801e928 <USB_WritePMA>
            ep->xfer_buff += len;
 801d974:	683b      	ldr	r3, [r7, #0]
 801d976:	695a      	ldr	r2, [r3, #20]
 801d978:	1d7b      	adds	r3, r7, #5
 801d97a:	33ff      	adds	r3, #255	@ 0xff
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	18d2      	adds	r2, r2, r3
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	6a1a      	ldr	r2, [r3, #32]
 801d988:	683b      	ldr	r3, [r7, #0]
 801d98a:	691b      	ldr	r3, [r3, #16]
 801d98c:	429a      	cmp	r2, r3
 801d98e:	d908      	bls.n	801d9a2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801d990:	683b      	ldr	r3, [r7, #0]
 801d992:	6a1a      	ldr	r2, [r3, #32]
 801d994:	1d7b      	adds	r3, r7, #5
 801d996:	33ff      	adds	r3, #255	@ 0xff
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	1ad2      	subs	r2, r2, r3
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	621a      	str	r2, [r3, #32]
 801d9a0:	e007      	b.n	801d9b2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801d9a2:	683b      	ldr	r3, [r7, #0]
 801d9a4:	6a1b      	ldr	r3, [r3, #32]
 801d9a6:	1d7a      	adds	r2, r7, #5
 801d9a8:	32ff      	adds	r2, #255	@ 0xff
 801d9aa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801d9ac:	683b      	ldr	r3, [r7, #0]
 801d9ae:	2200      	movs	r2, #0
 801d9b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	643b      	str	r3, [r7, #64]	@ 0x40
 801d9b6:	683b      	ldr	r3, [r7, #0]
 801d9b8:	785b      	ldrb	r3, [r3, #1]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d000      	beq.n	801d9c0 <USB_EPStartXfer+0x57c>
 801d9be:	e070      	b.n	801daa2 <USB_EPStartXfer+0x65e>
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	2250      	movs	r2, #80	@ 0x50
 801d9c8:	5a9b      	ldrh	r3, [r3, r2]
 801d9ca:	b29b      	uxth	r3, r3
 801d9cc:	001a      	movs	r2, r3
 801d9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9d0:	189b      	adds	r3, r3, r2
 801d9d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d9d4:	683b      	ldr	r3, [r7, #0]
 801d9d6:	781b      	ldrb	r3, [r3, #0]
 801d9d8:	00da      	lsls	r2, r3, #3
 801d9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9dc:	18d3      	adds	r3, r2, r3
 801d9de:	4a6d      	ldr	r2, [pc, #436]	@ (801db94 <USB_EPStartXfer+0x750>)
 801d9e0:	4694      	mov	ip, r2
 801d9e2:	4463      	add	r3, ip
 801d9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 801d9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9e8:	881b      	ldrh	r3, [r3, #0]
 801d9ea:	b29b      	uxth	r3, r3
 801d9ec:	059b      	lsls	r3, r3, #22
 801d9ee:	0d9b      	lsrs	r3, r3, #22
 801d9f0:	b29a      	uxth	r2, r3
 801d9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9f4:	801a      	strh	r2, [r3, #0]
 801d9f6:	1d7b      	adds	r3, r7, #5
 801d9f8:	33ff      	adds	r3, #255	@ 0xff
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	2b3e      	cmp	r3, #62	@ 0x3e
 801d9fe:	d922      	bls.n	801da46 <USB_EPStartXfer+0x602>
 801da00:	1d7b      	adds	r3, r7, #5
 801da02:	33ff      	adds	r3, #255	@ 0xff
 801da04:	681b      	ldr	r3, [r3, #0]
 801da06:	095b      	lsrs	r3, r3, #5
 801da08:	21f4      	movs	r1, #244	@ 0xf4
 801da0a:	187a      	adds	r2, r7, r1
 801da0c:	6013      	str	r3, [r2, #0]
 801da0e:	1d7b      	adds	r3, r7, #5
 801da10:	33ff      	adds	r3, #255	@ 0xff
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	221f      	movs	r2, #31
 801da16:	4013      	ands	r3, r2
 801da18:	d104      	bne.n	801da24 <USB_EPStartXfer+0x5e0>
 801da1a:	187b      	adds	r3, r7, r1
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	3b01      	subs	r3, #1
 801da20:	187a      	adds	r2, r7, r1
 801da22:	6013      	str	r3, [r2, #0]
 801da24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da26:	881b      	ldrh	r3, [r3, #0]
 801da28:	b29a      	uxth	r2, r3
 801da2a:	23f4      	movs	r3, #244	@ 0xf4
 801da2c:	18fb      	adds	r3, r7, r3
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	b29b      	uxth	r3, r3
 801da32:	029b      	lsls	r3, r3, #10
 801da34:	b29b      	uxth	r3, r3
 801da36:	4313      	orrs	r3, r2
 801da38:	b29b      	uxth	r3, r3
 801da3a:	4a55      	ldr	r2, [pc, #340]	@ (801db90 <USB_EPStartXfer+0x74c>)
 801da3c:	4313      	orrs	r3, r2
 801da3e:	b29a      	uxth	r2, r3
 801da40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da42:	801a      	strh	r2, [r3, #0]
 801da44:	e048      	b.n	801dad8 <USB_EPStartXfer+0x694>
 801da46:	1d7b      	adds	r3, r7, #5
 801da48:	33ff      	adds	r3, #255	@ 0xff
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d108      	bne.n	801da62 <USB_EPStartXfer+0x61e>
 801da50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da52:	881b      	ldrh	r3, [r3, #0]
 801da54:	b29b      	uxth	r3, r3
 801da56:	4a4e      	ldr	r2, [pc, #312]	@ (801db90 <USB_EPStartXfer+0x74c>)
 801da58:	4313      	orrs	r3, r2
 801da5a:	b29a      	uxth	r2, r3
 801da5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da5e:	801a      	strh	r2, [r3, #0]
 801da60:	e03a      	b.n	801dad8 <USB_EPStartXfer+0x694>
 801da62:	1d7b      	adds	r3, r7, #5
 801da64:	33ff      	adds	r3, #255	@ 0xff
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	085b      	lsrs	r3, r3, #1
 801da6a:	21f4      	movs	r1, #244	@ 0xf4
 801da6c:	187a      	adds	r2, r7, r1
 801da6e:	6013      	str	r3, [r2, #0]
 801da70:	1d7b      	adds	r3, r7, #5
 801da72:	33ff      	adds	r3, #255	@ 0xff
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	2201      	movs	r2, #1
 801da78:	4013      	ands	r3, r2
 801da7a:	d004      	beq.n	801da86 <USB_EPStartXfer+0x642>
 801da7c:	187b      	adds	r3, r7, r1
 801da7e:	681b      	ldr	r3, [r3, #0]
 801da80:	3301      	adds	r3, #1
 801da82:	187a      	adds	r2, r7, r1
 801da84:	6013      	str	r3, [r2, #0]
 801da86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da88:	881b      	ldrh	r3, [r3, #0]
 801da8a:	b29a      	uxth	r2, r3
 801da8c:	23f4      	movs	r3, #244	@ 0xf4
 801da8e:	18fb      	adds	r3, r7, r3
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	b29b      	uxth	r3, r3
 801da94:	029b      	lsls	r3, r3, #10
 801da96:	b29b      	uxth	r3, r3
 801da98:	4313      	orrs	r3, r2
 801da9a:	b29a      	uxth	r2, r3
 801da9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da9e:	801a      	strh	r2, [r3, #0]
 801daa0:	e01a      	b.n	801dad8 <USB_EPStartXfer+0x694>
 801daa2:	683b      	ldr	r3, [r7, #0]
 801daa4:	785b      	ldrb	r3, [r3, #1]
 801daa6:	2b01      	cmp	r3, #1
 801daa8:	d116      	bne.n	801dad8 <USB_EPStartXfer+0x694>
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	2250      	movs	r2, #80	@ 0x50
 801daae:	5a9b      	ldrh	r3, [r3, r2]
 801dab0:	b29b      	uxth	r3, r3
 801dab2:	001a      	movs	r2, r3
 801dab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dab6:	189b      	adds	r3, r3, r2
 801dab8:	643b      	str	r3, [r7, #64]	@ 0x40
 801daba:	683b      	ldr	r3, [r7, #0]
 801dabc:	781b      	ldrb	r3, [r3, #0]
 801dabe:	00da      	lsls	r2, r3, #3
 801dac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dac2:	18d3      	adds	r3, r2, r3
 801dac4:	4a33      	ldr	r2, [pc, #204]	@ (801db94 <USB_EPStartXfer+0x750>)
 801dac6:	4694      	mov	ip, r2
 801dac8:	4463      	add	r3, ip
 801daca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dacc:	1d7b      	adds	r3, r7, #5
 801dace:	33ff      	adds	r3, #255	@ 0xff
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	b29a      	uxth	r2, r3
 801dad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dad6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801dad8:	2076      	movs	r0, #118	@ 0x76
 801dada:	183b      	adds	r3, r7, r0
 801dadc:	683a      	ldr	r2, [r7, #0]
 801dade:	8952      	ldrh	r2, [r2, #10]
 801dae0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801dae2:	683b      	ldr	r3, [r7, #0]
 801dae4:	6959      	ldr	r1, [r3, #20]
 801dae6:	1d7b      	adds	r3, r7, #5
 801dae8:	33ff      	adds	r3, #255	@ 0xff
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	b29c      	uxth	r4, r3
 801daee:	183b      	adds	r3, r7, r0
 801daf0:	881a      	ldrh	r2, [r3, #0]
 801daf2:	6878      	ldr	r0, [r7, #4]
 801daf4:	0023      	movs	r3, r4
 801daf6:	f000 ff17 	bl	801e928 <USB_WritePMA>
 801dafa:	e1b6      	b.n	801de6a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801dafc:	683b      	ldr	r3, [r7, #0]
 801dafe:	6a1b      	ldr	r3, [r3, #32]
 801db00:	1d7a      	adds	r2, r7, #5
 801db02:	32ff      	adds	r2, #255	@ 0xff
 801db04:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801db06:	687a      	ldr	r2, [r7, #4]
 801db08:	683b      	ldr	r3, [r7, #0]
 801db0a:	781b      	ldrb	r3, [r3, #0]
 801db0c:	009b      	lsls	r3, r3, #2
 801db0e:	18d3      	adds	r3, r2, r3
 801db10:	881b      	ldrh	r3, [r3, #0]
 801db12:	b29a      	uxth	r2, r3
 801db14:	2062      	movs	r0, #98	@ 0x62
 801db16:	183b      	adds	r3, r7, r0
 801db18:	491f      	ldr	r1, [pc, #124]	@ (801db98 <USB_EPStartXfer+0x754>)
 801db1a:	400a      	ands	r2, r1
 801db1c:	801a      	strh	r2, [r3, #0]
 801db1e:	687a      	ldr	r2, [r7, #4]
 801db20:	683b      	ldr	r3, [r7, #0]
 801db22:	781b      	ldrb	r3, [r3, #0]
 801db24:	009b      	lsls	r3, r3, #2
 801db26:	18d3      	adds	r3, r2, r3
 801db28:	183a      	adds	r2, r7, r0
 801db2a:	8812      	ldrh	r2, [r2, #0]
 801db2c:	491b      	ldr	r1, [pc, #108]	@ (801db9c <USB_EPStartXfer+0x758>)
 801db2e:	430a      	orrs	r2, r1
 801db30:	b292      	uxth	r2, r2
 801db32:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	2250      	movs	r2, #80	@ 0x50
 801db3c:	5a9b      	ldrh	r3, [r3, r2]
 801db3e:	b29b      	uxth	r3, r3
 801db40:	001a      	movs	r2, r3
 801db42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801db44:	189b      	adds	r3, r3, r2
 801db46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801db48:	683b      	ldr	r3, [r7, #0]
 801db4a:	781b      	ldrb	r3, [r3, #0]
 801db4c:	00da      	lsls	r2, r3, #3
 801db4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801db50:	18d3      	adds	r3, r2, r3
 801db52:	4a0e      	ldr	r2, [pc, #56]	@ (801db8c <USB_EPStartXfer+0x748>)
 801db54:	4694      	mov	ip, r2
 801db56:	4463      	add	r3, ip
 801db58:	65bb      	str	r3, [r7, #88]	@ 0x58
 801db5a:	1d7b      	adds	r3, r7, #5
 801db5c:	33ff      	adds	r3, #255	@ 0xff
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	b29a      	uxth	r2, r3
 801db62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801db64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801db66:	2076      	movs	r0, #118	@ 0x76
 801db68:	183b      	adds	r3, r7, r0
 801db6a:	683a      	ldr	r2, [r7, #0]
 801db6c:	8912      	ldrh	r2, [r2, #8]
 801db6e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801db70:	683b      	ldr	r3, [r7, #0]
 801db72:	6959      	ldr	r1, [r3, #20]
 801db74:	1d7b      	adds	r3, r7, #5
 801db76:	33ff      	adds	r3, #255	@ 0xff
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	b29c      	uxth	r4, r3
 801db7c:	183b      	adds	r3, r7, r0
 801db7e:	881a      	ldrh	r2, [r3, #0]
 801db80:	6878      	ldr	r0, [r7, #4]
 801db82:	0023      	movs	r3, r4
 801db84:	f000 fed0 	bl	801e928 <USB_WritePMA>
 801db88:	e16f      	b.n	801de6a <USB_EPStartXfer+0xa26>
 801db8a:	46c0      	nop			@ (mov r8, r8)
 801db8c:	00000402 	.word	0x00000402
 801db90:	ffff8000 	.word	0xffff8000
 801db94:	00000406 	.word	0x00000406
 801db98:	ffff8e8f 	.word	0xffff8e8f
 801db9c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801dba0:	683b      	ldr	r3, [r7, #0]
 801dba2:	6a1a      	ldr	r2, [r3, #32]
 801dba4:	1d7b      	adds	r3, r7, #5
 801dba6:	33ff      	adds	r3, #255	@ 0xff
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	1ad2      	subs	r2, r2, r3
 801dbac:	683b      	ldr	r3, [r7, #0]
 801dbae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801dbb0:	687a      	ldr	r2, [r7, #4]
 801dbb2:	683b      	ldr	r3, [r7, #0]
 801dbb4:	781b      	ldrb	r3, [r3, #0]
 801dbb6:	009b      	lsls	r3, r3, #2
 801dbb8:	18d3      	adds	r3, r2, r3
 801dbba:	881b      	ldrh	r3, [r3, #0]
 801dbbc:	b29b      	uxth	r3, r3
 801dbbe:	001a      	movs	r2, r3
 801dbc0:	2340      	movs	r3, #64	@ 0x40
 801dbc2:	4013      	ands	r3, r2
 801dbc4:	d100      	bne.n	801dbc8 <USB_EPStartXfer+0x784>
 801dbc6:	e0a4      	b.n	801dd12 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	673b      	str	r3, [r7, #112]	@ 0x70
 801dbcc:	683b      	ldr	r3, [r7, #0]
 801dbce:	785b      	ldrb	r3, [r3, #1]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d000      	beq.n	801dbd6 <USB_EPStartXfer+0x792>
 801dbd4:	e070      	b.n	801dcb8 <USB_EPStartXfer+0x874>
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dbda:	687b      	ldr	r3, [r7, #4]
 801dbdc:	2250      	movs	r2, #80	@ 0x50
 801dbde:	5a9b      	ldrh	r3, [r3, r2]
 801dbe0:	b29b      	uxth	r3, r3
 801dbe2:	001a      	movs	r2, r3
 801dbe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbe6:	189b      	adds	r3, r3, r2
 801dbe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dbea:	683b      	ldr	r3, [r7, #0]
 801dbec:	781b      	ldrb	r3, [r3, #0]
 801dbee:	00da      	lsls	r2, r3, #3
 801dbf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbf2:	18d3      	adds	r3, r2, r3
 801dbf4:	4abc      	ldr	r2, [pc, #752]	@ (801dee8 <USB_EPStartXfer+0xaa4>)
 801dbf6:	4694      	mov	ip, r2
 801dbf8:	4463      	add	r3, ip
 801dbfa:	667b      	str	r3, [r7, #100]	@ 0x64
 801dbfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbfe:	881b      	ldrh	r3, [r3, #0]
 801dc00:	b29b      	uxth	r3, r3
 801dc02:	059b      	lsls	r3, r3, #22
 801dc04:	0d9b      	lsrs	r3, r3, #22
 801dc06:	b29a      	uxth	r2, r3
 801dc08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc0a:	801a      	strh	r2, [r3, #0]
 801dc0c:	1d7b      	adds	r3, r7, #5
 801dc0e:	33ff      	adds	r3, #255	@ 0xff
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	2b3e      	cmp	r3, #62	@ 0x3e
 801dc14:	d922      	bls.n	801dc5c <USB_EPStartXfer+0x818>
 801dc16:	1d7b      	adds	r3, r7, #5
 801dc18:	33ff      	adds	r3, #255	@ 0xff
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	095b      	lsrs	r3, r3, #5
 801dc1e:	21f0      	movs	r1, #240	@ 0xf0
 801dc20:	187a      	adds	r2, r7, r1
 801dc22:	6013      	str	r3, [r2, #0]
 801dc24:	1d7b      	adds	r3, r7, #5
 801dc26:	33ff      	adds	r3, #255	@ 0xff
 801dc28:	681b      	ldr	r3, [r3, #0]
 801dc2a:	221f      	movs	r2, #31
 801dc2c:	4013      	ands	r3, r2
 801dc2e:	d104      	bne.n	801dc3a <USB_EPStartXfer+0x7f6>
 801dc30:	187b      	adds	r3, r7, r1
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	3b01      	subs	r3, #1
 801dc36:	187a      	adds	r2, r7, r1
 801dc38:	6013      	str	r3, [r2, #0]
 801dc3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc3c:	881b      	ldrh	r3, [r3, #0]
 801dc3e:	b29a      	uxth	r2, r3
 801dc40:	23f0      	movs	r3, #240	@ 0xf0
 801dc42:	18fb      	adds	r3, r7, r3
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	029b      	lsls	r3, r3, #10
 801dc4a:	b29b      	uxth	r3, r3
 801dc4c:	4313      	orrs	r3, r2
 801dc4e:	b29b      	uxth	r3, r3
 801dc50:	4aa6      	ldr	r2, [pc, #664]	@ (801deec <USB_EPStartXfer+0xaa8>)
 801dc52:	4313      	orrs	r3, r2
 801dc54:	b29a      	uxth	r2, r3
 801dc56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc58:	801a      	strh	r2, [r3, #0]
 801dc5a:	e048      	b.n	801dcee <USB_EPStartXfer+0x8aa>
 801dc5c:	1d7b      	adds	r3, r7, #5
 801dc5e:	33ff      	adds	r3, #255	@ 0xff
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d108      	bne.n	801dc78 <USB_EPStartXfer+0x834>
 801dc66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc68:	881b      	ldrh	r3, [r3, #0]
 801dc6a:	b29b      	uxth	r3, r3
 801dc6c:	4a9f      	ldr	r2, [pc, #636]	@ (801deec <USB_EPStartXfer+0xaa8>)
 801dc6e:	4313      	orrs	r3, r2
 801dc70:	b29a      	uxth	r2, r3
 801dc72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc74:	801a      	strh	r2, [r3, #0]
 801dc76:	e03a      	b.n	801dcee <USB_EPStartXfer+0x8aa>
 801dc78:	1d7b      	adds	r3, r7, #5
 801dc7a:	33ff      	adds	r3, #255	@ 0xff
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	085b      	lsrs	r3, r3, #1
 801dc80:	21f0      	movs	r1, #240	@ 0xf0
 801dc82:	187a      	adds	r2, r7, r1
 801dc84:	6013      	str	r3, [r2, #0]
 801dc86:	1d7b      	adds	r3, r7, #5
 801dc88:	33ff      	adds	r3, #255	@ 0xff
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	2201      	movs	r2, #1
 801dc8e:	4013      	ands	r3, r2
 801dc90:	d004      	beq.n	801dc9c <USB_EPStartXfer+0x858>
 801dc92:	187b      	adds	r3, r7, r1
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	3301      	adds	r3, #1
 801dc98:	187a      	adds	r2, r7, r1
 801dc9a:	6013      	str	r3, [r2, #0]
 801dc9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc9e:	881b      	ldrh	r3, [r3, #0]
 801dca0:	b29a      	uxth	r2, r3
 801dca2:	23f0      	movs	r3, #240	@ 0xf0
 801dca4:	18fb      	adds	r3, r7, r3
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	b29b      	uxth	r3, r3
 801dcaa:	029b      	lsls	r3, r3, #10
 801dcac:	b29b      	uxth	r3, r3
 801dcae:	4313      	orrs	r3, r2
 801dcb0:	b29a      	uxth	r2, r3
 801dcb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dcb4:	801a      	strh	r2, [r3, #0]
 801dcb6:	e01a      	b.n	801dcee <USB_EPStartXfer+0x8aa>
 801dcb8:	683b      	ldr	r3, [r7, #0]
 801dcba:	785b      	ldrb	r3, [r3, #1]
 801dcbc:	2b01      	cmp	r3, #1
 801dcbe:	d116      	bne.n	801dcee <USB_EPStartXfer+0x8aa>
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	2250      	movs	r2, #80	@ 0x50
 801dcc4:	5a9b      	ldrh	r3, [r3, r2]
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	001a      	movs	r2, r3
 801dcca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dccc:	189b      	adds	r3, r3, r2
 801dcce:	673b      	str	r3, [r7, #112]	@ 0x70
 801dcd0:	683b      	ldr	r3, [r7, #0]
 801dcd2:	781b      	ldrb	r3, [r3, #0]
 801dcd4:	00da      	lsls	r2, r3, #3
 801dcd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dcd8:	18d3      	adds	r3, r2, r3
 801dcda:	4a83      	ldr	r2, [pc, #524]	@ (801dee8 <USB_EPStartXfer+0xaa4>)
 801dcdc:	4694      	mov	ip, r2
 801dcde:	4463      	add	r3, ip
 801dce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dce2:	1d7b      	adds	r3, r7, #5
 801dce4:	33ff      	adds	r3, #255	@ 0xff
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	b29a      	uxth	r2, r3
 801dcea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dcec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801dcee:	2076      	movs	r0, #118	@ 0x76
 801dcf0:	183b      	adds	r3, r7, r0
 801dcf2:	683a      	ldr	r2, [r7, #0]
 801dcf4:	8952      	ldrh	r2, [r2, #10]
 801dcf6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801dcf8:	683b      	ldr	r3, [r7, #0]
 801dcfa:	6959      	ldr	r1, [r3, #20]
 801dcfc:	1d7b      	adds	r3, r7, #5
 801dcfe:	33ff      	adds	r3, #255	@ 0xff
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	b29c      	uxth	r4, r3
 801dd04:	183b      	adds	r3, r7, r0
 801dd06:	881a      	ldrh	r2, [r3, #0]
 801dd08:	6878      	ldr	r0, [r7, #4]
 801dd0a:	0023      	movs	r3, r4
 801dd0c:	f000 fe0c 	bl	801e928 <USB_WritePMA>
 801dd10:	e0ab      	b.n	801de6a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801dd12:	683b      	ldr	r3, [r7, #0]
 801dd14:	785b      	ldrb	r3, [r3, #1]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d000      	beq.n	801dd1c <USB_EPStartXfer+0x8d8>
 801dd1a:	e070      	b.n	801ddfe <USB_EPStartXfer+0x9ba>
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	2250      	movs	r2, #80	@ 0x50
 801dd24:	5a9b      	ldrh	r3, [r3, r2]
 801dd26:	b29b      	uxth	r3, r3
 801dd28:	001a      	movs	r2, r3
 801dd2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd2c:	189b      	adds	r3, r3, r2
 801dd2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dd30:	683b      	ldr	r3, [r7, #0]
 801dd32:	781b      	ldrb	r3, [r3, #0]
 801dd34:	00da      	lsls	r2, r3, #3
 801dd36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd38:	18d3      	adds	r3, r2, r3
 801dd3a:	4a6d      	ldr	r2, [pc, #436]	@ (801def0 <USB_EPStartXfer+0xaac>)
 801dd3c:	4694      	mov	ip, r2
 801dd3e:	4463      	add	r3, ip
 801dd40:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dd42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd44:	881b      	ldrh	r3, [r3, #0]
 801dd46:	b29b      	uxth	r3, r3
 801dd48:	059b      	lsls	r3, r3, #22
 801dd4a:	0d9b      	lsrs	r3, r3, #22
 801dd4c:	b29a      	uxth	r2, r3
 801dd4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd50:	801a      	strh	r2, [r3, #0]
 801dd52:	1d7b      	adds	r3, r7, #5
 801dd54:	33ff      	adds	r3, #255	@ 0xff
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	2b3e      	cmp	r3, #62	@ 0x3e
 801dd5a:	d922      	bls.n	801dda2 <USB_EPStartXfer+0x95e>
 801dd5c:	1d7b      	adds	r3, r7, #5
 801dd5e:	33ff      	adds	r3, #255	@ 0xff
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	095b      	lsrs	r3, r3, #5
 801dd64:	21ec      	movs	r1, #236	@ 0xec
 801dd66:	187a      	adds	r2, r7, r1
 801dd68:	6013      	str	r3, [r2, #0]
 801dd6a:	1d7b      	adds	r3, r7, #5
 801dd6c:	33ff      	adds	r3, #255	@ 0xff
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	221f      	movs	r2, #31
 801dd72:	4013      	ands	r3, r2
 801dd74:	d104      	bne.n	801dd80 <USB_EPStartXfer+0x93c>
 801dd76:	187b      	adds	r3, r7, r1
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	3b01      	subs	r3, #1
 801dd7c:	187a      	adds	r2, r7, r1
 801dd7e:	6013      	str	r3, [r2, #0]
 801dd80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd82:	881b      	ldrh	r3, [r3, #0]
 801dd84:	b29a      	uxth	r2, r3
 801dd86:	23ec      	movs	r3, #236	@ 0xec
 801dd88:	18fb      	adds	r3, r7, r3
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	029b      	lsls	r3, r3, #10
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	4313      	orrs	r3, r2
 801dd94:	b29b      	uxth	r3, r3
 801dd96:	4a55      	ldr	r2, [pc, #340]	@ (801deec <USB_EPStartXfer+0xaa8>)
 801dd98:	4313      	orrs	r3, r2
 801dd9a:	b29a      	uxth	r2, r3
 801dd9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd9e:	801a      	strh	r2, [r3, #0]
 801dda0:	e052      	b.n	801de48 <USB_EPStartXfer+0xa04>
 801dda2:	1d7b      	adds	r3, r7, #5
 801dda4:	33ff      	adds	r3, #255	@ 0xff
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	d108      	bne.n	801ddbe <USB_EPStartXfer+0x97a>
 801ddac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddae:	881b      	ldrh	r3, [r3, #0]
 801ddb0:	b29b      	uxth	r3, r3
 801ddb2:	4a4e      	ldr	r2, [pc, #312]	@ (801deec <USB_EPStartXfer+0xaa8>)
 801ddb4:	4313      	orrs	r3, r2
 801ddb6:	b29a      	uxth	r2, r3
 801ddb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddba:	801a      	strh	r2, [r3, #0]
 801ddbc:	e044      	b.n	801de48 <USB_EPStartXfer+0xa04>
 801ddbe:	1d7b      	adds	r3, r7, #5
 801ddc0:	33ff      	adds	r3, #255	@ 0xff
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	085b      	lsrs	r3, r3, #1
 801ddc6:	21ec      	movs	r1, #236	@ 0xec
 801ddc8:	187a      	adds	r2, r7, r1
 801ddca:	6013      	str	r3, [r2, #0]
 801ddcc:	1d7b      	adds	r3, r7, #5
 801ddce:	33ff      	adds	r3, #255	@ 0xff
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	2201      	movs	r2, #1
 801ddd4:	4013      	ands	r3, r2
 801ddd6:	d004      	beq.n	801dde2 <USB_EPStartXfer+0x99e>
 801ddd8:	187b      	adds	r3, r7, r1
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	3301      	adds	r3, #1
 801ddde:	187a      	adds	r2, r7, r1
 801dde0:	6013      	str	r3, [r2, #0]
 801dde2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dde4:	881b      	ldrh	r3, [r3, #0]
 801dde6:	b29a      	uxth	r2, r3
 801dde8:	23ec      	movs	r3, #236	@ 0xec
 801ddea:	18fb      	adds	r3, r7, r3
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	b29b      	uxth	r3, r3
 801ddf0:	029b      	lsls	r3, r3, #10
 801ddf2:	b29b      	uxth	r3, r3
 801ddf4:	4313      	orrs	r3, r2
 801ddf6:	b29a      	uxth	r2, r3
 801ddf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddfa:	801a      	strh	r2, [r3, #0]
 801ddfc:	e024      	b.n	801de48 <USB_EPStartXfer+0xa04>
 801ddfe:	683b      	ldr	r3, [r7, #0]
 801de00:	785b      	ldrb	r3, [r3, #1]
 801de02:	2b01      	cmp	r3, #1
 801de04:	d120      	bne.n	801de48 <USB_EPStartXfer+0xa04>
 801de06:	687b      	ldr	r3, [r7, #4]
 801de08:	2184      	movs	r1, #132	@ 0x84
 801de0a:	187a      	adds	r2, r7, r1
 801de0c:	6013      	str	r3, [r2, #0]
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	2250      	movs	r2, #80	@ 0x50
 801de12:	5a9b      	ldrh	r3, [r3, r2]
 801de14:	b29b      	uxth	r3, r3
 801de16:	001a      	movs	r2, r3
 801de18:	187b      	adds	r3, r7, r1
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	189b      	adds	r3, r3, r2
 801de1e:	187a      	adds	r2, r7, r1
 801de20:	6013      	str	r3, [r2, #0]
 801de22:	683b      	ldr	r3, [r7, #0]
 801de24:	781b      	ldrb	r3, [r3, #0]
 801de26:	00da      	lsls	r2, r3, #3
 801de28:	187b      	adds	r3, r7, r1
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	18d3      	adds	r3, r2, r3
 801de2e:	4a30      	ldr	r2, [pc, #192]	@ (801def0 <USB_EPStartXfer+0xaac>)
 801de30:	4694      	mov	ip, r2
 801de32:	4463      	add	r3, ip
 801de34:	2180      	movs	r1, #128	@ 0x80
 801de36:	187a      	adds	r2, r7, r1
 801de38:	6013      	str	r3, [r2, #0]
 801de3a:	1d7b      	adds	r3, r7, #5
 801de3c:	33ff      	adds	r3, #255	@ 0xff
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	b29a      	uxth	r2, r3
 801de42:	187b      	adds	r3, r7, r1
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801de48:	2076      	movs	r0, #118	@ 0x76
 801de4a:	183b      	adds	r3, r7, r0
 801de4c:	683a      	ldr	r2, [r7, #0]
 801de4e:	8912      	ldrh	r2, [r2, #8]
 801de50:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801de52:	683b      	ldr	r3, [r7, #0]
 801de54:	6959      	ldr	r1, [r3, #20]
 801de56:	1d7b      	adds	r3, r7, #5
 801de58:	33ff      	adds	r3, #255	@ 0xff
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	b29c      	uxth	r4, r3
 801de5e:	183b      	adds	r3, r7, r0
 801de60:	881a      	ldrh	r2, [r3, #0]
 801de62:	6878      	ldr	r0, [r7, #4]
 801de64:	0023      	movs	r3, r4
 801de66:	f000 fd5f 	bl	801e928 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801de6a:	687a      	ldr	r2, [r7, #4]
 801de6c:	683b      	ldr	r3, [r7, #0]
 801de6e:	781b      	ldrb	r3, [r3, #0]
 801de70:	009b      	lsls	r3, r3, #2
 801de72:	18d3      	adds	r3, r2, r3
 801de74:	881b      	ldrh	r3, [r3, #0]
 801de76:	b29a      	uxth	r2, r3
 801de78:	200a      	movs	r0, #10
 801de7a:	183b      	adds	r3, r7, r0
 801de7c:	491d      	ldr	r1, [pc, #116]	@ (801def4 <USB_EPStartXfer+0xab0>)
 801de7e:	400a      	ands	r2, r1
 801de80:	801a      	strh	r2, [r3, #0]
 801de82:	183b      	adds	r3, r7, r0
 801de84:	183a      	adds	r2, r7, r0
 801de86:	8812      	ldrh	r2, [r2, #0]
 801de88:	2110      	movs	r1, #16
 801de8a:	404a      	eors	r2, r1
 801de8c:	801a      	strh	r2, [r3, #0]
 801de8e:	183b      	adds	r3, r7, r0
 801de90:	183a      	adds	r2, r7, r0
 801de92:	8812      	ldrh	r2, [r2, #0]
 801de94:	2120      	movs	r1, #32
 801de96:	404a      	eors	r2, r1
 801de98:	801a      	strh	r2, [r3, #0]
 801de9a:	687a      	ldr	r2, [r7, #4]
 801de9c:	683b      	ldr	r3, [r7, #0]
 801de9e:	781b      	ldrb	r3, [r3, #0]
 801dea0:	009b      	lsls	r3, r3, #2
 801dea2:	18d3      	adds	r3, r2, r3
 801dea4:	183a      	adds	r2, r7, r0
 801dea6:	8812      	ldrh	r2, [r2, #0]
 801dea8:	4913      	ldr	r1, [pc, #76]	@ (801def8 <USB_EPStartXfer+0xab4>)
 801deaa:	430a      	orrs	r2, r1
 801deac:	b292      	uxth	r2, r2
 801deae:	801a      	strh	r2, [r3, #0]
 801deb0:	f000 fbf4 	bl	801e69c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801deb4:	683b      	ldr	r3, [r7, #0]
 801deb6:	7b1b      	ldrb	r3, [r3, #12]
 801deb8:	2b00      	cmp	r3, #0
 801deba:	d000      	beq.n	801debe <USB_EPStartXfer+0xa7a>
 801debc:	e0a9      	b.n	801e012 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801debe:	683b      	ldr	r3, [r7, #0]
 801dec0:	699a      	ldr	r2, [r3, #24]
 801dec2:	683b      	ldr	r3, [r7, #0]
 801dec4:	691b      	ldr	r3, [r3, #16]
 801dec6:	429a      	cmp	r2, r3
 801dec8:	d918      	bls.n	801defc <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801deca:	683b      	ldr	r3, [r7, #0]
 801decc:	691b      	ldr	r3, [r3, #16]
 801dece:	1d7a      	adds	r2, r7, #5
 801ded0:	32ff      	adds	r2, #255	@ 0xff
 801ded2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801ded4:	683b      	ldr	r3, [r7, #0]
 801ded6:	699a      	ldr	r2, [r3, #24]
 801ded8:	1d7b      	adds	r3, r7, #5
 801deda:	33ff      	adds	r3, #255	@ 0xff
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	1ad2      	subs	r2, r2, r3
 801dee0:	683b      	ldr	r3, [r7, #0]
 801dee2:	619a      	str	r2, [r3, #24]
 801dee4:	e012      	b.n	801df0c <USB_EPStartXfer+0xac8>
 801dee6:	46c0      	nop			@ (mov r8, r8)
 801dee8:	00000406 	.word	0x00000406
 801deec:	ffff8000 	.word	0xffff8000
 801def0:	00000402 	.word	0x00000402
 801def4:	ffff8fbf 	.word	0xffff8fbf
 801def8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801defc:	683b      	ldr	r3, [r7, #0]
 801defe:	699b      	ldr	r3, [r3, #24]
 801df00:	1d7a      	adds	r2, r7, #5
 801df02:	32ff      	adds	r2, #255	@ 0xff
 801df04:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801df06:	683b      	ldr	r3, [r7, #0]
 801df08:	2200      	movs	r2, #0
 801df0a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	2190      	movs	r1, #144	@ 0x90
 801df10:	187a      	adds	r2, r7, r1
 801df12:	6013      	str	r3, [r2, #0]
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	2250      	movs	r2, #80	@ 0x50
 801df18:	5a9b      	ldrh	r3, [r3, r2]
 801df1a:	b29b      	uxth	r3, r3
 801df1c:	001a      	movs	r2, r3
 801df1e:	187b      	adds	r3, r7, r1
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	189b      	adds	r3, r3, r2
 801df24:	187a      	adds	r2, r7, r1
 801df26:	6013      	str	r3, [r2, #0]
 801df28:	683b      	ldr	r3, [r7, #0]
 801df2a:	781b      	ldrb	r3, [r3, #0]
 801df2c:	00da      	lsls	r2, r3, #3
 801df2e:	187b      	adds	r3, r7, r1
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	18d3      	adds	r3, r2, r3
 801df34:	4acf      	ldr	r2, [pc, #828]	@ (801e274 <USB_EPStartXfer+0xe30>)
 801df36:	4694      	mov	ip, r2
 801df38:	4463      	add	r3, ip
 801df3a:	218c      	movs	r1, #140	@ 0x8c
 801df3c:	187a      	adds	r2, r7, r1
 801df3e:	6013      	str	r3, [r2, #0]
 801df40:	187b      	adds	r3, r7, r1
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	881b      	ldrh	r3, [r3, #0]
 801df46:	b29b      	uxth	r3, r3
 801df48:	059b      	lsls	r3, r3, #22
 801df4a:	0d9b      	lsrs	r3, r3, #22
 801df4c:	b29a      	uxth	r2, r3
 801df4e:	187b      	adds	r3, r7, r1
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	801a      	strh	r2, [r3, #0]
 801df54:	1d7b      	adds	r3, r7, #5
 801df56:	33ff      	adds	r3, #255	@ 0xff
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	2b3e      	cmp	r3, #62	@ 0x3e
 801df5c:	d925      	bls.n	801dfaa <USB_EPStartXfer+0xb66>
 801df5e:	1d7b      	adds	r3, r7, #5
 801df60:	33ff      	adds	r3, #255	@ 0xff
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	095b      	lsrs	r3, r3, #5
 801df66:	21e8      	movs	r1, #232	@ 0xe8
 801df68:	187a      	adds	r2, r7, r1
 801df6a:	6013      	str	r3, [r2, #0]
 801df6c:	1d7b      	adds	r3, r7, #5
 801df6e:	33ff      	adds	r3, #255	@ 0xff
 801df70:	681b      	ldr	r3, [r3, #0]
 801df72:	221f      	movs	r2, #31
 801df74:	4013      	ands	r3, r2
 801df76:	d104      	bne.n	801df82 <USB_EPStartXfer+0xb3e>
 801df78:	187b      	adds	r3, r7, r1
 801df7a:	681b      	ldr	r3, [r3, #0]
 801df7c:	3b01      	subs	r3, #1
 801df7e:	187a      	adds	r2, r7, r1
 801df80:	6013      	str	r3, [r2, #0]
 801df82:	218c      	movs	r1, #140	@ 0x8c
 801df84:	187b      	adds	r3, r7, r1
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	881b      	ldrh	r3, [r3, #0]
 801df8a:	b29a      	uxth	r2, r3
 801df8c:	23e8      	movs	r3, #232	@ 0xe8
 801df8e:	18fb      	adds	r3, r7, r3
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	b29b      	uxth	r3, r3
 801df94:	029b      	lsls	r3, r3, #10
 801df96:	b29b      	uxth	r3, r3
 801df98:	4313      	orrs	r3, r2
 801df9a:	b29b      	uxth	r3, r3
 801df9c:	4ab6      	ldr	r2, [pc, #728]	@ (801e278 <USB_EPStartXfer+0xe34>)
 801df9e:	4313      	orrs	r3, r2
 801dfa0:	b29a      	uxth	r2, r3
 801dfa2:	187b      	adds	r3, r7, r1
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	801a      	strh	r2, [r3, #0]
 801dfa8:	e353      	b.n	801e652 <USB_EPStartXfer+0x120e>
 801dfaa:	1d7b      	adds	r3, r7, #5
 801dfac:	33ff      	adds	r3, #255	@ 0xff
 801dfae:	681b      	ldr	r3, [r3, #0]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d10b      	bne.n	801dfcc <USB_EPStartXfer+0xb88>
 801dfb4:	218c      	movs	r1, #140	@ 0x8c
 801dfb6:	187b      	adds	r3, r7, r1
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	881b      	ldrh	r3, [r3, #0]
 801dfbc:	b29b      	uxth	r3, r3
 801dfbe:	4aae      	ldr	r2, [pc, #696]	@ (801e278 <USB_EPStartXfer+0xe34>)
 801dfc0:	4313      	orrs	r3, r2
 801dfc2:	b29a      	uxth	r2, r3
 801dfc4:	187b      	adds	r3, r7, r1
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	801a      	strh	r2, [r3, #0]
 801dfca:	e342      	b.n	801e652 <USB_EPStartXfer+0x120e>
 801dfcc:	1d7b      	adds	r3, r7, #5
 801dfce:	33ff      	adds	r3, #255	@ 0xff
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	085b      	lsrs	r3, r3, #1
 801dfd4:	21e8      	movs	r1, #232	@ 0xe8
 801dfd6:	187a      	adds	r2, r7, r1
 801dfd8:	6013      	str	r3, [r2, #0]
 801dfda:	1d7b      	adds	r3, r7, #5
 801dfdc:	33ff      	adds	r3, #255	@ 0xff
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	2201      	movs	r2, #1
 801dfe2:	4013      	ands	r3, r2
 801dfe4:	d004      	beq.n	801dff0 <USB_EPStartXfer+0xbac>
 801dfe6:	187b      	adds	r3, r7, r1
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	3301      	adds	r3, #1
 801dfec:	187a      	adds	r2, r7, r1
 801dfee:	6013      	str	r3, [r2, #0]
 801dff0:	218c      	movs	r1, #140	@ 0x8c
 801dff2:	187b      	adds	r3, r7, r1
 801dff4:	681b      	ldr	r3, [r3, #0]
 801dff6:	881b      	ldrh	r3, [r3, #0]
 801dff8:	b29a      	uxth	r2, r3
 801dffa:	23e8      	movs	r3, #232	@ 0xe8
 801dffc:	18fb      	adds	r3, r7, r3
 801dffe:	681b      	ldr	r3, [r3, #0]
 801e000:	b29b      	uxth	r3, r3
 801e002:	029b      	lsls	r3, r3, #10
 801e004:	b29b      	uxth	r3, r3
 801e006:	4313      	orrs	r3, r2
 801e008:	b29a      	uxth	r2, r3
 801e00a:	187b      	adds	r3, r7, r1
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	801a      	strh	r2, [r3, #0]
 801e010:	e31f      	b.n	801e652 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801e012:	683b      	ldr	r3, [r7, #0]
 801e014:	78db      	ldrb	r3, [r3, #3]
 801e016:	2b02      	cmp	r3, #2
 801e018:	d000      	beq.n	801e01c <USB_EPStartXfer+0xbd8>
 801e01a:	e191      	b.n	801e340 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801e01c:	683b      	ldr	r3, [r7, #0]
 801e01e:	785b      	ldrb	r3, [r3, #1]
 801e020:	2b00      	cmp	r3, #0
 801e022:	d000      	beq.n	801e026 <USB_EPStartXfer+0xbe2>
 801e024:	e07c      	b.n	801e120 <USB_EPStartXfer+0xcdc>
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	21ac      	movs	r1, #172	@ 0xac
 801e02a:	187a      	adds	r2, r7, r1
 801e02c:	6013      	str	r3, [r2, #0]
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	2250      	movs	r2, #80	@ 0x50
 801e032:	5a9b      	ldrh	r3, [r3, r2]
 801e034:	b29b      	uxth	r3, r3
 801e036:	001a      	movs	r2, r3
 801e038:	187b      	adds	r3, r7, r1
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	189b      	adds	r3, r3, r2
 801e03e:	187a      	adds	r2, r7, r1
 801e040:	6013      	str	r3, [r2, #0]
 801e042:	683b      	ldr	r3, [r7, #0]
 801e044:	781b      	ldrb	r3, [r3, #0]
 801e046:	00da      	lsls	r2, r3, #3
 801e048:	187b      	adds	r3, r7, r1
 801e04a:	681b      	ldr	r3, [r3, #0]
 801e04c:	18d3      	adds	r3, r2, r3
 801e04e:	4a8b      	ldr	r2, [pc, #556]	@ (801e27c <USB_EPStartXfer+0xe38>)
 801e050:	4694      	mov	ip, r2
 801e052:	4463      	add	r3, ip
 801e054:	21a8      	movs	r1, #168	@ 0xa8
 801e056:	187a      	adds	r2, r7, r1
 801e058:	6013      	str	r3, [r2, #0]
 801e05a:	187b      	adds	r3, r7, r1
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	881b      	ldrh	r3, [r3, #0]
 801e060:	b29b      	uxth	r3, r3
 801e062:	059b      	lsls	r3, r3, #22
 801e064:	0d9b      	lsrs	r3, r3, #22
 801e066:	b29a      	uxth	r2, r3
 801e068:	187b      	adds	r3, r7, r1
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	801a      	strh	r2, [r3, #0]
 801e06e:	683b      	ldr	r3, [r7, #0]
 801e070:	691b      	ldr	r3, [r3, #16]
 801e072:	2b3e      	cmp	r3, #62	@ 0x3e
 801e074:	d923      	bls.n	801e0be <USB_EPStartXfer+0xc7a>
 801e076:	683b      	ldr	r3, [r7, #0]
 801e078:	691b      	ldr	r3, [r3, #16]
 801e07a:	095b      	lsrs	r3, r3, #5
 801e07c:	21e4      	movs	r1, #228	@ 0xe4
 801e07e:	187a      	adds	r2, r7, r1
 801e080:	6013      	str	r3, [r2, #0]
 801e082:	683b      	ldr	r3, [r7, #0]
 801e084:	691b      	ldr	r3, [r3, #16]
 801e086:	221f      	movs	r2, #31
 801e088:	4013      	ands	r3, r2
 801e08a:	d104      	bne.n	801e096 <USB_EPStartXfer+0xc52>
 801e08c:	187b      	adds	r3, r7, r1
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	3b01      	subs	r3, #1
 801e092:	187a      	adds	r2, r7, r1
 801e094:	6013      	str	r3, [r2, #0]
 801e096:	21a8      	movs	r1, #168	@ 0xa8
 801e098:	187b      	adds	r3, r7, r1
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	881b      	ldrh	r3, [r3, #0]
 801e09e:	b29a      	uxth	r2, r3
 801e0a0:	23e4      	movs	r3, #228	@ 0xe4
 801e0a2:	18fb      	adds	r3, r7, r3
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	b29b      	uxth	r3, r3
 801e0a8:	029b      	lsls	r3, r3, #10
 801e0aa:	b29b      	uxth	r3, r3
 801e0ac:	4313      	orrs	r3, r2
 801e0ae:	b29b      	uxth	r3, r3
 801e0b0:	4a71      	ldr	r2, [pc, #452]	@ (801e278 <USB_EPStartXfer+0xe34>)
 801e0b2:	4313      	orrs	r3, r2
 801e0b4:	b29a      	uxth	r2, r3
 801e0b6:	187b      	adds	r3, r7, r1
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	801a      	strh	r2, [r3, #0]
 801e0bc:	e054      	b.n	801e168 <USB_EPStartXfer+0xd24>
 801e0be:	683b      	ldr	r3, [r7, #0]
 801e0c0:	691b      	ldr	r3, [r3, #16]
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	d10b      	bne.n	801e0de <USB_EPStartXfer+0xc9a>
 801e0c6:	21a8      	movs	r1, #168	@ 0xa8
 801e0c8:	187b      	adds	r3, r7, r1
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	881b      	ldrh	r3, [r3, #0]
 801e0ce:	b29b      	uxth	r3, r3
 801e0d0:	4a69      	ldr	r2, [pc, #420]	@ (801e278 <USB_EPStartXfer+0xe34>)
 801e0d2:	4313      	orrs	r3, r2
 801e0d4:	b29a      	uxth	r2, r3
 801e0d6:	187b      	adds	r3, r7, r1
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	801a      	strh	r2, [r3, #0]
 801e0dc:	e044      	b.n	801e168 <USB_EPStartXfer+0xd24>
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	691b      	ldr	r3, [r3, #16]
 801e0e2:	085b      	lsrs	r3, r3, #1
 801e0e4:	21e4      	movs	r1, #228	@ 0xe4
 801e0e6:	187a      	adds	r2, r7, r1
 801e0e8:	6013      	str	r3, [r2, #0]
 801e0ea:	683b      	ldr	r3, [r7, #0]
 801e0ec:	691b      	ldr	r3, [r3, #16]
 801e0ee:	2201      	movs	r2, #1
 801e0f0:	4013      	ands	r3, r2
 801e0f2:	d004      	beq.n	801e0fe <USB_EPStartXfer+0xcba>
 801e0f4:	187b      	adds	r3, r7, r1
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	3301      	adds	r3, #1
 801e0fa:	187a      	adds	r2, r7, r1
 801e0fc:	6013      	str	r3, [r2, #0]
 801e0fe:	21a8      	movs	r1, #168	@ 0xa8
 801e100:	187b      	adds	r3, r7, r1
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	881b      	ldrh	r3, [r3, #0]
 801e106:	b29a      	uxth	r2, r3
 801e108:	23e4      	movs	r3, #228	@ 0xe4
 801e10a:	18fb      	adds	r3, r7, r3
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	b29b      	uxth	r3, r3
 801e110:	029b      	lsls	r3, r3, #10
 801e112:	b29b      	uxth	r3, r3
 801e114:	4313      	orrs	r3, r2
 801e116:	b29a      	uxth	r2, r3
 801e118:	187b      	adds	r3, r7, r1
 801e11a:	681b      	ldr	r3, [r3, #0]
 801e11c:	801a      	strh	r2, [r3, #0]
 801e11e:	e023      	b.n	801e168 <USB_EPStartXfer+0xd24>
 801e120:	683b      	ldr	r3, [r7, #0]
 801e122:	785b      	ldrb	r3, [r3, #1]
 801e124:	2b01      	cmp	r3, #1
 801e126:	d11f      	bne.n	801e168 <USB_EPStartXfer+0xd24>
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	21b4      	movs	r1, #180	@ 0xb4
 801e12c:	187a      	adds	r2, r7, r1
 801e12e:	6013      	str	r3, [r2, #0]
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	2250      	movs	r2, #80	@ 0x50
 801e134:	5a9b      	ldrh	r3, [r3, r2]
 801e136:	b29b      	uxth	r3, r3
 801e138:	001a      	movs	r2, r3
 801e13a:	187b      	adds	r3, r7, r1
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	189b      	adds	r3, r3, r2
 801e140:	187a      	adds	r2, r7, r1
 801e142:	6013      	str	r3, [r2, #0]
 801e144:	683b      	ldr	r3, [r7, #0]
 801e146:	781b      	ldrb	r3, [r3, #0]
 801e148:	00da      	lsls	r2, r3, #3
 801e14a:	187b      	adds	r3, r7, r1
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	18d3      	adds	r3, r2, r3
 801e150:	4a4a      	ldr	r2, [pc, #296]	@ (801e27c <USB_EPStartXfer+0xe38>)
 801e152:	4694      	mov	ip, r2
 801e154:	4463      	add	r3, ip
 801e156:	21b0      	movs	r1, #176	@ 0xb0
 801e158:	187a      	adds	r2, r7, r1
 801e15a:	6013      	str	r3, [r2, #0]
 801e15c:	683b      	ldr	r3, [r7, #0]
 801e15e:	691b      	ldr	r3, [r3, #16]
 801e160:	b29a      	uxth	r2, r3
 801e162:	187b      	adds	r3, r7, r1
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	801a      	strh	r2, [r3, #0]
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	22a4      	movs	r2, #164	@ 0xa4
 801e16c:	18ba      	adds	r2, r7, r2
 801e16e:	6013      	str	r3, [r2, #0]
 801e170:	683b      	ldr	r3, [r7, #0]
 801e172:	785b      	ldrb	r3, [r3, #1]
 801e174:	2b00      	cmp	r3, #0
 801e176:	d000      	beq.n	801e17a <USB_EPStartXfer+0xd36>
 801e178:	e082      	b.n	801e280 <USB_EPStartXfer+0xe3c>
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	219c      	movs	r1, #156	@ 0x9c
 801e17e:	187a      	adds	r2, r7, r1
 801e180:	6013      	str	r3, [r2, #0]
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	2250      	movs	r2, #80	@ 0x50
 801e186:	5a9b      	ldrh	r3, [r3, r2]
 801e188:	b29b      	uxth	r3, r3
 801e18a:	001a      	movs	r2, r3
 801e18c:	187b      	adds	r3, r7, r1
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	189b      	adds	r3, r3, r2
 801e192:	187a      	adds	r2, r7, r1
 801e194:	6013      	str	r3, [r2, #0]
 801e196:	683b      	ldr	r3, [r7, #0]
 801e198:	781b      	ldrb	r3, [r3, #0]
 801e19a:	00da      	lsls	r2, r3, #3
 801e19c:	187b      	adds	r3, r7, r1
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	18d3      	adds	r3, r2, r3
 801e1a2:	4a34      	ldr	r2, [pc, #208]	@ (801e274 <USB_EPStartXfer+0xe30>)
 801e1a4:	4694      	mov	ip, r2
 801e1a6:	4463      	add	r3, ip
 801e1a8:	2198      	movs	r1, #152	@ 0x98
 801e1aa:	187a      	adds	r2, r7, r1
 801e1ac:	6013      	str	r3, [r2, #0]
 801e1ae:	187b      	adds	r3, r7, r1
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	881b      	ldrh	r3, [r3, #0]
 801e1b4:	b29b      	uxth	r3, r3
 801e1b6:	059b      	lsls	r3, r3, #22
 801e1b8:	0d9b      	lsrs	r3, r3, #22
 801e1ba:	b29a      	uxth	r2, r3
 801e1bc:	187b      	adds	r3, r7, r1
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	801a      	strh	r2, [r3, #0]
 801e1c2:	683b      	ldr	r3, [r7, #0]
 801e1c4:	691b      	ldr	r3, [r3, #16]
 801e1c6:	2b3e      	cmp	r3, #62	@ 0x3e
 801e1c8:	d923      	bls.n	801e212 <USB_EPStartXfer+0xdce>
 801e1ca:	683b      	ldr	r3, [r7, #0]
 801e1cc:	691b      	ldr	r3, [r3, #16]
 801e1ce:	095b      	lsrs	r3, r3, #5
 801e1d0:	21e0      	movs	r1, #224	@ 0xe0
 801e1d2:	187a      	adds	r2, r7, r1
 801e1d4:	6013      	str	r3, [r2, #0]
 801e1d6:	683b      	ldr	r3, [r7, #0]
 801e1d8:	691b      	ldr	r3, [r3, #16]
 801e1da:	221f      	movs	r2, #31
 801e1dc:	4013      	ands	r3, r2
 801e1de:	d104      	bne.n	801e1ea <USB_EPStartXfer+0xda6>
 801e1e0:	187b      	adds	r3, r7, r1
 801e1e2:	681b      	ldr	r3, [r3, #0]
 801e1e4:	3b01      	subs	r3, #1
 801e1e6:	187a      	adds	r2, r7, r1
 801e1e8:	6013      	str	r3, [r2, #0]
 801e1ea:	2198      	movs	r1, #152	@ 0x98
 801e1ec:	187b      	adds	r3, r7, r1
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	881b      	ldrh	r3, [r3, #0]
 801e1f2:	b29a      	uxth	r2, r3
 801e1f4:	23e0      	movs	r3, #224	@ 0xe0
 801e1f6:	18fb      	adds	r3, r7, r3
 801e1f8:	681b      	ldr	r3, [r3, #0]
 801e1fa:	b29b      	uxth	r3, r3
 801e1fc:	029b      	lsls	r3, r3, #10
 801e1fe:	b29b      	uxth	r3, r3
 801e200:	4313      	orrs	r3, r2
 801e202:	b29b      	uxth	r3, r3
 801e204:	4a1c      	ldr	r2, [pc, #112]	@ (801e278 <USB_EPStartXfer+0xe34>)
 801e206:	4313      	orrs	r3, r2
 801e208:	b29a      	uxth	r2, r3
 801e20a:	187b      	adds	r3, r7, r1
 801e20c:	681b      	ldr	r3, [r3, #0]
 801e20e:	801a      	strh	r2, [r3, #0]
 801e210:	e057      	b.n	801e2c2 <USB_EPStartXfer+0xe7e>
 801e212:	683b      	ldr	r3, [r7, #0]
 801e214:	691b      	ldr	r3, [r3, #16]
 801e216:	2b00      	cmp	r3, #0
 801e218:	d10b      	bne.n	801e232 <USB_EPStartXfer+0xdee>
 801e21a:	2198      	movs	r1, #152	@ 0x98
 801e21c:	187b      	adds	r3, r7, r1
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	881b      	ldrh	r3, [r3, #0]
 801e222:	b29b      	uxth	r3, r3
 801e224:	4a14      	ldr	r2, [pc, #80]	@ (801e278 <USB_EPStartXfer+0xe34>)
 801e226:	4313      	orrs	r3, r2
 801e228:	b29a      	uxth	r2, r3
 801e22a:	187b      	adds	r3, r7, r1
 801e22c:	681b      	ldr	r3, [r3, #0]
 801e22e:	801a      	strh	r2, [r3, #0]
 801e230:	e047      	b.n	801e2c2 <USB_EPStartXfer+0xe7e>
 801e232:	683b      	ldr	r3, [r7, #0]
 801e234:	691b      	ldr	r3, [r3, #16]
 801e236:	085b      	lsrs	r3, r3, #1
 801e238:	21e0      	movs	r1, #224	@ 0xe0
 801e23a:	187a      	adds	r2, r7, r1
 801e23c:	6013      	str	r3, [r2, #0]
 801e23e:	683b      	ldr	r3, [r7, #0]
 801e240:	691b      	ldr	r3, [r3, #16]
 801e242:	2201      	movs	r2, #1
 801e244:	4013      	ands	r3, r2
 801e246:	d004      	beq.n	801e252 <USB_EPStartXfer+0xe0e>
 801e248:	187b      	adds	r3, r7, r1
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	3301      	adds	r3, #1
 801e24e:	187a      	adds	r2, r7, r1
 801e250:	6013      	str	r3, [r2, #0]
 801e252:	2198      	movs	r1, #152	@ 0x98
 801e254:	187b      	adds	r3, r7, r1
 801e256:	681b      	ldr	r3, [r3, #0]
 801e258:	881b      	ldrh	r3, [r3, #0]
 801e25a:	b29a      	uxth	r2, r3
 801e25c:	23e0      	movs	r3, #224	@ 0xe0
 801e25e:	18fb      	adds	r3, r7, r3
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	b29b      	uxth	r3, r3
 801e264:	029b      	lsls	r3, r3, #10
 801e266:	b29b      	uxth	r3, r3
 801e268:	4313      	orrs	r3, r2
 801e26a:	b29a      	uxth	r2, r3
 801e26c:	187b      	adds	r3, r7, r1
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	801a      	strh	r2, [r3, #0]
 801e272:	e026      	b.n	801e2c2 <USB_EPStartXfer+0xe7e>
 801e274:	00000406 	.word	0x00000406
 801e278:	ffff8000 	.word	0xffff8000
 801e27c:	00000402 	.word	0x00000402
 801e280:	683b      	ldr	r3, [r7, #0]
 801e282:	785b      	ldrb	r3, [r3, #1]
 801e284:	2b01      	cmp	r3, #1
 801e286:	d11c      	bne.n	801e2c2 <USB_EPStartXfer+0xe7e>
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	2250      	movs	r2, #80	@ 0x50
 801e28c:	5a9b      	ldrh	r3, [r3, r2]
 801e28e:	b29b      	uxth	r3, r3
 801e290:	001a      	movs	r2, r3
 801e292:	21a4      	movs	r1, #164	@ 0xa4
 801e294:	187b      	adds	r3, r7, r1
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	189b      	adds	r3, r3, r2
 801e29a:	187a      	adds	r2, r7, r1
 801e29c:	6013      	str	r3, [r2, #0]
 801e29e:	683b      	ldr	r3, [r7, #0]
 801e2a0:	781b      	ldrb	r3, [r3, #0]
 801e2a2:	00da      	lsls	r2, r3, #3
 801e2a4:	187b      	adds	r3, r7, r1
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	18d3      	adds	r3, r2, r3
 801e2aa:	4ad2      	ldr	r2, [pc, #840]	@ (801e5f4 <USB_EPStartXfer+0x11b0>)
 801e2ac:	4694      	mov	ip, r2
 801e2ae:	4463      	add	r3, ip
 801e2b0:	21a0      	movs	r1, #160	@ 0xa0
 801e2b2:	187a      	adds	r2, r7, r1
 801e2b4:	6013      	str	r3, [r2, #0]
 801e2b6:	683b      	ldr	r3, [r7, #0]
 801e2b8:	691b      	ldr	r3, [r3, #16]
 801e2ba:	b29a      	uxth	r2, r3
 801e2bc:	187b      	adds	r3, r7, r1
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801e2c2:	683b      	ldr	r3, [r7, #0]
 801e2c4:	69db      	ldr	r3, [r3, #28]
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d100      	bne.n	801e2cc <USB_EPStartXfer+0xe88>
 801e2ca:	e1c2      	b.n	801e652 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801e2cc:	687a      	ldr	r2, [r7, #4]
 801e2ce:	683b      	ldr	r3, [r7, #0]
 801e2d0:	781b      	ldrb	r3, [r3, #0]
 801e2d2:	009b      	lsls	r3, r3, #2
 801e2d4:	18d2      	adds	r2, r2, r3
 801e2d6:	2196      	movs	r1, #150	@ 0x96
 801e2d8:	187b      	adds	r3, r7, r1
 801e2da:	8812      	ldrh	r2, [r2, #0]
 801e2dc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e2de:	187b      	adds	r3, r7, r1
 801e2e0:	881a      	ldrh	r2, [r3, #0]
 801e2e2:	2380      	movs	r3, #128	@ 0x80
 801e2e4:	01db      	lsls	r3, r3, #7
 801e2e6:	4013      	ands	r3, r2
 801e2e8:	d004      	beq.n	801e2f4 <USB_EPStartXfer+0xeb0>
 801e2ea:	187b      	adds	r3, r7, r1
 801e2ec:	881b      	ldrh	r3, [r3, #0]
 801e2ee:	2240      	movs	r2, #64	@ 0x40
 801e2f0:	4013      	ands	r3, r2
 801e2f2:	d10d      	bne.n	801e310 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801e2f4:	2196      	movs	r1, #150	@ 0x96
 801e2f6:	187b      	adds	r3, r7, r1
 801e2f8:	881a      	ldrh	r2, [r3, #0]
 801e2fa:	2380      	movs	r3, #128	@ 0x80
 801e2fc:	01db      	lsls	r3, r3, #7
 801e2fe:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e300:	d000      	beq.n	801e304 <USB_EPStartXfer+0xec0>
 801e302:	e1a6      	b.n	801e652 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801e304:	187b      	adds	r3, r7, r1
 801e306:	881b      	ldrh	r3, [r3, #0]
 801e308:	2240      	movs	r2, #64	@ 0x40
 801e30a:	4013      	ands	r3, r2
 801e30c:	d000      	beq.n	801e310 <USB_EPStartXfer+0xecc>
 801e30e:	e1a0      	b.n	801e652 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801e310:	687a      	ldr	r2, [r7, #4]
 801e312:	683b      	ldr	r3, [r7, #0]
 801e314:	781b      	ldrb	r3, [r3, #0]
 801e316:	009b      	lsls	r3, r3, #2
 801e318:	18d3      	adds	r3, r2, r3
 801e31a:	881b      	ldrh	r3, [r3, #0]
 801e31c:	b29a      	uxth	r2, r3
 801e31e:	2094      	movs	r0, #148	@ 0x94
 801e320:	183b      	adds	r3, r7, r0
 801e322:	49b5      	ldr	r1, [pc, #724]	@ (801e5f8 <USB_EPStartXfer+0x11b4>)
 801e324:	400a      	ands	r2, r1
 801e326:	801a      	strh	r2, [r3, #0]
 801e328:	687a      	ldr	r2, [r7, #4]
 801e32a:	683b      	ldr	r3, [r7, #0]
 801e32c:	781b      	ldrb	r3, [r3, #0]
 801e32e:	009b      	lsls	r3, r3, #2
 801e330:	18d3      	adds	r3, r2, r3
 801e332:	183a      	adds	r2, r7, r0
 801e334:	8812      	ldrh	r2, [r2, #0]
 801e336:	49b1      	ldr	r1, [pc, #708]	@ (801e5fc <USB_EPStartXfer+0x11b8>)
 801e338:	430a      	orrs	r2, r1
 801e33a:	b292      	uxth	r2, r2
 801e33c:	801a      	strh	r2, [r3, #0]
 801e33e:	e188      	b.n	801e652 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801e340:	683b      	ldr	r3, [r7, #0]
 801e342:	78db      	ldrb	r3, [r3, #3]
 801e344:	2b01      	cmp	r3, #1
 801e346:	d000      	beq.n	801e34a <USB_EPStartXfer+0xf06>
 801e348:	e181      	b.n	801e64e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801e34a:	683b      	ldr	r3, [r7, #0]
 801e34c:	699a      	ldr	r2, [r3, #24]
 801e34e:	683b      	ldr	r3, [r7, #0]
 801e350:	691b      	ldr	r3, [r3, #16]
 801e352:	429a      	cmp	r2, r3
 801e354:	d90d      	bls.n	801e372 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801e356:	683b      	ldr	r3, [r7, #0]
 801e358:	691b      	ldr	r3, [r3, #16]
 801e35a:	1d7a      	adds	r2, r7, #5
 801e35c:	32ff      	adds	r2, #255	@ 0xff
 801e35e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801e360:	683b      	ldr	r3, [r7, #0]
 801e362:	699a      	ldr	r2, [r3, #24]
 801e364:	1d7b      	adds	r3, r7, #5
 801e366:	33ff      	adds	r3, #255	@ 0xff
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	1ad2      	subs	r2, r2, r3
 801e36c:	683b      	ldr	r3, [r7, #0]
 801e36e:	619a      	str	r2, [r3, #24]
 801e370:	e007      	b.n	801e382 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801e372:	683b      	ldr	r3, [r7, #0]
 801e374:	699b      	ldr	r3, [r3, #24]
 801e376:	1d7a      	adds	r2, r7, #5
 801e378:	32ff      	adds	r2, #255	@ 0xff
 801e37a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801e37c:	683b      	ldr	r3, [r7, #0]
 801e37e:	2200      	movs	r2, #0
 801e380:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801e382:	683b      	ldr	r3, [r7, #0]
 801e384:	785b      	ldrb	r3, [r3, #1]
 801e386:	2b00      	cmp	r3, #0
 801e388:	d000      	beq.n	801e38c <USB_EPStartXfer+0xf48>
 801e38a:	e082      	b.n	801e492 <USB_EPStartXfer+0x104e>
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	21cc      	movs	r1, #204	@ 0xcc
 801e390:	187a      	adds	r2, r7, r1
 801e392:	6013      	str	r3, [r2, #0]
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	2250      	movs	r2, #80	@ 0x50
 801e398:	5a9b      	ldrh	r3, [r3, r2]
 801e39a:	b29b      	uxth	r3, r3
 801e39c:	001a      	movs	r2, r3
 801e39e:	187b      	adds	r3, r7, r1
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	189b      	adds	r3, r3, r2
 801e3a4:	187a      	adds	r2, r7, r1
 801e3a6:	6013      	str	r3, [r2, #0]
 801e3a8:	683b      	ldr	r3, [r7, #0]
 801e3aa:	781b      	ldrb	r3, [r3, #0]
 801e3ac:	00da      	lsls	r2, r3, #3
 801e3ae:	187b      	adds	r3, r7, r1
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	18d3      	adds	r3, r2, r3
 801e3b4:	4a92      	ldr	r2, [pc, #584]	@ (801e600 <USB_EPStartXfer+0x11bc>)
 801e3b6:	4694      	mov	ip, r2
 801e3b8:	4463      	add	r3, ip
 801e3ba:	21c8      	movs	r1, #200	@ 0xc8
 801e3bc:	187a      	adds	r2, r7, r1
 801e3be:	6013      	str	r3, [r2, #0]
 801e3c0:	187b      	adds	r3, r7, r1
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	881b      	ldrh	r3, [r3, #0]
 801e3c6:	b29b      	uxth	r3, r3
 801e3c8:	059b      	lsls	r3, r3, #22
 801e3ca:	0d9b      	lsrs	r3, r3, #22
 801e3cc:	b29a      	uxth	r2, r3
 801e3ce:	187b      	adds	r3, r7, r1
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	801a      	strh	r2, [r3, #0]
 801e3d4:	1d7b      	adds	r3, r7, #5
 801e3d6:	33ff      	adds	r3, #255	@ 0xff
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	2b3e      	cmp	r3, #62	@ 0x3e
 801e3dc:	d925      	bls.n	801e42a <USB_EPStartXfer+0xfe6>
 801e3de:	1d7b      	adds	r3, r7, #5
 801e3e0:	33ff      	adds	r3, #255	@ 0xff
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	095b      	lsrs	r3, r3, #5
 801e3e6:	21dc      	movs	r1, #220	@ 0xdc
 801e3e8:	187a      	adds	r2, r7, r1
 801e3ea:	6013      	str	r3, [r2, #0]
 801e3ec:	1d7b      	adds	r3, r7, #5
 801e3ee:	33ff      	adds	r3, #255	@ 0xff
 801e3f0:	681b      	ldr	r3, [r3, #0]
 801e3f2:	221f      	movs	r2, #31
 801e3f4:	4013      	ands	r3, r2
 801e3f6:	d104      	bne.n	801e402 <USB_EPStartXfer+0xfbe>
 801e3f8:	187b      	adds	r3, r7, r1
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	3b01      	subs	r3, #1
 801e3fe:	187a      	adds	r2, r7, r1
 801e400:	6013      	str	r3, [r2, #0]
 801e402:	21c8      	movs	r1, #200	@ 0xc8
 801e404:	187b      	adds	r3, r7, r1
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	881b      	ldrh	r3, [r3, #0]
 801e40a:	b29a      	uxth	r2, r3
 801e40c:	23dc      	movs	r3, #220	@ 0xdc
 801e40e:	18fb      	adds	r3, r7, r3
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	b29b      	uxth	r3, r3
 801e414:	029b      	lsls	r3, r3, #10
 801e416:	b29b      	uxth	r3, r3
 801e418:	4313      	orrs	r3, r2
 801e41a:	b29b      	uxth	r3, r3
 801e41c:	4a79      	ldr	r2, [pc, #484]	@ (801e604 <USB_EPStartXfer+0x11c0>)
 801e41e:	4313      	orrs	r3, r2
 801e420:	b29a      	uxth	r2, r3
 801e422:	187b      	adds	r3, r7, r1
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	801a      	strh	r2, [r3, #0]
 801e428:	e058      	b.n	801e4dc <USB_EPStartXfer+0x1098>
 801e42a:	1d7b      	adds	r3, r7, #5
 801e42c:	33ff      	adds	r3, #255	@ 0xff
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	2b00      	cmp	r3, #0
 801e432:	d10b      	bne.n	801e44c <USB_EPStartXfer+0x1008>
 801e434:	21c8      	movs	r1, #200	@ 0xc8
 801e436:	187b      	adds	r3, r7, r1
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	881b      	ldrh	r3, [r3, #0]
 801e43c:	b29b      	uxth	r3, r3
 801e43e:	4a71      	ldr	r2, [pc, #452]	@ (801e604 <USB_EPStartXfer+0x11c0>)
 801e440:	4313      	orrs	r3, r2
 801e442:	b29a      	uxth	r2, r3
 801e444:	187b      	adds	r3, r7, r1
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	801a      	strh	r2, [r3, #0]
 801e44a:	e047      	b.n	801e4dc <USB_EPStartXfer+0x1098>
 801e44c:	1d7b      	adds	r3, r7, #5
 801e44e:	33ff      	adds	r3, #255	@ 0xff
 801e450:	681b      	ldr	r3, [r3, #0]
 801e452:	085b      	lsrs	r3, r3, #1
 801e454:	21dc      	movs	r1, #220	@ 0xdc
 801e456:	187a      	adds	r2, r7, r1
 801e458:	6013      	str	r3, [r2, #0]
 801e45a:	1d7b      	adds	r3, r7, #5
 801e45c:	33ff      	adds	r3, #255	@ 0xff
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	2201      	movs	r2, #1
 801e462:	4013      	ands	r3, r2
 801e464:	d004      	beq.n	801e470 <USB_EPStartXfer+0x102c>
 801e466:	187b      	adds	r3, r7, r1
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	3301      	adds	r3, #1
 801e46c:	187a      	adds	r2, r7, r1
 801e46e:	6013      	str	r3, [r2, #0]
 801e470:	21c8      	movs	r1, #200	@ 0xc8
 801e472:	187b      	adds	r3, r7, r1
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	881b      	ldrh	r3, [r3, #0]
 801e478:	b29a      	uxth	r2, r3
 801e47a:	23dc      	movs	r3, #220	@ 0xdc
 801e47c:	18fb      	adds	r3, r7, r3
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	b29b      	uxth	r3, r3
 801e482:	029b      	lsls	r3, r3, #10
 801e484:	b29b      	uxth	r3, r3
 801e486:	4313      	orrs	r3, r2
 801e488:	b29a      	uxth	r2, r3
 801e48a:	187b      	adds	r3, r7, r1
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	801a      	strh	r2, [r3, #0]
 801e490:	e024      	b.n	801e4dc <USB_EPStartXfer+0x1098>
 801e492:	683b      	ldr	r3, [r7, #0]
 801e494:	785b      	ldrb	r3, [r3, #1]
 801e496:	2b01      	cmp	r3, #1
 801e498:	d120      	bne.n	801e4dc <USB_EPStartXfer+0x1098>
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	21d4      	movs	r1, #212	@ 0xd4
 801e49e:	187a      	adds	r2, r7, r1
 801e4a0:	6013      	str	r3, [r2, #0]
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	2250      	movs	r2, #80	@ 0x50
 801e4a6:	5a9b      	ldrh	r3, [r3, r2]
 801e4a8:	b29b      	uxth	r3, r3
 801e4aa:	001a      	movs	r2, r3
 801e4ac:	187b      	adds	r3, r7, r1
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	189b      	adds	r3, r3, r2
 801e4b2:	187a      	adds	r2, r7, r1
 801e4b4:	6013      	str	r3, [r2, #0]
 801e4b6:	683b      	ldr	r3, [r7, #0]
 801e4b8:	781b      	ldrb	r3, [r3, #0]
 801e4ba:	00da      	lsls	r2, r3, #3
 801e4bc:	187b      	adds	r3, r7, r1
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	18d3      	adds	r3, r2, r3
 801e4c2:	4a4f      	ldr	r2, [pc, #316]	@ (801e600 <USB_EPStartXfer+0x11bc>)
 801e4c4:	4694      	mov	ip, r2
 801e4c6:	4463      	add	r3, ip
 801e4c8:	21d0      	movs	r1, #208	@ 0xd0
 801e4ca:	187a      	adds	r2, r7, r1
 801e4cc:	6013      	str	r3, [r2, #0]
 801e4ce:	1d7b      	adds	r3, r7, #5
 801e4d0:	33ff      	adds	r3, #255	@ 0xff
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	b29a      	uxth	r2, r3
 801e4d6:	187b      	adds	r3, r7, r1
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	801a      	strh	r2, [r3, #0]
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	22c4      	movs	r2, #196	@ 0xc4
 801e4e0:	18ba      	adds	r2, r7, r2
 801e4e2:	6013      	str	r3, [r2, #0]
 801e4e4:	683b      	ldr	r3, [r7, #0]
 801e4e6:	785b      	ldrb	r3, [r3, #1]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d000      	beq.n	801e4ee <USB_EPStartXfer+0x10aa>
 801e4ec:	e08c      	b.n	801e608 <USB_EPStartXfer+0x11c4>
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	21bc      	movs	r1, #188	@ 0xbc
 801e4f2:	187a      	adds	r2, r7, r1
 801e4f4:	6013      	str	r3, [r2, #0]
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	2250      	movs	r2, #80	@ 0x50
 801e4fa:	5a9b      	ldrh	r3, [r3, r2]
 801e4fc:	b29b      	uxth	r3, r3
 801e4fe:	001a      	movs	r2, r3
 801e500:	187b      	adds	r3, r7, r1
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	189b      	adds	r3, r3, r2
 801e506:	187a      	adds	r2, r7, r1
 801e508:	6013      	str	r3, [r2, #0]
 801e50a:	683b      	ldr	r3, [r7, #0]
 801e50c:	781b      	ldrb	r3, [r3, #0]
 801e50e:	00da      	lsls	r2, r3, #3
 801e510:	187b      	adds	r3, r7, r1
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	18d3      	adds	r3, r2, r3
 801e516:	4a37      	ldr	r2, [pc, #220]	@ (801e5f4 <USB_EPStartXfer+0x11b0>)
 801e518:	4694      	mov	ip, r2
 801e51a:	4463      	add	r3, ip
 801e51c:	21b8      	movs	r1, #184	@ 0xb8
 801e51e:	187a      	adds	r2, r7, r1
 801e520:	6013      	str	r3, [r2, #0]
 801e522:	187b      	adds	r3, r7, r1
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	881b      	ldrh	r3, [r3, #0]
 801e528:	b29b      	uxth	r3, r3
 801e52a:	059b      	lsls	r3, r3, #22
 801e52c:	0d9b      	lsrs	r3, r3, #22
 801e52e:	b29a      	uxth	r2, r3
 801e530:	187b      	adds	r3, r7, r1
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	801a      	strh	r2, [r3, #0]
 801e536:	1d7b      	adds	r3, r7, #5
 801e538:	33ff      	adds	r3, #255	@ 0xff
 801e53a:	681b      	ldr	r3, [r3, #0]
 801e53c:	2b3e      	cmp	r3, #62	@ 0x3e
 801e53e:	d925      	bls.n	801e58c <USB_EPStartXfer+0x1148>
 801e540:	1d7b      	adds	r3, r7, #5
 801e542:	33ff      	adds	r3, #255	@ 0xff
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	095b      	lsrs	r3, r3, #5
 801e548:	21d8      	movs	r1, #216	@ 0xd8
 801e54a:	187a      	adds	r2, r7, r1
 801e54c:	6013      	str	r3, [r2, #0]
 801e54e:	1d7b      	adds	r3, r7, #5
 801e550:	33ff      	adds	r3, #255	@ 0xff
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	221f      	movs	r2, #31
 801e556:	4013      	ands	r3, r2
 801e558:	d104      	bne.n	801e564 <USB_EPStartXfer+0x1120>
 801e55a:	187b      	adds	r3, r7, r1
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	3b01      	subs	r3, #1
 801e560:	187a      	adds	r2, r7, r1
 801e562:	6013      	str	r3, [r2, #0]
 801e564:	21b8      	movs	r1, #184	@ 0xb8
 801e566:	187b      	adds	r3, r7, r1
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	881b      	ldrh	r3, [r3, #0]
 801e56c:	b29a      	uxth	r2, r3
 801e56e:	23d8      	movs	r3, #216	@ 0xd8
 801e570:	18fb      	adds	r3, r7, r3
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	b29b      	uxth	r3, r3
 801e576:	029b      	lsls	r3, r3, #10
 801e578:	b29b      	uxth	r3, r3
 801e57a:	4313      	orrs	r3, r2
 801e57c:	b29b      	uxth	r3, r3
 801e57e:	4a21      	ldr	r2, [pc, #132]	@ (801e604 <USB_EPStartXfer+0x11c0>)
 801e580:	4313      	orrs	r3, r2
 801e582:	b29a      	uxth	r2, r3
 801e584:	187b      	adds	r3, r7, r1
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	801a      	strh	r2, [r3, #0]
 801e58a:	e062      	b.n	801e652 <USB_EPStartXfer+0x120e>
 801e58c:	1d7b      	adds	r3, r7, #5
 801e58e:	33ff      	adds	r3, #255	@ 0xff
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	2b00      	cmp	r3, #0
 801e594:	d10b      	bne.n	801e5ae <USB_EPStartXfer+0x116a>
 801e596:	21b8      	movs	r1, #184	@ 0xb8
 801e598:	187b      	adds	r3, r7, r1
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	881b      	ldrh	r3, [r3, #0]
 801e59e:	b29b      	uxth	r3, r3
 801e5a0:	4a18      	ldr	r2, [pc, #96]	@ (801e604 <USB_EPStartXfer+0x11c0>)
 801e5a2:	4313      	orrs	r3, r2
 801e5a4:	b29a      	uxth	r2, r3
 801e5a6:	187b      	adds	r3, r7, r1
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	801a      	strh	r2, [r3, #0]
 801e5ac:	e051      	b.n	801e652 <USB_EPStartXfer+0x120e>
 801e5ae:	1d7b      	adds	r3, r7, #5
 801e5b0:	33ff      	adds	r3, #255	@ 0xff
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	085b      	lsrs	r3, r3, #1
 801e5b6:	21d8      	movs	r1, #216	@ 0xd8
 801e5b8:	187a      	adds	r2, r7, r1
 801e5ba:	6013      	str	r3, [r2, #0]
 801e5bc:	1d7b      	adds	r3, r7, #5
 801e5be:	33ff      	adds	r3, #255	@ 0xff
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	2201      	movs	r2, #1
 801e5c4:	4013      	ands	r3, r2
 801e5c6:	d004      	beq.n	801e5d2 <USB_EPStartXfer+0x118e>
 801e5c8:	187b      	adds	r3, r7, r1
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	3301      	adds	r3, #1
 801e5ce:	187a      	adds	r2, r7, r1
 801e5d0:	6013      	str	r3, [r2, #0]
 801e5d2:	21b8      	movs	r1, #184	@ 0xb8
 801e5d4:	187b      	adds	r3, r7, r1
 801e5d6:	681b      	ldr	r3, [r3, #0]
 801e5d8:	881b      	ldrh	r3, [r3, #0]
 801e5da:	b29a      	uxth	r2, r3
 801e5dc:	23d8      	movs	r3, #216	@ 0xd8
 801e5de:	18fb      	adds	r3, r7, r3
 801e5e0:	681b      	ldr	r3, [r3, #0]
 801e5e2:	b29b      	uxth	r3, r3
 801e5e4:	029b      	lsls	r3, r3, #10
 801e5e6:	b29b      	uxth	r3, r3
 801e5e8:	4313      	orrs	r3, r2
 801e5ea:	b29a      	uxth	r2, r3
 801e5ec:	187b      	adds	r3, r7, r1
 801e5ee:	681b      	ldr	r3, [r3, #0]
 801e5f0:	801a      	strh	r2, [r3, #0]
 801e5f2:	e02e      	b.n	801e652 <USB_EPStartXfer+0x120e>
 801e5f4:	00000406 	.word	0x00000406
 801e5f8:	ffff8f8f 	.word	0xffff8f8f
 801e5fc:	ffff80c0 	.word	0xffff80c0
 801e600:	00000402 	.word	0x00000402
 801e604:	ffff8000 	.word	0xffff8000
 801e608:	683b      	ldr	r3, [r7, #0]
 801e60a:	785b      	ldrb	r3, [r3, #1]
 801e60c:	2b01      	cmp	r3, #1
 801e60e:	d120      	bne.n	801e652 <USB_EPStartXfer+0x120e>
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	2250      	movs	r2, #80	@ 0x50
 801e614:	5a9b      	ldrh	r3, [r3, r2]
 801e616:	b29b      	uxth	r3, r3
 801e618:	001a      	movs	r2, r3
 801e61a:	21c4      	movs	r1, #196	@ 0xc4
 801e61c:	187b      	adds	r3, r7, r1
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	189b      	adds	r3, r3, r2
 801e622:	187a      	adds	r2, r7, r1
 801e624:	6013      	str	r3, [r2, #0]
 801e626:	683b      	ldr	r3, [r7, #0]
 801e628:	781b      	ldrb	r3, [r3, #0]
 801e62a:	00da      	lsls	r2, r3, #3
 801e62c:	187b      	adds	r3, r7, r1
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	18d3      	adds	r3, r2, r3
 801e632:	4a1d      	ldr	r2, [pc, #116]	@ (801e6a8 <USB_EPStartXfer+0x1264>)
 801e634:	4694      	mov	ip, r2
 801e636:	4463      	add	r3, ip
 801e638:	21c0      	movs	r1, #192	@ 0xc0
 801e63a:	187a      	adds	r2, r7, r1
 801e63c:	6013      	str	r3, [r2, #0]
 801e63e:	1d7b      	adds	r3, r7, #5
 801e640:	33ff      	adds	r3, #255	@ 0xff
 801e642:	681b      	ldr	r3, [r3, #0]
 801e644:	b29a      	uxth	r2, r3
 801e646:	187b      	adds	r3, r7, r1
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	801a      	strh	r2, [r3, #0]
 801e64c:	e001      	b.n	801e652 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801e64e:	2301      	movs	r3, #1
 801e650:	e025      	b.n	801e69e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e652:	687a      	ldr	r2, [r7, #4]
 801e654:	683b      	ldr	r3, [r7, #0]
 801e656:	781b      	ldrb	r3, [r3, #0]
 801e658:	009b      	lsls	r3, r3, #2
 801e65a:	18d3      	adds	r3, r2, r3
 801e65c:	881b      	ldrh	r3, [r3, #0]
 801e65e:	b29a      	uxth	r2, r3
 801e660:	208a      	movs	r0, #138	@ 0x8a
 801e662:	183b      	adds	r3, r7, r0
 801e664:	4911      	ldr	r1, [pc, #68]	@ (801e6ac <USB_EPStartXfer+0x1268>)
 801e666:	400a      	ands	r2, r1
 801e668:	801a      	strh	r2, [r3, #0]
 801e66a:	183b      	adds	r3, r7, r0
 801e66c:	183a      	adds	r2, r7, r0
 801e66e:	8812      	ldrh	r2, [r2, #0]
 801e670:	2180      	movs	r1, #128	@ 0x80
 801e672:	0149      	lsls	r1, r1, #5
 801e674:	404a      	eors	r2, r1
 801e676:	801a      	strh	r2, [r3, #0]
 801e678:	183b      	adds	r3, r7, r0
 801e67a:	183a      	adds	r2, r7, r0
 801e67c:	8812      	ldrh	r2, [r2, #0]
 801e67e:	2180      	movs	r1, #128	@ 0x80
 801e680:	0189      	lsls	r1, r1, #6
 801e682:	404a      	eors	r2, r1
 801e684:	801a      	strh	r2, [r3, #0]
 801e686:	687a      	ldr	r2, [r7, #4]
 801e688:	683b      	ldr	r3, [r7, #0]
 801e68a:	781b      	ldrb	r3, [r3, #0]
 801e68c:	009b      	lsls	r3, r3, #2
 801e68e:	18d3      	adds	r3, r2, r3
 801e690:	183a      	adds	r2, r7, r0
 801e692:	8812      	ldrh	r2, [r2, #0]
 801e694:	4906      	ldr	r1, [pc, #24]	@ (801e6b0 <USB_EPStartXfer+0x126c>)
 801e696:	430a      	orrs	r2, r1
 801e698:	b292      	uxth	r2, r2
 801e69a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801e69c:	2300      	movs	r3, #0
}
 801e69e:	0018      	movs	r0, r3
 801e6a0:	46bd      	mov	sp, r7
 801e6a2:	b043      	add	sp, #268	@ 0x10c
 801e6a4:	bd90      	pop	{r4, r7, pc}
 801e6a6:	46c0      	nop			@ (mov r8, r8)
 801e6a8:	00000406 	.word	0x00000406
 801e6ac:	ffffbf8f 	.word	0xffffbf8f
 801e6b0:	ffff8080 	.word	0xffff8080

0801e6b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e6b4:	b580      	push	{r7, lr}
 801e6b6:	b084      	sub	sp, #16
 801e6b8:	af00      	add	r7, sp, #0
 801e6ba:	6078      	str	r0, [r7, #4]
 801e6bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801e6be:	683b      	ldr	r3, [r7, #0]
 801e6c0:	785b      	ldrb	r3, [r3, #1]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d01d      	beq.n	801e702 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801e6c6:	687a      	ldr	r2, [r7, #4]
 801e6c8:	683b      	ldr	r3, [r7, #0]
 801e6ca:	781b      	ldrb	r3, [r3, #0]
 801e6cc:	009b      	lsls	r3, r3, #2
 801e6ce:	18d3      	adds	r3, r2, r3
 801e6d0:	881b      	ldrh	r3, [r3, #0]
 801e6d2:	b29a      	uxth	r2, r3
 801e6d4:	200c      	movs	r0, #12
 801e6d6:	183b      	adds	r3, r7, r0
 801e6d8:	491b      	ldr	r1, [pc, #108]	@ (801e748 <USB_EPSetStall+0x94>)
 801e6da:	400a      	ands	r2, r1
 801e6dc:	801a      	strh	r2, [r3, #0]
 801e6de:	183b      	adds	r3, r7, r0
 801e6e0:	183a      	adds	r2, r7, r0
 801e6e2:	8812      	ldrh	r2, [r2, #0]
 801e6e4:	2110      	movs	r1, #16
 801e6e6:	404a      	eors	r2, r1
 801e6e8:	801a      	strh	r2, [r3, #0]
 801e6ea:	687a      	ldr	r2, [r7, #4]
 801e6ec:	683b      	ldr	r3, [r7, #0]
 801e6ee:	781b      	ldrb	r3, [r3, #0]
 801e6f0:	009b      	lsls	r3, r3, #2
 801e6f2:	18d3      	adds	r3, r2, r3
 801e6f4:	183a      	adds	r2, r7, r0
 801e6f6:	8812      	ldrh	r2, [r2, #0]
 801e6f8:	4914      	ldr	r1, [pc, #80]	@ (801e74c <USB_EPSetStall+0x98>)
 801e6fa:	430a      	orrs	r2, r1
 801e6fc:	b292      	uxth	r2, r2
 801e6fe:	801a      	strh	r2, [r3, #0]
 801e700:	e01d      	b.n	801e73e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801e702:	687a      	ldr	r2, [r7, #4]
 801e704:	683b      	ldr	r3, [r7, #0]
 801e706:	781b      	ldrb	r3, [r3, #0]
 801e708:	009b      	lsls	r3, r3, #2
 801e70a:	18d3      	adds	r3, r2, r3
 801e70c:	881b      	ldrh	r3, [r3, #0]
 801e70e:	b29a      	uxth	r2, r3
 801e710:	200e      	movs	r0, #14
 801e712:	183b      	adds	r3, r7, r0
 801e714:	490e      	ldr	r1, [pc, #56]	@ (801e750 <USB_EPSetStall+0x9c>)
 801e716:	400a      	ands	r2, r1
 801e718:	801a      	strh	r2, [r3, #0]
 801e71a:	183b      	adds	r3, r7, r0
 801e71c:	183a      	adds	r2, r7, r0
 801e71e:	8812      	ldrh	r2, [r2, #0]
 801e720:	2180      	movs	r1, #128	@ 0x80
 801e722:	0149      	lsls	r1, r1, #5
 801e724:	404a      	eors	r2, r1
 801e726:	801a      	strh	r2, [r3, #0]
 801e728:	687a      	ldr	r2, [r7, #4]
 801e72a:	683b      	ldr	r3, [r7, #0]
 801e72c:	781b      	ldrb	r3, [r3, #0]
 801e72e:	009b      	lsls	r3, r3, #2
 801e730:	18d3      	adds	r3, r2, r3
 801e732:	183a      	adds	r2, r7, r0
 801e734:	8812      	ldrh	r2, [r2, #0]
 801e736:	4905      	ldr	r1, [pc, #20]	@ (801e74c <USB_EPSetStall+0x98>)
 801e738:	430a      	orrs	r2, r1
 801e73a:	b292      	uxth	r2, r2
 801e73c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801e73e:	2300      	movs	r3, #0
}
 801e740:	0018      	movs	r0, r3
 801e742:	46bd      	mov	sp, r7
 801e744:	b004      	add	sp, #16
 801e746:	bd80      	pop	{r7, pc}
 801e748:	ffff8fbf 	.word	0xffff8fbf
 801e74c:	ffff8080 	.word	0xffff8080
 801e750:	ffffbf8f 	.word	0xffffbf8f

0801e754 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e754:	b580      	push	{r7, lr}
 801e756:	b086      	sub	sp, #24
 801e758:	af00      	add	r7, sp, #0
 801e75a:	6078      	str	r0, [r7, #4]
 801e75c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801e75e:	683b      	ldr	r3, [r7, #0]
 801e760:	7b1b      	ldrb	r3, [r3, #12]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d000      	beq.n	801e768 <USB_EPClearStall+0x14>
 801e766:	e095      	b.n	801e894 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801e768:	683b      	ldr	r3, [r7, #0]
 801e76a:	785b      	ldrb	r3, [r3, #1]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d046      	beq.n	801e7fe <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e770:	687a      	ldr	r2, [r7, #4]
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	781b      	ldrb	r3, [r3, #0]
 801e776:	009b      	lsls	r3, r3, #2
 801e778:	18d2      	adds	r2, r2, r3
 801e77a:	2110      	movs	r1, #16
 801e77c:	187b      	adds	r3, r7, r1
 801e77e:	8812      	ldrh	r2, [r2, #0]
 801e780:	801a      	strh	r2, [r3, #0]
 801e782:	187b      	adds	r3, r7, r1
 801e784:	881b      	ldrh	r3, [r3, #0]
 801e786:	2240      	movs	r2, #64	@ 0x40
 801e788:	4013      	ands	r3, r2
 801e78a:	d016      	beq.n	801e7ba <USB_EPClearStall+0x66>
 801e78c:	687a      	ldr	r2, [r7, #4]
 801e78e:	683b      	ldr	r3, [r7, #0]
 801e790:	781b      	ldrb	r3, [r3, #0]
 801e792:	009b      	lsls	r3, r3, #2
 801e794:	18d3      	adds	r3, r2, r3
 801e796:	881b      	ldrh	r3, [r3, #0]
 801e798:	b29a      	uxth	r2, r3
 801e79a:	200e      	movs	r0, #14
 801e79c:	183b      	adds	r3, r7, r0
 801e79e:	4940      	ldr	r1, [pc, #256]	@ (801e8a0 <USB_EPClearStall+0x14c>)
 801e7a0:	400a      	ands	r2, r1
 801e7a2:	801a      	strh	r2, [r3, #0]
 801e7a4:	687a      	ldr	r2, [r7, #4]
 801e7a6:	683b      	ldr	r3, [r7, #0]
 801e7a8:	781b      	ldrb	r3, [r3, #0]
 801e7aa:	009b      	lsls	r3, r3, #2
 801e7ac:	18d3      	adds	r3, r2, r3
 801e7ae:	183a      	adds	r2, r7, r0
 801e7b0:	8812      	ldrh	r2, [r2, #0]
 801e7b2:	493c      	ldr	r1, [pc, #240]	@ (801e8a4 <USB_EPClearStall+0x150>)
 801e7b4:	430a      	orrs	r2, r1
 801e7b6:	b292      	uxth	r2, r2
 801e7b8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e7ba:	683b      	ldr	r3, [r7, #0]
 801e7bc:	78db      	ldrb	r3, [r3, #3]
 801e7be:	2b01      	cmp	r3, #1
 801e7c0:	d068      	beq.n	801e894 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e7c2:	687a      	ldr	r2, [r7, #4]
 801e7c4:	683b      	ldr	r3, [r7, #0]
 801e7c6:	781b      	ldrb	r3, [r3, #0]
 801e7c8:	009b      	lsls	r3, r3, #2
 801e7ca:	18d3      	adds	r3, r2, r3
 801e7cc:	881b      	ldrh	r3, [r3, #0]
 801e7ce:	b29a      	uxth	r2, r3
 801e7d0:	200c      	movs	r0, #12
 801e7d2:	183b      	adds	r3, r7, r0
 801e7d4:	4934      	ldr	r1, [pc, #208]	@ (801e8a8 <USB_EPClearStall+0x154>)
 801e7d6:	400a      	ands	r2, r1
 801e7d8:	801a      	strh	r2, [r3, #0]
 801e7da:	183b      	adds	r3, r7, r0
 801e7dc:	183a      	adds	r2, r7, r0
 801e7de:	8812      	ldrh	r2, [r2, #0]
 801e7e0:	2120      	movs	r1, #32
 801e7e2:	404a      	eors	r2, r1
 801e7e4:	801a      	strh	r2, [r3, #0]
 801e7e6:	687a      	ldr	r2, [r7, #4]
 801e7e8:	683b      	ldr	r3, [r7, #0]
 801e7ea:	781b      	ldrb	r3, [r3, #0]
 801e7ec:	009b      	lsls	r3, r3, #2
 801e7ee:	18d3      	adds	r3, r2, r3
 801e7f0:	183a      	adds	r2, r7, r0
 801e7f2:	8812      	ldrh	r2, [r2, #0]
 801e7f4:	492d      	ldr	r1, [pc, #180]	@ (801e8ac <USB_EPClearStall+0x158>)
 801e7f6:	430a      	orrs	r2, r1
 801e7f8:	b292      	uxth	r2, r2
 801e7fa:	801a      	strh	r2, [r3, #0]
 801e7fc:	e04a      	b.n	801e894 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e7fe:	687a      	ldr	r2, [r7, #4]
 801e800:	683b      	ldr	r3, [r7, #0]
 801e802:	781b      	ldrb	r3, [r3, #0]
 801e804:	009b      	lsls	r3, r3, #2
 801e806:	18d2      	adds	r2, r2, r3
 801e808:	2116      	movs	r1, #22
 801e80a:	187b      	adds	r3, r7, r1
 801e80c:	8812      	ldrh	r2, [r2, #0]
 801e80e:	801a      	strh	r2, [r3, #0]
 801e810:	187b      	adds	r3, r7, r1
 801e812:	881a      	ldrh	r2, [r3, #0]
 801e814:	2380      	movs	r3, #128	@ 0x80
 801e816:	01db      	lsls	r3, r3, #7
 801e818:	4013      	ands	r3, r2
 801e81a:	d016      	beq.n	801e84a <USB_EPClearStall+0xf6>
 801e81c:	687a      	ldr	r2, [r7, #4]
 801e81e:	683b      	ldr	r3, [r7, #0]
 801e820:	781b      	ldrb	r3, [r3, #0]
 801e822:	009b      	lsls	r3, r3, #2
 801e824:	18d3      	adds	r3, r2, r3
 801e826:	881b      	ldrh	r3, [r3, #0]
 801e828:	b29a      	uxth	r2, r3
 801e82a:	2014      	movs	r0, #20
 801e82c:	183b      	adds	r3, r7, r0
 801e82e:	491c      	ldr	r1, [pc, #112]	@ (801e8a0 <USB_EPClearStall+0x14c>)
 801e830:	400a      	ands	r2, r1
 801e832:	801a      	strh	r2, [r3, #0]
 801e834:	687a      	ldr	r2, [r7, #4]
 801e836:	683b      	ldr	r3, [r7, #0]
 801e838:	781b      	ldrb	r3, [r3, #0]
 801e83a:	009b      	lsls	r3, r3, #2
 801e83c:	18d3      	adds	r3, r2, r3
 801e83e:	183a      	adds	r2, r7, r0
 801e840:	8812      	ldrh	r2, [r2, #0]
 801e842:	491b      	ldr	r1, [pc, #108]	@ (801e8b0 <USB_EPClearStall+0x15c>)
 801e844:	430a      	orrs	r2, r1
 801e846:	b292      	uxth	r2, r2
 801e848:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e84a:	687a      	ldr	r2, [r7, #4]
 801e84c:	683b      	ldr	r3, [r7, #0]
 801e84e:	781b      	ldrb	r3, [r3, #0]
 801e850:	009b      	lsls	r3, r3, #2
 801e852:	18d3      	adds	r3, r2, r3
 801e854:	881b      	ldrh	r3, [r3, #0]
 801e856:	b29a      	uxth	r2, r3
 801e858:	2012      	movs	r0, #18
 801e85a:	183b      	adds	r3, r7, r0
 801e85c:	4915      	ldr	r1, [pc, #84]	@ (801e8b4 <USB_EPClearStall+0x160>)
 801e85e:	400a      	ands	r2, r1
 801e860:	801a      	strh	r2, [r3, #0]
 801e862:	183b      	adds	r3, r7, r0
 801e864:	183a      	adds	r2, r7, r0
 801e866:	8812      	ldrh	r2, [r2, #0]
 801e868:	2180      	movs	r1, #128	@ 0x80
 801e86a:	0149      	lsls	r1, r1, #5
 801e86c:	404a      	eors	r2, r1
 801e86e:	801a      	strh	r2, [r3, #0]
 801e870:	183b      	adds	r3, r7, r0
 801e872:	183a      	adds	r2, r7, r0
 801e874:	8812      	ldrh	r2, [r2, #0]
 801e876:	2180      	movs	r1, #128	@ 0x80
 801e878:	0189      	lsls	r1, r1, #6
 801e87a:	404a      	eors	r2, r1
 801e87c:	801a      	strh	r2, [r3, #0]
 801e87e:	687a      	ldr	r2, [r7, #4]
 801e880:	683b      	ldr	r3, [r7, #0]
 801e882:	781b      	ldrb	r3, [r3, #0]
 801e884:	009b      	lsls	r3, r3, #2
 801e886:	18d3      	adds	r3, r2, r3
 801e888:	183a      	adds	r2, r7, r0
 801e88a:	8812      	ldrh	r2, [r2, #0]
 801e88c:	4907      	ldr	r1, [pc, #28]	@ (801e8ac <USB_EPClearStall+0x158>)
 801e88e:	430a      	orrs	r2, r1
 801e890:	b292      	uxth	r2, r2
 801e892:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801e894:	2300      	movs	r3, #0
}
 801e896:	0018      	movs	r0, r3
 801e898:	46bd      	mov	sp, r7
 801e89a:	b006      	add	sp, #24
 801e89c:	bd80      	pop	{r7, pc}
 801e89e:	46c0      	nop			@ (mov r8, r8)
 801e8a0:	ffff8f8f 	.word	0xffff8f8f
 801e8a4:	ffff80c0 	.word	0xffff80c0
 801e8a8:	ffff8fbf 	.word	0xffff8fbf
 801e8ac:	ffff8080 	.word	0xffff8080
 801e8b0:	ffffc080 	.word	0xffffc080
 801e8b4:	ffffbf8f 	.word	0xffffbf8f

0801e8b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801e8b8:	b580      	push	{r7, lr}
 801e8ba:	b082      	sub	sp, #8
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	6078      	str	r0, [r7, #4]
 801e8c0:	000a      	movs	r2, r1
 801e8c2:	1cfb      	adds	r3, r7, #3
 801e8c4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801e8c6:	1cfb      	adds	r3, r7, #3
 801e8c8:	781b      	ldrb	r3, [r3, #0]
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	d103      	bne.n	801e8d6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	224c      	movs	r2, #76	@ 0x4c
 801e8d2:	2180      	movs	r1, #128	@ 0x80
 801e8d4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801e8d6:	2300      	movs	r3, #0
}
 801e8d8:	0018      	movs	r0, r3
 801e8da:	46bd      	mov	sp, r7
 801e8dc:	b002      	add	sp, #8
 801e8de:	bd80      	pop	{r7, pc}

0801e8e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801e8e0:	b580      	push	{r7, lr}
 801e8e2:	b082      	sub	sp, #8
 801e8e4:	af00      	add	r7, sp, #0
 801e8e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2258      	movs	r2, #88	@ 0x58
 801e8ec:	5a9b      	ldrh	r3, [r3, r2]
 801e8ee:	b29b      	uxth	r3, r3
 801e8f0:	4a05      	ldr	r2, [pc, #20]	@ (801e908 <USB_DevConnect+0x28>)
 801e8f2:	4313      	orrs	r3, r2
 801e8f4:	b299      	uxth	r1, r3
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	2258      	movs	r2, #88	@ 0x58
 801e8fa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e8fc:	2300      	movs	r3, #0
}
 801e8fe:	0018      	movs	r0, r3
 801e900:	46bd      	mov	sp, r7
 801e902:	b002      	add	sp, #8
 801e904:	bd80      	pop	{r7, pc}
 801e906:	46c0      	nop			@ (mov r8, r8)
 801e908:	ffff8000 	.word	0xffff8000

0801e90c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801e90c:	b580      	push	{r7, lr}
 801e90e:	b084      	sub	sp, #16
 801e910:	af00      	add	r7, sp, #0
 801e912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	2244      	movs	r2, #68	@ 0x44
 801e918:	5a9b      	ldrh	r3, [r3, r2]
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801e91e:	68fb      	ldr	r3, [r7, #12]
}
 801e920:	0018      	movs	r0, r3
 801e922:	46bd      	mov	sp, r7
 801e924:	b004      	add	sp, #16
 801e926:	bd80      	pop	{r7, pc}

0801e928 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801e928:	b580      	push	{r7, lr}
 801e92a:	b08a      	sub	sp, #40	@ 0x28
 801e92c:	af00      	add	r7, sp, #0
 801e92e:	60f8      	str	r0, [r7, #12]
 801e930:	60b9      	str	r1, [r7, #8]
 801e932:	0019      	movs	r1, r3
 801e934:	1dbb      	adds	r3, r7, #6
 801e936:	801a      	strh	r2, [r3, #0]
 801e938:	1d3b      	adds	r3, r7, #4
 801e93a:	1c0a      	adds	r2, r1, #0
 801e93c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801e93e:	1d3b      	adds	r3, r7, #4
 801e940:	881b      	ldrh	r3, [r3, #0]
 801e942:	3301      	adds	r3, #1
 801e944:	085b      	lsrs	r3, r3, #1
 801e946:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801e948:	68fb      	ldr	r3, [r7, #12]
 801e94a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801e94c:	68bb      	ldr	r3, [r7, #8]
 801e94e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e950:	1dbb      	adds	r3, r7, #6
 801e952:	881a      	ldrh	r2, [r3, #0]
 801e954:	697b      	ldr	r3, [r7, #20]
 801e956:	18d3      	adds	r3, r2, r3
 801e958:	2280      	movs	r2, #128	@ 0x80
 801e95a:	00d2      	lsls	r2, r2, #3
 801e95c:	4694      	mov	ip, r2
 801e95e:	4463      	add	r3, ip
 801e960:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801e962:	69bb      	ldr	r3, [r7, #24]
 801e964:	627b      	str	r3, [r7, #36]	@ 0x24
 801e966:	e020      	b.n	801e9aa <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801e968:	69fb      	ldr	r3, [r7, #28]
 801e96a:	781a      	ldrb	r2, [r3, #0]
 801e96c:	2112      	movs	r1, #18
 801e96e:	187b      	adds	r3, r7, r1
 801e970:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801e972:	69fb      	ldr	r3, [r7, #28]
 801e974:	3301      	adds	r3, #1
 801e976:	781b      	ldrb	r3, [r3, #0]
 801e978:	021b      	lsls	r3, r3, #8
 801e97a:	b21a      	sxth	r2, r3
 801e97c:	187b      	adds	r3, r7, r1
 801e97e:	2000      	movs	r0, #0
 801e980:	5e1b      	ldrsh	r3, [r3, r0]
 801e982:	4313      	orrs	r3, r2
 801e984:	b21a      	sxth	r2, r3
 801e986:	187b      	adds	r3, r7, r1
 801e988:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801e98a:	6a3b      	ldr	r3, [r7, #32]
 801e98c:	187a      	adds	r2, r7, r1
 801e98e:	8812      	ldrh	r2, [r2, #0]
 801e990:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801e992:	6a3b      	ldr	r3, [r7, #32]
 801e994:	3302      	adds	r3, #2
 801e996:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801e998:	69fb      	ldr	r3, [r7, #28]
 801e99a:	3301      	adds	r3, #1
 801e99c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801e99e:	69fb      	ldr	r3, [r7, #28]
 801e9a0:	3301      	adds	r3, #1
 801e9a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801e9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a6:	3b01      	subs	r3, #1
 801e9a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d1db      	bne.n	801e968 <USB_WritePMA+0x40>
  }
}
 801e9b0:	46c0      	nop			@ (mov r8, r8)
 801e9b2:	46c0      	nop			@ (mov r8, r8)
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	b00a      	add	sp, #40	@ 0x28
 801e9b8:	bd80      	pop	{r7, pc}

0801e9ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801e9ba:	b580      	push	{r7, lr}
 801e9bc:	b08a      	sub	sp, #40	@ 0x28
 801e9be:	af00      	add	r7, sp, #0
 801e9c0:	60f8      	str	r0, [r7, #12]
 801e9c2:	60b9      	str	r1, [r7, #8]
 801e9c4:	0019      	movs	r1, r3
 801e9c6:	1dbb      	adds	r3, r7, #6
 801e9c8:	801a      	strh	r2, [r3, #0]
 801e9ca:	1d3b      	adds	r3, r7, #4
 801e9cc:	1c0a      	adds	r2, r1, #0
 801e9ce:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801e9d0:	1d3b      	adds	r3, r7, #4
 801e9d2:	881b      	ldrh	r3, [r3, #0]
 801e9d4:	085b      	lsrs	r3, r3, #1
 801e9d6:	b29b      	uxth	r3, r3
 801e9d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801e9de:	68bb      	ldr	r3, [r7, #8]
 801e9e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e9e2:	1dbb      	adds	r3, r7, #6
 801e9e4:	881a      	ldrh	r2, [r3, #0]
 801e9e6:	697b      	ldr	r3, [r7, #20]
 801e9e8:	18d3      	adds	r3, r2, r3
 801e9ea:	2280      	movs	r2, #128	@ 0x80
 801e9ec:	00d2      	lsls	r2, r2, #3
 801e9ee:	4694      	mov	ip, r2
 801e9f0:	4463      	add	r3, ip
 801e9f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801e9f4:	69bb      	ldr	r3, [r7, #24]
 801e9f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9f8:	e018      	b.n	801ea2c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801e9fa:	6a3b      	ldr	r3, [r7, #32]
 801e9fc:	881b      	ldrh	r3, [r3, #0]
 801e9fe:	b29b      	uxth	r3, r3
 801ea00:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801ea02:	6a3b      	ldr	r3, [r7, #32]
 801ea04:	3302      	adds	r3, #2
 801ea06:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801ea08:	693b      	ldr	r3, [r7, #16]
 801ea0a:	b2da      	uxtb	r2, r3
 801ea0c:	69fb      	ldr	r3, [r7, #28]
 801ea0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801ea10:	69fb      	ldr	r3, [r7, #28]
 801ea12:	3301      	adds	r3, #1
 801ea14:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801ea16:	693b      	ldr	r3, [r7, #16]
 801ea18:	0a1b      	lsrs	r3, r3, #8
 801ea1a:	b2da      	uxtb	r2, r3
 801ea1c:	69fb      	ldr	r3, [r7, #28]
 801ea1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801ea20:	69fb      	ldr	r3, [r7, #28]
 801ea22:	3301      	adds	r3, #1
 801ea24:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea28:	3b01      	subs	r3, #1
 801ea2a:	627b      	str	r3, [r7, #36]	@ 0x24
 801ea2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d1e3      	bne.n	801e9fa <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801ea32:	1d3b      	adds	r3, r7, #4
 801ea34:	881b      	ldrh	r3, [r3, #0]
 801ea36:	2201      	movs	r2, #1
 801ea38:	4013      	ands	r3, r2
 801ea3a:	b29b      	uxth	r3, r3
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d007      	beq.n	801ea50 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801ea40:	6a3b      	ldr	r3, [r7, #32]
 801ea42:	881b      	ldrh	r3, [r3, #0]
 801ea44:	b29b      	uxth	r3, r3
 801ea46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801ea48:	693b      	ldr	r3, [r7, #16]
 801ea4a:	b2da      	uxtb	r2, r3
 801ea4c:	69fb      	ldr	r3, [r7, #28]
 801ea4e:	701a      	strb	r2, [r3, #0]
  }
}
 801ea50:	46c0      	nop			@ (mov r8, r8)
 801ea52:	46bd      	mov	sp, r7
 801ea54:	b00a      	add	sp, #40	@ 0x28
 801ea56:	bd80      	pop	{r7, pc}

0801ea58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ea58:	b580      	push	{r7, lr}
 801ea5a:	b084      	sub	sp, #16
 801ea5c:	af00      	add	r7, sp, #0
 801ea5e:	6078      	str	r0, [r7, #4]
 801ea60:	000a      	movs	r2, r1
 801ea62:	1cfb      	adds	r3, r7, #3
 801ea64:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801ea66:	230f      	movs	r3, #15
 801ea68:	18fb      	adds	r3, r7, r3
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	7c1b      	ldrb	r3, [r3, #16]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d116      	bne.n	801eaa4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801ea76:	2380      	movs	r3, #128	@ 0x80
 801ea78:	009b      	lsls	r3, r3, #2
 801ea7a:	6878      	ldr	r0, [r7, #4]
 801ea7c:	2202      	movs	r2, #2
 801ea7e:	2181      	movs	r1, #129	@ 0x81
 801ea80:	f002 f8eb 	bl	8020c5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2201      	movs	r2, #1
 801ea88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801ea8a:	2380      	movs	r3, #128	@ 0x80
 801ea8c:	009b      	lsls	r3, r3, #2
 801ea8e:	6878      	ldr	r0, [r7, #4]
 801ea90:	2202      	movs	r2, #2
 801ea92:	2101      	movs	r1, #1
 801ea94:	f002 f8e1 	bl	8020c5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801ea98:	687a      	ldr	r2, [r7, #4]
 801ea9a:	23b6      	movs	r3, #182	@ 0xb6
 801ea9c:	005b      	lsls	r3, r3, #1
 801ea9e:	2101      	movs	r1, #1
 801eaa0:	50d1      	str	r1, [r2, r3]
 801eaa2:	e013      	b.n	801eacc <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801eaa4:	6878      	ldr	r0, [r7, #4]
 801eaa6:	2340      	movs	r3, #64	@ 0x40
 801eaa8:	2202      	movs	r2, #2
 801eaaa:	2181      	movs	r1, #129	@ 0x81
 801eaac:	f002 f8d5 	bl	8020c5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	2201      	movs	r2, #1
 801eab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801eab6:	6878      	ldr	r0, [r7, #4]
 801eab8:	2340      	movs	r3, #64	@ 0x40
 801eaba:	2202      	movs	r2, #2
 801eabc:	2101      	movs	r1, #1
 801eabe:	f002 f8cc 	bl	8020c5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801eac2:	687a      	ldr	r2, [r7, #4]
 801eac4:	23b6      	movs	r3, #182	@ 0xb6
 801eac6:	005b      	lsls	r3, r3, #1
 801eac8:	2101      	movs	r1, #1
 801eaca:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801eacc:	6878      	ldr	r0, [r7, #4]
 801eace:	2308      	movs	r3, #8
 801ead0:	2203      	movs	r2, #3
 801ead2:	2182      	movs	r1, #130	@ 0x82
 801ead4:	f002 f8c1 	bl	8020c5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	2201      	movs	r2, #1
 801eadc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801eade:	2387      	movs	r3, #135	@ 0x87
 801eae0:	009b      	lsls	r3, r3, #2
 801eae2:	0018      	movs	r0, r3
 801eae4:	f002 fa52 	bl	8020f8c <USBD_static_malloc>
 801eae8:	0001      	movs	r1, r0
 801eaea:	687a      	ldr	r2, [r7, #4]
 801eaec:	23ae      	movs	r3, #174	@ 0xae
 801eaee:	009b      	lsls	r3, r3, #2
 801eaf0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801eaf2:	687a      	ldr	r2, [r7, #4]
 801eaf4:	23ae      	movs	r3, #174	@ 0xae
 801eaf6:	009b      	lsls	r3, r3, #2
 801eaf8:	58d3      	ldr	r3, [r2, r3]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d104      	bne.n	801eb08 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801eafe:	230f      	movs	r3, #15
 801eb00:	18fb      	adds	r3, r7, r3
 801eb02:	2201      	movs	r2, #1
 801eb04:	701a      	strb	r2, [r3, #0]
 801eb06:	e02c      	b.n	801eb62 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801eb08:	687a      	ldr	r2, [r7, #4]
 801eb0a:	23ae      	movs	r3, #174	@ 0xae
 801eb0c:	009b      	lsls	r3, r3, #2
 801eb0e:	58d3      	ldr	r3, [r2, r3]
 801eb10:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801eb12:	687a      	ldr	r2, [r7, #4]
 801eb14:	23af      	movs	r3, #175	@ 0xaf
 801eb16:	009b      	lsls	r3, r3, #2
 801eb18:	58d3      	ldr	r3, [r2, r3]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801eb1e:	68ba      	ldr	r2, [r7, #8]
 801eb20:	2385      	movs	r3, #133	@ 0x85
 801eb22:	009b      	lsls	r3, r3, #2
 801eb24:	2100      	movs	r1, #0
 801eb26:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801eb28:	68ba      	ldr	r2, [r7, #8]
 801eb2a:	2386      	movs	r3, #134	@ 0x86
 801eb2c:	009b      	lsls	r3, r3, #2
 801eb2e:	2100      	movs	r1, #0
 801eb30:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	7c1b      	ldrb	r3, [r3, #16]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d10a      	bne.n	801eb50 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801eb3a:	68ba      	ldr	r2, [r7, #8]
 801eb3c:	2381      	movs	r3, #129	@ 0x81
 801eb3e:	009b      	lsls	r3, r3, #2
 801eb40:	58d2      	ldr	r2, [r2, r3]
 801eb42:	2380      	movs	r3, #128	@ 0x80
 801eb44:	009b      	lsls	r3, r3, #2
 801eb46:	6878      	ldr	r0, [r7, #4]
 801eb48:	2101      	movs	r1, #1
 801eb4a:	f002 f9d1 	bl	8020ef0 <USBD_LL_PrepareReceive>
 801eb4e:	e008      	b.n	801eb62 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801eb50:	68ba      	ldr	r2, [r7, #8]
 801eb52:	2381      	movs	r3, #129	@ 0x81
 801eb54:	009b      	lsls	r3, r3, #2
 801eb56:	58d2      	ldr	r2, [r2, r3]
 801eb58:	6878      	ldr	r0, [r7, #4]
 801eb5a:	2340      	movs	r3, #64	@ 0x40
 801eb5c:	2101      	movs	r1, #1
 801eb5e:	f002 f9c7 	bl	8020ef0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801eb62:	230f      	movs	r3, #15
 801eb64:	18fb      	adds	r3, r7, r3
 801eb66:	781b      	ldrb	r3, [r3, #0]
}
 801eb68:	0018      	movs	r0, r3
 801eb6a:	46bd      	mov	sp, r7
 801eb6c:	b004      	add	sp, #16
 801eb6e:	bd80      	pop	{r7, pc}

0801eb70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b084      	sub	sp, #16
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
 801eb78:	000a      	movs	r2, r1
 801eb7a:	1cfb      	adds	r3, r7, #3
 801eb7c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801eb7e:	230f      	movs	r3, #15
 801eb80:	18fb      	adds	r3, r7, r3
 801eb82:	2200      	movs	r2, #0
 801eb84:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	2181      	movs	r1, #129	@ 0x81
 801eb8a:	0018      	movs	r0, r3
 801eb8c:	f002 f89c 	bl	8020cc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	2200      	movs	r2, #0
 801eb94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	2101      	movs	r1, #1
 801eb9a:	0018      	movs	r0, r3
 801eb9c:	f002 f894 	bl	8020cc8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801eba0:	687a      	ldr	r2, [r7, #4]
 801eba2:	23b6      	movs	r3, #182	@ 0xb6
 801eba4:	005b      	lsls	r3, r3, #1
 801eba6:	2100      	movs	r1, #0
 801eba8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	2182      	movs	r1, #130	@ 0x82
 801ebae:	0018      	movs	r0, r3
 801ebb0:	f002 f88a 	bl	8020cc8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	2200      	movs	r2, #0
 801ebb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801ebba:	687a      	ldr	r2, [r7, #4]
 801ebbc:	23ae      	movs	r3, #174	@ 0xae
 801ebbe:	009b      	lsls	r3, r3, #2
 801ebc0:	58d3      	ldr	r3, [r2, r3]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d011      	beq.n	801ebea <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801ebc6:	687a      	ldr	r2, [r7, #4]
 801ebc8:	23af      	movs	r3, #175	@ 0xaf
 801ebca:	009b      	lsls	r3, r3, #2
 801ebcc:	58d3      	ldr	r3, [r2, r3]
 801ebce:	685b      	ldr	r3, [r3, #4]
 801ebd0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801ebd2:	687a      	ldr	r2, [r7, #4]
 801ebd4:	23ae      	movs	r3, #174	@ 0xae
 801ebd6:	009b      	lsls	r3, r3, #2
 801ebd8:	58d3      	ldr	r3, [r2, r3]
 801ebda:	0018      	movs	r0, r3
 801ebdc:	f002 f9e2 	bl	8020fa4 <USBD_static_free>
    pdev->pClassData = NULL;
 801ebe0:	687a      	ldr	r2, [r7, #4]
 801ebe2:	23ae      	movs	r3, #174	@ 0xae
 801ebe4:	009b      	lsls	r3, r3, #2
 801ebe6:	2100      	movs	r1, #0
 801ebe8:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801ebea:	230f      	movs	r3, #15
 801ebec:	18fb      	adds	r3, r7, r3
 801ebee:	781b      	ldrb	r3, [r3, #0]
}
 801ebf0:	0018      	movs	r0, r3
 801ebf2:	46bd      	mov	sp, r7
 801ebf4:	b004      	add	sp, #16
 801ebf6:	bd80      	pop	{r7, pc}

0801ebf8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ebf8:	b580      	push	{r7, lr}
 801ebfa:	b086      	sub	sp, #24
 801ebfc:	af00      	add	r7, sp, #0
 801ebfe:	6078      	str	r0, [r7, #4]
 801ec00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ec02:	687a      	ldr	r2, [r7, #4]
 801ec04:	23ae      	movs	r3, #174	@ 0xae
 801ec06:	009b      	lsls	r3, r3, #2
 801ec08:	58d3      	ldr	r3, [r2, r3]
 801ec0a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801ec0c:	230f      	movs	r3, #15
 801ec0e:	18fb      	adds	r3, r7, r3
 801ec10:	2200      	movs	r2, #0
 801ec12:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801ec14:	230c      	movs	r3, #12
 801ec16:	18fb      	adds	r3, r7, r3
 801ec18:	2200      	movs	r2, #0
 801ec1a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801ec1c:	2317      	movs	r3, #23
 801ec1e:	18fb      	adds	r3, r7, r3
 801ec20:	2200      	movs	r2, #0
 801ec22:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec24:	683b      	ldr	r3, [r7, #0]
 801ec26:	781b      	ldrb	r3, [r3, #0]
 801ec28:	001a      	movs	r2, r3
 801ec2a:	2360      	movs	r3, #96	@ 0x60
 801ec2c:	4013      	ands	r3, r2
 801ec2e:	d03d      	beq.n	801ecac <USBD_CDC_Setup+0xb4>
 801ec30:	2b20      	cmp	r3, #32
 801ec32:	d000      	beq.n	801ec36 <USBD_CDC_Setup+0x3e>
 801ec34:	e094      	b.n	801ed60 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801ec36:	683b      	ldr	r3, [r7, #0]
 801ec38:	88db      	ldrh	r3, [r3, #6]
 801ec3a:	2b00      	cmp	r3, #0
 801ec3c:	d02b      	beq.n	801ec96 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801ec3e:	683b      	ldr	r3, [r7, #0]
 801ec40:	781b      	ldrb	r3, [r3, #0]
 801ec42:	b25b      	sxtb	r3, r3
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	da12      	bge.n	801ec6e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec48:	687a      	ldr	r2, [r7, #4]
 801ec4a:	23af      	movs	r3, #175	@ 0xaf
 801ec4c:	009b      	lsls	r3, r3, #2
 801ec4e:	58d3      	ldr	r3, [r2, r3]
 801ec50:	689b      	ldr	r3, [r3, #8]
 801ec52:	683a      	ldr	r2, [r7, #0]
 801ec54:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801ec56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec58:	683a      	ldr	r2, [r7, #0]
 801ec5a:	88d2      	ldrh	r2, [r2, #6]
 801ec5c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ec5e:	6939      	ldr	r1, [r7, #16]
 801ec60:	683b      	ldr	r3, [r7, #0]
 801ec62:	88da      	ldrh	r2, [r3, #6]
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	0018      	movs	r0, r3
 801ec68:	f001 fbaf 	bl	80203ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801ec6c:	e083      	b.n	801ed76 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801ec6e:	683b      	ldr	r3, [r7, #0]
 801ec70:	7859      	ldrb	r1, [r3, #1]
 801ec72:	693a      	ldr	r2, [r7, #16]
 801ec74:	2380      	movs	r3, #128	@ 0x80
 801ec76:	009b      	lsls	r3, r3, #2
 801ec78:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801ec7a:	683b      	ldr	r3, [r7, #0]
 801ec7c:	88db      	ldrh	r3, [r3, #6]
 801ec7e:	b2d9      	uxtb	r1, r3
 801ec80:	693b      	ldr	r3, [r7, #16]
 801ec82:	4a40      	ldr	r2, [pc, #256]	@ (801ed84 <USBD_CDC_Setup+0x18c>)
 801ec84:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ec86:	6939      	ldr	r1, [r7, #16]
 801ec88:	683b      	ldr	r3, [r7, #0]
 801ec8a:	88da      	ldrh	r2, [r3, #6]
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	0018      	movs	r0, r3
 801ec90:	f001 fbce 	bl	8020430 <USBD_CtlPrepareRx>
      break;
 801ec94:	e06f      	b.n	801ed76 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec96:	687a      	ldr	r2, [r7, #4]
 801ec98:	23af      	movs	r3, #175	@ 0xaf
 801ec9a:	009b      	lsls	r3, r3, #2
 801ec9c:	58d3      	ldr	r3, [r2, r3]
 801ec9e:	689b      	ldr	r3, [r3, #8]
 801eca0:	683a      	ldr	r2, [r7, #0]
 801eca2:	7850      	ldrb	r0, [r2, #1]
 801eca4:	6839      	ldr	r1, [r7, #0]
 801eca6:	2200      	movs	r2, #0
 801eca8:	4798      	blx	r3
      break;
 801ecaa:	e064      	b.n	801ed76 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801ecac:	683b      	ldr	r3, [r7, #0]
 801ecae:	785b      	ldrb	r3, [r3, #1]
 801ecb0:	2b0b      	cmp	r3, #11
 801ecb2:	d037      	beq.n	801ed24 <USBD_CDC_Setup+0x12c>
 801ecb4:	dc47      	bgt.n	801ed46 <USBD_CDC_Setup+0x14e>
 801ecb6:	2b00      	cmp	r3, #0
 801ecb8:	d002      	beq.n	801ecc0 <USBD_CDC_Setup+0xc8>
 801ecba:	2b0a      	cmp	r3, #10
 801ecbc:	d019      	beq.n	801ecf2 <USBD_CDC_Setup+0xfa>
 801ecbe:	e042      	b.n	801ed46 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ecc0:	687a      	ldr	r2, [r7, #4]
 801ecc2:	23a7      	movs	r3, #167	@ 0xa7
 801ecc4:	009b      	lsls	r3, r3, #2
 801ecc6:	5cd3      	ldrb	r3, [r2, r3]
 801ecc8:	2b03      	cmp	r3, #3
 801ecca:	d107      	bne.n	801ecdc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801eccc:	230c      	movs	r3, #12
 801ecce:	18f9      	adds	r1, r7, r3
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	2202      	movs	r2, #2
 801ecd4:	0018      	movs	r0, r3
 801ecd6:	f001 fb78 	bl	80203ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ecda:	e040      	b.n	801ed5e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ecdc:	683a      	ldr	r2, [r7, #0]
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	0011      	movs	r1, r2
 801ece2:	0018      	movs	r0, r3
 801ece4:	f001 faf3 	bl	80202ce <USBD_CtlError>
            ret = USBD_FAIL;
 801ece8:	2317      	movs	r3, #23
 801ecea:	18fb      	adds	r3, r7, r3
 801ecec:	2202      	movs	r2, #2
 801ecee:	701a      	strb	r2, [r3, #0]
          break;
 801ecf0:	e035      	b.n	801ed5e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ecf2:	687a      	ldr	r2, [r7, #4]
 801ecf4:	23a7      	movs	r3, #167	@ 0xa7
 801ecf6:	009b      	lsls	r3, r3, #2
 801ecf8:	5cd3      	ldrb	r3, [r2, r3]
 801ecfa:	2b03      	cmp	r3, #3
 801ecfc:	d107      	bne.n	801ed0e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801ecfe:	230f      	movs	r3, #15
 801ed00:	18f9      	adds	r1, r7, r3
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	2201      	movs	r2, #1
 801ed06:	0018      	movs	r0, r3
 801ed08:	f001 fb5f 	bl	80203ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ed0c:	e027      	b.n	801ed5e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ed0e:	683a      	ldr	r2, [r7, #0]
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	0011      	movs	r1, r2
 801ed14:	0018      	movs	r0, r3
 801ed16:	f001 fada 	bl	80202ce <USBD_CtlError>
            ret = USBD_FAIL;
 801ed1a:	2317      	movs	r3, #23
 801ed1c:	18fb      	adds	r3, r7, r3
 801ed1e:	2202      	movs	r2, #2
 801ed20:	701a      	strb	r2, [r3, #0]
          break;
 801ed22:	e01c      	b.n	801ed5e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801ed24:	687a      	ldr	r2, [r7, #4]
 801ed26:	23a7      	movs	r3, #167	@ 0xa7
 801ed28:	009b      	lsls	r3, r3, #2
 801ed2a:	5cd3      	ldrb	r3, [r2, r3]
 801ed2c:	2b03      	cmp	r3, #3
 801ed2e:	d015      	beq.n	801ed5c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801ed30:	683a      	ldr	r2, [r7, #0]
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	0011      	movs	r1, r2
 801ed36:	0018      	movs	r0, r3
 801ed38:	f001 fac9 	bl	80202ce <USBD_CtlError>
            ret = USBD_FAIL;
 801ed3c:	2317      	movs	r3, #23
 801ed3e:	18fb      	adds	r3, r7, r3
 801ed40:	2202      	movs	r2, #2
 801ed42:	701a      	strb	r2, [r3, #0]
          }
          break;
 801ed44:	e00a      	b.n	801ed5c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801ed46:	683a      	ldr	r2, [r7, #0]
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	0011      	movs	r1, r2
 801ed4c:	0018      	movs	r0, r3
 801ed4e:	f001 fabe 	bl	80202ce <USBD_CtlError>
          ret = USBD_FAIL;
 801ed52:	2317      	movs	r3, #23
 801ed54:	18fb      	adds	r3, r7, r3
 801ed56:	2202      	movs	r2, #2
 801ed58:	701a      	strb	r2, [r3, #0]
          break;
 801ed5a:	e000      	b.n	801ed5e <USBD_CDC_Setup+0x166>
          break;
 801ed5c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ed5e:	e00a      	b.n	801ed76 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801ed60:	683a      	ldr	r2, [r7, #0]
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	0011      	movs	r1, r2
 801ed66:	0018      	movs	r0, r3
 801ed68:	f001 fab1 	bl	80202ce <USBD_CtlError>
      ret = USBD_FAIL;
 801ed6c:	2317      	movs	r3, #23
 801ed6e:	18fb      	adds	r3, r7, r3
 801ed70:	2202      	movs	r2, #2
 801ed72:	701a      	strb	r2, [r3, #0]
      break;
 801ed74:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ed76:	2317      	movs	r3, #23
 801ed78:	18fb      	adds	r3, r7, r3
 801ed7a:	781b      	ldrb	r3, [r3, #0]
}
 801ed7c:	0018      	movs	r0, r3
 801ed7e:	46bd      	mov	sp, r7
 801ed80:	b006      	add	sp, #24
 801ed82:	bd80      	pop	{r7, pc}
 801ed84:	00000201 	.word	0x00000201

0801ed88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b084      	sub	sp, #16
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	6078      	str	r0, [r7, #4]
 801ed90:	000a      	movs	r2, r1
 801ed92:	1cfb      	adds	r3, r7, #3
 801ed94:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801ed96:	687a      	ldr	r2, [r7, #4]
 801ed98:	23ae      	movs	r3, #174	@ 0xae
 801ed9a:	009b      	lsls	r3, r3, #2
 801ed9c:	58d3      	ldr	r3, [r2, r3]
 801ed9e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801eda0:	687a      	ldr	r2, [r7, #4]
 801eda2:	23b0      	movs	r3, #176	@ 0xb0
 801eda4:	009b      	lsls	r3, r3, #2
 801eda6:	58d3      	ldr	r3, [r2, r3]
 801eda8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801edaa:	687a      	ldr	r2, [r7, #4]
 801edac:	23ae      	movs	r3, #174	@ 0xae
 801edae:	009b      	lsls	r3, r3, #2
 801edb0:	58d3      	ldr	r3, [r2, r3]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	d03e      	beq.n	801ee34 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801edb6:	1cfb      	adds	r3, r7, #3
 801edb8:	781a      	ldrb	r2, [r3, #0]
 801edba:	6879      	ldr	r1, [r7, #4]
 801edbc:	0013      	movs	r3, r2
 801edbe:	009b      	lsls	r3, r3, #2
 801edc0:	189b      	adds	r3, r3, r2
 801edc2:	009b      	lsls	r3, r3, #2
 801edc4:	18cb      	adds	r3, r1, r3
 801edc6:	331c      	adds	r3, #28
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d02b      	beq.n	801ee26 <USBD_CDC_DataIn+0x9e>
 801edce:	1cfb      	adds	r3, r7, #3
 801edd0:	781a      	ldrb	r2, [r3, #0]
 801edd2:	6879      	ldr	r1, [r7, #4]
 801edd4:	0013      	movs	r3, r2
 801edd6:	009b      	lsls	r3, r3, #2
 801edd8:	189b      	adds	r3, r3, r2
 801edda:	009b      	lsls	r3, r3, #2
 801eddc:	18cb      	adds	r3, r1, r3
 801edde:	331c      	adds	r3, #28
 801ede0:	6818      	ldr	r0, [r3, #0]
 801ede2:	1cfb      	adds	r3, r7, #3
 801ede4:	781a      	ldrb	r2, [r3, #0]
 801ede6:	68b9      	ldr	r1, [r7, #8]
 801ede8:	0013      	movs	r3, r2
 801edea:	009b      	lsls	r3, r3, #2
 801edec:	189b      	adds	r3, r3, r2
 801edee:	00db      	lsls	r3, r3, #3
 801edf0:	18cb      	adds	r3, r1, r3
 801edf2:	3338      	adds	r3, #56	@ 0x38
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	0019      	movs	r1, r3
 801edf8:	f7e1 fa5a 	bl	80002b0 <__aeabi_uidivmod>
 801edfc:	1e0b      	subs	r3, r1, #0
 801edfe:	d112      	bne.n	801ee26 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801ee00:	1cfb      	adds	r3, r7, #3
 801ee02:	781a      	ldrb	r2, [r3, #0]
 801ee04:	6879      	ldr	r1, [r7, #4]
 801ee06:	0013      	movs	r3, r2
 801ee08:	009b      	lsls	r3, r3, #2
 801ee0a:	189b      	adds	r3, r3, r2
 801ee0c:	009b      	lsls	r3, r3, #2
 801ee0e:	18cb      	adds	r3, r1, r3
 801ee10:	331c      	adds	r3, #28
 801ee12:	2200      	movs	r2, #0
 801ee14:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ee16:	1cfb      	adds	r3, r7, #3
 801ee18:	7819      	ldrb	r1, [r3, #0]
 801ee1a:	6878      	ldr	r0, [r7, #4]
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	2200      	movs	r2, #0
 801ee20:	f002 f82f 	bl	8020e82 <USBD_LL_Transmit>
 801ee24:	e004      	b.n	801ee30 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ee26:	68fa      	ldr	r2, [r7, #12]
 801ee28:	2385      	movs	r3, #133	@ 0x85
 801ee2a:	009b      	lsls	r3, r3, #2
 801ee2c:	2100      	movs	r1, #0
 801ee2e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ee30:	2300      	movs	r3, #0
 801ee32:	e000      	b.n	801ee36 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801ee34:	2302      	movs	r3, #2
  }
}
 801ee36:	0018      	movs	r0, r3
 801ee38:	46bd      	mov	sp, r7
 801ee3a:	b004      	add	sp, #16
 801ee3c:	bd80      	pop	{r7, pc}

0801ee3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ee3e:	b580      	push	{r7, lr}
 801ee40:	b084      	sub	sp, #16
 801ee42:	af00      	add	r7, sp, #0
 801ee44:	6078      	str	r0, [r7, #4]
 801ee46:	000a      	movs	r2, r1
 801ee48:	1cfb      	adds	r3, r7, #3
 801ee4a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ee4c:	687a      	ldr	r2, [r7, #4]
 801ee4e:	23ae      	movs	r3, #174	@ 0xae
 801ee50:	009b      	lsls	r3, r3, #2
 801ee52:	58d3      	ldr	r3, [r2, r3]
 801ee54:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801ee56:	1cfb      	adds	r3, r7, #3
 801ee58:	781a      	ldrb	r2, [r3, #0]
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	0011      	movs	r1, r2
 801ee5e:	0018      	movs	r0, r3
 801ee60:	f002 f87d 	bl	8020f5e <USBD_LL_GetRxDataSize>
 801ee64:	0001      	movs	r1, r0
 801ee66:	68fa      	ldr	r2, [r7, #12]
 801ee68:	2383      	movs	r3, #131	@ 0x83
 801ee6a:	009b      	lsls	r3, r3, #2
 801ee6c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ee6e:	687a      	ldr	r2, [r7, #4]
 801ee70:	23ae      	movs	r3, #174	@ 0xae
 801ee72:	009b      	lsls	r3, r3, #2
 801ee74:	58d3      	ldr	r3, [r2, r3]
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d011      	beq.n	801ee9e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801ee7a:	687a      	ldr	r2, [r7, #4]
 801ee7c:	23af      	movs	r3, #175	@ 0xaf
 801ee7e:	009b      	lsls	r3, r3, #2
 801ee80:	58d3      	ldr	r3, [r2, r3]
 801ee82:	68da      	ldr	r2, [r3, #12]
 801ee84:	68f9      	ldr	r1, [r7, #12]
 801ee86:	2381      	movs	r3, #129	@ 0x81
 801ee88:	009b      	lsls	r3, r3, #2
 801ee8a:	58c8      	ldr	r0, [r1, r3]
 801ee8c:	68fb      	ldr	r3, [r7, #12]
 801ee8e:	2183      	movs	r1, #131	@ 0x83
 801ee90:	0089      	lsls	r1, r1, #2
 801ee92:	468c      	mov	ip, r1
 801ee94:	4463      	add	r3, ip
 801ee96:	0019      	movs	r1, r3
 801ee98:	4790      	blx	r2

    return USBD_OK;
 801ee9a:	2300      	movs	r3, #0
 801ee9c:	e000      	b.n	801eea0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801ee9e:	2302      	movs	r3, #2
  }
}
 801eea0:	0018      	movs	r0, r3
 801eea2:	46bd      	mov	sp, r7
 801eea4:	b004      	add	sp, #16
 801eea6:	bd80      	pop	{r7, pc}

0801eea8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801eea8:	b590      	push	{r4, r7, lr}
 801eeaa:	b085      	sub	sp, #20
 801eeac:	af00      	add	r7, sp, #0
 801eeae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801eeb0:	687a      	ldr	r2, [r7, #4]
 801eeb2:	23ae      	movs	r3, #174	@ 0xae
 801eeb4:	009b      	lsls	r3, r3, #2
 801eeb6:	58d3      	ldr	r3, [r2, r3]
 801eeb8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801eeba:	687a      	ldr	r2, [r7, #4]
 801eebc:	23af      	movs	r3, #175	@ 0xaf
 801eebe:	009b      	lsls	r3, r3, #2
 801eec0:	58d3      	ldr	r3, [r2, r3]
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d018      	beq.n	801eef8 <USBD_CDC_EP0_RxReady+0x50>
 801eec6:	68fa      	ldr	r2, [r7, #12]
 801eec8:	2380      	movs	r3, #128	@ 0x80
 801eeca:	009b      	lsls	r3, r3, #2
 801eecc:	5cd3      	ldrb	r3, [r2, r3]
 801eece:	2bff      	cmp	r3, #255	@ 0xff
 801eed0:	d012      	beq.n	801eef8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801eed2:	687a      	ldr	r2, [r7, #4]
 801eed4:	23af      	movs	r3, #175	@ 0xaf
 801eed6:	009b      	lsls	r3, r3, #2
 801eed8:	58d3      	ldr	r3, [r2, r3]
 801eeda:	689b      	ldr	r3, [r3, #8]
 801eedc:	68f9      	ldr	r1, [r7, #12]
 801eede:	2280      	movs	r2, #128	@ 0x80
 801eee0:	0092      	lsls	r2, r2, #2
 801eee2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801eee4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801eee6:	68fa      	ldr	r2, [r7, #12]
 801eee8:	4c06      	ldr	r4, [pc, #24]	@ (801ef04 <USBD_CDC_EP0_RxReady+0x5c>)
 801eeea:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801eeec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801eeee:	68fa      	ldr	r2, [r7, #12]
 801eef0:	2380      	movs	r3, #128	@ 0x80
 801eef2:	009b      	lsls	r3, r3, #2
 801eef4:	21ff      	movs	r1, #255	@ 0xff
 801eef6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801eef8:	2300      	movs	r3, #0
}
 801eefa:	0018      	movs	r0, r3
 801eefc:	46bd      	mov	sp, r7
 801eefe:	b005      	add	sp, #20
 801ef00:	bd90      	pop	{r4, r7, pc}
 801ef02:	46c0      	nop			@ (mov r8, r8)
 801ef04:	00000201 	.word	0x00000201

0801ef08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ef08:	b580      	push	{r7, lr}
 801ef0a:	b082      	sub	sp, #8
 801ef0c:	af00      	add	r7, sp, #0
 801ef0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	2243      	movs	r2, #67	@ 0x43
 801ef14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ef16:	4b02      	ldr	r3, [pc, #8]	@ (801ef20 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ef18:	0018      	movs	r0, r3
 801ef1a:	46bd      	mov	sp, r7
 801ef1c:	b002      	add	sp, #8
 801ef1e:	bd80      	pop	{r7, pc}
 801ef20:	20000180 	.word	0x20000180

0801ef24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ef24:	b580      	push	{r7, lr}
 801ef26:	b082      	sub	sp, #8
 801ef28:	af00      	add	r7, sp, #0
 801ef2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	2243      	movs	r2, #67	@ 0x43
 801ef30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ef32:	4b02      	ldr	r3, [pc, #8]	@ (801ef3c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ef34:	0018      	movs	r0, r3
 801ef36:	46bd      	mov	sp, r7
 801ef38:	b002      	add	sp, #8
 801ef3a:	bd80      	pop	{r7, pc}
 801ef3c:	2000013c 	.word	0x2000013c

0801ef40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ef40:	b580      	push	{r7, lr}
 801ef42:	b082      	sub	sp, #8
 801ef44:	af00      	add	r7, sp, #0
 801ef46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	2243      	movs	r2, #67	@ 0x43
 801ef4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ef4e:	4b02      	ldr	r3, [pc, #8]	@ (801ef58 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801ef50:	0018      	movs	r0, r3
 801ef52:	46bd      	mov	sp, r7
 801ef54:	b002      	add	sp, #8
 801ef56:	bd80      	pop	{r7, pc}
 801ef58:	200001c4 	.word	0x200001c4

0801ef5c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ef5c:	b580      	push	{r7, lr}
 801ef5e:	b082      	sub	sp, #8
 801ef60:	af00      	add	r7, sp, #0
 801ef62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	220a      	movs	r2, #10
 801ef68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801ef6a:	4b02      	ldr	r3, [pc, #8]	@ (801ef74 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801ef6c:	0018      	movs	r0, r3
 801ef6e:	46bd      	mov	sp, r7
 801ef70:	b002      	add	sp, #8
 801ef72:	bd80      	pop	{r7, pc}
 801ef74:	200000f8 	.word	0x200000f8

0801ef78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801ef78:	b580      	push	{r7, lr}
 801ef7a:	b084      	sub	sp, #16
 801ef7c:	af00      	add	r7, sp, #0
 801ef7e:	6078      	str	r0, [r7, #4]
 801ef80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801ef82:	200f      	movs	r0, #15
 801ef84:	183b      	adds	r3, r7, r0
 801ef86:	2202      	movs	r2, #2
 801ef88:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ef8a:	683b      	ldr	r3, [r7, #0]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d007      	beq.n	801efa0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ef90:	687a      	ldr	r2, [r7, #4]
 801ef92:	23af      	movs	r3, #175	@ 0xaf
 801ef94:	009b      	lsls	r3, r3, #2
 801ef96:	6839      	ldr	r1, [r7, #0]
 801ef98:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801ef9a:	183b      	adds	r3, r7, r0
 801ef9c:	2200      	movs	r2, #0
 801ef9e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801efa0:	230f      	movs	r3, #15
 801efa2:	18fb      	adds	r3, r7, r3
 801efa4:	781b      	ldrb	r3, [r3, #0]
}
 801efa6:	0018      	movs	r0, r3
 801efa8:	46bd      	mov	sp, r7
 801efaa:	b004      	add	sp, #16
 801efac:	bd80      	pop	{r7, pc}

0801efae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801efae:	b580      	push	{r7, lr}
 801efb0:	b086      	sub	sp, #24
 801efb2:	af00      	add	r7, sp, #0
 801efb4:	60f8      	str	r0, [r7, #12]
 801efb6:	60b9      	str	r1, [r7, #8]
 801efb8:	1dbb      	adds	r3, r7, #6
 801efba:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801efbc:	68fa      	ldr	r2, [r7, #12]
 801efbe:	23ae      	movs	r3, #174	@ 0xae
 801efc0:	009b      	lsls	r3, r3, #2
 801efc2:	58d3      	ldr	r3, [r2, r3]
 801efc4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801efc6:	697a      	ldr	r2, [r7, #20]
 801efc8:	2382      	movs	r3, #130	@ 0x82
 801efca:	009b      	lsls	r3, r3, #2
 801efcc:	68b9      	ldr	r1, [r7, #8]
 801efce:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801efd0:	1dbb      	adds	r3, r7, #6
 801efd2:	8819      	ldrh	r1, [r3, #0]
 801efd4:	697a      	ldr	r2, [r7, #20]
 801efd6:	2384      	movs	r3, #132	@ 0x84
 801efd8:	009b      	lsls	r3, r3, #2
 801efda:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801efdc:	2300      	movs	r3, #0
}
 801efde:	0018      	movs	r0, r3
 801efe0:	46bd      	mov	sp, r7
 801efe2:	b006      	add	sp, #24
 801efe4:	bd80      	pop	{r7, pc}

0801efe6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801efe6:	b580      	push	{r7, lr}
 801efe8:	b084      	sub	sp, #16
 801efea:	af00      	add	r7, sp, #0
 801efec:	6078      	str	r0, [r7, #4]
 801efee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801eff0:	687a      	ldr	r2, [r7, #4]
 801eff2:	23ae      	movs	r3, #174	@ 0xae
 801eff4:	009b      	lsls	r3, r3, #2
 801eff6:	58d3      	ldr	r3, [r2, r3]
 801eff8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801effa:	68fa      	ldr	r2, [r7, #12]
 801effc:	2381      	movs	r3, #129	@ 0x81
 801effe:	009b      	lsls	r3, r3, #2
 801f000:	6839      	ldr	r1, [r7, #0]
 801f002:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801f004:	2300      	movs	r3, #0
}
 801f006:	0018      	movs	r0, r3
 801f008:	46bd      	mov	sp, r7
 801f00a:	b004      	add	sp, #16
 801f00c:	bd80      	pop	{r7, pc}

0801f00e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801f00e:	b580      	push	{r7, lr}
 801f010:	b084      	sub	sp, #16
 801f012:	af00      	add	r7, sp, #0
 801f014:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801f016:	687a      	ldr	r2, [r7, #4]
 801f018:	23ae      	movs	r3, #174	@ 0xae
 801f01a:	009b      	lsls	r3, r3, #2
 801f01c:	58d3      	ldr	r3, [r2, r3]
 801f01e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801f020:	687a      	ldr	r2, [r7, #4]
 801f022:	23ae      	movs	r3, #174	@ 0xae
 801f024:	009b      	lsls	r3, r3, #2
 801f026:	58d3      	ldr	r3, [r2, r3]
 801f028:	2b00      	cmp	r3, #0
 801f02a:	d022      	beq.n	801f072 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801f02c:	68fa      	ldr	r2, [r7, #12]
 801f02e:	2385      	movs	r3, #133	@ 0x85
 801f030:	009b      	lsls	r3, r3, #2
 801f032:	58d3      	ldr	r3, [r2, r3]
 801f034:	2b00      	cmp	r3, #0
 801f036:	d11a      	bne.n	801f06e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801f038:	68fa      	ldr	r2, [r7, #12]
 801f03a:	2385      	movs	r3, #133	@ 0x85
 801f03c:	009b      	lsls	r3, r3, #2
 801f03e:	2101      	movs	r1, #1
 801f040:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801f042:	68fa      	ldr	r2, [r7, #12]
 801f044:	2384      	movs	r3, #132	@ 0x84
 801f046:	009b      	lsls	r3, r3, #2
 801f048:	58d2      	ldr	r2, [r2, r3]
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801f04e:	68fa      	ldr	r2, [r7, #12]
 801f050:	2382      	movs	r3, #130	@ 0x82
 801f052:	009b      	lsls	r3, r3, #2
 801f054:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801f056:	68fa      	ldr	r2, [r7, #12]
 801f058:	2384      	movs	r3, #132	@ 0x84
 801f05a:	009b      	lsls	r3, r3, #2
 801f05c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801f05e:	b29b      	uxth	r3, r3
 801f060:	6878      	ldr	r0, [r7, #4]
 801f062:	000a      	movs	r2, r1
 801f064:	2181      	movs	r1, #129	@ 0x81
 801f066:	f001 ff0c 	bl	8020e82 <USBD_LL_Transmit>

      return USBD_OK;
 801f06a:	2300      	movs	r3, #0
 801f06c:	e002      	b.n	801f074 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801f06e:	2301      	movs	r3, #1
 801f070:	e000      	b.n	801f074 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801f072:	2302      	movs	r3, #2
  }
}
 801f074:	0018      	movs	r0, r3
 801f076:	46bd      	mov	sp, r7
 801f078:	b004      	add	sp, #16
 801f07a:	bd80      	pop	{r7, pc}

0801f07c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801f07c:	b580      	push	{r7, lr}
 801f07e:	b084      	sub	sp, #16
 801f080:	af00      	add	r7, sp, #0
 801f082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801f084:	687a      	ldr	r2, [r7, #4]
 801f086:	23ae      	movs	r3, #174	@ 0xae
 801f088:	009b      	lsls	r3, r3, #2
 801f08a:	58d3      	ldr	r3, [r2, r3]
 801f08c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801f08e:	687a      	ldr	r2, [r7, #4]
 801f090:	23ae      	movs	r3, #174	@ 0xae
 801f092:	009b      	lsls	r3, r3, #2
 801f094:	58d3      	ldr	r3, [r2, r3]
 801f096:	2b00      	cmp	r3, #0
 801f098:	d019      	beq.n	801f0ce <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	7c1b      	ldrb	r3, [r3, #16]
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d10a      	bne.n	801f0b8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801f0a2:	68fa      	ldr	r2, [r7, #12]
 801f0a4:	2381      	movs	r3, #129	@ 0x81
 801f0a6:	009b      	lsls	r3, r3, #2
 801f0a8:	58d2      	ldr	r2, [r2, r3]
 801f0aa:	2380      	movs	r3, #128	@ 0x80
 801f0ac:	009b      	lsls	r3, r3, #2
 801f0ae:	6878      	ldr	r0, [r7, #4]
 801f0b0:	2101      	movs	r1, #1
 801f0b2:	f001 ff1d 	bl	8020ef0 <USBD_LL_PrepareReceive>
 801f0b6:	e008      	b.n	801f0ca <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801f0b8:	68fa      	ldr	r2, [r7, #12]
 801f0ba:	2381      	movs	r3, #129	@ 0x81
 801f0bc:	009b      	lsls	r3, r3, #2
 801f0be:	58d2      	ldr	r2, [r2, r3]
 801f0c0:	6878      	ldr	r0, [r7, #4]
 801f0c2:	2340      	movs	r3, #64	@ 0x40
 801f0c4:	2101      	movs	r1, #1
 801f0c6:	f001 ff13 	bl	8020ef0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801f0ca:	2300      	movs	r3, #0
 801f0cc:	e000      	b.n	801f0d0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801f0ce:	2302      	movs	r3, #2
  }
}
 801f0d0:	0018      	movs	r0, r3
 801f0d2:	46bd      	mov	sp, r7
 801f0d4:	b004      	add	sp, #16
 801f0d6:	bd80      	pop	{r7, pc}

0801f0d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801f0d8:	b580      	push	{r7, lr}
 801f0da:	b084      	sub	sp, #16
 801f0dc:	af00      	add	r7, sp, #0
 801f0de:	60f8      	str	r0, [r7, #12]
 801f0e0:	60b9      	str	r1, [r7, #8]
 801f0e2:	1dfb      	adds	r3, r7, #7
 801f0e4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d101      	bne.n	801f0f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801f0ec:	2302      	movs	r3, #2
 801f0ee:	e020      	b.n	801f132 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801f0f0:	68fa      	ldr	r2, [r7, #12]
 801f0f2:	23ad      	movs	r3, #173	@ 0xad
 801f0f4:	009b      	lsls	r3, r3, #2
 801f0f6:	58d3      	ldr	r3, [r2, r3]
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d004      	beq.n	801f106 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801f0fc:	68fa      	ldr	r2, [r7, #12]
 801f0fe:	23ad      	movs	r3, #173	@ 0xad
 801f100:	009b      	lsls	r3, r3, #2
 801f102:	2100      	movs	r1, #0
 801f104:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801f106:	68bb      	ldr	r3, [r7, #8]
 801f108:	2b00      	cmp	r3, #0
 801f10a:	d004      	beq.n	801f116 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801f10c:	68fa      	ldr	r2, [r7, #12]
 801f10e:	23ac      	movs	r3, #172	@ 0xac
 801f110:	009b      	lsls	r3, r3, #2
 801f112:	68b9      	ldr	r1, [r7, #8]
 801f114:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801f116:	68fa      	ldr	r2, [r7, #12]
 801f118:	23a7      	movs	r3, #167	@ 0xa7
 801f11a:	009b      	lsls	r3, r3, #2
 801f11c:	2101      	movs	r1, #1
 801f11e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801f120:	68fb      	ldr	r3, [r7, #12]
 801f122:	1dfa      	adds	r2, r7, #7
 801f124:	7812      	ldrb	r2, [r2, #0]
 801f126:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801f128:	68fb      	ldr	r3, [r7, #12]
 801f12a:	0018      	movs	r0, r3
 801f12c:	f001 fd0c 	bl	8020b48 <USBD_LL_Init>

  return USBD_OK;
 801f130:	2300      	movs	r3, #0
}
 801f132:	0018      	movs	r0, r3
 801f134:	46bd      	mov	sp, r7
 801f136:	b004      	add	sp, #16
 801f138:	bd80      	pop	{r7, pc}

0801f13a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801f13a:	b580      	push	{r7, lr}
 801f13c:	b084      	sub	sp, #16
 801f13e:	af00      	add	r7, sp, #0
 801f140:	6078      	str	r0, [r7, #4]
 801f142:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801f144:	200f      	movs	r0, #15
 801f146:	183b      	adds	r3, r7, r0
 801f148:	2200      	movs	r2, #0
 801f14a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801f14c:	683b      	ldr	r3, [r7, #0]
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d008      	beq.n	801f164 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801f152:	687a      	ldr	r2, [r7, #4]
 801f154:	23ad      	movs	r3, #173	@ 0xad
 801f156:	009b      	lsls	r3, r3, #2
 801f158:	6839      	ldr	r1, [r7, #0]
 801f15a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801f15c:	183b      	adds	r3, r7, r0
 801f15e:	2200      	movs	r2, #0
 801f160:	701a      	strb	r2, [r3, #0]
 801f162:	e003      	b.n	801f16c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801f164:	230f      	movs	r3, #15
 801f166:	18fb      	adds	r3, r7, r3
 801f168:	2202      	movs	r2, #2
 801f16a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801f16c:	230f      	movs	r3, #15
 801f16e:	18fb      	adds	r3, r7, r3
 801f170:	781b      	ldrb	r3, [r3, #0]
}
 801f172:	0018      	movs	r0, r3
 801f174:	46bd      	mov	sp, r7
 801f176:	b004      	add	sp, #16
 801f178:	bd80      	pop	{r7, pc}

0801f17a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801f17a:	b580      	push	{r7, lr}
 801f17c:	b082      	sub	sp, #8
 801f17e:	af00      	add	r7, sp, #0
 801f180:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	0018      	movs	r0, r3
 801f186:	f001 fd43 	bl	8020c10 <USBD_LL_Start>

  return USBD_OK;
 801f18a:	2300      	movs	r3, #0
}
 801f18c:	0018      	movs	r0, r3
 801f18e:	46bd      	mov	sp, r7
 801f190:	b002      	add	sp, #8
 801f192:	bd80      	pop	{r7, pc}

0801f194 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801f194:	b580      	push	{r7, lr}
 801f196:	b082      	sub	sp, #8
 801f198:	af00      	add	r7, sp, #0
 801f19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801f19c:	2300      	movs	r3, #0
}
 801f19e:	0018      	movs	r0, r3
 801f1a0:	46bd      	mov	sp, r7
 801f1a2:	b002      	add	sp, #8
 801f1a4:	bd80      	pop	{r7, pc}

0801f1a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801f1a6:	b590      	push	{r4, r7, lr}
 801f1a8:	b085      	sub	sp, #20
 801f1aa:	af00      	add	r7, sp, #0
 801f1ac:	6078      	str	r0, [r7, #4]
 801f1ae:	000a      	movs	r2, r1
 801f1b0:	1cfb      	adds	r3, r7, #3
 801f1b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801f1b4:	240f      	movs	r4, #15
 801f1b6:	193b      	adds	r3, r7, r4
 801f1b8:	2202      	movs	r2, #2
 801f1ba:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801f1bc:	687a      	ldr	r2, [r7, #4]
 801f1be:	23ad      	movs	r3, #173	@ 0xad
 801f1c0:	009b      	lsls	r3, r3, #2
 801f1c2:	58d3      	ldr	r3, [r2, r3]
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d00e      	beq.n	801f1e6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801f1c8:	687a      	ldr	r2, [r7, #4]
 801f1ca:	23ad      	movs	r3, #173	@ 0xad
 801f1cc:	009b      	lsls	r3, r3, #2
 801f1ce:	58d3      	ldr	r3, [r2, r3]
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	1cfa      	adds	r2, r7, #3
 801f1d4:	7811      	ldrb	r1, [r2, #0]
 801f1d6:	687a      	ldr	r2, [r7, #4]
 801f1d8:	0010      	movs	r0, r2
 801f1da:	4798      	blx	r3
 801f1dc:	1e03      	subs	r3, r0, #0
 801f1de:	d102      	bne.n	801f1e6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801f1e0:	193b      	adds	r3, r7, r4
 801f1e2:	2200      	movs	r2, #0
 801f1e4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801f1e6:	230f      	movs	r3, #15
 801f1e8:	18fb      	adds	r3, r7, r3
 801f1ea:	781b      	ldrb	r3, [r3, #0]
}
 801f1ec:	0018      	movs	r0, r3
 801f1ee:	46bd      	mov	sp, r7
 801f1f0:	b005      	add	sp, #20
 801f1f2:	bd90      	pop	{r4, r7, pc}

0801f1f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801f1f4:	b580      	push	{r7, lr}
 801f1f6:	b082      	sub	sp, #8
 801f1f8:	af00      	add	r7, sp, #0
 801f1fa:	6078      	str	r0, [r7, #4]
 801f1fc:	000a      	movs	r2, r1
 801f1fe:	1cfb      	adds	r3, r7, #3
 801f200:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801f202:	687a      	ldr	r2, [r7, #4]
 801f204:	23ad      	movs	r3, #173	@ 0xad
 801f206:	009b      	lsls	r3, r3, #2
 801f208:	58d3      	ldr	r3, [r2, r3]
 801f20a:	685b      	ldr	r3, [r3, #4]
 801f20c:	1cfa      	adds	r2, r7, #3
 801f20e:	7811      	ldrb	r1, [r2, #0]
 801f210:	687a      	ldr	r2, [r7, #4]
 801f212:	0010      	movs	r0, r2
 801f214:	4798      	blx	r3

  return USBD_OK;
 801f216:	2300      	movs	r3, #0
}
 801f218:	0018      	movs	r0, r3
 801f21a:	46bd      	mov	sp, r7
 801f21c:	b002      	add	sp, #8
 801f21e:	bd80      	pop	{r7, pc}

0801f220 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801f220:	b580      	push	{r7, lr}
 801f222:	b082      	sub	sp, #8
 801f224:	af00      	add	r7, sp, #0
 801f226:	6078      	str	r0, [r7, #4]
 801f228:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	22aa      	movs	r2, #170	@ 0xaa
 801f22e:	0092      	lsls	r2, r2, #2
 801f230:	4694      	mov	ip, r2
 801f232:	4463      	add	r3, ip
 801f234:	683a      	ldr	r2, [r7, #0]
 801f236:	0011      	movs	r1, r2
 801f238:	0018      	movs	r0, r3
 801f23a:	f001 f810 	bl	802025e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801f23e:	687a      	ldr	r2, [r7, #4]
 801f240:	23a5      	movs	r3, #165	@ 0xa5
 801f242:	009b      	lsls	r3, r3, #2
 801f244:	2101      	movs	r1, #1
 801f246:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	4a23      	ldr	r2, [pc, #140]	@ (801f2d8 <USBD_LL_SetupStage+0xb8>)
 801f24c:	5a9b      	ldrh	r3, [r3, r2]
 801f24e:	0019      	movs	r1, r3
 801f250:	687a      	ldr	r2, [r7, #4]
 801f252:	23a6      	movs	r3, #166	@ 0xa6
 801f254:	009b      	lsls	r3, r3, #2
 801f256:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801f258:	687a      	ldr	r2, [r7, #4]
 801f25a:	23aa      	movs	r3, #170	@ 0xaa
 801f25c:	009b      	lsls	r3, r3, #2
 801f25e:	5cd3      	ldrb	r3, [r2, r3]
 801f260:	001a      	movs	r2, r3
 801f262:	231f      	movs	r3, #31
 801f264:	4013      	ands	r3, r2
 801f266:	2b02      	cmp	r3, #2
 801f268:	d019      	beq.n	801f29e <USBD_LL_SetupStage+0x7e>
 801f26a:	d822      	bhi.n	801f2b2 <USBD_LL_SetupStage+0x92>
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d002      	beq.n	801f276 <USBD_LL_SetupStage+0x56>
 801f270:	2b01      	cmp	r3, #1
 801f272:	d00a      	beq.n	801f28a <USBD_LL_SetupStage+0x6a>
 801f274:	e01d      	b.n	801f2b2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	22aa      	movs	r2, #170	@ 0xaa
 801f27a:	0092      	lsls	r2, r2, #2
 801f27c:	189a      	adds	r2, r3, r2
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	0011      	movs	r1, r2
 801f282:	0018      	movs	r0, r3
 801f284:	f000 fa10 	bl	801f6a8 <USBD_StdDevReq>
      break;
 801f288:	e020      	b.n	801f2cc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801f28a:	687b      	ldr	r3, [r7, #4]
 801f28c:	22aa      	movs	r2, #170	@ 0xaa
 801f28e:	0092      	lsls	r2, r2, #2
 801f290:	189a      	adds	r2, r3, r2
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	0011      	movs	r1, r2
 801f296:	0018      	movs	r0, r3
 801f298:	f000 fa78 	bl	801f78c <USBD_StdItfReq>
      break;
 801f29c:	e016      	b.n	801f2cc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	22aa      	movs	r2, #170	@ 0xaa
 801f2a2:	0092      	lsls	r2, r2, #2
 801f2a4:	189a      	adds	r2, r3, r2
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	0011      	movs	r1, r2
 801f2aa:	0018      	movs	r0, r3
 801f2ac:	f000 fac5 	bl	801f83a <USBD_StdEPReq>
      break;
 801f2b0:	e00c      	b.n	801f2cc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801f2b2:	687a      	ldr	r2, [r7, #4]
 801f2b4:	23aa      	movs	r3, #170	@ 0xaa
 801f2b6:	009b      	lsls	r3, r3, #2
 801f2b8:	5cd3      	ldrb	r3, [r2, r3]
 801f2ba:	227f      	movs	r2, #127	@ 0x7f
 801f2bc:	4393      	bics	r3, r2
 801f2be:	b2da      	uxtb	r2, r3
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	0011      	movs	r1, r2
 801f2c4:	0018      	movs	r0, r3
 801f2c6:	f001 fd2a 	bl	8020d1e <USBD_LL_StallEP>
      break;
 801f2ca:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801f2cc:	2300      	movs	r3, #0
}
 801f2ce:	0018      	movs	r0, r3
 801f2d0:	46bd      	mov	sp, r7
 801f2d2:	b002      	add	sp, #8
 801f2d4:	bd80      	pop	{r7, pc}
 801f2d6:	46c0      	nop			@ (mov r8, r8)
 801f2d8:	000002ae 	.word	0x000002ae

0801f2dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801f2dc:	b580      	push	{r7, lr}
 801f2de:	b086      	sub	sp, #24
 801f2e0:	af00      	add	r7, sp, #0
 801f2e2:	60f8      	str	r0, [r7, #12]
 801f2e4:	607a      	str	r2, [r7, #4]
 801f2e6:	200b      	movs	r0, #11
 801f2e8:	183b      	adds	r3, r7, r0
 801f2ea:	1c0a      	adds	r2, r1, #0
 801f2ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801f2ee:	183b      	adds	r3, r7, r0
 801f2f0:	781b      	ldrb	r3, [r3, #0]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d154      	bne.n	801f3a0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	3355      	adds	r3, #85	@ 0x55
 801f2fa:	33ff      	adds	r3, #255	@ 0xff
 801f2fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801f2fe:	68fa      	ldr	r2, [r7, #12]
 801f300:	23a5      	movs	r3, #165	@ 0xa5
 801f302:	009b      	lsls	r3, r3, #2
 801f304:	58d3      	ldr	r3, [r2, r3]
 801f306:	2b03      	cmp	r3, #3
 801f308:	d139      	bne.n	801f37e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801f30a:	697b      	ldr	r3, [r7, #20]
 801f30c:	68da      	ldr	r2, [r3, #12]
 801f30e:	697b      	ldr	r3, [r7, #20]
 801f310:	691b      	ldr	r3, [r3, #16]
 801f312:	429a      	cmp	r2, r3
 801f314:	d919      	bls.n	801f34a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801f316:	697b      	ldr	r3, [r7, #20]
 801f318:	68da      	ldr	r2, [r3, #12]
 801f31a:	697b      	ldr	r3, [r7, #20]
 801f31c:	691b      	ldr	r3, [r3, #16]
 801f31e:	1ad2      	subs	r2, r2, r3
 801f320:	697b      	ldr	r3, [r7, #20]
 801f322:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	68da      	ldr	r2, [r3, #12]
 801f328:	697b      	ldr	r3, [r7, #20]
 801f32a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801f32c:	429a      	cmp	r2, r3
 801f32e:	d203      	bcs.n	801f338 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f330:	697b      	ldr	r3, [r7, #20]
 801f332:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801f334:	b29b      	uxth	r3, r3
 801f336:	e002      	b.n	801f33e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f338:	697b      	ldr	r3, [r7, #20]
 801f33a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801f33c:	b29b      	uxth	r3, r3
 801f33e:	6879      	ldr	r1, [r7, #4]
 801f340:	68f8      	ldr	r0, [r7, #12]
 801f342:	001a      	movs	r2, r3
 801f344:	f001 f898 	bl	8020478 <USBD_CtlContinueRx>
 801f348:	e045      	b.n	801f3d6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801f34a:	68fa      	ldr	r2, [r7, #12]
 801f34c:	23ad      	movs	r3, #173	@ 0xad
 801f34e:	009b      	lsls	r3, r3, #2
 801f350:	58d3      	ldr	r3, [r2, r3]
 801f352:	691b      	ldr	r3, [r3, #16]
 801f354:	2b00      	cmp	r3, #0
 801f356:	d00d      	beq.n	801f374 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f358:	68fa      	ldr	r2, [r7, #12]
 801f35a:	23a7      	movs	r3, #167	@ 0xa7
 801f35c:	009b      	lsls	r3, r3, #2
 801f35e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801f360:	2b03      	cmp	r3, #3
 801f362:	d107      	bne.n	801f374 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801f364:	68fa      	ldr	r2, [r7, #12]
 801f366:	23ad      	movs	r3, #173	@ 0xad
 801f368:	009b      	lsls	r3, r3, #2
 801f36a:	58d3      	ldr	r3, [r2, r3]
 801f36c:	691b      	ldr	r3, [r3, #16]
 801f36e:	68fa      	ldr	r2, [r7, #12]
 801f370:	0010      	movs	r0, r2
 801f372:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	0018      	movs	r0, r3
 801f378:	f001 f891 	bl	802049e <USBD_CtlSendStatus>
 801f37c:	e02b      	b.n	801f3d6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801f37e:	68fa      	ldr	r2, [r7, #12]
 801f380:	23a5      	movs	r3, #165	@ 0xa5
 801f382:	009b      	lsls	r3, r3, #2
 801f384:	58d3      	ldr	r3, [r2, r3]
 801f386:	2b05      	cmp	r3, #5
 801f388:	d125      	bne.n	801f3d6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801f38a:	68fa      	ldr	r2, [r7, #12]
 801f38c:	23a5      	movs	r3, #165	@ 0xa5
 801f38e:	009b      	lsls	r3, r3, #2
 801f390:	2100      	movs	r1, #0
 801f392:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	2100      	movs	r1, #0
 801f398:	0018      	movs	r0, r3
 801f39a:	f001 fcc0 	bl	8020d1e <USBD_LL_StallEP>
 801f39e:	e01a      	b.n	801f3d6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801f3a0:	68fa      	ldr	r2, [r7, #12]
 801f3a2:	23ad      	movs	r3, #173	@ 0xad
 801f3a4:	009b      	lsls	r3, r3, #2
 801f3a6:	58d3      	ldr	r3, [r2, r3]
 801f3a8:	699b      	ldr	r3, [r3, #24]
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d011      	beq.n	801f3d2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f3ae:	68fa      	ldr	r2, [r7, #12]
 801f3b0:	23a7      	movs	r3, #167	@ 0xa7
 801f3b2:	009b      	lsls	r3, r3, #2
 801f3b4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801f3b6:	2b03      	cmp	r3, #3
 801f3b8:	d10b      	bne.n	801f3d2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801f3ba:	68fa      	ldr	r2, [r7, #12]
 801f3bc:	23ad      	movs	r3, #173	@ 0xad
 801f3be:	009b      	lsls	r3, r3, #2
 801f3c0:	58d3      	ldr	r3, [r2, r3]
 801f3c2:	699b      	ldr	r3, [r3, #24]
 801f3c4:	220b      	movs	r2, #11
 801f3c6:	18ba      	adds	r2, r7, r2
 801f3c8:	7811      	ldrb	r1, [r2, #0]
 801f3ca:	68fa      	ldr	r2, [r7, #12]
 801f3cc:	0010      	movs	r0, r2
 801f3ce:	4798      	blx	r3
 801f3d0:	e001      	b.n	801f3d6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801f3d2:	2302      	movs	r3, #2
 801f3d4:	e000      	b.n	801f3d8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801f3d6:	2300      	movs	r3, #0
}
 801f3d8:	0018      	movs	r0, r3
 801f3da:	46bd      	mov	sp, r7
 801f3dc:	b006      	add	sp, #24
 801f3de:	bd80      	pop	{r7, pc}

0801f3e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801f3e0:	b580      	push	{r7, lr}
 801f3e2:	b086      	sub	sp, #24
 801f3e4:	af00      	add	r7, sp, #0
 801f3e6:	60f8      	str	r0, [r7, #12]
 801f3e8:	607a      	str	r2, [r7, #4]
 801f3ea:	200b      	movs	r0, #11
 801f3ec:	183b      	adds	r3, r7, r0
 801f3ee:	1c0a      	adds	r2, r1, #0
 801f3f0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801f3f2:	183b      	adds	r3, r7, r0
 801f3f4:	781b      	ldrb	r3, [r3, #0]
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d000      	beq.n	801f3fc <USBD_LL_DataInStage+0x1c>
 801f3fa:	e08e      	b.n	801f51a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	3314      	adds	r3, #20
 801f400:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801f402:	68fa      	ldr	r2, [r7, #12]
 801f404:	23a5      	movs	r3, #165	@ 0xa5
 801f406:	009b      	lsls	r3, r3, #2
 801f408:	58d3      	ldr	r3, [r2, r3]
 801f40a:	2b02      	cmp	r3, #2
 801f40c:	d164      	bne.n	801f4d8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801f40e:	697b      	ldr	r3, [r7, #20]
 801f410:	68da      	ldr	r2, [r3, #12]
 801f412:	697b      	ldr	r3, [r7, #20]
 801f414:	691b      	ldr	r3, [r3, #16]
 801f416:	429a      	cmp	r2, r3
 801f418:	d915      	bls.n	801f446 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801f41a:	697b      	ldr	r3, [r7, #20]
 801f41c:	68da      	ldr	r2, [r3, #12]
 801f41e:	697b      	ldr	r3, [r7, #20]
 801f420:	691b      	ldr	r3, [r3, #16]
 801f422:	1ad2      	subs	r2, r2, r3
 801f424:	697b      	ldr	r3, [r7, #20]
 801f426:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801f428:	697b      	ldr	r3, [r7, #20]
 801f42a:	68db      	ldr	r3, [r3, #12]
 801f42c:	b29a      	uxth	r2, r3
 801f42e:	6879      	ldr	r1, [r7, #4]
 801f430:	68fb      	ldr	r3, [r7, #12]
 801f432:	0018      	movs	r0, r3
 801f434:	f000 ffe9 	bl	802040a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f438:	68f8      	ldr	r0, [r7, #12]
 801f43a:	2300      	movs	r3, #0
 801f43c:	2200      	movs	r2, #0
 801f43e:	2100      	movs	r1, #0
 801f440:	f001 fd56 	bl	8020ef0 <USBD_LL_PrepareReceive>
 801f444:	e059      	b.n	801f4fa <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801f446:	697b      	ldr	r3, [r7, #20]
 801f448:	689a      	ldr	r2, [r3, #8]
 801f44a:	697b      	ldr	r3, [r7, #20]
 801f44c:	691b      	ldr	r3, [r3, #16]
 801f44e:	0019      	movs	r1, r3
 801f450:	0010      	movs	r0, r2
 801f452:	f7e0 ff2d 	bl	80002b0 <__aeabi_uidivmod>
 801f456:	1e0b      	subs	r3, r1, #0
 801f458:	d11f      	bne.n	801f49a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801f45a:	697b      	ldr	r3, [r7, #20]
 801f45c:	689a      	ldr	r2, [r3, #8]
 801f45e:	697b      	ldr	r3, [r7, #20]
 801f460:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801f462:	429a      	cmp	r2, r3
 801f464:	d319      	bcc.n	801f49a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801f466:	697b      	ldr	r3, [r7, #20]
 801f468:	689a      	ldr	r2, [r3, #8]
 801f46a:	68f9      	ldr	r1, [r7, #12]
 801f46c:	23a6      	movs	r3, #166	@ 0xa6
 801f46e:	009b      	lsls	r3, r3, #2
 801f470:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801f472:	429a      	cmp	r2, r3
 801f474:	d211      	bcs.n	801f49a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	2200      	movs	r2, #0
 801f47a:	2100      	movs	r1, #0
 801f47c:	0018      	movs	r0, r3
 801f47e:	f000 ffc4 	bl	802040a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801f482:	68fa      	ldr	r2, [r7, #12]
 801f484:	23a6      	movs	r3, #166	@ 0xa6
 801f486:	009b      	lsls	r3, r3, #2
 801f488:	2100      	movs	r1, #0
 801f48a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f48c:	68f8      	ldr	r0, [r7, #12]
 801f48e:	2300      	movs	r3, #0
 801f490:	2200      	movs	r2, #0
 801f492:	2100      	movs	r1, #0
 801f494:	f001 fd2c 	bl	8020ef0 <USBD_LL_PrepareReceive>
 801f498:	e02f      	b.n	801f4fa <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801f49a:	68fa      	ldr	r2, [r7, #12]
 801f49c:	23ad      	movs	r3, #173	@ 0xad
 801f49e:	009b      	lsls	r3, r3, #2
 801f4a0:	58d3      	ldr	r3, [r2, r3]
 801f4a2:	68db      	ldr	r3, [r3, #12]
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d00d      	beq.n	801f4c4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f4a8:	68fa      	ldr	r2, [r7, #12]
 801f4aa:	23a7      	movs	r3, #167	@ 0xa7
 801f4ac:	009b      	lsls	r3, r3, #2
 801f4ae:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801f4b0:	2b03      	cmp	r3, #3
 801f4b2:	d107      	bne.n	801f4c4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801f4b4:	68fa      	ldr	r2, [r7, #12]
 801f4b6:	23ad      	movs	r3, #173	@ 0xad
 801f4b8:	009b      	lsls	r3, r3, #2
 801f4ba:	58d3      	ldr	r3, [r2, r3]
 801f4bc:	68db      	ldr	r3, [r3, #12]
 801f4be:	68fa      	ldr	r2, [r7, #12]
 801f4c0:	0010      	movs	r0, r2
 801f4c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801f4c4:	68fb      	ldr	r3, [r7, #12]
 801f4c6:	2180      	movs	r1, #128	@ 0x80
 801f4c8:	0018      	movs	r0, r3
 801f4ca:	f001 fc28 	bl	8020d1e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	0018      	movs	r0, r3
 801f4d2:	f000 fff8 	bl	80204c6 <USBD_CtlReceiveStatus>
 801f4d6:	e010      	b.n	801f4fa <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801f4d8:	68fa      	ldr	r2, [r7, #12]
 801f4da:	23a5      	movs	r3, #165	@ 0xa5
 801f4dc:	009b      	lsls	r3, r3, #2
 801f4de:	58d3      	ldr	r3, [r2, r3]
 801f4e0:	2b04      	cmp	r3, #4
 801f4e2:	d005      	beq.n	801f4f0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801f4e4:	68fa      	ldr	r2, [r7, #12]
 801f4e6:	23a5      	movs	r3, #165	@ 0xa5
 801f4e8:	009b      	lsls	r3, r3, #2
 801f4ea:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d104      	bne.n	801f4fa <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	2180      	movs	r1, #128	@ 0x80
 801f4f4:	0018      	movs	r0, r3
 801f4f6:	f001 fc12 	bl	8020d1e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801f4fa:	68fa      	ldr	r2, [r7, #12]
 801f4fc:	23a8      	movs	r3, #168	@ 0xa8
 801f4fe:	009b      	lsls	r3, r3, #2
 801f500:	5cd3      	ldrb	r3, [r2, r3]
 801f502:	2b01      	cmp	r3, #1
 801f504:	d124      	bne.n	801f550 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801f506:	68fb      	ldr	r3, [r7, #12]
 801f508:	0018      	movs	r0, r3
 801f50a:	f7ff fe43 	bl	801f194 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801f50e:	68fa      	ldr	r2, [r7, #12]
 801f510:	23a8      	movs	r3, #168	@ 0xa8
 801f512:	009b      	lsls	r3, r3, #2
 801f514:	2100      	movs	r1, #0
 801f516:	54d1      	strb	r1, [r2, r3]
 801f518:	e01a      	b.n	801f550 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801f51a:	68fa      	ldr	r2, [r7, #12]
 801f51c:	23ad      	movs	r3, #173	@ 0xad
 801f51e:	009b      	lsls	r3, r3, #2
 801f520:	58d3      	ldr	r3, [r2, r3]
 801f522:	695b      	ldr	r3, [r3, #20]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d011      	beq.n	801f54c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f528:	68fa      	ldr	r2, [r7, #12]
 801f52a:	23a7      	movs	r3, #167	@ 0xa7
 801f52c:	009b      	lsls	r3, r3, #2
 801f52e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801f530:	2b03      	cmp	r3, #3
 801f532:	d10b      	bne.n	801f54c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801f534:	68fa      	ldr	r2, [r7, #12]
 801f536:	23ad      	movs	r3, #173	@ 0xad
 801f538:	009b      	lsls	r3, r3, #2
 801f53a:	58d3      	ldr	r3, [r2, r3]
 801f53c:	695b      	ldr	r3, [r3, #20]
 801f53e:	220b      	movs	r2, #11
 801f540:	18ba      	adds	r2, r7, r2
 801f542:	7811      	ldrb	r1, [r2, #0]
 801f544:	68fa      	ldr	r2, [r7, #12]
 801f546:	0010      	movs	r0, r2
 801f548:	4798      	blx	r3
 801f54a:	e001      	b.n	801f550 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801f54c:	2302      	movs	r3, #2
 801f54e:	e000      	b.n	801f552 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801f550:	2300      	movs	r3, #0
}
 801f552:	0018      	movs	r0, r3
 801f554:	46bd      	mov	sp, r7
 801f556:	b006      	add	sp, #24
 801f558:	bd80      	pop	{r7, pc}

0801f55a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801f55a:	b580      	push	{r7, lr}
 801f55c:	b082      	sub	sp, #8
 801f55e:	af00      	add	r7, sp, #0
 801f560:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801f562:	6878      	ldr	r0, [r7, #4]
 801f564:	2340      	movs	r3, #64	@ 0x40
 801f566:	2200      	movs	r2, #0
 801f568:	2100      	movs	r1, #0
 801f56a:	f001 fb76 	bl	8020c5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801f56e:	687a      	ldr	r2, [r7, #4]
 801f570:	23ac      	movs	r3, #172	@ 0xac
 801f572:	005b      	lsls	r3, r3, #1
 801f574:	2101      	movs	r1, #1
 801f576:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801f578:	687a      	ldr	r2, [r7, #4]
 801f57a:	23b2      	movs	r3, #178	@ 0xb2
 801f57c:	005b      	lsls	r3, r3, #1
 801f57e:	2140      	movs	r1, #64	@ 0x40
 801f580:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801f582:	6878      	ldr	r0, [r7, #4]
 801f584:	2340      	movs	r3, #64	@ 0x40
 801f586:	2200      	movs	r2, #0
 801f588:	2180      	movs	r1, #128	@ 0x80
 801f58a:	f001 fb66 	bl	8020c5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	2201      	movs	r2, #1
 801f592:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	2240      	movs	r2, #64	@ 0x40
 801f598:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801f59a:	687a      	ldr	r2, [r7, #4]
 801f59c:	23a7      	movs	r3, #167	@ 0xa7
 801f59e:	009b      	lsls	r3, r3, #2
 801f5a0:	2101      	movs	r1, #1
 801f5a2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801f5a4:	687a      	ldr	r2, [r7, #4]
 801f5a6:	23a5      	movs	r3, #165	@ 0xa5
 801f5a8:	009b      	lsls	r3, r3, #2
 801f5aa:	2100      	movs	r1, #0
 801f5ac:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801f5b4:	687a      	ldr	r2, [r7, #4]
 801f5b6:	23a9      	movs	r3, #169	@ 0xa9
 801f5b8:	009b      	lsls	r3, r3, #2
 801f5ba:	2100      	movs	r1, #0
 801f5bc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801f5be:	687a      	ldr	r2, [r7, #4]
 801f5c0:	23ae      	movs	r3, #174	@ 0xae
 801f5c2:	009b      	lsls	r3, r3, #2
 801f5c4:	58d3      	ldr	r3, [r2, r3]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d00a      	beq.n	801f5e0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801f5ca:	687a      	ldr	r2, [r7, #4]
 801f5cc:	23ad      	movs	r3, #173	@ 0xad
 801f5ce:	009b      	lsls	r3, r3, #2
 801f5d0:	58d3      	ldr	r3, [r2, r3]
 801f5d2:	685a      	ldr	r2, [r3, #4]
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	685b      	ldr	r3, [r3, #4]
 801f5d8:	b2d9      	uxtb	r1, r3
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	0018      	movs	r0, r3
 801f5de:	4790      	blx	r2
  }

  return USBD_OK;
 801f5e0:	2300      	movs	r3, #0
}
 801f5e2:	0018      	movs	r0, r3
 801f5e4:	46bd      	mov	sp, r7
 801f5e6:	b002      	add	sp, #8
 801f5e8:	bd80      	pop	{r7, pc}

0801f5ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801f5ea:	b580      	push	{r7, lr}
 801f5ec:	b082      	sub	sp, #8
 801f5ee:	af00      	add	r7, sp, #0
 801f5f0:	6078      	str	r0, [r7, #4]
 801f5f2:	000a      	movs	r2, r1
 801f5f4:	1cfb      	adds	r3, r7, #3
 801f5f6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	1cfa      	adds	r2, r7, #3
 801f5fc:	7812      	ldrb	r2, [r2, #0]
 801f5fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801f600:	2300      	movs	r3, #0
}
 801f602:	0018      	movs	r0, r3
 801f604:	46bd      	mov	sp, r7
 801f606:	b002      	add	sp, #8
 801f608:	bd80      	pop	{r7, pc}
	...

0801f60c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801f60c:	b580      	push	{r7, lr}
 801f60e:	b082      	sub	sp, #8
 801f610:	af00      	add	r7, sp, #0
 801f612:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801f614:	687a      	ldr	r2, [r7, #4]
 801f616:	23a7      	movs	r3, #167	@ 0xa7
 801f618:	009b      	lsls	r3, r3, #2
 801f61a:	5cd1      	ldrb	r1, [r2, r3]
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	4a06      	ldr	r2, [pc, #24]	@ (801f638 <USBD_LL_Suspend+0x2c>)
 801f620:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801f622:	687a      	ldr	r2, [r7, #4]
 801f624:	23a7      	movs	r3, #167	@ 0xa7
 801f626:	009b      	lsls	r3, r3, #2
 801f628:	2104      	movs	r1, #4
 801f62a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801f62c:	2300      	movs	r3, #0
}
 801f62e:	0018      	movs	r0, r3
 801f630:	46bd      	mov	sp, r7
 801f632:	b002      	add	sp, #8
 801f634:	bd80      	pop	{r7, pc}
 801f636:	46c0      	nop			@ (mov r8, r8)
 801f638:	0000029d 	.word	0x0000029d

0801f63c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801f63c:	b580      	push	{r7, lr}
 801f63e:	b082      	sub	sp, #8
 801f640:	af00      	add	r7, sp, #0
 801f642:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801f644:	687a      	ldr	r2, [r7, #4]
 801f646:	23a7      	movs	r3, #167	@ 0xa7
 801f648:	009b      	lsls	r3, r3, #2
 801f64a:	5cd3      	ldrb	r3, [r2, r3]
 801f64c:	2b04      	cmp	r3, #4
 801f64e:	d106      	bne.n	801f65e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	4a05      	ldr	r2, [pc, #20]	@ (801f668 <USBD_LL_Resume+0x2c>)
 801f654:	5c99      	ldrb	r1, [r3, r2]
 801f656:	687a      	ldr	r2, [r7, #4]
 801f658:	23a7      	movs	r3, #167	@ 0xa7
 801f65a:	009b      	lsls	r3, r3, #2
 801f65c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801f65e:	2300      	movs	r3, #0
}
 801f660:	0018      	movs	r0, r3
 801f662:	46bd      	mov	sp, r7
 801f664:	b002      	add	sp, #8
 801f666:	bd80      	pop	{r7, pc}
 801f668:	0000029d 	.word	0x0000029d

0801f66c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801f66c:	b580      	push	{r7, lr}
 801f66e:	b082      	sub	sp, #8
 801f670:	af00      	add	r7, sp, #0
 801f672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f674:	687a      	ldr	r2, [r7, #4]
 801f676:	23a7      	movs	r3, #167	@ 0xa7
 801f678:	009b      	lsls	r3, r3, #2
 801f67a:	5cd3      	ldrb	r3, [r2, r3]
 801f67c:	2b03      	cmp	r3, #3
 801f67e:	d10e      	bne.n	801f69e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801f680:	687a      	ldr	r2, [r7, #4]
 801f682:	23ad      	movs	r3, #173	@ 0xad
 801f684:	009b      	lsls	r3, r3, #2
 801f686:	58d3      	ldr	r3, [r2, r3]
 801f688:	69db      	ldr	r3, [r3, #28]
 801f68a:	2b00      	cmp	r3, #0
 801f68c:	d007      	beq.n	801f69e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801f68e:	687a      	ldr	r2, [r7, #4]
 801f690:	23ad      	movs	r3, #173	@ 0xad
 801f692:	009b      	lsls	r3, r3, #2
 801f694:	58d3      	ldr	r3, [r2, r3]
 801f696:	69db      	ldr	r3, [r3, #28]
 801f698:	687a      	ldr	r2, [r7, #4]
 801f69a:	0010      	movs	r0, r2
 801f69c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801f69e:	2300      	movs	r3, #0
}
 801f6a0:	0018      	movs	r0, r3
 801f6a2:	46bd      	mov	sp, r7
 801f6a4:	b002      	add	sp, #8
 801f6a6:	bd80      	pop	{r7, pc}

0801f6a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801f6a8:	b580      	push	{r7, lr}
 801f6aa:	b084      	sub	sp, #16
 801f6ac:	af00      	add	r7, sp, #0
 801f6ae:	6078      	str	r0, [r7, #4]
 801f6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f6b2:	230f      	movs	r3, #15
 801f6b4:	18fb      	adds	r3, r7, r3
 801f6b6:	2200      	movs	r2, #0
 801f6b8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f6ba:	683b      	ldr	r3, [r7, #0]
 801f6bc:	781b      	ldrb	r3, [r3, #0]
 801f6be:	001a      	movs	r2, r3
 801f6c0:	2360      	movs	r3, #96	@ 0x60
 801f6c2:	4013      	ands	r3, r2
 801f6c4:	2b40      	cmp	r3, #64	@ 0x40
 801f6c6:	d004      	beq.n	801f6d2 <USBD_StdDevReq+0x2a>
 801f6c8:	d84f      	bhi.n	801f76a <USBD_StdDevReq+0xc2>
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	d00b      	beq.n	801f6e6 <USBD_StdDevReq+0x3e>
 801f6ce:	2b20      	cmp	r3, #32
 801f6d0:	d14b      	bne.n	801f76a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801f6d2:	687a      	ldr	r2, [r7, #4]
 801f6d4:	23ad      	movs	r3, #173	@ 0xad
 801f6d6:	009b      	lsls	r3, r3, #2
 801f6d8:	58d3      	ldr	r3, [r2, r3]
 801f6da:	689b      	ldr	r3, [r3, #8]
 801f6dc:	6839      	ldr	r1, [r7, #0]
 801f6de:	687a      	ldr	r2, [r7, #4]
 801f6e0:	0010      	movs	r0, r2
 801f6e2:	4798      	blx	r3
      break;
 801f6e4:	e048      	b.n	801f778 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f6e6:	683b      	ldr	r3, [r7, #0]
 801f6e8:	785b      	ldrb	r3, [r3, #1]
 801f6ea:	2b09      	cmp	r3, #9
 801f6ec:	d835      	bhi.n	801f75a <USBD_StdDevReq+0xb2>
 801f6ee:	009a      	lsls	r2, r3, #2
 801f6f0:	4b25      	ldr	r3, [pc, #148]	@ (801f788 <USBD_StdDevReq+0xe0>)
 801f6f2:	18d3      	adds	r3, r2, r3
 801f6f4:	681b      	ldr	r3, [r3, #0]
 801f6f6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801f6f8:	683a      	ldr	r2, [r7, #0]
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	0011      	movs	r1, r2
 801f6fe:	0018      	movs	r0, r3
 801f700:	f000 fa52 	bl	801fba8 <USBD_GetDescriptor>
          break;
 801f704:	e030      	b.n	801f768 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801f706:	683a      	ldr	r2, [r7, #0]
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	0011      	movs	r1, r2
 801f70c:	0018      	movs	r0, r3
 801f70e:	f000 fbfd 	bl	801ff0c <USBD_SetAddress>
          break;
 801f712:	e029      	b.n	801f768 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801f714:	683a      	ldr	r2, [r7, #0]
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	0011      	movs	r1, r2
 801f71a:	0018      	movs	r0, r3
 801f71c:	f000 fc4a 	bl	801ffb4 <USBD_SetConfig>
          break;
 801f720:	e022      	b.n	801f768 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801f722:	683a      	ldr	r2, [r7, #0]
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	0011      	movs	r1, r2
 801f728:	0018      	movs	r0, r3
 801f72a:	f000 fce7 	bl	80200fc <USBD_GetConfig>
          break;
 801f72e:	e01b      	b.n	801f768 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801f730:	683a      	ldr	r2, [r7, #0]
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	0011      	movs	r1, r2
 801f736:	0018      	movs	r0, r3
 801f738:	f000 fd1b 	bl	8020172 <USBD_GetStatus>
          break;
 801f73c:	e014      	b.n	801f768 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801f73e:	683a      	ldr	r2, [r7, #0]
 801f740:	687b      	ldr	r3, [r7, #4]
 801f742:	0011      	movs	r1, r2
 801f744:	0018      	movs	r0, r3
 801f746:	f000 fd4e 	bl	80201e6 <USBD_SetFeature>
          break;
 801f74a:	e00d      	b.n	801f768 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801f74c:	683a      	ldr	r2, [r7, #0]
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	0011      	movs	r1, r2
 801f752:	0018      	movs	r0, r3
 801f754:	f000 fd5d 	bl	8020212 <USBD_ClrFeature>
          break;
 801f758:	e006      	b.n	801f768 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801f75a:	683a      	ldr	r2, [r7, #0]
 801f75c:	687b      	ldr	r3, [r7, #4]
 801f75e:	0011      	movs	r1, r2
 801f760:	0018      	movs	r0, r3
 801f762:	f000 fdb4 	bl	80202ce <USBD_CtlError>
          break;
 801f766:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801f768:	e006      	b.n	801f778 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801f76a:	683a      	ldr	r2, [r7, #0]
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	0011      	movs	r1, r2
 801f770:	0018      	movs	r0, r3
 801f772:	f000 fdac 	bl	80202ce <USBD_CtlError>
      break;
 801f776:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801f778:	230f      	movs	r3, #15
 801f77a:	18fb      	adds	r3, r7, r3
 801f77c:	781b      	ldrb	r3, [r3, #0]
}
 801f77e:	0018      	movs	r0, r3
 801f780:	46bd      	mov	sp, r7
 801f782:	b004      	add	sp, #16
 801f784:	bd80      	pop	{r7, pc}
 801f786:	46c0      	nop			@ (mov r8, r8)
 801f788:	0802b2d4 	.word	0x0802b2d4

0801f78c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801f78c:	b5b0      	push	{r4, r5, r7, lr}
 801f78e:	b084      	sub	sp, #16
 801f790:	af00      	add	r7, sp, #0
 801f792:	6078      	str	r0, [r7, #4]
 801f794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f796:	230f      	movs	r3, #15
 801f798:	18fb      	adds	r3, r7, r3
 801f79a:	2200      	movs	r2, #0
 801f79c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	781b      	ldrb	r3, [r3, #0]
 801f7a2:	001a      	movs	r2, r3
 801f7a4:	2360      	movs	r3, #96	@ 0x60
 801f7a6:	4013      	ands	r3, r2
 801f7a8:	2b40      	cmp	r3, #64	@ 0x40
 801f7aa:	d004      	beq.n	801f7b6 <USBD_StdItfReq+0x2a>
 801f7ac:	d839      	bhi.n	801f822 <USBD_StdItfReq+0x96>
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d001      	beq.n	801f7b6 <USBD_StdItfReq+0x2a>
 801f7b2:	2b20      	cmp	r3, #32
 801f7b4:	d135      	bne.n	801f822 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801f7b6:	687a      	ldr	r2, [r7, #4]
 801f7b8:	23a7      	movs	r3, #167	@ 0xa7
 801f7ba:	009b      	lsls	r3, r3, #2
 801f7bc:	5cd3      	ldrb	r3, [r2, r3]
 801f7be:	3b01      	subs	r3, #1
 801f7c0:	2b02      	cmp	r3, #2
 801f7c2:	d825      	bhi.n	801f810 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801f7c4:	683b      	ldr	r3, [r7, #0]
 801f7c6:	889b      	ldrh	r3, [r3, #4]
 801f7c8:	b2db      	uxtb	r3, r3
 801f7ca:	2b01      	cmp	r3, #1
 801f7cc:	d819      	bhi.n	801f802 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801f7ce:	687a      	ldr	r2, [r7, #4]
 801f7d0:	23ad      	movs	r3, #173	@ 0xad
 801f7d2:	009b      	lsls	r3, r3, #2
 801f7d4:	58d3      	ldr	r3, [r2, r3]
 801f7d6:	689b      	ldr	r3, [r3, #8]
 801f7d8:	250f      	movs	r5, #15
 801f7da:	197c      	adds	r4, r7, r5
 801f7dc:	6839      	ldr	r1, [r7, #0]
 801f7de:	687a      	ldr	r2, [r7, #4]
 801f7e0:	0010      	movs	r0, r2
 801f7e2:	4798      	blx	r3
 801f7e4:	0003      	movs	r3, r0
 801f7e6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801f7e8:	683b      	ldr	r3, [r7, #0]
 801f7ea:	88db      	ldrh	r3, [r3, #6]
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d116      	bne.n	801f81e <USBD_StdItfReq+0x92>
 801f7f0:	197b      	adds	r3, r7, r5
 801f7f2:	781b      	ldrb	r3, [r3, #0]
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d112      	bne.n	801f81e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	0018      	movs	r0, r3
 801f7fc:	f000 fe4f 	bl	802049e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801f800:	e00d      	b.n	801f81e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801f802:	683a      	ldr	r2, [r7, #0]
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	0011      	movs	r1, r2
 801f808:	0018      	movs	r0, r3
 801f80a:	f000 fd60 	bl	80202ce <USBD_CtlError>
          break;
 801f80e:	e006      	b.n	801f81e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801f810:	683a      	ldr	r2, [r7, #0]
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	0011      	movs	r1, r2
 801f816:	0018      	movs	r0, r3
 801f818:	f000 fd59 	bl	80202ce <USBD_CtlError>
          break;
 801f81c:	e000      	b.n	801f820 <USBD_StdItfReq+0x94>
          break;
 801f81e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801f820:	e006      	b.n	801f830 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801f822:	683a      	ldr	r2, [r7, #0]
 801f824:	687b      	ldr	r3, [r7, #4]
 801f826:	0011      	movs	r1, r2
 801f828:	0018      	movs	r0, r3
 801f82a:	f000 fd50 	bl	80202ce <USBD_CtlError>
      break;
 801f82e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801f830:	2300      	movs	r3, #0
}
 801f832:	0018      	movs	r0, r3
 801f834:	46bd      	mov	sp, r7
 801f836:	b004      	add	sp, #16
 801f838:	bdb0      	pop	{r4, r5, r7, pc}

0801f83a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801f83a:	b5b0      	push	{r4, r5, r7, lr}
 801f83c:	b084      	sub	sp, #16
 801f83e:	af00      	add	r7, sp, #0
 801f840:	6078      	str	r0, [r7, #4]
 801f842:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801f844:	230f      	movs	r3, #15
 801f846:	18fb      	adds	r3, r7, r3
 801f848:	2200      	movs	r2, #0
 801f84a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801f84c:	683b      	ldr	r3, [r7, #0]
 801f84e:	889a      	ldrh	r2, [r3, #4]
 801f850:	230e      	movs	r3, #14
 801f852:	18fb      	adds	r3, r7, r3
 801f854:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f856:	683b      	ldr	r3, [r7, #0]
 801f858:	781b      	ldrb	r3, [r3, #0]
 801f85a:	001a      	movs	r2, r3
 801f85c:	2360      	movs	r3, #96	@ 0x60
 801f85e:	4013      	ands	r3, r2
 801f860:	2b40      	cmp	r3, #64	@ 0x40
 801f862:	d006      	beq.n	801f872 <USBD_StdEPReq+0x38>
 801f864:	d900      	bls.n	801f868 <USBD_StdEPReq+0x2e>
 801f866:	e190      	b.n	801fb8a <USBD_StdEPReq+0x350>
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d00c      	beq.n	801f886 <USBD_StdEPReq+0x4c>
 801f86c:	2b20      	cmp	r3, #32
 801f86e:	d000      	beq.n	801f872 <USBD_StdEPReq+0x38>
 801f870:	e18b      	b.n	801fb8a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801f872:	687a      	ldr	r2, [r7, #4]
 801f874:	23ad      	movs	r3, #173	@ 0xad
 801f876:	009b      	lsls	r3, r3, #2
 801f878:	58d3      	ldr	r3, [r2, r3]
 801f87a:	689b      	ldr	r3, [r3, #8]
 801f87c:	6839      	ldr	r1, [r7, #0]
 801f87e:	687a      	ldr	r2, [r7, #4]
 801f880:	0010      	movs	r0, r2
 801f882:	4798      	blx	r3
      break;
 801f884:	e188      	b.n	801fb98 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801f886:	683b      	ldr	r3, [r7, #0]
 801f888:	781b      	ldrb	r3, [r3, #0]
 801f88a:	001a      	movs	r2, r3
 801f88c:	2360      	movs	r3, #96	@ 0x60
 801f88e:	4013      	ands	r3, r2
 801f890:	2b20      	cmp	r3, #32
 801f892:	d10f      	bne.n	801f8b4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801f894:	687a      	ldr	r2, [r7, #4]
 801f896:	23ad      	movs	r3, #173	@ 0xad
 801f898:	009b      	lsls	r3, r3, #2
 801f89a:	58d3      	ldr	r3, [r2, r3]
 801f89c:	689b      	ldr	r3, [r3, #8]
 801f89e:	250f      	movs	r5, #15
 801f8a0:	197c      	adds	r4, r7, r5
 801f8a2:	6839      	ldr	r1, [r7, #0]
 801f8a4:	687a      	ldr	r2, [r7, #4]
 801f8a6:	0010      	movs	r0, r2
 801f8a8:	4798      	blx	r3
 801f8aa:	0003      	movs	r3, r0
 801f8ac:	7023      	strb	r3, [r4, #0]

        return ret;
 801f8ae:	197b      	adds	r3, r7, r5
 801f8b0:	781b      	ldrb	r3, [r3, #0]
 801f8b2:	e174      	b.n	801fb9e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801f8b4:	683b      	ldr	r3, [r7, #0]
 801f8b6:	785b      	ldrb	r3, [r3, #1]
 801f8b8:	2b03      	cmp	r3, #3
 801f8ba:	d007      	beq.n	801f8cc <USBD_StdEPReq+0x92>
 801f8bc:	dd00      	ble.n	801f8c0 <USBD_StdEPReq+0x86>
 801f8be:	e15c      	b.n	801fb7a <USBD_StdEPReq+0x340>
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d100      	bne.n	801f8c6 <USBD_StdEPReq+0x8c>
 801f8c4:	e092      	b.n	801f9ec <USBD_StdEPReq+0x1b2>
 801f8c6:	2b01      	cmp	r3, #1
 801f8c8:	d04b      	beq.n	801f962 <USBD_StdEPReq+0x128>
 801f8ca:	e156      	b.n	801fb7a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801f8cc:	687a      	ldr	r2, [r7, #4]
 801f8ce:	23a7      	movs	r3, #167	@ 0xa7
 801f8d0:	009b      	lsls	r3, r3, #2
 801f8d2:	5cd3      	ldrb	r3, [r2, r3]
 801f8d4:	2b02      	cmp	r3, #2
 801f8d6:	d002      	beq.n	801f8de <USBD_StdEPReq+0xa4>
 801f8d8:	2b03      	cmp	r3, #3
 801f8da:	d01d      	beq.n	801f918 <USBD_StdEPReq+0xde>
 801f8dc:	e039      	b.n	801f952 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f8de:	220e      	movs	r2, #14
 801f8e0:	18bb      	adds	r3, r7, r2
 801f8e2:	781b      	ldrb	r3, [r3, #0]
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d010      	beq.n	801f90a <USBD_StdEPReq+0xd0>
 801f8e8:	18bb      	adds	r3, r7, r2
 801f8ea:	781b      	ldrb	r3, [r3, #0]
 801f8ec:	2b80      	cmp	r3, #128	@ 0x80
 801f8ee:	d00c      	beq.n	801f90a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801f8f0:	18bb      	adds	r3, r7, r2
 801f8f2:	781a      	ldrb	r2, [r3, #0]
 801f8f4:	687b      	ldr	r3, [r7, #4]
 801f8f6:	0011      	movs	r1, r2
 801f8f8:	0018      	movs	r0, r3
 801f8fa:	f001 fa10 	bl	8020d1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	2180      	movs	r1, #128	@ 0x80
 801f902:	0018      	movs	r0, r3
 801f904:	f001 fa0b 	bl	8020d1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801f908:	e02a      	b.n	801f960 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801f90a:	683a      	ldr	r2, [r7, #0]
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	0011      	movs	r1, r2
 801f910:	0018      	movs	r0, r3
 801f912:	f000 fcdc 	bl	80202ce <USBD_CtlError>
              break;
 801f916:	e023      	b.n	801f960 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801f918:	683b      	ldr	r3, [r7, #0]
 801f91a:	885b      	ldrh	r3, [r3, #2]
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d113      	bne.n	801f948 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801f920:	220e      	movs	r2, #14
 801f922:	18bb      	adds	r3, r7, r2
 801f924:	781b      	ldrb	r3, [r3, #0]
 801f926:	2b00      	cmp	r3, #0
 801f928:	d00e      	beq.n	801f948 <USBD_StdEPReq+0x10e>
 801f92a:	18bb      	adds	r3, r7, r2
 801f92c:	781b      	ldrb	r3, [r3, #0]
 801f92e:	2b80      	cmp	r3, #128	@ 0x80
 801f930:	d00a      	beq.n	801f948 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801f932:	683b      	ldr	r3, [r7, #0]
 801f934:	88db      	ldrh	r3, [r3, #6]
 801f936:	2b00      	cmp	r3, #0
 801f938:	d106      	bne.n	801f948 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801f93a:	18bb      	adds	r3, r7, r2
 801f93c:	781a      	ldrb	r2, [r3, #0]
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	0011      	movs	r1, r2
 801f942:	0018      	movs	r0, r3
 801f944:	f001 f9eb 	bl	8020d1e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	0018      	movs	r0, r3
 801f94c:	f000 fda7 	bl	802049e <USBD_CtlSendStatus>

              break;
 801f950:	e006      	b.n	801f960 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801f952:	683a      	ldr	r2, [r7, #0]
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	0011      	movs	r1, r2
 801f958:	0018      	movs	r0, r3
 801f95a:	f000 fcb8 	bl	80202ce <USBD_CtlError>
              break;
 801f95e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801f960:	e112      	b.n	801fb88 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801f962:	687a      	ldr	r2, [r7, #4]
 801f964:	23a7      	movs	r3, #167	@ 0xa7
 801f966:	009b      	lsls	r3, r3, #2
 801f968:	5cd3      	ldrb	r3, [r2, r3]
 801f96a:	2b02      	cmp	r3, #2
 801f96c:	d002      	beq.n	801f974 <USBD_StdEPReq+0x13a>
 801f96e:	2b03      	cmp	r3, #3
 801f970:	d01d      	beq.n	801f9ae <USBD_StdEPReq+0x174>
 801f972:	e032      	b.n	801f9da <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f974:	220e      	movs	r2, #14
 801f976:	18bb      	adds	r3, r7, r2
 801f978:	781b      	ldrb	r3, [r3, #0]
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d010      	beq.n	801f9a0 <USBD_StdEPReq+0x166>
 801f97e:	18bb      	adds	r3, r7, r2
 801f980:	781b      	ldrb	r3, [r3, #0]
 801f982:	2b80      	cmp	r3, #128	@ 0x80
 801f984:	d00c      	beq.n	801f9a0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801f986:	18bb      	adds	r3, r7, r2
 801f988:	781a      	ldrb	r2, [r3, #0]
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	0011      	movs	r1, r2
 801f98e:	0018      	movs	r0, r3
 801f990:	f001 f9c5 	bl	8020d1e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	2180      	movs	r1, #128	@ 0x80
 801f998:	0018      	movs	r0, r3
 801f99a:	f001 f9c0 	bl	8020d1e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801f99e:	e024      	b.n	801f9ea <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801f9a0:	683a      	ldr	r2, [r7, #0]
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	0011      	movs	r1, r2
 801f9a6:	0018      	movs	r0, r3
 801f9a8:	f000 fc91 	bl	80202ce <USBD_CtlError>
              break;
 801f9ac:	e01d      	b.n	801f9ea <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801f9ae:	683b      	ldr	r3, [r7, #0]
 801f9b0:	885b      	ldrh	r3, [r3, #2]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d118      	bne.n	801f9e8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801f9b6:	210e      	movs	r1, #14
 801f9b8:	187b      	adds	r3, r7, r1
 801f9ba:	781b      	ldrb	r3, [r3, #0]
 801f9bc:	227f      	movs	r2, #127	@ 0x7f
 801f9be:	4013      	ands	r3, r2
 801f9c0:	d006      	beq.n	801f9d0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801f9c2:	187b      	adds	r3, r7, r1
 801f9c4:	781a      	ldrb	r2, [r3, #0]
 801f9c6:	687b      	ldr	r3, [r7, #4]
 801f9c8:	0011      	movs	r1, r2
 801f9ca:	0018      	movs	r0, r3
 801f9cc:	f001 f9d2 	bl	8020d74 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	0018      	movs	r0, r3
 801f9d4:	f000 fd63 	bl	802049e <USBD_CtlSendStatus>
              }
              break;
 801f9d8:	e006      	b.n	801f9e8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801f9da:	683a      	ldr	r2, [r7, #0]
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	0011      	movs	r1, r2
 801f9e0:	0018      	movs	r0, r3
 801f9e2:	f000 fc74 	bl	80202ce <USBD_CtlError>
              break;
 801f9e6:	e000      	b.n	801f9ea <USBD_StdEPReq+0x1b0>
              break;
 801f9e8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801f9ea:	e0cd      	b.n	801fb88 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801f9ec:	687a      	ldr	r2, [r7, #4]
 801f9ee:	23a7      	movs	r3, #167	@ 0xa7
 801f9f0:	009b      	lsls	r3, r3, #2
 801f9f2:	5cd3      	ldrb	r3, [r2, r3]
 801f9f4:	2b02      	cmp	r3, #2
 801f9f6:	d002      	beq.n	801f9fe <USBD_StdEPReq+0x1c4>
 801f9f8:	2b03      	cmp	r3, #3
 801f9fa:	d03c      	beq.n	801fa76 <USBD_StdEPReq+0x23c>
 801f9fc:	e0b5      	b.n	801fb6a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f9fe:	220e      	movs	r2, #14
 801fa00:	18bb      	adds	r3, r7, r2
 801fa02:	781b      	ldrb	r3, [r3, #0]
 801fa04:	2b00      	cmp	r3, #0
 801fa06:	d00a      	beq.n	801fa1e <USBD_StdEPReq+0x1e4>
 801fa08:	18bb      	adds	r3, r7, r2
 801fa0a:	781b      	ldrb	r3, [r3, #0]
 801fa0c:	2b80      	cmp	r3, #128	@ 0x80
 801fa0e:	d006      	beq.n	801fa1e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801fa10:	683a      	ldr	r2, [r7, #0]
 801fa12:	687b      	ldr	r3, [r7, #4]
 801fa14:	0011      	movs	r1, r2
 801fa16:	0018      	movs	r0, r3
 801fa18:	f000 fc59 	bl	80202ce <USBD_CtlError>
                break;
 801fa1c:	e0ac      	b.n	801fb78 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fa1e:	220e      	movs	r2, #14
 801fa20:	18bb      	adds	r3, r7, r2
 801fa22:	781b      	ldrb	r3, [r3, #0]
 801fa24:	b25b      	sxtb	r3, r3
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	da0c      	bge.n	801fa44 <USBD_StdEPReq+0x20a>
 801fa2a:	18bb      	adds	r3, r7, r2
 801fa2c:	781b      	ldrb	r3, [r3, #0]
 801fa2e:	227f      	movs	r2, #127	@ 0x7f
 801fa30:	401a      	ands	r2, r3
 801fa32:	0013      	movs	r3, r2
 801fa34:	009b      	lsls	r3, r3, #2
 801fa36:	189b      	adds	r3, r3, r2
 801fa38:	009b      	lsls	r3, r3, #2
 801fa3a:	3310      	adds	r3, #16
 801fa3c:	687a      	ldr	r2, [r7, #4]
 801fa3e:	18d3      	adds	r3, r2, r3
 801fa40:	3304      	adds	r3, #4
 801fa42:	e00d      	b.n	801fa60 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801fa44:	230e      	movs	r3, #14
 801fa46:	18fb      	adds	r3, r7, r3
 801fa48:	781b      	ldrb	r3, [r3, #0]
 801fa4a:	227f      	movs	r2, #127	@ 0x7f
 801fa4c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fa4e:	0013      	movs	r3, r2
 801fa50:	009b      	lsls	r3, r3, #2
 801fa52:	189b      	adds	r3, r3, r2
 801fa54:	009b      	lsls	r3, r3, #2
 801fa56:	3351      	adds	r3, #81	@ 0x51
 801fa58:	33ff      	adds	r3, #255	@ 0xff
 801fa5a:	687a      	ldr	r2, [r7, #4]
 801fa5c:	18d3      	adds	r3, r2, r3
 801fa5e:	3304      	adds	r3, #4
 801fa60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801fa62:	68bb      	ldr	r3, [r7, #8]
 801fa64:	2200      	movs	r2, #0
 801fa66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801fa68:	68b9      	ldr	r1, [r7, #8]
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	2202      	movs	r2, #2
 801fa6e:	0018      	movs	r0, r3
 801fa70:	f000 fcab 	bl	80203ca <USBD_CtlSendData>
              break;
 801fa74:	e080      	b.n	801fb78 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801fa76:	220e      	movs	r2, #14
 801fa78:	18bb      	adds	r3, r7, r2
 801fa7a:	781b      	ldrb	r3, [r3, #0]
 801fa7c:	b25b      	sxtb	r3, r3
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	da14      	bge.n	801faac <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801fa82:	18bb      	adds	r3, r7, r2
 801fa84:	781b      	ldrb	r3, [r3, #0]
 801fa86:	220f      	movs	r2, #15
 801fa88:	401a      	ands	r2, r3
 801fa8a:	6879      	ldr	r1, [r7, #4]
 801fa8c:	0013      	movs	r3, r2
 801fa8e:	009b      	lsls	r3, r3, #2
 801fa90:	189b      	adds	r3, r3, r2
 801fa92:	009b      	lsls	r3, r3, #2
 801fa94:	18cb      	adds	r3, r1, r3
 801fa96:	3318      	adds	r3, #24
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	d11e      	bne.n	801fadc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801fa9e:	683a      	ldr	r2, [r7, #0]
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	0011      	movs	r1, r2
 801faa4:	0018      	movs	r0, r3
 801faa6:	f000 fc12 	bl	80202ce <USBD_CtlError>
                  break;
 801faaa:	e065      	b.n	801fb78 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801faac:	230e      	movs	r3, #14
 801faae:	18fb      	adds	r3, r7, r3
 801fab0:	781b      	ldrb	r3, [r3, #0]
 801fab2:	220f      	movs	r2, #15
 801fab4:	401a      	ands	r2, r3
 801fab6:	6878      	ldr	r0, [r7, #4]
 801fab8:	23ac      	movs	r3, #172	@ 0xac
 801faba:	0059      	lsls	r1, r3, #1
 801fabc:	0013      	movs	r3, r2
 801fabe:	009b      	lsls	r3, r3, #2
 801fac0:	189b      	adds	r3, r3, r2
 801fac2:	009b      	lsls	r3, r3, #2
 801fac4:	18c3      	adds	r3, r0, r3
 801fac6:	185b      	adds	r3, r3, r1
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	2b00      	cmp	r3, #0
 801facc:	d106      	bne.n	801fadc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801face:	683a      	ldr	r2, [r7, #0]
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	0011      	movs	r1, r2
 801fad4:	0018      	movs	r0, r3
 801fad6:	f000 fbfa 	bl	80202ce <USBD_CtlError>
                  break;
 801fada:	e04d      	b.n	801fb78 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fadc:	220e      	movs	r2, #14
 801fade:	18bb      	adds	r3, r7, r2
 801fae0:	781b      	ldrb	r3, [r3, #0]
 801fae2:	b25b      	sxtb	r3, r3
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	da0c      	bge.n	801fb02 <USBD_StdEPReq+0x2c8>
 801fae8:	18bb      	adds	r3, r7, r2
 801faea:	781b      	ldrb	r3, [r3, #0]
 801faec:	227f      	movs	r2, #127	@ 0x7f
 801faee:	401a      	ands	r2, r3
 801faf0:	0013      	movs	r3, r2
 801faf2:	009b      	lsls	r3, r3, #2
 801faf4:	189b      	adds	r3, r3, r2
 801faf6:	009b      	lsls	r3, r3, #2
 801faf8:	3310      	adds	r3, #16
 801fafa:	687a      	ldr	r2, [r7, #4]
 801fafc:	18d3      	adds	r3, r2, r3
 801fafe:	3304      	adds	r3, #4
 801fb00:	e00d      	b.n	801fb1e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801fb02:	230e      	movs	r3, #14
 801fb04:	18fb      	adds	r3, r7, r3
 801fb06:	781b      	ldrb	r3, [r3, #0]
 801fb08:	227f      	movs	r2, #127	@ 0x7f
 801fb0a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fb0c:	0013      	movs	r3, r2
 801fb0e:	009b      	lsls	r3, r3, #2
 801fb10:	189b      	adds	r3, r3, r2
 801fb12:	009b      	lsls	r3, r3, #2
 801fb14:	3351      	adds	r3, #81	@ 0x51
 801fb16:	33ff      	adds	r3, #255	@ 0xff
 801fb18:	687a      	ldr	r2, [r7, #4]
 801fb1a:	18d3      	adds	r3, r2, r3
 801fb1c:	3304      	adds	r3, #4
 801fb1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801fb20:	220e      	movs	r2, #14
 801fb22:	18bb      	adds	r3, r7, r2
 801fb24:	781b      	ldrb	r3, [r3, #0]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d003      	beq.n	801fb32 <USBD_StdEPReq+0x2f8>
 801fb2a:	18bb      	adds	r3, r7, r2
 801fb2c:	781b      	ldrb	r3, [r3, #0]
 801fb2e:	2b80      	cmp	r3, #128	@ 0x80
 801fb30:	d103      	bne.n	801fb3a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801fb32:	68bb      	ldr	r3, [r7, #8]
 801fb34:	2200      	movs	r2, #0
 801fb36:	601a      	str	r2, [r3, #0]
 801fb38:	e010      	b.n	801fb5c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801fb3a:	230e      	movs	r3, #14
 801fb3c:	18fb      	adds	r3, r7, r3
 801fb3e:	781a      	ldrb	r2, [r3, #0]
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	0011      	movs	r1, r2
 801fb44:	0018      	movs	r0, r3
 801fb46:	f001 f940 	bl	8020dca <USBD_LL_IsStallEP>
 801fb4a:	1e03      	subs	r3, r0, #0
 801fb4c:	d003      	beq.n	801fb56 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801fb4e:	68bb      	ldr	r3, [r7, #8]
 801fb50:	2201      	movs	r2, #1
 801fb52:	601a      	str	r2, [r3, #0]
 801fb54:	e002      	b.n	801fb5c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801fb56:	68bb      	ldr	r3, [r7, #8]
 801fb58:	2200      	movs	r2, #0
 801fb5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801fb5c:	68b9      	ldr	r1, [r7, #8]
 801fb5e:	687b      	ldr	r3, [r7, #4]
 801fb60:	2202      	movs	r2, #2
 801fb62:	0018      	movs	r0, r3
 801fb64:	f000 fc31 	bl	80203ca <USBD_CtlSendData>
              break;
 801fb68:	e006      	b.n	801fb78 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801fb6a:	683a      	ldr	r2, [r7, #0]
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	0011      	movs	r1, r2
 801fb70:	0018      	movs	r0, r3
 801fb72:	f000 fbac 	bl	80202ce <USBD_CtlError>
              break;
 801fb76:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801fb78:	e006      	b.n	801fb88 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801fb7a:	683a      	ldr	r2, [r7, #0]
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	0011      	movs	r1, r2
 801fb80:	0018      	movs	r0, r3
 801fb82:	f000 fba4 	bl	80202ce <USBD_CtlError>
          break;
 801fb86:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801fb88:	e006      	b.n	801fb98 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801fb8a:	683a      	ldr	r2, [r7, #0]
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	0011      	movs	r1, r2
 801fb90:	0018      	movs	r0, r3
 801fb92:	f000 fb9c 	bl	80202ce <USBD_CtlError>
      break;
 801fb96:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801fb98:	230f      	movs	r3, #15
 801fb9a:	18fb      	adds	r3, r7, r3
 801fb9c:	781b      	ldrb	r3, [r3, #0]
}
 801fb9e:	0018      	movs	r0, r3
 801fba0:	46bd      	mov	sp, r7
 801fba2:	b004      	add	sp, #16
 801fba4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801fba8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801fba8:	b580      	push	{r7, lr}
 801fbaa:	b084      	sub	sp, #16
 801fbac:	af00      	add	r7, sp, #0
 801fbae:	6078      	str	r0, [r7, #4]
 801fbb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801fbb2:	2308      	movs	r3, #8
 801fbb4:	18fb      	adds	r3, r7, r3
 801fbb6:	2200      	movs	r2, #0
 801fbb8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801fbba:	2300      	movs	r3, #0
 801fbbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801fbbe:	230b      	movs	r3, #11
 801fbc0:	18fb      	adds	r3, r7, r3
 801fbc2:	2200      	movs	r2, #0
 801fbc4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801fbc6:	683b      	ldr	r3, [r7, #0]
 801fbc8:	885b      	ldrh	r3, [r3, #2]
 801fbca:	0a1b      	lsrs	r3, r3, #8
 801fbcc:	b29b      	uxth	r3, r3
 801fbce:	2b07      	cmp	r3, #7
 801fbd0:	d900      	bls.n	801fbd4 <USBD_GetDescriptor+0x2c>
 801fbd2:	e159      	b.n	801fe88 <USBD_GetDescriptor+0x2e0>
 801fbd4:	009a      	lsls	r2, r3, #2
 801fbd6:	4bcb      	ldr	r3, [pc, #812]	@ (801ff04 <USBD_GetDescriptor+0x35c>)
 801fbd8:	18d3      	adds	r3, r2, r3
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801fbde:	687a      	ldr	r2, [r7, #4]
 801fbe0:	23ac      	movs	r3, #172	@ 0xac
 801fbe2:	009b      	lsls	r3, r3, #2
 801fbe4:	58d3      	ldr	r3, [r2, r3]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	687a      	ldr	r2, [r7, #4]
 801fbea:	7c12      	ldrb	r2, [r2, #16]
 801fbec:	2108      	movs	r1, #8
 801fbee:	1879      	adds	r1, r7, r1
 801fbf0:	0010      	movs	r0, r2
 801fbf2:	4798      	blx	r3
 801fbf4:	0003      	movs	r3, r0
 801fbf6:	60fb      	str	r3, [r7, #12]
      break;
 801fbf8:	e153      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	7c1b      	ldrb	r3, [r3, #16]
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d10f      	bne.n	801fc22 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801fc02:	687a      	ldr	r2, [r7, #4]
 801fc04:	23ad      	movs	r3, #173	@ 0xad
 801fc06:	009b      	lsls	r3, r3, #2
 801fc08:	58d3      	ldr	r3, [r2, r3]
 801fc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc0c:	2208      	movs	r2, #8
 801fc0e:	18ba      	adds	r2, r7, r2
 801fc10:	0010      	movs	r0, r2
 801fc12:	4798      	blx	r3
 801fc14:	0003      	movs	r3, r0
 801fc16:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	3301      	adds	r3, #1
 801fc1c:	2202      	movs	r2, #2
 801fc1e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801fc20:	e13f      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801fc22:	687a      	ldr	r2, [r7, #4]
 801fc24:	23ad      	movs	r3, #173	@ 0xad
 801fc26:	009b      	lsls	r3, r3, #2
 801fc28:	58d3      	ldr	r3, [r2, r3]
 801fc2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc2c:	2208      	movs	r2, #8
 801fc2e:	18ba      	adds	r2, r7, r2
 801fc30:	0010      	movs	r0, r2
 801fc32:	4798      	blx	r3
 801fc34:	0003      	movs	r3, r0
 801fc36:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801fc38:	68fb      	ldr	r3, [r7, #12]
 801fc3a:	3301      	adds	r3, #1
 801fc3c:	2202      	movs	r2, #2
 801fc3e:	701a      	strb	r2, [r3, #0]
      break;
 801fc40:	e12f      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	885b      	ldrh	r3, [r3, #2]
 801fc46:	b2db      	uxtb	r3, r3
 801fc48:	2b05      	cmp	r3, #5
 801fc4a:	d900      	bls.n	801fc4e <USBD_GetDescriptor+0xa6>
 801fc4c:	e0d0      	b.n	801fdf0 <USBD_GetDescriptor+0x248>
 801fc4e:	009a      	lsls	r2, r3, #2
 801fc50:	4bad      	ldr	r3, [pc, #692]	@ (801ff08 <USBD_GetDescriptor+0x360>)
 801fc52:	18d3      	adds	r3, r2, r3
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801fc58:	687a      	ldr	r2, [r7, #4]
 801fc5a:	23ac      	movs	r3, #172	@ 0xac
 801fc5c:	009b      	lsls	r3, r3, #2
 801fc5e:	58d3      	ldr	r3, [r2, r3]
 801fc60:	685b      	ldr	r3, [r3, #4]
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	d00d      	beq.n	801fc82 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	23ac      	movs	r3, #172	@ 0xac
 801fc6a:	009b      	lsls	r3, r3, #2
 801fc6c:	58d3      	ldr	r3, [r2, r3]
 801fc6e:	685b      	ldr	r3, [r3, #4]
 801fc70:	687a      	ldr	r2, [r7, #4]
 801fc72:	7c12      	ldrb	r2, [r2, #16]
 801fc74:	2108      	movs	r1, #8
 801fc76:	1879      	adds	r1, r7, r1
 801fc78:	0010      	movs	r0, r2
 801fc7a:	4798      	blx	r3
 801fc7c:	0003      	movs	r3, r0
 801fc7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fc80:	e0c3      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fc82:	683a      	ldr	r2, [r7, #0]
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	0011      	movs	r1, r2
 801fc88:	0018      	movs	r0, r3
 801fc8a:	f000 fb20 	bl	80202ce <USBD_CtlError>
            err++;
 801fc8e:	210b      	movs	r1, #11
 801fc90:	187b      	adds	r3, r7, r1
 801fc92:	781a      	ldrb	r2, [r3, #0]
 801fc94:	187b      	adds	r3, r7, r1
 801fc96:	3201      	adds	r2, #1
 801fc98:	701a      	strb	r2, [r3, #0]
          break;
 801fc9a:	e0b6      	b.n	801fe0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801fc9c:	687a      	ldr	r2, [r7, #4]
 801fc9e:	23ac      	movs	r3, #172	@ 0xac
 801fca0:	009b      	lsls	r3, r3, #2
 801fca2:	58d3      	ldr	r3, [r2, r3]
 801fca4:	689b      	ldr	r3, [r3, #8]
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d00d      	beq.n	801fcc6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801fcaa:	687a      	ldr	r2, [r7, #4]
 801fcac:	23ac      	movs	r3, #172	@ 0xac
 801fcae:	009b      	lsls	r3, r3, #2
 801fcb0:	58d3      	ldr	r3, [r2, r3]
 801fcb2:	689b      	ldr	r3, [r3, #8]
 801fcb4:	687a      	ldr	r2, [r7, #4]
 801fcb6:	7c12      	ldrb	r2, [r2, #16]
 801fcb8:	2108      	movs	r1, #8
 801fcba:	1879      	adds	r1, r7, r1
 801fcbc:	0010      	movs	r0, r2
 801fcbe:	4798      	blx	r3
 801fcc0:	0003      	movs	r3, r0
 801fcc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fcc4:	e0a1      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fcc6:	683a      	ldr	r2, [r7, #0]
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	0011      	movs	r1, r2
 801fccc:	0018      	movs	r0, r3
 801fcce:	f000 fafe 	bl	80202ce <USBD_CtlError>
            err++;
 801fcd2:	210b      	movs	r1, #11
 801fcd4:	187b      	adds	r3, r7, r1
 801fcd6:	781a      	ldrb	r2, [r3, #0]
 801fcd8:	187b      	adds	r3, r7, r1
 801fcda:	3201      	adds	r2, #1
 801fcdc:	701a      	strb	r2, [r3, #0]
          break;
 801fcde:	e094      	b.n	801fe0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801fce0:	687a      	ldr	r2, [r7, #4]
 801fce2:	23ac      	movs	r3, #172	@ 0xac
 801fce4:	009b      	lsls	r3, r3, #2
 801fce6:	58d3      	ldr	r3, [r2, r3]
 801fce8:	68db      	ldr	r3, [r3, #12]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d00d      	beq.n	801fd0a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801fcee:	687a      	ldr	r2, [r7, #4]
 801fcf0:	23ac      	movs	r3, #172	@ 0xac
 801fcf2:	009b      	lsls	r3, r3, #2
 801fcf4:	58d3      	ldr	r3, [r2, r3]
 801fcf6:	68db      	ldr	r3, [r3, #12]
 801fcf8:	687a      	ldr	r2, [r7, #4]
 801fcfa:	7c12      	ldrb	r2, [r2, #16]
 801fcfc:	2108      	movs	r1, #8
 801fcfe:	1879      	adds	r1, r7, r1
 801fd00:	0010      	movs	r0, r2
 801fd02:	4798      	blx	r3
 801fd04:	0003      	movs	r3, r0
 801fd06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd08:	e07f      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd0a:	683a      	ldr	r2, [r7, #0]
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	0011      	movs	r1, r2
 801fd10:	0018      	movs	r0, r3
 801fd12:	f000 fadc 	bl	80202ce <USBD_CtlError>
            err++;
 801fd16:	210b      	movs	r1, #11
 801fd18:	187b      	adds	r3, r7, r1
 801fd1a:	781a      	ldrb	r2, [r3, #0]
 801fd1c:	187b      	adds	r3, r7, r1
 801fd1e:	3201      	adds	r2, #1
 801fd20:	701a      	strb	r2, [r3, #0]
          break;
 801fd22:	e072      	b.n	801fe0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801fd24:	687a      	ldr	r2, [r7, #4]
 801fd26:	23ac      	movs	r3, #172	@ 0xac
 801fd28:	009b      	lsls	r3, r3, #2
 801fd2a:	58d3      	ldr	r3, [r2, r3]
 801fd2c:	691b      	ldr	r3, [r3, #16]
 801fd2e:	2b00      	cmp	r3, #0
 801fd30:	d00d      	beq.n	801fd4e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801fd32:	687a      	ldr	r2, [r7, #4]
 801fd34:	23ac      	movs	r3, #172	@ 0xac
 801fd36:	009b      	lsls	r3, r3, #2
 801fd38:	58d3      	ldr	r3, [r2, r3]
 801fd3a:	691b      	ldr	r3, [r3, #16]
 801fd3c:	687a      	ldr	r2, [r7, #4]
 801fd3e:	7c12      	ldrb	r2, [r2, #16]
 801fd40:	2108      	movs	r1, #8
 801fd42:	1879      	adds	r1, r7, r1
 801fd44:	0010      	movs	r0, r2
 801fd46:	4798      	blx	r3
 801fd48:	0003      	movs	r3, r0
 801fd4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd4c:	e05d      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd4e:	683a      	ldr	r2, [r7, #0]
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	0011      	movs	r1, r2
 801fd54:	0018      	movs	r0, r3
 801fd56:	f000 faba 	bl	80202ce <USBD_CtlError>
            err++;
 801fd5a:	210b      	movs	r1, #11
 801fd5c:	187b      	adds	r3, r7, r1
 801fd5e:	781a      	ldrb	r2, [r3, #0]
 801fd60:	187b      	adds	r3, r7, r1
 801fd62:	3201      	adds	r2, #1
 801fd64:	701a      	strb	r2, [r3, #0]
          break;
 801fd66:	e050      	b.n	801fe0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801fd68:	687a      	ldr	r2, [r7, #4]
 801fd6a:	23ac      	movs	r3, #172	@ 0xac
 801fd6c:	009b      	lsls	r3, r3, #2
 801fd6e:	58d3      	ldr	r3, [r2, r3]
 801fd70:	695b      	ldr	r3, [r3, #20]
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d00d      	beq.n	801fd92 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801fd76:	687a      	ldr	r2, [r7, #4]
 801fd78:	23ac      	movs	r3, #172	@ 0xac
 801fd7a:	009b      	lsls	r3, r3, #2
 801fd7c:	58d3      	ldr	r3, [r2, r3]
 801fd7e:	695b      	ldr	r3, [r3, #20]
 801fd80:	687a      	ldr	r2, [r7, #4]
 801fd82:	7c12      	ldrb	r2, [r2, #16]
 801fd84:	2108      	movs	r1, #8
 801fd86:	1879      	adds	r1, r7, r1
 801fd88:	0010      	movs	r0, r2
 801fd8a:	4798      	blx	r3
 801fd8c:	0003      	movs	r3, r0
 801fd8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd90:	e03b      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd92:	683a      	ldr	r2, [r7, #0]
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	0011      	movs	r1, r2
 801fd98:	0018      	movs	r0, r3
 801fd9a:	f000 fa98 	bl	80202ce <USBD_CtlError>
            err++;
 801fd9e:	210b      	movs	r1, #11
 801fda0:	187b      	adds	r3, r7, r1
 801fda2:	781a      	ldrb	r2, [r3, #0]
 801fda4:	187b      	adds	r3, r7, r1
 801fda6:	3201      	adds	r2, #1
 801fda8:	701a      	strb	r2, [r3, #0]
          break;
 801fdaa:	e02e      	b.n	801fe0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801fdac:	687a      	ldr	r2, [r7, #4]
 801fdae:	23ac      	movs	r3, #172	@ 0xac
 801fdb0:	009b      	lsls	r3, r3, #2
 801fdb2:	58d3      	ldr	r3, [r2, r3]
 801fdb4:	699b      	ldr	r3, [r3, #24]
 801fdb6:	2b00      	cmp	r3, #0
 801fdb8:	d00d      	beq.n	801fdd6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801fdba:	687a      	ldr	r2, [r7, #4]
 801fdbc:	23ac      	movs	r3, #172	@ 0xac
 801fdbe:	009b      	lsls	r3, r3, #2
 801fdc0:	58d3      	ldr	r3, [r2, r3]
 801fdc2:	699b      	ldr	r3, [r3, #24]
 801fdc4:	687a      	ldr	r2, [r7, #4]
 801fdc6:	7c12      	ldrb	r2, [r2, #16]
 801fdc8:	2108      	movs	r1, #8
 801fdca:	1879      	adds	r1, r7, r1
 801fdcc:	0010      	movs	r0, r2
 801fdce:	4798      	blx	r3
 801fdd0:	0003      	movs	r3, r0
 801fdd2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fdd4:	e019      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fdd6:	683a      	ldr	r2, [r7, #0]
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	0011      	movs	r1, r2
 801fddc:	0018      	movs	r0, r3
 801fdde:	f000 fa76 	bl	80202ce <USBD_CtlError>
            err++;
 801fde2:	210b      	movs	r1, #11
 801fde4:	187b      	adds	r3, r7, r1
 801fde6:	781a      	ldrb	r2, [r3, #0]
 801fde8:	187b      	adds	r3, r7, r1
 801fdea:	3201      	adds	r2, #1
 801fdec:	701a      	strb	r2, [r3, #0]
          break;
 801fdee:	e00c      	b.n	801fe0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801fdf0:	683a      	ldr	r2, [r7, #0]
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	0011      	movs	r1, r2
 801fdf6:	0018      	movs	r0, r3
 801fdf8:	f000 fa69 	bl	80202ce <USBD_CtlError>
          err++;
 801fdfc:	210b      	movs	r1, #11
 801fdfe:	187b      	adds	r3, r7, r1
 801fe00:	781a      	ldrb	r2, [r3, #0]
 801fe02:	187b      	adds	r3, r7, r1
 801fe04:	3201      	adds	r2, #1
 801fe06:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801fe08:	e04b      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>
 801fe0a:	e04a      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	7c1b      	ldrb	r3, [r3, #16]
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d10b      	bne.n	801fe2c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801fe14:	687a      	ldr	r2, [r7, #4]
 801fe16:	23ad      	movs	r3, #173	@ 0xad
 801fe18:	009b      	lsls	r3, r3, #2
 801fe1a:	58d3      	ldr	r3, [r2, r3]
 801fe1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fe1e:	2208      	movs	r2, #8
 801fe20:	18ba      	adds	r2, r7, r2
 801fe22:	0010      	movs	r0, r2
 801fe24:	4798      	blx	r3
 801fe26:	0003      	movs	r3, r0
 801fe28:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801fe2a:	e03a      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801fe2c:	683a      	ldr	r2, [r7, #0]
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	0011      	movs	r1, r2
 801fe32:	0018      	movs	r0, r3
 801fe34:	f000 fa4b 	bl	80202ce <USBD_CtlError>
        err++;
 801fe38:	210b      	movs	r1, #11
 801fe3a:	187b      	adds	r3, r7, r1
 801fe3c:	781a      	ldrb	r2, [r3, #0]
 801fe3e:	187b      	adds	r3, r7, r1
 801fe40:	3201      	adds	r2, #1
 801fe42:	701a      	strb	r2, [r3, #0]
      break;
 801fe44:	e02d      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	7c1b      	ldrb	r3, [r3, #16]
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d10f      	bne.n	801fe6e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801fe4e:	687a      	ldr	r2, [r7, #4]
 801fe50:	23ad      	movs	r3, #173	@ 0xad
 801fe52:	009b      	lsls	r3, r3, #2
 801fe54:	58d3      	ldr	r3, [r2, r3]
 801fe56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fe58:	2208      	movs	r2, #8
 801fe5a:	18ba      	adds	r2, r7, r2
 801fe5c:	0010      	movs	r0, r2
 801fe5e:	4798      	blx	r3
 801fe60:	0003      	movs	r3, r0
 801fe62:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801fe64:	68fb      	ldr	r3, [r7, #12]
 801fe66:	3301      	adds	r3, #1
 801fe68:	2207      	movs	r2, #7
 801fe6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801fe6c:	e019      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801fe6e:	683a      	ldr	r2, [r7, #0]
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	0011      	movs	r1, r2
 801fe74:	0018      	movs	r0, r3
 801fe76:	f000 fa2a 	bl	80202ce <USBD_CtlError>
        err++;
 801fe7a:	210b      	movs	r1, #11
 801fe7c:	187b      	adds	r3, r7, r1
 801fe7e:	781a      	ldrb	r2, [r3, #0]
 801fe80:	187b      	adds	r3, r7, r1
 801fe82:	3201      	adds	r2, #1
 801fe84:	701a      	strb	r2, [r3, #0]
      break;
 801fe86:	e00c      	b.n	801fea2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801fe88:	683a      	ldr	r2, [r7, #0]
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	0011      	movs	r1, r2
 801fe8e:	0018      	movs	r0, r3
 801fe90:	f000 fa1d 	bl	80202ce <USBD_CtlError>
      err++;
 801fe94:	210b      	movs	r1, #11
 801fe96:	187b      	adds	r3, r7, r1
 801fe98:	781a      	ldrb	r2, [r3, #0]
 801fe9a:	187b      	adds	r3, r7, r1
 801fe9c:	3201      	adds	r2, #1
 801fe9e:	701a      	strb	r2, [r3, #0]
      break;
 801fea0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801fea2:	230b      	movs	r3, #11
 801fea4:	18fb      	adds	r3, r7, r3
 801fea6:	781b      	ldrb	r3, [r3, #0]
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d127      	bne.n	801fefc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801feac:	2108      	movs	r1, #8
 801feae:	187b      	adds	r3, r7, r1
 801feb0:	881b      	ldrh	r3, [r3, #0]
 801feb2:	2b00      	cmp	r3, #0
 801feb4:	d019      	beq.n	801feea <USBD_GetDescriptor+0x342>
 801feb6:	683b      	ldr	r3, [r7, #0]
 801feb8:	88db      	ldrh	r3, [r3, #6]
 801feba:	2b00      	cmp	r3, #0
 801febc:	d015      	beq.n	801feea <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801febe:	683b      	ldr	r3, [r7, #0]
 801fec0:	88da      	ldrh	r2, [r3, #6]
 801fec2:	187b      	adds	r3, r7, r1
 801fec4:	881b      	ldrh	r3, [r3, #0]
 801fec6:	1c18      	adds	r0, r3, #0
 801fec8:	1c11      	adds	r1, r2, #0
 801feca:	b28a      	uxth	r2, r1
 801fecc:	b283      	uxth	r3, r0
 801fece:	429a      	cmp	r2, r3
 801fed0:	d900      	bls.n	801fed4 <USBD_GetDescriptor+0x32c>
 801fed2:	1c01      	adds	r1, r0, #0
 801fed4:	b28a      	uxth	r2, r1
 801fed6:	2108      	movs	r1, #8
 801fed8:	187b      	adds	r3, r7, r1
 801feda:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801fedc:	187b      	adds	r3, r7, r1
 801fede:	881a      	ldrh	r2, [r3, #0]
 801fee0:	68f9      	ldr	r1, [r7, #12]
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	0018      	movs	r0, r3
 801fee6:	f000 fa70 	bl	80203ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801feea:	683b      	ldr	r3, [r7, #0]
 801feec:	88db      	ldrh	r3, [r3, #6]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d105      	bne.n	801fefe <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	0018      	movs	r0, r3
 801fef6:	f000 fad2 	bl	802049e <USBD_CtlSendStatus>
 801fefa:	e000      	b.n	801fefe <USBD_GetDescriptor+0x356>
    return;
 801fefc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801fefe:	46bd      	mov	sp, r7
 801ff00:	b004      	add	sp, #16
 801ff02:	bd80      	pop	{r7, pc}
 801ff04:	0802b2fc 	.word	0x0802b2fc
 801ff08:	0802b31c 	.word	0x0802b31c

0801ff0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ff0c:	b590      	push	{r4, r7, lr}
 801ff0e:	b085      	sub	sp, #20
 801ff10:	af00      	add	r7, sp, #0
 801ff12:	6078      	str	r0, [r7, #4]
 801ff14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ff16:	683b      	ldr	r3, [r7, #0]
 801ff18:	889b      	ldrh	r3, [r3, #4]
 801ff1a:	2b00      	cmp	r3, #0
 801ff1c:	d13d      	bne.n	801ff9a <USBD_SetAddress+0x8e>
 801ff1e:	683b      	ldr	r3, [r7, #0]
 801ff20:	88db      	ldrh	r3, [r3, #6]
 801ff22:	2b00      	cmp	r3, #0
 801ff24:	d139      	bne.n	801ff9a <USBD_SetAddress+0x8e>
 801ff26:	683b      	ldr	r3, [r7, #0]
 801ff28:	885b      	ldrh	r3, [r3, #2]
 801ff2a:	2b7f      	cmp	r3, #127	@ 0x7f
 801ff2c:	d835      	bhi.n	801ff9a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ff2e:	683b      	ldr	r3, [r7, #0]
 801ff30:	885b      	ldrh	r3, [r3, #2]
 801ff32:	b2da      	uxtb	r2, r3
 801ff34:	230f      	movs	r3, #15
 801ff36:	18fb      	adds	r3, r7, r3
 801ff38:	217f      	movs	r1, #127	@ 0x7f
 801ff3a:	400a      	ands	r2, r1
 801ff3c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff3e:	687a      	ldr	r2, [r7, #4]
 801ff40:	23a7      	movs	r3, #167	@ 0xa7
 801ff42:	009b      	lsls	r3, r3, #2
 801ff44:	5cd3      	ldrb	r3, [r2, r3]
 801ff46:	2b03      	cmp	r3, #3
 801ff48:	d106      	bne.n	801ff58 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ff4a:	683a      	ldr	r2, [r7, #0]
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	0011      	movs	r1, r2
 801ff50:	0018      	movs	r0, r3
 801ff52:	f000 f9bc 	bl	80202ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff56:	e027      	b.n	801ffa8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	240f      	movs	r4, #15
 801ff5c:	193a      	adds	r2, r7, r4
 801ff5e:	4914      	ldr	r1, [pc, #80]	@ (801ffb0 <USBD_SetAddress+0xa4>)
 801ff60:	7812      	ldrb	r2, [r2, #0]
 801ff62:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ff64:	193b      	adds	r3, r7, r4
 801ff66:	781a      	ldrb	r2, [r3, #0]
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	0011      	movs	r1, r2
 801ff6c:	0018      	movs	r0, r3
 801ff6e:	f000 ff5d 	bl	8020e2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	0018      	movs	r0, r3
 801ff76:	f000 fa92 	bl	802049e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ff7a:	193b      	adds	r3, r7, r4
 801ff7c:	781b      	ldrb	r3, [r3, #0]
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d005      	beq.n	801ff8e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ff82:	687a      	ldr	r2, [r7, #4]
 801ff84:	23a7      	movs	r3, #167	@ 0xa7
 801ff86:	009b      	lsls	r3, r3, #2
 801ff88:	2102      	movs	r1, #2
 801ff8a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff8c:	e00c      	b.n	801ffa8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ff8e:	687a      	ldr	r2, [r7, #4]
 801ff90:	23a7      	movs	r3, #167	@ 0xa7
 801ff92:	009b      	lsls	r3, r3, #2
 801ff94:	2101      	movs	r1, #1
 801ff96:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff98:	e006      	b.n	801ffa8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ff9a:	683a      	ldr	r2, [r7, #0]
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	0011      	movs	r1, r2
 801ffa0:	0018      	movs	r0, r3
 801ffa2:	f000 f994 	bl	80202ce <USBD_CtlError>
  }
}
 801ffa6:	46c0      	nop			@ (mov r8, r8)
 801ffa8:	46c0      	nop			@ (mov r8, r8)
 801ffaa:	46bd      	mov	sp, r7
 801ffac:	b005      	add	sp, #20
 801ffae:	bd90      	pop	{r4, r7, pc}
 801ffb0:	0000029e 	.word	0x0000029e

0801ffb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ffb4:	b580      	push	{r7, lr}
 801ffb6:	b082      	sub	sp, #8
 801ffb8:	af00      	add	r7, sp, #0
 801ffba:	6078      	str	r0, [r7, #4]
 801ffbc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ffbe:	683b      	ldr	r3, [r7, #0]
 801ffc0:	885b      	ldrh	r3, [r3, #2]
 801ffc2:	b2da      	uxtb	r2, r3
 801ffc4:	4b4c      	ldr	r3, [pc, #304]	@ (80200f8 <USBD_SetConfig+0x144>)
 801ffc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ffc8:	4b4b      	ldr	r3, [pc, #300]	@ (80200f8 <USBD_SetConfig+0x144>)
 801ffca:	781b      	ldrb	r3, [r3, #0]
 801ffcc:	2b01      	cmp	r3, #1
 801ffce:	d906      	bls.n	801ffde <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ffd0:	683a      	ldr	r2, [r7, #0]
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	0011      	movs	r1, r2
 801ffd6:	0018      	movs	r0, r3
 801ffd8:	f000 f979 	bl	80202ce <USBD_CtlError>
 801ffdc:	e088      	b.n	80200f0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801ffde:	687a      	ldr	r2, [r7, #4]
 801ffe0:	23a7      	movs	r3, #167	@ 0xa7
 801ffe2:	009b      	lsls	r3, r3, #2
 801ffe4:	5cd3      	ldrb	r3, [r2, r3]
 801ffe6:	2b02      	cmp	r3, #2
 801ffe8:	d002      	beq.n	801fff0 <USBD_SetConfig+0x3c>
 801ffea:	2b03      	cmp	r3, #3
 801ffec:	d029      	beq.n	8020042 <USBD_SetConfig+0x8e>
 801ffee:	e071      	b.n	80200d4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801fff0:	4b41      	ldr	r3, [pc, #260]	@ (80200f8 <USBD_SetConfig+0x144>)
 801fff2:	781b      	ldrb	r3, [r3, #0]
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d01f      	beq.n	8020038 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801fff8:	4b3f      	ldr	r3, [pc, #252]	@ (80200f8 <USBD_SetConfig+0x144>)
 801fffa:	781b      	ldrb	r3, [r3, #0]
 801fffc:	001a      	movs	r2, r3
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8020002:	687a      	ldr	r2, [r7, #4]
 8020004:	23a7      	movs	r3, #167	@ 0xa7
 8020006:	009b      	lsls	r3, r3, #2
 8020008:	2103      	movs	r1, #3
 802000a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802000c:	4b3a      	ldr	r3, [pc, #232]	@ (80200f8 <USBD_SetConfig+0x144>)
 802000e:	781a      	ldrb	r2, [r3, #0]
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	0011      	movs	r1, r2
 8020014:	0018      	movs	r0, r3
 8020016:	f7ff f8c6 	bl	801f1a6 <USBD_SetClassConfig>
 802001a:	0003      	movs	r3, r0
 802001c:	2b02      	cmp	r3, #2
 802001e:	d106      	bne.n	802002e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8020020:	683a      	ldr	r2, [r7, #0]
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	0011      	movs	r1, r2
 8020026:	0018      	movs	r0, r3
 8020028:	f000 f951 	bl	80202ce <USBD_CtlError>
            return;
 802002c:	e060      	b.n	80200f0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	0018      	movs	r0, r3
 8020032:	f000 fa34 	bl	802049e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8020036:	e05b      	b.n	80200f0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	0018      	movs	r0, r3
 802003c:	f000 fa2f 	bl	802049e <USBD_CtlSendStatus>
        break;
 8020040:	e056      	b.n	80200f0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8020042:	4b2d      	ldr	r3, [pc, #180]	@ (80200f8 <USBD_SetConfig+0x144>)
 8020044:	781b      	ldrb	r3, [r3, #0]
 8020046:	2b00      	cmp	r3, #0
 8020048:	d115      	bne.n	8020076 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 802004a:	687a      	ldr	r2, [r7, #4]
 802004c:	23a7      	movs	r3, #167	@ 0xa7
 802004e:	009b      	lsls	r3, r3, #2
 8020050:	2102      	movs	r1, #2
 8020052:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8020054:	4b28      	ldr	r3, [pc, #160]	@ (80200f8 <USBD_SetConfig+0x144>)
 8020056:	781b      	ldrb	r3, [r3, #0]
 8020058:	001a      	movs	r2, r3
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 802005e:	4b26      	ldr	r3, [pc, #152]	@ (80200f8 <USBD_SetConfig+0x144>)
 8020060:	781a      	ldrb	r2, [r3, #0]
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	0011      	movs	r1, r2
 8020066:	0018      	movs	r0, r3
 8020068:	f7ff f8c4 	bl	801f1f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	0018      	movs	r0, r3
 8020070:	f000 fa15 	bl	802049e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8020074:	e03c      	b.n	80200f0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8020076:	4b20      	ldr	r3, [pc, #128]	@ (80200f8 <USBD_SetConfig+0x144>)
 8020078:	781b      	ldrb	r3, [r3, #0]
 802007a:	001a      	movs	r2, r3
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	685b      	ldr	r3, [r3, #4]
 8020080:	429a      	cmp	r2, r3
 8020082:	d022      	beq.n	80200ca <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	685b      	ldr	r3, [r3, #4]
 8020088:	b2da      	uxtb	r2, r3
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	0011      	movs	r1, r2
 802008e:	0018      	movs	r0, r3
 8020090:	f7ff f8b0 	bl	801f1f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8020094:	4b18      	ldr	r3, [pc, #96]	@ (80200f8 <USBD_SetConfig+0x144>)
 8020096:	781b      	ldrb	r3, [r3, #0]
 8020098:	001a      	movs	r2, r3
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802009e:	4b16      	ldr	r3, [pc, #88]	@ (80200f8 <USBD_SetConfig+0x144>)
 80200a0:	781a      	ldrb	r2, [r3, #0]
 80200a2:	687b      	ldr	r3, [r7, #4]
 80200a4:	0011      	movs	r1, r2
 80200a6:	0018      	movs	r0, r3
 80200a8:	f7ff f87d 	bl	801f1a6 <USBD_SetClassConfig>
 80200ac:	0003      	movs	r3, r0
 80200ae:	2b02      	cmp	r3, #2
 80200b0:	d106      	bne.n	80200c0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80200b2:	683a      	ldr	r2, [r7, #0]
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	0011      	movs	r1, r2
 80200b8:	0018      	movs	r0, r3
 80200ba:	f000 f908 	bl	80202ce <USBD_CtlError>
            return;
 80200be:	e017      	b.n	80200f0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	0018      	movs	r0, r3
 80200c4:	f000 f9eb 	bl	802049e <USBD_CtlSendStatus>
        break;
 80200c8:	e012      	b.n	80200f0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	0018      	movs	r0, r3
 80200ce:	f000 f9e6 	bl	802049e <USBD_CtlSendStatus>
        break;
 80200d2:	e00d      	b.n	80200f0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80200d4:	683a      	ldr	r2, [r7, #0]
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	0011      	movs	r1, r2
 80200da:	0018      	movs	r0, r3
 80200dc:	f000 f8f7 	bl	80202ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80200e0:	4b05      	ldr	r3, [pc, #20]	@ (80200f8 <USBD_SetConfig+0x144>)
 80200e2:	781a      	ldrb	r2, [r3, #0]
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	0011      	movs	r1, r2
 80200e8:	0018      	movs	r0, r3
 80200ea:	f7ff f883 	bl	801f1f4 <USBD_ClrClassConfig>
        break;
 80200ee:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80200f0:	46bd      	mov	sp, r7
 80200f2:	b002      	add	sp, #8
 80200f4:	bd80      	pop	{r7, pc}
 80200f6:	46c0      	nop			@ (mov r8, r8)
 80200f8:	20002208 	.word	0x20002208

080200fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80200fc:	b580      	push	{r7, lr}
 80200fe:	b082      	sub	sp, #8
 8020100:	af00      	add	r7, sp, #0
 8020102:	6078      	str	r0, [r7, #4]
 8020104:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8020106:	683b      	ldr	r3, [r7, #0]
 8020108:	88db      	ldrh	r3, [r3, #6]
 802010a:	2b01      	cmp	r3, #1
 802010c:	d006      	beq.n	802011c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 802010e:	683a      	ldr	r2, [r7, #0]
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	0011      	movs	r1, r2
 8020114:	0018      	movs	r0, r3
 8020116:	f000 f8da 	bl	80202ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 802011a:	e026      	b.n	802016a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 802011c:	687a      	ldr	r2, [r7, #4]
 802011e:	23a7      	movs	r3, #167	@ 0xa7
 8020120:	009b      	lsls	r3, r3, #2
 8020122:	5cd3      	ldrb	r3, [r2, r3]
 8020124:	2b02      	cmp	r3, #2
 8020126:	dc02      	bgt.n	802012e <USBD_GetConfig+0x32>
 8020128:	2b00      	cmp	r3, #0
 802012a:	dc03      	bgt.n	8020134 <USBD_GetConfig+0x38>
 802012c:	e016      	b.n	802015c <USBD_GetConfig+0x60>
 802012e:	2b03      	cmp	r3, #3
 8020130:	d00c      	beq.n	802014c <USBD_GetConfig+0x50>
 8020132:	e013      	b.n	802015c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	2200      	movs	r2, #0
 8020138:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	3308      	adds	r3, #8
 802013e:	0019      	movs	r1, r3
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	2201      	movs	r2, #1
 8020144:	0018      	movs	r0, r3
 8020146:	f000 f940 	bl	80203ca <USBD_CtlSendData>
        break;
 802014a:	e00e      	b.n	802016a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	1d19      	adds	r1, r3, #4
 8020150:	687b      	ldr	r3, [r7, #4]
 8020152:	2201      	movs	r2, #1
 8020154:	0018      	movs	r0, r3
 8020156:	f000 f938 	bl	80203ca <USBD_CtlSendData>
        break;
 802015a:	e006      	b.n	802016a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 802015c:	683a      	ldr	r2, [r7, #0]
 802015e:	687b      	ldr	r3, [r7, #4]
 8020160:	0011      	movs	r1, r2
 8020162:	0018      	movs	r0, r3
 8020164:	f000 f8b3 	bl	80202ce <USBD_CtlError>
        break;
 8020168:	46c0      	nop			@ (mov r8, r8)
}
 802016a:	46c0      	nop			@ (mov r8, r8)
 802016c:	46bd      	mov	sp, r7
 802016e:	b002      	add	sp, #8
 8020170:	bd80      	pop	{r7, pc}

08020172 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8020172:	b580      	push	{r7, lr}
 8020174:	b082      	sub	sp, #8
 8020176:	af00      	add	r7, sp, #0
 8020178:	6078      	str	r0, [r7, #4]
 802017a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802017c:	687a      	ldr	r2, [r7, #4]
 802017e:	23a7      	movs	r3, #167	@ 0xa7
 8020180:	009b      	lsls	r3, r3, #2
 8020182:	5cd3      	ldrb	r3, [r2, r3]
 8020184:	3b01      	subs	r3, #1
 8020186:	2b02      	cmp	r3, #2
 8020188:	d822      	bhi.n	80201d0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 802018a:	683b      	ldr	r3, [r7, #0]
 802018c:	88db      	ldrh	r3, [r3, #6]
 802018e:	2b02      	cmp	r3, #2
 8020190:	d006      	beq.n	80201a0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8020192:	683a      	ldr	r2, [r7, #0]
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	0011      	movs	r1, r2
 8020198:	0018      	movs	r0, r3
 802019a:	f000 f898 	bl	80202ce <USBD_CtlError>
        break;
 802019e:	e01e      	b.n	80201de <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	2201      	movs	r2, #1
 80201a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80201a6:	687a      	ldr	r2, [r7, #4]
 80201a8:	23a9      	movs	r3, #169	@ 0xa9
 80201aa:	009b      	lsls	r3, r3, #2
 80201ac:	58d3      	ldr	r3, [r2, r3]
 80201ae:	2b00      	cmp	r3, #0
 80201b0:	d005      	beq.n	80201be <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	68db      	ldr	r3, [r3, #12]
 80201b6:	2202      	movs	r2, #2
 80201b8:	431a      	orrs	r2, r3
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	330c      	adds	r3, #12
 80201c2:	0019      	movs	r1, r3
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	2202      	movs	r2, #2
 80201c8:	0018      	movs	r0, r3
 80201ca:	f000 f8fe 	bl	80203ca <USBD_CtlSendData>
      break;
 80201ce:	e006      	b.n	80201de <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80201d0:	683a      	ldr	r2, [r7, #0]
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	0011      	movs	r1, r2
 80201d6:	0018      	movs	r0, r3
 80201d8:	f000 f879 	bl	80202ce <USBD_CtlError>
      break;
 80201dc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80201de:	46c0      	nop			@ (mov r8, r8)
 80201e0:	46bd      	mov	sp, r7
 80201e2:	b002      	add	sp, #8
 80201e4:	bd80      	pop	{r7, pc}

080201e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80201e6:	b580      	push	{r7, lr}
 80201e8:	b082      	sub	sp, #8
 80201ea:	af00      	add	r7, sp, #0
 80201ec:	6078      	str	r0, [r7, #4]
 80201ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80201f0:	683b      	ldr	r3, [r7, #0]
 80201f2:	885b      	ldrh	r3, [r3, #2]
 80201f4:	2b01      	cmp	r3, #1
 80201f6:	d108      	bne.n	802020a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80201f8:	687a      	ldr	r2, [r7, #4]
 80201fa:	23a9      	movs	r3, #169	@ 0xa9
 80201fc:	009b      	lsls	r3, r3, #2
 80201fe:	2101      	movs	r1, #1
 8020200:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	0018      	movs	r0, r3
 8020206:	f000 f94a 	bl	802049e <USBD_CtlSendStatus>
  }
}
 802020a:	46c0      	nop			@ (mov r8, r8)
 802020c:	46bd      	mov	sp, r7
 802020e:	b002      	add	sp, #8
 8020210:	bd80      	pop	{r7, pc}

08020212 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8020212:	b580      	push	{r7, lr}
 8020214:	b082      	sub	sp, #8
 8020216:	af00      	add	r7, sp, #0
 8020218:	6078      	str	r0, [r7, #4]
 802021a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 802021c:	687a      	ldr	r2, [r7, #4]
 802021e:	23a7      	movs	r3, #167	@ 0xa7
 8020220:	009b      	lsls	r3, r3, #2
 8020222:	5cd3      	ldrb	r3, [r2, r3]
 8020224:	3b01      	subs	r3, #1
 8020226:	2b02      	cmp	r3, #2
 8020228:	d80d      	bhi.n	8020246 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 802022a:	683b      	ldr	r3, [r7, #0]
 802022c:	885b      	ldrh	r3, [r3, #2]
 802022e:	2b01      	cmp	r3, #1
 8020230:	d110      	bne.n	8020254 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8020232:	687a      	ldr	r2, [r7, #4]
 8020234:	23a9      	movs	r3, #169	@ 0xa9
 8020236:	009b      	lsls	r3, r3, #2
 8020238:	2100      	movs	r1, #0
 802023a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	0018      	movs	r0, r3
 8020240:	f000 f92d 	bl	802049e <USBD_CtlSendStatus>
      }
      break;
 8020244:	e006      	b.n	8020254 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8020246:	683a      	ldr	r2, [r7, #0]
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	0011      	movs	r1, r2
 802024c:	0018      	movs	r0, r3
 802024e:	f000 f83e 	bl	80202ce <USBD_CtlError>
      break;
 8020252:	e000      	b.n	8020256 <USBD_ClrFeature+0x44>
      break;
 8020254:	46c0      	nop			@ (mov r8, r8)
  }
}
 8020256:	46c0      	nop			@ (mov r8, r8)
 8020258:	46bd      	mov	sp, r7
 802025a:	b002      	add	sp, #8
 802025c:	bd80      	pop	{r7, pc}

0802025e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802025e:	b580      	push	{r7, lr}
 8020260:	b082      	sub	sp, #8
 8020262:	af00      	add	r7, sp, #0
 8020264:	6078      	str	r0, [r7, #4]
 8020266:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8020268:	683b      	ldr	r3, [r7, #0]
 802026a:	781a      	ldrb	r2, [r3, #0]
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8020270:	683b      	ldr	r3, [r7, #0]
 8020272:	785a      	ldrb	r2, [r3, #1]
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8020278:	683b      	ldr	r3, [r7, #0]
 802027a:	3302      	adds	r3, #2
 802027c:	781b      	ldrb	r3, [r3, #0]
 802027e:	001a      	movs	r2, r3
 8020280:	683b      	ldr	r3, [r7, #0]
 8020282:	3303      	adds	r3, #3
 8020284:	781b      	ldrb	r3, [r3, #0]
 8020286:	021b      	lsls	r3, r3, #8
 8020288:	b29b      	uxth	r3, r3
 802028a:	18d3      	adds	r3, r2, r3
 802028c:	b29a      	uxth	r2, r3
 802028e:	687b      	ldr	r3, [r7, #4]
 8020290:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8020292:	683b      	ldr	r3, [r7, #0]
 8020294:	3304      	adds	r3, #4
 8020296:	781b      	ldrb	r3, [r3, #0]
 8020298:	001a      	movs	r2, r3
 802029a:	683b      	ldr	r3, [r7, #0]
 802029c:	3305      	adds	r3, #5
 802029e:	781b      	ldrb	r3, [r3, #0]
 80202a0:	021b      	lsls	r3, r3, #8
 80202a2:	b29b      	uxth	r3, r3
 80202a4:	18d3      	adds	r3, r2, r3
 80202a6:	b29a      	uxth	r2, r3
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80202ac:	683b      	ldr	r3, [r7, #0]
 80202ae:	3306      	adds	r3, #6
 80202b0:	781b      	ldrb	r3, [r3, #0]
 80202b2:	001a      	movs	r2, r3
 80202b4:	683b      	ldr	r3, [r7, #0]
 80202b6:	3307      	adds	r3, #7
 80202b8:	781b      	ldrb	r3, [r3, #0]
 80202ba:	021b      	lsls	r3, r3, #8
 80202bc:	b29b      	uxth	r3, r3
 80202be:	18d3      	adds	r3, r2, r3
 80202c0:	b29a      	uxth	r2, r3
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	80da      	strh	r2, [r3, #6]

}
 80202c6:	46c0      	nop			@ (mov r8, r8)
 80202c8:	46bd      	mov	sp, r7
 80202ca:	b002      	add	sp, #8
 80202cc:	bd80      	pop	{r7, pc}

080202ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80202ce:	b580      	push	{r7, lr}
 80202d0:	b082      	sub	sp, #8
 80202d2:	af00      	add	r7, sp, #0
 80202d4:	6078      	str	r0, [r7, #4]
 80202d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	2180      	movs	r1, #128	@ 0x80
 80202dc:	0018      	movs	r0, r3
 80202de:	f000 fd1e 	bl	8020d1e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	2100      	movs	r1, #0
 80202e6:	0018      	movs	r0, r3
 80202e8:	f000 fd19 	bl	8020d1e <USBD_LL_StallEP>
}
 80202ec:	46c0      	nop			@ (mov r8, r8)
 80202ee:	46bd      	mov	sp, r7
 80202f0:	b002      	add	sp, #8
 80202f2:	bd80      	pop	{r7, pc}

080202f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80202f4:	b590      	push	{r4, r7, lr}
 80202f6:	b087      	sub	sp, #28
 80202f8:	af00      	add	r7, sp, #0
 80202fa:	60f8      	str	r0, [r7, #12]
 80202fc:	60b9      	str	r1, [r7, #8]
 80202fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8020300:	2417      	movs	r4, #23
 8020302:	193b      	adds	r3, r7, r4
 8020304:	2200      	movs	r2, #0
 8020306:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8020308:	68fb      	ldr	r3, [r7, #12]
 802030a:	2b00      	cmp	r3, #0
 802030c:	d03c      	beq.n	8020388 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 802030e:	68fb      	ldr	r3, [r7, #12]
 8020310:	0018      	movs	r0, r3
 8020312:	f000 f83d 	bl	8020390 <USBD_GetLen>
 8020316:	0003      	movs	r3, r0
 8020318:	3301      	adds	r3, #1
 802031a:	b29b      	uxth	r3, r3
 802031c:	18db      	adds	r3, r3, r3
 802031e:	b29a      	uxth	r2, r3
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8020324:	193b      	adds	r3, r7, r4
 8020326:	781b      	ldrb	r3, [r3, #0]
 8020328:	193a      	adds	r2, r7, r4
 802032a:	1c59      	adds	r1, r3, #1
 802032c:	7011      	strb	r1, [r2, #0]
 802032e:	001a      	movs	r2, r3
 8020330:	68bb      	ldr	r3, [r7, #8]
 8020332:	189b      	adds	r3, r3, r2
 8020334:	687a      	ldr	r2, [r7, #4]
 8020336:	7812      	ldrb	r2, [r2, #0]
 8020338:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 802033a:	193b      	adds	r3, r7, r4
 802033c:	781b      	ldrb	r3, [r3, #0]
 802033e:	193a      	adds	r2, r7, r4
 8020340:	1c59      	adds	r1, r3, #1
 8020342:	7011      	strb	r1, [r2, #0]
 8020344:	001a      	movs	r2, r3
 8020346:	68bb      	ldr	r3, [r7, #8]
 8020348:	189b      	adds	r3, r3, r2
 802034a:	2203      	movs	r2, #3
 802034c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 802034e:	e017      	b.n	8020380 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	1c5a      	adds	r2, r3, #1
 8020354:	60fa      	str	r2, [r7, #12]
 8020356:	2417      	movs	r4, #23
 8020358:	193a      	adds	r2, r7, r4
 802035a:	7812      	ldrb	r2, [r2, #0]
 802035c:	1939      	adds	r1, r7, r4
 802035e:	1c50      	adds	r0, r2, #1
 8020360:	7008      	strb	r0, [r1, #0]
 8020362:	0011      	movs	r1, r2
 8020364:	68ba      	ldr	r2, [r7, #8]
 8020366:	1852      	adds	r2, r2, r1
 8020368:	781b      	ldrb	r3, [r3, #0]
 802036a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 802036c:	193b      	adds	r3, r7, r4
 802036e:	781b      	ldrb	r3, [r3, #0]
 8020370:	193a      	adds	r2, r7, r4
 8020372:	1c59      	adds	r1, r3, #1
 8020374:	7011      	strb	r1, [r2, #0]
 8020376:	001a      	movs	r2, r3
 8020378:	68bb      	ldr	r3, [r7, #8]
 802037a:	189b      	adds	r3, r3, r2
 802037c:	2200      	movs	r2, #0
 802037e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8020380:	68fb      	ldr	r3, [r7, #12]
 8020382:	781b      	ldrb	r3, [r3, #0]
 8020384:	2b00      	cmp	r3, #0
 8020386:	d1e3      	bne.n	8020350 <USBD_GetString+0x5c>
    }
  }
}
 8020388:	46c0      	nop			@ (mov r8, r8)
 802038a:	46bd      	mov	sp, r7
 802038c:	b007      	add	sp, #28
 802038e:	bd90      	pop	{r4, r7, pc}

08020390 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8020390:	b580      	push	{r7, lr}
 8020392:	b084      	sub	sp, #16
 8020394:	af00      	add	r7, sp, #0
 8020396:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8020398:	230f      	movs	r3, #15
 802039a:	18fb      	adds	r3, r7, r3
 802039c:	2200      	movs	r2, #0
 802039e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80203a0:	e008      	b.n	80203b4 <USBD_GetLen+0x24>
  {
    len++;
 80203a2:	210f      	movs	r1, #15
 80203a4:	187b      	adds	r3, r7, r1
 80203a6:	781a      	ldrb	r2, [r3, #0]
 80203a8:	187b      	adds	r3, r7, r1
 80203aa:	3201      	adds	r2, #1
 80203ac:	701a      	strb	r2, [r3, #0]
    buf++;
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	3301      	adds	r3, #1
 80203b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	781b      	ldrb	r3, [r3, #0]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d1f2      	bne.n	80203a2 <USBD_GetLen+0x12>
  }

  return len;
 80203bc:	230f      	movs	r3, #15
 80203be:	18fb      	adds	r3, r7, r3
 80203c0:	781b      	ldrb	r3, [r3, #0]
}
 80203c2:	0018      	movs	r0, r3
 80203c4:	46bd      	mov	sp, r7
 80203c6:	b004      	add	sp, #16
 80203c8:	bd80      	pop	{r7, pc}

080203ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80203ca:	b580      	push	{r7, lr}
 80203cc:	b084      	sub	sp, #16
 80203ce:	af00      	add	r7, sp, #0
 80203d0:	60f8      	str	r0, [r7, #12]
 80203d2:	60b9      	str	r1, [r7, #8]
 80203d4:	1dbb      	adds	r3, r7, #6
 80203d6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80203d8:	68fa      	ldr	r2, [r7, #12]
 80203da:	23a5      	movs	r3, #165	@ 0xa5
 80203dc:	009b      	lsls	r3, r3, #2
 80203de:	2102      	movs	r1, #2
 80203e0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80203e2:	1dbb      	adds	r3, r7, #6
 80203e4:	881a      	ldrh	r2, [r3, #0]
 80203e6:	68fb      	ldr	r3, [r7, #12]
 80203e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80203ea:	1dbb      	adds	r3, r7, #6
 80203ec:	881a      	ldrh	r2, [r3, #0]
 80203ee:	68fb      	ldr	r3, [r7, #12]
 80203f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80203f2:	1dbb      	adds	r3, r7, #6
 80203f4:	881b      	ldrh	r3, [r3, #0]
 80203f6:	68ba      	ldr	r2, [r7, #8]
 80203f8:	68f8      	ldr	r0, [r7, #12]
 80203fa:	2100      	movs	r1, #0
 80203fc:	f000 fd41 	bl	8020e82 <USBD_LL_Transmit>

  return USBD_OK;
 8020400:	2300      	movs	r3, #0
}
 8020402:	0018      	movs	r0, r3
 8020404:	46bd      	mov	sp, r7
 8020406:	b004      	add	sp, #16
 8020408:	bd80      	pop	{r7, pc}

0802040a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 802040a:	b580      	push	{r7, lr}
 802040c:	b084      	sub	sp, #16
 802040e:	af00      	add	r7, sp, #0
 8020410:	60f8      	str	r0, [r7, #12]
 8020412:	60b9      	str	r1, [r7, #8]
 8020414:	1dbb      	adds	r3, r7, #6
 8020416:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8020418:	1dbb      	adds	r3, r7, #6
 802041a:	881b      	ldrh	r3, [r3, #0]
 802041c:	68ba      	ldr	r2, [r7, #8]
 802041e:	68f8      	ldr	r0, [r7, #12]
 8020420:	2100      	movs	r1, #0
 8020422:	f000 fd2e 	bl	8020e82 <USBD_LL_Transmit>

  return USBD_OK;
 8020426:	2300      	movs	r3, #0
}
 8020428:	0018      	movs	r0, r3
 802042a:	46bd      	mov	sp, r7
 802042c:	b004      	add	sp, #16
 802042e:	bd80      	pop	{r7, pc}

08020430 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8020430:	b580      	push	{r7, lr}
 8020432:	b084      	sub	sp, #16
 8020434:	af00      	add	r7, sp, #0
 8020436:	60f8      	str	r0, [r7, #12]
 8020438:	60b9      	str	r1, [r7, #8]
 802043a:	1dbb      	adds	r3, r7, #6
 802043c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802043e:	68fa      	ldr	r2, [r7, #12]
 8020440:	23a5      	movs	r3, #165	@ 0xa5
 8020442:	009b      	lsls	r3, r3, #2
 8020444:	2103      	movs	r1, #3
 8020446:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8020448:	1dbb      	adds	r3, r7, #6
 802044a:	8819      	ldrh	r1, [r3, #0]
 802044c:	68fa      	ldr	r2, [r7, #12]
 802044e:	23ae      	movs	r3, #174	@ 0xae
 8020450:	005b      	lsls	r3, r3, #1
 8020452:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8020454:	1dbb      	adds	r3, r7, #6
 8020456:	8819      	ldrh	r1, [r3, #0]
 8020458:	68fa      	ldr	r2, [r7, #12]
 802045a:	23b0      	movs	r3, #176	@ 0xb0
 802045c:	005b      	lsls	r3, r3, #1
 802045e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8020460:	1dbb      	adds	r3, r7, #6
 8020462:	881b      	ldrh	r3, [r3, #0]
 8020464:	68ba      	ldr	r2, [r7, #8]
 8020466:	68f8      	ldr	r0, [r7, #12]
 8020468:	2100      	movs	r1, #0
 802046a:	f000 fd41 	bl	8020ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802046e:	2300      	movs	r3, #0
}
 8020470:	0018      	movs	r0, r3
 8020472:	46bd      	mov	sp, r7
 8020474:	b004      	add	sp, #16
 8020476:	bd80      	pop	{r7, pc}

08020478 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8020478:	b580      	push	{r7, lr}
 802047a:	b084      	sub	sp, #16
 802047c:	af00      	add	r7, sp, #0
 802047e:	60f8      	str	r0, [r7, #12]
 8020480:	60b9      	str	r1, [r7, #8]
 8020482:	1dbb      	adds	r3, r7, #6
 8020484:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8020486:	1dbb      	adds	r3, r7, #6
 8020488:	881b      	ldrh	r3, [r3, #0]
 802048a:	68ba      	ldr	r2, [r7, #8]
 802048c:	68f8      	ldr	r0, [r7, #12]
 802048e:	2100      	movs	r1, #0
 8020490:	f000 fd2e 	bl	8020ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8020494:	2300      	movs	r3, #0
}
 8020496:	0018      	movs	r0, r3
 8020498:	46bd      	mov	sp, r7
 802049a:	b004      	add	sp, #16
 802049c:	bd80      	pop	{r7, pc}

0802049e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802049e:	b580      	push	{r7, lr}
 80204a0:	b082      	sub	sp, #8
 80204a2:	af00      	add	r7, sp, #0
 80204a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80204a6:	687a      	ldr	r2, [r7, #4]
 80204a8:	23a5      	movs	r3, #165	@ 0xa5
 80204aa:	009b      	lsls	r3, r3, #2
 80204ac:	2104      	movs	r1, #4
 80204ae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80204b0:	6878      	ldr	r0, [r7, #4]
 80204b2:	2300      	movs	r3, #0
 80204b4:	2200      	movs	r2, #0
 80204b6:	2100      	movs	r1, #0
 80204b8:	f000 fce3 	bl	8020e82 <USBD_LL_Transmit>

  return USBD_OK;
 80204bc:	2300      	movs	r3, #0
}
 80204be:	0018      	movs	r0, r3
 80204c0:	46bd      	mov	sp, r7
 80204c2:	b002      	add	sp, #8
 80204c4:	bd80      	pop	{r7, pc}

080204c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80204c6:	b580      	push	{r7, lr}
 80204c8:	b082      	sub	sp, #8
 80204ca:	af00      	add	r7, sp, #0
 80204cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80204ce:	687a      	ldr	r2, [r7, #4]
 80204d0:	23a5      	movs	r3, #165	@ 0xa5
 80204d2:	009b      	lsls	r3, r3, #2
 80204d4:	2105      	movs	r1, #5
 80204d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80204d8:	6878      	ldr	r0, [r7, #4]
 80204da:	2300      	movs	r3, #0
 80204dc:	2200      	movs	r2, #0
 80204de:	2100      	movs	r1, #0
 80204e0:	f000 fd06 	bl	8020ef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80204e4:	2300      	movs	r3, #0
}
 80204e6:	0018      	movs	r0, r3
 80204e8:	46bd      	mov	sp, r7
 80204ea:	b002      	add	sp, #8
 80204ec:	bd80      	pop	{r7, pc}
	...

080204f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80204f0:	b580      	push	{r7, lr}
 80204f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80204f4:	4914      	ldr	r1, [pc, #80]	@ (8020548 <MX_USB_DEVICE_Init+0x58>)
 80204f6:	4b15      	ldr	r3, [pc, #84]	@ (802054c <MX_USB_DEVICE_Init+0x5c>)
 80204f8:	2200      	movs	r2, #0
 80204fa:	0018      	movs	r0, r3
 80204fc:	f7fe fdec 	bl	801f0d8 <USBD_Init>
 8020500:	1e03      	subs	r3, r0, #0
 8020502:	d001      	beq.n	8020508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8020504:	f7ea fed4 	bl	800b2b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020508:	4a11      	ldr	r2, [pc, #68]	@ (8020550 <MX_USB_DEVICE_Init+0x60>)
 802050a:	4b10      	ldr	r3, [pc, #64]	@ (802054c <MX_USB_DEVICE_Init+0x5c>)
 802050c:	0011      	movs	r1, r2
 802050e:	0018      	movs	r0, r3
 8020510:	f7fe fe13 	bl	801f13a <USBD_RegisterClass>
 8020514:	1e03      	subs	r3, r0, #0
 8020516:	d001      	beq.n	802051c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8020518:	f7ea feca 	bl	800b2b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802051c:	4a0d      	ldr	r2, [pc, #52]	@ (8020554 <MX_USB_DEVICE_Init+0x64>)
 802051e:	4b0b      	ldr	r3, [pc, #44]	@ (802054c <MX_USB_DEVICE_Init+0x5c>)
 8020520:	0011      	movs	r1, r2
 8020522:	0018      	movs	r0, r3
 8020524:	f7fe fd28 	bl	801ef78 <USBD_CDC_RegisterInterface>
 8020528:	1e03      	subs	r3, r0, #0
 802052a:	d001      	beq.n	8020530 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 802052c:	f7ea fec0 	bl	800b2b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8020530:	4b06      	ldr	r3, [pc, #24]	@ (802054c <MX_USB_DEVICE_Init+0x5c>)
 8020532:	0018      	movs	r0, r3
 8020534:	f7fe fe21 	bl	801f17a <USBD_Start>
 8020538:	1e03      	subs	r3, r0, #0
 802053a:	d001      	beq.n	8020540 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 802053c:	f7ea feb8 	bl	800b2b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020540:	46c0      	nop			@ (mov r8, r8)
 8020542:	46bd      	mov	sp, r7
 8020544:	bd80      	pop	{r7, pc}
 8020546:	46c0      	nop			@ (mov r8, r8)
 8020548:	20000218 	.word	0x20000218
 802054c:	2000220c 	.word	0x2000220c
 8020550:	20000104 	.word	0x20000104
 8020554:	20000208 	.word	0x20000208

08020558 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8020558:	b580      	push	{r7, lr}
 802055a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802055c:	4907      	ldr	r1, [pc, #28]	@ (802057c <CDC_Init_FS+0x24>)
 802055e:	4b08      	ldr	r3, [pc, #32]	@ (8020580 <CDC_Init_FS+0x28>)
 8020560:	2200      	movs	r2, #0
 8020562:	0018      	movs	r0, r3
 8020564:	f7fe fd23 	bl	801efae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8020568:	4a06      	ldr	r2, [pc, #24]	@ (8020584 <CDC_Init_FS+0x2c>)
 802056a:	4b05      	ldr	r3, [pc, #20]	@ (8020580 <CDC_Init_FS+0x28>)
 802056c:	0011      	movs	r1, r2
 802056e:	0018      	movs	r0, r3
 8020570:	f7fe fd39 	bl	801efe6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8020574:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8020576:	0018      	movs	r0, r3
 8020578:	46bd      	mov	sp, r7
 802057a:	bd80      	pop	{r7, pc}
 802057c:	20002990 	.word	0x20002990
 8020580:	2000220c 	.word	0x2000220c
 8020584:	20002590 	.word	0x20002590

08020588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8020588:	b580      	push	{r7, lr}
 802058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 802058c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802058e:	0018      	movs	r0, r3
 8020590:	46bd      	mov	sp, r7
 8020592:	bd80      	pop	{r7, pc}

08020594 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	b082      	sub	sp, #8
 8020598:	af00      	add	r7, sp, #0
 802059a:	6039      	str	r1, [r7, #0]
 802059c:	0011      	movs	r1, r2
 802059e:	1dfb      	adds	r3, r7, #7
 80205a0:	1c02      	adds	r2, r0, #0
 80205a2:	701a      	strb	r2, [r3, #0]
 80205a4:	1d3b      	adds	r3, r7, #4
 80205a6:	1c0a      	adds	r2, r1, #0
 80205a8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80205aa:	1dfb      	adds	r3, r7, #7
 80205ac:	781b      	ldrb	r3, [r3, #0]
 80205ae:	2b23      	cmp	r3, #35	@ 0x23
 80205b0:	d804      	bhi.n	80205bc <CDC_Control_FS+0x28>
 80205b2:	009a      	lsls	r2, r3, #2
 80205b4:	4b04      	ldr	r3, [pc, #16]	@ (80205c8 <CDC_Control_FS+0x34>)
 80205b6:	18d3      	adds	r3, r2, r3
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80205bc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80205be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80205c0:	0018      	movs	r0, r3
 80205c2:	46bd      	mov	sp, r7
 80205c4:	b002      	add	sp, #8
 80205c6:	bd80      	pop	{r7, pc}
 80205c8:	0802b334 	.word	0x0802b334

080205cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80205cc:	b580      	push	{r7, lr}
 80205ce:	b082      	sub	sp, #8
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	6078      	str	r0, [r7, #4]
 80205d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80205d6:	4b12      	ldr	r3, [pc, #72]	@ (8020620 <CDC_Receive_FS+0x54>)
 80205d8:	781b      	ldrb	r3, [r3, #0]
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d013      	beq.n	8020606 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80205de:	683b      	ldr	r3, [r7, #0]
 80205e0:	681b      	ldr	r3, [r3, #0]
 80205e2:	b29a      	uxth	r2, r3
 80205e4:	2301      	movs	r3, #1
 80205e6:	425b      	negs	r3, r3
 80205e8:	6879      	ldr	r1, [r7, #4]
 80205ea:	480e      	ldr	r0, [pc, #56]	@ (8020624 <CDC_Receive_FS+0x58>)
 80205ec:	f7fa fa46 	bl	801aa7c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80205f0:	687a      	ldr	r2, [r7, #4]
 80205f2:	4b0d      	ldr	r3, [pc, #52]	@ (8020628 <CDC_Receive_FS+0x5c>)
 80205f4:	0011      	movs	r1, r2
 80205f6:	0018      	movs	r0, r3
 80205f8:	f7fe fcf5 	bl	801efe6 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80205fc:	4b0a      	ldr	r3, [pc, #40]	@ (8020628 <CDC_Receive_FS+0x5c>)
 80205fe:	0018      	movs	r0, r3
 8020600:	f7fe fd3c 	bl	801f07c <USBD_CDC_ReceivePacket>
 8020604:	e006      	b.n	8020614 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8020606:	683b      	ldr	r3, [r7, #0]
 8020608:	681a      	ldr	r2, [r3, #0]
 802060a:	4b08      	ldr	r3, [pc, #32]	@ (802062c <CDC_Receive_FS+0x60>)
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	18d2      	adds	r2, r2, r3
 8020610:	4b06      	ldr	r3, [pc, #24]	@ (802062c <CDC_Receive_FS+0x60>)
 8020612:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8020614:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8020616:	0018      	movs	r0, r3
 8020618:	46bd      	mov	sp, r7
 802061a:	b002      	add	sp, #8
 802061c:	bd80      	pop	{r7, pc}
 802061e:	46c0      	nop			@ (mov r8, r8)
 8020620:	200024d0 	.word	0x200024d0
 8020624:	200024d4 	.word	0x200024d4
 8020628:	2000220c 	.word	0x2000220c
 802062c:	2000258c 	.word	0x2000258c

08020630 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8020630:	b5b0      	push	{r4, r5, r7, lr}
 8020632:	b084      	sub	sp, #16
 8020634:	af00      	add	r7, sp, #0
 8020636:	6078      	str	r0, [r7, #4]
 8020638:	000a      	movs	r2, r1
 802063a:	1cbb      	adds	r3, r7, #2
 802063c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802063e:	230f      	movs	r3, #15
 8020640:	18fb      	adds	r3, r7, r3
 8020642:	2200      	movs	r2, #0
 8020644:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8020646:	4a11      	ldr	r2, [pc, #68]	@ (802068c <CDC_Transmit_FS+0x5c>)
 8020648:	23ae      	movs	r3, #174	@ 0xae
 802064a:	009b      	lsls	r3, r3, #2
 802064c:	58d3      	ldr	r3, [r2, r3]
 802064e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8020650:	68ba      	ldr	r2, [r7, #8]
 8020652:	2385      	movs	r3, #133	@ 0x85
 8020654:	009b      	lsls	r3, r3, #2
 8020656:	58d3      	ldr	r3, [r2, r3]
 8020658:	2b00      	cmp	r3, #0
 802065a:	d001      	beq.n	8020660 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 802065c:	2301      	movs	r3, #1
 802065e:	e010      	b.n	8020682 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8020660:	1cbb      	adds	r3, r7, #2
 8020662:	881a      	ldrh	r2, [r3, #0]
 8020664:	6879      	ldr	r1, [r7, #4]
 8020666:	4b09      	ldr	r3, [pc, #36]	@ (802068c <CDC_Transmit_FS+0x5c>)
 8020668:	0018      	movs	r0, r3
 802066a:	f7fe fca0 	bl	801efae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802066e:	250f      	movs	r5, #15
 8020670:	197c      	adds	r4, r7, r5
 8020672:	4b06      	ldr	r3, [pc, #24]	@ (802068c <CDC_Transmit_FS+0x5c>)
 8020674:	0018      	movs	r0, r3
 8020676:	f7fe fcca 	bl	801f00e <USBD_CDC_TransmitPacket>
 802067a:	0003      	movs	r3, r0
 802067c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802067e:	197b      	adds	r3, r7, r5
 8020680:	781b      	ldrb	r3, [r3, #0]
}
 8020682:	0018      	movs	r0, r3
 8020684:	46bd      	mov	sp, r7
 8020686:	b004      	add	sp, #16
 8020688:	bdb0      	pop	{r4, r5, r7, pc}
 802068a:	46c0      	nop			@ (mov r8, r8)
 802068c:	2000220c 	.word	0x2000220c

08020690 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8020690:	b580      	push	{r7, lr}
 8020692:	af00      	add	r7, sp, #0
  ESPProg = true;
 8020694:	4b02      	ldr	r3, [pc, #8]	@ (80206a0 <EnableESPProg+0x10>)
 8020696:	2201      	movs	r2, #1
 8020698:	701a      	strb	r2, [r3, #0]
}
 802069a:	46c0      	nop			@ (mov r8, r8)
 802069c:	46bd      	mov	sp, r7
 802069e:	bd80      	pop	{r7, pc}
 80206a0:	200024d0 	.word	0x200024d0

080206a4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80206a4:	b580      	push	{r7, lr}
 80206a6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80206a8:	4b01      	ldr	r3, [pc, #4]	@ (80206b0 <GetUsbRxPointer+0xc>)
}
 80206aa:	0018      	movs	r0, r3
 80206ac:	46bd      	mov	sp, r7
 80206ae:	bd80      	pop	{r7, pc}
 80206b0:	20002590 	.word	0x20002590

080206b4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80206b4:	b580      	push	{r7, lr}
 80206b6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80206b8:	4b07      	ldr	r3, [pc, #28]	@ (80206d8 <ResetUsbRxDataSize+0x24>)
 80206ba:	2200      	movs	r2, #0
 80206bc:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80206be:	4a07      	ldr	r2, [pc, #28]	@ (80206dc <ResetUsbRxDataSize+0x28>)
 80206c0:	4b07      	ldr	r3, [pc, #28]	@ (80206e0 <ResetUsbRxDataSize+0x2c>)
 80206c2:	0011      	movs	r1, r2
 80206c4:	0018      	movs	r0, r3
 80206c6:	f7fe fc8e 	bl	801efe6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80206ca:	4b05      	ldr	r3, [pc, #20]	@ (80206e0 <ResetUsbRxDataSize+0x2c>)
 80206cc:	0018      	movs	r0, r3
 80206ce:	f7fe fcd5 	bl	801f07c <USBD_CDC_ReceivePacket>
}
 80206d2:	46c0      	nop			@ (mov r8, r8)
 80206d4:	46bd      	mov	sp, r7
 80206d6:	bd80      	pop	{r7, pc}
 80206d8:	2000258c 	.word	0x2000258c
 80206dc:	20002590 	.word	0x20002590
 80206e0:	2000220c 	.word	0x2000220c

080206e4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80206e8:	4b02      	ldr	r3, [pc, #8]	@ (80206f4 <GetUsbRxDataSize+0x10>)
 80206ea:	681b      	ldr	r3, [r3, #0]
}
 80206ec:	0018      	movs	r0, r3
 80206ee:	46bd      	mov	sp, r7
 80206f0:	bd80      	pop	{r7, pc}
 80206f2:	46c0      	nop			@ (mov r8, r8)
 80206f4:	2000258c 	.word	0x2000258c

080206f8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80206f8:	b580      	push	{r7, lr}
 80206fa:	b082      	sub	sp, #8
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8020700:	687a      	ldr	r2, [r7, #4]
 8020702:	4b07      	ldr	r3, [pc, #28]	@ (8020720 <GetUsbRxNextChunk+0x28>)
 8020704:	18d2      	adds	r2, r2, r3
 8020706:	4b07      	ldr	r3, [pc, #28]	@ (8020724 <GetUsbRxNextChunk+0x2c>)
 8020708:	0011      	movs	r1, r2
 802070a:	0018      	movs	r0, r3
 802070c:	f7fe fc6b 	bl	801efe6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020710:	4b04      	ldr	r3, [pc, #16]	@ (8020724 <GetUsbRxNextChunk+0x2c>)
 8020712:	0018      	movs	r0, r3
 8020714:	f7fe fcb2 	bl	801f07c <USBD_CDC_ReceivePacket>
}
 8020718:	46c0      	nop			@ (mov r8, r8)
 802071a:	46bd      	mov	sp, r7
 802071c:	b002      	add	sp, #8
 802071e:	bd80      	pop	{r7, pc}
 8020720:	20002590 	.word	0x20002590
 8020724:	2000220c 	.word	0x2000220c

08020728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	b082      	sub	sp, #8
 802072c:	af00      	add	r7, sp, #0
 802072e:	0002      	movs	r2, r0
 8020730:	6039      	str	r1, [r7, #0]
 8020732:	1dfb      	adds	r3, r7, #7
 8020734:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020736:	683b      	ldr	r3, [r7, #0]
 8020738:	2212      	movs	r2, #18
 802073a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802073c:	4b02      	ldr	r3, [pc, #8]	@ (8020748 <USBD_FS_DeviceDescriptor+0x20>)
}
 802073e:	0018      	movs	r0, r3
 8020740:	46bd      	mov	sp, r7
 8020742:	b002      	add	sp, #8
 8020744:	bd80      	pop	{r7, pc}
 8020746:	46c0      	nop			@ (mov r8, r8)
 8020748:	20000234 	.word	0x20000234

0802074c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802074c:	b580      	push	{r7, lr}
 802074e:	b082      	sub	sp, #8
 8020750:	af00      	add	r7, sp, #0
 8020752:	0002      	movs	r2, r0
 8020754:	6039      	str	r1, [r7, #0]
 8020756:	1dfb      	adds	r3, r7, #7
 8020758:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802075a:	683b      	ldr	r3, [r7, #0]
 802075c:	2204      	movs	r2, #4
 802075e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8020760:	4b02      	ldr	r3, [pc, #8]	@ (802076c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8020762:	0018      	movs	r0, r3
 8020764:	46bd      	mov	sp, r7
 8020766:	b002      	add	sp, #8
 8020768:	bd80      	pop	{r7, pc}
 802076a:	46c0      	nop			@ (mov r8, r8)
 802076c:	20000248 	.word	0x20000248

08020770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020770:	b580      	push	{r7, lr}
 8020772:	b082      	sub	sp, #8
 8020774:	af00      	add	r7, sp, #0
 8020776:	0002      	movs	r2, r0
 8020778:	6039      	str	r1, [r7, #0]
 802077a:	1dfb      	adds	r3, r7, #7
 802077c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802077e:	1dfb      	adds	r3, r7, #7
 8020780:	781b      	ldrb	r3, [r3, #0]
 8020782:	2b00      	cmp	r3, #0
 8020784:	d106      	bne.n	8020794 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020786:	683a      	ldr	r2, [r7, #0]
 8020788:	4908      	ldr	r1, [pc, #32]	@ (80207ac <USBD_FS_ProductStrDescriptor+0x3c>)
 802078a:	4b09      	ldr	r3, [pc, #36]	@ (80207b0 <USBD_FS_ProductStrDescriptor+0x40>)
 802078c:	0018      	movs	r0, r3
 802078e:	f7ff fdb1 	bl	80202f4 <USBD_GetString>
 8020792:	e005      	b.n	80207a0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020794:	683a      	ldr	r2, [r7, #0]
 8020796:	4905      	ldr	r1, [pc, #20]	@ (80207ac <USBD_FS_ProductStrDescriptor+0x3c>)
 8020798:	4b05      	ldr	r3, [pc, #20]	@ (80207b0 <USBD_FS_ProductStrDescriptor+0x40>)
 802079a:	0018      	movs	r0, r3
 802079c:	f7ff fdaa 	bl	80202f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80207a0:	4b02      	ldr	r3, [pc, #8]	@ (80207ac <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80207a2:	0018      	movs	r0, r3
 80207a4:	46bd      	mov	sp, r7
 80207a6:	b002      	add	sp, #8
 80207a8:	bd80      	pop	{r7, pc}
 80207aa:	46c0      	nop			@ (mov r8, r8)
 80207ac:	20002d90 	.word	0x20002d90
 80207b0:	0802ad28 	.word	0x0802ad28

080207b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207b4:	b580      	push	{r7, lr}
 80207b6:	b082      	sub	sp, #8
 80207b8:	af00      	add	r7, sp, #0
 80207ba:	0002      	movs	r2, r0
 80207bc:	6039      	str	r1, [r7, #0]
 80207be:	1dfb      	adds	r3, r7, #7
 80207c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80207c2:	683a      	ldr	r2, [r7, #0]
 80207c4:	4904      	ldr	r1, [pc, #16]	@ (80207d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80207c6:	4b05      	ldr	r3, [pc, #20]	@ (80207dc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80207c8:	0018      	movs	r0, r3
 80207ca:	f7ff fd93 	bl	80202f4 <USBD_GetString>
  return USBD_StrDesc;
 80207ce:	4b02      	ldr	r3, [pc, #8]	@ (80207d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80207d0:	0018      	movs	r0, r3
 80207d2:	46bd      	mov	sp, r7
 80207d4:	b002      	add	sp, #8
 80207d6:	bd80      	pop	{r7, pc}
 80207d8:	20002d90 	.word	0x20002d90
 80207dc:	0802ad40 	.word	0x0802ad40

080207e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	b082      	sub	sp, #8
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	0002      	movs	r2, r0
 80207e8:	6039      	str	r1, [r7, #0]
 80207ea:	1dfb      	adds	r3, r7, #7
 80207ec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80207ee:	683b      	ldr	r3, [r7, #0]
 80207f0:	221a      	movs	r2, #26
 80207f2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80207f4:	f000 f84c 	bl	8020890 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80207f8:	4b02      	ldr	r3, [pc, #8]	@ (8020804 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80207fa:	0018      	movs	r0, r3
 80207fc:	46bd      	mov	sp, r7
 80207fe:	b002      	add	sp, #8
 8020800:	bd80      	pop	{r7, pc}
 8020802:	46c0      	nop			@ (mov r8, r8)
 8020804:	2000024c 	.word	0x2000024c

08020808 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020808:	b580      	push	{r7, lr}
 802080a:	b082      	sub	sp, #8
 802080c:	af00      	add	r7, sp, #0
 802080e:	0002      	movs	r2, r0
 8020810:	6039      	str	r1, [r7, #0]
 8020812:	1dfb      	adds	r3, r7, #7
 8020814:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8020816:	1dfb      	adds	r3, r7, #7
 8020818:	781b      	ldrb	r3, [r3, #0]
 802081a:	2b00      	cmp	r3, #0
 802081c:	d106      	bne.n	802082c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802081e:	683a      	ldr	r2, [r7, #0]
 8020820:	4908      	ldr	r1, [pc, #32]	@ (8020844 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8020822:	4b09      	ldr	r3, [pc, #36]	@ (8020848 <USBD_FS_ConfigStrDescriptor+0x40>)
 8020824:	0018      	movs	r0, r3
 8020826:	f7ff fd65 	bl	80202f4 <USBD_GetString>
 802082a:	e005      	b.n	8020838 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802082c:	683a      	ldr	r2, [r7, #0]
 802082e:	4905      	ldr	r1, [pc, #20]	@ (8020844 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8020830:	4b05      	ldr	r3, [pc, #20]	@ (8020848 <USBD_FS_ConfigStrDescriptor+0x40>)
 8020832:	0018      	movs	r0, r3
 8020834:	f7ff fd5e 	bl	80202f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020838:	4b02      	ldr	r3, [pc, #8]	@ (8020844 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 802083a:	0018      	movs	r0, r3
 802083c:	46bd      	mov	sp, r7
 802083e:	b002      	add	sp, #8
 8020840:	bd80      	pop	{r7, pc}
 8020842:	46c0      	nop			@ (mov r8, r8)
 8020844:	20002d90 	.word	0x20002d90
 8020848:	0802ad54 	.word	0x0802ad54

0802084c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	b082      	sub	sp, #8
 8020850:	af00      	add	r7, sp, #0
 8020852:	0002      	movs	r2, r0
 8020854:	6039      	str	r1, [r7, #0]
 8020856:	1dfb      	adds	r3, r7, #7
 8020858:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802085a:	1dfb      	adds	r3, r7, #7
 802085c:	781b      	ldrb	r3, [r3, #0]
 802085e:	2b00      	cmp	r3, #0
 8020860:	d106      	bne.n	8020870 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020862:	683a      	ldr	r2, [r7, #0]
 8020864:	4908      	ldr	r1, [pc, #32]	@ (8020888 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8020866:	4b09      	ldr	r3, [pc, #36]	@ (802088c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8020868:	0018      	movs	r0, r3
 802086a:	f7ff fd43 	bl	80202f4 <USBD_GetString>
 802086e:	e005      	b.n	802087c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020870:	683a      	ldr	r2, [r7, #0]
 8020872:	4905      	ldr	r1, [pc, #20]	@ (8020888 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8020874:	4b05      	ldr	r3, [pc, #20]	@ (802088c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8020876:	0018      	movs	r0, r3
 8020878:	f7ff fd3c 	bl	80202f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 802087c:	4b02      	ldr	r3, [pc, #8]	@ (8020888 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802087e:	0018      	movs	r0, r3
 8020880:	46bd      	mov	sp, r7
 8020882:	b002      	add	sp, #8
 8020884:	bd80      	pop	{r7, pc}
 8020886:	46c0      	nop			@ (mov r8, r8)
 8020888:	20002d90 	.word	0x20002d90
 802088c:	0802ad60 	.word	0x0802ad60

08020890 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020890:	b580      	push	{r7, lr}
 8020892:	b084      	sub	sp, #16
 8020894:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8020896:	4b10      	ldr	r3, [pc, #64]	@ (80208d8 <Get_SerialNum+0x48>)
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802089c:	4b0f      	ldr	r3, [pc, #60]	@ (80208dc <Get_SerialNum+0x4c>)
 802089e:	681b      	ldr	r3, [r3, #0]
 80208a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80208a2:	4b0f      	ldr	r3, [pc, #60]	@ (80208e0 <Get_SerialNum+0x50>)
 80208a4:	681b      	ldr	r3, [r3, #0]
 80208a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80208a8:	68fa      	ldr	r2, [r7, #12]
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	18d3      	adds	r3, r2, r3
 80208ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	2b00      	cmp	r3, #0
 80208b4:	d00b      	beq.n	80208ce <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80208b6:	490b      	ldr	r1, [pc, #44]	@ (80208e4 <Get_SerialNum+0x54>)
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	2208      	movs	r2, #8
 80208bc:	0018      	movs	r0, r3
 80208be:	f000 f815 	bl	80208ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80208c2:	4909      	ldr	r1, [pc, #36]	@ (80208e8 <Get_SerialNum+0x58>)
 80208c4:	68bb      	ldr	r3, [r7, #8]
 80208c6:	2204      	movs	r2, #4
 80208c8:	0018      	movs	r0, r3
 80208ca:	f000 f80f 	bl	80208ec <IntToUnicode>
  }
}
 80208ce:	46c0      	nop			@ (mov r8, r8)
 80208d0:	46bd      	mov	sp, r7
 80208d2:	b004      	add	sp, #16
 80208d4:	bd80      	pop	{r7, pc}
 80208d6:	46c0      	nop			@ (mov r8, r8)
 80208d8:	1ff80050 	.word	0x1ff80050
 80208dc:	1ff80054 	.word	0x1ff80054
 80208e0:	1ff80058 	.word	0x1ff80058
 80208e4:	2000024e 	.word	0x2000024e
 80208e8:	2000025e 	.word	0x2000025e

080208ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80208ec:	b580      	push	{r7, lr}
 80208ee:	b086      	sub	sp, #24
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	60f8      	str	r0, [r7, #12]
 80208f4:	60b9      	str	r1, [r7, #8]
 80208f6:	1dfb      	adds	r3, r7, #7
 80208f8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80208fa:	2117      	movs	r1, #23
 80208fc:	187b      	adds	r3, r7, r1
 80208fe:	2200      	movs	r2, #0
 8020900:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8020902:	187b      	adds	r3, r7, r1
 8020904:	2200      	movs	r2, #0
 8020906:	701a      	strb	r2, [r3, #0]
 8020908:	e02f      	b.n	802096a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802090a:	68fb      	ldr	r3, [r7, #12]
 802090c:	0f1b      	lsrs	r3, r3, #28
 802090e:	2b09      	cmp	r3, #9
 8020910:	d80d      	bhi.n	802092e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8020912:	68fb      	ldr	r3, [r7, #12]
 8020914:	0f1b      	lsrs	r3, r3, #28
 8020916:	b2da      	uxtb	r2, r3
 8020918:	2317      	movs	r3, #23
 802091a:	18fb      	adds	r3, r7, r3
 802091c:	781b      	ldrb	r3, [r3, #0]
 802091e:	005b      	lsls	r3, r3, #1
 8020920:	0019      	movs	r1, r3
 8020922:	68bb      	ldr	r3, [r7, #8]
 8020924:	185b      	adds	r3, r3, r1
 8020926:	3230      	adds	r2, #48	@ 0x30
 8020928:	b2d2      	uxtb	r2, r2
 802092a:	701a      	strb	r2, [r3, #0]
 802092c:	e00c      	b.n	8020948 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802092e:	68fb      	ldr	r3, [r7, #12]
 8020930:	0f1b      	lsrs	r3, r3, #28
 8020932:	b2da      	uxtb	r2, r3
 8020934:	2317      	movs	r3, #23
 8020936:	18fb      	adds	r3, r7, r3
 8020938:	781b      	ldrb	r3, [r3, #0]
 802093a:	005b      	lsls	r3, r3, #1
 802093c:	0019      	movs	r1, r3
 802093e:	68bb      	ldr	r3, [r7, #8]
 8020940:	185b      	adds	r3, r3, r1
 8020942:	3237      	adds	r2, #55	@ 0x37
 8020944:	b2d2      	uxtb	r2, r2
 8020946:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	011b      	lsls	r3, r3, #4
 802094c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802094e:	2117      	movs	r1, #23
 8020950:	187b      	adds	r3, r7, r1
 8020952:	781b      	ldrb	r3, [r3, #0]
 8020954:	005b      	lsls	r3, r3, #1
 8020956:	3301      	adds	r3, #1
 8020958:	68ba      	ldr	r2, [r7, #8]
 802095a:	18d3      	adds	r3, r2, r3
 802095c:	2200      	movs	r2, #0
 802095e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8020960:	187b      	adds	r3, r7, r1
 8020962:	781a      	ldrb	r2, [r3, #0]
 8020964:	187b      	adds	r3, r7, r1
 8020966:	3201      	adds	r2, #1
 8020968:	701a      	strb	r2, [r3, #0]
 802096a:	2317      	movs	r3, #23
 802096c:	18fa      	adds	r2, r7, r3
 802096e:	1dfb      	adds	r3, r7, #7
 8020970:	7812      	ldrb	r2, [r2, #0]
 8020972:	781b      	ldrb	r3, [r3, #0]
 8020974:	429a      	cmp	r2, r3
 8020976:	d3c8      	bcc.n	802090a <IntToUnicode+0x1e>
  }
}
 8020978:	46c0      	nop			@ (mov r8, r8)
 802097a:	46c0      	nop			@ (mov r8, r8)
 802097c:	46bd      	mov	sp, r7
 802097e:	b006      	add	sp, #24
 8020980:	bd80      	pop	{r7, pc}
	...

08020984 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8020984:	b580      	push	{r7, lr}
 8020986:	b082      	sub	sp, #8
 8020988:	af00      	add	r7, sp, #0
 802098a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 802098c:	687b      	ldr	r3, [r7, #4]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	4a0a      	ldr	r2, [pc, #40]	@ (80209bc <HAL_PCD_MspInit+0x38>)
 8020992:	4293      	cmp	r3, r2
 8020994:	d10e      	bne.n	80209b4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8020996:	4b0a      	ldr	r3, [pc, #40]	@ (80209c0 <HAL_PCD_MspInit+0x3c>)
 8020998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802099a:	4b09      	ldr	r3, [pc, #36]	@ (80209c0 <HAL_PCD_MspInit+0x3c>)
 802099c:	2180      	movs	r1, #128	@ 0x80
 802099e:	0409      	lsls	r1, r1, #16
 80209a0:	430a      	orrs	r2, r1
 80209a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80209a4:	2200      	movs	r2, #0
 80209a6:	2100      	movs	r1, #0
 80209a8:	201f      	movs	r0, #31
 80209aa:	f7f2 f847 	bl	8012a3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80209ae:	201f      	movs	r0, #31
 80209b0:	f7f2 f859 	bl	8012a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80209b4:	46c0      	nop			@ (mov r8, r8)
 80209b6:	46bd      	mov	sp, r7
 80209b8:	b002      	add	sp, #8
 80209ba:	bd80      	pop	{r7, pc}
 80209bc:	40005c00 	.word	0x40005c00
 80209c0:	40021000 	.word	0x40021000

080209c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	b082      	sub	sp, #8
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80209cc:	687a      	ldr	r2, [r7, #4]
 80209ce:	23bc      	movs	r3, #188	@ 0xbc
 80209d0:	009b      	lsls	r3, r3, #2
 80209d2:	58d2      	ldr	r2, [r2, r3]
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	21ac      	movs	r1, #172	@ 0xac
 80209d8:	0089      	lsls	r1, r1, #2
 80209da:	468c      	mov	ip, r1
 80209dc:	4463      	add	r3, ip
 80209de:	0019      	movs	r1, r3
 80209e0:	0010      	movs	r0, r2
 80209e2:	f7fe fc1d 	bl	801f220 <USBD_LL_SetupStage>
}
 80209e6:	46c0      	nop			@ (mov r8, r8)
 80209e8:	46bd      	mov	sp, r7
 80209ea:	b002      	add	sp, #8
 80209ec:	bd80      	pop	{r7, pc}

080209ee <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209ee:	b590      	push	{r4, r7, lr}
 80209f0:	b083      	sub	sp, #12
 80209f2:	af00      	add	r7, sp, #0
 80209f4:	6078      	str	r0, [r7, #4]
 80209f6:	000a      	movs	r2, r1
 80209f8:	1cfb      	adds	r3, r7, #3
 80209fa:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80209fc:	687a      	ldr	r2, [r7, #4]
 80209fe:	23bc      	movs	r3, #188	@ 0xbc
 8020a00:	009b      	lsls	r3, r3, #2
 8020a02:	58d4      	ldr	r4, [r2, r3]
 8020a04:	1cfb      	adds	r3, r7, #3
 8020a06:	781a      	ldrb	r2, [r3, #0]
 8020a08:	6878      	ldr	r0, [r7, #4]
 8020a0a:	23be      	movs	r3, #190	@ 0xbe
 8020a0c:	0059      	lsls	r1, r3, #1
 8020a0e:	0013      	movs	r3, r2
 8020a10:	009b      	lsls	r3, r3, #2
 8020a12:	189b      	adds	r3, r3, r2
 8020a14:	00db      	lsls	r3, r3, #3
 8020a16:	18c3      	adds	r3, r0, r3
 8020a18:	185b      	adds	r3, r3, r1
 8020a1a:	681a      	ldr	r2, [r3, #0]
 8020a1c:	1cfb      	adds	r3, r7, #3
 8020a1e:	781b      	ldrb	r3, [r3, #0]
 8020a20:	0019      	movs	r1, r3
 8020a22:	0020      	movs	r0, r4
 8020a24:	f7fe fc5a 	bl	801f2dc <USBD_LL_DataOutStage>
}
 8020a28:	46c0      	nop			@ (mov r8, r8)
 8020a2a:	46bd      	mov	sp, r7
 8020a2c:	b003      	add	sp, #12
 8020a2e:	bd90      	pop	{r4, r7, pc}

08020a30 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b082      	sub	sp, #8
 8020a34:	af00      	add	r7, sp, #0
 8020a36:	6078      	str	r0, [r7, #4]
 8020a38:	000a      	movs	r2, r1
 8020a3a:	1cfb      	adds	r3, r7, #3
 8020a3c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8020a3e:	687a      	ldr	r2, [r7, #4]
 8020a40:	23bc      	movs	r3, #188	@ 0xbc
 8020a42:	009b      	lsls	r3, r3, #2
 8020a44:	58d0      	ldr	r0, [r2, r3]
 8020a46:	1cfb      	adds	r3, r7, #3
 8020a48:	781a      	ldrb	r2, [r3, #0]
 8020a4a:	6879      	ldr	r1, [r7, #4]
 8020a4c:	0013      	movs	r3, r2
 8020a4e:	009b      	lsls	r3, r3, #2
 8020a50:	189b      	adds	r3, r3, r2
 8020a52:	00db      	lsls	r3, r3, #3
 8020a54:	18cb      	adds	r3, r1, r3
 8020a56:	333c      	adds	r3, #60	@ 0x3c
 8020a58:	681a      	ldr	r2, [r3, #0]
 8020a5a:	1cfb      	adds	r3, r7, #3
 8020a5c:	781b      	ldrb	r3, [r3, #0]
 8020a5e:	0019      	movs	r1, r3
 8020a60:	f7fe fcbe 	bl	801f3e0 <USBD_LL_DataInStage>
}
 8020a64:	46c0      	nop			@ (mov r8, r8)
 8020a66:	46bd      	mov	sp, r7
 8020a68:	b002      	add	sp, #8
 8020a6a:	bd80      	pop	{r7, pc}

08020a6c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a6c:	b580      	push	{r7, lr}
 8020a6e:	b082      	sub	sp, #8
 8020a70:	af00      	add	r7, sp, #0
 8020a72:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8020a74:	687a      	ldr	r2, [r7, #4]
 8020a76:	23bc      	movs	r3, #188	@ 0xbc
 8020a78:	009b      	lsls	r3, r3, #2
 8020a7a:	58d3      	ldr	r3, [r2, r3]
 8020a7c:	0018      	movs	r0, r3
 8020a7e:	f7fe fdf5 	bl	801f66c <USBD_LL_SOF>
}
 8020a82:	46c0      	nop			@ (mov r8, r8)
 8020a84:	46bd      	mov	sp, r7
 8020a86:	b002      	add	sp, #8
 8020a88:	bd80      	pop	{r7, pc}

08020a8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a8a:	b580      	push	{r7, lr}
 8020a8c:	b084      	sub	sp, #16
 8020a8e:	af00      	add	r7, sp, #0
 8020a90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8020a92:	230f      	movs	r3, #15
 8020a94:	18fb      	adds	r3, r7, r3
 8020a96:	2201      	movs	r2, #1
 8020a98:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	689b      	ldr	r3, [r3, #8]
 8020a9e:	2b02      	cmp	r3, #2
 8020aa0:	d001      	beq.n	8020aa6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8020aa2:	f7ea fc05 	bl	800b2b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8020aa6:	687a      	ldr	r2, [r7, #4]
 8020aa8:	23bc      	movs	r3, #188	@ 0xbc
 8020aaa:	009b      	lsls	r3, r3, #2
 8020aac:	58d2      	ldr	r2, [r2, r3]
 8020aae:	230f      	movs	r3, #15
 8020ab0:	18fb      	adds	r3, r7, r3
 8020ab2:	781b      	ldrb	r3, [r3, #0]
 8020ab4:	0019      	movs	r1, r3
 8020ab6:	0010      	movs	r0, r2
 8020ab8:	f7fe fd97 	bl	801f5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8020abc:	687a      	ldr	r2, [r7, #4]
 8020abe:	23bc      	movs	r3, #188	@ 0xbc
 8020ac0:	009b      	lsls	r3, r3, #2
 8020ac2:	58d3      	ldr	r3, [r2, r3]
 8020ac4:	0018      	movs	r0, r3
 8020ac6:	f7fe fd48 	bl	801f55a <USBD_LL_Reset>
}
 8020aca:	46c0      	nop			@ (mov r8, r8)
 8020acc:	46bd      	mov	sp, r7
 8020ace:	b004      	add	sp, #16
 8020ad0:	bd80      	pop	{r7, pc}
	...

08020ad4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b082      	sub	sp, #8
 8020ad8:	af00      	add	r7, sp, #0
 8020ada:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020adc:	687a      	ldr	r2, [r7, #4]
 8020ade:	23bc      	movs	r3, #188	@ 0xbc
 8020ae0:	009b      	lsls	r3, r3, #2
 8020ae2:	58d3      	ldr	r3, [r2, r3]
 8020ae4:	0018      	movs	r0, r3
 8020ae6:	f7fe fd91 	bl	801f60c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	699b      	ldr	r3, [r3, #24]
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d005      	beq.n	8020afe <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020af2:	4b05      	ldr	r3, [pc, #20]	@ (8020b08 <HAL_PCD_SuspendCallback+0x34>)
 8020af4:	691a      	ldr	r2, [r3, #16]
 8020af6:	4b04      	ldr	r3, [pc, #16]	@ (8020b08 <HAL_PCD_SuspendCallback+0x34>)
 8020af8:	2106      	movs	r1, #6
 8020afa:	430a      	orrs	r2, r1
 8020afc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8020afe:	46c0      	nop			@ (mov r8, r8)
 8020b00:	46bd      	mov	sp, r7
 8020b02:	b002      	add	sp, #8
 8020b04:	bd80      	pop	{r7, pc}
 8020b06:	46c0      	nop			@ (mov r8, r8)
 8020b08:	e000ed00 	.word	0xe000ed00

08020b0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	b082      	sub	sp, #8
 8020b10:	af00      	add	r7, sp, #0
 8020b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	699b      	ldr	r3, [r3, #24]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d007      	beq.n	8020b2c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020b1c:	4b09      	ldr	r3, [pc, #36]	@ (8020b44 <HAL_PCD_ResumeCallback+0x38>)
 8020b1e:	691a      	ldr	r2, [r3, #16]
 8020b20:	4b08      	ldr	r3, [pc, #32]	@ (8020b44 <HAL_PCD_ResumeCallback+0x38>)
 8020b22:	2106      	movs	r1, #6
 8020b24:	438a      	bics	r2, r1
 8020b26:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8020b28:	f000 fa44 	bl	8020fb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020b2c:	687a      	ldr	r2, [r7, #4]
 8020b2e:	23bc      	movs	r3, #188	@ 0xbc
 8020b30:	009b      	lsls	r3, r3, #2
 8020b32:	58d3      	ldr	r3, [r2, r3]
 8020b34:	0018      	movs	r0, r3
 8020b36:	f7fe fd81 	bl	801f63c <USBD_LL_Resume>
}
 8020b3a:	46c0      	nop			@ (mov r8, r8)
 8020b3c:	46bd      	mov	sp, r7
 8020b3e:	b002      	add	sp, #8
 8020b40:	bd80      	pop	{r7, pc}
 8020b42:	46c0      	nop			@ (mov r8, r8)
 8020b44:	e000ed00 	.word	0xe000ed00

08020b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020b48:	b580      	push	{r7, lr}
 8020b4a:	b082      	sub	sp, #8
 8020b4c:	af00      	add	r7, sp, #0
 8020b4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8020b50:	4a2d      	ldr	r2, [pc, #180]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b52:	23bc      	movs	r3, #188	@ 0xbc
 8020b54:	009b      	lsls	r3, r3, #2
 8020b56:	6879      	ldr	r1, [r7, #4]
 8020b58:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8020b5a:	687a      	ldr	r2, [r7, #4]
 8020b5c:	23b0      	movs	r3, #176	@ 0xb0
 8020b5e:	009b      	lsls	r3, r3, #2
 8020b60:	4929      	ldr	r1, [pc, #164]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b62:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8020b64:	4b28      	ldr	r3, [pc, #160]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b66:	4a29      	ldr	r2, [pc, #164]	@ (8020c0c <USBD_LL_Init+0xc4>)
 8020b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8020b6a:	4b27      	ldr	r3, [pc, #156]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b6c:	2208      	movs	r2, #8
 8020b6e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8020b70:	4b25      	ldr	r3, [pc, #148]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b72:	2202      	movs	r2, #2
 8020b74:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020b76:	4b24      	ldr	r3, [pc, #144]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b78:	2202      	movs	r2, #2
 8020b7a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8020b7c:	4b22      	ldr	r3, [pc, #136]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b7e:	2200      	movs	r2, #0
 8020b80:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8020b82:	4b21      	ldr	r3, [pc, #132]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b84:	2200      	movs	r2, #0
 8020b86:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8020b88:	4b1f      	ldr	r3, [pc, #124]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b8a:	2200      	movs	r2, #0
 8020b8c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8020b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8020c08 <USBD_LL_Init+0xc0>)
 8020b90:	0018      	movs	r0, r3
 8020b92:	f7f5 ff95 	bl	8016ac0 <HAL_PCD_Init>
 8020b96:	1e03      	subs	r3, r0, #0
 8020b98:	d001      	beq.n	8020b9e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8020b9a:	f7ea fb89 	bl	800b2b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8020b9e:	687a      	ldr	r2, [r7, #4]
 8020ba0:	23b0      	movs	r3, #176	@ 0xb0
 8020ba2:	009b      	lsls	r3, r3, #2
 8020ba4:	58d0      	ldr	r0, [r2, r3]
 8020ba6:	2318      	movs	r3, #24
 8020ba8:	2200      	movs	r2, #0
 8020baa:	2100      	movs	r1, #0
 8020bac:	f7f7 fd56 	bl	801865c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8020bb0:	687a      	ldr	r2, [r7, #4]
 8020bb2:	23b0      	movs	r3, #176	@ 0xb0
 8020bb4:	009b      	lsls	r3, r3, #2
 8020bb6:	58d0      	ldr	r0, [r2, r3]
 8020bb8:	2358      	movs	r3, #88	@ 0x58
 8020bba:	2200      	movs	r2, #0
 8020bbc:	2180      	movs	r1, #128	@ 0x80
 8020bbe:	f7f7 fd4d 	bl	801865c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8020bc2:	687a      	ldr	r2, [r7, #4]
 8020bc4:	23b0      	movs	r3, #176	@ 0xb0
 8020bc6:	009b      	lsls	r3, r3, #2
 8020bc8:	58d0      	ldr	r0, [r2, r3]
 8020bca:	23c0      	movs	r3, #192	@ 0xc0
 8020bcc:	2200      	movs	r2, #0
 8020bce:	2181      	movs	r1, #129	@ 0x81
 8020bd0:	f7f7 fd44 	bl	801865c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8020bd4:	687a      	ldr	r2, [r7, #4]
 8020bd6:	23b0      	movs	r3, #176	@ 0xb0
 8020bd8:	009b      	lsls	r3, r3, #2
 8020bda:	58d0      	ldr	r0, [r2, r3]
 8020bdc:	2388      	movs	r3, #136	@ 0x88
 8020bde:	005b      	lsls	r3, r3, #1
 8020be0:	2200      	movs	r2, #0
 8020be2:	2101      	movs	r1, #1
 8020be4:	f7f7 fd3a 	bl	801865c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8020be8:	687a      	ldr	r2, [r7, #4]
 8020bea:	23b0      	movs	r3, #176	@ 0xb0
 8020bec:	009b      	lsls	r3, r3, #2
 8020bee:	58d0      	ldr	r0, [r2, r3]
 8020bf0:	2380      	movs	r3, #128	@ 0x80
 8020bf2:	005b      	lsls	r3, r3, #1
 8020bf4:	2200      	movs	r2, #0
 8020bf6:	2182      	movs	r1, #130	@ 0x82
 8020bf8:	f7f7 fd30 	bl	801865c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8020bfc:	2300      	movs	r3, #0
}
 8020bfe:	0018      	movs	r0, r3
 8020c00:	46bd      	mov	sp, r7
 8020c02:	b002      	add	sp, #8
 8020c04:	bd80      	pop	{r7, pc}
 8020c06:	46c0      	nop			@ (mov r8, r8)
 8020c08:	20002f90 	.word	0x20002f90
 8020c0c:	40005c00 	.word	0x40005c00

08020c10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c12:	b085      	sub	sp, #20
 8020c14:	af00      	add	r7, sp, #0
 8020c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c18:	210f      	movs	r1, #15
 8020c1a:	187b      	adds	r3, r7, r1
 8020c1c:	2200      	movs	r2, #0
 8020c1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c20:	260e      	movs	r6, #14
 8020c22:	19bb      	adds	r3, r7, r6
 8020c24:	2200      	movs	r2, #0
 8020c26:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020c28:	687a      	ldr	r2, [r7, #4]
 8020c2a:	23b0      	movs	r3, #176	@ 0xb0
 8020c2c:	009b      	lsls	r3, r3, #2
 8020c2e:	58d3      	ldr	r3, [r2, r3]
 8020c30:	000d      	movs	r5, r1
 8020c32:	187c      	adds	r4, r7, r1
 8020c34:	0018      	movs	r0, r3
 8020c36:	f7f6 f843 	bl	8016cc0 <HAL_PCD_Start>
 8020c3a:	0003      	movs	r3, r0
 8020c3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c3e:	19bc      	adds	r4, r7, r6
 8020c40:	197b      	adds	r3, r7, r5
 8020c42:	781b      	ldrb	r3, [r3, #0]
 8020c44:	0018      	movs	r0, r3
 8020c46:	f000 f9bc 	bl	8020fc2 <USBD_Get_USB_Status>
 8020c4a:	0003      	movs	r3, r0
 8020c4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020c4e:	19bb      	adds	r3, r7, r6
 8020c50:	781b      	ldrb	r3, [r3, #0]
}
 8020c52:	0018      	movs	r0, r3
 8020c54:	46bd      	mov	sp, r7
 8020c56:	b005      	add	sp, #20
 8020c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020c5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8020c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c5c:	b085      	sub	sp, #20
 8020c5e:	af00      	add	r7, sp, #0
 8020c60:	6078      	str	r0, [r7, #4]
 8020c62:	000c      	movs	r4, r1
 8020c64:	0010      	movs	r0, r2
 8020c66:	0019      	movs	r1, r3
 8020c68:	1cfb      	adds	r3, r7, #3
 8020c6a:	1c22      	adds	r2, r4, #0
 8020c6c:	701a      	strb	r2, [r3, #0]
 8020c6e:	1cbb      	adds	r3, r7, #2
 8020c70:	1c02      	adds	r2, r0, #0
 8020c72:	701a      	strb	r2, [r3, #0]
 8020c74:	003b      	movs	r3, r7
 8020c76:	1c0a      	adds	r2, r1, #0
 8020c78:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c7a:	260f      	movs	r6, #15
 8020c7c:	19bb      	adds	r3, r7, r6
 8020c7e:	2200      	movs	r2, #0
 8020c80:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c82:	250e      	movs	r5, #14
 8020c84:	197b      	adds	r3, r7, r5
 8020c86:	2200      	movs	r2, #0
 8020c88:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020c8a:	687a      	ldr	r2, [r7, #4]
 8020c8c:	23b0      	movs	r3, #176	@ 0xb0
 8020c8e:	009b      	lsls	r3, r3, #2
 8020c90:	58d0      	ldr	r0, [r2, r3]
 8020c92:	19bc      	adds	r4, r7, r6
 8020c94:	1cbb      	adds	r3, r7, #2
 8020c96:	781d      	ldrb	r5, [r3, #0]
 8020c98:	003b      	movs	r3, r7
 8020c9a:	881a      	ldrh	r2, [r3, #0]
 8020c9c:	1cfb      	adds	r3, r7, #3
 8020c9e:	7819      	ldrb	r1, [r3, #0]
 8020ca0:	002b      	movs	r3, r5
 8020ca2:	f7f6 f9a2 	bl	8016fea <HAL_PCD_EP_Open>
 8020ca6:	0003      	movs	r3, r0
 8020ca8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020caa:	250e      	movs	r5, #14
 8020cac:	197c      	adds	r4, r7, r5
 8020cae:	19bb      	adds	r3, r7, r6
 8020cb0:	781b      	ldrb	r3, [r3, #0]
 8020cb2:	0018      	movs	r0, r3
 8020cb4:	f000 f985 	bl	8020fc2 <USBD_Get_USB_Status>
 8020cb8:	0003      	movs	r3, r0
 8020cba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020cbc:	197b      	adds	r3, r7, r5
 8020cbe:	781b      	ldrb	r3, [r3, #0]
}
 8020cc0:	0018      	movs	r0, r3
 8020cc2:	46bd      	mov	sp, r7
 8020cc4:	b005      	add	sp, #20
 8020cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020cc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020cca:	b085      	sub	sp, #20
 8020ccc:	af00      	add	r7, sp, #0
 8020cce:	6078      	str	r0, [r7, #4]
 8020cd0:	000a      	movs	r2, r1
 8020cd2:	1cfb      	adds	r3, r7, #3
 8020cd4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020cd6:	210f      	movs	r1, #15
 8020cd8:	187b      	adds	r3, r7, r1
 8020cda:	2200      	movs	r2, #0
 8020cdc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020cde:	260e      	movs	r6, #14
 8020ce0:	19bb      	adds	r3, r7, r6
 8020ce2:	2200      	movs	r2, #0
 8020ce4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020ce6:	687a      	ldr	r2, [r7, #4]
 8020ce8:	23b0      	movs	r3, #176	@ 0xb0
 8020cea:	009b      	lsls	r3, r3, #2
 8020cec:	58d2      	ldr	r2, [r2, r3]
 8020cee:	000d      	movs	r5, r1
 8020cf0:	187c      	adds	r4, r7, r1
 8020cf2:	1cfb      	adds	r3, r7, #3
 8020cf4:	781b      	ldrb	r3, [r3, #0]
 8020cf6:	0019      	movs	r1, r3
 8020cf8:	0010      	movs	r0, r2
 8020cfa:	f7f6 f9e5 	bl	80170c8 <HAL_PCD_EP_Close>
 8020cfe:	0003      	movs	r3, r0
 8020d00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d02:	19bc      	adds	r4, r7, r6
 8020d04:	197b      	adds	r3, r7, r5
 8020d06:	781b      	ldrb	r3, [r3, #0]
 8020d08:	0018      	movs	r0, r3
 8020d0a:	f000 f95a 	bl	8020fc2 <USBD_Get_USB_Status>
 8020d0e:	0003      	movs	r3, r0
 8020d10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020d12:	19bb      	adds	r3, r7, r6
 8020d14:	781b      	ldrb	r3, [r3, #0]
}
 8020d16:	0018      	movs	r0, r3
 8020d18:	46bd      	mov	sp, r7
 8020d1a:	b005      	add	sp, #20
 8020d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d1e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d20:	b085      	sub	sp, #20
 8020d22:	af00      	add	r7, sp, #0
 8020d24:	6078      	str	r0, [r7, #4]
 8020d26:	000a      	movs	r2, r1
 8020d28:	1cfb      	adds	r3, r7, #3
 8020d2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d2c:	210f      	movs	r1, #15
 8020d2e:	187b      	adds	r3, r7, r1
 8020d30:	2200      	movs	r2, #0
 8020d32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d34:	260e      	movs	r6, #14
 8020d36:	19bb      	adds	r3, r7, r6
 8020d38:	2200      	movs	r2, #0
 8020d3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020d3c:	687a      	ldr	r2, [r7, #4]
 8020d3e:	23b0      	movs	r3, #176	@ 0xb0
 8020d40:	009b      	lsls	r3, r3, #2
 8020d42:	58d2      	ldr	r2, [r2, r3]
 8020d44:	000d      	movs	r5, r1
 8020d46:	187c      	adds	r4, r7, r1
 8020d48:	1cfb      	adds	r3, r7, #3
 8020d4a:	781b      	ldrb	r3, [r3, #0]
 8020d4c:	0019      	movs	r1, r3
 8020d4e:	0010      	movs	r0, r2
 8020d50:	f7f6 fa97 	bl	8017282 <HAL_PCD_EP_SetStall>
 8020d54:	0003      	movs	r3, r0
 8020d56:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d58:	19bc      	adds	r4, r7, r6
 8020d5a:	197b      	adds	r3, r7, r5
 8020d5c:	781b      	ldrb	r3, [r3, #0]
 8020d5e:	0018      	movs	r0, r3
 8020d60:	f000 f92f 	bl	8020fc2 <USBD_Get_USB_Status>
 8020d64:	0003      	movs	r3, r0
 8020d66:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020d68:	19bb      	adds	r3, r7, r6
 8020d6a:	781b      	ldrb	r3, [r3, #0]
}
 8020d6c:	0018      	movs	r0, r3
 8020d6e:	46bd      	mov	sp, r7
 8020d70:	b005      	add	sp, #20
 8020d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d74 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d76:	b085      	sub	sp, #20
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
 8020d7c:	000a      	movs	r2, r1
 8020d7e:	1cfb      	adds	r3, r7, #3
 8020d80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d82:	210f      	movs	r1, #15
 8020d84:	187b      	adds	r3, r7, r1
 8020d86:	2200      	movs	r2, #0
 8020d88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d8a:	260e      	movs	r6, #14
 8020d8c:	19bb      	adds	r3, r7, r6
 8020d8e:	2200      	movs	r2, #0
 8020d90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020d92:	687a      	ldr	r2, [r7, #4]
 8020d94:	23b0      	movs	r3, #176	@ 0xb0
 8020d96:	009b      	lsls	r3, r3, #2
 8020d98:	58d2      	ldr	r2, [r2, r3]
 8020d9a:	000d      	movs	r5, r1
 8020d9c:	187c      	adds	r4, r7, r1
 8020d9e:	1cfb      	adds	r3, r7, #3
 8020da0:	781b      	ldrb	r3, [r3, #0]
 8020da2:	0019      	movs	r1, r3
 8020da4:	0010      	movs	r0, r2
 8020da6:	f7f6 fac8 	bl	801733a <HAL_PCD_EP_ClrStall>
 8020daa:	0003      	movs	r3, r0
 8020dac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020dae:	19bc      	adds	r4, r7, r6
 8020db0:	197b      	adds	r3, r7, r5
 8020db2:	781b      	ldrb	r3, [r3, #0]
 8020db4:	0018      	movs	r0, r3
 8020db6:	f000 f904 	bl	8020fc2 <USBD_Get_USB_Status>
 8020dba:	0003      	movs	r3, r0
 8020dbc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020dbe:	19bb      	adds	r3, r7, r6
 8020dc0:	781b      	ldrb	r3, [r3, #0]
}
 8020dc2:	0018      	movs	r0, r3
 8020dc4:	46bd      	mov	sp, r7
 8020dc6:	b005      	add	sp, #20
 8020dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020dca <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020dca:	b580      	push	{r7, lr}
 8020dcc:	b084      	sub	sp, #16
 8020dce:	af00      	add	r7, sp, #0
 8020dd0:	6078      	str	r0, [r7, #4]
 8020dd2:	000a      	movs	r2, r1
 8020dd4:	1cfb      	adds	r3, r7, #3
 8020dd6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020dd8:	687a      	ldr	r2, [r7, #4]
 8020dda:	23b0      	movs	r3, #176	@ 0xb0
 8020ddc:	009b      	lsls	r3, r3, #2
 8020dde:	58d3      	ldr	r3, [r2, r3]
 8020de0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020de2:	1cfb      	adds	r3, r7, #3
 8020de4:	781b      	ldrb	r3, [r3, #0]
 8020de6:	b25b      	sxtb	r3, r3
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	da0d      	bge.n	8020e08 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020dec:	1cfb      	adds	r3, r7, #3
 8020dee:	781b      	ldrb	r3, [r3, #0]
 8020df0:	227f      	movs	r2, #127	@ 0x7f
 8020df2:	4013      	ands	r3, r2
 8020df4:	68f9      	ldr	r1, [r7, #12]
 8020df6:	1c5a      	adds	r2, r3, #1
 8020df8:	0013      	movs	r3, r2
 8020dfa:	009b      	lsls	r3, r3, #2
 8020dfc:	189b      	adds	r3, r3, r2
 8020dfe:	00db      	lsls	r3, r3, #3
 8020e00:	18cb      	adds	r3, r1, r3
 8020e02:	3302      	adds	r3, #2
 8020e04:	781b      	ldrb	r3, [r3, #0]
 8020e06:	e00d      	b.n	8020e24 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020e08:	1cfb      	adds	r3, r7, #3
 8020e0a:	781b      	ldrb	r3, [r3, #0]
 8020e0c:	227f      	movs	r2, #127	@ 0x7f
 8020e0e:	401a      	ands	r2, r3
 8020e10:	68f8      	ldr	r0, [r7, #12]
 8020e12:	23b5      	movs	r3, #181	@ 0xb5
 8020e14:	0059      	lsls	r1, r3, #1
 8020e16:	0013      	movs	r3, r2
 8020e18:	009b      	lsls	r3, r3, #2
 8020e1a:	189b      	adds	r3, r3, r2
 8020e1c:	00db      	lsls	r3, r3, #3
 8020e1e:	18c3      	adds	r3, r0, r3
 8020e20:	185b      	adds	r3, r3, r1
 8020e22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020e24:	0018      	movs	r0, r3
 8020e26:	46bd      	mov	sp, r7
 8020e28:	b004      	add	sp, #16
 8020e2a:	bd80      	pop	{r7, pc}

08020e2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e2e:	b085      	sub	sp, #20
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	6078      	str	r0, [r7, #4]
 8020e34:	000a      	movs	r2, r1
 8020e36:	1cfb      	adds	r3, r7, #3
 8020e38:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e3a:	210f      	movs	r1, #15
 8020e3c:	187b      	adds	r3, r7, r1
 8020e3e:	2200      	movs	r2, #0
 8020e40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e42:	260e      	movs	r6, #14
 8020e44:	19bb      	adds	r3, r7, r6
 8020e46:	2200      	movs	r2, #0
 8020e48:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020e4a:	687a      	ldr	r2, [r7, #4]
 8020e4c:	23b0      	movs	r3, #176	@ 0xb0
 8020e4e:	009b      	lsls	r3, r3, #2
 8020e50:	58d2      	ldr	r2, [r2, r3]
 8020e52:	000d      	movs	r5, r1
 8020e54:	187c      	adds	r4, r7, r1
 8020e56:	1cfb      	adds	r3, r7, #3
 8020e58:	781b      	ldrb	r3, [r3, #0]
 8020e5a:	0019      	movs	r1, r3
 8020e5c:	0010      	movs	r0, r2
 8020e5e:	f7f6 f899 	bl	8016f94 <HAL_PCD_SetAddress>
 8020e62:	0003      	movs	r3, r0
 8020e64:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020e66:	19bc      	adds	r4, r7, r6
 8020e68:	197b      	adds	r3, r7, r5
 8020e6a:	781b      	ldrb	r3, [r3, #0]
 8020e6c:	0018      	movs	r0, r3
 8020e6e:	f000 f8a8 	bl	8020fc2 <USBD_Get_USB_Status>
 8020e72:	0003      	movs	r3, r0
 8020e74:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020e76:	19bb      	adds	r3, r7, r6
 8020e78:	781b      	ldrb	r3, [r3, #0]
}
 8020e7a:	0018      	movs	r0, r3
 8020e7c:	46bd      	mov	sp, r7
 8020e7e:	b005      	add	sp, #20
 8020e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020e82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e84:	b087      	sub	sp, #28
 8020e86:	af00      	add	r7, sp, #0
 8020e88:	60f8      	str	r0, [r7, #12]
 8020e8a:	0008      	movs	r0, r1
 8020e8c:	607a      	str	r2, [r7, #4]
 8020e8e:	0019      	movs	r1, r3
 8020e90:	230b      	movs	r3, #11
 8020e92:	18fb      	adds	r3, r7, r3
 8020e94:	1c02      	adds	r2, r0, #0
 8020e96:	701a      	strb	r2, [r3, #0]
 8020e98:	2408      	movs	r4, #8
 8020e9a:	193b      	adds	r3, r7, r4
 8020e9c:	1c0a      	adds	r2, r1, #0
 8020e9e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ea0:	2117      	movs	r1, #23
 8020ea2:	187b      	adds	r3, r7, r1
 8020ea4:	2200      	movs	r2, #0
 8020ea6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ea8:	2516      	movs	r5, #22
 8020eaa:	197b      	adds	r3, r7, r5
 8020eac:	2200      	movs	r2, #0
 8020eae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020eb0:	68fa      	ldr	r2, [r7, #12]
 8020eb2:	23b0      	movs	r3, #176	@ 0xb0
 8020eb4:	009b      	lsls	r3, r3, #2
 8020eb6:	58d0      	ldr	r0, [r2, r3]
 8020eb8:	193b      	adds	r3, r7, r4
 8020eba:	881d      	ldrh	r5, [r3, #0]
 8020ebc:	000e      	movs	r6, r1
 8020ebe:	187c      	adds	r4, r7, r1
 8020ec0:	687a      	ldr	r2, [r7, #4]
 8020ec2:	230b      	movs	r3, #11
 8020ec4:	18fb      	adds	r3, r7, r3
 8020ec6:	7819      	ldrb	r1, [r3, #0]
 8020ec8:	002b      	movs	r3, r5
 8020eca:	f7f6 f99e 	bl	801720a <HAL_PCD_EP_Transmit>
 8020ece:	0003      	movs	r3, r0
 8020ed0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020ed2:	2516      	movs	r5, #22
 8020ed4:	197c      	adds	r4, r7, r5
 8020ed6:	19bb      	adds	r3, r7, r6
 8020ed8:	781b      	ldrb	r3, [r3, #0]
 8020eda:	0018      	movs	r0, r3
 8020edc:	f000 f871 	bl	8020fc2 <USBD_Get_USB_Status>
 8020ee0:	0003      	movs	r3, r0
 8020ee2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020ee4:	197b      	adds	r3, r7, r5
 8020ee6:	781b      	ldrb	r3, [r3, #0]
}
 8020ee8:	0018      	movs	r0, r3
 8020eea:	46bd      	mov	sp, r7
 8020eec:	b007      	add	sp, #28
 8020eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020ef0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ef2:	b087      	sub	sp, #28
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	60f8      	str	r0, [r7, #12]
 8020ef8:	0008      	movs	r0, r1
 8020efa:	607a      	str	r2, [r7, #4]
 8020efc:	0019      	movs	r1, r3
 8020efe:	230b      	movs	r3, #11
 8020f00:	18fb      	adds	r3, r7, r3
 8020f02:	1c02      	adds	r2, r0, #0
 8020f04:	701a      	strb	r2, [r3, #0]
 8020f06:	2408      	movs	r4, #8
 8020f08:	193b      	adds	r3, r7, r4
 8020f0a:	1c0a      	adds	r2, r1, #0
 8020f0c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020f0e:	2117      	movs	r1, #23
 8020f10:	187b      	adds	r3, r7, r1
 8020f12:	2200      	movs	r2, #0
 8020f14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020f16:	2516      	movs	r5, #22
 8020f18:	197b      	adds	r3, r7, r5
 8020f1a:	2200      	movs	r2, #0
 8020f1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020f1e:	68fa      	ldr	r2, [r7, #12]
 8020f20:	23b0      	movs	r3, #176	@ 0xb0
 8020f22:	009b      	lsls	r3, r3, #2
 8020f24:	58d0      	ldr	r0, [r2, r3]
 8020f26:	193b      	adds	r3, r7, r4
 8020f28:	881d      	ldrh	r5, [r3, #0]
 8020f2a:	000e      	movs	r6, r1
 8020f2c:	187c      	adds	r4, r7, r1
 8020f2e:	687a      	ldr	r2, [r7, #4]
 8020f30:	230b      	movs	r3, #11
 8020f32:	18fb      	adds	r3, r7, r3
 8020f34:	7819      	ldrb	r1, [r3, #0]
 8020f36:	002b      	movs	r3, r5
 8020f38:	f7f6 f917 	bl	801716a <HAL_PCD_EP_Receive>
 8020f3c:	0003      	movs	r3, r0
 8020f3e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020f40:	2516      	movs	r5, #22
 8020f42:	197c      	adds	r4, r7, r5
 8020f44:	19bb      	adds	r3, r7, r6
 8020f46:	781b      	ldrb	r3, [r3, #0]
 8020f48:	0018      	movs	r0, r3
 8020f4a:	f000 f83a 	bl	8020fc2 <USBD_Get_USB_Status>
 8020f4e:	0003      	movs	r3, r0
 8020f50:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020f52:	197b      	adds	r3, r7, r5
 8020f54:	781b      	ldrb	r3, [r3, #0]
}
 8020f56:	0018      	movs	r0, r3
 8020f58:	46bd      	mov	sp, r7
 8020f5a:	b007      	add	sp, #28
 8020f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020f5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020f5e:	b580      	push	{r7, lr}
 8020f60:	b082      	sub	sp, #8
 8020f62:	af00      	add	r7, sp, #0
 8020f64:	6078      	str	r0, [r7, #4]
 8020f66:	000a      	movs	r2, r1
 8020f68:	1cfb      	adds	r3, r7, #3
 8020f6a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020f6c:	687a      	ldr	r2, [r7, #4]
 8020f6e:	23b0      	movs	r3, #176	@ 0xb0
 8020f70:	009b      	lsls	r3, r3, #2
 8020f72:	58d2      	ldr	r2, [r2, r3]
 8020f74:	1cfb      	adds	r3, r7, #3
 8020f76:	781b      	ldrb	r3, [r3, #0]
 8020f78:	0019      	movs	r1, r3
 8020f7a:	0010      	movs	r0, r2
 8020f7c:	f7f6 f92c 	bl	80171d8 <HAL_PCD_EP_GetRxCount>
 8020f80:	0003      	movs	r3, r0
}
 8020f82:	0018      	movs	r0, r3
 8020f84:	46bd      	mov	sp, r7
 8020f86:	b002      	add	sp, #8
 8020f88:	bd80      	pop	{r7, pc}
	...

08020f8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020f8c:	b580      	push	{r7, lr}
 8020f8e:	b082      	sub	sp, #8
 8020f90:	af00      	add	r7, sp, #0
 8020f92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020f94:	4b02      	ldr	r3, [pc, #8]	@ (8020fa0 <USBD_static_malloc+0x14>)
}
 8020f96:	0018      	movs	r0, r3
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	b002      	add	sp, #8
 8020f9c:	bd80      	pop	{r7, pc}
 8020f9e:	46c0      	nop			@ (mov r8, r8)
 8020fa0:	20003284 	.word	0x20003284

08020fa4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b082      	sub	sp, #8
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	6078      	str	r0, [r7, #4]

}
 8020fac:	46c0      	nop			@ (mov r8, r8)
 8020fae:	46bd      	mov	sp, r7
 8020fb0:	b002      	add	sp, #8
 8020fb2:	bd80      	pop	{r7, pc}

08020fb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8020fb4:	b580      	push	{r7, lr}
 8020fb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8020fb8:	f7ea f82a 	bl	800b010 <SystemClock_Config>
}
 8020fbc:	46c0      	nop			@ (mov r8, r8)
 8020fbe:	46bd      	mov	sp, r7
 8020fc0:	bd80      	pop	{r7, pc}

08020fc2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020fc2:	b580      	push	{r7, lr}
 8020fc4:	b084      	sub	sp, #16
 8020fc6:	af00      	add	r7, sp, #0
 8020fc8:	0002      	movs	r2, r0
 8020fca:	1dfb      	adds	r3, r7, #7
 8020fcc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020fce:	230f      	movs	r3, #15
 8020fd0:	18fb      	adds	r3, r7, r3
 8020fd2:	2200      	movs	r2, #0
 8020fd4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8020fd6:	1dfb      	adds	r3, r7, #7
 8020fd8:	781b      	ldrb	r3, [r3, #0]
 8020fda:	2b03      	cmp	r3, #3
 8020fdc:	d017      	beq.n	802100e <USBD_Get_USB_Status+0x4c>
 8020fde:	dc1b      	bgt.n	8021018 <USBD_Get_USB_Status+0x56>
 8020fe0:	2b02      	cmp	r3, #2
 8020fe2:	d00f      	beq.n	8021004 <USBD_Get_USB_Status+0x42>
 8020fe4:	dc18      	bgt.n	8021018 <USBD_Get_USB_Status+0x56>
 8020fe6:	2b00      	cmp	r3, #0
 8020fe8:	d002      	beq.n	8020ff0 <USBD_Get_USB_Status+0x2e>
 8020fea:	2b01      	cmp	r3, #1
 8020fec:	d005      	beq.n	8020ffa <USBD_Get_USB_Status+0x38>
 8020fee:	e013      	b.n	8021018 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020ff0:	230f      	movs	r3, #15
 8020ff2:	18fb      	adds	r3, r7, r3
 8020ff4:	2200      	movs	r2, #0
 8020ff6:	701a      	strb	r2, [r3, #0]
    break;
 8020ff8:	e013      	b.n	8021022 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020ffa:	230f      	movs	r3, #15
 8020ffc:	18fb      	adds	r3, r7, r3
 8020ffe:	2202      	movs	r2, #2
 8021000:	701a      	strb	r2, [r3, #0]
    break;
 8021002:	e00e      	b.n	8021022 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8021004:	230f      	movs	r3, #15
 8021006:	18fb      	adds	r3, r7, r3
 8021008:	2201      	movs	r2, #1
 802100a:	701a      	strb	r2, [r3, #0]
    break;
 802100c:	e009      	b.n	8021022 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802100e:	230f      	movs	r3, #15
 8021010:	18fb      	adds	r3, r7, r3
 8021012:	2202      	movs	r2, #2
 8021014:	701a      	strb	r2, [r3, #0]
    break;
 8021016:	e004      	b.n	8021022 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8021018:	230f      	movs	r3, #15
 802101a:	18fb      	adds	r3, r7, r3
 802101c:	2202      	movs	r2, #2
 802101e:	701a      	strb	r2, [r3, #0]
    break;
 8021020:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8021022:	230f      	movs	r3, #15
 8021024:	18fb      	adds	r3, r7, r3
 8021026:	781b      	ldrb	r3, [r3, #0]
}
 8021028:	0018      	movs	r0, r3
 802102a:	46bd      	mov	sp, r7
 802102c:	b004      	add	sp, #16
 802102e:	bd80      	pop	{r7, pc}

08021030 <arm_cfft_radix4by2_q31>:
 8021030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021032:	465f      	mov	r7, fp
 8021034:	4656      	mov	r6, sl
 8021036:	464d      	mov	r5, r9
 8021038:	4644      	mov	r4, r8
 802103a:	000b      	movs	r3, r1
 802103c:	b4f0      	push	{r4, r5, r6, r7}
 802103e:	085b      	lsrs	r3, r3, #1
 8021040:	b08f      	sub	sp, #60	@ 0x3c
 8021042:	910a      	str	r1, [sp, #40]	@ 0x28
 8021044:	0007      	movs	r7, r0
 8021046:	9009      	str	r0, [sp, #36]	@ 0x24
 8021048:	0011      	movs	r1, r2
 802104a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802104c:	930c      	str	r3, [sp, #48]	@ 0x30
 802104e:	2b00      	cmp	r3, #0
 8021050:	d100      	bne.n	8021054 <arm_cfft_radix4by2_q31+0x24>
 8021052:	e0a0      	b.n	8021196 <arm_cfft_radix4by2_q31+0x166>
 8021054:	0002      	movs	r2, r0
 8021056:	00db      	lsls	r3, r3, #3
 8021058:	3204      	adds	r2, #4
 802105a:	4691      	mov	r9, r2
 802105c:	4698      	mov	r8, r3
 802105e:	000a      	movs	r2, r1
 8021060:	464e      	mov	r6, r9
 8021062:	4442      	add	r2, r8
 8021064:	4699      	mov	r9, r3
 8021066:	4688      	mov	r8, r1
 8021068:	9208      	str	r2, [sp, #32]
 802106a:	900d      	str	r0, [sp, #52]	@ 0x34
 802106c:	4643      	mov	r3, r8
 802106e:	681b      	ldr	r3, [r3, #0]
 8021070:	469b      	mov	fp, r3
 8021072:	4643      	mov	r3, r8
 8021074:	685b      	ldr	r3, [r3, #4]
 8021076:	469a      	mov	sl, r3
 8021078:	683b      	ldr	r3, [r7, #0]
 802107a:	109c      	asrs	r4, r3, #2
 802107c:	464b      	mov	r3, r9
 802107e:	58fb      	ldr	r3, [r7, r3]
 8021080:	109a      	asrs	r2, r3, #2
 8021082:	18a3      	adds	r3, r4, r2
 8021084:	603b      	str	r3, [r7, #0]
 8021086:	6833      	ldr	r3, [r6, #0]
 8021088:	1aa4      	subs	r4, r4, r2
 802108a:	109d      	asrs	r5, r3, #2
 802108c:	464b      	mov	r3, r9
 802108e:	58f3      	ldr	r3, [r6, r3]
 8021090:	17e2      	asrs	r2, r4, #31
 8021092:	109b      	asrs	r3, r3, #2
 8021094:	18e9      	adds	r1, r5, r3
 8021096:	6031      	str	r1, [r6, #0]
 8021098:	0011      	movs	r1, r2
 802109a:	465a      	mov	r2, fp
 802109c:	17d2      	asrs	r2, r2, #31
 802109e:	0010      	movs	r0, r2
 80210a0:	4652      	mov	r2, sl
 80210a2:	1aed      	subs	r5, r5, r3
 80210a4:	17eb      	asrs	r3, r5, #31
 80210a6:	17d2      	asrs	r2, r2, #31
 80210a8:	9307      	str	r3, [sp, #28]
 80210aa:	9204      	str	r2, [sp, #16]
 80210ac:	0003      	movs	r3, r0
 80210ae:	465a      	mov	r2, fp
 80210b0:	9006      	str	r0, [sp, #24]
 80210b2:	0020      	movs	r0, r4
 80210b4:	9105      	str	r1, [sp, #20]
 80210b6:	f7df fa83 	bl	80005c0 <__aeabi_lmul>
 80210ba:	2280      	movs	r2, #128	@ 0x80
 80210bc:	2300      	movs	r3, #0
 80210be:	0612      	lsls	r2, r2, #24
 80210c0:	1880      	adds	r0, r0, r2
 80210c2:	4159      	adcs	r1, r3
 80210c4:	2300      	movs	r3, #0
 80210c6:	9101      	str	r1, [sp, #4]
 80210c8:	9300      	str	r3, [sp, #0]
 80210ca:	4652      	mov	r2, sl
 80210cc:	9b04      	ldr	r3, [sp, #16]
 80210ce:	0028      	movs	r0, r5
 80210d0:	17e9      	asrs	r1, r5, #31
 80210d2:	f7df fa75 	bl	80005c0 <__aeabi_lmul>
 80210d6:	9a00      	ldr	r2, [sp, #0]
 80210d8:	9b01      	ldr	r3, [sp, #4]
 80210da:	1880      	adds	r0, r0, r2
 80210dc:	4159      	adcs	r1, r3
 80210de:	2280      	movs	r2, #128	@ 0x80
 80210e0:	2300      	movs	r3, #0
 80210e2:	0612      	lsls	r2, r2, #24
 80210e4:	1880      	adds	r0, r0, r2
 80210e6:	4159      	adcs	r1, r3
 80210e8:	464a      	mov	r2, r9
 80210ea:	004b      	lsls	r3, r1, #1
 80210ec:	50bb      	str	r3, [r7, r2]
 80210ee:	4658      	mov	r0, fp
 80210f0:	002a      	movs	r2, r5
 80210f2:	9b07      	ldr	r3, [sp, #28]
 80210f4:	9906      	ldr	r1, [sp, #24]
 80210f6:	f7df fa63 	bl	80005c0 <__aeabi_lmul>
 80210fa:	2280      	movs	r2, #128	@ 0x80
 80210fc:	2300      	movs	r3, #0
 80210fe:	0612      	lsls	r2, r2, #24
 8021100:	1880      	adds	r0, r0, r2
 8021102:	4159      	adcs	r1, r3
 8021104:	2000      	movs	r0, #0
 8021106:	9103      	str	r1, [sp, #12]
 8021108:	9002      	str	r0, [sp, #8]
 802110a:	4652      	mov	r2, sl
 802110c:	9b04      	ldr	r3, [sp, #16]
 802110e:	0020      	movs	r0, r4
 8021110:	9905      	ldr	r1, [sp, #20]
 8021112:	f7df fa55 	bl	80005c0 <__aeabi_lmul>
 8021116:	9a02      	ldr	r2, [sp, #8]
 8021118:	9b03      	ldr	r3, [sp, #12]
 802111a:	1a12      	subs	r2, r2, r0
 802111c:	418b      	sbcs	r3, r1
 802111e:	2080      	movs	r0, #128	@ 0x80
 8021120:	2100      	movs	r1, #0
 8021122:	0600      	lsls	r0, r0, #24
 8021124:	1812      	adds	r2, r2, r0
 8021126:	414b      	adcs	r3, r1
 8021128:	464a      	mov	r2, r9
 802112a:	005b      	lsls	r3, r3, #1
 802112c:	50b3      	str	r3, [r6, r2]
 802112e:	2308      	movs	r3, #8
 8021130:	469c      	mov	ip, r3
 8021132:	9b08      	ldr	r3, [sp, #32]
 8021134:	44e0      	add	r8, ip
 8021136:	3708      	adds	r7, #8
 8021138:	3608      	adds	r6, #8
 802113a:	4598      	cmp	r8, r3
 802113c:	d196      	bne.n	802106c <arm_cfft_radix4by2_q31+0x3c>
 802113e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8021140:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021142:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021144:	2302      	movs	r3, #2
 8021146:	003a      	movs	r2, r7
 8021148:	0029      	movs	r1, r5
 802114a:	0020      	movs	r0, r4
 802114c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802114e:	f000 f957 	bl	8021400 <arm_radix4_butterfly_q31>
 8021152:	46a4      	mov	ip, r4
 8021154:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021156:	2302      	movs	r3, #2
 8021158:	0088      	lsls	r0, r1, #2
 802115a:	4460      	add	r0, ip
 802115c:	003a      	movs	r2, r7
 802115e:	0029      	movs	r1, r5
 8021160:	f000 f94e 	bl	8021400 <arm_radix4_butterfly_q31>
 8021164:	46a4      	mov	ip, r4
 8021166:	0128      	lsls	r0, r5, #4
 8021168:	4460      	add	r0, ip
 802116a:	6833      	ldr	r3, [r6, #0]
 802116c:	005b      	lsls	r3, r3, #1
 802116e:	6033      	str	r3, [r6, #0]
 8021170:	6873      	ldr	r3, [r6, #4]
 8021172:	005b      	lsls	r3, r3, #1
 8021174:	6073      	str	r3, [r6, #4]
 8021176:	68b3      	ldr	r3, [r6, #8]
 8021178:	005b      	lsls	r3, r3, #1
 802117a:	60b3      	str	r3, [r6, #8]
 802117c:	68f3      	ldr	r3, [r6, #12]
 802117e:	005b      	lsls	r3, r3, #1
 8021180:	60f3      	str	r3, [r6, #12]
 8021182:	3610      	adds	r6, #16
 8021184:	42b0      	cmp	r0, r6
 8021186:	d1f0      	bne.n	802116a <arm_cfft_radix4by2_q31+0x13a>
 8021188:	b00f      	add	sp, #60	@ 0x3c
 802118a:	bc3c      	pop	{r2, r3, r4, r5}
 802118c:	4690      	mov	r8, r2
 802118e:	4699      	mov	r9, r3
 8021190:	46a2      	mov	sl, r4
 8021192:	46ab      	mov	fp, r5
 8021194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021196:	2302      	movs	r3, #2
 8021198:	2100      	movs	r1, #0
 802119a:	0015      	movs	r5, r2
 802119c:	f000 f930 	bl	8021400 <arm_radix4_butterfly_q31>
 80211a0:	46bc      	mov	ip, r7
 80211a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211a4:	002a      	movs	r2, r5
 80211a6:	0098      	lsls	r0, r3, #2
 80211a8:	4460      	add	r0, ip
 80211aa:	2302      	movs	r3, #2
 80211ac:	2100      	movs	r1, #0
 80211ae:	f000 f927 	bl	8021400 <arm_radix4_butterfly_q31>
 80211b2:	e7e9      	b.n	8021188 <arm_cfft_radix4by2_q31+0x158>

080211b4 <arm_cfft_radix4by2_inverse_q31>:
 80211b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211b6:	465f      	mov	r7, fp
 80211b8:	4656      	mov	r6, sl
 80211ba:	464d      	mov	r5, r9
 80211bc:	4644      	mov	r4, r8
 80211be:	000b      	movs	r3, r1
 80211c0:	b4f0      	push	{r4, r5, r6, r7}
 80211c2:	085b      	lsrs	r3, r3, #1
 80211c4:	b08f      	sub	sp, #60	@ 0x3c
 80211c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80211c8:	0007      	movs	r7, r0
 80211ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80211cc:	0011      	movs	r1, r2
 80211ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 80211d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80211d2:	2b00      	cmp	r3, #0
 80211d4:	d100      	bne.n	80211d8 <arm_cfft_radix4by2_inverse_q31+0x24>
 80211d6:	e0a0      	b.n	802131a <arm_cfft_radix4by2_inverse_q31+0x166>
 80211d8:	0002      	movs	r2, r0
 80211da:	00db      	lsls	r3, r3, #3
 80211dc:	3204      	adds	r2, #4
 80211de:	4691      	mov	r9, r2
 80211e0:	4698      	mov	r8, r3
 80211e2:	000a      	movs	r2, r1
 80211e4:	464e      	mov	r6, r9
 80211e6:	4442      	add	r2, r8
 80211e8:	4699      	mov	r9, r3
 80211ea:	4688      	mov	r8, r1
 80211ec:	9208      	str	r2, [sp, #32]
 80211ee:	900d      	str	r0, [sp, #52]	@ 0x34
 80211f0:	4643      	mov	r3, r8
 80211f2:	681b      	ldr	r3, [r3, #0]
 80211f4:	469b      	mov	fp, r3
 80211f6:	4643      	mov	r3, r8
 80211f8:	685b      	ldr	r3, [r3, #4]
 80211fa:	469a      	mov	sl, r3
 80211fc:	683b      	ldr	r3, [r7, #0]
 80211fe:	109c      	asrs	r4, r3, #2
 8021200:	464b      	mov	r3, r9
 8021202:	58fb      	ldr	r3, [r7, r3]
 8021204:	109a      	asrs	r2, r3, #2
 8021206:	18a3      	adds	r3, r4, r2
 8021208:	603b      	str	r3, [r7, #0]
 802120a:	6833      	ldr	r3, [r6, #0]
 802120c:	1aa4      	subs	r4, r4, r2
 802120e:	109d      	asrs	r5, r3, #2
 8021210:	464b      	mov	r3, r9
 8021212:	58f3      	ldr	r3, [r6, r3]
 8021214:	17e2      	asrs	r2, r4, #31
 8021216:	109b      	asrs	r3, r3, #2
 8021218:	18e9      	adds	r1, r5, r3
 802121a:	6031      	str	r1, [r6, #0]
 802121c:	0011      	movs	r1, r2
 802121e:	465a      	mov	r2, fp
 8021220:	17d2      	asrs	r2, r2, #31
 8021222:	0010      	movs	r0, r2
 8021224:	4652      	mov	r2, sl
 8021226:	1aed      	subs	r5, r5, r3
 8021228:	17eb      	asrs	r3, r5, #31
 802122a:	17d2      	asrs	r2, r2, #31
 802122c:	9307      	str	r3, [sp, #28]
 802122e:	9204      	str	r2, [sp, #16]
 8021230:	0003      	movs	r3, r0
 8021232:	465a      	mov	r2, fp
 8021234:	9006      	str	r0, [sp, #24]
 8021236:	0020      	movs	r0, r4
 8021238:	9105      	str	r1, [sp, #20]
 802123a:	f7df f9c1 	bl	80005c0 <__aeabi_lmul>
 802123e:	2280      	movs	r2, #128	@ 0x80
 8021240:	2300      	movs	r3, #0
 8021242:	0612      	lsls	r2, r2, #24
 8021244:	1880      	adds	r0, r0, r2
 8021246:	4159      	adcs	r1, r3
 8021248:	2300      	movs	r3, #0
 802124a:	9101      	str	r1, [sp, #4]
 802124c:	9300      	str	r3, [sp, #0]
 802124e:	4652      	mov	r2, sl
 8021250:	9b04      	ldr	r3, [sp, #16]
 8021252:	0028      	movs	r0, r5
 8021254:	17e9      	asrs	r1, r5, #31
 8021256:	f7df f9b3 	bl	80005c0 <__aeabi_lmul>
 802125a:	9a00      	ldr	r2, [sp, #0]
 802125c:	9b01      	ldr	r3, [sp, #4]
 802125e:	1a12      	subs	r2, r2, r0
 8021260:	418b      	sbcs	r3, r1
 8021262:	2080      	movs	r0, #128	@ 0x80
 8021264:	2100      	movs	r1, #0
 8021266:	0600      	lsls	r0, r0, #24
 8021268:	1812      	adds	r2, r2, r0
 802126a:	414b      	adcs	r3, r1
 802126c:	464a      	mov	r2, r9
 802126e:	005b      	lsls	r3, r3, #1
 8021270:	50bb      	str	r3, [r7, r2]
 8021272:	4658      	mov	r0, fp
 8021274:	002a      	movs	r2, r5
 8021276:	9b07      	ldr	r3, [sp, #28]
 8021278:	9906      	ldr	r1, [sp, #24]
 802127a:	f7df f9a1 	bl	80005c0 <__aeabi_lmul>
 802127e:	2280      	movs	r2, #128	@ 0x80
 8021280:	2300      	movs	r3, #0
 8021282:	0612      	lsls	r2, r2, #24
 8021284:	1880      	adds	r0, r0, r2
 8021286:	4159      	adcs	r1, r3
 8021288:	2000      	movs	r0, #0
 802128a:	9103      	str	r1, [sp, #12]
 802128c:	9002      	str	r0, [sp, #8]
 802128e:	4652      	mov	r2, sl
 8021290:	9b04      	ldr	r3, [sp, #16]
 8021292:	0020      	movs	r0, r4
 8021294:	9905      	ldr	r1, [sp, #20]
 8021296:	f7df f993 	bl	80005c0 <__aeabi_lmul>
 802129a:	9b02      	ldr	r3, [sp, #8]
 802129c:	9c03      	ldr	r4, [sp, #12]
 802129e:	18c0      	adds	r0, r0, r3
 80212a0:	4161      	adcs	r1, r4
 80212a2:	2380      	movs	r3, #128	@ 0x80
 80212a4:	2400      	movs	r4, #0
 80212a6:	061b      	lsls	r3, r3, #24
 80212a8:	18c0      	adds	r0, r0, r3
 80212aa:	4161      	adcs	r1, r4
 80212ac:	464a      	mov	r2, r9
 80212ae:	004b      	lsls	r3, r1, #1
 80212b0:	50b3      	str	r3, [r6, r2]
 80212b2:	2308      	movs	r3, #8
 80212b4:	469c      	mov	ip, r3
 80212b6:	9b08      	ldr	r3, [sp, #32]
 80212b8:	44e0      	add	r8, ip
 80212ba:	3708      	adds	r7, #8
 80212bc:	3608      	adds	r6, #8
 80212be:	4598      	cmp	r8, r3
 80212c0:	d196      	bne.n	80211f0 <arm_cfft_radix4by2_inverse_q31+0x3c>
 80212c2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80212c4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80212c6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80212c8:	2302      	movs	r3, #2
 80212ca:	003a      	movs	r2, r7
 80212cc:	0029      	movs	r1, r5
 80212ce:	0020      	movs	r0, r4
 80212d0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80212d2:	f000 fb3b 	bl	802194c <arm_radix4_butterfly_inverse_q31>
 80212d6:	46a4      	mov	ip, r4
 80212d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80212da:	2302      	movs	r3, #2
 80212dc:	0088      	lsls	r0, r1, #2
 80212de:	4460      	add	r0, ip
 80212e0:	003a      	movs	r2, r7
 80212e2:	0029      	movs	r1, r5
 80212e4:	f000 fb32 	bl	802194c <arm_radix4_butterfly_inverse_q31>
 80212e8:	46a4      	mov	ip, r4
 80212ea:	0128      	lsls	r0, r5, #4
 80212ec:	4460      	add	r0, ip
 80212ee:	6833      	ldr	r3, [r6, #0]
 80212f0:	005b      	lsls	r3, r3, #1
 80212f2:	6033      	str	r3, [r6, #0]
 80212f4:	6873      	ldr	r3, [r6, #4]
 80212f6:	005b      	lsls	r3, r3, #1
 80212f8:	6073      	str	r3, [r6, #4]
 80212fa:	68b3      	ldr	r3, [r6, #8]
 80212fc:	005b      	lsls	r3, r3, #1
 80212fe:	60b3      	str	r3, [r6, #8]
 8021300:	68f3      	ldr	r3, [r6, #12]
 8021302:	005b      	lsls	r3, r3, #1
 8021304:	60f3      	str	r3, [r6, #12]
 8021306:	3610      	adds	r6, #16
 8021308:	42b0      	cmp	r0, r6
 802130a:	d1f0      	bne.n	80212ee <arm_cfft_radix4by2_inverse_q31+0x13a>
 802130c:	b00f      	add	sp, #60	@ 0x3c
 802130e:	bc3c      	pop	{r2, r3, r4, r5}
 8021310:	4690      	mov	r8, r2
 8021312:	4699      	mov	r9, r3
 8021314:	46a2      	mov	sl, r4
 8021316:	46ab      	mov	fp, r5
 8021318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802131a:	2302      	movs	r3, #2
 802131c:	2100      	movs	r1, #0
 802131e:	0015      	movs	r5, r2
 8021320:	f000 fb14 	bl	802194c <arm_radix4_butterfly_inverse_q31>
 8021324:	46bc      	mov	ip, r7
 8021326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021328:	002a      	movs	r2, r5
 802132a:	0098      	lsls	r0, r3, #2
 802132c:	4460      	add	r0, ip
 802132e:	2302      	movs	r3, #2
 8021330:	2100      	movs	r1, #0
 8021332:	f000 fb0b 	bl	802194c <arm_radix4_butterfly_inverse_q31>
 8021336:	e7e9      	b.n	802130c <arm_cfft_radix4by2_inverse_q31+0x158>

08021338 <arm_cfft_q31>:
 8021338:	b570      	push	{r4, r5, r6, lr}
 802133a:	001e      	movs	r6, r3
 802133c:	2380      	movs	r3, #128	@ 0x80
 802133e:	000d      	movs	r5, r1
 8021340:	0004      	movs	r4, r0
 8021342:	8801      	ldrh	r1, [r0, #0]
 8021344:	005b      	lsls	r3, r3, #1
 8021346:	2a01      	cmp	r2, #1
 8021348:	d028      	beq.n	802139c <arm_cfft_q31+0x64>
 802134a:	4299      	cmp	r1, r3
 802134c:	d020      	beq.n	8021390 <arm_cfft_q31+0x58>
 802134e:	d812      	bhi.n	8021376 <arm_cfft_q31+0x3e>
 8021350:	2920      	cmp	r1, #32
 8021352:	d004      	beq.n	802135e <arm_cfft_q31+0x26>
 8021354:	d949      	bls.n	80213ea <arm_cfft_q31+0xb2>
 8021356:	2940      	cmp	r1, #64	@ 0x40
 8021358:	d01a      	beq.n	8021390 <arm_cfft_q31+0x58>
 802135a:	2980      	cmp	r1, #128	@ 0x80
 802135c:	d103      	bne.n	8021366 <arm_cfft_q31+0x2e>
 802135e:	6862      	ldr	r2, [r4, #4]
 8021360:	0028      	movs	r0, r5
 8021362:	f7ff fe65 	bl	8021030 <arm_cfft_radix4by2_q31>
 8021366:	2e00      	cmp	r6, #0
 8021368:	d004      	beq.n	8021374 <arm_cfft_q31+0x3c>
 802136a:	68a2      	ldr	r2, [r4, #8]
 802136c:	89a1      	ldrh	r1, [r4, #12]
 802136e:	0028      	movs	r0, r5
 8021370:	f7de feca 	bl	8000108 <arm_bitreversal_32>
 8021374:	bd70      	pop	{r4, r5, r6, pc}
 8021376:	2380      	movs	r3, #128	@ 0x80
 8021378:	00db      	lsls	r3, r3, #3
 802137a:	4299      	cmp	r1, r3
 802137c:	d008      	beq.n	8021390 <arm_cfft_q31+0x58>
 802137e:	d92f      	bls.n	80213e0 <arm_cfft_q31+0xa8>
 8021380:	2380      	movs	r3, #128	@ 0x80
 8021382:	011b      	lsls	r3, r3, #4
 8021384:	4299      	cmp	r1, r3
 8021386:	d0ea      	beq.n	802135e <arm_cfft_q31+0x26>
 8021388:	2380      	movs	r3, #128	@ 0x80
 802138a:	015b      	lsls	r3, r3, #5
 802138c:	4299      	cmp	r1, r3
 802138e:	d1ea      	bne.n	8021366 <arm_cfft_q31+0x2e>
 8021390:	2301      	movs	r3, #1
 8021392:	6862      	ldr	r2, [r4, #4]
 8021394:	0028      	movs	r0, r5
 8021396:	f000 f833 	bl	8021400 <arm_radix4_butterfly_q31>
 802139a:	e7e4      	b.n	8021366 <arm_cfft_q31+0x2e>
 802139c:	4299      	cmp	r1, r3
 802139e:	d019      	beq.n	80213d4 <arm_cfft_q31+0x9c>
 80213a0:	d80b      	bhi.n	80213ba <arm_cfft_q31+0x82>
 80213a2:	2920      	cmp	r1, #32
 80213a4:	d004      	beq.n	80213b0 <arm_cfft_q31+0x78>
 80213a6:	d928      	bls.n	80213fa <arm_cfft_q31+0xc2>
 80213a8:	2940      	cmp	r1, #64	@ 0x40
 80213aa:	d013      	beq.n	80213d4 <arm_cfft_q31+0x9c>
 80213ac:	2980      	cmp	r1, #128	@ 0x80
 80213ae:	d1da      	bne.n	8021366 <arm_cfft_q31+0x2e>
 80213b0:	6862      	ldr	r2, [r4, #4]
 80213b2:	0028      	movs	r0, r5
 80213b4:	f7ff fefe 	bl	80211b4 <arm_cfft_radix4by2_inverse_q31>
 80213b8:	e7d5      	b.n	8021366 <arm_cfft_q31+0x2e>
 80213ba:	2380      	movs	r3, #128	@ 0x80
 80213bc:	00db      	lsls	r3, r3, #3
 80213be:	4299      	cmp	r1, r3
 80213c0:	d008      	beq.n	80213d4 <arm_cfft_q31+0x9c>
 80213c2:	d915      	bls.n	80213f0 <arm_cfft_q31+0xb8>
 80213c4:	2380      	movs	r3, #128	@ 0x80
 80213c6:	011b      	lsls	r3, r3, #4
 80213c8:	4299      	cmp	r1, r3
 80213ca:	d0f1      	beq.n	80213b0 <arm_cfft_q31+0x78>
 80213cc:	2380      	movs	r3, #128	@ 0x80
 80213ce:	015b      	lsls	r3, r3, #5
 80213d0:	4299      	cmp	r1, r3
 80213d2:	d1c8      	bne.n	8021366 <arm_cfft_q31+0x2e>
 80213d4:	2301      	movs	r3, #1
 80213d6:	6862      	ldr	r2, [r4, #4]
 80213d8:	0028      	movs	r0, r5
 80213da:	f000 fab7 	bl	802194c <arm_radix4_butterfly_inverse_q31>
 80213de:	e7c2      	b.n	8021366 <arm_cfft_q31+0x2e>
 80213e0:	2380      	movs	r3, #128	@ 0x80
 80213e2:	009b      	lsls	r3, r3, #2
 80213e4:	4299      	cmp	r1, r3
 80213e6:	d0ba      	beq.n	802135e <arm_cfft_q31+0x26>
 80213e8:	e7bd      	b.n	8021366 <arm_cfft_q31+0x2e>
 80213ea:	2910      	cmp	r1, #16
 80213ec:	d1bb      	bne.n	8021366 <arm_cfft_q31+0x2e>
 80213ee:	e7cf      	b.n	8021390 <arm_cfft_q31+0x58>
 80213f0:	2380      	movs	r3, #128	@ 0x80
 80213f2:	009b      	lsls	r3, r3, #2
 80213f4:	4299      	cmp	r1, r3
 80213f6:	d0db      	beq.n	80213b0 <arm_cfft_q31+0x78>
 80213f8:	e7b5      	b.n	8021366 <arm_cfft_q31+0x2e>
 80213fa:	2910      	cmp	r1, #16
 80213fc:	d1b3      	bne.n	8021366 <arm_cfft_q31+0x2e>
 80213fe:	e7e9      	b.n	80213d4 <arm_cfft_q31+0x9c>

08021400 <arm_radix4_butterfly_q31>:
 8021400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021402:	464d      	mov	r5, r9
 8021404:	4644      	mov	r4, r8
 8021406:	465f      	mov	r7, fp
 8021408:	4656      	mov	r6, sl
 802140a:	469c      	mov	ip, r3
 802140c:	b4f0      	push	{r4, r5, r6, r7}
 802140e:	b0a7      	sub	sp, #156	@ 0x9c
 8021410:	9114      	str	r1, [sp, #80]	@ 0x50
 8021412:	0889      	lsrs	r1, r1, #2
 8021414:	9310      	str	r3, [sp, #64]	@ 0x40
 8021416:	00cb      	lsls	r3, r1, #3
 8021418:	0015      	movs	r5, r2
 802141a:	9223      	str	r2, [sp, #140]	@ 0x8c
 802141c:	18c2      	adds	r2, r0, r3
 802141e:	000c      	movs	r4, r1
 8021420:	469a      	mov	sl, r3
 8021422:	9124      	str	r1, [sp, #144]	@ 0x90
 8021424:	18d1      	adds	r1, r2, r3
 8021426:	4663      	mov	r3, ip
 8021428:	468b      	mov	fp, r1
 802142a:	0119      	lsls	r1, r3, #4
 802142c:	910d      	str	r1, [sp, #52]	@ 0x34
 802142e:	00d9      	lsls	r1, r3, #3
 8021430:	005b      	lsls	r3, r3, #1
 8021432:	4463      	add	r3, ip
 8021434:	910e      	str	r1, [sp, #56]	@ 0x38
 8021436:	00d9      	lsls	r1, r3, #3
 8021438:	465b      	mov	r3, fp
 802143a:	44da      	add	sl, fp
 802143c:	4690      	mov	r8, r2
 802143e:	4683      	mov	fp, r0
 8021440:	4699      	mov	r9, r3
 8021442:	9022      	str	r0, [sp, #136]	@ 0x88
 8021444:	9025      	str	r0, [sp, #148]	@ 0x94
 8021446:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021448:	9502      	str	r5, [sp, #8]
 802144a:	9500      	str	r5, [sp, #0]
 802144c:	9501      	str	r5, [sp, #4]
 802144e:	9407      	str	r4, [sp, #28]
 8021450:	465b      	mov	r3, fp
 8021452:	681b      	ldr	r3, [r3, #0]
 8021454:	4642      	mov	r2, r8
 8021456:	111c      	asrs	r4, r3, #4
 8021458:	464b      	mov	r3, r9
 802145a:	4658      	mov	r0, fp
 802145c:	681b      	ldr	r3, [r3, #0]
 802145e:	6812      	ldr	r2, [r2, #0]
 8021460:	111b      	asrs	r3, r3, #4
 8021462:	18e7      	adds	r7, r4, r3
 8021464:	1ae3      	subs	r3, r4, r3
 8021466:	1114      	asrs	r4, r2, #4
 8021468:	4652      	mov	r2, sl
 802146a:	6840      	ldr	r0, [r0, #4]
 802146c:	6812      	ldr	r2, [r2, #0]
 802146e:	1105      	asrs	r5, r0, #4
 8021470:	4648      	mov	r0, r9
 8021472:	9303      	str	r3, [sp, #12]
 8021474:	1113      	asrs	r3, r2, #4
 8021476:	18e2      	adds	r2, r4, r3
 8021478:	465c      	mov	r4, fp
 802147a:	6840      	ldr	r0, [r0, #4]
 802147c:	1103      	asrs	r3, r0, #4
 802147e:	18ee      	adds	r6, r5, r3
 8021480:	1ae8      	subs	r0, r5, r3
 8021482:	18bb      	adds	r3, r7, r2
 8021484:	6023      	str	r3, [r4, #0]
 8021486:	4644      	mov	r4, r8
 8021488:	6864      	ldr	r4, [r4, #4]
 802148a:	9004      	str	r0, [sp, #16]
 802148c:	1125      	asrs	r5, r4, #4
 802148e:	4654      	mov	r4, sl
 8021490:	6864      	ldr	r4, [r4, #4]
 8021492:	1123      	asrs	r3, r4, #4
 8021494:	465c      	mov	r4, fp
 8021496:	18eb      	adds	r3, r5, r3
 8021498:	18f1      	adds	r1, r6, r3
 802149a:	6061      	str	r1, [r4, #4]
 802149c:	4655      	mov	r5, sl
 802149e:	4644      	mov	r4, r8
 80214a0:	686d      	ldr	r5, [r5, #4]
 80214a2:	6864      	ldr	r4, [r4, #4]
 80214a4:	1129      	asrs	r1, r5, #4
 80214a6:	1124      	asrs	r4, r4, #4
 80214a8:	1a64      	subs	r4, r4, r1
 80214aa:	4641      	mov	r1, r8
 80214ac:	6809      	ldr	r1, [r1, #0]
 80214ae:	9405      	str	r4, [sp, #20]
 80214b0:	1108      	asrs	r0, r1, #4
 80214b2:	4651      	mov	r1, sl
 80214b4:	6809      	ldr	r1, [r1, #0]
 80214b6:	1abc      	subs	r4, r7, r2
 80214b8:	1109      	asrs	r1, r1, #4
 80214ba:	1a41      	subs	r1, r0, r1
 80214bc:	17e2      	asrs	r2, r4, #31
 80214be:	9106      	str	r1, [sp, #24]
 80214c0:	0011      	movs	r1, r2
 80214c2:	9a01      	ldr	r2, [sp, #4]
 80214c4:	9108      	str	r1, [sp, #32]
 80214c6:	6817      	ldr	r7, [r2, #0]
 80214c8:	17fd      	asrs	r5, r7, #31
 80214ca:	0028      	movs	r0, r5
 80214cc:	1af5      	subs	r5, r6, r3
 80214ce:	17ee      	asrs	r6, r5, #31
 80214d0:	960a      	str	r6, [sp, #40]	@ 0x28
 80214d2:	6856      	ldr	r6, [r2, #4]
 80214d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80214d6:	17f3      	asrs	r3, r6, #31
 80214d8:	003a      	movs	r2, r7
 80214da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80214dc:	0003      	movs	r3, r0
 80214de:	0020      	movs	r0, r4
 80214e0:	f7df f86e 	bl	80005c0 <__aeabi_lmul>
 80214e4:	0032      	movs	r2, r6
 80214e6:	17f3      	asrs	r3, r6, #31
 80214e8:	910c      	str	r1, [sp, #48]	@ 0x30
 80214ea:	0028      	movs	r0, r5
 80214ec:	17e9      	asrs	r1, r5, #31
 80214ee:	f7df f867 	bl	80005c0 <__aeabi_lmul>
 80214f2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80214f4:	002a      	movs	r2, r5
 80214f6:	4684      	mov	ip, r0
 80214f8:	4640      	mov	r0, r8
 80214fa:	4461      	add	r1, ip
 80214fc:	0049      	lsls	r1, r1, #1
 80214fe:	6001      	str	r1, [r0, #0]
 8021500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021504:	0038      	movs	r0, r7
 8021506:	f7df f85b 	bl	80005c0 <__aeabi_lmul>
 802150a:	0032      	movs	r2, r6
 802150c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802150e:	000d      	movs	r5, r1
 8021510:	0020      	movs	r0, r4
 8021512:	9908      	ldr	r1, [sp, #32]
 8021514:	f7df f854 	bl	80005c0 <__aeabi_lmul>
 8021518:	4646      	mov	r6, r8
 802151a:	1a6d      	subs	r5, r5, r1
 802151c:	006d      	lsls	r5, r5, #1
 802151e:	6075      	str	r5, [r6, #4]
 8021520:	9903      	ldr	r1, [sp, #12]
 8021522:	9d05      	ldr	r5, [sp, #20]
 8021524:	000c      	movs	r4, r1
 8021526:	46ac      	mov	ip, r5
 8021528:	4464      	add	r4, ip
 802152a:	17e6      	asrs	r6, r4, #31
 802152c:	0031      	movs	r1, r6
 802152e:	9b00      	ldr	r3, [sp, #0]
 8021530:	9804      	ldr	r0, [sp, #16]
 8021532:	681e      	ldr	r6, [r3, #0]
 8021534:	17f7      	asrs	r7, r6, #31
 8021536:	9709      	str	r7, [sp, #36]	@ 0x24
 8021538:	9f06      	ldr	r7, [sp, #24]
 802153a:	0032      	movs	r2, r6
 802153c:	1bc7      	subs	r7, r0, r7
 802153e:	17fd      	asrs	r5, r7, #31
 8021540:	950a      	str	r5, [sp, #40]	@ 0x28
 8021542:	685d      	ldr	r5, [r3, #4]
 8021544:	17f3      	asrs	r3, r6, #31
 8021546:	17e8      	asrs	r0, r5, #31
 8021548:	900b      	str	r0, [sp, #44]	@ 0x2c
 802154a:	0020      	movs	r0, r4
 802154c:	9108      	str	r1, [sp, #32]
 802154e:	f7df f837 	bl	80005c0 <__aeabi_lmul>
 8021552:	002a      	movs	r2, r5
 8021554:	17eb      	asrs	r3, r5, #31
 8021556:	910c      	str	r1, [sp, #48]	@ 0x30
 8021558:	0038      	movs	r0, r7
 802155a:	17f9      	asrs	r1, r7, #31
 802155c:	f7df f830 	bl	80005c0 <__aeabi_lmul>
 8021560:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021562:	003a      	movs	r2, r7
 8021564:	4684      	mov	ip, r0
 8021566:	4648      	mov	r0, r9
 8021568:	4461      	add	r1, ip
 802156a:	0049      	lsls	r1, r1, #1
 802156c:	6001      	str	r1, [r0, #0]
 802156e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021570:	0030      	movs	r0, r6
 8021572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021574:	f7df f824 	bl	80005c0 <__aeabi_lmul>
 8021578:	002a      	movs	r2, r5
 802157a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802157c:	000e      	movs	r6, r1
 802157e:	0020      	movs	r0, r4
 8021580:	9908      	ldr	r1, [sp, #32]
 8021582:	f7df f81d 	bl	80005c0 <__aeabi_lmul>
 8021586:	464c      	mov	r4, r9
 8021588:	9d05      	ldr	r5, [sp, #20]
 802158a:	1a76      	subs	r6, r6, r1
 802158c:	9903      	ldr	r1, [sp, #12]
 802158e:	0076      	lsls	r6, r6, #1
 8021590:	6066      	str	r6, [r4, #4]
 8021592:	1b4c      	subs	r4, r1, r5
 8021594:	9e06      	ldr	r6, [sp, #24]
 8021596:	17e1      	asrs	r1, r4, #31
 8021598:	9103      	str	r1, [sp, #12]
 802159a:	9902      	ldr	r1, [sp, #8]
 802159c:	46b4      	mov	ip, r6
 802159e:	680f      	ldr	r7, [r1, #0]
 80215a0:	9804      	ldr	r0, [sp, #16]
 80215a2:	17fd      	asrs	r5, r7, #31
 80215a4:	002b      	movs	r3, r5
 80215a6:	684e      	ldr	r6, [r1, #4]
 80215a8:	4460      	add	r0, ip
 80215aa:	0005      	movs	r5, r0
 80215ac:	17c0      	asrs	r0, r0, #31
 80215ae:	9005      	str	r0, [sp, #20]
 80215b0:	17f0      	asrs	r0, r6, #31
 80215b2:	9006      	str	r0, [sp, #24]
 80215b4:	003a      	movs	r2, r7
 80215b6:	0020      	movs	r0, r4
 80215b8:	17e1      	asrs	r1, r4, #31
 80215ba:	9304      	str	r3, [sp, #16]
 80215bc:	f7df f800 	bl	80005c0 <__aeabi_lmul>
 80215c0:	0032      	movs	r2, r6
 80215c2:	9108      	str	r1, [sp, #32]
 80215c4:	17f3      	asrs	r3, r6, #31
 80215c6:	0028      	movs	r0, r5
 80215c8:	17e9      	asrs	r1, r5, #31
 80215ca:	f7de fff9 	bl	80005c0 <__aeabi_lmul>
 80215ce:	9808      	ldr	r0, [sp, #32]
 80215d0:	002a      	movs	r2, r5
 80215d2:	4684      	mov	ip, r0
 80215d4:	4650      	mov	r0, sl
 80215d6:	4461      	add	r1, ip
 80215d8:	0049      	lsls	r1, r1, #1
 80215da:	6001      	str	r1, [r0, #0]
 80215dc:	9b05      	ldr	r3, [sp, #20]
 80215de:	9904      	ldr	r1, [sp, #16]
 80215e0:	0038      	movs	r0, r7
 80215e2:	f7de ffed 	bl	80005c0 <__aeabi_lmul>
 80215e6:	0020      	movs	r0, r4
 80215e8:	2408      	movs	r4, #8
 80215ea:	000d      	movs	r5, r1
 80215ec:	0032      	movs	r2, r6
 80215ee:	9b06      	ldr	r3, [sp, #24]
 80215f0:	9903      	ldr	r1, [sp, #12]
 80215f2:	f7de ffe5 	bl	80005c0 <__aeabi_lmul>
 80215f6:	46a4      	mov	ip, r4
 80215f8:	4650      	mov	r0, sl
 80215fa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80215fc:	44e3      	add	fp, ip
 80215fe:	44e0      	add	r8, ip
 8021600:	44e1      	add	r9, ip
 8021602:	44e2      	add	sl, ip
 8021604:	46a4      	mov	ip, r4
 8021606:	1a6d      	subs	r5, r5, r1
 8021608:	006d      	lsls	r5, r5, #1
 802160a:	9a01      	ldr	r2, [sp, #4]
 802160c:	6045      	str	r5, [r0, #4]
 802160e:	9807      	ldr	r0, [sp, #28]
 8021610:	4462      	add	r2, ip
 8021612:	3801      	subs	r0, #1
 8021614:	9201      	str	r2, [sp, #4]
 8021616:	9007      	str	r0, [sp, #28]
 8021618:	9b00      	ldr	r3, [sp, #0]
 802161a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802161c:	9902      	ldr	r1, [sp, #8]
 802161e:	4694      	mov	ip, r2
 8021620:	4463      	add	r3, ip
 8021622:	9300      	str	r3, [sp, #0]
 8021624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021626:	469c      	mov	ip, r3
 8021628:	4461      	add	r1, ip
 802162a:	9102      	str	r1, [sp, #8]
 802162c:	2800      	cmp	r0, #0
 802162e:	d000      	beq.n	8021632 <arm_radix4_butterfly_q31+0x232>
 8021630:	e70e      	b.n	8021450 <arm_radix4_butterfly_q31+0x50>
 8021632:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021634:	009b      	lsls	r3, r3, #2
 8021636:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021638:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802163a:	9320      	str	r3, [sp, #128]	@ 0x80
 802163c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802163e:	2b04      	cmp	r3, #4
 8021640:	d800      	bhi.n	8021644 <arm_radix4_butterfly_q31+0x244>
 8021642:	e180      	b.n	8021946 <arm_radix4_butterfly_q31+0x546>
 8021644:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021646:	0893      	lsrs	r3, r2, #2
 8021648:	1e59      	subs	r1, r3, #1
 802164a:	9321      	str	r3, [sp, #132]	@ 0x84
 802164c:	00db      	lsls	r3, r3, #3
 802164e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021650:	00d3      	lsls	r3, r2, #3
 8021652:	9300      	str	r3, [sp, #0]
 8021654:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021656:	911a      	str	r1, [sp, #104]	@ 0x68
 8021658:	00da      	lsls	r2, r3, #3
 802165a:	921e      	str	r2, [sp, #120]	@ 0x78
 802165c:	011a      	lsls	r2, r3, #4
 802165e:	921d      	str	r2, [sp, #116]	@ 0x74
 8021660:	001a      	movs	r2, r3
 8021662:	4694      	mov	ip, r2
 8021664:	005b      	lsls	r3, r3, #1
 8021666:	4463      	add	r3, ip
 8021668:	00db      	lsls	r3, r3, #3
 802166a:	931c      	str	r3, [sp, #112]	@ 0x70
 802166c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802166e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021670:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021672:	9318      	str	r3, [sp, #96]	@ 0x60
 8021674:	9319      	str	r3, [sp, #100]	@ 0x64
 8021676:	9316      	str	r3, [sp, #88]	@ 0x58
 8021678:	2300      	movs	r3, #0
 802167a:	9315      	str	r3, [sp, #84]	@ 0x54
 802167c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802167e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021680:	681a      	ldr	r2, [r3, #0]
 8021682:	685b      	ldr	r3, [r3, #4]
 8021684:	9205      	str	r2, [sp, #20]
 8021686:	9306      	str	r3, [sp, #24]
 8021688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802168a:	468c      	mov	ip, r1
 802168c:	681a      	ldr	r2, [r3, #0]
 802168e:	685b      	ldr	r3, [r3, #4]
 8021690:	9207      	str	r2, [sp, #28]
 8021692:	9308      	str	r3, [sp, #32]
 8021694:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021696:	681a      	ldr	r2, [r3, #0]
 8021698:	685b      	ldr	r3, [r3, #4]
 802169a:	9209      	str	r2, [sp, #36]	@ 0x24
 802169c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802169e:	930a      	str	r3, [sp, #40]	@ 0x28
 80216a0:	0013      	movs	r3, r2
 80216a2:	4463      	add	r3, ip
 80216a4:	4698      	mov	r8, r3
 80216a6:	0013      	movs	r3, r2
 80216a8:	4442      	add	r2, r8
 80216aa:	4691      	mov	r9, r2
 80216ac:	001a      	movs	r2, r3
 80216ae:	444a      	add	r2, r9
 80216b0:	4692      	mov	sl, r2
 80216b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80216b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80216b6:	4293      	cmp	r3, r2
 80216b8:	d800      	bhi.n	80216bc <arm_radix4_butterfly_q31+0x2bc>
 80216ba:	e0dd      	b.n	8021878 <arm_radix4_butterfly_q31+0x478>
 80216bc:	4694      	mov	ip, r2
 80216be:	468b      	mov	fp, r1
 80216c0:	4644      	mov	r4, r8
 80216c2:	4655      	mov	r5, sl
 80216c4:	9b07      	ldr	r3, [sp, #28]
 80216c6:	17db      	asrs	r3, r3, #31
 80216c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80216ca:	9b08      	ldr	r3, [sp, #32]
 80216cc:	17db      	asrs	r3, r3, #31
 80216ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80216d0:	9b05      	ldr	r3, [sp, #20]
 80216d2:	17db      	asrs	r3, r3, #31
 80216d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80216d6:	9b06      	ldr	r3, [sp, #24]
 80216d8:	17db      	asrs	r3, r3, #31
 80216da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216de:	17db      	asrs	r3, r3, #31
 80216e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80216e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80216e4:	17db      	asrs	r3, r3, #31
 80216e6:	9311      	str	r3, [sp, #68]	@ 0x44
 80216e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80216ea:	4463      	add	r3, ip
 80216ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80216ee:	465b      	mov	r3, fp
 80216f0:	4659      	mov	r1, fp
 80216f2:	681a      	ldr	r2, [r3, #0]
 80216f4:	464b      	mov	r3, r9
 80216f6:	684f      	ldr	r7, [r1, #4]
 80216f8:	4649      	mov	r1, r9
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	18d6      	adds	r6, r2, r3
 80216fe:	1ad3      	subs	r3, r2, r3
 8021700:	9301      	str	r3, [sp, #4]
 8021702:	684b      	ldr	r3, [r1, #4]
 8021704:	18f8      	adds	r0, r7, r3
 8021706:	1af9      	subs	r1, r7, r3
 8021708:	6827      	ldr	r7, [r4, #0]
 802170a:	9102      	str	r1, [sp, #8]
 802170c:	003a      	movs	r2, r7
 802170e:	682f      	ldr	r7, [r5, #0]
 8021710:	46bc      	mov	ip, r7
 8021712:	465f      	mov	r7, fp
 8021714:	4462      	add	r2, ip
 8021716:	18b3      	adds	r3, r6, r2
 8021718:	109b      	asrs	r3, r3, #2
 802171a:	603b      	str	r3, [r7, #0]
 802171c:	6867      	ldr	r7, [r4, #4]
 802171e:	1ab6      	subs	r6, r6, r2
 8021720:	46b8      	mov	r8, r7
 8021722:	686f      	ldr	r7, [r5, #4]
 8021724:	17f2      	asrs	r2, r6, #31
 8021726:	46bc      	mov	ip, r7
 8021728:	44e0      	add	r8, ip
 802172a:	4643      	mov	r3, r8
 802172c:	465f      	mov	r7, fp
 802172e:	18c1      	adds	r1, r0, r3
 8021730:	1089      	asrs	r1, r1, #2
 8021732:	6079      	str	r1, [r7, #4]
 8021734:	9900      	ldr	r1, [sp, #0]
 8021736:	4690      	mov	r8, r2
 8021738:	468c      	mov	ip, r1
 802173a:	6867      	ldr	r7, [r4, #4]
 802173c:	6869      	ldr	r1, [r5, #4]
 802173e:	44e3      	add	fp, ip
 8021740:	1a7f      	subs	r7, r7, r1
 8021742:	9703      	str	r7, [sp, #12]
 8021744:	6829      	ldr	r1, [r5, #0]
 8021746:	6827      	ldr	r7, [r4, #0]
 8021748:	1a7f      	subs	r7, r7, r1
 802174a:	9704      	str	r7, [sp, #16]
 802174c:	1ac7      	subs	r7, r0, r3
 802174e:	17fa      	asrs	r2, r7, #31
 8021750:	4692      	mov	sl, r2
 8021752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021754:	9a07      	ldr	r2, [sp, #28]
 8021756:	0030      	movs	r0, r6
 8021758:	4641      	mov	r1, r8
 802175a:	f7de ff31 	bl	80005c0 <__aeabi_lmul>
 802175e:	9a08      	ldr	r2, [sp, #32]
 8021760:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021762:	9112      	str	r1, [sp, #72]	@ 0x48
 8021764:	0038      	movs	r0, r7
 8021766:	4651      	mov	r1, sl
 8021768:	f7de ff2a 	bl	80005c0 <__aeabi_lmul>
 802176c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802176e:	9a07      	ldr	r2, [sp, #28]
 8021770:	4684      	mov	ip, r0
 8021772:	4461      	add	r1, ip
 8021774:	1049      	asrs	r1, r1, #1
 8021776:	6021      	str	r1, [r4, #0]
 8021778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802177a:	0038      	movs	r0, r7
 802177c:	4651      	mov	r1, sl
 802177e:	f7de ff1f 	bl	80005c0 <__aeabi_lmul>
 8021782:	9a08      	ldr	r2, [sp, #32]
 8021784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021786:	000f      	movs	r7, r1
 8021788:	0030      	movs	r0, r6
 802178a:	4641      	mov	r1, r8
 802178c:	f7de ff18 	bl	80005c0 <__aeabi_lmul>
 8021790:	9b00      	ldr	r3, [sp, #0]
 8021792:	9a01      	ldr	r2, [sp, #4]
 8021794:	469c      	mov	ip, r3
 8021796:	9803      	ldr	r0, [sp, #12]
 8021798:	1a7f      	subs	r7, r7, r1
 802179a:	107f      	asrs	r7, r7, #1
 802179c:	6067      	str	r7, [r4, #4]
 802179e:	0016      	movs	r6, r2
 80217a0:	4464      	add	r4, ip
 80217a2:	4684      	mov	ip, r0
 80217a4:	4466      	add	r6, ip
 80217a6:	17f2      	asrs	r2, r6, #31
 80217a8:	4690      	mov	r8, r2
 80217aa:	9902      	ldr	r1, [sp, #8]
 80217ac:	9f04      	ldr	r7, [sp, #16]
 80217ae:	0030      	movs	r0, r6
 80217b0:	1bcf      	subs	r7, r1, r7
 80217b2:	17fa      	asrs	r2, r7, #31
 80217b4:	4692      	mov	sl, r2
 80217b6:	4641      	mov	r1, r8
 80217b8:	9a05      	ldr	r2, [sp, #20]
 80217ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80217bc:	f7de ff00 	bl	80005c0 <__aeabi_lmul>
 80217c0:	9a06      	ldr	r2, [sp, #24]
 80217c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80217c4:	9112      	str	r1, [sp, #72]	@ 0x48
 80217c6:	0038      	movs	r0, r7
 80217c8:	4651      	mov	r1, sl
 80217ca:	f7de fef9 	bl	80005c0 <__aeabi_lmul>
 80217ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80217d0:	9a05      	ldr	r2, [sp, #20]
 80217d2:	4684      	mov	ip, r0
 80217d4:	4648      	mov	r0, r9
 80217d6:	4461      	add	r1, ip
 80217d8:	1049      	asrs	r1, r1, #1
 80217da:	6001      	str	r1, [r0, #0]
 80217dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80217de:	0038      	movs	r0, r7
 80217e0:	4651      	mov	r1, sl
 80217e2:	f7de feed 	bl	80005c0 <__aeabi_lmul>
 80217e6:	9a06      	ldr	r2, [sp, #24]
 80217e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80217ea:	000f      	movs	r7, r1
 80217ec:	0030      	movs	r0, r6
 80217ee:	4641      	mov	r1, r8
 80217f0:	f7de fee6 	bl	80005c0 <__aeabi_lmul>
 80217f4:	464e      	mov	r6, r9
 80217f6:	9a00      	ldr	r2, [sp, #0]
 80217f8:	9b01      	ldr	r3, [sp, #4]
 80217fa:	4694      	mov	ip, r2
 80217fc:	9803      	ldr	r0, [sp, #12]
 80217fe:	1a7f      	subs	r7, r7, r1
 8021800:	107f      	asrs	r7, r7, #1
 8021802:	6077      	str	r7, [r6, #4]
 8021804:	1a1e      	subs	r6, r3, r0
 8021806:	9b04      	ldr	r3, [sp, #16]
 8021808:	44e1      	add	r9, ip
 802180a:	469c      	mov	ip, r3
 802180c:	17f0      	asrs	r0, r6, #31
 802180e:	4680      	mov	r8, r0
 8021810:	9902      	ldr	r1, [sp, #8]
 8021812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021814:	4461      	add	r1, ip
 8021816:	17cb      	asrs	r3, r1, #31
 8021818:	000f      	movs	r7, r1
 802181a:	469a      	mov	sl, r3
 802181c:	0030      	movs	r0, r6
 802181e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021820:	4641      	mov	r1, r8
 8021822:	f7de fecd 	bl	80005c0 <__aeabi_lmul>
 8021826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021828:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802182a:	9101      	str	r1, [sp, #4]
 802182c:	0038      	movs	r0, r7
 802182e:	4651      	mov	r1, sl
 8021830:	f7de fec6 	bl	80005c0 <__aeabi_lmul>
 8021834:	9801      	ldr	r0, [sp, #4]
 8021836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021838:	4684      	mov	ip, r0
 802183a:	4461      	add	r1, ip
 802183c:	1049      	asrs	r1, r1, #1
 802183e:	6029      	str	r1, [r5, #0]
 8021840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021842:	0038      	movs	r0, r7
 8021844:	4651      	mov	r1, sl
 8021846:	f7de febb 	bl	80005c0 <__aeabi_lmul>
 802184a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802184c:	000f      	movs	r7, r1
 802184e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021850:	0030      	movs	r0, r6
 8021852:	4641      	mov	r1, r8
 8021854:	f7de feb4 	bl	80005c0 <__aeabi_lmul>
 8021858:	1a7f      	subs	r7, r7, r1
 802185a:	107f      	asrs	r7, r7, #1
 802185c:	606f      	str	r7, [r5, #4]
 802185e:	9a00      	ldr	r2, [sp, #0]
 8021860:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021862:	4694      	mov	ip, r2
 8021864:	4465      	add	r5, ip
 8021866:	468c      	mov	ip, r1
 8021868:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802186a:	0013      	movs	r3, r2
 802186c:	4462      	add	r2, ip
 802186e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021870:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021872:	429a      	cmp	r2, r3
 8021874:	d900      	bls.n	8021878 <arm_radix4_butterfly_q31+0x478>
 8021876:	e73a      	b.n	80216ee <arm_radix4_butterfly_q31+0x2ee>
 8021878:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802187a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802187c:	468c      	mov	ip, r1
 802187e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8021880:	4462      	add	r2, ip
 8021882:	468c      	mov	ip, r1
 8021884:	9216      	str	r2, [sp, #88]	@ 0x58
 8021886:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021888:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802188a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802188c:	4462      	add	r2, ip
 802188e:	468c      	mov	ip, r1
 8021890:	9219      	str	r2, [sp, #100]	@ 0x64
 8021892:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021894:	3301      	adds	r3, #1
 8021896:	4462      	add	r2, ip
 8021898:	9218      	str	r2, [sp, #96]	@ 0x60
 802189a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802189c:	9315      	str	r3, [sp, #84]	@ 0x54
 802189e:	3208      	adds	r2, #8
 80218a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80218a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80218a4:	4293      	cmp	r3, r2
 80218a6:	d800      	bhi.n	80218aa <arm_radix4_butterfly_q31+0x4aa>
 80218a8:	e6e8      	b.n	802167c <arm_radix4_butterfly_q31+0x27c>
 80218aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80218ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80218ae:	009b      	lsls	r3, r3, #2
 80218b0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80218b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80218b4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80218b6:	089b      	lsrs	r3, r3, #2
 80218b8:	9320      	str	r3, [sp, #128]	@ 0x80
 80218ba:	2b04      	cmp	r3, #4
 80218bc:	d900      	bls.n	80218c0 <arm_radix4_butterfly_q31+0x4c0>
 80218be:	e6c1      	b.n	8021644 <arm_radix4_butterfly_q31+0x244>
 80218c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80218c2:	469a      	mov	sl, r3
 80218c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80218c6:	691c      	ldr	r4, [r3, #16]
 80218c8:	685a      	ldr	r2, [r3, #4]
 80218ca:	46a1      	mov	r9, r4
 80218cc:	4690      	mov	r8, r2
 80218ce:	6819      	ldr	r1, [r3, #0]
 80218d0:	689a      	ldr	r2, [r3, #8]
 80218d2:	699f      	ldr	r7, [r3, #24]
 80218d4:	188d      	adds	r5, r1, r2
 80218d6:	444d      	add	r5, r9
 80218d8:	19ed      	adds	r5, r5, r7
 80218da:	69de      	ldr	r6, [r3, #28]
 80218dc:	601d      	str	r5, [r3, #0]
 80218de:	4645      	mov	r5, r8
 80218e0:	46b4      	mov	ip, r6
 80218e2:	68d8      	ldr	r0, [r3, #12]
 80218e4:	695c      	ldr	r4, [r3, #20]
 80218e6:	182d      	adds	r5, r5, r0
 80218e8:	192d      	adds	r5, r5, r4
 80218ea:	4465      	add	r5, ip
 80218ec:	605d      	str	r5, [r3, #4]
 80218ee:	1a8d      	subs	r5, r1, r2
 80218f0:	444d      	add	r5, r9
 80218f2:	1bed      	subs	r5, r5, r7
 80218f4:	609d      	str	r5, [r3, #8]
 80218f6:	4645      	mov	r5, r8
 80218f8:	1a2d      	subs	r5, r5, r0
 80218fa:	192d      	adds	r5, r5, r4
 80218fc:	1bad      	subs	r5, r5, r6
 80218fe:	464e      	mov	r6, r9
 8021900:	60dd      	str	r5, [r3, #12]
 8021902:	180d      	adds	r5, r1, r0
 8021904:	1bad      	subs	r5, r5, r6
 8021906:	4666      	mov	r6, ip
 8021908:	1bad      	subs	r5, r5, r6
 802190a:	611d      	str	r5, [r3, #16]
 802190c:	4645      	mov	r5, r8
 802190e:	1aad      	subs	r5, r5, r2
 8021910:	4442      	add	r2, r8
 8021912:	1b12      	subs	r2, r2, r4
 8021914:	1bd2      	subs	r2, r2, r7
 8021916:	1a08      	subs	r0, r1, r0
 8021918:	61da      	str	r2, [r3, #28]
 802191a:	4649      	mov	r1, r9
 802191c:	2201      	movs	r2, #1
 802191e:	1a41      	subs	r1, r0, r1
 8021920:	4252      	negs	r2, r2
 8021922:	4461      	add	r1, ip
 8021924:	4694      	mov	ip, r2
 8021926:	44e2      	add	sl, ip
 8021928:	4652      	mov	r2, sl
 802192a:	1b2d      	subs	r5, r5, r4
 802192c:	19ed      	adds	r5, r5, r7
 802192e:	615d      	str	r5, [r3, #20]
 8021930:	6199      	str	r1, [r3, #24]
 8021932:	3320      	adds	r3, #32
 8021934:	2a00      	cmp	r2, #0
 8021936:	d1c6      	bne.n	80218c6 <arm_radix4_butterfly_q31+0x4c6>
 8021938:	b027      	add	sp, #156	@ 0x9c
 802193a:	bc3c      	pop	{r2, r3, r4, r5}
 802193c:	4690      	mov	r8, r2
 802193e:	4699      	mov	r9, r3
 8021940:	46a2      	mov	sl, r4
 8021942:	46ab      	mov	fp, r5
 8021944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021946:	469a      	mov	sl, r3
 8021948:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802194a:	e7bc      	b.n	80218c6 <arm_radix4_butterfly_q31+0x4c6>

0802194c <arm_radix4_butterfly_inverse_q31>:
 802194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802194e:	464d      	mov	r5, r9
 8021950:	4644      	mov	r4, r8
 8021952:	465f      	mov	r7, fp
 8021954:	4656      	mov	r6, sl
 8021956:	b4f0      	push	{r4, r5, r6, r7}
 8021958:	b0a7      	sub	sp, #156	@ 0x9c
 802195a:	469c      	mov	ip, r3
 802195c:	9114      	str	r1, [sp, #80]	@ 0x50
 802195e:	0889      	lsrs	r1, r1, #2
 8021960:	9310      	str	r3, [sp, #64]	@ 0x40
 8021962:	00cb      	lsls	r3, r1, #3
 8021964:	0015      	movs	r5, r2
 8021966:	9223      	str	r2, [sp, #140]	@ 0x8c
 8021968:	18c2      	adds	r2, r0, r3
 802196a:	000c      	movs	r4, r1
 802196c:	9124      	str	r1, [sp, #144]	@ 0x90
 802196e:	18d1      	adds	r1, r2, r3
 8021970:	468b      	mov	fp, r1
 8021972:	469a      	mov	sl, r3
 8021974:	4663      	mov	r3, ip
 8021976:	44da      	add	sl, fp
 8021978:	46d0      	mov	r8, sl
 802197a:	4681      	mov	r9, r0
 802197c:	4692      	mov	sl, r2
 802197e:	0119      	lsls	r1, r3, #4
 8021980:	910d      	str	r1, [sp, #52]	@ 0x34
 8021982:	00d9      	lsls	r1, r3, #3
 8021984:	005b      	lsls	r3, r3, #1
 8021986:	4463      	add	r3, ip
 8021988:	910e      	str	r1, [sp, #56]	@ 0x38
 802198a:	00d9      	lsls	r1, r3, #3
 802198c:	9022      	str	r0, [sp, #136]	@ 0x88
 802198e:	9025      	str	r0, [sp, #148]	@ 0x94
 8021990:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021992:	9502      	str	r5, [sp, #8]
 8021994:	9500      	str	r5, [sp, #0]
 8021996:	9501      	str	r5, [sp, #4]
 8021998:	9409      	str	r4, [sp, #36]	@ 0x24
 802199a:	464b      	mov	r3, r9
 802199c:	681b      	ldr	r3, [r3, #0]
 802199e:	4652      	mov	r2, sl
 80219a0:	111c      	asrs	r4, r3, #4
 80219a2:	465b      	mov	r3, fp
 80219a4:	4648      	mov	r0, r9
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	6812      	ldr	r2, [r2, #0]
 80219aa:	6840      	ldr	r0, [r0, #4]
 80219ac:	111b      	asrs	r3, r3, #4
 80219ae:	18e7      	adds	r7, r4, r3
 80219b0:	1ae3      	subs	r3, r4, r3
 80219b2:	1114      	asrs	r4, r2, #4
 80219b4:	4642      	mov	r2, r8
 80219b6:	1105      	asrs	r5, r0, #4
 80219b8:	4658      	mov	r0, fp
 80219ba:	6812      	ldr	r2, [r2, #0]
 80219bc:	6840      	ldr	r0, [r0, #4]
 80219be:	9303      	str	r3, [sp, #12]
 80219c0:	1113      	asrs	r3, r2, #4
 80219c2:	18e2      	adds	r2, r4, r3
 80219c4:	1103      	asrs	r3, r0, #4
 80219c6:	18ee      	adds	r6, r5, r3
 80219c8:	1ae8      	subs	r0, r5, r3
 80219ca:	464d      	mov	r5, r9
 80219cc:	18bb      	adds	r3, r7, r2
 80219ce:	602b      	str	r3, [r5, #0]
 80219d0:	4641      	mov	r1, r8
 80219d2:	4655      	mov	r5, sl
 80219d4:	6849      	ldr	r1, [r1, #4]
 80219d6:	686d      	ldr	r5, [r5, #4]
 80219d8:	110b      	asrs	r3, r1, #4
 80219da:	112d      	asrs	r5, r5, #4
 80219dc:	18eb      	adds	r3, r5, r3
 80219de:	464d      	mov	r5, r9
 80219e0:	18f1      	adds	r1, r6, r3
 80219e2:	6069      	str	r1, [r5, #4]
 80219e4:	4655      	mov	r5, sl
 80219e6:	686d      	ldr	r5, [r5, #4]
 80219e8:	9004      	str	r0, [sp, #16]
 80219ea:	112c      	asrs	r4, r5, #4
 80219ec:	4645      	mov	r5, r8
 80219ee:	686d      	ldr	r5, [r5, #4]
 80219f0:	1129      	asrs	r1, r5, #4
 80219f2:	1a65      	subs	r5, r4, r1
 80219f4:	4651      	mov	r1, sl
 80219f6:	6809      	ldr	r1, [r1, #0]
 80219f8:	1abc      	subs	r4, r7, r2
 80219fa:	1108      	asrs	r0, r1, #4
 80219fc:	4641      	mov	r1, r8
 80219fe:	17e2      	asrs	r2, r4, #31
 8021a00:	6809      	ldr	r1, [r1, #0]
 8021a02:	9207      	str	r2, [sp, #28]
 8021a04:	9a01      	ldr	r2, [sp, #4]
 8021a06:	1109      	asrs	r1, r1, #4
 8021a08:	6817      	ldr	r7, [r2, #0]
 8021a0a:	1a41      	subs	r1, r0, r1
 8021a0c:	9106      	str	r1, [sp, #24]
 8021a0e:	0039      	movs	r1, r7
 8021a10:	17ff      	asrs	r7, r7, #31
 8021a12:	0038      	movs	r0, r7
 8021a14:	9505      	str	r5, [sp, #20]
 8021a16:	1af5      	subs	r5, r6, r3
 8021a18:	17ef      	asrs	r7, r5, #31
 8021a1a:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021a1c:	6857      	ldr	r7, [r2, #4]
 8021a1e:	0003      	movs	r3, r0
 8021a20:	17fe      	asrs	r6, r7, #31
 8021a22:	000a      	movs	r2, r1
 8021a24:	9108      	str	r1, [sp, #32]
 8021a26:	900a      	str	r0, [sp, #40]	@ 0x28
 8021a28:	17e1      	asrs	r1, r4, #31
 8021a2a:	0020      	movs	r0, r4
 8021a2c:	960c      	str	r6, [sp, #48]	@ 0x30
 8021a2e:	f7de fdc7 	bl	80005c0 <__aeabi_lmul>
 8021a32:	003a      	movs	r2, r7
 8021a34:	17fb      	asrs	r3, r7, #31
 8021a36:	000e      	movs	r6, r1
 8021a38:	0028      	movs	r0, r5
 8021a3a:	17e9      	asrs	r1, r5, #31
 8021a3c:	f7de fdc0 	bl	80005c0 <__aeabi_lmul>
 8021a40:	4653      	mov	r3, sl
 8021a42:	1a76      	subs	r6, r6, r1
 8021a44:	0076      	lsls	r6, r6, #1
 8021a46:	601e      	str	r6, [r3, #0]
 8021a48:	002a      	movs	r2, r5
 8021a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a4c:	9808      	ldr	r0, [sp, #32]
 8021a4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021a50:	f7de fdb6 	bl	80005c0 <__aeabi_lmul>
 8021a54:	003a      	movs	r2, r7
 8021a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021a58:	000d      	movs	r5, r1
 8021a5a:	0020      	movs	r0, r4
 8021a5c:	9907      	ldr	r1, [sp, #28]
 8021a5e:	f7de fdaf 	bl	80005c0 <__aeabi_lmul>
 8021a62:	4657      	mov	r7, sl
 8021a64:	186d      	adds	r5, r5, r1
 8021a66:	006d      	lsls	r5, r5, #1
 8021a68:	607d      	str	r5, [r7, #4]
 8021a6a:	9b03      	ldr	r3, [sp, #12]
 8021a6c:	9e06      	ldr	r6, [sp, #24]
 8021a6e:	9d05      	ldr	r5, [sp, #20]
 8021a70:	46b4      	mov	ip, r6
 8021a72:	1b5d      	subs	r5, r3, r5
 8021a74:	9b00      	ldr	r3, [sp, #0]
 8021a76:	17ef      	asrs	r7, r5, #31
 8021a78:	0039      	movs	r1, r7
 8021a7a:	681f      	ldr	r7, [r3, #0]
 8021a7c:	17fc      	asrs	r4, r7, #31
 8021a7e:	0020      	movs	r0, r4
 8021a80:	9c04      	ldr	r4, [sp, #16]
 8021a82:	4464      	add	r4, ip
 8021a84:	17e6      	asrs	r6, r4, #31
 8021a86:	9407      	str	r4, [sp, #28]
 8021a88:	9608      	str	r6, [sp, #32]
 8021a8a:	685e      	ldr	r6, [r3, #4]
 8021a8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021a8e:	17f2      	asrs	r2, r6, #31
 8021a90:	0003      	movs	r3, r0
 8021a92:	920c      	str	r2, [sp, #48]	@ 0x30
 8021a94:	0028      	movs	r0, r5
 8021a96:	003a      	movs	r2, r7
 8021a98:	910a      	str	r1, [sp, #40]	@ 0x28
 8021a9a:	f7de fd91 	bl	80005c0 <__aeabi_lmul>
 8021a9e:	0032      	movs	r2, r6
 8021aa0:	17f3      	asrs	r3, r6, #31
 8021aa2:	9807      	ldr	r0, [sp, #28]
 8021aa4:	000c      	movs	r4, r1
 8021aa6:	9908      	ldr	r1, [sp, #32]
 8021aa8:	f7de fd8a 	bl	80005c0 <__aeabi_lmul>
 8021aac:	4658      	mov	r0, fp
 8021aae:	1a64      	subs	r4, r4, r1
 8021ab0:	0064      	lsls	r4, r4, #1
 8021ab2:	9a07      	ldr	r2, [sp, #28]
 8021ab4:	6004      	str	r4, [r0, #0]
 8021ab6:	9b08      	ldr	r3, [sp, #32]
 8021ab8:	0038      	movs	r0, r7
 8021aba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021abc:	f7de fd80 	bl	80005c0 <__aeabi_lmul>
 8021ac0:	0032      	movs	r2, r6
 8021ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ac4:	000c      	movs	r4, r1
 8021ac6:	0028      	movs	r0, r5
 8021ac8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021aca:	f7de fd79 	bl	80005c0 <__aeabi_lmul>
 8021ace:	9d05      	ldr	r5, [sp, #20]
 8021ad0:	465f      	mov	r7, fp
 8021ad2:	46ac      	mov	ip, r5
 8021ad4:	1864      	adds	r4, r4, r1
 8021ad6:	9903      	ldr	r1, [sp, #12]
 8021ad8:	0064      	lsls	r4, r4, #1
 8021ada:	4461      	add	r1, ip
 8021adc:	607c      	str	r4, [r7, #4]
 8021ade:	000c      	movs	r4, r1
 8021ae0:	17c9      	asrs	r1, r1, #31
 8021ae2:	9105      	str	r1, [sp, #20]
 8021ae4:	9902      	ldr	r1, [sp, #8]
 8021ae6:	9804      	ldr	r0, [sp, #16]
 8021ae8:	680d      	ldr	r5, [r1, #0]
 8021aea:	9e06      	ldr	r6, [sp, #24]
 8021aec:	002b      	movs	r3, r5
 8021aee:	17ed      	asrs	r5, r5, #31
 8021af0:	684f      	ldr	r7, [r1, #4]
 8021af2:	9503      	str	r5, [sp, #12]
 8021af4:	1b85      	subs	r5, r0, r6
 8021af6:	17e8      	asrs	r0, r5, #31
 8021af8:	001a      	movs	r2, r3
 8021afa:	9006      	str	r0, [sp, #24]
 8021afc:	17fe      	asrs	r6, r7, #31
 8021afe:	9304      	str	r3, [sp, #16]
 8021b00:	0020      	movs	r0, r4
 8021b02:	9b03      	ldr	r3, [sp, #12]
 8021b04:	17e1      	asrs	r1, r4, #31
 8021b06:	9607      	str	r6, [sp, #28]
 8021b08:	f7de fd5a 	bl	80005c0 <__aeabi_lmul>
 8021b0c:	003a      	movs	r2, r7
 8021b0e:	000e      	movs	r6, r1
 8021b10:	17fb      	asrs	r3, r7, #31
 8021b12:	0028      	movs	r0, r5
 8021b14:	17e9      	asrs	r1, r5, #31
 8021b16:	f7de fd53 	bl	80005c0 <__aeabi_lmul>
 8021b1a:	4640      	mov	r0, r8
 8021b1c:	1a76      	subs	r6, r6, r1
 8021b1e:	0076      	lsls	r6, r6, #1
 8021b20:	002a      	movs	r2, r5
 8021b22:	9b06      	ldr	r3, [sp, #24]
 8021b24:	6006      	str	r6, [r0, #0]
 8021b26:	9903      	ldr	r1, [sp, #12]
 8021b28:	9804      	ldr	r0, [sp, #16]
 8021b2a:	f7de fd49 	bl	80005c0 <__aeabi_lmul>
 8021b2e:	0020      	movs	r0, r4
 8021b30:	2408      	movs	r4, #8
 8021b32:	9b07      	ldr	r3, [sp, #28]
 8021b34:	000d      	movs	r5, r1
 8021b36:	003a      	movs	r2, r7
 8021b38:	9905      	ldr	r1, [sp, #20]
 8021b3a:	f7de fd41 	bl	80005c0 <__aeabi_lmul>
 8021b3e:	4640      	mov	r0, r8
 8021b40:	46a4      	mov	ip, r4
 8021b42:	186d      	adds	r5, r5, r1
 8021b44:	006d      	lsls	r5, r5, #1
 8021b46:	6045      	str	r5, [r0, #4]
 8021b48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021b4a:	44e1      	add	r9, ip
 8021b4c:	3801      	subs	r0, #1
 8021b4e:	9009      	str	r0, [sp, #36]	@ 0x24
 8021b50:	9a01      	ldr	r2, [sp, #4]
 8021b52:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021b54:	44e2      	add	sl, ip
 8021b56:	44e3      	add	fp, ip
 8021b58:	44e0      	add	r8, ip
 8021b5a:	46a4      	mov	ip, r4
 8021b5c:	4462      	add	r2, ip
 8021b5e:	9201      	str	r2, [sp, #4]
 8021b60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021b62:	9b00      	ldr	r3, [sp, #0]
 8021b64:	4694      	mov	ip, r2
 8021b66:	4463      	add	r3, ip
 8021b68:	9300      	str	r3, [sp, #0]
 8021b6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021b6c:	9902      	ldr	r1, [sp, #8]
 8021b6e:	469c      	mov	ip, r3
 8021b70:	4461      	add	r1, ip
 8021b72:	9102      	str	r1, [sp, #8]
 8021b74:	2800      	cmp	r0, #0
 8021b76:	d000      	beq.n	8021b7a <arm_radix4_butterfly_inverse_q31+0x22e>
 8021b78:	e70f      	b.n	802199a <arm_radix4_butterfly_inverse_q31+0x4e>
 8021b7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021b7c:	009b      	lsls	r3, r3, #2
 8021b7e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021b80:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021b82:	9320      	str	r3, [sp, #128]	@ 0x80
 8021b84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021b86:	2b04      	cmp	r3, #4
 8021b88:	d800      	bhi.n	8021b8c <arm_radix4_butterfly_inverse_q31+0x240>
 8021b8a:	e17c      	b.n	8021e86 <arm_radix4_butterfly_inverse_q31+0x53a>
 8021b8c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021b8e:	0893      	lsrs	r3, r2, #2
 8021b90:	1e59      	subs	r1, r3, #1
 8021b92:	9321      	str	r3, [sp, #132]	@ 0x84
 8021b94:	00db      	lsls	r3, r3, #3
 8021b96:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021b98:	00d3      	lsls	r3, r2, #3
 8021b9a:	9300      	str	r3, [sp, #0]
 8021b9c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021b9e:	911a      	str	r1, [sp, #104]	@ 0x68
 8021ba0:	00da      	lsls	r2, r3, #3
 8021ba2:	921e      	str	r2, [sp, #120]	@ 0x78
 8021ba4:	011a      	lsls	r2, r3, #4
 8021ba6:	921d      	str	r2, [sp, #116]	@ 0x74
 8021ba8:	001a      	movs	r2, r3
 8021baa:	4694      	mov	ip, r2
 8021bac:	005b      	lsls	r3, r3, #1
 8021bae:	4463      	add	r3, ip
 8021bb0:	00db      	lsls	r3, r3, #3
 8021bb2:	931c      	str	r3, [sp, #112]	@ 0x70
 8021bb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021bb6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021bb8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021bba:	9318      	str	r3, [sp, #96]	@ 0x60
 8021bbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8021bbe:	9316      	str	r3, [sp, #88]	@ 0x58
 8021bc0:	2300      	movs	r3, #0
 8021bc2:	9315      	str	r3, [sp, #84]	@ 0x54
 8021bc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021bc6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021bc8:	681a      	ldr	r2, [r3, #0]
 8021bca:	685b      	ldr	r3, [r3, #4]
 8021bcc:	9205      	str	r2, [sp, #20]
 8021bce:	9306      	str	r3, [sp, #24]
 8021bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021bd2:	468c      	mov	ip, r1
 8021bd4:	681a      	ldr	r2, [r3, #0]
 8021bd6:	685b      	ldr	r3, [r3, #4]
 8021bd8:	9207      	str	r2, [sp, #28]
 8021bda:	9308      	str	r3, [sp, #32]
 8021bdc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021bde:	681a      	ldr	r2, [r3, #0]
 8021be0:	685b      	ldr	r3, [r3, #4]
 8021be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8021be4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8021be8:	0013      	movs	r3, r2
 8021bea:	4463      	add	r3, ip
 8021bec:	4698      	mov	r8, r3
 8021bee:	0013      	movs	r3, r2
 8021bf0:	4442      	add	r2, r8
 8021bf2:	4691      	mov	r9, r2
 8021bf4:	001a      	movs	r2, r3
 8021bf6:	444a      	add	r2, r9
 8021bf8:	4692      	mov	sl, r2
 8021bfa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021bfc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021bfe:	4293      	cmp	r3, r2
 8021c00:	d800      	bhi.n	8021c04 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8021c02:	e0d9      	b.n	8021db8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8021c04:	4694      	mov	ip, r2
 8021c06:	4644      	mov	r4, r8
 8021c08:	4655      	mov	r5, sl
 8021c0a:	4688      	mov	r8, r1
 8021c0c:	9b07      	ldr	r3, [sp, #28]
 8021c0e:	17db      	asrs	r3, r3, #31
 8021c10:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c12:	9b08      	ldr	r3, [sp, #32]
 8021c14:	17db      	asrs	r3, r3, #31
 8021c16:	930d      	str	r3, [sp, #52]	@ 0x34
 8021c18:	9b05      	ldr	r3, [sp, #20]
 8021c1a:	17db      	asrs	r3, r3, #31
 8021c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8021c1e:	9b06      	ldr	r3, [sp, #24]
 8021c20:	17db      	asrs	r3, r3, #31
 8021c22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c26:	17db      	asrs	r3, r3, #31
 8021c28:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c2c:	17db      	asrs	r3, r3, #31
 8021c2e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021c30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021c32:	4463      	add	r3, ip
 8021c34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c36:	4643      	mov	r3, r8
 8021c38:	4641      	mov	r1, r8
 8021c3a:	681a      	ldr	r2, [r3, #0]
 8021c3c:	464b      	mov	r3, r9
 8021c3e:	684f      	ldr	r7, [r1, #4]
 8021c40:	4649      	mov	r1, r9
 8021c42:	681b      	ldr	r3, [r3, #0]
 8021c44:	18d6      	adds	r6, r2, r3
 8021c46:	1ad3      	subs	r3, r2, r3
 8021c48:	9301      	str	r3, [sp, #4]
 8021c4a:	684b      	ldr	r3, [r1, #4]
 8021c4c:	1af9      	subs	r1, r7, r3
 8021c4e:	9102      	str	r1, [sp, #8]
 8021c50:	6829      	ldr	r1, [r5, #0]
 8021c52:	18f8      	adds	r0, r7, r3
 8021c54:	468c      	mov	ip, r1
 8021c56:	6827      	ldr	r7, [r4, #0]
 8021c58:	4467      	add	r7, ip
 8021c5a:	003a      	movs	r2, r7
 8021c5c:	19f3      	adds	r3, r6, r7
 8021c5e:	4647      	mov	r7, r8
 8021c60:	109b      	asrs	r3, r3, #2
 8021c62:	603b      	str	r3, [r7, #0]
 8021c64:	6869      	ldr	r1, [r5, #4]
 8021c66:	6867      	ldr	r7, [r4, #4]
 8021c68:	468c      	mov	ip, r1
 8021c6a:	4467      	add	r7, ip
 8021c6c:	003b      	movs	r3, r7
 8021c6e:	19c1      	adds	r1, r0, r7
 8021c70:	4647      	mov	r7, r8
 8021c72:	1ab6      	subs	r6, r6, r2
 8021c74:	1089      	asrs	r1, r1, #2
 8021c76:	6079      	str	r1, [r7, #4]
 8021c78:	17f2      	asrs	r2, r6, #31
 8021c7a:	9900      	ldr	r1, [sp, #0]
 8021c7c:	4692      	mov	sl, r2
 8021c7e:	468c      	mov	ip, r1
 8021c80:	6867      	ldr	r7, [r4, #4]
 8021c82:	6869      	ldr	r1, [r5, #4]
 8021c84:	44e0      	add	r8, ip
 8021c86:	1a7f      	subs	r7, r7, r1
 8021c88:	9703      	str	r7, [sp, #12]
 8021c8a:	6821      	ldr	r1, [r4, #0]
 8021c8c:	682f      	ldr	r7, [r5, #0]
 8021c8e:	1bc9      	subs	r1, r1, r7
 8021c90:	1ac7      	subs	r7, r0, r3
 8021c92:	17fa      	asrs	r2, r7, #31
 8021c94:	4693      	mov	fp, r2
 8021c96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c98:	9a07      	ldr	r2, [sp, #28]
 8021c9a:	9104      	str	r1, [sp, #16]
 8021c9c:	0030      	movs	r0, r6
 8021c9e:	4651      	mov	r1, sl
 8021ca0:	f7de fc8e 	bl	80005c0 <__aeabi_lmul>
 8021ca4:	9a08      	ldr	r2, [sp, #32]
 8021ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ca8:	9112      	str	r1, [sp, #72]	@ 0x48
 8021caa:	0038      	movs	r0, r7
 8021cac:	4659      	mov	r1, fp
 8021cae:	f7de fc87 	bl	80005c0 <__aeabi_lmul>
 8021cb2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021cb4:	9a07      	ldr	r2, [sp, #28]
 8021cb6:	1a41      	subs	r1, r0, r1
 8021cb8:	1049      	asrs	r1, r1, #1
 8021cba:	6021      	str	r1, [r4, #0]
 8021cbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021cbe:	0038      	movs	r0, r7
 8021cc0:	4659      	mov	r1, fp
 8021cc2:	f7de fc7d 	bl	80005c0 <__aeabi_lmul>
 8021cc6:	9a08      	ldr	r2, [sp, #32]
 8021cc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021cca:	000f      	movs	r7, r1
 8021ccc:	0030      	movs	r0, r6
 8021cce:	4651      	mov	r1, sl
 8021cd0:	f7de fc76 	bl	80005c0 <__aeabi_lmul>
 8021cd4:	9b00      	ldr	r3, [sp, #0]
 8021cd6:	187f      	adds	r7, r7, r1
 8021cd8:	469c      	mov	ip, r3
 8021cda:	107f      	asrs	r7, r7, #1
 8021cdc:	6067      	str	r7, [r4, #4]
 8021cde:	9a01      	ldr	r2, [sp, #4]
 8021ce0:	9f03      	ldr	r7, [sp, #12]
 8021ce2:	9802      	ldr	r0, [sp, #8]
 8021ce4:	1bd7      	subs	r7, r2, r7
 8021ce6:	17fe      	asrs	r6, r7, #31
 8021ce8:	0031      	movs	r1, r6
 8021cea:	9e04      	ldr	r6, [sp, #16]
 8021cec:	4682      	mov	sl, r0
 8021cee:	4464      	add	r4, ip
 8021cf0:	46b4      	mov	ip, r6
 8021cf2:	44e2      	add	sl, ip
 8021cf4:	4652      	mov	r2, sl
 8021cf6:	17d2      	asrs	r2, r2, #31
 8021cf8:	4693      	mov	fp, r2
 8021cfa:	0038      	movs	r0, r7
 8021cfc:	9a05      	ldr	r2, [sp, #20]
 8021cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d00:	9112      	str	r1, [sp, #72]	@ 0x48
 8021d02:	f7de fc5d 	bl	80005c0 <__aeabi_lmul>
 8021d06:	9a06      	ldr	r2, [sp, #24]
 8021d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d0a:	000e      	movs	r6, r1
 8021d0c:	4650      	mov	r0, sl
 8021d0e:	4659      	mov	r1, fp
 8021d10:	f7de fc56 	bl	80005c0 <__aeabi_lmul>
 8021d14:	4648      	mov	r0, r9
 8021d16:	1a76      	subs	r6, r6, r1
 8021d18:	1076      	asrs	r6, r6, #1
 8021d1a:	6006      	str	r6, [r0, #0]
 8021d1c:	9a05      	ldr	r2, [sp, #20]
 8021d1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d20:	4650      	mov	r0, sl
 8021d22:	4659      	mov	r1, fp
 8021d24:	f7de fc4c 	bl	80005c0 <__aeabi_lmul>
 8021d28:	9a06      	ldr	r2, [sp, #24]
 8021d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d2c:	000e      	movs	r6, r1
 8021d2e:	0038      	movs	r0, r7
 8021d30:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021d32:	f7de fc45 	bl	80005c0 <__aeabi_lmul>
 8021d36:	9a00      	ldr	r2, [sp, #0]
 8021d38:	9f03      	ldr	r7, [sp, #12]
 8021d3a:	4694      	mov	ip, r2
 8021d3c:	1876      	adds	r6, r6, r1
 8021d3e:	4649      	mov	r1, r9
 8021d40:	44e1      	add	r9, ip
 8021d42:	46bc      	mov	ip, r7
 8021d44:	9b01      	ldr	r3, [sp, #4]
 8021d46:	1076      	asrs	r6, r6, #1
 8021d48:	4463      	add	r3, ip
 8021d4a:	17df      	asrs	r7, r3, #31
 8021d4c:	604e      	str	r6, [r1, #4]
 8021d4e:	46ba      	mov	sl, r7
 8021d50:	001e      	movs	r6, r3
 8021d52:	9802      	ldr	r0, [sp, #8]
 8021d54:	9b04      	ldr	r3, [sp, #16]
 8021d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d58:	1ac7      	subs	r7, r0, r3
 8021d5a:	17fb      	asrs	r3, r7, #31
 8021d5c:	469b      	mov	fp, r3
 8021d5e:	0030      	movs	r0, r6
 8021d60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d62:	4651      	mov	r1, sl
 8021d64:	f7de fc2c 	bl	80005c0 <__aeabi_lmul>
 8021d68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021d6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d6c:	9101      	str	r1, [sp, #4]
 8021d6e:	0038      	movs	r0, r7
 8021d70:	4659      	mov	r1, fp
 8021d72:	f7de fc25 	bl	80005c0 <__aeabi_lmul>
 8021d76:	9801      	ldr	r0, [sp, #4]
 8021d78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d7a:	1a41      	subs	r1, r0, r1
 8021d7c:	1049      	asrs	r1, r1, #1
 8021d7e:	6029      	str	r1, [r5, #0]
 8021d80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d82:	0038      	movs	r0, r7
 8021d84:	4659      	mov	r1, fp
 8021d86:	f7de fc1b 	bl	80005c0 <__aeabi_lmul>
 8021d8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d8c:	000f      	movs	r7, r1
 8021d8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021d90:	0030      	movs	r0, r6
 8021d92:	4651      	mov	r1, sl
 8021d94:	f7de fc14 	bl	80005c0 <__aeabi_lmul>
 8021d98:	187f      	adds	r7, r7, r1
 8021d9a:	107f      	asrs	r7, r7, #1
 8021d9c:	606f      	str	r7, [r5, #4]
 8021d9e:	9a00      	ldr	r2, [sp, #0]
 8021da0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021da2:	4694      	mov	ip, r2
 8021da4:	4465      	add	r5, ip
 8021da6:	468c      	mov	ip, r1
 8021da8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021daa:	0013      	movs	r3, r2
 8021dac:	4462      	add	r2, ip
 8021dae:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021db0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021db2:	429a      	cmp	r2, r3
 8021db4:	d900      	bls.n	8021db8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8021db6:	e73e      	b.n	8021c36 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8021db8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021dba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021dbc:	468c      	mov	ip, r1
 8021dbe:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8021dc0:	4462      	add	r2, ip
 8021dc2:	468c      	mov	ip, r1
 8021dc4:	9216      	str	r2, [sp, #88]	@ 0x58
 8021dc6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021dc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021dca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021dcc:	4462      	add	r2, ip
 8021dce:	468c      	mov	ip, r1
 8021dd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8021dd2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021dd4:	3301      	adds	r3, #1
 8021dd6:	4462      	add	r2, ip
 8021dd8:	9218      	str	r2, [sp, #96]	@ 0x60
 8021dda:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8021ddc:	9315      	str	r3, [sp, #84]	@ 0x54
 8021dde:	3208      	adds	r2, #8
 8021de0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8021de2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021de4:	4293      	cmp	r3, r2
 8021de6:	d800      	bhi.n	8021dea <arm_radix4_butterfly_inverse_q31+0x49e>
 8021de8:	e6ec      	b.n	8021bc4 <arm_radix4_butterfly_inverse_q31+0x278>
 8021dea:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021dec:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021dee:	009b      	lsls	r3, r3, #2
 8021df0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021df2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021df4:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021df6:	089b      	lsrs	r3, r3, #2
 8021df8:	9320      	str	r3, [sp, #128]	@ 0x80
 8021dfa:	2b04      	cmp	r3, #4
 8021dfc:	d900      	bls.n	8021e00 <arm_radix4_butterfly_inverse_q31+0x4b4>
 8021dfe:	e6c5      	b.n	8021b8c <arm_radix4_butterfly_inverse_q31+0x240>
 8021e00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e02:	469a      	mov	sl, r3
 8021e04:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e06:	681a      	ldr	r2, [r3, #0]
 8021e08:	6918      	ldr	r0, [r3, #16]
 8021e0a:	4691      	mov	r9, r2
 8021e0c:	464c      	mov	r4, r9
 8021e0e:	4680      	mov	r8, r0
 8021e10:	69de      	ldr	r6, [r3, #28]
 8021e12:	689d      	ldr	r5, [r3, #8]
 8021e14:	46b4      	mov	ip, r6
 8021e16:	6998      	ldr	r0, [r3, #24]
 8021e18:	1964      	adds	r4, r4, r5
 8021e1a:	6859      	ldr	r1, [r3, #4]
 8021e1c:	68da      	ldr	r2, [r3, #12]
 8021e1e:	4444      	add	r4, r8
 8021e20:	695f      	ldr	r7, [r3, #20]
 8021e22:	1824      	adds	r4, r4, r0
 8021e24:	601c      	str	r4, [r3, #0]
 8021e26:	188c      	adds	r4, r1, r2
 8021e28:	19e4      	adds	r4, r4, r7
 8021e2a:	4464      	add	r4, ip
 8021e2c:	605c      	str	r4, [r3, #4]
 8021e2e:	464c      	mov	r4, r9
 8021e30:	1b64      	subs	r4, r4, r5
 8021e32:	4444      	add	r4, r8
 8021e34:	1a24      	subs	r4, r4, r0
 8021e36:	609c      	str	r4, [r3, #8]
 8021e38:	1a8c      	subs	r4, r1, r2
 8021e3a:	19e4      	adds	r4, r4, r7
 8021e3c:	1ba4      	subs	r4, r4, r6
 8021e3e:	60dc      	str	r4, [r3, #12]
 8021e40:	464c      	mov	r4, r9
 8021e42:	4646      	mov	r6, r8
 8021e44:	1aa4      	subs	r4, r4, r2
 8021e46:	1ba4      	subs	r4, r4, r6
 8021e48:	4464      	add	r4, ip
 8021e4a:	611c      	str	r4, [r3, #16]
 8021e4c:	194c      	adds	r4, r1, r5
 8021e4e:	1be4      	subs	r4, r4, r7
 8021e50:	1a24      	subs	r4, r4, r0
 8021e52:	615c      	str	r4, [r3, #20]
 8021e54:	4644      	mov	r4, r8
 8021e56:	4666      	mov	r6, ip
 8021e58:	444a      	add	r2, r9
 8021e5a:	1b12      	subs	r2, r2, r4
 8021e5c:	1b92      	subs	r2, r2, r6
 8021e5e:	619a      	str	r2, [r3, #24]
 8021e60:	1b4a      	subs	r2, r1, r5
 8021e62:	1bd1      	subs	r1, r2, r7
 8021e64:	2201      	movs	r2, #1
 8021e66:	4252      	negs	r2, r2
 8021e68:	4694      	mov	ip, r2
 8021e6a:	44e2      	add	sl, ip
 8021e6c:	4652      	mov	r2, sl
 8021e6e:	1809      	adds	r1, r1, r0
 8021e70:	61d9      	str	r1, [r3, #28]
 8021e72:	3320      	adds	r3, #32
 8021e74:	2a00      	cmp	r2, #0
 8021e76:	d1c6      	bne.n	8021e06 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8021e78:	b027      	add	sp, #156	@ 0x9c
 8021e7a:	bc3c      	pop	{r2, r3, r4, r5}
 8021e7c:	4690      	mov	r8, r2
 8021e7e:	4699      	mov	r9, r3
 8021e80:	46a2      	mov	sl, r4
 8021e82:	46ab      	mov	fp, r5
 8021e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e86:	469a      	mov	sl, r3
 8021e88:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e8a:	e7bc      	b.n	8021e06 <arm_radix4_butterfly_inverse_q31+0x4ba>

08021e8c <arm_cmplx_mag_squared_q31>:
 8021e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e8e:	464f      	mov	r7, r9
 8021e90:	4646      	mov	r6, r8
 8021e92:	0004      	movs	r4, r0
 8021e94:	b4c0      	push	{r6, r7}
 8021e96:	0016      	movs	r6, r2
 8021e98:	000f      	movs	r7, r1
 8021e9a:	2a00      	cmp	r2, #0
 8021e9c:	d018      	beq.n	8021ed0 <arm_cmplx_mag_squared_q31+0x44>
 8021e9e:	6823      	ldr	r3, [r4, #0]
 8021ea0:	6822      	ldr	r2, [r4, #0]
 8021ea2:	17d9      	asrs	r1, r3, #31
 8021ea4:	6863      	ldr	r3, [r4, #4]
 8021ea6:	0010      	movs	r0, r2
 8021ea8:	4698      	mov	r8, r3
 8021eaa:	17db      	asrs	r3, r3, #31
 8021eac:	4699      	mov	r9, r3
 8021eae:	000b      	movs	r3, r1
 8021eb0:	f7de fb86 	bl	80005c0 <__aeabi_lmul>
 8021eb4:	4642      	mov	r2, r8
 8021eb6:	104d      	asrs	r5, r1, #1
 8021eb8:	464b      	mov	r3, r9
 8021eba:	4640      	mov	r0, r8
 8021ebc:	4649      	mov	r1, r9
 8021ebe:	f7de fb7f 	bl	80005c0 <__aeabi_lmul>
 8021ec2:	1049      	asrs	r1, r1, #1
 8021ec4:	1869      	adds	r1, r5, r1
 8021ec6:	3e01      	subs	r6, #1
 8021ec8:	c702      	stmia	r7!, {r1}
 8021eca:	3408      	adds	r4, #8
 8021ecc:	2e00      	cmp	r6, #0
 8021ece:	d1e6      	bne.n	8021e9e <arm_cmplx_mag_squared_q31+0x12>
 8021ed0:	bc0c      	pop	{r2, r3}
 8021ed2:	4690      	mov	r8, r2
 8021ed4:	4699      	mov	r9, r3
 8021ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021ed8 <arm_mult_q31>:
 8021ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021eda:	4646      	mov	r6, r8
 8021edc:	464f      	mov	r7, r9
 8021ede:	4690      	mov	r8, r2
 8021ee0:	b4c0      	push	{r6, r7}
 8021ee2:	001d      	movs	r5, r3
 8021ee4:	0006      	movs	r6, r0
 8021ee6:	000f      	movs	r7, r1
 8021ee8:	2400      	movs	r4, #0
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	d020      	beq.n	8021f30 <arm_mult_q31+0x58>
 8021eee:	4b12      	ldr	r3, [pc, #72]	@ (8021f38 <arm_mult_q31+0x60>)
 8021ef0:	4699      	mov	r9, r3
 8021ef2:	e007      	b.n	8021f04 <arm_mult_q31+0x2c>
 8021ef4:	464b      	mov	r3, r9
 8021ef6:	4059      	eors	r1, r3
 8021ef8:	4643      	mov	r3, r8
 8021efa:	3d01      	subs	r5, #1
 8021efc:	5119      	str	r1, [r3, r4]
 8021efe:	3404      	adds	r4, #4
 8021f00:	2d00      	cmp	r5, #0
 8021f02:	d015      	beq.n	8021f30 <arm_mult_q31+0x58>
 8021f04:	5933      	ldr	r3, [r6, r4]
 8021f06:	593a      	ldr	r2, [r7, r4]
 8021f08:	17d9      	asrs	r1, r3, #31
 8021f0a:	593b      	ldr	r3, [r7, r4]
 8021f0c:	5930      	ldr	r0, [r6, r4]
 8021f0e:	17db      	asrs	r3, r3, #31
 8021f10:	f7de fb56 	bl	80005c0 <__aeabi_lmul>
 8021f14:	004b      	lsls	r3, r1, #1
 8021f16:	0fc0      	lsrs	r0, r0, #31
 8021f18:	4318      	orrs	r0, r3
 8021f1a:	17c9      	asrs	r1, r1, #31
 8021f1c:	17c3      	asrs	r3, r0, #31
 8021f1e:	428b      	cmp	r3, r1
 8021f20:	d1e8      	bne.n	8021ef4 <arm_mult_q31+0x1c>
 8021f22:	0001      	movs	r1, r0
 8021f24:	4643      	mov	r3, r8
 8021f26:	3d01      	subs	r5, #1
 8021f28:	5119      	str	r1, [r3, r4]
 8021f2a:	3404      	adds	r4, #4
 8021f2c:	2d00      	cmp	r5, #0
 8021f2e:	d1e9      	bne.n	8021f04 <arm_mult_q31+0x2c>
 8021f30:	bc0c      	pop	{r2, r3}
 8021f32:	4690      	mov	r8, r2
 8021f34:	4699      	mov	r9, r3
 8021f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021f38:	7fffffff 	.word	0x7fffffff

08021f3c <arm_add_q31>:
 8021f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f3e:	465f      	mov	r7, fp
 8021f40:	4656      	mov	r6, sl
 8021f42:	464d      	mov	r5, r9
 8021f44:	4644      	mov	r4, r8
 8021f46:	b4f0      	push	{r4, r5, r6, r7}
 8021f48:	4693      	mov	fp, r2
 8021f4a:	b083      	sub	sp, #12
 8021f4c:	4681      	mov	r9, r0
 8021f4e:	468a      	mov	sl, r1
 8021f50:	4698      	mov	r8, r3
 8021f52:	2200      	movs	r2, #0
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d020      	beq.n	8021f9a <arm_add_q31+0x5e>
 8021f58:	4649      	mov	r1, r9
 8021f5a:	4653      	mov	r3, sl
 8021f5c:	588e      	ldr	r6, [r1, r2]
 8021f5e:	589b      	ldr	r3, [r3, r2]
 8021f60:	17f7      	asrs	r7, r6, #31
 8021f62:	001c      	movs	r4, r3
 8021f64:	0030      	movs	r0, r6
 8021f66:	0039      	movs	r1, r7
 8021f68:	17dd      	asrs	r5, r3, #31
 8021f6a:	46b4      	mov	ip, r6
 8021f6c:	1900      	adds	r0, r0, r4
 8021f6e:	4169      	adcs	r1, r5
 8021f70:	4463      	add	r3, ip
 8021f72:	9000      	str	r0, [sp, #0]
 8021f74:	9101      	str	r1, [sp, #4]
 8021f76:	17d9      	asrs	r1, r3, #31
 8021f78:	468c      	mov	ip, r1
 8021f7a:	9901      	ldr	r1, [sp, #4]
 8021f7c:	458c      	cmp	ip, r1
 8021f7e:	d002      	beq.n	8021f86 <arm_add_q31+0x4a>
 8021f80:	17cb      	asrs	r3, r1, #31
 8021f82:	4909      	ldr	r1, [pc, #36]	@ (8021fa8 <arm_add_q31+0x6c>)
 8021f84:	404b      	eors	r3, r1
 8021f86:	4659      	mov	r1, fp
 8021f88:	508b      	str	r3, [r1, r2]
 8021f8a:	2301      	movs	r3, #1
 8021f8c:	425b      	negs	r3, r3
 8021f8e:	469c      	mov	ip, r3
 8021f90:	44e0      	add	r8, ip
 8021f92:	4643      	mov	r3, r8
 8021f94:	3204      	adds	r2, #4
 8021f96:	2b00      	cmp	r3, #0
 8021f98:	d1de      	bne.n	8021f58 <arm_add_q31+0x1c>
 8021f9a:	b003      	add	sp, #12
 8021f9c:	bc3c      	pop	{r2, r3, r4, r5}
 8021f9e:	4690      	mov	r8, r2
 8021fa0:	4699      	mov	r9, r3
 8021fa2:	46a2      	mov	sl, r4
 8021fa4:	46ab      	mov	fp, r5
 8021fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fa8:	7fffffff 	.word	0x7fffffff

08021fac <atof>:
 8021fac:	b510      	push	{r4, lr}
 8021fae:	2100      	movs	r1, #0
 8021fb0:	f000 fe12 	bl	8022bd8 <strtod>
 8021fb4:	bd10      	pop	{r4, pc}

08021fb6 <atoi>:
 8021fb6:	b510      	push	{r4, lr}
 8021fb8:	220a      	movs	r2, #10
 8021fba:	2100      	movs	r1, #0
 8021fbc:	f000 fea4 	bl	8022d08 <strtol>
 8021fc0:	bd10      	pop	{r4, pc}
	...

08021fc4 <sulp>:
 8021fc4:	b570      	push	{r4, r5, r6, lr}
 8021fc6:	0016      	movs	r6, r2
 8021fc8:	000d      	movs	r5, r1
 8021fca:	f003 fd15 	bl	80259f8 <__ulp>
 8021fce:	2e00      	cmp	r6, #0
 8021fd0:	d00d      	beq.n	8021fee <sulp+0x2a>
 8021fd2:	236b      	movs	r3, #107	@ 0x6b
 8021fd4:	006a      	lsls	r2, r5, #1
 8021fd6:	0d52      	lsrs	r2, r2, #21
 8021fd8:	1a9b      	subs	r3, r3, r2
 8021fda:	2b00      	cmp	r3, #0
 8021fdc:	dd07      	ble.n	8021fee <sulp+0x2a>
 8021fde:	2400      	movs	r4, #0
 8021fe0:	4a03      	ldr	r2, [pc, #12]	@ (8021ff0 <sulp+0x2c>)
 8021fe2:	051b      	lsls	r3, r3, #20
 8021fe4:	189d      	adds	r5, r3, r2
 8021fe6:	002b      	movs	r3, r5
 8021fe8:	0022      	movs	r2, r4
 8021fea:	f7e0 fb27 	bl	800263c <__aeabi_dmul>
 8021fee:	bd70      	pop	{r4, r5, r6, pc}
 8021ff0:	3ff00000 	.word	0x3ff00000

08021ff4 <_strtod_l>:
 8021ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ff6:	b0a3      	sub	sp, #140	@ 0x8c
 8021ff8:	921b      	str	r2, [sp, #108]	@ 0x6c
 8021ffa:	2200      	movs	r2, #0
 8021ffc:	2600      	movs	r6, #0
 8021ffe:	2700      	movs	r7, #0
 8022000:	9005      	str	r0, [sp, #20]
 8022002:	9109      	str	r1, [sp, #36]	@ 0x24
 8022004:	921e      	str	r2, [sp, #120]	@ 0x78
 8022006:	911d      	str	r1, [sp, #116]	@ 0x74
 8022008:	780a      	ldrb	r2, [r1, #0]
 802200a:	2a2b      	cmp	r2, #43	@ 0x2b
 802200c:	d053      	beq.n	80220b6 <_strtod_l+0xc2>
 802200e:	d83f      	bhi.n	8022090 <_strtod_l+0x9c>
 8022010:	2a0d      	cmp	r2, #13
 8022012:	d839      	bhi.n	8022088 <_strtod_l+0x94>
 8022014:	2a08      	cmp	r2, #8
 8022016:	d839      	bhi.n	802208c <_strtod_l+0x98>
 8022018:	2a00      	cmp	r2, #0
 802201a:	d042      	beq.n	80220a2 <_strtod_l+0xae>
 802201c:	2200      	movs	r2, #0
 802201e:	9212      	str	r2, [sp, #72]	@ 0x48
 8022020:	2100      	movs	r1, #0
 8022022:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8022024:	910c      	str	r1, [sp, #48]	@ 0x30
 8022026:	782a      	ldrb	r2, [r5, #0]
 8022028:	2a30      	cmp	r2, #48	@ 0x30
 802202a:	d000      	beq.n	802202e <_strtod_l+0x3a>
 802202c:	e083      	b.n	8022136 <_strtod_l+0x142>
 802202e:	786a      	ldrb	r2, [r5, #1]
 8022030:	3120      	adds	r1, #32
 8022032:	438a      	bics	r2, r1
 8022034:	2a58      	cmp	r2, #88	@ 0x58
 8022036:	d000      	beq.n	802203a <_strtod_l+0x46>
 8022038:	e073      	b.n	8022122 <_strtod_l+0x12e>
 802203a:	9302      	str	r3, [sp, #8]
 802203c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802203e:	4a95      	ldr	r2, [pc, #596]	@ (8022294 <_strtod_l+0x2a0>)
 8022040:	9301      	str	r3, [sp, #4]
 8022042:	ab1e      	add	r3, sp, #120	@ 0x78
 8022044:	9300      	str	r3, [sp, #0]
 8022046:	9805      	ldr	r0, [sp, #20]
 8022048:	ab1f      	add	r3, sp, #124	@ 0x7c
 802204a:	a91d      	add	r1, sp, #116	@ 0x74
 802204c:	f002 fd84 	bl	8024b58 <__gethex>
 8022050:	230f      	movs	r3, #15
 8022052:	0002      	movs	r2, r0
 8022054:	401a      	ands	r2, r3
 8022056:	0004      	movs	r4, r0
 8022058:	9206      	str	r2, [sp, #24]
 802205a:	4218      	tst	r0, r3
 802205c:	d005      	beq.n	802206a <_strtod_l+0x76>
 802205e:	2a06      	cmp	r2, #6
 8022060:	d12b      	bne.n	80220ba <_strtod_l+0xc6>
 8022062:	2300      	movs	r3, #0
 8022064:	3501      	adds	r5, #1
 8022066:	951d      	str	r5, [sp, #116]	@ 0x74
 8022068:	9312      	str	r3, [sp, #72]	@ 0x48
 802206a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802206c:	2b00      	cmp	r3, #0
 802206e:	d002      	beq.n	8022076 <_strtod_l+0x82>
 8022070:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022072:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022074:	6013      	str	r3, [r2, #0]
 8022076:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022078:	2b00      	cmp	r3, #0
 802207a:	d019      	beq.n	80220b0 <_strtod_l+0xbc>
 802207c:	2380      	movs	r3, #128	@ 0x80
 802207e:	0030      	movs	r0, r6
 8022080:	061b      	lsls	r3, r3, #24
 8022082:	18f9      	adds	r1, r7, r3
 8022084:	b023      	add	sp, #140	@ 0x8c
 8022086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022088:	2a20      	cmp	r2, #32
 802208a:	d1c7      	bne.n	802201c <_strtod_l+0x28>
 802208c:	3101      	adds	r1, #1
 802208e:	e7ba      	b.n	8022006 <_strtod_l+0x12>
 8022090:	2a2d      	cmp	r2, #45	@ 0x2d
 8022092:	d1c3      	bne.n	802201c <_strtod_l+0x28>
 8022094:	3a2c      	subs	r2, #44	@ 0x2c
 8022096:	9212      	str	r2, [sp, #72]	@ 0x48
 8022098:	1c4a      	adds	r2, r1, #1
 802209a:	921d      	str	r2, [sp, #116]	@ 0x74
 802209c:	784a      	ldrb	r2, [r1, #1]
 802209e:	2a00      	cmp	r2, #0
 80220a0:	d1be      	bne.n	8022020 <_strtod_l+0x2c>
 80220a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80220a4:	931d      	str	r3, [sp, #116]	@ 0x74
 80220a6:	2300      	movs	r3, #0
 80220a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80220aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80220ac:	2b00      	cmp	r3, #0
 80220ae:	d1df      	bne.n	8022070 <_strtod_l+0x7c>
 80220b0:	0030      	movs	r0, r6
 80220b2:	0039      	movs	r1, r7
 80220b4:	e7e6      	b.n	8022084 <_strtod_l+0x90>
 80220b6:	2200      	movs	r2, #0
 80220b8:	e7ed      	b.n	8022096 <_strtod_l+0xa2>
 80220ba:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80220bc:	2a00      	cmp	r2, #0
 80220be:	d007      	beq.n	80220d0 <_strtod_l+0xdc>
 80220c0:	2135      	movs	r1, #53	@ 0x35
 80220c2:	a820      	add	r0, sp, #128	@ 0x80
 80220c4:	f003 fd8e 	bl	8025be4 <__copybits>
 80220c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80220ca:	9805      	ldr	r0, [sp, #20]
 80220cc:	f003 f948 	bl	8025360 <_Bfree>
 80220d0:	9806      	ldr	r0, [sp, #24]
 80220d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80220d4:	3801      	subs	r0, #1
 80220d6:	2804      	cmp	r0, #4
 80220d8:	d806      	bhi.n	80220e8 <_strtod_l+0xf4>
 80220da:	f7de f84f 	bl	800017c <__gnu_thumb1_case_uqi>
 80220de:	0312      	.short	0x0312
 80220e0:	1e1c      	.short	0x1e1c
 80220e2:	12          	.byte	0x12
 80220e3:	00          	.byte	0x00
 80220e4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80220e6:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 80220e8:	05e4      	lsls	r4, r4, #23
 80220ea:	d502      	bpl.n	80220f2 <_strtod_l+0xfe>
 80220ec:	2380      	movs	r3, #128	@ 0x80
 80220ee:	061b      	lsls	r3, r3, #24
 80220f0:	431f      	orrs	r7, r3
 80220f2:	4b69      	ldr	r3, [pc, #420]	@ (8022298 <_strtod_l+0x2a4>)
 80220f4:	423b      	tst	r3, r7
 80220f6:	d1b8      	bne.n	802206a <_strtod_l+0x76>
 80220f8:	f001 fdb2 	bl	8023c60 <__errno>
 80220fc:	2322      	movs	r3, #34	@ 0x22
 80220fe:	6003      	str	r3, [r0, #0]
 8022100:	e7b3      	b.n	802206a <_strtod_l+0x76>
 8022102:	4966      	ldr	r1, [pc, #408]	@ (802229c <_strtod_l+0x2a8>)
 8022104:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022106:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8022108:	400a      	ands	r2, r1
 802210a:	4965      	ldr	r1, [pc, #404]	@ (80222a0 <_strtod_l+0x2ac>)
 802210c:	185b      	adds	r3, r3, r1
 802210e:	051b      	lsls	r3, r3, #20
 8022110:	431a      	orrs	r2, r3
 8022112:	0017      	movs	r7, r2
 8022114:	e7e8      	b.n	80220e8 <_strtod_l+0xf4>
 8022116:	4f60      	ldr	r7, [pc, #384]	@ (8022298 <_strtod_l+0x2a4>)
 8022118:	e7e6      	b.n	80220e8 <_strtod_l+0xf4>
 802211a:	2601      	movs	r6, #1
 802211c:	4f61      	ldr	r7, [pc, #388]	@ (80222a4 <_strtod_l+0x2b0>)
 802211e:	4276      	negs	r6, r6
 8022120:	e7e2      	b.n	80220e8 <_strtod_l+0xf4>
 8022122:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022124:	1c5a      	adds	r2, r3, #1
 8022126:	921d      	str	r2, [sp, #116]	@ 0x74
 8022128:	785b      	ldrb	r3, [r3, #1]
 802212a:	2b30      	cmp	r3, #48	@ 0x30
 802212c:	d0f9      	beq.n	8022122 <_strtod_l+0x12e>
 802212e:	2b00      	cmp	r3, #0
 8022130:	d09b      	beq.n	802206a <_strtod_l+0x76>
 8022132:	2301      	movs	r3, #1
 8022134:	930c      	str	r3, [sp, #48]	@ 0x30
 8022136:	2500      	movs	r5, #0
 8022138:	220a      	movs	r2, #10
 802213a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802213c:	950d      	str	r5, [sp, #52]	@ 0x34
 802213e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022140:	9508      	str	r5, [sp, #32]
 8022142:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8022144:	7804      	ldrb	r4, [r0, #0]
 8022146:	0023      	movs	r3, r4
 8022148:	3b30      	subs	r3, #48	@ 0x30
 802214a:	b2d9      	uxtb	r1, r3
 802214c:	2909      	cmp	r1, #9
 802214e:	d927      	bls.n	80221a0 <_strtod_l+0x1ac>
 8022150:	2201      	movs	r2, #1
 8022152:	4955      	ldr	r1, [pc, #340]	@ (80222a8 <_strtod_l+0x2b4>)
 8022154:	f001 fcf6 	bl	8023b44 <strncmp>
 8022158:	2800      	cmp	r0, #0
 802215a:	d031      	beq.n	80221c0 <_strtod_l+0x1cc>
 802215c:	2000      	movs	r0, #0
 802215e:	0023      	movs	r3, r4
 8022160:	4684      	mov	ip, r0
 8022162:	9a08      	ldr	r2, [sp, #32]
 8022164:	900e      	str	r0, [sp, #56]	@ 0x38
 8022166:	9206      	str	r2, [sp, #24]
 8022168:	2220      	movs	r2, #32
 802216a:	0019      	movs	r1, r3
 802216c:	4391      	bics	r1, r2
 802216e:	000a      	movs	r2, r1
 8022170:	2100      	movs	r1, #0
 8022172:	9107      	str	r1, [sp, #28]
 8022174:	2a45      	cmp	r2, #69	@ 0x45
 8022176:	d000      	beq.n	802217a <_strtod_l+0x186>
 8022178:	e0c0      	b.n	80222fc <_strtod_l+0x308>
 802217a:	9b06      	ldr	r3, [sp, #24]
 802217c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802217e:	4303      	orrs	r3, r0
 8022180:	4313      	orrs	r3, r2
 8022182:	428b      	cmp	r3, r1
 8022184:	d08d      	beq.n	80220a2 <_strtod_l+0xae>
 8022186:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022188:	9309      	str	r3, [sp, #36]	@ 0x24
 802218a:	3301      	adds	r3, #1
 802218c:	931d      	str	r3, [sp, #116]	@ 0x74
 802218e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022190:	785b      	ldrb	r3, [r3, #1]
 8022192:	2b2b      	cmp	r3, #43	@ 0x2b
 8022194:	d070      	beq.n	8022278 <_strtod_l+0x284>
 8022196:	000c      	movs	r4, r1
 8022198:	2b2d      	cmp	r3, #45	@ 0x2d
 802219a:	d173      	bne.n	8022284 <_strtod_l+0x290>
 802219c:	2401      	movs	r4, #1
 802219e:	e06c      	b.n	802227a <_strtod_l+0x286>
 80221a0:	9908      	ldr	r1, [sp, #32]
 80221a2:	2908      	cmp	r1, #8
 80221a4:	dc09      	bgt.n	80221ba <_strtod_l+0x1c6>
 80221a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80221a8:	4351      	muls	r1, r2
 80221aa:	185b      	adds	r3, r3, r1
 80221ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80221ae:	9b08      	ldr	r3, [sp, #32]
 80221b0:	3001      	adds	r0, #1
 80221b2:	3301      	adds	r3, #1
 80221b4:	9308      	str	r3, [sp, #32]
 80221b6:	901d      	str	r0, [sp, #116]	@ 0x74
 80221b8:	e7c3      	b.n	8022142 <_strtod_l+0x14e>
 80221ba:	4355      	muls	r5, r2
 80221bc:	195d      	adds	r5, r3, r5
 80221be:	e7f6      	b.n	80221ae <_strtod_l+0x1ba>
 80221c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221c2:	1c5a      	adds	r2, r3, #1
 80221c4:	921d      	str	r2, [sp, #116]	@ 0x74
 80221c6:	9a08      	ldr	r2, [sp, #32]
 80221c8:	785b      	ldrb	r3, [r3, #1]
 80221ca:	2a00      	cmp	r2, #0
 80221cc:	d03a      	beq.n	8022244 <_strtod_l+0x250>
 80221ce:	900e      	str	r0, [sp, #56]	@ 0x38
 80221d0:	9206      	str	r2, [sp, #24]
 80221d2:	001a      	movs	r2, r3
 80221d4:	3a30      	subs	r2, #48	@ 0x30
 80221d6:	2a09      	cmp	r2, #9
 80221d8:	d912      	bls.n	8022200 <_strtod_l+0x20c>
 80221da:	2201      	movs	r2, #1
 80221dc:	4694      	mov	ip, r2
 80221de:	e7c3      	b.n	8022168 <_strtod_l+0x174>
 80221e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221e2:	3001      	adds	r0, #1
 80221e4:	1c5a      	adds	r2, r3, #1
 80221e6:	921d      	str	r2, [sp, #116]	@ 0x74
 80221e8:	785b      	ldrb	r3, [r3, #1]
 80221ea:	2b30      	cmp	r3, #48	@ 0x30
 80221ec:	d0f8      	beq.n	80221e0 <_strtod_l+0x1ec>
 80221ee:	001a      	movs	r2, r3
 80221f0:	3a31      	subs	r2, #49	@ 0x31
 80221f2:	2a08      	cmp	r2, #8
 80221f4:	d83b      	bhi.n	802226e <_strtod_l+0x27a>
 80221f6:	900e      	str	r0, [sp, #56]	@ 0x38
 80221f8:	2000      	movs	r0, #0
 80221fa:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80221fc:	9006      	str	r0, [sp, #24]
 80221fe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8022200:	001a      	movs	r2, r3
 8022202:	1c41      	adds	r1, r0, #1
 8022204:	3a30      	subs	r2, #48	@ 0x30
 8022206:	2b30      	cmp	r3, #48	@ 0x30
 8022208:	d016      	beq.n	8022238 <_strtod_l+0x244>
 802220a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802220c:	185b      	adds	r3, r3, r1
 802220e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022210:	9b06      	ldr	r3, [sp, #24]
 8022212:	210a      	movs	r1, #10
 8022214:	469c      	mov	ip, r3
 8022216:	4484      	add	ip, r0
 8022218:	459c      	cmp	ip, r3
 802221a:	d115      	bne.n	8022248 <_strtod_l+0x254>
 802221c:	9906      	ldr	r1, [sp, #24]
 802221e:	9b06      	ldr	r3, [sp, #24]
 8022220:	3101      	adds	r1, #1
 8022222:	1809      	adds	r1, r1, r0
 8022224:	181b      	adds	r3, r3, r0
 8022226:	9106      	str	r1, [sp, #24]
 8022228:	2b08      	cmp	r3, #8
 802222a:	dc19      	bgt.n	8022260 <_strtod_l+0x26c>
 802222c:	230a      	movs	r3, #10
 802222e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022230:	434b      	muls	r3, r1
 8022232:	2100      	movs	r1, #0
 8022234:	18d3      	adds	r3, r2, r3
 8022236:	930d      	str	r3, [sp, #52]	@ 0x34
 8022238:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802223a:	0008      	movs	r0, r1
 802223c:	1c5a      	adds	r2, r3, #1
 802223e:	921d      	str	r2, [sp, #116]	@ 0x74
 8022240:	785b      	ldrb	r3, [r3, #1]
 8022242:	e7c6      	b.n	80221d2 <_strtod_l+0x1de>
 8022244:	9808      	ldr	r0, [sp, #32]
 8022246:	e7d0      	b.n	80221ea <_strtod_l+0x1f6>
 8022248:	1c5c      	adds	r4, r3, #1
 802224a:	2b08      	cmp	r3, #8
 802224c:	dc04      	bgt.n	8022258 <_strtod_l+0x264>
 802224e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022250:	434b      	muls	r3, r1
 8022252:	930d      	str	r3, [sp, #52]	@ 0x34
 8022254:	0023      	movs	r3, r4
 8022256:	e7df      	b.n	8022218 <_strtod_l+0x224>
 8022258:	2c10      	cmp	r4, #16
 802225a:	dcfb      	bgt.n	8022254 <_strtod_l+0x260>
 802225c:	434d      	muls	r5, r1
 802225e:	e7f9      	b.n	8022254 <_strtod_l+0x260>
 8022260:	2100      	movs	r1, #0
 8022262:	2b0f      	cmp	r3, #15
 8022264:	dce8      	bgt.n	8022238 <_strtod_l+0x244>
 8022266:	230a      	movs	r3, #10
 8022268:	435d      	muls	r5, r3
 802226a:	1955      	adds	r5, r2, r5
 802226c:	e7e4      	b.n	8022238 <_strtod_l+0x244>
 802226e:	2200      	movs	r2, #0
 8022270:	920e      	str	r2, [sp, #56]	@ 0x38
 8022272:	9206      	str	r2, [sp, #24]
 8022274:	3201      	adds	r2, #1
 8022276:	e7b1      	b.n	80221dc <_strtod_l+0x1e8>
 8022278:	2400      	movs	r4, #0
 802227a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802227c:	3302      	adds	r3, #2
 802227e:	931d      	str	r3, [sp, #116]	@ 0x74
 8022280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022282:	789b      	ldrb	r3, [r3, #2]
 8022284:	001a      	movs	r2, r3
 8022286:	3a30      	subs	r2, #48	@ 0x30
 8022288:	2a09      	cmp	r2, #9
 802228a:	d913      	bls.n	80222b4 <_strtod_l+0x2c0>
 802228c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802228e:	921d      	str	r2, [sp, #116]	@ 0x74
 8022290:	2200      	movs	r2, #0
 8022292:	e032      	b.n	80222fa <_strtod_l+0x306>
 8022294:	0802b7cc 	.word	0x0802b7cc
 8022298:	7ff00000 	.word	0x7ff00000
 802229c:	ffefffff 	.word	0xffefffff
 80222a0:	00000433 	.word	0x00000433
 80222a4:	7fffffff 	.word	0x7fffffff
 80222a8:	0802b7b4 	.word	0x0802b7b4
 80222ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222ae:	1c5a      	adds	r2, r3, #1
 80222b0:	921d      	str	r2, [sp, #116]	@ 0x74
 80222b2:	785b      	ldrb	r3, [r3, #1]
 80222b4:	2b30      	cmp	r3, #48	@ 0x30
 80222b6:	d0f9      	beq.n	80222ac <_strtod_l+0x2b8>
 80222b8:	2200      	movs	r2, #0
 80222ba:	9207      	str	r2, [sp, #28]
 80222bc:	001a      	movs	r2, r3
 80222be:	3a31      	subs	r2, #49	@ 0x31
 80222c0:	2a08      	cmp	r2, #8
 80222c2:	d81b      	bhi.n	80222fc <_strtod_l+0x308>
 80222c4:	3b30      	subs	r3, #48	@ 0x30
 80222c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80222c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222ca:	9307      	str	r3, [sp, #28]
 80222cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222ce:	1c59      	adds	r1, r3, #1
 80222d0:	911d      	str	r1, [sp, #116]	@ 0x74
 80222d2:	785b      	ldrb	r3, [r3, #1]
 80222d4:	001a      	movs	r2, r3
 80222d6:	3a30      	subs	r2, #48	@ 0x30
 80222d8:	2a09      	cmp	r2, #9
 80222da:	d93a      	bls.n	8022352 <_strtod_l+0x35e>
 80222dc:	9a07      	ldr	r2, [sp, #28]
 80222de:	1a8a      	subs	r2, r1, r2
 80222e0:	49b4      	ldr	r1, [pc, #720]	@ (80225b4 <_strtod_l+0x5c0>)
 80222e2:	9107      	str	r1, [sp, #28]
 80222e4:	2a08      	cmp	r2, #8
 80222e6:	dc04      	bgt.n	80222f2 <_strtod_l+0x2fe>
 80222e8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80222ea:	9207      	str	r2, [sp, #28]
 80222ec:	428a      	cmp	r2, r1
 80222ee:	dd00      	ble.n	80222f2 <_strtod_l+0x2fe>
 80222f0:	9107      	str	r1, [sp, #28]
 80222f2:	2c00      	cmp	r4, #0
 80222f4:	d002      	beq.n	80222fc <_strtod_l+0x308>
 80222f6:	9a07      	ldr	r2, [sp, #28]
 80222f8:	4252      	negs	r2, r2
 80222fa:	9207      	str	r2, [sp, #28]
 80222fc:	9a06      	ldr	r2, [sp, #24]
 80222fe:	2a00      	cmp	r2, #0
 8022300:	d14d      	bne.n	802239e <_strtod_l+0x3aa>
 8022302:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022304:	4310      	orrs	r0, r2
 8022306:	d000      	beq.n	802230a <_strtod_l+0x316>
 8022308:	e6af      	b.n	802206a <_strtod_l+0x76>
 802230a:	4662      	mov	r2, ip
 802230c:	2a00      	cmp	r2, #0
 802230e:	d000      	beq.n	8022312 <_strtod_l+0x31e>
 8022310:	e6c7      	b.n	80220a2 <_strtod_l+0xae>
 8022312:	2b69      	cmp	r3, #105	@ 0x69
 8022314:	d027      	beq.n	8022366 <_strtod_l+0x372>
 8022316:	dc23      	bgt.n	8022360 <_strtod_l+0x36c>
 8022318:	2b49      	cmp	r3, #73	@ 0x49
 802231a:	d024      	beq.n	8022366 <_strtod_l+0x372>
 802231c:	2b4e      	cmp	r3, #78	@ 0x4e
 802231e:	d000      	beq.n	8022322 <_strtod_l+0x32e>
 8022320:	e6bf      	b.n	80220a2 <_strtod_l+0xae>
 8022322:	49a5      	ldr	r1, [pc, #660]	@ (80225b8 <_strtod_l+0x5c4>)
 8022324:	a81d      	add	r0, sp, #116	@ 0x74
 8022326:	f002 fe4d 	bl	8024fc4 <__match>
 802232a:	2800      	cmp	r0, #0
 802232c:	d100      	bne.n	8022330 <_strtod_l+0x33c>
 802232e:	e6b8      	b.n	80220a2 <_strtod_l+0xae>
 8022330:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022332:	781b      	ldrb	r3, [r3, #0]
 8022334:	2b28      	cmp	r3, #40	@ 0x28
 8022336:	d12c      	bne.n	8022392 <_strtod_l+0x39e>
 8022338:	49a0      	ldr	r1, [pc, #640]	@ (80225bc <_strtod_l+0x5c8>)
 802233a:	aa20      	add	r2, sp, #128	@ 0x80
 802233c:	a81d      	add	r0, sp, #116	@ 0x74
 802233e:	f002 fe55 	bl	8024fec <__hexnan>
 8022342:	2805      	cmp	r0, #5
 8022344:	d125      	bne.n	8022392 <_strtod_l+0x39e>
 8022346:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022348:	4a9d      	ldr	r2, [pc, #628]	@ (80225c0 <_strtod_l+0x5cc>)
 802234a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 802234c:	431a      	orrs	r2, r3
 802234e:	0017      	movs	r7, r2
 8022350:	e68b      	b.n	802206a <_strtod_l+0x76>
 8022352:	220a      	movs	r2, #10
 8022354:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022356:	434a      	muls	r2, r1
 8022358:	18d2      	adds	r2, r2, r3
 802235a:	3a30      	subs	r2, #48	@ 0x30
 802235c:	9210      	str	r2, [sp, #64]	@ 0x40
 802235e:	e7b5      	b.n	80222cc <_strtod_l+0x2d8>
 8022360:	2b6e      	cmp	r3, #110	@ 0x6e
 8022362:	d0de      	beq.n	8022322 <_strtod_l+0x32e>
 8022364:	e69d      	b.n	80220a2 <_strtod_l+0xae>
 8022366:	4997      	ldr	r1, [pc, #604]	@ (80225c4 <_strtod_l+0x5d0>)
 8022368:	a81d      	add	r0, sp, #116	@ 0x74
 802236a:	f002 fe2b 	bl	8024fc4 <__match>
 802236e:	2800      	cmp	r0, #0
 8022370:	d100      	bne.n	8022374 <_strtod_l+0x380>
 8022372:	e696      	b.n	80220a2 <_strtod_l+0xae>
 8022374:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022376:	4994      	ldr	r1, [pc, #592]	@ (80225c8 <_strtod_l+0x5d4>)
 8022378:	3b01      	subs	r3, #1
 802237a:	a81d      	add	r0, sp, #116	@ 0x74
 802237c:	931d      	str	r3, [sp, #116]	@ 0x74
 802237e:	f002 fe21 	bl	8024fc4 <__match>
 8022382:	2800      	cmp	r0, #0
 8022384:	d102      	bne.n	802238c <_strtod_l+0x398>
 8022386:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022388:	3301      	adds	r3, #1
 802238a:	931d      	str	r3, [sp, #116]	@ 0x74
 802238c:	2600      	movs	r6, #0
 802238e:	4f8c      	ldr	r7, [pc, #560]	@ (80225c0 <_strtod_l+0x5cc>)
 8022390:	e66b      	b.n	802206a <_strtod_l+0x76>
 8022392:	488e      	ldr	r0, [pc, #568]	@ (80225cc <_strtod_l+0x5d8>)
 8022394:	f001 fca6 	bl	8023ce4 <nan>
 8022398:	0006      	movs	r6, r0
 802239a:	000f      	movs	r7, r1
 802239c:	e665      	b.n	802206a <_strtod_l+0x76>
 802239e:	9b07      	ldr	r3, [sp, #28]
 80223a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80223a2:	1a9b      	subs	r3, r3, r2
 80223a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80223a6:	9b08      	ldr	r3, [sp, #32]
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d101      	bne.n	80223b0 <_strtod_l+0x3bc>
 80223ac:	9b06      	ldr	r3, [sp, #24]
 80223ae:	9308      	str	r3, [sp, #32]
 80223b0:	9c06      	ldr	r4, [sp, #24]
 80223b2:	2c10      	cmp	r4, #16
 80223b4:	dd00      	ble.n	80223b8 <_strtod_l+0x3c4>
 80223b6:	2410      	movs	r4, #16
 80223b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80223ba:	f7e1 f82f 	bl	800341c <__aeabi_ui2d>
 80223be:	9b06      	ldr	r3, [sp, #24]
 80223c0:	0006      	movs	r6, r0
 80223c2:	000f      	movs	r7, r1
 80223c4:	2b09      	cmp	r3, #9
 80223c6:	dc13      	bgt.n	80223f0 <_strtod_l+0x3fc>
 80223c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d100      	bne.n	80223d0 <_strtod_l+0x3dc>
 80223ce:	e64c      	b.n	802206a <_strtod_l+0x76>
 80223d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	dc00      	bgt.n	80223d8 <_strtod_l+0x3e4>
 80223d6:	e07e      	b.n	80224d6 <_strtod_l+0x4e2>
 80223d8:	2b16      	cmp	r3, #22
 80223da:	dc63      	bgt.n	80224a4 <_strtod_l+0x4b0>
 80223dc:	497c      	ldr	r1, [pc, #496]	@ (80225d0 <_strtod_l+0x5dc>)
 80223de:	00db      	lsls	r3, r3, #3
 80223e0:	18c9      	adds	r1, r1, r3
 80223e2:	0032      	movs	r2, r6
 80223e4:	6808      	ldr	r0, [r1, #0]
 80223e6:	6849      	ldr	r1, [r1, #4]
 80223e8:	003b      	movs	r3, r7
 80223ea:	f7e0 f927 	bl	800263c <__aeabi_dmul>
 80223ee:	e7d3      	b.n	8022398 <_strtod_l+0x3a4>
 80223f0:	0022      	movs	r2, r4
 80223f2:	4b77      	ldr	r3, [pc, #476]	@ (80225d0 <_strtod_l+0x5dc>)
 80223f4:	3a09      	subs	r2, #9
 80223f6:	00d2      	lsls	r2, r2, #3
 80223f8:	189b      	adds	r3, r3, r2
 80223fa:	681a      	ldr	r2, [r3, #0]
 80223fc:	685b      	ldr	r3, [r3, #4]
 80223fe:	f7e0 f91d 	bl	800263c <__aeabi_dmul>
 8022402:	0006      	movs	r6, r0
 8022404:	0028      	movs	r0, r5
 8022406:	000f      	movs	r7, r1
 8022408:	f7e1 f808 	bl	800341c <__aeabi_ui2d>
 802240c:	000b      	movs	r3, r1
 802240e:	0002      	movs	r2, r0
 8022410:	0039      	movs	r1, r7
 8022412:	0030      	movs	r0, r6
 8022414:	f7df f96a 	bl	80016ec <__aeabi_dadd>
 8022418:	9b06      	ldr	r3, [sp, #24]
 802241a:	0006      	movs	r6, r0
 802241c:	000f      	movs	r7, r1
 802241e:	2b0f      	cmp	r3, #15
 8022420:	ddd2      	ble.n	80223c8 <_strtod_l+0x3d4>
 8022422:	9b06      	ldr	r3, [sp, #24]
 8022424:	1b1c      	subs	r4, r3, r4
 8022426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022428:	18e4      	adds	r4, r4, r3
 802242a:	2c00      	cmp	r4, #0
 802242c:	dc00      	bgt.n	8022430 <_strtod_l+0x43c>
 802242e:	e09b      	b.n	8022568 <_strtod_l+0x574>
 8022430:	220f      	movs	r2, #15
 8022432:	0023      	movs	r3, r4
 8022434:	4013      	ands	r3, r2
 8022436:	4214      	tst	r4, r2
 8022438:	d00a      	beq.n	8022450 <_strtod_l+0x45c>
 802243a:	4965      	ldr	r1, [pc, #404]	@ (80225d0 <_strtod_l+0x5dc>)
 802243c:	00db      	lsls	r3, r3, #3
 802243e:	18c9      	adds	r1, r1, r3
 8022440:	0032      	movs	r2, r6
 8022442:	6808      	ldr	r0, [r1, #0]
 8022444:	6849      	ldr	r1, [r1, #4]
 8022446:	003b      	movs	r3, r7
 8022448:	f7e0 f8f8 	bl	800263c <__aeabi_dmul>
 802244c:	0006      	movs	r6, r0
 802244e:	000f      	movs	r7, r1
 8022450:	230f      	movs	r3, #15
 8022452:	439c      	bics	r4, r3
 8022454:	d073      	beq.n	802253e <_strtod_l+0x54a>
 8022456:	3326      	adds	r3, #38	@ 0x26
 8022458:	33ff      	adds	r3, #255	@ 0xff
 802245a:	429c      	cmp	r4, r3
 802245c:	dd4b      	ble.n	80224f6 <_strtod_l+0x502>
 802245e:	2300      	movs	r3, #0
 8022460:	9306      	str	r3, [sp, #24]
 8022462:	9307      	str	r3, [sp, #28]
 8022464:	930d      	str	r3, [sp, #52]	@ 0x34
 8022466:	9308      	str	r3, [sp, #32]
 8022468:	2322      	movs	r3, #34	@ 0x22
 802246a:	2600      	movs	r6, #0
 802246c:	9a05      	ldr	r2, [sp, #20]
 802246e:	4f54      	ldr	r7, [pc, #336]	@ (80225c0 <_strtod_l+0x5cc>)
 8022470:	6013      	str	r3, [r2, #0]
 8022472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022474:	42b3      	cmp	r3, r6
 8022476:	d100      	bne.n	802247a <_strtod_l+0x486>
 8022478:	e5f7      	b.n	802206a <_strtod_l+0x76>
 802247a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802247c:	9805      	ldr	r0, [sp, #20]
 802247e:	f002 ff6f 	bl	8025360 <_Bfree>
 8022482:	9908      	ldr	r1, [sp, #32]
 8022484:	9805      	ldr	r0, [sp, #20]
 8022486:	f002 ff6b 	bl	8025360 <_Bfree>
 802248a:	9907      	ldr	r1, [sp, #28]
 802248c:	9805      	ldr	r0, [sp, #20]
 802248e:	f002 ff67 	bl	8025360 <_Bfree>
 8022492:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022494:	9805      	ldr	r0, [sp, #20]
 8022496:	f002 ff63 	bl	8025360 <_Bfree>
 802249a:	9906      	ldr	r1, [sp, #24]
 802249c:	9805      	ldr	r0, [sp, #20]
 802249e:	f002 ff5f 	bl	8025360 <_Bfree>
 80224a2:	e5e2      	b.n	802206a <_strtod_l+0x76>
 80224a4:	2325      	movs	r3, #37	@ 0x25
 80224a6:	9a06      	ldr	r2, [sp, #24]
 80224a8:	1a9b      	subs	r3, r3, r2
 80224aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80224ac:	4293      	cmp	r3, r2
 80224ae:	dbb8      	blt.n	8022422 <_strtod_l+0x42e>
 80224b0:	240f      	movs	r4, #15
 80224b2:	9b06      	ldr	r3, [sp, #24]
 80224b4:	4d46      	ldr	r5, [pc, #280]	@ (80225d0 <_strtod_l+0x5dc>)
 80224b6:	1ae4      	subs	r4, r4, r3
 80224b8:	00e1      	lsls	r1, r4, #3
 80224ba:	1869      	adds	r1, r5, r1
 80224bc:	0032      	movs	r2, r6
 80224be:	6808      	ldr	r0, [r1, #0]
 80224c0:	6849      	ldr	r1, [r1, #4]
 80224c2:	003b      	movs	r3, r7
 80224c4:	f7e0 f8ba 	bl	800263c <__aeabi_dmul>
 80224c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80224ca:	1b1c      	subs	r4, r3, r4
 80224cc:	00e4      	lsls	r4, r4, #3
 80224ce:	192d      	adds	r5, r5, r4
 80224d0:	682a      	ldr	r2, [r5, #0]
 80224d2:	686b      	ldr	r3, [r5, #4]
 80224d4:	e789      	b.n	80223ea <_strtod_l+0x3f6>
 80224d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80224d8:	3316      	adds	r3, #22
 80224da:	dba2      	blt.n	8022422 <_strtod_l+0x42e>
 80224dc:	9907      	ldr	r1, [sp, #28]
 80224de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80224e0:	4b3b      	ldr	r3, [pc, #236]	@ (80225d0 <_strtod_l+0x5dc>)
 80224e2:	1a52      	subs	r2, r2, r1
 80224e4:	00d2      	lsls	r2, r2, #3
 80224e6:	189b      	adds	r3, r3, r2
 80224e8:	0030      	movs	r0, r6
 80224ea:	681a      	ldr	r2, [r3, #0]
 80224ec:	685b      	ldr	r3, [r3, #4]
 80224ee:	0039      	movs	r1, r7
 80224f0:	f7df fc60 	bl	8001db4 <__aeabi_ddiv>
 80224f4:	e750      	b.n	8022398 <_strtod_l+0x3a4>
 80224f6:	2300      	movs	r3, #0
 80224f8:	0030      	movs	r0, r6
 80224fa:	0039      	movs	r1, r7
 80224fc:	4d35      	ldr	r5, [pc, #212]	@ (80225d4 <_strtod_l+0x5e0>)
 80224fe:	1124      	asrs	r4, r4, #4
 8022500:	9309      	str	r3, [sp, #36]	@ 0x24
 8022502:	2c01      	cmp	r4, #1
 8022504:	dc1e      	bgt.n	8022544 <_strtod_l+0x550>
 8022506:	2b00      	cmp	r3, #0
 8022508:	d001      	beq.n	802250e <_strtod_l+0x51a>
 802250a:	0006      	movs	r6, r0
 802250c:	000f      	movs	r7, r1
 802250e:	4b32      	ldr	r3, [pc, #200]	@ (80225d8 <_strtod_l+0x5e4>)
 8022510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022512:	18ff      	adds	r7, r7, r3
 8022514:	4b2f      	ldr	r3, [pc, #188]	@ (80225d4 <_strtod_l+0x5e0>)
 8022516:	00d5      	lsls	r5, r2, #3
 8022518:	195d      	adds	r5, r3, r5
 802251a:	0032      	movs	r2, r6
 802251c:	6828      	ldr	r0, [r5, #0]
 802251e:	6869      	ldr	r1, [r5, #4]
 8022520:	003b      	movs	r3, r7
 8022522:	f7e0 f88b 	bl	800263c <__aeabi_dmul>
 8022526:	4b26      	ldr	r3, [pc, #152]	@ (80225c0 <_strtod_l+0x5cc>)
 8022528:	4a2c      	ldr	r2, [pc, #176]	@ (80225dc <_strtod_l+0x5e8>)
 802252a:	0006      	movs	r6, r0
 802252c:	400b      	ands	r3, r1
 802252e:	4293      	cmp	r3, r2
 8022530:	d895      	bhi.n	802245e <_strtod_l+0x46a>
 8022532:	4a2b      	ldr	r2, [pc, #172]	@ (80225e0 <_strtod_l+0x5ec>)
 8022534:	4293      	cmp	r3, r2
 8022536:	d913      	bls.n	8022560 <_strtod_l+0x56c>
 8022538:	2601      	movs	r6, #1
 802253a:	4f2a      	ldr	r7, [pc, #168]	@ (80225e4 <_strtod_l+0x5f0>)
 802253c:	4276      	negs	r6, r6
 802253e:	2300      	movs	r3, #0
 8022540:	9309      	str	r3, [sp, #36]	@ 0x24
 8022542:	e086      	b.n	8022652 <_strtod_l+0x65e>
 8022544:	2201      	movs	r2, #1
 8022546:	4214      	tst	r4, r2
 8022548:	d004      	beq.n	8022554 <_strtod_l+0x560>
 802254a:	682a      	ldr	r2, [r5, #0]
 802254c:	686b      	ldr	r3, [r5, #4]
 802254e:	f7e0 f875 	bl	800263c <__aeabi_dmul>
 8022552:	2301      	movs	r3, #1
 8022554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022556:	1064      	asrs	r4, r4, #1
 8022558:	3201      	adds	r2, #1
 802255a:	9209      	str	r2, [sp, #36]	@ 0x24
 802255c:	3508      	adds	r5, #8
 802255e:	e7d0      	b.n	8022502 <_strtod_l+0x50e>
 8022560:	23d4      	movs	r3, #212	@ 0xd4
 8022562:	049b      	lsls	r3, r3, #18
 8022564:	18cf      	adds	r7, r1, r3
 8022566:	e7ea      	b.n	802253e <_strtod_l+0x54a>
 8022568:	2c00      	cmp	r4, #0
 802256a:	d0e8      	beq.n	802253e <_strtod_l+0x54a>
 802256c:	4264      	negs	r4, r4
 802256e:	230f      	movs	r3, #15
 8022570:	0022      	movs	r2, r4
 8022572:	401a      	ands	r2, r3
 8022574:	421c      	tst	r4, r3
 8022576:	d00a      	beq.n	802258e <_strtod_l+0x59a>
 8022578:	4b15      	ldr	r3, [pc, #84]	@ (80225d0 <_strtod_l+0x5dc>)
 802257a:	00d2      	lsls	r2, r2, #3
 802257c:	189b      	adds	r3, r3, r2
 802257e:	0030      	movs	r0, r6
 8022580:	681a      	ldr	r2, [r3, #0]
 8022582:	685b      	ldr	r3, [r3, #4]
 8022584:	0039      	movs	r1, r7
 8022586:	f7df fc15 	bl	8001db4 <__aeabi_ddiv>
 802258a:	0006      	movs	r6, r0
 802258c:	000f      	movs	r7, r1
 802258e:	1124      	asrs	r4, r4, #4
 8022590:	d0d5      	beq.n	802253e <_strtod_l+0x54a>
 8022592:	2c1f      	cmp	r4, #31
 8022594:	dd28      	ble.n	80225e8 <_strtod_l+0x5f4>
 8022596:	2300      	movs	r3, #0
 8022598:	9306      	str	r3, [sp, #24]
 802259a:	9307      	str	r3, [sp, #28]
 802259c:	930d      	str	r3, [sp, #52]	@ 0x34
 802259e:	9308      	str	r3, [sp, #32]
 80225a0:	2322      	movs	r3, #34	@ 0x22
 80225a2:	9a05      	ldr	r2, [sp, #20]
 80225a4:	2600      	movs	r6, #0
 80225a6:	6013      	str	r3, [r2, #0]
 80225a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80225aa:	2700      	movs	r7, #0
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	d000      	beq.n	80225b2 <_strtod_l+0x5be>
 80225b0:	e763      	b.n	802247a <_strtod_l+0x486>
 80225b2:	e55a      	b.n	802206a <_strtod_l+0x76>
 80225b4:	00004e1f 	.word	0x00004e1f
 80225b8:	0802b916 	.word	0x0802b916
 80225bc:	0802b7b8 	.word	0x0802b7b8
 80225c0:	7ff00000 	.word	0x7ff00000
 80225c4:	0802b90e 	.word	0x0802b90e
 80225c8:	0802b948 	.word	0x0802b948
 80225cc:	0802bbd4 	.word	0x0802bbd4
 80225d0:	0802bac0 	.word	0x0802bac0
 80225d4:	0802ba98 	.word	0x0802ba98
 80225d8:	fcb00000 	.word	0xfcb00000
 80225dc:	7ca00000 	.word	0x7ca00000
 80225e0:	7c900000 	.word	0x7c900000
 80225e4:	7fefffff 	.word	0x7fefffff
 80225e8:	2310      	movs	r3, #16
 80225ea:	0022      	movs	r2, r4
 80225ec:	401a      	ands	r2, r3
 80225ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80225f0:	421c      	tst	r4, r3
 80225f2:	d001      	beq.n	80225f8 <_strtod_l+0x604>
 80225f4:	335a      	adds	r3, #90	@ 0x5a
 80225f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80225f8:	0030      	movs	r0, r6
 80225fa:	0039      	movs	r1, r7
 80225fc:	2300      	movs	r3, #0
 80225fe:	4dbf      	ldr	r5, [pc, #764]	@ (80228fc <_strtod_l+0x908>)
 8022600:	2201      	movs	r2, #1
 8022602:	4214      	tst	r4, r2
 8022604:	d004      	beq.n	8022610 <_strtod_l+0x61c>
 8022606:	682a      	ldr	r2, [r5, #0]
 8022608:	686b      	ldr	r3, [r5, #4]
 802260a:	f7e0 f817 	bl	800263c <__aeabi_dmul>
 802260e:	2301      	movs	r3, #1
 8022610:	1064      	asrs	r4, r4, #1
 8022612:	3508      	adds	r5, #8
 8022614:	2c00      	cmp	r4, #0
 8022616:	d1f3      	bne.n	8022600 <_strtod_l+0x60c>
 8022618:	2b00      	cmp	r3, #0
 802261a:	d001      	beq.n	8022620 <_strtod_l+0x62c>
 802261c:	0006      	movs	r6, r0
 802261e:	000f      	movs	r7, r1
 8022620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022622:	2b00      	cmp	r3, #0
 8022624:	d00d      	beq.n	8022642 <_strtod_l+0x64e>
 8022626:	236b      	movs	r3, #107	@ 0x6b
 8022628:	007a      	lsls	r2, r7, #1
 802262a:	0d52      	lsrs	r2, r2, #21
 802262c:	0039      	movs	r1, r7
 802262e:	1a9b      	subs	r3, r3, r2
 8022630:	2b00      	cmp	r3, #0
 8022632:	dd06      	ble.n	8022642 <_strtod_l+0x64e>
 8022634:	2b1f      	cmp	r3, #31
 8022636:	dd5a      	ble.n	80226ee <_strtod_l+0x6fa>
 8022638:	2600      	movs	r6, #0
 802263a:	2b34      	cmp	r3, #52	@ 0x34
 802263c:	dd50      	ble.n	80226e0 <_strtod_l+0x6ec>
 802263e:	27dc      	movs	r7, #220	@ 0xdc
 8022640:	04bf      	lsls	r7, r7, #18
 8022642:	2200      	movs	r2, #0
 8022644:	2300      	movs	r3, #0
 8022646:	0030      	movs	r0, r6
 8022648:	0039      	movs	r1, r7
 802264a:	f7dd ff31 	bl	80004b0 <__aeabi_dcmpeq>
 802264e:	2800      	cmp	r0, #0
 8022650:	d1a1      	bne.n	8022596 <_strtod_l+0x5a2>
 8022652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022654:	9a08      	ldr	r2, [sp, #32]
 8022656:	9300      	str	r3, [sp, #0]
 8022658:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802265a:	9b06      	ldr	r3, [sp, #24]
 802265c:	9805      	ldr	r0, [sp, #20]
 802265e:	f002 fee7 	bl	8025430 <__s2b>
 8022662:	900d      	str	r0, [sp, #52]	@ 0x34
 8022664:	2800      	cmp	r0, #0
 8022666:	d100      	bne.n	802266a <_strtod_l+0x676>
 8022668:	e6f9      	b.n	802245e <_strtod_l+0x46a>
 802266a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802266c:	9907      	ldr	r1, [sp, #28]
 802266e:	17da      	asrs	r2, r3, #31
 8022670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022672:	1a5b      	subs	r3, r3, r1
 8022674:	401a      	ands	r2, r3
 8022676:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022678:	9217      	str	r2, [sp, #92]	@ 0x5c
 802267a:	43db      	mvns	r3, r3
 802267c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802267e:	17db      	asrs	r3, r3, #31
 8022680:	401a      	ands	r2, r3
 8022682:	2300      	movs	r3, #0
 8022684:	921a      	str	r2, [sp, #104]	@ 0x68
 8022686:	9306      	str	r3, [sp, #24]
 8022688:	9307      	str	r3, [sp, #28]
 802268a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802268c:	9805      	ldr	r0, [sp, #20]
 802268e:	6859      	ldr	r1, [r3, #4]
 8022690:	f002 fe22 	bl	80252d8 <_Balloc>
 8022694:	9008      	str	r0, [sp, #32]
 8022696:	2800      	cmp	r0, #0
 8022698:	d100      	bne.n	802269c <_strtod_l+0x6a8>
 802269a:	e6e5      	b.n	8022468 <_strtod_l+0x474>
 802269c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802269e:	300c      	adds	r0, #12
 80226a0:	0019      	movs	r1, r3
 80226a2:	691a      	ldr	r2, [r3, #16]
 80226a4:	310c      	adds	r1, #12
 80226a6:	3202      	adds	r2, #2
 80226a8:	0092      	lsls	r2, r2, #2
 80226aa:	f001 fb11 	bl	8023cd0 <memcpy>
 80226ae:	ab20      	add	r3, sp, #128	@ 0x80
 80226b0:	9301      	str	r3, [sp, #4]
 80226b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80226b4:	9300      	str	r3, [sp, #0]
 80226b6:	0032      	movs	r2, r6
 80226b8:	003b      	movs	r3, r7
 80226ba:	9805      	ldr	r0, [sp, #20]
 80226bc:	9610      	str	r6, [sp, #64]	@ 0x40
 80226be:	9711      	str	r7, [sp, #68]	@ 0x44
 80226c0:	f003 fa06 	bl	8025ad0 <__d2b>
 80226c4:	901e      	str	r0, [sp, #120]	@ 0x78
 80226c6:	2800      	cmp	r0, #0
 80226c8:	d100      	bne.n	80226cc <_strtod_l+0x6d8>
 80226ca:	e6cd      	b.n	8022468 <_strtod_l+0x474>
 80226cc:	2101      	movs	r1, #1
 80226ce:	9805      	ldr	r0, [sp, #20]
 80226d0:	f002 ff4a 	bl	8025568 <__i2b>
 80226d4:	9007      	str	r0, [sp, #28]
 80226d6:	2800      	cmp	r0, #0
 80226d8:	d10e      	bne.n	80226f8 <_strtod_l+0x704>
 80226da:	2300      	movs	r3, #0
 80226dc:	9307      	str	r3, [sp, #28]
 80226de:	e6c3      	b.n	8022468 <_strtod_l+0x474>
 80226e0:	234b      	movs	r3, #75	@ 0x4b
 80226e2:	1a9a      	subs	r2, r3, r2
 80226e4:	3b4c      	subs	r3, #76	@ 0x4c
 80226e6:	4093      	lsls	r3, r2
 80226e8:	4019      	ands	r1, r3
 80226ea:	000f      	movs	r7, r1
 80226ec:	e7a9      	b.n	8022642 <_strtod_l+0x64e>
 80226ee:	2201      	movs	r2, #1
 80226f0:	4252      	negs	r2, r2
 80226f2:	409a      	lsls	r2, r3
 80226f4:	4016      	ands	r6, r2
 80226f6:	e7a4      	b.n	8022642 <_strtod_l+0x64e>
 80226f8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80226fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80226fc:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80226fe:	1ad4      	subs	r4, r2, r3
 8022700:	2b00      	cmp	r3, #0
 8022702:	db01      	blt.n	8022708 <_strtod_l+0x714>
 8022704:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8022706:	195d      	adds	r5, r3, r5
 8022708:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802270a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802270c:	1a5b      	subs	r3, r3, r1
 802270e:	2136      	movs	r1, #54	@ 0x36
 8022710:	189b      	adds	r3, r3, r2
 8022712:	1a8a      	subs	r2, r1, r2
 8022714:	497a      	ldr	r1, [pc, #488]	@ (8022900 <_strtod_l+0x90c>)
 8022716:	2001      	movs	r0, #1
 8022718:	468c      	mov	ip, r1
 802271a:	2100      	movs	r1, #0
 802271c:	3b01      	subs	r3, #1
 802271e:	9116      	str	r1, [sp, #88]	@ 0x58
 8022720:	9014      	str	r0, [sp, #80]	@ 0x50
 8022722:	4563      	cmp	r3, ip
 8022724:	da06      	bge.n	8022734 <_strtod_l+0x740>
 8022726:	4661      	mov	r1, ip
 8022728:	1ac9      	subs	r1, r1, r3
 802272a:	1a52      	subs	r2, r2, r1
 802272c:	291f      	cmp	r1, #31
 802272e:	dc3f      	bgt.n	80227b0 <_strtod_l+0x7bc>
 8022730:	4088      	lsls	r0, r1
 8022732:	9014      	str	r0, [sp, #80]	@ 0x50
 8022734:	18ab      	adds	r3, r5, r2
 8022736:	930e      	str	r3, [sp, #56]	@ 0x38
 8022738:	18a4      	adds	r4, r4, r2
 802273a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802273c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802273e:	191c      	adds	r4, r3, r4
 8022740:	002b      	movs	r3, r5
 8022742:	4295      	cmp	r5, r2
 8022744:	dd00      	ble.n	8022748 <_strtod_l+0x754>
 8022746:	0013      	movs	r3, r2
 8022748:	42a3      	cmp	r3, r4
 802274a:	dd00      	ble.n	802274e <_strtod_l+0x75a>
 802274c:	0023      	movs	r3, r4
 802274e:	2b00      	cmp	r3, #0
 8022750:	dd04      	ble.n	802275c <_strtod_l+0x768>
 8022752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022754:	1ae4      	subs	r4, r4, r3
 8022756:	1ad2      	subs	r2, r2, r3
 8022758:	920e      	str	r2, [sp, #56]	@ 0x38
 802275a:	1aed      	subs	r5, r5, r3
 802275c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802275e:	2b00      	cmp	r3, #0
 8022760:	dd16      	ble.n	8022790 <_strtod_l+0x79c>
 8022762:	001a      	movs	r2, r3
 8022764:	9907      	ldr	r1, [sp, #28]
 8022766:	9805      	ldr	r0, [sp, #20]
 8022768:	f002 ffc8 	bl	80256fc <__pow5mult>
 802276c:	9007      	str	r0, [sp, #28]
 802276e:	2800      	cmp	r0, #0
 8022770:	d0b3      	beq.n	80226da <_strtod_l+0x6e6>
 8022772:	0001      	movs	r1, r0
 8022774:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022776:	9805      	ldr	r0, [sp, #20]
 8022778:	f002 ff0e 	bl	8025598 <__multiply>
 802277c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802277e:	2800      	cmp	r0, #0
 8022780:	d100      	bne.n	8022784 <_strtod_l+0x790>
 8022782:	e671      	b.n	8022468 <_strtod_l+0x474>
 8022784:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022786:	9805      	ldr	r0, [sp, #20]
 8022788:	f002 fdea 	bl	8025360 <_Bfree>
 802278c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802278e:	931e      	str	r3, [sp, #120]	@ 0x78
 8022790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022792:	2b00      	cmp	r3, #0
 8022794:	dc12      	bgt.n	80227bc <_strtod_l+0x7c8>
 8022796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022798:	2b00      	cmp	r3, #0
 802279a:	dd18      	ble.n	80227ce <_strtod_l+0x7da>
 802279c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802279e:	9908      	ldr	r1, [sp, #32]
 80227a0:	9805      	ldr	r0, [sp, #20]
 80227a2:	f002 ffab 	bl	80256fc <__pow5mult>
 80227a6:	9008      	str	r0, [sp, #32]
 80227a8:	2800      	cmp	r0, #0
 80227aa:	d110      	bne.n	80227ce <_strtod_l+0x7da>
 80227ac:	2300      	movs	r3, #0
 80227ae:	e65a      	b.n	8022466 <_strtod_l+0x472>
 80227b0:	4954      	ldr	r1, [pc, #336]	@ (8022904 <_strtod_l+0x910>)
 80227b2:	1acb      	subs	r3, r1, r3
 80227b4:	0001      	movs	r1, r0
 80227b6:	4099      	lsls	r1, r3
 80227b8:	9116      	str	r1, [sp, #88]	@ 0x58
 80227ba:	e7ba      	b.n	8022732 <_strtod_l+0x73e>
 80227bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80227be:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80227c0:	9805      	ldr	r0, [sp, #20]
 80227c2:	f002 fff7 	bl	80257b4 <__lshift>
 80227c6:	901e      	str	r0, [sp, #120]	@ 0x78
 80227c8:	2800      	cmp	r0, #0
 80227ca:	d1e4      	bne.n	8022796 <_strtod_l+0x7a2>
 80227cc:	e64c      	b.n	8022468 <_strtod_l+0x474>
 80227ce:	2c00      	cmp	r4, #0
 80227d0:	dd07      	ble.n	80227e2 <_strtod_l+0x7ee>
 80227d2:	0022      	movs	r2, r4
 80227d4:	9908      	ldr	r1, [sp, #32]
 80227d6:	9805      	ldr	r0, [sp, #20]
 80227d8:	f002 ffec 	bl	80257b4 <__lshift>
 80227dc:	9008      	str	r0, [sp, #32]
 80227de:	2800      	cmp	r0, #0
 80227e0:	d0e4      	beq.n	80227ac <_strtod_l+0x7b8>
 80227e2:	2d00      	cmp	r5, #0
 80227e4:	dd08      	ble.n	80227f8 <_strtod_l+0x804>
 80227e6:	002a      	movs	r2, r5
 80227e8:	9907      	ldr	r1, [sp, #28]
 80227ea:	9805      	ldr	r0, [sp, #20]
 80227ec:	f002 ffe2 	bl	80257b4 <__lshift>
 80227f0:	9007      	str	r0, [sp, #28]
 80227f2:	2800      	cmp	r0, #0
 80227f4:	d100      	bne.n	80227f8 <_strtod_l+0x804>
 80227f6:	e637      	b.n	8022468 <_strtod_l+0x474>
 80227f8:	9a08      	ldr	r2, [sp, #32]
 80227fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80227fc:	9805      	ldr	r0, [sp, #20]
 80227fe:	f003 f861 	bl	80258c4 <__mdiff>
 8022802:	9006      	str	r0, [sp, #24]
 8022804:	2800      	cmp	r0, #0
 8022806:	d100      	bne.n	802280a <_strtod_l+0x816>
 8022808:	e62e      	b.n	8022468 <_strtod_l+0x474>
 802280a:	68c3      	ldr	r3, [r0, #12]
 802280c:	9907      	ldr	r1, [sp, #28]
 802280e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022810:	2300      	movs	r3, #0
 8022812:	60c3      	str	r3, [r0, #12]
 8022814:	f003 f83a 	bl	802588c <__mcmp>
 8022818:	2800      	cmp	r0, #0
 802281a:	da3b      	bge.n	8022894 <_strtod_l+0x8a0>
 802281c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802281e:	4333      	orrs	r3, r6
 8022820:	d167      	bne.n	80228f2 <_strtod_l+0x8fe>
 8022822:	033b      	lsls	r3, r7, #12
 8022824:	d165      	bne.n	80228f2 <_strtod_l+0x8fe>
 8022826:	22d6      	movs	r2, #214	@ 0xd6
 8022828:	4b37      	ldr	r3, [pc, #220]	@ (8022908 <_strtod_l+0x914>)
 802282a:	04d2      	lsls	r2, r2, #19
 802282c:	403b      	ands	r3, r7
 802282e:	4293      	cmp	r3, r2
 8022830:	d95f      	bls.n	80228f2 <_strtod_l+0x8fe>
 8022832:	9b06      	ldr	r3, [sp, #24]
 8022834:	695b      	ldr	r3, [r3, #20]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d103      	bne.n	8022842 <_strtod_l+0x84e>
 802283a:	9b06      	ldr	r3, [sp, #24]
 802283c:	691b      	ldr	r3, [r3, #16]
 802283e:	2b01      	cmp	r3, #1
 8022840:	dd57      	ble.n	80228f2 <_strtod_l+0x8fe>
 8022842:	9906      	ldr	r1, [sp, #24]
 8022844:	2201      	movs	r2, #1
 8022846:	9805      	ldr	r0, [sp, #20]
 8022848:	f002 ffb4 	bl	80257b4 <__lshift>
 802284c:	9907      	ldr	r1, [sp, #28]
 802284e:	9006      	str	r0, [sp, #24]
 8022850:	f003 f81c 	bl	802588c <__mcmp>
 8022854:	2800      	cmp	r0, #0
 8022856:	dd4c      	ble.n	80228f2 <_strtod_l+0x8fe>
 8022858:	4b2b      	ldr	r3, [pc, #172]	@ (8022908 <_strtod_l+0x914>)
 802285a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802285c:	403b      	ands	r3, r7
 802285e:	2a00      	cmp	r2, #0
 8022860:	d074      	beq.n	802294c <_strtod_l+0x958>
 8022862:	22d6      	movs	r2, #214	@ 0xd6
 8022864:	04d2      	lsls	r2, r2, #19
 8022866:	4293      	cmp	r3, r2
 8022868:	d870      	bhi.n	802294c <_strtod_l+0x958>
 802286a:	22dc      	movs	r2, #220	@ 0xdc
 802286c:	0492      	lsls	r2, r2, #18
 802286e:	4293      	cmp	r3, r2
 8022870:	d800      	bhi.n	8022874 <_strtod_l+0x880>
 8022872:	e695      	b.n	80225a0 <_strtod_l+0x5ac>
 8022874:	0030      	movs	r0, r6
 8022876:	0039      	movs	r1, r7
 8022878:	4b24      	ldr	r3, [pc, #144]	@ (802290c <_strtod_l+0x918>)
 802287a:	2200      	movs	r2, #0
 802287c:	f7df fede 	bl	800263c <__aeabi_dmul>
 8022880:	4b21      	ldr	r3, [pc, #132]	@ (8022908 <_strtod_l+0x914>)
 8022882:	0006      	movs	r6, r0
 8022884:	000f      	movs	r7, r1
 8022886:	420b      	tst	r3, r1
 8022888:	d000      	beq.n	802288c <_strtod_l+0x898>
 802288a:	e5f6      	b.n	802247a <_strtod_l+0x486>
 802288c:	2322      	movs	r3, #34	@ 0x22
 802288e:	9a05      	ldr	r2, [sp, #20]
 8022890:	6013      	str	r3, [r2, #0]
 8022892:	e5f2      	b.n	802247a <_strtod_l+0x486>
 8022894:	970e      	str	r7, [sp, #56]	@ 0x38
 8022896:	2800      	cmp	r0, #0
 8022898:	d175      	bne.n	8022986 <_strtod_l+0x992>
 802289a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802289c:	033b      	lsls	r3, r7, #12
 802289e:	0b1b      	lsrs	r3, r3, #12
 80228a0:	2a00      	cmp	r2, #0
 80228a2:	d039      	beq.n	8022918 <_strtod_l+0x924>
 80228a4:	4a1a      	ldr	r2, [pc, #104]	@ (8022910 <_strtod_l+0x91c>)
 80228a6:	4293      	cmp	r3, r2
 80228a8:	d138      	bne.n	802291c <_strtod_l+0x928>
 80228aa:	2101      	movs	r1, #1
 80228ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228ae:	4249      	negs	r1, r1
 80228b0:	0032      	movs	r2, r6
 80228b2:	0008      	movs	r0, r1
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d00b      	beq.n	80228d0 <_strtod_l+0x8dc>
 80228b8:	24d4      	movs	r4, #212	@ 0xd4
 80228ba:	4b13      	ldr	r3, [pc, #76]	@ (8022908 <_strtod_l+0x914>)
 80228bc:	0008      	movs	r0, r1
 80228be:	403b      	ands	r3, r7
 80228c0:	04e4      	lsls	r4, r4, #19
 80228c2:	42a3      	cmp	r3, r4
 80228c4:	d804      	bhi.n	80228d0 <_strtod_l+0x8dc>
 80228c6:	306c      	adds	r0, #108	@ 0x6c
 80228c8:	0d1b      	lsrs	r3, r3, #20
 80228ca:	1ac3      	subs	r3, r0, r3
 80228cc:	4099      	lsls	r1, r3
 80228ce:	0008      	movs	r0, r1
 80228d0:	4282      	cmp	r2, r0
 80228d2:	d123      	bne.n	802291c <_strtod_l+0x928>
 80228d4:	4b0f      	ldr	r3, [pc, #60]	@ (8022914 <_strtod_l+0x920>)
 80228d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80228d8:	4299      	cmp	r1, r3
 80228da:	d102      	bne.n	80228e2 <_strtod_l+0x8ee>
 80228dc:	3201      	adds	r2, #1
 80228de:	d100      	bne.n	80228e2 <_strtod_l+0x8ee>
 80228e0:	e5c2      	b.n	8022468 <_strtod_l+0x474>
 80228e2:	4b09      	ldr	r3, [pc, #36]	@ (8022908 <_strtod_l+0x914>)
 80228e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80228e6:	2600      	movs	r6, #0
 80228e8:	401a      	ands	r2, r3
 80228ea:	0013      	movs	r3, r2
 80228ec:	2280      	movs	r2, #128	@ 0x80
 80228ee:	0352      	lsls	r2, r2, #13
 80228f0:	189f      	adds	r7, r3, r2
 80228f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d1bd      	bne.n	8022874 <_strtod_l+0x880>
 80228f8:	e5bf      	b.n	802247a <_strtod_l+0x486>
 80228fa:	46c0      	nop			@ (mov r8, r8)
 80228fc:	0802b7e0 	.word	0x0802b7e0
 8022900:	fffffc02 	.word	0xfffffc02
 8022904:	fffffbe2 	.word	0xfffffbe2
 8022908:	7ff00000 	.word	0x7ff00000
 802290c:	39500000 	.word	0x39500000
 8022910:	000fffff 	.word	0x000fffff
 8022914:	7fefffff 	.word	0x7fefffff
 8022918:	4333      	orrs	r3, r6
 802291a:	d09d      	beq.n	8022858 <_strtod_l+0x864>
 802291c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802291e:	2b00      	cmp	r3, #0
 8022920:	d01c      	beq.n	802295c <_strtod_l+0x968>
 8022922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022924:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022926:	4213      	tst	r3, r2
 8022928:	d0e3      	beq.n	80228f2 <_strtod_l+0x8fe>
 802292a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802292c:	0030      	movs	r0, r6
 802292e:	0039      	movs	r1, r7
 8022930:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022932:	2b00      	cmp	r3, #0
 8022934:	d016      	beq.n	8022964 <_strtod_l+0x970>
 8022936:	f7ff fb45 	bl	8021fc4 <sulp>
 802293a:	0002      	movs	r2, r0
 802293c:	000b      	movs	r3, r1
 802293e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022940:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022942:	f7de fed3 	bl	80016ec <__aeabi_dadd>
 8022946:	0006      	movs	r6, r0
 8022948:	000f      	movs	r7, r1
 802294a:	e7d2      	b.n	80228f2 <_strtod_l+0x8fe>
 802294c:	2601      	movs	r6, #1
 802294e:	4a92      	ldr	r2, [pc, #584]	@ (8022b98 <_strtod_l+0xba4>)
 8022950:	4276      	negs	r6, r6
 8022952:	189b      	adds	r3, r3, r2
 8022954:	4a91      	ldr	r2, [pc, #580]	@ (8022b9c <_strtod_l+0xba8>)
 8022956:	431a      	orrs	r2, r3
 8022958:	0017      	movs	r7, r2
 802295a:	e7ca      	b.n	80228f2 <_strtod_l+0x8fe>
 802295c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802295e:	4233      	tst	r3, r6
 8022960:	d0c7      	beq.n	80228f2 <_strtod_l+0x8fe>
 8022962:	e7e2      	b.n	802292a <_strtod_l+0x936>
 8022964:	f7ff fb2e 	bl	8021fc4 <sulp>
 8022968:	0002      	movs	r2, r0
 802296a:	000b      	movs	r3, r1
 802296c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802296e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022970:	f7e0 f92c 	bl	8002bcc <__aeabi_dsub>
 8022974:	2200      	movs	r2, #0
 8022976:	2300      	movs	r3, #0
 8022978:	0006      	movs	r6, r0
 802297a:	000f      	movs	r7, r1
 802297c:	f7dd fd98 	bl	80004b0 <__aeabi_dcmpeq>
 8022980:	2800      	cmp	r0, #0
 8022982:	d0b6      	beq.n	80228f2 <_strtod_l+0x8fe>
 8022984:	e60c      	b.n	80225a0 <_strtod_l+0x5ac>
 8022986:	9907      	ldr	r1, [sp, #28]
 8022988:	9806      	ldr	r0, [sp, #24]
 802298a:	f003 f901 	bl	8025b90 <__ratio>
 802298e:	2380      	movs	r3, #128	@ 0x80
 8022990:	2200      	movs	r2, #0
 8022992:	05db      	lsls	r3, r3, #23
 8022994:	0004      	movs	r4, r0
 8022996:	000d      	movs	r5, r1
 8022998:	f7dd fd9a 	bl	80004d0 <__aeabi_dcmple>
 802299c:	2800      	cmp	r0, #0
 802299e:	d06c      	beq.n	8022a7a <_strtod_l+0xa86>
 80229a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80229a2:	2b00      	cmp	r3, #0
 80229a4:	d177      	bne.n	8022a96 <_strtod_l+0xaa2>
 80229a6:	2e00      	cmp	r6, #0
 80229a8:	d157      	bne.n	8022a5a <_strtod_l+0xa66>
 80229aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229ac:	031b      	lsls	r3, r3, #12
 80229ae:	d15a      	bne.n	8022a66 <_strtod_l+0xa72>
 80229b0:	2200      	movs	r2, #0
 80229b2:	0020      	movs	r0, r4
 80229b4:	0029      	movs	r1, r5
 80229b6:	4b7a      	ldr	r3, [pc, #488]	@ (8022ba0 <_strtod_l+0xbac>)
 80229b8:	f7dd fd80 	bl	80004bc <__aeabi_dcmplt>
 80229bc:	2800      	cmp	r0, #0
 80229be:	d159      	bne.n	8022a74 <_strtod_l+0xa80>
 80229c0:	0020      	movs	r0, r4
 80229c2:	0029      	movs	r1, r5
 80229c4:	2200      	movs	r2, #0
 80229c6:	4b77      	ldr	r3, [pc, #476]	@ (8022ba4 <_strtod_l+0xbb0>)
 80229c8:	f7df fe38 	bl	800263c <__aeabi_dmul>
 80229cc:	0004      	movs	r4, r0
 80229ce:	000d      	movs	r5, r1
 80229d0:	2380      	movs	r3, #128	@ 0x80
 80229d2:	061b      	lsls	r3, r3, #24
 80229d4:	18eb      	adds	r3, r5, r3
 80229d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80229d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80229da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80229dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80229de:	9214      	str	r2, [sp, #80]	@ 0x50
 80229e0:	9315      	str	r3, [sp, #84]	@ 0x54
 80229e2:	4a71      	ldr	r2, [pc, #452]	@ (8022ba8 <_strtod_l+0xbb4>)
 80229e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229e6:	4013      	ands	r3, r2
 80229e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80229ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80229ec:	4b6f      	ldr	r3, [pc, #444]	@ (8022bac <_strtod_l+0xbb8>)
 80229ee:	429a      	cmp	r2, r3
 80229f0:	d000      	beq.n	80229f4 <_strtod_l+0xa00>
 80229f2:	e087      	b.n	8022b04 <_strtod_l+0xb10>
 80229f4:	4a6e      	ldr	r2, [pc, #440]	@ (8022bb0 <_strtod_l+0xbbc>)
 80229f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229f8:	4694      	mov	ip, r2
 80229fa:	4463      	add	r3, ip
 80229fc:	001f      	movs	r7, r3
 80229fe:	0030      	movs	r0, r6
 8022a00:	0019      	movs	r1, r3
 8022a02:	f002 fff9 	bl	80259f8 <__ulp>
 8022a06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022a08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a0a:	f7df fe17 	bl	800263c <__aeabi_dmul>
 8022a0e:	0032      	movs	r2, r6
 8022a10:	003b      	movs	r3, r7
 8022a12:	f7de fe6b 	bl	80016ec <__aeabi_dadd>
 8022a16:	4a64      	ldr	r2, [pc, #400]	@ (8022ba8 <_strtod_l+0xbb4>)
 8022a18:	4b66      	ldr	r3, [pc, #408]	@ (8022bb4 <_strtod_l+0xbc0>)
 8022a1a:	0006      	movs	r6, r0
 8022a1c:	400a      	ands	r2, r1
 8022a1e:	429a      	cmp	r2, r3
 8022a20:	d940      	bls.n	8022aa4 <_strtod_l+0xab0>
 8022a22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022a24:	4a64      	ldr	r2, [pc, #400]	@ (8022bb8 <_strtod_l+0xbc4>)
 8022a26:	4293      	cmp	r3, r2
 8022a28:	d103      	bne.n	8022a32 <_strtod_l+0xa3e>
 8022a2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a2c:	3301      	adds	r3, #1
 8022a2e:	d100      	bne.n	8022a32 <_strtod_l+0xa3e>
 8022a30:	e51a      	b.n	8022468 <_strtod_l+0x474>
 8022a32:	2601      	movs	r6, #1
 8022a34:	4f60      	ldr	r7, [pc, #384]	@ (8022bb8 <_strtod_l+0xbc4>)
 8022a36:	4276      	negs	r6, r6
 8022a38:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022a3a:	9805      	ldr	r0, [sp, #20]
 8022a3c:	f002 fc90 	bl	8025360 <_Bfree>
 8022a40:	9908      	ldr	r1, [sp, #32]
 8022a42:	9805      	ldr	r0, [sp, #20]
 8022a44:	f002 fc8c 	bl	8025360 <_Bfree>
 8022a48:	9907      	ldr	r1, [sp, #28]
 8022a4a:	9805      	ldr	r0, [sp, #20]
 8022a4c:	f002 fc88 	bl	8025360 <_Bfree>
 8022a50:	9906      	ldr	r1, [sp, #24]
 8022a52:	9805      	ldr	r0, [sp, #20]
 8022a54:	f002 fc84 	bl	8025360 <_Bfree>
 8022a58:	e617      	b.n	802268a <_strtod_l+0x696>
 8022a5a:	2e01      	cmp	r6, #1
 8022a5c:	d103      	bne.n	8022a66 <_strtod_l+0xa72>
 8022a5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	d100      	bne.n	8022a66 <_strtod_l+0xa72>
 8022a64:	e59c      	b.n	80225a0 <_strtod_l+0x5ac>
 8022a66:	2300      	movs	r3, #0
 8022a68:	4c54      	ldr	r4, [pc, #336]	@ (8022bbc <_strtod_l+0xbc8>)
 8022a6a:	4d4d      	ldr	r5, [pc, #308]	@ (8022ba0 <_strtod_l+0xbac>)
 8022a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022a70:	2400      	movs	r4, #0
 8022a72:	e7b2      	b.n	80229da <_strtod_l+0x9e6>
 8022a74:	2400      	movs	r4, #0
 8022a76:	4d4b      	ldr	r5, [pc, #300]	@ (8022ba4 <_strtod_l+0xbb0>)
 8022a78:	e7aa      	b.n	80229d0 <_strtod_l+0x9dc>
 8022a7a:	0020      	movs	r0, r4
 8022a7c:	0029      	movs	r1, r5
 8022a7e:	4b49      	ldr	r3, [pc, #292]	@ (8022ba4 <_strtod_l+0xbb0>)
 8022a80:	2200      	movs	r2, #0
 8022a82:	f7df fddb 	bl	800263c <__aeabi_dmul>
 8022a86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022a88:	0004      	movs	r4, r0
 8022a8a:	000d      	movs	r5, r1
 8022a8c:	2b00      	cmp	r3, #0
 8022a8e:	d09f      	beq.n	80229d0 <_strtod_l+0x9dc>
 8022a90:	940a      	str	r4, [sp, #40]	@ 0x28
 8022a92:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022a94:	e7a1      	b.n	80229da <_strtod_l+0x9e6>
 8022a96:	2300      	movs	r3, #0
 8022a98:	4c41      	ldr	r4, [pc, #260]	@ (8022ba0 <_strtod_l+0xbac>)
 8022a9a:	0025      	movs	r5, r4
 8022a9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022aa0:	001c      	movs	r4, r3
 8022aa2:	e79a      	b.n	80229da <_strtod_l+0x9e6>
 8022aa4:	23d4      	movs	r3, #212	@ 0xd4
 8022aa6:	049b      	lsls	r3, r3, #18
 8022aa8:	18cf      	adds	r7, r1, r3
 8022aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022aac:	9710      	str	r7, [sp, #64]	@ 0x40
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	d1c2      	bne.n	8022a38 <_strtod_l+0xa44>
 8022ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8022ba8 <_strtod_l+0xbb4>)
 8022ab4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022ab6:	403b      	ands	r3, r7
 8022ab8:	429a      	cmp	r2, r3
 8022aba:	d1bd      	bne.n	8022a38 <_strtod_l+0xa44>
 8022abc:	0020      	movs	r0, r4
 8022abe:	0029      	movs	r1, r5
 8022ac0:	f7dd fde2 	bl	8000688 <__aeabi_d2lz>
 8022ac4:	f7dd fe1a 	bl	80006fc <__aeabi_l2d>
 8022ac8:	0002      	movs	r2, r0
 8022aca:	000b      	movs	r3, r1
 8022acc:	0020      	movs	r0, r4
 8022ace:	0029      	movs	r1, r5
 8022ad0:	f7e0 f87c 	bl	8002bcc <__aeabi_dsub>
 8022ad4:	033c      	lsls	r4, r7, #12
 8022ad6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022ad8:	0b24      	lsrs	r4, r4, #12
 8022ada:	4334      	orrs	r4, r6
 8022adc:	900e      	str	r0, [sp, #56]	@ 0x38
 8022ade:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022ae0:	4a37      	ldr	r2, [pc, #220]	@ (8022bc0 <_strtod_l+0xbcc>)
 8022ae2:	431c      	orrs	r4, r3
 8022ae4:	d052      	beq.n	8022b8c <_strtod_l+0xb98>
 8022ae6:	4b37      	ldr	r3, [pc, #220]	@ (8022bc4 <_strtod_l+0xbd0>)
 8022ae8:	f7dd fce8 	bl	80004bc <__aeabi_dcmplt>
 8022aec:	2800      	cmp	r0, #0
 8022aee:	d000      	beq.n	8022af2 <_strtod_l+0xafe>
 8022af0:	e4c3      	b.n	802247a <_strtod_l+0x486>
 8022af2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022af4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022af6:	4a34      	ldr	r2, [pc, #208]	@ (8022bc8 <_strtod_l+0xbd4>)
 8022af8:	4b2a      	ldr	r3, [pc, #168]	@ (8022ba4 <_strtod_l+0xbb0>)
 8022afa:	f7dd fcf3 	bl	80004e4 <__aeabi_dcmpgt>
 8022afe:	2800      	cmp	r0, #0
 8022b00:	d09a      	beq.n	8022a38 <_strtod_l+0xa44>
 8022b02:	e4ba      	b.n	802247a <_strtod_l+0x486>
 8022b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d02a      	beq.n	8022b60 <_strtod_l+0xb6c>
 8022b0a:	23d4      	movs	r3, #212	@ 0xd4
 8022b0c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022b0e:	04db      	lsls	r3, r3, #19
 8022b10:	429a      	cmp	r2, r3
 8022b12:	d825      	bhi.n	8022b60 <_strtod_l+0xb6c>
 8022b14:	0020      	movs	r0, r4
 8022b16:	0029      	movs	r1, r5
 8022b18:	4a2c      	ldr	r2, [pc, #176]	@ (8022bcc <_strtod_l+0xbd8>)
 8022b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8022bd0 <_strtod_l+0xbdc>)
 8022b1c:	f7dd fcd8 	bl	80004d0 <__aeabi_dcmple>
 8022b20:	2800      	cmp	r0, #0
 8022b22:	d016      	beq.n	8022b52 <_strtod_l+0xb5e>
 8022b24:	0020      	movs	r0, r4
 8022b26:	0029      	movs	r1, r5
 8022b28:	f7dd fd90 	bl	800064c <__aeabi_d2uiz>
 8022b2c:	2800      	cmp	r0, #0
 8022b2e:	d100      	bne.n	8022b32 <_strtod_l+0xb3e>
 8022b30:	3001      	adds	r0, #1
 8022b32:	f7e0 fc73 	bl	800341c <__aeabi_ui2d>
 8022b36:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022b38:	0004      	movs	r4, r0
 8022b3a:	000d      	movs	r5, r1
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d122      	bne.n	8022b86 <_strtod_l+0xb92>
 8022b40:	2380      	movs	r3, #128	@ 0x80
 8022b42:	061b      	lsls	r3, r3, #24
 8022b44:	18cb      	adds	r3, r1, r3
 8022b46:	9018      	str	r0, [sp, #96]	@ 0x60
 8022b48:	9319      	str	r3, [sp, #100]	@ 0x64
 8022b4a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022b4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022b4e:	9214      	str	r2, [sp, #80]	@ 0x50
 8022b50:	9315      	str	r3, [sp, #84]	@ 0x54
 8022b52:	22d6      	movs	r2, #214	@ 0xd6
 8022b54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022b56:	04d2      	lsls	r2, r2, #19
 8022b58:	189b      	adds	r3, r3, r2
 8022b5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022b5c:	1a9b      	subs	r3, r3, r2
 8022b5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8022b60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022b62:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022b64:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8022b66:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8022b68:	f002 ff46 	bl	80259f8 <__ulp>
 8022b6c:	0002      	movs	r2, r0
 8022b6e:	000b      	movs	r3, r1
 8022b70:	0030      	movs	r0, r6
 8022b72:	0039      	movs	r1, r7
 8022b74:	f7df fd62 	bl	800263c <__aeabi_dmul>
 8022b78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022b7a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022b7c:	f7de fdb6 	bl	80016ec <__aeabi_dadd>
 8022b80:	0006      	movs	r6, r0
 8022b82:	000f      	movs	r7, r1
 8022b84:	e791      	b.n	8022aaa <_strtod_l+0xab6>
 8022b86:	9418      	str	r4, [sp, #96]	@ 0x60
 8022b88:	9519      	str	r5, [sp, #100]	@ 0x64
 8022b8a:	e7de      	b.n	8022b4a <_strtod_l+0xb56>
 8022b8c:	4b11      	ldr	r3, [pc, #68]	@ (8022bd4 <_strtod_l+0xbe0>)
 8022b8e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022b90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022b92:	f7dd fc93 	bl	80004bc <__aeabi_dcmplt>
 8022b96:	e7b2      	b.n	8022afe <_strtod_l+0xb0a>
 8022b98:	fff00000 	.word	0xfff00000
 8022b9c:	000fffff 	.word	0x000fffff
 8022ba0:	3ff00000 	.word	0x3ff00000
 8022ba4:	3fe00000 	.word	0x3fe00000
 8022ba8:	7ff00000 	.word	0x7ff00000
 8022bac:	7fe00000 	.word	0x7fe00000
 8022bb0:	fcb00000 	.word	0xfcb00000
 8022bb4:	7c9fffff 	.word	0x7c9fffff
 8022bb8:	7fefffff 	.word	0x7fefffff
 8022bbc:	bff00000 	.word	0xbff00000
 8022bc0:	94a03595 	.word	0x94a03595
 8022bc4:	3fdfffff 	.word	0x3fdfffff
 8022bc8:	35afe535 	.word	0x35afe535
 8022bcc:	ffc00000 	.word	0xffc00000
 8022bd0:	41dfffff 	.word	0x41dfffff
 8022bd4:	3fcfffff 	.word	0x3fcfffff

08022bd8 <strtod>:
 8022bd8:	b510      	push	{r4, lr}
 8022bda:	4c04      	ldr	r4, [pc, #16]	@ (8022bec <strtod+0x14>)
 8022bdc:	000a      	movs	r2, r1
 8022bde:	0001      	movs	r1, r0
 8022be0:	4b03      	ldr	r3, [pc, #12]	@ (8022bf0 <strtod+0x18>)
 8022be2:	6820      	ldr	r0, [r4, #0]
 8022be4:	f7ff fa06 	bl	8021ff4 <_strtod_l>
 8022be8:	bd10      	pop	{r4, pc}
 8022bea:	46c0      	nop			@ (mov r8, r8)
 8022bec:	200003e0 	.word	0x200003e0
 8022bf0:	20000274 	.word	0x20000274

08022bf4 <_strtol_l.constprop.0>:
 8022bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bf6:	b085      	sub	sp, #20
 8022bf8:	0017      	movs	r7, r2
 8022bfa:	001e      	movs	r6, r3
 8022bfc:	9003      	str	r0, [sp, #12]
 8022bfe:	9101      	str	r1, [sp, #4]
 8022c00:	2b24      	cmp	r3, #36	@ 0x24
 8022c02:	d844      	bhi.n	8022c8e <_strtol_l.constprop.0+0x9a>
 8022c04:	000c      	movs	r4, r1
 8022c06:	2b01      	cmp	r3, #1
 8022c08:	d041      	beq.n	8022c8e <_strtol_l.constprop.0+0x9a>
 8022c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8022d00 <_strtol_l.constprop.0+0x10c>)
 8022c0c:	2208      	movs	r2, #8
 8022c0e:	469c      	mov	ip, r3
 8022c10:	0023      	movs	r3, r4
 8022c12:	4661      	mov	r1, ip
 8022c14:	781d      	ldrb	r5, [r3, #0]
 8022c16:	3401      	adds	r4, #1
 8022c18:	5d48      	ldrb	r0, [r1, r5]
 8022c1a:	0001      	movs	r1, r0
 8022c1c:	4011      	ands	r1, r2
 8022c1e:	4210      	tst	r0, r2
 8022c20:	d1f6      	bne.n	8022c10 <_strtol_l.constprop.0+0x1c>
 8022c22:	2d2d      	cmp	r5, #45	@ 0x2d
 8022c24:	d13a      	bne.n	8022c9c <_strtol_l.constprop.0+0xa8>
 8022c26:	7825      	ldrb	r5, [r4, #0]
 8022c28:	1c9c      	adds	r4, r3, #2
 8022c2a:	2301      	movs	r3, #1
 8022c2c:	9300      	str	r3, [sp, #0]
 8022c2e:	2210      	movs	r2, #16
 8022c30:	0033      	movs	r3, r6
 8022c32:	4393      	bics	r3, r2
 8022c34:	d109      	bne.n	8022c4a <_strtol_l.constprop.0+0x56>
 8022c36:	2d30      	cmp	r5, #48	@ 0x30
 8022c38:	d136      	bne.n	8022ca8 <_strtol_l.constprop.0+0xb4>
 8022c3a:	2120      	movs	r1, #32
 8022c3c:	7823      	ldrb	r3, [r4, #0]
 8022c3e:	438b      	bics	r3, r1
 8022c40:	2b58      	cmp	r3, #88	@ 0x58
 8022c42:	d131      	bne.n	8022ca8 <_strtol_l.constprop.0+0xb4>
 8022c44:	0016      	movs	r6, r2
 8022c46:	7865      	ldrb	r5, [r4, #1]
 8022c48:	3402      	adds	r4, #2
 8022c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8022d04 <_strtol_l.constprop.0+0x110>)
 8022c4c:	9b00      	ldr	r3, [sp, #0]
 8022c4e:	4694      	mov	ip, r2
 8022c50:	4463      	add	r3, ip
 8022c52:	0031      	movs	r1, r6
 8022c54:	0018      	movs	r0, r3
 8022c56:	9302      	str	r3, [sp, #8]
 8022c58:	f7dd fb2a 	bl	80002b0 <__aeabi_uidivmod>
 8022c5c:	2200      	movs	r2, #0
 8022c5e:	4684      	mov	ip, r0
 8022c60:	0010      	movs	r0, r2
 8022c62:	002b      	movs	r3, r5
 8022c64:	3b30      	subs	r3, #48	@ 0x30
 8022c66:	2b09      	cmp	r3, #9
 8022c68:	d825      	bhi.n	8022cb6 <_strtol_l.constprop.0+0xc2>
 8022c6a:	001d      	movs	r5, r3
 8022c6c:	42ae      	cmp	r6, r5
 8022c6e:	dd31      	ble.n	8022cd4 <_strtol_l.constprop.0+0xe0>
 8022c70:	1c53      	adds	r3, r2, #1
 8022c72:	d009      	beq.n	8022c88 <_strtol_l.constprop.0+0x94>
 8022c74:	2201      	movs	r2, #1
 8022c76:	4252      	negs	r2, r2
 8022c78:	4584      	cmp	ip, r0
 8022c7a:	d305      	bcc.n	8022c88 <_strtol_l.constprop.0+0x94>
 8022c7c:	d101      	bne.n	8022c82 <_strtol_l.constprop.0+0x8e>
 8022c7e:	42a9      	cmp	r1, r5
 8022c80:	db25      	blt.n	8022cce <_strtol_l.constprop.0+0xda>
 8022c82:	2201      	movs	r2, #1
 8022c84:	4370      	muls	r0, r6
 8022c86:	1828      	adds	r0, r5, r0
 8022c88:	7825      	ldrb	r5, [r4, #0]
 8022c8a:	3401      	adds	r4, #1
 8022c8c:	e7e9      	b.n	8022c62 <_strtol_l.constprop.0+0x6e>
 8022c8e:	f000 ffe7 	bl	8023c60 <__errno>
 8022c92:	2316      	movs	r3, #22
 8022c94:	6003      	str	r3, [r0, #0]
 8022c96:	2000      	movs	r0, #0
 8022c98:	b005      	add	sp, #20
 8022c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c9c:	9100      	str	r1, [sp, #0]
 8022c9e:	2d2b      	cmp	r5, #43	@ 0x2b
 8022ca0:	d1c5      	bne.n	8022c2e <_strtol_l.constprop.0+0x3a>
 8022ca2:	7825      	ldrb	r5, [r4, #0]
 8022ca4:	1c9c      	adds	r4, r3, #2
 8022ca6:	e7c2      	b.n	8022c2e <_strtol_l.constprop.0+0x3a>
 8022ca8:	2e00      	cmp	r6, #0
 8022caa:	d1ce      	bne.n	8022c4a <_strtol_l.constprop.0+0x56>
 8022cac:	3608      	adds	r6, #8
 8022cae:	2d30      	cmp	r5, #48	@ 0x30
 8022cb0:	d0cb      	beq.n	8022c4a <_strtol_l.constprop.0+0x56>
 8022cb2:	3602      	adds	r6, #2
 8022cb4:	e7c9      	b.n	8022c4a <_strtol_l.constprop.0+0x56>
 8022cb6:	002b      	movs	r3, r5
 8022cb8:	3b41      	subs	r3, #65	@ 0x41
 8022cba:	2b19      	cmp	r3, #25
 8022cbc:	d801      	bhi.n	8022cc2 <_strtol_l.constprop.0+0xce>
 8022cbe:	3d37      	subs	r5, #55	@ 0x37
 8022cc0:	e7d4      	b.n	8022c6c <_strtol_l.constprop.0+0x78>
 8022cc2:	002b      	movs	r3, r5
 8022cc4:	3b61      	subs	r3, #97	@ 0x61
 8022cc6:	2b19      	cmp	r3, #25
 8022cc8:	d804      	bhi.n	8022cd4 <_strtol_l.constprop.0+0xe0>
 8022cca:	3d57      	subs	r5, #87	@ 0x57
 8022ccc:	e7ce      	b.n	8022c6c <_strtol_l.constprop.0+0x78>
 8022cce:	2201      	movs	r2, #1
 8022cd0:	4252      	negs	r2, r2
 8022cd2:	e7d9      	b.n	8022c88 <_strtol_l.constprop.0+0x94>
 8022cd4:	1c53      	adds	r3, r2, #1
 8022cd6:	d108      	bne.n	8022cea <_strtol_l.constprop.0+0xf6>
 8022cd8:	2322      	movs	r3, #34	@ 0x22
 8022cda:	9a03      	ldr	r2, [sp, #12]
 8022cdc:	9802      	ldr	r0, [sp, #8]
 8022cde:	6013      	str	r3, [r2, #0]
 8022ce0:	2f00      	cmp	r7, #0
 8022ce2:	d0d9      	beq.n	8022c98 <_strtol_l.constprop.0+0xa4>
 8022ce4:	1e63      	subs	r3, r4, #1
 8022ce6:	9301      	str	r3, [sp, #4]
 8022ce8:	e007      	b.n	8022cfa <_strtol_l.constprop.0+0x106>
 8022cea:	9b00      	ldr	r3, [sp, #0]
 8022cec:	2b00      	cmp	r3, #0
 8022cee:	d000      	beq.n	8022cf2 <_strtol_l.constprop.0+0xfe>
 8022cf0:	4240      	negs	r0, r0
 8022cf2:	2f00      	cmp	r7, #0
 8022cf4:	d0d0      	beq.n	8022c98 <_strtol_l.constprop.0+0xa4>
 8022cf6:	2a00      	cmp	r2, #0
 8022cf8:	d1f4      	bne.n	8022ce4 <_strtol_l.constprop.0+0xf0>
 8022cfa:	9b01      	ldr	r3, [sp, #4]
 8022cfc:	603b      	str	r3, [r7, #0]
 8022cfe:	e7cb      	b.n	8022c98 <_strtol_l.constprop.0+0xa4>
 8022d00:	0802b809 	.word	0x0802b809
 8022d04:	7fffffff 	.word	0x7fffffff

08022d08 <strtol>:
 8022d08:	b510      	push	{r4, lr}
 8022d0a:	4c04      	ldr	r4, [pc, #16]	@ (8022d1c <strtol+0x14>)
 8022d0c:	0013      	movs	r3, r2
 8022d0e:	000a      	movs	r2, r1
 8022d10:	0001      	movs	r1, r0
 8022d12:	6820      	ldr	r0, [r4, #0]
 8022d14:	f7ff ff6e 	bl	8022bf4 <_strtol_l.constprop.0>
 8022d18:	bd10      	pop	{r4, pc}
 8022d1a:	46c0      	nop			@ (mov r8, r8)
 8022d1c:	200003e0 	.word	0x200003e0

08022d20 <__cvt>:
 8022d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d22:	001f      	movs	r7, r3
 8022d24:	2300      	movs	r3, #0
 8022d26:	0016      	movs	r6, r2
 8022d28:	b08b      	sub	sp, #44	@ 0x2c
 8022d2a:	429f      	cmp	r7, r3
 8022d2c:	da04      	bge.n	8022d38 <__cvt+0x18>
 8022d2e:	2180      	movs	r1, #128	@ 0x80
 8022d30:	0609      	lsls	r1, r1, #24
 8022d32:	187b      	adds	r3, r7, r1
 8022d34:	001f      	movs	r7, r3
 8022d36:	232d      	movs	r3, #45	@ 0x2d
 8022d38:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022d3a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022d3c:	7013      	strb	r3, [r2, #0]
 8022d3e:	2320      	movs	r3, #32
 8022d40:	2203      	movs	r2, #3
 8022d42:	439d      	bics	r5, r3
 8022d44:	2d46      	cmp	r5, #70	@ 0x46
 8022d46:	d007      	beq.n	8022d58 <__cvt+0x38>
 8022d48:	002b      	movs	r3, r5
 8022d4a:	3b45      	subs	r3, #69	@ 0x45
 8022d4c:	4259      	negs	r1, r3
 8022d4e:	414b      	adcs	r3, r1
 8022d50:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022d52:	3a01      	subs	r2, #1
 8022d54:	18cb      	adds	r3, r1, r3
 8022d56:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d58:	ab09      	add	r3, sp, #36	@ 0x24
 8022d5a:	9304      	str	r3, [sp, #16]
 8022d5c:	ab08      	add	r3, sp, #32
 8022d5e:	9303      	str	r3, [sp, #12]
 8022d60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022d62:	9200      	str	r2, [sp, #0]
 8022d64:	9302      	str	r3, [sp, #8]
 8022d66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d68:	0032      	movs	r2, r6
 8022d6a:	9301      	str	r3, [sp, #4]
 8022d6c:	003b      	movs	r3, r7
 8022d6e:	f001 f84d 	bl	8023e0c <_dtoa_r>
 8022d72:	0004      	movs	r4, r0
 8022d74:	2d47      	cmp	r5, #71	@ 0x47
 8022d76:	d11b      	bne.n	8022db0 <__cvt+0x90>
 8022d78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022d7a:	07db      	lsls	r3, r3, #31
 8022d7c:	d511      	bpl.n	8022da2 <__cvt+0x82>
 8022d7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d80:	18c3      	adds	r3, r0, r3
 8022d82:	9307      	str	r3, [sp, #28]
 8022d84:	2200      	movs	r2, #0
 8022d86:	2300      	movs	r3, #0
 8022d88:	0030      	movs	r0, r6
 8022d8a:	0039      	movs	r1, r7
 8022d8c:	f7dd fb90 	bl	80004b0 <__aeabi_dcmpeq>
 8022d90:	2800      	cmp	r0, #0
 8022d92:	d001      	beq.n	8022d98 <__cvt+0x78>
 8022d94:	9b07      	ldr	r3, [sp, #28]
 8022d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d98:	2230      	movs	r2, #48	@ 0x30
 8022d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d9c:	9907      	ldr	r1, [sp, #28]
 8022d9e:	428b      	cmp	r3, r1
 8022da0:	d320      	bcc.n	8022de4 <__cvt+0xc4>
 8022da2:	0020      	movs	r0, r4
 8022da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022da6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022da8:	1b1b      	subs	r3, r3, r4
 8022daa:	6013      	str	r3, [r2, #0]
 8022dac:	b00b      	add	sp, #44	@ 0x2c
 8022dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022db0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022db2:	18c3      	adds	r3, r0, r3
 8022db4:	9307      	str	r3, [sp, #28]
 8022db6:	2d46      	cmp	r5, #70	@ 0x46
 8022db8:	d1e4      	bne.n	8022d84 <__cvt+0x64>
 8022dba:	7803      	ldrb	r3, [r0, #0]
 8022dbc:	2b30      	cmp	r3, #48	@ 0x30
 8022dbe:	d10c      	bne.n	8022dda <__cvt+0xba>
 8022dc0:	2200      	movs	r2, #0
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	0030      	movs	r0, r6
 8022dc6:	0039      	movs	r1, r7
 8022dc8:	f7dd fb72 	bl	80004b0 <__aeabi_dcmpeq>
 8022dcc:	2800      	cmp	r0, #0
 8022dce:	d104      	bne.n	8022dda <__cvt+0xba>
 8022dd0:	2301      	movs	r3, #1
 8022dd2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022dd4:	1a9b      	subs	r3, r3, r2
 8022dd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022dd8:	6013      	str	r3, [r2, #0]
 8022dda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022ddc:	9a07      	ldr	r2, [sp, #28]
 8022dde:	681b      	ldr	r3, [r3, #0]
 8022de0:	18d3      	adds	r3, r2, r3
 8022de2:	e7ce      	b.n	8022d82 <__cvt+0x62>
 8022de4:	1c59      	adds	r1, r3, #1
 8022de6:	9109      	str	r1, [sp, #36]	@ 0x24
 8022de8:	701a      	strb	r2, [r3, #0]
 8022dea:	e7d6      	b.n	8022d9a <__cvt+0x7a>

08022dec <__exponent>:
 8022dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dee:	232b      	movs	r3, #43	@ 0x2b
 8022df0:	0005      	movs	r5, r0
 8022df2:	000c      	movs	r4, r1
 8022df4:	b085      	sub	sp, #20
 8022df6:	7002      	strb	r2, [r0, #0]
 8022df8:	2900      	cmp	r1, #0
 8022dfa:	da01      	bge.n	8022e00 <__exponent+0x14>
 8022dfc:	424c      	negs	r4, r1
 8022dfe:	3302      	adds	r3, #2
 8022e00:	706b      	strb	r3, [r5, #1]
 8022e02:	2c09      	cmp	r4, #9
 8022e04:	dd2c      	ble.n	8022e60 <__exponent+0x74>
 8022e06:	ab02      	add	r3, sp, #8
 8022e08:	1dde      	adds	r6, r3, #7
 8022e0a:	0020      	movs	r0, r4
 8022e0c:	210a      	movs	r1, #10
 8022e0e:	f7dd fb39 	bl	8000484 <__aeabi_idivmod>
 8022e12:	0037      	movs	r7, r6
 8022e14:	3130      	adds	r1, #48	@ 0x30
 8022e16:	3e01      	subs	r6, #1
 8022e18:	0020      	movs	r0, r4
 8022e1a:	7031      	strb	r1, [r6, #0]
 8022e1c:	210a      	movs	r1, #10
 8022e1e:	9401      	str	r4, [sp, #4]
 8022e20:	f7dd fa4a 	bl	80002b8 <__divsi3>
 8022e24:	9b01      	ldr	r3, [sp, #4]
 8022e26:	0004      	movs	r4, r0
 8022e28:	2b63      	cmp	r3, #99	@ 0x63
 8022e2a:	dcee      	bgt.n	8022e0a <__exponent+0x1e>
 8022e2c:	1eba      	subs	r2, r7, #2
 8022e2e:	1ca8      	adds	r0, r5, #2
 8022e30:	0001      	movs	r1, r0
 8022e32:	0013      	movs	r3, r2
 8022e34:	3430      	adds	r4, #48	@ 0x30
 8022e36:	7014      	strb	r4, [r2, #0]
 8022e38:	ac02      	add	r4, sp, #8
 8022e3a:	3407      	adds	r4, #7
 8022e3c:	429c      	cmp	r4, r3
 8022e3e:	d80a      	bhi.n	8022e56 <__exponent+0x6a>
 8022e40:	2300      	movs	r3, #0
 8022e42:	42a2      	cmp	r2, r4
 8022e44:	d803      	bhi.n	8022e4e <__exponent+0x62>
 8022e46:	3309      	adds	r3, #9
 8022e48:	aa02      	add	r2, sp, #8
 8022e4a:	189b      	adds	r3, r3, r2
 8022e4c:	1bdb      	subs	r3, r3, r7
 8022e4e:	18c0      	adds	r0, r0, r3
 8022e50:	1b40      	subs	r0, r0, r5
 8022e52:	b005      	add	sp, #20
 8022e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e56:	781c      	ldrb	r4, [r3, #0]
 8022e58:	3301      	adds	r3, #1
 8022e5a:	700c      	strb	r4, [r1, #0]
 8022e5c:	3101      	adds	r1, #1
 8022e5e:	e7eb      	b.n	8022e38 <__exponent+0x4c>
 8022e60:	2330      	movs	r3, #48	@ 0x30
 8022e62:	18e4      	adds	r4, r4, r3
 8022e64:	70ab      	strb	r3, [r5, #2]
 8022e66:	1d28      	adds	r0, r5, #4
 8022e68:	70ec      	strb	r4, [r5, #3]
 8022e6a:	e7f1      	b.n	8022e50 <__exponent+0x64>

08022e6c <_printf_float>:
 8022e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e6e:	b097      	sub	sp, #92	@ 0x5c
 8022e70:	000d      	movs	r5, r1
 8022e72:	920a      	str	r2, [sp, #40]	@ 0x28
 8022e74:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8022e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e78:	9009      	str	r0, [sp, #36]	@ 0x24
 8022e7a:	f000 fe9f 	bl	8023bbc <_localeconv_r>
 8022e7e:	6803      	ldr	r3, [r0, #0]
 8022e80:	0018      	movs	r0, r3
 8022e82:	930d      	str	r3, [sp, #52]	@ 0x34
 8022e84:	f7dd f972 	bl	800016c <strlen>
 8022e88:	2300      	movs	r3, #0
 8022e8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022e8c:	9314      	str	r3, [sp, #80]	@ 0x50
 8022e8e:	7e2b      	ldrb	r3, [r5, #24]
 8022e90:	2207      	movs	r2, #7
 8022e92:	930c      	str	r3, [sp, #48]	@ 0x30
 8022e94:	682b      	ldr	r3, [r5, #0]
 8022e96:	930e      	str	r3, [sp, #56]	@ 0x38
 8022e98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022e9a:	6823      	ldr	r3, [r4, #0]
 8022e9c:	05c9      	lsls	r1, r1, #23
 8022e9e:	d545      	bpl.n	8022f2c <_printf_float+0xc0>
 8022ea0:	189b      	adds	r3, r3, r2
 8022ea2:	4393      	bics	r3, r2
 8022ea4:	001a      	movs	r2, r3
 8022ea6:	3208      	adds	r2, #8
 8022ea8:	6022      	str	r2, [r4, #0]
 8022eaa:	2201      	movs	r2, #1
 8022eac:	681e      	ldr	r6, [r3, #0]
 8022eae:	685f      	ldr	r7, [r3, #4]
 8022eb0:	007b      	lsls	r3, r7, #1
 8022eb2:	085b      	lsrs	r3, r3, #1
 8022eb4:	9311      	str	r3, [sp, #68]	@ 0x44
 8022eb6:	9610      	str	r6, [sp, #64]	@ 0x40
 8022eb8:	64ae      	str	r6, [r5, #72]	@ 0x48
 8022eba:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8022ebc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022ebe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8023160 <_printf_float+0x2f4>)
 8022ec2:	4252      	negs	r2, r2
 8022ec4:	f7e0 fa1e 	bl	8003304 <__aeabi_dcmpun>
 8022ec8:	2800      	cmp	r0, #0
 8022eca:	d131      	bne.n	8022f30 <_printf_float+0xc4>
 8022ecc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022ece:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022ed0:	2201      	movs	r2, #1
 8022ed2:	4ba3      	ldr	r3, [pc, #652]	@ (8023160 <_printf_float+0x2f4>)
 8022ed4:	4252      	negs	r2, r2
 8022ed6:	f7dd fafb 	bl	80004d0 <__aeabi_dcmple>
 8022eda:	2800      	cmp	r0, #0
 8022edc:	d128      	bne.n	8022f30 <_printf_float+0xc4>
 8022ede:	2200      	movs	r2, #0
 8022ee0:	2300      	movs	r3, #0
 8022ee2:	0030      	movs	r0, r6
 8022ee4:	0039      	movs	r1, r7
 8022ee6:	f7dd fae9 	bl	80004bc <__aeabi_dcmplt>
 8022eea:	2800      	cmp	r0, #0
 8022eec:	d003      	beq.n	8022ef6 <_printf_float+0x8a>
 8022eee:	002b      	movs	r3, r5
 8022ef0:	222d      	movs	r2, #45	@ 0x2d
 8022ef2:	3343      	adds	r3, #67	@ 0x43
 8022ef4:	701a      	strb	r2, [r3, #0]
 8022ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ef8:	4f9a      	ldr	r7, [pc, #616]	@ (8023164 <_printf_float+0x2f8>)
 8022efa:	2b47      	cmp	r3, #71	@ 0x47
 8022efc:	d900      	bls.n	8022f00 <_printf_float+0x94>
 8022efe:	4f9a      	ldr	r7, [pc, #616]	@ (8023168 <_printf_float+0x2fc>)
 8022f00:	2303      	movs	r3, #3
 8022f02:	2400      	movs	r4, #0
 8022f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f06:	612b      	str	r3, [r5, #16]
 8022f08:	3301      	adds	r3, #1
 8022f0a:	439a      	bics	r2, r3
 8022f0c:	602a      	str	r2, [r5, #0]
 8022f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f10:	0029      	movs	r1, r5
 8022f12:	9300      	str	r3, [sp, #0]
 8022f14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f18:	aa15      	add	r2, sp, #84	@ 0x54
 8022f1a:	f000 f9e5 	bl	80232e8 <_printf_common>
 8022f1e:	3001      	adds	r0, #1
 8022f20:	d000      	beq.n	8022f24 <_printf_float+0xb8>
 8022f22:	e09f      	b.n	8023064 <_printf_float+0x1f8>
 8022f24:	2001      	movs	r0, #1
 8022f26:	4240      	negs	r0, r0
 8022f28:	b017      	add	sp, #92	@ 0x5c
 8022f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f2c:	3307      	adds	r3, #7
 8022f2e:	e7b8      	b.n	8022ea2 <_printf_float+0x36>
 8022f30:	0032      	movs	r2, r6
 8022f32:	003b      	movs	r3, r7
 8022f34:	0030      	movs	r0, r6
 8022f36:	0039      	movs	r1, r7
 8022f38:	f7e0 f9e4 	bl	8003304 <__aeabi_dcmpun>
 8022f3c:	2800      	cmp	r0, #0
 8022f3e:	d00b      	beq.n	8022f58 <_printf_float+0xec>
 8022f40:	2f00      	cmp	r7, #0
 8022f42:	da03      	bge.n	8022f4c <_printf_float+0xe0>
 8022f44:	002b      	movs	r3, r5
 8022f46:	222d      	movs	r2, #45	@ 0x2d
 8022f48:	3343      	adds	r3, #67	@ 0x43
 8022f4a:	701a      	strb	r2, [r3, #0]
 8022f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f4e:	4f87      	ldr	r7, [pc, #540]	@ (802316c <_printf_float+0x300>)
 8022f50:	2b47      	cmp	r3, #71	@ 0x47
 8022f52:	d9d5      	bls.n	8022f00 <_printf_float+0x94>
 8022f54:	4f86      	ldr	r7, [pc, #536]	@ (8023170 <_printf_float+0x304>)
 8022f56:	e7d3      	b.n	8022f00 <_printf_float+0x94>
 8022f58:	2220      	movs	r2, #32
 8022f5a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022f5c:	686b      	ldr	r3, [r5, #4]
 8022f5e:	4394      	bics	r4, r2
 8022f60:	1c5a      	adds	r2, r3, #1
 8022f62:	d146      	bne.n	8022ff2 <_printf_float+0x186>
 8022f64:	3307      	adds	r3, #7
 8022f66:	606b      	str	r3, [r5, #4]
 8022f68:	2380      	movs	r3, #128	@ 0x80
 8022f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f6c:	00db      	lsls	r3, r3, #3
 8022f6e:	4313      	orrs	r3, r2
 8022f70:	2200      	movs	r2, #0
 8022f72:	602b      	str	r3, [r5, #0]
 8022f74:	9206      	str	r2, [sp, #24]
 8022f76:	aa14      	add	r2, sp, #80	@ 0x50
 8022f78:	9205      	str	r2, [sp, #20]
 8022f7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022f7c:	a90a      	add	r1, sp, #40	@ 0x28
 8022f7e:	9204      	str	r2, [sp, #16]
 8022f80:	aa13      	add	r2, sp, #76	@ 0x4c
 8022f82:	9203      	str	r2, [sp, #12]
 8022f84:	2223      	movs	r2, #35	@ 0x23
 8022f86:	1852      	adds	r2, r2, r1
 8022f88:	9202      	str	r2, [sp, #8]
 8022f8a:	9301      	str	r3, [sp, #4]
 8022f8c:	686b      	ldr	r3, [r5, #4]
 8022f8e:	0032      	movs	r2, r6
 8022f90:	9300      	str	r3, [sp, #0]
 8022f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f94:	003b      	movs	r3, r7
 8022f96:	f7ff fec3 	bl	8022d20 <__cvt>
 8022f9a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022f9c:	0007      	movs	r7, r0
 8022f9e:	2c47      	cmp	r4, #71	@ 0x47
 8022fa0:	d12d      	bne.n	8022ffe <_printf_float+0x192>
 8022fa2:	1cd3      	adds	r3, r2, #3
 8022fa4:	db02      	blt.n	8022fac <_printf_float+0x140>
 8022fa6:	686b      	ldr	r3, [r5, #4]
 8022fa8:	429a      	cmp	r2, r3
 8022faa:	dd48      	ble.n	802303e <_printf_float+0x1d2>
 8022fac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022fae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022fb0:	3b02      	subs	r3, #2
 8022fb2:	b2db      	uxtb	r3, r3
 8022fb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fb6:	0028      	movs	r0, r5
 8022fb8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022fba:	3901      	subs	r1, #1
 8022fbc:	3050      	adds	r0, #80	@ 0x50
 8022fbe:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022fc0:	f7ff ff14 	bl	8022dec <__exponent>
 8022fc4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022fc6:	0004      	movs	r4, r0
 8022fc8:	1813      	adds	r3, r2, r0
 8022fca:	612b      	str	r3, [r5, #16]
 8022fcc:	2a01      	cmp	r2, #1
 8022fce:	dc02      	bgt.n	8022fd6 <_printf_float+0x16a>
 8022fd0:	682a      	ldr	r2, [r5, #0]
 8022fd2:	07d2      	lsls	r2, r2, #31
 8022fd4:	d501      	bpl.n	8022fda <_printf_float+0x16e>
 8022fd6:	3301      	adds	r3, #1
 8022fd8:	612b      	str	r3, [r5, #16]
 8022fda:	2323      	movs	r3, #35	@ 0x23
 8022fdc:	aa0a      	add	r2, sp, #40	@ 0x28
 8022fde:	189b      	adds	r3, r3, r2
 8022fe0:	781b      	ldrb	r3, [r3, #0]
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d100      	bne.n	8022fe8 <_printf_float+0x17c>
 8022fe6:	e792      	b.n	8022f0e <_printf_float+0xa2>
 8022fe8:	002b      	movs	r3, r5
 8022fea:	222d      	movs	r2, #45	@ 0x2d
 8022fec:	3343      	adds	r3, #67	@ 0x43
 8022fee:	701a      	strb	r2, [r3, #0]
 8022ff0:	e78d      	b.n	8022f0e <_printf_float+0xa2>
 8022ff2:	2c47      	cmp	r4, #71	@ 0x47
 8022ff4:	d1b8      	bne.n	8022f68 <_printf_float+0xfc>
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	d1b6      	bne.n	8022f68 <_printf_float+0xfc>
 8022ffa:	3301      	adds	r3, #1
 8022ffc:	e7b3      	b.n	8022f66 <_printf_float+0xfa>
 8022ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023000:	0011      	movs	r1, r2
 8023002:	2b65      	cmp	r3, #101	@ 0x65
 8023004:	d9d7      	bls.n	8022fb6 <_printf_float+0x14a>
 8023006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023008:	2b66      	cmp	r3, #102	@ 0x66
 802300a:	d11a      	bne.n	8023042 <_printf_float+0x1d6>
 802300c:	686b      	ldr	r3, [r5, #4]
 802300e:	2a00      	cmp	r2, #0
 8023010:	dd09      	ble.n	8023026 <_printf_float+0x1ba>
 8023012:	612a      	str	r2, [r5, #16]
 8023014:	2b00      	cmp	r3, #0
 8023016:	d102      	bne.n	802301e <_printf_float+0x1b2>
 8023018:	6829      	ldr	r1, [r5, #0]
 802301a:	07c9      	lsls	r1, r1, #31
 802301c:	d50b      	bpl.n	8023036 <_printf_float+0x1ca>
 802301e:	3301      	adds	r3, #1
 8023020:	189b      	adds	r3, r3, r2
 8023022:	612b      	str	r3, [r5, #16]
 8023024:	e007      	b.n	8023036 <_printf_float+0x1ca>
 8023026:	2b00      	cmp	r3, #0
 8023028:	d103      	bne.n	8023032 <_printf_float+0x1c6>
 802302a:	2201      	movs	r2, #1
 802302c:	6829      	ldr	r1, [r5, #0]
 802302e:	4211      	tst	r1, r2
 8023030:	d000      	beq.n	8023034 <_printf_float+0x1c8>
 8023032:	1c9a      	adds	r2, r3, #2
 8023034:	612a      	str	r2, [r5, #16]
 8023036:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023038:	2400      	movs	r4, #0
 802303a:	65ab      	str	r3, [r5, #88]	@ 0x58
 802303c:	e7cd      	b.n	8022fda <_printf_float+0x16e>
 802303e:	2367      	movs	r3, #103	@ 0x67
 8023040:	930c      	str	r3, [sp, #48]	@ 0x30
 8023042:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023044:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023046:	4299      	cmp	r1, r3
 8023048:	db06      	blt.n	8023058 <_printf_float+0x1ec>
 802304a:	682b      	ldr	r3, [r5, #0]
 802304c:	6129      	str	r1, [r5, #16]
 802304e:	07db      	lsls	r3, r3, #31
 8023050:	d5f1      	bpl.n	8023036 <_printf_float+0x1ca>
 8023052:	3101      	adds	r1, #1
 8023054:	6129      	str	r1, [r5, #16]
 8023056:	e7ee      	b.n	8023036 <_printf_float+0x1ca>
 8023058:	2201      	movs	r2, #1
 802305a:	2900      	cmp	r1, #0
 802305c:	dce0      	bgt.n	8023020 <_printf_float+0x1b4>
 802305e:	1892      	adds	r2, r2, r2
 8023060:	1a52      	subs	r2, r2, r1
 8023062:	e7dd      	b.n	8023020 <_printf_float+0x1b4>
 8023064:	682a      	ldr	r2, [r5, #0]
 8023066:	0553      	lsls	r3, r2, #21
 8023068:	d408      	bmi.n	802307c <_printf_float+0x210>
 802306a:	692b      	ldr	r3, [r5, #16]
 802306c:	003a      	movs	r2, r7
 802306e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023070:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023072:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023074:	47a0      	blx	r4
 8023076:	3001      	adds	r0, #1
 8023078:	d129      	bne.n	80230ce <_printf_float+0x262>
 802307a:	e753      	b.n	8022f24 <_printf_float+0xb8>
 802307c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802307e:	2b65      	cmp	r3, #101	@ 0x65
 8023080:	d800      	bhi.n	8023084 <_printf_float+0x218>
 8023082:	e0da      	b.n	802323a <_printf_float+0x3ce>
 8023084:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8023086:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8023088:	2200      	movs	r2, #0
 802308a:	2300      	movs	r3, #0
 802308c:	f7dd fa10 	bl	80004b0 <__aeabi_dcmpeq>
 8023090:	2800      	cmp	r0, #0
 8023092:	d033      	beq.n	80230fc <_printf_float+0x290>
 8023094:	2301      	movs	r3, #1
 8023096:	4a37      	ldr	r2, [pc, #220]	@ (8023174 <_printf_float+0x308>)
 8023098:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802309a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802309c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802309e:	47a0      	blx	r4
 80230a0:	3001      	adds	r0, #1
 80230a2:	d100      	bne.n	80230a6 <_printf_float+0x23a>
 80230a4:	e73e      	b.n	8022f24 <_printf_float+0xb8>
 80230a6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80230a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80230aa:	42b3      	cmp	r3, r6
 80230ac:	db02      	blt.n	80230b4 <_printf_float+0x248>
 80230ae:	682b      	ldr	r3, [r5, #0]
 80230b0:	07db      	lsls	r3, r3, #31
 80230b2:	d50c      	bpl.n	80230ce <_printf_float+0x262>
 80230b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80230b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80230b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80230ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230be:	47a0      	blx	r4
 80230c0:	2400      	movs	r4, #0
 80230c2:	3001      	adds	r0, #1
 80230c4:	d100      	bne.n	80230c8 <_printf_float+0x25c>
 80230c6:	e72d      	b.n	8022f24 <_printf_float+0xb8>
 80230c8:	1e73      	subs	r3, r6, #1
 80230ca:	42a3      	cmp	r3, r4
 80230cc:	dc0a      	bgt.n	80230e4 <_printf_float+0x278>
 80230ce:	682b      	ldr	r3, [r5, #0]
 80230d0:	079b      	lsls	r3, r3, #30
 80230d2:	d500      	bpl.n	80230d6 <_printf_float+0x26a>
 80230d4:	e105      	b.n	80232e2 <_printf_float+0x476>
 80230d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80230d8:	68e8      	ldr	r0, [r5, #12]
 80230da:	4298      	cmp	r0, r3
 80230dc:	db00      	blt.n	80230e0 <_printf_float+0x274>
 80230de:	e723      	b.n	8022f28 <_printf_float+0xbc>
 80230e0:	0018      	movs	r0, r3
 80230e2:	e721      	b.n	8022f28 <_printf_float+0xbc>
 80230e4:	002a      	movs	r2, r5
 80230e6:	2301      	movs	r3, #1
 80230e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80230ee:	321a      	adds	r2, #26
 80230f0:	47b8      	blx	r7
 80230f2:	3001      	adds	r0, #1
 80230f4:	d100      	bne.n	80230f8 <_printf_float+0x28c>
 80230f6:	e715      	b.n	8022f24 <_printf_float+0xb8>
 80230f8:	3401      	adds	r4, #1
 80230fa:	e7e5      	b.n	80230c8 <_printf_float+0x25c>
 80230fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80230fe:	2b00      	cmp	r3, #0
 8023100:	dc3a      	bgt.n	8023178 <_printf_float+0x30c>
 8023102:	2301      	movs	r3, #1
 8023104:	4a1b      	ldr	r2, [pc, #108]	@ (8023174 <_printf_float+0x308>)
 8023106:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023108:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802310a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802310c:	47a0      	blx	r4
 802310e:	3001      	adds	r0, #1
 8023110:	d100      	bne.n	8023114 <_printf_float+0x2a8>
 8023112:	e707      	b.n	8022f24 <_printf_float+0xb8>
 8023114:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8023116:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023118:	4333      	orrs	r3, r6
 802311a:	d102      	bne.n	8023122 <_printf_float+0x2b6>
 802311c:	682b      	ldr	r3, [r5, #0]
 802311e:	07db      	lsls	r3, r3, #31
 8023120:	d5d5      	bpl.n	80230ce <_printf_float+0x262>
 8023122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023124:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023126:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023128:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802312a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802312c:	47a0      	blx	r4
 802312e:	2300      	movs	r3, #0
 8023130:	3001      	adds	r0, #1
 8023132:	d100      	bne.n	8023136 <_printf_float+0x2ca>
 8023134:	e6f6      	b.n	8022f24 <_printf_float+0xb8>
 8023136:	930c      	str	r3, [sp, #48]	@ 0x30
 8023138:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802313a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802313c:	425b      	negs	r3, r3
 802313e:	4293      	cmp	r3, r2
 8023140:	dc01      	bgt.n	8023146 <_printf_float+0x2da>
 8023142:	0033      	movs	r3, r6
 8023144:	e792      	b.n	802306c <_printf_float+0x200>
 8023146:	002a      	movs	r2, r5
 8023148:	2301      	movs	r3, #1
 802314a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802314c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802314e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023150:	321a      	adds	r2, #26
 8023152:	47a0      	blx	r4
 8023154:	3001      	adds	r0, #1
 8023156:	d100      	bne.n	802315a <_printf_float+0x2ee>
 8023158:	e6e4      	b.n	8022f24 <_printf_float+0xb8>
 802315a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802315c:	3301      	adds	r3, #1
 802315e:	e7ea      	b.n	8023136 <_printf_float+0x2ca>
 8023160:	7fefffff 	.word	0x7fefffff
 8023164:	0802b909 	.word	0x0802b909
 8023168:	0802b90d 	.word	0x0802b90d
 802316c:	0802b911 	.word	0x0802b911
 8023170:	0802b915 	.word	0x0802b915
 8023174:	0802b919 	.word	0x0802b919
 8023178:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802317a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 802317c:	930c      	str	r3, [sp, #48]	@ 0x30
 802317e:	429e      	cmp	r6, r3
 8023180:	dd00      	ble.n	8023184 <_printf_float+0x318>
 8023182:	001e      	movs	r6, r3
 8023184:	2e00      	cmp	r6, #0
 8023186:	dc31      	bgt.n	80231ec <_printf_float+0x380>
 8023188:	43f3      	mvns	r3, r6
 802318a:	2400      	movs	r4, #0
 802318c:	17db      	asrs	r3, r3, #31
 802318e:	4033      	ands	r3, r6
 8023190:	930e      	str	r3, [sp, #56]	@ 0x38
 8023192:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8023194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023196:	1af3      	subs	r3, r6, r3
 8023198:	42a3      	cmp	r3, r4
 802319a:	dc30      	bgt.n	80231fe <_printf_float+0x392>
 802319c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802319e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231a0:	429a      	cmp	r2, r3
 80231a2:	dc38      	bgt.n	8023216 <_printf_float+0x3aa>
 80231a4:	682b      	ldr	r3, [r5, #0]
 80231a6:	07db      	lsls	r3, r3, #31
 80231a8:	d435      	bmi.n	8023216 <_printf_float+0x3aa>
 80231aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80231ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80231ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231b0:	1b9b      	subs	r3, r3, r6
 80231b2:	1b14      	subs	r4, r2, r4
 80231b4:	429c      	cmp	r4, r3
 80231b6:	dd00      	ble.n	80231ba <_printf_float+0x34e>
 80231b8:	001c      	movs	r4, r3
 80231ba:	2c00      	cmp	r4, #0
 80231bc:	dc34      	bgt.n	8023228 <_printf_float+0x3bc>
 80231be:	43e3      	mvns	r3, r4
 80231c0:	2600      	movs	r6, #0
 80231c2:	17db      	asrs	r3, r3, #31
 80231c4:	401c      	ands	r4, r3
 80231c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80231c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231ca:	1ad3      	subs	r3, r2, r3
 80231cc:	1b1b      	subs	r3, r3, r4
 80231ce:	42b3      	cmp	r3, r6
 80231d0:	dc00      	bgt.n	80231d4 <_printf_float+0x368>
 80231d2:	e77c      	b.n	80230ce <_printf_float+0x262>
 80231d4:	002a      	movs	r2, r5
 80231d6:	2301      	movs	r3, #1
 80231d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80231de:	321a      	adds	r2, #26
 80231e0:	47b8      	blx	r7
 80231e2:	3001      	adds	r0, #1
 80231e4:	d100      	bne.n	80231e8 <_printf_float+0x37c>
 80231e6:	e69d      	b.n	8022f24 <_printf_float+0xb8>
 80231e8:	3601      	adds	r6, #1
 80231ea:	e7ec      	b.n	80231c6 <_printf_float+0x35a>
 80231ec:	0033      	movs	r3, r6
 80231ee:	003a      	movs	r2, r7
 80231f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80231f6:	47a0      	blx	r4
 80231f8:	3001      	adds	r0, #1
 80231fa:	d1c5      	bne.n	8023188 <_printf_float+0x31c>
 80231fc:	e692      	b.n	8022f24 <_printf_float+0xb8>
 80231fe:	002a      	movs	r2, r5
 8023200:	2301      	movs	r3, #1
 8023202:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023204:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023206:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023208:	321a      	adds	r2, #26
 802320a:	47b0      	blx	r6
 802320c:	3001      	adds	r0, #1
 802320e:	d100      	bne.n	8023212 <_printf_float+0x3a6>
 8023210:	e688      	b.n	8022f24 <_printf_float+0xb8>
 8023212:	3401      	adds	r4, #1
 8023214:	e7bd      	b.n	8023192 <_printf_float+0x326>
 8023216:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802321a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802321c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802321e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023220:	47a0      	blx	r4
 8023222:	3001      	adds	r0, #1
 8023224:	d1c1      	bne.n	80231aa <_printf_float+0x33e>
 8023226:	e67d      	b.n	8022f24 <_printf_float+0xb8>
 8023228:	19ba      	adds	r2, r7, r6
 802322a:	0023      	movs	r3, r4
 802322c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802322e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023230:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023232:	47b0      	blx	r6
 8023234:	3001      	adds	r0, #1
 8023236:	d1c2      	bne.n	80231be <_printf_float+0x352>
 8023238:	e674      	b.n	8022f24 <_printf_float+0xb8>
 802323a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802323c:	930c      	str	r3, [sp, #48]	@ 0x30
 802323e:	2b01      	cmp	r3, #1
 8023240:	dc02      	bgt.n	8023248 <_printf_float+0x3dc>
 8023242:	2301      	movs	r3, #1
 8023244:	421a      	tst	r2, r3
 8023246:	d039      	beq.n	80232bc <_printf_float+0x450>
 8023248:	2301      	movs	r3, #1
 802324a:	003a      	movs	r2, r7
 802324c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802324e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023250:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023252:	47b0      	blx	r6
 8023254:	3001      	adds	r0, #1
 8023256:	d100      	bne.n	802325a <_printf_float+0x3ee>
 8023258:	e664      	b.n	8022f24 <_printf_float+0xb8>
 802325a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802325c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802325e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023260:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023262:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023264:	47b0      	blx	r6
 8023266:	3001      	adds	r0, #1
 8023268:	d100      	bne.n	802326c <_printf_float+0x400>
 802326a:	e65b      	b.n	8022f24 <_printf_float+0xb8>
 802326c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 802326e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8023270:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023272:	2200      	movs	r2, #0
 8023274:	3b01      	subs	r3, #1
 8023276:	930c      	str	r3, [sp, #48]	@ 0x30
 8023278:	2300      	movs	r3, #0
 802327a:	f7dd f919 	bl	80004b0 <__aeabi_dcmpeq>
 802327e:	2800      	cmp	r0, #0
 8023280:	d11a      	bne.n	80232b8 <_printf_float+0x44c>
 8023282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023284:	1c7a      	adds	r2, r7, #1
 8023286:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023288:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802328a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802328c:	47b0      	blx	r6
 802328e:	3001      	adds	r0, #1
 8023290:	d10e      	bne.n	80232b0 <_printf_float+0x444>
 8023292:	e647      	b.n	8022f24 <_printf_float+0xb8>
 8023294:	002a      	movs	r2, r5
 8023296:	2301      	movs	r3, #1
 8023298:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802329a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802329c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802329e:	321a      	adds	r2, #26
 80232a0:	47b8      	blx	r7
 80232a2:	3001      	adds	r0, #1
 80232a4:	d100      	bne.n	80232a8 <_printf_float+0x43c>
 80232a6:	e63d      	b.n	8022f24 <_printf_float+0xb8>
 80232a8:	3601      	adds	r6, #1
 80232aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80232ac:	429e      	cmp	r6, r3
 80232ae:	dbf1      	blt.n	8023294 <_printf_float+0x428>
 80232b0:	002a      	movs	r2, r5
 80232b2:	0023      	movs	r3, r4
 80232b4:	3250      	adds	r2, #80	@ 0x50
 80232b6:	e6da      	b.n	802306e <_printf_float+0x202>
 80232b8:	2600      	movs	r6, #0
 80232ba:	e7f6      	b.n	80232aa <_printf_float+0x43e>
 80232bc:	003a      	movs	r2, r7
 80232be:	e7e2      	b.n	8023286 <_printf_float+0x41a>
 80232c0:	002a      	movs	r2, r5
 80232c2:	2301      	movs	r3, #1
 80232c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80232c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80232c8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80232ca:	3219      	adds	r2, #25
 80232cc:	47b0      	blx	r6
 80232ce:	3001      	adds	r0, #1
 80232d0:	d100      	bne.n	80232d4 <_printf_float+0x468>
 80232d2:	e627      	b.n	8022f24 <_printf_float+0xb8>
 80232d4:	3401      	adds	r4, #1
 80232d6:	68eb      	ldr	r3, [r5, #12]
 80232d8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80232da:	1a9b      	subs	r3, r3, r2
 80232dc:	42a3      	cmp	r3, r4
 80232de:	dcef      	bgt.n	80232c0 <_printf_float+0x454>
 80232e0:	e6f9      	b.n	80230d6 <_printf_float+0x26a>
 80232e2:	2400      	movs	r4, #0
 80232e4:	e7f7      	b.n	80232d6 <_printf_float+0x46a>
 80232e6:	46c0      	nop			@ (mov r8, r8)

080232e8 <_printf_common>:
 80232e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80232ea:	0016      	movs	r6, r2
 80232ec:	9301      	str	r3, [sp, #4]
 80232ee:	688a      	ldr	r2, [r1, #8]
 80232f0:	690b      	ldr	r3, [r1, #16]
 80232f2:	000c      	movs	r4, r1
 80232f4:	9000      	str	r0, [sp, #0]
 80232f6:	4293      	cmp	r3, r2
 80232f8:	da00      	bge.n	80232fc <_printf_common+0x14>
 80232fa:	0013      	movs	r3, r2
 80232fc:	0022      	movs	r2, r4
 80232fe:	6033      	str	r3, [r6, #0]
 8023300:	3243      	adds	r2, #67	@ 0x43
 8023302:	7812      	ldrb	r2, [r2, #0]
 8023304:	2a00      	cmp	r2, #0
 8023306:	d001      	beq.n	802330c <_printf_common+0x24>
 8023308:	3301      	adds	r3, #1
 802330a:	6033      	str	r3, [r6, #0]
 802330c:	6823      	ldr	r3, [r4, #0]
 802330e:	069b      	lsls	r3, r3, #26
 8023310:	d502      	bpl.n	8023318 <_printf_common+0x30>
 8023312:	6833      	ldr	r3, [r6, #0]
 8023314:	3302      	adds	r3, #2
 8023316:	6033      	str	r3, [r6, #0]
 8023318:	6822      	ldr	r2, [r4, #0]
 802331a:	2306      	movs	r3, #6
 802331c:	0015      	movs	r5, r2
 802331e:	401d      	ands	r5, r3
 8023320:	421a      	tst	r2, r3
 8023322:	d027      	beq.n	8023374 <_printf_common+0x8c>
 8023324:	0023      	movs	r3, r4
 8023326:	3343      	adds	r3, #67	@ 0x43
 8023328:	781b      	ldrb	r3, [r3, #0]
 802332a:	1e5a      	subs	r2, r3, #1
 802332c:	4193      	sbcs	r3, r2
 802332e:	6822      	ldr	r2, [r4, #0]
 8023330:	0692      	lsls	r2, r2, #26
 8023332:	d430      	bmi.n	8023396 <_printf_common+0xae>
 8023334:	0022      	movs	r2, r4
 8023336:	9901      	ldr	r1, [sp, #4]
 8023338:	9800      	ldr	r0, [sp, #0]
 802333a:	9d08      	ldr	r5, [sp, #32]
 802333c:	3243      	adds	r2, #67	@ 0x43
 802333e:	47a8      	blx	r5
 8023340:	3001      	adds	r0, #1
 8023342:	d025      	beq.n	8023390 <_printf_common+0xa8>
 8023344:	2206      	movs	r2, #6
 8023346:	6823      	ldr	r3, [r4, #0]
 8023348:	2500      	movs	r5, #0
 802334a:	4013      	ands	r3, r2
 802334c:	2b04      	cmp	r3, #4
 802334e:	d105      	bne.n	802335c <_printf_common+0x74>
 8023350:	6833      	ldr	r3, [r6, #0]
 8023352:	68e5      	ldr	r5, [r4, #12]
 8023354:	1aed      	subs	r5, r5, r3
 8023356:	43eb      	mvns	r3, r5
 8023358:	17db      	asrs	r3, r3, #31
 802335a:	401d      	ands	r5, r3
 802335c:	68a3      	ldr	r3, [r4, #8]
 802335e:	6922      	ldr	r2, [r4, #16]
 8023360:	4293      	cmp	r3, r2
 8023362:	dd01      	ble.n	8023368 <_printf_common+0x80>
 8023364:	1a9b      	subs	r3, r3, r2
 8023366:	18ed      	adds	r5, r5, r3
 8023368:	2600      	movs	r6, #0
 802336a:	42b5      	cmp	r5, r6
 802336c:	d120      	bne.n	80233b0 <_printf_common+0xc8>
 802336e:	2000      	movs	r0, #0
 8023370:	e010      	b.n	8023394 <_printf_common+0xac>
 8023372:	3501      	adds	r5, #1
 8023374:	68e3      	ldr	r3, [r4, #12]
 8023376:	6832      	ldr	r2, [r6, #0]
 8023378:	1a9b      	subs	r3, r3, r2
 802337a:	42ab      	cmp	r3, r5
 802337c:	ddd2      	ble.n	8023324 <_printf_common+0x3c>
 802337e:	0022      	movs	r2, r4
 8023380:	2301      	movs	r3, #1
 8023382:	9901      	ldr	r1, [sp, #4]
 8023384:	9800      	ldr	r0, [sp, #0]
 8023386:	9f08      	ldr	r7, [sp, #32]
 8023388:	3219      	adds	r2, #25
 802338a:	47b8      	blx	r7
 802338c:	3001      	adds	r0, #1
 802338e:	d1f0      	bne.n	8023372 <_printf_common+0x8a>
 8023390:	2001      	movs	r0, #1
 8023392:	4240      	negs	r0, r0
 8023394:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023396:	2030      	movs	r0, #48	@ 0x30
 8023398:	18e1      	adds	r1, r4, r3
 802339a:	3143      	adds	r1, #67	@ 0x43
 802339c:	7008      	strb	r0, [r1, #0]
 802339e:	0021      	movs	r1, r4
 80233a0:	1c5a      	adds	r2, r3, #1
 80233a2:	3145      	adds	r1, #69	@ 0x45
 80233a4:	7809      	ldrb	r1, [r1, #0]
 80233a6:	18a2      	adds	r2, r4, r2
 80233a8:	3243      	adds	r2, #67	@ 0x43
 80233aa:	3302      	adds	r3, #2
 80233ac:	7011      	strb	r1, [r2, #0]
 80233ae:	e7c1      	b.n	8023334 <_printf_common+0x4c>
 80233b0:	0022      	movs	r2, r4
 80233b2:	2301      	movs	r3, #1
 80233b4:	9901      	ldr	r1, [sp, #4]
 80233b6:	9800      	ldr	r0, [sp, #0]
 80233b8:	9f08      	ldr	r7, [sp, #32]
 80233ba:	321a      	adds	r2, #26
 80233bc:	47b8      	blx	r7
 80233be:	3001      	adds	r0, #1
 80233c0:	d0e6      	beq.n	8023390 <_printf_common+0xa8>
 80233c2:	3601      	adds	r6, #1
 80233c4:	e7d1      	b.n	802336a <_printf_common+0x82>
	...

080233c8 <_printf_i>:
 80233c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80233ca:	b08b      	sub	sp, #44	@ 0x2c
 80233cc:	9206      	str	r2, [sp, #24]
 80233ce:	000a      	movs	r2, r1
 80233d0:	3243      	adds	r2, #67	@ 0x43
 80233d2:	9307      	str	r3, [sp, #28]
 80233d4:	9005      	str	r0, [sp, #20]
 80233d6:	9203      	str	r2, [sp, #12]
 80233d8:	7e0a      	ldrb	r2, [r1, #24]
 80233da:	000c      	movs	r4, r1
 80233dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80233de:	2a78      	cmp	r2, #120	@ 0x78
 80233e0:	d809      	bhi.n	80233f6 <_printf_i+0x2e>
 80233e2:	2a62      	cmp	r2, #98	@ 0x62
 80233e4:	d80b      	bhi.n	80233fe <_printf_i+0x36>
 80233e6:	2a00      	cmp	r2, #0
 80233e8:	d100      	bne.n	80233ec <_printf_i+0x24>
 80233ea:	e0bc      	b.n	8023566 <_printf_i+0x19e>
 80233ec:	497b      	ldr	r1, [pc, #492]	@ (80235dc <_printf_i+0x214>)
 80233ee:	9104      	str	r1, [sp, #16]
 80233f0:	2a58      	cmp	r2, #88	@ 0x58
 80233f2:	d100      	bne.n	80233f6 <_printf_i+0x2e>
 80233f4:	e090      	b.n	8023518 <_printf_i+0x150>
 80233f6:	0025      	movs	r5, r4
 80233f8:	3542      	adds	r5, #66	@ 0x42
 80233fa:	702a      	strb	r2, [r5, #0]
 80233fc:	e022      	b.n	8023444 <_printf_i+0x7c>
 80233fe:	0010      	movs	r0, r2
 8023400:	3863      	subs	r0, #99	@ 0x63
 8023402:	2815      	cmp	r0, #21
 8023404:	d8f7      	bhi.n	80233f6 <_printf_i+0x2e>
 8023406:	f7dc fec3 	bl	8000190 <__gnu_thumb1_case_shi>
 802340a:	0016      	.short	0x0016
 802340c:	fff6001f 	.word	0xfff6001f
 8023410:	fff6fff6 	.word	0xfff6fff6
 8023414:	001ffff6 	.word	0x001ffff6
 8023418:	fff6fff6 	.word	0xfff6fff6
 802341c:	fff6fff6 	.word	0xfff6fff6
 8023420:	003600a1 	.word	0x003600a1
 8023424:	fff60080 	.word	0xfff60080
 8023428:	00b2fff6 	.word	0x00b2fff6
 802342c:	0036fff6 	.word	0x0036fff6
 8023430:	fff6fff6 	.word	0xfff6fff6
 8023434:	0084      	.short	0x0084
 8023436:	0025      	movs	r5, r4
 8023438:	681a      	ldr	r2, [r3, #0]
 802343a:	3542      	adds	r5, #66	@ 0x42
 802343c:	1d11      	adds	r1, r2, #4
 802343e:	6019      	str	r1, [r3, #0]
 8023440:	6813      	ldr	r3, [r2, #0]
 8023442:	702b      	strb	r3, [r5, #0]
 8023444:	2301      	movs	r3, #1
 8023446:	e0a0      	b.n	802358a <_printf_i+0x1c2>
 8023448:	6818      	ldr	r0, [r3, #0]
 802344a:	6809      	ldr	r1, [r1, #0]
 802344c:	1d02      	adds	r2, r0, #4
 802344e:	060d      	lsls	r5, r1, #24
 8023450:	d50b      	bpl.n	802346a <_printf_i+0xa2>
 8023452:	6806      	ldr	r6, [r0, #0]
 8023454:	601a      	str	r2, [r3, #0]
 8023456:	2e00      	cmp	r6, #0
 8023458:	da03      	bge.n	8023462 <_printf_i+0x9a>
 802345a:	232d      	movs	r3, #45	@ 0x2d
 802345c:	9a03      	ldr	r2, [sp, #12]
 802345e:	4276      	negs	r6, r6
 8023460:	7013      	strb	r3, [r2, #0]
 8023462:	4b5e      	ldr	r3, [pc, #376]	@ (80235dc <_printf_i+0x214>)
 8023464:	270a      	movs	r7, #10
 8023466:	9304      	str	r3, [sp, #16]
 8023468:	e018      	b.n	802349c <_printf_i+0xd4>
 802346a:	6806      	ldr	r6, [r0, #0]
 802346c:	601a      	str	r2, [r3, #0]
 802346e:	0649      	lsls	r1, r1, #25
 8023470:	d5f1      	bpl.n	8023456 <_printf_i+0x8e>
 8023472:	b236      	sxth	r6, r6
 8023474:	e7ef      	b.n	8023456 <_printf_i+0x8e>
 8023476:	6808      	ldr	r0, [r1, #0]
 8023478:	6819      	ldr	r1, [r3, #0]
 802347a:	c940      	ldmia	r1!, {r6}
 802347c:	0605      	lsls	r5, r0, #24
 802347e:	d402      	bmi.n	8023486 <_printf_i+0xbe>
 8023480:	0640      	lsls	r0, r0, #25
 8023482:	d500      	bpl.n	8023486 <_printf_i+0xbe>
 8023484:	b2b6      	uxth	r6, r6
 8023486:	6019      	str	r1, [r3, #0]
 8023488:	4b54      	ldr	r3, [pc, #336]	@ (80235dc <_printf_i+0x214>)
 802348a:	270a      	movs	r7, #10
 802348c:	9304      	str	r3, [sp, #16]
 802348e:	2a6f      	cmp	r2, #111	@ 0x6f
 8023490:	d100      	bne.n	8023494 <_printf_i+0xcc>
 8023492:	3f02      	subs	r7, #2
 8023494:	0023      	movs	r3, r4
 8023496:	2200      	movs	r2, #0
 8023498:	3343      	adds	r3, #67	@ 0x43
 802349a:	701a      	strb	r2, [r3, #0]
 802349c:	6863      	ldr	r3, [r4, #4]
 802349e:	60a3      	str	r3, [r4, #8]
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	db03      	blt.n	80234ac <_printf_i+0xe4>
 80234a4:	2104      	movs	r1, #4
 80234a6:	6822      	ldr	r2, [r4, #0]
 80234a8:	438a      	bics	r2, r1
 80234aa:	6022      	str	r2, [r4, #0]
 80234ac:	2e00      	cmp	r6, #0
 80234ae:	d102      	bne.n	80234b6 <_printf_i+0xee>
 80234b0:	9d03      	ldr	r5, [sp, #12]
 80234b2:	2b00      	cmp	r3, #0
 80234b4:	d00c      	beq.n	80234d0 <_printf_i+0x108>
 80234b6:	9d03      	ldr	r5, [sp, #12]
 80234b8:	0030      	movs	r0, r6
 80234ba:	0039      	movs	r1, r7
 80234bc:	f7dc fef8 	bl	80002b0 <__aeabi_uidivmod>
 80234c0:	9b04      	ldr	r3, [sp, #16]
 80234c2:	3d01      	subs	r5, #1
 80234c4:	5c5b      	ldrb	r3, [r3, r1]
 80234c6:	702b      	strb	r3, [r5, #0]
 80234c8:	0033      	movs	r3, r6
 80234ca:	0006      	movs	r6, r0
 80234cc:	429f      	cmp	r7, r3
 80234ce:	d9f3      	bls.n	80234b8 <_printf_i+0xf0>
 80234d0:	2f08      	cmp	r7, #8
 80234d2:	d109      	bne.n	80234e8 <_printf_i+0x120>
 80234d4:	6823      	ldr	r3, [r4, #0]
 80234d6:	07db      	lsls	r3, r3, #31
 80234d8:	d506      	bpl.n	80234e8 <_printf_i+0x120>
 80234da:	6862      	ldr	r2, [r4, #4]
 80234dc:	6923      	ldr	r3, [r4, #16]
 80234de:	429a      	cmp	r2, r3
 80234e0:	dc02      	bgt.n	80234e8 <_printf_i+0x120>
 80234e2:	2330      	movs	r3, #48	@ 0x30
 80234e4:	3d01      	subs	r5, #1
 80234e6:	702b      	strb	r3, [r5, #0]
 80234e8:	9b03      	ldr	r3, [sp, #12]
 80234ea:	1b5b      	subs	r3, r3, r5
 80234ec:	6123      	str	r3, [r4, #16]
 80234ee:	9b07      	ldr	r3, [sp, #28]
 80234f0:	0021      	movs	r1, r4
 80234f2:	9300      	str	r3, [sp, #0]
 80234f4:	9805      	ldr	r0, [sp, #20]
 80234f6:	9b06      	ldr	r3, [sp, #24]
 80234f8:	aa09      	add	r2, sp, #36	@ 0x24
 80234fa:	f7ff fef5 	bl	80232e8 <_printf_common>
 80234fe:	3001      	adds	r0, #1
 8023500:	d148      	bne.n	8023594 <_printf_i+0x1cc>
 8023502:	2001      	movs	r0, #1
 8023504:	4240      	negs	r0, r0
 8023506:	b00b      	add	sp, #44	@ 0x2c
 8023508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802350a:	2220      	movs	r2, #32
 802350c:	6809      	ldr	r1, [r1, #0]
 802350e:	430a      	orrs	r2, r1
 8023510:	6022      	str	r2, [r4, #0]
 8023512:	2278      	movs	r2, #120	@ 0x78
 8023514:	4932      	ldr	r1, [pc, #200]	@ (80235e0 <_printf_i+0x218>)
 8023516:	9104      	str	r1, [sp, #16]
 8023518:	0021      	movs	r1, r4
 802351a:	3145      	adds	r1, #69	@ 0x45
 802351c:	700a      	strb	r2, [r1, #0]
 802351e:	6819      	ldr	r1, [r3, #0]
 8023520:	6822      	ldr	r2, [r4, #0]
 8023522:	c940      	ldmia	r1!, {r6}
 8023524:	0610      	lsls	r0, r2, #24
 8023526:	d402      	bmi.n	802352e <_printf_i+0x166>
 8023528:	0650      	lsls	r0, r2, #25
 802352a:	d500      	bpl.n	802352e <_printf_i+0x166>
 802352c:	b2b6      	uxth	r6, r6
 802352e:	6019      	str	r1, [r3, #0]
 8023530:	07d3      	lsls	r3, r2, #31
 8023532:	d502      	bpl.n	802353a <_printf_i+0x172>
 8023534:	2320      	movs	r3, #32
 8023536:	4313      	orrs	r3, r2
 8023538:	6023      	str	r3, [r4, #0]
 802353a:	2e00      	cmp	r6, #0
 802353c:	d001      	beq.n	8023542 <_printf_i+0x17a>
 802353e:	2710      	movs	r7, #16
 8023540:	e7a8      	b.n	8023494 <_printf_i+0xcc>
 8023542:	2220      	movs	r2, #32
 8023544:	6823      	ldr	r3, [r4, #0]
 8023546:	4393      	bics	r3, r2
 8023548:	6023      	str	r3, [r4, #0]
 802354a:	e7f8      	b.n	802353e <_printf_i+0x176>
 802354c:	681a      	ldr	r2, [r3, #0]
 802354e:	680d      	ldr	r5, [r1, #0]
 8023550:	1d10      	adds	r0, r2, #4
 8023552:	6949      	ldr	r1, [r1, #20]
 8023554:	6018      	str	r0, [r3, #0]
 8023556:	6813      	ldr	r3, [r2, #0]
 8023558:	062e      	lsls	r6, r5, #24
 802355a:	d501      	bpl.n	8023560 <_printf_i+0x198>
 802355c:	6019      	str	r1, [r3, #0]
 802355e:	e002      	b.n	8023566 <_printf_i+0x19e>
 8023560:	066d      	lsls	r5, r5, #25
 8023562:	d5fb      	bpl.n	802355c <_printf_i+0x194>
 8023564:	8019      	strh	r1, [r3, #0]
 8023566:	2300      	movs	r3, #0
 8023568:	9d03      	ldr	r5, [sp, #12]
 802356a:	6123      	str	r3, [r4, #16]
 802356c:	e7bf      	b.n	80234ee <_printf_i+0x126>
 802356e:	681a      	ldr	r2, [r3, #0]
 8023570:	1d11      	adds	r1, r2, #4
 8023572:	6019      	str	r1, [r3, #0]
 8023574:	6815      	ldr	r5, [r2, #0]
 8023576:	2100      	movs	r1, #0
 8023578:	0028      	movs	r0, r5
 802357a:	6862      	ldr	r2, [r4, #4]
 802357c:	f000 fb9d 	bl	8023cba <memchr>
 8023580:	2800      	cmp	r0, #0
 8023582:	d001      	beq.n	8023588 <_printf_i+0x1c0>
 8023584:	1b40      	subs	r0, r0, r5
 8023586:	6060      	str	r0, [r4, #4]
 8023588:	6863      	ldr	r3, [r4, #4]
 802358a:	6123      	str	r3, [r4, #16]
 802358c:	2300      	movs	r3, #0
 802358e:	9a03      	ldr	r2, [sp, #12]
 8023590:	7013      	strb	r3, [r2, #0]
 8023592:	e7ac      	b.n	80234ee <_printf_i+0x126>
 8023594:	002a      	movs	r2, r5
 8023596:	6923      	ldr	r3, [r4, #16]
 8023598:	9906      	ldr	r1, [sp, #24]
 802359a:	9805      	ldr	r0, [sp, #20]
 802359c:	9d07      	ldr	r5, [sp, #28]
 802359e:	47a8      	blx	r5
 80235a0:	3001      	adds	r0, #1
 80235a2:	d0ae      	beq.n	8023502 <_printf_i+0x13a>
 80235a4:	6823      	ldr	r3, [r4, #0]
 80235a6:	079b      	lsls	r3, r3, #30
 80235a8:	d415      	bmi.n	80235d6 <_printf_i+0x20e>
 80235aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235ac:	68e0      	ldr	r0, [r4, #12]
 80235ae:	4298      	cmp	r0, r3
 80235b0:	daa9      	bge.n	8023506 <_printf_i+0x13e>
 80235b2:	0018      	movs	r0, r3
 80235b4:	e7a7      	b.n	8023506 <_printf_i+0x13e>
 80235b6:	0022      	movs	r2, r4
 80235b8:	2301      	movs	r3, #1
 80235ba:	9906      	ldr	r1, [sp, #24]
 80235bc:	9805      	ldr	r0, [sp, #20]
 80235be:	9e07      	ldr	r6, [sp, #28]
 80235c0:	3219      	adds	r2, #25
 80235c2:	47b0      	blx	r6
 80235c4:	3001      	adds	r0, #1
 80235c6:	d09c      	beq.n	8023502 <_printf_i+0x13a>
 80235c8:	3501      	adds	r5, #1
 80235ca:	68e3      	ldr	r3, [r4, #12]
 80235cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80235ce:	1a9b      	subs	r3, r3, r2
 80235d0:	42ab      	cmp	r3, r5
 80235d2:	dcf0      	bgt.n	80235b6 <_printf_i+0x1ee>
 80235d4:	e7e9      	b.n	80235aa <_printf_i+0x1e2>
 80235d6:	2500      	movs	r5, #0
 80235d8:	e7f7      	b.n	80235ca <_printf_i+0x202>
 80235da:	46c0      	nop			@ (mov r8, r8)
 80235dc:	0802b91b 	.word	0x0802b91b
 80235e0:	0802b92c 	.word	0x0802b92c

080235e4 <std>:
 80235e4:	2300      	movs	r3, #0
 80235e6:	b510      	push	{r4, lr}
 80235e8:	0004      	movs	r4, r0
 80235ea:	6003      	str	r3, [r0, #0]
 80235ec:	6043      	str	r3, [r0, #4]
 80235ee:	6083      	str	r3, [r0, #8]
 80235f0:	8181      	strh	r1, [r0, #12]
 80235f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80235f4:	81c2      	strh	r2, [r0, #14]
 80235f6:	6103      	str	r3, [r0, #16]
 80235f8:	6143      	str	r3, [r0, #20]
 80235fa:	6183      	str	r3, [r0, #24]
 80235fc:	0019      	movs	r1, r3
 80235fe:	2208      	movs	r2, #8
 8023600:	305c      	adds	r0, #92	@ 0x5c
 8023602:	f000 fa89 	bl	8023b18 <memset>
 8023606:	4b0b      	ldr	r3, [pc, #44]	@ (8023634 <std+0x50>)
 8023608:	6224      	str	r4, [r4, #32]
 802360a:	6263      	str	r3, [r4, #36]	@ 0x24
 802360c:	4b0a      	ldr	r3, [pc, #40]	@ (8023638 <std+0x54>)
 802360e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023610:	4b0a      	ldr	r3, [pc, #40]	@ (802363c <std+0x58>)
 8023612:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023614:	4b0a      	ldr	r3, [pc, #40]	@ (8023640 <std+0x5c>)
 8023616:	6323      	str	r3, [r4, #48]	@ 0x30
 8023618:	4b0a      	ldr	r3, [pc, #40]	@ (8023644 <std+0x60>)
 802361a:	429c      	cmp	r4, r3
 802361c:	d005      	beq.n	802362a <std+0x46>
 802361e:	4b0a      	ldr	r3, [pc, #40]	@ (8023648 <std+0x64>)
 8023620:	429c      	cmp	r4, r3
 8023622:	d002      	beq.n	802362a <std+0x46>
 8023624:	4b09      	ldr	r3, [pc, #36]	@ (802364c <std+0x68>)
 8023626:	429c      	cmp	r4, r3
 8023628:	d103      	bne.n	8023632 <std+0x4e>
 802362a:	0020      	movs	r0, r4
 802362c:	3058      	adds	r0, #88	@ 0x58
 802362e:	f000 fb41 	bl	8023cb4 <__retarget_lock_init_recursive>
 8023632:	bd10      	pop	{r4, pc}
 8023634:	0802388d 	.word	0x0802388d
 8023638:	080238b5 	.word	0x080238b5
 802363c:	080238ed 	.word	0x080238ed
 8023640:	08023919 	.word	0x08023919
 8023644:	200034a4 	.word	0x200034a4
 8023648:	2000350c 	.word	0x2000350c
 802364c:	20003574 	.word	0x20003574

08023650 <stdio_exit_handler>:
 8023650:	b510      	push	{r4, lr}
 8023652:	4a03      	ldr	r2, [pc, #12]	@ (8023660 <stdio_exit_handler+0x10>)
 8023654:	4903      	ldr	r1, [pc, #12]	@ (8023664 <stdio_exit_handler+0x14>)
 8023656:	4804      	ldr	r0, [pc, #16]	@ (8023668 <stdio_exit_handler+0x18>)
 8023658:	f000 f86c 	bl	8023734 <_fwalk_sglue>
 802365c:	bd10      	pop	{r4, pc}
 802365e:	46c0      	nop			@ (mov r8, r8)
 8023660:	20000268 	.word	0x20000268
 8023664:	080262d9 	.word	0x080262d9
 8023668:	200003e4 	.word	0x200003e4

0802366c <cleanup_stdio>:
 802366c:	6841      	ldr	r1, [r0, #4]
 802366e:	4b0b      	ldr	r3, [pc, #44]	@ (802369c <cleanup_stdio+0x30>)
 8023670:	b510      	push	{r4, lr}
 8023672:	0004      	movs	r4, r0
 8023674:	4299      	cmp	r1, r3
 8023676:	d001      	beq.n	802367c <cleanup_stdio+0x10>
 8023678:	f002 fe2e 	bl	80262d8 <_fflush_r>
 802367c:	68a1      	ldr	r1, [r4, #8]
 802367e:	4b08      	ldr	r3, [pc, #32]	@ (80236a0 <cleanup_stdio+0x34>)
 8023680:	4299      	cmp	r1, r3
 8023682:	d002      	beq.n	802368a <cleanup_stdio+0x1e>
 8023684:	0020      	movs	r0, r4
 8023686:	f002 fe27 	bl	80262d8 <_fflush_r>
 802368a:	68e1      	ldr	r1, [r4, #12]
 802368c:	4b05      	ldr	r3, [pc, #20]	@ (80236a4 <cleanup_stdio+0x38>)
 802368e:	4299      	cmp	r1, r3
 8023690:	d002      	beq.n	8023698 <cleanup_stdio+0x2c>
 8023692:	0020      	movs	r0, r4
 8023694:	f002 fe20 	bl	80262d8 <_fflush_r>
 8023698:	bd10      	pop	{r4, pc}
 802369a:	46c0      	nop			@ (mov r8, r8)
 802369c:	200034a4 	.word	0x200034a4
 80236a0:	2000350c 	.word	0x2000350c
 80236a4:	20003574 	.word	0x20003574

080236a8 <global_stdio_init.part.0>:
 80236a8:	b510      	push	{r4, lr}
 80236aa:	4b09      	ldr	r3, [pc, #36]	@ (80236d0 <global_stdio_init.part.0+0x28>)
 80236ac:	4a09      	ldr	r2, [pc, #36]	@ (80236d4 <global_stdio_init.part.0+0x2c>)
 80236ae:	2104      	movs	r1, #4
 80236b0:	601a      	str	r2, [r3, #0]
 80236b2:	4809      	ldr	r0, [pc, #36]	@ (80236d8 <global_stdio_init.part.0+0x30>)
 80236b4:	2200      	movs	r2, #0
 80236b6:	f7ff ff95 	bl	80235e4 <std>
 80236ba:	2201      	movs	r2, #1
 80236bc:	2109      	movs	r1, #9
 80236be:	4807      	ldr	r0, [pc, #28]	@ (80236dc <global_stdio_init.part.0+0x34>)
 80236c0:	f7ff ff90 	bl	80235e4 <std>
 80236c4:	2202      	movs	r2, #2
 80236c6:	2112      	movs	r1, #18
 80236c8:	4805      	ldr	r0, [pc, #20]	@ (80236e0 <global_stdio_init.part.0+0x38>)
 80236ca:	f7ff ff8b 	bl	80235e4 <std>
 80236ce:	bd10      	pop	{r4, pc}
 80236d0:	200035dc 	.word	0x200035dc
 80236d4:	08023651 	.word	0x08023651
 80236d8:	200034a4 	.word	0x200034a4
 80236dc:	2000350c 	.word	0x2000350c
 80236e0:	20003574 	.word	0x20003574

080236e4 <__sfp_lock_acquire>:
 80236e4:	b510      	push	{r4, lr}
 80236e6:	4802      	ldr	r0, [pc, #8]	@ (80236f0 <__sfp_lock_acquire+0xc>)
 80236e8:	f000 fae5 	bl	8023cb6 <__retarget_lock_acquire_recursive>
 80236ec:	bd10      	pop	{r4, pc}
 80236ee:	46c0      	nop			@ (mov r8, r8)
 80236f0:	200035e5 	.word	0x200035e5

080236f4 <__sfp_lock_release>:
 80236f4:	b510      	push	{r4, lr}
 80236f6:	4802      	ldr	r0, [pc, #8]	@ (8023700 <__sfp_lock_release+0xc>)
 80236f8:	f000 fade 	bl	8023cb8 <__retarget_lock_release_recursive>
 80236fc:	bd10      	pop	{r4, pc}
 80236fe:	46c0      	nop			@ (mov r8, r8)
 8023700:	200035e5 	.word	0x200035e5

08023704 <__sinit>:
 8023704:	b510      	push	{r4, lr}
 8023706:	0004      	movs	r4, r0
 8023708:	f7ff ffec 	bl	80236e4 <__sfp_lock_acquire>
 802370c:	6a23      	ldr	r3, [r4, #32]
 802370e:	2b00      	cmp	r3, #0
 8023710:	d002      	beq.n	8023718 <__sinit+0x14>
 8023712:	f7ff ffef 	bl	80236f4 <__sfp_lock_release>
 8023716:	bd10      	pop	{r4, pc}
 8023718:	4b04      	ldr	r3, [pc, #16]	@ (802372c <__sinit+0x28>)
 802371a:	6223      	str	r3, [r4, #32]
 802371c:	4b04      	ldr	r3, [pc, #16]	@ (8023730 <__sinit+0x2c>)
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	2b00      	cmp	r3, #0
 8023722:	d1f6      	bne.n	8023712 <__sinit+0xe>
 8023724:	f7ff ffc0 	bl	80236a8 <global_stdio_init.part.0>
 8023728:	e7f3      	b.n	8023712 <__sinit+0xe>
 802372a:	46c0      	nop			@ (mov r8, r8)
 802372c:	0802366d 	.word	0x0802366d
 8023730:	200035dc 	.word	0x200035dc

08023734 <_fwalk_sglue>:
 8023734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023736:	0014      	movs	r4, r2
 8023738:	2600      	movs	r6, #0
 802373a:	9000      	str	r0, [sp, #0]
 802373c:	9101      	str	r1, [sp, #4]
 802373e:	68a5      	ldr	r5, [r4, #8]
 8023740:	6867      	ldr	r7, [r4, #4]
 8023742:	3f01      	subs	r7, #1
 8023744:	d504      	bpl.n	8023750 <_fwalk_sglue+0x1c>
 8023746:	6824      	ldr	r4, [r4, #0]
 8023748:	2c00      	cmp	r4, #0
 802374a:	d1f8      	bne.n	802373e <_fwalk_sglue+0xa>
 802374c:	0030      	movs	r0, r6
 802374e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023750:	89ab      	ldrh	r3, [r5, #12]
 8023752:	2b01      	cmp	r3, #1
 8023754:	d908      	bls.n	8023768 <_fwalk_sglue+0x34>
 8023756:	220e      	movs	r2, #14
 8023758:	5eab      	ldrsh	r3, [r5, r2]
 802375a:	3301      	adds	r3, #1
 802375c:	d004      	beq.n	8023768 <_fwalk_sglue+0x34>
 802375e:	0029      	movs	r1, r5
 8023760:	9800      	ldr	r0, [sp, #0]
 8023762:	9b01      	ldr	r3, [sp, #4]
 8023764:	4798      	blx	r3
 8023766:	4306      	orrs	r6, r0
 8023768:	3568      	adds	r5, #104	@ 0x68
 802376a:	e7ea      	b.n	8023742 <_fwalk_sglue+0xe>

0802376c <iprintf>:
 802376c:	b40f      	push	{r0, r1, r2, r3}
 802376e:	b507      	push	{r0, r1, r2, lr}
 8023770:	4905      	ldr	r1, [pc, #20]	@ (8023788 <iprintf+0x1c>)
 8023772:	ab04      	add	r3, sp, #16
 8023774:	6808      	ldr	r0, [r1, #0]
 8023776:	cb04      	ldmia	r3!, {r2}
 8023778:	6881      	ldr	r1, [r0, #8]
 802377a:	9301      	str	r3, [sp, #4]
 802377c:	f002 fc0a 	bl	8025f94 <_vfiprintf_r>
 8023780:	b003      	add	sp, #12
 8023782:	bc08      	pop	{r3}
 8023784:	b004      	add	sp, #16
 8023786:	4718      	bx	r3
 8023788:	200003e0 	.word	0x200003e0

0802378c <_puts_r>:
 802378c:	6a03      	ldr	r3, [r0, #32]
 802378e:	b570      	push	{r4, r5, r6, lr}
 8023790:	0005      	movs	r5, r0
 8023792:	000e      	movs	r6, r1
 8023794:	6884      	ldr	r4, [r0, #8]
 8023796:	2b00      	cmp	r3, #0
 8023798:	d101      	bne.n	802379e <_puts_r+0x12>
 802379a:	f7ff ffb3 	bl	8023704 <__sinit>
 802379e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80237a0:	07db      	lsls	r3, r3, #31
 80237a2:	d405      	bmi.n	80237b0 <_puts_r+0x24>
 80237a4:	89a3      	ldrh	r3, [r4, #12]
 80237a6:	059b      	lsls	r3, r3, #22
 80237a8:	d402      	bmi.n	80237b0 <_puts_r+0x24>
 80237aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80237ac:	f000 fa83 	bl	8023cb6 <__retarget_lock_acquire_recursive>
 80237b0:	89a3      	ldrh	r3, [r4, #12]
 80237b2:	071b      	lsls	r3, r3, #28
 80237b4:	d502      	bpl.n	80237bc <_puts_r+0x30>
 80237b6:	6923      	ldr	r3, [r4, #16]
 80237b8:	2b00      	cmp	r3, #0
 80237ba:	d11f      	bne.n	80237fc <_puts_r+0x70>
 80237bc:	0021      	movs	r1, r4
 80237be:	0028      	movs	r0, r5
 80237c0:	f000 f94c 	bl	8023a5c <__swsetup_r>
 80237c4:	2800      	cmp	r0, #0
 80237c6:	d019      	beq.n	80237fc <_puts_r+0x70>
 80237c8:	2501      	movs	r5, #1
 80237ca:	426d      	negs	r5, r5
 80237cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80237ce:	07db      	lsls	r3, r3, #31
 80237d0:	d405      	bmi.n	80237de <_puts_r+0x52>
 80237d2:	89a3      	ldrh	r3, [r4, #12]
 80237d4:	059b      	lsls	r3, r3, #22
 80237d6:	d402      	bmi.n	80237de <_puts_r+0x52>
 80237d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80237da:	f000 fa6d 	bl	8023cb8 <__retarget_lock_release_recursive>
 80237de:	0028      	movs	r0, r5
 80237e0:	bd70      	pop	{r4, r5, r6, pc}
 80237e2:	3601      	adds	r6, #1
 80237e4:	60a3      	str	r3, [r4, #8]
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	da04      	bge.n	80237f4 <_puts_r+0x68>
 80237ea:	69a2      	ldr	r2, [r4, #24]
 80237ec:	429a      	cmp	r2, r3
 80237ee:	dc16      	bgt.n	802381e <_puts_r+0x92>
 80237f0:	290a      	cmp	r1, #10
 80237f2:	d014      	beq.n	802381e <_puts_r+0x92>
 80237f4:	6823      	ldr	r3, [r4, #0]
 80237f6:	1c5a      	adds	r2, r3, #1
 80237f8:	6022      	str	r2, [r4, #0]
 80237fa:	7019      	strb	r1, [r3, #0]
 80237fc:	68a3      	ldr	r3, [r4, #8]
 80237fe:	7831      	ldrb	r1, [r6, #0]
 8023800:	3b01      	subs	r3, #1
 8023802:	2900      	cmp	r1, #0
 8023804:	d1ed      	bne.n	80237e2 <_puts_r+0x56>
 8023806:	60a3      	str	r3, [r4, #8]
 8023808:	2b00      	cmp	r3, #0
 802380a:	da0f      	bge.n	802382c <_puts_r+0xa0>
 802380c:	0022      	movs	r2, r4
 802380e:	0028      	movs	r0, r5
 8023810:	310a      	adds	r1, #10
 8023812:	f000 f8e1 	bl	80239d8 <__swbuf_r>
 8023816:	3001      	adds	r0, #1
 8023818:	d0d6      	beq.n	80237c8 <_puts_r+0x3c>
 802381a:	250a      	movs	r5, #10
 802381c:	e7d6      	b.n	80237cc <_puts_r+0x40>
 802381e:	0022      	movs	r2, r4
 8023820:	0028      	movs	r0, r5
 8023822:	f000 f8d9 	bl	80239d8 <__swbuf_r>
 8023826:	3001      	adds	r0, #1
 8023828:	d1e8      	bne.n	80237fc <_puts_r+0x70>
 802382a:	e7cd      	b.n	80237c8 <_puts_r+0x3c>
 802382c:	6823      	ldr	r3, [r4, #0]
 802382e:	1c5a      	adds	r2, r3, #1
 8023830:	6022      	str	r2, [r4, #0]
 8023832:	220a      	movs	r2, #10
 8023834:	701a      	strb	r2, [r3, #0]
 8023836:	e7f0      	b.n	802381a <_puts_r+0x8e>

08023838 <puts>:
 8023838:	b510      	push	{r4, lr}
 802383a:	4b03      	ldr	r3, [pc, #12]	@ (8023848 <puts+0x10>)
 802383c:	0001      	movs	r1, r0
 802383e:	6818      	ldr	r0, [r3, #0]
 8023840:	f7ff ffa4 	bl	802378c <_puts_r>
 8023844:	bd10      	pop	{r4, pc}
 8023846:	46c0      	nop			@ (mov r8, r8)
 8023848:	200003e0 	.word	0x200003e0

0802384c <siprintf>:
 802384c:	b40e      	push	{r1, r2, r3}
 802384e:	b500      	push	{lr}
 8023850:	490b      	ldr	r1, [pc, #44]	@ (8023880 <siprintf+0x34>)
 8023852:	b09c      	sub	sp, #112	@ 0x70
 8023854:	ab1d      	add	r3, sp, #116	@ 0x74
 8023856:	9002      	str	r0, [sp, #8]
 8023858:	9006      	str	r0, [sp, #24]
 802385a:	9107      	str	r1, [sp, #28]
 802385c:	9104      	str	r1, [sp, #16]
 802385e:	4809      	ldr	r0, [pc, #36]	@ (8023884 <siprintf+0x38>)
 8023860:	4909      	ldr	r1, [pc, #36]	@ (8023888 <siprintf+0x3c>)
 8023862:	cb04      	ldmia	r3!, {r2}
 8023864:	9105      	str	r1, [sp, #20]
 8023866:	6800      	ldr	r0, [r0, #0]
 8023868:	a902      	add	r1, sp, #8
 802386a:	9301      	str	r3, [sp, #4]
 802386c:	f002 fa6c 	bl	8025d48 <_svfiprintf_r>
 8023870:	2200      	movs	r2, #0
 8023872:	9b02      	ldr	r3, [sp, #8]
 8023874:	701a      	strb	r2, [r3, #0]
 8023876:	b01c      	add	sp, #112	@ 0x70
 8023878:	bc08      	pop	{r3}
 802387a:	b003      	add	sp, #12
 802387c:	4718      	bx	r3
 802387e:	46c0      	nop			@ (mov r8, r8)
 8023880:	7fffffff 	.word	0x7fffffff
 8023884:	200003e0 	.word	0x200003e0
 8023888:	ffff0208 	.word	0xffff0208

0802388c <__sread>:
 802388c:	b570      	push	{r4, r5, r6, lr}
 802388e:	000c      	movs	r4, r1
 8023890:	250e      	movs	r5, #14
 8023892:	5f49      	ldrsh	r1, [r1, r5]
 8023894:	f000 f9bc 	bl	8023c10 <_read_r>
 8023898:	2800      	cmp	r0, #0
 802389a:	db03      	blt.n	80238a4 <__sread+0x18>
 802389c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802389e:	181b      	adds	r3, r3, r0
 80238a0:	6563      	str	r3, [r4, #84]	@ 0x54
 80238a2:	bd70      	pop	{r4, r5, r6, pc}
 80238a4:	89a3      	ldrh	r3, [r4, #12]
 80238a6:	4a02      	ldr	r2, [pc, #8]	@ (80238b0 <__sread+0x24>)
 80238a8:	4013      	ands	r3, r2
 80238aa:	81a3      	strh	r3, [r4, #12]
 80238ac:	e7f9      	b.n	80238a2 <__sread+0x16>
 80238ae:	46c0      	nop			@ (mov r8, r8)
 80238b0:	ffffefff 	.word	0xffffefff

080238b4 <__swrite>:
 80238b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238b6:	001f      	movs	r7, r3
 80238b8:	898b      	ldrh	r3, [r1, #12]
 80238ba:	0005      	movs	r5, r0
 80238bc:	000c      	movs	r4, r1
 80238be:	0016      	movs	r6, r2
 80238c0:	05db      	lsls	r3, r3, #23
 80238c2:	d505      	bpl.n	80238d0 <__swrite+0x1c>
 80238c4:	230e      	movs	r3, #14
 80238c6:	5ec9      	ldrsh	r1, [r1, r3]
 80238c8:	2200      	movs	r2, #0
 80238ca:	2302      	movs	r3, #2
 80238cc:	f000 f98c 	bl	8023be8 <_lseek_r>
 80238d0:	89a3      	ldrh	r3, [r4, #12]
 80238d2:	4a05      	ldr	r2, [pc, #20]	@ (80238e8 <__swrite+0x34>)
 80238d4:	0028      	movs	r0, r5
 80238d6:	4013      	ands	r3, r2
 80238d8:	81a3      	strh	r3, [r4, #12]
 80238da:	0032      	movs	r2, r6
 80238dc:	230e      	movs	r3, #14
 80238de:	5ee1      	ldrsh	r1, [r4, r3]
 80238e0:	003b      	movs	r3, r7
 80238e2:	f000 f9a9 	bl	8023c38 <_write_r>
 80238e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80238e8:	ffffefff 	.word	0xffffefff

080238ec <__sseek>:
 80238ec:	b570      	push	{r4, r5, r6, lr}
 80238ee:	000c      	movs	r4, r1
 80238f0:	250e      	movs	r5, #14
 80238f2:	5f49      	ldrsh	r1, [r1, r5]
 80238f4:	f000 f978 	bl	8023be8 <_lseek_r>
 80238f8:	89a3      	ldrh	r3, [r4, #12]
 80238fa:	1c42      	adds	r2, r0, #1
 80238fc:	d103      	bne.n	8023906 <__sseek+0x1a>
 80238fe:	4a05      	ldr	r2, [pc, #20]	@ (8023914 <__sseek+0x28>)
 8023900:	4013      	ands	r3, r2
 8023902:	81a3      	strh	r3, [r4, #12]
 8023904:	bd70      	pop	{r4, r5, r6, pc}
 8023906:	2280      	movs	r2, #128	@ 0x80
 8023908:	0152      	lsls	r2, r2, #5
 802390a:	4313      	orrs	r3, r2
 802390c:	81a3      	strh	r3, [r4, #12]
 802390e:	6560      	str	r0, [r4, #84]	@ 0x54
 8023910:	e7f8      	b.n	8023904 <__sseek+0x18>
 8023912:	46c0      	nop			@ (mov r8, r8)
 8023914:	ffffefff 	.word	0xffffefff

08023918 <__sclose>:
 8023918:	b510      	push	{r4, lr}
 802391a:	230e      	movs	r3, #14
 802391c:	5ec9      	ldrsh	r1, [r1, r3]
 802391e:	f000 f951 	bl	8023bc4 <_close_r>
 8023922:	bd10      	pop	{r4, pc}

08023924 <_vsniprintf_r>:
 8023924:	b530      	push	{r4, r5, lr}
 8023926:	0014      	movs	r4, r2
 8023928:	0005      	movs	r5, r0
 802392a:	001a      	movs	r2, r3
 802392c:	b09b      	sub	sp, #108	@ 0x6c
 802392e:	2c00      	cmp	r4, #0
 8023930:	da05      	bge.n	802393e <_vsniprintf_r+0x1a>
 8023932:	238b      	movs	r3, #139	@ 0x8b
 8023934:	6003      	str	r3, [r0, #0]
 8023936:	2001      	movs	r0, #1
 8023938:	4240      	negs	r0, r0
 802393a:	b01b      	add	sp, #108	@ 0x6c
 802393c:	bd30      	pop	{r4, r5, pc}
 802393e:	2382      	movs	r3, #130	@ 0x82
 8023940:	4668      	mov	r0, sp
 8023942:	009b      	lsls	r3, r3, #2
 8023944:	8183      	strh	r3, [r0, #12]
 8023946:	2300      	movs	r3, #0
 8023948:	9100      	str	r1, [sp, #0]
 802394a:	9104      	str	r1, [sp, #16]
 802394c:	429c      	cmp	r4, r3
 802394e:	d000      	beq.n	8023952 <_vsniprintf_r+0x2e>
 8023950:	1e63      	subs	r3, r4, #1
 8023952:	9302      	str	r3, [sp, #8]
 8023954:	9305      	str	r3, [sp, #20]
 8023956:	2301      	movs	r3, #1
 8023958:	4669      	mov	r1, sp
 802395a:	425b      	negs	r3, r3
 802395c:	81cb      	strh	r3, [r1, #14]
 802395e:	0028      	movs	r0, r5
 8023960:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8023962:	f002 f9f1 	bl	8025d48 <_svfiprintf_r>
 8023966:	1c43      	adds	r3, r0, #1
 8023968:	da01      	bge.n	802396e <_vsniprintf_r+0x4a>
 802396a:	238b      	movs	r3, #139	@ 0x8b
 802396c:	602b      	str	r3, [r5, #0]
 802396e:	2c00      	cmp	r4, #0
 8023970:	d0e3      	beq.n	802393a <_vsniprintf_r+0x16>
 8023972:	2200      	movs	r2, #0
 8023974:	9b00      	ldr	r3, [sp, #0]
 8023976:	701a      	strb	r2, [r3, #0]
 8023978:	e7df      	b.n	802393a <_vsniprintf_r+0x16>
	...

0802397c <vsniprintf>:
 802397c:	b513      	push	{r0, r1, r4, lr}
 802397e:	4c04      	ldr	r4, [pc, #16]	@ (8023990 <vsniprintf+0x14>)
 8023980:	9300      	str	r3, [sp, #0]
 8023982:	0013      	movs	r3, r2
 8023984:	000a      	movs	r2, r1
 8023986:	0001      	movs	r1, r0
 8023988:	6820      	ldr	r0, [r4, #0]
 802398a:	f7ff ffcb 	bl	8023924 <_vsniprintf_r>
 802398e:	bd16      	pop	{r1, r2, r4, pc}
 8023990:	200003e0 	.word	0x200003e0

08023994 <_vsiprintf_r>:
 8023994:	b500      	push	{lr}
 8023996:	b09b      	sub	sp, #108	@ 0x6c
 8023998:	9100      	str	r1, [sp, #0]
 802399a:	9104      	str	r1, [sp, #16]
 802399c:	4906      	ldr	r1, [pc, #24]	@ (80239b8 <_vsiprintf_r+0x24>)
 802399e:	9105      	str	r1, [sp, #20]
 80239a0:	9102      	str	r1, [sp, #8]
 80239a2:	4906      	ldr	r1, [pc, #24]	@ (80239bc <_vsiprintf_r+0x28>)
 80239a4:	9103      	str	r1, [sp, #12]
 80239a6:	4669      	mov	r1, sp
 80239a8:	f002 f9ce 	bl	8025d48 <_svfiprintf_r>
 80239ac:	2200      	movs	r2, #0
 80239ae:	9b00      	ldr	r3, [sp, #0]
 80239b0:	701a      	strb	r2, [r3, #0]
 80239b2:	b01b      	add	sp, #108	@ 0x6c
 80239b4:	bd00      	pop	{pc}
 80239b6:	46c0      	nop			@ (mov r8, r8)
 80239b8:	7fffffff 	.word	0x7fffffff
 80239bc:	ffff0208 	.word	0xffff0208

080239c0 <vsiprintf>:
 80239c0:	b510      	push	{r4, lr}
 80239c2:	4c04      	ldr	r4, [pc, #16]	@ (80239d4 <vsiprintf+0x14>)
 80239c4:	0013      	movs	r3, r2
 80239c6:	000a      	movs	r2, r1
 80239c8:	0001      	movs	r1, r0
 80239ca:	6820      	ldr	r0, [r4, #0]
 80239cc:	f7ff ffe2 	bl	8023994 <_vsiprintf_r>
 80239d0:	bd10      	pop	{r4, pc}
 80239d2:	46c0      	nop			@ (mov r8, r8)
 80239d4:	200003e0 	.word	0x200003e0

080239d8 <__swbuf_r>:
 80239d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239da:	0006      	movs	r6, r0
 80239dc:	000d      	movs	r5, r1
 80239de:	0014      	movs	r4, r2
 80239e0:	2800      	cmp	r0, #0
 80239e2:	d004      	beq.n	80239ee <__swbuf_r+0x16>
 80239e4:	6a03      	ldr	r3, [r0, #32]
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d101      	bne.n	80239ee <__swbuf_r+0x16>
 80239ea:	f7ff fe8b 	bl	8023704 <__sinit>
 80239ee:	69a3      	ldr	r3, [r4, #24]
 80239f0:	60a3      	str	r3, [r4, #8]
 80239f2:	89a3      	ldrh	r3, [r4, #12]
 80239f4:	071b      	lsls	r3, r3, #28
 80239f6:	d502      	bpl.n	80239fe <__swbuf_r+0x26>
 80239f8:	6923      	ldr	r3, [r4, #16]
 80239fa:	2b00      	cmp	r3, #0
 80239fc:	d109      	bne.n	8023a12 <__swbuf_r+0x3a>
 80239fe:	0021      	movs	r1, r4
 8023a00:	0030      	movs	r0, r6
 8023a02:	f000 f82b 	bl	8023a5c <__swsetup_r>
 8023a06:	2800      	cmp	r0, #0
 8023a08:	d003      	beq.n	8023a12 <__swbuf_r+0x3a>
 8023a0a:	2501      	movs	r5, #1
 8023a0c:	426d      	negs	r5, r5
 8023a0e:	0028      	movs	r0, r5
 8023a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a12:	6923      	ldr	r3, [r4, #16]
 8023a14:	6820      	ldr	r0, [r4, #0]
 8023a16:	b2ef      	uxtb	r7, r5
 8023a18:	1ac0      	subs	r0, r0, r3
 8023a1a:	6963      	ldr	r3, [r4, #20]
 8023a1c:	b2ed      	uxtb	r5, r5
 8023a1e:	4283      	cmp	r3, r0
 8023a20:	dc05      	bgt.n	8023a2e <__swbuf_r+0x56>
 8023a22:	0021      	movs	r1, r4
 8023a24:	0030      	movs	r0, r6
 8023a26:	f002 fc57 	bl	80262d8 <_fflush_r>
 8023a2a:	2800      	cmp	r0, #0
 8023a2c:	d1ed      	bne.n	8023a0a <__swbuf_r+0x32>
 8023a2e:	68a3      	ldr	r3, [r4, #8]
 8023a30:	3001      	adds	r0, #1
 8023a32:	3b01      	subs	r3, #1
 8023a34:	60a3      	str	r3, [r4, #8]
 8023a36:	6823      	ldr	r3, [r4, #0]
 8023a38:	1c5a      	adds	r2, r3, #1
 8023a3a:	6022      	str	r2, [r4, #0]
 8023a3c:	701f      	strb	r7, [r3, #0]
 8023a3e:	6963      	ldr	r3, [r4, #20]
 8023a40:	4283      	cmp	r3, r0
 8023a42:	d004      	beq.n	8023a4e <__swbuf_r+0x76>
 8023a44:	89a3      	ldrh	r3, [r4, #12]
 8023a46:	07db      	lsls	r3, r3, #31
 8023a48:	d5e1      	bpl.n	8023a0e <__swbuf_r+0x36>
 8023a4a:	2d0a      	cmp	r5, #10
 8023a4c:	d1df      	bne.n	8023a0e <__swbuf_r+0x36>
 8023a4e:	0021      	movs	r1, r4
 8023a50:	0030      	movs	r0, r6
 8023a52:	f002 fc41 	bl	80262d8 <_fflush_r>
 8023a56:	2800      	cmp	r0, #0
 8023a58:	d0d9      	beq.n	8023a0e <__swbuf_r+0x36>
 8023a5a:	e7d6      	b.n	8023a0a <__swbuf_r+0x32>

08023a5c <__swsetup_r>:
 8023a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8023b14 <__swsetup_r+0xb8>)
 8023a5e:	b570      	push	{r4, r5, r6, lr}
 8023a60:	0005      	movs	r5, r0
 8023a62:	6818      	ldr	r0, [r3, #0]
 8023a64:	000c      	movs	r4, r1
 8023a66:	2800      	cmp	r0, #0
 8023a68:	d004      	beq.n	8023a74 <__swsetup_r+0x18>
 8023a6a:	6a03      	ldr	r3, [r0, #32]
 8023a6c:	2b00      	cmp	r3, #0
 8023a6e:	d101      	bne.n	8023a74 <__swsetup_r+0x18>
 8023a70:	f7ff fe48 	bl	8023704 <__sinit>
 8023a74:	230c      	movs	r3, #12
 8023a76:	5ee2      	ldrsh	r2, [r4, r3]
 8023a78:	0713      	lsls	r3, r2, #28
 8023a7a:	d423      	bmi.n	8023ac4 <__swsetup_r+0x68>
 8023a7c:	06d3      	lsls	r3, r2, #27
 8023a7e:	d407      	bmi.n	8023a90 <__swsetup_r+0x34>
 8023a80:	2309      	movs	r3, #9
 8023a82:	602b      	str	r3, [r5, #0]
 8023a84:	2340      	movs	r3, #64	@ 0x40
 8023a86:	2001      	movs	r0, #1
 8023a88:	4313      	orrs	r3, r2
 8023a8a:	81a3      	strh	r3, [r4, #12]
 8023a8c:	4240      	negs	r0, r0
 8023a8e:	e03a      	b.n	8023b06 <__swsetup_r+0xaa>
 8023a90:	0752      	lsls	r2, r2, #29
 8023a92:	d513      	bpl.n	8023abc <__swsetup_r+0x60>
 8023a94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023a96:	2900      	cmp	r1, #0
 8023a98:	d008      	beq.n	8023aac <__swsetup_r+0x50>
 8023a9a:	0023      	movs	r3, r4
 8023a9c:	3344      	adds	r3, #68	@ 0x44
 8023a9e:	4299      	cmp	r1, r3
 8023aa0:	d002      	beq.n	8023aa8 <__swsetup_r+0x4c>
 8023aa2:	0028      	movs	r0, r5
 8023aa4:	f000 ffa6 	bl	80249f4 <_free_r>
 8023aa8:	2300      	movs	r3, #0
 8023aaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8023aac:	2224      	movs	r2, #36	@ 0x24
 8023aae:	89a3      	ldrh	r3, [r4, #12]
 8023ab0:	4393      	bics	r3, r2
 8023ab2:	81a3      	strh	r3, [r4, #12]
 8023ab4:	2300      	movs	r3, #0
 8023ab6:	6063      	str	r3, [r4, #4]
 8023ab8:	6923      	ldr	r3, [r4, #16]
 8023aba:	6023      	str	r3, [r4, #0]
 8023abc:	2308      	movs	r3, #8
 8023abe:	89a2      	ldrh	r2, [r4, #12]
 8023ac0:	4313      	orrs	r3, r2
 8023ac2:	81a3      	strh	r3, [r4, #12]
 8023ac4:	6923      	ldr	r3, [r4, #16]
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	d10b      	bne.n	8023ae2 <__swsetup_r+0x86>
 8023aca:	21a0      	movs	r1, #160	@ 0xa0
 8023acc:	2280      	movs	r2, #128	@ 0x80
 8023ace:	89a3      	ldrh	r3, [r4, #12]
 8023ad0:	0089      	lsls	r1, r1, #2
 8023ad2:	0092      	lsls	r2, r2, #2
 8023ad4:	400b      	ands	r3, r1
 8023ad6:	4293      	cmp	r3, r2
 8023ad8:	d003      	beq.n	8023ae2 <__swsetup_r+0x86>
 8023ada:	0021      	movs	r1, r4
 8023adc:	0028      	movs	r0, r5
 8023ade:	f002 fc51 	bl	8026384 <__smakebuf_r>
 8023ae2:	230c      	movs	r3, #12
 8023ae4:	5ee2      	ldrsh	r2, [r4, r3]
 8023ae6:	2101      	movs	r1, #1
 8023ae8:	0013      	movs	r3, r2
 8023aea:	400b      	ands	r3, r1
 8023aec:	420a      	tst	r2, r1
 8023aee:	d00b      	beq.n	8023b08 <__swsetup_r+0xac>
 8023af0:	2300      	movs	r3, #0
 8023af2:	60a3      	str	r3, [r4, #8]
 8023af4:	6963      	ldr	r3, [r4, #20]
 8023af6:	425b      	negs	r3, r3
 8023af8:	61a3      	str	r3, [r4, #24]
 8023afa:	2000      	movs	r0, #0
 8023afc:	6923      	ldr	r3, [r4, #16]
 8023afe:	4283      	cmp	r3, r0
 8023b00:	d101      	bne.n	8023b06 <__swsetup_r+0xaa>
 8023b02:	0613      	lsls	r3, r2, #24
 8023b04:	d4be      	bmi.n	8023a84 <__swsetup_r+0x28>
 8023b06:	bd70      	pop	{r4, r5, r6, pc}
 8023b08:	0791      	lsls	r1, r2, #30
 8023b0a:	d400      	bmi.n	8023b0e <__swsetup_r+0xb2>
 8023b0c:	6963      	ldr	r3, [r4, #20]
 8023b0e:	60a3      	str	r3, [r4, #8]
 8023b10:	e7f3      	b.n	8023afa <__swsetup_r+0x9e>
 8023b12:	46c0      	nop			@ (mov r8, r8)
 8023b14:	200003e0 	.word	0x200003e0

08023b18 <memset>:
 8023b18:	0003      	movs	r3, r0
 8023b1a:	1882      	adds	r2, r0, r2
 8023b1c:	4293      	cmp	r3, r2
 8023b1e:	d100      	bne.n	8023b22 <memset+0xa>
 8023b20:	4770      	bx	lr
 8023b22:	7019      	strb	r1, [r3, #0]
 8023b24:	3301      	adds	r3, #1
 8023b26:	e7f9      	b.n	8023b1c <memset+0x4>

08023b28 <strchr>:
 8023b28:	b2c9      	uxtb	r1, r1
 8023b2a:	7803      	ldrb	r3, [r0, #0]
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	d004      	beq.n	8023b3a <strchr+0x12>
 8023b30:	428b      	cmp	r3, r1
 8023b32:	d100      	bne.n	8023b36 <strchr+0xe>
 8023b34:	4770      	bx	lr
 8023b36:	3001      	adds	r0, #1
 8023b38:	e7f7      	b.n	8023b2a <strchr+0x2>
 8023b3a:	424b      	negs	r3, r1
 8023b3c:	4159      	adcs	r1, r3
 8023b3e:	4249      	negs	r1, r1
 8023b40:	4008      	ands	r0, r1
 8023b42:	e7f7      	b.n	8023b34 <strchr+0xc>

08023b44 <strncmp>:
 8023b44:	b530      	push	{r4, r5, lr}
 8023b46:	0005      	movs	r5, r0
 8023b48:	1e10      	subs	r0, r2, #0
 8023b4a:	d00b      	beq.n	8023b64 <strncmp+0x20>
 8023b4c:	2400      	movs	r4, #0
 8023b4e:	3a01      	subs	r2, #1
 8023b50:	5d2b      	ldrb	r3, [r5, r4]
 8023b52:	5d08      	ldrb	r0, [r1, r4]
 8023b54:	4283      	cmp	r3, r0
 8023b56:	d104      	bne.n	8023b62 <strncmp+0x1e>
 8023b58:	42a2      	cmp	r2, r4
 8023b5a:	d002      	beq.n	8023b62 <strncmp+0x1e>
 8023b5c:	3401      	adds	r4, #1
 8023b5e:	2b00      	cmp	r3, #0
 8023b60:	d1f6      	bne.n	8023b50 <strncmp+0xc>
 8023b62:	1a18      	subs	r0, r3, r0
 8023b64:	bd30      	pop	{r4, r5, pc}

08023b66 <strncpy>:
 8023b66:	0003      	movs	r3, r0
 8023b68:	b530      	push	{r4, r5, lr}
 8023b6a:	001d      	movs	r5, r3
 8023b6c:	2a00      	cmp	r2, #0
 8023b6e:	d006      	beq.n	8023b7e <strncpy+0x18>
 8023b70:	780c      	ldrb	r4, [r1, #0]
 8023b72:	3a01      	subs	r2, #1
 8023b74:	3301      	adds	r3, #1
 8023b76:	702c      	strb	r4, [r5, #0]
 8023b78:	3101      	adds	r1, #1
 8023b7a:	2c00      	cmp	r4, #0
 8023b7c:	d1f5      	bne.n	8023b6a <strncpy+0x4>
 8023b7e:	2100      	movs	r1, #0
 8023b80:	189a      	adds	r2, r3, r2
 8023b82:	4293      	cmp	r3, r2
 8023b84:	d100      	bne.n	8023b88 <strncpy+0x22>
 8023b86:	bd30      	pop	{r4, r5, pc}
 8023b88:	7019      	strb	r1, [r3, #0]
 8023b8a:	3301      	adds	r3, #1
 8023b8c:	e7f9      	b.n	8023b82 <strncpy+0x1c>

08023b8e <strstr>:
 8023b8e:	780a      	ldrb	r2, [r1, #0]
 8023b90:	b530      	push	{r4, r5, lr}
 8023b92:	2a00      	cmp	r2, #0
 8023b94:	d10c      	bne.n	8023bb0 <strstr+0x22>
 8023b96:	bd30      	pop	{r4, r5, pc}
 8023b98:	429a      	cmp	r2, r3
 8023b9a:	d108      	bne.n	8023bae <strstr+0x20>
 8023b9c:	2301      	movs	r3, #1
 8023b9e:	5ccc      	ldrb	r4, [r1, r3]
 8023ba0:	2c00      	cmp	r4, #0
 8023ba2:	d0f8      	beq.n	8023b96 <strstr+0x8>
 8023ba4:	5cc5      	ldrb	r5, [r0, r3]
 8023ba6:	42a5      	cmp	r5, r4
 8023ba8:	d101      	bne.n	8023bae <strstr+0x20>
 8023baa:	3301      	adds	r3, #1
 8023bac:	e7f7      	b.n	8023b9e <strstr+0x10>
 8023bae:	3001      	adds	r0, #1
 8023bb0:	7803      	ldrb	r3, [r0, #0]
 8023bb2:	2b00      	cmp	r3, #0
 8023bb4:	d1f0      	bne.n	8023b98 <strstr+0xa>
 8023bb6:	0018      	movs	r0, r3
 8023bb8:	e7ed      	b.n	8023b96 <strstr+0x8>
	...

08023bbc <_localeconv_r>:
 8023bbc:	4800      	ldr	r0, [pc, #0]	@ (8023bc0 <_localeconv_r+0x4>)
 8023bbe:	4770      	bx	lr
 8023bc0:	20000364 	.word	0x20000364

08023bc4 <_close_r>:
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	b570      	push	{r4, r5, r6, lr}
 8023bc8:	4d06      	ldr	r5, [pc, #24]	@ (8023be4 <_close_r+0x20>)
 8023bca:	0004      	movs	r4, r0
 8023bcc:	0008      	movs	r0, r1
 8023bce:	602b      	str	r3, [r5, #0]
 8023bd0:	f7ed f9e6 	bl	8010fa0 <_close>
 8023bd4:	1c43      	adds	r3, r0, #1
 8023bd6:	d103      	bne.n	8023be0 <_close_r+0x1c>
 8023bd8:	682b      	ldr	r3, [r5, #0]
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d000      	beq.n	8023be0 <_close_r+0x1c>
 8023bde:	6023      	str	r3, [r4, #0]
 8023be0:	bd70      	pop	{r4, r5, r6, pc}
 8023be2:	46c0      	nop			@ (mov r8, r8)
 8023be4:	200035e0 	.word	0x200035e0

08023be8 <_lseek_r>:
 8023be8:	b570      	push	{r4, r5, r6, lr}
 8023bea:	0004      	movs	r4, r0
 8023bec:	0008      	movs	r0, r1
 8023bee:	0011      	movs	r1, r2
 8023bf0:	001a      	movs	r2, r3
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	4d05      	ldr	r5, [pc, #20]	@ (8023c0c <_lseek_r+0x24>)
 8023bf6:	602b      	str	r3, [r5, #0]
 8023bf8:	f7ed f9f3 	bl	8010fe2 <_lseek>
 8023bfc:	1c43      	adds	r3, r0, #1
 8023bfe:	d103      	bne.n	8023c08 <_lseek_r+0x20>
 8023c00:	682b      	ldr	r3, [r5, #0]
 8023c02:	2b00      	cmp	r3, #0
 8023c04:	d000      	beq.n	8023c08 <_lseek_r+0x20>
 8023c06:	6023      	str	r3, [r4, #0]
 8023c08:	bd70      	pop	{r4, r5, r6, pc}
 8023c0a:	46c0      	nop			@ (mov r8, r8)
 8023c0c:	200035e0 	.word	0x200035e0

08023c10 <_read_r>:
 8023c10:	b570      	push	{r4, r5, r6, lr}
 8023c12:	0004      	movs	r4, r0
 8023c14:	0008      	movs	r0, r1
 8023c16:	0011      	movs	r1, r2
 8023c18:	001a      	movs	r2, r3
 8023c1a:	2300      	movs	r3, #0
 8023c1c:	4d05      	ldr	r5, [pc, #20]	@ (8023c34 <_read_r+0x24>)
 8023c1e:	602b      	str	r3, [r5, #0]
 8023c20:	f7ed f9a1 	bl	8010f66 <_read>
 8023c24:	1c43      	adds	r3, r0, #1
 8023c26:	d103      	bne.n	8023c30 <_read_r+0x20>
 8023c28:	682b      	ldr	r3, [r5, #0]
 8023c2a:	2b00      	cmp	r3, #0
 8023c2c:	d000      	beq.n	8023c30 <_read_r+0x20>
 8023c2e:	6023      	str	r3, [r4, #0]
 8023c30:	bd70      	pop	{r4, r5, r6, pc}
 8023c32:	46c0      	nop			@ (mov r8, r8)
 8023c34:	200035e0 	.word	0x200035e0

08023c38 <_write_r>:
 8023c38:	b570      	push	{r4, r5, r6, lr}
 8023c3a:	0004      	movs	r4, r0
 8023c3c:	0008      	movs	r0, r1
 8023c3e:	0011      	movs	r1, r2
 8023c40:	001a      	movs	r2, r3
 8023c42:	2300      	movs	r3, #0
 8023c44:	4d05      	ldr	r5, [pc, #20]	@ (8023c5c <_write_r+0x24>)
 8023c46:	602b      	str	r3, [r5, #0]
 8023c48:	f7ed fe5e 	bl	8011908 <_write>
 8023c4c:	1c43      	adds	r3, r0, #1
 8023c4e:	d103      	bne.n	8023c58 <_write_r+0x20>
 8023c50:	682b      	ldr	r3, [r5, #0]
 8023c52:	2b00      	cmp	r3, #0
 8023c54:	d000      	beq.n	8023c58 <_write_r+0x20>
 8023c56:	6023      	str	r3, [r4, #0]
 8023c58:	bd70      	pop	{r4, r5, r6, pc}
 8023c5a:	46c0      	nop			@ (mov r8, r8)
 8023c5c:	200035e0 	.word	0x200035e0

08023c60 <__errno>:
 8023c60:	4b01      	ldr	r3, [pc, #4]	@ (8023c68 <__errno+0x8>)
 8023c62:	6818      	ldr	r0, [r3, #0]
 8023c64:	4770      	bx	lr
 8023c66:	46c0      	nop			@ (mov r8, r8)
 8023c68:	200003e0 	.word	0x200003e0

08023c6c <__libc_init_array>:
 8023c6c:	b570      	push	{r4, r5, r6, lr}
 8023c6e:	2600      	movs	r6, #0
 8023c70:	4c0c      	ldr	r4, [pc, #48]	@ (8023ca4 <__libc_init_array+0x38>)
 8023c72:	4d0d      	ldr	r5, [pc, #52]	@ (8023ca8 <__libc_init_array+0x3c>)
 8023c74:	1b64      	subs	r4, r4, r5
 8023c76:	10a4      	asrs	r4, r4, #2
 8023c78:	42a6      	cmp	r6, r4
 8023c7a:	d109      	bne.n	8023c90 <__libc_init_array+0x24>
 8023c7c:	2600      	movs	r6, #0
 8023c7e:	f003 fe11 	bl	80278a4 <_init>
 8023c82:	4c0a      	ldr	r4, [pc, #40]	@ (8023cac <__libc_init_array+0x40>)
 8023c84:	4d0a      	ldr	r5, [pc, #40]	@ (8023cb0 <__libc_init_array+0x44>)
 8023c86:	1b64      	subs	r4, r4, r5
 8023c88:	10a4      	asrs	r4, r4, #2
 8023c8a:	42a6      	cmp	r6, r4
 8023c8c:	d105      	bne.n	8023c9a <__libc_init_array+0x2e>
 8023c8e:	bd70      	pop	{r4, r5, r6, pc}
 8023c90:	00b3      	lsls	r3, r6, #2
 8023c92:	58eb      	ldr	r3, [r5, r3]
 8023c94:	4798      	blx	r3
 8023c96:	3601      	adds	r6, #1
 8023c98:	e7ee      	b.n	8023c78 <__libc_init_array+0xc>
 8023c9a:	00b3      	lsls	r3, r6, #2
 8023c9c:	58eb      	ldr	r3, [r5, r3]
 8023c9e:	4798      	blx	r3
 8023ca0:	3601      	adds	r6, #1
 8023ca2:	e7f2      	b.n	8023c8a <__libc_init_array+0x1e>
 8023ca4:	0802bc28 	.word	0x0802bc28
 8023ca8:	0802bc28 	.word	0x0802bc28
 8023cac:	0802bc2c 	.word	0x0802bc2c
 8023cb0:	0802bc28 	.word	0x0802bc28

08023cb4 <__retarget_lock_init_recursive>:
 8023cb4:	4770      	bx	lr

08023cb6 <__retarget_lock_acquire_recursive>:
 8023cb6:	4770      	bx	lr

08023cb8 <__retarget_lock_release_recursive>:
 8023cb8:	4770      	bx	lr

08023cba <memchr>:
 8023cba:	b2c9      	uxtb	r1, r1
 8023cbc:	1882      	adds	r2, r0, r2
 8023cbe:	4290      	cmp	r0, r2
 8023cc0:	d101      	bne.n	8023cc6 <memchr+0xc>
 8023cc2:	2000      	movs	r0, #0
 8023cc4:	4770      	bx	lr
 8023cc6:	7803      	ldrb	r3, [r0, #0]
 8023cc8:	428b      	cmp	r3, r1
 8023cca:	d0fb      	beq.n	8023cc4 <memchr+0xa>
 8023ccc:	3001      	adds	r0, #1
 8023cce:	e7f6      	b.n	8023cbe <memchr+0x4>

08023cd0 <memcpy>:
 8023cd0:	2300      	movs	r3, #0
 8023cd2:	b510      	push	{r4, lr}
 8023cd4:	429a      	cmp	r2, r3
 8023cd6:	d100      	bne.n	8023cda <memcpy+0xa>
 8023cd8:	bd10      	pop	{r4, pc}
 8023cda:	5ccc      	ldrb	r4, [r1, r3]
 8023cdc:	54c4      	strb	r4, [r0, r3]
 8023cde:	3301      	adds	r3, #1
 8023ce0:	e7f8      	b.n	8023cd4 <memcpy+0x4>
	...

08023ce4 <nan>:
 8023ce4:	2000      	movs	r0, #0
 8023ce6:	4901      	ldr	r1, [pc, #4]	@ (8023cec <nan+0x8>)
 8023ce8:	4770      	bx	lr
 8023cea:	46c0      	nop			@ (mov r8, r8)
 8023cec:	7ff80000 	.word	0x7ff80000

08023cf0 <quorem>:
 8023cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cf2:	6902      	ldr	r2, [r0, #16]
 8023cf4:	690f      	ldr	r7, [r1, #16]
 8023cf6:	b087      	sub	sp, #28
 8023cf8:	0006      	movs	r6, r0
 8023cfa:	000b      	movs	r3, r1
 8023cfc:	2000      	movs	r0, #0
 8023cfe:	9102      	str	r1, [sp, #8]
 8023d00:	42ba      	cmp	r2, r7
 8023d02:	db6d      	blt.n	8023de0 <quorem+0xf0>
 8023d04:	3f01      	subs	r7, #1
 8023d06:	00bc      	lsls	r4, r7, #2
 8023d08:	3314      	adds	r3, #20
 8023d0a:	9305      	str	r3, [sp, #20]
 8023d0c:	191b      	adds	r3, r3, r4
 8023d0e:	9303      	str	r3, [sp, #12]
 8023d10:	0033      	movs	r3, r6
 8023d12:	3314      	adds	r3, #20
 8023d14:	191c      	adds	r4, r3, r4
 8023d16:	9301      	str	r3, [sp, #4]
 8023d18:	6823      	ldr	r3, [r4, #0]
 8023d1a:	9304      	str	r3, [sp, #16]
 8023d1c:	9b03      	ldr	r3, [sp, #12]
 8023d1e:	9804      	ldr	r0, [sp, #16]
 8023d20:	681d      	ldr	r5, [r3, #0]
 8023d22:	3501      	adds	r5, #1
 8023d24:	0029      	movs	r1, r5
 8023d26:	f7dc fa3d 	bl	80001a4 <__udivsi3>
 8023d2a:	9b04      	ldr	r3, [sp, #16]
 8023d2c:	9000      	str	r0, [sp, #0]
 8023d2e:	42ab      	cmp	r3, r5
 8023d30:	d32b      	bcc.n	8023d8a <quorem+0x9a>
 8023d32:	9b05      	ldr	r3, [sp, #20]
 8023d34:	9d01      	ldr	r5, [sp, #4]
 8023d36:	469c      	mov	ip, r3
 8023d38:	2300      	movs	r3, #0
 8023d3a:	9305      	str	r3, [sp, #20]
 8023d3c:	9304      	str	r3, [sp, #16]
 8023d3e:	4662      	mov	r2, ip
 8023d40:	ca08      	ldmia	r2!, {r3}
 8023d42:	6828      	ldr	r0, [r5, #0]
 8023d44:	4694      	mov	ip, r2
 8023d46:	9a00      	ldr	r2, [sp, #0]
 8023d48:	b299      	uxth	r1, r3
 8023d4a:	4351      	muls	r1, r2
 8023d4c:	9a05      	ldr	r2, [sp, #20]
 8023d4e:	0c1b      	lsrs	r3, r3, #16
 8023d50:	1889      	adds	r1, r1, r2
 8023d52:	9a00      	ldr	r2, [sp, #0]
 8023d54:	4353      	muls	r3, r2
 8023d56:	0c0a      	lsrs	r2, r1, #16
 8023d58:	189b      	adds	r3, r3, r2
 8023d5a:	0c1a      	lsrs	r2, r3, #16
 8023d5c:	b289      	uxth	r1, r1
 8023d5e:	9205      	str	r2, [sp, #20]
 8023d60:	b282      	uxth	r2, r0
 8023d62:	1a52      	subs	r2, r2, r1
 8023d64:	9904      	ldr	r1, [sp, #16]
 8023d66:	0c00      	lsrs	r0, r0, #16
 8023d68:	1852      	adds	r2, r2, r1
 8023d6a:	b29b      	uxth	r3, r3
 8023d6c:	1411      	asrs	r1, r2, #16
 8023d6e:	1ac3      	subs	r3, r0, r3
 8023d70:	185b      	adds	r3, r3, r1
 8023d72:	1419      	asrs	r1, r3, #16
 8023d74:	b292      	uxth	r2, r2
 8023d76:	041b      	lsls	r3, r3, #16
 8023d78:	431a      	orrs	r2, r3
 8023d7a:	9b03      	ldr	r3, [sp, #12]
 8023d7c:	9104      	str	r1, [sp, #16]
 8023d7e:	c504      	stmia	r5!, {r2}
 8023d80:	4563      	cmp	r3, ip
 8023d82:	d2dc      	bcs.n	8023d3e <quorem+0x4e>
 8023d84:	6823      	ldr	r3, [r4, #0]
 8023d86:	2b00      	cmp	r3, #0
 8023d88:	d030      	beq.n	8023dec <quorem+0xfc>
 8023d8a:	0030      	movs	r0, r6
 8023d8c:	9902      	ldr	r1, [sp, #8]
 8023d8e:	f001 fd7d 	bl	802588c <__mcmp>
 8023d92:	2800      	cmp	r0, #0
 8023d94:	db23      	blt.n	8023dde <quorem+0xee>
 8023d96:	0034      	movs	r4, r6
 8023d98:	2500      	movs	r5, #0
 8023d9a:	9902      	ldr	r1, [sp, #8]
 8023d9c:	3414      	adds	r4, #20
 8023d9e:	3114      	adds	r1, #20
 8023da0:	6823      	ldr	r3, [r4, #0]
 8023da2:	c901      	ldmia	r1!, {r0}
 8023da4:	9302      	str	r3, [sp, #8]
 8023da6:	466b      	mov	r3, sp
 8023da8:	891b      	ldrh	r3, [r3, #8]
 8023daa:	b282      	uxth	r2, r0
 8023dac:	1a9a      	subs	r2, r3, r2
 8023dae:	9b02      	ldr	r3, [sp, #8]
 8023db0:	1952      	adds	r2, r2, r5
 8023db2:	0c00      	lsrs	r0, r0, #16
 8023db4:	0c1b      	lsrs	r3, r3, #16
 8023db6:	1a1b      	subs	r3, r3, r0
 8023db8:	1410      	asrs	r0, r2, #16
 8023dba:	181b      	adds	r3, r3, r0
 8023dbc:	141d      	asrs	r5, r3, #16
 8023dbe:	b292      	uxth	r2, r2
 8023dc0:	041b      	lsls	r3, r3, #16
 8023dc2:	431a      	orrs	r2, r3
 8023dc4:	9b03      	ldr	r3, [sp, #12]
 8023dc6:	c404      	stmia	r4!, {r2}
 8023dc8:	428b      	cmp	r3, r1
 8023dca:	d2e9      	bcs.n	8023da0 <quorem+0xb0>
 8023dcc:	9a01      	ldr	r2, [sp, #4]
 8023dce:	00bb      	lsls	r3, r7, #2
 8023dd0:	18d3      	adds	r3, r2, r3
 8023dd2:	681a      	ldr	r2, [r3, #0]
 8023dd4:	2a00      	cmp	r2, #0
 8023dd6:	d013      	beq.n	8023e00 <quorem+0x110>
 8023dd8:	9b00      	ldr	r3, [sp, #0]
 8023dda:	3301      	adds	r3, #1
 8023ddc:	9300      	str	r3, [sp, #0]
 8023dde:	9800      	ldr	r0, [sp, #0]
 8023de0:	b007      	add	sp, #28
 8023de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023de4:	6823      	ldr	r3, [r4, #0]
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d104      	bne.n	8023df4 <quorem+0x104>
 8023dea:	3f01      	subs	r7, #1
 8023dec:	9b01      	ldr	r3, [sp, #4]
 8023dee:	3c04      	subs	r4, #4
 8023df0:	42a3      	cmp	r3, r4
 8023df2:	d3f7      	bcc.n	8023de4 <quorem+0xf4>
 8023df4:	6137      	str	r7, [r6, #16]
 8023df6:	e7c8      	b.n	8023d8a <quorem+0x9a>
 8023df8:	681a      	ldr	r2, [r3, #0]
 8023dfa:	2a00      	cmp	r2, #0
 8023dfc:	d104      	bne.n	8023e08 <quorem+0x118>
 8023dfe:	3f01      	subs	r7, #1
 8023e00:	9a01      	ldr	r2, [sp, #4]
 8023e02:	3b04      	subs	r3, #4
 8023e04:	429a      	cmp	r2, r3
 8023e06:	d3f7      	bcc.n	8023df8 <quorem+0x108>
 8023e08:	6137      	str	r7, [r6, #16]
 8023e0a:	e7e5      	b.n	8023dd8 <quorem+0xe8>

08023e0c <_dtoa_r>:
 8023e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e0e:	0014      	movs	r4, r2
 8023e10:	001d      	movs	r5, r3
 8023e12:	69c6      	ldr	r6, [r0, #28]
 8023e14:	b09d      	sub	sp, #116	@ 0x74
 8023e16:	940a      	str	r4, [sp, #40]	@ 0x28
 8023e18:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023e1a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8023e1c:	9003      	str	r0, [sp, #12]
 8023e1e:	2e00      	cmp	r6, #0
 8023e20:	d10f      	bne.n	8023e42 <_dtoa_r+0x36>
 8023e22:	2010      	movs	r0, #16
 8023e24:	f001 f98a 	bl	802513c <malloc>
 8023e28:	9b03      	ldr	r3, [sp, #12]
 8023e2a:	1e02      	subs	r2, r0, #0
 8023e2c:	61d8      	str	r0, [r3, #28]
 8023e2e:	d104      	bne.n	8023e3a <_dtoa_r+0x2e>
 8023e30:	21ef      	movs	r1, #239	@ 0xef
 8023e32:	4bc7      	ldr	r3, [pc, #796]	@ (8024150 <_dtoa_r+0x344>)
 8023e34:	48c7      	ldr	r0, [pc, #796]	@ (8024154 <_dtoa_r+0x348>)
 8023e36:	f002 fb2f 	bl	8026498 <__assert_func>
 8023e3a:	6046      	str	r6, [r0, #4]
 8023e3c:	6086      	str	r6, [r0, #8]
 8023e3e:	6006      	str	r6, [r0, #0]
 8023e40:	60c6      	str	r6, [r0, #12]
 8023e42:	9b03      	ldr	r3, [sp, #12]
 8023e44:	69db      	ldr	r3, [r3, #28]
 8023e46:	6819      	ldr	r1, [r3, #0]
 8023e48:	2900      	cmp	r1, #0
 8023e4a:	d00b      	beq.n	8023e64 <_dtoa_r+0x58>
 8023e4c:	685a      	ldr	r2, [r3, #4]
 8023e4e:	2301      	movs	r3, #1
 8023e50:	4093      	lsls	r3, r2
 8023e52:	604a      	str	r2, [r1, #4]
 8023e54:	608b      	str	r3, [r1, #8]
 8023e56:	9803      	ldr	r0, [sp, #12]
 8023e58:	f001 fa82 	bl	8025360 <_Bfree>
 8023e5c:	2200      	movs	r2, #0
 8023e5e:	9b03      	ldr	r3, [sp, #12]
 8023e60:	69db      	ldr	r3, [r3, #28]
 8023e62:	601a      	str	r2, [r3, #0]
 8023e64:	2d00      	cmp	r5, #0
 8023e66:	da1e      	bge.n	8023ea6 <_dtoa_r+0x9a>
 8023e68:	2301      	movs	r3, #1
 8023e6a:	603b      	str	r3, [r7, #0]
 8023e6c:	006b      	lsls	r3, r5, #1
 8023e6e:	085b      	lsrs	r3, r3, #1
 8023e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023e72:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023e74:	4bb8      	ldr	r3, [pc, #736]	@ (8024158 <_dtoa_r+0x34c>)
 8023e76:	4ab8      	ldr	r2, [pc, #736]	@ (8024158 <_dtoa_r+0x34c>)
 8023e78:	403b      	ands	r3, r7
 8023e7a:	4293      	cmp	r3, r2
 8023e7c:	d116      	bne.n	8023eac <_dtoa_r+0xa0>
 8023e7e:	4bb7      	ldr	r3, [pc, #732]	@ (802415c <_dtoa_r+0x350>)
 8023e80:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023e82:	6013      	str	r3, [r2, #0]
 8023e84:	033b      	lsls	r3, r7, #12
 8023e86:	0b1b      	lsrs	r3, r3, #12
 8023e88:	4323      	orrs	r3, r4
 8023e8a:	d101      	bne.n	8023e90 <_dtoa_r+0x84>
 8023e8c:	f000 fd83 	bl	8024996 <_dtoa_r+0xb8a>
 8023e90:	4bb3      	ldr	r3, [pc, #716]	@ (8024160 <_dtoa_r+0x354>)
 8023e92:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e94:	9308      	str	r3, [sp, #32]
 8023e96:	2a00      	cmp	r2, #0
 8023e98:	d002      	beq.n	8023ea0 <_dtoa_r+0x94>
 8023e9a:	4bb2      	ldr	r3, [pc, #712]	@ (8024164 <_dtoa_r+0x358>)
 8023e9c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e9e:	6013      	str	r3, [r2, #0]
 8023ea0:	9808      	ldr	r0, [sp, #32]
 8023ea2:	b01d      	add	sp, #116	@ 0x74
 8023ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ea6:	2300      	movs	r3, #0
 8023ea8:	603b      	str	r3, [r7, #0]
 8023eaa:	e7e2      	b.n	8023e72 <_dtoa_r+0x66>
 8023eac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023eb0:	9212      	str	r2, [sp, #72]	@ 0x48
 8023eb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023eb4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023eb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023eb8:	2200      	movs	r2, #0
 8023eba:	2300      	movs	r3, #0
 8023ebc:	f7dc faf8 	bl	80004b0 <__aeabi_dcmpeq>
 8023ec0:	1e06      	subs	r6, r0, #0
 8023ec2:	d00b      	beq.n	8023edc <_dtoa_r+0xd0>
 8023ec4:	2301      	movs	r3, #1
 8023ec6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023ec8:	6013      	str	r3, [r2, #0]
 8023eca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	d002      	beq.n	8023ed6 <_dtoa_r+0xca>
 8023ed0:	4ba5      	ldr	r3, [pc, #660]	@ (8024168 <_dtoa_r+0x35c>)
 8023ed2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023ed4:	6013      	str	r3, [r2, #0]
 8023ed6:	4ba5      	ldr	r3, [pc, #660]	@ (802416c <_dtoa_r+0x360>)
 8023ed8:	9308      	str	r3, [sp, #32]
 8023eda:	e7e1      	b.n	8023ea0 <_dtoa_r+0x94>
 8023edc:	ab1a      	add	r3, sp, #104	@ 0x68
 8023ede:	9301      	str	r3, [sp, #4]
 8023ee0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8023ee2:	9300      	str	r3, [sp, #0]
 8023ee4:	9803      	ldr	r0, [sp, #12]
 8023ee6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023ee8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023eea:	f001 fdf1 	bl	8025ad0 <__d2b>
 8023eee:	007a      	lsls	r2, r7, #1
 8023ef0:	9005      	str	r0, [sp, #20]
 8023ef2:	0d52      	lsrs	r2, r2, #21
 8023ef4:	d100      	bne.n	8023ef8 <_dtoa_r+0xec>
 8023ef6:	e07b      	b.n	8023ff0 <_dtoa_r+0x1e4>
 8023ef8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023efa:	9618      	str	r6, [sp, #96]	@ 0x60
 8023efc:	0319      	lsls	r1, r3, #12
 8023efe:	4b9c      	ldr	r3, [pc, #624]	@ (8024170 <_dtoa_r+0x364>)
 8023f00:	0b09      	lsrs	r1, r1, #12
 8023f02:	430b      	orrs	r3, r1
 8023f04:	499b      	ldr	r1, [pc, #620]	@ (8024174 <_dtoa_r+0x368>)
 8023f06:	1857      	adds	r7, r2, r1
 8023f08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023f0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023f0c:	0019      	movs	r1, r3
 8023f0e:	2200      	movs	r2, #0
 8023f10:	4b99      	ldr	r3, [pc, #612]	@ (8024178 <_dtoa_r+0x36c>)
 8023f12:	f7de fe5b 	bl	8002bcc <__aeabi_dsub>
 8023f16:	4a99      	ldr	r2, [pc, #612]	@ (802417c <_dtoa_r+0x370>)
 8023f18:	4b99      	ldr	r3, [pc, #612]	@ (8024180 <_dtoa_r+0x374>)
 8023f1a:	f7de fb8f 	bl	800263c <__aeabi_dmul>
 8023f1e:	4a99      	ldr	r2, [pc, #612]	@ (8024184 <_dtoa_r+0x378>)
 8023f20:	4b99      	ldr	r3, [pc, #612]	@ (8024188 <_dtoa_r+0x37c>)
 8023f22:	f7dd fbe3 	bl	80016ec <__aeabi_dadd>
 8023f26:	0004      	movs	r4, r0
 8023f28:	0038      	movs	r0, r7
 8023f2a:	000d      	movs	r5, r1
 8023f2c:	f7df fa48 	bl	80033c0 <__aeabi_i2d>
 8023f30:	4a96      	ldr	r2, [pc, #600]	@ (802418c <_dtoa_r+0x380>)
 8023f32:	4b97      	ldr	r3, [pc, #604]	@ (8024190 <_dtoa_r+0x384>)
 8023f34:	f7de fb82 	bl	800263c <__aeabi_dmul>
 8023f38:	0002      	movs	r2, r0
 8023f3a:	000b      	movs	r3, r1
 8023f3c:	0020      	movs	r0, r4
 8023f3e:	0029      	movs	r1, r5
 8023f40:	f7dd fbd4 	bl	80016ec <__aeabi_dadd>
 8023f44:	0004      	movs	r4, r0
 8023f46:	000d      	movs	r5, r1
 8023f48:	f7df f9fe 	bl	8003348 <__aeabi_d2iz>
 8023f4c:	2200      	movs	r2, #0
 8023f4e:	9004      	str	r0, [sp, #16]
 8023f50:	2300      	movs	r3, #0
 8023f52:	0020      	movs	r0, r4
 8023f54:	0029      	movs	r1, r5
 8023f56:	f7dc fab1 	bl	80004bc <__aeabi_dcmplt>
 8023f5a:	2800      	cmp	r0, #0
 8023f5c:	d00b      	beq.n	8023f76 <_dtoa_r+0x16a>
 8023f5e:	9804      	ldr	r0, [sp, #16]
 8023f60:	f7df fa2e 	bl	80033c0 <__aeabi_i2d>
 8023f64:	002b      	movs	r3, r5
 8023f66:	0022      	movs	r2, r4
 8023f68:	f7dc faa2 	bl	80004b0 <__aeabi_dcmpeq>
 8023f6c:	4243      	negs	r3, r0
 8023f6e:	4158      	adcs	r0, r3
 8023f70:	9b04      	ldr	r3, [sp, #16]
 8023f72:	1a1b      	subs	r3, r3, r0
 8023f74:	9304      	str	r3, [sp, #16]
 8023f76:	2301      	movs	r3, #1
 8023f78:	9315      	str	r3, [sp, #84]	@ 0x54
 8023f7a:	9b04      	ldr	r3, [sp, #16]
 8023f7c:	2b16      	cmp	r3, #22
 8023f7e:	d810      	bhi.n	8023fa2 <_dtoa_r+0x196>
 8023f80:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023f82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023f84:	9a04      	ldr	r2, [sp, #16]
 8023f86:	4b83      	ldr	r3, [pc, #524]	@ (8024194 <_dtoa_r+0x388>)
 8023f88:	00d2      	lsls	r2, r2, #3
 8023f8a:	189b      	adds	r3, r3, r2
 8023f8c:	681a      	ldr	r2, [r3, #0]
 8023f8e:	685b      	ldr	r3, [r3, #4]
 8023f90:	f7dc fa94 	bl	80004bc <__aeabi_dcmplt>
 8023f94:	2800      	cmp	r0, #0
 8023f96:	d047      	beq.n	8024028 <_dtoa_r+0x21c>
 8023f98:	9b04      	ldr	r3, [sp, #16]
 8023f9a:	3b01      	subs	r3, #1
 8023f9c:	9304      	str	r3, [sp, #16]
 8023f9e:	2300      	movs	r3, #0
 8023fa0:	9315      	str	r3, [sp, #84]	@ 0x54
 8023fa2:	2200      	movs	r2, #0
 8023fa4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023fa6:	9206      	str	r2, [sp, #24]
 8023fa8:	1bdb      	subs	r3, r3, r7
 8023faa:	1e5a      	subs	r2, r3, #1
 8023fac:	d53e      	bpl.n	802402c <_dtoa_r+0x220>
 8023fae:	2201      	movs	r2, #1
 8023fb0:	1ad3      	subs	r3, r2, r3
 8023fb2:	9306      	str	r3, [sp, #24]
 8023fb4:	2300      	movs	r3, #0
 8023fb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8023fb8:	9b04      	ldr	r3, [sp, #16]
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	db38      	blt.n	8024030 <_dtoa_r+0x224>
 8023fbe:	9a04      	ldr	r2, [sp, #16]
 8023fc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023fc2:	4694      	mov	ip, r2
 8023fc4:	4463      	add	r3, ip
 8023fc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8023fc8:	2300      	movs	r3, #0
 8023fca:	9214      	str	r2, [sp, #80]	@ 0x50
 8023fcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023fce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fd0:	2401      	movs	r4, #1
 8023fd2:	2b09      	cmp	r3, #9
 8023fd4:	d867      	bhi.n	80240a6 <_dtoa_r+0x29a>
 8023fd6:	2b05      	cmp	r3, #5
 8023fd8:	dd02      	ble.n	8023fe0 <_dtoa_r+0x1d4>
 8023fda:	2400      	movs	r4, #0
 8023fdc:	3b04      	subs	r3, #4
 8023fde:	9322      	str	r3, [sp, #136]	@ 0x88
 8023fe0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fe2:	1e98      	subs	r0, r3, #2
 8023fe4:	2803      	cmp	r0, #3
 8023fe6:	d867      	bhi.n	80240b8 <_dtoa_r+0x2ac>
 8023fe8:	f7dc f8c8 	bl	800017c <__gnu_thumb1_case_uqi>
 8023fec:	5b383a2b 	.word	0x5b383a2b
 8023ff0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023ff2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8023ff4:	18f6      	adds	r6, r6, r3
 8023ff6:	4b68      	ldr	r3, [pc, #416]	@ (8024198 <_dtoa_r+0x38c>)
 8023ff8:	18f2      	adds	r2, r6, r3
 8023ffa:	2a20      	cmp	r2, #32
 8023ffc:	dd0f      	ble.n	802401e <_dtoa_r+0x212>
 8023ffe:	2340      	movs	r3, #64	@ 0x40
 8024000:	1a9b      	subs	r3, r3, r2
 8024002:	409f      	lsls	r7, r3
 8024004:	4b65      	ldr	r3, [pc, #404]	@ (802419c <_dtoa_r+0x390>)
 8024006:	0038      	movs	r0, r7
 8024008:	18f3      	adds	r3, r6, r3
 802400a:	40dc      	lsrs	r4, r3
 802400c:	4320      	orrs	r0, r4
 802400e:	f7df fa05 	bl	800341c <__aeabi_ui2d>
 8024012:	2201      	movs	r2, #1
 8024014:	4b62      	ldr	r3, [pc, #392]	@ (80241a0 <_dtoa_r+0x394>)
 8024016:	1e77      	subs	r7, r6, #1
 8024018:	18cb      	adds	r3, r1, r3
 802401a:	9218      	str	r2, [sp, #96]	@ 0x60
 802401c:	e776      	b.n	8023f0c <_dtoa_r+0x100>
 802401e:	2320      	movs	r3, #32
 8024020:	0020      	movs	r0, r4
 8024022:	1a9b      	subs	r3, r3, r2
 8024024:	4098      	lsls	r0, r3
 8024026:	e7f2      	b.n	802400e <_dtoa_r+0x202>
 8024028:	9015      	str	r0, [sp, #84]	@ 0x54
 802402a:	e7ba      	b.n	8023fa2 <_dtoa_r+0x196>
 802402c:	920d      	str	r2, [sp, #52]	@ 0x34
 802402e:	e7c3      	b.n	8023fb8 <_dtoa_r+0x1ac>
 8024030:	9b06      	ldr	r3, [sp, #24]
 8024032:	9a04      	ldr	r2, [sp, #16]
 8024034:	1a9b      	subs	r3, r3, r2
 8024036:	9306      	str	r3, [sp, #24]
 8024038:	4253      	negs	r3, r2
 802403a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802403c:	2300      	movs	r3, #0
 802403e:	9314      	str	r3, [sp, #80]	@ 0x50
 8024040:	e7c5      	b.n	8023fce <_dtoa_r+0x1c2>
 8024042:	2300      	movs	r3, #0
 8024044:	9310      	str	r3, [sp, #64]	@ 0x40
 8024046:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024048:	930e      	str	r3, [sp, #56]	@ 0x38
 802404a:	9309      	str	r3, [sp, #36]	@ 0x24
 802404c:	2b00      	cmp	r3, #0
 802404e:	dc13      	bgt.n	8024078 <_dtoa_r+0x26c>
 8024050:	2301      	movs	r3, #1
 8024052:	001a      	movs	r2, r3
 8024054:	930e      	str	r3, [sp, #56]	@ 0x38
 8024056:	9309      	str	r3, [sp, #36]	@ 0x24
 8024058:	9223      	str	r2, [sp, #140]	@ 0x8c
 802405a:	e00d      	b.n	8024078 <_dtoa_r+0x26c>
 802405c:	2301      	movs	r3, #1
 802405e:	e7f1      	b.n	8024044 <_dtoa_r+0x238>
 8024060:	2300      	movs	r3, #0
 8024062:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024064:	9310      	str	r3, [sp, #64]	@ 0x40
 8024066:	4694      	mov	ip, r2
 8024068:	9b04      	ldr	r3, [sp, #16]
 802406a:	4463      	add	r3, ip
 802406c:	930e      	str	r3, [sp, #56]	@ 0x38
 802406e:	3301      	adds	r3, #1
 8024070:	9309      	str	r3, [sp, #36]	@ 0x24
 8024072:	2b00      	cmp	r3, #0
 8024074:	dc00      	bgt.n	8024078 <_dtoa_r+0x26c>
 8024076:	2301      	movs	r3, #1
 8024078:	9a03      	ldr	r2, [sp, #12]
 802407a:	2100      	movs	r1, #0
 802407c:	69d0      	ldr	r0, [r2, #28]
 802407e:	2204      	movs	r2, #4
 8024080:	0015      	movs	r5, r2
 8024082:	3514      	adds	r5, #20
 8024084:	429d      	cmp	r5, r3
 8024086:	d91b      	bls.n	80240c0 <_dtoa_r+0x2b4>
 8024088:	6041      	str	r1, [r0, #4]
 802408a:	9803      	ldr	r0, [sp, #12]
 802408c:	f001 f924 	bl	80252d8 <_Balloc>
 8024090:	9008      	str	r0, [sp, #32]
 8024092:	2800      	cmp	r0, #0
 8024094:	d117      	bne.n	80240c6 <_dtoa_r+0x2ba>
 8024096:	21b0      	movs	r1, #176	@ 0xb0
 8024098:	4b42      	ldr	r3, [pc, #264]	@ (80241a4 <_dtoa_r+0x398>)
 802409a:	482e      	ldr	r0, [pc, #184]	@ (8024154 <_dtoa_r+0x348>)
 802409c:	9a08      	ldr	r2, [sp, #32]
 802409e:	31ff      	adds	r1, #255	@ 0xff
 80240a0:	e6c9      	b.n	8023e36 <_dtoa_r+0x2a>
 80240a2:	2301      	movs	r3, #1
 80240a4:	e7dd      	b.n	8024062 <_dtoa_r+0x256>
 80240a6:	2300      	movs	r3, #0
 80240a8:	9410      	str	r4, [sp, #64]	@ 0x40
 80240aa:	9322      	str	r3, [sp, #136]	@ 0x88
 80240ac:	3b01      	subs	r3, #1
 80240ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80240b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80240b2:	2200      	movs	r2, #0
 80240b4:	3313      	adds	r3, #19
 80240b6:	e7cf      	b.n	8024058 <_dtoa_r+0x24c>
 80240b8:	2301      	movs	r3, #1
 80240ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80240bc:	3b02      	subs	r3, #2
 80240be:	e7f6      	b.n	80240ae <_dtoa_r+0x2a2>
 80240c0:	3101      	adds	r1, #1
 80240c2:	0052      	lsls	r2, r2, #1
 80240c4:	e7dc      	b.n	8024080 <_dtoa_r+0x274>
 80240c6:	9b03      	ldr	r3, [sp, #12]
 80240c8:	9a08      	ldr	r2, [sp, #32]
 80240ca:	69db      	ldr	r3, [r3, #28]
 80240cc:	601a      	str	r2, [r3, #0]
 80240ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240d0:	2b0e      	cmp	r3, #14
 80240d2:	d900      	bls.n	80240d6 <_dtoa_r+0x2ca>
 80240d4:	e0d9      	b.n	802428a <_dtoa_r+0x47e>
 80240d6:	2c00      	cmp	r4, #0
 80240d8:	d100      	bne.n	80240dc <_dtoa_r+0x2d0>
 80240da:	e0d6      	b.n	802428a <_dtoa_r+0x47e>
 80240dc:	9b04      	ldr	r3, [sp, #16]
 80240de:	2b00      	cmp	r3, #0
 80240e0:	dd64      	ble.n	80241ac <_dtoa_r+0x3a0>
 80240e2:	210f      	movs	r1, #15
 80240e4:	9a04      	ldr	r2, [sp, #16]
 80240e6:	4b2b      	ldr	r3, [pc, #172]	@ (8024194 <_dtoa_r+0x388>)
 80240e8:	400a      	ands	r2, r1
 80240ea:	00d2      	lsls	r2, r2, #3
 80240ec:	189b      	adds	r3, r3, r2
 80240ee:	681e      	ldr	r6, [r3, #0]
 80240f0:	685f      	ldr	r7, [r3, #4]
 80240f2:	9b04      	ldr	r3, [sp, #16]
 80240f4:	2402      	movs	r4, #2
 80240f6:	111d      	asrs	r5, r3, #4
 80240f8:	05db      	lsls	r3, r3, #23
 80240fa:	d50a      	bpl.n	8024112 <_dtoa_r+0x306>
 80240fc:	4b2a      	ldr	r3, [pc, #168]	@ (80241a8 <_dtoa_r+0x39c>)
 80240fe:	400d      	ands	r5, r1
 8024100:	6a1a      	ldr	r2, [r3, #32]
 8024102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024104:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024106:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024108:	f7dd fe54 	bl	8001db4 <__aeabi_ddiv>
 802410c:	900a      	str	r0, [sp, #40]	@ 0x28
 802410e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024110:	3401      	adds	r4, #1
 8024112:	4b25      	ldr	r3, [pc, #148]	@ (80241a8 <_dtoa_r+0x39c>)
 8024114:	930c      	str	r3, [sp, #48]	@ 0x30
 8024116:	2d00      	cmp	r5, #0
 8024118:	d108      	bne.n	802412c <_dtoa_r+0x320>
 802411a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802411c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802411e:	0032      	movs	r2, r6
 8024120:	003b      	movs	r3, r7
 8024122:	f7dd fe47 	bl	8001db4 <__aeabi_ddiv>
 8024126:	900a      	str	r0, [sp, #40]	@ 0x28
 8024128:	910b      	str	r1, [sp, #44]	@ 0x2c
 802412a:	e05a      	b.n	80241e2 <_dtoa_r+0x3d6>
 802412c:	2301      	movs	r3, #1
 802412e:	421d      	tst	r5, r3
 8024130:	d009      	beq.n	8024146 <_dtoa_r+0x33a>
 8024132:	18e4      	adds	r4, r4, r3
 8024134:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024136:	0030      	movs	r0, r6
 8024138:	681a      	ldr	r2, [r3, #0]
 802413a:	685b      	ldr	r3, [r3, #4]
 802413c:	0039      	movs	r1, r7
 802413e:	f7de fa7d 	bl	800263c <__aeabi_dmul>
 8024142:	0006      	movs	r6, r0
 8024144:	000f      	movs	r7, r1
 8024146:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024148:	106d      	asrs	r5, r5, #1
 802414a:	3308      	adds	r3, #8
 802414c:	e7e2      	b.n	8024114 <_dtoa_r+0x308>
 802414e:	46c0      	nop			@ (mov r8, r8)
 8024150:	0802b952 	.word	0x0802b952
 8024154:	0802b969 	.word	0x0802b969
 8024158:	7ff00000 	.word	0x7ff00000
 802415c:	0000270f 	.word	0x0000270f
 8024160:	0802b94e 	.word	0x0802b94e
 8024164:	0802b951 	.word	0x0802b951
 8024168:	0802b91a 	.word	0x0802b91a
 802416c:	0802b919 	.word	0x0802b919
 8024170:	3ff00000 	.word	0x3ff00000
 8024174:	fffffc01 	.word	0xfffffc01
 8024178:	3ff80000 	.word	0x3ff80000
 802417c:	636f4361 	.word	0x636f4361
 8024180:	3fd287a7 	.word	0x3fd287a7
 8024184:	8b60c8b3 	.word	0x8b60c8b3
 8024188:	3fc68a28 	.word	0x3fc68a28
 802418c:	509f79fb 	.word	0x509f79fb
 8024190:	3fd34413 	.word	0x3fd34413
 8024194:	0802bac0 	.word	0x0802bac0
 8024198:	00000432 	.word	0x00000432
 802419c:	00000412 	.word	0x00000412
 80241a0:	fe100000 	.word	0xfe100000
 80241a4:	0802b9c1 	.word	0x0802b9c1
 80241a8:	0802ba98 	.word	0x0802ba98
 80241ac:	9b04      	ldr	r3, [sp, #16]
 80241ae:	2402      	movs	r4, #2
 80241b0:	2b00      	cmp	r3, #0
 80241b2:	d016      	beq.n	80241e2 <_dtoa_r+0x3d6>
 80241b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80241b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80241b8:	220f      	movs	r2, #15
 80241ba:	425d      	negs	r5, r3
 80241bc:	402a      	ands	r2, r5
 80241be:	4bd7      	ldr	r3, [pc, #860]	@ (802451c <_dtoa_r+0x710>)
 80241c0:	00d2      	lsls	r2, r2, #3
 80241c2:	189b      	adds	r3, r3, r2
 80241c4:	681a      	ldr	r2, [r3, #0]
 80241c6:	685b      	ldr	r3, [r3, #4]
 80241c8:	f7de fa38 	bl	800263c <__aeabi_dmul>
 80241cc:	2701      	movs	r7, #1
 80241ce:	2300      	movs	r3, #0
 80241d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80241d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80241d4:	4ed2      	ldr	r6, [pc, #840]	@ (8024520 <_dtoa_r+0x714>)
 80241d6:	112d      	asrs	r5, r5, #4
 80241d8:	2d00      	cmp	r5, #0
 80241da:	d000      	beq.n	80241de <_dtoa_r+0x3d2>
 80241dc:	e0ba      	b.n	8024354 <_dtoa_r+0x548>
 80241de:	2b00      	cmp	r3, #0
 80241e0:	d1a1      	bne.n	8024126 <_dtoa_r+0x31a>
 80241e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80241e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80241e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	d100      	bne.n	80241ee <_dtoa_r+0x3e2>
 80241ec:	e0bd      	b.n	802436a <_dtoa_r+0x55e>
 80241ee:	2200      	movs	r2, #0
 80241f0:	0030      	movs	r0, r6
 80241f2:	0039      	movs	r1, r7
 80241f4:	4bcb      	ldr	r3, [pc, #812]	@ (8024524 <_dtoa_r+0x718>)
 80241f6:	f7dc f961 	bl	80004bc <__aeabi_dcmplt>
 80241fa:	2800      	cmp	r0, #0
 80241fc:	d100      	bne.n	8024200 <_dtoa_r+0x3f4>
 80241fe:	e0b4      	b.n	802436a <_dtoa_r+0x55e>
 8024200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024202:	2b00      	cmp	r3, #0
 8024204:	d100      	bne.n	8024208 <_dtoa_r+0x3fc>
 8024206:	e0b0      	b.n	802436a <_dtoa_r+0x55e>
 8024208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802420a:	2b00      	cmp	r3, #0
 802420c:	dd39      	ble.n	8024282 <_dtoa_r+0x476>
 802420e:	9b04      	ldr	r3, [sp, #16]
 8024210:	2200      	movs	r2, #0
 8024212:	3b01      	subs	r3, #1
 8024214:	930c      	str	r3, [sp, #48]	@ 0x30
 8024216:	0030      	movs	r0, r6
 8024218:	4bc3      	ldr	r3, [pc, #780]	@ (8024528 <_dtoa_r+0x71c>)
 802421a:	0039      	movs	r1, r7
 802421c:	f7de fa0e 	bl	800263c <__aeabi_dmul>
 8024220:	900a      	str	r0, [sp, #40]	@ 0x28
 8024222:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024226:	3401      	adds	r4, #1
 8024228:	0020      	movs	r0, r4
 802422a:	9311      	str	r3, [sp, #68]	@ 0x44
 802422c:	f7df f8c8 	bl	80033c0 <__aeabi_i2d>
 8024230:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024232:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024234:	f7de fa02 	bl	800263c <__aeabi_dmul>
 8024238:	4bbc      	ldr	r3, [pc, #752]	@ (802452c <_dtoa_r+0x720>)
 802423a:	2200      	movs	r2, #0
 802423c:	f7dd fa56 	bl	80016ec <__aeabi_dadd>
 8024240:	4bbb      	ldr	r3, [pc, #748]	@ (8024530 <_dtoa_r+0x724>)
 8024242:	0006      	movs	r6, r0
 8024244:	18cf      	adds	r7, r1, r3
 8024246:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024248:	2b00      	cmp	r3, #0
 802424a:	d000      	beq.n	802424e <_dtoa_r+0x442>
 802424c:	e091      	b.n	8024372 <_dtoa_r+0x566>
 802424e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024252:	2200      	movs	r2, #0
 8024254:	4bb7      	ldr	r3, [pc, #732]	@ (8024534 <_dtoa_r+0x728>)
 8024256:	f7de fcb9 	bl	8002bcc <__aeabi_dsub>
 802425a:	0032      	movs	r2, r6
 802425c:	003b      	movs	r3, r7
 802425e:	0004      	movs	r4, r0
 8024260:	000d      	movs	r5, r1
 8024262:	f7dc f93f 	bl	80004e4 <__aeabi_dcmpgt>
 8024266:	2800      	cmp	r0, #0
 8024268:	d000      	beq.n	802426c <_dtoa_r+0x460>
 802426a:	e29d      	b.n	80247a8 <_dtoa_r+0x99c>
 802426c:	2180      	movs	r1, #128	@ 0x80
 802426e:	0609      	lsls	r1, r1, #24
 8024270:	187b      	adds	r3, r7, r1
 8024272:	0032      	movs	r2, r6
 8024274:	0020      	movs	r0, r4
 8024276:	0029      	movs	r1, r5
 8024278:	f7dc f920 	bl	80004bc <__aeabi_dcmplt>
 802427c:	2800      	cmp	r0, #0
 802427e:	d000      	beq.n	8024282 <_dtoa_r+0x476>
 8024280:	e130      	b.n	80244e4 <_dtoa_r+0x6d8>
 8024282:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024284:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024286:	930a      	str	r3, [sp, #40]	@ 0x28
 8024288:	940b      	str	r4, [sp, #44]	@ 0x2c
 802428a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802428c:	2b00      	cmp	r3, #0
 802428e:	da00      	bge.n	8024292 <_dtoa_r+0x486>
 8024290:	e177      	b.n	8024582 <_dtoa_r+0x776>
 8024292:	9a04      	ldr	r2, [sp, #16]
 8024294:	2a0e      	cmp	r2, #14
 8024296:	dd00      	ble.n	802429a <_dtoa_r+0x48e>
 8024298:	e173      	b.n	8024582 <_dtoa_r+0x776>
 802429a:	4ba0      	ldr	r3, [pc, #640]	@ (802451c <_dtoa_r+0x710>)
 802429c:	00d2      	lsls	r2, r2, #3
 802429e:	189b      	adds	r3, r3, r2
 80242a0:	685c      	ldr	r4, [r3, #4]
 80242a2:	681b      	ldr	r3, [r3, #0]
 80242a4:	9306      	str	r3, [sp, #24]
 80242a6:	9407      	str	r4, [sp, #28]
 80242a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80242aa:	2b00      	cmp	r3, #0
 80242ac:	da03      	bge.n	80242b6 <_dtoa_r+0x4aa>
 80242ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242b0:	2b00      	cmp	r3, #0
 80242b2:	dc00      	bgt.n	80242b6 <_dtoa_r+0x4aa>
 80242b4:	e106      	b.n	80244c4 <_dtoa_r+0x6b8>
 80242b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80242b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80242ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242bc:	9d08      	ldr	r5, [sp, #32]
 80242be:	3b01      	subs	r3, #1
 80242c0:	195b      	adds	r3, r3, r5
 80242c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80242c4:	9a06      	ldr	r2, [sp, #24]
 80242c6:	9b07      	ldr	r3, [sp, #28]
 80242c8:	0030      	movs	r0, r6
 80242ca:	0039      	movs	r1, r7
 80242cc:	f7dd fd72 	bl	8001db4 <__aeabi_ddiv>
 80242d0:	f7df f83a 	bl	8003348 <__aeabi_d2iz>
 80242d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80242d6:	f7df f873 	bl	80033c0 <__aeabi_i2d>
 80242da:	9a06      	ldr	r2, [sp, #24]
 80242dc:	9b07      	ldr	r3, [sp, #28]
 80242de:	f7de f9ad 	bl	800263c <__aeabi_dmul>
 80242e2:	0002      	movs	r2, r0
 80242e4:	000b      	movs	r3, r1
 80242e6:	0030      	movs	r0, r6
 80242e8:	0039      	movs	r1, r7
 80242ea:	f7de fc6f 	bl	8002bcc <__aeabi_dsub>
 80242ee:	002b      	movs	r3, r5
 80242f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80242f2:	3501      	adds	r5, #1
 80242f4:	3230      	adds	r2, #48	@ 0x30
 80242f6:	701a      	strb	r2, [r3, #0]
 80242f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80242fa:	002c      	movs	r4, r5
 80242fc:	429a      	cmp	r2, r3
 80242fe:	d000      	beq.n	8024302 <_dtoa_r+0x4f6>
 8024300:	e131      	b.n	8024566 <_dtoa_r+0x75a>
 8024302:	0002      	movs	r2, r0
 8024304:	000b      	movs	r3, r1
 8024306:	f7dd f9f1 	bl	80016ec <__aeabi_dadd>
 802430a:	9a06      	ldr	r2, [sp, #24]
 802430c:	9b07      	ldr	r3, [sp, #28]
 802430e:	0006      	movs	r6, r0
 8024310:	000f      	movs	r7, r1
 8024312:	f7dc f8e7 	bl	80004e4 <__aeabi_dcmpgt>
 8024316:	2800      	cmp	r0, #0
 8024318:	d000      	beq.n	802431c <_dtoa_r+0x510>
 802431a:	e10f      	b.n	802453c <_dtoa_r+0x730>
 802431c:	9a06      	ldr	r2, [sp, #24]
 802431e:	9b07      	ldr	r3, [sp, #28]
 8024320:	0030      	movs	r0, r6
 8024322:	0039      	movs	r1, r7
 8024324:	f7dc f8c4 	bl	80004b0 <__aeabi_dcmpeq>
 8024328:	2800      	cmp	r0, #0
 802432a:	d003      	beq.n	8024334 <_dtoa_r+0x528>
 802432c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802432e:	07dd      	lsls	r5, r3, #31
 8024330:	d500      	bpl.n	8024334 <_dtoa_r+0x528>
 8024332:	e103      	b.n	802453c <_dtoa_r+0x730>
 8024334:	9905      	ldr	r1, [sp, #20]
 8024336:	9803      	ldr	r0, [sp, #12]
 8024338:	f001 f812 	bl	8025360 <_Bfree>
 802433c:	2300      	movs	r3, #0
 802433e:	7023      	strb	r3, [r4, #0]
 8024340:	9b04      	ldr	r3, [sp, #16]
 8024342:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024344:	3301      	adds	r3, #1
 8024346:	6013      	str	r3, [r2, #0]
 8024348:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802434a:	2b00      	cmp	r3, #0
 802434c:	d100      	bne.n	8024350 <_dtoa_r+0x544>
 802434e:	e5a7      	b.n	8023ea0 <_dtoa_r+0x94>
 8024350:	601c      	str	r4, [r3, #0]
 8024352:	e5a5      	b.n	8023ea0 <_dtoa_r+0x94>
 8024354:	423d      	tst	r5, r7
 8024356:	d005      	beq.n	8024364 <_dtoa_r+0x558>
 8024358:	6832      	ldr	r2, [r6, #0]
 802435a:	6873      	ldr	r3, [r6, #4]
 802435c:	f7de f96e 	bl	800263c <__aeabi_dmul>
 8024360:	003b      	movs	r3, r7
 8024362:	3401      	adds	r4, #1
 8024364:	106d      	asrs	r5, r5, #1
 8024366:	3608      	adds	r6, #8
 8024368:	e736      	b.n	80241d8 <_dtoa_r+0x3cc>
 802436a:	9b04      	ldr	r3, [sp, #16]
 802436c:	930c      	str	r3, [sp, #48]	@ 0x30
 802436e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024370:	e75a      	b.n	8024228 <_dtoa_r+0x41c>
 8024372:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024374:	4b69      	ldr	r3, [pc, #420]	@ (802451c <_dtoa_r+0x710>)
 8024376:	3a01      	subs	r2, #1
 8024378:	00d2      	lsls	r2, r2, #3
 802437a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802437c:	189b      	adds	r3, r3, r2
 802437e:	681a      	ldr	r2, [r3, #0]
 8024380:	685b      	ldr	r3, [r3, #4]
 8024382:	2900      	cmp	r1, #0
 8024384:	d04c      	beq.n	8024420 <_dtoa_r+0x614>
 8024386:	2000      	movs	r0, #0
 8024388:	496b      	ldr	r1, [pc, #428]	@ (8024538 <_dtoa_r+0x72c>)
 802438a:	f7dd fd13 	bl	8001db4 <__aeabi_ddiv>
 802438e:	0032      	movs	r2, r6
 8024390:	003b      	movs	r3, r7
 8024392:	f7de fc1b 	bl	8002bcc <__aeabi_dsub>
 8024396:	9a08      	ldr	r2, [sp, #32]
 8024398:	0006      	movs	r6, r0
 802439a:	4694      	mov	ip, r2
 802439c:	000f      	movs	r7, r1
 802439e:	9b08      	ldr	r3, [sp, #32]
 80243a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80243a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243a4:	4463      	add	r3, ip
 80243a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80243a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80243aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243ac:	f7de ffcc 	bl	8003348 <__aeabi_d2iz>
 80243b0:	0005      	movs	r5, r0
 80243b2:	f7df f805 	bl	80033c0 <__aeabi_i2d>
 80243b6:	0002      	movs	r2, r0
 80243b8:	000b      	movs	r3, r1
 80243ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80243bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243be:	f7de fc05 	bl	8002bcc <__aeabi_dsub>
 80243c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80243c4:	3530      	adds	r5, #48	@ 0x30
 80243c6:	1c5c      	adds	r4, r3, #1
 80243c8:	701d      	strb	r5, [r3, #0]
 80243ca:	0032      	movs	r2, r6
 80243cc:	003b      	movs	r3, r7
 80243ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80243d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80243d2:	f7dc f873 	bl	80004bc <__aeabi_dcmplt>
 80243d6:	2800      	cmp	r0, #0
 80243d8:	d16a      	bne.n	80244b0 <_dtoa_r+0x6a4>
 80243da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243de:	2000      	movs	r0, #0
 80243e0:	4950      	ldr	r1, [pc, #320]	@ (8024524 <_dtoa_r+0x718>)
 80243e2:	f7de fbf3 	bl	8002bcc <__aeabi_dsub>
 80243e6:	0032      	movs	r2, r6
 80243e8:	003b      	movs	r3, r7
 80243ea:	f7dc f867 	bl	80004bc <__aeabi_dcmplt>
 80243ee:	2800      	cmp	r0, #0
 80243f0:	d000      	beq.n	80243f4 <_dtoa_r+0x5e8>
 80243f2:	e0a5      	b.n	8024540 <_dtoa_r+0x734>
 80243f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243f6:	42a3      	cmp	r3, r4
 80243f8:	d100      	bne.n	80243fc <_dtoa_r+0x5f0>
 80243fa:	e742      	b.n	8024282 <_dtoa_r+0x476>
 80243fc:	2200      	movs	r2, #0
 80243fe:	0030      	movs	r0, r6
 8024400:	0039      	movs	r1, r7
 8024402:	4b49      	ldr	r3, [pc, #292]	@ (8024528 <_dtoa_r+0x71c>)
 8024404:	f7de f91a 	bl	800263c <__aeabi_dmul>
 8024408:	2200      	movs	r2, #0
 802440a:	0006      	movs	r6, r0
 802440c:	000f      	movs	r7, r1
 802440e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024410:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024412:	4b45      	ldr	r3, [pc, #276]	@ (8024528 <_dtoa_r+0x71c>)
 8024414:	f7de f912 	bl	800263c <__aeabi_dmul>
 8024418:	9416      	str	r4, [sp, #88]	@ 0x58
 802441a:	900a      	str	r0, [sp, #40]	@ 0x28
 802441c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802441e:	e7c3      	b.n	80243a8 <_dtoa_r+0x59c>
 8024420:	0030      	movs	r0, r6
 8024422:	0039      	movs	r1, r7
 8024424:	f7de f90a 	bl	800263c <__aeabi_dmul>
 8024428:	9d08      	ldr	r5, [sp, #32]
 802442a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802442c:	002b      	movs	r3, r5
 802442e:	4694      	mov	ip, r2
 8024430:	9016      	str	r0, [sp, #88]	@ 0x58
 8024432:	9117      	str	r1, [sp, #92]	@ 0x5c
 8024434:	4463      	add	r3, ip
 8024436:	9319      	str	r3, [sp, #100]	@ 0x64
 8024438:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802443a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802443c:	f7de ff84 	bl	8003348 <__aeabi_d2iz>
 8024440:	0004      	movs	r4, r0
 8024442:	f7de ffbd 	bl	80033c0 <__aeabi_i2d>
 8024446:	000b      	movs	r3, r1
 8024448:	0002      	movs	r2, r0
 802444a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802444c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802444e:	f7de fbbd 	bl	8002bcc <__aeabi_dsub>
 8024452:	3430      	adds	r4, #48	@ 0x30
 8024454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024456:	702c      	strb	r4, [r5, #0]
 8024458:	3501      	adds	r5, #1
 802445a:	0006      	movs	r6, r0
 802445c:	000f      	movs	r7, r1
 802445e:	42ab      	cmp	r3, r5
 8024460:	d129      	bne.n	80244b6 <_dtoa_r+0x6aa>
 8024462:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024464:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024466:	9b08      	ldr	r3, [sp, #32]
 8024468:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802446a:	469c      	mov	ip, r3
 802446c:	2200      	movs	r2, #0
 802446e:	4b32      	ldr	r3, [pc, #200]	@ (8024538 <_dtoa_r+0x72c>)
 8024470:	4464      	add	r4, ip
 8024472:	f7dd f93b 	bl	80016ec <__aeabi_dadd>
 8024476:	0002      	movs	r2, r0
 8024478:	000b      	movs	r3, r1
 802447a:	0030      	movs	r0, r6
 802447c:	0039      	movs	r1, r7
 802447e:	f7dc f831 	bl	80004e4 <__aeabi_dcmpgt>
 8024482:	2800      	cmp	r0, #0
 8024484:	d15c      	bne.n	8024540 <_dtoa_r+0x734>
 8024486:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024488:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802448a:	2000      	movs	r0, #0
 802448c:	492a      	ldr	r1, [pc, #168]	@ (8024538 <_dtoa_r+0x72c>)
 802448e:	f7de fb9d 	bl	8002bcc <__aeabi_dsub>
 8024492:	0002      	movs	r2, r0
 8024494:	000b      	movs	r3, r1
 8024496:	0030      	movs	r0, r6
 8024498:	0039      	movs	r1, r7
 802449a:	f7dc f80f 	bl	80004bc <__aeabi_dcmplt>
 802449e:	2800      	cmp	r0, #0
 80244a0:	d100      	bne.n	80244a4 <_dtoa_r+0x698>
 80244a2:	e6ee      	b.n	8024282 <_dtoa_r+0x476>
 80244a4:	0023      	movs	r3, r4
 80244a6:	3c01      	subs	r4, #1
 80244a8:	7822      	ldrb	r2, [r4, #0]
 80244aa:	2a30      	cmp	r2, #48	@ 0x30
 80244ac:	d0fa      	beq.n	80244a4 <_dtoa_r+0x698>
 80244ae:	001c      	movs	r4, r3
 80244b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80244b2:	9304      	str	r3, [sp, #16]
 80244b4:	e73e      	b.n	8024334 <_dtoa_r+0x528>
 80244b6:	2200      	movs	r2, #0
 80244b8:	4b1b      	ldr	r3, [pc, #108]	@ (8024528 <_dtoa_r+0x71c>)
 80244ba:	f7de f8bf 	bl	800263c <__aeabi_dmul>
 80244be:	900a      	str	r0, [sp, #40]	@ 0x28
 80244c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80244c2:	e7b9      	b.n	8024438 <_dtoa_r+0x62c>
 80244c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	d10c      	bne.n	80244e4 <_dtoa_r+0x6d8>
 80244ca:	9806      	ldr	r0, [sp, #24]
 80244cc:	9907      	ldr	r1, [sp, #28]
 80244ce:	2200      	movs	r2, #0
 80244d0:	4b18      	ldr	r3, [pc, #96]	@ (8024534 <_dtoa_r+0x728>)
 80244d2:	f7de f8b3 	bl	800263c <__aeabi_dmul>
 80244d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80244da:	f7dc f80d 	bl	80004f8 <__aeabi_dcmpge>
 80244de:	2800      	cmp	r0, #0
 80244e0:	d100      	bne.n	80244e4 <_dtoa_r+0x6d8>
 80244e2:	e164      	b.n	80247ae <_dtoa_r+0x9a2>
 80244e4:	2600      	movs	r6, #0
 80244e6:	0037      	movs	r7, r6
 80244e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80244ea:	9c08      	ldr	r4, [sp, #32]
 80244ec:	43db      	mvns	r3, r3
 80244ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80244f0:	2300      	movs	r3, #0
 80244f2:	9304      	str	r3, [sp, #16]
 80244f4:	0031      	movs	r1, r6
 80244f6:	9803      	ldr	r0, [sp, #12]
 80244f8:	f000 ff32 	bl	8025360 <_Bfree>
 80244fc:	2f00      	cmp	r7, #0
 80244fe:	d0d7      	beq.n	80244b0 <_dtoa_r+0x6a4>
 8024500:	9b04      	ldr	r3, [sp, #16]
 8024502:	2b00      	cmp	r3, #0
 8024504:	d005      	beq.n	8024512 <_dtoa_r+0x706>
 8024506:	42bb      	cmp	r3, r7
 8024508:	d003      	beq.n	8024512 <_dtoa_r+0x706>
 802450a:	0019      	movs	r1, r3
 802450c:	9803      	ldr	r0, [sp, #12]
 802450e:	f000 ff27 	bl	8025360 <_Bfree>
 8024512:	0039      	movs	r1, r7
 8024514:	9803      	ldr	r0, [sp, #12]
 8024516:	f000 ff23 	bl	8025360 <_Bfree>
 802451a:	e7c9      	b.n	80244b0 <_dtoa_r+0x6a4>
 802451c:	0802bac0 	.word	0x0802bac0
 8024520:	0802ba98 	.word	0x0802ba98
 8024524:	3ff00000 	.word	0x3ff00000
 8024528:	40240000 	.word	0x40240000
 802452c:	401c0000 	.word	0x401c0000
 8024530:	fcc00000 	.word	0xfcc00000
 8024534:	40140000 	.word	0x40140000
 8024538:	3fe00000 	.word	0x3fe00000
 802453c:	9b04      	ldr	r3, [sp, #16]
 802453e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024540:	0023      	movs	r3, r4
 8024542:	001c      	movs	r4, r3
 8024544:	3b01      	subs	r3, #1
 8024546:	781a      	ldrb	r2, [r3, #0]
 8024548:	2a39      	cmp	r2, #57	@ 0x39
 802454a:	d108      	bne.n	802455e <_dtoa_r+0x752>
 802454c:	9a08      	ldr	r2, [sp, #32]
 802454e:	429a      	cmp	r2, r3
 8024550:	d1f7      	bne.n	8024542 <_dtoa_r+0x736>
 8024552:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024554:	9908      	ldr	r1, [sp, #32]
 8024556:	3201      	adds	r2, #1
 8024558:	920c      	str	r2, [sp, #48]	@ 0x30
 802455a:	2230      	movs	r2, #48	@ 0x30
 802455c:	700a      	strb	r2, [r1, #0]
 802455e:	781a      	ldrb	r2, [r3, #0]
 8024560:	3201      	adds	r2, #1
 8024562:	701a      	strb	r2, [r3, #0]
 8024564:	e7a4      	b.n	80244b0 <_dtoa_r+0x6a4>
 8024566:	2200      	movs	r2, #0
 8024568:	4bc6      	ldr	r3, [pc, #792]	@ (8024884 <_dtoa_r+0xa78>)
 802456a:	f7de f867 	bl	800263c <__aeabi_dmul>
 802456e:	2200      	movs	r2, #0
 8024570:	2300      	movs	r3, #0
 8024572:	0006      	movs	r6, r0
 8024574:	000f      	movs	r7, r1
 8024576:	f7db ff9b 	bl	80004b0 <__aeabi_dcmpeq>
 802457a:	2800      	cmp	r0, #0
 802457c:	d100      	bne.n	8024580 <_dtoa_r+0x774>
 802457e:	e6a1      	b.n	80242c4 <_dtoa_r+0x4b8>
 8024580:	e6d8      	b.n	8024334 <_dtoa_r+0x528>
 8024582:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8024584:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024586:	9c06      	ldr	r4, [sp, #24]
 8024588:	2f00      	cmp	r7, #0
 802458a:	d014      	beq.n	80245b6 <_dtoa_r+0x7aa>
 802458c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802458e:	2a01      	cmp	r2, #1
 8024590:	dd00      	ble.n	8024594 <_dtoa_r+0x788>
 8024592:	e0c8      	b.n	8024726 <_dtoa_r+0x91a>
 8024594:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024596:	2a00      	cmp	r2, #0
 8024598:	d100      	bne.n	802459c <_dtoa_r+0x790>
 802459a:	e0be      	b.n	802471a <_dtoa_r+0x90e>
 802459c:	4aba      	ldr	r2, [pc, #744]	@ (8024888 <_dtoa_r+0xa7c>)
 802459e:	189b      	adds	r3, r3, r2
 80245a0:	9a06      	ldr	r2, [sp, #24]
 80245a2:	2101      	movs	r1, #1
 80245a4:	18d2      	adds	r2, r2, r3
 80245a6:	9206      	str	r2, [sp, #24]
 80245a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80245aa:	9803      	ldr	r0, [sp, #12]
 80245ac:	18d3      	adds	r3, r2, r3
 80245ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80245b0:	f000 ffda 	bl	8025568 <__i2b>
 80245b4:	0007      	movs	r7, r0
 80245b6:	2c00      	cmp	r4, #0
 80245b8:	d00e      	beq.n	80245d8 <_dtoa_r+0x7cc>
 80245ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80245bc:	2b00      	cmp	r3, #0
 80245be:	dd0b      	ble.n	80245d8 <_dtoa_r+0x7cc>
 80245c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80245c2:	0023      	movs	r3, r4
 80245c4:	4294      	cmp	r4, r2
 80245c6:	dd00      	ble.n	80245ca <_dtoa_r+0x7be>
 80245c8:	0013      	movs	r3, r2
 80245ca:	9a06      	ldr	r2, [sp, #24]
 80245cc:	1ae4      	subs	r4, r4, r3
 80245ce:	1ad2      	subs	r2, r2, r3
 80245d0:	9206      	str	r2, [sp, #24]
 80245d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80245d4:	1ad3      	subs	r3, r2, r3
 80245d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80245d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d01f      	beq.n	802461e <_dtoa_r+0x812>
 80245de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80245e0:	2b00      	cmp	r3, #0
 80245e2:	d100      	bne.n	80245e6 <_dtoa_r+0x7da>
 80245e4:	e0b5      	b.n	8024752 <_dtoa_r+0x946>
 80245e6:	2d00      	cmp	r5, #0
 80245e8:	d010      	beq.n	802460c <_dtoa_r+0x800>
 80245ea:	0039      	movs	r1, r7
 80245ec:	002a      	movs	r2, r5
 80245ee:	9803      	ldr	r0, [sp, #12]
 80245f0:	f001 f884 	bl	80256fc <__pow5mult>
 80245f4:	9a05      	ldr	r2, [sp, #20]
 80245f6:	0001      	movs	r1, r0
 80245f8:	0007      	movs	r7, r0
 80245fa:	9803      	ldr	r0, [sp, #12]
 80245fc:	f000 ffcc 	bl	8025598 <__multiply>
 8024600:	0006      	movs	r6, r0
 8024602:	9905      	ldr	r1, [sp, #20]
 8024604:	9803      	ldr	r0, [sp, #12]
 8024606:	f000 feab 	bl	8025360 <_Bfree>
 802460a:	9605      	str	r6, [sp, #20]
 802460c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802460e:	1b5a      	subs	r2, r3, r5
 8024610:	42ab      	cmp	r3, r5
 8024612:	d004      	beq.n	802461e <_dtoa_r+0x812>
 8024614:	9905      	ldr	r1, [sp, #20]
 8024616:	9803      	ldr	r0, [sp, #12]
 8024618:	f001 f870 	bl	80256fc <__pow5mult>
 802461c:	9005      	str	r0, [sp, #20]
 802461e:	2101      	movs	r1, #1
 8024620:	9803      	ldr	r0, [sp, #12]
 8024622:	f000 ffa1 	bl	8025568 <__i2b>
 8024626:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024628:	0006      	movs	r6, r0
 802462a:	2b00      	cmp	r3, #0
 802462c:	d100      	bne.n	8024630 <_dtoa_r+0x824>
 802462e:	e1bc      	b.n	80249aa <_dtoa_r+0xb9e>
 8024630:	001a      	movs	r2, r3
 8024632:	0001      	movs	r1, r0
 8024634:	9803      	ldr	r0, [sp, #12]
 8024636:	f001 f861 	bl	80256fc <__pow5mult>
 802463a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802463c:	0006      	movs	r6, r0
 802463e:	2500      	movs	r5, #0
 8024640:	2b01      	cmp	r3, #1
 8024642:	dc16      	bgt.n	8024672 <_dtoa_r+0x866>
 8024644:	2500      	movs	r5, #0
 8024646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024648:	42ab      	cmp	r3, r5
 802464a:	d10e      	bne.n	802466a <_dtoa_r+0x85e>
 802464c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802464e:	031b      	lsls	r3, r3, #12
 8024650:	42ab      	cmp	r3, r5
 8024652:	d10a      	bne.n	802466a <_dtoa_r+0x85e>
 8024654:	4b8d      	ldr	r3, [pc, #564]	@ (802488c <_dtoa_r+0xa80>)
 8024656:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024658:	4213      	tst	r3, r2
 802465a:	d006      	beq.n	802466a <_dtoa_r+0x85e>
 802465c:	9b06      	ldr	r3, [sp, #24]
 802465e:	3501      	adds	r5, #1
 8024660:	3301      	adds	r3, #1
 8024662:	9306      	str	r3, [sp, #24]
 8024664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024666:	3301      	adds	r3, #1
 8024668:	930d      	str	r3, [sp, #52]	@ 0x34
 802466a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802466c:	2001      	movs	r0, #1
 802466e:	2b00      	cmp	r3, #0
 8024670:	d008      	beq.n	8024684 <_dtoa_r+0x878>
 8024672:	6933      	ldr	r3, [r6, #16]
 8024674:	3303      	adds	r3, #3
 8024676:	009b      	lsls	r3, r3, #2
 8024678:	18f3      	adds	r3, r6, r3
 802467a:	6858      	ldr	r0, [r3, #4]
 802467c:	f000 ff24 	bl	80254c8 <__hi0bits>
 8024680:	2320      	movs	r3, #32
 8024682:	1a18      	subs	r0, r3, r0
 8024684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024686:	1818      	adds	r0, r3, r0
 8024688:	0002      	movs	r2, r0
 802468a:	231f      	movs	r3, #31
 802468c:	401a      	ands	r2, r3
 802468e:	4218      	tst	r0, r3
 8024690:	d065      	beq.n	802475e <_dtoa_r+0x952>
 8024692:	3301      	adds	r3, #1
 8024694:	1a9b      	subs	r3, r3, r2
 8024696:	2b04      	cmp	r3, #4
 8024698:	dd5d      	ble.n	8024756 <_dtoa_r+0x94a>
 802469a:	231c      	movs	r3, #28
 802469c:	1a9b      	subs	r3, r3, r2
 802469e:	9a06      	ldr	r2, [sp, #24]
 80246a0:	18e4      	adds	r4, r4, r3
 80246a2:	18d2      	adds	r2, r2, r3
 80246a4:	9206      	str	r2, [sp, #24]
 80246a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80246a8:	18d3      	adds	r3, r2, r3
 80246aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80246ac:	9b06      	ldr	r3, [sp, #24]
 80246ae:	2b00      	cmp	r3, #0
 80246b0:	dd05      	ble.n	80246be <_dtoa_r+0x8b2>
 80246b2:	001a      	movs	r2, r3
 80246b4:	9905      	ldr	r1, [sp, #20]
 80246b6:	9803      	ldr	r0, [sp, #12]
 80246b8:	f001 f87c 	bl	80257b4 <__lshift>
 80246bc:	9005      	str	r0, [sp, #20]
 80246be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	dd05      	ble.n	80246d0 <_dtoa_r+0x8c4>
 80246c4:	0031      	movs	r1, r6
 80246c6:	001a      	movs	r2, r3
 80246c8:	9803      	ldr	r0, [sp, #12]
 80246ca:	f001 f873 	bl	80257b4 <__lshift>
 80246ce:	0006      	movs	r6, r0
 80246d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80246d2:	2b00      	cmp	r3, #0
 80246d4:	d045      	beq.n	8024762 <_dtoa_r+0x956>
 80246d6:	0031      	movs	r1, r6
 80246d8:	9805      	ldr	r0, [sp, #20]
 80246da:	f001 f8d7 	bl	802588c <__mcmp>
 80246de:	2800      	cmp	r0, #0
 80246e0:	da3f      	bge.n	8024762 <_dtoa_r+0x956>
 80246e2:	9b04      	ldr	r3, [sp, #16]
 80246e4:	220a      	movs	r2, #10
 80246e6:	3b01      	subs	r3, #1
 80246e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80246ea:	9905      	ldr	r1, [sp, #20]
 80246ec:	2300      	movs	r3, #0
 80246ee:	9803      	ldr	r0, [sp, #12]
 80246f0:	f000 fe5a 	bl	80253a8 <__multadd>
 80246f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80246f6:	9005      	str	r0, [sp, #20]
 80246f8:	2b00      	cmp	r3, #0
 80246fa:	d100      	bne.n	80246fe <_dtoa_r+0x8f2>
 80246fc:	e15c      	b.n	80249b8 <_dtoa_r+0xbac>
 80246fe:	2300      	movs	r3, #0
 8024700:	0039      	movs	r1, r7
 8024702:	220a      	movs	r2, #10
 8024704:	9803      	ldr	r0, [sp, #12]
 8024706:	f000 fe4f 	bl	80253a8 <__multadd>
 802470a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802470c:	0007      	movs	r7, r0
 802470e:	2b00      	cmp	r3, #0
 8024710:	dc55      	bgt.n	80247be <_dtoa_r+0x9b2>
 8024712:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024714:	2b02      	cmp	r3, #2
 8024716:	dc2d      	bgt.n	8024774 <_dtoa_r+0x968>
 8024718:	e051      	b.n	80247be <_dtoa_r+0x9b2>
 802471a:	2336      	movs	r3, #54	@ 0x36
 802471c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802471e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024720:	9c06      	ldr	r4, [sp, #24]
 8024722:	1a9b      	subs	r3, r3, r2
 8024724:	e73c      	b.n	80245a0 <_dtoa_r+0x794>
 8024726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024728:	1e5d      	subs	r5, r3, #1
 802472a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802472c:	42ab      	cmp	r3, r5
 802472e:	db08      	blt.n	8024742 <_dtoa_r+0x936>
 8024730:	1b5d      	subs	r5, r3, r5
 8024732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024734:	9c06      	ldr	r4, [sp, #24]
 8024736:	2b00      	cmp	r3, #0
 8024738:	db00      	blt.n	802473c <_dtoa_r+0x930>
 802473a:	e731      	b.n	80245a0 <_dtoa_r+0x794>
 802473c:	1ae4      	subs	r4, r4, r3
 802473e:	2300      	movs	r3, #0
 8024740:	e72e      	b.n	80245a0 <_dtoa_r+0x794>
 8024742:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024744:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024746:	1aeb      	subs	r3, r5, r3
 8024748:	18d3      	adds	r3, r2, r3
 802474a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802474c:	9314      	str	r3, [sp, #80]	@ 0x50
 802474e:	2500      	movs	r5, #0
 8024750:	e7ef      	b.n	8024732 <_dtoa_r+0x926>
 8024752:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024754:	e75e      	b.n	8024614 <_dtoa_r+0x808>
 8024756:	2b04      	cmp	r3, #4
 8024758:	d0a8      	beq.n	80246ac <_dtoa_r+0x8a0>
 802475a:	331c      	adds	r3, #28
 802475c:	e79f      	b.n	802469e <_dtoa_r+0x892>
 802475e:	0013      	movs	r3, r2
 8024760:	e7fb      	b.n	802475a <_dtoa_r+0x94e>
 8024762:	9b04      	ldr	r3, [sp, #16]
 8024764:	930c      	str	r3, [sp, #48]	@ 0x30
 8024766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024768:	930e      	str	r3, [sp, #56]	@ 0x38
 802476a:	2b00      	cmp	r3, #0
 802476c:	dc23      	bgt.n	80247b6 <_dtoa_r+0x9aa>
 802476e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024770:	2b02      	cmp	r3, #2
 8024772:	dd20      	ble.n	80247b6 <_dtoa_r+0x9aa>
 8024774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024776:	2b00      	cmp	r3, #0
 8024778:	d000      	beq.n	802477c <_dtoa_r+0x970>
 802477a:	e6b5      	b.n	80244e8 <_dtoa_r+0x6dc>
 802477c:	0031      	movs	r1, r6
 802477e:	2205      	movs	r2, #5
 8024780:	9803      	ldr	r0, [sp, #12]
 8024782:	f000 fe11 	bl	80253a8 <__multadd>
 8024786:	0006      	movs	r6, r0
 8024788:	0001      	movs	r1, r0
 802478a:	9805      	ldr	r0, [sp, #20]
 802478c:	f001 f87e 	bl	802588c <__mcmp>
 8024790:	2800      	cmp	r0, #0
 8024792:	dc00      	bgt.n	8024796 <_dtoa_r+0x98a>
 8024794:	e6a8      	b.n	80244e8 <_dtoa_r+0x6dc>
 8024796:	9b08      	ldr	r3, [sp, #32]
 8024798:	9a08      	ldr	r2, [sp, #32]
 802479a:	1c5c      	adds	r4, r3, #1
 802479c:	2331      	movs	r3, #49	@ 0x31
 802479e:	7013      	strb	r3, [r2, #0]
 80247a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80247a2:	3301      	adds	r3, #1
 80247a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80247a6:	e6a3      	b.n	80244f0 <_dtoa_r+0x6e4>
 80247a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80247aa:	0037      	movs	r7, r6
 80247ac:	e7f3      	b.n	8024796 <_dtoa_r+0x98a>
 80247ae:	9b04      	ldr	r3, [sp, #16]
 80247b0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80247b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80247b4:	e7f9      	b.n	80247aa <_dtoa_r+0x99e>
 80247b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80247b8:	2b00      	cmp	r3, #0
 80247ba:	d100      	bne.n	80247be <_dtoa_r+0x9b2>
 80247bc:	e100      	b.n	80249c0 <_dtoa_r+0xbb4>
 80247be:	2c00      	cmp	r4, #0
 80247c0:	dd05      	ble.n	80247ce <_dtoa_r+0x9c2>
 80247c2:	0039      	movs	r1, r7
 80247c4:	0022      	movs	r2, r4
 80247c6:	9803      	ldr	r0, [sp, #12]
 80247c8:	f000 fff4 	bl	80257b4 <__lshift>
 80247cc:	0007      	movs	r7, r0
 80247ce:	0038      	movs	r0, r7
 80247d0:	2d00      	cmp	r5, #0
 80247d2:	d018      	beq.n	8024806 <_dtoa_r+0x9fa>
 80247d4:	6879      	ldr	r1, [r7, #4]
 80247d6:	9803      	ldr	r0, [sp, #12]
 80247d8:	f000 fd7e 	bl	80252d8 <_Balloc>
 80247dc:	1e04      	subs	r4, r0, #0
 80247de:	d105      	bne.n	80247ec <_dtoa_r+0x9e0>
 80247e0:	0022      	movs	r2, r4
 80247e2:	4b2b      	ldr	r3, [pc, #172]	@ (8024890 <_dtoa_r+0xa84>)
 80247e4:	482b      	ldr	r0, [pc, #172]	@ (8024894 <_dtoa_r+0xa88>)
 80247e6:	492c      	ldr	r1, [pc, #176]	@ (8024898 <_dtoa_r+0xa8c>)
 80247e8:	f7ff fb25 	bl	8023e36 <_dtoa_r+0x2a>
 80247ec:	0039      	movs	r1, r7
 80247ee:	693a      	ldr	r2, [r7, #16]
 80247f0:	310c      	adds	r1, #12
 80247f2:	3202      	adds	r2, #2
 80247f4:	0092      	lsls	r2, r2, #2
 80247f6:	300c      	adds	r0, #12
 80247f8:	f7ff fa6a 	bl	8023cd0 <memcpy>
 80247fc:	2201      	movs	r2, #1
 80247fe:	0021      	movs	r1, r4
 8024800:	9803      	ldr	r0, [sp, #12]
 8024802:	f000 ffd7 	bl	80257b4 <__lshift>
 8024806:	9b08      	ldr	r3, [sp, #32]
 8024808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802480a:	9306      	str	r3, [sp, #24]
 802480c:	3b01      	subs	r3, #1
 802480e:	189b      	adds	r3, r3, r2
 8024810:	2201      	movs	r2, #1
 8024812:	9704      	str	r7, [sp, #16]
 8024814:	0007      	movs	r7, r0
 8024816:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802481a:	4013      	ands	r3, r2
 802481c:	930e      	str	r3, [sp, #56]	@ 0x38
 802481e:	0031      	movs	r1, r6
 8024820:	9805      	ldr	r0, [sp, #20]
 8024822:	f7ff fa65 	bl	8023cf0 <quorem>
 8024826:	9904      	ldr	r1, [sp, #16]
 8024828:	0005      	movs	r5, r0
 802482a:	900a      	str	r0, [sp, #40]	@ 0x28
 802482c:	9805      	ldr	r0, [sp, #20]
 802482e:	f001 f82d 	bl	802588c <__mcmp>
 8024832:	003a      	movs	r2, r7
 8024834:	900d      	str	r0, [sp, #52]	@ 0x34
 8024836:	0031      	movs	r1, r6
 8024838:	9803      	ldr	r0, [sp, #12]
 802483a:	f001 f843 	bl	80258c4 <__mdiff>
 802483e:	2201      	movs	r2, #1
 8024840:	68c3      	ldr	r3, [r0, #12]
 8024842:	0004      	movs	r4, r0
 8024844:	3530      	adds	r5, #48	@ 0x30
 8024846:	9209      	str	r2, [sp, #36]	@ 0x24
 8024848:	2b00      	cmp	r3, #0
 802484a:	d104      	bne.n	8024856 <_dtoa_r+0xa4a>
 802484c:	0001      	movs	r1, r0
 802484e:	9805      	ldr	r0, [sp, #20]
 8024850:	f001 f81c 	bl	802588c <__mcmp>
 8024854:	9009      	str	r0, [sp, #36]	@ 0x24
 8024856:	0021      	movs	r1, r4
 8024858:	9803      	ldr	r0, [sp, #12]
 802485a:	f000 fd81 	bl	8025360 <_Bfree>
 802485e:	9b06      	ldr	r3, [sp, #24]
 8024860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024862:	1c5c      	adds	r4, r3, #1
 8024864:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024866:	4313      	orrs	r3, r2
 8024868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802486a:	4313      	orrs	r3, r2
 802486c:	d116      	bne.n	802489c <_dtoa_r+0xa90>
 802486e:	2d39      	cmp	r5, #57	@ 0x39
 8024870:	d02f      	beq.n	80248d2 <_dtoa_r+0xac6>
 8024872:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024874:	2b00      	cmp	r3, #0
 8024876:	dd01      	ble.n	802487c <_dtoa_r+0xa70>
 8024878:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802487a:	3531      	adds	r5, #49	@ 0x31
 802487c:	9b06      	ldr	r3, [sp, #24]
 802487e:	701d      	strb	r5, [r3, #0]
 8024880:	e638      	b.n	80244f4 <_dtoa_r+0x6e8>
 8024882:	46c0      	nop			@ (mov r8, r8)
 8024884:	40240000 	.word	0x40240000
 8024888:	00000433 	.word	0x00000433
 802488c:	7ff00000 	.word	0x7ff00000
 8024890:	0802b9c1 	.word	0x0802b9c1
 8024894:	0802b969 	.word	0x0802b969
 8024898:	000002ef 	.word	0x000002ef
 802489c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802489e:	2b00      	cmp	r3, #0
 80248a0:	db04      	blt.n	80248ac <_dtoa_r+0xaa0>
 80248a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80248a4:	4313      	orrs	r3, r2
 80248a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80248a8:	4313      	orrs	r3, r2
 80248aa:	d11e      	bne.n	80248ea <_dtoa_r+0xade>
 80248ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248ae:	2b00      	cmp	r3, #0
 80248b0:	dde4      	ble.n	802487c <_dtoa_r+0xa70>
 80248b2:	9905      	ldr	r1, [sp, #20]
 80248b4:	2201      	movs	r2, #1
 80248b6:	9803      	ldr	r0, [sp, #12]
 80248b8:	f000 ff7c 	bl	80257b4 <__lshift>
 80248bc:	0031      	movs	r1, r6
 80248be:	9005      	str	r0, [sp, #20]
 80248c0:	f000 ffe4 	bl	802588c <__mcmp>
 80248c4:	2800      	cmp	r0, #0
 80248c6:	dc02      	bgt.n	80248ce <_dtoa_r+0xac2>
 80248c8:	d1d8      	bne.n	802487c <_dtoa_r+0xa70>
 80248ca:	07eb      	lsls	r3, r5, #31
 80248cc:	d5d6      	bpl.n	802487c <_dtoa_r+0xa70>
 80248ce:	2d39      	cmp	r5, #57	@ 0x39
 80248d0:	d1d2      	bne.n	8024878 <_dtoa_r+0xa6c>
 80248d2:	2339      	movs	r3, #57	@ 0x39
 80248d4:	9a06      	ldr	r2, [sp, #24]
 80248d6:	7013      	strb	r3, [r2, #0]
 80248d8:	0023      	movs	r3, r4
 80248da:	001c      	movs	r4, r3
 80248dc:	3b01      	subs	r3, #1
 80248de:	781a      	ldrb	r2, [r3, #0]
 80248e0:	2a39      	cmp	r2, #57	@ 0x39
 80248e2:	d04f      	beq.n	8024984 <_dtoa_r+0xb78>
 80248e4:	3201      	adds	r2, #1
 80248e6:	701a      	strb	r2, [r3, #0]
 80248e8:	e604      	b.n	80244f4 <_dtoa_r+0x6e8>
 80248ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248ec:	2b00      	cmp	r3, #0
 80248ee:	dd03      	ble.n	80248f8 <_dtoa_r+0xaec>
 80248f0:	2d39      	cmp	r5, #57	@ 0x39
 80248f2:	d0ee      	beq.n	80248d2 <_dtoa_r+0xac6>
 80248f4:	3501      	adds	r5, #1
 80248f6:	e7c1      	b.n	802487c <_dtoa_r+0xa70>
 80248f8:	9b06      	ldr	r3, [sp, #24]
 80248fa:	9a06      	ldr	r2, [sp, #24]
 80248fc:	701d      	strb	r5, [r3, #0]
 80248fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024900:	4293      	cmp	r3, r2
 8024902:	d02a      	beq.n	802495a <_dtoa_r+0xb4e>
 8024904:	2300      	movs	r3, #0
 8024906:	220a      	movs	r2, #10
 8024908:	9905      	ldr	r1, [sp, #20]
 802490a:	9803      	ldr	r0, [sp, #12]
 802490c:	f000 fd4c 	bl	80253a8 <__multadd>
 8024910:	9b04      	ldr	r3, [sp, #16]
 8024912:	9005      	str	r0, [sp, #20]
 8024914:	42bb      	cmp	r3, r7
 8024916:	d109      	bne.n	802492c <_dtoa_r+0xb20>
 8024918:	2300      	movs	r3, #0
 802491a:	220a      	movs	r2, #10
 802491c:	9904      	ldr	r1, [sp, #16]
 802491e:	9803      	ldr	r0, [sp, #12]
 8024920:	f000 fd42 	bl	80253a8 <__multadd>
 8024924:	9004      	str	r0, [sp, #16]
 8024926:	0007      	movs	r7, r0
 8024928:	9406      	str	r4, [sp, #24]
 802492a:	e778      	b.n	802481e <_dtoa_r+0xa12>
 802492c:	9904      	ldr	r1, [sp, #16]
 802492e:	2300      	movs	r3, #0
 8024930:	220a      	movs	r2, #10
 8024932:	9803      	ldr	r0, [sp, #12]
 8024934:	f000 fd38 	bl	80253a8 <__multadd>
 8024938:	2300      	movs	r3, #0
 802493a:	9004      	str	r0, [sp, #16]
 802493c:	220a      	movs	r2, #10
 802493e:	0039      	movs	r1, r7
 8024940:	9803      	ldr	r0, [sp, #12]
 8024942:	f000 fd31 	bl	80253a8 <__multadd>
 8024946:	e7ee      	b.n	8024926 <_dtoa_r+0xb1a>
 8024948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802494a:	2401      	movs	r4, #1
 802494c:	2b00      	cmp	r3, #0
 802494e:	dd00      	ble.n	8024952 <_dtoa_r+0xb46>
 8024950:	001c      	movs	r4, r3
 8024952:	9b08      	ldr	r3, [sp, #32]
 8024954:	191c      	adds	r4, r3, r4
 8024956:	2300      	movs	r3, #0
 8024958:	9304      	str	r3, [sp, #16]
 802495a:	9905      	ldr	r1, [sp, #20]
 802495c:	2201      	movs	r2, #1
 802495e:	9803      	ldr	r0, [sp, #12]
 8024960:	f000 ff28 	bl	80257b4 <__lshift>
 8024964:	0031      	movs	r1, r6
 8024966:	9005      	str	r0, [sp, #20]
 8024968:	f000 ff90 	bl	802588c <__mcmp>
 802496c:	2800      	cmp	r0, #0
 802496e:	dcb3      	bgt.n	80248d8 <_dtoa_r+0xacc>
 8024970:	d101      	bne.n	8024976 <_dtoa_r+0xb6a>
 8024972:	07ed      	lsls	r5, r5, #31
 8024974:	d4b0      	bmi.n	80248d8 <_dtoa_r+0xacc>
 8024976:	0023      	movs	r3, r4
 8024978:	001c      	movs	r4, r3
 802497a:	3b01      	subs	r3, #1
 802497c:	781a      	ldrb	r2, [r3, #0]
 802497e:	2a30      	cmp	r2, #48	@ 0x30
 8024980:	d0fa      	beq.n	8024978 <_dtoa_r+0xb6c>
 8024982:	e5b7      	b.n	80244f4 <_dtoa_r+0x6e8>
 8024984:	9a08      	ldr	r2, [sp, #32]
 8024986:	429a      	cmp	r2, r3
 8024988:	d1a7      	bne.n	80248da <_dtoa_r+0xace>
 802498a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802498c:	3301      	adds	r3, #1
 802498e:	930c      	str	r3, [sp, #48]	@ 0x30
 8024990:	2331      	movs	r3, #49	@ 0x31
 8024992:	7013      	strb	r3, [r2, #0]
 8024994:	e5ae      	b.n	80244f4 <_dtoa_r+0x6e8>
 8024996:	4b15      	ldr	r3, [pc, #84]	@ (80249ec <_dtoa_r+0xbe0>)
 8024998:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802499a:	9308      	str	r3, [sp, #32]
 802499c:	4b14      	ldr	r3, [pc, #80]	@ (80249f0 <_dtoa_r+0xbe4>)
 802499e:	2a00      	cmp	r2, #0
 80249a0:	d001      	beq.n	80249a6 <_dtoa_r+0xb9a>
 80249a2:	f7ff fa7b 	bl	8023e9c <_dtoa_r+0x90>
 80249a6:	f7ff fa7b 	bl	8023ea0 <_dtoa_r+0x94>
 80249aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80249ac:	2b01      	cmp	r3, #1
 80249ae:	dc00      	bgt.n	80249b2 <_dtoa_r+0xba6>
 80249b0:	e648      	b.n	8024644 <_dtoa_r+0x838>
 80249b2:	2001      	movs	r0, #1
 80249b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80249b6:	e665      	b.n	8024684 <_dtoa_r+0x878>
 80249b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249ba:	2b00      	cmp	r3, #0
 80249bc:	dc00      	bgt.n	80249c0 <_dtoa_r+0xbb4>
 80249be:	e6d6      	b.n	802476e <_dtoa_r+0x962>
 80249c0:	2400      	movs	r4, #0
 80249c2:	0031      	movs	r1, r6
 80249c4:	9805      	ldr	r0, [sp, #20]
 80249c6:	f7ff f993 	bl	8023cf0 <quorem>
 80249ca:	9b08      	ldr	r3, [sp, #32]
 80249cc:	3030      	adds	r0, #48	@ 0x30
 80249ce:	5518      	strb	r0, [r3, r4]
 80249d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249d2:	3401      	adds	r4, #1
 80249d4:	0005      	movs	r5, r0
 80249d6:	429c      	cmp	r4, r3
 80249d8:	dab6      	bge.n	8024948 <_dtoa_r+0xb3c>
 80249da:	2300      	movs	r3, #0
 80249dc:	220a      	movs	r2, #10
 80249de:	9905      	ldr	r1, [sp, #20]
 80249e0:	9803      	ldr	r0, [sp, #12]
 80249e2:	f000 fce1 	bl	80253a8 <__multadd>
 80249e6:	9005      	str	r0, [sp, #20]
 80249e8:	e7eb      	b.n	80249c2 <_dtoa_r+0xbb6>
 80249ea:	46c0      	nop			@ (mov r8, r8)
 80249ec:	0802b945 	.word	0x0802b945
 80249f0:	0802b94d 	.word	0x0802b94d

080249f4 <_free_r>:
 80249f4:	b570      	push	{r4, r5, r6, lr}
 80249f6:	0005      	movs	r5, r0
 80249f8:	1e0c      	subs	r4, r1, #0
 80249fa:	d010      	beq.n	8024a1e <_free_r+0x2a>
 80249fc:	3c04      	subs	r4, #4
 80249fe:	6823      	ldr	r3, [r4, #0]
 8024a00:	2b00      	cmp	r3, #0
 8024a02:	da00      	bge.n	8024a06 <_free_r+0x12>
 8024a04:	18e4      	adds	r4, r4, r3
 8024a06:	0028      	movs	r0, r5
 8024a08:	f000 fc56 	bl	80252b8 <__malloc_lock>
 8024a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8024a84 <_free_r+0x90>)
 8024a0e:	6813      	ldr	r3, [r2, #0]
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	d105      	bne.n	8024a20 <_free_r+0x2c>
 8024a14:	6063      	str	r3, [r4, #4]
 8024a16:	6014      	str	r4, [r2, #0]
 8024a18:	0028      	movs	r0, r5
 8024a1a:	f000 fc55 	bl	80252c8 <__malloc_unlock>
 8024a1e:	bd70      	pop	{r4, r5, r6, pc}
 8024a20:	42a3      	cmp	r3, r4
 8024a22:	d908      	bls.n	8024a36 <_free_r+0x42>
 8024a24:	6820      	ldr	r0, [r4, #0]
 8024a26:	1821      	adds	r1, r4, r0
 8024a28:	428b      	cmp	r3, r1
 8024a2a:	d1f3      	bne.n	8024a14 <_free_r+0x20>
 8024a2c:	6819      	ldr	r1, [r3, #0]
 8024a2e:	685b      	ldr	r3, [r3, #4]
 8024a30:	1809      	adds	r1, r1, r0
 8024a32:	6021      	str	r1, [r4, #0]
 8024a34:	e7ee      	b.n	8024a14 <_free_r+0x20>
 8024a36:	001a      	movs	r2, r3
 8024a38:	685b      	ldr	r3, [r3, #4]
 8024a3a:	2b00      	cmp	r3, #0
 8024a3c:	d001      	beq.n	8024a42 <_free_r+0x4e>
 8024a3e:	42a3      	cmp	r3, r4
 8024a40:	d9f9      	bls.n	8024a36 <_free_r+0x42>
 8024a42:	6811      	ldr	r1, [r2, #0]
 8024a44:	1850      	adds	r0, r2, r1
 8024a46:	42a0      	cmp	r0, r4
 8024a48:	d10b      	bne.n	8024a62 <_free_r+0x6e>
 8024a4a:	6820      	ldr	r0, [r4, #0]
 8024a4c:	1809      	adds	r1, r1, r0
 8024a4e:	1850      	adds	r0, r2, r1
 8024a50:	6011      	str	r1, [r2, #0]
 8024a52:	4283      	cmp	r3, r0
 8024a54:	d1e0      	bne.n	8024a18 <_free_r+0x24>
 8024a56:	6818      	ldr	r0, [r3, #0]
 8024a58:	685b      	ldr	r3, [r3, #4]
 8024a5a:	1841      	adds	r1, r0, r1
 8024a5c:	6011      	str	r1, [r2, #0]
 8024a5e:	6053      	str	r3, [r2, #4]
 8024a60:	e7da      	b.n	8024a18 <_free_r+0x24>
 8024a62:	42a0      	cmp	r0, r4
 8024a64:	d902      	bls.n	8024a6c <_free_r+0x78>
 8024a66:	230c      	movs	r3, #12
 8024a68:	602b      	str	r3, [r5, #0]
 8024a6a:	e7d5      	b.n	8024a18 <_free_r+0x24>
 8024a6c:	6820      	ldr	r0, [r4, #0]
 8024a6e:	1821      	adds	r1, r4, r0
 8024a70:	428b      	cmp	r3, r1
 8024a72:	d103      	bne.n	8024a7c <_free_r+0x88>
 8024a74:	6819      	ldr	r1, [r3, #0]
 8024a76:	685b      	ldr	r3, [r3, #4]
 8024a78:	1809      	adds	r1, r1, r0
 8024a7a:	6021      	str	r1, [r4, #0]
 8024a7c:	6063      	str	r3, [r4, #4]
 8024a7e:	6054      	str	r4, [r2, #4]
 8024a80:	e7ca      	b.n	8024a18 <_free_r+0x24>
 8024a82:	46c0      	nop			@ (mov r8, r8)
 8024a84:	200035ec 	.word	0x200035ec

08024a88 <rshift>:
 8024a88:	0002      	movs	r2, r0
 8024a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a8c:	6904      	ldr	r4, [r0, #16]
 8024a8e:	b085      	sub	sp, #20
 8024a90:	3214      	adds	r2, #20
 8024a92:	114b      	asrs	r3, r1, #5
 8024a94:	0016      	movs	r6, r2
 8024a96:	9302      	str	r3, [sp, #8]
 8024a98:	429c      	cmp	r4, r3
 8024a9a:	dd31      	ble.n	8024b00 <rshift+0x78>
 8024a9c:	261f      	movs	r6, #31
 8024a9e:	000f      	movs	r7, r1
 8024aa0:	009b      	lsls	r3, r3, #2
 8024aa2:	00a5      	lsls	r5, r4, #2
 8024aa4:	18d3      	adds	r3, r2, r3
 8024aa6:	4037      	ands	r7, r6
 8024aa8:	1955      	adds	r5, r2, r5
 8024aaa:	9300      	str	r3, [sp, #0]
 8024aac:	9701      	str	r7, [sp, #4]
 8024aae:	4231      	tst	r1, r6
 8024ab0:	d10d      	bne.n	8024ace <rshift+0x46>
 8024ab2:	0016      	movs	r6, r2
 8024ab4:	0019      	movs	r1, r3
 8024ab6:	428d      	cmp	r5, r1
 8024ab8:	d836      	bhi.n	8024b28 <rshift+0xa0>
 8024aba:	9b00      	ldr	r3, [sp, #0]
 8024abc:	2600      	movs	r6, #0
 8024abe:	3b03      	subs	r3, #3
 8024ac0:	429d      	cmp	r5, r3
 8024ac2:	d302      	bcc.n	8024aca <rshift+0x42>
 8024ac4:	9b02      	ldr	r3, [sp, #8]
 8024ac6:	1ae4      	subs	r4, r4, r3
 8024ac8:	00a6      	lsls	r6, r4, #2
 8024aca:	1996      	adds	r6, r2, r6
 8024acc:	e018      	b.n	8024b00 <rshift+0x78>
 8024ace:	2120      	movs	r1, #32
 8024ad0:	9e01      	ldr	r6, [sp, #4]
 8024ad2:	9f01      	ldr	r7, [sp, #4]
 8024ad4:	1b89      	subs	r1, r1, r6
 8024ad6:	9e00      	ldr	r6, [sp, #0]
 8024ad8:	9103      	str	r1, [sp, #12]
 8024ada:	ce02      	ldmia	r6!, {r1}
 8024adc:	4694      	mov	ip, r2
 8024ade:	40f9      	lsrs	r1, r7
 8024ae0:	42b5      	cmp	r5, r6
 8024ae2:	d816      	bhi.n	8024b12 <rshift+0x8a>
 8024ae4:	9b00      	ldr	r3, [sp, #0]
 8024ae6:	2600      	movs	r6, #0
 8024ae8:	3301      	adds	r3, #1
 8024aea:	429d      	cmp	r5, r3
 8024aec:	d303      	bcc.n	8024af6 <rshift+0x6e>
 8024aee:	9b02      	ldr	r3, [sp, #8]
 8024af0:	1ae4      	subs	r4, r4, r3
 8024af2:	00a6      	lsls	r6, r4, #2
 8024af4:	3e04      	subs	r6, #4
 8024af6:	1996      	adds	r6, r2, r6
 8024af8:	6031      	str	r1, [r6, #0]
 8024afa:	2900      	cmp	r1, #0
 8024afc:	d000      	beq.n	8024b00 <rshift+0x78>
 8024afe:	3604      	adds	r6, #4
 8024b00:	1ab1      	subs	r1, r6, r2
 8024b02:	1089      	asrs	r1, r1, #2
 8024b04:	6101      	str	r1, [r0, #16]
 8024b06:	4296      	cmp	r6, r2
 8024b08:	d101      	bne.n	8024b0e <rshift+0x86>
 8024b0a:	2300      	movs	r3, #0
 8024b0c:	6143      	str	r3, [r0, #20]
 8024b0e:	b005      	add	sp, #20
 8024b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b12:	6837      	ldr	r7, [r6, #0]
 8024b14:	9b03      	ldr	r3, [sp, #12]
 8024b16:	409f      	lsls	r7, r3
 8024b18:	430f      	orrs	r7, r1
 8024b1a:	4661      	mov	r1, ip
 8024b1c:	c180      	stmia	r1!, {r7}
 8024b1e:	468c      	mov	ip, r1
 8024b20:	9b01      	ldr	r3, [sp, #4]
 8024b22:	ce02      	ldmia	r6!, {r1}
 8024b24:	40d9      	lsrs	r1, r3
 8024b26:	e7db      	b.n	8024ae0 <rshift+0x58>
 8024b28:	c980      	ldmia	r1!, {r7}
 8024b2a:	c680      	stmia	r6!, {r7}
 8024b2c:	e7c3      	b.n	8024ab6 <rshift+0x2e>

08024b2e <__hexdig_fun>:
 8024b2e:	0002      	movs	r2, r0
 8024b30:	3a30      	subs	r2, #48	@ 0x30
 8024b32:	0003      	movs	r3, r0
 8024b34:	2a09      	cmp	r2, #9
 8024b36:	d802      	bhi.n	8024b3e <__hexdig_fun+0x10>
 8024b38:	3b20      	subs	r3, #32
 8024b3a:	b2d8      	uxtb	r0, r3
 8024b3c:	4770      	bx	lr
 8024b3e:	0002      	movs	r2, r0
 8024b40:	3a61      	subs	r2, #97	@ 0x61
 8024b42:	2a05      	cmp	r2, #5
 8024b44:	d801      	bhi.n	8024b4a <__hexdig_fun+0x1c>
 8024b46:	3b47      	subs	r3, #71	@ 0x47
 8024b48:	e7f7      	b.n	8024b3a <__hexdig_fun+0xc>
 8024b4a:	001a      	movs	r2, r3
 8024b4c:	3a41      	subs	r2, #65	@ 0x41
 8024b4e:	2000      	movs	r0, #0
 8024b50:	2a05      	cmp	r2, #5
 8024b52:	d8f3      	bhi.n	8024b3c <__hexdig_fun+0xe>
 8024b54:	3b27      	subs	r3, #39	@ 0x27
 8024b56:	e7f0      	b.n	8024b3a <__hexdig_fun+0xc>

08024b58 <__gethex>:
 8024b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b5a:	b089      	sub	sp, #36	@ 0x24
 8024b5c:	9307      	str	r3, [sp, #28]
 8024b5e:	680b      	ldr	r3, [r1, #0]
 8024b60:	9201      	str	r2, [sp, #4]
 8024b62:	9003      	str	r0, [sp, #12]
 8024b64:	9106      	str	r1, [sp, #24]
 8024b66:	1c9a      	adds	r2, r3, #2
 8024b68:	0011      	movs	r1, r2
 8024b6a:	3201      	adds	r2, #1
 8024b6c:	1e50      	subs	r0, r2, #1
 8024b6e:	7800      	ldrb	r0, [r0, #0]
 8024b70:	2830      	cmp	r0, #48	@ 0x30
 8024b72:	d0f9      	beq.n	8024b68 <__gethex+0x10>
 8024b74:	1acb      	subs	r3, r1, r3
 8024b76:	3b02      	subs	r3, #2
 8024b78:	9305      	str	r3, [sp, #20]
 8024b7a:	9100      	str	r1, [sp, #0]
 8024b7c:	f7ff ffd7 	bl	8024b2e <__hexdig_fun>
 8024b80:	2300      	movs	r3, #0
 8024b82:	001d      	movs	r5, r3
 8024b84:	9302      	str	r3, [sp, #8]
 8024b86:	4298      	cmp	r0, r3
 8024b88:	d11e      	bne.n	8024bc8 <__gethex+0x70>
 8024b8a:	2201      	movs	r2, #1
 8024b8c:	49a6      	ldr	r1, [pc, #664]	@ (8024e28 <__gethex+0x2d0>)
 8024b8e:	9800      	ldr	r0, [sp, #0]
 8024b90:	f7fe ffd8 	bl	8023b44 <strncmp>
 8024b94:	0007      	movs	r7, r0
 8024b96:	42a8      	cmp	r0, r5
 8024b98:	d000      	beq.n	8024b9c <__gethex+0x44>
 8024b9a:	e06a      	b.n	8024c72 <__gethex+0x11a>
 8024b9c:	9b00      	ldr	r3, [sp, #0]
 8024b9e:	7858      	ldrb	r0, [r3, #1]
 8024ba0:	1c5c      	adds	r4, r3, #1
 8024ba2:	f7ff ffc4 	bl	8024b2e <__hexdig_fun>
 8024ba6:	2301      	movs	r3, #1
 8024ba8:	9302      	str	r3, [sp, #8]
 8024baa:	42a8      	cmp	r0, r5
 8024bac:	d02f      	beq.n	8024c0e <__gethex+0xb6>
 8024bae:	9400      	str	r4, [sp, #0]
 8024bb0:	9b00      	ldr	r3, [sp, #0]
 8024bb2:	7818      	ldrb	r0, [r3, #0]
 8024bb4:	2830      	cmp	r0, #48	@ 0x30
 8024bb6:	d009      	beq.n	8024bcc <__gethex+0x74>
 8024bb8:	f7ff ffb9 	bl	8024b2e <__hexdig_fun>
 8024bbc:	4242      	negs	r2, r0
 8024bbe:	4142      	adcs	r2, r0
 8024bc0:	2301      	movs	r3, #1
 8024bc2:	0025      	movs	r5, r4
 8024bc4:	9202      	str	r2, [sp, #8]
 8024bc6:	9305      	str	r3, [sp, #20]
 8024bc8:	9c00      	ldr	r4, [sp, #0]
 8024bca:	e004      	b.n	8024bd6 <__gethex+0x7e>
 8024bcc:	9b00      	ldr	r3, [sp, #0]
 8024bce:	3301      	adds	r3, #1
 8024bd0:	9300      	str	r3, [sp, #0]
 8024bd2:	e7ed      	b.n	8024bb0 <__gethex+0x58>
 8024bd4:	3401      	adds	r4, #1
 8024bd6:	7820      	ldrb	r0, [r4, #0]
 8024bd8:	f7ff ffa9 	bl	8024b2e <__hexdig_fun>
 8024bdc:	1e07      	subs	r7, r0, #0
 8024bde:	d1f9      	bne.n	8024bd4 <__gethex+0x7c>
 8024be0:	2201      	movs	r2, #1
 8024be2:	0020      	movs	r0, r4
 8024be4:	4990      	ldr	r1, [pc, #576]	@ (8024e28 <__gethex+0x2d0>)
 8024be6:	f7fe ffad 	bl	8023b44 <strncmp>
 8024bea:	2800      	cmp	r0, #0
 8024bec:	d10d      	bne.n	8024c0a <__gethex+0xb2>
 8024bee:	2d00      	cmp	r5, #0
 8024bf0:	d106      	bne.n	8024c00 <__gethex+0xa8>
 8024bf2:	3401      	adds	r4, #1
 8024bf4:	0025      	movs	r5, r4
 8024bf6:	7820      	ldrb	r0, [r4, #0]
 8024bf8:	f7ff ff99 	bl	8024b2e <__hexdig_fun>
 8024bfc:	2800      	cmp	r0, #0
 8024bfe:	d102      	bne.n	8024c06 <__gethex+0xae>
 8024c00:	1b2d      	subs	r5, r5, r4
 8024c02:	00af      	lsls	r7, r5, #2
 8024c04:	e003      	b.n	8024c0e <__gethex+0xb6>
 8024c06:	3401      	adds	r4, #1
 8024c08:	e7f5      	b.n	8024bf6 <__gethex+0x9e>
 8024c0a:	2d00      	cmp	r5, #0
 8024c0c:	d1f8      	bne.n	8024c00 <__gethex+0xa8>
 8024c0e:	2220      	movs	r2, #32
 8024c10:	7823      	ldrb	r3, [r4, #0]
 8024c12:	0026      	movs	r6, r4
 8024c14:	4393      	bics	r3, r2
 8024c16:	2b50      	cmp	r3, #80	@ 0x50
 8024c18:	d11d      	bne.n	8024c56 <__gethex+0xfe>
 8024c1a:	7863      	ldrb	r3, [r4, #1]
 8024c1c:	2b2b      	cmp	r3, #43	@ 0x2b
 8024c1e:	d02d      	beq.n	8024c7c <__gethex+0x124>
 8024c20:	2b2d      	cmp	r3, #45	@ 0x2d
 8024c22:	d02f      	beq.n	8024c84 <__gethex+0x12c>
 8024c24:	2300      	movs	r3, #0
 8024c26:	1c66      	adds	r6, r4, #1
 8024c28:	9304      	str	r3, [sp, #16]
 8024c2a:	7830      	ldrb	r0, [r6, #0]
 8024c2c:	f7ff ff7f 	bl	8024b2e <__hexdig_fun>
 8024c30:	1e43      	subs	r3, r0, #1
 8024c32:	b2db      	uxtb	r3, r3
 8024c34:	0005      	movs	r5, r0
 8024c36:	2b18      	cmp	r3, #24
 8024c38:	d82a      	bhi.n	8024c90 <__gethex+0x138>
 8024c3a:	7870      	ldrb	r0, [r6, #1]
 8024c3c:	f7ff ff77 	bl	8024b2e <__hexdig_fun>
 8024c40:	1e43      	subs	r3, r0, #1
 8024c42:	b2db      	uxtb	r3, r3
 8024c44:	3601      	adds	r6, #1
 8024c46:	3d10      	subs	r5, #16
 8024c48:	2b18      	cmp	r3, #24
 8024c4a:	d91d      	bls.n	8024c88 <__gethex+0x130>
 8024c4c:	9b04      	ldr	r3, [sp, #16]
 8024c4e:	2b00      	cmp	r3, #0
 8024c50:	d000      	beq.n	8024c54 <__gethex+0xfc>
 8024c52:	426d      	negs	r5, r5
 8024c54:	197f      	adds	r7, r7, r5
 8024c56:	9b06      	ldr	r3, [sp, #24]
 8024c58:	601e      	str	r6, [r3, #0]
 8024c5a:	9b02      	ldr	r3, [sp, #8]
 8024c5c:	2b00      	cmp	r3, #0
 8024c5e:	d019      	beq.n	8024c94 <__gethex+0x13c>
 8024c60:	9b05      	ldr	r3, [sp, #20]
 8024c62:	2606      	movs	r6, #6
 8024c64:	425a      	negs	r2, r3
 8024c66:	4153      	adcs	r3, r2
 8024c68:	425b      	negs	r3, r3
 8024c6a:	401e      	ands	r6, r3
 8024c6c:	0030      	movs	r0, r6
 8024c6e:	b009      	add	sp, #36	@ 0x24
 8024c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c72:	2301      	movs	r3, #1
 8024c74:	2700      	movs	r7, #0
 8024c76:	9c00      	ldr	r4, [sp, #0]
 8024c78:	9302      	str	r3, [sp, #8]
 8024c7a:	e7c8      	b.n	8024c0e <__gethex+0xb6>
 8024c7c:	2300      	movs	r3, #0
 8024c7e:	9304      	str	r3, [sp, #16]
 8024c80:	1ca6      	adds	r6, r4, #2
 8024c82:	e7d2      	b.n	8024c2a <__gethex+0xd2>
 8024c84:	2301      	movs	r3, #1
 8024c86:	e7fa      	b.n	8024c7e <__gethex+0x126>
 8024c88:	230a      	movs	r3, #10
 8024c8a:	435d      	muls	r5, r3
 8024c8c:	182d      	adds	r5, r5, r0
 8024c8e:	e7d4      	b.n	8024c3a <__gethex+0xe2>
 8024c90:	0026      	movs	r6, r4
 8024c92:	e7e0      	b.n	8024c56 <__gethex+0xfe>
 8024c94:	9b00      	ldr	r3, [sp, #0]
 8024c96:	9902      	ldr	r1, [sp, #8]
 8024c98:	1ae3      	subs	r3, r4, r3
 8024c9a:	3b01      	subs	r3, #1
 8024c9c:	2b07      	cmp	r3, #7
 8024c9e:	dc0a      	bgt.n	8024cb6 <__gethex+0x15e>
 8024ca0:	9803      	ldr	r0, [sp, #12]
 8024ca2:	f000 fb19 	bl	80252d8 <_Balloc>
 8024ca6:	1e05      	subs	r5, r0, #0
 8024ca8:	d108      	bne.n	8024cbc <__gethex+0x164>
 8024caa:	002a      	movs	r2, r5
 8024cac:	21e4      	movs	r1, #228	@ 0xe4
 8024cae:	4b5f      	ldr	r3, [pc, #380]	@ (8024e2c <__gethex+0x2d4>)
 8024cb0:	485f      	ldr	r0, [pc, #380]	@ (8024e30 <__gethex+0x2d8>)
 8024cb2:	f001 fbf1 	bl	8026498 <__assert_func>
 8024cb6:	3101      	adds	r1, #1
 8024cb8:	105b      	asrs	r3, r3, #1
 8024cba:	e7ef      	b.n	8024c9c <__gethex+0x144>
 8024cbc:	0003      	movs	r3, r0
 8024cbe:	3314      	adds	r3, #20
 8024cc0:	9302      	str	r3, [sp, #8]
 8024cc2:	9305      	str	r3, [sp, #20]
 8024cc4:	2300      	movs	r3, #0
 8024cc6:	001e      	movs	r6, r3
 8024cc8:	9304      	str	r3, [sp, #16]
 8024cca:	9b00      	ldr	r3, [sp, #0]
 8024ccc:	42a3      	cmp	r3, r4
 8024cce:	d338      	bcc.n	8024d42 <__gethex+0x1ea>
 8024cd0:	9c05      	ldr	r4, [sp, #20]
 8024cd2:	9b02      	ldr	r3, [sp, #8]
 8024cd4:	c440      	stmia	r4!, {r6}
 8024cd6:	1ae4      	subs	r4, r4, r3
 8024cd8:	10a4      	asrs	r4, r4, #2
 8024cda:	0030      	movs	r0, r6
 8024cdc:	612c      	str	r4, [r5, #16]
 8024cde:	f000 fbf3 	bl	80254c8 <__hi0bits>
 8024ce2:	9b01      	ldr	r3, [sp, #4]
 8024ce4:	0164      	lsls	r4, r4, #5
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	1a26      	subs	r6, r4, r0
 8024cea:	9300      	str	r3, [sp, #0]
 8024cec:	429e      	cmp	r6, r3
 8024cee:	dd52      	ble.n	8024d96 <__gethex+0x23e>
 8024cf0:	1af6      	subs	r6, r6, r3
 8024cf2:	0031      	movs	r1, r6
 8024cf4:	0028      	movs	r0, r5
 8024cf6:	f000 ff96 	bl	8025c26 <__any_on>
 8024cfa:	1e04      	subs	r4, r0, #0
 8024cfc:	d00f      	beq.n	8024d1e <__gethex+0x1c6>
 8024cfe:	2401      	movs	r4, #1
 8024d00:	231f      	movs	r3, #31
 8024d02:	0020      	movs	r0, r4
 8024d04:	1e72      	subs	r2, r6, #1
 8024d06:	4013      	ands	r3, r2
 8024d08:	4098      	lsls	r0, r3
 8024d0a:	0003      	movs	r3, r0
 8024d0c:	1151      	asrs	r1, r2, #5
 8024d0e:	9802      	ldr	r0, [sp, #8]
 8024d10:	0089      	lsls	r1, r1, #2
 8024d12:	5809      	ldr	r1, [r1, r0]
 8024d14:	4219      	tst	r1, r3
 8024d16:	d002      	beq.n	8024d1e <__gethex+0x1c6>
 8024d18:	42a2      	cmp	r2, r4
 8024d1a:	dc34      	bgt.n	8024d86 <__gethex+0x22e>
 8024d1c:	2402      	movs	r4, #2
 8024d1e:	0031      	movs	r1, r6
 8024d20:	0028      	movs	r0, r5
 8024d22:	f7ff feb1 	bl	8024a88 <rshift>
 8024d26:	19bf      	adds	r7, r7, r6
 8024d28:	9b01      	ldr	r3, [sp, #4]
 8024d2a:	689b      	ldr	r3, [r3, #8]
 8024d2c:	42bb      	cmp	r3, r7
 8024d2e:	da42      	bge.n	8024db6 <__gethex+0x25e>
 8024d30:	0029      	movs	r1, r5
 8024d32:	9803      	ldr	r0, [sp, #12]
 8024d34:	f000 fb14 	bl	8025360 <_Bfree>
 8024d38:	2300      	movs	r3, #0
 8024d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d3c:	26a3      	movs	r6, #163	@ 0xa3
 8024d3e:	6013      	str	r3, [r2, #0]
 8024d40:	e794      	b.n	8024c6c <__gethex+0x114>
 8024d42:	3c01      	subs	r4, #1
 8024d44:	7823      	ldrb	r3, [r4, #0]
 8024d46:	2b2e      	cmp	r3, #46	@ 0x2e
 8024d48:	d012      	beq.n	8024d70 <__gethex+0x218>
 8024d4a:	9b04      	ldr	r3, [sp, #16]
 8024d4c:	2b20      	cmp	r3, #32
 8024d4e:	d104      	bne.n	8024d5a <__gethex+0x202>
 8024d50:	9b05      	ldr	r3, [sp, #20]
 8024d52:	c340      	stmia	r3!, {r6}
 8024d54:	2600      	movs	r6, #0
 8024d56:	9305      	str	r3, [sp, #20]
 8024d58:	9604      	str	r6, [sp, #16]
 8024d5a:	7820      	ldrb	r0, [r4, #0]
 8024d5c:	f7ff fee7 	bl	8024b2e <__hexdig_fun>
 8024d60:	230f      	movs	r3, #15
 8024d62:	4018      	ands	r0, r3
 8024d64:	9b04      	ldr	r3, [sp, #16]
 8024d66:	4098      	lsls	r0, r3
 8024d68:	3304      	adds	r3, #4
 8024d6a:	4306      	orrs	r6, r0
 8024d6c:	9304      	str	r3, [sp, #16]
 8024d6e:	e7ac      	b.n	8024cca <__gethex+0x172>
 8024d70:	9b00      	ldr	r3, [sp, #0]
 8024d72:	42a3      	cmp	r3, r4
 8024d74:	d8e9      	bhi.n	8024d4a <__gethex+0x1f2>
 8024d76:	2201      	movs	r2, #1
 8024d78:	0020      	movs	r0, r4
 8024d7a:	492b      	ldr	r1, [pc, #172]	@ (8024e28 <__gethex+0x2d0>)
 8024d7c:	f7fe fee2 	bl	8023b44 <strncmp>
 8024d80:	2800      	cmp	r0, #0
 8024d82:	d1e2      	bne.n	8024d4a <__gethex+0x1f2>
 8024d84:	e7a1      	b.n	8024cca <__gethex+0x172>
 8024d86:	0028      	movs	r0, r5
 8024d88:	1eb1      	subs	r1, r6, #2
 8024d8a:	f000 ff4c 	bl	8025c26 <__any_on>
 8024d8e:	2800      	cmp	r0, #0
 8024d90:	d0c4      	beq.n	8024d1c <__gethex+0x1c4>
 8024d92:	2403      	movs	r4, #3
 8024d94:	e7c3      	b.n	8024d1e <__gethex+0x1c6>
 8024d96:	9b00      	ldr	r3, [sp, #0]
 8024d98:	2400      	movs	r4, #0
 8024d9a:	429e      	cmp	r6, r3
 8024d9c:	dac4      	bge.n	8024d28 <__gethex+0x1d0>
 8024d9e:	1b9e      	subs	r6, r3, r6
 8024da0:	0029      	movs	r1, r5
 8024da2:	0032      	movs	r2, r6
 8024da4:	9803      	ldr	r0, [sp, #12]
 8024da6:	f000 fd05 	bl	80257b4 <__lshift>
 8024daa:	0003      	movs	r3, r0
 8024dac:	3314      	adds	r3, #20
 8024dae:	0005      	movs	r5, r0
 8024db0:	1bbf      	subs	r7, r7, r6
 8024db2:	9302      	str	r3, [sp, #8]
 8024db4:	e7b8      	b.n	8024d28 <__gethex+0x1d0>
 8024db6:	9b01      	ldr	r3, [sp, #4]
 8024db8:	685e      	ldr	r6, [r3, #4]
 8024dba:	42be      	cmp	r6, r7
 8024dbc:	dd6f      	ble.n	8024e9e <__gethex+0x346>
 8024dbe:	9b00      	ldr	r3, [sp, #0]
 8024dc0:	1bf6      	subs	r6, r6, r7
 8024dc2:	42b3      	cmp	r3, r6
 8024dc4:	dc36      	bgt.n	8024e34 <__gethex+0x2dc>
 8024dc6:	9b01      	ldr	r3, [sp, #4]
 8024dc8:	68db      	ldr	r3, [r3, #12]
 8024dca:	2b02      	cmp	r3, #2
 8024dcc:	d024      	beq.n	8024e18 <__gethex+0x2c0>
 8024dce:	2b03      	cmp	r3, #3
 8024dd0:	d026      	beq.n	8024e20 <__gethex+0x2c8>
 8024dd2:	2b01      	cmp	r3, #1
 8024dd4:	d117      	bne.n	8024e06 <__gethex+0x2ae>
 8024dd6:	9b00      	ldr	r3, [sp, #0]
 8024dd8:	42b3      	cmp	r3, r6
 8024dda:	d114      	bne.n	8024e06 <__gethex+0x2ae>
 8024ddc:	2b01      	cmp	r3, #1
 8024dde:	d10b      	bne.n	8024df8 <__gethex+0x2a0>
 8024de0:	9b01      	ldr	r3, [sp, #4]
 8024de2:	9a07      	ldr	r2, [sp, #28]
 8024de4:	685b      	ldr	r3, [r3, #4]
 8024de6:	2662      	movs	r6, #98	@ 0x62
 8024de8:	6013      	str	r3, [r2, #0]
 8024dea:	2301      	movs	r3, #1
 8024dec:	9a02      	ldr	r2, [sp, #8]
 8024dee:	612b      	str	r3, [r5, #16]
 8024df0:	6013      	str	r3, [r2, #0]
 8024df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024df4:	601d      	str	r5, [r3, #0]
 8024df6:	e739      	b.n	8024c6c <__gethex+0x114>
 8024df8:	9900      	ldr	r1, [sp, #0]
 8024dfa:	0028      	movs	r0, r5
 8024dfc:	3901      	subs	r1, #1
 8024dfe:	f000 ff12 	bl	8025c26 <__any_on>
 8024e02:	2800      	cmp	r0, #0
 8024e04:	d1ec      	bne.n	8024de0 <__gethex+0x288>
 8024e06:	0029      	movs	r1, r5
 8024e08:	9803      	ldr	r0, [sp, #12]
 8024e0a:	f000 faa9 	bl	8025360 <_Bfree>
 8024e0e:	2300      	movs	r3, #0
 8024e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024e12:	2650      	movs	r6, #80	@ 0x50
 8024e14:	6013      	str	r3, [r2, #0]
 8024e16:	e729      	b.n	8024c6c <__gethex+0x114>
 8024e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e1a:	2b00      	cmp	r3, #0
 8024e1c:	d1f3      	bne.n	8024e06 <__gethex+0x2ae>
 8024e1e:	e7df      	b.n	8024de0 <__gethex+0x288>
 8024e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	d1dc      	bne.n	8024de0 <__gethex+0x288>
 8024e26:	e7ee      	b.n	8024e06 <__gethex+0x2ae>
 8024e28:	0802b7b4 	.word	0x0802b7b4
 8024e2c:	0802b9c1 	.word	0x0802b9c1
 8024e30:	0802b9d2 	.word	0x0802b9d2
 8024e34:	1e77      	subs	r7, r6, #1
 8024e36:	2c00      	cmp	r4, #0
 8024e38:	d12f      	bne.n	8024e9a <__gethex+0x342>
 8024e3a:	2f00      	cmp	r7, #0
 8024e3c:	d004      	beq.n	8024e48 <__gethex+0x2f0>
 8024e3e:	0039      	movs	r1, r7
 8024e40:	0028      	movs	r0, r5
 8024e42:	f000 fef0 	bl	8025c26 <__any_on>
 8024e46:	0004      	movs	r4, r0
 8024e48:	231f      	movs	r3, #31
 8024e4a:	117a      	asrs	r2, r7, #5
 8024e4c:	401f      	ands	r7, r3
 8024e4e:	3b1e      	subs	r3, #30
 8024e50:	40bb      	lsls	r3, r7
 8024e52:	9902      	ldr	r1, [sp, #8]
 8024e54:	0092      	lsls	r2, r2, #2
 8024e56:	5852      	ldr	r2, [r2, r1]
 8024e58:	421a      	tst	r2, r3
 8024e5a:	d001      	beq.n	8024e60 <__gethex+0x308>
 8024e5c:	2302      	movs	r3, #2
 8024e5e:	431c      	orrs	r4, r3
 8024e60:	9b00      	ldr	r3, [sp, #0]
 8024e62:	0031      	movs	r1, r6
 8024e64:	1b9b      	subs	r3, r3, r6
 8024e66:	2602      	movs	r6, #2
 8024e68:	0028      	movs	r0, r5
 8024e6a:	9300      	str	r3, [sp, #0]
 8024e6c:	f7ff fe0c 	bl	8024a88 <rshift>
 8024e70:	9b01      	ldr	r3, [sp, #4]
 8024e72:	685f      	ldr	r7, [r3, #4]
 8024e74:	2c00      	cmp	r4, #0
 8024e76:	d03f      	beq.n	8024ef8 <__gethex+0x3a0>
 8024e78:	9b01      	ldr	r3, [sp, #4]
 8024e7a:	68db      	ldr	r3, [r3, #12]
 8024e7c:	2b02      	cmp	r3, #2
 8024e7e:	d010      	beq.n	8024ea2 <__gethex+0x34a>
 8024e80:	2b03      	cmp	r3, #3
 8024e82:	d012      	beq.n	8024eaa <__gethex+0x352>
 8024e84:	2b01      	cmp	r3, #1
 8024e86:	d106      	bne.n	8024e96 <__gethex+0x33e>
 8024e88:	07a2      	lsls	r2, r4, #30
 8024e8a:	d504      	bpl.n	8024e96 <__gethex+0x33e>
 8024e8c:	9a02      	ldr	r2, [sp, #8]
 8024e8e:	6812      	ldr	r2, [r2, #0]
 8024e90:	4314      	orrs	r4, r2
 8024e92:	421c      	tst	r4, r3
 8024e94:	d10c      	bne.n	8024eb0 <__gethex+0x358>
 8024e96:	2310      	movs	r3, #16
 8024e98:	e02d      	b.n	8024ef6 <__gethex+0x39e>
 8024e9a:	2401      	movs	r4, #1
 8024e9c:	e7d4      	b.n	8024e48 <__gethex+0x2f0>
 8024e9e:	2601      	movs	r6, #1
 8024ea0:	e7e8      	b.n	8024e74 <__gethex+0x31c>
 8024ea2:	2301      	movs	r3, #1
 8024ea4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024ea6:	1a9b      	subs	r3, r3, r2
 8024ea8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024eac:	2b00      	cmp	r3, #0
 8024eae:	d0f2      	beq.n	8024e96 <__gethex+0x33e>
 8024eb0:	692b      	ldr	r3, [r5, #16]
 8024eb2:	2000      	movs	r0, #0
 8024eb4:	9302      	str	r3, [sp, #8]
 8024eb6:	009b      	lsls	r3, r3, #2
 8024eb8:	9304      	str	r3, [sp, #16]
 8024eba:	002b      	movs	r3, r5
 8024ebc:	9a04      	ldr	r2, [sp, #16]
 8024ebe:	3314      	adds	r3, #20
 8024ec0:	1899      	adds	r1, r3, r2
 8024ec2:	681a      	ldr	r2, [r3, #0]
 8024ec4:	1c54      	adds	r4, r2, #1
 8024ec6:	d01c      	beq.n	8024f02 <__gethex+0x3aa>
 8024ec8:	3201      	adds	r2, #1
 8024eca:	601a      	str	r2, [r3, #0]
 8024ecc:	002b      	movs	r3, r5
 8024ece:	3314      	adds	r3, #20
 8024ed0:	2e02      	cmp	r6, #2
 8024ed2:	d13f      	bne.n	8024f54 <__gethex+0x3fc>
 8024ed4:	9a01      	ldr	r2, [sp, #4]
 8024ed6:	9900      	ldr	r1, [sp, #0]
 8024ed8:	6812      	ldr	r2, [r2, #0]
 8024eda:	3a01      	subs	r2, #1
 8024edc:	428a      	cmp	r2, r1
 8024ede:	d109      	bne.n	8024ef4 <__gethex+0x39c>
 8024ee0:	000a      	movs	r2, r1
 8024ee2:	201f      	movs	r0, #31
 8024ee4:	4010      	ands	r0, r2
 8024ee6:	2201      	movs	r2, #1
 8024ee8:	4082      	lsls	r2, r0
 8024eea:	1149      	asrs	r1, r1, #5
 8024eec:	0089      	lsls	r1, r1, #2
 8024eee:	58cb      	ldr	r3, [r1, r3]
 8024ef0:	4213      	tst	r3, r2
 8024ef2:	d13d      	bne.n	8024f70 <__gethex+0x418>
 8024ef4:	2320      	movs	r3, #32
 8024ef6:	431e      	orrs	r6, r3
 8024ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024efa:	601d      	str	r5, [r3, #0]
 8024efc:	9b07      	ldr	r3, [sp, #28]
 8024efe:	601f      	str	r7, [r3, #0]
 8024f00:	e6b4      	b.n	8024c6c <__gethex+0x114>
 8024f02:	c301      	stmia	r3!, {r0}
 8024f04:	4299      	cmp	r1, r3
 8024f06:	d8dc      	bhi.n	8024ec2 <__gethex+0x36a>
 8024f08:	68ab      	ldr	r3, [r5, #8]
 8024f0a:	9a02      	ldr	r2, [sp, #8]
 8024f0c:	429a      	cmp	r2, r3
 8024f0e:	db18      	blt.n	8024f42 <__gethex+0x3ea>
 8024f10:	6869      	ldr	r1, [r5, #4]
 8024f12:	9803      	ldr	r0, [sp, #12]
 8024f14:	3101      	adds	r1, #1
 8024f16:	f000 f9df 	bl	80252d8 <_Balloc>
 8024f1a:	1e04      	subs	r4, r0, #0
 8024f1c:	d104      	bne.n	8024f28 <__gethex+0x3d0>
 8024f1e:	0022      	movs	r2, r4
 8024f20:	2184      	movs	r1, #132	@ 0x84
 8024f22:	4b1d      	ldr	r3, [pc, #116]	@ (8024f98 <__gethex+0x440>)
 8024f24:	481d      	ldr	r0, [pc, #116]	@ (8024f9c <__gethex+0x444>)
 8024f26:	e6c4      	b.n	8024cb2 <__gethex+0x15a>
 8024f28:	0029      	movs	r1, r5
 8024f2a:	692a      	ldr	r2, [r5, #16]
 8024f2c:	310c      	adds	r1, #12
 8024f2e:	3202      	adds	r2, #2
 8024f30:	0092      	lsls	r2, r2, #2
 8024f32:	300c      	adds	r0, #12
 8024f34:	f7fe fecc 	bl	8023cd0 <memcpy>
 8024f38:	0029      	movs	r1, r5
 8024f3a:	9803      	ldr	r0, [sp, #12]
 8024f3c:	f000 fa10 	bl	8025360 <_Bfree>
 8024f40:	0025      	movs	r5, r4
 8024f42:	692b      	ldr	r3, [r5, #16]
 8024f44:	1c5a      	adds	r2, r3, #1
 8024f46:	612a      	str	r2, [r5, #16]
 8024f48:	2201      	movs	r2, #1
 8024f4a:	3304      	adds	r3, #4
 8024f4c:	009b      	lsls	r3, r3, #2
 8024f4e:	18eb      	adds	r3, r5, r3
 8024f50:	605a      	str	r2, [r3, #4]
 8024f52:	e7bb      	b.n	8024ecc <__gethex+0x374>
 8024f54:	692a      	ldr	r2, [r5, #16]
 8024f56:	9902      	ldr	r1, [sp, #8]
 8024f58:	428a      	cmp	r2, r1
 8024f5a:	dd0b      	ble.n	8024f74 <__gethex+0x41c>
 8024f5c:	2101      	movs	r1, #1
 8024f5e:	0028      	movs	r0, r5
 8024f60:	f7ff fd92 	bl	8024a88 <rshift>
 8024f64:	9b01      	ldr	r3, [sp, #4]
 8024f66:	3701      	adds	r7, #1
 8024f68:	689b      	ldr	r3, [r3, #8]
 8024f6a:	42bb      	cmp	r3, r7
 8024f6c:	da00      	bge.n	8024f70 <__gethex+0x418>
 8024f6e:	e6df      	b.n	8024d30 <__gethex+0x1d8>
 8024f70:	2601      	movs	r6, #1
 8024f72:	e7bf      	b.n	8024ef4 <__gethex+0x39c>
 8024f74:	221f      	movs	r2, #31
 8024f76:	9c00      	ldr	r4, [sp, #0]
 8024f78:	9900      	ldr	r1, [sp, #0]
 8024f7a:	4014      	ands	r4, r2
 8024f7c:	4211      	tst	r1, r2
 8024f7e:	d0f7      	beq.n	8024f70 <__gethex+0x418>
 8024f80:	9a04      	ldr	r2, [sp, #16]
 8024f82:	189b      	adds	r3, r3, r2
 8024f84:	3b04      	subs	r3, #4
 8024f86:	6818      	ldr	r0, [r3, #0]
 8024f88:	f000 fa9e 	bl	80254c8 <__hi0bits>
 8024f8c:	2320      	movs	r3, #32
 8024f8e:	1b1b      	subs	r3, r3, r4
 8024f90:	4298      	cmp	r0, r3
 8024f92:	dbe3      	blt.n	8024f5c <__gethex+0x404>
 8024f94:	e7ec      	b.n	8024f70 <__gethex+0x418>
 8024f96:	46c0      	nop			@ (mov r8, r8)
 8024f98:	0802b9c1 	.word	0x0802b9c1
 8024f9c:	0802b9d2 	.word	0x0802b9d2

08024fa0 <L_shift>:
 8024fa0:	2308      	movs	r3, #8
 8024fa2:	b570      	push	{r4, r5, r6, lr}
 8024fa4:	2520      	movs	r5, #32
 8024fa6:	1a9a      	subs	r2, r3, r2
 8024fa8:	0092      	lsls	r2, r2, #2
 8024faa:	1aad      	subs	r5, r5, r2
 8024fac:	6843      	ldr	r3, [r0, #4]
 8024fae:	6804      	ldr	r4, [r0, #0]
 8024fb0:	001e      	movs	r6, r3
 8024fb2:	40ae      	lsls	r6, r5
 8024fb4:	40d3      	lsrs	r3, r2
 8024fb6:	4334      	orrs	r4, r6
 8024fb8:	6004      	str	r4, [r0, #0]
 8024fba:	6043      	str	r3, [r0, #4]
 8024fbc:	3004      	adds	r0, #4
 8024fbe:	4288      	cmp	r0, r1
 8024fc0:	d3f4      	bcc.n	8024fac <L_shift+0xc>
 8024fc2:	bd70      	pop	{r4, r5, r6, pc}

08024fc4 <__match>:
 8024fc4:	b530      	push	{r4, r5, lr}
 8024fc6:	6803      	ldr	r3, [r0, #0]
 8024fc8:	780c      	ldrb	r4, [r1, #0]
 8024fca:	3301      	adds	r3, #1
 8024fcc:	2c00      	cmp	r4, #0
 8024fce:	d102      	bne.n	8024fd6 <__match+0x12>
 8024fd0:	6003      	str	r3, [r0, #0]
 8024fd2:	2001      	movs	r0, #1
 8024fd4:	bd30      	pop	{r4, r5, pc}
 8024fd6:	781a      	ldrb	r2, [r3, #0]
 8024fd8:	0015      	movs	r5, r2
 8024fda:	3d41      	subs	r5, #65	@ 0x41
 8024fdc:	2d19      	cmp	r5, #25
 8024fde:	d800      	bhi.n	8024fe2 <__match+0x1e>
 8024fe0:	3220      	adds	r2, #32
 8024fe2:	3101      	adds	r1, #1
 8024fe4:	42a2      	cmp	r2, r4
 8024fe6:	d0ef      	beq.n	8024fc8 <__match+0x4>
 8024fe8:	2000      	movs	r0, #0
 8024fea:	e7f3      	b.n	8024fd4 <__match+0x10>

08024fec <__hexnan>:
 8024fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024fee:	680b      	ldr	r3, [r1, #0]
 8024ff0:	b08b      	sub	sp, #44	@ 0x2c
 8024ff2:	9201      	str	r2, [sp, #4]
 8024ff4:	9901      	ldr	r1, [sp, #4]
 8024ff6:	115a      	asrs	r2, r3, #5
 8024ff8:	0092      	lsls	r2, r2, #2
 8024ffa:	188a      	adds	r2, r1, r2
 8024ffc:	9202      	str	r2, [sp, #8]
 8024ffe:	0019      	movs	r1, r3
 8025000:	221f      	movs	r2, #31
 8025002:	4011      	ands	r1, r2
 8025004:	9008      	str	r0, [sp, #32]
 8025006:	9106      	str	r1, [sp, #24]
 8025008:	4213      	tst	r3, r2
 802500a:	d002      	beq.n	8025012 <__hexnan+0x26>
 802500c:	9b02      	ldr	r3, [sp, #8]
 802500e:	3304      	adds	r3, #4
 8025010:	9302      	str	r3, [sp, #8]
 8025012:	9b02      	ldr	r3, [sp, #8]
 8025014:	2500      	movs	r5, #0
 8025016:	1f1f      	subs	r7, r3, #4
 8025018:	003e      	movs	r6, r7
 802501a:	003c      	movs	r4, r7
 802501c:	9b08      	ldr	r3, [sp, #32]
 802501e:	603d      	str	r5, [r7, #0]
 8025020:	681b      	ldr	r3, [r3, #0]
 8025022:	9507      	str	r5, [sp, #28]
 8025024:	9305      	str	r3, [sp, #20]
 8025026:	9503      	str	r5, [sp, #12]
 8025028:	9b05      	ldr	r3, [sp, #20]
 802502a:	3301      	adds	r3, #1
 802502c:	9309      	str	r3, [sp, #36]	@ 0x24
 802502e:	9b05      	ldr	r3, [sp, #20]
 8025030:	785b      	ldrb	r3, [r3, #1]
 8025032:	9304      	str	r3, [sp, #16]
 8025034:	2b00      	cmp	r3, #0
 8025036:	d028      	beq.n	802508a <__hexnan+0x9e>
 8025038:	9804      	ldr	r0, [sp, #16]
 802503a:	f7ff fd78 	bl	8024b2e <__hexdig_fun>
 802503e:	2800      	cmp	r0, #0
 8025040:	d155      	bne.n	80250ee <__hexnan+0x102>
 8025042:	9b04      	ldr	r3, [sp, #16]
 8025044:	2b20      	cmp	r3, #32
 8025046:	d819      	bhi.n	802507c <__hexnan+0x90>
 8025048:	9b03      	ldr	r3, [sp, #12]
 802504a:	9a07      	ldr	r2, [sp, #28]
 802504c:	4293      	cmp	r3, r2
 802504e:	dd12      	ble.n	8025076 <__hexnan+0x8a>
 8025050:	42b4      	cmp	r4, r6
 8025052:	d206      	bcs.n	8025062 <__hexnan+0x76>
 8025054:	2d07      	cmp	r5, #7
 8025056:	dc04      	bgt.n	8025062 <__hexnan+0x76>
 8025058:	002a      	movs	r2, r5
 802505a:	0031      	movs	r1, r6
 802505c:	0020      	movs	r0, r4
 802505e:	f7ff ff9f 	bl	8024fa0 <L_shift>
 8025062:	9b01      	ldr	r3, [sp, #4]
 8025064:	2508      	movs	r5, #8
 8025066:	429c      	cmp	r4, r3
 8025068:	d905      	bls.n	8025076 <__hexnan+0x8a>
 802506a:	1f26      	subs	r6, r4, #4
 802506c:	2500      	movs	r5, #0
 802506e:	0034      	movs	r4, r6
 8025070:	9b03      	ldr	r3, [sp, #12]
 8025072:	6035      	str	r5, [r6, #0]
 8025074:	9307      	str	r3, [sp, #28]
 8025076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025078:	9305      	str	r3, [sp, #20]
 802507a:	e7d5      	b.n	8025028 <__hexnan+0x3c>
 802507c:	9b04      	ldr	r3, [sp, #16]
 802507e:	2b29      	cmp	r3, #41	@ 0x29
 8025080:	d15a      	bne.n	8025138 <__hexnan+0x14c>
 8025082:	9b05      	ldr	r3, [sp, #20]
 8025084:	9a08      	ldr	r2, [sp, #32]
 8025086:	3302      	adds	r3, #2
 8025088:	6013      	str	r3, [r2, #0]
 802508a:	9b03      	ldr	r3, [sp, #12]
 802508c:	2b00      	cmp	r3, #0
 802508e:	d053      	beq.n	8025138 <__hexnan+0x14c>
 8025090:	42b4      	cmp	r4, r6
 8025092:	d206      	bcs.n	80250a2 <__hexnan+0xb6>
 8025094:	2d07      	cmp	r5, #7
 8025096:	dc04      	bgt.n	80250a2 <__hexnan+0xb6>
 8025098:	002a      	movs	r2, r5
 802509a:	0031      	movs	r1, r6
 802509c:	0020      	movs	r0, r4
 802509e:	f7ff ff7f 	bl	8024fa0 <L_shift>
 80250a2:	9b01      	ldr	r3, [sp, #4]
 80250a4:	429c      	cmp	r4, r3
 80250a6:	d936      	bls.n	8025116 <__hexnan+0x12a>
 80250a8:	001a      	movs	r2, r3
 80250aa:	0023      	movs	r3, r4
 80250ac:	cb02      	ldmia	r3!, {r1}
 80250ae:	c202      	stmia	r2!, {r1}
 80250b0:	429f      	cmp	r7, r3
 80250b2:	d2fb      	bcs.n	80250ac <__hexnan+0xc0>
 80250b4:	9b02      	ldr	r3, [sp, #8]
 80250b6:	1c61      	adds	r1, r4, #1
 80250b8:	1eda      	subs	r2, r3, #3
 80250ba:	2304      	movs	r3, #4
 80250bc:	4291      	cmp	r1, r2
 80250be:	d805      	bhi.n	80250cc <__hexnan+0xe0>
 80250c0:	9b02      	ldr	r3, [sp, #8]
 80250c2:	3b04      	subs	r3, #4
 80250c4:	1b1b      	subs	r3, r3, r4
 80250c6:	089b      	lsrs	r3, r3, #2
 80250c8:	3301      	adds	r3, #1
 80250ca:	009b      	lsls	r3, r3, #2
 80250cc:	9a01      	ldr	r2, [sp, #4]
 80250ce:	18d3      	adds	r3, r2, r3
 80250d0:	2200      	movs	r2, #0
 80250d2:	c304      	stmia	r3!, {r2}
 80250d4:	429f      	cmp	r7, r3
 80250d6:	d2fc      	bcs.n	80250d2 <__hexnan+0xe6>
 80250d8:	683b      	ldr	r3, [r7, #0]
 80250da:	2b00      	cmp	r3, #0
 80250dc:	d104      	bne.n	80250e8 <__hexnan+0xfc>
 80250de:	9b01      	ldr	r3, [sp, #4]
 80250e0:	429f      	cmp	r7, r3
 80250e2:	d127      	bne.n	8025134 <__hexnan+0x148>
 80250e4:	2301      	movs	r3, #1
 80250e6:	603b      	str	r3, [r7, #0]
 80250e8:	2005      	movs	r0, #5
 80250ea:	b00b      	add	sp, #44	@ 0x2c
 80250ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80250ee:	9b03      	ldr	r3, [sp, #12]
 80250f0:	3501      	adds	r5, #1
 80250f2:	3301      	adds	r3, #1
 80250f4:	9303      	str	r3, [sp, #12]
 80250f6:	2d08      	cmp	r5, #8
 80250f8:	dd06      	ble.n	8025108 <__hexnan+0x11c>
 80250fa:	9b01      	ldr	r3, [sp, #4]
 80250fc:	429c      	cmp	r4, r3
 80250fe:	d9ba      	bls.n	8025076 <__hexnan+0x8a>
 8025100:	2300      	movs	r3, #0
 8025102:	2501      	movs	r5, #1
 8025104:	3c04      	subs	r4, #4
 8025106:	6023      	str	r3, [r4, #0]
 8025108:	220f      	movs	r2, #15
 802510a:	6823      	ldr	r3, [r4, #0]
 802510c:	4010      	ands	r0, r2
 802510e:	011b      	lsls	r3, r3, #4
 8025110:	4303      	orrs	r3, r0
 8025112:	6023      	str	r3, [r4, #0]
 8025114:	e7af      	b.n	8025076 <__hexnan+0x8a>
 8025116:	9b06      	ldr	r3, [sp, #24]
 8025118:	2b00      	cmp	r3, #0
 802511a:	d0dd      	beq.n	80250d8 <__hexnan+0xec>
 802511c:	2320      	movs	r3, #32
 802511e:	9a06      	ldr	r2, [sp, #24]
 8025120:	9902      	ldr	r1, [sp, #8]
 8025122:	1a9b      	subs	r3, r3, r2
 8025124:	2201      	movs	r2, #1
 8025126:	4252      	negs	r2, r2
 8025128:	40da      	lsrs	r2, r3
 802512a:	3904      	subs	r1, #4
 802512c:	680b      	ldr	r3, [r1, #0]
 802512e:	4013      	ands	r3, r2
 8025130:	600b      	str	r3, [r1, #0]
 8025132:	e7d1      	b.n	80250d8 <__hexnan+0xec>
 8025134:	3f04      	subs	r7, #4
 8025136:	e7cf      	b.n	80250d8 <__hexnan+0xec>
 8025138:	2004      	movs	r0, #4
 802513a:	e7d6      	b.n	80250ea <__hexnan+0xfe>

0802513c <malloc>:
 802513c:	b510      	push	{r4, lr}
 802513e:	4b03      	ldr	r3, [pc, #12]	@ (802514c <malloc+0x10>)
 8025140:	0001      	movs	r1, r0
 8025142:	6818      	ldr	r0, [r3, #0]
 8025144:	f000 f826 	bl	8025194 <_malloc_r>
 8025148:	bd10      	pop	{r4, pc}
 802514a:	46c0      	nop			@ (mov r8, r8)
 802514c:	200003e0 	.word	0x200003e0

08025150 <sbrk_aligned>:
 8025150:	b570      	push	{r4, r5, r6, lr}
 8025152:	4e0f      	ldr	r6, [pc, #60]	@ (8025190 <sbrk_aligned+0x40>)
 8025154:	000d      	movs	r5, r1
 8025156:	6831      	ldr	r1, [r6, #0]
 8025158:	0004      	movs	r4, r0
 802515a:	2900      	cmp	r1, #0
 802515c:	d102      	bne.n	8025164 <sbrk_aligned+0x14>
 802515e:	f001 f989 	bl	8026474 <_sbrk_r>
 8025162:	6030      	str	r0, [r6, #0]
 8025164:	0029      	movs	r1, r5
 8025166:	0020      	movs	r0, r4
 8025168:	f001 f984 	bl	8026474 <_sbrk_r>
 802516c:	1c43      	adds	r3, r0, #1
 802516e:	d103      	bne.n	8025178 <sbrk_aligned+0x28>
 8025170:	2501      	movs	r5, #1
 8025172:	426d      	negs	r5, r5
 8025174:	0028      	movs	r0, r5
 8025176:	bd70      	pop	{r4, r5, r6, pc}
 8025178:	2303      	movs	r3, #3
 802517a:	1cc5      	adds	r5, r0, #3
 802517c:	439d      	bics	r5, r3
 802517e:	42a8      	cmp	r0, r5
 8025180:	d0f8      	beq.n	8025174 <sbrk_aligned+0x24>
 8025182:	1a29      	subs	r1, r5, r0
 8025184:	0020      	movs	r0, r4
 8025186:	f001 f975 	bl	8026474 <_sbrk_r>
 802518a:	3001      	adds	r0, #1
 802518c:	d1f2      	bne.n	8025174 <sbrk_aligned+0x24>
 802518e:	e7ef      	b.n	8025170 <sbrk_aligned+0x20>
 8025190:	200035e8 	.word	0x200035e8

08025194 <_malloc_r>:
 8025194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025196:	2203      	movs	r2, #3
 8025198:	1ccb      	adds	r3, r1, #3
 802519a:	4393      	bics	r3, r2
 802519c:	3308      	adds	r3, #8
 802519e:	0005      	movs	r5, r0
 80251a0:	001f      	movs	r7, r3
 80251a2:	2b0c      	cmp	r3, #12
 80251a4:	d234      	bcs.n	8025210 <_malloc_r+0x7c>
 80251a6:	270c      	movs	r7, #12
 80251a8:	42b9      	cmp	r1, r7
 80251aa:	d833      	bhi.n	8025214 <_malloc_r+0x80>
 80251ac:	0028      	movs	r0, r5
 80251ae:	f000 f883 	bl	80252b8 <__malloc_lock>
 80251b2:	4e37      	ldr	r6, [pc, #220]	@ (8025290 <_malloc_r+0xfc>)
 80251b4:	6833      	ldr	r3, [r6, #0]
 80251b6:	001c      	movs	r4, r3
 80251b8:	2c00      	cmp	r4, #0
 80251ba:	d12f      	bne.n	802521c <_malloc_r+0x88>
 80251bc:	0039      	movs	r1, r7
 80251be:	0028      	movs	r0, r5
 80251c0:	f7ff ffc6 	bl	8025150 <sbrk_aligned>
 80251c4:	0004      	movs	r4, r0
 80251c6:	1c43      	adds	r3, r0, #1
 80251c8:	d15f      	bne.n	802528a <_malloc_r+0xf6>
 80251ca:	6834      	ldr	r4, [r6, #0]
 80251cc:	9400      	str	r4, [sp, #0]
 80251ce:	9b00      	ldr	r3, [sp, #0]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	d14a      	bne.n	802526a <_malloc_r+0xd6>
 80251d4:	2c00      	cmp	r4, #0
 80251d6:	d052      	beq.n	802527e <_malloc_r+0xea>
 80251d8:	6823      	ldr	r3, [r4, #0]
 80251da:	0028      	movs	r0, r5
 80251dc:	18e3      	adds	r3, r4, r3
 80251de:	9900      	ldr	r1, [sp, #0]
 80251e0:	9301      	str	r3, [sp, #4]
 80251e2:	f001 f947 	bl	8026474 <_sbrk_r>
 80251e6:	9b01      	ldr	r3, [sp, #4]
 80251e8:	4283      	cmp	r3, r0
 80251ea:	d148      	bne.n	802527e <_malloc_r+0xea>
 80251ec:	6823      	ldr	r3, [r4, #0]
 80251ee:	0028      	movs	r0, r5
 80251f0:	1aff      	subs	r7, r7, r3
 80251f2:	0039      	movs	r1, r7
 80251f4:	f7ff ffac 	bl	8025150 <sbrk_aligned>
 80251f8:	3001      	adds	r0, #1
 80251fa:	d040      	beq.n	802527e <_malloc_r+0xea>
 80251fc:	6823      	ldr	r3, [r4, #0]
 80251fe:	19db      	adds	r3, r3, r7
 8025200:	6023      	str	r3, [r4, #0]
 8025202:	6833      	ldr	r3, [r6, #0]
 8025204:	685a      	ldr	r2, [r3, #4]
 8025206:	2a00      	cmp	r2, #0
 8025208:	d133      	bne.n	8025272 <_malloc_r+0xde>
 802520a:	9b00      	ldr	r3, [sp, #0]
 802520c:	6033      	str	r3, [r6, #0]
 802520e:	e019      	b.n	8025244 <_malloc_r+0xb0>
 8025210:	2b00      	cmp	r3, #0
 8025212:	dac9      	bge.n	80251a8 <_malloc_r+0x14>
 8025214:	230c      	movs	r3, #12
 8025216:	602b      	str	r3, [r5, #0]
 8025218:	2000      	movs	r0, #0
 802521a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802521c:	6821      	ldr	r1, [r4, #0]
 802521e:	1bc9      	subs	r1, r1, r7
 8025220:	d420      	bmi.n	8025264 <_malloc_r+0xd0>
 8025222:	290b      	cmp	r1, #11
 8025224:	d90a      	bls.n	802523c <_malloc_r+0xa8>
 8025226:	19e2      	adds	r2, r4, r7
 8025228:	6027      	str	r7, [r4, #0]
 802522a:	42a3      	cmp	r3, r4
 802522c:	d104      	bne.n	8025238 <_malloc_r+0xa4>
 802522e:	6032      	str	r2, [r6, #0]
 8025230:	6863      	ldr	r3, [r4, #4]
 8025232:	6011      	str	r1, [r2, #0]
 8025234:	6053      	str	r3, [r2, #4]
 8025236:	e005      	b.n	8025244 <_malloc_r+0xb0>
 8025238:	605a      	str	r2, [r3, #4]
 802523a:	e7f9      	b.n	8025230 <_malloc_r+0x9c>
 802523c:	6862      	ldr	r2, [r4, #4]
 802523e:	42a3      	cmp	r3, r4
 8025240:	d10e      	bne.n	8025260 <_malloc_r+0xcc>
 8025242:	6032      	str	r2, [r6, #0]
 8025244:	0028      	movs	r0, r5
 8025246:	f000 f83f 	bl	80252c8 <__malloc_unlock>
 802524a:	0020      	movs	r0, r4
 802524c:	2207      	movs	r2, #7
 802524e:	300b      	adds	r0, #11
 8025250:	1d23      	adds	r3, r4, #4
 8025252:	4390      	bics	r0, r2
 8025254:	1ac2      	subs	r2, r0, r3
 8025256:	4298      	cmp	r0, r3
 8025258:	d0df      	beq.n	802521a <_malloc_r+0x86>
 802525a:	1a1b      	subs	r3, r3, r0
 802525c:	50a3      	str	r3, [r4, r2]
 802525e:	e7dc      	b.n	802521a <_malloc_r+0x86>
 8025260:	605a      	str	r2, [r3, #4]
 8025262:	e7ef      	b.n	8025244 <_malloc_r+0xb0>
 8025264:	0023      	movs	r3, r4
 8025266:	6864      	ldr	r4, [r4, #4]
 8025268:	e7a6      	b.n	80251b8 <_malloc_r+0x24>
 802526a:	9c00      	ldr	r4, [sp, #0]
 802526c:	6863      	ldr	r3, [r4, #4]
 802526e:	9300      	str	r3, [sp, #0]
 8025270:	e7ad      	b.n	80251ce <_malloc_r+0x3a>
 8025272:	001a      	movs	r2, r3
 8025274:	685b      	ldr	r3, [r3, #4]
 8025276:	42a3      	cmp	r3, r4
 8025278:	d1fb      	bne.n	8025272 <_malloc_r+0xde>
 802527a:	2300      	movs	r3, #0
 802527c:	e7da      	b.n	8025234 <_malloc_r+0xa0>
 802527e:	230c      	movs	r3, #12
 8025280:	0028      	movs	r0, r5
 8025282:	602b      	str	r3, [r5, #0]
 8025284:	f000 f820 	bl	80252c8 <__malloc_unlock>
 8025288:	e7c6      	b.n	8025218 <_malloc_r+0x84>
 802528a:	6007      	str	r7, [r0, #0]
 802528c:	e7da      	b.n	8025244 <_malloc_r+0xb0>
 802528e:	46c0      	nop			@ (mov r8, r8)
 8025290:	200035ec 	.word	0x200035ec

08025294 <__ascii_mbtowc>:
 8025294:	b082      	sub	sp, #8
 8025296:	2900      	cmp	r1, #0
 8025298:	d100      	bne.n	802529c <__ascii_mbtowc+0x8>
 802529a:	a901      	add	r1, sp, #4
 802529c:	1e10      	subs	r0, r2, #0
 802529e:	d006      	beq.n	80252ae <__ascii_mbtowc+0x1a>
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	d006      	beq.n	80252b2 <__ascii_mbtowc+0x1e>
 80252a4:	7813      	ldrb	r3, [r2, #0]
 80252a6:	600b      	str	r3, [r1, #0]
 80252a8:	7810      	ldrb	r0, [r2, #0]
 80252aa:	1e43      	subs	r3, r0, #1
 80252ac:	4198      	sbcs	r0, r3
 80252ae:	b002      	add	sp, #8
 80252b0:	4770      	bx	lr
 80252b2:	2002      	movs	r0, #2
 80252b4:	4240      	negs	r0, r0
 80252b6:	e7fa      	b.n	80252ae <__ascii_mbtowc+0x1a>

080252b8 <__malloc_lock>:
 80252b8:	b510      	push	{r4, lr}
 80252ba:	4802      	ldr	r0, [pc, #8]	@ (80252c4 <__malloc_lock+0xc>)
 80252bc:	f7fe fcfb 	bl	8023cb6 <__retarget_lock_acquire_recursive>
 80252c0:	bd10      	pop	{r4, pc}
 80252c2:	46c0      	nop			@ (mov r8, r8)
 80252c4:	200035e4 	.word	0x200035e4

080252c8 <__malloc_unlock>:
 80252c8:	b510      	push	{r4, lr}
 80252ca:	4802      	ldr	r0, [pc, #8]	@ (80252d4 <__malloc_unlock+0xc>)
 80252cc:	f7fe fcf4 	bl	8023cb8 <__retarget_lock_release_recursive>
 80252d0:	bd10      	pop	{r4, pc}
 80252d2:	46c0      	nop			@ (mov r8, r8)
 80252d4:	200035e4 	.word	0x200035e4

080252d8 <_Balloc>:
 80252d8:	b570      	push	{r4, r5, r6, lr}
 80252da:	69c5      	ldr	r5, [r0, #28]
 80252dc:	0006      	movs	r6, r0
 80252de:	000c      	movs	r4, r1
 80252e0:	2d00      	cmp	r5, #0
 80252e2:	d10e      	bne.n	8025302 <_Balloc+0x2a>
 80252e4:	2010      	movs	r0, #16
 80252e6:	f7ff ff29 	bl	802513c <malloc>
 80252ea:	1e02      	subs	r2, r0, #0
 80252ec:	61f0      	str	r0, [r6, #28]
 80252ee:	d104      	bne.n	80252fa <_Balloc+0x22>
 80252f0:	216b      	movs	r1, #107	@ 0x6b
 80252f2:	4b19      	ldr	r3, [pc, #100]	@ (8025358 <_Balloc+0x80>)
 80252f4:	4819      	ldr	r0, [pc, #100]	@ (802535c <_Balloc+0x84>)
 80252f6:	f001 f8cf 	bl	8026498 <__assert_func>
 80252fa:	6045      	str	r5, [r0, #4]
 80252fc:	6085      	str	r5, [r0, #8]
 80252fe:	6005      	str	r5, [r0, #0]
 8025300:	60c5      	str	r5, [r0, #12]
 8025302:	69f5      	ldr	r5, [r6, #28]
 8025304:	68eb      	ldr	r3, [r5, #12]
 8025306:	2b00      	cmp	r3, #0
 8025308:	d013      	beq.n	8025332 <_Balloc+0x5a>
 802530a:	69f3      	ldr	r3, [r6, #28]
 802530c:	00a2      	lsls	r2, r4, #2
 802530e:	68db      	ldr	r3, [r3, #12]
 8025310:	189b      	adds	r3, r3, r2
 8025312:	6818      	ldr	r0, [r3, #0]
 8025314:	2800      	cmp	r0, #0
 8025316:	d118      	bne.n	802534a <_Balloc+0x72>
 8025318:	2101      	movs	r1, #1
 802531a:	000d      	movs	r5, r1
 802531c:	40a5      	lsls	r5, r4
 802531e:	1d6a      	adds	r2, r5, #5
 8025320:	0030      	movs	r0, r6
 8025322:	0092      	lsls	r2, r2, #2
 8025324:	f001 f8d6 	bl	80264d4 <_calloc_r>
 8025328:	2800      	cmp	r0, #0
 802532a:	d00c      	beq.n	8025346 <_Balloc+0x6e>
 802532c:	6044      	str	r4, [r0, #4]
 802532e:	6085      	str	r5, [r0, #8]
 8025330:	e00d      	b.n	802534e <_Balloc+0x76>
 8025332:	2221      	movs	r2, #33	@ 0x21
 8025334:	2104      	movs	r1, #4
 8025336:	0030      	movs	r0, r6
 8025338:	f001 f8cc 	bl	80264d4 <_calloc_r>
 802533c:	69f3      	ldr	r3, [r6, #28]
 802533e:	60e8      	str	r0, [r5, #12]
 8025340:	68db      	ldr	r3, [r3, #12]
 8025342:	2b00      	cmp	r3, #0
 8025344:	d1e1      	bne.n	802530a <_Balloc+0x32>
 8025346:	2000      	movs	r0, #0
 8025348:	bd70      	pop	{r4, r5, r6, pc}
 802534a:	6802      	ldr	r2, [r0, #0]
 802534c:	601a      	str	r2, [r3, #0]
 802534e:	2300      	movs	r3, #0
 8025350:	6103      	str	r3, [r0, #16]
 8025352:	60c3      	str	r3, [r0, #12]
 8025354:	e7f8      	b.n	8025348 <_Balloc+0x70>
 8025356:	46c0      	nop			@ (mov r8, r8)
 8025358:	0802b952 	.word	0x0802b952
 802535c:	0802ba32 	.word	0x0802ba32

08025360 <_Bfree>:
 8025360:	b570      	push	{r4, r5, r6, lr}
 8025362:	69c6      	ldr	r6, [r0, #28]
 8025364:	0005      	movs	r5, r0
 8025366:	000c      	movs	r4, r1
 8025368:	2e00      	cmp	r6, #0
 802536a:	d10e      	bne.n	802538a <_Bfree+0x2a>
 802536c:	2010      	movs	r0, #16
 802536e:	f7ff fee5 	bl	802513c <malloc>
 8025372:	1e02      	subs	r2, r0, #0
 8025374:	61e8      	str	r0, [r5, #28]
 8025376:	d104      	bne.n	8025382 <_Bfree+0x22>
 8025378:	218f      	movs	r1, #143	@ 0x8f
 802537a:	4b09      	ldr	r3, [pc, #36]	@ (80253a0 <_Bfree+0x40>)
 802537c:	4809      	ldr	r0, [pc, #36]	@ (80253a4 <_Bfree+0x44>)
 802537e:	f001 f88b 	bl	8026498 <__assert_func>
 8025382:	6046      	str	r6, [r0, #4]
 8025384:	6086      	str	r6, [r0, #8]
 8025386:	6006      	str	r6, [r0, #0]
 8025388:	60c6      	str	r6, [r0, #12]
 802538a:	2c00      	cmp	r4, #0
 802538c:	d007      	beq.n	802539e <_Bfree+0x3e>
 802538e:	69eb      	ldr	r3, [r5, #28]
 8025390:	6862      	ldr	r2, [r4, #4]
 8025392:	68db      	ldr	r3, [r3, #12]
 8025394:	0092      	lsls	r2, r2, #2
 8025396:	189b      	adds	r3, r3, r2
 8025398:	681a      	ldr	r2, [r3, #0]
 802539a:	6022      	str	r2, [r4, #0]
 802539c:	601c      	str	r4, [r3, #0]
 802539e:	bd70      	pop	{r4, r5, r6, pc}
 80253a0:	0802b952 	.word	0x0802b952
 80253a4:	0802ba32 	.word	0x0802ba32

080253a8 <__multadd>:
 80253a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80253aa:	000f      	movs	r7, r1
 80253ac:	9001      	str	r0, [sp, #4]
 80253ae:	000c      	movs	r4, r1
 80253b0:	001e      	movs	r6, r3
 80253b2:	2000      	movs	r0, #0
 80253b4:	690d      	ldr	r5, [r1, #16]
 80253b6:	3714      	adds	r7, #20
 80253b8:	683b      	ldr	r3, [r7, #0]
 80253ba:	3001      	adds	r0, #1
 80253bc:	b299      	uxth	r1, r3
 80253be:	4351      	muls	r1, r2
 80253c0:	0c1b      	lsrs	r3, r3, #16
 80253c2:	4353      	muls	r3, r2
 80253c4:	1989      	adds	r1, r1, r6
 80253c6:	0c0e      	lsrs	r6, r1, #16
 80253c8:	199b      	adds	r3, r3, r6
 80253ca:	0c1e      	lsrs	r6, r3, #16
 80253cc:	b289      	uxth	r1, r1
 80253ce:	041b      	lsls	r3, r3, #16
 80253d0:	185b      	adds	r3, r3, r1
 80253d2:	c708      	stmia	r7!, {r3}
 80253d4:	4285      	cmp	r5, r0
 80253d6:	dcef      	bgt.n	80253b8 <__multadd+0x10>
 80253d8:	2e00      	cmp	r6, #0
 80253da:	d022      	beq.n	8025422 <__multadd+0x7a>
 80253dc:	68a3      	ldr	r3, [r4, #8]
 80253de:	42ab      	cmp	r3, r5
 80253e0:	dc19      	bgt.n	8025416 <__multadd+0x6e>
 80253e2:	6861      	ldr	r1, [r4, #4]
 80253e4:	9801      	ldr	r0, [sp, #4]
 80253e6:	3101      	adds	r1, #1
 80253e8:	f7ff ff76 	bl	80252d8 <_Balloc>
 80253ec:	1e07      	subs	r7, r0, #0
 80253ee:	d105      	bne.n	80253fc <__multadd+0x54>
 80253f0:	003a      	movs	r2, r7
 80253f2:	21ba      	movs	r1, #186	@ 0xba
 80253f4:	4b0c      	ldr	r3, [pc, #48]	@ (8025428 <__multadd+0x80>)
 80253f6:	480d      	ldr	r0, [pc, #52]	@ (802542c <__multadd+0x84>)
 80253f8:	f001 f84e 	bl	8026498 <__assert_func>
 80253fc:	0021      	movs	r1, r4
 80253fe:	6922      	ldr	r2, [r4, #16]
 8025400:	310c      	adds	r1, #12
 8025402:	3202      	adds	r2, #2
 8025404:	0092      	lsls	r2, r2, #2
 8025406:	300c      	adds	r0, #12
 8025408:	f7fe fc62 	bl	8023cd0 <memcpy>
 802540c:	0021      	movs	r1, r4
 802540e:	9801      	ldr	r0, [sp, #4]
 8025410:	f7ff ffa6 	bl	8025360 <_Bfree>
 8025414:	003c      	movs	r4, r7
 8025416:	1d2b      	adds	r3, r5, #4
 8025418:	009b      	lsls	r3, r3, #2
 802541a:	18e3      	adds	r3, r4, r3
 802541c:	3501      	adds	r5, #1
 802541e:	605e      	str	r6, [r3, #4]
 8025420:	6125      	str	r5, [r4, #16]
 8025422:	0020      	movs	r0, r4
 8025424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025426:	46c0      	nop			@ (mov r8, r8)
 8025428:	0802b9c1 	.word	0x0802b9c1
 802542c:	0802ba32 	.word	0x0802ba32

08025430 <__s2b>:
 8025430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025432:	0007      	movs	r7, r0
 8025434:	0018      	movs	r0, r3
 8025436:	000c      	movs	r4, r1
 8025438:	3008      	adds	r0, #8
 802543a:	2109      	movs	r1, #9
 802543c:	9301      	str	r3, [sp, #4]
 802543e:	0015      	movs	r5, r2
 8025440:	f7da ff3a 	bl	80002b8 <__divsi3>
 8025444:	2301      	movs	r3, #1
 8025446:	2100      	movs	r1, #0
 8025448:	4283      	cmp	r3, r0
 802544a:	db0a      	blt.n	8025462 <__s2b+0x32>
 802544c:	0038      	movs	r0, r7
 802544e:	f7ff ff43 	bl	80252d8 <_Balloc>
 8025452:	1e01      	subs	r1, r0, #0
 8025454:	d108      	bne.n	8025468 <__s2b+0x38>
 8025456:	000a      	movs	r2, r1
 8025458:	4b19      	ldr	r3, [pc, #100]	@ (80254c0 <__s2b+0x90>)
 802545a:	481a      	ldr	r0, [pc, #104]	@ (80254c4 <__s2b+0x94>)
 802545c:	31d3      	adds	r1, #211	@ 0xd3
 802545e:	f001 f81b 	bl	8026498 <__assert_func>
 8025462:	005b      	lsls	r3, r3, #1
 8025464:	3101      	adds	r1, #1
 8025466:	e7ef      	b.n	8025448 <__s2b+0x18>
 8025468:	9b08      	ldr	r3, [sp, #32]
 802546a:	6143      	str	r3, [r0, #20]
 802546c:	2301      	movs	r3, #1
 802546e:	6103      	str	r3, [r0, #16]
 8025470:	2d09      	cmp	r5, #9
 8025472:	dd18      	ble.n	80254a6 <__s2b+0x76>
 8025474:	0023      	movs	r3, r4
 8025476:	3309      	adds	r3, #9
 8025478:	001e      	movs	r6, r3
 802547a:	9300      	str	r3, [sp, #0]
 802547c:	1964      	adds	r4, r4, r5
 802547e:	7833      	ldrb	r3, [r6, #0]
 8025480:	220a      	movs	r2, #10
 8025482:	0038      	movs	r0, r7
 8025484:	3b30      	subs	r3, #48	@ 0x30
 8025486:	f7ff ff8f 	bl	80253a8 <__multadd>
 802548a:	3601      	adds	r6, #1
 802548c:	0001      	movs	r1, r0
 802548e:	42a6      	cmp	r6, r4
 8025490:	d1f5      	bne.n	802547e <__s2b+0x4e>
 8025492:	002c      	movs	r4, r5
 8025494:	9b00      	ldr	r3, [sp, #0]
 8025496:	3c08      	subs	r4, #8
 8025498:	191c      	adds	r4, r3, r4
 802549a:	002e      	movs	r6, r5
 802549c:	9b01      	ldr	r3, [sp, #4]
 802549e:	429e      	cmp	r6, r3
 80254a0:	db04      	blt.n	80254ac <__s2b+0x7c>
 80254a2:	0008      	movs	r0, r1
 80254a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80254a6:	2509      	movs	r5, #9
 80254a8:	340a      	adds	r4, #10
 80254aa:	e7f6      	b.n	802549a <__s2b+0x6a>
 80254ac:	1b63      	subs	r3, r4, r5
 80254ae:	5d9b      	ldrb	r3, [r3, r6]
 80254b0:	220a      	movs	r2, #10
 80254b2:	0038      	movs	r0, r7
 80254b4:	3b30      	subs	r3, #48	@ 0x30
 80254b6:	f7ff ff77 	bl	80253a8 <__multadd>
 80254ba:	3601      	adds	r6, #1
 80254bc:	0001      	movs	r1, r0
 80254be:	e7ed      	b.n	802549c <__s2b+0x6c>
 80254c0:	0802b9c1 	.word	0x0802b9c1
 80254c4:	0802ba32 	.word	0x0802ba32

080254c8 <__hi0bits>:
 80254c8:	2280      	movs	r2, #128	@ 0x80
 80254ca:	0003      	movs	r3, r0
 80254cc:	0252      	lsls	r2, r2, #9
 80254ce:	2000      	movs	r0, #0
 80254d0:	4293      	cmp	r3, r2
 80254d2:	d201      	bcs.n	80254d8 <__hi0bits+0x10>
 80254d4:	041b      	lsls	r3, r3, #16
 80254d6:	3010      	adds	r0, #16
 80254d8:	2280      	movs	r2, #128	@ 0x80
 80254da:	0452      	lsls	r2, r2, #17
 80254dc:	4293      	cmp	r3, r2
 80254de:	d201      	bcs.n	80254e4 <__hi0bits+0x1c>
 80254e0:	3008      	adds	r0, #8
 80254e2:	021b      	lsls	r3, r3, #8
 80254e4:	2280      	movs	r2, #128	@ 0x80
 80254e6:	0552      	lsls	r2, r2, #21
 80254e8:	4293      	cmp	r3, r2
 80254ea:	d201      	bcs.n	80254f0 <__hi0bits+0x28>
 80254ec:	3004      	adds	r0, #4
 80254ee:	011b      	lsls	r3, r3, #4
 80254f0:	2280      	movs	r2, #128	@ 0x80
 80254f2:	05d2      	lsls	r2, r2, #23
 80254f4:	4293      	cmp	r3, r2
 80254f6:	d201      	bcs.n	80254fc <__hi0bits+0x34>
 80254f8:	3002      	adds	r0, #2
 80254fa:	009b      	lsls	r3, r3, #2
 80254fc:	2b00      	cmp	r3, #0
 80254fe:	db03      	blt.n	8025508 <__hi0bits+0x40>
 8025500:	3001      	adds	r0, #1
 8025502:	4213      	tst	r3, r2
 8025504:	d100      	bne.n	8025508 <__hi0bits+0x40>
 8025506:	2020      	movs	r0, #32
 8025508:	4770      	bx	lr

0802550a <__lo0bits>:
 802550a:	6803      	ldr	r3, [r0, #0]
 802550c:	0001      	movs	r1, r0
 802550e:	2207      	movs	r2, #7
 8025510:	0018      	movs	r0, r3
 8025512:	4010      	ands	r0, r2
 8025514:	4213      	tst	r3, r2
 8025516:	d00d      	beq.n	8025534 <__lo0bits+0x2a>
 8025518:	3a06      	subs	r2, #6
 802551a:	2000      	movs	r0, #0
 802551c:	4213      	tst	r3, r2
 802551e:	d105      	bne.n	802552c <__lo0bits+0x22>
 8025520:	3002      	adds	r0, #2
 8025522:	4203      	tst	r3, r0
 8025524:	d003      	beq.n	802552e <__lo0bits+0x24>
 8025526:	40d3      	lsrs	r3, r2
 8025528:	0010      	movs	r0, r2
 802552a:	600b      	str	r3, [r1, #0]
 802552c:	4770      	bx	lr
 802552e:	089b      	lsrs	r3, r3, #2
 8025530:	600b      	str	r3, [r1, #0]
 8025532:	e7fb      	b.n	802552c <__lo0bits+0x22>
 8025534:	b29a      	uxth	r2, r3
 8025536:	2a00      	cmp	r2, #0
 8025538:	d101      	bne.n	802553e <__lo0bits+0x34>
 802553a:	2010      	movs	r0, #16
 802553c:	0c1b      	lsrs	r3, r3, #16
 802553e:	b2da      	uxtb	r2, r3
 8025540:	2a00      	cmp	r2, #0
 8025542:	d101      	bne.n	8025548 <__lo0bits+0x3e>
 8025544:	3008      	adds	r0, #8
 8025546:	0a1b      	lsrs	r3, r3, #8
 8025548:	071a      	lsls	r2, r3, #28
 802554a:	d101      	bne.n	8025550 <__lo0bits+0x46>
 802554c:	3004      	adds	r0, #4
 802554e:	091b      	lsrs	r3, r3, #4
 8025550:	079a      	lsls	r2, r3, #30
 8025552:	d101      	bne.n	8025558 <__lo0bits+0x4e>
 8025554:	3002      	adds	r0, #2
 8025556:	089b      	lsrs	r3, r3, #2
 8025558:	07da      	lsls	r2, r3, #31
 802555a:	d4e9      	bmi.n	8025530 <__lo0bits+0x26>
 802555c:	3001      	adds	r0, #1
 802555e:	085b      	lsrs	r3, r3, #1
 8025560:	d1e6      	bne.n	8025530 <__lo0bits+0x26>
 8025562:	2020      	movs	r0, #32
 8025564:	e7e2      	b.n	802552c <__lo0bits+0x22>
	...

08025568 <__i2b>:
 8025568:	b510      	push	{r4, lr}
 802556a:	000c      	movs	r4, r1
 802556c:	2101      	movs	r1, #1
 802556e:	f7ff feb3 	bl	80252d8 <_Balloc>
 8025572:	2800      	cmp	r0, #0
 8025574:	d107      	bne.n	8025586 <__i2b+0x1e>
 8025576:	2146      	movs	r1, #70	@ 0x46
 8025578:	4c05      	ldr	r4, [pc, #20]	@ (8025590 <__i2b+0x28>)
 802557a:	0002      	movs	r2, r0
 802557c:	4b05      	ldr	r3, [pc, #20]	@ (8025594 <__i2b+0x2c>)
 802557e:	0020      	movs	r0, r4
 8025580:	31ff      	adds	r1, #255	@ 0xff
 8025582:	f000 ff89 	bl	8026498 <__assert_func>
 8025586:	2301      	movs	r3, #1
 8025588:	6144      	str	r4, [r0, #20]
 802558a:	6103      	str	r3, [r0, #16]
 802558c:	bd10      	pop	{r4, pc}
 802558e:	46c0      	nop			@ (mov r8, r8)
 8025590:	0802ba32 	.word	0x0802ba32
 8025594:	0802b9c1 	.word	0x0802b9c1

08025598 <__multiply>:
 8025598:	b5f0      	push	{r4, r5, r6, r7, lr}
 802559a:	0014      	movs	r4, r2
 802559c:	690a      	ldr	r2, [r1, #16]
 802559e:	6923      	ldr	r3, [r4, #16]
 80255a0:	000d      	movs	r5, r1
 80255a2:	b08b      	sub	sp, #44	@ 0x2c
 80255a4:	429a      	cmp	r2, r3
 80255a6:	db02      	blt.n	80255ae <__multiply+0x16>
 80255a8:	0023      	movs	r3, r4
 80255aa:	000c      	movs	r4, r1
 80255ac:	001d      	movs	r5, r3
 80255ae:	6927      	ldr	r7, [r4, #16]
 80255b0:	692e      	ldr	r6, [r5, #16]
 80255b2:	6861      	ldr	r1, [r4, #4]
 80255b4:	19bb      	adds	r3, r7, r6
 80255b6:	9303      	str	r3, [sp, #12]
 80255b8:	68a3      	ldr	r3, [r4, #8]
 80255ba:	19ba      	adds	r2, r7, r6
 80255bc:	4293      	cmp	r3, r2
 80255be:	da00      	bge.n	80255c2 <__multiply+0x2a>
 80255c0:	3101      	adds	r1, #1
 80255c2:	f7ff fe89 	bl	80252d8 <_Balloc>
 80255c6:	9002      	str	r0, [sp, #8]
 80255c8:	2800      	cmp	r0, #0
 80255ca:	d106      	bne.n	80255da <__multiply+0x42>
 80255cc:	21b1      	movs	r1, #177	@ 0xb1
 80255ce:	4b49      	ldr	r3, [pc, #292]	@ (80256f4 <__multiply+0x15c>)
 80255d0:	4849      	ldr	r0, [pc, #292]	@ (80256f8 <__multiply+0x160>)
 80255d2:	9a02      	ldr	r2, [sp, #8]
 80255d4:	0049      	lsls	r1, r1, #1
 80255d6:	f000 ff5f 	bl	8026498 <__assert_func>
 80255da:	9b02      	ldr	r3, [sp, #8]
 80255dc:	2200      	movs	r2, #0
 80255de:	3314      	adds	r3, #20
 80255e0:	469c      	mov	ip, r3
 80255e2:	19bb      	adds	r3, r7, r6
 80255e4:	009b      	lsls	r3, r3, #2
 80255e6:	4463      	add	r3, ip
 80255e8:	9304      	str	r3, [sp, #16]
 80255ea:	4663      	mov	r3, ip
 80255ec:	9904      	ldr	r1, [sp, #16]
 80255ee:	428b      	cmp	r3, r1
 80255f0:	d32a      	bcc.n	8025648 <__multiply+0xb0>
 80255f2:	0023      	movs	r3, r4
 80255f4:	00bf      	lsls	r7, r7, #2
 80255f6:	3314      	adds	r3, #20
 80255f8:	3514      	adds	r5, #20
 80255fa:	9308      	str	r3, [sp, #32]
 80255fc:	00b6      	lsls	r6, r6, #2
 80255fe:	19db      	adds	r3, r3, r7
 8025600:	9305      	str	r3, [sp, #20]
 8025602:	19ab      	adds	r3, r5, r6
 8025604:	9309      	str	r3, [sp, #36]	@ 0x24
 8025606:	2304      	movs	r3, #4
 8025608:	9306      	str	r3, [sp, #24]
 802560a:	0023      	movs	r3, r4
 802560c:	9a05      	ldr	r2, [sp, #20]
 802560e:	3315      	adds	r3, #21
 8025610:	9501      	str	r5, [sp, #4]
 8025612:	429a      	cmp	r2, r3
 8025614:	d305      	bcc.n	8025622 <__multiply+0x8a>
 8025616:	1b13      	subs	r3, r2, r4
 8025618:	3b15      	subs	r3, #21
 802561a:	089b      	lsrs	r3, r3, #2
 802561c:	3301      	adds	r3, #1
 802561e:	009b      	lsls	r3, r3, #2
 8025620:	9306      	str	r3, [sp, #24]
 8025622:	9b01      	ldr	r3, [sp, #4]
 8025624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025626:	4293      	cmp	r3, r2
 8025628:	d310      	bcc.n	802564c <__multiply+0xb4>
 802562a:	9b03      	ldr	r3, [sp, #12]
 802562c:	2b00      	cmp	r3, #0
 802562e:	dd05      	ble.n	802563c <__multiply+0xa4>
 8025630:	9b04      	ldr	r3, [sp, #16]
 8025632:	3b04      	subs	r3, #4
 8025634:	9304      	str	r3, [sp, #16]
 8025636:	681b      	ldr	r3, [r3, #0]
 8025638:	2b00      	cmp	r3, #0
 802563a:	d056      	beq.n	80256ea <__multiply+0x152>
 802563c:	9b02      	ldr	r3, [sp, #8]
 802563e:	9a03      	ldr	r2, [sp, #12]
 8025640:	0018      	movs	r0, r3
 8025642:	611a      	str	r2, [r3, #16]
 8025644:	b00b      	add	sp, #44	@ 0x2c
 8025646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025648:	c304      	stmia	r3!, {r2}
 802564a:	e7cf      	b.n	80255ec <__multiply+0x54>
 802564c:	9b01      	ldr	r3, [sp, #4]
 802564e:	6818      	ldr	r0, [r3, #0]
 8025650:	b280      	uxth	r0, r0
 8025652:	2800      	cmp	r0, #0
 8025654:	d01e      	beq.n	8025694 <__multiply+0xfc>
 8025656:	4667      	mov	r7, ip
 8025658:	2500      	movs	r5, #0
 802565a:	9e08      	ldr	r6, [sp, #32]
 802565c:	ce02      	ldmia	r6!, {r1}
 802565e:	683b      	ldr	r3, [r7, #0]
 8025660:	9307      	str	r3, [sp, #28]
 8025662:	b28b      	uxth	r3, r1
 8025664:	4343      	muls	r3, r0
 8025666:	001a      	movs	r2, r3
 8025668:	466b      	mov	r3, sp
 802566a:	0c09      	lsrs	r1, r1, #16
 802566c:	8b9b      	ldrh	r3, [r3, #28]
 802566e:	4341      	muls	r1, r0
 8025670:	18d3      	adds	r3, r2, r3
 8025672:	9a07      	ldr	r2, [sp, #28]
 8025674:	195b      	adds	r3, r3, r5
 8025676:	0c12      	lsrs	r2, r2, #16
 8025678:	1889      	adds	r1, r1, r2
 802567a:	0c1a      	lsrs	r2, r3, #16
 802567c:	188a      	adds	r2, r1, r2
 802567e:	b29b      	uxth	r3, r3
 8025680:	0c15      	lsrs	r5, r2, #16
 8025682:	0412      	lsls	r2, r2, #16
 8025684:	431a      	orrs	r2, r3
 8025686:	9b05      	ldr	r3, [sp, #20]
 8025688:	c704      	stmia	r7!, {r2}
 802568a:	42b3      	cmp	r3, r6
 802568c:	d8e6      	bhi.n	802565c <__multiply+0xc4>
 802568e:	4663      	mov	r3, ip
 8025690:	9a06      	ldr	r2, [sp, #24]
 8025692:	509d      	str	r5, [r3, r2]
 8025694:	9b01      	ldr	r3, [sp, #4]
 8025696:	6818      	ldr	r0, [r3, #0]
 8025698:	0c00      	lsrs	r0, r0, #16
 802569a:	d020      	beq.n	80256de <__multiply+0x146>
 802569c:	4663      	mov	r3, ip
 802569e:	0025      	movs	r5, r4
 80256a0:	4661      	mov	r1, ip
 80256a2:	2700      	movs	r7, #0
 80256a4:	681b      	ldr	r3, [r3, #0]
 80256a6:	3514      	adds	r5, #20
 80256a8:	682a      	ldr	r2, [r5, #0]
 80256aa:	680e      	ldr	r6, [r1, #0]
 80256ac:	b292      	uxth	r2, r2
 80256ae:	4342      	muls	r2, r0
 80256b0:	0c36      	lsrs	r6, r6, #16
 80256b2:	1992      	adds	r2, r2, r6
 80256b4:	19d2      	adds	r2, r2, r7
 80256b6:	0416      	lsls	r6, r2, #16
 80256b8:	b29b      	uxth	r3, r3
 80256ba:	431e      	orrs	r6, r3
 80256bc:	600e      	str	r6, [r1, #0]
 80256be:	cd40      	ldmia	r5!, {r6}
 80256c0:	684b      	ldr	r3, [r1, #4]
 80256c2:	0c36      	lsrs	r6, r6, #16
 80256c4:	4346      	muls	r6, r0
 80256c6:	b29b      	uxth	r3, r3
 80256c8:	0c12      	lsrs	r2, r2, #16
 80256ca:	18f3      	adds	r3, r6, r3
 80256cc:	189b      	adds	r3, r3, r2
 80256ce:	9a05      	ldr	r2, [sp, #20]
 80256d0:	0c1f      	lsrs	r7, r3, #16
 80256d2:	3104      	adds	r1, #4
 80256d4:	42aa      	cmp	r2, r5
 80256d6:	d8e7      	bhi.n	80256a8 <__multiply+0x110>
 80256d8:	4662      	mov	r2, ip
 80256da:	9906      	ldr	r1, [sp, #24]
 80256dc:	5053      	str	r3, [r2, r1]
 80256de:	9b01      	ldr	r3, [sp, #4]
 80256e0:	3304      	adds	r3, #4
 80256e2:	9301      	str	r3, [sp, #4]
 80256e4:	2304      	movs	r3, #4
 80256e6:	449c      	add	ip, r3
 80256e8:	e79b      	b.n	8025622 <__multiply+0x8a>
 80256ea:	9b03      	ldr	r3, [sp, #12]
 80256ec:	3b01      	subs	r3, #1
 80256ee:	9303      	str	r3, [sp, #12]
 80256f0:	e79b      	b.n	802562a <__multiply+0x92>
 80256f2:	46c0      	nop			@ (mov r8, r8)
 80256f4:	0802b9c1 	.word	0x0802b9c1
 80256f8:	0802ba32 	.word	0x0802ba32

080256fc <__pow5mult>:
 80256fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80256fe:	2303      	movs	r3, #3
 8025700:	0015      	movs	r5, r2
 8025702:	0007      	movs	r7, r0
 8025704:	000e      	movs	r6, r1
 8025706:	401a      	ands	r2, r3
 8025708:	421d      	tst	r5, r3
 802570a:	d008      	beq.n	802571e <__pow5mult+0x22>
 802570c:	4925      	ldr	r1, [pc, #148]	@ (80257a4 <__pow5mult+0xa8>)
 802570e:	3a01      	subs	r2, #1
 8025710:	0092      	lsls	r2, r2, #2
 8025712:	5852      	ldr	r2, [r2, r1]
 8025714:	2300      	movs	r3, #0
 8025716:	0031      	movs	r1, r6
 8025718:	f7ff fe46 	bl	80253a8 <__multadd>
 802571c:	0006      	movs	r6, r0
 802571e:	10ad      	asrs	r5, r5, #2
 8025720:	d03d      	beq.n	802579e <__pow5mult+0xa2>
 8025722:	69fc      	ldr	r4, [r7, #28]
 8025724:	2c00      	cmp	r4, #0
 8025726:	d10f      	bne.n	8025748 <__pow5mult+0x4c>
 8025728:	2010      	movs	r0, #16
 802572a:	f7ff fd07 	bl	802513c <malloc>
 802572e:	1e02      	subs	r2, r0, #0
 8025730:	61f8      	str	r0, [r7, #28]
 8025732:	d105      	bne.n	8025740 <__pow5mult+0x44>
 8025734:	21b4      	movs	r1, #180	@ 0xb4
 8025736:	4b1c      	ldr	r3, [pc, #112]	@ (80257a8 <__pow5mult+0xac>)
 8025738:	481c      	ldr	r0, [pc, #112]	@ (80257ac <__pow5mult+0xb0>)
 802573a:	31ff      	adds	r1, #255	@ 0xff
 802573c:	f000 feac 	bl	8026498 <__assert_func>
 8025740:	6044      	str	r4, [r0, #4]
 8025742:	6084      	str	r4, [r0, #8]
 8025744:	6004      	str	r4, [r0, #0]
 8025746:	60c4      	str	r4, [r0, #12]
 8025748:	69fb      	ldr	r3, [r7, #28]
 802574a:	689c      	ldr	r4, [r3, #8]
 802574c:	9301      	str	r3, [sp, #4]
 802574e:	2c00      	cmp	r4, #0
 8025750:	d108      	bne.n	8025764 <__pow5mult+0x68>
 8025752:	0038      	movs	r0, r7
 8025754:	4916      	ldr	r1, [pc, #88]	@ (80257b0 <__pow5mult+0xb4>)
 8025756:	f7ff ff07 	bl	8025568 <__i2b>
 802575a:	9b01      	ldr	r3, [sp, #4]
 802575c:	0004      	movs	r4, r0
 802575e:	6098      	str	r0, [r3, #8]
 8025760:	2300      	movs	r3, #0
 8025762:	6003      	str	r3, [r0, #0]
 8025764:	2301      	movs	r3, #1
 8025766:	421d      	tst	r5, r3
 8025768:	d00a      	beq.n	8025780 <__pow5mult+0x84>
 802576a:	0031      	movs	r1, r6
 802576c:	0022      	movs	r2, r4
 802576e:	0038      	movs	r0, r7
 8025770:	f7ff ff12 	bl	8025598 <__multiply>
 8025774:	0031      	movs	r1, r6
 8025776:	9001      	str	r0, [sp, #4]
 8025778:	0038      	movs	r0, r7
 802577a:	f7ff fdf1 	bl	8025360 <_Bfree>
 802577e:	9e01      	ldr	r6, [sp, #4]
 8025780:	106d      	asrs	r5, r5, #1
 8025782:	d00c      	beq.n	802579e <__pow5mult+0xa2>
 8025784:	6820      	ldr	r0, [r4, #0]
 8025786:	2800      	cmp	r0, #0
 8025788:	d107      	bne.n	802579a <__pow5mult+0x9e>
 802578a:	0022      	movs	r2, r4
 802578c:	0021      	movs	r1, r4
 802578e:	0038      	movs	r0, r7
 8025790:	f7ff ff02 	bl	8025598 <__multiply>
 8025794:	2300      	movs	r3, #0
 8025796:	6020      	str	r0, [r4, #0]
 8025798:	6003      	str	r3, [r0, #0]
 802579a:	0004      	movs	r4, r0
 802579c:	e7e2      	b.n	8025764 <__pow5mult+0x68>
 802579e:	0030      	movs	r0, r6
 80257a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80257a2:	46c0      	nop			@ (mov r8, r8)
 80257a4:	0802ba8c 	.word	0x0802ba8c
 80257a8:	0802b952 	.word	0x0802b952
 80257ac:	0802ba32 	.word	0x0802ba32
 80257b0:	00000271 	.word	0x00000271

080257b4 <__lshift>:
 80257b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257b6:	000c      	movs	r4, r1
 80257b8:	0016      	movs	r6, r2
 80257ba:	6923      	ldr	r3, [r4, #16]
 80257bc:	1157      	asrs	r7, r2, #5
 80257be:	b085      	sub	sp, #20
 80257c0:	18fb      	adds	r3, r7, r3
 80257c2:	9301      	str	r3, [sp, #4]
 80257c4:	3301      	adds	r3, #1
 80257c6:	9300      	str	r3, [sp, #0]
 80257c8:	6849      	ldr	r1, [r1, #4]
 80257ca:	68a3      	ldr	r3, [r4, #8]
 80257cc:	9002      	str	r0, [sp, #8]
 80257ce:	9a00      	ldr	r2, [sp, #0]
 80257d0:	4293      	cmp	r3, r2
 80257d2:	db10      	blt.n	80257f6 <__lshift+0x42>
 80257d4:	9802      	ldr	r0, [sp, #8]
 80257d6:	f7ff fd7f 	bl	80252d8 <_Balloc>
 80257da:	2300      	movs	r3, #0
 80257dc:	0001      	movs	r1, r0
 80257de:	0005      	movs	r5, r0
 80257e0:	001a      	movs	r2, r3
 80257e2:	3114      	adds	r1, #20
 80257e4:	4298      	cmp	r0, r3
 80257e6:	d10c      	bne.n	8025802 <__lshift+0x4e>
 80257e8:	21ef      	movs	r1, #239	@ 0xef
 80257ea:	002a      	movs	r2, r5
 80257ec:	4b25      	ldr	r3, [pc, #148]	@ (8025884 <__lshift+0xd0>)
 80257ee:	4826      	ldr	r0, [pc, #152]	@ (8025888 <__lshift+0xd4>)
 80257f0:	0049      	lsls	r1, r1, #1
 80257f2:	f000 fe51 	bl	8026498 <__assert_func>
 80257f6:	3101      	adds	r1, #1
 80257f8:	005b      	lsls	r3, r3, #1
 80257fa:	e7e8      	b.n	80257ce <__lshift+0x1a>
 80257fc:	0098      	lsls	r0, r3, #2
 80257fe:	500a      	str	r2, [r1, r0]
 8025800:	3301      	adds	r3, #1
 8025802:	42bb      	cmp	r3, r7
 8025804:	dbfa      	blt.n	80257fc <__lshift+0x48>
 8025806:	43fb      	mvns	r3, r7
 8025808:	17db      	asrs	r3, r3, #31
 802580a:	401f      	ands	r7, r3
 802580c:	00bf      	lsls	r7, r7, #2
 802580e:	0023      	movs	r3, r4
 8025810:	201f      	movs	r0, #31
 8025812:	19c9      	adds	r1, r1, r7
 8025814:	0037      	movs	r7, r6
 8025816:	6922      	ldr	r2, [r4, #16]
 8025818:	3314      	adds	r3, #20
 802581a:	0092      	lsls	r2, r2, #2
 802581c:	189a      	adds	r2, r3, r2
 802581e:	4007      	ands	r7, r0
 8025820:	4206      	tst	r6, r0
 8025822:	d029      	beq.n	8025878 <__lshift+0xc4>
 8025824:	3001      	adds	r0, #1
 8025826:	1bc0      	subs	r0, r0, r7
 8025828:	9003      	str	r0, [sp, #12]
 802582a:	468c      	mov	ip, r1
 802582c:	2000      	movs	r0, #0
 802582e:	681e      	ldr	r6, [r3, #0]
 8025830:	40be      	lsls	r6, r7
 8025832:	4306      	orrs	r6, r0
 8025834:	4660      	mov	r0, ip
 8025836:	c040      	stmia	r0!, {r6}
 8025838:	4684      	mov	ip, r0
 802583a:	9e03      	ldr	r6, [sp, #12]
 802583c:	cb01      	ldmia	r3!, {r0}
 802583e:	40f0      	lsrs	r0, r6
 8025840:	429a      	cmp	r2, r3
 8025842:	d8f4      	bhi.n	802582e <__lshift+0x7a>
 8025844:	0026      	movs	r6, r4
 8025846:	3615      	adds	r6, #21
 8025848:	2304      	movs	r3, #4
 802584a:	42b2      	cmp	r2, r6
 802584c:	d304      	bcc.n	8025858 <__lshift+0xa4>
 802584e:	1b13      	subs	r3, r2, r4
 8025850:	3b15      	subs	r3, #21
 8025852:	089b      	lsrs	r3, r3, #2
 8025854:	3301      	adds	r3, #1
 8025856:	009b      	lsls	r3, r3, #2
 8025858:	50c8      	str	r0, [r1, r3]
 802585a:	2800      	cmp	r0, #0
 802585c:	d002      	beq.n	8025864 <__lshift+0xb0>
 802585e:	9b01      	ldr	r3, [sp, #4]
 8025860:	3302      	adds	r3, #2
 8025862:	9300      	str	r3, [sp, #0]
 8025864:	9b00      	ldr	r3, [sp, #0]
 8025866:	9802      	ldr	r0, [sp, #8]
 8025868:	3b01      	subs	r3, #1
 802586a:	0021      	movs	r1, r4
 802586c:	612b      	str	r3, [r5, #16]
 802586e:	f7ff fd77 	bl	8025360 <_Bfree>
 8025872:	0028      	movs	r0, r5
 8025874:	b005      	add	sp, #20
 8025876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025878:	cb01      	ldmia	r3!, {r0}
 802587a:	c101      	stmia	r1!, {r0}
 802587c:	429a      	cmp	r2, r3
 802587e:	d8fb      	bhi.n	8025878 <__lshift+0xc4>
 8025880:	e7f0      	b.n	8025864 <__lshift+0xb0>
 8025882:	46c0      	nop			@ (mov r8, r8)
 8025884:	0802b9c1 	.word	0x0802b9c1
 8025888:	0802ba32 	.word	0x0802ba32

0802588c <__mcmp>:
 802588c:	b530      	push	{r4, r5, lr}
 802588e:	690b      	ldr	r3, [r1, #16]
 8025890:	6904      	ldr	r4, [r0, #16]
 8025892:	0002      	movs	r2, r0
 8025894:	1ae0      	subs	r0, r4, r3
 8025896:	429c      	cmp	r4, r3
 8025898:	d10f      	bne.n	80258ba <__mcmp+0x2e>
 802589a:	3214      	adds	r2, #20
 802589c:	009b      	lsls	r3, r3, #2
 802589e:	3114      	adds	r1, #20
 80258a0:	0014      	movs	r4, r2
 80258a2:	18c9      	adds	r1, r1, r3
 80258a4:	18d2      	adds	r2, r2, r3
 80258a6:	3a04      	subs	r2, #4
 80258a8:	3904      	subs	r1, #4
 80258aa:	6815      	ldr	r5, [r2, #0]
 80258ac:	680b      	ldr	r3, [r1, #0]
 80258ae:	429d      	cmp	r5, r3
 80258b0:	d004      	beq.n	80258bc <__mcmp+0x30>
 80258b2:	2001      	movs	r0, #1
 80258b4:	429d      	cmp	r5, r3
 80258b6:	d200      	bcs.n	80258ba <__mcmp+0x2e>
 80258b8:	3802      	subs	r0, #2
 80258ba:	bd30      	pop	{r4, r5, pc}
 80258bc:	4294      	cmp	r4, r2
 80258be:	d3f2      	bcc.n	80258a6 <__mcmp+0x1a>
 80258c0:	e7fb      	b.n	80258ba <__mcmp+0x2e>
	...

080258c4 <__mdiff>:
 80258c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258c6:	000c      	movs	r4, r1
 80258c8:	b087      	sub	sp, #28
 80258ca:	9000      	str	r0, [sp, #0]
 80258cc:	0011      	movs	r1, r2
 80258ce:	0020      	movs	r0, r4
 80258d0:	0017      	movs	r7, r2
 80258d2:	f7ff ffdb 	bl	802588c <__mcmp>
 80258d6:	1e05      	subs	r5, r0, #0
 80258d8:	d110      	bne.n	80258fc <__mdiff+0x38>
 80258da:	0001      	movs	r1, r0
 80258dc:	9800      	ldr	r0, [sp, #0]
 80258de:	f7ff fcfb 	bl	80252d8 <_Balloc>
 80258e2:	1e02      	subs	r2, r0, #0
 80258e4:	d104      	bne.n	80258f0 <__mdiff+0x2c>
 80258e6:	4b40      	ldr	r3, [pc, #256]	@ (80259e8 <__mdiff+0x124>)
 80258e8:	4840      	ldr	r0, [pc, #256]	@ (80259ec <__mdiff+0x128>)
 80258ea:	4941      	ldr	r1, [pc, #260]	@ (80259f0 <__mdiff+0x12c>)
 80258ec:	f000 fdd4 	bl	8026498 <__assert_func>
 80258f0:	2301      	movs	r3, #1
 80258f2:	6145      	str	r5, [r0, #20]
 80258f4:	6103      	str	r3, [r0, #16]
 80258f6:	0010      	movs	r0, r2
 80258f8:	b007      	add	sp, #28
 80258fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80258fc:	2600      	movs	r6, #0
 80258fe:	42b0      	cmp	r0, r6
 8025900:	da03      	bge.n	802590a <__mdiff+0x46>
 8025902:	0023      	movs	r3, r4
 8025904:	003c      	movs	r4, r7
 8025906:	001f      	movs	r7, r3
 8025908:	3601      	adds	r6, #1
 802590a:	6861      	ldr	r1, [r4, #4]
 802590c:	9800      	ldr	r0, [sp, #0]
 802590e:	f7ff fce3 	bl	80252d8 <_Balloc>
 8025912:	1e02      	subs	r2, r0, #0
 8025914:	d103      	bne.n	802591e <__mdiff+0x5a>
 8025916:	4b34      	ldr	r3, [pc, #208]	@ (80259e8 <__mdiff+0x124>)
 8025918:	4834      	ldr	r0, [pc, #208]	@ (80259ec <__mdiff+0x128>)
 802591a:	4936      	ldr	r1, [pc, #216]	@ (80259f4 <__mdiff+0x130>)
 802591c:	e7e6      	b.n	80258ec <__mdiff+0x28>
 802591e:	6923      	ldr	r3, [r4, #16]
 8025920:	3414      	adds	r4, #20
 8025922:	9300      	str	r3, [sp, #0]
 8025924:	009b      	lsls	r3, r3, #2
 8025926:	18e3      	adds	r3, r4, r3
 8025928:	0021      	movs	r1, r4
 802592a:	9401      	str	r4, [sp, #4]
 802592c:	003c      	movs	r4, r7
 802592e:	9302      	str	r3, [sp, #8]
 8025930:	693b      	ldr	r3, [r7, #16]
 8025932:	3414      	adds	r4, #20
 8025934:	009b      	lsls	r3, r3, #2
 8025936:	18e3      	adds	r3, r4, r3
 8025938:	9303      	str	r3, [sp, #12]
 802593a:	0003      	movs	r3, r0
 802593c:	60c6      	str	r6, [r0, #12]
 802593e:	468c      	mov	ip, r1
 8025940:	2000      	movs	r0, #0
 8025942:	3314      	adds	r3, #20
 8025944:	9304      	str	r3, [sp, #16]
 8025946:	9305      	str	r3, [sp, #20]
 8025948:	4663      	mov	r3, ip
 802594a:	cb20      	ldmia	r3!, {r5}
 802594c:	b2a9      	uxth	r1, r5
 802594e:	000e      	movs	r6, r1
 8025950:	469c      	mov	ip, r3
 8025952:	cc08      	ldmia	r4!, {r3}
 8025954:	0c2d      	lsrs	r5, r5, #16
 8025956:	b299      	uxth	r1, r3
 8025958:	1a71      	subs	r1, r6, r1
 802595a:	1809      	adds	r1, r1, r0
 802595c:	0c1b      	lsrs	r3, r3, #16
 802595e:	1408      	asrs	r0, r1, #16
 8025960:	1aeb      	subs	r3, r5, r3
 8025962:	181b      	adds	r3, r3, r0
 8025964:	1418      	asrs	r0, r3, #16
 8025966:	b289      	uxth	r1, r1
 8025968:	041b      	lsls	r3, r3, #16
 802596a:	4319      	orrs	r1, r3
 802596c:	9b05      	ldr	r3, [sp, #20]
 802596e:	c302      	stmia	r3!, {r1}
 8025970:	9305      	str	r3, [sp, #20]
 8025972:	9b03      	ldr	r3, [sp, #12]
 8025974:	42a3      	cmp	r3, r4
 8025976:	d8e7      	bhi.n	8025948 <__mdiff+0x84>
 8025978:	0039      	movs	r1, r7
 802597a:	9c03      	ldr	r4, [sp, #12]
 802597c:	3115      	adds	r1, #21
 802597e:	2304      	movs	r3, #4
 8025980:	428c      	cmp	r4, r1
 8025982:	d304      	bcc.n	802598e <__mdiff+0xca>
 8025984:	1be3      	subs	r3, r4, r7
 8025986:	3b15      	subs	r3, #21
 8025988:	089b      	lsrs	r3, r3, #2
 802598a:	3301      	adds	r3, #1
 802598c:	009b      	lsls	r3, r3, #2
 802598e:	9901      	ldr	r1, [sp, #4]
 8025990:	18cd      	adds	r5, r1, r3
 8025992:	9904      	ldr	r1, [sp, #16]
 8025994:	002e      	movs	r6, r5
 8025996:	18cb      	adds	r3, r1, r3
 8025998:	001f      	movs	r7, r3
 802599a:	9902      	ldr	r1, [sp, #8]
 802599c:	428e      	cmp	r6, r1
 802599e:	d311      	bcc.n	80259c4 <__mdiff+0x100>
 80259a0:	9c02      	ldr	r4, [sp, #8]
 80259a2:	1ee9      	subs	r1, r5, #3
 80259a4:	2000      	movs	r0, #0
 80259a6:	428c      	cmp	r4, r1
 80259a8:	d304      	bcc.n	80259b4 <__mdiff+0xf0>
 80259aa:	0021      	movs	r1, r4
 80259ac:	3103      	adds	r1, #3
 80259ae:	1b49      	subs	r1, r1, r5
 80259b0:	0889      	lsrs	r1, r1, #2
 80259b2:	0088      	lsls	r0, r1, #2
 80259b4:	181b      	adds	r3, r3, r0
 80259b6:	3b04      	subs	r3, #4
 80259b8:	6819      	ldr	r1, [r3, #0]
 80259ba:	2900      	cmp	r1, #0
 80259bc:	d010      	beq.n	80259e0 <__mdiff+0x11c>
 80259be:	9b00      	ldr	r3, [sp, #0]
 80259c0:	6113      	str	r3, [r2, #16]
 80259c2:	e798      	b.n	80258f6 <__mdiff+0x32>
 80259c4:	4684      	mov	ip, r0
 80259c6:	ce02      	ldmia	r6!, {r1}
 80259c8:	b288      	uxth	r0, r1
 80259ca:	4460      	add	r0, ip
 80259cc:	1400      	asrs	r0, r0, #16
 80259ce:	0c0c      	lsrs	r4, r1, #16
 80259d0:	1904      	adds	r4, r0, r4
 80259d2:	4461      	add	r1, ip
 80259d4:	1420      	asrs	r0, r4, #16
 80259d6:	b289      	uxth	r1, r1
 80259d8:	0424      	lsls	r4, r4, #16
 80259da:	4321      	orrs	r1, r4
 80259dc:	c702      	stmia	r7!, {r1}
 80259de:	e7dc      	b.n	802599a <__mdiff+0xd6>
 80259e0:	9900      	ldr	r1, [sp, #0]
 80259e2:	3901      	subs	r1, #1
 80259e4:	9100      	str	r1, [sp, #0]
 80259e6:	e7e6      	b.n	80259b6 <__mdiff+0xf2>
 80259e8:	0802b9c1 	.word	0x0802b9c1
 80259ec:	0802ba32 	.word	0x0802ba32
 80259f0:	00000237 	.word	0x00000237
 80259f4:	00000245 	.word	0x00000245

080259f8 <__ulp>:
 80259f8:	b510      	push	{r4, lr}
 80259fa:	2400      	movs	r4, #0
 80259fc:	4b0c      	ldr	r3, [pc, #48]	@ (8025a30 <__ulp+0x38>)
 80259fe:	4a0d      	ldr	r2, [pc, #52]	@ (8025a34 <__ulp+0x3c>)
 8025a00:	400b      	ands	r3, r1
 8025a02:	189b      	adds	r3, r3, r2
 8025a04:	42a3      	cmp	r3, r4
 8025a06:	dc06      	bgt.n	8025a16 <__ulp+0x1e>
 8025a08:	425b      	negs	r3, r3
 8025a0a:	151a      	asrs	r2, r3, #20
 8025a0c:	2a13      	cmp	r2, #19
 8025a0e:	dc05      	bgt.n	8025a1c <__ulp+0x24>
 8025a10:	2380      	movs	r3, #128	@ 0x80
 8025a12:	031b      	lsls	r3, r3, #12
 8025a14:	4113      	asrs	r3, r2
 8025a16:	0019      	movs	r1, r3
 8025a18:	0020      	movs	r0, r4
 8025a1a:	bd10      	pop	{r4, pc}
 8025a1c:	3a14      	subs	r2, #20
 8025a1e:	2401      	movs	r4, #1
 8025a20:	2a1e      	cmp	r2, #30
 8025a22:	dc02      	bgt.n	8025a2a <__ulp+0x32>
 8025a24:	2480      	movs	r4, #128	@ 0x80
 8025a26:	0624      	lsls	r4, r4, #24
 8025a28:	40d4      	lsrs	r4, r2
 8025a2a:	2300      	movs	r3, #0
 8025a2c:	e7f3      	b.n	8025a16 <__ulp+0x1e>
 8025a2e:	46c0      	nop			@ (mov r8, r8)
 8025a30:	7ff00000 	.word	0x7ff00000
 8025a34:	fcc00000 	.word	0xfcc00000

08025a38 <__b2d>:
 8025a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025a3a:	0006      	movs	r6, r0
 8025a3c:	6903      	ldr	r3, [r0, #16]
 8025a3e:	3614      	adds	r6, #20
 8025a40:	009b      	lsls	r3, r3, #2
 8025a42:	18f3      	adds	r3, r6, r3
 8025a44:	1f1d      	subs	r5, r3, #4
 8025a46:	682c      	ldr	r4, [r5, #0]
 8025a48:	000f      	movs	r7, r1
 8025a4a:	0020      	movs	r0, r4
 8025a4c:	9301      	str	r3, [sp, #4]
 8025a4e:	f7ff fd3b 	bl	80254c8 <__hi0bits>
 8025a52:	2220      	movs	r2, #32
 8025a54:	1a12      	subs	r2, r2, r0
 8025a56:	603a      	str	r2, [r7, #0]
 8025a58:	0003      	movs	r3, r0
 8025a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8025acc <__b2d+0x94>)
 8025a5c:	280a      	cmp	r0, #10
 8025a5e:	dc15      	bgt.n	8025a8c <__b2d+0x54>
 8025a60:	210b      	movs	r1, #11
 8025a62:	0027      	movs	r7, r4
 8025a64:	1a09      	subs	r1, r1, r0
 8025a66:	40cf      	lsrs	r7, r1
 8025a68:	433a      	orrs	r2, r7
 8025a6a:	468c      	mov	ip, r1
 8025a6c:	0011      	movs	r1, r2
 8025a6e:	2200      	movs	r2, #0
 8025a70:	42ae      	cmp	r6, r5
 8025a72:	d202      	bcs.n	8025a7a <__b2d+0x42>
 8025a74:	9a01      	ldr	r2, [sp, #4]
 8025a76:	3a08      	subs	r2, #8
 8025a78:	6812      	ldr	r2, [r2, #0]
 8025a7a:	3315      	adds	r3, #21
 8025a7c:	409c      	lsls	r4, r3
 8025a7e:	4663      	mov	r3, ip
 8025a80:	0027      	movs	r7, r4
 8025a82:	40da      	lsrs	r2, r3
 8025a84:	4317      	orrs	r7, r2
 8025a86:	0038      	movs	r0, r7
 8025a88:	b003      	add	sp, #12
 8025a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a8c:	2700      	movs	r7, #0
 8025a8e:	42ae      	cmp	r6, r5
 8025a90:	d202      	bcs.n	8025a98 <__b2d+0x60>
 8025a92:	9d01      	ldr	r5, [sp, #4]
 8025a94:	3d08      	subs	r5, #8
 8025a96:	682f      	ldr	r7, [r5, #0]
 8025a98:	210b      	movs	r1, #11
 8025a9a:	4249      	negs	r1, r1
 8025a9c:	468c      	mov	ip, r1
 8025a9e:	449c      	add	ip, r3
 8025aa0:	2b0b      	cmp	r3, #11
 8025aa2:	d010      	beq.n	8025ac6 <__b2d+0x8e>
 8025aa4:	4661      	mov	r1, ip
 8025aa6:	2320      	movs	r3, #32
 8025aa8:	408c      	lsls	r4, r1
 8025aaa:	1a5b      	subs	r3, r3, r1
 8025aac:	0039      	movs	r1, r7
 8025aae:	40d9      	lsrs	r1, r3
 8025ab0:	430c      	orrs	r4, r1
 8025ab2:	4322      	orrs	r2, r4
 8025ab4:	0011      	movs	r1, r2
 8025ab6:	2200      	movs	r2, #0
 8025ab8:	42b5      	cmp	r5, r6
 8025aba:	d901      	bls.n	8025ac0 <__b2d+0x88>
 8025abc:	3d04      	subs	r5, #4
 8025abe:	682a      	ldr	r2, [r5, #0]
 8025ac0:	4664      	mov	r4, ip
 8025ac2:	40a7      	lsls	r7, r4
 8025ac4:	e7dd      	b.n	8025a82 <__b2d+0x4a>
 8025ac6:	4322      	orrs	r2, r4
 8025ac8:	0011      	movs	r1, r2
 8025aca:	e7dc      	b.n	8025a86 <__b2d+0x4e>
 8025acc:	3ff00000 	.word	0x3ff00000

08025ad0 <__d2b>:
 8025ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025ad2:	2101      	movs	r1, #1
 8025ad4:	0016      	movs	r6, r2
 8025ad6:	001f      	movs	r7, r3
 8025ad8:	f7ff fbfe 	bl	80252d8 <_Balloc>
 8025adc:	1e04      	subs	r4, r0, #0
 8025ade:	d105      	bne.n	8025aec <__d2b+0x1c>
 8025ae0:	0022      	movs	r2, r4
 8025ae2:	4b25      	ldr	r3, [pc, #148]	@ (8025b78 <__d2b+0xa8>)
 8025ae4:	4825      	ldr	r0, [pc, #148]	@ (8025b7c <__d2b+0xac>)
 8025ae6:	4926      	ldr	r1, [pc, #152]	@ (8025b80 <__d2b+0xb0>)
 8025ae8:	f000 fcd6 	bl	8026498 <__assert_func>
 8025aec:	033b      	lsls	r3, r7, #12
 8025aee:	007d      	lsls	r5, r7, #1
 8025af0:	0b1b      	lsrs	r3, r3, #12
 8025af2:	0d6d      	lsrs	r5, r5, #21
 8025af4:	d002      	beq.n	8025afc <__d2b+0x2c>
 8025af6:	2280      	movs	r2, #128	@ 0x80
 8025af8:	0352      	lsls	r2, r2, #13
 8025afa:	4313      	orrs	r3, r2
 8025afc:	9301      	str	r3, [sp, #4]
 8025afe:	2e00      	cmp	r6, #0
 8025b00:	d025      	beq.n	8025b4e <__d2b+0x7e>
 8025b02:	4668      	mov	r0, sp
 8025b04:	9600      	str	r6, [sp, #0]
 8025b06:	f7ff fd00 	bl	802550a <__lo0bits>
 8025b0a:	9b01      	ldr	r3, [sp, #4]
 8025b0c:	9900      	ldr	r1, [sp, #0]
 8025b0e:	2800      	cmp	r0, #0
 8025b10:	d01b      	beq.n	8025b4a <__d2b+0x7a>
 8025b12:	2220      	movs	r2, #32
 8025b14:	001e      	movs	r6, r3
 8025b16:	1a12      	subs	r2, r2, r0
 8025b18:	4096      	lsls	r6, r2
 8025b1a:	0032      	movs	r2, r6
 8025b1c:	40c3      	lsrs	r3, r0
 8025b1e:	430a      	orrs	r2, r1
 8025b20:	6162      	str	r2, [r4, #20]
 8025b22:	9301      	str	r3, [sp, #4]
 8025b24:	9e01      	ldr	r6, [sp, #4]
 8025b26:	61a6      	str	r6, [r4, #24]
 8025b28:	1e73      	subs	r3, r6, #1
 8025b2a:	419e      	sbcs	r6, r3
 8025b2c:	3601      	adds	r6, #1
 8025b2e:	6126      	str	r6, [r4, #16]
 8025b30:	2d00      	cmp	r5, #0
 8025b32:	d014      	beq.n	8025b5e <__d2b+0x8e>
 8025b34:	2635      	movs	r6, #53	@ 0x35
 8025b36:	4b13      	ldr	r3, [pc, #76]	@ (8025b84 <__d2b+0xb4>)
 8025b38:	18ed      	adds	r5, r5, r3
 8025b3a:	9b08      	ldr	r3, [sp, #32]
 8025b3c:	182d      	adds	r5, r5, r0
 8025b3e:	601d      	str	r5, [r3, #0]
 8025b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b42:	1a36      	subs	r6, r6, r0
 8025b44:	601e      	str	r6, [r3, #0]
 8025b46:	0020      	movs	r0, r4
 8025b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025b4a:	6161      	str	r1, [r4, #20]
 8025b4c:	e7ea      	b.n	8025b24 <__d2b+0x54>
 8025b4e:	a801      	add	r0, sp, #4
 8025b50:	f7ff fcdb 	bl	802550a <__lo0bits>
 8025b54:	9b01      	ldr	r3, [sp, #4]
 8025b56:	2601      	movs	r6, #1
 8025b58:	6163      	str	r3, [r4, #20]
 8025b5a:	3020      	adds	r0, #32
 8025b5c:	e7e7      	b.n	8025b2e <__d2b+0x5e>
 8025b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8025b88 <__d2b+0xb8>)
 8025b60:	18c0      	adds	r0, r0, r3
 8025b62:	9b08      	ldr	r3, [sp, #32]
 8025b64:	6018      	str	r0, [r3, #0]
 8025b66:	4b09      	ldr	r3, [pc, #36]	@ (8025b8c <__d2b+0xbc>)
 8025b68:	18f3      	adds	r3, r6, r3
 8025b6a:	009b      	lsls	r3, r3, #2
 8025b6c:	18e3      	adds	r3, r4, r3
 8025b6e:	6958      	ldr	r0, [r3, #20]
 8025b70:	f7ff fcaa 	bl	80254c8 <__hi0bits>
 8025b74:	0176      	lsls	r6, r6, #5
 8025b76:	e7e3      	b.n	8025b40 <__d2b+0x70>
 8025b78:	0802b9c1 	.word	0x0802b9c1
 8025b7c:	0802ba32 	.word	0x0802ba32
 8025b80:	0000030f 	.word	0x0000030f
 8025b84:	fffffbcd 	.word	0xfffffbcd
 8025b88:	fffffbce 	.word	0xfffffbce
 8025b8c:	3fffffff 	.word	0x3fffffff

08025b90 <__ratio>:
 8025b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b92:	b087      	sub	sp, #28
 8025b94:	000f      	movs	r7, r1
 8025b96:	a904      	add	r1, sp, #16
 8025b98:	0006      	movs	r6, r0
 8025b9a:	f7ff ff4d 	bl	8025a38 <__b2d>
 8025b9e:	9000      	str	r0, [sp, #0]
 8025ba0:	9101      	str	r1, [sp, #4]
 8025ba2:	9b00      	ldr	r3, [sp, #0]
 8025ba4:	9c01      	ldr	r4, [sp, #4]
 8025ba6:	0038      	movs	r0, r7
 8025ba8:	a905      	add	r1, sp, #20
 8025baa:	9302      	str	r3, [sp, #8]
 8025bac:	9403      	str	r4, [sp, #12]
 8025bae:	f7ff ff43 	bl	8025a38 <__b2d>
 8025bb2:	000d      	movs	r5, r1
 8025bb4:	0002      	movs	r2, r0
 8025bb6:	000b      	movs	r3, r1
 8025bb8:	6930      	ldr	r0, [r6, #16]
 8025bba:	6939      	ldr	r1, [r7, #16]
 8025bbc:	9e04      	ldr	r6, [sp, #16]
 8025bbe:	1a40      	subs	r0, r0, r1
 8025bc0:	9905      	ldr	r1, [sp, #20]
 8025bc2:	0140      	lsls	r0, r0, #5
 8025bc4:	1a71      	subs	r1, r6, r1
 8025bc6:	1841      	adds	r1, r0, r1
 8025bc8:	0508      	lsls	r0, r1, #20
 8025bca:	2900      	cmp	r1, #0
 8025bcc:	dd08      	ble.n	8025be0 <__ratio+0x50>
 8025bce:	9901      	ldr	r1, [sp, #4]
 8025bd0:	1841      	adds	r1, r0, r1
 8025bd2:	9103      	str	r1, [sp, #12]
 8025bd4:	9802      	ldr	r0, [sp, #8]
 8025bd6:	9903      	ldr	r1, [sp, #12]
 8025bd8:	f7dc f8ec 	bl	8001db4 <__aeabi_ddiv>
 8025bdc:	b007      	add	sp, #28
 8025bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025be0:	1a2b      	subs	r3, r5, r0
 8025be2:	e7f7      	b.n	8025bd4 <__ratio+0x44>

08025be4 <__copybits>:
 8025be4:	b570      	push	{r4, r5, r6, lr}
 8025be6:	0014      	movs	r4, r2
 8025be8:	0005      	movs	r5, r0
 8025bea:	3901      	subs	r1, #1
 8025bec:	6913      	ldr	r3, [r2, #16]
 8025bee:	1149      	asrs	r1, r1, #5
 8025bf0:	3101      	adds	r1, #1
 8025bf2:	0089      	lsls	r1, r1, #2
 8025bf4:	3414      	adds	r4, #20
 8025bf6:	009b      	lsls	r3, r3, #2
 8025bf8:	1841      	adds	r1, r0, r1
 8025bfa:	18e3      	adds	r3, r4, r3
 8025bfc:	42a3      	cmp	r3, r4
 8025bfe:	d80d      	bhi.n	8025c1c <__copybits+0x38>
 8025c00:	0014      	movs	r4, r2
 8025c02:	3411      	adds	r4, #17
 8025c04:	2500      	movs	r5, #0
 8025c06:	429c      	cmp	r4, r3
 8025c08:	d803      	bhi.n	8025c12 <__copybits+0x2e>
 8025c0a:	1a9b      	subs	r3, r3, r2
 8025c0c:	3b11      	subs	r3, #17
 8025c0e:	089b      	lsrs	r3, r3, #2
 8025c10:	009d      	lsls	r5, r3, #2
 8025c12:	2300      	movs	r3, #0
 8025c14:	1940      	adds	r0, r0, r5
 8025c16:	4281      	cmp	r1, r0
 8025c18:	d803      	bhi.n	8025c22 <__copybits+0x3e>
 8025c1a:	bd70      	pop	{r4, r5, r6, pc}
 8025c1c:	cc40      	ldmia	r4!, {r6}
 8025c1e:	c540      	stmia	r5!, {r6}
 8025c20:	e7ec      	b.n	8025bfc <__copybits+0x18>
 8025c22:	c008      	stmia	r0!, {r3}
 8025c24:	e7f7      	b.n	8025c16 <__copybits+0x32>

08025c26 <__any_on>:
 8025c26:	0002      	movs	r2, r0
 8025c28:	6900      	ldr	r0, [r0, #16]
 8025c2a:	b510      	push	{r4, lr}
 8025c2c:	3214      	adds	r2, #20
 8025c2e:	114b      	asrs	r3, r1, #5
 8025c30:	4298      	cmp	r0, r3
 8025c32:	db13      	blt.n	8025c5c <__any_on+0x36>
 8025c34:	dd0c      	ble.n	8025c50 <__any_on+0x2a>
 8025c36:	241f      	movs	r4, #31
 8025c38:	0008      	movs	r0, r1
 8025c3a:	4020      	ands	r0, r4
 8025c3c:	4221      	tst	r1, r4
 8025c3e:	d007      	beq.n	8025c50 <__any_on+0x2a>
 8025c40:	0099      	lsls	r1, r3, #2
 8025c42:	588c      	ldr	r4, [r1, r2]
 8025c44:	0021      	movs	r1, r4
 8025c46:	40c1      	lsrs	r1, r0
 8025c48:	4081      	lsls	r1, r0
 8025c4a:	2001      	movs	r0, #1
 8025c4c:	428c      	cmp	r4, r1
 8025c4e:	d104      	bne.n	8025c5a <__any_on+0x34>
 8025c50:	009b      	lsls	r3, r3, #2
 8025c52:	18d3      	adds	r3, r2, r3
 8025c54:	4293      	cmp	r3, r2
 8025c56:	d803      	bhi.n	8025c60 <__any_on+0x3a>
 8025c58:	2000      	movs	r0, #0
 8025c5a:	bd10      	pop	{r4, pc}
 8025c5c:	0003      	movs	r3, r0
 8025c5e:	e7f7      	b.n	8025c50 <__any_on+0x2a>
 8025c60:	3b04      	subs	r3, #4
 8025c62:	6819      	ldr	r1, [r3, #0]
 8025c64:	2900      	cmp	r1, #0
 8025c66:	d0f5      	beq.n	8025c54 <__any_on+0x2e>
 8025c68:	2001      	movs	r0, #1
 8025c6a:	e7f6      	b.n	8025c5a <__any_on+0x34>

08025c6c <__ascii_wctomb>:
 8025c6c:	0003      	movs	r3, r0
 8025c6e:	1e08      	subs	r0, r1, #0
 8025c70:	d005      	beq.n	8025c7e <__ascii_wctomb+0x12>
 8025c72:	2aff      	cmp	r2, #255	@ 0xff
 8025c74:	d904      	bls.n	8025c80 <__ascii_wctomb+0x14>
 8025c76:	228a      	movs	r2, #138	@ 0x8a
 8025c78:	2001      	movs	r0, #1
 8025c7a:	601a      	str	r2, [r3, #0]
 8025c7c:	4240      	negs	r0, r0
 8025c7e:	4770      	bx	lr
 8025c80:	2001      	movs	r0, #1
 8025c82:	700a      	strb	r2, [r1, #0]
 8025c84:	e7fb      	b.n	8025c7e <__ascii_wctomb+0x12>
	...

08025c88 <__ssputs_r>:
 8025c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c8a:	688e      	ldr	r6, [r1, #8]
 8025c8c:	b085      	sub	sp, #20
 8025c8e:	001f      	movs	r7, r3
 8025c90:	000c      	movs	r4, r1
 8025c92:	680b      	ldr	r3, [r1, #0]
 8025c94:	9002      	str	r0, [sp, #8]
 8025c96:	9203      	str	r2, [sp, #12]
 8025c98:	42be      	cmp	r6, r7
 8025c9a:	d830      	bhi.n	8025cfe <__ssputs_r+0x76>
 8025c9c:	210c      	movs	r1, #12
 8025c9e:	5e62      	ldrsh	r2, [r4, r1]
 8025ca0:	2190      	movs	r1, #144	@ 0x90
 8025ca2:	00c9      	lsls	r1, r1, #3
 8025ca4:	420a      	tst	r2, r1
 8025ca6:	d028      	beq.n	8025cfa <__ssputs_r+0x72>
 8025ca8:	2003      	movs	r0, #3
 8025caa:	6921      	ldr	r1, [r4, #16]
 8025cac:	1a5b      	subs	r3, r3, r1
 8025cae:	9301      	str	r3, [sp, #4]
 8025cb0:	6963      	ldr	r3, [r4, #20]
 8025cb2:	4343      	muls	r3, r0
 8025cb4:	9801      	ldr	r0, [sp, #4]
 8025cb6:	0fdd      	lsrs	r5, r3, #31
 8025cb8:	18ed      	adds	r5, r5, r3
 8025cba:	1c7b      	adds	r3, r7, #1
 8025cbc:	181b      	adds	r3, r3, r0
 8025cbe:	106d      	asrs	r5, r5, #1
 8025cc0:	42ab      	cmp	r3, r5
 8025cc2:	d900      	bls.n	8025cc6 <__ssputs_r+0x3e>
 8025cc4:	001d      	movs	r5, r3
 8025cc6:	0552      	lsls	r2, r2, #21
 8025cc8:	d528      	bpl.n	8025d1c <__ssputs_r+0x94>
 8025cca:	0029      	movs	r1, r5
 8025ccc:	9802      	ldr	r0, [sp, #8]
 8025cce:	f7ff fa61 	bl	8025194 <_malloc_r>
 8025cd2:	1e06      	subs	r6, r0, #0
 8025cd4:	d02c      	beq.n	8025d30 <__ssputs_r+0xa8>
 8025cd6:	9a01      	ldr	r2, [sp, #4]
 8025cd8:	6921      	ldr	r1, [r4, #16]
 8025cda:	f7fd fff9 	bl	8023cd0 <memcpy>
 8025cde:	89a2      	ldrh	r2, [r4, #12]
 8025ce0:	4b18      	ldr	r3, [pc, #96]	@ (8025d44 <__ssputs_r+0xbc>)
 8025ce2:	401a      	ands	r2, r3
 8025ce4:	2380      	movs	r3, #128	@ 0x80
 8025ce6:	4313      	orrs	r3, r2
 8025ce8:	81a3      	strh	r3, [r4, #12]
 8025cea:	9b01      	ldr	r3, [sp, #4]
 8025cec:	6126      	str	r6, [r4, #16]
 8025cee:	18f6      	adds	r6, r6, r3
 8025cf0:	6026      	str	r6, [r4, #0]
 8025cf2:	003e      	movs	r6, r7
 8025cf4:	6165      	str	r5, [r4, #20]
 8025cf6:	1aed      	subs	r5, r5, r3
 8025cf8:	60a5      	str	r5, [r4, #8]
 8025cfa:	42be      	cmp	r6, r7
 8025cfc:	d900      	bls.n	8025d00 <__ssputs_r+0x78>
 8025cfe:	003e      	movs	r6, r7
 8025d00:	0032      	movs	r2, r6
 8025d02:	9903      	ldr	r1, [sp, #12]
 8025d04:	6820      	ldr	r0, [r4, #0]
 8025d06:	f000 fb7e 	bl	8026406 <memmove>
 8025d0a:	2000      	movs	r0, #0
 8025d0c:	68a3      	ldr	r3, [r4, #8]
 8025d0e:	1b9b      	subs	r3, r3, r6
 8025d10:	60a3      	str	r3, [r4, #8]
 8025d12:	6823      	ldr	r3, [r4, #0]
 8025d14:	199b      	adds	r3, r3, r6
 8025d16:	6023      	str	r3, [r4, #0]
 8025d18:	b005      	add	sp, #20
 8025d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025d1c:	002a      	movs	r2, r5
 8025d1e:	9802      	ldr	r0, [sp, #8]
 8025d20:	f000 fc05 	bl	802652e <_realloc_r>
 8025d24:	1e06      	subs	r6, r0, #0
 8025d26:	d1e0      	bne.n	8025cea <__ssputs_r+0x62>
 8025d28:	6921      	ldr	r1, [r4, #16]
 8025d2a:	9802      	ldr	r0, [sp, #8]
 8025d2c:	f7fe fe62 	bl	80249f4 <_free_r>
 8025d30:	230c      	movs	r3, #12
 8025d32:	2001      	movs	r0, #1
 8025d34:	9a02      	ldr	r2, [sp, #8]
 8025d36:	4240      	negs	r0, r0
 8025d38:	6013      	str	r3, [r2, #0]
 8025d3a:	89a2      	ldrh	r2, [r4, #12]
 8025d3c:	3334      	adds	r3, #52	@ 0x34
 8025d3e:	4313      	orrs	r3, r2
 8025d40:	81a3      	strh	r3, [r4, #12]
 8025d42:	e7e9      	b.n	8025d18 <__ssputs_r+0x90>
 8025d44:	fffffb7f 	.word	0xfffffb7f

08025d48 <_svfiprintf_r>:
 8025d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025d4a:	b0a1      	sub	sp, #132	@ 0x84
 8025d4c:	9003      	str	r0, [sp, #12]
 8025d4e:	001d      	movs	r5, r3
 8025d50:	898b      	ldrh	r3, [r1, #12]
 8025d52:	000f      	movs	r7, r1
 8025d54:	0016      	movs	r6, r2
 8025d56:	061b      	lsls	r3, r3, #24
 8025d58:	d511      	bpl.n	8025d7e <_svfiprintf_r+0x36>
 8025d5a:	690b      	ldr	r3, [r1, #16]
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d10e      	bne.n	8025d7e <_svfiprintf_r+0x36>
 8025d60:	2140      	movs	r1, #64	@ 0x40
 8025d62:	f7ff fa17 	bl	8025194 <_malloc_r>
 8025d66:	6038      	str	r0, [r7, #0]
 8025d68:	6138      	str	r0, [r7, #16]
 8025d6a:	2800      	cmp	r0, #0
 8025d6c:	d105      	bne.n	8025d7a <_svfiprintf_r+0x32>
 8025d6e:	230c      	movs	r3, #12
 8025d70:	9a03      	ldr	r2, [sp, #12]
 8025d72:	6013      	str	r3, [r2, #0]
 8025d74:	2001      	movs	r0, #1
 8025d76:	4240      	negs	r0, r0
 8025d78:	e0cf      	b.n	8025f1a <_svfiprintf_r+0x1d2>
 8025d7a:	2340      	movs	r3, #64	@ 0x40
 8025d7c:	617b      	str	r3, [r7, #20]
 8025d7e:	2300      	movs	r3, #0
 8025d80:	ac08      	add	r4, sp, #32
 8025d82:	6163      	str	r3, [r4, #20]
 8025d84:	3320      	adds	r3, #32
 8025d86:	7663      	strb	r3, [r4, #25]
 8025d88:	3310      	adds	r3, #16
 8025d8a:	76a3      	strb	r3, [r4, #26]
 8025d8c:	9507      	str	r5, [sp, #28]
 8025d8e:	0035      	movs	r5, r6
 8025d90:	782b      	ldrb	r3, [r5, #0]
 8025d92:	2b00      	cmp	r3, #0
 8025d94:	d001      	beq.n	8025d9a <_svfiprintf_r+0x52>
 8025d96:	2b25      	cmp	r3, #37	@ 0x25
 8025d98:	d148      	bne.n	8025e2c <_svfiprintf_r+0xe4>
 8025d9a:	1bab      	subs	r3, r5, r6
 8025d9c:	9305      	str	r3, [sp, #20]
 8025d9e:	42b5      	cmp	r5, r6
 8025da0:	d00b      	beq.n	8025dba <_svfiprintf_r+0x72>
 8025da2:	0032      	movs	r2, r6
 8025da4:	0039      	movs	r1, r7
 8025da6:	9803      	ldr	r0, [sp, #12]
 8025da8:	f7ff ff6e 	bl	8025c88 <__ssputs_r>
 8025dac:	3001      	adds	r0, #1
 8025dae:	d100      	bne.n	8025db2 <_svfiprintf_r+0x6a>
 8025db0:	e0ae      	b.n	8025f10 <_svfiprintf_r+0x1c8>
 8025db2:	6963      	ldr	r3, [r4, #20]
 8025db4:	9a05      	ldr	r2, [sp, #20]
 8025db6:	189b      	adds	r3, r3, r2
 8025db8:	6163      	str	r3, [r4, #20]
 8025dba:	782b      	ldrb	r3, [r5, #0]
 8025dbc:	2b00      	cmp	r3, #0
 8025dbe:	d100      	bne.n	8025dc2 <_svfiprintf_r+0x7a>
 8025dc0:	e0a6      	b.n	8025f10 <_svfiprintf_r+0x1c8>
 8025dc2:	2201      	movs	r2, #1
 8025dc4:	2300      	movs	r3, #0
 8025dc6:	4252      	negs	r2, r2
 8025dc8:	6062      	str	r2, [r4, #4]
 8025dca:	a904      	add	r1, sp, #16
 8025dcc:	3254      	adds	r2, #84	@ 0x54
 8025dce:	1852      	adds	r2, r2, r1
 8025dd0:	1c6e      	adds	r6, r5, #1
 8025dd2:	6023      	str	r3, [r4, #0]
 8025dd4:	60e3      	str	r3, [r4, #12]
 8025dd6:	60a3      	str	r3, [r4, #8]
 8025dd8:	7013      	strb	r3, [r2, #0]
 8025dda:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025ddc:	4b54      	ldr	r3, [pc, #336]	@ (8025f30 <_svfiprintf_r+0x1e8>)
 8025dde:	2205      	movs	r2, #5
 8025de0:	0018      	movs	r0, r3
 8025de2:	7831      	ldrb	r1, [r6, #0]
 8025de4:	9305      	str	r3, [sp, #20]
 8025de6:	f7fd ff68 	bl	8023cba <memchr>
 8025dea:	1c75      	adds	r5, r6, #1
 8025dec:	2800      	cmp	r0, #0
 8025dee:	d11f      	bne.n	8025e30 <_svfiprintf_r+0xe8>
 8025df0:	6822      	ldr	r2, [r4, #0]
 8025df2:	06d3      	lsls	r3, r2, #27
 8025df4:	d504      	bpl.n	8025e00 <_svfiprintf_r+0xb8>
 8025df6:	2353      	movs	r3, #83	@ 0x53
 8025df8:	a904      	add	r1, sp, #16
 8025dfa:	185b      	adds	r3, r3, r1
 8025dfc:	2120      	movs	r1, #32
 8025dfe:	7019      	strb	r1, [r3, #0]
 8025e00:	0713      	lsls	r3, r2, #28
 8025e02:	d504      	bpl.n	8025e0e <_svfiprintf_r+0xc6>
 8025e04:	2353      	movs	r3, #83	@ 0x53
 8025e06:	a904      	add	r1, sp, #16
 8025e08:	185b      	adds	r3, r3, r1
 8025e0a:	212b      	movs	r1, #43	@ 0x2b
 8025e0c:	7019      	strb	r1, [r3, #0]
 8025e0e:	7833      	ldrb	r3, [r6, #0]
 8025e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8025e12:	d016      	beq.n	8025e42 <_svfiprintf_r+0xfa>
 8025e14:	0035      	movs	r5, r6
 8025e16:	2100      	movs	r1, #0
 8025e18:	200a      	movs	r0, #10
 8025e1a:	68e3      	ldr	r3, [r4, #12]
 8025e1c:	782a      	ldrb	r2, [r5, #0]
 8025e1e:	1c6e      	adds	r6, r5, #1
 8025e20:	3a30      	subs	r2, #48	@ 0x30
 8025e22:	2a09      	cmp	r2, #9
 8025e24:	d950      	bls.n	8025ec8 <_svfiprintf_r+0x180>
 8025e26:	2900      	cmp	r1, #0
 8025e28:	d111      	bne.n	8025e4e <_svfiprintf_r+0x106>
 8025e2a:	e017      	b.n	8025e5c <_svfiprintf_r+0x114>
 8025e2c:	3501      	adds	r5, #1
 8025e2e:	e7af      	b.n	8025d90 <_svfiprintf_r+0x48>
 8025e30:	9b05      	ldr	r3, [sp, #20]
 8025e32:	6822      	ldr	r2, [r4, #0]
 8025e34:	1ac0      	subs	r0, r0, r3
 8025e36:	2301      	movs	r3, #1
 8025e38:	4083      	lsls	r3, r0
 8025e3a:	4313      	orrs	r3, r2
 8025e3c:	002e      	movs	r6, r5
 8025e3e:	6023      	str	r3, [r4, #0]
 8025e40:	e7cc      	b.n	8025ddc <_svfiprintf_r+0x94>
 8025e42:	9b07      	ldr	r3, [sp, #28]
 8025e44:	1d19      	adds	r1, r3, #4
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	9107      	str	r1, [sp, #28]
 8025e4a:	2b00      	cmp	r3, #0
 8025e4c:	db01      	blt.n	8025e52 <_svfiprintf_r+0x10a>
 8025e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025e50:	e004      	b.n	8025e5c <_svfiprintf_r+0x114>
 8025e52:	425b      	negs	r3, r3
 8025e54:	60e3      	str	r3, [r4, #12]
 8025e56:	2302      	movs	r3, #2
 8025e58:	4313      	orrs	r3, r2
 8025e5a:	6023      	str	r3, [r4, #0]
 8025e5c:	782b      	ldrb	r3, [r5, #0]
 8025e5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8025e60:	d10c      	bne.n	8025e7c <_svfiprintf_r+0x134>
 8025e62:	786b      	ldrb	r3, [r5, #1]
 8025e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8025e66:	d134      	bne.n	8025ed2 <_svfiprintf_r+0x18a>
 8025e68:	9b07      	ldr	r3, [sp, #28]
 8025e6a:	3502      	adds	r5, #2
 8025e6c:	1d1a      	adds	r2, r3, #4
 8025e6e:	681b      	ldr	r3, [r3, #0]
 8025e70:	9207      	str	r2, [sp, #28]
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	da01      	bge.n	8025e7a <_svfiprintf_r+0x132>
 8025e76:	2301      	movs	r3, #1
 8025e78:	425b      	negs	r3, r3
 8025e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e7c:	4e2d      	ldr	r6, [pc, #180]	@ (8025f34 <_svfiprintf_r+0x1ec>)
 8025e7e:	2203      	movs	r2, #3
 8025e80:	0030      	movs	r0, r6
 8025e82:	7829      	ldrb	r1, [r5, #0]
 8025e84:	f7fd ff19 	bl	8023cba <memchr>
 8025e88:	2800      	cmp	r0, #0
 8025e8a:	d006      	beq.n	8025e9a <_svfiprintf_r+0x152>
 8025e8c:	2340      	movs	r3, #64	@ 0x40
 8025e8e:	1b80      	subs	r0, r0, r6
 8025e90:	4083      	lsls	r3, r0
 8025e92:	6822      	ldr	r2, [r4, #0]
 8025e94:	3501      	adds	r5, #1
 8025e96:	4313      	orrs	r3, r2
 8025e98:	6023      	str	r3, [r4, #0]
 8025e9a:	7829      	ldrb	r1, [r5, #0]
 8025e9c:	2206      	movs	r2, #6
 8025e9e:	4826      	ldr	r0, [pc, #152]	@ (8025f38 <_svfiprintf_r+0x1f0>)
 8025ea0:	1c6e      	adds	r6, r5, #1
 8025ea2:	7621      	strb	r1, [r4, #24]
 8025ea4:	f7fd ff09 	bl	8023cba <memchr>
 8025ea8:	2800      	cmp	r0, #0
 8025eaa:	d038      	beq.n	8025f1e <_svfiprintf_r+0x1d6>
 8025eac:	4b23      	ldr	r3, [pc, #140]	@ (8025f3c <_svfiprintf_r+0x1f4>)
 8025eae:	2b00      	cmp	r3, #0
 8025eb0:	d122      	bne.n	8025ef8 <_svfiprintf_r+0x1b0>
 8025eb2:	2207      	movs	r2, #7
 8025eb4:	9b07      	ldr	r3, [sp, #28]
 8025eb6:	3307      	adds	r3, #7
 8025eb8:	4393      	bics	r3, r2
 8025eba:	3308      	adds	r3, #8
 8025ebc:	9307      	str	r3, [sp, #28]
 8025ebe:	6963      	ldr	r3, [r4, #20]
 8025ec0:	9a04      	ldr	r2, [sp, #16]
 8025ec2:	189b      	adds	r3, r3, r2
 8025ec4:	6163      	str	r3, [r4, #20]
 8025ec6:	e762      	b.n	8025d8e <_svfiprintf_r+0x46>
 8025ec8:	4343      	muls	r3, r0
 8025eca:	0035      	movs	r5, r6
 8025ecc:	2101      	movs	r1, #1
 8025ece:	189b      	adds	r3, r3, r2
 8025ed0:	e7a4      	b.n	8025e1c <_svfiprintf_r+0xd4>
 8025ed2:	2300      	movs	r3, #0
 8025ed4:	200a      	movs	r0, #10
 8025ed6:	0019      	movs	r1, r3
 8025ed8:	3501      	adds	r5, #1
 8025eda:	6063      	str	r3, [r4, #4]
 8025edc:	782a      	ldrb	r2, [r5, #0]
 8025ede:	1c6e      	adds	r6, r5, #1
 8025ee0:	3a30      	subs	r2, #48	@ 0x30
 8025ee2:	2a09      	cmp	r2, #9
 8025ee4:	d903      	bls.n	8025eee <_svfiprintf_r+0x1a6>
 8025ee6:	2b00      	cmp	r3, #0
 8025ee8:	d0c8      	beq.n	8025e7c <_svfiprintf_r+0x134>
 8025eea:	9109      	str	r1, [sp, #36]	@ 0x24
 8025eec:	e7c6      	b.n	8025e7c <_svfiprintf_r+0x134>
 8025eee:	4341      	muls	r1, r0
 8025ef0:	0035      	movs	r5, r6
 8025ef2:	2301      	movs	r3, #1
 8025ef4:	1889      	adds	r1, r1, r2
 8025ef6:	e7f1      	b.n	8025edc <_svfiprintf_r+0x194>
 8025ef8:	aa07      	add	r2, sp, #28
 8025efa:	9200      	str	r2, [sp, #0]
 8025efc:	0021      	movs	r1, r4
 8025efe:	003a      	movs	r2, r7
 8025f00:	4b0f      	ldr	r3, [pc, #60]	@ (8025f40 <_svfiprintf_r+0x1f8>)
 8025f02:	9803      	ldr	r0, [sp, #12]
 8025f04:	f7fc ffb2 	bl	8022e6c <_printf_float>
 8025f08:	9004      	str	r0, [sp, #16]
 8025f0a:	9b04      	ldr	r3, [sp, #16]
 8025f0c:	3301      	adds	r3, #1
 8025f0e:	d1d6      	bne.n	8025ebe <_svfiprintf_r+0x176>
 8025f10:	89bb      	ldrh	r3, [r7, #12]
 8025f12:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025f14:	065b      	lsls	r3, r3, #25
 8025f16:	d500      	bpl.n	8025f1a <_svfiprintf_r+0x1d2>
 8025f18:	e72c      	b.n	8025d74 <_svfiprintf_r+0x2c>
 8025f1a:	b021      	add	sp, #132	@ 0x84
 8025f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f1e:	aa07      	add	r2, sp, #28
 8025f20:	9200      	str	r2, [sp, #0]
 8025f22:	0021      	movs	r1, r4
 8025f24:	003a      	movs	r2, r7
 8025f26:	4b06      	ldr	r3, [pc, #24]	@ (8025f40 <_svfiprintf_r+0x1f8>)
 8025f28:	9803      	ldr	r0, [sp, #12]
 8025f2a:	f7fd fa4d 	bl	80233c8 <_printf_i>
 8025f2e:	e7eb      	b.n	8025f08 <_svfiprintf_r+0x1c0>
 8025f30:	0802bb88 	.word	0x0802bb88
 8025f34:	0802bb8e 	.word	0x0802bb8e
 8025f38:	0802bb92 	.word	0x0802bb92
 8025f3c:	08022e6d 	.word	0x08022e6d
 8025f40:	08025c89 	.word	0x08025c89

08025f44 <__sfputc_r>:
 8025f44:	6893      	ldr	r3, [r2, #8]
 8025f46:	b510      	push	{r4, lr}
 8025f48:	3b01      	subs	r3, #1
 8025f4a:	6093      	str	r3, [r2, #8]
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	da04      	bge.n	8025f5a <__sfputc_r+0x16>
 8025f50:	6994      	ldr	r4, [r2, #24]
 8025f52:	42a3      	cmp	r3, r4
 8025f54:	db07      	blt.n	8025f66 <__sfputc_r+0x22>
 8025f56:	290a      	cmp	r1, #10
 8025f58:	d005      	beq.n	8025f66 <__sfputc_r+0x22>
 8025f5a:	6813      	ldr	r3, [r2, #0]
 8025f5c:	1c58      	adds	r0, r3, #1
 8025f5e:	6010      	str	r0, [r2, #0]
 8025f60:	7019      	strb	r1, [r3, #0]
 8025f62:	0008      	movs	r0, r1
 8025f64:	bd10      	pop	{r4, pc}
 8025f66:	f7fd fd37 	bl	80239d8 <__swbuf_r>
 8025f6a:	0001      	movs	r1, r0
 8025f6c:	e7f9      	b.n	8025f62 <__sfputc_r+0x1e>

08025f6e <__sfputs_r>:
 8025f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f70:	0006      	movs	r6, r0
 8025f72:	000f      	movs	r7, r1
 8025f74:	0014      	movs	r4, r2
 8025f76:	18d5      	adds	r5, r2, r3
 8025f78:	42ac      	cmp	r4, r5
 8025f7a:	d101      	bne.n	8025f80 <__sfputs_r+0x12>
 8025f7c:	2000      	movs	r0, #0
 8025f7e:	e007      	b.n	8025f90 <__sfputs_r+0x22>
 8025f80:	7821      	ldrb	r1, [r4, #0]
 8025f82:	003a      	movs	r2, r7
 8025f84:	0030      	movs	r0, r6
 8025f86:	f7ff ffdd 	bl	8025f44 <__sfputc_r>
 8025f8a:	3401      	adds	r4, #1
 8025f8c:	1c43      	adds	r3, r0, #1
 8025f8e:	d1f3      	bne.n	8025f78 <__sfputs_r+0xa>
 8025f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025f94 <_vfiprintf_r>:
 8025f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f96:	b0a1      	sub	sp, #132	@ 0x84
 8025f98:	000f      	movs	r7, r1
 8025f9a:	0015      	movs	r5, r2
 8025f9c:	001e      	movs	r6, r3
 8025f9e:	9003      	str	r0, [sp, #12]
 8025fa0:	2800      	cmp	r0, #0
 8025fa2:	d004      	beq.n	8025fae <_vfiprintf_r+0x1a>
 8025fa4:	6a03      	ldr	r3, [r0, #32]
 8025fa6:	2b00      	cmp	r3, #0
 8025fa8:	d101      	bne.n	8025fae <_vfiprintf_r+0x1a>
 8025faa:	f7fd fbab 	bl	8023704 <__sinit>
 8025fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025fb0:	07db      	lsls	r3, r3, #31
 8025fb2:	d405      	bmi.n	8025fc0 <_vfiprintf_r+0x2c>
 8025fb4:	89bb      	ldrh	r3, [r7, #12]
 8025fb6:	059b      	lsls	r3, r3, #22
 8025fb8:	d402      	bmi.n	8025fc0 <_vfiprintf_r+0x2c>
 8025fba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025fbc:	f7fd fe7b 	bl	8023cb6 <__retarget_lock_acquire_recursive>
 8025fc0:	89bb      	ldrh	r3, [r7, #12]
 8025fc2:	071b      	lsls	r3, r3, #28
 8025fc4:	d502      	bpl.n	8025fcc <_vfiprintf_r+0x38>
 8025fc6:	693b      	ldr	r3, [r7, #16]
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	d113      	bne.n	8025ff4 <_vfiprintf_r+0x60>
 8025fcc:	0039      	movs	r1, r7
 8025fce:	9803      	ldr	r0, [sp, #12]
 8025fd0:	f7fd fd44 	bl	8023a5c <__swsetup_r>
 8025fd4:	2800      	cmp	r0, #0
 8025fd6:	d00d      	beq.n	8025ff4 <_vfiprintf_r+0x60>
 8025fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025fda:	07db      	lsls	r3, r3, #31
 8025fdc:	d503      	bpl.n	8025fe6 <_vfiprintf_r+0x52>
 8025fde:	2001      	movs	r0, #1
 8025fe0:	4240      	negs	r0, r0
 8025fe2:	b021      	add	sp, #132	@ 0x84
 8025fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025fe6:	89bb      	ldrh	r3, [r7, #12]
 8025fe8:	059b      	lsls	r3, r3, #22
 8025fea:	d4f8      	bmi.n	8025fde <_vfiprintf_r+0x4a>
 8025fec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025fee:	f7fd fe63 	bl	8023cb8 <__retarget_lock_release_recursive>
 8025ff2:	e7f4      	b.n	8025fde <_vfiprintf_r+0x4a>
 8025ff4:	2300      	movs	r3, #0
 8025ff6:	ac08      	add	r4, sp, #32
 8025ff8:	6163      	str	r3, [r4, #20]
 8025ffa:	3320      	adds	r3, #32
 8025ffc:	7663      	strb	r3, [r4, #25]
 8025ffe:	3310      	adds	r3, #16
 8026000:	76a3      	strb	r3, [r4, #26]
 8026002:	9607      	str	r6, [sp, #28]
 8026004:	002e      	movs	r6, r5
 8026006:	7833      	ldrb	r3, [r6, #0]
 8026008:	2b00      	cmp	r3, #0
 802600a:	d001      	beq.n	8026010 <_vfiprintf_r+0x7c>
 802600c:	2b25      	cmp	r3, #37	@ 0x25
 802600e:	d148      	bne.n	80260a2 <_vfiprintf_r+0x10e>
 8026010:	1b73      	subs	r3, r6, r5
 8026012:	9305      	str	r3, [sp, #20]
 8026014:	42ae      	cmp	r6, r5
 8026016:	d00b      	beq.n	8026030 <_vfiprintf_r+0x9c>
 8026018:	002a      	movs	r2, r5
 802601a:	0039      	movs	r1, r7
 802601c:	9803      	ldr	r0, [sp, #12]
 802601e:	f7ff ffa6 	bl	8025f6e <__sfputs_r>
 8026022:	3001      	adds	r0, #1
 8026024:	d100      	bne.n	8026028 <_vfiprintf_r+0x94>
 8026026:	e0ae      	b.n	8026186 <_vfiprintf_r+0x1f2>
 8026028:	6963      	ldr	r3, [r4, #20]
 802602a:	9a05      	ldr	r2, [sp, #20]
 802602c:	189b      	adds	r3, r3, r2
 802602e:	6163      	str	r3, [r4, #20]
 8026030:	7833      	ldrb	r3, [r6, #0]
 8026032:	2b00      	cmp	r3, #0
 8026034:	d100      	bne.n	8026038 <_vfiprintf_r+0xa4>
 8026036:	e0a6      	b.n	8026186 <_vfiprintf_r+0x1f2>
 8026038:	2201      	movs	r2, #1
 802603a:	2300      	movs	r3, #0
 802603c:	4252      	negs	r2, r2
 802603e:	6062      	str	r2, [r4, #4]
 8026040:	a904      	add	r1, sp, #16
 8026042:	3254      	adds	r2, #84	@ 0x54
 8026044:	1852      	adds	r2, r2, r1
 8026046:	1c75      	adds	r5, r6, #1
 8026048:	6023      	str	r3, [r4, #0]
 802604a:	60e3      	str	r3, [r4, #12]
 802604c:	60a3      	str	r3, [r4, #8]
 802604e:	7013      	strb	r3, [r2, #0]
 8026050:	65a3      	str	r3, [r4, #88]	@ 0x58
 8026052:	4b59      	ldr	r3, [pc, #356]	@ (80261b8 <_vfiprintf_r+0x224>)
 8026054:	2205      	movs	r2, #5
 8026056:	0018      	movs	r0, r3
 8026058:	7829      	ldrb	r1, [r5, #0]
 802605a:	9305      	str	r3, [sp, #20]
 802605c:	f7fd fe2d 	bl	8023cba <memchr>
 8026060:	1c6e      	adds	r6, r5, #1
 8026062:	2800      	cmp	r0, #0
 8026064:	d11f      	bne.n	80260a6 <_vfiprintf_r+0x112>
 8026066:	6822      	ldr	r2, [r4, #0]
 8026068:	06d3      	lsls	r3, r2, #27
 802606a:	d504      	bpl.n	8026076 <_vfiprintf_r+0xe2>
 802606c:	2353      	movs	r3, #83	@ 0x53
 802606e:	a904      	add	r1, sp, #16
 8026070:	185b      	adds	r3, r3, r1
 8026072:	2120      	movs	r1, #32
 8026074:	7019      	strb	r1, [r3, #0]
 8026076:	0713      	lsls	r3, r2, #28
 8026078:	d504      	bpl.n	8026084 <_vfiprintf_r+0xf0>
 802607a:	2353      	movs	r3, #83	@ 0x53
 802607c:	a904      	add	r1, sp, #16
 802607e:	185b      	adds	r3, r3, r1
 8026080:	212b      	movs	r1, #43	@ 0x2b
 8026082:	7019      	strb	r1, [r3, #0]
 8026084:	782b      	ldrb	r3, [r5, #0]
 8026086:	2b2a      	cmp	r3, #42	@ 0x2a
 8026088:	d016      	beq.n	80260b8 <_vfiprintf_r+0x124>
 802608a:	002e      	movs	r6, r5
 802608c:	2100      	movs	r1, #0
 802608e:	200a      	movs	r0, #10
 8026090:	68e3      	ldr	r3, [r4, #12]
 8026092:	7832      	ldrb	r2, [r6, #0]
 8026094:	1c75      	adds	r5, r6, #1
 8026096:	3a30      	subs	r2, #48	@ 0x30
 8026098:	2a09      	cmp	r2, #9
 802609a:	d950      	bls.n	802613e <_vfiprintf_r+0x1aa>
 802609c:	2900      	cmp	r1, #0
 802609e:	d111      	bne.n	80260c4 <_vfiprintf_r+0x130>
 80260a0:	e017      	b.n	80260d2 <_vfiprintf_r+0x13e>
 80260a2:	3601      	adds	r6, #1
 80260a4:	e7af      	b.n	8026006 <_vfiprintf_r+0x72>
 80260a6:	9b05      	ldr	r3, [sp, #20]
 80260a8:	6822      	ldr	r2, [r4, #0]
 80260aa:	1ac0      	subs	r0, r0, r3
 80260ac:	2301      	movs	r3, #1
 80260ae:	4083      	lsls	r3, r0
 80260b0:	4313      	orrs	r3, r2
 80260b2:	0035      	movs	r5, r6
 80260b4:	6023      	str	r3, [r4, #0]
 80260b6:	e7cc      	b.n	8026052 <_vfiprintf_r+0xbe>
 80260b8:	9b07      	ldr	r3, [sp, #28]
 80260ba:	1d19      	adds	r1, r3, #4
 80260bc:	681b      	ldr	r3, [r3, #0]
 80260be:	9107      	str	r1, [sp, #28]
 80260c0:	2b00      	cmp	r3, #0
 80260c2:	db01      	blt.n	80260c8 <_vfiprintf_r+0x134>
 80260c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80260c6:	e004      	b.n	80260d2 <_vfiprintf_r+0x13e>
 80260c8:	425b      	negs	r3, r3
 80260ca:	60e3      	str	r3, [r4, #12]
 80260cc:	2302      	movs	r3, #2
 80260ce:	4313      	orrs	r3, r2
 80260d0:	6023      	str	r3, [r4, #0]
 80260d2:	7833      	ldrb	r3, [r6, #0]
 80260d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80260d6:	d10c      	bne.n	80260f2 <_vfiprintf_r+0x15e>
 80260d8:	7873      	ldrb	r3, [r6, #1]
 80260da:	2b2a      	cmp	r3, #42	@ 0x2a
 80260dc:	d134      	bne.n	8026148 <_vfiprintf_r+0x1b4>
 80260de:	9b07      	ldr	r3, [sp, #28]
 80260e0:	3602      	adds	r6, #2
 80260e2:	1d1a      	adds	r2, r3, #4
 80260e4:	681b      	ldr	r3, [r3, #0]
 80260e6:	9207      	str	r2, [sp, #28]
 80260e8:	2b00      	cmp	r3, #0
 80260ea:	da01      	bge.n	80260f0 <_vfiprintf_r+0x15c>
 80260ec:	2301      	movs	r3, #1
 80260ee:	425b      	negs	r3, r3
 80260f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80260f2:	4d32      	ldr	r5, [pc, #200]	@ (80261bc <_vfiprintf_r+0x228>)
 80260f4:	2203      	movs	r2, #3
 80260f6:	0028      	movs	r0, r5
 80260f8:	7831      	ldrb	r1, [r6, #0]
 80260fa:	f7fd fdde 	bl	8023cba <memchr>
 80260fe:	2800      	cmp	r0, #0
 8026100:	d006      	beq.n	8026110 <_vfiprintf_r+0x17c>
 8026102:	2340      	movs	r3, #64	@ 0x40
 8026104:	1b40      	subs	r0, r0, r5
 8026106:	4083      	lsls	r3, r0
 8026108:	6822      	ldr	r2, [r4, #0]
 802610a:	3601      	adds	r6, #1
 802610c:	4313      	orrs	r3, r2
 802610e:	6023      	str	r3, [r4, #0]
 8026110:	7831      	ldrb	r1, [r6, #0]
 8026112:	2206      	movs	r2, #6
 8026114:	482a      	ldr	r0, [pc, #168]	@ (80261c0 <_vfiprintf_r+0x22c>)
 8026116:	1c75      	adds	r5, r6, #1
 8026118:	7621      	strb	r1, [r4, #24]
 802611a:	f7fd fdce 	bl	8023cba <memchr>
 802611e:	2800      	cmp	r0, #0
 8026120:	d040      	beq.n	80261a4 <_vfiprintf_r+0x210>
 8026122:	4b28      	ldr	r3, [pc, #160]	@ (80261c4 <_vfiprintf_r+0x230>)
 8026124:	2b00      	cmp	r3, #0
 8026126:	d122      	bne.n	802616e <_vfiprintf_r+0x1da>
 8026128:	2207      	movs	r2, #7
 802612a:	9b07      	ldr	r3, [sp, #28]
 802612c:	3307      	adds	r3, #7
 802612e:	4393      	bics	r3, r2
 8026130:	3308      	adds	r3, #8
 8026132:	9307      	str	r3, [sp, #28]
 8026134:	6963      	ldr	r3, [r4, #20]
 8026136:	9a04      	ldr	r2, [sp, #16]
 8026138:	189b      	adds	r3, r3, r2
 802613a:	6163      	str	r3, [r4, #20]
 802613c:	e762      	b.n	8026004 <_vfiprintf_r+0x70>
 802613e:	4343      	muls	r3, r0
 8026140:	002e      	movs	r6, r5
 8026142:	2101      	movs	r1, #1
 8026144:	189b      	adds	r3, r3, r2
 8026146:	e7a4      	b.n	8026092 <_vfiprintf_r+0xfe>
 8026148:	2300      	movs	r3, #0
 802614a:	200a      	movs	r0, #10
 802614c:	0019      	movs	r1, r3
 802614e:	3601      	adds	r6, #1
 8026150:	6063      	str	r3, [r4, #4]
 8026152:	7832      	ldrb	r2, [r6, #0]
 8026154:	1c75      	adds	r5, r6, #1
 8026156:	3a30      	subs	r2, #48	@ 0x30
 8026158:	2a09      	cmp	r2, #9
 802615a:	d903      	bls.n	8026164 <_vfiprintf_r+0x1d0>
 802615c:	2b00      	cmp	r3, #0
 802615e:	d0c8      	beq.n	80260f2 <_vfiprintf_r+0x15e>
 8026160:	9109      	str	r1, [sp, #36]	@ 0x24
 8026162:	e7c6      	b.n	80260f2 <_vfiprintf_r+0x15e>
 8026164:	4341      	muls	r1, r0
 8026166:	002e      	movs	r6, r5
 8026168:	2301      	movs	r3, #1
 802616a:	1889      	adds	r1, r1, r2
 802616c:	e7f1      	b.n	8026152 <_vfiprintf_r+0x1be>
 802616e:	aa07      	add	r2, sp, #28
 8026170:	9200      	str	r2, [sp, #0]
 8026172:	0021      	movs	r1, r4
 8026174:	003a      	movs	r2, r7
 8026176:	4b14      	ldr	r3, [pc, #80]	@ (80261c8 <_vfiprintf_r+0x234>)
 8026178:	9803      	ldr	r0, [sp, #12]
 802617a:	f7fc fe77 	bl	8022e6c <_printf_float>
 802617e:	9004      	str	r0, [sp, #16]
 8026180:	9b04      	ldr	r3, [sp, #16]
 8026182:	3301      	adds	r3, #1
 8026184:	d1d6      	bne.n	8026134 <_vfiprintf_r+0x1a0>
 8026186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026188:	07db      	lsls	r3, r3, #31
 802618a:	d405      	bmi.n	8026198 <_vfiprintf_r+0x204>
 802618c:	89bb      	ldrh	r3, [r7, #12]
 802618e:	059b      	lsls	r3, r3, #22
 8026190:	d402      	bmi.n	8026198 <_vfiprintf_r+0x204>
 8026192:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8026194:	f7fd fd90 	bl	8023cb8 <__retarget_lock_release_recursive>
 8026198:	89bb      	ldrh	r3, [r7, #12]
 802619a:	065b      	lsls	r3, r3, #25
 802619c:	d500      	bpl.n	80261a0 <_vfiprintf_r+0x20c>
 802619e:	e71e      	b.n	8025fde <_vfiprintf_r+0x4a>
 80261a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80261a2:	e71e      	b.n	8025fe2 <_vfiprintf_r+0x4e>
 80261a4:	aa07      	add	r2, sp, #28
 80261a6:	9200      	str	r2, [sp, #0]
 80261a8:	0021      	movs	r1, r4
 80261aa:	003a      	movs	r2, r7
 80261ac:	4b06      	ldr	r3, [pc, #24]	@ (80261c8 <_vfiprintf_r+0x234>)
 80261ae:	9803      	ldr	r0, [sp, #12]
 80261b0:	f7fd f90a 	bl	80233c8 <_printf_i>
 80261b4:	e7e3      	b.n	802617e <_vfiprintf_r+0x1ea>
 80261b6:	46c0      	nop			@ (mov r8, r8)
 80261b8:	0802bb88 	.word	0x0802bb88
 80261bc:	0802bb8e 	.word	0x0802bb8e
 80261c0:	0802bb92 	.word	0x0802bb92
 80261c4:	08022e6d 	.word	0x08022e6d
 80261c8:	08025f6f 	.word	0x08025f6f

080261cc <__sflush_r>:
 80261cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80261ce:	220c      	movs	r2, #12
 80261d0:	5e8b      	ldrsh	r3, [r1, r2]
 80261d2:	0005      	movs	r5, r0
 80261d4:	000c      	movs	r4, r1
 80261d6:	071a      	lsls	r2, r3, #28
 80261d8:	d456      	bmi.n	8026288 <__sflush_r+0xbc>
 80261da:	684a      	ldr	r2, [r1, #4]
 80261dc:	2a00      	cmp	r2, #0
 80261de:	dc02      	bgt.n	80261e6 <__sflush_r+0x1a>
 80261e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80261e2:	2a00      	cmp	r2, #0
 80261e4:	dd4e      	ble.n	8026284 <__sflush_r+0xb8>
 80261e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80261e8:	2f00      	cmp	r7, #0
 80261ea:	d04b      	beq.n	8026284 <__sflush_r+0xb8>
 80261ec:	2200      	movs	r2, #0
 80261ee:	2080      	movs	r0, #128	@ 0x80
 80261f0:	682e      	ldr	r6, [r5, #0]
 80261f2:	602a      	str	r2, [r5, #0]
 80261f4:	001a      	movs	r2, r3
 80261f6:	0140      	lsls	r0, r0, #5
 80261f8:	6a21      	ldr	r1, [r4, #32]
 80261fa:	4002      	ands	r2, r0
 80261fc:	4203      	tst	r3, r0
 80261fe:	d033      	beq.n	8026268 <__sflush_r+0x9c>
 8026200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026202:	89a3      	ldrh	r3, [r4, #12]
 8026204:	075b      	lsls	r3, r3, #29
 8026206:	d506      	bpl.n	8026216 <__sflush_r+0x4a>
 8026208:	6863      	ldr	r3, [r4, #4]
 802620a:	1ad2      	subs	r2, r2, r3
 802620c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802620e:	2b00      	cmp	r3, #0
 8026210:	d001      	beq.n	8026216 <__sflush_r+0x4a>
 8026212:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026214:	1ad2      	subs	r2, r2, r3
 8026216:	2300      	movs	r3, #0
 8026218:	0028      	movs	r0, r5
 802621a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 802621c:	6a21      	ldr	r1, [r4, #32]
 802621e:	47b8      	blx	r7
 8026220:	89a2      	ldrh	r2, [r4, #12]
 8026222:	1c43      	adds	r3, r0, #1
 8026224:	d106      	bne.n	8026234 <__sflush_r+0x68>
 8026226:	6829      	ldr	r1, [r5, #0]
 8026228:	291d      	cmp	r1, #29
 802622a:	d846      	bhi.n	80262ba <__sflush_r+0xee>
 802622c:	4b29      	ldr	r3, [pc, #164]	@ (80262d4 <__sflush_r+0x108>)
 802622e:	410b      	asrs	r3, r1
 8026230:	07db      	lsls	r3, r3, #31
 8026232:	d442      	bmi.n	80262ba <__sflush_r+0xee>
 8026234:	2300      	movs	r3, #0
 8026236:	6063      	str	r3, [r4, #4]
 8026238:	6923      	ldr	r3, [r4, #16]
 802623a:	6023      	str	r3, [r4, #0]
 802623c:	04d2      	lsls	r2, r2, #19
 802623e:	d505      	bpl.n	802624c <__sflush_r+0x80>
 8026240:	1c43      	adds	r3, r0, #1
 8026242:	d102      	bne.n	802624a <__sflush_r+0x7e>
 8026244:	682b      	ldr	r3, [r5, #0]
 8026246:	2b00      	cmp	r3, #0
 8026248:	d100      	bne.n	802624c <__sflush_r+0x80>
 802624a:	6560      	str	r0, [r4, #84]	@ 0x54
 802624c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802624e:	602e      	str	r6, [r5, #0]
 8026250:	2900      	cmp	r1, #0
 8026252:	d017      	beq.n	8026284 <__sflush_r+0xb8>
 8026254:	0023      	movs	r3, r4
 8026256:	3344      	adds	r3, #68	@ 0x44
 8026258:	4299      	cmp	r1, r3
 802625a:	d002      	beq.n	8026262 <__sflush_r+0x96>
 802625c:	0028      	movs	r0, r5
 802625e:	f7fe fbc9 	bl	80249f4 <_free_r>
 8026262:	2300      	movs	r3, #0
 8026264:	6363      	str	r3, [r4, #52]	@ 0x34
 8026266:	e00d      	b.n	8026284 <__sflush_r+0xb8>
 8026268:	2301      	movs	r3, #1
 802626a:	0028      	movs	r0, r5
 802626c:	47b8      	blx	r7
 802626e:	0002      	movs	r2, r0
 8026270:	1c43      	adds	r3, r0, #1
 8026272:	d1c6      	bne.n	8026202 <__sflush_r+0x36>
 8026274:	682b      	ldr	r3, [r5, #0]
 8026276:	2b00      	cmp	r3, #0
 8026278:	d0c3      	beq.n	8026202 <__sflush_r+0x36>
 802627a:	2b1d      	cmp	r3, #29
 802627c:	d001      	beq.n	8026282 <__sflush_r+0xb6>
 802627e:	2b16      	cmp	r3, #22
 8026280:	d11a      	bne.n	80262b8 <__sflush_r+0xec>
 8026282:	602e      	str	r6, [r5, #0]
 8026284:	2000      	movs	r0, #0
 8026286:	e01e      	b.n	80262c6 <__sflush_r+0xfa>
 8026288:	690e      	ldr	r6, [r1, #16]
 802628a:	2e00      	cmp	r6, #0
 802628c:	d0fa      	beq.n	8026284 <__sflush_r+0xb8>
 802628e:	680f      	ldr	r7, [r1, #0]
 8026290:	600e      	str	r6, [r1, #0]
 8026292:	1bba      	subs	r2, r7, r6
 8026294:	9201      	str	r2, [sp, #4]
 8026296:	2200      	movs	r2, #0
 8026298:	079b      	lsls	r3, r3, #30
 802629a:	d100      	bne.n	802629e <__sflush_r+0xd2>
 802629c:	694a      	ldr	r2, [r1, #20]
 802629e:	60a2      	str	r2, [r4, #8]
 80262a0:	9b01      	ldr	r3, [sp, #4]
 80262a2:	2b00      	cmp	r3, #0
 80262a4:	ddee      	ble.n	8026284 <__sflush_r+0xb8>
 80262a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80262a8:	0032      	movs	r2, r6
 80262aa:	001f      	movs	r7, r3
 80262ac:	0028      	movs	r0, r5
 80262ae:	9b01      	ldr	r3, [sp, #4]
 80262b0:	6a21      	ldr	r1, [r4, #32]
 80262b2:	47b8      	blx	r7
 80262b4:	2800      	cmp	r0, #0
 80262b6:	dc07      	bgt.n	80262c8 <__sflush_r+0xfc>
 80262b8:	89a2      	ldrh	r2, [r4, #12]
 80262ba:	2340      	movs	r3, #64	@ 0x40
 80262bc:	2001      	movs	r0, #1
 80262be:	4313      	orrs	r3, r2
 80262c0:	b21b      	sxth	r3, r3
 80262c2:	81a3      	strh	r3, [r4, #12]
 80262c4:	4240      	negs	r0, r0
 80262c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80262c8:	9b01      	ldr	r3, [sp, #4]
 80262ca:	1836      	adds	r6, r6, r0
 80262cc:	1a1b      	subs	r3, r3, r0
 80262ce:	9301      	str	r3, [sp, #4]
 80262d0:	e7e6      	b.n	80262a0 <__sflush_r+0xd4>
 80262d2:	46c0      	nop			@ (mov r8, r8)
 80262d4:	dfbffffe 	.word	0xdfbffffe

080262d8 <_fflush_r>:
 80262d8:	690b      	ldr	r3, [r1, #16]
 80262da:	b570      	push	{r4, r5, r6, lr}
 80262dc:	0005      	movs	r5, r0
 80262de:	000c      	movs	r4, r1
 80262e0:	2b00      	cmp	r3, #0
 80262e2:	d102      	bne.n	80262ea <_fflush_r+0x12>
 80262e4:	2500      	movs	r5, #0
 80262e6:	0028      	movs	r0, r5
 80262e8:	bd70      	pop	{r4, r5, r6, pc}
 80262ea:	2800      	cmp	r0, #0
 80262ec:	d004      	beq.n	80262f8 <_fflush_r+0x20>
 80262ee:	6a03      	ldr	r3, [r0, #32]
 80262f0:	2b00      	cmp	r3, #0
 80262f2:	d101      	bne.n	80262f8 <_fflush_r+0x20>
 80262f4:	f7fd fa06 	bl	8023704 <__sinit>
 80262f8:	220c      	movs	r2, #12
 80262fa:	5ea3      	ldrsh	r3, [r4, r2]
 80262fc:	2b00      	cmp	r3, #0
 80262fe:	d0f1      	beq.n	80262e4 <_fflush_r+0xc>
 8026300:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026302:	07d2      	lsls	r2, r2, #31
 8026304:	d404      	bmi.n	8026310 <_fflush_r+0x38>
 8026306:	059b      	lsls	r3, r3, #22
 8026308:	d402      	bmi.n	8026310 <_fflush_r+0x38>
 802630a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802630c:	f7fd fcd3 	bl	8023cb6 <__retarget_lock_acquire_recursive>
 8026310:	0028      	movs	r0, r5
 8026312:	0021      	movs	r1, r4
 8026314:	f7ff ff5a 	bl	80261cc <__sflush_r>
 8026318:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802631a:	0005      	movs	r5, r0
 802631c:	07db      	lsls	r3, r3, #31
 802631e:	d4e2      	bmi.n	80262e6 <_fflush_r+0xe>
 8026320:	89a3      	ldrh	r3, [r4, #12]
 8026322:	059b      	lsls	r3, r3, #22
 8026324:	d4df      	bmi.n	80262e6 <_fflush_r+0xe>
 8026326:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026328:	f7fd fcc6 	bl	8023cb8 <__retarget_lock_release_recursive>
 802632c:	e7db      	b.n	80262e6 <_fflush_r+0xe>
	...

08026330 <__swhatbuf_r>:
 8026330:	b570      	push	{r4, r5, r6, lr}
 8026332:	000e      	movs	r6, r1
 8026334:	001d      	movs	r5, r3
 8026336:	230e      	movs	r3, #14
 8026338:	5ec9      	ldrsh	r1, [r1, r3]
 802633a:	0014      	movs	r4, r2
 802633c:	b096      	sub	sp, #88	@ 0x58
 802633e:	2900      	cmp	r1, #0
 8026340:	da0c      	bge.n	802635c <__swhatbuf_r+0x2c>
 8026342:	89b2      	ldrh	r2, [r6, #12]
 8026344:	2380      	movs	r3, #128	@ 0x80
 8026346:	0011      	movs	r1, r2
 8026348:	4019      	ands	r1, r3
 802634a:	421a      	tst	r2, r3
 802634c:	d114      	bne.n	8026378 <__swhatbuf_r+0x48>
 802634e:	2380      	movs	r3, #128	@ 0x80
 8026350:	00db      	lsls	r3, r3, #3
 8026352:	2000      	movs	r0, #0
 8026354:	6029      	str	r1, [r5, #0]
 8026356:	6023      	str	r3, [r4, #0]
 8026358:	b016      	add	sp, #88	@ 0x58
 802635a:	bd70      	pop	{r4, r5, r6, pc}
 802635c:	466a      	mov	r2, sp
 802635e:	f000 f865 	bl	802642c <_fstat_r>
 8026362:	2800      	cmp	r0, #0
 8026364:	dbed      	blt.n	8026342 <__swhatbuf_r+0x12>
 8026366:	23f0      	movs	r3, #240	@ 0xf0
 8026368:	9901      	ldr	r1, [sp, #4]
 802636a:	021b      	lsls	r3, r3, #8
 802636c:	4019      	ands	r1, r3
 802636e:	4b04      	ldr	r3, [pc, #16]	@ (8026380 <__swhatbuf_r+0x50>)
 8026370:	18c9      	adds	r1, r1, r3
 8026372:	424b      	negs	r3, r1
 8026374:	4159      	adcs	r1, r3
 8026376:	e7ea      	b.n	802634e <__swhatbuf_r+0x1e>
 8026378:	2100      	movs	r1, #0
 802637a:	2340      	movs	r3, #64	@ 0x40
 802637c:	e7e9      	b.n	8026352 <__swhatbuf_r+0x22>
 802637e:	46c0      	nop			@ (mov r8, r8)
 8026380:	ffffe000 	.word	0xffffe000

08026384 <__smakebuf_r>:
 8026384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026386:	2602      	movs	r6, #2
 8026388:	898b      	ldrh	r3, [r1, #12]
 802638a:	0005      	movs	r5, r0
 802638c:	000c      	movs	r4, r1
 802638e:	b085      	sub	sp, #20
 8026390:	4233      	tst	r3, r6
 8026392:	d007      	beq.n	80263a4 <__smakebuf_r+0x20>
 8026394:	0023      	movs	r3, r4
 8026396:	3347      	adds	r3, #71	@ 0x47
 8026398:	6023      	str	r3, [r4, #0]
 802639a:	6123      	str	r3, [r4, #16]
 802639c:	2301      	movs	r3, #1
 802639e:	6163      	str	r3, [r4, #20]
 80263a0:	b005      	add	sp, #20
 80263a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80263a4:	ab03      	add	r3, sp, #12
 80263a6:	aa02      	add	r2, sp, #8
 80263a8:	f7ff ffc2 	bl	8026330 <__swhatbuf_r>
 80263ac:	9f02      	ldr	r7, [sp, #8]
 80263ae:	9001      	str	r0, [sp, #4]
 80263b0:	0039      	movs	r1, r7
 80263b2:	0028      	movs	r0, r5
 80263b4:	f7fe feee 	bl	8025194 <_malloc_r>
 80263b8:	2800      	cmp	r0, #0
 80263ba:	d108      	bne.n	80263ce <__smakebuf_r+0x4a>
 80263bc:	220c      	movs	r2, #12
 80263be:	5ea3      	ldrsh	r3, [r4, r2]
 80263c0:	059a      	lsls	r2, r3, #22
 80263c2:	d4ed      	bmi.n	80263a0 <__smakebuf_r+0x1c>
 80263c4:	2203      	movs	r2, #3
 80263c6:	4393      	bics	r3, r2
 80263c8:	431e      	orrs	r6, r3
 80263ca:	81a6      	strh	r6, [r4, #12]
 80263cc:	e7e2      	b.n	8026394 <__smakebuf_r+0x10>
 80263ce:	2380      	movs	r3, #128	@ 0x80
 80263d0:	89a2      	ldrh	r2, [r4, #12]
 80263d2:	6020      	str	r0, [r4, #0]
 80263d4:	4313      	orrs	r3, r2
 80263d6:	81a3      	strh	r3, [r4, #12]
 80263d8:	9b03      	ldr	r3, [sp, #12]
 80263da:	6120      	str	r0, [r4, #16]
 80263dc:	6167      	str	r7, [r4, #20]
 80263de:	2b00      	cmp	r3, #0
 80263e0:	d00c      	beq.n	80263fc <__smakebuf_r+0x78>
 80263e2:	0028      	movs	r0, r5
 80263e4:	230e      	movs	r3, #14
 80263e6:	5ee1      	ldrsh	r1, [r4, r3]
 80263e8:	f000 f832 	bl	8026450 <_isatty_r>
 80263ec:	2800      	cmp	r0, #0
 80263ee:	d005      	beq.n	80263fc <__smakebuf_r+0x78>
 80263f0:	2303      	movs	r3, #3
 80263f2:	89a2      	ldrh	r2, [r4, #12]
 80263f4:	439a      	bics	r2, r3
 80263f6:	3b02      	subs	r3, #2
 80263f8:	4313      	orrs	r3, r2
 80263fa:	81a3      	strh	r3, [r4, #12]
 80263fc:	89a3      	ldrh	r3, [r4, #12]
 80263fe:	9a01      	ldr	r2, [sp, #4]
 8026400:	4313      	orrs	r3, r2
 8026402:	81a3      	strh	r3, [r4, #12]
 8026404:	e7cc      	b.n	80263a0 <__smakebuf_r+0x1c>

08026406 <memmove>:
 8026406:	b510      	push	{r4, lr}
 8026408:	4288      	cmp	r0, r1
 802640a:	d806      	bhi.n	802641a <memmove+0x14>
 802640c:	2300      	movs	r3, #0
 802640e:	429a      	cmp	r2, r3
 8026410:	d008      	beq.n	8026424 <memmove+0x1e>
 8026412:	5ccc      	ldrb	r4, [r1, r3]
 8026414:	54c4      	strb	r4, [r0, r3]
 8026416:	3301      	adds	r3, #1
 8026418:	e7f9      	b.n	802640e <memmove+0x8>
 802641a:	188b      	adds	r3, r1, r2
 802641c:	4298      	cmp	r0, r3
 802641e:	d2f5      	bcs.n	802640c <memmove+0x6>
 8026420:	3a01      	subs	r2, #1
 8026422:	d200      	bcs.n	8026426 <memmove+0x20>
 8026424:	bd10      	pop	{r4, pc}
 8026426:	5c8b      	ldrb	r3, [r1, r2]
 8026428:	5483      	strb	r3, [r0, r2]
 802642a:	e7f9      	b.n	8026420 <memmove+0x1a>

0802642c <_fstat_r>:
 802642c:	2300      	movs	r3, #0
 802642e:	b570      	push	{r4, r5, r6, lr}
 8026430:	4d06      	ldr	r5, [pc, #24]	@ (802644c <_fstat_r+0x20>)
 8026432:	0004      	movs	r4, r0
 8026434:	0008      	movs	r0, r1
 8026436:	0011      	movs	r1, r2
 8026438:	602b      	str	r3, [r5, #0]
 802643a:	f7ea fdbb 	bl	8010fb4 <_fstat>
 802643e:	1c43      	adds	r3, r0, #1
 8026440:	d103      	bne.n	802644a <_fstat_r+0x1e>
 8026442:	682b      	ldr	r3, [r5, #0]
 8026444:	2b00      	cmp	r3, #0
 8026446:	d000      	beq.n	802644a <_fstat_r+0x1e>
 8026448:	6023      	str	r3, [r4, #0]
 802644a:	bd70      	pop	{r4, r5, r6, pc}
 802644c:	200035e0 	.word	0x200035e0

08026450 <_isatty_r>:
 8026450:	2300      	movs	r3, #0
 8026452:	b570      	push	{r4, r5, r6, lr}
 8026454:	4d06      	ldr	r5, [pc, #24]	@ (8026470 <_isatty_r+0x20>)
 8026456:	0004      	movs	r4, r0
 8026458:	0008      	movs	r0, r1
 802645a:	602b      	str	r3, [r5, #0]
 802645c:	f7ea fdb8 	bl	8010fd0 <_isatty>
 8026460:	1c43      	adds	r3, r0, #1
 8026462:	d103      	bne.n	802646c <_isatty_r+0x1c>
 8026464:	682b      	ldr	r3, [r5, #0]
 8026466:	2b00      	cmp	r3, #0
 8026468:	d000      	beq.n	802646c <_isatty_r+0x1c>
 802646a:	6023      	str	r3, [r4, #0]
 802646c:	bd70      	pop	{r4, r5, r6, pc}
 802646e:	46c0      	nop			@ (mov r8, r8)
 8026470:	200035e0 	.word	0x200035e0

08026474 <_sbrk_r>:
 8026474:	2300      	movs	r3, #0
 8026476:	b570      	push	{r4, r5, r6, lr}
 8026478:	4d06      	ldr	r5, [pc, #24]	@ (8026494 <_sbrk_r+0x20>)
 802647a:	0004      	movs	r4, r0
 802647c:	0008      	movs	r0, r1
 802647e:	602b      	str	r3, [r5, #0]
 8026480:	f7ea fdba 	bl	8010ff8 <_sbrk>
 8026484:	1c43      	adds	r3, r0, #1
 8026486:	d103      	bne.n	8026490 <_sbrk_r+0x1c>
 8026488:	682b      	ldr	r3, [r5, #0]
 802648a:	2b00      	cmp	r3, #0
 802648c:	d000      	beq.n	8026490 <_sbrk_r+0x1c>
 802648e:	6023      	str	r3, [r4, #0]
 8026490:	bd70      	pop	{r4, r5, r6, pc}
 8026492:	46c0      	nop			@ (mov r8, r8)
 8026494:	200035e0 	.word	0x200035e0

08026498 <__assert_func>:
 8026498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802649a:	0014      	movs	r4, r2
 802649c:	001a      	movs	r2, r3
 802649e:	4b09      	ldr	r3, [pc, #36]	@ (80264c4 <__assert_func+0x2c>)
 80264a0:	0005      	movs	r5, r0
 80264a2:	681b      	ldr	r3, [r3, #0]
 80264a4:	000e      	movs	r6, r1
 80264a6:	68d8      	ldr	r0, [r3, #12]
 80264a8:	4b07      	ldr	r3, [pc, #28]	@ (80264c8 <__assert_func+0x30>)
 80264aa:	2c00      	cmp	r4, #0
 80264ac:	d101      	bne.n	80264b2 <__assert_func+0x1a>
 80264ae:	4b07      	ldr	r3, [pc, #28]	@ (80264cc <__assert_func+0x34>)
 80264b0:	001c      	movs	r4, r3
 80264b2:	4907      	ldr	r1, [pc, #28]	@ (80264d0 <__assert_func+0x38>)
 80264b4:	9301      	str	r3, [sp, #4]
 80264b6:	9402      	str	r4, [sp, #8]
 80264b8:	002b      	movs	r3, r5
 80264ba:	9600      	str	r6, [sp, #0]
 80264bc:	f000 f866 	bl	802658c <fiprintf>
 80264c0:	f000 f874 	bl	80265ac <abort>
 80264c4:	200003e0 	.word	0x200003e0
 80264c8:	0802bb99 	.word	0x0802bb99
 80264cc:	0802bbd4 	.word	0x0802bbd4
 80264d0:	0802bba6 	.word	0x0802bba6

080264d4 <_calloc_r>:
 80264d4:	b570      	push	{r4, r5, r6, lr}
 80264d6:	0c0b      	lsrs	r3, r1, #16
 80264d8:	0c15      	lsrs	r5, r2, #16
 80264da:	2b00      	cmp	r3, #0
 80264dc:	d11e      	bne.n	802651c <_calloc_r+0x48>
 80264de:	2d00      	cmp	r5, #0
 80264e0:	d10c      	bne.n	80264fc <_calloc_r+0x28>
 80264e2:	b289      	uxth	r1, r1
 80264e4:	b294      	uxth	r4, r2
 80264e6:	434c      	muls	r4, r1
 80264e8:	0021      	movs	r1, r4
 80264ea:	f7fe fe53 	bl	8025194 <_malloc_r>
 80264ee:	1e05      	subs	r5, r0, #0
 80264f0:	d01a      	beq.n	8026528 <_calloc_r+0x54>
 80264f2:	0022      	movs	r2, r4
 80264f4:	2100      	movs	r1, #0
 80264f6:	f7fd fb0f 	bl	8023b18 <memset>
 80264fa:	e016      	b.n	802652a <_calloc_r+0x56>
 80264fc:	1c2b      	adds	r3, r5, #0
 80264fe:	1c0c      	adds	r4, r1, #0
 8026500:	b289      	uxth	r1, r1
 8026502:	b292      	uxth	r2, r2
 8026504:	434a      	muls	r2, r1
 8026506:	b29b      	uxth	r3, r3
 8026508:	b2a1      	uxth	r1, r4
 802650a:	4359      	muls	r1, r3
 802650c:	0c14      	lsrs	r4, r2, #16
 802650e:	190c      	adds	r4, r1, r4
 8026510:	0c23      	lsrs	r3, r4, #16
 8026512:	d107      	bne.n	8026524 <_calloc_r+0x50>
 8026514:	0424      	lsls	r4, r4, #16
 8026516:	b292      	uxth	r2, r2
 8026518:	4314      	orrs	r4, r2
 802651a:	e7e5      	b.n	80264e8 <_calloc_r+0x14>
 802651c:	2d00      	cmp	r5, #0
 802651e:	d101      	bne.n	8026524 <_calloc_r+0x50>
 8026520:	1c14      	adds	r4, r2, #0
 8026522:	e7ed      	b.n	8026500 <_calloc_r+0x2c>
 8026524:	230c      	movs	r3, #12
 8026526:	6003      	str	r3, [r0, #0]
 8026528:	2500      	movs	r5, #0
 802652a:	0028      	movs	r0, r5
 802652c:	bd70      	pop	{r4, r5, r6, pc}

0802652e <_realloc_r>:
 802652e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026530:	0006      	movs	r6, r0
 8026532:	000c      	movs	r4, r1
 8026534:	0015      	movs	r5, r2
 8026536:	2900      	cmp	r1, #0
 8026538:	d105      	bne.n	8026546 <_realloc_r+0x18>
 802653a:	0011      	movs	r1, r2
 802653c:	f7fe fe2a 	bl	8025194 <_malloc_r>
 8026540:	0004      	movs	r4, r0
 8026542:	0020      	movs	r0, r4
 8026544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026546:	2a00      	cmp	r2, #0
 8026548:	d103      	bne.n	8026552 <_realloc_r+0x24>
 802654a:	f7fe fa53 	bl	80249f4 <_free_r>
 802654e:	2400      	movs	r4, #0
 8026550:	e7f7      	b.n	8026542 <_realloc_r+0x14>
 8026552:	f000 f832 	bl	80265ba <_malloc_usable_size_r>
 8026556:	0007      	movs	r7, r0
 8026558:	4285      	cmp	r5, r0
 802655a:	d802      	bhi.n	8026562 <_realloc_r+0x34>
 802655c:	0843      	lsrs	r3, r0, #1
 802655e:	42ab      	cmp	r3, r5
 8026560:	d3ef      	bcc.n	8026542 <_realloc_r+0x14>
 8026562:	0029      	movs	r1, r5
 8026564:	0030      	movs	r0, r6
 8026566:	f7fe fe15 	bl	8025194 <_malloc_r>
 802656a:	9001      	str	r0, [sp, #4]
 802656c:	2800      	cmp	r0, #0
 802656e:	d0ee      	beq.n	802654e <_realloc_r+0x20>
 8026570:	002a      	movs	r2, r5
 8026572:	42bd      	cmp	r5, r7
 8026574:	d900      	bls.n	8026578 <_realloc_r+0x4a>
 8026576:	003a      	movs	r2, r7
 8026578:	0021      	movs	r1, r4
 802657a:	9801      	ldr	r0, [sp, #4]
 802657c:	f7fd fba8 	bl	8023cd0 <memcpy>
 8026580:	0021      	movs	r1, r4
 8026582:	0030      	movs	r0, r6
 8026584:	f7fe fa36 	bl	80249f4 <_free_r>
 8026588:	9c01      	ldr	r4, [sp, #4]
 802658a:	e7da      	b.n	8026542 <_realloc_r+0x14>

0802658c <fiprintf>:
 802658c:	b40e      	push	{r1, r2, r3}
 802658e:	b517      	push	{r0, r1, r2, r4, lr}
 8026590:	4c05      	ldr	r4, [pc, #20]	@ (80265a8 <fiprintf+0x1c>)
 8026592:	ab05      	add	r3, sp, #20
 8026594:	cb04      	ldmia	r3!, {r2}
 8026596:	0001      	movs	r1, r0
 8026598:	6820      	ldr	r0, [r4, #0]
 802659a:	9301      	str	r3, [sp, #4]
 802659c:	f7ff fcfa 	bl	8025f94 <_vfiprintf_r>
 80265a0:	bc1e      	pop	{r1, r2, r3, r4}
 80265a2:	bc08      	pop	{r3}
 80265a4:	b003      	add	sp, #12
 80265a6:	4718      	bx	r3
 80265a8:	200003e0 	.word	0x200003e0

080265ac <abort>:
 80265ac:	2006      	movs	r0, #6
 80265ae:	b510      	push	{r4, lr}
 80265b0:	f000 f834 	bl	802661c <raise>
 80265b4:	2001      	movs	r0, #1
 80265b6:	f7ea fcc9 	bl	8010f4c <_exit>

080265ba <_malloc_usable_size_r>:
 80265ba:	1f0b      	subs	r3, r1, #4
 80265bc:	681b      	ldr	r3, [r3, #0]
 80265be:	1f18      	subs	r0, r3, #4
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	da01      	bge.n	80265c8 <_malloc_usable_size_r+0xe>
 80265c4:	580b      	ldr	r3, [r1, r0]
 80265c6:	18c0      	adds	r0, r0, r3
 80265c8:	4770      	bx	lr

080265ca <_raise_r>:
 80265ca:	b570      	push	{r4, r5, r6, lr}
 80265cc:	0004      	movs	r4, r0
 80265ce:	000d      	movs	r5, r1
 80265d0:	291f      	cmp	r1, #31
 80265d2:	d904      	bls.n	80265de <_raise_r+0x14>
 80265d4:	2316      	movs	r3, #22
 80265d6:	6003      	str	r3, [r0, #0]
 80265d8:	2001      	movs	r0, #1
 80265da:	4240      	negs	r0, r0
 80265dc:	bd70      	pop	{r4, r5, r6, pc}
 80265de:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	d004      	beq.n	80265ee <_raise_r+0x24>
 80265e4:	008a      	lsls	r2, r1, #2
 80265e6:	189b      	adds	r3, r3, r2
 80265e8:	681a      	ldr	r2, [r3, #0]
 80265ea:	2a00      	cmp	r2, #0
 80265ec:	d108      	bne.n	8026600 <_raise_r+0x36>
 80265ee:	0020      	movs	r0, r4
 80265f0:	f000 f830 	bl	8026654 <_getpid_r>
 80265f4:	002a      	movs	r2, r5
 80265f6:	0001      	movs	r1, r0
 80265f8:	0020      	movs	r0, r4
 80265fa:	f000 f819 	bl	8026630 <_kill_r>
 80265fe:	e7ed      	b.n	80265dc <_raise_r+0x12>
 8026600:	2a01      	cmp	r2, #1
 8026602:	d009      	beq.n	8026618 <_raise_r+0x4e>
 8026604:	1c51      	adds	r1, r2, #1
 8026606:	d103      	bne.n	8026610 <_raise_r+0x46>
 8026608:	2316      	movs	r3, #22
 802660a:	6003      	str	r3, [r0, #0]
 802660c:	2001      	movs	r0, #1
 802660e:	e7e5      	b.n	80265dc <_raise_r+0x12>
 8026610:	2100      	movs	r1, #0
 8026612:	0028      	movs	r0, r5
 8026614:	6019      	str	r1, [r3, #0]
 8026616:	4790      	blx	r2
 8026618:	2000      	movs	r0, #0
 802661a:	e7df      	b.n	80265dc <_raise_r+0x12>

0802661c <raise>:
 802661c:	b510      	push	{r4, lr}
 802661e:	4b03      	ldr	r3, [pc, #12]	@ (802662c <raise+0x10>)
 8026620:	0001      	movs	r1, r0
 8026622:	6818      	ldr	r0, [r3, #0]
 8026624:	f7ff ffd1 	bl	80265ca <_raise_r>
 8026628:	bd10      	pop	{r4, pc}
 802662a:	46c0      	nop			@ (mov r8, r8)
 802662c:	200003e0 	.word	0x200003e0

08026630 <_kill_r>:
 8026630:	2300      	movs	r3, #0
 8026632:	b570      	push	{r4, r5, r6, lr}
 8026634:	4d06      	ldr	r5, [pc, #24]	@ (8026650 <_kill_r+0x20>)
 8026636:	0004      	movs	r4, r0
 8026638:	0008      	movs	r0, r1
 802663a:	0011      	movs	r1, r2
 802663c:	602b      	str	r3, [r5, #0]
 802663e:	f7ea fc75 	bl	8010f2c <_kill>
 8026642:	1c43      	adds	r3, r0, #1
 8026644:	d103      	bne.n	802664e <_kill_r+0x1e>
 8026646:	682b      	ldr	r3, [r5, #0]
 8026648:	2b00      	cmp	r3, #0
 802664a:	d000      	beq.n	802664e <_kill_r+0x1e>
 802664c:	6023      	str	r3, [r4, #0]
 802664e:	bd70      	pop	{r4, r5, r6, pc}
 8026650:	200035e0 	.word	0x200035e0

08026654 <_getpid_r>:
 8026654:	b510      	push	{r4, lr}
 8026656:	f7ea fc63 	bl	8010f20 <_getpid>
 802665a:	bd10      	pop	{r4, pc}

0802665c <pow>:
 802665c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802665e:	0014      	movs	r4, r2
 8026660:	001d      	movs	r5, r3
 8026662:	9000      	str	r0, [sp, #0]
 8026664:	9101      	str	r1, [sp, #4]
 8026666:	f000 f959 	bl	802691c <__ieee754_pow>
 802666a:	0022      	movs	r2, r4
 802666c:	0006      	movs	r6, r0
 802666e:	000f      	movs	r7, r1
 8026670:	002b      	movs	r3, r5
 8026672:	0020      	movs	r0, r4
 8026674:	0029      	movs	r1, r5
 8026676:	f7dc fe45 	bl	8003304 <__aeabi_dcmpun>
 802667a:	2800      	cmp	r0, #0
 802667c:	d13f      	bne.n	80266fe <pow+0xa2>
 802667e:	9800      	ldr	r0, [sp, #0]
 8026680:	9901      	ldr	r1, [sp, #4]
 8026682:	2200      	movs	r2, #0
 8026684:	2300      	movs	r3, #0
 8026686:	f7d9 ff13 	bl	80004b0 <__aeabi_dcmpeq>
 802668a:	2800      	cmp	r0, #0
 802668c:	d019      	beq.n	80266c2 <pow+0x66>
 802668e:	2200      	movs	r2, #0
 8026690:	2300      	movs	r3, #0
 8026692:	0020      	movs	r0, r4
 8026694:	0029      	movs	r1, r5
 8026696:	f7d9 ff0b 	bl	80004b0 <__aeabi_dcmpeq>
 802669a:	2800      	cmp	r0, #0
 802669c:	d146      	bne.n	802672c <pow+0xd0>
 802669e:	0020      	movs	r0, r4
 80266a0:	0029      	movs	r1, r5
 80266a2:	f000 f88d 	bl	80267c0 <finite>
 80266a6:	2800      	cmp	r0, #0
 80266a8:	d029      	beq.n	80266fe <pow+0xa2>
 80266aa:	2200      	movs	r2, #0
 80266ac:	2300      	movs	r3, #0
 80266ae:	0020      	movs	r0, r4
 80266b0:	0029      	movs	r1, r5
 80266b2:	f7d9 ff03 	bl	80004bc <__aeabi_dcmplt>
 80266b6:	2800      	cmp	r0, #0
 80266b8:	d021      	beq.n	80266fe <pow+0xa2>
 80266ba:	f7fd fad1 	bl	8023c60 <__errno>
 80266be:	2322      	movs	r3, #34	@ 0x22
 80266c0:	e01c      	b.n	80266fc <pow+0xa0>
 80266c2:	0030      	movs	r0, r6
 80266c4:	0039      	movs	r1, r7
 80266c6:	f000 f87b 	bl	80267c0 <finite>
 80266ca:	2800      	cmp	r0, #0
 80266cc:	d11b      	bne.n	8026706 <pow+0xaa>
 80266ce:	9800      	ldr	r0, [sp, #0]
 80266d0:	9901      	ldr	r1, [sp, #4]
 80266d2:	f000 f875 	bl	80267c0 <finite>
 80266d6:	2800      	cmp	r0, #0
 80266d8:	d015      	beq.n	8026706 <pow+0xaa>
 80266da:	0020      	movs	r0, r4
 80266dc:	0029      	movs	r1, r5
 80266de:	f000 f86f 	bl	80267c0 <finite>
 80266e2:	2800      	cmp	r0, #0
 80266e4:	d00f      	beq.n	8026706 <pow+0xaa>
 80266e6:	0032      	movs	r2, r6
 80266e8:	003b      	movs	r3, r7
 80266ea:	0030      	movs	r0, r6
 80266ec:	0039      	movs	r1, r7
 80266ee:	f7dc fe09 	bl	8003304 <__aeabi_dcmpun>
 80266f2:	2800      	cmp	r0, #0
 80266f4:	d0e1      	beq.n	80266ba <pow+0x5e>
 80266f6:	f7fd fab3 	bl	8023c60 <__errno>
 80266fa:	2321      	movs	r3, #33	@ 0x21
 80266fc:	6003      	str	r3, [r0, #0]
 80266fe:	0030      	movs	r0, r6
 8026700:	0039      	movs	r1, r7
 8026702:	b003      	add	sp, #12
 8026704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026706:	2200      	movs	r2, #0
 8026708:	2300      	movs	r3, #0
 802670a:	0030      	movs	r0, r6
 802670c:	0039      	movs	r1, r7
 802670e:	f7d9 fecf 	bl	80004b0 <__aeabi_dcmpeq>
 8026712:	2800      	cmp	r0, #0
 8026714:	d0f3      	beq.n	80266fe <pow+0xa2>
 8026716:	9800      	ldr	r0, [sp, #0]
 8026718:	9901      	ldr	r1, [sp, #4]
 802671a:	f000 f851 	bl	80267c0 <finite>
 802671e:	2800      	cmp	r0, #0
 8026720:	d0ed      	beq.n	80266fe <pow+0xa2>
 8026722:	0020      	movs	r0, r4
 8026724:	0029      	movs	r1, r5
 8026726:	f000 f84b 	bl	80267c0 <finite>
 802672a:	e7c4      	b.n	80266b6 <pow+0x5a>
 802672c:	2600      	movs	r6, #0
 802672e:	4f01      	ldr	r7, [pc, #4]	@ (8026734 <pow+0xd8>)
 8026730:	e7e5      	b.n	80266fe <pow+0xa2>
 8026732:	46c0      	nop			@ (mov r8, r8)
 8026734:	3ff00000 	.word	0x3ff00000

08026738 <expf>:
 8026738:	b570      	push	{r4, r5, r6, lr}
 802673a:	1c04      	adds	r4, r0, #0
 802673c:	f000 fe1e 	bl	802737c <__ieee754_expf>
 8026740:	1c05      	adds	r5, r0, #0
 8026742:	1c20      	adds	r0, r4, #0
 8026744:	f000 f844 	bl	80267d0 <finitef>
 8026748:	2800      	cmp	r0, #0
 802674a:	d00b      	beq.n	8026764 <expf+0x2c>
 802674c:	490c      	ldr	r1, [pc, #48]	@ (8026780 <expf+0x48>)
 802674e:	1c20      	adds	r0, r4, #0
 8026750:	f7d9 ff02 	bl	8000558 <__aeabi_fcmpgt>
 8026754:	2800      	cmp	r0, #0
 8026756:	d007      	beq.n	8026768 <expf+0x30>
 8026758:	f7fd fa82 	bl	8023c60 <__errno>
 802675c:	25ff      	movs	r5, #255	@ 0xff
 802675e:	2322      	movs	r3, #34	@ 0x22
 8026760:	05ed      	lsls	r5, r5, #23
 8026762:	6003      	str	r3, [r0, #0]
 8026764:	1c28      	adds	r0, r5, #0
 8026766:	bd70      	pop	{r4, r5, r6, pc}
 8026768:	4906      	ldr	r1, [pc, #24]	@ (8026784 <expf+0x4c>)
 802676a:	1c20      	adds	r0, r4, #0
 802676c:	f7d9 fee0 	bl	8000530 <__aeabi_fcmplt>
 8026770:	2800      	cmp	r0, #0
 8026772:	d0f7      	beq.n	8026764 <expf+0x2c>
 8026774:	f7fd fa74 	bl	8023c60 <__errno>
 8026778:	2322      	movs	r3, #34	@ 0x22
 802677a:	2500      	movs	r5, #0
 802677c:	6003      	str	r3, [r0, #0]
 802677e:	e7f1      	b.n	8026764 <expf+0x2c>
 8026780:	42b17217 	.word	0x42b17217
 8026784:	c2cff1b5 	.word	0xc2cff1b5

08026788 <sqrtf>:
 8026788:	b570      	push	{r4, r5, r6, lr}
 802678a:	1c05      	adds	r5, r0, #0
 802678c:	f000 f82a 	bl	80267e4 <__ieee754_sqrtf>
 8026790:	1c29      	adds	r1, r5, #0
 8026792:	1c04      	adds	r4, r0, #0
 8026794:	1c28      	adds	r0, r5, #0
 8026796:	f7da fee5 	bl	8001564 <__aeabi_fcmpun>
 802679a:	2800      	cmp	r0, #0
 802679c:	d10e      	bne.n	80267bc <sqrtf+0x34>
 802679e:	2100      	movs	r1, #0
 80267a0:	1c28      	adds	r0, r5, #0
 80267a2:	f7d9 fec5 	bl	8000530 <__aeabi_fcmplt>
 80267a6:	2800      	cmp	r0, #0
 80267a8:	d008      	beq.n	80267bc <sqrtf+0x34>
 80267aa:	f7fd fa59 	bl	8023c60 <__errno>
 80267ae:	2321      	movs	r3, #33	@ 0x21
 80267b0:	2100      	movs	r1, #0
 80267b2:	6003      	str	r3, [r0, #0]
 80267b4:	1c08      	adds	r0, r1, #0
 80267b6:	f7da fa0d 	bl	8000bd4 <__aeabi_fdiv>
 80267ba:	1c04      	adds	r4, r0, #0
 80267bc:	1c20      	adds	r0, r4, #0
 80267be:	bd70      	pop	{r4, r5, r6, pc}

080267c0 <finite>:
 80267c0:	4b02      	ldr	r3, [pc, #8]	@ (80267cc <finite+0xc>)
 80267c2:	0048      	lsls	r0, r1, #1
 80267c4:	0840      	lsrs	r0, r0, #1
 80267c6:	18c0      	adds	r0, r0, r3
 80267c8:	0fc0      	lsrs	r0, r0, #31
 80267ca:	4770      	bx	lr
 80267cc:	80100000 	.word	0x80100000

080267d0 <finitef>:
 80267d0:	22ff      	movs	r2, #255	@ 0xff
 80267d2:	0043      	lsls	r3, r0, #1
 80267d4:	085b      	lsrs	r3, r3, #1
 80267d6:	2001      	movs	r0, #1
 80267d8:	05d2      	lsls	r2, r2, #23
 80267da:	4293      	cmp	r3, r2
 80267dc:	db00      	blt.n	80267e0 <finitef+0x10>
 80267de:	2000      	movs	r0, #0
 80267e0:	4770      	bx	lr
	...

080267e4 <__ieee754_sqrtf>:
 80267e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80267e6:	0003      	movs	r3, r0
 80267e8:	0042      	lsls	r2, r0, #1
 80267ea:	1c04      	adds	r4, r0, #0
 80267ec:	20ff      	movs	r0, #255	@ 0xff
 80267ee:	0852      	lsrs	r2, r2, #1
 80267f0:	05c0      	lsls	r0, r0, #23
 80267f2:	4282      	cmp	r2, r0
 80267f4:	d30a      	bcc.n	802680c <__ieee754_sqrtf+0x28>
 80267f6:	1c21      	adds	r1, r4, #0
 80267f8:	1c20      	adds	r0, r4, #0
 80267fa:	f7da fbd1 	bl	8000fa0 <__aeabi_fmul>
 80267fe:	1c01      	adds	r1, r0, #0
 8026800:	1c20      	adds	r0, r4, #0
 8026802:	f7da f85d 	bl	80008c0 <__aeabi_fadd>
 8026806:	1c04      	adds	r4, r0, #0
 8026808:	1c20      	adds	r0, r4, #0
 802680a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802680c:	2a00      	cmp	r2, #0
 802680e:	d0fb      	beq.n	8026808 <__ieee754_sqrtf+0x24>
 8026810:	2c00      	cmp	r4, #0
 8026812:	da07      	bge.n	8026824 <__ieee754_sqrtf+0x40>
 8026814:	1c21      	adds	r1, r4, #0
 8026816:	1c20      	adds	r0, r4, #0
 8026818:	f7da fd00 	bl	800121c <__aeabi_fsub>
 802681c:	1c01      	adds	r1, r0, #0
 802681e:	f7da f9d9 	bl	8000bd4 <__aeabi_fdiv>
 8026822:	e7f0      	b.n	8026806 <__ieee754_sqrtf+0x22>
 8026824:	0022      	movs	r2, r4
 8026826:	15e1      	asrs	r1, r4, #23
 8026828:	4002      	ands	r2, r0
 802682a:	4204      	tst	r4, r0
 802682c:	d046      	beq.n	80268bc <__ieee754_sqrtf+0xd8>
 802682e:	2280      	movs	r2, #128	@ 0x80
 8026830:	000f      	movs	r7, r1
 8026832:	025b      	lsls	r3, r3, #9
 8026834:	0a5b      	lsrs	r3, r3, #9
 8026836:	0412      	lsls	r2, r2, #16
 8026838:	3f7f      	subs	r7, #127	@ 0x7f
 802683a:	4313      	orrs	r3, r2
 802683c:	07c9      	lsls	r1, r1, #31
 802683e:	d400      	bmi.n	8026842 <__ieee754_sqrtf+0x5e>
 8026840:	005b      	lsls	r3, r3, #1
 8026842:	2400      	movs	r4, #0
 8026844:	2180      	movs	r1, #128	@ 0x80
 8026846:	2019      	movs	r0, #25
 8026848:	0026      	movs	r6, r4
 802684a:	107f      	asrs	r7, r7, #1
 802684c:	005b      	lsls	r3, r3, #1
 802684e:	0449      	lsls	r1, r1, #17
 8026850:	1875      	adds	r5, r6, r1
 8026852:	001a      	movs	r2, r3
 8026854:	429d      	cmp	r5, r3
 8026856:	dc02      	bgt.n	802685e <__ieee754_sqrtf+0x7a>
 8026858:	186e      	adds	r6, r5, r1
 802685a:	1b5a      	subs	r2, r3, r5
 802685c:	1864      	adds	r4, r4, r1
 802685e:	3801      	subs	r0, #1
 8026860:	0053      	lsls	r3, r2, #1
 8026862:	0849      	lsrs	r1, r1, #1
 8026864:	2800      	cmp	r0, #0
 8026866:	d1f3      	bne.n	8026850 <__ieee754_sqrtf+0x6c>
 8026868:	2a00      	cmp	r2, #0
 802686a:	d019      	beq.n	80268a0 <__ieee754_sqrtf+0xbc>
 802686c:	4d17      	ldr	r5, [pc, #92]	@ (80268cc <__ieee754_sqrtf+0xe8>)
 802686e:	4e18      	ldr	r6, [pc, #96]	@ (80268d0 <__ieee754_sqrtf+0xec>)
 8026870:	6828      	ldr	r0, [r5, #0]
 8026872:	6831      	ldr	r1, [r6, #0]
 8026874:	682b      	ldr	r3, [r5, #0]
 8026876:	9301      	str	r3, [sp, #4]
 8026878:	f7da fcd0 	bl	800121c <__aeabi_fsub>
 802687c:	1c01      	adds	r1, r0, #0
 802687e:	9801      	ldr	r0, [sp, #4]
 8026880:	f7d9 fe60 	bl	8000544 <__aeabi_fcmple>
 8026884:	2800      	cmp	r0, #0
 8026886:	d00b      	beq.n	80268a0 <__ieee754_sqrtf+0xbc>
 8026888:	6828      	ldr	r0, [r5, #0]
 802688a:	6831      	ldr	r1, [r6, #0]
 802688c:	f7da f818 	bl	80008c0 <__aeabi_fadd>
 8026890:	682d      	ldr	r5, [r5, #0]
 8026892:	1c01      	adds	r1, r0, #0
 8026894:	1c28      	adds	r0, r5, #0
 8026896:	f7d9 fe4b 	bl	8000530 <__aeabi_fcmplt>
 802689a:	2800      	cmp	r0, #0
 802689c:	d011      	beq.n	80268c2 <__ieee754_sqrtf+0xde>
 802689e:	3402      	adds	r4, #2
 80268a0:	23fc      	movs	r3, #252	@ 0xfc
 80268a2:	1064      	asrs	r4, r4, #1
 80268a4:	059b      	lsls	r3, r3, #22
 80268a6:	18e3      	adds	r3, r4, r3
 80268a8:	05fc      	lsls	r4, r7, #23
 80268aa:	18e4      	adds	r4, r4, r3
 80268ac:	e7ac      	b.n	8026808 <__ieee754_sqrtf+0x24>
 80268ae:	005b      	lsls	r3, r3, #1
 80268b0:	3201      	adds	r2, #1
 80268b2:	4203      	tst	r3, r0
 80268b4:	d0fb      	beq.n	80268ae <__ieee754_sqrtf+0xca>
 80268b6:	3a01      	subs	r2, #1
 80268b8:	1a89      	subs	r1, r1, r2
 80268ba:	e7b8      	b.n	802682e <__ieee754_sqrtf+0x4a>
 80268bc:	2080      	movs	r0, #128	@ 0x80
 80268be:	0400      	lsls	r0, r0, #16
 80268c0:	e7f7      	b.n	80268b2 <__ieee754_sqrtf+0xce>
 80268c2:	2301      	movs	r3, #1
 80268c4:	3401      	adds	r4, #1
 80268c6:	439c      	bics	r4, r3
 80268c8:	e7ea      	b.n	80268a0 <__ieee754_sqrtf+0xbc>
 80268ca:	46c0      	nop			@ (mov r8, r8)
 80268cc:	20000434 	.word	0x20000434
 80268d0:	20000430 	.word	0x20000430

080268d4 <roundf>:
 80268d4:	0dc3      	lsrs	r3, r0, #23
 80268d6:	b2db      	uxtb	r3, r3
 80268d8:	3b7f      	subs	r3, #127	@ 0x7f
 80268da:	0002      	movs	r2, r0
 80268dc:	b510      	push	{r4, lr}
 80268de:	2b16      	cmp	r3, #22
 80268e0:	dc13      	bgt.n	802690a <roundf+0x36>
 80268e2:	2b00      	cmp	r3, #0
 80268e4:	da07      	bge.n	80268f6 <roundf+0x22>
 80268e6:	0fc2      	lsrs	r2, r0, #31
 80268e8:	07d0      	lsls	r0, r2, #31
 80268ea:	3301      	adds	r3, #1
 80268ec:	d102      	bne.n	80268f4 <roundf+0x20>
 80268ee:	23fe      	movs	r3, #254	@ 0xfe
 80268f0:	059b      	lsls	r3, r3, #22
 80268f2:	4318      	orrs	r0, r3
 80268f4:	bd10      	pop	{r4, pc}
 80268f6:	4908      	ldr	r1, [pc, #32]	@ (8026918 <roundf+0x44>)
 80268f8:	4119      	asrs	r1, r3
 80268fa:	4208      	tst	r0, r1
 80268fc:	d0fa      	beq.n	80268f4 <roundf+0x20>
 80268fe:	2080      	movs	r0, #128	@ 0x80
 8026900:	03c0      	lsls	r0, r0, #15
 8026902:	4118      	asrs	r0, r3
 8026904:	1880      	adds	r0, r0, r2
 8026906:	4388      	bics	r0, r1
 8026908:	e7f4      	b.n	80268f4 <roundf+0x20>
 802690a:	2b80      	cmp	r3, #128	@ 0x80
 802690c:	d1f2      	bne.n	80268f4 <roundf+0x20>
 802690e:	1c01      	adds	r1, r0, #0
 8026910:	f7d9 ffd6 	bl	80008c0 <__aeabi_fadd>
 8026914:	e7ee      	b.n	80268f4 <roundf+0x20>
 8026916:	46c0      	nop			@ (mov r8, r8)
 8026918:	007fffff 	.word	0x007fffff

0802691c <__ieee754_pow>:
 802691c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802691e:	b095      	sub	sp, #84	@ 0x54
 8026920:	9202      	str	r2, [sp, #8]
 8026922:	9303      	str	r3, [sp, #12]
 8026924:	9b03      	ldr	r3, [sp, #12]
 8026926:	9a03      	ldr	r2, [sp, #12]
 8026928:	9306      	str	r3, [sp, #24]
 802692a:	0052      	lsls	r2, r2, #1
 802692c:	9b02      	ldr	r3, [sp, #8]
 802692e:	0852      	lsrs	r2, r2, #1
 8026930:	9204      	str	r2, [sp, #16]
 8026932:	001a      	movs	r2, r3
 8026934:	000f      	movs	r7, r1
 8026936:	9904      	ldr	r1, [sp, #16]
 8026938:	0006      	movs	r6, r0
 802693a:	430a      	orrs	r2, r1
 802693c:	d119      	bne.n	8026972 <__ieee754_pow+0x56>
 802693e:	2180      	movs	r1, #128	@ 0x80
 8026940:	0309      	lsls	r1, r1, #12
 8026942:	4079      	eors	r1, r7
 8026944:	0002      	movs	r2, r0
 8026946:	000b      	movs	r3, r1
 8026948:	1892      	adds	r2, r2, r2
 802694a:	415b      	adcs	r3, r3
 802694c:	499b      	ldr	r1, [pc, #620]	@ (8026bbc <__ieee754_pow+0x2a0>)
 802694e:	428b      	cmp	r3, r1
 8026950:	d806      	bhi.n	8026960 <__ieee754_pow+0x44>
 8026952:	d001      	beq.n	8026958 <__ieee754_pow+0x3c>
 8026954:	f000 fcde 	bl	8027314 <__ieee754_pow+0x9f8>
 8026958:	2a00      	cmp	r2, #0
 802695a:	d101      	bne.n	8026960 <__ieee754_pow+0x44>
 802695c:	f000 fcda 	bl	8027314 <__ieee754_pow+0x9f8>
 8026960:	9a02      	ldr	r2, [sp, #8]
 8026962:	9b03      	ldr	r3, [sp, #12]
 8026964:	0030      	movs	r0, r6
 8026966:	0039      	movs	r1, r7
 8026968:	f7da fec0 	bl	80016ec <__aeabi_dadd>
 802696c:	9000      	str	r0, [sp, #0]
 802696e:	9101      	str	r1, [sp, #4]
 8026970:	e0af      	b.n	8026ad2 <__ieee754_pow+0x1b6>
 8026972:	4a93      	ldr	r2, [pc, #588]	@ (8026bc0 <__ieee754_pow+0x2a4>)
 8026974:	007c      	lsls	r4, r7, #1
 8026976:	9708      	str	r7, [sp, #32]
 8026978:	900e      	str	r0, [sp, #56]	@ 0x38
 802697a:	0864      	lsrs	r4, r4, #1
 802697c:	4294      	cmp	r4, r2
 802697e:	d809      	bhi.n	8026994 <__ieee754_pow+0x78>
 8026980:	d101      	bne.n	8026986 <__ieee754_pow+0x6a>
 8026982:	2800      	cmp	r0, #0
 8026984:	d1ec      	bne.n	8026960 <__ieee754_pow+0x44>
 8026986:	9904      	ldr	r1, [sp, #16]
 8026988:	4a8d      	ldr	r2, [pc, #564]	@ (8026bc0 <__ieee754_pow+0x2a4>)
 802698a:	4291      	cmp	r1, r2
 802698c:	d802      	bhi.n	8026994 <__ieee754_pow+0x78>
 802698e:	d10c      	bne.n	80269aa <__ieee754_pow+0x8e>
 8026990:	2b00      	cmp	r3, #0
 8026992:	d00a      	beq.n	80269aa <__ieee754_pow+0x8e>
 8026994:	4b8b      	ldr	r3, [pc, #556]	@ (8026bc4 <__ieee754_pow+0x2a8>)
 8026996:	18fb      	adds	r3, r7, r3
 8026998:	4333      	orrs	r3, r6
 802699a:	d1e1      	bne.n	8026960 <__ieee754_pow+0x44>
 802699c:	2180      	movs	r1, #128	@ 0x80
 802699e:	9803      	ldr	r0, [sp, #12]
 80269a0:	0309      	lsls	r1, r1, #12
 80269a2:	4048      	eors	r0, r1
 80269a4:	0003      	movs	r3, r0
 80269a6:	9a02      	ldr	r2, [sp, #8]
 80269a8:	e7ce      	b.n	8026948 <__ieee754_pow+0x2c>
 80269aa:	2500      	movs	r5, #0
 80269ac:	9a08      	ldr	r2, [sp, #32]
 80269ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80269b0:	42aa      	cmp	r2, r5
 80269b2:	da68      	bge.n	8026a86 <__ieee754_pow+0x16a>
 80269b4:	4a84      	ldr	r2, [pc, #528]	@ (8026bc8 <__ieee754_pow+0x2ac>)
 80269b6:	9904      	ldr	r1, [sp, #16]
 80269b8:	4291      	cmp	r1, r2
 80269ba:	d863      	bhi.n	8026a84 <__ieee754_pow+0x168>
 80269bc:	4a83      	ldr	r2, [pc, #524]	@ (8026bcc <__ieee754_pow+0x2b0>)
 80269be:	4291      	cmp	r1, r2
 80269c0:	d910      	bls.n	80269e4 <__ieee754_pow+0xc8>
 80269c2:	150a      	asrs	r2, r1, #20
 80269c4:	4982      	ldr	r1, [pc, #520]	@ (8026bd0 <__ieee754_pow+0x2b4>)
 80269c6:	1852      	adds	r2, r2, r1
 80269c8:	2a14      	cmp	r2, #20
 80269ca:	dd3b      	ble.n	8026a44 <__ieee754_pow+0x128>
 80269cc:	2134      	movs	r1, #52	@ 0x34
 80269ce:	1a89      	subs	r1, r1, r2
 80269d0:	9a02      	ldr	r2, [sp, #8]
 80269d2:	40ca      	lsrs	r2, r1
 80269d4:	0010      	movs	r0, r2
 80269d6:	4088      	lsls	r0, r1
 80269d8:	4298      	cmp	r0, r3
 80269da:	d103      	bne.n	80269e4 <__ieee754_pow+0xc8>
 80269dc:	2101      	movs	r1, #1
 80269de:	3502      	adds	r5, #2
 80269e0:	400a      	ands	r2, r1
 80269e2:	1aad      	subs	r5, r5, r2
 80269e4:	2b00      	cmp	r3, #0
 80269e6:	d03d      	beq.n	8026a64 <__ieee754_pow+0x148>
 80269e8:	0030      	movs	r0, r6
 80269ea:	0039      	movs	r1, r7
 80269ec:	f000 fcc2 	bl	8027374 <fabs>
 80269f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80269f2:	9000      	str	r0, [sp, #0]
 80269f4:	9101      	str	r1, [sp, #4]
 80269f6:	2b00      	cmp	r3, #0
 80269f8:	d000      	beq.n	80269fc <__ieee754_pow+0xe0>
 80269fa:	e093      	b.n	8026b24 <__ieee754_pow+0x208>
 80269fc:	4a75      	ldr	r2, [pc, #468]	@ (8026bd4 <__ieee754_pow+0x2b8>)
 80269fe:	00bb      	lsls	r3, r7, #2
 8026a00:	089b      	lsrs	r3, r3, #2
 8026a02:	4293      	cmp	r3, r2
 8026a04:	d002      	beq.n	8026a0c <__ieee754_pow+0xf0>
 8026a06:	2c00      	cmp	r4, #0
 8026a08:	d000      	beq.n	8026a0c <__ieee754_pow+0xf0>
 8026a0a:	e08b      	b.n	8026b24 <__ieee754_pow+0x208>
 8026a0c:	9b06      	ldr	r3, [sp, #24]
 8026a0e:	2b00      	cmp	r3, #0
 8026a10:	da07      	bge.n	8026a22 <__ieee754_pow+0x106>
 8026a12:	9a00      	ldr	r2, [sp, #0]
 8026a14:	9b01      	ldr	r3, [sp, #4]
 8026a16:	2000      	movs	r0, #0
 8026a18:	496e      	ldr	r1, [pc, #440]	@ (8026bd4 <__ieee754_pow+0x2b8>)
 8026a1a:	f7db f9cb 	bl	8001db4 <__aeabi_ddiv>
 8026a1e:	9000      	str	r0, [sp, #0]
 8026a20:	9101      	str	r1, [sp, #4]
 8026a22:	9b08      	ldr	r3, [sp, #32]
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	da54      	bge.n	8026ad2 <__ieee754_pow+0x1b6>
 8026a28:	4b66      	ldr	r3, [pc, #408]	@ (8026bc4 <__ieee754_pow+0x2a8>)
 8026a2a:	18e4      	adds	r4, r4, r3
 8026a2c:	432c      	orrs	r4, r5
 8026a2e:	d000      	beq.n	8026a32 <__ieee754_pow+0x116>
 8026a30:	e06d      	b.n	8026b0e <__ieee754_pow+0x1f2>
 8026a32:	9a00      	ldr	r2, [sp, #0]
 8026a34:	9b01      	ldr	r3, [sp, #4]
 8026a36:	0010      	movs	r0, r2
 8026a38:	0019      	movs	r1, r3
 8026a3a:	f7dc f8c7 	bl	8002bcc <__aeabi_dsub>
 8026a3e:	0002      	movs	r2, r0
 8026a40:	000b      	movs	r3, r1
 8026a42:	e01c      	b.n	8026a7e <__ieee754_pow+0x162>
 8026a44:	2b00      	cmp	r3, #0
 8026a46:	d1cf      	bne.n	80269e8 <__ieee754_pow+0xcc>
 8026a48:	3314      	adds	r3, #20
 8026a4a:	1a9a      	subs	r2, r3, r2
 8026a4c:	9b04      	ldr	r3, [sp, #16]
 8026a4e:	4113      	asrs	r3, r2
 8026a50:	0019      	movs	r1, r3
 8026a52:	4091      	lsls	r1, r2
 8026a54:	000a      	movs	r2, r1
 8026a56:	9904      	ldr	r1, [sp, #16]
 8026a58:	428a      	cmp	r2, r1
 8026a5a:	d103      	bne.n	8026a64 <__ieee754_pow+0x148>
 8026a5c:	2201      	movs	r2, #1
 8026a5e:	2502      	movs	r5, #2
 8026a60:	4013      	ands	r3, r2
 8026a62:	1aed      	subs	r5, r5, r3
 8026a64:	4b5b      	ldr	r3, [pc, #364]	@ (8026bd4 <__ieee754_pow+0x2b8>)
 8026a66:	9a04      	ldr	r2, [sp, #16]
 8026a68:	429a      	cmp	r2, r3
 8026a6a:	d136      	bne.n	8026ada <__ieee754_pow+0x1be>
 8026a6c:	9b06      	ldr	r3, [sp, #24]
 8026a6e:	9600      	str	r6, [sp, #0]
 8026a70:	9701      	str	r7, [sp, #4]
 8026a72:	2b00      	cmp	r3, #0
 8026a74:	da2d      	bge.n	8026ad2 <__ieee754_pow+0x1b6>
 8026a76:	0032      	movs	r2, r6
 8026a78:	003b      	movs	r3, r7
 8026a7a:	2000      	movs	r0, #0
 8026a7c:	4955      	ldr	r1, [pc, #340]	@ (8026bd4 <__ieee754_pow+0x2b8>)
 8026a7e:	f7db f999 	bl	8001db4 <__aeabi_ddiv>
 8026a82:	e773      	b.n	802696c <__ieee754_pow+0x50>
 8026a84:	2502      	movs	r5, #2
 8026a86:	2b00      	cmp	r3, #0
 8026a88:	d1ae      	bne.n	80269e8 <__ieee754_pow+0xcc>
 8026a8a:	9b04      	ldr	r3, [sp, #16]
 8026a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8026bc0 <__ieee754_pow+0x2a4>)
 8026a8e:	4293      	cmp	r3, r2
 8026a90:	d1e8      	bne.n	8026a64 <__ieee754_pow+0x148>
 8026a92:	4b4c      	ldr	r3, [pc, #304]	@ (8026bc4 <__ieee754_pow+0x2a8>)
 8026a94:	18e3      	adds	r3, r4, r3
 8026a96:	4333      	orrs	r3, r6
 8026a98:	d101      	bne.n	8026a9e <__ieee754_pow+0x182>
 8026a9a:	f000 fc3b 	bl	8027314 <__ieee754_pow+0x9f8>
 8026a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8026bcc <__ieee754_pow+0x2b0>)
 8026aa0:	429c      	cmp	r4, r3
 8026aa2:	d909      	bls.n	8026ab8 <__ieee754_pow+0x19c>
 8026aa4:	9b06      	ldr	r3, [sp, #24]
 8026aa6:	2b00      	cmp	r3, #0
 8026aa8:	da01      	bge.n	8026aae <__ieee754_pow+0x192>
 8026aaa:	f000 fc37 	bl	802731c <__ieee754_pow+0xa00>
 8026aae:	9b02      	ldr	r3, [sp, #8]
 8026ab0:	9c03      	ldr	r4, [sp, #12]
 8026ab2:	9300      	str	r3, [sp, #0]
 8026ab4:	9401      	str	r4, [sp, #4]
 8026ab6:	e00c      	b.n	8026ad2 <__ieee754_pow+0x1b6>
 8026ab8:	9b06      	ldr	r3, [sp, #24]
 8026aba:	2b00      	cmp	r3, #0
 8026abc:	db01      	blt.n	8026ac2 <__ieee754_pow+0x1a6>
 8026abe:	f000 fc2d 	bl	802731c <__ieee754_pow+0xa00>
 8026ac2:	2280      	movs	r2, #128	@ 0x80
 8026ac4:	0612      	lsls	r2, r2, #24
 8026ac6:	4694      	mov	ip, r2
 8026ac8:	9b02      	ldr	r3, [sp, #8]
 8026aca:	9300      	str	r3, [sp, #0]
 8026acc:	9b03      	ldr	r3, [sp, #12]
 8026ace:	4463      	add	r3, ip
 8026ad0:	9301      	str	r3, [sp, #4]
 8026ad2:	9800      	ldr	r0, [sp, #0]
 8026ad4:	9901      	ldr	r1, [sp, #4]
 8026ad6:	b015      	add	sp, #84	@ 0x54
 8026ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ada:	2380      	movs	r3, #128	@ 0x80
 8026adc:	9a06      	ldr	r2, [sp, #24]
 8026ade:	05db      	lsls	r3, r3, #23
 8026ae0:	429a      	cmp	r2, r3
 8026ae2:	d106      	bne.n	8026af2 <__ieee754_pow+0x1d6>
 8026ae4:	0032      	movs	r2, r6
 8026ae6:	003b      	movs	r3, r7
 8026ae8:	0030      	movs	r0, r6
 8026aea:	0039      	movs	r1, r7
 8026aec:	f7db fda6 	bl	800263c <__aeabi_dmul>
 8026af0:	e73c      	b.n	802696c <__ieee754_pow+0x50>
 8026af2:	4b39      	ldr	r3, [pc, #228]	@ (8026bd8 <__ieee754_pow+0x2bc>)
 8026af4:	9a06      	ldr	r2, [sp, #24]
 8026af6:	429a      	cmp	r2, r3
 8026af8:	d000      	beq.n	8026afc <__ieee754_pow+0x1e0>
 8026afa:	e775      	b.n	80269e8 <__ieee754_pow+0xcc>
 8026afc:	9b08      	ldr	r3, [sp, #32]
 8026afe:	2b00      	cmp	r3, #0
 8026b00:	da00      	bge.n	8026b04 <__ieee754_pow+0x1e8>
 8026b02:	e771      	b.n	80269e8 <__ieee754_pow+0xcc>
 8026b04:	0030      	movs	r0, r6
 8026b06:	0039      	movs	r1, r7
 8026b08:	f000 fde4 	bl	80276d4 <__ieee754_sqrt>
 8026b0c:	e72e      	b.n	802696c <__ieee754_pow+0x50>
 8026b0e:	2d01      	cmp	r5, #1
 8026b10:	d1df      	bne.n	8026ad2 <__ieee754_pow+0x1b6>
 8026b12:	9800      	ldr	r0, [sp, #0]
 8026b14:	2180      	movs	r1, #128	@ 0x80
 8026b16:	0002      	movs	r2, r0
 8026b18:	9801      	ldr	r0, [sp, #4]
 8026b1a:	0609      	lsls	r1, r1, #24
 8026b1c:	1843      	adds	r3, r0, r1
 8026b1e:	9200      	str	r2, [sp, #0]
 8026b20:	9301      	str	r3, [sp, #4]
 8026b22:	e7d6      	b.n	8026ad2 <__ieee754_pow+0x1b6>
 8026b24:	0ffb      	lsrs	r3, r7, #31
 8026b26:	3b01      	subs	r3, #1
 8026b28:	001a      	movs	r2, r3
 8026b2a:	432a      	orrs	r2, r5
 8026b2c:	d104      	bne.n	8026b38 <__ieee754_pow+0x21c>
 8026b2e:	0032      	movs	r2, r6
 8026b30:	003b      	movs	r3, r7
 8026b32:	0030      	movs	r0, r6
 8026b34:	0039      	movs	r1, r7
 8026b36:	e780      	b.n	8026a3a <__ieee754_pow+0x11e>
 8026b38:	3d01      	subs	r5, #1
 8026b3a:	2200      	movs	r2, #0
 8026b3c:	431d      	orrs	r5, r3
 8026b3e:	d015      	beq.n	8026b6c <__ieee754_pow+0x250>
 8026b40:	4b24      	ldr	r3, [pc, #144]	@ (8026bd4 <__ieee754_pow+0x2b8>)
 8026b42:	9208      	str	r2, [sp, #32]
 8026b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b46:	2384      	movs	r3, #132	@ 0x84
 8026b48:	9a04      	ldr	r2, [sp, #16]
 8026b4a:	05db      	lsls	r3, r3, #23
 8026b4c:	429a      	cmp	r2, r3
 8026b4e:	d800      	bhi.n	8026b52 <__ieee754_pow+0x236>
 8026b50:	e102      	b.n	8026d58 <__ieee754_pow+0x43c>
 8026b52:	4b22      	ldr	r3, [pc, #136]	@ (8026bdc <__ieee754_pow+0x2c0>)
 8026b54:	429a      	cmp	r2, r3
 8026b56:	d912      	bls.n	8026b7e <__ieee754_pow+0x262>
 8026b58:	4b1c      	ldr	r3, [pc, #112]	@ (8026bcc <__ieee754_pow+0x2b0>)
 8026b5a:	429c      	cmp	r4, r3
 8026b5c:	d808      	bhi.n	8026b70 <__ieee754_pow+0x254>
 8026b5e:	9b06      	ldr	r3, [sp, #24]
 8026b60:	2b00      	cmp	r3, #0
 8026b62:	da08      	bge.n	8026b76 <__ieee754_pow+0x25a>
 8026b64:	2000      	movs	r0, #0
 8026b66:	f000 fd8b 	bl	8027680 <__math_oflow>
 8026b6a:	e6ff      	b.n	802696c <__ieee754_pow+0x50>
 8026b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8026be0 <__ieee754_pow+0x2c4>)
 8026b6e:	e7e8      	b.n	8026b42 <__ieee754_pow+0x226>
 8026b70:	9b06      	ldr	r3, [sp, #24]
 8026b72:	2b00      	cmp	r3, #0
 8026b74:	dcf6      	bgt.n	8026b64 <__ieee754_pow+0x248>
 8026b76:	2000      	movs	r0, #0
 8026b78:	f000 fd7b 	bl	8027672 <__math_uflow>
 8026b7c:	e6f6      	b.n	802696c <__ieee754_pow+0x50>
 8026b7e:	4b19      	ldr	r3, [pc, #100]	@ (8026be4 <__ieee754_pow+0x2c8>)
 8026b80:	429c      	cmp	r4, r3
 8026b82:	d80b      	bhi.n	8026b9c <__ieee754_pow+0x280>
 8026b84:	9808      	ldr	r0, [sp, #32]
 8026b86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026b88:	2300      	movs	r3, #0
 8026b8a:	2200      	movs	r2, #0
 8026b8c:	f7d9 fc96 	bl	80004bc <__aeabi_dcmplt>
 8026b90:	1e43      	subs	r3, r0, #1
 8026b92:	4198      	sbcs	r0, r3
 8026b94:	9b06      	ldr	r3, [sp, #24]
 8026b96:	2b00      	cmp	r3, #0
 8026b98:	daee      	bge.n	8026b78 <__ieee754_pow+0x25c>
 8026b9a:	e7e4      	b.n	8026b66 <__ieee754_pow+0x24a>
 8026b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8026bd4 <__ieee754_pow+0x2b8>)
 8026b9e:	2200      	movs	r2, #0
 8026ba0:	429c      	cmp	r4, r3
 8026ba2:	d921      	bls.n	8026be8 <__ieee754_pow+0x2cc>
 8026ba4:	9808      	ldr	r0, [sp, #32]
 8026ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026ba8:	2300      	movs	r3, #0
 8026baa:	f7d9 fc87 	bl	80004bc <__aeabi_dcmplt>
 8026bae:	1e43      	subs	r3, r0, #1
 8026bb0:	4198      	sbcs	r0, r3
 8026bb2:	9b06      	ldr	r3, [sp, #24]
 8026bb4:	2b00      	cmp	r3, #0
 8026bb6:	dcd6      	bgt.n	8026b66 <__ieee754_pow+0x24a>
 8026bb8:	e7de      	b.n	8026b78 <__ieee754_pow+0x25c>
 8026bba:	46c0      	nop			@ (mov r8, r8)
 8026bbc:	fff00000 	.word	0xfff00000
 8026bc0:	7ff00000 	.word	0x7ff00000
 8026bc4:	c0100000 	.word	0xc0100000
 8026bc8:	433fffff 	.word	0x433fffff
 8026bcc:	3fefffff 	.word	0x3fefffff
 8026bd0:	fffffc01 	.word	0xfffffc01
 8026bd4:	3ff00000 	.word	0x3ff00000
 8026bd8:	3fe00000 	.word	0x3fe00000
 8026bdc:	43f00000 	.word	0x43f00000
 8026be0:	bff00000 	.word	0xbff00000
 8026be4:	3feffffe 	.word	0x3feffffe
 8026be8:	9800      	ldr	r0, [sp, #0]
 8026bea:	9901      	ldr	r1, [sp, #4]
 8026bec:	4b4f      	ldr	r3, [pc, #316]	@ (8026d2c <__ieee754_pow+0x410>)
 8026bee:	f7db ffed 	bl	8002bcc <__aeabi_dsub>
 8026bf2:	22c0      	movs	r2, #192	@ 0xc0
 8026bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8026d30 <__ieee754_pow+0x414>)
 8026bf6:	05d2      	lsls	r2, r2, #23
 8026bf8:	0006      	movs	r6, r0
 8026bfa:	000f      	movs	r7, r1
 8026bfc:	f7db fd1e 	bl	800263c <__aeabi_dmul>
 8026c00:	4a4c      	ldr	r2, [pc, #304]	@ (8026d34 <__ieee754_pow+0x418>)
 8026c02:	9004      	str	r0, [sp, #16]
 8026c04:	9105      	str	r1, [sp, #20]
 8026c06:	4b4c      	ldr	r3, [pc, #304]	@ (8026d38 <__ieee754_pow+0x41c>)
 8026c08:	0030      	movs	r0, r6
 8026c0a:	0039      	movs	r1, r7
 8026c0c:	f7db fd16 	bl	800263c <__aeabi_dmul>
 8026c10:	2200      	movs	r2, #0
 8026c12:	9000      	str	r0, [sp, #0]
 8026c14:	9101      	str	r1, [sp, #4]
 8026c16:	4b49      	ldr	r3, [pc, #292]	@ (8026d3c <__ieee754_pow+0x420>)
 8026c18:	0030      	movs	r0, r6
 8026c1a:	0039      	movs	r1, r7
 8026c1c:	f7db fd0e 	bl	800263c <__aeabi_dmul>
 8026c20:	0002      	movs	r2, r0
 8026c22:	000b      	movs	r3, r1
 8026c24:	4846      	ldr	r0, [pc, #280]	@ (8026d40 <__ieee754_pow+0x424>)
 8026c26:	4947      	ldr	r1, [pc, #284]	@ (8026d44 <__ieee754_pow+0x428>)
 8026c28:	f7db ffd0 	bl	8002bcc <__aeabi_dsub>
 8026c2c:	0032      	movs	r2, r6
 8026c2e:	003b      	movs	r3, r7
 8026c30:	f7db fd04 	bl	800263c <__aeabi_dmul>
 8026c34:	0002      	movs	r2, r0
 8026c36:	000b      	movs	r3, r1
 8026c38:	2000      	movs	r0, #0
 8026c3a:	4943      	ldr	r1, [pc, #268]	@ (8026d48 <__ieee754_pow+0x42c>)
 8026c3c:	f7db ffc6 	bl	8002bcc <__aeabi_dsub>
 8026c40:	0032      	movs	r2, r6
 8026c42:	0004      	movs	r4, r0
 8026c44:	000d      	movs	r5, r1
 8026c46:	003b      	movs	r3, r7
 8026c48:	0030      	movs	r0, r6
 8026c4a:	0039      	movs	r1, r7
 8026c4c:	f7db fcf6 	bl	800263c <__aeabi_dmul>
 8026c50:	0002      	movs	r2, r0
 8026c52:	000b      	movs	r3, r1
 8026c54:	0020      	movs	r0, r4
 8026c56:	0029      	movs	r1, r5
 8026c58:	f7db fcf0 	bl	800263c <__aeabi_dmul>
 8026c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8026d4c <__ieee754_pow+0x430>)
 8026c5e:	4b34      	ldr	r3, [pc, #208]	@ (8026d30 <__ieee754_pow+0x414>)
 8026c60:	f7db fcec 	bl	800263c <__aeabi_dmul>
 8026c64:	0002      	movs	r2, r0
 8026c66:	000b      	movs	r3, r1
 8026c68:	9800      	ldr	r0, [sp, #0]
 8026c6a:	9901      	ldr	r1, [sp, #4]
 8026c6c:	f7db ffae 	bl	8002bcc <__aeabi_dsub>
 8026c70:	0002      	movs	r2, r0
 8026c72:	000b      	movs	r3, r1
 8026c74:	0004      	movs	r4, r0
 8026c76:	000d      	movs	r5, r1
 8026c78:	9804      	ldr	r0, [sp, #16]
 8026c7a:	9905      	ldr	r1, [sp, #20]
 8026c7c:	f7da fd36 	bl	80016ec <__aeabi_dadd>
 8026c80:	9a04      	ldr	r2, [sp, #16]
 8026c82:	9b05      	ldr	r3, [sp, #20]
 8026c84:	2000      	movs	r0, #0
 8026c86:	9000      	str	r0, [sp, #0]
 8026c88:	9101      	str	r1, [sp, #4]
 8026c8a:	f7db ff9f 	bl	8002bcc <__aeabi_dsub>
 8026c8e:	0002      	movs	r2, r0
 8026c90:	000b      	movs	r3, r1
 8026c92:	0020      	movs	r0, r4
 8026c94:	0029      	movs	r1, r5
 8026c96:	f7db ff99 	bl	8002bcc <__aeabi_dsub>
 8026c9a:	9b02      	ldr	r3, [sp, #8]
 8026c9c:	9c03      	ldr	r4, [sp, #12]
 8026c9e:	9304      	str	r3, [sp, #16]
 8026ca0:	9405      	str	r4, [sp, #20]
 8026ca2:	2300      	movs	r3, #0
 8026ca4:	9304      	str	r3, [sp, #16]
 8026ca6:	9c04      	ldr	r4, [sp, #16]
 8026ca8:	9d05      	ldr	r5, [sp, #20]
 8026caa:	0006      	movs	r6, r0
 8026cac:	000f      	movs	r7, r1
 8026cae:	9802      	ldr	r0, [sp, #8]
 8026cb0:	9903      	ldr	r1, [sp, #12]
 8026cb2:	0022      	movs	r2, r4
 8026cb4:	002b      	movs	r3, r5
 8026cb6:	f7db ff89 	bl	8002bcc <__aeabi_dsub>
 8026cba:	9a00      	ldr	r2, [sp, #0]
 8026cbc:	9b01      	ldr	r3, [sp, #4]
 8026cbe:	f7db fcbd 	bl	800263c <__aeabi_dmul>
 8026cc2:	9a02      	ldr	r2, [sp, #8]
 8026cc4:	9b03      	ldr	r3, [sp, #12]
 8026cc6:	9006      	str	r0, [sp, #24]
 8026cc8:	9107      	str	r1, [sp, #28]
 8026cca:	0030      	movs	r0, r6
 8026ccc:	0039      	movs	r1, r7
 8026cce:	f7db fcb5 	bl	800263c <__aeabi_dmul>
 8026cd2:	0002      	movs	r2, r0
 8026cd4:	000b      	movs	r3, r1
 8026cd6:	9806      	ldr	r0, [sp, #24]
 8026cd8:	9907      	ldr	r1, [sp, #28]
 8026cda:	f7da fd07 	bl	80016ec <__aeabi_dadd>
 8026cde:	0022      	movs	r2, r4
 8026ce0:	002b      	movs	r3, r5
 8026ce2:	9002      	str	r0, [sp, #8]
 8026ce4:	9103      	str	r1, [sp, #12]
 8026ce6:	9800      	ldr	r0, [sp, #0]
 8026ce8:	9901      	ldr	r1, [sp, #4]
 8026cea:	f7db fca7 	bl	800263c <__aeabi_dmul>
 8026cee:	000b      	movs	r3, r1
 8026cf0:	0002      	movs	r2, r0
 8026cf2:	0006      	movs	r6, r0
 8026cf4:	000f      	movs	r7, r1
 8026cf6:	9802      	ldr	r0, [sp, #8]
 8026cf8:	9903      	ldr	r1, [sp, #12]
 8026cfa:	f7da fcf7 	bl	80016ec <__aeabi_dadd>
 8026cfe:	9000      	str	r0, [sp, #0]
 8026d00:	9101      	str	r1, [sp, #4]
 8026d02:	9c01      	ldr	r4, [sp, #4]
 8026d04:	4b12      	ldr	r3, [pc, #72]	@ (8026d50 <__ieee754_pow+0x434>)
 8026d06:	9406      	str	r4, [sp, #24]
 8026d08:	429c      	cmp	r4, r3
 8026d0a:	dc00      	bgt.n	8026d0e <__ieee754_pow+0x3f2>
 8026d0c:	e222      	b.n	8027154 <__ieee754_pow+0x838>
 8026d0e:	4a11      	ldr	r2, [pc, #68]	@ (8026d54 <__ieee754_pow+0x438>)
 8026d10:	18a3      	adds	r3, r4, r2
 8026d12:	9a00      	ldr	r2, [sp, #0]
 8026d14:	4313      	orrs	r3, r2
 8026d16:	d100      	bne.n	8026d1a <__ieee754_pow+0x3fe>
 8026d18:	e1a0      	b.n	802705c <__ieee754_pow+0x740>
 8026d1a:	9808      	ldr	r0, [sp, #32]
 8026d1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026d1e:	2300      	movs	r3, #0
 8026d20:	2200      	movs	r2, #0
 8026d22:	f7d9 fbcb 	bl	80004bc <__aeabi_dcmplt>
 8026d26:	1e43      	subs	r3, r0, #1
 8026d28:	4198      	sbcs	r0, r3
 8026d2a:	e71c      	b.n	8026b66 <__ieee754_pow+0x24a>
 8026d2c:	3ff00000 	.word	0x3ff00000
 8026d30:	3ff71547 	.word	0x3ff71547
 8026d34:	f85ddf44 	.word	0xf85ddf44
 8026d38:	3e54ae0b 	.word	0x3e54ae0b
 8026d3c:	3fd00000 	.word	0x3fd00000
 8026d40:	55555555 	.word	0x55555555
 8026d44:	3fd55555 	.word	0x3fd55555
 8026d48:	3fe00000 	.word	0x3fe00000
 8026d4c:	652b82fe 	.word	0x652b82fe
 8026d50:	408fffff 	.word	0x408fffff
 8026d54:	bf700000 	.word	0xbf700000
 8026d58:	4be0      	ldr	r3, [pc, #896]	@ (80270dc <__ieee754_pow+0x7c0>)
 8026d5a:	2200      	movs	r2, #0
 8026d5c:	423b      	tst	r3, r7
 8026d5e:	d10b      	bne.n	8026d78 <__ieee754_pow+0x45c>
 8026d60:	9800      	ldr	r0, [sp, #0]
 8026d62:	9901      	ldr	r1, [sp, #4]
 8026d64:	2200      	movs	r2, #0
 8026d66:	4bde      	ldr	r3, [pc, #888]	@ (80270e0 <__ieee754_pow+0x7c4>)
 8026d68:	f7db fc68 	bl	800263c <__aeabi_dmul>
 8026d6c:	2235      	movs	r2, #53	@ 0x35
 8026d6e:	9000      	str	r0, [sp, #0]
 8026d70:	9101      	str	r1, [sp, #4]
 8026d72:	9b01      	ldr	r3, [sp, #4]
 8026d74:	4252      	negs	r2, r2
 8026d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d7a:	49da      	ldr	r1, [pc, #872]	@ (80270e4 <__ieee754_pow+0x7c8>)
 8026d7c:	151b      	asrs	r3, r3, #20
 8026d7e:	185b      	adds	r3, r3, r1
 8026d80:	189b      	adds	r3, r3, r2
 8026d82:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d86:	4dd8      	ldr	r5, [pc, #864]	@ (80270e8 <__ieee754_pow+0x7cc>)
 8026d88:	031b      	lsls	r3, r3, #12
 8026d8a:	4ad8      	ldr	r2, [pc, #864]	@ (80270ec <__ieee754_pow+0x7d0>)
 8026d8c:	0b1b      	lsrs	r3, r3, #12
 8026d8e:	2600      	movs	r6, #0
 8026d90:	431d      	orrs	r5, r3
 8026d92:	4293      	cmp	r3, r2
 8026d94:	dd09      	ble.n	8026daa <__ieee754_pow+0x48e>
 8026d96:	4ad6      	ldr	r2, [pc, #856]	@ (80270f0 <__ieee754_pow+0x7d4>)
 8026d98:	3601      	adds	r6, #1
 8026d9a:	4293      	cmp	r3, r2
 8026d9c:	dd05      	ble.n	8026daa <__ieee754_pow+0x48e>
 8026d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026da0:	199b      	adds	r3, r3, r6
 8026da2:	2600      	movs	r6, #0
 8026da4:	930e      	str	r3, [sp, #56]	@ 0x38
 8026da6:	4bd3      	ldr	r3, [pc, #844]	@ (80270f4 <__ieee754_pow+0x7d8>)
 8026da8:	18ed      	adds	r5, r5, r3
 8026daa:	9800      	ldr	r0, [sp, #0]
 8026dac:	9901      	ldr	r1, [sp, #4]
 8026dae:	0029      	movs	r1, r5
 8026db0:	4bd1      	ldr	r3, [pc, #836]	@ (80270f8 <__ieee754_pow+0x7dc>)
 8026db2:	00f2      	lsls	r2, r6, #3
 8026db4:	189b      	adds	r3, r3, r2
 8026db6:	685c      	ldr	r4, [r3, #4]
 8026db8:	681b      	ldr	r3, [r3, #0]
 8026dba:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026dbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8026dbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026dc0:	001a      	movs	r2, r3
 8026dc2:	0023      	movs	r3, r4
 8026dc4:	900c      	str	r0, [sp, #48]	@ 0x30
 8026dc6:	910d      	str	r1, [sp, #52]	@ 0x34
 8026dc8:	f7db ff00 	bl	8002bcc <__aeabi_dsub>
 8026dcc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026dd0:	9010      	str	r0, [sp, #64]	@ 0x40
 8026dd2:	9111      	str	r1, [sp, #68]	@ 0x44
 8026dd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dd6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dd8:	f7da fc88 	bl	80016ec <__aeabi_dadd>
 8026ddc:	0002      	movs	r2, r0
 8026dde:	000b      	movs	r3, r1
 8026de0:	2000      	movs	r0, #0
 8026de2:	49c1      	ldr	r1, [pc, #772]	@ (80270e8 <__ieee754_pow+0x7cc>)
 8026de4:	f7da ffe6 	bl	8001db4 <__aeabi_ddiv>
 8026de8:	0002      	movs	r2, r0
 8026dea:	000b      	movs	r3, r1
 8026dec:	9012      	str	r0, [sp, #72]	@ 0x48
 8026dee:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026df0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026df2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8026df4:	f7db fc22 	bl	800263c <__aeabi_dmul>
 8026df8:	9006      	str	r0, [sp, #24]
 8026dfa:	9107      	str	r1, [sp, #28]
 8026dfc:	9b06      	ldr	r3, [sp, #24]
 8026dfe:	9c07      	ldr	r4, [sp, #28]
 8026e00:	2180      	movs	r1, #128	@ 0x80
 8026e02:	9304      	str	r3, [sp, #16]
 8026e04:	9405      	str	r4, [sp, #20]
 8026e06:	2080      	movs	r0, #128	@ 0x80
 8026e08:	2300      	movs	r3, #0
 8026e0a:	2200      	movs	r2, #0
 8026e0c:	106d      	asrs	r5, r5, #1
 8026e0e:	0589      	lsls	r1, r1, #22
 8026e10:	9304      	str	r3, [sp, #16]
 8026e12:	4329      	orrs	r1, r5
 8026e14:	0300      	lsls	r0, r0, #12
 8026e16:	9b04      	ldr	r3, [sp, #16]
 8026e18:	9c05      	ldr	r4, [sp, #20]
 8026e1a:	1809      	adds	r1, r1, r0
 8026e1c:	9300      	str	r3, [sp, #0]
 8026e1e:	9401      	str	r4, [sp, #4]
 8026e20:	04b6      	lsls	r6, r6, #18
 8026e22:	198b      	adds	r3, r1, r6
 8026e24:	9800      	ldr	r0, [sp, #0]
 8026e26:	9901      	ldr	r1, [sp, #4]
 8026e28:	0014      	movs	r4, r2
 8026e2a:	001d      	movs	r5, r3
 8026e2c:	f7db fc06 	bl	800263c <__aeabi_dmul>
 8026e30:	0002      	movs	r2, r0
 8026e32:	000b      	movs	r3, r1
 8026e34:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026e36:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8026e38:	f7db fec8 	bl	8002bcc <__aeabi_dsub>
 8026e3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e40:	0006      	movs	r6, r0
 8026e42:	000f      	movs	r7, r1
 8026e44:	0020      	movs	r0, r4
 8026e46:	0029      	movs	r1, r5
 8026e48:	f7db fec0 	bl	8002bcc <__aeabi_dsub>
 8026e4c:	0002      	movs	r2, r0
 8026e4e:	000b      	movs	r3, r1
 8026e50:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026e52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026e54:	f7db feba 	bl	8002bcc <__aeabi_dsub>
 8026e58:	9a00      	ldr	r2, [sp, #0]
 8026e5a:	9b01      	ldr	r3, [sp, #4]
 8026e5c:	f7db fbee 	bl	800263c <__aeabi_dmul>
 8026e60:	0002      	movs	r2, r0
 8026e62:	000b      	movs	r3, r1
 8026e64:	0030      	movs	r0, r6
 8026e66:	0039      	movs	r1, r7
 8026e68:	f7db feb0 	bl	8002bcc <__aeabi_dsub>
 8026e6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026e6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026e70:	f7db fbe4 	bl	800263c <__aeabi_dmul>
 8026e74:	9a06      	ldr	r2, [sp, #24]
 8026e76:	9b07      	ldr	r3, [sp, #28]
 8026e78:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e7c:	0010      	movs	r0, r2
 8026e7e:	0019      	movs	r1, r3
 8026e80:	f7db fbdc 	bl	800263c <__aeabi_dmul>
 8026e84:	0006      	movs	r6, r0
 8026e86:	000f      	movs	r7, r1
 8026e88:	4a9c      	ldr	r2, [pc, #624]	@ (80270fc <__ieee754_pow+0x7e0>)
 8026e8a:	4b9d      	ldr	r3, [pc, #628]	@ (8027100 <__ieee754_pow+0x7e4>)
 8026e8c:	f7db fbd6 	bl	800263c <__aeabi_dmul>
 8026e90:	4a9c      	ldr	r2, [pc, #624]	@ (8027104 <__ieee754_pow+0x7e8>)
 8026e92:	4b9d      	ldr	r3, [pc, #628]	@ (8027108 <__ieee754_pow+0x7ec>)
 8026e94:	f7da fc2a 	bl	80016ec <__aeabi_dadd>
 8026e98:	0032      	movs	r2, r6
 8026e9a:	003b      	movs	r3, r7
 8026e9c:	f7db fbce 	bl	800263c <__aeabi_dmul>
 8026ea0:	4a9a      	ldr	r2, [pc, #616]	@ (802710c <__ieee754_pow+0x7f0>)
 8026ea2:	4b9b      	ldr	r3, [pc, #620]	@ (8027110 <__ieee754_pow+0x7f4>)
 8026ea4:	f7da fc22 	bl	80016ec <__aeabi_dadd>
 8026ea8:	0032      	movs	r2, r6
 8026eaa:	003b      	movs	r3, r7
 8026eac:	f7db fbc6 	bl	800263c <__aeabi_dmul>
 8026eb0:	4a98      	ldr	r2, [pc, #608]	@ (8027114 <__ieee754_pow+0x7f8>)
 8026eb2:	4b99      	ldr	r3, [pc, #612]	@ (8027118 <__ieee754_pow+0x7fc>)
 8026eb4:	f7da fc1a 	bl	80016ec <__aeabi_dadd>
 8026eb8:	0032      	movs	r2, r6
 8026eba:	003b      	movs	r3, r7
 8026ebc:	f7db fbbe 	bl	800263c <__aeabi_dmul>
 8026ec0:	4a96      	ldr	r2, [pc, #600]	@ (802711c <__ieee754_pow+0x800>)
 8026ec2:	4b97      	ldr	r3, [pc, #604]	@ (8027120 <__ieee754_pow+0x804>)
 8026ec4:	f7da fc12 	bl	80016ec <__aeabi_dadd>
 8026ec8:	0032      	movs	r2, r6
 8026eca:	003b      	movs	r3, r7
 8026ecc:	f7db fbb6 	bl	800263c <__aeabi_dmul>
 8026ed0:	4a94      	ldr	r2, [pc, #592]	@ (8027124 <__ieee754_pow+0x808>)
 8026ed2:	4b95      	ldr	r3, [pc, #596]	@ (8027128 <__ieee754_pow+0x80c>)
 8026ed4:	f7da fc0a 	bl	80016ec <__aeabi_dadd>
 8026ed8:	0032      	movs	r2, r6
 8026eda:	0004      	movs	r4, r0
 8026edc:	000d      	movs	r5, r1
 8026ede:	003b      	movs	r3, r7
 8026ee0:	0030      	movs	r0, r6
 8026ee2:	0039      	movs	r1, r7
 8026ee4:	f7db fbaa 	bl	800263c <__aeabi_dmul>
 8026ee8:	0002      	movs	r2, r0
 8026eea:	000b      	movs	r3, r1
 8026eec:	0020      	movs	r0, r4
 8026eee:	0029      	movs	r1, r5
 8026ef0:	f7db fba4 	bl	800263c <__aeabi_dmul>
 8026ef4:	9a00      	ldr	r2, [sp, #0]
 8026ef6:	9b01      	ldr	r3, [sp, #4]
 8026ef8:	0004      	movs	r4, r0
 8026efa:	000d      	movs	r5, r1
 8026efc:	9806      	ldr	r0, [sp, #24]
 8026efe:	9907      	ldr	r1, [sp, #28]
 8026f00:	f7da fbf4 	bl	80016ec <__aeabi_dadd>
 8026f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f08:	f7db fb98 	bl	800263c <__aeabi_dmul>
 8026f0c:	0022      	movs	r2, r4
 8026f0e:	002b      	movs	r3, r5
 8026f10:	f7da fbec 	bl	80016ec <__aeabi_dadd>
 8026f14:	9a00      	ldr	r2, [sp, #0]
 8026f16:	9b01      	ldr	r3, [sp, #4]
 8026f18:	900c      	str	r0, [sp, #48]	@ 0x30
 8026f1a:	910d      	str	r1, [sp, #52]	@ 0x34
 8026f1c:	0010      	movs	r0, r2
 8026f1e:	0019      	movs	r1, r3
 8026f20:	f7db fb8c 	bl	800263c <__aeabi_dmul>
 8026f24:	2200      	movs	r2, #0
 8026f26:	4b81      	ldr	r3, [pc, #516]	@ (802712c <__ieee754_pow+0x810>)
 8026f28:	0004      	movs	r4, r0
 8026f2a:	000d      	movs	r5, r1
 8026f2c:	f7da fbde 	bl	80016ec <__aeabi_dadd>
 8026f30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026f34:	f7da fbda 	bl	80016ec <__aeabi_dadd>
 8026f38:	2000      	movs	r0, #0
 8026f3a:	000f      	movs	r7, r1
 8026f3c:	0006      	movs	r6, r0
 8026f3e:	0002      	movs	r2, r0
 8026f40:	000b      	movs	r3, r1
 8026f42:	9800      	ldr	r0, [sp, #0]
 8026f44:	9901      	ldr	r1, [sp, #4]
 8026f46:	f7db fb79 	bl	800263c <__aeabi_dmul>
 8026f4a:	2200      	movs	r2, #0
 8026f4c:	9000      	str	r0, [sp, #0]
 8026f4e:	9101      	str	r1, [sp, #4]
 8026f50:	4b76      	ldr	r3, [pc, #472]	@ (802712c <__ieee754_pow+0x810>)
 8026f52:	0030      	movs	r0, r6
 8026f54:	0039      	movs	r1, r7
 8026f56:	f7db fe39 	bl	8002bcc <__aeabi_dsub>
 8026f5a:	0022      	movs	r2, r4
 8026f5c:	002b      	movs	r3, r5
 8026f5e:	f7db fe35 	bl	8002bcc <__aeabi_dsub>
 8026f62:	0002      	movs	r2, r0
 8026f64:	000b      	movs	r3, r1
 8026f66:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026f68:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026f6a:	f7db fe2f 	bl	8002bcc <__aeabi_dsub>
 8026f6e:	9a06      	ldr	r2, [sp, #24]
 8026f70:	9b07      	ldr	r3, [sp, #28]
 8026f72:	f7db fb63 	bl	800263c <__aeabi_dmul>
 8026f76:	0032      	movs	r2, r6
 8026f78:	0004      	movs	r4, r0
 8026f7a:	000d      	movs	r5, r1
 8026f7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f80:	003b      	movs	r3, r7
 8026f82:	f7db fb5b 	bl	800263c <__aeabi_dmul>
 8026f86:	0002      	movs	r2, r0
 8026f88:	000b      	movs	r3, r1
 8026f8a:	0020      	movs	r0, r4
 8026f8c:	0029      	movs	r1, r5
 8026f8e:	f7da fbad 	bl	80016ec <__aeabi_dadd>
 8026f92:	0004      	movs	r4, r0
 8026f94:	000d      	movs	r5, r1
 8026f96:	0002      	movs	r2, r0
 8026f98:	000b      	movs	r3, r1
 8026f9a:	9800      	ldr	r0, [sp, #0]
 8026f9c:	9901      	ldr	r1, [sp, #4]
 8026f9e:	f7da fba5 	bl	80016ec <__aeabi_dadd>
 8026fa2:	22e0      	movs	r2, #224	@ 0xe0
 8026fa4:	2000      	movs	r0, #0
 8026fa6:	4b62      	ldr	r3, [pc, #392]	@ (8027130 <__ieee754_pow+0x814>)
 8026fa8:	0612      	lsls	r2, r2, #24
 8026faa:	0006      	movs	r6, r0
 8026fac:	000f      	movs	r7, r1
 8026fae:	f7db fb45 	bl	800263c <__aeabi_dmul>
 8026fb2:	9006      	str	r0, [sp, #24]
 8026fb4:	9107      	str	r1, [sp, #28]
 8026fb6:	9a00      	ldr	r2, [sp, #0]
 8026fb8:	9b01      	ldr	r3, [sp, #4]
 8026fba:	0030      	movs	r0, r6
 8026fbc:	0039      	movs	r1, r7
 8026fbe:	f7db fe05 	bl	8002bcc <__aeabi_dsub>
 8026fc2:	0002      	movs	r2, r0
 8026fc4:	000b      	movs	r3, r1
 8026fc6:	0020      	movs	r0, r4
 8026fc8:	0029      	movs	r1, r5
 8026fca:	f7db fdff 	bl	8002bcc <__aeabi_dsub>
 8026fce:	4a59      	ldr	r2, [pc, #356]	@ (8027134 <__ieee754_pow+0x818>)
 8026fd0:	4b57      	ldr	r3, [pc, #348]	@ (8027130 <__ieee754_pow+0x814>)
 8026fd2:	f7db fb33 	bl	800263c <__aeabi_dmul>
 8026fd6:	4a58      	ldr	r2, [pc, #352]	@ (8027138 <__ieee754_pow+0x81c>)
 8026fd8:	0004      	movs	r4, r0
 8026fda:	000d      	movs	r5, r1
 8026fdc:	0030      	movs	r0, r6
 8026fde:	0039      	movs	r1, r7
 8026fe0:	4b56      	ldr	r3, [pc, #344]	@ (802713c <__ieee754_pow+0x820>)
 8026fe2:	f7db fb2b 	bl	800263c <__aeabi_dmul>
 8026fe6:	0002      	movs	r2, r0
 8026fe8:	000b      	movs	r3, r1
 8026fea:	0020      	movs	r0, r4
 8026fec:	0029      	movs	r1, r5
 8026fee:	f7da fb7d 	bl	80016ec <__aeabi_dadd>
 8026ff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026ff4:	4b52      	ldr	r3, [pc, #328]	@ (8027140 <__ieee754_pow+0x824>)
 8026ff6:	189b      	adds	r3, r3, r2
 8026ff8:	681a      	ldr	r2, [r3, #0]
 8026ffa:	685b      	ldr	r3, [r3, #4]
 8026ffc:	f7da fb76 	bl	80016ec <__aeabi_dadd>
 8027000:	900a      	str	r0, [sp, #40]	@ 0x28
 8027002:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027004:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027006:	f7dc f9db 	bl	80033c0 <__aeabi_i2d>
 802700a:	0004      	movs	r4, r0
 802700c:	000d      	movs	r5, r1
 802700e:	9806      	ldr	r0, [sp, #24]
 8027010:	9907      	ldr	r1, [sp, #28]
 8027012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027014:	4b4b      	ldr	r3, [pc, #300]	@ (8027144 <__ieee754_pow+0x828>)
 8027016:	189b      	adds	r3, r3, r2
 8027018:	681e      	ldr	r6, [r3, #0]
 802701a:	685f      	ldr	r7, [r3, #4]
 802701c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802701e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027020:	f7da fb64 	bl	80016ec <__aeabi_dadd>
 8027024:	0032      	movs	r2, r6
 8027026:	003b      	movs	r3, r7
 8027028:	f7da fb60 	bl	80016ec <__aeabi_dadd>
 802702c:	0022      	movs	r2, r4
 802702e:	002b      	movs	r3, r5
 8027030:	f7da fb5c 	bl	80016ec <__aeabi_dadd>
 8027034:	2000      	movs	r0, #0
 8027036:	0022      	movs	r2, r4
 8027038:	002b      	movs	r3, r5
 802703a:	9000      	str	r0, [sp, #0]
 802703c:	9101      	str	r1, [sp, #4]
 802703e:	f7db fdc5 	bl	8002bcc <__aeabi_dsub>
 8027042:	0032      	movs	r2, r6
 8027044:	003b      	movs	r3, r7
 8027046:	f7db fdc1 	bl	8002bcc <__aeabi_dsub>
 802704a:	9a06      	ldr	r2, [sp, #24]
 802704c:	9b07      	ldr	r3, [sp, #28]
 802704e:	f7db fdbd 	bl	8002bcc <__aeabi_dsub>
 8027052:	0002      	movs	r2, r0
 8027054:	000b      	movs	r3, r1
 8027056:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802705a:	e61c      	b.n	8026c96 <__ieee754_pow+0x37a>
 802705c:	4a3a      	ldr	r2, [pc, #232]	@ (8027148 <__ieee754_pow+0x82c>)
 802705e:	4b3b      	ldr	r3, [pc, #236]	@ (802714c <__ieee754_pow+0x830>)
 8027060:	9802      	ldr	r0, [sp, #8]
 8027062:	9903      	ldr	r1, [sp, #12]
 8027064:	f7da fb42 	bl	80016ec <__aeabi_dadd>
 8027068:	0032      	movs	r2, r6
 802706a:	003b      	movs	r3, r7
 802706c:	9004      	str	r0, [sp, #16]
 802706e:	9105      	str	r1, [sp, #20]
 8027070:	9800      	ldr	r0, [sp, #0]
 8027072:	9901      	ldr	r1, [sp, #4]
 8027074:	f7db fdaa 	bl	8002bcc <__aeabi_dsub>
 8027078:	0002      	movs	r2, r0
 802707a:	000b      	movs	r3, r1
 802707c:	9804      	ldr	r0, [sp, #16]
 802707e:	9905      	ldr	r1, [sp, #20]
 8027080:	f7d9 fa30 	bl	80004e4 <__aeabi_dcmpgt>
 8027084:	2800      	cmp	r0, #0
 8027086:	d000      	beq.n	802708a <__ieee754_pow+0x76e>
 8027088:	e647      	b.n	8026d1a <__ieee754_pow+0x3fe>
 802708a:	2580      	movs	r5, #128	@ 0x80
 802708c:	4b30      	ldr	r3, [pc, #192]	@ (8027150 <__ieee754_pow+0x834>)
 802708e:	036d      	lsls	r5, r5, #13
 8027090:	1524      	asrs	r4, r4, #20
 8027092:	18e4      	adds	r4, r4, r3
 8027094:	002b      	movs	r3, r5
 8027096:	4123      	asrs	r3, r4
 8027098:	9a06      	ldr	r2, [sp, #24]
 802709a:	4912      	ldr	r1, [pc, #72]	@ (80270e4 <__ieee754_pow+0x7c8>)
 802709c:	189b      	adds	r3, r3, r2
 802709e:	005a      	lsls	r2, r3, #1
 80270a0:	4c14      	ldr	r4, [pc, #80]	@ (80270f4 <__ieee754_pow+0x7d8>)
 80270a2:	0d52      	lsrs	r2, r2, #21
 80270a4:	1852      	adds	r2, r2, r1
 80270a6:	4114      	asrs	r4, r2
 80270a8:	401c      	ands	r4, r3
 80270aa:	0021      	movs	r1, r4
 80270ac:	2414      	movs	r4, #20
 80270ae:	031b      	lsls	r3, r3, #12
 80270b0:	0b1b      	lsrs	r3, r3, #12
 80270b2:	432b      	orrs	r3, r5
 80270b4:	1aa2      	subs	r2, r4, r2
 80270b6:	4113      	asrs	r3, r2
 80270b8:	9300      	str	r3, [sp, #0]
 80270ba:	9b06      	ldr	r3, [sp, #24]
 80270bc:	2000      	movs	r0, #0
 80270be:	2b00      	cmp	r3, #0
 80270c0:	da02      	bge.n	80270c8 <__ieee754_pow+0x7ac>
 80270c2:	9b00      	ldr	r3, [sp, #0]
 80270c4:	425b      	negs	r3, r3
 80270c6:	9300      	str	r3, [sp, #0]
 80270c8:	0002      	movs	r2, r0
 80270ca:	000b      	movs	r3, r1
 80270cc:	0030      	movs	r0, r6
 80270ce:	0039      	movs	r1, r7
 80270d0:	f7db fd7c 	bl	8002bcc <__aeabi_dsub>
 80270d4:	0006      	movs	r6, r0
 80270d6:	000f      	movs	r7, r1
 80270d8:	e065      	b.n	80271a6 <__ieee754_pow+0x88a>
 80270da:	46c0      	nop			@ (mov r8, r8)
 80270dc:	7ff00000 	.word	0x7ff00000
 80270e0:	43400000 	.word	0x43400000
 80270e4:	fffffc01 	.word	0xfffffc01
 80270e8:	3ff00000 	.word	0x3ff00000
 80270ec:	0003988e 	.word	0x0003988e
 80270f0:	000bb679 	.word	0x000bb679
 80270f4:	fff00000 	.word	0xfff00000
 80270f8:	0802bbf8 	.word	0x0802bbf8
 80270fc:	4a454eef 	.word	0x4a454eef
 8027100:	3fca7e28 	.word	0x3fca7e28
 8027104:	93c9db65 	.word	0x93c9db65
 8027108:	3fcd864a 	.word	0x3fcd864a
 802710c:	a91d4101 	.word	0xa91d4101
 8027110:	3fd17460 	.word	0x3fd17460
 8027114:	518f264d 	.word	0x518f264d
 8027118:	3fd55555 	.word	0x3fd55555
 802711c:	db6fabff 	.word	0xdb6fabff
 8027120:	3fdb6db6 	.word	0x3fdb6db6
 8027124:	33333303 	.word	0x33333303
 8027128:	3fe33333 	.word	0x3fe33333
 802712c:	40080000 	.word	0x40080000
 8027130:	3feec709 	.word	0x3feec709
 8027134:	dc3a03fd 	.word	0xdc3a03fd
 8027138:	145b01f5 	.word	0x145b01f5
 802713c:	be3e2fe0 	.word	0xbe3e2fe0
 8027140:	0802bbd8 	.word	0x0802bbd8
 8027144:	0802bbe8 	.word	0x0802bbe8
 8027148:	652b82fe 	.word	0x652b82fe
 802714c:	3c971547 	.word	0x3c971547
 8027150:	fffffc02 	.word	0xfffffc02
 8027154:	9b01      	ldr	r3, [sp, #4]
 8027156:	005c      	lsls	r4, r3, #1
 8027158:	4b72      	ldr	r3, [pc, #456]	@ (8027324 <__ieee754_pow+0xa08>)
 802715a:	0864      	lsrs	r4, r4, #1
 802715c:	429c      	cmp	r4, r3
 802715e:	d91c      	bls.n	802719a <__ieee754_pow+0x87e>
 8027160:	4a71      	ldr	r2, [pc, #452]	@ (8027328 <__ieee754_pow+0xa0c>)
 8027162:	9b01      	ldr	r3, [sp, #4]
 8027164:	189b      	adds	r3, r3, r2
 8027166:	9a00      	ldr	r2, [sp, #0]
 8027168:	4313      	orrs	r3, r2
 802716a:	d008      	beq.n	802717e <__ieee754_pow+0x862>
 802716c:	9808      	ldr	r0, [sp, #32]
 802716e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027170:	2300      	movs	r3, #0
 8027172:	2200      	movs	r2, #0
 8027174:	f7d9 f9a2 	bl	80004bc <__aeabi_dcmplt>
 8027178:	1e43      	subs	r3, r0, #1
 802717a:	4198      	sbcs	r0, r3
 802717c:	e4fc      	b.n	8026b78 <__ieee754_pow+0x25c>
 802717e:	0032      	movs	r2, r6
 8027180:	9800      	ldr	r0, [sp, #0]
 8027182:	9901      	ldr	r1, [sp, #4]
 8027184:	003b      	movs	r3, r7
 8027186:	f7db fd21 	bl	8002bcc <__aeabi_dsub>
 802718a:	9a02      	ldr	r2, [sp, #8]
 802718c:	9b03      	ldr	r3, [sp, #12]
 802718e:	f7d9 f9b3 	bl	80004f8 <__aeabi_dcmpge>
 8027192:	2800      	cmp	r0, #0
 8027194:	d1ea      	bne.n	802716c <__ieee754_pow+0x850>
 8027196:	4c65      	ldr	r4, [pc, #404]	@ (802732c <__ieee754_pow+0xa10>)
 8027198:	e777      	b.n	802708a <__ieee754_pow+0x76e>
 802719a:	9a04      	ldr	r2, [sp, #16]
 802719c:	4b64      	ldr	r3, [pc, #400]	@ (8027330 <__ieee754_pow+0xa14>)
 802719e:	9200      	str	r2, [sp, #0]
 80271a0:	429c      	cmp	r4, r3
 80271a2:	d900      	bls.n	80271a6 <__ieee754_pow+0x88a>
 80271a4:	e771      	b.n	802708a <__ieee754_pow+0x76e>
 80271a6:	9a02      	ldr	r2, [sp, #8]
 80271a8:	9b03      	ldr	r3, [sp, #12]
 80271aa:	0030      	movs	r0, r6
 80271ac:	0039      	movs	r1, r7
 80271ae:	f7da fa9d 	bl	80016ec <__aeabi_dadd>
 80271b2:	2000      	movs	r0, #0
 80271b4:	2200      	movs	r2, #0
 80271b6:	4b5f      	ldr	r3, [pc, #380]	@ (8027334 <__ieee754_pow+0xa18>)
 80271b8:	9004      	str	r0, [sp, #16]
 80271ba:	9105      	str	r1, [sp, #20]
 80271bc:	f7db fa3e 	bl	800263c <__aeabi_dmul>
 80271c0:	0032      	movs	r2, r6
 80271c2:	003b      	movs	r3, r7
 80271c4:	9006      	str	r0, [sp, #24]
 80271c6:	9107      	str	r1, [sp, #28]
 80271c8:	9804      	ldr	r0, [sp, #16]
 80271ca:	9905      	ldr	r1, [sp, #20]
 80271cc:	f7db fcfe 	bl	8002bcc <__aeabi_dsub>
 80271d0:	0002      	movs	r2, r0
 80271d2:	000b      	movs	r3, r1
 80271d4:	9802      	ldr	r0, [sp, #8]
 80271d6:	9903      	ldr	r1, [sp, #12]
 80271d8:	f7db fcf8 	bl	8002bcc <__aeabi_dsub>
 80271dc:	4a56      	ldr	r2, [pc, #344]	@ (8027338 <__ieee754_pow+0xa1c>)
 80271de:	4b57      	ldr	r3, [pc, #348]	@ (802733c <__ieee754_pow+0xa20>)
 80271e0:	f7db fa2c 	bl	800263c <__aeabi_dmul>
 80271e4:	4a56      	ldr	r2, [pc, #344]	@ (8027340 <__ieee754_pow+0xa24>)
 80271e6:	0004      	movs	r4, r0
 80271e8:	000d      	movs	r5, r1
 80271ea:	9804      	ldr	r0, [sp, #16]
 80271ec:	9905      	ldr	r1, [sp, #20]
 80271ee:	4b55      	ldr	r3, [pc, #340]	@ (8027344 <__ieee754_pow+0xa28>)
 80271f0:	f7db fa24 	bl	800263c <__aeabi_dmul>
 80271f4:	0002      	movs	r2, r0
 80271f6:	000b      	movs	r3, r1
 80271f8:	0020      	movs	r0, r4
 80271fa:	0029      	movs	r1, r5
 80271fc:	f7da fa76 	bl	80016ec <__aeabi_dadd>
 8027200:	0004      	movs	r4, r0
 8027202:	000d      	movs	r5, r1
 8027204:	0002      	movs	r2, r0
 8027206:	000b      	movs	r3, r1
 8027208:	9806      	ldr	r0, [sp, #24]
 802720a:	9907      	ldr	r1, [sp, #28]
 802720c:	f7da fa6e 	bl	80016ec <__aeabi_dadd>
 8027210:	9a06      	ldr	r2, [sp, #24]
 8027212:	9b07      	ldr	r3, [sp, #28]
 8027214:	0006      	movs	r6, r0
 8027216:	000f      	movs	r7, r1
 8027218:	f7db fcd8 	bl	8002bcc <__aeabi_dsub>
 802721c:	0002      	movs	r2, r0
 802721e:	000b      	movs	r3, r1
 8027220:	0020      	movs	r0, r4
 8027222:	0029      	movs	r1, r5
 8027224:	f7db fcd2 	bl	8002bcc <__aeabi_dsub>
 8027228:	0032      	movs	r2, r6
 802722a:	9002      	str	r0, [sp, #8]
 802722c:	9103      	str	r1, [sp, #12]
 802722e:	003b      	movs	r3, r7
 8027230:	0030      	movs	r0, r6
 8027232:	0039      	movs	r1, r7
 8027234:	f7db fa02 	bl	800263c <__aeabi_dmul>
 8027238:	0004      	movs	r4, r0
 802723a:	000d      	movs	r5, r1
 802723c:	4a42      	ldr	r2, [pc, #264]	@ (8027348 <__ieee754_pow+0xa2c>)
 802723e:	4b43      	ldr	r3, [pc, #268]	@ (802734c <__ieee754_pow+0xa30>)
 8027240:	f7db f9fc 	bl	800263c <__aeabi_dmul>
 8027244:	4a42      	ldr	r2, [pc, #264]	@ (8027350 <__ieee754_pow+0xa34>)
 8027246:	4b43      	ldr	r3, [pc, #268]	@ (8027354 <__ieee754_pow+0xa38>)
 8027248:	f7db fcc0 	bl	8002bcc <__aeabi_dsub>
 802724c:	0022      	movs	r2, r4
 802724e:	002b      	movs	r3, r5
 8027250:	f7db f9f4 	bl	800263c <__aeabi_dmul>
 8027254:	4a40      	ldr	r2, [pc, #256]	@ (8027358 <__ieee754_pow+0xa3c>)
 8027256:	4b41      	ldr	r3, [pc, #260]	@ (802735c <__ieee754_pow+0xa40>)
 8027258:	f7da fa48 	bl	80016ec <__aeabi_dadd>
 802725c:	0022      	movs	r2, r4
 802725e:	002b      	movs	r3, r5
 8027260:	f7db f9ec 	bl	800263c <__aeabi_dmul>
 8027264:	4a3e      	ldr	r2, [pc, #248]	@ (8027360 <__ieee754_pow+0xa44>)
 8027266:	4b3f      	ldr	r3, [pc, #252]	@ (8027364 <__ieee754_pow+0xa48>)
 8027268:	f7db fcb0 	bl	8002bcc <__aeabi_dsub>
 802726c:	0022      	movs	r2, r4
 802726e:	002b      	movs	r3, r5
 8027270:	f7db f9e4 	bl	800263c <__aeabi_dmul>
 8027274:	4a3c      	ldr	r2, [pc, #240]	@ (8027368 <__ieee754_pow+0xa4c>)
 8027276:	4b3d      	ldr	r3, [pc, #244]	@ (802736c <__ieee754_pow+0xa50>)
 8027278:	f7da fa38 	bl	80016ec <__aeabi_dadd>
 802727c:	0022      	movs	r2, r4
 802727e:	002b      	movs	r3, r5
 8027280:	f7db f9dc 	bl	800263c <__aeabi_dmul>
 8027284:	0002      	movs	r2, r0
 8027286:	000b      	movs	r3, r1
 8027288:	0030      	movs	r0, r6
 802728a:	0039      	movs	r1, r7
 802728c:	f7db fc9e 	bl	8002bcc <__aeabi_dsub>
 8027290:	0004      	movs	r4, r0
 8027292:	000d      	movs	r5, r1
 8027294:	0002      	movs	r2, r0
 8027296:	000b      	movs	r3, r1
 8027298:	0030      	movs	r0, r6
 802729a:	0039      	movs	r1, r7
 802729c:	f7db f9ce 	bl	800263c <__aeabi_dmul>
 80272a0:	2380      	movs	r3, #128	@ 0x80
 80272a2:	9004      	str	r0, [sp, #16]
 80272a4:	9105      	str	r1, [sp, #20]
 80272a6:	2200      	movs	r2, #0
 80272a8:	0020      	movs	r0, r4
 80272aa:	0029      	movs	r1, r5
 80272ac:	05db      	lsls	r3, r3, #23
 80272ae:	f7db fc8d 	bl	8002bcc <__aeabi_dsub>
 80272b2:	0002      	movs	r2, r0
 80272b4:	000b      	movs	r3, r1
 80272b6:	9804      	ldr	r0, [sp, #16]
 80272b8:	9905      	ldr	r1, [sp, #20]
 80272ba:	f7da fd7b 	bl	8001db4 <__aeabi_ddiv>
 80272be:	9a02      	ldr	r2, [sp, #8]
 80272c0:	9b03      	ldr	r3, [sp, #12]
 80272c2:	0004      	movs	r4, r0
 80272c4:	000d      	movs	r5, r1
 80272c6:	0030      	movs	r0, r6
 80272c8:	0039      	movs	r1, r7
 80272ca:	f7db f9b7 	bl	800263c <__aeabi_dmul>
 80272ce:	9a02      	ldr	r2, [sp, #8]
 80272d0:	9b03      	ldr	r3, [sp, #12]
 80272d2:	f7da fa0b 	bl	80016ec <__aeabi_dadd>
 80272d6:	0002      	movs	r2, r0
 80272d8:	000b      	movs	r3, r1
 80272da:	0020      	movs	r0, r4
 80272dc:	0029      	movs	r1, r5
 80272de:	f7db fc75 	bl	8002bcc <__aeabi_dsub>
 80272e2:	0032      	movs	r2, r6
 80272e4:	003b      	movs	r3, r7
 80272e6:	f7db fc71 	bl	8002bcc <__aeabi_dsub>
 80272ea:	0002      	movs	r2, r0
 80272ec:	000b      	movs	r3, r1
 80272ee:	2000      	movs	r0, #0
 80272f0:	491f      	ldr	r1, [pc, #124]	@ (8027370 <__ieee754_pow+0xa54>)
 80272f2:	f7db fc6b 	bl	8002bcc <__aeabi_dsub>
 80272f6:	9b00      	ldr	r3, [sp, #0]
 80272f8:	051b      	lsls	r3, r3, #20
 80272fa:	185b      	adds	r3, r3, r1
 80272fc:	151a      	asrs	r2, r3, #20
 80272fe:	2a00      	cmp	r2, #0
 8027300:	dc06      	bgt.n	8027310 <__ieee754_pow+0x9f4>
 8027302:	9a00      	ldr	r2, [sp, #0]
 8027304:	f000 f92a 	bl	802755c <scalbn>
 8027308:	9a08      	ldr	r2, [sp, #32]
 802730a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802730c:	f7ff fbee 	bl	8026aec <__ieee754_pow+0x1d0>
 8027310:	0019      	movs	r1, r3
 8027312:	e7f9      	b.n	8027308 <__ieee754_pow+0x9ec>
 8027314:	2300      	movs	r3, #0
 8027316:	4c16      	ldr	r4, [pc, #88]	@ (8027370 <__ieee754_pow+0xa54>)
 8027318:	f7ff fbcb 	bl	8026ab2 <__ieee754_pow+0x196>
 802731c:	2300      	movs	r3, #0
 802731e:	2400      	movs	r4, #0
 8027320:	f7ff fbc7 	bl	8026ab2 <__ieee754_pow+0x196>
 8027324:	4090cbff 	.word	0x4090cbff
 8027328:	3f6f3400 	.word	0x3f6f3400
 802732c:	4090cc00 	.word	0x4090cc00
 8027330:	3fe00000 	.word	0x3fe00000
 8027334:	3fe62e43 	.word	0x3fe62e43
 8027338:	fefa39ef 	.word	0xfefa39ef
 802733c:	3fe62e42 	.word	0x3fe62e42
 8027340:	0ca86c39 	.word	0x0ca86c39
 8027344:	be205c61 	.word	0xbe205c61
 8027348:	72bea4d0 	.word	0x72bea4d0
 802734c:	3e663769 	.word	0x3e663769
 8027350:	c5d26bf1 	.word	0xc5d26bf1
 8027354:	3ebbbd41 	.word	0x3ebbbd41
 8027358:	af25de2c 	.word	0xaf25de2c
 802735c:	3f11566a 	.word	0x3f11566a
 8027360:	16bebd93 	.word	0x16bebd93
 8027364:	3f66c16c 	.word	0x3f66c16c
 8027368:	5555553e 	.word	0x5555553e
 802736c:	3fc55555 	.word	0x3fc55555
 8027370:	3ff00000 	.word	0x3ff00000

08027374 <fabs>:
 8027374:	0049      	lsls	r1, r1, #1
 8027376:	084b      	lsrs	r3, r1, #1
 8027378:	0019      	movs	r1, r3
 802737a:	4770      	bx	lr

0802737c <__ieee754_expf>:
 802737c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802737e:	21ff      	movs	r1, #255	@ 0xff
 8027380:	0043      	lsls	r3, r0, #1
 8027382:	1c04      	adds	r4, r0, #0
 8027384:	085b      	lsrs	r3, r3, #1
 8027386:	05c9      	lsls	r1, r1, #23
 8027388:	428b      	cmp	r3, r1
 802738a:	d904      	bls.n	8027396 <__ieee754_expf+0x1a>
 802738c:	1c01      	adds	r1, r0, #0
 802738e:	1c20      	adds	r0, r4, #0
 8027390:	f7d9 fa96 	bl	80008c0 <__aeabi_fadd>
 8027394:	e00d      	b.n	80273b2 <__ieee754_expf+0x36>
 8027396:	0fc6      	lsrs	r6, r0, #31
 8027398:	428b      	cmp	r3, r1
 802739a:	d104      	bne.n	80273a6 <__ieee754_expf+0x2a>
 802739c:	2e00      	cmp	r6, #0
 802739e:	d000      	beq.n	80273a2 <__ieee754_expf+0x26>
 80273a0:	e0ba      	b.n	8027518 <__ieee754_expf+0x19c>
 80273a2:	1c20      	adds	r0, r4, #0
 80273a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80273a6:	495d      	ldr	r1, [pc, #372]	@ (802751c <__ieee754_expf+0x1a0>)
 80273a8:	4288      	cmp	r0, r1
 80273aa:	dd04      	ble.n	80273b6 <__ieee754_expf+0x3a>
 80273ac:	2000      	movs	r0, #0
 80273ae:	f000 f98a 	bl	80276c6 <__math_oflowf>
 80273b2:	1c04      	adds	r4, r0, #0
 80273b4:	e7f5      	b.n	80273a2 <__ieee754_expf+0x26>
 80273b6:	2800      	cmp	r0, #0
 80273b8:	da06      	bge.n	80273c8 <__ieee754_expf+0x4c>
 80273ba:	4a59      	ldr	r2, [pc, #356]	@ (8027520 <__ieee754_expf+0x1a4>)
 80273bc:	4293      	cmp	r3, r2
 80273be:	d903      	bls.n	80273c8 <__ieee754_expf+0x4c>
 80273c0:	2000      	movs	r0, #0
 80273c2:	f000 f97a 	bl	80276ba <__math_uflowf>
 80273c6:	e7f4      	b.n	80273b2 <__ieee754_expf+0x36>
 80273c8:	4a56      	ldr	r2, [pc, #344]	@ (8027524 <__ieee754_expf+0x1a8>)
 80273ca:	4293      	cmp	r3, r2
 80273cc:	d96e      	bls.n	80274ac <__ieee754_expf+0x130>
 80273ce:	4a56      	ldr	r2, [pc, #344]	@ (8027528 <__ieee754_expf+0x1ac>)
 80273d0:	00b5      	lsls	r5, r6, #2
 80273d2:	4293      	cmp	r3, r2
 80273d4:	d84e      	bhi.n	8027474 <__ieee754_expf+0xf8>
 80273d6:	4b55      	ldr	r3, [pc, #340]	@ (802752c <__ieee754_expf+0x1b0>)
 80273d8:	1c20      	adds	r0, r4, #0
 80273da:	5959      	ldr	r1, [r3, r5]
 80273dc:	f7d9 ff1e 	bl	800121c <__aeabi_fsub>
 80273e0:	4b53      	ldr	r3, [pc, #332]	@ (8027530 <__ieee754_expf+0x1b4>)
 80273e2:	1c07      	adds	r7, r0, #0
 80273e4:	595b      	ldr	r3, [r3, r5]
 80273e6:	2501      	movs	r5, #1
 80273e8:	1bad      	subs	r5, r5, r6
 80273ea:	9300      	str	r3, [sp, #0]
 80273ec:	1bad      	subs	r5, r5, r6
 80273ee:	9900      	ldr	r1, [sp, #0]
 80273f0:	1c38      	adds	r0, r7, #0
 80273f2:	f7d9 ff13 	bl	800121c <__aeabi_fsub>
 80273f6:	1c04      	adds	r4, r0, #0
 80273f8:	1c21      	adds	r1, r4, #0
 80273fa:	1c20      	adds	r0, r4, #0
 80273fc:	f7d9 fdd0 	bl	8000fa0 <__aeabi_fmul>
 8027400:	494c      	ldr	r1, [pc, #304]	@ (8027534 <__ieee754_expf+0x1b8>)
 8027402:	1c06      	adds	r6, r0, #0
 8027404:	f7d9 fdcc 	bl	8000fa0 <__aeabi_fmul>
 8027408:	494b      	ldr	r1, [pc, #300]	@ (8027538 <__ieee754_expf+0x1bc>)
 802740a:	f7d9 ff07 	bl	800121c <__aeabi_fsub>
 802740e:	1c31      	adds	r1, r6, #0
 8027410:	f7d9 fdc6 	bl	8000fa0 <__aeabi_fmul>
 8027414:	4949      	ldr	r1, [pc, #292]	@ (802753c <__ieee754_expf+0x1c0>)
 8027416:	f7d9 fa53 	bl	80008c0 <__aeabi_fadd>
 802741a:	1c31      	adds	r1, r6, #0
 802741c:	f7d9 fdc0 	bl	8000fa0 <__aeabi_fmul>
 8027420:	4947      	ldr	r1, [pc, #284]	@ (8027540 <__ieee754_expf+0x1c4>)
 8027422:	f7d9 fefb 	bl	800121c <__aeabi_fsub>
 8027426:	1c31      	adds	r1, r6, #0
 8027428:	f7d9 fdba 	bl	8000fa0 <__aeabi_fmul>
 802742c:	4945      	ldr	r1, [pc, #276]	@ (8027544 <__ieee754_expf+0x1c8>)
 802742e:	f7d9 fa47 	bl	80008c0 <__aeabi_fadd>
 8027432:	1c31      	adds	r1, r6, #0
 8027434:	f7d9 fdb4 	bl	8000fa0 <__aeabi_fmul>
 8027438:	1c01      	adds	r1, r0, #0
 802743a:	1c20      	adds	r0, r4, #0
 802743c:	f7d9 feee 	bl	800121c <__aeabi_fsub>
 8027440:	1c01      	adds	r1, r0, #0
 8027442:	1c06      	adds	r6, r0, #0
 8027444:	1c20      	adds	r0, r4, #0
 8027446:	f7d9 fdab 	bl	8000fa0 <__aeabi_fmul>
 802744a:	9001      	str	r0, [sp, #4]
 802744c:	2d00      	cmp	r5, #0
 802744e:	d140      	bne.n	80274d2 <__ieee754_expf+0x156>
 8027450:	2180      	movs	r1, #128	@ 0x80
 8027452:	1c30      	adds	r0, r6, #0
 8027454:	05c9      	lsls	r1, r1, #23
 8027456:	f7d9 fee1 	bl	800121c <__aeabi_fsub>
 802745a:	1c01      	adds	r1, r0, #0
 802745c:	9801      	ldr	r0, [sp, #4]
 802745e:	f7d9 fbb9 	bl	8000bd4 <__aeabi_fdiv>
 8027462:	1c21      	adds	r1, r4, #0
 8027464:	f7d9 feda 	bl	800121c <__aeabi_fsub>
 8027468:	1c01      	adds	r1, r0, #0
 802746a:	20fe      	movs	r0, #254	@ 0xfe
 802746c:	0580      	lsls	r0, r0, #22
 802746e:	f7d9 fed5 	bl	800121c <__aeabi_fsub>
 8027472:	e79e      	b.n	80273b2 <__ieee754_expf+0x36>
 8027474:	4934      	ldr	r1, [pc, #208]	@ (8027548 <__ieee754_expf+0x1cc>)
 8027476:	1c20      	adds	r0, r4, #0
 8027478:	f7d9 fd92 	bl	8000fa0 <__aeabi_fmul>
 802747c:	4b33      	ldr	r3, [pc, #204]	@ (802754c <__ieee754_expf+0x1d0>)
 802747e:	5959      	ldr	r1, [r3, r5]
 8027480:	f7d9 fa1e 	bl	80008c0 <__aeabi_fadd>
 8027484:	f7da f884 	bl	8001590 <__aeabi_f2iz>
 8027488:	0005      	movs	r5, r0
 802748a:	f7da f8a1 	bl	80015d0 <__aeabi_i2f>
 802748e:	4930      	ldr	r1, [pc, #192]	@ (8027550 <__ieee754_expf+0x1d4>)
 8027490:	1c06      	adds	r6, r0, #0
 8027492:	f7d9 fd85 	bl	8000fa0 <__aeabi_fmul>
 8027496:	1c01      	adds	r1, r0, #0
 8027498:	1c20      	adds	r0, r4, #0
 802749a:	f7d9 febf 	bl	800121c <__aeabi_fsub>
 802749e:	492d      	ldr	r1, [pc, #180]	@ (8027554 <__ieee754_expf+0x1d8>)
 80274a0:	1c07      	adds	r7, r0, #0
 80274a2:	1c30      	adds	r0, r6, #0
 80274a4:	f7d9 fd7c 	bl	8000fa0 <__aeabi_fmul>
 80274a8:	9000      	str	r0, [sp, #0]
 80274aa:	e7a0      	b.n	80273ee <__ieee754_expf+0x72>
 80274ac:	22d0      	movs	r2, #208	@ 0xd0
 80274ae:	0592      	lsls	r2, r2, #22
 80274b0:	4293      	cmp	r3, r2
 80274b2:	d20c      	bcs.n	80274ce <__ieee754_expf+0x152>
 80274b4:	4928      	ldr	r1, [pc, #160]	@ (8027558 <__ieee754_expf+0x1dc>)
 80274b6:	1c20      	adds	r0, r4, #0
 80274b8:	f7d9 fa02 	bl	80008c0 <__aeabi_fadd>
 80274bc:	21fe      	movs	r1, #254	@ 0xfe
 80274be:	0589      	lsls	r1, r1, #22
 80274c0:	f7d9 f84a 	bl	8000558 <__aeabi_fcmpgt>
 80274c4:	1e05      	subs	r5, r0, #0
 80274c6:	d097      	beq.n	80273f8 <__ieee754_expf+0x7c>
 80274c8:	21fe      	movs	r1, #254	@ 0xfe
 80274ca:	0589      	lsls	r1, r1, #22
 80274cc:	e75f      	b.n	802738e <__ieee754_expf+0x12>
 80274ce:	2500      	movs	r5, #0
 80274d0:	e792      	b.n	80273f8 <__ieee754_expf+0x7c>
 80274d2:	2080      	movs	r0, #128	@ 0x80
 80274d4:	1c31      	adds	r1, r6, #0
 80274d6:	05c0      	lsls	r0, r0, #23
 80274d8:	f7d9 fea0 	bl	800121c <__aeabi_fsub>
 80274dc:	1c01      	adds	r1, r0, #0
 80274de:	9801      	ldr	r0, [sp, #4]
 80274e0:	f7d9 fb78 	bl	8000bd4 <__aeabi_fdiv>
 80274e4:	1c01      	adds	r1, r0, #0
 80274e6:	9800      	ldr	r0, [sp, #0]
 80274e8:	f7d9 fe98 	bl	800121c <__aeabi_fsub>
 80274ec:	1c39      	adds	r1, r7, #0
 80274ee:	f7d9 fe95 	bl	800121c <__aeabi_fsub>
 80274f2:	1c01      	adds	r1, r0, #0
 80274f4:	20fe      	movs	r0, #254	@ 0xfe
 80274f6:	0580      	lsls	r0, r0, #22
 80274f8:	f7d9 fe90 	bl	800121c <__aeabi_fsub>
 80274fc:	002b      	movs	r3, r5
 80274fe:	337d      	adds	r3, #125	@ 0x7d
 8027500:	db02      	blt.n	8027508 <__ieee754_expf+0x18c>
 8027502:	05ec      	lsls	r4, r5, #23
 8027504:	1824      	adds	r4, r4, r0
 8027506:	e74c      	b.n	80273a2 <__ieee754_expf+0x26>
 8027508:	21d8      	movs	r1, #216	@ 0xd8
 802750a:	3564      	adds	r5, #100	@ 0x64
 802750c:	05ed      	lsls	r5, r5, #23
 802750e:	1828      	adds	r0, r5, r0
 8027510:	0509      	lsls	r1, r1, #20
 8027512:	f7d9 fd45 	bl	8000fa0 <__aeabi_fmul>
 8027516:	e74c      	b.n	80273b2 <__ieee754_expf+0x36>
 8027518:	2400      	movs	r4, #0
 802751a:	e742      	b.n	80273a2 <__ieee754_expf+0x26>
 802751c:	42b17217 	.word	0x42b17217
 8027520:	42cff1b5 	.word	0x42cff1b5
 8027524:	3eb17218 	.word	0x3eb17218
 8027528:	3f851591 	.word	0x3f851591
 802752c:	0802bc10 	.word	0x0802bc10
 8027530:	0802bc08 	.word	0x0802bc08
 8027534:	3331bb4c 	.word	0x3331bb4c
 8027538:	35ddea0e 	.word	0x35ddea0e
 802753c:	388ab355 	.word	0x388ab355
 8027540:	3b360b61 	.word	0x3b360b61
 8027544:	3e2aaaab 	.word	0x3e2aaaab
 8027548:	3fb8aa3b 	.word	0x3fb8aa3b
 802754c:	0802bc18 	.word	0x0802bc18
 8027550:	3f317180 	.word	0x3f317180
 8027554:	3717f7d1 	.word	0x3717f7d1
 8027558:	7149f2ca 	.word	0x7149f2ca

0802755c <scalbn>:
 802755c:	004b      	lsls	r3, r1, #1
 802755e:	b570      	push	{r4, r5, r6, lr}
 8027560:	0d5b      	lsrs	r3, r3, #21
 8027562:	0014      	movs	r4, r2
 8027564:	000d      	movs	r5, r1
 8027566:	2b00      	cmp	r3, #0
 8027568:	d10f      	bne.n	802758a <scalbn+0x2e>
 802756a:	004b      	lsls	r3, r1, #1
 802756c:	085b      	lsrs	r3, r3, #1
 802756e:	4303      	orrs	r3, r0
 8027570:	d012      	beq.n	8027598 <scalbn+0x3c>
 8027572:	4b23      	ldr	r3, [pc, #140]	@ (8027600 <scalbn+0xa4>)
 8027574:	2200      	movs	r2, #0
 8027576:	f7db f861 	bl	800263c <__aeabi_dmul>
 802757a:	4b22      	ldr	r3, [pc, #136]	@ (8027604 <scalbn+0xa8>)
 802757c:	429c      	cmp	r4, r3
 802757e:	da0c      	bge.n	802759a <scalbn+0x3e>
 8027580:	4a21      	ldr	r2, [pc, #132]	@ (8027608 <scalbn+0xac>)
 8027582:	4b22      	ldr	r3, [pc, #136]	@ (802760c <scalbn+0xb0>)
 8027584:	f7db f85a 	bl	800263c <__aeabi_dmul>
 8027588:	e006      	b.n	8027598 <scalbn+0x3c>
 802758a:	4a21      	ldr	r2, [pc, #132]	@ (8027610 <scalbn+0xb4>)
 802758c:	4293      	cmp	r3, r2
 802758e:	d108      	bne.n	80275a2 <scalbn+0x46>
 8027590:	0002      	movs	r2, r0
 8027592:	000b      	movs	r3, r1
 8027594:	f7da f8aa 	bl	80016ec <__aeabi_dadd>
 8027598:	bd70      	pop	{r4, r5, r6, pc}
 802759a:	000d      	movs	r5, r1
 802759c:	004b      	lsls	r3, r1, #1
 802759e:	0d5b      	lsrs	r3, r3, #21
 80275a0:	3b36      	subs	r3, #54	@ 0x36
 80275a2:	4a1c      	ldr	r2, [pc, #112]	@ (8027614 <scalbn+0xb8>)
 80275a4:	4294      	cmp	r4, r2
 80275a6:	dd0a      	ble.n	80275be <scalbn+0x62>
 80275a8:	4c1b      	ldr	r4, [pc, #108]	@ (8027618 <scalbn+0xbc>)
 80275aa:	4d1c      	ldr	r5, [pc, #112]	@ (802761c <scalbn+0xc0>)
 80275ac:	2900      	cmp	r1, #0
 80275ae:	da01      	bge.n	80275b4 <scalbn+0x58>
 80275b0:	4c19      	ldr	r4, [pc, #100]	@ (8027618 <scalbn+0xbc>)
 80275b2:	4d1b      	ldr	r5, [pc, #108]	@ (8027620 <scalbn+0xc4>)
 80275b4:	4a18      	ldr	r2, [pc, #96]	@ (8027618 <scalbn+0xbc>)
 80275b6:	4b19      	ldr	r3, [pc, #100]	@ (802761c <scalbn+0xc0>)
 80275b8:	0020      	movs	r0, r4
 80275ba:	0029      	movs	r1, r5
 80275bc:	e7e2      	b.n	8027584 <scalbn+0x28>
 80275be:	18e2      	adds	r2, r4, r3
 80275c0:	4b18      	ldr	r3, [pc, #96]	@ (8027624 <scalbn+0xc8>)
 80275c2:	429a      	cmp	r2, r3
 80275c4:	dcf0      	bgt.n	80275a8 <scalbn+0x4c>
 80275c6:	2a00      	cmp	r2, #0
 80275c8:	dd05      	ble.n	80275d6 <scalbn+0x7a>
 80275ca:	4b17      	ldr	r3, [pc, #92]	@ (8027628 <scalbn+0xcc>)
 80275cc:	0512      	lsls	r2, r2, #20
 80275ce:	402b      	ands	r3, r5
 80275d0:	431a      	orrs	r2, r3
 80275d2:	0011      	movs	r1, r2
 80275d4:	e7e0      	b.n	8027598 <scalbn+0x3c>
 80275d6:	0013      	movs	r3, r2
 80275d8:	3335      	adds	r3, #53	@ 0x35
 80275da:	da08      	bge.n	80275ee <scalbn+0x92>
 80275dc:	4c0a      	ldr	r4, [pc, #40]	@ (8027608 <scalbn+0xac>)
 80275de:	4d0b      	ldr	r5, [pc, #44]	@ (802760c <scalbn+0xb0>)
 80275e0:	2900      	cmp	r1, #0
 80275e2:	da01      	bge.n	80275e8 <scalbn+0x8c>
 80275e4:	4c08      	ldr	r4, [pc, #32]	@ (8027608 <scalbn+0xac>)
 80275e6:	4d11      	ldr	r5, [pc, #68]	@ (802762c <scalbn+0xd0>)
 80275e8:	4a07      	ldr	r2, [pc, #28]	@ (8027608 <scalbn+0xac>)
 80275ea:	4b08      	ldr	r3, [pc, #32]	@ (802760c <scalbn+0xb0>)
 80275ec:	e7e4      	b.n	80275b8 <scalbn+0x5c>
 80275ee:	4b0e      	ldr	r3, [pc, #56]	@ (8027628 <scalbn+0xcc>)
 80275f0:	3236      	adds	r2, #54	@ 0x36
 80275f2:	401d      	ands	r5, r3
 80275f4:	0512      	lsls	r2, r2, #20
 80275f6:	432a      	orrs	r2, r5
 80275f8:	0011      	movs	r1, r2
 80275fa:	4b0d      	ldr	r3, [pc, #52]	@ (8027630 <scalbn+0xd4>)
 80275fc:	2200      	movs	r2, #0
 80275fe:	e7c1      	b.n	8027584 <scalbn+0x28>
 8027600:	43500000 	.word	0x43500000
 8027604:	ffff3cb0 	.word	0xffff3cb0
 8027608:	c2f8f359 	.word	0xc2f8f359
 802760c:	01a56e1f 	.word	0x01a56e1f
 8027610:	000007ff 	.word	0x000007ff
 8027614:	0000c350 	.word	0x0000c350
 8027618:	8800759c 	.word	0x8800759c
 802761c:	7e37e43c 	.word	0x7e37e43c
 8027620:	fe37e43c 	.word	0xfe37e43c
 8027624:	000007fe 	.word	0x000007fe
 8027628:	800fffff 	.word	0x800fffff
 802762c:	81a56e1f 	.word	0x81a56e1f
 8027630:	3c900000 	.word	0x3c900000

08027634 <with_errno>:
 8027634:	b570      	push	{r4, r5, r6, lr}
 8027636:	000d      	movs	r5, r1
 8027638:	0016      	movs	r6, r2
 802763a:	0004      	movs	r4, r0
 802763c:	f7fc fb10 	bl	8023c60 <__errno>
 8027640:	0029      	movs	r1, r5
 8027642:	6006      	str	r6, [r0, #0]
 8027644:	0020      	movs	r0, r4
 8027646:	bd70      	pop	{r4, r5, r6, pc}

08027648 <xflow>:
 8027648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802764a:	0014      	movs	r4, r2
 802764c:	001d      	movs	r5, r3
 802764e:	2800      	cmp	r0, #0
 8027650:	d002      	beq.n	8027658 <xflow+0x10>
 8027652:	2180      	movs	r1, #128	@ 0x80
 8027654:	0609      	lsls	r1, r1, #24
 8027656:	185b      	adds	r3, r3, r1
 8027658:	9200      	str	r2, [sp, #0]
 802765a:	9301      	str	r3, [sp, #4]
 802765c:	9a00      	ldr	r2, [sp, #0]
 802765e:	9b01      	ldr	r3, [sp, #4]
 8027660:	0020      	movs	r0, r4
 8027662:	0029      	movs	r1, r5
 8027664:	f7da ffea 	bl	800263c <__aeabi_dmul>
 8027668:	2222      	movs	r2, #34	@ 0x22
 802766a:	f7ff ffe3 	bl	8027634 <with_errno>
 802766e:	b003      	add	sp, #12
 8027670:	bd30      	pop	{r4, r5, pc}

08027672 <__math_uflow>:
 8027672:	2380      	movs	r3, #128	@ 0x80
 8027674:	b510      	push	{r4, lr}
 8027676:	2200      	movs	r2, #0
 8027678:	055b      	lsls	r3, r3, #21
 802767a:	f7ff ffe5 	bl	8027648 <xflow>
 802767e:	bd10      	pop	{r4, pc}

08027680 <__math_oflow>:
 8027680:	23e0      	movs	r3, #224	@ 0xe0
 8027682:	b510      	push	{r4, lr}
 8027684:	2200      	movs	r2, #0
 8027686:	05db      	lsls	r3, r3, #23
 8027688:	f7ff ffde 	bl	8027648 <xflow>
 802768c:	bd10      	pop	{r4, pc}

0802768e <with_errnof>:
 802768e:	b570      	push	{r4, r5, r6, lr}
 8027690:	000d      	movs	r5, r1
 8027692:	1c04      	adds	r4, r0, #0
 8027694:	f7fc fae4 	bl	8023c60 <__errno>
 8027698:	6005      	str	r5, [r0, #0]
 802769a:	1c20      	adds	r0, r4, #0
 802769c:	bd70      	pop	{r4, r5, r6, pc}

0802769e <xflowf>:
 802769e:	b510      	push	{r4, lr}
 80276a0:	1c0b      	adds	r3, r1, #0
 80276a2:	2800      	cmp	r0, #0
 80276a4:	d002      	beq.n	80276ac <xflowf+0xe>
 80276a6:	2380      	movs	r3, #128	@ 0x80
 80276a8:	061b      	lsls	r3, r3, #24
 80276aa:	18cb      	adds	r3, r1, r3
 80276ac:	1c18      	adds	r0, r3, #0
 80276ae:	f7d9 fc77 	bl	8000fa0 <__aeabi_fmul>
 80276b2:	2122      	movs	r1, #34	@ 0x22
 80276b4:	f7ff ffeb 	bl	802768e <with_errnof>
 80276b8:	bd10      	pop	{r4, pc}

080276ba <__math_uflowf>:
 80276ba:	2180      	movs	r1, #128	@ 0x80
 80276bc:	b510      	push	{r4, lr}
 80276be:	0549      	lsls	r1, r1, #21
 80276c0:	f7ff ffed 	bl	802769e <xflowf>
 80276c4:	bd10      	pop	{r4, pc}

080276c6 <__math_oflowf>:
 80276c6:	21e0      	movs	r1, #224	@ 0xe0
 80276c8:	b510      	push	{r4, lr}
 80276ca:	05c9      	lsls	r1, r1, #23
 80276cc:	f7ff ffe7 	bl	802769e <xflowf>
 80276d0:	bd10      	pop	{r4, pc}
	...

080276d4 <__ieee754_sqrt>:
 80276d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276d6:	000a      	movs	r2, r1
 80276d8:	000d      	movs	r5, r1
 80276da:	496d      	ldr	r1, [pc, #436]	@ (8027890 <__ieee754_sqrt+0x1bc>)
 80276dc:	0004      	movs	r4, r0
 80276de:	0003      	movs	r3, r0
 80276e0:	0008      	movs	r0, r1
 80276e2:	b087      	sub	sp, #28
 80276e4:	4028      	ands	r0, r5
 80276e6:	4288      	cmp	r0, r1
 80276e8:	d111      	bne.n	802770e <__ieee754_sqrt+0x3a>
 80276ea:	0022      	movs	r2, r4
 80276ec:	002b      	movs	r3, r5
 80276ee:	0020      	movs	r0, r4
 80276f0:	0029      	movs	r1, r5
 80276f2:	f7da ffa3 	bl	800263c <__aeabi_dmul>
 80276f6:	0002      	movs	r2, r0
 80276f8:	000b      	movs	r3, r1
 80276fa:	0020      	movs	r0, r4
 80276fc:	0029      	movs	r1, r5
 80276fe:	f7d9 fff5 	bl	80016ec <__aeabi_dadd>
 8027702:	0004      	movs	r4, r0
 8027704:	000d      	movs	r5, r1
 8027706:	0020      	movs	r0, r4
 8027708:	0029      	movs	r1, r5
 802770a:	b007      	add	sp, #28
 802770c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802770e:	2d00      	cmp	r5, #0
 8027710:	dc11      	bgt.n	8027736 <__ieee754_sqrt+0x62>
 8027712:	0069      	lsls	r1, r5, #1
 8027714:	0849      	lsrs	r1, r1, #1
 8027716:	4321      	orrs	r1, r4
 8027718:	d0f5      	beq.n	8027706 <__ieee754_sqrt+0x32>
 802771a:	2000      	movs	r0, #0
 802771c:	4285      	cmp	r5, r0
 802771e:	d010      	beq.n	8027742 <__ieee754_sqrt+0x6e>
 8027720:	0022      	movs	r2, r4
 8027722:	002b      	movs	r3, r5
 8027724:	0020      	movs	r0, r4
 8027726:	0029      	movs	r1, r5
 8027728:	f7db fa50 	bl	8002bcc <__aeabi_dsub>
 802772c:	0002      	movs	r2, r0
 802772e:	000b      	movs	r3, r1
 8027730:	f7da fb40 	bl	8001db4 <__aeabi_ddiv>
 8027734:	e7e5      	b.n	8027702 <__ieee754_sqrt+0x2e>
 8027736:	1528      	asrs	r0, r5, #20
 8027738:	d115      	bne.n	8027766 <__ieee754_sqrt+0x92>
 802773a:	2480      	movs	r4, #128	@ 0x80
 802773c:	2100      	movs	r1, #0
 802773e:	0364      	lsls	r4, r4, #13
 8027740:	e007      	b.n	8027752 <__ieee754_sqrt+0x7e>
 8027742:	0ada      	lsrs	r2, r3, #11
 8027744:	3815      	subs	r0, #21
 8027746:	055b      	lsls	r3, r3, #21
 8027748:	2a00      	cmp	r2, #0
 802774a:	d0fa      	beq.n	8027742 <__ieee754_sqrt+0x6e>
 802774c:	e7f5      	b.n	802773a <__ieee754_sqrt+0x66>
 802774e:	0052      	lsls	r2, r2, #1
 8027750:	3101      	adds	r1, #1
 8027752:	4222      	tst	r2, r4
 8027754:	d0fb      	beq.n	802774e <__ieee754_sqrt+0x7a>
 8027756:	1e4c      	subs	r4, r1, #1
 8027758:	1b00      	subs	r0, r0, r4
 802775a:	2420      	movs	r4, #32
 802775c:	001d      	movs	r5, r3
 802775e:	1a64      	subs	r4, r4, r1
 8027760:	40e5      	lsrs	r5, r4
 8027762:	408b      	lsls	r3, r1
 8027764:	432a      	orrs	r2, r5
 8027766:	494b      	ldr	r1, [pc, #300]	@ (8027894 <__ieee754_sqrt+0x1c0>)
 8027768:	0312      	lsls	r2, r2, #12
 802776a:	1844      	adds	r4, r0, r1
 802776c:	2180      	movs	r1, #128	@ 0x80
 802776e:	0b12      	lsrs	r2, r2, #12
 8027770:	0349      	lsls	r1, r1, #13
 8027772:	4311      	orrs	r1, r2
 8027774:	07c0      	lsls	r0, r0, #31
 8027776:	d403      	bmi.n	8027780 <__ieee754_sqrt+0xac>
 8027778:	0fda      	lsrs	r2, r3, #31
 802777a:	0049      	lsls	r1, r1, #1
 802777c:	1851      	adds	r1, r2, r1
 802777e:	005b      	lsls	r3, r3, #1
 8027780:	2500      	movs	r5, #0
 8027782:	1062      	asrs	r2, r4, #1
 8027784:	0049      	lsls	r1, r1, #1
 8027786:	2480      	movs	r4, #128	@ 0x80
 8027788:	9205      	str	r2, [sp, #20]
 802778a:	0fda      	lsrs	r2, r3, #31
 802778c:	1852      	adds	r2, r2, r1
 802778e:	2016      	movs	r0, #22
 8027790:	0029      	movs	r1, r5
 8027792:	005b      	lsls	r3, r3, #1
 8027794:	03a4      	lsls	r4, r4, #14
 8027796:	190e      	adds	r6, r1, r4
 8027798:	4296      	cmp	r6, r2
 802779a:	dc02      	bgt.n	80277a2 <__ieee754_sqrt+0xce>
 802779c:	1931      	adds	r1, r6, r4
 802779e:	1b92      	subs	r2, r2, r6
 80277a0:	192d      	adds	r5, r5, r4
 80277a2:	0fde      	lsrs	r6, r3, #31
 80277a4:	0052      	lsls	r2, r2, #1
 80277a6:	3801      	subs	r0, #1
 80277a8:	1992      	adds	r2, r2, r6
 80277aa:	005b      	lsls	r3, r3, #1
 80277ac:	0864      	lsrs	r4, r4, #1
 80277ae:	2800      	cmp	r0, #0
 80277b0:	d1f1      	bne.n	8027796 <__ieee754_sqrt+0xc2>
 80277b2:	2620      	movs	r6, #32
 80277b4:	2780      	movs	r7, #128	@ 0x80
 80277b6:	0004      	movs	r4, r0
 80277b8:	9604      	str	r6, [sp, #16]
 80277ba:	063f      	lsls	r7, r7, #24
 80277bc:	19c6      	adds	r6, r0, r7
 80277be:	46b4      	mov	ip, r6
 80277c0:	4291      	cmp	r1, r2
 80277c2:	db02      	blt.n	80277ca <__ieee754_sqrt+0xf6>
 80277c4:	d114      	bne.n	80277f0 <__ieee754_sqrt+0x11c>
 80277c6:	429e      	cmp	r6, r3
 80277c8:	d812      	bhi.n	80277f0 <__ieee754_sqrt+0x11c>
 80277ca:	4660      	mov	r0, ip
 80277cc:	4666      	mov	r6, ip
 80277ce:	19c0      	adds	r0, r0, r7
 80277d0:	9100      	str	r1, [sp, #0]
 80277d2:	2e00      	cmp	r6, #0
 80277d4:	da03      	bge.n	80277de <__ieee754_sqrt+0x10a>
 80277d6:	43c6      	mvns	r6, r0
 80277d8:	0ff6      	lsrs	r6, r6, #31
 80277da:	198e      	adds	r6, r1, r6
 80277dc:	9600      	str	r6, [sp, #0]
 80277de:	1a52      	subs	r2, r2, r1
 80277e0:	4563      	cmp	r3, ip
 80277e2:	4189      	sbcs	r1, r1
 80277e4:	4249      	negs	r1, r1
 80277e6:	1a52      	subs	r2, r2, r1
 80277e8:	4661      	mov	r1, ip
 80277ea:	1a5b      	subs	r3, r3, r1
 80277ec:	9900      	ldr	r1, [sp, #0]
 80277ee:	19e4      	adds	r4, r4, r7
 80277f0:	0fde      	lsrs	r6, r3, #31
 80277f2:	0052      	lsls	r2, r2, #1
 80277f4:	1992      	adds	r2, r2, r6
 80277f6:	9e04      	ldr	r6, [sp, #16]
 80277f8:	005b      	lsls	r3, r3, #1
 80277fa:	3e01      	subs	r6, #1
 80277fc:	087f      	lsrs	r7, r7, #1
 80277fe:	9604      	str	r6, [sp, #16]
 8027800:	2e00      	cmp	r6, #0
 8027802:	d1db      	bne.n	80277bc <__ieee754_sqrt+0xe8>
 8027804:	431a      	orrs	r2, r3
 8027806:	d01f      	beq.n	8027848 <__ieee754_sqrt+0x174>
 8027808:	4e23      	ldr	r6, [pc, #140]	@ (8027898 <__ieee754_sqrt+0x1c4>)
 802780a:	4f24      	ldr	r7, [pc, #144]	@ (802789c <__ieee754_sqrt+0x1c8>)
 802780c:	6830      	ldr	r0, [r6, #0]
 802780e:	6871      	ldr	r1, [r6, #4]
 8027810:	683a      	ldr	r2, [r7, #0]
 8027812:	687b      	ldr	r3, [r7, #4]
 8027814:	9200      	str	r2, [sp, #0]
 8027816:	9301      	str	r3, [sp, #4]
 8027818:	6832      	ldr	r2, [r6, #0]
 802781a:	6873      	ldr	r3, [r6, #4]
 802781c:	9202      	str	r2, [sp, #8]
 802781e:	9303      	str	r3, [sp, #12]
 8027820:	9a00      	ldr	r2, [sp, #0]
 8027822:	9b01      	ldr	r3, [sp, #4]
 8027824:	f7db f9d2 	bl	8002bcc <__aeabi_dsub>
 8027828:	0002      	movs	r2, r0
 802782a:	000b      	movs	r3, r1
 802782c:	9802      	ldr	r0, [sp, #8]
 802782e:	9903      	ldr	r1, [sp, #12]
 8027830:	f7d8 fe4e 	bl	80004d0 <__aeabi_dcmple>
 8027834:	2800      	cmp	r0, #0
 8027836:	d007      	beq.n	8027848 <__ieee754_sqrt+0x174>
 8027838:	6830      	ldr	r0, [r6, #0]
 802783a:	6871      	ldr	r1, [r6, #4]
 802783c:	683a      	ldr	r2, [r7, #0]
 802783e:	687b      	ldr	r3, [r7, #4]
 8027840:	1c67      	adds	r7, r4, #1
 8027842:	d10f      	bne.n	8027864 <__ieee754_sqrt+0x190>
 8027844:	9c04      	ldr	r4, [sp, #16]
 8027846:	3501      	adds	r5, #1
 8027848:	4b15      	ldr	r3, [pc, #84]	@ (80278a0 <__ieee754_sqrt+0x1cc>)
 802784a:	106a      	asrs	r2, r5, #1
 802784c:	18d2      	adds	r2, r2, r3
 802784e:	0863      	lsrs	r3, r4, #1
 8027850:	07ed      	lsls	r5, r5, #31
 8027852:	d502      	bpl.n	802785a <__ieee754_sqrt+0x186>
 8027854:	2180      	movs	r1, #128	@ 0x80
 8027856:	0609      	lsls	r1, r1, #24
 8027858:	430b      	orrs	r3, r1
 802785a:	9905      	ldr	r1, [sp, #20]
 802785c:	001c      	movs	r4, r3
 802785e:	0509      	lsls	r1, r1, #20
 8027860:	188d      	adds	r5, r1, r2
 8027862:	e750      	b.n	8027706 <__ieee754_sqrt+0x32>
 8027864:	f7d9 ff42 	bl	80016ec <__aeabi_dadd>
 8027868:	6877      	ldr	r7, [r6, #4]
 802786a:	6836      	ldr	r6, [r6, #0]
 802786c:	0002      	movs	r2, r0
 802786e:	000b      	movs	r3, r1
 8027870:	0030      	movs	r0, r6
 8027872:	0039      	movs	r1, r7
 8027874:	f7d8 fe22 	bl	80004bc <__aeabi_dcmplt>
 8027878:	2800      	cmp	r0, #0
 802787a:	d004      	beq.n	8027886 <__ieee754_sqrt+0x1b2>
 802787c:	3402      	adds	r4, #2
 802787e:	4263      	negs	r3, r4
 8027880:	4163      	adcs	r3, r4
 8027882:	18ed      	adds	r5, r5, r3
 8027884:	e7e0      	b.n	8027848 <__ieee754_sqrt+0x174>
 8027886:	2301      	movs	r3, #1
 8027888:	3401      	adds	r4, #1
 802788a:	439c      	bics	r4, r3
 802788c:	e7dc      	b.n	8027848 <__ieee754_sqrt+0x174>
 802788e:	46c0      	nop			@ (mov r8, r8)
 8027890:	7ff00000 	.word	0x7ff00000
 8027894:	fffffc01 	.word	0xfffffc01
 8027898:	20000440 	.word	0x20000440
 802789c:	20000438 	.word	0x20000438
 80278a0:	3fe00000 	.word	0x3fe00000

080278a4 <_init>:
 80278a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278a6:	46c0      	nop			@ (mov r8, r8)
 80278a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80278aa:	bc08      	pop	{r3}
 80278ac:	469e      	mov	lr, r3
 80278ae:	4770      	bx	lr

080278b0 <_fini>:
 80278b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278b2:	46c0      	nop			@ (mov r8, r8)
 80278b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80278b6:	bc08      	pop	{r3}
 80278b8:	469e      	mov	lr, r3
 80278ba:	4770      	bx	lr
